
IMU_Interface_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c504  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0801c7a8  0801c7a8  0001d7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d6b8  0801d6b8  0001f300  2**0
                  CONTENTS
  4 .ARM          00000008  0801d6b8  0801d6b8  0001e6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d6c0  0801d6c0  0001f300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d6c0  0801d6c0  0001e6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d6c8  0801d6c8  0001e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  24000000  0801d6cc  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d08  24000300  0801d9cc  0001f300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24013008  0801d9cc  00020008  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295eb  00000000  00000000  0001f32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055c5  00000000  00000000  00048919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0004dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d8  00000000  00000000  0004fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000427ad  00000000  00000000  00051130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002967e  00000000  00000000  000938dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f660  00000000  00000000  000bcf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0025c5bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008348  00000000  00000000  0025c634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0026497c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c78c 	.word	0x0801c78c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	0801c78c 	.word	0x0801c78c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO055_READ_HSEM>:
		HAL_HSEM_Release(HSEM_ID_1,0);
	}
}

#else
void BNO055_READ_HSEM(BNO055_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8000748:	2001      	movs	r0, #1
 800074a:	f004 fffb 	bl	8005744 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d178      	bne.n	8000846 <BNO055_READ_HSEM+0x106>
		bno->quat.x = SRAM4_BNO055->Data[1];
 8000754:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000756:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = SRAM4_BNO055->Data[2];
 8000760:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = SRAM4_BNO055->Data[3];
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800076e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = SRAM4_BNO055->Data[4];
 8000778:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

		bno->lin_acc.x = SRAM4_BNO055->Data[5];
 8000784:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = SRAM4_BNO055->Data[6];
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000792:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = SRAM4_BNO055->Data[7];
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800079e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->gyro.x = SRAM4_BNO055->Data[8];
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		bno->gyro.y = SRAM4_BNO055->Data[9];
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		bno->gyro.z = SRAM4_BNO055->Data[10];
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		bno->mag.x = SRAM4_BNO055->Data[11];
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bno->mag.y = SRAM4_BNO055->Data[12];
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		bno->mag.z = SRAM4_BNO055->Data[13];
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		bno->accel.x = SRAM4_BNO055->Data[14];
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bno->accel.y = SRAM4_BNO055->Data[15];
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bno->accel.z = SRAM4_BNO055->Data[16];
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800080a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	e9c1 2306 	strd	r2, r3, [r1, #24]

		bno->euler.roll = SRAM4_BNO055->Data[17];
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000816:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		bno->euler.pitch = SRAM4_BNO055->Data[18];
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000822:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		bno->euler.yaw = SRAM4_BNO055->Data[19];
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800082e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->State1 = 1;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_Release(HSEM_ID_1,0);
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f004 ff99 	bl	8005778 <HAL_HSEM_Release>

	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	38002000 	.word	0x38002000

08000854 <BNO086_READ_HSEM>:
		}
	}
}
#else

void BNO086_READ_HSEM(BNO086_t *bno){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 800085c:	2000      	movs	r0, #0
 800085e:	f004 ff71 	bl	8005744 <HAL_HSEM_FastTake>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	f040 80b3 	bne.w	80009d0 <BNO086_READ_HSEM+0x17c>
    	bno->quaternion.i = SRAM4_BNO086->Data[0];
 800086a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800086e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4_BNO086->Data[1];
 800087c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000880:	ed93 7b04 	vldr	d7, [r3, #16]
 8000884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4_BNO086->Data[2];
 800088e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000892:	ed93 7b06 	vldr	d7, [r3, #24]
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4_BNO086->Data[3];
 80008a0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008a4:	ed93 7b08 	vldr	d7, [r3, #32]
 80008a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4_BNO086->Data[4];
 80008b2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008b6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80008ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4_BNO086->Data[5];
 80008c4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008c8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80008cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4_BNO086->Data[6];
 80008d6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008da:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80008de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4_BNO086->Data[7];
 80008e8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008ec:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80008f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4_BNO086->Data[8];
 80008fa:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008fe:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8000902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4_BNO086->Data[9];
 800090c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000910:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4_BNO086->Data[10];
 800091e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000922:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4_BNO086->Data[11];
 8000930:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000934:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4_BNO086->Data[12];
 8000942:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000946:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800094a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4_BNO086->Data[13];
 8000954:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000958:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800095c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4_BNO086->Data[14];
 8000966:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800096a:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800096e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4_BNO086->Data[15];
 8000978:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800097c:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8000980:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4_BNO086->Data[16];
 800098a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800098e:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 8000992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4_BNO086->Data[17];
 800099c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009a0:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80009a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4_BNO086->Data[18];
 80009ae:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009b2:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80009b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		SRAM4_BNO086->State1 = 1;
 80009c0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f004 fed4 	bl	8005778 <HAL_HSEM_Release>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009dc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <SystemInit+0xfc>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad4 <SystemInit+0xfc>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80009ec:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <SystemInit+0xfc>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	4a38      	ldr	r2, [pc, #224]	@ (8000ad4 <SystemInit+0xfc>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009f8:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <SystemInit+0x100>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d807      	bhi.n	8000a14 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a04:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <SystemInit+0x100>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 030f 	bic.w	r3, r3, #15
 8000a0c:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <SystemInit+0x100>)
 8000a0e:	f043 0307 	orr.w	r3, r3, #7
 8000a12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a14:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <SystemInit+0x104>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a30      	ldr	r2, [pc, #192]	@ (8000adc <SystemInit+0x104>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <SystemInit+0x104>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <SystemInit+0x104>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	492c      	ldr	r1, [pc, #176]	@ (8000adc <SystemInit+0x104>)
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <SystemInit+0x108>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <SystemInit+0x100>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <SystemInit+0x100>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f023 030f 	bic.w	r3, r3, #15
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <SystemInit+0x100>)
 8000a48:	f043 0307 	orr.w	r3, r3, #7
 8000a4c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <SystemInit+0x104>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <SystemInit+0x104>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <SystemInit+0x104>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <SystemInit+0x104>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <SystemInit+0x10c>)
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <SystemInit+0x104>)
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <SystemInit+0x110>)
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <SystemInit+0x104>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <SystemInit+0x114>)
 8000a70:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <SystemInit+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SystemInit+0x104>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <SystemInit+0x114>)
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <SystemInit+0x104>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <SystemInit+0x104>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <SystemInit+0x114>)
 8000a88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <SystemInit+0x104>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <SystemInit+0x104>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <SystemInit+0x104>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SystemInit+0x104>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <SystemInit+0x118>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <SystemInit+0x118>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <SystemInit+0x11c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <SystemInit+0x120>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aba:	d202      	bcs.n	8000ac2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <SystemInit+0x124>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <SystemInit+0x128>)
 8000ac4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	52002000 	.word	0x52002000
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	01010280 	.word	0x01010280
 8000af0:	580000c0 	.word	0x580000c0
 8000af4:	5c001000 	.word	0x5c001000
 8000af8:	ffff0000 	.word	0xffff0000
 8000afc:	51008108 	.word	0x51008108
 8000b00:	52004000 	.word	0x52004000

08000b04 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000b10:	f00c f8ba 	bl	800cc88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b14:	4b5a      	ldr	r3, [pc, #360]	@ (8000c80 <pvPortMallocMicroROS+0x17c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000b1c:	f000 f986 	bl	8000e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b20:	4b58      	ldr	r3, [pc, #352]	@ (8000c84 <pvPortMallocMicroROS+0x180>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 8090 	bne.w	8000c4e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01e      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000b34:	2208      	movs	r2, #8
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d015      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f023 0307 	bic.w	r3, r3, #7
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b5e:	f383 8811 	msr	BASEPRI, r3
 8000b62:	f3bf 8f6f 	isb	sy
 8000b66:	f3bf 8f4f 	dsb	sy
 8000b6a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d06a      	beq.n	8000c4e <pvPortMallocMicroROS+0x14a>
 8000b78:	4b43      	ldr	r3, [pc, #268]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d865      	bhi.n	8000c4e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b82:	4b42      	ldr	r3, [pc, #264]	@ (8000c8c <pvPortMallocMicroROS+0x188>)
 8000b84:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <pvPortMallocMicroROS+0x188>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b8c:	e004      	b.n	8000b98 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d903      	bls.n	8000baa <pvPortMallocMicroROS+0xa6>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f1      	bne.n	8000b8e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000baa:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <pvPortMallocMicroROS+0x17c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d04c      	beq.n	8000c4e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2208      	movs	r2, #8
 8000bba:	4413      	add	r3, r2
 8000bbc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1ad2      	subs	r2, r2, r3
 8000bce:	2308      	movs	r3, #8
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d920      	bls.n	8000c18 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	613b      	str	r3, [r7, #16]
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c12:	69b8      	ldr	r0, [r7, #24]
 8000c14:	f000 f96c 	bl	8000ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <pvPortMallocMicroROS+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d203      	bcs.n	8000c3a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <pvPortMallocMicroROS+0x18c>)
 8000c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <pvPortMallocMicroROS+0x180>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c4e:	f00c f829 	bl	800cca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00b      	beq.n	8000c74 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	60fb      	str	r3, [r7, #12]
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000c74:	69fb      	ldr	r3, [r7, #28]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24003f24 	.word	0x24003f24
 8000c84:	24003f30 	.word	0x24003f30
 8000c88:	24003f28 	.word	0x24003f28
 8000c8c:	24003f1c 	.word	0x24003f1c
 8000c90:	24003f2c 	.word	0x24003f2c

08000c94 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d04a      	beq.n	8000d3c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	425b      	negs	r3, r3
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10b      	bne.n	8000cda <vPortFreeMicroROS+0x46>
	__asm volatile
 8000cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc6:	f383 8811 	msr	BASEPRI, r3
 8000cca:	f3bf 8f6f 	isb	sy
 8000cce:	f3bf 8f4f 	dsb	sy
 8000cd2:	60fb      	str	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	e7fd      	b.n	8000cd6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	60bb      	str	r3, [r7, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d019      	beq.n	8000d3c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d115      	bne.n	8000d3c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000d20:	f00b ffb2 	bl	800cc88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <vPortFreeMicroROS+0xb4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <vPortFreeMicroROS+0xb4>)
 8000d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f000 f8dc 	bl	8000ef0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000d38:	f00b ffb4 	bl	800cca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24003f30 	.word	0x24003f30
 8000d48:	24003f28 	.word	0x24003f28

08000d4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4413      	add	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <getBlockSize+0x38>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

	return count;
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	24003f30 	.word	0x24003f30

08000d88 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d92:	f00b ff79 	bl	800cc88 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff feb4 	bl	8000b04 <pvPortMallocMicroROS>
 8000d9c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d017      	beq.n	8000dd4 <pvPortReallocMicroROS+0x4c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffce 	bl	8000d4c <getBlockSize>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2208      	movs	r2, #8
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d201      	bcs.n	8000dc4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	68b8      	ldr	r0, [r7, #8]
 8000dca:	f01a fe9e 	bl	801bb0a <memcpy>

		vPortFreeMicroROS(pv);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff60 	bl	8000c94 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000dd4:	f00b ff66 	bl	800cca4 <xTaskResumeAll>

	return newmem;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000dec:	f00b ff4c 	bl	800cc88 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff fe82 	bl	8000b04 <pvPortMallocMicroROS>
 8000e00:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000e06:	e004      	b.n	8000e12 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	613a      	str	r2, [r7, #16]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	617a      	str	r2, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f5      	bne.n	8000e08 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000e1c:	f00b ff42 	bl	800cca4 <xTaskResumeAll>
  	return mem;
 8000e20:	68fb      	ldr	r3, [r7, #12]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <prvHeapInit+0xac>)
 8000e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3307      	adds	r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <prvHeapInit+0xac>)
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e64:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <prvHeapInit+0xb0>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <prvHeapInit+0xb0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000e78:	2208      	movs	r2, #8
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <prvHeapInit+0xb8>)
 8000eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <prvHeapInit+0xbc>)
 8000ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <prvHeapInit+0xc0>)
 8000ec6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	2400031c 	.word	0x2400031c
 8000edc:	24003f1c 	.word	0x24003f1c
 8000ee0:	24003f24 	.word	0x24003f24
 8000ee4:	24003f2c 	.word	0x24003f2c
 8000ee8:	24003f28 	.word	0x24003f28
 8000eec:	24003f30 	.word	0x24003f30

08000ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <prvInsertBlockIntoFreeList+0xac>)
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e002      	b.n	8000f04 <prvInsertBlockIntoFreeList+0x14>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8f7      	bhi.n	8000efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d108      	bne.n	8000f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	441a      	add	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d118      	bne.n	8000f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00d      	beq.n	8000f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e008      	b.n	8000f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e003      	b.n	8000f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d002      	beq.n	8000f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24003f1c 	.word	0x24003f1c
 8000fa0:	24003f24 	.word	0x24003f24

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2105      	movs	r1, #5
 8000fcc:	200e      	movs	r0, #14
 8000fce:	f001 fb99 	bl	8002704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fd2:	200e      	movs	r0, #14
 8000fd4:	f001 fbb0 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2105      	movs	r1, #5
 8000fdc:	200f      	movs	r0, #15
 8000fde:	f001 fb91 	bl	8002704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f001 fba8 	bl	8002738 <HAL_NVIC_EnableIRQ>

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001002:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001008:	4904      	ldr	r1, [pc, #16]	@ (800101c <cubemx_transport_open+0x28>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f008 f8a0 	bl	8009150 <HAL_UART_Receive_DMA>
    return true;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24003f34 	.word	0x24003f34

08001020 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800102e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f008 f8d9 	bl	80091e8 <HAL_UART_DMAStop>
    return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001054:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105c:	2b20      	cmp	r3, #32
 800105e:	d11b      	bne.n	8001098 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f007 fff1 	bl	8009050 <HAL_UART_Transmit_DMA>
 800106e:	4603      	mov	r3, r0
 8001070:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001072:	e002      	b.n	800107a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f00a f983 	bl	800b380 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <cubemx_transport_write+0x4a>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	2b20      	cmp	r3, #32
 8001088:	d1f4      	bne.n	8001074 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <cubemx_transport_write+0x54>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	e002      	b.n	800109a <cubemx_transport_write+0x5a>
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001098:	2300      	movs	r3, #0
    }
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010b8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
}
 80010c0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001234 <cubemx_transport_read+0x190>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d068      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a57      	ldr	r2, [pc, #348]	@ (8001238 <cubemx_transport_read+0x194>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d061      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a55      	ldr	r2, [pc, #340]	@ (800123c <cubemx_transport_read+0x198>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d05a      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <cubemx_transport_read+0x19c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d053      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a50      	ldr	r2, [pc, #320]	@ (8001244 <cubemx_transport_read+0x1a0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04c      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a4d      	ldr	r2, [pc, #308]	@ (8001248 <cubemx_transport_read+0x1a4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d045      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <cubemx_transport_read+0x1a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d03e      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <cubemx_transport_read+0x1ac>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d037      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a46      	ldr	r2, [pc, #280]	@ (8001254 <cubemx_transport_read+0x1b0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d030      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a43      	ldr	r2, [pc, #268]	@ (8001258 <cubemx_transport_read+0x1b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d029      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a41      	ldr	r2, [pc, #260]	@ (800125c <cubemx_transport_read+0x1b8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a3e      	ldr	r2, [pc, #248]	@ (8001260 <cubemx_transport_read+0x1bc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01b      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a3c      	ldr	r2, [pc, #240]	@ (8001264 <cubemx_transport_read+0x1c0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d014      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a39      	ldr	r2, [pc, #228]	@ (8001268 <cubemx_transport_read+0x1c4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <cubemx_transport_read+0x1c8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d006      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <cubemx_transport_read+0x1cc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d107      	bne.n	80011b2 <cubemx_transport_read+0x10e>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011b0:	e006      	b.n	80011c0 <cubemx_transport_read+0x11c>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001274 <cubemx_transport_read+0x1d0>)
 80011c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011c4:	b662      	cpsie	i
}
 80011c6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f00a f8d6 	bl	800b380 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <cubemx_transport_read+0x1d4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <cubemx_transport_read+0x1d0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d104      	bne.n	80011ea <cubemx_transport_read+0x146>
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f6ff af6a 	blt.w	80010be <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011ee:	e011      	b.n	8001214 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <cubemx_transport_read+0x1d4>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	440b      	add	r3, r1
 80011fa:	4920      	ldr	r1, [pc, #128]	@ (800127c <cubemx_transport_read+0x1d8>)
 80011fc:	5c8a      	ldrb	r2, [r1, r2]
 80011fe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <cubemx_transport_read+0x1d4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120a:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <cubemx_transport_read+0x1d4>)
 800120c:	6013      	str	r3, [r2, #0]
        wrote++;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <cubemx_transport_read+0x1d4>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <cubemx_transport_read+0x1d0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d003      	beq.n	8001228 <cubemx_transport_read+0x184>
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3e3      	bcc.n	80011f0 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001228:	69bb      	ldr	r3, [r7, #24]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020010 	.word	0x40020010
 8001238:	40020028 	.word	0x40020028
 800123c:	40020040 	.word	0x40020040
 8001240:	40020058 	.word	0x40020058
 8001244:	40020070 	.word	0x40020070
 8001248:	40020088 	.word	0x40020088
 800124c:	400200a0 	.word	0x400200a0
 8001250:	400200b8 	.word	0x400200b8
 8001254:	40020410 	.word	0x40020410
 8001258:	40020428 	.word	0x40020428
 800125c:	40020440 	.word	0x40020440
 8001260:	40020458 	.word	0x40020458
 8001264:	40020470 	.word	0x40020470
 8001268:	40020488 	.word	0x40020488
 800126c:	400204a0 	.word	0x400204a0
 8001270:	400204b8 	.word	0x400204b8
 8001274:	24004738 	.word	0x24004738
 8001278:	24004734 	.word	0x24004734
 800127c:	24003f34 	.word	0x24003f34

08001280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <MX_FREERTOS_Init+0x18>)
 8001286:	2100      	movs	r1, #0
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_FREERTOS_Init+0x1c>)
 800128a:	f009 ffe7 	bl	800b25c <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a03      	ldr	r2, [pc, #12]	@ (80012a0 <MX_FREERTOS_Init+0x20>)
 8001292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0801c848 	.word	0x0801c848
 800129c:	080012a5 	.word	0x080012a5
 80012a0:	24004864 	.word	0x24004864

080012a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a8:	b0ec      	sub	sp, #432	@ 0x1b0
 80012aa:	af02      	add	r7, sp, #8
 80012ac:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80012b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012b4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80012b6:	4b5d      	ldr	r3, [pc, #372]	@ (800142c <StartDefaultTask+0x188>)
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <StartDefaultTask+0x18c>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <StartDefaultTask+0x190>)
 80012c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001438 <StartDefaultTask+0x194>)
 80012c2:	495e      	ldr	r1, [pc, #376]	@ (800143c <StartDefaultTask+0x198>)
 80012c4:	2001      	movs	r0, #1
 80012c6:	f00d ff37 	bl	800f138 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012ca:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00d fe54 	bl	800ef7c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80012d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <StartDefaultTask+0x19c>)
 80012d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 80012da:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <StartDefaultTask+0x1a0>)
 80012dc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 80012e0:	4b59      	ldr	r3, [pc, #356]	@ (8001448 <StartDefaultTask+0x1a4>)
 80012e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80012e6:	4b59      	ldr	r3, [pc, #356]	@ (800144c <StartDefaultTask+0x1a8>)
 80012e8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80012ec:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fe51 	bl	800ef98 <rcutils_set_default_allocator>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8001302:	21bb      	movs	r1, #187	@ 0xbb
 8001304:	4852      	ldr	r0, [pc, #328]	@ (8001450 <StartDefaultTask+0x1ac>)
 8001306:	f01a f9b7 	bl	801b678 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(2);
 800130a:	4b52      	ldr	r3, [pc, #328]	@ (8001454 <StartDefaultTask+0x1b0>)
 800130c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8001310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001314:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * float64_multi_arr_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray);
 800131e:	f00f f8a1 	bl	8010464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001322:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 8001326:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800132a:	4618      	mov	r0, r3
 800132c:	f00d fe52 	bl	800efd4 <rcutils_get_default_allocator>
 8001330:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001334:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001338:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800133c:	461d      	mov	r5, r3
 800133e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8001346:	463b      	mov	r3, r7
 8001348:	4618      	mov	r0, r3
 800134a:	f00d fa4b 	bl	800e7e4 <rclc_executor_get_zero_initialized_executor>
 800134e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001352:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8001356:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800135a:	4611      	mov	r1, r2
 800135c:	2288      	movs	r2, #136	@ 0x88
 800135e:	4618      	mov	r0, r3
 8001360:	f01a fbd3 	bl	801bb0a <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8001364:	f00c fcda 	bl	800dd1c <rcl_get_zero_initialized_init_options>
 8001368:	4602      	mov	r2, r0
 800136a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800136e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001372:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001374:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001378:	466a      	mov	r2, sp
 800137a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800137e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001382:	e882 0003 	stmia.w	r2, {r0, r1}
 8001386:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	4620      	mov	r0, r4
 800138e:	f00c fcc7 	bl	800dd20 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 8001392:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001396:	21c6      	movs	r1, #198	@ 0xc6
 8001398:	4618      	mov	r0, r3
 800139a:	f00c fdbf 	bl	800df1c <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800139e:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80013a2:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80013a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	f00d fcf9 	bl	800eda8 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 80013b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80013ba:	2200      	movs	r2, #0
 80013bc:	4698      	mov	r8, r3
 80013be:	4691      	mov	r9, r2
 80013c0:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80013c4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <StartDefaultTask+0x1b4>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4642      	mov	r2, r8
 80013ce:	464b      	mov	r3, r9
 80013d0:	f00d fd9c 	bl	800ef0c <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 80013d4:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80013d8:	4a20      	ldr	r2, [pc, #128]	@ (800145c <StartDefaultTask+0x1b8>)
 80013da:	4921      	ldr	r1, [pc, #132]	@ (8001460 <StartDefaultTask+0x1bc>)
 80013dc:	4821      	ldr	r0, [pc, #132]	@ (8001464 <StartDefaultTask+0x1c0>)
 80013de:	f00d fd19 	bl	800ee14 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&f64array_pub, &node, float64_multi_arr_type_support, "cubemx_imu_data");
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <StartDefaultTask+0x1c4>)
 80013e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013e8:	491e      	ldr	r1, [pc, #120]	@ (8001464 <StartDefaultTask+0x1c0>)
 80013ea:	4820      	ldr	r0, [pc, #128]	@ (800146c <StartDefaultTask+0x1c8>)
 80013ec:	f00d fd54 	bl	800ee98 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80013f0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80013f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013f8:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80013fc:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001400:	f00d f9fa 	bl	800e7f8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8001404:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001408:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f00d fa6e 	bl	800e8f0 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 8001414:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001418:	4618      	mov	r0, r3
 800141a:	f00d fc83 	bl	800ed24 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 800141e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8001422:	f00e fc97 	bl	800fd54 <rmw_uros_sync_session>

	for(;;)
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <StartDefaultTask+0x182>
 800142a:	bf00      	nop
 800142c:	080010a5 	.word	0x080010a5
 8001430:	08001041 	.word	0x08001041
 8001434:	08001021 	.word	0x08001021
 8001438:	08000ff5 	.word	0x08000ff5
 800143c:	240098d4 	.word	0x240098d4
 8001440:	08001b45 	.word	0x08001b45
 8001444:	08001b89 	.word	0x08001b89
 8001448:	08001bc1 	.word	0x08001bc1
 800144c:	08001c2d 	.word	0x08001c2d
 8001450:	0801c7b4 	.word	0x0801c7b4
 8001454:	001e8480 	.word	0x001e8480
 8001458:	08001471 	.word	0x08001471
 800145c:	0801c7dc 	.word	0x0801c7dc
 8001460:	0801c7e0 	.word	0x0801c7e0
 8001464:	2400473c 	.word	0x2400473c
 8001468:	0801c7f0 	.word	0x0801c7f0
 800146c:	24004744 	.word	0x24004744

08001470 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00d      	beq.n	800149e <timer_callback+0x2e>
		SensorsPublished();
 8001482:	f000 f815 	bl	80014b0 <SensorsPublished>
		if (sync_counter++ >= 254) {  // Sync session at lower frequency
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <timer_callback+0x38>)
 8001488:	f993 3000 	ldrsb.w	r3, [r3]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b25a      	sxtb	r2, r3
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <timer_callback+0x38>)
 8001496:	701a      	strb	r2, [r3, #0]
			rmw_uros_sync_session(1000);
			sync_counter = 0;
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <timer_callback+0x3c>)
 800149a:	f004 f9e2 	bl	8005862 <HAL_IWDG_Refresh>
	}

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24004860 	.word	0x24004860
 80014ac:	240096e4 	.word	0x240096e4

080014b0 <SensorsPublished>:

void SensorsPublished(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0


	// IMU_086 acceleration
	f64array_msg.data.data[0] = IMU_086_FRTOS.acceleration.x;
 80014b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001748 <SensorsPublished+0x298>)
 80014b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ba:	4ba4      	ldr	r3, [pc, #656]	@ (800174c <SensorsPublished+0x29c>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c2:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[1] = IMU_086_FRTOS.acceleration.y;
 80014c6:	4ba0      	ldr	r3, [pc, #640]	@ (8001748 <SensorsPublished+0x298>)
 80014c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80014cc:	4b9f      	ldr	r3, [pc, #636]	@ (800174c <SensorsPublished+0x29c>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	3308      	adds	r3, #8
 80014d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d6:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[2] = IMU_086_FRTOS.acceleration.z;
 80014da:	4b9b      	ldr	r3, [pc, #620]	@ (8001748 <SensorsPublished+0x298>)
 80014dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80014e0:	4b9a      	ldr	r3, [pc, #616]	@ (800174c <SensorsPublished+0x29c>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	3310      	adds	r3, #16
 80014e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ea:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 linear acceleration
	f64array_msg.data.data[3] = IMU_086_FRTOS.linear_acceleration.x;
 80014ee:	4b96      	ldr	r3, [pc, #600]	@ (8001748 <SensorsPublished+0x298>)
 80014f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80014f4:	4b95      	ldr	r3, [pc, #596]	@ (800174c <SensorsPublished+0x29c>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	3318      	adds	r3, #24
 80014fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fe:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[4] = IMU_086_FRTOS.linear_acceleration.y;
 8001502:	4b91      	ldr	r3, [pc, #580]	@ (8001748 <SensorsPublished+0x298>)
 8001504:	edd3 7a08 	vldr	s15, [r3, #32]
 8001508:	4b90      	ldr	r3, [pc, #576]	@ (800174c <SensorsPublished+0x29c>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	3320      	adds	r3, #32
 800150e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001512:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[5] = IMU_086_FRTOS.linear_acceleration.z;
 8001516:	4b8c      	ldr	r3, [pc, #560]	@ (8001748 <SensorsPublished+0x298>)
 8001518:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800151c:	4b8b      	ldr	r3, [pc, #556]	@ (800174c <SensorsPublished+0x29c>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	3328      	adds	r3, #40	@ 0x28
 8001522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001526:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 angular velocity
	f64array_msg.data.data[6] = IMU_086_FRTOS.angular_velocity.x;
 800152a:	4b87      	ldr	r3, [pc, #540]	@ (8001748 <SensorsPublished+0x298>)
 800152c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001530:	4b86      	ldr	r3, [pc, #536]	@ (800174c <SensorsPublished+0x29c>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	3330      	adds	r3, #48	@ 0x30
 8001536:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153a:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[7] = IMU_086_FRTOS.angular_velocity.y;
 800153e:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <SensorsPublished+0x298>)
 8001540:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001544:	4b81      	ldr	r3, [pc, #516]	@ (800174c <SensorsPublished+0x29c>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	3338      	adds	r3, #56	@ 0x38
 800154a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154e:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[8] = IMU_086_FRTOS.angular_velocity.z;
 8001552:	4b7d      	ldr	r3, [pc, #500]	@ (8001748 <SensorsPublished+0x298>)
 8001554:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001558:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <SensorsPublished+0x29c>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	3340      	adds	r3, #64	@ 0x40
 800155e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001562:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 magnetometer
	f64array_msg.data.data[9] = IMU_086_FRTOS.magnetometer.x;
 8001566:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <SensorsPublished+0x298>)
 8001568:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800156c:	4b77      	ldr	r3, [pc, #476]	@ (800174c <SensorsPublished+0x29c>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	3348      	adds	r3, #72	@ 0x48
 8001572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001576:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[10] = IMU_086_FRTOS.magnetometer.y;
 800157a:	4b73      	ldr	r3, [pc, #460]	@ (8001748 <SensorsPublished+0x298>)
 800157c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001580:	4b72      	ldr	r3, [pc, #456]	@ (800174c <SensorsPublished+0x29c>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	3350      	adds	r3, #80	@ 0x50
 8001586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158a:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[11] = IMU_086_FRTOS.magnetometer.z;
 800158e:	4b6e      	ldr	r3, [pc, #440]	@ (8001748 <SensorsPublished+0x298>)
 8001590:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001594:	4b6d      	ldr	r3, [pc, #436]	@ (800174c <SensorsPublished+0x29c>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	3358      	adds	r3, #88	@ 0x58
 800159a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159e:	ed83 7b00 	vstr	d7, [r3]

	// IMU_055 acceleration
	f64array_msg.data.data[12] = IMU_055_FRTOS.accel.x;
 80015a2:	4b6a      	ldr	r3, [pc, #424]	@ (800174c <SensorsPublished+0x29c>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80015aa:	4b69      	ldr	r3, [pc, #420]	@ (8001750 <SensorsPublished+0x2a0>)
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[13] = IMU_055_FRTOS.accel.y;
 80015b4:	4b65      	ldr	r3, [pc, #404]	@ (800174c <SensorsPublished+0x29c>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80015bc:	4b64      	ldr	r3, [pc, #400]	@ (8001750 <SensorsPublished+0x2a0>)
 80015be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[14] = IMU_055_FRTOS.accel.z;
 80015c6:	4b61      	ldr	r3, [pc, #388]	@ (800174c <SensorsPublished+0x29c>)
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80015ce:	4b60      	ldr	r3, [pc, #384]	@ (8001750 <SensorsPublished+0x2a0>)
 80015d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015d4:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 linear acceleration
	f64array_msg.data.data[15] = IMU_055_FRTOS.lin_acc.x;
 80015d8:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <SensorsPublished+0x29c>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80015e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <SensorsPublished+0x2a0>)
 80015e2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80015e6:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[16] = IMU_055_FRTOS.lin_acc.y;
 80015ea:	4b58      	ldr	r3, [pc, #352]	@ (800174c <SensorsPublished+0x29c>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 80015f2:	4b57      	ldr	r3, [pc, #348]	@ (8001750 <SensorsPublished+0x2a0>)
 80015f4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80015f8:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[17] = IMU_055_FRTOS.lin_acc.z;
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <SensorsPublished+0x29c>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8001604:	4b52      	ldr	r3, [pc, #328]	@ (8001750 <SensorsPublished+0x2a0>)
 8001606:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800160a:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 gyro (angular velocity)
	f64array_msg.data.data[18] = IMU_055_FRTOS.gyro.x;
 800160e:	4b4f      	ldr	r3, [pc, #316]	@ (800174c <SensorsPublished+0x29c>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8001616:	4b4e      	ldr	r3, [pc, #312]	@ (8001750 <SensorsPublished+0x2a0>)
 8001618:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800161c:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[19] = IMU_055_FRTOS.gyro.y;
 8001620:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <SensorsPublished+0x29c>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8001628:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <SensorsPublished+0x2a0>)
 800162a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[20] = IMU_055_FRTOS.gyro.z;
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <SensorsPublished+0x29c>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 800163a:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <SensorsPublished+0x2a0>)
 800163c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001640:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 magnetometer
	f64array_msg.data.data[21] = IMU_055_FRTOS.mag.x;
 8001644:	4b41      	ldr	r3, [pc, #260]	@ (800174c <SensorsPublished+0x29c>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 800164c:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <SensorsPublished+0x2a0>)
 800164e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001652:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[22] = IMU_055_FRTOS.mag.y;
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <SensorsPublished+0x29c>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 800165e:	4b3c      	ldr	r3, [pc, #240]	@ (8001750 <SensorsPublished+0x2a0>)
 8001660:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001664:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[23] = IMU_055_FRTOS.mag.z;
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <SensorsPublished+0x29c>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8001670:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <SensorsPublished+0x2a0>)
 8001672:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001676:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 euler angles
	f64array_msg.data.data[24] = IMU_055_FRTOS.euler.roll;
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <SensorsPublished+0x29c>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001682:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <SensorsPublished+0x2a0>)
 8001684:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001688:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[25] = IMU_055_FRTOS.euler.pitch;
 800168c:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <SensorsPublished+0x29c>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001694:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <SensorsPublished+0x2a0>)
 8001696:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800169a:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[26] = IMU_055_FRTOS.euler.yaw;
 800169e:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <SensorsPublished+0x29c>)
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80016a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <SensorsPublished+0x2a0>)
 80016a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_086 quaternion
	f64array_msg.data.data[27] = IMU_086_FRTOS.quaternion.i;
 80016b0:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <SensorsPublished+0x298>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SensorsPublished+0x29c>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	33d8      	adds	r3, #216	@ 0xd8
 80016bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c0:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[28] = IMU_086_FRTOS.quaternion.j;
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <SensorsPublished+0x298>)
 80016c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <SensorsPublished+0x29c>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	33e0      	adds	r3, #224	@ 0xe0
 80016d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d4:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[29] = IMU_086_FRTOS.quaternion.k;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <SensorsPublished+0x298>)
 80016da:	edd3 7a02 	vldr	s15, [r3, #8]
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <SensorsPublished+0x29c>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	33e8      	adds	r3, #232	@ 0xe8
 80016e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e8:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[30] = IMU_086_FRTOS.quaternion.w;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <SensorsPublished+0x298>)
 80016ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <SensorsPublished+0x29c>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	33f0      	adds	r3, #240	@ 0xf0
 80016f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fc:	ed83 7b00 	vstr	d7, [r3]

	// IMU_055 quaternion
	f64array_msg.data.data[31] = IMU_055_FRTOS.quat.x;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <SensorsPublished+0x29c>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f103 01f8 	add.w	r1, r3, #248	@ 0xf8
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <SensorsPublished+0x2a0>)
 800170a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800170e:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[32] = IMU_055_FRTOS.quat.y;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <SensorsPublished+0x29c>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <SensorsPublished+0x2a0>)
 800171c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001720:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[33] = IMU_055_FRTOS.quat.z;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <SensorsPublished+0x29c>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <SensorsPublished+0x2a0>)
 800172e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001732:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[34] = IMU_055_FRTOS.quat.w;
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <SensorsPublished+0x29c>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SensorsPublished+0x2a0>)
 8001740:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001744:	e006      	b.n	8001754 <SensorsPublished+0x2a4>
 8001746:	bf00      	nop
 8001748:	240097e0 	.word	0x240097e0
 800174c:	24000008 	.word	0x24000008
 8001750:	240096f8 	.word	0x240096f8
 8001754:	e9c1 2300 	strd	r2, r3, [r1]



    RCSOFTCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 8001758:	2200      	movs	r2, #0
 800175a:	4903      	ldr	r1, [pc, #12]	@ (8001768 <SensorsPublished+0x2b8>)
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <SensorsPublished+0x2bc>)
 800175e:	f00c fcb3 	bl	800e0c8 <rcl_publish>

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000008 	.word	0x24000008
 800176c:	24004744 	.word	0x24004744

08001770 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <MX_GPIO_Init+0x15c>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a4f      	ldr	r2, [pc, #316]	@ (80018cc <MX_GPIO_Init+0x15c>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001796:	4b4d      	ldr	r3, [pc, #308]	@ (80018cc <MX_GPIO_Init+0x15c>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b49      	ldr	r3, [pc, #292]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	4a48      	ldr	r2, [pc, #288]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b4:	4b45      	ldr	r3, [pc, #276]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c8:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d2:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	4a39      	ldr	r2, [pc, #228]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f0:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <MX_GPIO_Init+0x15c>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <MX_GPIO_Init+0x15c>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001804:	4a31      	ldr	r2, [pc, #196]	@ (80018cc <MX_GPIO_Init+0x15c>)
 8001806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180e:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <MX_GPIO_Init+0x15c>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800181c:	2332      	movs	r3, #50	@ 0x32
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182c:	230b      	movs	r3, #11
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4826      	ldr	r0, [pc, #152]	@ (80018d0 <MX_GPIO_Init+0x160>)
 8001838:	f003 fdd4 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800183c:	2386      	movs	r3, #134	@ 0x86
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184c:	230b      	movs	r3, #11
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	481f      	ldr	r0, [pc, #124]	@ (80018d4 <MX_GPIO_Init+0x164>)
 8001858:	f003 fdc4 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800186e:	230b      	movs	r3, #11
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <MX_GPIO_Init+0x168>)
 800187a:	f003 fdb3 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800187e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001890:	230a      	movs	r3, #10
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <MX_GPIO_Init+0x164>)
 800189c:	f003 fda2 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80018a0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b2:	230b      	movs	r3, #11
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	@ (80018dc <MX_GPIO_Init+0x16c>)
 80018be:	f003 fd91 	bl	80053e4 <HAL_GPIO_Init>

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020800 	.word	0x58020800
 80018d4:	58020000 	.word	0x58020000
 80018d8:	58020400 	.word	0x58020400
 80018dc:	58021800 	.word	0x58021800

080018e0 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_IWDG1_Init+0x34>)
 80018e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001918 <MX_IWDG1_Init+0x38>)
 80018e8:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MX_IWDG1_Init+0x34>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_IWDG1_Init+0x34>)
 80018f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018f6:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_IWDG1_Init+0x34>)
 80018fa:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018fe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_IWDG1_Init+0x34>)
 8001902:	f003 ff5f 	bl	80057c4 <HAL_IWDG_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 800190c:	f000 f914 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	240096e4 	.word	0x240096e4
 8001918:	58004800 	.word	0x58004800

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001926:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001928:	bf00      	nop
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <main+0xd0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <main+0x24>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dcf4      	bgt.n	800192a <main+0xe>
  if ( timeout < 0 )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	da01      	bge.n	800194a <main+0x2e>
  {
  Error_Handler();
 8001946:	f000 f8f7 	bl	8001b38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f000 fdbb 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f851 	bl	80019f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <main+0xd0>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <main+0xd0>)
 800195a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001962:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <main+0xd0>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001970:	2001      	movs	r0, #1
 8001972:	f003 ff15 	bl	80057a0 <HAL_HSEM_ActivateNotification>
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8001976:	2002      	movs	r0, #2
 8001978:	f003 ff12 	bl	80057a0 <HAL_HSEM_ActivateNotification>
/*Take HSEM0 */
HAL_HSEM_FastTake(HSEM_ID_0);
 800197c:	2000      	movs	r0, #0
 800197e:	f003 fee1 	bl	8005744 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f003 fef7 	bl	8005778 <HAL_HSEM_Release>
/*Take HSEM1 */
HAL_HSEM_FastTake(HSEM_ID_1);
 800198a:	2001      	movs	r0, #1
 800198c:	f003 feda 	bl	8005744 <HAL_HSEM_FastTake>
///*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_1,0);
 8001990:	2100      	movs	r1, #0
 8001992:	2001      	movs	r0, #1
 8001994:	f003 fef0 	bl	8005778 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800199c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800199e:	bf00      	nop
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <main+0xd0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <main+0x9a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	1e5a      	subs	r2, r3, #1
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dcf4      	bgt.n	80019a0 <main+0x84>
if ( timeout < 0 )
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da01      	bge.n	80019c0 <main+0xa4>
{
Error_Handler();
 80019bc:	f000 f8bc 	bl	8001b38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f7ff fed6 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c4:	f7ff faee 	bl	8000fa4 <MX_DMA_Init>
  MX_IWDG1_Init();
 80019c8:	f7ff ff8a 	bl	80018e0 <MX_IWDG1_Init>
  MX_TIM5_Init();
 80019cc:	f000 fbb4 	bl	8002138 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80019d0:	f000 fc28 	bl	8002224 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80019d4:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <main+0xd4>)
 80019d6:	f006 fe5b 	bl	8008690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019da:	f009 fbf5 	bl	800b1c8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019de:	f7ff fc4f 	bl	8001280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019e2:	f009 fc15 	bl	800b210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e6:	bf00      	nop
 80019e8:	e7fd      	b.n	80019e6 <main+0xca>
 80019ea:	bf00      	nop
 80019ec:	58024400 	.word	0x58024400
 80019f0:	24009888 	.word	0x24009888

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b09c      	sub	sp, #112	@ 0x70
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fe:	224c      	movs	r2, #76	@ 0x4c
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f019 ffb8 	bl	801b978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f019 ffb2 	bl	801b978 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a14:	2004      	movs	r0, #4
 8001a16:	f003 ff35 	bl	8005884 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <SystemClock_Config+0xf8>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <SystemClock_Config+0xf8>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <SystemClock_Config+0xf8>)
 8001a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <SystemClock_Config+0xfc>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <SystemClock_Config+0xfc>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <SystemClock_Config+0xfc>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a50:	bf00      	nop
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <SystemClock_Config+0xfc>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a5e:	d1f8      	bne.n	8001a52 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a60:	230a      	movs	r3, #10
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a68:	2340      	movs	r3, #64	@ 0x40
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8001a7c:	2315      	movs	r3, #21
 8001a7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a84:	2304      	movs	r3, #4
 8001a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8001a94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 ff4a 	bl	8005938 <HAL_RCC_OscConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001aaa:	f000 f845 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	233f      	movs	r3, #63	@ 0x3f
 8001ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001abe:	2340      	movs	r3, #64	@ 0x40
 8001ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001ac2:	2350      	movs	r3, #80	@ 0x50
 8001ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001acc:	2340      	movs	r3, #64	@ 0x40
 8001ace:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fb89 	bl	80061ec <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001ae0:	f000 f82a 	bl	8001b38 <Error_Handler>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3770      	adds	r7, #112	@ 0x70
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58000400 	.word	0x58000400
 8001af0:	58024800 	.word	0x58024800

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b06:	f000 fd19 	bl	800253c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim5){
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	@ (8001b2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d105      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x2a>
	  BNO086_READ_HSEM(&IMU_086_FRTOS);
 8001b12:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b14:	f7fe fe9e 	bl	8000854 <BNO086_READ_HSEM>
	  BNO055_READ_HSEM(&IMU_055_FRTOS);
 8001b18:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b1a:	f7fe fe11 	bl	8000740 <BNO055_READ_HSEM>
  }
  /* USER CODE END Callback 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	24009888 	.word	0x24009888
 8001b30:	240097e0 	.word	0x240097e0
 8001b34:	240096f8 	.word	0x240096f8

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <Error_Handler+0x8>

08001b44 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <microros_allocate+0x3c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <microros_allocate+0x3c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <microros_allocate+0x40>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <microros_allocate+0x40>)
 8001b6c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe ffc8 	bl	8000b04 <pvPortMallocMicroROS>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2400982c 	.word	0x2400982c
 8001b84:	24009830 	.word	0x24009830

08001b88 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff f8d7 	bl	8000d4c <getBlockSize>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <microros_deallocate+0x34>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <microros_deallocate+0x34>)
 8001baa:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff f871 	bl	8000c94 <vPortFreeMicroROS>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	24009830 	.word	0x24009830

08001bc0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <microros_reallocate+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <microros_reallocate+0x64>)
 8001bda:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <microros_reallocate+0x68>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4413      	add	r3, r2
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <microros_reallocate+0x68>)
 8001bea:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d104      	bne.n	8001bfc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f7fe ff86 	bl	8000b04 <pvPortMallocMicroROS>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	e00e      	b.n	8001c1a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff f8a5 	bl	8000d4c <getBlockSize>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <microros_reallocate+0x68>)
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <microros_reallocate+0x68>)
 8001c0e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff f8b8 	bl	8000d88 <pvPortReallocMicroROS>
 8001c18:	4603      	mov	r3, r0
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2400982c 	.word	0x2400982c
 8001c28:	24009830 	.word	0x24009830

08001c2c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <microros_zero_allocate+0x48>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <microros_zero_allocate+0x48>)
 8001c4a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <microros_zero_allocate+0x4c>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <microros_zero_allocate+0x4c>)
 8001c5e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff f8bd 	bl	8000de2 <pvPortCallocMicroROS>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2400982c 	.word	0x2400982c
 8001c78:	24009830 	.word	0x24009830
 8001c7c:	00000000 	.word	0x00000000

08001c80 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c96:	a320      	add	r3, pc, #128	@ (adr r3, 8001d18 <UTILS_NanosecondsToTimespec+0x98>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fb88 	bl	80003b0 <__aeabi_ldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001caa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d18 <UTILS_NanosecondsToTimespec+0x98>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fb7c 	bl	80003b0 <__aeabi_ldivmod>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da20      	bge.n	8001d06 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <UTILS_NanosecondsToTimespec+0x90>)
 8001cca:	fb82 1203 	smull	r1, r2, r2, r3
 8001cce:	1712      	asrs	r2, r2, #28
 8001cd0:	17db      	asrs	r3, r3, #31
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	17c8      	asrs	r0, r1, #31
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	ebb2 0804 	subs.w	r8, r2, r4
 8001cea:	eb63 0905 	sbc.w	r9, r3, r5
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4906      	ldr	r1, [pc, #24]	@ (8001d14 <UTILS_NanosecondsToTimespec+0x94>)
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
    }
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d10:	44b82fa1 	.word	0x44b82fa1
 8001d14:	3b9aca00 	.word	0x3b9aca00
 8001d18:	3b9aca00 	.word	0x3b9aca00
 8001d1c:	00000000 	.word	0x00000000

08001d20 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b08e      	sub	sp, #56	@ 0x38
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d2a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001d2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d30:	2300      	movs	r3, #0
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00b fa28 	bl	800d19c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	17da      	asrs	r2, r3, #31
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	61fa      	str	r2, [r7, #28]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	69b9      	ldr	r1, [r7, #24]
 8001d5e:	000b      	movs	r3, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	461c      	mov	r4, r3
 8001d6c:	4615      	mov	r5, r2
 8001d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d72:	1911      	adds	r1, r2, r4
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	416b      	adcs	r3, r5
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001d82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	f04f 0500 	mov.w	r5, #0
 8001d92:	015d      	lsls	r5, r3, #5
 8001d94:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001d98:	0154      	lsls	r4, r2, #5
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	ebb2 0800 	subs.w	r8, r2, r0
 8001da2:	eb63 0901 	sbc.w	r9, r3, r1
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001db2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001db6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001dba:	4690      	mov	r8, r2
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	eb18 0a00 	adds.w	sl, r8, r0
 8001dc2:	eb49 0b01 	adc.w	fp, r9, r1
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dda:	ebb2 040a 	subs.w	r4, r2, sl
 8001dde:	603c      	str	r4, [r7, #0]
 8001de0:	eb63 030b 	sbc.w	r3, r3, fp
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dea:	4623      	mov	r3, r4
 8001dec:	181b      	adds	r3, r3, r0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	462b      	mov	r3, r5
 8001df2:	eb41 0303 	adc.w	r3, r1, r3
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dfe:	f7ff ff3f 	bl	8001c80 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	3738      	adds	r7, #56	@ 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_MspInit+0x38>)
 8001e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_MspInit+0x38>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_MspInit+0x38>)
 8001e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	210f      	movs	r1, #15
 8001e38:	f06f 0001 	mvn.w	r0, #1
 8001e3c:	f000 fc62 	bl	8002704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	58024400 	.word	0x58024400

08001e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	@ 0x38
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	d844      	bhi.n	8001ee4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	2019      	movs	r0, #25
 8001e60:	f000 fc50 	bl	8002704 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e64:	2019      	movs	r0, #25
 8001e66:	f000 fc67 	bl	8002738 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <HAL_InitTick+0xb0>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_InitTick+0xb4>)
 8001e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e76:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_InitTick+0xb4>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_InitTick+0xb4>)
 8001e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8e:	f107 020c 	add.w	r2, r7, #12
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 fd33 	bl	8006904 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e9e:	f004 fd1b 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <HAL_InitTick+0xb8>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_InitTick+0xc0>)
 8001eba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001ebe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ec4:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ed6:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001ed8:	f006 fb82 	bl	80085e0 <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d107      	bne.n	8001ef2 <HAL_InitTick+0xa6>
 8001ee2:	e001      	b.n	8001ee8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e005      	b.n	8001ef4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <HAL_InitTick+0xbc>)
 8001eea:	f006 fbd1 	bl	8008690 <HAL_TIM_Base_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	@ 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24000028 	.word	0x24000028
 8001f00:	58024400 	.word	0x58024400
 8001f04:	431bde83 	.word	0x431bde83
 8001f08:	24009834 	.word	0x24009834
 8001f0c:	40010000 	.word	0x40010000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <NMI_Handler+0x4>

08001f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <MemManage_Handler+0x4>

08001f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA1_Stream3_IRQHandler+0x10>)
 8001f4e:	f001 ff2b 	bl	8003da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	24009968 	.word	0x24009968

08001f5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA1_Stream4_IRQHandler+0x10>)
 8001f62:	f001 ff21 	bl	8003da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	240099e0 	.word	0x240099e0

08001f70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <TIM1_UP_IRQHandler+0x10>)
 8001f76:	f006 fc03 	bl	8008780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	24009834 	.word	0x24009834

08001f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <USART3_IRQHandler+0x10>)
 8001f8a:	f007 f9c3 	bl	8009314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	240098d4 	.word	0x240098d4

08001f98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <TIM5_IRQHandler+0x10>)
 8001f9e:	f006 fbef 	bl	8008780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	24009888 	.word	0x24009888

08001fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return 1;
 8001fb0:	2301      	movs	r3, #1
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_kill>:

int _kill(int pid, int sig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fc6:	f019 fd6b 	bl	801baa0 <__errno>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2216      	movs	r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_exit>:

void _exit (int status)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffe7 	bl	8001fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <_exit+0x12>

08001ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e00a      	b.n	800201a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002004:	f3af 8000 	nop.w
 8002008:	4601      	mov	r1, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	b2ca      	uxtb	r2, r1
 8002012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf0      	blt.n	8002004 <_read+0x12>
  }

  return len;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e009      	b.n	8002052 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf1      	blt.n	800203e <_write+0x12>
  }
  return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_close>:

int _close(int file)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208c:	605a      	str	r2, [r3, #4]
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_isatty>:

int _isatty(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f019 fcd0 	bl	801baa0 <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24080000 	.word	0x24080000
 800212c:	00000400 	.word	0x00000400
 8002130:	24009884 	.word	0x24009884
 8002134:	24013008 	.word	0x24013008

08002138 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002156:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <MX_TIM5_Init+0x94>)
 8002158:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <MX_TIM5_Init+0x98>)
 800215a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <MX_TIM5_Init+0x94>)
 800215e:	22a9      	movs	r2, #169	@ 0xa9
 8002160:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_TIM5_Init+0x94>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_TIM5_Init+0x94>)
 800216a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800216e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_TIM5_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <MX_TIM5_Init+0x94>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800217c:	4813      	ldr	r0, [pc, #76]	@ (80021cc <MX_TIM5_Init+0x94>)
 800217e:	f006 fa2f 	bl	80085e0 <HAL_TIM_Base_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002188:	f7ff fcd6 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002190:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	4619      	mov	r1, r3
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <MX_TIM5_Init+0x94>)
 800219a:	f006 fbf9 	bl	8008990 <HAL_TIM_ConfigClockSource>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021a4:	f7ff fcc8 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_TIM5_Init+0x94>)
 80021b6:	f006 fe4f 	bl	8008e58 <HAL_TIMEx_MasterConfigSynchronization>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021c0:	f7ff fcba 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	24009888 	.word	0x24009888
 80021d0:	40000c00 	.word	0x40000c00

080021d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <HAL_TIM_Base_MspInit+0x48>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d116      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2105      	movs	r1, #5
 8002208:	2032      	movs	r0, #50	@ 0x32
 800220a:	f000 fa7b 	bl	8002704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800220e:	2032      	movs	r0, #50	@ 0x32
 8002210:	f000 fa92 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40000c00 	.word	0x40000c00
 8002220:	58024400 	.word	0x58024400

08002224 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800222a:	4a23      	ldr	r2, [pc, #140]	@ (80022b8 <MX_USART3_UART_Init+0x94>)
 800222c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002230:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <MX_USART3_UART_Init+0x98>)
 8002232:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002234:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002246:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002248:	220c      	movs	r2, #12
 800224a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002258:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800226a:	4812      	ldr	r0, [pc, #72]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800226c:	f006 fea0 	bl	8008fb0 <HAL_UART_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002276:	f7ff fc5f 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227a:	2100      	movs	r1, #0
 800227c:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 800227e:	f008 fe95 	bl	800afac <HAL_UARTEx_SetTxFifoThreshold>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002288:	f7ff fc56 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800228c:	2100      	movs	r1, #0
 800228e:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 8002290:	f008 feca 	bl	800b028 <HAL_UARTEx_SetRxFifoThreshold>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800229a:	f7ff fc4d 	bl	8001b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <MX_USART3_UART_Init+0x90>)
 80022a0:	f008 fe4b 	bl	800af3a <HAL_UARTEx_DisableFifoMode>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80022aa:	f7ff fc45 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	240098d4 	.word	0x240098d4
 80022b8:	40004800 	.word	0x40004800
 80022bc:	001e8480 	.word	0x001e8480

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ba      	sub	sp, #232	@ 0xe8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	22c0      	movs	r2, #192	@ 0xc0
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f019 fb49 	bl	801b978 <memset>
  if(uartHandle->Instance==USART3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002454 <HAL_UART_MspInit+0x194>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f040 80ac 	bne.w	800244a <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f2:	f04f 0202 	mov.w	r2, #2
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4618      	mov	r0, r3
 800230a:	f004 fb3d 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002314:	f7ff fc10 	bl	8001b38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002318:	4b4f      	ldr	r3, [pc, #316]	@ (8002458 <HAL_UART_MspInit+0x198>)
 800231a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800231e:	4a4e      	ldr	r2, [pc, #312]	@ (8002458 <HAL_UART_MspInit+0x198>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002328:	4b4b      	ldr	r3, [pc, #300]	@ (8002458 <HAL_UART_MspInit+0x198>)
 800232a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800232e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002336:	4b48      	ldr	r3, [pc, #288]	@ (8002458 <HAL_UART_MspInit+0x198>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	4a46      	ldr	r2, [pc, #280]	@ (8002458 <HAL_UART_MspInit+0x198>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002346:	4b44      	ldr	r3, [pc, #272]	@ (8002458 <HAL_UART_MspInit+0x198>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002354:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002358:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002374:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002378:	4619      	mov	r1, r3
 800237a:	4838      	ldr	r0, [pc, #224]	@ (800245c <HAL_UART_MspInit+0x19c>)
 800237c:	f003 f832 	bl	80053e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002380:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 8002382:	4a38      	ldr	r2, [pc, #224]	@ (8002464 <HAL_UART_MspInit+0x1a4>)
 8002384:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 8002388:	222d      	movs	r2, #45	@ 0x2d
 800238a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002392:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002398:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 800239a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800239e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80023ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ba:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023c0:	4827      	ldr	r0, [pc, #156]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023c2:	f000 f9c7 	bl	8002754 <HAL_DMA_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80023cc:	f7ff fbb4 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023d8:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_UART_MspInit+0x1a0>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 80023e0:	4a22      	ldr	r2, [pc, #136]	@ (800246c <HAL_UART_MspInit+0x1ac>)
 80023e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80023e4:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 80023e6:	222e      	movs	r2, #46	@ 0x2e
 80023e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 80023ec:	2240      	movs	r2, #64	@ 0x40
 80023ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 80023f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002412:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002416:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 800241a:	2200      	movs	r2, #0
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800241e:	4812      	ldr	r0, [pc, #72]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002420:	f000 f998 	bl	8002754 <HAL_DMA_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800242a:	f7ff fb85 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002432:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002434:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <HAL_UART_MspInit+0x1a8>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	2027      	movs	r0, #39	@ 0x27
 8002440:	f000 f960 	bl	8002704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002444:	2027      	movs	r0, #39	@ 0x27
 8002446:	f000 f977 	bl	8002738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800244a:	bf00      	nop
 800244c:	37e8      	adds	r7, #232	@ 0xe8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40004800 	.word	0x40004800
 8002458:	58024400 	.word	0x58024400
 800245c:	58020c00 	.word	0x58020c00
 8002460:	24009968 	.word	0x24009968
 8002464:	40020058 	.word	0x40020058
 8002468:	240099e0 	.word	0x240099e0
 800246c:	40020070 	.word	0x40020070

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002474:	f7fe fab0 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f019 fb05 	bl	801baac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff fa3b 	bl	800191c <main>
  bx  lr
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024b0:	24000300 	.word	0x24000300
  ldr r2, =_sidata
 80024b4:	0801d6cc 	.word	0x0801d6cc
  ldr r2, =_sbss
 80024b8:	24000300 	.word	0x24000300
  ldr r4, =_ebss
 80024bc:	24013008 	.word	0x24013008

080024c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC3_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 f90f 	bl	80026ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024d0:	f004 f842 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_Init+0x68>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	4913      	ldr	r1, [pc, #76]	@ (8002530 <HAL_Init+0x6c>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_Init+0x68>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002530 <HAL_Init+0x6c>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_Init+0x70>)
 8002506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_Init+0x74>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	200f      	movs	r0, #15
 8002510:	f7ff fc9c 	bl	8001e4c <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e002      	b.n	8002524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800251e:	f7ff fc77 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58024400 	.word	0x58024400
 8002530:	0801c838 	.word	0x0801c838
 8002534:	24000004 	.word	0x24000004
 8002538:	24000000 	.word	0x24000000

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2400002c 	.word	0x2400002c
 8002560:	24009a58 	.word	0x24009a58

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	24009a58 	.word	0x24009a58

0800257c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_GetREVID+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0c1b      	lsrs	r3, r3, #16
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	5c001000 	.word	0x5c001000

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x40>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x40>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00
 80025d8:	05fa0000 	.word	0x05fa0000

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff4c 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002712:	f7ff ff63 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002716:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff ffb3 	bl	8002688 <NVIC_EncodePriority>
 8002722:	4602      	mov	r2, r0
 8002724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff82 	bl	8002634 <__NVIC_SetPriority>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff56 	bl	80025f8 <__NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ff02 	bl	8002564 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e316      	b.n	8002d9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a66      	ldr	r2, [pc, #408]	@ (800290c <HAL_DMA_Init+0x1b8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d04a      	beq.n	800280c <HAL_DMA_Init+0xb8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a65      	ldr	r2, [pc, #404]	@ (8002910 <HAL_DMA_Init+0x1bc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d045      	beq.n	800280c <HAL_DMA_Init+0xb8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a63      	ldr	r2, [pc, #396]	@ (8002914 <HAL_DMA_Init+0x1c0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d040      	beq.n	800280c <HAL_DMA_Init+0xb8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a62      	ldr	r2, [pc, #392]	@ (8002918 <HAL_DMA_Init+0x1c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d03b      	beq.n	800280c <HAL_DMA_Init+0xb8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a60      	ldr	r2, [pc, #384]	@ (800291c <HAL_DMA_Init+0x1c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d036      	beq.n	800280c <HAL_DMA_Init+0xb8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002920 <HAL_DMA_Init+0x1cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d031      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002924 <HAL_DMA_Init+0x1d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02c      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002928 <HAL_DMA_Init+0x1d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d027      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5a      	ldr	r2, [pc, #360]	@ (800292c <HAL_DMA_Init+0x1d8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a59      	ldr	r2, [pc, #356]	@ (8002930 <HAL_DMA_Init+0x1dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d01d      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_DMA_Init+0x1e0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_DMA_Init+0x1e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	@ (800293c <HAL_DMA_Init+0x1e8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <HAL_DMA_Init+0x1ec>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_DMA_Init+0xb8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a51      	ldr	r2, [pc, #324]	@ (8002944 <HAL_DMA_Init+0x1f0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_DMA_Init+0xb8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_DMA_Init+0x1f4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_DMA_Init+0xbc>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_DMA_Init+0xbe>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 813b 	beq.w	8002a8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a37      	ldr	r2, [pc, #220]	@ (800290c <HAL_DMA_Init+0x1b8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04a      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a36      	ldr	r2, [pc, #216]	@ (8002910 <HAL_DMA_Init+0x1bc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d045      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a34      	ldr	r2, [pc, #208]	@ (8002914 <HAL_DMA_Init+0x1c0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d040      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a33      	ldr	r2, [pc, #204]	@ (8002918 <HAL_DMA_Init+0x1c4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d03b      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a31      	ldr	r2, [pc, #196]	@ (800291c <HAL_DMA_Init+0x1c8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d036      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_DMA_Init+0x1cc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d031      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <HAL_DMA_Init+0x1d0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02c      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2d      	ldr	r2, [pc, #180]	@ (8002928 <HAL_DMA_Init+0x1d4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d027      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <HAL_DMA_Init+0x1d8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d022      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_DMA_Init+0x1dc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d01d      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <HAL_DMA_Init+0x1e0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a27      	ldr	r2, [pc, #156]	@ (8002938 <HAL_DMA_Init+0x1e4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a25      	ldr	r2, [pc, #148]	@ (800293c <HAL_DMA_Init+0x1e8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a24      	ldr	r2, [pc, #144]	@ (8002940 <HAL_DMA_Init+0x1ec>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_DMA_Init+0x1f0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_Init+0x174>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a21      	ldr	r2, [pc, #132]	@ (8002948 <HAL_DMA_Init+0x1f4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d108      	bne.n	80028da <HAL_DMA_Init+0x186>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e007      	b.n	80028ea <HAL_DMA_Init+0x196>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028ea:	e02f      	b.n	800294c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ec:	f7ff fe3a 	bl	8002564 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d928      	bls.n	800294c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e246      	b.n	8002d9a <HAL_DMA_Init+0x646>
 800290c:	40020010 	.word	0x40020010
 8002910:	40020028 	.word	0x40020028
 8002914:	40020040 	.word	0x40020040
 8002918:	40020058 	.word	0x40020058
 800291c:	40020070 	.word	0x40020070
 8002920:	40020088 	.word	0x40020088
 8002924:	400200a0 	.word	0x400200a0
 8002928:	400200b8 	.word	0x400200b8
 800292c:	40020410 	.word	0x40020410
 8002930:	40020428 	.word	0x40020428
 8002934:	40020440 	.word	0x40020440
 8002938:	40020458 	.word	0x40020458
 800293c:	40020470 	.word	0x40020470
 8002940:	40020488 	.word	0x40020488
 8002944:	400204a0 	.word	0x400204a0
 8002948:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1c8      	bne.n	80028ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4b83      	ldr	r3, [pc, #524]	@ (8002b74 <HAL_DMA_Init+0x420>)
 8002966:	4013      	ands	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002972:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	4313      	orrs	r3, r2
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029b0:	4b71      	ldr	r3, [pc, #452]	@ (8002b78 <HAL_DMA_Init+0x424>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b71      	ldr	r3, [pc, #452]	@ (8002b7c <HAL_DMA_Init+0x428>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029bc:	d328      	bcc.n	8002a10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b28      	cmp	r3, #40	@ 0x28
 80029c4:	d903      	bls.n	80029ce <HAL_DMA_Init+0x27a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80029cc:	d917      	bls.n	80029fe <HAL_DMA_Init+0x2aa>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80029d4:	d903      	bls.n	80029de <HAL_DMA_Init+0x28a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b42      	cmp	r3, #66	@ 0x42
 80029dc:	d90f      	bls.n	80029fe <HAL_DMA_Init+0x2aa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b46      	cmp	r3, #70	@ 0x46
 80029e4:	d903      	bls.n	80029ee <HAL_DMA_Init+0x29a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b48      	cmp	r3, #72	@ 0x48
 80029ec:	d907      	bls.n	80029fe <HAL_DMA_Init+0x2aa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80029f4:	d905      	bls.n	8002a02 <HAL_DMA_Init+0x2ae>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b52      	cmp	r3, #82	@ 0x52
 80029fc:	d801      	bhi.n	8002a02 <HAL_DMA_Init+0x2ae>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_DMA_Init+0x2b0>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d117      	bne.n	8002a6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f002 fb3f 	bl	80050d0 <DMA_CheckFifoParam>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e197      	b.n	8002d9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f002 fa7a 	bl	8004f6c <DMA_CalcBaseAndBitshift>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	223f      	movs	r2, #63	@ 0x3f
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e0cd      	b.n	8002c2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <HAL_DMA_Init+0x42c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <HAL_DMA_Init+0x430>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_DMA_Init+0x434>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d018      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a36      	ldr	r2, [pc, #216]	@ (8002b8c <HAL_DMA_Init+0x438>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a35      	ldr	r2, [pc, #212]	@ (8002b90 <HAL_DMA_Init+0x43c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <HAL_DMA_Init+0x440>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a32      	ldr	r2, [pc, #200]	@ (8002b98 <HAL_DMA_Init+0x444>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_DMA_Init+0x38a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a30      	ldr	r2, [pc, #192]	@ (8002b9c <HAL_DMA_Init+0x448>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_DMA_Init+0x38e>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_Init+0x390>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8097 	beq.w	8002c18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <HAL_DMA_Init+0x42c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d021      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a22      	ldr	r2, [pc, #136]	@ (8002b84 <HAL_DMA_Init+0x430>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01c      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a21      	ldr	r2, [pc, #132]	@ (8002b88 <HAL_DMA_Init+0x434>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d017      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <HAL_DMA_Init+0x438>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d012      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1e      	ldr	r2, [pc, #120]	@ (8002b90 <HAL_DMA_Init+0x43c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00d      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_DMA_Init+0x440>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <HAL_DMA_Init+0x444>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA_Init+0x3e4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <HAL_DMA_Init+0x448>)
 8002b36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_DMA_Init+0x44c>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d021      	beq.n	8002ba4 <HAL_DMA_Init+0x450>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	d102      	bne.n	8002b6e <HAL_DMA_Init+0x41a>
 8002b68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b6c:	e01b      	b.n	8002ba6 <HAL_DMA_Init+0x452>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e019      	b.n	8002ba6 <HAL_DMA_Init+0x452>
 8002b72:	bf00      	nop
 8002b74:	fe10803f 	.word	0xfe10803f
 8002b78:	5c001000 	.word	0x5c001000
 8002b7c:	ffff0000 	.word	0xffff0000
 8002b80:	58025408 	.word	0x58025408
 8002b84:	5802541c 	.word	0x5802541c
 8002b88:	58025430 	.word	0x58025430
 8002b8c:	58025444 	.word	0x58025444
 8002b90:	58025458 	.word	0x58025458
 8002b94:	5802546c 	.word	0x5802546c
 8002b98:	58025480 	.word	0x58025480
 8002b9c:	58025494 	.word	0x58025494
 8002ba0:	fffe000f 	.word	0xfffe000f
 8002ba4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b6e      	ldr	r3, [pc, #440]	@ (8002da4 <HAL_DMA_Init+0x650>)
 8002bec:	4413      	add	r3, r2
 8002bee:	4a6e      	ldr	r2, [pc, #440]	@ (8002da8 <HAL_DMA_Init+0x654>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	009a      	lsls	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f002 f9b5 	bl	8004f6c <DMA_CalcBaseAndBitshift>
 8002c02:	4603      	mov	r3, r0
 8002c04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2201      	movs	r2, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e008      	b.n	8002c2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	@ 0x40
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0b7      	b.n	8002d9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dac <HAL_DMA_Init+0x658>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d072      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a5d      	ldr	r2, [pc, #372]	@ (8002db0 <HAL_DMA_Init+0x65c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d06d      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5c      	ldr	r2, [pc, #368]	@ (8002db4 <HAL_DMA_Init+0x660>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d068      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002db8 <HAL_DMA_Init+0x664>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d063      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a59      	ldr	r2, [pc, #356]	@ (8002dbc <HAL_DMA_Init+0x668>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d05e      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <HAL_DMA_Init+0x66c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d059      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a56      	ldr	r2, [pc, #344]	@ (8002dc4 <HAL_DMA_Init+0x670>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d054      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a54      	ldr	r2, [pc, #336]	@ (8002dc8 <HAL_DMA_Init+0x674>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d04f      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a53      	ldr	r2, [pc, #332]	@ (8002dcc <HAL_DMA_Init+0x678>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04a      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a51      	ldr	r2, [pc, #324]	@ (8002dd0 <HAL_DMA_Init+0x67c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d045      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a50      	ldr	r2, [pc, #320]	@ (8002dd4 <HAL_DMA_Init+0x680>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d040      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd8 <HAL_DMA_Init+0x684>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d03b      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8002ddc <HAL_DMA_Init+0x688>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d036      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002de0 <HAL_DMA_Init+0x68c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d031      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_DMA_Init+0x690>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02c      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_DMA_Init+0x694>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d027      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a47      	ldr	r2, [pc, #284]	@ (8002dec <HAL_DMA_Init+0x698>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	@ (8002df0 <HAL_DMA_Init+0x69c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a44      	ldr	r2, [pc, #272]	@ (8002df4 <HAL_DMA_Init+0x6a0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d018      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a42      	ldr	r2, [pc, #264]	@ (8002df8 <HAL_DMA_Init+0x6a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a41      	ldr	r2, [pc, #260]	@ (8002dfc <HAL_DMA_Init+0x6a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3f      	ldr	r2, [pc, #252]	@ (8002e00 <HAL_DMA_Init+0x6ac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <HAL_DMA_Init+0x6b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_DMA_Init+0x5c6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3c      	ldr	r2, [pc, #240]	@ (8002e08 <HAL_DMA_Init+0x6b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_DMA_Init+0x5ca>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_Init+0x5cc>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d032      	beq.n	8002d8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f002 fa4f 	bl	80051c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b80      	cmp	r3, #128	@ 0x80
 8002d30:	d102      	bne.n	8002d38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_DMA_Init+0x624>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d80c      	bhi.n	8002d78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f002 facc 	bl	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	e008      	b.n	8002d8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	a7fdabf8 	.word	0xa7fdabf8
 8002da8:	cccccccd 	.word	0xcccccccd
 8002dac:	40020010 	.word	0x40020010
 8002db0:	40020028 	.word	0x40020028
 8002db4:	40020040 	.word	0x40020040
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	40020070 	.word	0x40020070
 8002dc0:	40020088 	.word	0x40020088
 8002dc4:	400200a0 	.word	0x400200a0
 8002dc8:	400200b8 	.word	0x400200b8
 8002dcc:	40020410 	.word	0x40020410
 8002dd0:	40020428 	.word	0x40020428
 8002dd4:	40020440 	.word	0x40020440
 8002dd8:	40020458 	.word	0x40020458
 8002ddc:	40020470 	.word	0x40020470
 8002de0:	40020488 	.word	0x40020488
 8002de4:	400204a0 	.word	0x400204a0
 8002de8:	400204b8 	.word	0x400204b8
 8002dec:	58025408 	.word	0x58025408
 8002df0:	5802541c 	.word	0x5802541c
 8002df4:	58025430 	.word	0x58025430
 8002df8:	58025444 	.word	0x58025444
 8002dfc:	58025458 	.word	0x58025458
 8002e00:	5802546c 	.word	0x5802546c
 8002e04:	58025480 	.word	0x58025480
 8002e08:	58025494 	.word	0x58025494

08002e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e226      	b.n	8003276 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_DMA_Start_IT+0x2a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e21f      	b.n	8003276 <HAL_DMA_Start_IT+0x46a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 820a 	bne.w	8003260 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a68      	ldr	r2, [pc, #416]	@ (8003000 <HAL_DMA_Start_IT+0x1f4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04a      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a66      	ldr	r2, [pc, #408]	@ (8003004 <HAL_DMA_Start_IT+0x1f8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d045      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a65      	ldr	r2, [pc, #404]	@ (8003008 <HAL_DMA_Start_IT+0x1fc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d040      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a63      	ldr	r2, [pc, #396]	@ (800300c <HAL_DMA_Start_IT+0x200>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d03b      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a62      	ldr	r2, [pc, #392]	@ (8003010 <HAL_DMA_Start_IT+0x204>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d036      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a60      	ldr	r2, [pc, #384]	@ (8003014 <HAL_DMA_Start_IT+0x208>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003018 <HAL_DMA_Start_IT+0x20c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d02c      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800301c <HAL_DMA_Start_IT+0x210>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d027      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5c      	ldr	r2, [pc, #368]	@ (8003020 <HAL_DMA_Start_IT+0x214>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003024 <HAL_DMA_Start_IT+0x218>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01d      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a59      	ldr	r2, [pc, #356]	@ (8003028 <HAL_DMA_Start_IT+0x21c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a57      	ldr	r2, [pc, #348]	@ (800302c <HAL_DMA_Start_IT+0x220>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a56      	ldr	r2, [pc, #344]	@ (8003030 <HAL_DMA_Start_IT+0x224>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a54      	ldr	r2, [pc, #336]	@ (8003034 <HAL_DMA_Start_IT+0x228>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a53      	ldr	r2, [pc, #332]	@ (8003038 <HAL_DMA_Start_IT+0x22c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Start_IT+0xee>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	@ (800303c <HAL_DMA_Start_IT+0x230>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <HAL_DMA_Start_IT+0x100>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e007      	b.n	8002f1c <HAL_DMA_Start_IT+0x110>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 fe76 	bl	8004c14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a34      	ldr	r2, [pc, #208]	@ (8003000 <HAL_DMA_Start_IT+0x1f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04a      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a33      	ldr	r2, [pc, #204]	@ (8003004 <HAL_DMA_Start_IT+0x1f8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d045      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a31      	ldr	r2, [pc, #196]	@ (8003008 <HAL_DMA_Start_IT+0x1fc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d040      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a30      	ldr	r2, [pc, #192]	@ (800300c <HAL_DMA_Start_IT+0x200>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d03b      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2e      	ldr	r2, [pc, #184]	@ (8003010 <HAL_DMA_Start_IT+0x204>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d036      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_DMA_Start_IT+0x208>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d031      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <HAL_DMA_Start_IT+0x20c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02c      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2a      	ldr	r2, [pc, #168]	@ (800301c <HAL_DMA_Start_IT+0x210>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d027      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a28      	ldr	r2, [pc, #160]	@ (8003020 <HAL_DMA_Start_IT+0x214>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d022      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a27      	ldr	r2, [pc, #156]	@ (8003024 <HAL_DMA_Start_IT+0x218>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <HAL_DMA_Start_IT+0x21c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a24      	ldr	r2, [pc, #144]	@ (800302c <HAL_DMA_Start_IT+0x220>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_DMA_Start_IT+0x224>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_DMA_Start_IT+0x228>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_DMA_Start_IT+0x22c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x1bc>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_DMA_Start_IT+0x230>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Start_IT+0x1c0>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_DMA_Start_IT+0x1c2>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d036      	beq.n	8003040 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 021e 	bic.w	r2, r3, #30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0216 	orr.w	r2, r2, #22
 8002fe4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03e      	beq.n	800306c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0208 	orr.w	r2, r2, #8
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e035      	b.n	800306c <HAL_DMA_Start_IT+0x260>
 8003000:	40020010 	.word	0x40020010
 8003004:	40020028 	.word	0x40020028
 8003008:	40020040 	.word	0x40020040
 800300c:	40020058 	.word	0x40020058
 8003010:	40020070 	.word	0x40020070
 8003014:	40020088 	.word	0x40020088
 8003018:	400200a0 	.word	0x400200a0
 800301c:	400200b8 	.word	0x400200b8
 8003020:	40020410 	.word	0x40020410
 8003024:	40020428 	.word	0x40020428
 8003028:	40020440 	.word	0x40020440
 800302c:	40020458 	.word	0x40020458
 8003030:	40020470 	.word	0x40020470
 8003034:	40020488 	.word	0x40020488
 8003038:	400204a0 	.word	0x400204a0
 800303c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020e 	bic.w	r2, r3, #14
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 020a 	orr.w	r2, r2, #10
 8003052:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0204 	orr.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a83      	ldr	r2, [pc, #524]	@ (8003280 <HAL_DMA_Start_IT+0x474>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d072      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a82      	ldr	r2, [pc, #520]	@ (8003284 <HAL_DMA_Start_IT+0x478>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d06d      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a80      	ldr	r2, [pc, #512]	@ (8003288 <HAL_DMA_Start_IT+0x47c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d068      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7f      	ldr	r2, [pc, #508]	@ (800328c <HAL_DMA_Start_IT+0x480>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d063      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7d      	ldr	r2, [pc, #500]	@ (8003290 <HAL_DMA_Start_IT+0x484>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d05e      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003294 <HAL_DMA_Start_IT+0x488>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d059      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003298 <HAL_DMA_Start_IT+0x48c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d054      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a79      	ldr	r2, [pc, #484]	@ (800329c <HAL_DMA_Start_IT+0x490>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d04f      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_DMA_Start_IT+0x494>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d04a      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a76      	ldr	r2, [pc, #472]	@ (80032a4 <HAL_DMA_Start_IT+0x498>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d045      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a74      	ldr	r2, [pc, #464]	@ (80032a8 <HAL_DMA_Start_IT+0x49c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d040      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	@ (80032ac <HAL_DMA_Start_IT+0x4a0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d03b      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a71      	ldr	r2, [pc, #452]	@ (80032b0 <HAL_DMA_Start_IT+0x4a4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d036      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a70      	ldr	r2, [pc, #448]	@ (80032b4 <HAL_DMA_Start_IT+0x4a8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d031      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6e      	ldr	r2, [pc, #440]	@ (80032b8 <HAL_DMA_Start_IT+0x4ac>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02c      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6d      	ldr	r2, [pc, #436]	@ (80032bc <HAL_DMA_Start_IT+0x4b0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d027      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_DMA_Start_IT+0x4b4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d022      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6a      	ldr	r2, [pc, #424]	@ (80032c4 <HAL_DMA_Start_IT+0x4b8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d01d      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	@ (80032c8 <HAL_DMA_Start_IT+0x4bc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d018      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a67      	ldr	r2, [pc, #412]	@ (80032cc <HAL_DMA_Start_IT+0x4c0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	@ (80032d0 <HAL_DMA_Start_IT+0x4c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a64      	ldr	r2, [pc, #400]	@ (80032d4 <HAL_DMA_Start_IT+0x4c8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a62      	ldr	r2, [pc, #392]	@ (80032d8 <HAL_DMA_Start_IT+0x4cc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_DMA_Start_IT+0x350>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a61      	ldr	r2, [pc, #388]	@ (80032dc <HAL_DMA_Start_IT+0x4d0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Start_IT+0x354>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_DMA_Start_IT+0x356>
 8003160:	2300      	movs	r3, #0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01a      	beq.n	800319c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003182:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a37      	ldr	r2, [pc, #220]	@ (8003280 <HAL_DMA_Start_IT+0x474>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a36      	ldr	r2, [pc, #216]	@ (8003284 <HAL_DMA_Start_IT+0x478>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d045      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <HAL_DMA_Start_IT+0x47c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d040      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a33      	ldr	r2, [pc, #204]	@ (800328c <HAL_DMA_Start_IT+0x480>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d03b      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <HAL_DMA_Start_IT+0x484>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <HAL_DMA_Start_IT+0x488>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d031      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003298 <HAL_DMA_Start_IT+0x48c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02c      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <HAL_DMA_Start_IT+0x490>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d027      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2b      	ldr	r2, [pc, #172]	@ (80032a0 <HAL_DMA_Start_IT+0x494>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2a      	ldr	r2, [pc, #168]	@ (80032a4 <HAL_DMA_Start_IT+0x498>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a28      	ldr	r2, [pc, #160]	@ (80032a8 <HAL_DMA_Start_IT+0x49c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a27      	ldr	r2, [pc, #156]	@ (80032ac <HAL_DMA_Start_IT+0x4a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a25      	ldr	r2, [pc, #148]	@ (80032b0 <HAL_DMA_Start_IT+0x4a4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a24      	ldr	r2, [pc, #144]	@ (80032b4 <HAL_DMA_Start_IT+0x4a8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_DMA_Start_IT+0x4ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Start_IT+0x430>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_DMA_Start_IT+0x4b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <HAL_DMA_Start_IT+0x442>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e012      	b.n	8003274 <HAL_DMA_Start_IT+0x468>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e009      	b.n	8003274 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
 80032c0:	58025408 	.word	0x58025408
 80032c4:	5802541c 	.word	0x5802541c
 80032c8:	58025430 	.word	0x58025430
 80032cc:	58025444 	.word	0x58025444
 80032d0:	58025458 	.word	0x58025458
 80032d4:	5802546c 	.word	0x5802546c
 80032d8:	58025480 	.word	0x58025480
 80032dc:	58025494 	.word	0x58025494

080032e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80032e8:	f7ff f93c 	bl	8002564 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e2dc      	b.n	80038b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d008      	beq.n	8003316 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e2cd      	b.n	80038b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a76      	ldr	r2, [pc, #472]	@ (80034f4 <HAL_DMA_Abort+0x214>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a74      	ldr	r2, [pc, #464]	@ (80034f8 <HAL_DMA_Abort+0x218>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	@ (80034fc <HAL_DMA_Abort+0x21c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a71      	ldr	r2, [pc, #452]	@ (8003500 <HAL_DMA_Abort+0x220>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a70      	ldr	r2, [pc, #448]	@ (8003504 <HAL_DMA_Abort+0x224>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6e      	ldr	r2, [pc, #440]	@ (8003508 <HAL_DMA_Abort+0x228>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6d      	ldr	r2, [pc, #436]	@ (800350c <HAL_DMA_Abort+0x22c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6b      	ldr	r2, [pc, #428]	@ (8003510 <HAL_DMA_Abort+0x230>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6a      	ldr	r2, [pc, #424]	@ (8003514 <HAL_DMA_Abort+0x234>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a68      	ldr	r2, [pc, #416]	@ (8003518 <HAL_DMA_Abort+0x238>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a67      	ldr	r2, [pc, #412]	@ (800351c <HAL_DMA_Abort+0x23c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a65      	ldr	r2, [pc, #404]	@ (8003520 <HAL_DMA_Abort+0x240>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a64      	ldr	r2, [pc, #400]	@ (8003524 <HAL_DMA_Abort+0x244>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a62      	ldr	r2, [pc, #392]	@ (8003528 <HAL_DMA_Abort+0x248>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_DMA_Abort+0x24c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_Abort+0xd6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003530 <HAL_DMA_Abort+0x250>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_DMA_Abort+0xda>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_DMA_Abort+0xdc>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 021e 	bic.w	r2, r2, #30
 80033ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e00a      	b.n	80033fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020e 	bic.w	r2, r2, #14
 80033f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3c      	ldr	r2, [pc, #240]	@ (80034f4 <HAL_DMA_Abort+0x214>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d072      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3a      	ldr	r2, [pc, #232]	@ (80034f8 <HAL_DMA_Abort+0x218>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d06d      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a39      	ldr	r2, [pc, #228]	@ (80034fc <HAL_DMA_Abort+0x21c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d068      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a37      	ldr	r2, [pc, #220]	@ (8003500 <HAL_DMA_Abort+0x220>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d063      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a36      	ldr	r2, [pc, #216]	@ (8003504 <HAL_DMA_Abort+0x224>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d05e      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a34      	ldr	r2, [pc, #208]	@ (8003508 <HAL_DMA_Abort+0x228>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d059      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a33      	ldr	r2, [pc, #204]	@ (800350c <HAL_DMA_Abort+0x22c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d054      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a31      	ldr	r2, [pc, #196]	@ (8003510 <HAL_DMA_Abort+0x230>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04f      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a30      	ldr	r2, [pc, #192]	@ (8003514 <HAL_DMA_Abort+0x234>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2e      	ldr	r2, [pc, #184]	@ (8003518 <HAL_DMA_Abort+0x238>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	@ (800351c <HAL_DMA_Abort+0x23c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_DMA_Abort+0x240>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2a      	ldr	r2, [pc, #168]	@ (8003524 <HAL_DMA_Abort+0x244>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a28      	ldr	r2, [pc, #160]	@ (8003528 <HAL_DMA_Abort+0x248>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_DMA_Abort+0x24c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a25      	ldr	r2, [pc, #148]	@ (8003530 <HAL_DMA_Abort+0x250>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a24      	ldr	r2, [pc, #144]	@ (8003534 <HAL_DMA_Abort+0x254>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <HAL_DMA_Abort+0x258>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a21      	ldr	r2, [pc, #132]	@ (800353c <HAL_DMA_Abort+0x25c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_DMA_Abort+0x260>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_DMA_Abort+0x264>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_DMA_Abort+0x268>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_DMA_Abort+0x26c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort+0x20e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <HAL_DMA_Abort+0x270>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d132      	bne.n	8003554 <HAL_DMA_Abort+0x274>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e031      	b.n	8003556 <HAL_DMA_Abort+0x276>
 80034f2:	bf00      	nop
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
 8003534:	58025408 	.word	0x58025408
 8003538:	5802541c 	.word	0x5802541c
 800353c:	58025430 	.word	0x58025430
 8003540:	58025444 	.word	0x58025444
 8003544:	58025458 	.word	0x58025458
 8003548:	5802546c 	.word	0x5802546c
 800354c:	58025480 	.word	0x58025480
 8003550:	58025494 	.word	0x58025494
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003568:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6d      	ldr	r2, [pc, #436]	@ (8003724 <HAL_DMA_Abort+0x444>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6b      	ldr	r2, [pc, #428]	@ (8003728 <HAL_DMA_Abort+0x448>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6a      	ldr	r2, [pc, #424]	@ (800372c <HAL_DMA_Abort+0x44c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a68      	ldr	r2, [pc, #416]	@ (8003730 <HAL_DMA_Abort+0x450>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a67      	ldr	r2, [pc, #412]	@ (8003734 <HAL_DMA_Abort+0x454>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	@ (8003738 <HAL_DMA_Abort+0x458>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a64      	ldr	r2, [pc, #400]	@ (800373c <HAL_DMA_Abort+0x45c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a62      	ldr	r2, [pc, #392]	@ (8003740 <HAL_DMA_Abort+0x460>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a61      	ldr	r2, [pc, #388]	@ (8003744 <HAL_DMA_Abort+0x464>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003748 <HAL_DMA_Abort+0x468>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5e      	ldr	r2, [pc, #376]	@ (800374c <HAL_DMA_Abort+0x46c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003750 <HAL_DMA_Abort+0x470>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_DMA_Abort+0x474>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a59      	ldr	r2, [pc, #356]	@ (8003758 <HAL_DMA_Abort+0x478>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a58      	ldr	r2, [pc, #352]	@ (800375c <HAL_DMA_Abort+0x47c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_Abort+0x32a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a56      	ldr	r2, [pc, #344]	@ (8003760 <HAL_DMA_Abort+0x480>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <HAL_DMA_Abort+0x33c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e007      	b.n	800362c <HAL_DMA_Abort+0x34c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800362c:	e013      	b.n	8003656 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362e:	f7fe ff99 	bl	8002564 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b05      	cmp	r3, #5
 800363a:	d90c      	bls.n	8003656 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e12d      	b.n	80038b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2f      	ldr	r2, [pc, #188]	@ (8003724 <HAL_DMA_Abort+0x444>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d04a      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <HAL_DMA_Abort+0x448>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d045      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <HAL_DMA_Abort+0x44c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d040      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2a      	ldr	r2, [pc, #168]	@ (8003730 <HAL_DMA_Abort+0x450>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d03b      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a29      	ldr	r2, [pc, #164]	@ (8003734 <HAL_DMA_Abort+0x454>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d036      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <HAL_DMA_Abort+0x458>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d031      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a26      	ldr	r2, [pc, #152]	@ (800373c <HAL_DMA_Abort+0x45c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d02c      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_DMA_Abort+0x460>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d027      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a23      	ldr	r2, [pc, #140]	@ (8003744 <HAL_DMA_Abort+0x464>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d022      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a21      	ldr	r2, [pc, #132]	@ (8003748 <HAL_DMA_Abort+0x468>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01d      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a20      	ldr	r2, [pc, #128]	@ (800374c <HAL_DMA_Abort+0x46c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003750 <HAL_DMA_Abort+0x470>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_DMA_Abort+0x474>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00e      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <HAL_DMA_Abort+0x478>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <HAL_DMA_Abort+0x47c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_DMA_Abort+0x422>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <HAL_DMA_Abort+0x480>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Abort+0x426>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_DMA_Abort+0x428>
 8003706:	2300      	movs	r3, #0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	223f      	movs	r2, #63	@ 0x3f
 800371c:	409a      	lsls	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	e02a      	b.n	800377a <HAL_DMA_Abort+0x49a>
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2201      	movs	r2, #1
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4f      	ldr	r2, [pc, #316]	@ (80038bc <HAL_DMA_Abort+0x5dc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d072      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4d      	ldr	r2, [pc, #308]	@ (80038c0 <HAL_DMA_Abort+0x5e0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d06d      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4c      	ldr	r2, [pc, #304]	@ (80038c4 <HAL_DMA_Abort+0x5e4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d068      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a4a      	ldr	r2, [pc, #296]	@ (80038c8 <HAL_DMA_Abort+0x5e8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d063      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a49      	ldr	r2, [pc, #292]	@ (80038cc <HAL_DMA_Abort+0x5ec>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d05e      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a47      	ldr	r2, [pc, #284]	@ (80038d0 <HAL_DMA_Abort+0x5f0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d059      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a46      	ldr	r2, [pc, #280]	@ (80038d4 <HAL_DMA_Abort+0x5f4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d054      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a44      	ldr	r2, [pc, #272]	@ (80038d8 <HAL_DMA_Abort+0x5f8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04f      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a43      	ldr	r2, [pc, #268]	@ (80038dc <HAL_DMA_Abort+0x5fc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04a      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a41      	ldr	r2, [pc, #260]	@ (80038e0 <HAL_DMA_Abort+0x600>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a40      	ldr	r2, [pc, #256]	@ (80038e4 <HAL_DMA_Abort+0x604>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d040      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3e      	ldr	r2, [pc, #248]	@ (80038e8 <HAL_DMA_Abort+0x608>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d03b      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3d      	ldr	r2, [pc, #244]	@ (80038ec <HAL_DMA_Abort+0x60c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d036      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3b      	ldr	r2, [pc, #236]	@ (80038f0 <HAL_DMA_Abort+0x610>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d031      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3a      	ldr	r2, [pc, #232]	@ (80038f4 <HAL_DMA_Abort+0x614>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d02c      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <HAL_DMA_Abort+0x618>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d027      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a37      	ldr	r2, [pc, #220]	@ (80038fc <HAL_DMA_Abort+0x61c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a35      	ldr	r2, [pc, #212]	@ (8003900 <HAL_DMA_Abort+0x620>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a34      	ldr	r2, [pc, #208]	@ (8003904 <HAL_DMA_Abort+0x624>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <HAL_DMA_Abort+0x628>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a31      	ldr	r2, [pc, #196]	@ (800390c <HAL_DMA_Abort+0x62c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2f      	ldr	r2, [pc, #188]	@ (8003910 <HAL_DMA_Abort+0x630>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2e      	ldr	r2, [pc, #184]	@ (8003914 <HAL_DMA_Abort+0x634>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DMA_Abort+0x58a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <HAL_DMA_Abort+0x638>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_DMA_Abort+0x58e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_DMA_Abort+0x590>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800387c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003894:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800389e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40020010 	.word	0x40020010
 80038c0:	40020028 	.word	0x40020028
 80038c4:	40020040 	.word	0x40020040
 80038c8:	40020058 	.word	0x40020058
 80038cc:	40020070 	.word	0x40020070
 80038d0:	40020088 	.word	0x40020088
 80038d4:	400200a0 	.word	0x400200a0
 80038d8:	400200b8 	.word	0x400200b8
 80038dc:	40020410 	.word	0x40020410
 80038e0:	40020428 	.word	0x40020428
 80038e4:	40020440 	.word	0x40020440
 80038e8:	40020458 	.word	0x40020458
 80038ec:	40020470 	.word	0x40020470
 80038f0:	40020488 	.word	0x40020488
 80038f4:	400204a0 	.word	0x400204a0
 80038f8:	400204b8 	.word	0x400204b8
 80038fc:	58025408 	.word	0x58025408
 8003900:	5802541c 	.word	0x5802541c
 8003904:	58025430 	.word	0x58025430
 8003908:	58025444 	.word	0x58025444
 800390c:	58025458 	.word	0x58025458
 8003910:	5802546c 	.word	0x5802546c
 8003914:	58025480 	.word	0x58025480
 8003918:	58025494 	.word	0x58025494

0800391c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e237      	b.n	8003d9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d004      	beq.n	8003944 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e22c      	b.n	8003d9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5c      	ldr	r2, [pc, #368]	@ (8003abc <HAL_DMA_Abort_IT+0x1a0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1a4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a59      	ldr	r2, [pc, #356]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1a8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a58      	ldr	r2, [pc, #352]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1ac>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a56      	ldr	r2, [pc, #344]	@ (8003acc <HAL_DMA_Abort_IT+0x1b0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a55      	ldr	r2, [pc, #340]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1b4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a53      	ldr	r2, [pc, #332]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1b8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a52      	ldr	r2, [pc, #328]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1bc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a50      	ldr	r2, [pc, #320]	@ (8003adc <HAL_DMA_Abort_IT+0x1c0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1c4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1cc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4a      	ldr	r2, [pc, #296]	@ (8003aec <HAL_DMA_Abort_IT+0x1d0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a49      	ldr	r2, [pc, #292]	@ (8003af0 <HAL_DMA_Abort_IT+0x1d4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a47      	ldr	r2, [pc, #284]	@ (8003af4 <HAL_DMA_Abort_IT+0x1d8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xc8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a46      	ldr	r2, [pc, #280]	@ (8003af8 <HAL_DMA_Abort_IT+0x1dc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_DMA_Abort_IT+0xcc>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_DMA_Abort_IT+0xce>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8086 	beq.w	8003afc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2204      	movs	r2, #4
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	@ (8003abc <HAL_DMA_Abort_IT+0x1a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04a      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1a4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d040      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03b      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <HAL_DMA_Abort_IT+0x1b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1b4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1b8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02c      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a25      	ldr	r2, [pc, #148]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1bc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d027      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <HAL_DMA_Abort_IT+0x1c0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a20      	ldr	r2, [pc, #128]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1c8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_DMA_Abort_IT+0x1d0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_DMA_Abort_IT+0x1d4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	@ (8003af4 <HAL_DMA_Abort_IT+0x1d8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x17c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <HAL_DMA_Abort_IT+0x18e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e178      	b.n	8003d9c <HAL_DMA_Abort_IT+0x480>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e16f      	b.n	8003d9c <HAL_DMA_Abort_IT+0x480>
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020e 	bic.w	r2, r2, #14
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6c      	ldr	r2, [pc, #432]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3a8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d04a      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3ac>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d045      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a69      	ldr	r2, [pc, #420]	@ (8003ccc <HAL_DMA_Abort_IT+0x3b0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d040      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a68      	ldr	r2, [pc, #416]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d03b      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a66      	ldr	r2, [pc, #408]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d036      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_DMA_Abort_IT+0x3bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d031      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a63      	ldr	r2, [pc, #396]	@ (8003cdc <HAL_DMA_Abort_IT+0x3c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02c      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a62      	ldr	r2, [pc, #392]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d027      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a60      	ldr	r2, [pc, #384]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01d      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5d      	ldr	r2, [pc, #372]	@ (8003cec <HAL_DMA_Abort_IT+0x3d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3d8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a59      	ldr	r2, [pc, #356]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3dc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a57      	ldr	r2, [pc, #348]	@ (8003cfc <HAL_DMA_Abort_IT+0x3e0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_DMA_Abort_IT+0x290>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a56      	ldr	r2, [pc, #344]	@ (8003d00 <HAL_DMA_Abort_IT+0x3e4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d108      	bne.n	8003bbe <HAL_DMA_Abort_IT+0x2a2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e007      	b.n	8003bce <HAL_DMA_Abort_IT+0x2b2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3a8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d072      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3ac>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d06d      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a39      	ldr	r2, [pc, #228]	@ (8003ccc <HAL_DMA_Abort_IT+0x3b0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d068      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a37      	ldr	r2, [pc, #220]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d063      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a36      	ldr	r2, [pc, #216]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3b8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d05e      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a34      	ldr	r2, [pc, #208]	@ (8003cd8 <HAL_DMA_Abort_IT+0x3bc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d059      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <HAL_DMA_Abort_IT+0x3c0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d054      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a31      	ldr	r2, [pc, #196]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04f      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a30      	ldr	r2, [pc, #192]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3cc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	@ (8003cec <HAL_DMA_Abort_IT+0x3d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3d4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3dc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <HAL_DMA_Abort_IT+0x3e0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a25      	ldr	r2, [pc, #148]	@ (8003d00 <HAL_DMA_Abort_IT+0x3e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a24      	ldr	r2, [pc, #144]	@ (8003d04 <HAL_DMA_Abort_IT+0x3e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <HAL_DMA_Abort_IT+0x3ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a21      	ldr	r2, [pc, #132]	@ (8003d0c <HAL_DMA_Abort_IT+0x3f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <HAL_DMA_Abort_IT+0x3f4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <HAL_DMA_Abort_IT+0x3f8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d18 <HAL_DMA_Abort_IT+0x3fc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <HAL_DMA_Abort_IT+0x400>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	@ (8003d20 <HAL_DMA_Abort_IT+0x404>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d132      	bne.n	8003d24 <HAL_DMA_Abort_IT+0x408>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e031      	b.n	8003d26 <HAL_DMA_Abort_IT+0x40a>
 8003cc2:	bf00      	nop
 8003cc4:	40020010 	.word	0x40020010
 8003cc8:	40020028 	.word	0x40020028
 8003ccc:	40020040 	.word	0x40020040
 8003cd0:	40020058 	.word	0x40020058
 8003cd4:	40020070 	.word	0x40020070
 8003cd8:	40020088 	.word	0x40020088
 8003cdc:	400200a0 	.word	0x400200a0
 8003ce0:	400200b8 	.word	0x400200b8
 8003ce4:	40020410 	.word	0x40020410
 8003ce8:	40020428 	.word	0x40020428
 8003cec:	40020440 	.word	0x40020440
 8003cf0:	40020458 	.word	0x40020458
 8003cf4:	40020470 	.word	0x40020470
 8003cf8:	40020488 	.word	0x40020488
 8003cfc:	400204a0 	.word	0x400204a0
 8003d00:	400204b8 	.word	0x400204b8
 8003d04:	58025408 	.word	0x58025408
 8003d08:	5802541c 	.word	0x5802541c
 8003d0c:	58025430 	.word	0x58025430
 8003d10:	58025444 	.word	0x58025444
 8003d14:	58025458 	.word	0x58025458
 8003d18:	5802546c 	.word	0x5802546c
 8003d1c:	58025480 	.word	0x58025480
 8003d20:	58025494 	.word	0x58025494
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d028      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2201      	movs	r2, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003db4:	4b67      	ldr	r3, [pc, #412]	@ (8003f54 <HAL_DMA_IRQHandler+0x1ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a67      	ldr	r2, [pc, #412]	@ (8003f58 <HAL_DMA_IRQHandler+0x1b0>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5f      	ldr	r2, [pc, #380]	@ (8003f5c <HAL_DMA_IRQHandler+0x1b4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f60 <HAL_DMA_IRQHandler+0x1b8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f64 <HAL_DMA_IRQHandler+0x1bc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f68 <HAL_DMA_IRQHandler+0x1c0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a59      	ldr	r2, [pc, #356]	@ (8003f6c <HAL_DMA_IRQHandler+0x1c4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a57      	ldr	r2, [pc, #348]	@ (8003f70 <HAL_DMA_IRQHandler+0x1c8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a56      	ldr	r2, [pc, #344]	@ (8003f74 <HAL_DMA_IRQHandler+0x1cc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a54      	ldr	r2, [pc, #336]	@ (8003f78 <HAL_DMA_IRQHandler+0x1d0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a53      	ldr	r2, [pc, #332]	@ (8003f7c <HAL_DMA_IRQHandler+0x1d4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a51      	ldr	r2, [pc, #324]	@ (8003f80 <HAL_DMA_IRQHandler+0x1d8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a50      	ldr	r2, [pc, #320]	@ (8003f84 <HAL_DMA_IRQHandler+0x1dc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f88 <HAL_DMA_IRQHandler+0x1e0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4d      	ldr	r2, [pc, #308]	@ (8003f8c <HAL_DMA_IRQHandler+0x1e4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	@ (8003f90 <HAL_DMA_IRQHandler+0x1e8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_DMA_IRQHandler+0x1ec>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xd2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a48      	ldr	r2, [pc, #288]	@ (8003f98 <HAL_DMA_IRQHandler+0x1f0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_IRQHandler+0xd6>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_DMA_IRQHandler+0xd8>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 842b 	beq.w	80046dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2208      	movs	r2, #8
 8003e90:	409a      	lsls	r2, r3
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80a2 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f5c <HAL_DMA_IRQHandler+0x1b4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <HAL_DMA_IRQHandler+0x1b8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f64 <HAL_DMA_IRQHandler+0x1bc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8003f68 <HAL_DMA_IRQHandler+0x1c0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <HAL_DMA_IRQHandler+0x1c4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <HAL_DMA_IRQHandler+0x1c8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <HAL_DMA_IRQHandler+0x1cc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <HAL_DMA_IRQHandler+0x1d0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <HAL_DMA_IRQHandler+0x1d4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <HAL_DMA_IRQHandler+0x1d8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	@ (8003f84 <HAL_DMA_IRQHandler+0x1dc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f88 <HAL_DMA_IRQHandler+0x1e0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	@ (8003f8c <HAL_DMA_IRQHandler+0x1e4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <HAL_DMA_IRQHandler+0x1e8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <HAL_DMA_IRQHandler+0x1ec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x194>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <HAL_DMA_IRQHandler+0x1f0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d12f      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x1f4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e02e      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x208>
 8003f52:	bf00      	nop
 8003f54:	24000000 	.word	0x24000000
 8003f58:	1b4e81b5 	.word	0x1b4e81b5
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2208      	movs	r2, #8
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06e      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a69      	ldr	r2, [pc, #420]	@ (80041a0 <HAL_DMA_IRQHandler+0x3f8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04a      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a67      	ldr	r2, [pc, #412]	@ (80041a4 <HAL_DMA_IRQHandler+0x3fc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d045      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a66      	ldr	r2, [pc, #408]	@ (80041a8 <HAL_DMA_IRQHandler+0x400>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d040      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a64      	ldr	r2, [pc, #400]	@ (80041ac <HAL_DMA_IRQHandler+0x404>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d03b      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a63      	ldr	r2, [pc, #396]	@ (80041b0 <HAL_DMA_IRQHandler+0x408>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d036      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a61      	ldr	r2, [pc, #388]	@ (80041b4 <HAL_DMA_IRQHandler+0x40c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d031      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a60      	ldr	r2, [pc, #384]	@ (80041b8 <HAL_DMA_IRQHandler+0x410>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d02c      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5e      	ldr	r2, [pc, #376]	@ (80041bc <HAL_DMA_IRQHandler+0x414>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d027      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5d      	ldr	r2, [pc, #372]	@ (80041c0 <HAL_DMA_IRQHandler+0x418>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5b      	ldr	r2, [pc, #364]	@ (80041c4 <HAL_DMA_IRQHandler+0x41c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01d      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a5a      	ldr	r2, [pc, #360]	@ (80041c8 <HAL_DMA_IRQHandler+0x420>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a58      	ldr	r2, [pc, #352]	@ (80041cc <HAL_DMA_IRQHandler+0x424>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_DMA_IRQHandler+0x428>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a55      	ldr	r2, [pc, #340]	@ (80041d4 <HAL_DMA_IRQHandler+0x42c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a54      	ldr	r2, [pc, #336]	@ (80041d8 <HAL_DMA_IRQHandler+0x430>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2ee>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_DMA_IRQHandler+0x434>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10a      	bne.n	80040ac <HAL_DMA_IRQHandler+0x304>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e003      	b.n	80040b4 <HAL_DMA_IRQHandler+0x30c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	f043 0202 	orr.w	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2204      	movs	r2, #4
 80040de:	409a      	lsls	r2, r3
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 808f 	beq.w	8004208 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2c      	ldr	r2, [pc, #176]	@ (80041a0 <HAL_DMA_IRQHandler+0x3f8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <HAL_DMA_IRQHandler+0x3fc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <HAL_DMA_IRQHandler+0x400>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <HAL_DMA_IRQHandler+0x404>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <HAL_DMA_IRQHandler+0x408>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a24      	ldr	r2, [pc, #144]	@ (80041b4 <HAL_DMA_IRQHandler+0x40c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <HAL_DMA_IRQHandler+0x410>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a21      	ldr	r2, [pc, #132]	@ (80041bc <HAL_DMA_IRQHandler+0x414>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a20      	ldr	r2, [pc, #128]	@ (80041c0 <HAL_DMA_IRQHandler+0x418>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <HAL_DMA_IRQHandler+0x41c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <HAL_DMA_IRQHandler+0x420>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_DMA_IRQHandler+0x424>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <HAL_DMA_IRQHandler+0x428>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_DMA_IRQHandler+0x42c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_DMA_IRQHandler+0x430>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_IRQHandler+0x3e2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <HAL_DMA_IRQHandler+0x434>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d12a      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x438>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e023      	b.n	80041e8 <HAL_DMA_IRQHandler+0x440>
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2204      	movs	r2, #4
 80041f6:	409a      	lsls	r2, r3
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2210      	movs	r2, #16
 8004212:	409a      	lsls	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a6 	beq.w	800436a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a85      	ldr	r2, [pc, #532]	@ (8004438 <HAL_DMA_IRQHandler+0x690>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d04a      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a83      	ldr	r2, [pc, #524]	@ (800443c <HAL_DMA_IRQHandler+0x694>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d045      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a82      	ldr	r2, [pc, #520]	@ (8004440 <HAL_DMA_IRQHandler+0x698>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d040      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a80      	ldr	r2, [pc, #512]	@ (8004444 <HAL_DMA_IRQHandler+0x69c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d03b      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7f      	ldr	r2, [pc, #508]	@ (8004448 <HAL_DMA_IRQHandler+0x6a0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d036      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7d      	ldr	r2, [pc, #500]	@ (800444c <HAL_DMA_IRQHandler+0x6a4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d031      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7c      	ldr	r2, [pc, #496]	@ (8004450 <HAL_DMA_IRQHandler+0x6a8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d02c      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a7a      	ldr	r2, [pc, #488]	@ (8004454 <HAL_DMA_IRQHandler+0x6ac>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d027      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a79      	ldr	r2, [pc, #484]	@ (8004458 <HAL_DMA_IRQHandler+0x6b0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a77      	ldr	r2, [pc, #476]	@ (800445c <HAL_DMA_IRQHandler+0x6b4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01d      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a76      	ldr	r2, [pc, #472]	@ (8004460 <HAL_DMA_IRQHandler+0x6b8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a74      	ldr	r2, [pc, #464]	@ (8004464 <HAL_DMA_IRQHandler+0x6bc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a73      	ldr	r2, [pc, #460]	@ (8004468 <HAL_DMA_IRQHandler+0x6c0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a71      	ldr	r2, [pc, #452]	@ (800446c <HAL_DMA_IRQHandler+0x6c4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a70      	ldr	r2, [pc, #448]	@ (8004470 <HAL_DMA_IRQHandler+0x6c8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_DMA_IRQHandler+0x516>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004474 <HAL_DMA_IRQHandler+0x6cc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10a      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x52c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e009      	b.n	80042e8 <HAL_DMA_IRQHandler+0x540>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d03e      	beq.n	800436a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2210      	movs	r2, #16
 80042f6:	409a      	lsls	r2, r3
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d018      	beq.n	800433c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d024      	beq.n	800436a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
 8004328:	e01f      	b.n	800436a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01b      	beq.n	800436a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
 800433a:	e016      	b.n	800436a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2220      	movs	r2, #32
 8004374:	409a      	lsls	r2, r3
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8110 	beq.w	80045a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2c      	ldr	r2, [pc, #176]	@ (8004438 <HAL_DMA_IRQHandler+0x690>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04a      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2b      	ldr	r2, [pc, #172]	@ (800443c <HAL_DMA_IRQHandler+0x694>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d045      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a29      	ldr	r2, [pc, #164]	@ (8004440 <HAL_DMA_IRQHandler+0x698>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d040      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a28      	ldr	r2, [pc, #160]	@ (8004444 <HAL_DMA_IRQHandler+0x69c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03b      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a26      	ldr	r2, [pc, #152]	@ (8004448 <HAL_DMA_IRQHandler+0x6a0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d036      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a25      	ldr	r2, [pc, #148]	@ (800444c <HAL_DMA_IRQHandler+0x6a4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d031      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	@ (8004450 <HAL_DMA_IRQHandler+0x6a8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02c      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <HAL_DMA_IRQHandler+0x6ac>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d027      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <HAL_DMA_IRQHandler+0x6b0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1f      	ldr	r2, [pc, #124]	@ (800445c <HAL_DMA_IRQHandler+0x6b4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01d      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004460 <HAL_DMA_IRQHandler+0x6b8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <HAL_DMA_IRQHandler+0x6bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <HAL_DMA_IRQHandler+0x6c0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a19      	ldr	r2, [pc, #100]	@ (800446c <HAL_DMA_IRQHandler+0x6c4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <HAL_DMA_IRQHandler+0x6c8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_DMA_IRQHandler+0x678>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <HAL_DMA_IRQHandler+0x6cc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d12b      	bne.n	8004478 <HAL_DMA_IRQHandler+0x6d0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e02a      	b.n	800448c <HAL_DMA_IRQHandler+0x6e4>
 8004436:	bf00      	nop
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8087 	beq.w	80045a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2220      	movs	r2, #32
 800449c:	409a      	lsls	r2, r3
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d139      	bne.n	8004522 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0216 	bic.w	r2, r2, #22
 80044bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_DMA_IRQHandler+0x736>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0208 	bic.w	r2, r2, #8
 80044ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	223f      	movs	r2, #63	@ 0x3f
 80044f8:	409a      	lsls	r2, r3
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 834a 	beq.w	8004bac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
          }
          return;
 8004520:	e344      	b.n	8004bac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d018      	beq.n	8004562 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02c      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
 800454e:	e027      	b.n	80045a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d023      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
 8004560:	e01e      	b.n	80045a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10f      	bne.n	8004590 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0210 	bic.w	r2, r2, #16
 800457e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8306 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8088 	beq.w	80046c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	@ (80047b0 <HAL_DMA_IRQHandler+0xa08>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04a      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a79      	ldr	r2, [pc, #484]	@ (80047b4 <HAL_DMA_IRQHandler+0xa0c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d045      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a77      	ldr	r2, [pc, #476]	@ (80047b8 <HAL_DMA_IRQHandler+0xa10>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d040      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a76      	ldr	r2, [pc, #472]	@ (80047bc <HAL_DMA_IRQHandler+0xa14>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d03b      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a74      	ldr	r2, [pc, #464]	@ (80047c0 <HAL_DMA_IRQHandler+0xa18>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d036      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a73      	ldr	r2, [pc, #460]	@ (80047c4 <HAL_DMA_IRQHandler+0xa1c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d031      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a71      	ldr	r2, [pc, #452]	@ (80047c8 <HAL_DMA_IRQHandler+0xa20>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02c      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a70      	ldr	r2, [pc, #448]	@ (80047cc <HAL_DMA_IRQHandler+0xa24>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d027      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6e      	ldr	r2, [pc, #440]	@ (80047d0 <HAL_DMA_IRQHandler+0xa28>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d022      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6d      	ldr	r2, [pc, #436]	@ (80047d4 <HAL_DMA_IRQHandler+0xa2c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d01d      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6b      	ldr	r2, [pc, #428]	@ (80047d8 <HAL_DMA_IRQHandler+0xa30>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6a      	ldr	r2, [pc, #424]	@ (80047dc <HAL_DMA_IRQHandler+0xa34>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a68      	ldr	r2, [pc, #416]	@ (80047e0 <HAL_DMA_IRQHandler+0xa38>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a67      	ldr	r2, [pc, #412]	@ (80047e4 <HAL_DMA_IRQHandler+0xa3c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a65      	ldr	r2, [pc, #404]	@ (80047e8 <HAL_DMA_IRQHandler+0xa40>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_DMA_IRQHandler+0x8b8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a64      	ldr	r2, [pc, #400]	@ (80047ec <HAL_DMA_IRQHandler+0xa44>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <HAL_DMA_IRQHandler+0x8ca>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e007      	b.n	8004682 <HAL_DMA_IRQHandler+0x8da>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	429a      	cmp	r2, r3
 800468c:	d307      	bcc.n	800469e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f2      	bne.n	8004682 <HAL_DMA_IRQHandler+0x8da>
 800469c:	e000      	b.n	80046a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800469e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2203      	movs	r2, #3
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80046b6:	e003      	b.n	80046c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8272 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
 80046da:	e26c      	b.n	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a43      	ldr	r2, [pc, #268]	@ (80047f0 <HAL_DMA_IRQHandler+0xa48>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a42      	ldr	r2, [pc, #264]	@ (80047f4 <HAL_DMA_IRQHandler+0xa4c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a40      	ldr	r2, [pc, #256]	@ (80047f8 <HAL_DMA_IRQHandler+0xa50>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3f      	ldr	r2, [pc, #252]	@ (80047fc <HAL_DMA_IRQHandler+0xa54>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3d      	ldr	r2, [pc, #244]	@ (8004800 <HAL_DMA_IRQHandler+0xa58>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a3c      	ldr	r2, [pc, #240]	@ (8004804 <HAL_DMA_IRQHandler+0xa5c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a3a      	ldr	r2, [pc, #232]	@ (8004808 <HAL_DMA_IRQHandler+0xa60>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_DMA_IRQHandler+0x984>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a39      	ldr	r2, [pc, #228]	@ (800480c <HAL_DMA_IRQHandler+0xa64>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <HAL_DMA_IRQHandler+0x988>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_DMA_IRQHandler+0x98a>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 823f 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2204      	movs	r2, #4
 800474a:	409a      	lsls	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80cd 	beq.w	80048f0 <HAL_DMA_IRQHandler+0xb48>
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80c7 	beq.w	80048f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2204      	movs	r2, #4
 800476c:	409a      	lsls	r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d049      	beq.n	8004810 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8210 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004798:	e20a      	b.n	8004bb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8206 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ac:	e200      	b.n	8004bb0 <HAL_DMA_IRQHandler+0xe08>
 80047ae:	bf00      	nop
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	58025408 	.word	0x58025408
 80047f4:	5802541c 	.word	0x5802541c
 80047f8:	58025430 	.word	0x58025430
 80047fc:	58025444 	.word	0x58025444
 8004800:	58025458 	.word	0x58025458
 8004804:	5802546c 	.word	0x5802546c
 8004808:	58025480 	.word	0x58025480
 800480c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d160      	bne.n	80048dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a1c <HAL_DMA_IRQHandler+0xc74>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a7d      	ldr	r2, [pc, #500]	@ (8004a20 <HAL_DMA_IRQHandler+0xc78>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7c      	ldr	r2, [pc, #496]	@ (8004a24 <HAL_DMA_IRQHandler+0xc7c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a28 <HAL_DMA_IRQHandler+0xc80>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a79      	ldr	r2, [pc, #484]	@ (8004a2c <HAL_DMA_IRQHandler+0xc84>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a77      	ldr	r2, [pc, #476]	@ (8004a30 <HAL_DMA_IRQHandler+0xc88>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a76      	ldr	r2, [pc, #472]	@ (8004a34 <HAL_DMA_IRQHandler+0xc8c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a74      	ldr	r2, [pc, #464]	@ (8004a38 <HAL_DMA_IRQHandler+0xc90>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a73      	ldr	r2, [pc, #460]	@ (8004a3c <HAL_DMA_IRQHandler+0xc94>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a71      	ldr	r2, [pc, #452]	@ (8004a40 <HAL_DMA_IRQHandler+0xc98>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a70      	ldr	r2, [pc, #448]	@ (8004a44 <HAL_DMA_IRQHandler+0xc9c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6e      	ldr	r2, [pc, #440]	@ (8004a48 <HAL_DMA_IRQHandler+0xca0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6d      	ldr	r2, [pc, #436]	@ (8004a4c <HAL_DMA_IRQHandler+0xca4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004a50 <HAL_DMA_IRQHandler+0xca8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004a54 <HAL_DMA_IRQHandler+0xcac>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_IRQHandler+0xb12>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a68      	ldr	r2, [pc, #416]	@ (8004a58 <HAL_DMA_IRQHandler+0xcb0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <HAL_DMA_IRQHandler+0xb24>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0208 	bic.w	r2, r2, #8
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e007      	b.n	80048dc <HAL_DMA_IRQHandler+0xb34>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8165 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ee:	e15f      	b.n	8004bb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2202      	movs	r2, #2
 80048fa:	409a      	lsls	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80c5 	beq.w	8004a90 <HAL_DMA_IRQHandler+0xce8>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80bf 	beq.w	8004a90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2202      	movs	r2, #2
 800491c:	409a      	lsls	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 813a 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004948:	e134      	b.n	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8130 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800495c:	e12a      	b.n	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	f040 8089 	bne.w	8004a7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a1c <HAL_DMA_IRQHandler+0xc74>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a29      	ldr	r2, [pc, #164]	@ (8004a20 <HAL_DMA_IRQHandler+0xc78>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a28      	ldr	r2, [pc, #160]	@ (8004a24 <HAL_DMA_IRQHandler+0xc7c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a26      	ldr	r2, [pc, #152]	@ (8004a28 <HAL_DMA_IRQHandler+0xc80>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a25      	ldr	r2, [pc, #148]	@ (8004a2c <HAL_DMA_IRQHandler+0xc84>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <HAL_DMA_IRQHandler+0xc88>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a22      	ldr	r2, [pc, #136]	@ (8004a34 <HAL_DMA_IRQHandler+0xc8c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a20      	ldr	r2, [pc, #128]	@ (8004a38 <HAL_DMA_IRQHandler+0xc90>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1f      	ldr	r2, [pc, #124]	@ (8004a3c <HAL_DMA_IRQHandler+0xc94>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a40 <HAL_DMA_IRQHandler+0xc98>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <HAL_DMA_IRQHandler+0xc9c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a48 <HAL_DMA_IRQHandler+0xca0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a19      	ldr	r2, [pc, #100]	@ (8004a4c <HAL_DMA_IRQHandler+0xca4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	@ (8004a50 <HAL_DMA_IRQHandler+0xca8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_DMA_IRQHandler+0xcac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0xc62>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a14      	ldr	r2, [pc, #80]	@ (8004a58 <HAL_DMA_IRQHandler+0xcb0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d128      	bne.n	8004a5c <HAL_DMA_IRQHandler+0xcb4>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0214 	bic.w	r2, r2, #20
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e027      	b.n	8004a6c <HAL_DMA_IRQHandler+0xcc4>
 8004a1c:	40020010 	.word	0x40020010
 8004a20:	40020028 	.word	0x40020028
 8004a24:	40020040 	.word	0x40020040
 8004a28:	40020058 	.word	0x40020058
 8004a2c:	40020070 	.word	0x40020070
 8004a30:	40020088 	.word	0x40020088
 8004a34:	400200a0 	.word	0x400200a0
 8004a38:	400200b8 	.word	0x400200b8
 8004a3c:	40020410 	.word	0x40020410
 8004a40:	40020428 	.word	0x40020428
 8004a44:	40020440 	.word	0x40020440
 8004a48:	40020458 	.word	0x40020458
 8004a4c:	40020470 	.word	0x40020470
 8004a50:	40020488 	.word	0x40020488
 8004a54:	400204a0 	.word	0x400204a0
 8004a58:	400204b8 	.word	0x400204b8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 020a 	bic.w	r2, r2, #10
 8004a6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8097 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a8e:	e091      	b.n	8004bb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2208      	movs	r2, #8
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8088 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8082 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a41      	ldr	r2, [pc, #260]	@ (8004bbc <HAL_DMA_IRQHandler+0xe14>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8004bc0 <HAL_DMA_IRQHandler+0xe18>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3e      	ldr	r2, [pc, #248]	@ (8004bc4 <HAL_DMA_IRQHandler+0xe1c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc8 <HAL_DMA_IRQHandler+0xe20>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <HAL_DMA_IRQHandler+0xe24>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a39      	ldr	r2, [pc, #228]	@ (8004bd0 <HAL_DMA_IRQHandler+0xe28>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a38      	ldr	r2, [pc, #224]	@ (8004bd4 <HAL_DMA_IRQHandler+0xe2c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a36      	ldr	r2, [pc, #216]	@ (8004bd8 <HAL_DMA_IRQHandler+0xe30>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a35      	ldr	r2, [pc, #212]	@ (8004bdc <HAL_DMA_IRQHandler+0xe34>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a33      	ldr	r2, [pc, #204]	@ (8004be0 <HAL_DMA_IRQHandler+0xe38>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <HAL_DMA_IRQHandler+0xe3c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a30      	ldr	r2, [pc, #192]	@ (8004be8 <HAL_DMA_IRQHandler+0xe40>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004bec <HAL_DMA_IRQHandler+0xe44>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf0 <HAL_DMA_IRQHandler+0xe48>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <HAL_DMA_IRQHandler+0xe4c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xdaa>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf8 <HAL_DMA_IRQHandler+0xe50>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <HAL_DMA_IRQHandler+0xdbc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 021c 	bic.w	r2, r2, #28
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e007      	b.n	8004b74 <HAL_DMA_IRQHandler+0xdcc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 020e 	bic.w	r2, r2, #14
 8004b72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
 8004baa:	e004      	b.n	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004bac:	bf00      	nop
 8004bae:	e002      	b.n	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bb6:	3728      	adds	r7, #40	@ 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40020010 	.word	0x40020010
 8004bc0:	40020028 	.word	0x40020028
 8004bc4:	40020040 	.word	0x40020040
 8004bc8:	40020058 	.word	0x40020058
 8004bcc:	40020070 	.word	0x40020070
 8004bd0:	40020088 	.word	0x40020088
 8004bd4:	400200a0 	.word	0x400200a0
 8004bd8:	400200b8 	.word	0x400200b8
 8004bdc:	40020410 	.word	0x40020410
 8004be0:	40020428 	.word	0x40020428
 8004be4:	40020440 	.word	0x40020440
 8004be8:	40020458 	.word	0x40020458
 8004bec:	40020470 	.word	0x40020470
 8004bf0:	40020488 	.word	0x40020488
 8004bf4:	400204a0 	.word	0x400204a0
 8004bf8:	400204b8 	.word	0x400204b8

08004bfc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7f      	ldr	r2, [pc, #508]	@ (8004e30 <DMA_SetConfig+0x21c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d072      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e34 <DMA_SetConfig+0x220>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d06d      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7c      	ldr	r2, [pc, #496]	@ (8004e38 <DMA_SetConfig+0x224>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d068      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7a      	ldr	r2, [pc, #488]	@ (8004e3c <DMA_SetConfig+0x228>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d063      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a79      	ldr	r2, [pc, #484]	@ (8004e40 <DMA_SetConfig+0x22c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d05e      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a77      	ldr	r2, [pc, #476]	@ (8004e44 <DMA_SetConfig+0x230>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d059      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a76      	ldr	r2, [pc, #472]	@ (8004e48 <DMA_SetConfig+0x234>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d054      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a74      	ldr	r2, [pc, #464]	@ (8004e4c <DMA_SetConfig+0x238>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04f      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a73      	ldr	r2, [pc, #460]	@ (8004e50 <DMA_SetConfig+0x23c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a71      	ldr	r2, [pc, #452]	@ (8004e54 <DMA_SetConfig+0x240>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a70      	ldr	r2, [pc, #448]	@ (8004e58 <DMA_SetConfig+0x244>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e5c <DMA_SetConfig+0x248>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6d      	ldr	r2, [pc, #436]	@ (8004e60 <DMA_SetConfig+0x24c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e64 <DMA_SetConfig+0x250>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004e68 <DMA_SetConfig+0x254>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a68      	ldr	r2, [pc, #416]	@ (8004e6c <DMA_SetConfig+0x258>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a67      	ldr	r2, [pc, #412]	@ (8004e70 <DMA_SetConfig+0x25c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a65      	ldr	r2, [pc, #404]	@ (8004e74 <DMA_SetConfig+0x260>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a64      	ldr	r2, [pc, #400]	@ (8004e78 <DMA_SetConfig+0x264>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a62      	ldr	r2, [pc, #392]	@ (8004e7c <DMA_SetConfig+0x268>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a61      	ldr	r2, [pc, #388]	@ (8004e80 <DMA_SetConfig+0x26c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5f      	ldr	r2, [pc, #380]	@ (8004e84 <DMA_SetConfig+0x270>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e88 <DMA_SetConfig+0x274>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <DMA_SetConfig+0x10a>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5c      	ldr	r2, [pc, #368]	@ (8004e8c <DMA_SetConfig+0x278>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <DMA_SetConfig+0x10e>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <DMA_SetConfig+0x110>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a39      	ldr	r2, [pc, #228]	@ (8004e30 <DMA_SetConfig+0x21c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d04a      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a38      	ldr	r2, [pc, #224]	@ (8004e34 <DMA_SetConfig+0x220>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d045      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a36      	ldr	r2, [pc, #216]	@ (8004e38 <DMA_SetConfig+0x224>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d040      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <DMA_SetConfig+0x228>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03b      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <DMA_SetConfig+0x22c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d036      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a32      	ldr	r2, [pc, #200]	@ (8004e44 <DMA_SetConfig+0x230>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d031      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <DMA_SetConfig+0x234>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02c      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e4c <DMA_SetConfig+0x238>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d027      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <DMA_SetConfig+0x23c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <DMA_SetConfig+0x240>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <DMA_SetConfig+0x244>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a29      	ldr	r2, [pc, #164]	@ (8004e5c <DMA_SetConfig+0x248>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <DMA_SetConfig+0x24c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a26      	ldr	r2, [pc, #152]	@ (8004e64 <DMA_SetConfig+0x250>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <DMA_SetConfig+0x254>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <DMA_SetConfig+0x1d0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <DMA_SetConfig+0x258>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <DMA_SetConfig+0x1d4>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <DMA_SetConfig+0x1d6>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d059      	beq.n	8004ea2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	223f      	movs	r2, #63	@ 0x3f
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b40      	cmp	r3, #64	@ 0x40
 8004e1c:	d138      	bne.n	8004e90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e2e:	e086      	b.n	8004f3e <DMA_SetConfig+0x32a>
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	58025408 	.word	0x58025408
 8004e74:	5802541c 	.word	0x5802541c
 8004e78:	58025430 	.word	0x58025430
 8004e7c:	58025444 	.word	0x58025444
 8004e80:	58025458 	.word	0x58025458
 8004e84:	5802546c 	.word	0x5802546c
 8004e88:	58025480 	.word	0x58025480
 8004e8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]
}
 8004ea0:	e04d      	b.n	8004f3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a29      	ldr	r2, [pc, #164]	@ (8004f4c <DMA_SetConfig+0x338>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <DMA_SetConfig+0x33c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a26      	ldr	r2, [pc, #152]	@ (8004f54 <DMA_SetConfig+0x340>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a24      	ldr	r2, [pc, #144]	@ (8004f58 <DMA_SetConfig+0x344>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a23      	ldr	r2, [pc, #140]	@ (8004f5c <DMA_SetConfig+0x348>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a21      	ldr	r2, [pc, #132]	@ (8004f60 <DMA_SetConfig+0x34c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <DMA_SetConfig+0x350>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <DMA_SetConfig+0x2de>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1e      	ldr	r2, [pc, #120]	@ (8004f68 <DMA_SetConfig+0x354>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d101      	bne.n	8004ef6 <DMA_SetConfig+0x2e2>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <DMA_SetConfig+0x2e4>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d108      	bne.n	8004f2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
}
 8004f2c:	e007      	b.n	8004f3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	58025408 	.word	0x58025408
 8004f50:	5802541c 	.word	0x5802541c
 8004f54:	58025430 	.word	0x58025430
 8004f58:	58025444 	.word	0x58025444
 8004f5c:	58025458 	.word	0x58025458
 8004f60:	5802546c 	.word	0x5802546c
 8004f64:	58025480 	.word	0x58025480
 8004f68:	58025494 	.word	0x58025494

08004f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <DMA_CalcBaseAndBitshift+0x118>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d04a      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a41      	ldr	r2, [pc, #260]	@ (8005088 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d045      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800508c <DMA_CalcBaseAndBitshift+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d040      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a3e      	ldr	r2, [pc, #248]	@ (8005090 <DMA_CalcBaseAndBitshift+0x124>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d03b      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8005094 <DMA_CalcBaseAndBitshift+0x128>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d036      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a3b      	ldr	r2, [pc, #236]	@ (8005098 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d031      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a39      	ldr	r2, [pc, #228]	@ (800509c <DMA_CalcBaseAndBitshift+0x130>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02c      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a38      	ldr	r2, [pc, #224]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x134>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d027      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a36      	ldr	r2, [pc, #216]	@ (80050a4 <DMA_CalcBaseAndBitshift+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a35      	ldr	r2, [pc, #212]	@ (80050a8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01d      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a33      	ldr	r2, [pc, #204]	@ (80050ac <DMA_CalcBaseAndBitshift+0x140>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a32      	ldr	r2, [pc, #200]	@ (80050b0 <DMA_CalcBaseAndBitshift+0x144>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a30      	ldr	r2, [pc, #192]	@ (80050b4 <DMA_CalcBaseAndBitshift+0x148>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80050b8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2d      	ldr	r2, [pc, #180]	@ (80050bc <DMA_CalcBaseAndBitshift+0x150>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <DMA_CalcBaseAndBitshift+0xa8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <DMA_CalcBaseAndBitshift+0x154>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <DMA_CalcBaseAndBitshift+0xac>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <DMA_CalcBaseAndBitshift+0xae>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d024      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3b10      	subs	r3, #16
 8005026:	4a27      	ldr	r2, [pc, #156]	@ (80050c4 <DMA_CalcBaseAndBitshift+0x158>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	4a24      	ldr	r2, [pc, #144]	@ (80050c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005038:	5cd3      	ldrb	r3, [r2, r3]
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d908      	bls.n	8005058 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	4b1f      	ldr	r3, [pc, #124]	@ (80050cc <DMA_CalcBaseAndBitshift+0x160>)
 800504e:	4013      	ands	r3, r2
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	659a      	str	r2, [r3, #88]	@ 0x58
 8005056:	e00d      	b.n	8005074 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <DMA_CalcBaseAndBitshift+0x160>)
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6593      	str	r3, [r2, #88]	@ 0x58
 8005066:	e005      	b.n	8005074 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40020010 	.word	0x40020010
 8005088:	40020028 	.word	0x40020028
 800508c:	40020040 	.word	0x40020040
 8005090:	40020058 	.word	0x40020058
 8005094:	40020070 	.word	0x40020070
 8005098:	40020088 	.word	0x40020088
 800509c:	400200a0 	.word	0x400200a0
 80050a0:	400200b8 	.word	0x400200b8
 80050a4:	40020410 	.word	0x40020410
 80050a8:	40020428 	.word	0x40020428
 80050ac:	40020440 	.word	0x40020440
 80050b0:	40020458 	.word	0x40020458
 80050b4:	40020470 	.word	0x40020470
 80050b8:	40020488 	.word	0x40020488
 80050bc:	400204a0 	.word	0x400204a0
 80050c0:	400204b8 	.word	0x400204b8
 80050c4:	aaaaaaab 	.word	0xaaaaaaab
 80050c8:	0801c86c 	.word	0x0801c86c
 80050cc:	fffffc00 	.word	0xfffffc00

080050d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d120      	bne.n	8005126 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d858      	bhi.n	800519e <DMA_CheckFifoParam+0xce>
 80050ec:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <DMA_CheckFifoParam+0x24>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005105 	.word	0x08005105
 80050f8:	08005117 	.word	0x08005117
 80050fc:	08005105 	.word	0x08005105
 8005100:	0800519f 	.word	0x0800519f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d048      	beq.n	80051a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005114:	e045      	b.n	80051a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800511e:	d142      	bne.n	80051a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005124:	e03f      	b.n	80051a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800512e:	d123      	bne.n	8005178 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	2b03      	cmp	r3, #3
 8005136:	d838      	bhi.n	80051aa <DMA_CheckFifoParam+0xda>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <DMA_CheckFifoParam+0x70>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005151 	.word	0x08005151
 8005144:	08005157 	.word	0x08005157
 8005148:	08005151 	.word	0x08005151
 800514c:	08005169 	.word	0x08005169
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
        break;
 8005154:	e030      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d025      	beq.n	80051ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005166:	e022      	b.n	80051ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005170:	d11f      	bne.n	80051b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005176:	e01c      	b.n	80051b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	2b02      	cmp	r3, #2
 800517e:	d902      	bls.n	8005186 <DMA_CheckFifoParam+0xb6>
 8005180:	2b03      	cmp	r3, #3
 8005182:	d003      	beq.n	800518c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005184:	e018      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
        break;
 800518a:	e015      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00e      	beq.n	80051b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
    break;
 800519c:	e00b      	b.n	80051b6 <DMA_CheckFifoParam+0xe6>
        break;
 800519e:	bf00      	nop
 80051a0:	e00a      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        break;
 80051a2:	bf00      	nop
 80051a4:	e008      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        break;
 80051a6:	bf00      	nop
 80051a8:	e006      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        break;
 80051aa:	bf00      	nop
 80051ac:	e004      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        break;
 80051ae:	bf00      	nop
 80051b0:	e002      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
        break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <DMA_CheckFifoParam+0xe8>
    break;
 80051b6:	bf00      	nop
    }
  }

  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a38      	ldr	r2, [pc, #224]	@ (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a35      	ldr	r2, [pc, #212]	@ (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a32      	ldr	r2, [pc, #200]	@ (80052cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2f      	ldr	r2, [pc, #188]	@ (80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01a      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	3b08      	subs	r3, #8
 8005238:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4b26      	ldr	r3, [pc, #152]	@ (80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005254:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2201      	movs	r2, #1
 800525e:	409a      	lsls	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005264:	e024      	b.n	80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	3b10      	subs	r3, #16
 800526e:	4a1e      	ldr	r2, [pc, #120]	@ (80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d806      	bhi.n	800528e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a1b      	ldr	r2, [pc, #108]	@ (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d902      	bls.n	800528e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3308      	adds	r3, #8
 800528c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4b18      	ldr	r3, [pc, #96]	@ (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2201      	movs	r2, #1
 80052aa:	409a      	lsls	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	58025408 	.word	0x58025408
 80052c0:	5802541c 	.word	0x5802541c
 80052c4:	58025430 	.word	0x58025430
 80052c8:	58025444 	.word	0x58025444
 80052cc:	58025458 	.word	0x58025458
 80052d0:	5802546c 	.word	0x5802546c
 80052d4:	58025480 	.word	0x58025480
 80052d8:	58025494 	.word	0x58025494
 80052dc:	cccccccd 	.word	0xcccccccd
 80052e0:	16009600 	.word	0x16009600
 80052e4:	58025880 	.word	0x58025880
 80052e8:	aaaaaaab 	.word	0xaaaaaaab
 80052ec:	400204b8 	.word	0x400204b8
 80052f0:	4002040f 	.word	0x4002040f
 80052f4:	10008200 	.word	0x10008200
 80052f8:	40020880 	.word	0x40020880

080052fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04a      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d847      	bhi.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a25      	ldr	r2, [pc, #148]	@ (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d022      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a24      	ldr	r2, [pc, #144]	@ (80053b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01d      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1f      	ldr	r2, [pc, #124]	@ (80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00e      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d009      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1c      	ldr	r2, [pc, #112]	@ (80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4b17      	ldr	r3, [pc, #92]	@ (80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005384:	671a      	str	r2, [r3, #112]	@ 0x70
 8005386:	e009      	b.n	800539c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800539a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3b01      	subs	r3, #1
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	58025408 	.word	0x58025408
 80053b8:	5802541c 	.word	0x5802541c
 80053bc:	58025430 	.word	0x58025430
 80053c0:	58025444 	.word	0x58025444
 80053c4:	58025458 	.word	0x58025458
 80053c8:	5802546c 	.word	0x5802546c
 80053cc:	58025480 	.word	0x58025480
 80053d0:	58025494 	.word	0x58025494
 80053d4:	1600963f 	.word	0x1600963f
 80053d8:	58025940 	.word	0x58025940
 80053dc:	1000823f 	.word	0x1000823f
 80053e0:	40020940 	.word	0x40020940

080053e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	@ 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80053f2:	4b89      	ldr	r3, [pc, #548]	@ (8005618 <HAL_GPIO_Init+0x234>)
 80053f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053f6:	e194      	b.n	8005722 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2101      	movs	r1, #1
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8186 	beq.w	800571c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d005      	beq.n	8005428 <HAL_GPIO_Init+0x44>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d130      	bne.n	800548a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800545e:	2201      	movs	r2, #1
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 0201 	and.w	r2, r3, #1
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4313      	orrs	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b03      	cmp	r3, #3
 8005494:	d017      	beq.n	80054c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	2203      	movs	r2, #3
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d123      	bne.n	800551a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	08da      	lsrs	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3208      	adds	r2, #8
 80054da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	220f      	movs	r2, #15
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	08da      	lsrs	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3208      	adds	r2, #8
 8005514:	69b9      	ldr	r1, [r7, #24]
 8005516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	2203      	movs	r2, #3
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80e0 	beq.w	800571c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800555c:	4b2f      	ldr	r3, [pc, #188]	@ (800561c <HAL_GPIO_Init+0x238>)
 800555e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005562:	4a2e      	ldr	r2, [pc, #184]	@ (800561c <HAL_GPIO_Init+0x238>)
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800556c:	4b2b      	ldr	r3, [pc, #172]	@ (800561c <HAL_GPIO_Init+0x238>)
 800556e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800557a:	4a29      	ldr	r2, [pc, #164]	@ (8005620 <HAL_GPIO_Init+0x23c>)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	3302      	adds	r3, #2
 8005582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	220f      	movs	r2, #15
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a20      	ldr	r2, [pc, #128]	@ (8005624 <HAL_GPIO_Init+0x240>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d052      	beq.n	800564c <HAL_GPIO_Init+0x268>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005628 <HAL_GPIO_Init+0x244>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d031      	beq.n	8005612 <HAL_GPIO_Init+0x22e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	@ (800562c <HAL_GPIO_Init+0x248>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d02b      	beq.n	800560e <HAL_GPIO_Init+0x22a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <HAL_GPIO_Init+0x24c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d025      	beq.n	800560a <HAL_GPIO_Init+0x226>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <HAL_GPIO_Init+0x250>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <HAL_GPIO_Init+0x222>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <HAL_GPIO_Init+0x254>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d019      	beq.n	8005602 <HAL_GPIO_Init+0x21e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1a      	ldr	r2, [pc, #104]	@ (800563c <HAL_GPIO_Init+0x258>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_GPIO_Init+0x21a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <HAL_GPIO_Init+0x25c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00d      	beq.n	80055fa <HAL_GPIO_Init+0x216>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <HAL_GPIO_Init+0x260>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <HAL_GPIO_Init+0x212>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_GPIO_Init+0x264>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <HAL_GPIO_Init+0x20e>
 80055ee:	2309      	movs	r3, #9
 80055f0:	e02d      	b.n	800564e <HAL_GPIO_Init+0x26a>
 80055f2:	230a      	movs	r3, #10
 80055f4:	e02b      	b.n	800564e <HAL_GPIO_Init+0x26a>
 80055f6:	2308      	movs	r3, #8
 80055f8:	e029      	b.n	800564e <HAL_GPIO_Init+0x26a>
 80055fa:	2307      	movs	r3, #7
 80055fc:	e027      	b.n	800564e <HAL_GPIO_Init+0x26a>
 80055fe:	2306      	movs	r3, #6
 8005600:	e025      	b.n	800564e <HAL_GPIO_Init+0x26a>
 8005602:	2305      	movs	r3, #5
 8005604:	e023      	b.n	800564e <HAL_GPIO_Init+0x26a>
 8005606:	2304      	movs	r3, #4
 8005608:	e021      	b.n	800564e <HAL_GPIO_Init+0x26a>
 800560a:	2303      	movs	r3, #3
 800560c:	e01f      	b.n	800564e <HAL_GPIO_Init+0x26a>
 800560e:	2302      	movs	r3, #2
 8005610:	e01d      	b.n	800564e <HAL_GPIO_Init+0x26a>
 8005612:	2301      	movs	r3, #1
 8005614:	e01b      	b.n	800564e <HAL_GPIO_Init+0x26a>
 8005616:	bf00      	nop
 8005618:	58000080 	.word	0x58000080
 800561c:	58024400 	.word	0x58024400
 8005620:	58000400 	.word	0x58000400
 8005624:	58020000 	.word	0x58020000
 8005628:	58020400 	.word	0x58020400
 800562c:	58020800 	.word	0x58020800
 8005630:	58020c00 	.word	0x58020c00
 8005634:	58021000 	.word	0x58021000
 8005638:	58021400 	.word	0x58021400
 800563c:	58021800 	.word	0x58021800
 8005640:	58021c00 	.word	0x58021c00
 8005644:	58022000 	.word	0x58022000
 8005648:	58022400 	.word	0x58022400
 800564c:	2300      	movs	r3, #0
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	f002 0203 	and.w	r2, r2, #3
 8005654:	0092      	lsls	r2, r2, #2
 8005656:	4093      	lsls	r3, r2
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800565e:	4938      	ldr	r1, [pc, #224]	@ (8005740 <HAL_GPIO_Init+0x35c>)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	3302      	adds	r3, #2
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005692:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	3301      	adds	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	f47f ae63 	bne.w	80053f8 <HAL_GPIO_Init+0x14>
  }
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	3724      	adds	r7, #36	@ 0x24
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	58000400 	.word	0x58000400

08005744 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800574c:	4a08      	ldr	r2, [pc, #32]	@ (8005770 <HAL_HSEM_FastTake+0x2c>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3320      	adds	r3, #32
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <HAL_HSEM_FastTake+0x30>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	58026400 	.word	0x58026400
 8005774:	80000300 	.word	0x80000300

08005778 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005782:	4906      	ldr	r1, [pc, #24]	@ (800579c <HAL_HSEM_Release+0x24>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	58026400 	.word	0x58026400

080057a0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <HAL_HSEM_ActivateNotification+0x20>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4904      	ldr	r1, [pc, #16]	@ (80057c0 <HAL_HSEM_ActivateNotification+0x20>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]
#endif
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	58026500 	.word	0x58026500

080057c4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e041      	b.n	800585a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80057de:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80057e8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6852      	ldr	r2, [r2, #4]
 80057f2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6892      	ldr	r2, [r2, #8]
 80057fc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80057fe:	f7fc feb1 	bl	8002564 <HAL_GetTick>
 8005802:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005804:	e00f      	b.n	8005826 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005806:	f7fc fead 	bl	8002564 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b31      	cmp	r3, #49	@ 0x31
 8005812:	d908      	bls.n	8005826 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e019      	b.n	800585a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e8      	bne.n	8005806 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	429a      	cmp	r2, r3
 8005840:	d005      	beq.n	800584e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	611a      	str	r2, [r3, #16]
 800584c:	e004      	b.n	8005858 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005872:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800588c:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	2b06      	cmp	r3, #6
 8005896:	d00a      	beq.n	80058ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005898:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d001      	beq.n	80058aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e040      	b.n	800592c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e03e      	b.n	800592c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058ae:	4b21      	ldr	r3, [pc, #132]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80058b6:	491f      	ldr	r1, [pc, #124]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058be:	f7fc fe51 	bl	8002564 <HAL_GetTick>
 80058c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058c4:	e009      	b.n	80058da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058c6:	f7fc fe4d 	bl	8002564 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058d4:	d901      	bls.n	80058da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e028      	b.n	800592c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e6:	d1ee      	bne.n	80058c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b1e      	cmp	r3, #30
 80058ec:	d008      	beq.n	8005900 <HAL_PWREx_ConfigSupply+0x7c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80058f2:	d005      	beq.n	8005900 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b1d      	cmp	r3, #29
 80058f8:	d002      	beq.n	8005900 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80058fe:	d114      	bne.n	800592a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005900:	f7fc fe30 	bl	8002564 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005906:	e009      	b.n	800591c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005908:	f7fc fe2c 	bl	8002564 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005916:	d901      	bls.n	800591c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e007      	b.n	800592c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <HAL_PWREx_ConfigSupply+0xb0>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005928:	d1ee      	bne.n	8005908 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	58024800 	.word	0x58024800

08005938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	@ 0x30
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f000 bc48 	b.w	80061dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8088 	beq.w	8005a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800595a:	4b99      	ldr	r3, [pc, #612]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005964:	4b96      	ldr	r3, [pc, #600]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	2b10      	cmp	r3, #16
 800596e:	d007      	beq.n	8005980 <HAL_RCC_OscConfig+0x48>
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	2b18      	cmp	r3, #24
 8005974:	d111      	bne.n	800599a <HAL_RCC_OscConfig+0x62>
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d10c      	bne.n	800599a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d06d      	beq.n	8005a68 <HAL_RCC_OscConfig+0x130>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d169      	bne.n	8005a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f000 bc21 	b.w	80061dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a2:	d106      	bne.n	80059b2 <HAL_RCC_OscConfig+0x7a>
 80059a4:	4b86      	ldr	r3, [pc, #536]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a85      	ldr	r2, [pc, #532]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	e02e      	b.n	8005a10 <HAL_RCC_OscConfig+0xd8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x9c>
 80059ba:	4b81      	ldr	r3, [pc, #516]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a80      	ldr	r2, [pc, #512]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7d      	ldr	r2, [pc, #500]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e01d      	b.n	8005a10 <HAL_RCC_OscConfig+0xd8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0xc0>
 80059de:	4b78      	ldr	r3, [pc, #480]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a77      	ldr	r2, [pc, #476]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b75      	ldr	r3, [pc, #468]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a74      	ldr	r2, [pc, #464]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e00b      	b.n	8005a10 <HAL_RCC_OscConfig+0xd8>
 80059f8:	4b71      	ldr	r3, [pc, #452]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a70      	ldr	r2, [pc, #448]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a6d      	ldr	r2, [pc, #436]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fc fda4 	bl	8002564 <HAL_GetTick>
 8005a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fc fda0 	bl	8002564 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	@ 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e3d4      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a32:	4b63      	ldr	r3, [pc, #396]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xe8>
 8005a3e:	e014      	b.n	8005a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fc fd90 	bl	8002564 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fc fd8c 	bl	8002564 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e3c0      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a5a:	4b59      	ldr	r3, [pc, #356]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x110>
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80ca 	beq.w	8005c0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a78:	4b51      	ldr	r3, [pc, #324]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a82:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <HAL_RCC_OscConfig+0x166>
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b18      	cmp	r3, #24
 8005a92:	d156      	bne.n	8005b42 <HAL_RCC_OscConfig+0x20a>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d151      	bne.n	8005b42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9e:	4b48      	ldr	r3, [pc, #288]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x17e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e392      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ab6:	4b42      	ldr	r3, [pc, #264]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 0219 	bic.w	r2, r3, #25
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	493f      	ldr	r1, [pc, #252]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fc fd4c 	bl	8002564 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad0:	f7fc fd48 	bl	8002564 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e37c      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ae2:	4b37      	ldr	r3, [pc, #220]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aee:	f7fc fd45 	bl	800257c <HAL_GetREVID>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d817      	bhi.n	8005b2c <HAL_RCC_OscConfig+0x1f4>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b40      	cmp	r3, #64	@ 0x40
 8005b02:	d108      	bne.n	8005b16 <HAL_RCC_OscConfig+0x1de>
 8005b04:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b14:	e07a      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b16:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	031b      	lsls	r3, r3, #12
 8005b24:	4926      	ldr	r1, [pc, #152]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b2a:	e06f      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2c:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	4921      	ldr	r1, [pc, #132]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b40:	e064      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d047      	beq.n	8005bda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 0219 	bic.w	r2, r3, #25
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	491a      	ldr	r1, [pc, #104]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fc fd02 	bl	8002564 <HAL_GetTick>
 8005b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fc fcfe 	bl	8002564 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e332      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b76:	4b12      	ldr	r3, [pc, #72]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b82:	f7fc fcfb 	bl	800257c <HAL_GetREVID>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d819      	bhi.n	8005bc4 <HAL_RCC_OscConfig+0x28c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d108      	bne.n	8005baa <HAL_RCC_OscConfig+0x272>
 8005b98:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ba0:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba6:	6053      	str	r3, [r2, #4]
 8005ba8:	e030      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
 8005baa:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	031b      	lsls	r3, r3, #12
 8005bb8:	4901      	ldr	r1, [pc, #4]	@ (8005bc0 <HAL_RCC_OscConfig+0x288>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	604b      	str	r3, [r1, #4]
 8005bbe:	e025      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	4b9a      	ldr	r3, [pc, #616]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	061b      	lsls	r3, r3, #24
 8005bd2:	4997      	ldr	r1, [pc, #604]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
 8005bd8:	e018      	b.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bda:	4b95      	ldr	r3, [pc, #596]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a94      	ldr	r2, [pc, #592]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fc fcbd 	bl	8002564 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bee:	f7fc fcb9 	bl	8002564 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e2ed      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c00:	4b8b      	ldr	r3, [pc, #556]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80a9 	beq.w	8005d6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c1a:	4b85      	ldr	r3, [pc, #532]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c24:	4b82      	ldr	r3, [pc, #520]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d007      	beq.n	8005c40 <HAL_RCC_OscConfig+0x308>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b18      	cmp	r3, #24
 8005c34:	d13a      	bne.n	8005cac <HAL_RCC_OscConfig+0x374>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d135      	bne.n	8005cac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c40:	4b7b      	ldr	r3, [pc, #492]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_OscConfig+0x320>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	2b80      	cmp	r3, #128	@ 0x80
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e2c1      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c58:	f7fc fc90 	bl	800257c <HAL_GetREVID>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d817      	bhi.n	8005c96 <HAL_RCC_OscConfig+0x35e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d108      	bne.n	8005c80 <HAL_RCC_OscConfig+0x348>
 8005c6e:	4b70      	ldr	r3, [pc, #448]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c76:	4a6e      	ldr	r2, [pc, #440]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c7e:	e075      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c80:	4b6b      	ldr	r3, [pc, #428]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	069b      	lsls	r3, r3, #26
 8005c8e:	4968      	ldr	r1, [pc, #416]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c94:	e06a      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c96:	4b66      	ldr	r3, [pc, #408]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	4962      	ldr	r1, [pc, #392]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005caa:	e05f      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d042      	beq.n	8005d3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fc fc50 	bl	8002564 <HAL_GetTick>
 8005cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cc8:	f7fc fc4c 	bl	8002564 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e280      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cda:	4b55      	ldr	r3, [pc, #340]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ce6:	f7fc fc49 	bl	800257c <HAL_GetREVID>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d817      	bhi.n	8005d24 <HAL_RCC_OscConfig+0x3ec>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d108      	bne.n	8005d0e <HAL_RCC_OscConfig+0x3d6>
 8005cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d04:	4a4a      	ldr	r2, [pc, #296]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d0a:	6053      	str	r3, [r2, #4]
 8005d0c:	e02e      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
 8005d0e:	4b48      	ldr	r3, [pc, #288]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	069b      	lsls	r3, r3, #26
 8005d1c:	4944      	ldr	r1, [pc, #272]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	604b      	str	r3, [r1, #4]
 8005d22:	e023      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
 8005d24:	4b42      	ldr	r3, [pc, #264]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	493f      	ldr	r1, [pc, #252]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60cb      	str	r3, [r1, #12]
 8005d38:	e018      	b.n	8005d6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fc fc0d 	bl	8002564 <HAL_GetTick>
 8005d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d4e:	f7fc fc09 	bl	8002564 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e23d      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d60:	4b33      	ldr	r3, [pc, #204]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f0      	bne.n	8005d4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d036      	beq.n	8005de6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d019      	beq.n	8005db4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d80:	4b2b      	ldr	r3, [pc, #172]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d84:	4a2a      	ldr	r2, [pc, #168]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8c:	f7fc fbea 	bl	8002564 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d94:	f7fc fbe6 	bl	8002564 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e21a      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005da6:	4b22      	ldr	r3, [pc, #136]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x45c>
 8005db2:	e018      	b.n	8005de6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db4:	4b1e      	ldr	r3, [pc, #120]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc0:	f7fc fbd0 	bl	8002564 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc8:	f7fc fbcc 	bl	8002564 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e200      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dda:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d039      	beq.n	8005e66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e06:	f7fc fbad 	bl	8002564 <HAL_GetTick>
 8005e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e0e:	f7fc fba9 	bl	8002564 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1dd      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e20:	4b03      	ldr	r3, [pc, #12]	@ (8005e30 <HAL_RCC_OscConfig+0x4f8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x4d6>
 8005e2c:	e01b      	b.n	8005e66 <HAL_RCC_OscConfig+0x52e>
 8005e2e:	bf00      	nop
 8005e30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e34:	4b9b      	ldr	r3, [pc, #620]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a9a      	ldr	r2, [pc, #616]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e40:	f7fc fb90 	bl	8002564 <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e48:	f7fc fb8c 	bl	8002564 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e1c0      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e5a:	4b92      	ldr	r3, [pc, #584]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8081 	beq.w	8005f76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e74:	4b8c      	ldr	r3, [pc, #560]	@ (80060a8 <HAL_RCC_OscConfig+0x770>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a8b      	ldr	r2, [pc, #556]	@ (80060a8 <HAL_RCC_OscConfig+0x770>)
 8005e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e80:	f7fc fb70 	bl	8002564 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e88:	f7fc fb6c 	bl	8002564 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e1a0      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e9a:	4b83      	ldr	r3, [pc, #524]	@ (80060a8 <HAL_RCC_OscConfig+0x770>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d106      	bne.n	8005ebc <HAL_RCC_OscConfig+0x584>
 8005eae:	4b7d      	ldr	r3, [pc, #500]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eba:	e02d      	b.n	8005f18 <HAL_RCC_OscConfig+0x5e0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10c      	bne.n	8005ede <HAL_RCC_OscConfig+0x5a6>
 8005ec4:	4b77      	ldr	r3, [pc, #476]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	4a76      	ldr	r2, [pc, #472]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed0:	4b74      	ldr	r3, [pc, #464]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	4a73      	ldr	r2, [pc, #460]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ed6:	f023 0304 	bic.w	r3, r3, #4
 8005eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005edc:	e01c      	b.n	8005f18 <HAL_RCC_OscConfig+0x5e0>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d10c      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5c8>
 8005ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	4a6e      	ldr	r2, [pc, #440]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005eec:	f043 0304 	orr.w	r3, r3, #4
 8005ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005efe:	e00b      	b.n	8005f18 <HAL_RCC_OscConfig+0x5e0>
 8005f00:	4b68      	ldr	r3, [pc, #416]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f04:	4a67      	ldr	r2, [pc, #412]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f0c:	4b65      	ldr	r3, [pc, #404]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	4a64      	ldr	r2, [pc, #400]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f12:	f023 0304 	bic.w	r3, r3, #4
 8005f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f20:	f7fc fb20 	bl	8002564 <HAL_GetTick>
 8005f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f28:	f7fc fb1c 	bl	8002564 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e14e      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f3e:	4b59      	ldr	r3, [pc, #356]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0ee      	beq.n	8005f28 <HAL_RCC_OscConfig+0x5f0>
 8005f4a:	e014      	b.n	8005f76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7fc fb0a 	bl	8002564 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fc fb06 	bl	8002564 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e138      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ee      	bne.n	8005f54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 812d 	beq.w	80061da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f80:	4b48      	ldr	r3, [pc, #288]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f88:	2b18      	cmp	r3, #24
 8005f8a:	f000 80bd 	beq.w	8006108 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	f040 809e 	bne.w	80060d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f98:	4b42      	ldr	r3, [pc, #264]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a41      	ldr	r2, [pc, #260]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fc fade 	bl	8002564 <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fc fada 	bl	8002564 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e10e      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fbe:	4b39      	ldr	r3, [pc, #228]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fca:	4b36      	ldr	r3, [pc, #216]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fce:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCC_OscConfig+0x774>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fda:	0112      	lsls	r2, r2, #4
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4931      	ldr	r1, [pc, #196]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	025b      	lsls	r3, r3, #9
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	3b01      	subs	r3, #1
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	3b01      	subs	r3, #1
 800600e:	061b      	lsls	r3, r3, #24
 8006010:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006014:	4923      	ldr	r1, [pc, #140]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006016:	4313      	orrs	r3, r2
 8006018:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800601a:	4b22      	ldr	r3, [pc, #136]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	4a21      	ldr	r2, [pc, #132]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006026:	4b1f      	ldr	r3, [pc, #124]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800602a:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <HAL_RCC_OscConfig+0x778>)
 800602c:	4013      	ands	r3, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006032:	00d2      	lsls	r2, r2, #3
 8006034:	491b      	ldr	r1, [pc, #108]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006036:	4313      	orrs	r3, r2
 8006038:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800603a:	4b1a      	ldr	r3, [pc, #104]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	f023 020c 	bic.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	4917      	ldr	r1, [pc, #92]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800604c:	4b15      	ldr	r3, [pc, #84]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	f023 0202 	bic.w	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006058:	4912      	ldr	r1, [pc, #72]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800605e:	4b11      	ldr	r3, [pc, #68]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606a:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a0d      	ldr	r2, [pc, #52]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	4a0a      	ldr	r2, [pc, #40]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006082:	4b08      	ldr	r3, [pc, #32]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	4a07      	ldr	r2, [pc, #28]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800608e:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a04      	ldr	r2, [pc, #16]	@ (80060a4 <HAL_RCC_OscConfig+0x76c>)
 8006094:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fc fa63 	bl	8002564 <HAL_GetTick>
 800609e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060a0:	e011      	b.n	80060c6 <HAL_RCC_OscConfig+0x78e>
 80060a2:	bf00      	nop
 80060a4:	58024400 	.word	0x58024400
 80060a8:	58024800 	.word	0x58024800
 80060ac:	fffffc0c 	.word	0xfffffc0c
 80060b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b4:	f7fc fa56 	bl	8002564 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e08a      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060c6:	4b47      	ldr	r3, [pc, #284]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x77c>
 80060d2:	e082      	b.n	80061da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b43      	ldr	r3, [pc, #268]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a42      	ldr	r2, [pc, #264]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fc fa40 	bl	8002564 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc fa3c 	bl	8002564 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e070      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060fa:	4b3a      	ldr	r3, [pc, #232]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x7b0>
 8006106:	e068      	b.n	80061da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006108:	4b36      	ldr	r3, [pc, #216]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800610e:	4b35      	ldr	r3, [pc, #212]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006112:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	2b01      	cmp	r3, #1
 800611a:	d031      	beq.n	8006180 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f003 0203 	and.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d12a      	bne.n	8006180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d122      	bne.n	8006180 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d11a      	bne.n	8006180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0a5b      	lsrs	r3, r3, #9
 800614e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006156:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d111      	bne.n	8006180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d108      	bne.n	8006180 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	0e1b      	lsrs	r3, r3, #24
 8006172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e02b      	b.n	80061dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006184:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	08db      	lsrs	r3, r3, #3
 800618a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800618e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	429a      	cmp	r2, r3
 8006198:	d01f      	beq.n	80061da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a11      	ldr	r2, [pc, #68]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061a6:	f7fc f9dd 	bl	8002564 <HAL_GetTick>
 80061aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061ac:	bf00      	nop
 80061ae:	f7fc f9d9 	bl	8002564 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d0f9      	beq.n	80061ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80061bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061be:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <HAL_RCC_OscConfig+0x8b0>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061c6:	00d2      	lsls	r2, r2, #3
 80061c8:	4906      	ldr	r1, [pc, #24]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <HAL_RCC_OscConfig+0x8ac>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3730      	adds	r7, #48	@ 0x30
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	58024400 	.word	0x58024400
 80061e8:	ffff0007 	.word	0xffff0007

080061ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e19c      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b8a      	ldr	r3, [pc, #552]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d910      	bls.n	8006230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b87      	ldr	r3, [pc, #540]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	4985      	ldr	r1, [pc, #532]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b83      	ldr	r3, [pc, #524]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e184      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d010      	beq.n	800625e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	4b7b      	ldr	r3, [pc, #492]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006248:	429a      	cmp	r2, r3
 800624a:	d908      	bls.n	800625e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800624c:	4b78      	ldr	r3, [pc, #480]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4975      	ldr	r1, [pc, #468]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800625a:	4313      	orrs	r3, r2
 800625c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	4b70      	ldr	r3, [pc, #448]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006276:	429a      	cmp	r2, r3
 8006278:	d908      	bls.n	800628c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800627a:	4b6d      	ldr	r3, [pc, #436]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	496a      	ldr	r1, [pc, #424]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006288:	4313      	orrs	r3, r2
 800628a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	4b64      	ldr	r3, [pc, #400]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d908      	bls.n	80062ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062a8:	4b61      	ldr	r3, [pc, #388]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	495e      	ldr	r1, [pc, #376]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	4b59      	ldr	r3, [pc, #356]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d908      	bls.n	80062e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062d6:	4b56      	ldr	r3, [pc, #344]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4953      	ldr	r1, [pc, #332]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d010      	beq.n	8006316 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	429a      	cmp	r2, r3
 8006302:	d908      	bls.n	8006316 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006304:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f023 020f 	bic.w	r2, r3, #15
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4947      	ldr	r1, [pc, #284]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006312:	4313      	orrs	r3, r2
 8006314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d055      	beq.n	80063ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4940      	ldr	r1, [pc, #256]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006330:	4313      	orrs	r3, r2
 8006332:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d107      	bne.n	800634c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800633c:	4b3c      	ldr	r3, [pc, #240]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d121      	bne.n	800638c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0f6      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b03      	cmp	r3, #3
 8006352:	d107      	bne.n	8006364 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006354:	4b36      	ldr	r3, [pc, #216]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d115      	bne.n	800638c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0ea      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800636c:	4b30      	ldr	r3, [pc, #192]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0de      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800637c:	4b2c      	ldr	r3, [pc, #176]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0d6      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800638c:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f023 0207 	bic.w	r2, r3, #7
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4925      	ldr	r1, [pc, #148]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 800639a:	4313      	orrs	r3, r2
 800639c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639e:	f7fc f8e1 	bl	8002564 <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a6:	f7fc f8dd 	bl	8002564 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e0be      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1eb      	bne.n	80063a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d208      	bcs.n	80063fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f023 020f 	bic.w	r2, r3, #15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	490e      	ldr	r1, [pc, #56]	@ (8006430 <HAL_RCC_ClockConfig+0x244>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063fc:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d214      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640a:	4b08      	ldr	r3, [pc, #32]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 020f 	bic.w	r2, r3, #15
 8006412:	4906      	ldr	r1, [pc, #24]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	4313      	orrs	r3, r2
 8006418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b04      	ldr	r3, [pc, #16]	@ (800642c <HAL_RCC_ClockConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d005      	beq.n	8006434 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e086      	b.n	800653a <HAL_RCC_ClockConfig+0x34e>
 800642c:	52002000 	.word	0x52002000
 8006430:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	4b3f      	ldr	r3, [pc, #252]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800644c:	429a      	cmp	r2, r3
 800644e:	d208      	bcs.n	8006462 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006450:	4b3c      	ldr	r3, [pc, #240]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	4939      	ldr	r1, [pc, #228]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 800645e:	4313      	orrs	r3, r2
 8006460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d010      	beq.n	8006490 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	4b34      	ldr	r3, [pc, #208]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800647a:	429a      	cmp	r2, r3
 800647c:	d208      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800647e:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	492e      	ldr	r1, [pc, #184]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 800648c:	4313      	orrs	r3, r2
 800648e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	4b28      	ldr	r3, [pc, #160]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d208      	bcs.n	80064be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	4922      	ldr	r1, [pc, #136]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d208      	bcs.n	80064ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064da:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4917      	ldr	r1, [pc, #92]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064ec:	f000 f834 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4912      	ldr	r1, [pc, #72]	@ (8006548 <HAL_RCC_ClockConfig+0x35c>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
 8006508:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800650a:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <HAL_RCC_ClockConfig+0x358>)
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	4a0d      	ldr	r2, [pc, #52]	@ (8006548 <HAL_RCC_ClockConfig+0x35c>)
 8006514:	5cd3      	ldrb	r3, [r2, r3]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	4a0a      	ldr	r2, [pc, #40]	@ (800654c <HAL_RCC_ClockConfig+0x360>)
 8006522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006524:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <HAL_RCC_ClockConfig+0x364>)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800652a:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <HAL_RCC_ClockConfig+0x368>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb fc8c 	bl	8001e4c <HAL_InitTick>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400
 8006548:	0801c838 	.word	0x0801c838
 800654c:	24000004 	.word	0x24000004
 8006550:	24000000 	.word	0x24000000
 8006554:	24000028 	.word	0x24000028

08006558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b089      	sub	sp, #36	@ 0x24
 800655c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800655e:	4bb3      	ldr	r3, [pc, #716]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006566:	2b18      	cmp	r3, #24
 8006568:	f200 8155 	bhi.w	8006816 <HAL_RCC_GetSysClockFreq+0x2be>
 800656c:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <HAL_RCC_GetSysClockFreq+0x1c>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065d9 	.word	0x080065d9
 8006578:	08006817 	.word	0x08006817
 800657c:	08006817 	.word	0x08006817
 8006580:	08006817 	.word	0x08006817
 8006584:	08006817 	.word	0x08006817
 8006588:	08006817 	.word	0x08006817
 800658c:	08006817 	.word	0x08006817
 8006590:	08006817 	.word	0x08006817
 8006594:	080065ff 	.word	0x080065ff
 8006598:	08006817 	.word	0x08006817
 800659c:	08006817 	.word	0x08006817
 80065a0:	08006817 	.word	0x08006817
 80065a4:	08006817 	.word	0x08006817
 80065a8:	08006817 	.word	0x08006817
 80065ac:	08006817 	.word	0x08006817
 80065b0:	08006817 	.word	0x08006817
 80065b4:	08006605 	.word	0x08006605
 80065b8:	08006817 	.word	0x08006817
 80065bc:	08006817 	.word	0x08006817
 80065c0:	08006817 	.word	0x08006817
 80065c4:	08006817 	.word	0x08006817
 80065c8:	08006817 	.word	0x08006817
 80065cc:	08006817 	.word	0x08006817
 80065d0:	08006817 	.word	0x08006817
 80065d4:	0800660b 	.word	0x0800660b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d8:	4b94      	ldr	r3, [pc, #592]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e4:	4b91      	ldr	r3, [pc, #580]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	08db      	lsrs	r3, r3, #3
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	4a90      	ldr	r2, [pc, #576]	@ (8006830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
 80065f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065f6:	e111      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065fa:	61bb      	str	r3, [r7, #24]
      break;
 80065fc:	e10e      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006600:	61bb      	str	r3, [r7, #24]
      break;
 8006602:	e10b      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006604:	4b8c      	ldr	r3, [pc, #560]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006606:	61bb      	str	r3, [r7, #24]
      break;
 8006608:	e108      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800660a:	4b88      	ldr	r3, [pc, #544]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006614:	4b85      	ldr	r3, [pc, #532]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800661e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006620:	4b82      	ldr	r3, [pc, #520]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800662a:	4b80      	ldr	r3, [pc, #512]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662e:	08db      	lsrs	r3, r3, #3
 8006630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80e1 	beq.w	8006810 <HAL_RCC_GetSysClockFreq+0x2b8>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b02      	cmp	r3, #2
 8006652:	f000 8083 	beq.w	800675c <HAL_RCC_GetSysClockFreq+0x204>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b02      	cmp	r3, #2
 800665a:	f200 80a1 	bhi.w	80067a0 <HAL_RCC_GetSysClockFreq+0x248>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x114>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d056      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x1c0>
 800666a:	e099      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800666c:	4b6f      	ldr	r3, [pc, #444]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d02d      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006678:	4b6c      	ldr	r3, [pc, #432]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	08db      	lsrs	r3, r3, #3
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	4a6b      	ldr	r2, [pc, #428]	@ (8006830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
 8006688:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a2:	4b62      	ldr	r3, [pc, #392]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066d2:	e087      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006840 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e6:	4b51      	ldr	r3, [pc, #324]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800670a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006716:	e065      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006844 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	4b40      	ldr	r3, [pc, #256]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	ed97 6a02 	vldr	s12, [r7, #8]
 800673e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800674e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800675a:	e043      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006848 <HAL_RCC_GetSysClockFreq+0x2f0>
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b2f      	ldr	r3, [pc, #188]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006782:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800679e:	e021      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006844 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b1e      	ldr	r3, [pc, #120]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067e4:	4b11      	ldr	r3, [pc, #68]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	0a5b      	lsrs	r3, r3, #9
 80067ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ee:	3301      	adds	r3, #1
 80067f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006808:	ee17 3a90 	vmov	r3, s15
 800680c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800680e:	e005      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	61bb      	str	r3, [r7, #24]
      break;
 8006814:	e002      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006816:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006818:	61bb      	str	r3, [r7, #24]
      break;
 800681a:	bf00      	nop
  }

  return sysclockfreq;
 800681c:	69bb      	ldr	r3, [r7, #24]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3724      	adds	r7, #36	@ 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
 8006830:	03d09000 	.word	0x03d09000
 8006834:	003d0900 	.word	0x003d0900
 8006838:	017d7840 	.word	0x017d7840
 800683c:	46000000 	.word	0x46000000
 8006840:	4c742400 	.word	0x4c742400
 8006844:	4a742400 	.word	0x4a742400
 8006848:	4bbebc20 	.word	0x4bbebc20

0800684c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006852:	f7ff fe81 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006856:	4602      	mov	r2, r0
 8006858:	4b10      	ldr	r3, [pc, #64]	@ (800689c <HAL_RCC_GetHCLKFreq+0x50>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	0a1b      	lsrs	r3, r3, #8
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	490f      	ldr	r1, [pc, #60]	@ (80068a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006864:	5ccb      	ldrb	r3, [r1, r3]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	fa22 f303 	lsr.w	r3, r2, r3
 800686e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006870:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <HAL_RCC_GetHCLKFreq+0x50>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800687a:	5cd3      	ldrb	r3, [r2, r3]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	fa22 f303 	lsr.w	r3, r2, r3
 8006886:	4a07      	ldr	r2, [pc, #28]	@ (80068a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800688a:	4a07      	ldr	r2, [pc, #28]	@ (80068a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006890:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	58024400 	.word	0x58024400
 80068a0:	0801c838 	.word	0x0801c838
 80068a4:	24000004 	.word	0x24000004
 80068a8:	24000000 	.word	0x24000000

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068b0:	f7ff ffcc 	bl	800684c <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4904      	ldr	r1, [pc, #16]	@ (80068d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	58024400 	.word	0x58024400
 80068d4:	0801c838 	.word	0x0801c838

080068d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068dc:	f7ff ffb6 	bl	800684c <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4904      	ldr	r1, [pc, #16]	@ (8006900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	58024400 	.word	0x58024400
 8006900:	0801c838 	.word	0x0801c838

08006904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	223f      	movs	r2, #63	@ 0x3f
 8006912:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006914:	4b1a      	ldr	r3, [pc, #104]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0207 	and.w	r2, r3, #7
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006920:	4b17      	ldr	r3, [pc, #92]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800692c:	4b14      	ldr	r3, [pc, #80]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006944:	4b0e      	ldr	r3, [pc, #56]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800695c:	4b08      	ldr	r3, [pc, #32]	@ (8006980 <HAL_RCC_GetClockConfig+0x7c>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006968:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <HAL_RCC_GetClockConfig+0x80>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 020f 	and.w	r2, r3, #15
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	58024400 	.word	0x58024400
 8006984:	52002000 	.word	0x52002000

08006988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800698c:	b0ca      	sub	sp, #296	@ 0x128
 800698e:	af00      	add	r7, sp, #0
 8006990:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006994:	2300      	movs	r3, #0
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800699a:	2300      	movs	r3, #0
 800699c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80069ac:	2500      	movs	r5, #0
 80069ae:	ea54 0305 	orrs.w	r3, r4, r5
 80069b2:	d049      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069be:	d02f      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80069c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069c4:	d828      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ca:	d01a      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069d0:	d822      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069da:	d007      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069dc:	e01c      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069de:	4bb8      	ldr	r3, [pc, #736]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	4ab7      	ldr	r2, [pc, #732]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ea:	e01a      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f0:	3308      	adds	r3, #8
 80069f2:	2102      	movs	r1, #2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 fc8f 	bl	8008318 <RCCEx_PLL2_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	3328      	adds	r3, #40	@ 0x28
 8006a08:	2102      	movs	r1, #2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 fd36 	bl	800847c <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a2a:	4ba5      	ldr	r3, [pc, #660]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a38:	4aa1      	ldr	r2, [pc, #644]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a3e:	e003      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a54:	f04f 0900 	mov.w	r9, #0
 8006a58:	ea58 0309 	orrs.w	r3, r8, r9
 8006a5c:	d047      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d82a      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006a85 	.word	0x08006a85
 8006a74:	08006a93 	.word	0x08006a93
 8006a78:	08006aa9 	.word	0x08006aa9
 8006a7c:	08006ac7 	.word	0x08006ac7
 8006a80:	08006ac7 	.word	0x08006ac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a84:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	4a8d      	ldr	r2, [pc, #564]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a90:	e01a      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	3308      	adds	r3, #8
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 fc3c 	bl	8008318 <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aa6:	e00f      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	3328      	adds	r3, #40	@ 0x28
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 fce3 	bl	800847c <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad4:	f023 0107 	bic.w	r1, r3, #7
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	4a78      	ldr	r2, [pc, #480]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006afa:	f04f 0b00 	mov.w	fp, #0
 8006afe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b02:	d04c      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0e:	d030      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b14:	d829      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b18:	d02d      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b1c:	d825      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b1e:	2b80      	cmp	r3, #128	@ 0x80
 8006b20:	d018      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b22:	2b80      	cmp	r3, #128	@ 0x80
 8006b24:	d821      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d007      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b2e:	e01c      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4b63      	ldr	r3, [pc, #396]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	4a62      	ldr	r2, [pc, #392]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b3c:	e01c      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	3308      	adds	r3, #8
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 fbe6 	bl	8008318 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b52:	e011      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	3328      	adds	r3, #40	@ 0x28
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fc8d 	bl	800847c <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b68:	e006      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b70:	e002      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b80:	4b4f      	ldr	r3, [pc, #316]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b84:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b94:	e003      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006baa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006bb4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	d053      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bca:	d035      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006bcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bd0:	d82e      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bd6:	d031      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006bd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bdc:	d828      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be2:	d01a      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be8:	d822      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006bee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bf2:	d007      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006bf4:	e01c      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf6:	4b32      	ldr	r3, [pc, #200]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	4a31      	ldr	r2, [pc, #196]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c02:	e01c      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fb83 	bl	8008318 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c18:	e011      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fc2a 	bl	800847c <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e006      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c36:	e002      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c38:	bf00      	nop
 8006c3a:	e000      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c46:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c56:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c5c:	e003      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c76:	2300      	movs	r3, #0
 8006c78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c80:	460b      	mov	r3, r1
 8006c82:	4313      	orrs	r3, r2
 8006c84:	d056      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c92:	d038      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c98:	d831      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c9e:	d034      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ca0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ca4:	d82b      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006caa:	d01d      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb0:	d825      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cba:	d00a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cbc:	e01f      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cbe:	bf00      	nop
 8006cc0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc4:	4ba2      	ldr	r3, [pc, #648]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	4aa1      	ldr	r2, [pc, #644]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e01c      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fb1c 	bl	8008318 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e011      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	3328      	adds	r3, #40	@ 0x28
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 fbc3 	bl	800847c <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e006      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d14:	4b8e      	ldr	r3, [pc, #568]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d24:	4a8a      	ldr	r2, [pc, #552]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d26:	430b      	orrs	r3, r1
 8006d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d2a:	e003      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d03a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5a:	2b30      	cmp	r3, #48	@ 0x30
 8006d5c:	d01f      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d5e:	2b30      	cmp	r3, #48	@ 0x30
 8006d60:	d819      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d00c      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d815      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d019      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d111      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d72:	4b77      	ldr	r3, [pc, #476]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	4a76      	ldr	r2, [pc, #472]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d7e:	e011      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d84:	3308      	adds	r3, #8
 8006d86:	2102      	movs	r1, #2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fac5 	bl	8008318 <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d94:	e006      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d9c:	e002      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006dac:	4b68      	ldr	r3, [pc, #416]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dba:	4a65      	ldr	r2, [pc, #404]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dc0:	e003      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006dd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006de0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4313      	orrs	r3, r2
 8006de8:	d051      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df4:	d035      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dfa:	d82e      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e00:	d031      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e06:	d828      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0c:	d01a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e12:	d822      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1c:	d007      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e1e:	e01c      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4b4b      	ldr	r3, [pc, #300]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	4a4a      	ldr	r2, [pc, #296]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e01c      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	3308      	adds	r3, #8
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fa6e 	bl	8008318 <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e42:	e011      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	3328      	adds	r3, #40	@ 0x28
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fb15 	bl	800847c <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e60:	e002      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e70:	4b37      	ldr	r3, [pc, #220]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e74:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7e:	4a34      	ldr	r2, [pc, #208]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e84:	e003      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ea4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	d056      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eb8:	d033      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006eba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ebe:	d82c      	bhi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ec4:	d02f      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006ec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eca:	d826      	bhi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ecc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ed0:	d02b      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006ed2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ed6:	d820      	bhi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006edc:	d012      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ee2:	d81a      	bhi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d022      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d115      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fa0e 	bl	8008318 <RCCEx_PLL2_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f02:	e015      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f08:	3328      	adds	r3, #40	@ 0x28
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fab5 	bl	800847c <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f18:	e00a      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f22:	bf00      	nop
 8006f24:	e004      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f26:	bf00      	nop
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10d      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f38:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f46:	4a02      	ldr	r2, [pc, #8]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f4c:	e006      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f4e:	bf00      	nop
 8006f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	d055      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f88:	d033      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f8e:	d82c      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f94:	d02f      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9a:	d826      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa0:	d02b      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa6:	d820      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fac:	d012      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb2:	d81a      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d022      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fbc:	d115      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 f9a6 	bl	8008318 <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fd2:	e015      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	3328      	adds	r3, #40	@ 0x28
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fa4d 	bl	800847c <RCCEx_PLL3_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e00a      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ff0:	e006      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ff2:	bf00      	nop
 8006ff4:	e004      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007008:	4ba3      	ldr	r3, [pc, #652]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007018:	4a9f      	ldr	r2, [pc, #636]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701a:	430b      	orrs	r3, r1
 800701c:	6593      	str	r3, [r2, #88]	@ 0x58
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800703e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d037      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007052:	d00e      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007058:	d816      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d018      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800705e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007062:	d111      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007064:	4b8c      	ldr	r3, [pc, #560]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	4a8b      	ldr	r2, [pc, #556]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800706e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007070:	e00f      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007076:	3308      	adds	r3, #8
 8007078:	2101      	movs	r1, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f94c 	bl	8008318 <RCCEx_PLL2_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007086:	e004      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800708e:	e000      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800709a:	4b7f      	ldr	r3, [pc, #508]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800709c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a8:	4a7b      	ldr	r2, [pc, #492]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070aa:	430b      	orrs	r3, r1
 80070ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80070ae:	e003      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4313      	orrs	r3, r2
 80070d6:	d039      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d81c      	bhi.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80070e2:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007125 	.word	0x08007125
 80070ec:	080070f9 	.word	0x080070f9
 80070f0:	08007107 	.word	0x08007107
 80070f4:	08007125 	.word	0x08007125
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b67      	ldr	r3, [pc, #412]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	4a66      	ldr	r2, [pc, #408]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007104:	e00f      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	3308      	adds	r3, #8
 800710c:	2102      	movs	r1, #2
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f902 	bl	8008318 <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800712e:	4b5a      	ldr	r3, [pc, #360]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007132:	f023 0103 	bic.w	r1, r3, #3
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800713c:	4a56      	ldr	r2, [pc, #344]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800713e:	430b      	orrs	r3, r1
 8007140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007142:	e003      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800715c:	2300      	movs	r3, #0
 800715e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007162:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007166:	460b      	mov	r3, r1
 8007168:	4313      	orrs	r3, r2
 800716a:	f000 809f 	beq.w	80072ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800716e:	4b4b      	ldr	r3, [pc, #300]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a4a      	ldr	r2, [pc, #296]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800717a:	f7fb f9f3 	bl	8002564 <HAL_GetTick>
 800717e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007182:	e00b      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007184:	f7fb f9ee 	bl	8002564 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b64      	cmp	r3, #100	@ 0x64
 8007192:	d903      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800719a:	e005      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800719c:	4b3f      	ldr	r3, [pc, #252]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0ed      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80071a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d179      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071b0:	4b39      	ldr	r3, [pc, #228]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071bc:	4053      	eors	r3, r2
 80071be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071c6:	4b34      	ldr	r3, [pc, #208]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071d2:	4b31      	ldr	r3, [pc, #196]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d6:	4a30      	ldr	r2, [pc, #192]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071de:	4b2e      	ldr	r3, [pc, #184]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fe:	d118      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fb f9b0 	bl	8002564 <HAL_GetTick>
 8007204:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007208:	e00d      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720a:	f7fb f9ab 	bl	8002564 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	f241 3388 	movw	r3, #5000	@ 0x1388
 800721a:	429a      	cmp	r2, r3
 800721c:	d903      	bls.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007224:	e005      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007226:	4b1c      	ldr	r3, [pc, #112]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0eb      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007236:	2b00      	cmp	r3, #0
 8007238:	d129      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800724a:	d10e      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800724c:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800725c:	091a      	lsrs	r2, r3, #4
 800725e:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007260:	4013      	ands	r3, r2
 8007262:	4a0d      	ldr	r2, [pc, #52]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007264:	430b      	orrs	r3, r1
 8007266:	6113      	str	r3, [r2, #16]
 8007268:	e005      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	4a0a      	ldr	r2, [pc, #40]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007270:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007274:	6113      	str	r3, [r2, #16]
 8007276:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007278:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007286:	4a04      	ldr	r2, [pc, #16]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	430b      	orrs	r3, r1
 800728a:	6713      	str	r3, [r2, #112]	@ 0x70
 800728c:	e00e      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800728e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007296:	e009      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007298:	58024400 	.word	0x58024400
 800729c:	58024800 	.word	0x58024800
 80072a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 0301 	and.w	r3, r2, #1
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f000 8089 	beq.w	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d4:	2b28      	cmp	r3, #40	@ 0x28
 80072d6:	d86b      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80072d8:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	080073b9 	.word	0x080073b9
 80072e4:	080073b1 	.word	0x080073b1
 80072e8:	080073b1 	.word	0x080073b1
 80072ec:	080073b1 	.word	0x080073b1
 80072f0:	080073b1 	.word	0x080073b1
 80072f4:	080073b1 	.word	0x080073b1
 80072f8:	080073b1 	.word	0x080073b1
 80072fc:	080073b1 	.word	0x080073b1
 8007300:	08007385 	.word	0x08007385
 8007304:	080073b1 	.word	0x080073b1
 8007308:	080073b1 	.word	0x080073b1
 800730c:	080073b1 	.word	0x080073b1
 8007310:	080073b1 	.word	0x080073b1
 8007314:	080073b1 	.word	0x080073b1
 8007318:	080073b1 	.word	0x080073b1
 800731c:	080073b1 	.word	0x080073b1
 8007320:	0800739b 	.word	0x0800739b
 8007324:	080073b1 	.word	0x080073b1
 8007328:	080073b1 	.word	0x080073b1
 800732c:	080073b1 	.word	0x080073b1
 8007330:	080073b1 	.word	0x080073b1
 8007334:	080073b1 	.word	0x080073b1
 8007338:	080073b1 	.word	0x080073b1
 800733c:	080073b1 	.word	0x080073b1
 8007340:	080073b9 	.word	0x080073b9
 8007344:	080073b1 	.word	0x080073b1
 8007348:	080073b1 	.word	0x080073b1
 800734c:	080073b1 	.word	0x080073b1
 8007350:	080073b1 	.word	0x080073b1
 8007354:	080073b1 	.word	0x080073b1
 8007358:	080073b1 	.word	0x080073b1
 800735c:	080073b1 	.word	0x080073b1
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073b1 	.word	0x080073b1
 800736c:	080073b1 	.word	0x080073b1
 8007370:	080073b1 	.word	0x080073b1
 8007374:	080073b1 	.word	0x080073b1
 8007378:	080073b1 	.word	0x080073b1
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073b9 	.word	0x080073b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	3308      	adds	r3, #8
 800738a:	2101      	movs	r1, #1
 800738c:	4618      	mov	r0, r3
 800738e:	f000 ffc3 	bl	8008318 <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007398:	e00f      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	3328      	adds	r3, #40	@ 0x28
 80073a0:	2101      	movs	r1, #1
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 f86a 	bl	800847c <RCCEx_PLL3_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ae:	e004      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b6:	e000      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80073b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073c2:	4bbf      	ldr	r3, [pc, #764]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073d0:	4abb      	ldr	r2, [pc, #748]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f002 0302 	and.w	r3, r2, #2
 80073ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073f0:	2300      	movs	r3, #0
 80073f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d041      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007406:	2b05      	cmp	r3, #5
 8007408:	d824      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	0800745d 	.word	0x0800745d
 8007414:	08007429 	.word	0x08007429
 8007418:	0800743f 	.word	0x0800743f
 800741c:	0800745d 	.word	0x0800745d
 8007420:	0800745d 	.word	0x0800745d
 8007424:	0800745d 	.word	0x0800745d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742c:	3308      	adds	r3, #8
 800742e:	2101      	movs	r1, #1
 8007430:	4618      	mov	r0, r3
 8007432:	f000 ff71 	bl	8008318 <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800743c:	e00f      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	3328      	adds	r3, #40	@ 0x28
 8007444:	2101      	movs	r1, #1
 8007446:	4618      	mov	r0, r3
 8007448:	f001 f818 	bl	800847c <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007452:	e004      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745a:	e000      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800745c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007466:	4b96      	ldr	r3, [pc, #600]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746a:	f023 0107 	bic.w	r1, r3, #7
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007474:	4a92      	ldr	r2, [pc, #584]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007476:	430b      	orrs	r3, r1
 8007478:	6553      	str	r3, [r2, #84]	@ 0x54
 800747a:	e003      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f002 0304 	and.w	r3, r2, #4
 8007490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800749a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d044      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	d825      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	08007505 	.word	0x08007505
 80074bc:	080074d1 	.word	0x080074d1
 80074c0:	080074e7 	.word	0x080074e7
 80074c4:	08007505 	.word	0x08007505
 80074c8:	08007505 	.word	0x08007505
 80074cc:	08007505 	.word	0x08007505
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d4:	3308      	adds	r3, #8
 80074d6:	2101      	movs	r1, #1
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 ff1d 	bl	8008318 <RCCEx_PLL2_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074e4:	e00f      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	3328      	adds	r3, #40	@ 0x28
 80074ec:	2101      	movs	r1, #1
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 ffc4 	bl	800847c <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074fa:	e004      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007502:	e000      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800750e:	4b6c      	ldr	r3, [pc, #432]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007512:	f023 0107 	bic.w	r1, r3, #7
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800751e:	4a68      	ldr	r2, [pc, #416]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007520:	430b      	orrs	r3, r1
 8007522:	6593      	str	r3, [r2, #88]	@ 0x58
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f002 0320 	and.w	r3, r2, #32
 800753a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800753e:	2300      	movs	r3, #0
 8007540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d055      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800755a:	d033      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800755c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007560:	d82c      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d02f      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	d826      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800756e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007572:	d02b      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007574:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007578:	d820      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800757a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800757e:	d012      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007584:	d81a      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d022      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800758e:	d115      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007594:	3308      	adds	r3, #8
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f000 febd 	bl	8008318 <RCCEx_PLL2_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075a4:	e015      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	3328      	adds	r3, #40	@ 0x28
 80075ac:	2102      	movs	r1, #2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 ff64 	bl	800847c <RCCEx_PLL3_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ba:	e00a      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075c2:	e006      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075c4:	bf00      	nop
 80075c6:	e004      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075da:	4b39      	ldr	r3, [pc, #228]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ea:	4a35      	ldr	r2, [pc, #212]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80075f0:	e003      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800760a:	2300      	movs	r3, #0
 800760c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007610:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007614:	460b      	mov	r3, r1
 8007616:	4313      	orrs	r3, r2
 8007618:	d058      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007622:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007626:	d033      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007628:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800762c:	d82c      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007632:	d02f      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007638:	d826      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800763a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800763e:	d02b      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007640:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007644:	d820      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800764a:	d012      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800764c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007650:	d81a      	bhi.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d022      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765a:	d115      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007660:	3308      	adds	r3, #8
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fe57 	bl	8008318 <RCCEx_PLL2_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007670:	e015      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	3328      	adds	r3, #40	@ 0x28
 8007678:	2102      	movs	r1, #2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fefe 	bl	800847c <RCCEx_PLL3_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007686:	e00a      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800768e:	e006      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007690:	bf00      	nop
 8007692:	e004      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007694:	bf00      	nop
 8007696:	e002      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007698:	bf00      	nop
 800769a:	e000      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800769c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10e      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076a6:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076b6:	4a02      	ldr	r2, [pc, #8]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80076bc:	e006      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076dc:	2300      	movs	r3, #0
 80076de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d055      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076f8:	d033      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80076fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076fe:	d82c      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007704:	d02f      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800770a:	d826      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800770c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007710:	d02b      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007712:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007716:	d820      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800771c:	d012      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800771e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007722:	d81a      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d022      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800772c:	d115      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	3308      	adds	r3, #8
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fdee 	bl	8008318 <RCCEx_PLL2_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007742:	e015      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007748:	3328      	adds	r3, #40	@ 0x28
 800774a:	2102      	movs	r1, #2
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fe95 	bl	800847c <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007758:	e00a      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007760:	e006      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007762:	bf00      	nop
 8007764:	e004      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007766:	bf00      	nop
 8007768:	e002      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800776e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007778:	4ba1      	ldr	r3, [pc, #644]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007788:	4a9d      	ldr	r2, [pc, #628]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800778a:	430b      	orrs	r3, r1
 800778c:	6593      	str	r3, [r2, #88]	@ 0x58
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f002 0308 	and.w	r3, r2, #8
 80077a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80077b2:	460b      	mov	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	d01e      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c4:	d10c      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ca:	3328      	adds	r3, #40	@ 0x28
 80077cc:	2102      	movs	r1, #2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fe54 	bl	800847c <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077e0:	4b87      	ldr	r3, [pc, #540]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f0:	4a83      	ldr	r2, [pc, #524]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f2:	430b      	orrs	r3, r1
 80077f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f002 0310 	and.w	r3, r2, #16
 8007802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007806:	2300      	movs	r3, #0
 8007808:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800780c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007810:	460b      	mov	r3, r1
 8007812:	4313      	orrs	r3, r2
 8007814:	d01e      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800781e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007822:	d10c      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007828:	3328      	adds	r3, #40	@ 0x28
 800782a:	2102      	movs	r1, #2
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fe25 	bl	800847c <RCCEx_PLL3_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800783e:	4b70      	ldr	r3, [pc, #448]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007842:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800784e:	4a6c      	ldr	r2, [pc, #432]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007850:	430b      	orrs	r3, r1
 8007852:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007864:	2300      	movs	r3, #0
 8007866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800786a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800786e:	460b      	mov	r3, r1
 8007870:	4313      	orrs	r3, r2
 8007872:	d03e      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800787c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007880:	d022      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007886:	d81b      	bhi.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007890:	d00b      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007892:	e015      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	3308      	adds	r3, #8
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fd3b 	bl	8008318 <RCCEx_PLL2_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078a8:	e00f      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	3328      	adds	r3, #40	@ 0x28
 80078b0:	2102      	movs	r1, #2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fde2 	bl	800847c <RCCEx_PLL3_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078be:	e004      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078c6:	e000      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80078c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078d2:	4b4b      	ldr	r3, [pc, #300]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078e2:	4a47      	ldr	r2, [pc, #284]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078e4:	430b      	orrs	r3, r1
 80078e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e8:	e003      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80078fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007900:	2300      	movs	r3, #0
 8007902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d03b      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800791a:	d01f      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800791c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007920:	d818      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007928:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800792c:	d007      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800792e:	e011      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007930:	4b33      	ldr	r3, [pc, #204]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	4a32      	ldr	r2, [pc, #200]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800793a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800793c:	e00f      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	3328      	adds	r3, #40	@ 0x28
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fd98 	bl	800847c <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007952:	e004      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800795a:	e000      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800795c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007966:	4b26      	ldr	r3, [pc, #152]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007976:	4a22      	ldr	r2, [pc, #136]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007978:	430b      	orrs	r3, r1
 800797a:	6553      	str	r3, [r2, #84]	@ 0x54
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007992:	673b      	str	r3, [r7, #112]	@ 0x70
 8007994:	2300      	movs	r3, #0
 8007996:	677b      	str	r3, [r7, #116]	@ 0x74
 8007998:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800799c:	460b      	mov	r3, r1
 800799e:	4313      	orrs	r3, r2
 80079a0:	d034      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b0:	d007      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80079b2:	e011      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b4:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	4a11      	ldr	r2, [pc, #68]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079c0:	e00e      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	3308      	adds	r3, #8
 80079c8:	2102      	movs	r1, #2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fca4 	bl	8008318 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f6:	4a02      	ldr	r2, [pc, #8]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079fc:	e006      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80079fe:	bf00      	nop
 8007a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d00c      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	3328      	adds	r3, #40	@ 0x28
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fd23 	bl	800847c <RCCEx_PLL3_Config>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a50:	2300      	movs	r3, #0
 8007a52:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d038      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a6a:	d018      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a70:	d811      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a76:	d014      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7c:	d80b      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a86:	d106      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a88:	4bc3      	ldr	r3, [pc, #780]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	4ac2      	ldr	r2, [pc, #776]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a94:	e008      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9c:	e004      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e002      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ab0:	4bb9      	ldr	r3, [pc, #740]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac0:	4ab5      	ldr	r2, [pc, #724]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ade:	2300      	movs	r3, #0
 8007ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ae2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007aec:	4baa      	ldr	r3, [pc, #680]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007afa:	4aa7      	ldr	r2, [pc, #668]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007b0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b0e:	2300      	movs	r3, #0
 8007b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b1c:	4b9e      	ldr	r3, [pc, #632]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b2c:	4a9a      	ldr	r2, [pc, #616]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b40:	2300      	movs	r3, #0
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b4e:	4b92      	ldr	r3, [pc, #584]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b52:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b5c:	4a8e      	ldr	r2, [pc, #568]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b70:	2300      	movs	r3, #0
 8007b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	d00e      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b7e:	4b86      	ldr	r3, [pc, #536]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	4a85      	ldr	r2, [pc, #532]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b88:	6113      	str	r3, [r2, #16]
 8007b8a:	4b83      	ldr	r3, [pc, #524]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8c:	6919      	ldr	r1, [r3, #16]
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b96:	4a80      	ldr	r2, [pc, #512]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007baa:	2300      	movs	r3, #0
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bb8:	4b77      	ldr	r3, [pc, #476]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc6:	4a74      	ldr	r2, [pc, #464]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007be8:	4b6b      	ldr	r3, [pc, #428]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf8:	4a67      	ldr	r2, [pc, #412]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	2100      	movs	r1, #0
 8007c08:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d011      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	3308      	adds	r3, #8
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fb78 	bl	8008318 <RCCEx_PLL2_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	2100      	movs	r1, #0
 8007c48:	6239      	str	r1, [r7, #32]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d011      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fb58 	bl	8008318 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	2100      	movs	r1, #0
 8007c88:	61b9      	str	r1, [r7, #24]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d011      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fb38 	bl	8008318 <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6139      	str	r1, [r7, #16]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	d011      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	3328      	adds	r3, #40	@ 0x28
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fbca 	bl	800847c <RCCEx_PLL3_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	2100      	movs	r1, #0
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d011      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3328      	adds	r3, #40	@ 0x28
 8007d20:	2101      	movs	r1, #1
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fbaa 	bl	800847c <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	2100      	movs	r1, #0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d011      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2102      	movs	r1, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fb8a 	bl	800847c <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007d7e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e000      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d98:	58024400 	.word	0x58024400

08007d9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007da0:	f7fe fd54 	bl	800684c <HAL_RCC_GetHCLKFreq>
 8007da4:	4602      	mov	r2, r0
 8007da6:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	091b      	lsrs	r3, r3, #4
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007db2:	5ccb      	ldrb	r3, [r1, r3]
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	0801c838 	.word	0x0801c838

08007dc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	@ 0x24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007dda:	4b9f      	ldr	r3, [pc, #636]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	0b1b      	lsrs	r3, r3, #12
 8007de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007de4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007de6:	4b9c      	ldr	r3, [pc, #624]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007df2:	4b99      	ldr	r3, [pc, #612]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df6:	08db      	lsrs	r3, r3, #3
 8007df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8111 	beq.w	8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	f000 8083 	beq.w	8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f200 80a1 	bhi.w	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d056      	beq.n	8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e32:	e099      	b.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e34:	4b88      	ldr	r3, [pc, #544]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d02d      	beq.n	8007e9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e40:	4b85      	ldr	r3, [pc, #532]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	08db      	lsrs	r3, r3, #3
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	4a84      	ldr	r2, [pc, #528]	@ (800805c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e9a:	e087      	b.n	8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eae:	4b6a      	ldr	r3, [pc, #424]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ede:	e065      	b.n	8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef2:	4b59      	ldr	r3, [pc, #356]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f22:	e043      	b.n	8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800806c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f36:	4b48      	ldr	r3, [pc, #288]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f66:	e021      	b.n	8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7a:	4b37      	ldr	r3, [pc, #220]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007faa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fac:	4b2a      	ldr	r3, [pc, #168]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb0:	0a5b      	lsrs	r3, r3, #9
 8007fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd2:	ee17 2a90 	vmov	r2, s15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fda:	4b1f      	ldr	r3, [pc, #124]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fde:	0c1b      	lsrs	r3, r3, #16
 8007fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008000:	ee17 2a90 	vmov	r2, s15
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008008:	4b13      	ldr	r3, [pc, #76]	@ (8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800801e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008022:	edd7 6a07 	vldr	s13, [r7, #28]
 8008026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802e:	ee17 2a90 	vmov	r2, s15
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008036:	e008      	b.n	800804a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
}
 800804a:	bf00      	nop
 800804c:	3724      	adds	r7, #36	@ 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
 800805c:	03d09000 	.word	0x03d09000
 8008060:	46000000 	.word	0x46000000
 8008064:	4c742400 	.word	0x4c742400
 8008068:	4a742400 	.word	0x4a742400
 800806c:	4bbebc20 	.word	0x4bbebc20

08008070 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008070:	b480      	push	{r7}
 8008072:	b089      	sub	sp, #36	@ 0x24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008078:	4ba1      	ldr	r3, [pc, #644]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008082:	4b9f      	ldr	r3, [pc, #636]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	0d1b      	lsrs	r3, r3, #20
 8008088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800808c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800808e:	4b9c      	ldr	r3, [pc, #624]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800809a:	4b99      	ldr	r3, [pc, #612]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809e:	08db      	lsrs	r3, r3, #3
 80080a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8111 	beq.w	80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	f000 8083 	beq.w	80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	f200 80a1 	bhi.w	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d056      	beq.n	8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080da:	e099      	b.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080dc:	4b88      	ldr	r3, [pc, #544]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02d      	beq.n	8008144 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080e8:	4b85      	ldr	r3, [pc, #532]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	08db      	lsrs	r3, r3, #3
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	4a84      	ldr	r2, [pc, #528]	@ (8008304 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
 80080f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b7b      	ldr	r3, [pc, #492]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a03 	vldr	s12, [r7, #12]
 8008126:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008142:	e087      	b.n	8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800830c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b6a      	ldr	r3, [pc, #424]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a03 	vldr	s12, [r7, #12]
 800816a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008186:	e065      	b.n	8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819a:	4b59      	ldr	r3, [pc, #356]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800819c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ca:	e043      	b.n	8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081de:	4b48      	ldr	r3, [pc, #288]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800820e:	e021      	b.n	8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800821e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008222:	4b37      	ldr	r3, [pc, #220]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008232:	ed97 6a03 	vldr	s12, [r7, #12]
 8008236:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800823a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008252:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008254:	4b2a      	ldr	r3, [pc, #168]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008258:	0a5b      	lsrs	r3, r3, #9
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800826a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800826e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827a:	ee17 2a90 	vmov	r2, s15
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008282:	4b1f      	ldr	r3, [pc, #124]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008286:	0c1b      	lsrs	r3, r3, #16
 8008288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008294:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829c:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a8:	ee17 2a90 	vmov	r2, s15
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80082b0:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d6:	ee17 2a90 	vmov	r2, s15
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082de:	e008      	b.n	80082f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	609a      	str	r2, [r3, #8]
}
 80082f2:	bf00      	nop
 80082f4:	3724      	adds	r7, #36	@ 0x24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	58024400 	.word	0x58024400
 8008304:	03d09000 	.word	0x03d09000
 8008308:	46000000 	.word	0x46000000
 800830c:	4c742400 	.word	0x4c742400
 8008310:	4a742400 	.word	0x4a742400
 8008314:	4bbebc20 	.word	0x4bbebc20

08008318 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008326:	4b53      	ldr	r3, [pc, #332]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d101      	bne.n	8008336 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e099      	b.n	800846a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008336:	4b4f      	ldr	r3, [pc, #316]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a4e      	ldr	r2, [pc, #312]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800833c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008342:	f7fa f90f 	bl	8002564 <HAL_GetTick>
 8008346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008348:	e008      	b.n	800835c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800834a:	f7fa f90b 	bl	8002564 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d901      	bls.n	800835c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e086      	b.n	800846a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800835c:	4b45      	ldr	r3, [pc, #276]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f0      	bne.n	800834a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008368:	4b42      	ldr	r3, [pc, #264]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800836a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	031b      	lsls	r3, r3, #12
 8008376:	493f      	ldr	r1, [pc, #252]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008378:	4313      	orrs	r3, r2
 800837a:	628b      	str	r3, [r1, #40]	@ 0x28
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	3b01      	subs	r3, #1
 8008382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	3b01      	subs	r3, #1
 800838c:	025b      	lsls	r3, r3, #9
 800838e:	b29b      	uxth	r3, r3
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	3b01      	subs	r3, #1
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	061b      	lsls	r3, r3, #24
 80083a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083ac:	4931      	ldr	r1, [pc, #196]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083b2:	4b30      	ldr	r3, [pc, #192]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	492d      	ldr	r1, [pc, #180]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c8:	f023 0220 	bic.w	r2, r3, #32
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	4928      	ldr	r1, [pc, #160]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083d6:	4b27      	ldr	r3, [pc, #156]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4a26      	ldr	r2, [pc, #152]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083dc:	f023 0310 	bic.w	r3, r3, #16
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083e2:	4b24      	ldr	r3, [pc, #144]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083e6:	4b24      	ldr	r3, [pc, #144]	@ (8008478 <RCCEx_PLL2_Config+0x160>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	69d2      	ldr	r2, [r2, #28]
 80083ee:	00d2      	lsls	r2, r2, #3
 80083f0:	4920      	ldr	r1, [pc, #128]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	f043 0310 	orr.w	r3, r3, #16
 8008400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008408:	4b1a      	ldr	r3, [pc, #104]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	4a19      	ldr	r2, [pc, #100]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800840e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008414:	e00f      	b.n	8008436 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d106      	bne.n	800842a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800841c:	4b15      	ldr	r3, [pc, #84]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008420:	4a14      	ldr	r2, [pc, #80]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008428:	e005      	b.n	8008436 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800842a:	4b12      	ldr	r3, [pc, #72]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800842c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842e:	4a11      	ldr	r2, [pc, #68]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008430:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008434:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008436:	4b0f      	ldr	r3, [pc, #60]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a0e      	ldr	r2, [pc, #56]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800843c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008442:	f7fa f88f 	bl	8002564 <HAL_GetTick>
 8008446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008448:	e008      	b.n	800845c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800844a:	f7fa f88b 	bl	8002564 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e006      	b.n	800846a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800845c:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <RCCEx_PLL2_Config+0x15c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0f0      	beq.n	800844a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	58024400 	.word	0x58024400
 8008478:	ffff0007 	.word	0xffff0007

0800847c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800848a:	4b53      	ldr	r3, [pc, #332]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b03      	cmp	r3, #3
 8008494:	d101      	bne.n	800849a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e099      	b.n	80085ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800849a:	4b4f      	ldr	r3, [pc, #316]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a4e      	ldr	r2, [pc, #312]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80084a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a6:	f7fa f85d 	bl	8002564 <HAL_GetTick>
 80084aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ac:	e008      	b.n	80084c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084ae:	f7fa f859 	bl	8002564 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e086      	b.n	80085ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084c0:	4b45      	ldr	r3, [pc, #276]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f0      	bne.n	80084ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084cc:	4b42      	ldr	r3, [pc, #264]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	051b      	lsls	r3, r3, #20
 80084da:	493f      	ldr	r1, [pc, #252]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	628b      	str	r3, [r1, #40]	@ 0x28
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	025b      	lsls	r3, r3, #9
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	3b01      	subs	r3, #1
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008510:	4931      	ldr	r1, [pc, #196]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008512:	4313      	orrs	r3, r2
 8008514:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008516:	4b30      	ldr	r3, [pc, #192]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	492d      	ldr	r1, [pc, #180]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008524:	4313      	orrs	r3, r2
 8008526:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008528:	4b2b      	ldr	r3, [pc, #172]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	4928      	ldr	r1, [pc, #160]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008536:	4313      	orrs	r3, r2
 8008538:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800853a:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	4a26      	ldr	r2, [pc, #152]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008544:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008546:	4b24      	ldr	r3, [pc, #144]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854a:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <RCCEx_PLL3_Config+0x160>)
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	69d2      	ldr	r2, [r2, #28]
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	4920      	ldr	r1, [pc, #128]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008556:	4313      	orrs	r3, r2
 8008558:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800855a:	4b1f      	ldr	r3, [pc, #124]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	4a1e      	ldr	r2, [pc, #120]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800856c:	4b1a      	ldr	r3, [pc, #104]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	4a19      	ldr	r2, [pc, #100]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008572:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008578:	e00f      	b.n	800859a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008580:	4b15      	ldr	r3, [pc, #84]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008584:	4a14      	ldr	r2, [pc, #80]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008586:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800858a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800858c:	e005      	b.n	800859a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800858e:	4b12      	ldr	r3, [pc, #72]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008592:	4a11      	ldr	r2, [pc, #68]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 8008594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008598:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800859a:	4b0f      	ldr	r3, [pc, #60]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a0e      	ldr	r2, [pc, #56]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80085a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a6:	f7f9 ffdd 	bl	8002564 <HAL_GetTick>
 80085aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ac:	e008      	b.n	80085c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085ae:	f7f9 ffd9 	bl	8002564 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e006      	b.n	80085ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085c0:	4b05      	ldr	r3, [pc, #20]	@ (80085d8 <RCCEx_PLL3_Config+0x15c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	58024400 	.word	0x58024400
 80085dc:	ffff0007 	.word	0xffff0007

080085e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e049      	b.n	8008686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7f9 fde4 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f000 fad6 	bl	8008bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d001      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e054      	b.n	8008752 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0201 	orr.w	r2, r2, #1
 80086be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a26      	ldr	r2, [pc, #152]	@ (8008760 <HAL_TIM_Base_Start_IT+0xd0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d022      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	d01d      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a22      	ldr	r2, [pc, #136]	@ (8008764 <HAL_TIM_Base_Start_IT+0xd4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d018      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a21      	ldr	r2, [pc, #132]	@ (8008768 <HAL_TIM_Base_Start_IT+0xd8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d013      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1f      	ldr	r2, [pc, #124]	@ (800876c <HAL_TIM_Base_Start_IT+0xdc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00e      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <HAL_TIM_Base_Start_IT+0xe0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d009      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1c      	ldr	r2, [pc, #112]	@ (8008774 <HAL_TIM_Base_Start_IT+0xe4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d004      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0x80>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a1b      	ldr	r2, [pc, #108]	@ (8008778 <HAL_TIM_Base_Start_IT+0xe8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d115      	bne.n	800873c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	4b19      	ldr	r3, [pc, #100]	@ (800877c <HAL_TIM_Base_Start_IT+0xec>)
 8008718:	4013      	ands	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b06      	cmp	r3, #6
 8008720:	d015      	beq.n	800874e <HAL_TIM_Base_Start_IT+0xbe>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008728:	d011      	beq.n	800874e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0201 	orr.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873a:	e008      	b.n	800874e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0201 	orr.w	r2, r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e000      	b.n	8008750 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40010000 	.word	0x40010000
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40010400 	.word	0x40010400
 8008774:	40001800 	.word	0x40001800
 8008778:	40014000 	.word	0x40014000
 800877c:	00010007 	.word	0x00010007

08008780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d020      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0202 	mvn.w	r2, #2
 80087b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9e2 	bl	8008b94 <HAL_TIM_IC_CaptureCallback>
 80087d0:	e005      	b.n	80087de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f9d4 	bl	8008b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f9e5 	bl	8008ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01b      	beq.n	8008830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0204 	mvn.w	r2, #4
 8008800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f9bc 	bl	8008b94 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9ae 	bl	8008b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f9bf 	bl	8008ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d020      	beq.n	800887c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01b      	beq.n	800887c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0208 	mvn.w	r2, #8
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2204      	movs	r2, #4
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f996 	bl	8008b94 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f988 	bl	8008b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f999 	bl	8008ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	d020      	beq.n	80088c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01b      	beq.n	80088c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0210 	mvn.w	r2, #16
 8008898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2208      	movs	r2, #8
 800889e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f970 	bl	8008b94 <HAL_TIM_IC_CaptureCallback>
 80088b4:	e005      	b.n	80088c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f962 	bl	8008b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f973 	bl	8008ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00c      	beq.n	80088ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0201 	mvn.w	r2, #1
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7f9 f904 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d104      	bne.n	8008900 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00c      	beq.n	800891a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fb37 	bl	8008f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00c      	beq.n	800893e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb2f 	bl	8008f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00c      	beq.n	8008962 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f92d 	bl	8008bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00c      	beq.n	8008986 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f06f 0220 	mvn.w	r2, #32
 800897e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 faf7 	bl	8008f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_TIM_ConfigClockSource+0x1c>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e0dc      	b.n	8008b66 <HAL_TIM_ConfigClockSource+0x1d6>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008b70 <HAL_TIM_ConfigClockSource+0x1e0>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a64      	ldr	r2, [pc, #400]	@ (8008b74 <HAL_TIM_ConfigClockSource+0x1e4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	f000 80a9 	beq.w	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 80089e8:	4a62      	ldr	r2, [pc, #392]	@ (8008b74 <HAL_TIM_ConfigClockSource+0x1e4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	f200 80ae 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 80089f0:	4a61      	ldr	r2, [pc, #388]	@ (8008b78 <HAL_TIM_ConfigClockSource+0x1e8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	f000 80a1 	beq.w	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 80089f8:	4a5f      	ldr	r2, [pc, #380]	@ (8008b78 <HAL_TIM_ConfigClockSource+0x1e8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	f200 80a6 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a00:	4a5e      	ldr	r2, [pc, #376]	@ (8008b7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	f000 8099 	beq.w	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a08:	4a5c      	ldr	r2, [pc, #368]	@ (8008b7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	f200 809e 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a14:	f000 8091 	beq.w	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a1c:	f200 8096 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a24:	f000 8089 	beq.w	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a2c:	f200 808e 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a34:	d03e      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0x124>
 8008a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a3a:	f200 8087 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a42:	f000 8086 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x1c2>
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4a:	d87f      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a4c:	2b70      	cmp	r3, #112	@ 0x70
 8008a4e:	d01a      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0xf6>
 8008a50:	2b70      	cmp	r3, #112	@ 0x70
 8008a52:	d87b      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a54:	2b60      	cmp	r3, #96	@ 0x60
 8008a56:	d050      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x16a>
 8008a58:	2b60      	cmp	r3, #96	@ 0x60
 8008a5a:	d877      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a5c:	2b50      	cmp	r3, #80	@ 0x50
 8008a5e:	d03c      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x14a>
 8008a60:	2b50      	cmp	r3, #80	@ 0x50
 8008a62:	d873      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a64:	2b40      	cmp	r3, #64	@ 0x40
 8008a66:	d058      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x18a>
 8008a68:	2b40      	cmp	r3, #64	@ 0x40
 8008a6a:	d86f      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a6c:	2b30      	cmp	r3, #48	@ 0x30
 8008a6e:	d064      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a70:	2b30      	cmp	r3, #48	@ 0x30
 8008a72:	d86b      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d060      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d867      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d05c      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a80:	2b10      	cmp	r3, #16
 8008a82:	d05a      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a84:	e062      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a96:	f000 f9bf 	bl	8008e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	609a      	str	r2, [r3, #8]
      break;
 8008ab2:	e04f      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ac4:	f000 f9a8 	bl	8008e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ad6:	609a      	str	r2, [r3, #8]
      break;
 8008ad8:	e03c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f000 f918 	bl	8008d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2150      	movs	r1, #80	@ 0x50
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f972 	bl	8008ddc <TIM_ITRx_SetConfig>
      break;
 8008af8:	e02c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b06:	461a      	mov	r2, r3
 8008b08:	f000 f937 	bl	8008d7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2160      	movs	r1, #96	@ 0x60
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f962 	bl	8008ddc <TIM_ITRx_SetConfig>
      break;
 8008b18:	e01c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b26:	461a      	mov	r2, r3
 8008b28:	f000 f8f8 	bl	8008d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2140      	movs	r1, #64	@ 0x40
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f952 	bl	8008ddc <TIM_ITRx_SetConfig>
      break;
 8008b38:	e00c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f000 f949 	bl	8008ddc <TIM_ITRx_SetConfig>
      break;
 8008b4a:	e003      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b50:	e000      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	ffceff88 	.word	0xffceff88
 8008b74:	00100040 	.word	0x00100040
 8008b78:	00100030 	.word	0x00100030
 8008b7c:	00100020 	.word	0x00100020

08008b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a46      	ldr	r2, [pc, #280]	@ (8008cfc <TIM_Base_SetConfig+0x12c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bee:	d00f      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a43      	ldr	r2, [pc, #268]	@ (8008d00 <TIM_Base_SetConfig+0x130>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00b      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a42      	ldr	r2, [pc, #264]	@ (8008d04 <TIM_Base_SetConfig+0x134>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d007      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a41      	ldr	r2, [pc, #260]	@ (8008d08 <TIM_Base_SetConfig+0x138>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d003      	beq.n	8008c10 <TIM_Base_SetConfig+0x40>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a40      	ldr	r2, [pc, #256]	@ (8008d0c <TIM_Base_SetConfig+0x13c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d108      	bne.n	8008c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a35      	ldr	r2, [pc, #212]	@ (8008cfc <TIM_Base_SetConfig+0x12c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d01f      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c30:	d01b      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a32      	ldr	r2, [pc, #200]	@ (8008d00 <TIM_Base_SetConfig+0x130>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d017      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a31      	ldr	r2, [pc, #196]	@ (8008d04 <TIM_Base_SetConfig+0x134>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a30      	ldr	r2, [pc, #192]	@ (8008d08 <TIM_Base_SetConfig+0x138>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00f      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d0c <TIM_Base_SetConfig+0x13c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00b      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a2e      	ldr	r2, [pc, #184]	@ (8008d10 <TIM_Base_SetConfig+0x140>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d14 <TIM_Base_SetConfig+0x144>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_Base_SetConfig+0x9a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a2c      	ldr	r2, [pc, #176]	@ (8008d18 <TIM_Base_SetConfig+0x148>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d108      	bne.n	8008c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a16      	ldr	r2, [pc, #88]	@ (8008cfc <TIM_Base_SetConfig+0x12c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0xf8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <TIM_Base_SetConfig+0x13c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0xf8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a17      	ldr	r2, [pc, #92]	@ (8008d10 <TIM_Base_SetConfig+0x140>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0xf8>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a16      	ldr	r2, [pc, #88]	@ (8008d14 <TIM_Base_SetConfig+0x144>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0xf8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	@ (8008d18 <TIM_Base_SetConfig+0x148>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d103      	bne.n	8008cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d105      	bne.n	8008cee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	611a      	str	r2, [r3, #16]
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	40010000 	.word	0x40010000
 8008d00:	40000400 	.word	0x40000400
 8008d04:	40000800 	.word	0x40000800
 8008d08:	40000c00 	.word	0x40000c00
 8008d0c:	40010400 	.word	0x40010400
 8008d10:	40014000 	.word	0x40014000
 8008d14:	40014400 	.word	0x40014400
 8008d18:	40014800 	.word	0x40014800

08008d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f023 0201 	bic.w	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f023 030a 	bic.w	r3, r3, #10
 8008d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b087      	sub	sp, #28
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	f023 0210 	bic.w	r2, r3, #16
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	031b      	lsls	r3, r3, #12
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008db6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4b09      	ldr	r3, [pc, #36]	@ (8008e14 <TIM_ITRx_SetConfig+0x38>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f043 0307 	orr.w	r3, r3, #7
 8008dfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	609a      	str	r2, [r3, #8]
}
 8008e06:	bf00      	nop
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	ffcfff8f 	.word	0xffcfff8f

08008e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	021a      	lsls	r2, r3, #8
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	609a      	str	r2, [r3, #8]
}
 8008e4c:	bf00      	nop
 8008e4e:	371c      	adds	r7, #28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e06d      	b.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a30      	ldr	r2, [pc, #192]	@ (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d108      	bne.n	8008eb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008eaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a20      	ldr	r2, [pc, #128]	@ (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d022      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee2:	d01d      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d018      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d013      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1a      	ldr	r2, [pc, #104]	@ (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00e      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a15      	ldr	r2, [pc, #84]	@ (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d009      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d004      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a15      	ldr	r2, [pc, #84]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d10c      	bne.n	8008f3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40010400 	.word	0x40010400
 8008f60:	40000400 	.word	0x40000400
 8008f64:	40000800 	.word	0x40000800
 8008f68:	40000c00 	.word	0x40000c00
 8008f6c:	40001800 	.word	0x40001800
 8008f70:	40014000 	.word	0x40014000

08008f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e042      	b.n	8009048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7f9 f973 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2224      	movs	r2, #36	@ 0x24
 8008fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 faea 	bl	800a5d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fd7f 	bl	8009b04 <UART_SetConfig>
 8009006:	4603      	mov	r3, r0
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e01b      	b.n	8009048 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800901e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800902e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 fb69 	bl	800a718 <UART_CheckIdleState>
 8009046:	4603      	mov	r3, r0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	@ 0x28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009064:	2b20      	cmp	r3, #32
 8009066:	d167      	bne.n	8009138 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <HAL_UART_Transmit_DMA+0x24>
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e060      	b.n	800913a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	88fa      	ldrh	r2, [r7, #6]
 8009082:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	88fa      	ldrh	r2, [r7, #6]
 800908a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2221      	movs	r2, #33	@ 0x21
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d028      	beq.n	80090f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090aa:	4a26      	ldr	r2, [pc, #152]	@ (8009144 <HAL_UART_Transmit_DMA+0xf4>)
 80090ac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090b2:	4a25      	ldr	r2, [pc, #148]	@ (8009148 <HAL_UART_Transmit_DMA+0xf8>)
 80090b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ba:	4a24      	ldr	r2, [pc, #144]	@ (800914c <HAL_UART_Transmit_DMA+0xfc>)
 80090bc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090c2:	2200      	movs	r2, #0
 80090c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ce:	4619      	mov	r1, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3328      	adds	r3, #40	@ 0x28
 80090d6:	461a      	mov	r2, r3
 80090d8:	88fb      	ldrh	r3, [r7, #6]
 80090da:	f7f9 fe97 	bl	8002e0c <HAL_DMA_Start_IT>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2210      	movs	r2, #16
 80090e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e020      	b.n	800913a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2240      	movs	r2, #64	@ 0x40
 80090fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3308      	adds	r3, #8
 8009106:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	613b      	str	r3, [r7, #16]
   return(result);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009116:	627b      	str	r3, [r7, #36]	@ 0x24
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009120:	623a      	str	r2, [r7, #32]
 8009122:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	61bb      	str	r3, [r7, #24]
   return(result);
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e5      	bne.n	8009100 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3728      	adds	r7, #40	@ 0x28
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	0800abe5 	.word	0x0800abe5
 8009148:	0800ac7b 	.word	0x0800ac7b
 800914c:	0800adfd 	.word	0x0800adfd

08009150 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08a      	sub	sp, #40	@ 0x28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009164:	2b20      	cmp	r3, #32
 8009166:	d137      	bne.n	80091d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_UART_Receive_DMA+0x24>
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e030      	b.n	80091da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a18      	ldr	r2, [pc, #96]	@ (80091e4 <HAL_UART_Receive_DMA+0x94>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d01f      	beq.n	80091c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d018      	beq.n	80091c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	613b      	str	r3, [r7, #16]
   return(result);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	623b      	str	r3, [r7, #32]
 80091b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	461a      	mov	r2, r3
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f001 fbba 	bl	800a948 <UART_Start_Receive_DMA>
 80091d4:	4603      	mov	r3, r0
 80091d6:	e000      	b.n	80091da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091d8:	2302      	movs	r3, #2
  }
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3728      	adds	r7, #40	@ 0x28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	58000c00 	.word	0x58000c00

080091e8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b090      	sub	sp, #64	@ 0x40
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920a:	2b80      	cmp	r3, #128	@ 0x80
 800920c:	d139      	bne.n	8009282 <HAL_UART_DMAStop+0x9a>
 800920e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009210:	2b21      	cmp	r3, #33	@ 0x21
 8009212:	d136      	bne.n	8009282 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	61fb      	str	r3, [r7, #28]
   return(result);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009234:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800923a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e5      	bne.n	8009214 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d015      	beq.n	800927c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009254:	4618      	mov	r0, r3
 8009256:	f7fa f843 	bl	80032e0 <HAL_DMA_Abort>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00d      	beq.n	800927c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009264:	4618      	mov	r0, r3
 8009266:	f7fb fcc9 	bl	8004bfc <HAL_DMA_GetError>
 800926a:	4603      	mov	r3, r0
 800926c:	2b20      	cmp	r3, #32
 800926e:	d105      	bne.n	800927c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2210      	movs	r2, #16
 8009274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e047      	b.n	800930c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fc09 	bl	800aa94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800928c:	2b40      	cmp	r3, #64	@ 0x40
 800928e:	d13c      	bne.n	800930a <HAL_UART_DMAStop+0x122>
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	2b22      	cmp	r3, #34	@ 0x22
 8009294:	d139      	bne.n	800930a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b6:	61ba      	str	r2, [r7, #24]
 80092b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6979      	ldr	r1, [r7, #20]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	613b      	str	r3, [r7, #16]
   return(result);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d017      	beq.n	8009304 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fa f800 	bl	80032e0 <HAL_DMA_Abort>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fb fc85 	bl	8004bfc <HAL_DMA_GetError>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d105      	bne.n	8009304 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2210      	movs	r2, #16
 80092fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e003      	b.n	800930c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fc07 	bl	800ab18 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3740      	adds	r7, #64	@ 0x40
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b0ba      	sub	sp, #232	@ 0xe8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800933a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800933e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009342:	4013      	ands	r3, r2
 8009344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11b      	bne.n	8009388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d015      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d105      	bne.n	8009374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800936c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d009      	beq.n	8009388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 8377 	beq.w	8009a6c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
      }
      return;
 8009386:	e371      	b.n	8009a6c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8123 	beq.w	80095d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009396:	4b8d      	ldr	r3, [pc, #564]	@ (80095cc <HAL_UART_IRQHandler+0x2b8>)
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800939e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093a2:	4b8b      	ldr	r3, [pc, #556]	@ (80095d0 <HAL_UART_IRQHandler+0x2bc>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 8116 	beq.w	80095d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2201      	movs	r2, #1
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2202      	movs	r2, #2
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d011      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2204      	movs	r2, #4
 800942a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009432:	f043 0202 	orr.w	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d017      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d105      	bne.n	8009460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009458:	4b5c      	ldr	r3, [pc, #368]	@ (80095cc <HAL_UART_IRQHandler+0x2b8>)
 800945a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800946e:	f043 0208 	orr.w	r2, r3, #8
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a0:	f043 0220 	orr.w	r2, r3, #32
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 82dd 	beq.w	8009a70 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d013      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fe:	2b40      	cmp	r3, #64	@ 0x40
 8009500:	d005      	beq.n	800950e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009506:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800950a:	2b00      	cmp	r3, #0
 800950c:	d054      	beq.n	80095b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fb02 	bl	800ab18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b40      	cmp	r3, #64	@ 0x40
 8009520:	d146      	bne.n	80095b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800954e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800955a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1d9      	bne.n	8009522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009574:	2b00      	cmp	r3, #0
 8009576:	d017      	beq.n	80095a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957e:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <HAL_UART_IRQHandler+0x2c0>)
 8009580:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009588:	4618      	mov	r0, r3
 800958a:	f7fa f9c7 	bl	800391c <HAL_DMA_Abort_IT>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d019      	beq.n	80095c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095a2:	4610      	mov	r0, r2
 80095a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	e00f      	b.n	80095c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fa95 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ae:	e00b      	b.n	80095c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fa91 	bl	8009ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b6:	e007      	b.n	80095c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa8d 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095c6:	e253      	b.n	8009a70 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c8:	bf00      	nop
    return;
 80095ca:	e251      	b.n	8009a70 <HAL_UART_IRQHandler+0x75c>
 80095cc:	10000001 	.word	0x10000001
 80095d0:	04000120 	.word	0x04000120
 80095d4:	0800ae7d 	.word	0x0800ae7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	f040 81e7 	bne.w	80099b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 81e0 	beq.w	80099b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 81d9 	beq.w	80099b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2210      	movs	r2, #16
 8009604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009610:	2b40      	cmp	r3, #64	@ 0x40
 8009612:	f040 8151 	bne.w	80098b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a96      	ldr	r2, [pc, #600]	@ (8009878 <HAL_UART_IRQHandler+0x564>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d068      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a93      	ldr	r2, [pc, #588]	@ (800987c <HAL_UART_IRQHandler+0x568>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d061      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a91      	ldr	r2, [pc, #580]	@ (8009880 <HAL_UART_IRQHandler+0x56c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d05a      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a8e      	ldr	r2, [pc, #568]	@ (8009884 <HAL_UART_IRQHandler+0x570>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d053      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a8c      	ldr	r2, [pc, #560]	@ (8009888 <HAL_UART_IRQHandler+0x574>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d04c      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a89      	ldr	r2, [pc, #548]	@ (800988c <HAL_UART_IRQHandler+0x578>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d045      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a87      	ldr	r2, [pc, #540]	@ (8009890 <HAL_UART_IRQHandler+0x57c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d03e      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a84      	ldr	r2, [pc, #528]	@ (8009894 <HAL_UART_IRQHandler+0x580>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d037      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a82      	ldr	r2, [pc, #520]	@ (8009898 <HAL_UART_IRQHandler+0x584>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d030      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a7f      	ldr	r2, [pc, #508]	@ (800989c <HAL_UART_IRQHandler+0x588>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d029      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a7d      	ldr	r2, [pc, #500]	@ (80098a0 <HAL_UART_IRQHandler+0x58c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d022      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a7a      	ldr	r2, [pc, #488]	@ (80098a4 <HAL_UART_IRQHandler+0x590>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01b      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a78      	ldr	r2, [pc, #480]	@ (80098a8 <HAL_UART_IRQHandler+0x594>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d014      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a75      	ldr	r2, [pc, #468]	@ (80098ac <HAL_UART_IRQHandler+0x598>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00d      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a73      	ldr	r2, [pc, #460]	@ (80098b0 <HAL_UART_IRQHandler+0x59c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d006      	beq.n	80096f6 <HAL_UART_IRQHandler+0x3e2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a70      	ldr	r2, [pc, #448]	@ (80098b4 <HAL_UART_IRQHandler+0x5a0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d106      	bne.n	8009704 <HAL_UART_IRQHandler+0x3f0>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	b29b      	uxth	r3, r3
 8009702:	e005      	b.n	8009710 <HAL_UART_IRQHandler+0x3fc>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	b29b      	uxth	r3, r3
 8009710:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 81ab 	beq.w	8009a74 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009728:	429a      	cmp	r2, r3
 800972a:	f080 81a3 	bcs.w	8009a74 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009734:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009744:	f000 8087 	beq.w	8009856 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800975c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009776:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800977e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800978a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1da      	bne.n	8009748 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3308      	adds	r3, #8
 80097b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e1      	bne.n	8009792 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3308      	adds	r3, #8
 80097ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097fa:	e841 2300 	strex	r3, r2, [r1]
 80097fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e3      	bne.n	80097ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2220      	movs	r2, #32
 800980a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009824:	f023 0310 	bic.w	r3, r3, #16
 8009828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	461a      	mov	r2, r3
 8009832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800983c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e4      	bne.n	8009814 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009850:	4618      	mov	r0, r3
 8009852:	f7f9 fd45 	bl	80032e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009868:	b29b      	uxth	r3, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	b29b      	uxth	r3, r3
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f93b 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009876:	e0fd      	b.n	8009a74 <HAL_UART_IRQHandler+0x760>
 8009878:	40020010 	.word	0x40020010
 800987c:	40020028 	.word	0x40020028
 8009880:	40020040 	.word	0x40020040
 8009884:	40020058 	.word	0x40020058
 8009888:	40020070 	.word	0x40020070
 800988c:	40020088 	.word	0x40020088
 8009890:	400200a0 	.word	0x400200a0
 8009894:	400200b8 	.word	0x400200b8
 8009898:	40020410 	.word	0x40020410
 800989c:	40020428 	.word	0x40020428
 80098a0:	40020440 	.word	0x40020440
 80098a4:	40020458 	.word	0x40020458
 80098a8:	40020470 	.word	0x40020470
 80098ac:	40020488 	.word	0x40020488
 80098b0:	400204a0 	.word	0x400204a0
 80098b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80cf 	beq.w	8009a78 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80098da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 80ca 	beq.w	8009a78 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009906:	647b      	str	r3, [r7, #68]	@ 0x44
 8009908:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800990c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e4      	bne.n	80098e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	623b      	str	r3, [r7, #32]
   return(result);
 800992a:	6a3a      	ldr	r2, [r7, #32]
 800992c:	4b55      	ldr	r3, [pc, #340]	@ (8009a84 <HAL_UART_IRQHandler+0x770>)
 800992e:	4013      	ands	r3, r2
 8009930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800993e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e3      	bne.n	800991a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	60fb      	str	r3, [r7, #12]
   return(result);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0310 	bic.w	r3, r3, #16
 800997a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009988:	61fb      	str	r3, [r7, #28]
 800998a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	69b9      	ldr	r1, [r7, #24]
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	617b      	str	r3, [r7, #20]
   return(result);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e4      	bne.n	8009966 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f89f 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099ae:	e063      	b.n	8009a78 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00e      	beq.n	80099da <HAL_UART_IRQHandler+0x6c6>
 80099bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80099d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fa93 	bl	800aefe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099d8:	e051      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d014      	beq.n	8009a10 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d03a      	beq.n	8009a7c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	4798      	blx	r3
    }
    return;
 8009a0e:	e035      	b.n	8009a7c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d009      	beq.n	8009a30 <HAL_UART_IRQHandler+0x71c>
 8009a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 fa3d 	bl	800aea8 <UART_EndTransmit_IT>
    return;
 8009a2e:	e026      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <HAL_UART_IRQHandler+0x73c>
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 fa6c 	bl	800af26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a4e:	e016      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d010      	beq.n	8009a7e <HAL_UART_IRQHandler+0x76a>
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da0c      	bge.n	8009a7e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 fa54 	bl	800af12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a6a:	e008      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a6c:	bf00      	nop
 8009a6e:	e006      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
    return;
 8009a70:	bf00      	nop
 8009a72:	e004      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a74:	bf00      	nop
 8009a76:	e002      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a78:	bf00      	nop
 8009a7a:	e000      	b.n	8009a7e <HAL_UART_IRQHandler+0x76a>
    return;
 8009a7c:	bf00      	nop
  }
}
 8009a7e:	37e8      	adds	r7, #232	@ 0xe8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	effffffe 	.word	0xeffffffe

08009a88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b08:	b092      	sub	sp, #72	@ 0x48
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4bbe      	ldr	r3, [pc, #760]	@ (8009e2c <UART_SetConfig+0x328>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4ab3      	ldr	r2, [pc, #716]	@ (8009e30 <UART_SetConfig+0x32c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	4baf      	ldr	r3, [pc, #700]	@ (8009e34 <UART_SetConfig+0x330>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b80:	430b      	orrs	r3, r1
 8009b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	f023 010f 	bic.w	r1, r3, #15
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4aa6      	ldr	r2, [pc, #664]	@ (8009e38 <UART_SetConfig+0x334>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d177      	bne.n	8009c94 <UART_SetConfig+0x190>
 8009ba4:	4ba5      	ldr	r3, [pc, #660]	@ (8009e3c <UART_SetConfig+0x338>)
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bac:	2b28      	cmp	r3, #40	@ 0x28
 8009bae:	d86d      	bhi.n	8009c8c <UART_SetConfig+0x188>
 8009bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb8 <UART_SetConfig+0xb4>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c8d 	.word	0x08009c8d
 8009bc0:	08009c8d 	.word	0x08009c8d
 8009bc4:	08009c8d 	.word	0x08009c8d
 8009bc8:	08009c8d 	.word	0x08009c8d
 8009bcc:	08009c8d 	.word	0x08009c8d
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009c8d 	.word	0x08009c8d
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c8d 	.word	0x08009c8d
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009c8d 	.word	0x08009c8d
 8009be8:	08009c8d 	.word	0x08009c8d
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c8d 	.word	0x08009c8d
 8009bf4:	08009c8d 	.word	0x08009c8d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c8d 	.word	0x08009c8d
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009c8d 	.word	0x08009c8d
 8009c18:	08009c75 	.word	0x08009c75
 8009c1c:	08009c8d 	.word	0x08009c8d
 8009c20:	08009c8d 	.word	0x08009c8d
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c8d 	.word	0x08009c8d
 8009c2c:	08009c8d 	.word	0x08009c8d
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009c8d 	.word	0x08009c8d
 8009c44:	08009c8d 	.word	0x08009c8d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009c8d 	.word	0x08009c8d
 8009c50:	08009c8d 	.word	0x08009c8d
 8009c54:	08009c8d 	.word	0x08009c8d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e222      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e21e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e21a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e216      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e212      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c84:	2340      	movs	r3, #64	@ 0x40
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	e20e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c8c:	2380      	movs	r3, #128	@ 0x80
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c92:	e20a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a69      	ldr	r2, [pc, #420]	@ (8009e40 <UART_SetConfig+0x33c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x1fc>
 8009c9e:	4b67      	ldr	r3, [pc, #412]	@ (8009e3c <UART_SetConfig+0x338>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x1f4>
 8009caa:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <UART_SetConfig+0x1ac>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e1ec      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e1e8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e1e4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e1e0      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e1dc      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cf0:	2340      	movs	r3, #64	@ 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e1d8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009cf8:	2380      	movs	r3, #128	@ 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e1d4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a4f      	ldr	r2, [pc, #316]	@ (8009e44 <UART_SetConfig+0x340>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d130      	bne.n	8009d6c <UART_SetConfig+0x268>
 8009d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8009e3c <UART_SetConfig+0x338>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d826      	bhi.n	8009d64 <UART_SetConfig+0x260>
 8009d16:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <UART_SetConfig+0x218>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e1b6      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e1b2      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e1ae      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e1aa      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e1a6      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d5c:	2340      	movs	r3, #64	@ 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e1a2      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d64:	2380      	movs	r3, #128	@ 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	e19e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a35      	ldr	r2, [pc, #212]	@ (8009e48 <UART_SetConfig+0x344>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d130      	bne.n	8009dd8 <UART_SetConfig+0x2d4>
 8009d76:	4b31      	ldr	r3, [pc, #196]	@ (8009e3c <UART_SetConfig+0x338>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d826      	bhi.n	8009dd0 <UART_SetConfig+0x2cc>
 8009d82:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0x284>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e180      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e17c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e178      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e174      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e170      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dc8:	2340      	movs	r3, #64	@ 0x40
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e16c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dd0:	2380      	movs	r3, #128	@ 0x80
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd6:	e168      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8009e4c <UART_SetConfig+0x348>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d142      	bne.n	8009e68 <UART_SetConfig+0x364>
 8009de2:	4b16      	ldr	r3, [pc, #88]	@ (8009e3c <UART_SetConfig+0x338>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	d838      	bhi.n	8009e60 <UART_SetConfig+0x35c>
 8009dee:	a201      	add	r2, pc, #4	@ (adr r2, 8009df4 <UART_SetConfig+0x2f0>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e1d 	.word	0x08009e1d
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e51 	.word	0x08009e51
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e14a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e14:	2304      	movs	r3, #4
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e146      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e142      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e24:	2310      	movs	r3, #16
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2a:	e13e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e2c:	cfff69f3 	.word	0xcfff69f3
 8009e30:	58000c00 	.word	0x58000c00
 8009e34:	11fff4ff 	.word	0x11fff4ff
 8009e38:	40011000 	.word	0x40011000
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	40004400 	.word	0x40004400
 8009e44:	40004800 	.word	0x40004800
 8009e48:	40004c00 	.word	0x40004c00
 8009e4c:	40005000 	.word	0x40005000
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e128      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e58:	2340      	movs	r3, #64	@ 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e124      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e60:	2380      	movs	r3, #128	@ 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e120      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4acb      	ldr	r2, [pc, #812]	@ (800a19c <UART_SetConfig+0x698>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d176      	bne.n	8009f60 <UART_SetConfig+0x45c>
 8009e72:	4bcb      	ldr	r3, [pc, #812]	@ (800a1a0 <UART_SetConfig+0x69c>)
 8009e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e7a:	2b28      	cmp	r3, #40	@ 0x28
 8009e7c:	d86c      	bhi.n	8009f58 <UART_SetConfig+0x454>
 8009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e84 <UART_SetConfig+0x380>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009f29 	.word	0x08009f29
 8009e88:	08009f59 	.word	0x08009f59
 8009e8c:	08009f59 	.word	0x08009f59
 8009e90:	08009f59 	.word	0x08009f59
 8009e94:	08009f59 	.word	0x08009f59
 8009e98:	08009f59 	.word	0x08009f59
 8009e9c:	08009f59 	.word	0x08009f59
 8009ea0:	08009f59 	.word	0x08009f59
 8009ea4:	08009f31 	.word	0x08009f31
 8009ea8:	08009f59 	.word	0x08009f59
 8009eac:	08009f59 	.word	0x08009f59
 8009eb0:	08009f59 	.word	0x08009f59
 8009eb4:	08009f59 	.word	0x08009f59
 8009eb8:	08009f59 	.word	0x08009f59
 8009ebc:	08009f59 	.word	0x08009f59
 8009ec0:	08009f59 	.word	0x08009f59
 8009ec4:	08009f39 	.word	0x08009f39
 8009ec8:	08009f59 	.word	0x08009f59
 8009ecc:	08009f59 	.word	0x08009f59
 8009ed0:	08009f59 	.word	0x08009f59
 8009ed4:	08009f59 	.word	0x08009f59
 8009ed8:	08009f59 	.word	0x08009f59
 8009edc:	08009f59 	.word	0x08009f59
 8009ee0:	08009f59 	.word	0x08009f59
 8009ee4:	08009f41 	.word	0x08009f41
 8009ee8:	08009f59 	.word	0x08009f59
 8009eec:	08009f59 	.word	0x08009f59
 8009ef0:	08009f59 	.word	0x08009f59
 8009ef4:	08009f59 	.word	0x08009f59
 8009ef8:	08009f59 	.word	0x08009f59
 8009efc:	08009f59 	.word	0x08009f59
 8009f00:	08009f59 	.word	0x08009f59
 8009f04:	08009f49 	.word	0x08009f49
 8009f08:	08009f59 	.word	0x08009f59
 8009f0c:	08009f59 	.word	0x08009f59
 8009f10:	08009f59 	.word	0x08009f59
 8009f14:	08009f59 	.word	0x08009f59
 8009f18:	08009f59 	.word	0x08009f59
 8009f1c:	08009f59 	.word	0x08009f59
 8009f20:	08009f59 	.word	0x08009f59
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e0bc      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e0b8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e0b4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e0b0      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4e:	e0ac      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f50:	2340      	movs	r3, #64	@ 0x40
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e0a8      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f58:	2380      	movs	r3, #128	@ 0x80
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e0a4      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a8f      	ldr	r2, [pc, #572]	@ (800a1a4 <UART_SetConfig+0x6a0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d130      	bne.n	8009fcc <UART_SetConfig+0x4c8>
 8009f6a:	4b8d      	ldr	r3, [pc, #564]	@ (800a1a0 <UART_SetConfig+0x69c>)
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d826      	bhi.n	8009fc4 <UART_SetConfig+0x4c0>
 8009f76:	a201      	add	r2, pc, #4	@ (adr r2, 8009f7c <UART_SetConfig+0x478>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009f9d 	.word	0x08009f9d
 8009f84:	08009fa5 	.word	0x08009fa5
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fb5 	.word	0x08009fb5
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e086      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e082      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e07e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fac:	2310      	movs	r3, #16
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e07a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e076      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fbc:	2340      	movs	r3, #64	@ 0x40
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc2:	e072      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fc4:	2380      	movs	r3, #128	@ 0x80
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fca:	e06e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a75      	ldr	r2, [pc, #468]	@ (800a1a8 <UART_SetConfig+0x6a4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d130      	bne.n	800a038 <UART_SetConfig+0x534>
 8009fd6:	4b72      	ldr	r3, [pc, #456]	@ (800a1a0 <UART_SetConfig+0x69c>)
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d826      	bhi.n	800a030 <UART_SetConfig+0x52c>
 8009fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe8 <UART_SetConfig+0x4e4>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a001 	.word	0x0800a001
 8009fec:	0800a009 	.word	0x0800a009
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2300      	movs	r3, #0
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e050      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e04c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e048      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e044      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a026:	e040      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a028:	2340      	movs	r3, #64	@ 0x40
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02e:	e03c      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a030:	2380      	movs	r3, #128	@ 0x80
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a036:	e038      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a5b      	ldr	r2, [pc, #364]	@ (800a1ac <UART_SetConfig+0x6a8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d130      	bne.n	800a0a4 <UART_SetConfig+0x5a0>
 800a042:	4b57      	ldr	r3, [pc, #348]	@ (800a1a0 <UART_SetConfig+0x69c>)
 800a044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	d826      	bhi.n	800a09c <UART_SetConfig+0x598>
 800a04e:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <UART_SetConfig+0x550>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a06d 	.word	0x0800a06d
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a07d 	.word	0x0800a07d
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a095 	.word	0x0800a095
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e01a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e016      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a082:	e012      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08a:	e00e      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a08c:	2320      	movs	r3, #32
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a092:	e00a      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a094:	2340      	movs	r3, #64	@ 0x40
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e006      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a09c:	2380      	movs	r3, #128	@ 0x80
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a2:	e002      	b.n	800a0aa <UART_SetConfig+0x5a6>
 800a0a4:	2380      	movs	r3, #128	@ 0x80
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a1ac <UART_SetConfig+0x6a8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	f040 80f8 	bne.w	800a2a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	dc46      	bgt.n	800a14c <UART_SetConfig+0x648>
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	f2c0 8082 	blt.w	800a1c8 <UART_SetConfig+0x6c4>
 800a0c4:	3b02      	subs	r3, #2
 800a0c6:	2b1e      	cmp	r3, #30
 800a0c8:	d87e      	bhi.n	800a1c8 <UART_SetConfig+0x6c4>
 800a0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0x5cc>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a153 	.word	0x0800a153
 800a0d4:	0800a1c9 	.word	0x0800a1c9
 800a0d8:	0800a15b 	.word	0x0800a15b
 800a0dc:	0800a1c9 	.word	0x0800a1c9
 800a0e0:	0800a1c9 	.word	0x0800a1c9
 800a0e4:	0800a1c9 	.word	0x0800a1c9
 800a0e8:	0800a16b 	.word	0x0800a16b
 800a0ec:	0800a1c9 	.word	0x0800a1c9
 800a0f0:	0800a1c9 	.word	0x0800a1c9
 800a0f4:	0800a1c9 	.word	0x0800a1c9
 800a0f8:	0800a1c9 	.word	0x0800a1c9
 800a0fc:	0800a1c9 	.word	0x0800a1c9
 800a100:	0800a1c9 	.word	0x0800a1c9
 800a104:	0800a1c9 	.word	0x0800a1c9
 800a108:	0800a17b 	.word	0x0800a17b
 800a10c:	0800a1c9 	.word	0x0800a1c9
 800a110:	0800a1c9 	.word	0x0800a1c9
 800a114:	0800a1c9 	.word	0x0800a1c9
 800a118:	0800a1c9 	.word	0x0800a1c9
 800a11c:	0800a1c9 	.word	0x0800a1c9
 800a120:	0800a1c9 	.word	0x0800a1c9
 800a124:	0800a1c9 	.word	0x0800a1c9
 800a128:	0800a1c9 	.word	0x0800a1c9
 800a12c:	0800a1c9 	.word	0x0800a1c9
 800a130:	0800a1c9 	.word	0x0800a1c9
 800a134:	0800a1c9 	.word	0x0800a1c9
 800a138:	0800a1c9 	.word	0x0800a1c9
 800a13c:	0800a1c9 	.word	0x0800a1c9
 800a140:	0800a1c9 	.word	0x0800a1c9
 800a144:	0800a1c9 	.word	0x0800a1c9
 800a148:	0800a1bb 	.word	0x0800a1bb
 800a14c:	2b40      	cmp	r3, #64	@ 0x40
 800a14e:	d037      	beq.n	800a1c0 <UART_SetConfig+0x6bc>
 800a150:	e03a      	b.n	800a1c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a152:	f7fd fe23 	bl	8007d9c <HAL_RCCEx_GetD3PCLK1Freq>
 800a156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a158:	e03c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fd fe32 	bl	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a168:	e034      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a16a:	f107 0318 	add.w	r3, r7, #24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd ff7e 	bl	8008070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	e02c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a17a:	4b09      	ldr	r3, [pc, #36]	@ (800a1a0 <UART_SetConfig+0x69c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d016      	beq.n	800a1b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a186:	4b06      	ldr	r3, [pc, #24]	@ (800a1a0 <UART_SetConfig+0x69c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	08db      	lsrs	r3, r3, #3
 800a18c:	f003 0303 	and.w	r3, r3, #3
 800a190:	4a07      	ldr	r2, [pc, #28]	@ (800a1b0 <UART_SetConfig+0x6ac>)
 800a192:	fa22 f303 	lsr.w	r3, r2, r3
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a198:	e01c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
 800a19a:	bf00      	nop
 800a19c:	40011400 	.word	0x40011400
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	40007800 	.word	0x40007800
 800a1a8:	40007c00 	.word	0x40007c00
 800a1ac:	58000c00 	.word	0x58000c00
 800a1b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a1b4:	4b9d      	ldr	r3, [pc, #628]	@ (800a42c <UART_SetConfig+0x928>)
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b8:	e00c      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1ba:	4b9d      	ldr	r3, [pc, #628]	@ (800a430 <UART_SetConfig+0x92c>)
 800a1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1be:	e009      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c6:	e005      	b.n	800a1d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 81de 	beq.w	800a598 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e0:	4a94      	ldr	r2, [pc, #592]	@ (800a434 <UART_SetConfig+0x930>)
 800a1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d305      	bcc.n	800a20c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a208:	429a      	cmp	r2, r3
 800a20a:	d903      	bls.n	800a214 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a212:	e1c1      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a216:	2200      	movs	r2, #0
 800a218:	60bb      	str	r3, [r7, #8]
 800a21a:	60fa      	str	r2, [r7, #12]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a220:	4a84      	ldr	r2, [pc, #528]	@ (800a434 <UART_SetConfig+0x930>)
 800a222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a226:	b29b      	uxth	r3, r3
 800a228:	2200      	movs	r2, #0
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	607a      	str	r2, [r7, #4]
 800a22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a236:	f7f6 f90b 	bl	8000450 <__aeabi_uldivmod>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4610      	mov	r0, r2
 800a240:	4619      	mov	r1, r3
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	020b      	lsls	r3, r1, #8
 800a24c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a250:	0202      	lsls	r2, r0, #8
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	6849      	ldr	r1, [r1, #4]
 800a256:	0849      	lsrs	r1, r1, #1
 800a258:	2000      	movs	r0, #0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4605      	mov	r5, r0
 800a25e:	eb12 0804 	adds.w	r8, r2, r4
 800a262:	eb43 0905 	adc.w	r9, r3, r5
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	469a      	mov	sl, r3
 800a26e:	4693      	mov	fp, r2
 800a270:	4652      	mov	r2, sl
 800a272:	465b      	mov	r3, fp
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f8ea 	bl	8000450 <__aeabi_uldivmod>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4613      	mov	r3, r2
 800a282:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a28a:	d308      	bcc.n	800a29e <UART_SetConfig+0x79a>
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a292:	d204      	bcs.n	800a29e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	e17c      	b.n	800a598 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a2a4:	e178      	b.n	800a598 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ae:	f040 80c5 	bne.w	800a43c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a2b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	dc48      	bgt.n	800a34c <UART_SetConfig+0x848>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	db7b      	blt.n	800a3b6 <UART_SetConfig+0x8b2>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d879      	bhi.n	800a3b6 <UART_SetConfig+0x8b2>
 800a2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c8 <UART_SetConfig+0x7c4>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a353 	.word	0x0800a353
 800a2cc:	0800a35b 	.word	0x0800a35b
 800a2d0:	0800a3b7 	.word	0x0800a3b7
 800a2d4:	0800a3b7 	.word	0x0800a3b7
 800a2d8:	0800a363 	.word	0x0800a363
 800a2dc:	0800a3b7 	.word	0x0800a3b7
 800a2e0:	0800a3b7 	.word	0x0800a3b7
 800a2e4:	0800a3b7 	.word	0x0800a3b7
 800a2e8:	0800a373 	.word	0x0800a373
 800a2ec:	0800a3b7 	.word	0x0800a3b7
 800a2f0:	0800a3b7 	.word	0x0800a3b7
 800a2f4:	0800a3b7 	.word	0x0800a3b7
 800a2f8:	0800a3b7 	.word	0x0800a3b7
 800a2fc:	0800a3b7 	.word	0x0800a3b7
 800a300:	0800a3b7 	.word	0x0800a3b7
 800a304:	0800a3b7 	.word	0x0800a3b7
 800a308:	0800a383 	.word	0x0800a383
 800a30c:	0800a3b7 	.word	0x0800a3b7
 800a310:	0800a3b7 	.word	0x0800a3b7
 800a314:	0800a3b7 	.word	0x0800a3b7
 800a318:	0800a3b7 	.word	0x0800a3b7
 800a31c:	0800a3b7 	.word	0x0800a3b7
 800a320:	0800a3b7 	.word	0x0800a3b7
 800a324:	0800a3b7 	.word	0x0800a3b7
 800a328:	0800a3b7 	.word	0x0800a3b7
 800a32c:	0800a3b7 	.word	0x0800a3b7
 800a330:	0800a3b7 	.word	0x0800a3b7
 800a334:	0800a3b7 	.word	0x0800a3b7
 800a338:	0800a3b7 	.word	0x0800a3b7
 800a33c:	0800a3b7 	.word	0x0800a3b7
 800a340:	0800a3b7 	.word	0x0800a3b7
 800a344:	0800a3b7 	.word	0x0800a3b7
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	2b40      	cmp	r3, #64	@ 0x40
 800a34e:	d02e      	beq.n	800a3ae <UART_SetConfig+0x8aa>
 800a350:	e031      	b.n	800a3b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a352:	f7fc faab 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 800a356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a358:	e033      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a35a:	f7fc fabd 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 800a35e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a360:	e02f      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd fd2e 	bl	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	e027      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a372:	f107 0318 	add.w	r3, r7, #24
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd fe7a 	bl	8008070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a380:	e01f      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a382:	4b2d      	ldr	r3, [pc, #180]	@ (800a438 <UART_SetConfig+0x934>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a38e:	4b2a      	ldr	r3, [pc, #168]	@ (800a438 <UART_SetConfig+0x934>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <UART_SetConfig+0x928>)
 800a39a:	fa22 f303 	lsr.w	r3, r2, r3
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3a0:	e00f      	b.n	800a3c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a3a2:	4b22      	ldr	r3, [pc, #136]	@ (800a42c <UART_SetConfig+0x928>)
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a6:	e00c      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3a8:	4b21      	ldr	r3, [pc, #132]	@ (800a430 <UART_SetConfig+0x92c>)
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ac:	e009      	b.n	800a3c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b4:	e005      	b.n	800a3c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a3c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 80e7 	beq.w	800a598 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	4a19      	ldr	r2, [pc, #100]	@ (800a434 <UART_SetConfig+0x930>)
 800a3d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3dc:	005a      	lsls	r2, r3, #1
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	d916      	bls.n	800a424 <UART_SetConfig+0x920>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3fc:	d212      	bcs.n	800a424 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	b29b      	uxth	r3, r3
 800a402:	f023 030f 	bic.w	r3, r3, #15
 800a406:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b29a      	uxth	r2, r3
 800a414:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a416:	4313      	orrs	r3, r2
 800a418:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	e0b9      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a42a:	e0b5      	b.n	800a598 <UART_SetConfig+0xa94>
 800a42c:	03d09000 	.word	0x03d09000
 800a430:	003d0900 	.word	0x003d0900
 800a434:	0801c874 	.word	0x0801c874
 800a438:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a43c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a440:	2b20      	cmp	r3, #32
 800a442:	dc49      	bgt.n	800a4d8 <UART_SetConfig+0x9d4>
 800a444:	2b00      	cmp	r3, #0
 800a446:	db7c      	blt.n	800a542 <UART_SetConfig+0xa3e>
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d87a      	bhi.n	800a542 <UART_SetConfig+0xa3e>
 800a44c:	a201      	add	r2, pc, #4	@ (adr r2, 800a454 <UART_SetConfig+0x950>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a4df 	.word	0x0800a4df
 800a458:	0800a4e7 	.word	0x0800a4e7
 800a45c:	0800a543 	.word	0x0800a543
 800a460:	0800a543 	.word	0x0800a543
 800a464:	0800a4ef 	.word	0x0800a4ef
 800a468:	0800a543 	.word	0x0800a543
 800a46c:	0800a543 	.word	0x0800a543
 800a470:	0800a543 	.word	0x0800a543
 800a474:	0800a4ff 	.word	0x0800a4ff
 800a478:	0800a543 	.word	0x0800a543
 800a47c:	0800a543 	.word	0x0800a543
 800a480:	0800a543 	.word	0x0800a543
 800a484:	0800a543 	.word	0x0800a543
 800a488:	0800a543 	.word	0x0800a543
 800a48c:	0800a543 	.word	0x0800a543
 800a490:	0800a543 	.word	0x0800a543
 800a494:	0800a50f 	.word	0x0800a50f
 800a498:	0800a543 	.word	0x0800a543
 800a49c:	0800a543 	.word	0x0800a543
 800a4a0:	0800a543 	.word	0x0800a543
 800a4a4:	0800a543 	.word	0x0800a543
 800a4a8:	0800a543 	.word	0x0800a543
 800a4ac:	0800a543 	.word	0x0800a543
 800a4b0:	0800a543 	.word	0x0800a543
 800a4b4:	0800a543 	.word	0x0800a543
 800a4b8:	0800a543 	.word	0x0800a543
 800a4bc:	0800a543 	.word	0x0800a543
 800a4c0:	0800a543 	.word	0x0800a543
 800a4c4:	0800a543 	.word	0x0800a543
 800a4c8:	0800a543 	.word	0x0800a543
 800a4cc:	0800a543 	.word	0x0800a543
 800a4d0:	0800a543 	.word	0x0800a543
 800a4d4:	0800a535 	.word	0x0800a535
 800a4d8:	2b40      	cmp	r3, #64	@ 0x40
 800a4da:	d02e      	beq.n	800a53a <UART_SetConfig+0xa36>
 800a4dc:	e031      	b.n	800a542 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4de:	f7fc f9e5 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 800a4e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4e4:	e033      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4e6:	f7fc f9f7 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 800a4ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4ec:	e02f      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fd fc68 	bl	8007dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fc:	e027      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4fe:	f107 0318 	add.w	r3, r7, #24
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd fdb4 	bl	8008070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	e01f      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a50e:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c4 <UART_SetConfig+0xac0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d009      	beq.n	800a52e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a51a:	4b2a      	ldr	r3, [pc, #168]	@ (800a5c4 <UART_SetConfig+0xac0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	08db      	lsrs	r3, r3, #3
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	4a28      	ldr	r2, [pc, #160]	@ (800a5c8 <UART_SetConfig+0xac4>)
 800a526:	fa22 f303 	lsr.w	r3, r2, r3
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a52c:	e00f      	b.n	800a54e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a52e:	4b26      	ldr	r3, [pc, #152]	@ (800a5c8 <UART_SetConfig+0xac4>)
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a532:	e00c      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a534:	4b25      	ldr	r3, [pc, #148]	@ (800a5cc <UART_SetConfig+0xac8>)
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e009      	b.n	800a54e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a53a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e005      	b.n	800a54e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a54c:	bf00      	nop
    }

    if (pclk != 0U)
 800a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d021      	beq.n	800a598 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <UART_SetConfig+0xacc>)
 800a55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55e:	461a      	mov	r2, r3
 800a560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a562:	fbb3 f2f2 	udiv	r2, r3, r2
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	441a      	add	r2, r3
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d909      	bls.n	800a592 <UART_SetConfig+0xa8e>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a584:	d205      	bcs.n	800a592 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	b29a      	uxth	r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60da      	str	r2, [r3, #12]
 800a590:	e002      	b.n	800a598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3748      	adds	r7, #72	@ 0x48
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5c2:	bf00      	nop
 800a5c4:	58024400 	.word	0x58024400
 800a5c8:	03d09000 	.word	0x03d09000
 800a5cc:	003d0900 	.word	0x003d0900
 800a5d0:	0801c874 	.word	0x0801c874

0800a5d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e0:	f003 0308 	and.w	r3, r3, #8
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00a      	beq.n	800a5fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	430a      	orrs	r2, r1
 800a662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00a      	beq.n	800a6a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6d2:	d10a      	bne.n	800a6ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b098      	sub	sp, #96	@ 0x60
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a728:	f7f7 ff1c 	bl	8002564 <HAL_GetTick>
 800a72c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d12f      	bne.n	800a79c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a744:	2200      	movs	r2, #0
 800a746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f88e 	bl	800a86c <UART_WaitOnFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d022      	beq.n	800a79c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a76a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	461a      	mov	r2, r3
 800a772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a774:	647b      	str	r3, [r7, #68]	@ 0x44
 800a776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a77c:	e841 2300 	strex	r3, r2, [r1]
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1e6      	bne.n	800a756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e063      	b.n	800a864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d149      	bne.n	800a83e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f857 	bl	800a86c <UART_WaitOnFlagUntilTimeout>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d03c      	beq.n	800a83e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e6      	bne.n	800a7c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	60fb      	str	r3, [r7, #12]
   return(result);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a816:	61fa      	str	r2, [r7, #28]
 800a818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	69b9      	ldr	r1, [r7, #24]
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	617b      	str	r3, [r7, #20]
   return(result);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e5      	bne.n	800a7f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e012      	b.n	800a864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3758      	adds	r7, #88	@ 0x58
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87c:	e04f      	b.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a884:	d04b      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a886:	f7f7 fe6d 	bl	8002564 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d302      	bcc.n	800a89c <UART_WaitOnFlagUntilTimeout+0x30>
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e04e      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d037      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b80      	cmp	r3, #128	@ 0x80
 800a8b2:	d034      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b40      	cmp	r3, #64	@ 0x40
 800a8b8:	d031      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d110      	bne.n	800a8ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f921 	bl	800ab18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2208      	movs	r2, #8
 800a8da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e029      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8f8:	d111      	bne.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 f907 	bl	800ab18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e00f      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4013      	ands	r3, r2
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	bf0c      	ite	eq
 800a92e:	2301      	moveq	r3, #1
 800a930:	2300      	movne	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d0a0      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b096      	sub	sp, #88	@ 0x58
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2222      	movs	r2, #34	@ 0x22
 800a970:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d02d      	beq.n	800a9da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a984:	4a40      	ldr	r2, [pc, #256]	@ (800aa88 <UART_Start_Receive_DMA+0x140>)
 800a986:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98e:	4a3f      	ldr	r2, [pc, #252]	@ (800aa8c <UART_Start_Receive_DMA+0x144>)
 800a990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a998:	4a3d      	ldr	r2, [pc, #244]	@ (800aa90 <UART_Start_Receive_DMA+0x148>)
 800a99a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3324      	adds	r3, #36	@ 0x24
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	f7f8 fa26 	bl	8002e0c <HAL_DMA_Start_IT>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e051      	b.n	800aa7e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d018      	beq.n	800aa14 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa02:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa34:	637a      	str	r2, [r7, #52]	@ 0x34
 800aa36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aa42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e5      	bne.n	800aa14 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	613b      	str	r3, [r7, #16]
   return(result);
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3308      	adds	r3, #8
 800aa66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa68:	623a      	str	r2, [r7, #32]
 800aa6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	69f9      	ldr	r1, [r7, #28]
 800aa6e:	6a3a      	ldr	r2, [r7, #32]
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e5      	bne.n	800aa48 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3758      	adds	r7, #88	@ 0x58
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	0800ac97 	.word	0x0800ac97
 800aa8c:	0800adbf 	.word	0x0800adbf
 800aa90:	0800adfd 	.word	0x0800adfd

0800aa94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b08f      	sub	sp, #60	@ 0x3c
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aab0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aabc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e6      	bne.n	800aa9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3308      	adds	r3, #8
 800aad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaee:	61ba      	str	r2, [r7, #24]
 800aaf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	613b      	str	r3, [r7, #16]
   return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ab0a:	bf00      	nop
 800ab0c:	373c      	adds	r7, #60	@ 0x3c
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b095      	sub	sp, #84	@ 0x54
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e6      	bne.n	800ab20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab62:	69fa      	ldr	r2, [r7, #28]
 800ab64:	4b1e      	ldr	r3, [pc, #120]	@ (800abe0 <UART_EndRxTransfer+0xc8>)
 800ab66:	4013      	ands	r3, r2
 800ab68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e5      	bne.n	800ab52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d118      	bne.n	800abc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f023 0310 	bic.w	r3, r3, #16
 800aba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	461a      	mov	r2, r3
 800abaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb0:	6979      	ldr	r1, [r7, #20]
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	e841 2300 	strex	r3, r2, [r1]
 800abb8:	613b      	str	r3, [r7, #16]
   return(result);
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1e6      	bne.n	800ab8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2220      	movs	r2, #32
 800abc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800abd4:	bf00      	nop
 800abd6:	3754      	adds	r7, #84	@ 0x54
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	effffffe 	.word	0xeffffffe

0800abe4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b090      	sub	sp, #64	@ 0x40
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfa:	d037      	beq.n	800ac6c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800abfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3308      	adds	r3, #8
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	623b      	str	r3, [r7, #32]
   return(result);
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3308      	adds	r3, #8
 800ac22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac24:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e5      	bne.n	800ac04 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	61fb      	str	r3, [r7, #28]
 800ac58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	69b9      	ldr	r1, [r7, #24]
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	617b      	str	r3, [r7, #20]
   return(result);
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e6      	bne.n	800ac38 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac6a:	e002      	b.n	800ac72 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ac6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ac6e:	f7fe ff0b 	bl	8009a88 <HAL_UART_TxCpltCallback>
}
 800ac72:	bf00      	nop
 800ac74:	3740      	adds	r7, #64	@ 0x40
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7fe ff07 	bl	8009a9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b09c      	sub	sp, #112	@ 0x70
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	69db      	ldr	r3, [r3, #28]
 800aca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acac:	d071      	beq.n	800ad92 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800acae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acbe:	e853 3f00 	ldrex	r3, [r3]
 800acc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800accc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ace2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e6      	bne.n	800acb6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3308      	adds	r3, #8
 800acee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf2:	e853 3f00 	ldrex	r3, [r3]
 800acf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfa:	f023 0301 	bic.w	r3, r3, #1
 800acfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3308      	adds	r3, #8
 800ad06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad08:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e5      	bne.n	800ace8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3308      	adds	r3, #8
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3308      	adds	r3, #8
 800ad3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e5      	bne.n	800ad1c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad52:	2220      	movs	r2, #32
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d118      	bne.n	800ad92 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f023 0310 	bic.w	r3, r3, #16
 800ad74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	69b9      	ldr	r1, [r7, #24]
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e6      	bne.n	800ad60 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad94:	2200      	movs	r2, #0
 800ad96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d107      	bne.n	800adb0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ada0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ada2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ada6:	4619      	mov	r1, r3
 800ada8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800adaa:	f7fe fe9f 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adae:	e002      	b.n	800adb6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800adb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800adb2:	f7fe fe7d 	bl	8009ab0 <HAL_UART_RxCpltCallback>
}
 800adb6:	bf00      	nop
 800adb8:	3770      	adds	r7, #112	@ 0x70
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800add6:	2b01      	cmp	r3, #1
 800add8:	d109      	bne.n	800adee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ade0:	085b      	lsrs	r3, r3, #1
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4619      	mov	r1, r3
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7fe fe80 	bl	8009aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adec:	e002      	b.n	800adf4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7fe fe68 	bl	8009ac4 <HAL_UART_RxHalfCpltCallback>
}
 800adf4:	bf00      	nop
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae24:	2b80      	cmp	r3, #128	@ 0x80
 800ae26:	d109      	bne.n	800ae3c <UART_DMAError+0x40>
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2b21      	cmp	r3, #33	@ 0x21
 800ae2c:	d106      	bne.n	800ae3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ae36:	6978      	ldr	r0, [r7, #20]
 800ae38:	f7ff fe2c 	bl	800aa94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae46:	2b40      	cmp	r3, #64	@ 0x40
 800ae48:	d109      	bne.n	800ae5e <UART_DMAError+0x62>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b22      	cmp	r3, #34	@ 0x22
 800ae4e:	d106      	bne.n	800ae5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae58:	6978      	ldr	r0, [r7, #20]
 800ae5a:	f7ff fe5d 	bl	800ab18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae64:	f043 0210 	orr.w	r2, r3, #16
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae6e:	6978      	ldr	r0, [r7, #20]
 800ae70:	f7fe fe32 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae74:	bf00      	nop
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7fe fe1c 	bl	8009ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	61bb      	str	r3, [r7, #24]
 800aed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6979      	ldr	r1, [r7, #20]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	613b      	str	r3, [r7, #16]
   return(result);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e6      	bne.n	800aeb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7fe fdc9 	bl	8009a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aef6:	bf00      	nop
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d101      	bne.n	800af50 <HAL_UARTEx_DisableFifoMode+0x16>
 800af4c:	2302      	movs	r3, #2
 800af4e:	e027      	b.n	800afa0 <HAL_UARTEx_DisableFifoMode+0x66>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2224      	movs	r2, #36	@ 0x24
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f022 0201 	bic.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d101      	bne.n	800afc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afc0:	2302      	movs	r3, #2
 800afc2:	e02d      	b.n	800b020 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2224      	movs	r2, #36	@ 0x24
 800afd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f84f 	bl	800b0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d101      	bne.n	800b040 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e02d      	b.n	800b09c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2224      	movs	r2, #36	@ 0x24
 800b04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 0201 	bic.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f811 	bl	800b0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d108      	bne.n	800b0c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0c4:	e031      	b.n	800b12a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0c6:	2310      	movs	r3, #16
 800b0c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	0e5b      	lsrs	r3, r3, #25
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 0307 	and.w	r3, r3, #7
 800b0dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	0f5b      	lsrs	r3, r3, #29
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	7b3a      	ldrb	r2, [r7, #12]
 800b0f2:	4911      	ldr	r1, [pc, #68]	@ (800b138 <UARTEx_SetNbDataToProcess+0x94>)
 800b0f4:	5c8a      	ldrb	r2, [r1, r2]
 800b0f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0fa:	7b3a      	ldrb	r2, [r7, #12]
 800b0fc:	490f      	ldr	r1, [pc, #60]	@ (800b13c <UARTEx_SetNbDataToProcess+0x98>)
 800b0fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b100:	fb93 f3f2 	sdiv	r3, r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	7b7a      	ldrb	r2, [r7, #13]
 800b110:	4909      	ldr	r1, [pc, #36]	@ (800b138 <UARTEx_SetNbDataToProcess+0x94>)
 800b112:	5c8a      	ldrb	r2, [r1, r2]
 800b114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b118:	7b7a      	ldrb	r2, [r7, #13]
 800b11a:	4908      	ldr	r1, [pc, #32]	@ (800b13c <UARTEx_SetNbDataToProcess+0x98>)
 800b11c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b11e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	0801c88c 	.word	0x0801c88c
 800b13c:	0801c894 	.word	0x0801c894

0800b140 <__NVIC_SetPriority>:
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b14c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b150:	2b00      	cmp	r3, #0
 800b152:	db0a      	blt.n	800b16a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	490c      	ldr	r1, [pc, #48]	@ (800b18c <__NVIC_SetPriority+0x4c>)
 800b15a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b15e:	0112      	lsls	r2, r2, #4
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	440b      	add	r3, r1
 800b164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b168:	e00a      	b.n	800b180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	4908      	ldr	r1, [pc, #32]	@ (800b190 <__NVIC_SetPriority+0x50>)
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	f003 030f 	and.w	r3, r3, #15
 800b176:	3b04      	subs	r3, #4
 800b178:	0112      	lsls	r2, r2, #4
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	440b      	add	r3, r1
 800b17e:	761a      	strb	r2, [r3, #24]
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	e000e100 	.word	0xe000e100
 800b190:	e000ed00 	.word	0xe000ed00

0800b194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <SysTick_Handler+0x1c>)
 800b19a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b19c:	f002 f982 	bl	800d4a4 <xTaskGetSchedulerState>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d001      	beq.n	800b1aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1a6:	f000 fd9f 	bl	800bce8 <xPortSysTickHandler>
  }
}
 800b1aa:	bf00      	nop
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	e000e010 	.word	0xe000e010

0800b1b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	f06f 0004 	mvn.w	r0, #4
 800b1be:	f7ff ffbf 	bl	800b140 <__NVIC_SetPriority>
#endif
}
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1ce:	f3ef 8305 	mrs	r3, IPSR
 800b1d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b1d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1da:	f06f 0305 	mvn.w	r3, #5
 800b1de:	607b      	str	r3, [r7, #4]
 800b1e0:	e00c      	b.n	800b1fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b20c <osKernelInitialize+0x44>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1ea:	4b08      	ldr	r3, [pc, #32]	@ (800b20c <osKernelInitialize+0x44>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	607b      	str	r3, [r7, #4]
 800b1f4:	e002      	b.n	800b1fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1fc:	687b      	ldr	r3, [r7, #4]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	24009a5c 	.word	0x24009a5c

0800b210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b216:	f3ef 8305 	mrs	r3, IPSR
 800b21a:	603b      	str	r3, [r7, #0]
  return(result);
 800b21c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b222:	f06f 0305 	mvn.w	r3, #5
 800b226:	607b      	str	r3, [r7, #4]
 800b228:	e010      	b.n	800b24c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b22a:	4b0b      	ldr	r3, [pc, #44]	@ (800b258 <osKernelStart+0x48>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d109      	bne.n	800b246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b232:	f7ff ffbf 	bl	800b1b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b236:	4b08      	ldr	r3, [pc, #32]	@ (800b258 <osKernelStart+0x48>)
 800b238:	2202      	movs	r2, #2
 800b23a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b23c:	f001 fcbc 	bl	800cbb8 <vTaskStartScheduler>
      stat = osOK;
 800b240:	2300      	movs	r3, #0
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	e002      	b.n	800b24c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b24a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b24c:	687b      	ldr	r3, [r7, #4]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	24009a5c 	.word	0x24009a5c

0800b25c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08e      	sub	sp, #56	@ 0x38
 800b260:	af04      	add	r7, sp, #16
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b26c:	f3ef 8305 	mrs	r3, IPSR
 800b270:	617b      	str	r3, [r7, #20]
  return(result);
 800b272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b274:	2b00      	cmp	r3, #0
 800b276:	d17e      	bne.n	800b376 <osThreadNew+0x11a>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d07b      	beq.n	800b376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b27e:	2380      	movs	r3, #128	@ 0x80
 800b280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b282:	2318      	movs	r3, #24
 800b284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b28a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b28e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d045      	beq.n	800b322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <osThreadNew+0x48>
        name = attr->name;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d008      	beq.n	800b2ca <osThreadNew+0x6e>
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	2b38      	cmp	r3, #56	@ 0x38
 800b2bc:	d805      	bhi.n	800b2ca <osThreadNew+0x6e>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <osThreadNew+0x72>
        return (NULL);
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e054      	b.n	800b378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	089b      	lsrs	r3, r3, #2
 800b2dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00e      	beq.n	800b304 <osThreadNew+0xa8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	2b5b      	cmp	r3, #91	@ 0x5b
 800b2ec:	d90a      	bls.n	800b304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d006      	beq.n	800b304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <osThreadNew+0xa8>
        mem = 1;
 800b2fe:	2301      	movs	r3, #1
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	e010      	b.n	800b326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10c      	bne.n	800b326 <osThreadNew+0xca>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d108      	bne.n	800b326 <osThreadNew+0xca>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d104      	bne.n	800b326 <osThreadNew+0xca>
          mem = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61bb      	str	r3, [r7, #24]
 800b320:	e001      	b.n	800b326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d110      	bne.n	800b34e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b334:	9202      	str	r2, [sp, #8]
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	6a3a      	ldr	r2, [r7, #32]
 800b340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f001 fa5c 	bl	800c800 <xTaskCreateStatic>
 800b348:	4603      	mov	r3, r0
 800b34a:	613b      	str	r3, [r7, #16]
 800b34c:	e013      	b.n	800b376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d110      	bne.n	800b376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	b29a      	uxth	r2, r3
 800b358:	f107 0310 	add.w	r3, r7, #16
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f001 faaa 	bl	800c8c0 <xTaskCreate>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d001      	beq.n	800b376 <osThreadNew+0x11a>
            hTask = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b376:	693b      	ldr	r3, [r7, #16]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3728      	adds	r7, #40	@ 0x28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b388:	f3ef 8305 	mrs	r3, IPSR
 800b38c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b38e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <osDelay+0x1c>
    stat = osErrorISR;
 800b394:	f06f 0305 	mvn.w	r3, #5
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	e007      	b.n	800b3ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <osDelay+0x2c>
      vTaskDelay(ticks);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fbd0 	bl	800cb4c <vTaskDelay>
    }
  }

  return (stat);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4a07      	ldr	r2, [pc, #28]	@ (800b3e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	4a06      	ldr	r2, [pc, #24]	@ (800b3e8 <vApplicationGetIdleTaskMemory+0x30>)
 800b3ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2280      	movs	r2, #128	@ 0x80
 800b3d4:	601a      	str	r2, [r3, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	24009a60 	.word	0x24009a60
 800b3e8:	24009abc 	.word	0x24009abc

0800b3ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4a07      	ldr	r2, [pc, #28]	@ (800b418 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4a06      	ldr	r2, [pc, #24]	@ (800b41c <vApplicationGetTimerTaskMemory+0x30>)
 800b402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b40a:	601a      	str	r2, [r3, #0]
}
 800b40c:	bf00      	nop
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	24009cbc 	.word	0x24009cbc
 800b41c:	24009d18 	.word	0x24009d18

0800b420 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	@ 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b42c:	f001 fc2c 	bl	800cc88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b430:	4b5c      	ldr	r3, [pc, #368]	@ (800b5a4 <pvPortMalloc+0x184>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b438:	f000 f924 	bl	800b684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b43c:	4b5a      	ldr	r3, [pc, #360]	@ (800b5a8 <pvPortMalloc+0x188>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4013      	ands	r3, r2
 800b444:	2b00      	cmp	r3, #0
 800b446:	f040 8095 	bne.w	800b574 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01e      	beq.n	800b48e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b450:	2208      	movs	r2, #8
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d015      	beq.n	800b48e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f023 0307 	bic.w	r3, r3, #7
 800b468:	3308      	adds	r3, #8
 800b46a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00b      	beq.n	800b48e <pvPortMalloc+0x6e>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	617b      	str	r3, [r7, #20]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d06f      	beq.n	800b574 <pvPortMalloc+0x154>
 800b494:	4b45      	ldr	r3, [pc, #276]	@ (800b5ac <pvPortMalloc+0x18c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d86a      	bhi.n	800b574 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b49e:	4b44      	ldr	r3, [pc, #272]	@ (800b5b0 <pvPortMalloc+0x190>)
 800b4a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4a2:	4b43      	ldr	r3, [pc, #268]	@ (800b5b0 <pvPortMalloc+0x190>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4a8:	e004      	b.n	800b4b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d903      	bls.n	800b4c6 <pvPortMalloc+0xa6>
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f1      	bne.n	800b4aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4c6:	4b37      	ldr	r3, [pc, #220]	@ (800b5a4 <pvPortMalloc+0x184>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d051      	beq.n	800b574 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2208      	movs	r2, #8
 800b4d6:	4413      	add	r3, r2
 800b4d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	6a3b      	ldr	r3, [r7, #32]
 800b4e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	1ad2      	subs	r2, r2, r3
 800b4ea:	2308      	movs	r3, #8
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d920      	bls.n	800b534 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f003 0307 	and.w	r3, r3, #7
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <pvPortMalloc+0xfc>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	613b      	str	r3, [r7, #16]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	1ad2      	subs	r2, r2, r3
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b52e:	69b8      	ldr	r0, [r7, #24]
 800b530:	f000 f90a 	bl	800b748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b534:	4b1d      	ldr	r3, [pc, #116]	@ (800b5ac <pvPortMalloc+0x18c>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ac <pvPortMalloc+0x18c>)
 800b540:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b542:	4b1a      	ldr	r3, [pc, #104]	@ (800b5ac <pvPortMalloc+0x18c>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b4 <pvPortMalloc+0x194>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d203      	bcs.n	800b556 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b54e:	4b17      	ldr	r3, [pc, #92]	@ (800b5ac <pvPortMalloc+0x18c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a18      	ldr	r2, [pc, #96]	@ (800b5b4 <pvPortMalloc+0x194>)
 800b554:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	4b13      	ldr	r3, [pc, #76]	@ (800b5a8 <pvPortMalloc+0x188>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	431a      	orrs	r2, r3
 800b560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b562:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	2200      	movs	r2, #0
 800b568:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b56a:	4b13      	ldr	r3, [pc, #76]	@ (800b5b8 <pvPortMalloc+0x198>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3301      	adds	r3, #1
 800b570:	4a11      	ldr	r2, [pc, #68]	@ (800b5b8 <pvPortMalloc+0x198>)
 800b572:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b574:	f001 fb96 	bl	800cca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <pvPortMalloc+0x17a>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	60fb      	str	r3, [r7, #12]
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	e7fd      	b.n	800b596 <pvPortMalloc+0x176>
	return pvReturn;
 800b59a:	69fb      	ldr	r3, [r7, #28]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3728      	adds	r7, #40	@ 0x28
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	2400dd20 	.word	0x2400dd20
 800b5a8:	2400dd34 	.word	0x2400dd34
 800b5ac:	2400dd24 	.word	0x2400dd24
 800b5b0:	2400dd18 	.word	0x2400dd18
 800b5b4:	2400dd28 	.word	0x2400dd28
 800b5b8:	2400dd2c 	.word	0x2400dd2c

0800b5bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d04f      	beq.n	800b66e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5ce:	2308      	movs	r3, #8
 800b5d0:	425b      	negs	r3, r3
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	4b25      	ldr	r3, [pc, #148]	@ (800b678 <vPortFree+0xbc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10b      	bne.n	800b602 <vPortFree+0x46>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	60fb      	str	r3, [r7, #12]
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	e7fd      	b.n	800b5fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00b      	beq.n	800b622 <vPortFree+0x66>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	60bb      	str	r3, [r7, #8]
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	e7fd      	b.n	800b61e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	4b14      	ldr	r3, [pc, #80]	@ (800b678 <vPortFree+0xbc>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4013      	ands	r3, r2
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01e      	beq.n	800b66e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d11a      	bne.n	800b66e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	4b0e      	ldr	r3, [pc, #56]	@ (800b678 <vPortFree+0xbc>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	43db      	mvns	r3, r3
 800b642:	401a      	ands	r2, r3
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b648:	f001 fb1e 	bl	800cc88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <vPortFree+0xc0>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4413      	add	r3, r2
 800b656:	4a09      	ldr	r2, [pc, #36]	@ (800b67c <vPortFree+0xc0>)
 800b658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b65a:	6938      	ldr	r0, [r7, #16]
 800b65c:	f000 f874 	bl	800b748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b660:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <vPortFree+0xc4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	4a06      	ldr	r2, [pc, #24]	@ (800b680 <vPortFree+0xc4>)
 800b668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b66a:	f001 fb1b 	bl	800cca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b66e:	bf00      	nop
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2400dd34 	.word	0x2400dd34
 800b67c:	2400dd24 	.word	0x2400dd24
 800b680:	2400dd30 	.word	0x2400dd30

0800b684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b68a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b68e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b690:	4b27      	ldr	r3, [pc, #156]	@ (800b730 <prvHeapInit+0xac>)
 800b692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00c      	beq.n	800b6b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3307      	adds	r3, #7
 800b6a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b730 <prvHeapInit+0xac>)
 800b6b4:	4413      	add	r3, r2
 800b6b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b734 <prvHeapInit+0xb0>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	@ (800b734 <prvHeapInit+0xb0>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6d0:	2208      	movs	r2, #8
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	1a9b      	subs	r3, r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0307 	bic.w	r3, r3, #7
 800b6de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a15      	ldr	r2, [pc, #84]	@ (800b738 <prvHeapInit+0xb4>)
 800b6e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6e6:	4b14      	ldr	r3, [pc, #80]	@ (800b738 <prvHeapInit+0xb4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6ee:	4b12      	ldr	r3, [pc, #72]	@ (800b738 <prvHeapInit+0xb4>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b704:	4b0c      	ldr	r3, [pc, #48]	@ (800b738 <prvHeapInit+0xb4>)
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4a0a      	ldr	r2, [pc, #40]	@ (800b73c <prvHeapInit+0xb8>)
 800b712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	4a09      	ldr	r2, [pc, #36]	@ (800b740 <prvHeapInit+0xbc>)
 800b71a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b71c:	4b09      	ldr	r3, [pc, #36]	@ (800b744 <prvHeapInit+0xc0>)
 800b71e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b722:	601a      	str	r2, [r3, #0]
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	2400a118 	.word	0x2400a118
 800b734:	2400dd18 	.word	0x2400dd18
 800b738:	2400dd20 	.word	0x2400dd20
 800b73c:	2400dd28 	.word	0x2400dd28
 800b740:	2400dd24 	.word	0x2400dd24
 800b744:	2400dd34 	.word	0x2400dd34

0800b748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b750:	4b28      	ldr	r3, [pc, #160]	@ (800b7f4 <prvInsertBlockIntoFreeList+0xac>)
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	e002      	b.n	800b75c <prvInsertBlockIntoFreeList+0x14>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	429a      	cmp	r2, r3
 800b764:	d8f7      	bhi.n	800b756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	4413      	add	r3, r2
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d108      	bne.n	800b78a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	441a      	add	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	441a      	add	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d118      	bne.n	800b7d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b15      	ldr	r3, [pc, #84]	@ (800b7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d00d      	beq.n	800b7c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	441a      	add	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	e008      	b.n	800b7d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	e003      	b.n	800b7d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d002      	beq.n	800b7e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7e6:	bf00      	nop
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	2400dd18 	.word	0x2400dd18
 800b7f8:	2400dd20 	.word	0x2400dd20

0800b7fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f103 0208 	add.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f103 0208 	add.w	r2, r3, #8
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f103 0208 	add.w	r2, r3, #8
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b856:	b480      	push	{r7}
 800b858:	b085      	sub	sp, #20
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
}
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8b4:	d103      	bne.n	800b8be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e00c      	b.n	800b8d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	e002      	b.n	800b8cc <vListInsert+0x2e>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d2f6      	bcs.n	800b8c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6892      	ldr	r2, [r2, #8]
 800b926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	6852      	ldr	r2, [r2, #4]
 800b930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d103      	bne.n	800b944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	1e5a      	subs	r2, r3, #1
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3b04      	subs	r3, #4
 800b974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b97c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3b04      	subs	r3, #4
 800b982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f023 0201 	bic.w	r2, r3, #1
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3b04      	subs	r3, #4
 800b992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b994:	4a0c      	ldr	r2, [pc, #48]	@ (800b9c8 <pxPortInitialiseStack+0x64>)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3b14      	subs	r3, #20
 800b99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b04      	subs	r3, #4
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f06f 0202 	mvn.w	r2, #2
 800b9b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3b20      	subs	r3, #32
 800b9b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	0800b9cd 	.word	0x0800b9cd

0800b9cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9d6:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <prvTaskExitError+0x58>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9de:	d00b      	beq.n	800b9f8 <prvTaskExitError+0x2c>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	60fb      	str	r3, [r7, #12]
}
 800b9f2:	bf00      	nop
 800b9f4:	bf00      	nop
 800b9f6:	e7fd      	b.n	800b9f4 <prvTaskExitError+0x28>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	60bb      	str	r3, [r7, #8]
}
 800ba0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba0c:	bf00      	nop
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0fc      	beq.n	800ba0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	24000030 	.word	0x24000030
	...

0800ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba30:	4b07      	ldr	r3, [pc, #28]	@ (800ba50 <pxCurrentTCBConst2>)
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6808      	ldr	r0, [r1, #0]
 800ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	f380 8809 	msr	PSP, r0
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	4770      	bx	lr
 800ba4c:	f3af 8000 	nop.w

0800ba50 <pxCurrentTCBConst2>:
 800ba50:	2400dd80 	.word	0x2400dd80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop

0800ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba58:	4808      	ldr	r0, [pc, #32]	@ (800ba7c <prvPortStartFirstTask+0x24>)
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	6800      	ldr	r0, [r0, #0]
 800ba5e:	f380 8808 	msr	MSP, r0
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8814 	msr	CONTROL, r0
 800ba6a:	b662      	cpsie	i
 800ba6c:	b661      	cpsie	f
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	df00      	svc	0
 800ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed08 	.word	0xe000ed08

0800ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba86:	4b47      	ldr	r3, [pc, #284]	@ (800bba4 <xPortStartScheduler+0x124>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a47      	ldr	r2, [pc, #284]	@ (800bba8 <xPortStartScheduler+0x128>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d10b      	bne.n	800baa8 <xPortStartScheduler+0x28>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	613b      	str	r3, [r7, #16]
}
 800baa2:	bf00      	nop
 800baa4:	bf00      	nop
 800baa6:	e7fd      	b.n	800baa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baa8:	4b3e      	ldr	r3, [pc, #248]	@ (800bba4 <xPortStartScheduler+0x124>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a3f      	ldr	r2, [pc, #252]	@ (800bbac <xPortStartScheduler+0x12c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d10b      	bne.n	800baca <xPortStartScheduler+0x4a>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60fb      	str	r3, [r7, #12]
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop
 800bac8:	e7fd      	b.n	800bac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baca:	4b39      	ldr	r3, [pc, #228]	@ (800bbb0 <xPortStartScheduler+0x130>)
 800bacc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	22ff      	movs	r2, #255	@ 0xff
 800bada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800baec:	b2da      	uxtb	r2, r3
 800baee:	4b31      	ldr	r3, [pc, #196]	@ (800bbb4 <xPortStartScheduler+0x134>)
 800baf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baf2:	4b31      	ldr	r3, [pc, #196]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800baf4:	2207      	movs	r2, #7
 800baf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baf8:	e009      	b.n	800bb0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bafa:	4b2f      	ldr	r3, [pc, #188]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	4a2d      	ldr	r2, [pc, #180]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb04:	78fb      	ldrb	r3, [r7, #3]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb16:	2b80      	cmp	r3, #128	@ 0x80
 800bb18:	d0ef      	beq.n	800bafa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb1a:	4b27      	ldr	r3, [pc, #156]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f1c3 0307 	rsb	r3, r3, #7
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d00b      	beq.n	800bb3e <xPortStartScheduler+0xbe>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60bb      	str	r3, [r7, #8]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb3e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb48:	4b1b      	ldr	r3, [pc, #108]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb50:	4a19      	ldr	r2, [pc, #100]	@ (800bbb8 <xPortStartScheduler+0x138>)
 800bb52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb5c:	4b17      	ldr	r3, [pc, #92]	@ (800bbbc <xPortStartScheduler+0x13c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a16      	ldr	r2, [pc, #88]	@ (800bbbc <xPortStartScheduler+0x13c>)
 800bb62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb68:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <xPortStartScheduler+0x13c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a13      	ldr	r2, [pc, #76]	@ (800bbbc <xPortStartScheduler+0x13c>)
 800bb6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bb72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb74:	f000 f8da 	bl	800bd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb78:	4b11      	ldr	r3, [pc, #68]	@ (800bbc0 <xPortStartScheduler+0x140>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb7e:	f000 f8f9 	bl	800bd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb82:	4b10      	ldr	r3, [pc, #64]	@ (800bbc4 <xPortStartScheduler+0x144>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a0f      	ldr	r2, [pc, #60]	@ (800bbc4 <xPortStartScheduler+0x144>)
 800bb88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bb8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb8e:	f7ff ff63 	bl	800ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb92:	f001 f9ef 	bl	800cf74 <vTaskSwitchContext>
	prvTaskExitError();
 800bb96:	f7ff ff19 	bl	800b9cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3718      	adds	r7, #24
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	e000ed00 	.word	0xe000ed00
 800bba8:	410fc271 	.word	0x410fc271
 800bbac:	410fc270 	.word	0x410fc270
 800bbb0:	e000e400 	.word	0xe000e400
 800bbb4:	2400dd38 	.word	0x2400dd38
 800bbb8:	2400dd3c 	.word	0x2400dd3c
 800bbbc:	e000ed20 	.word	0xe000ed20
 800bbc0:	24000030 	.word	0x24000030
 800bbc4:	e000ef34 	.word	0xe000ef34

0800bbc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	607b      	str	r3, [r7, #4]
}
 800bbe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbe2:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <vPortEnterCritical+0x5c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	4a0e      	ldr	r2, [pc, #56]	@ (800bc24 <vPortEnterCritical+0x5c>)
 800bbea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbec:	4b0d      	ldr	r3, [pc, #52]	@ (800bc24 <vPortEnterCritical+0x5c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d110      	bne.n	800bc16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bc28 <vPortEnterCritical+0x60>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00b      	beq.n	800bc16 <vPortEnterCritical+0x4e>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	603b      	str	r3, [r7, #0]
}
 800bc10:	bf00      	nop
 800bc12:	bf00      	nop
 800bc14:	e7fd      	b.n	800bc12 <vPortEnterCritical+0x4a>
	}
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	24000030 	.word	0x24000030
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc32:	4b12      	ldr	r3, [pc, #72]	@ (800bc7c <vPortExitCritical+0x50>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10b      	bne.n	800bc52 <vPortExitCritical+0x26>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	607b      	str	r3, [r7, #4]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc52:	4b0a      	ldr	r3, [pc, #40]	@ (800bc7c <vPortExitCritical+0x50>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	4a08      	ldr	r2, [pc, #32]	@ (800bc7c <vPortExitCritical+0x50>)
 800bc5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc5c:	4b07      	ldr	r3, [pc, #28]	@ (800bc7c <vPortExitCritical+0x50>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d105      	bne.n	800bc70 <vPortExitCritical+0x44>
 800bc64:	2300      	movs	r3, #0
 800bc66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	24000030 	.word	0x24000030

0800bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc80:	f3ef 8009 	mrs	r0, PSP
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4b15      	ldr	r3, [pc, #84]	@ (800bce0 <pxCurrentTCBConst>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	f01e 0f10 	tst.w	lr, #16
 800bc90:	bf08      	it	eq
 800bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	6010      	str	r0, [r2, #0]
 800bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bca4:	f380 8811 	msr	BASEPRI, r0
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f001 f960 	bl	800cf74 <vTaskSwitchContext>
 800bcb4:	f04f 0000 	mov.w	r0, #0
 800bcb8:	f380 8811 	msr	BASEPRI, r0
 800bcbc:	bc09      	pop	{r0, r3}
 800bcbe:	6819      	ldr	r1, [r3, #0]
 800bcc0:	6808      	ldr	r0, [r1, #0]
 800bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc6:	f01e 0f10 	tst.w	lr, #16
 800bcca:	bf08      	it	eq
 800bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcd0:	f380 8809 	msr	PSP, r0
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	f3af 8000 	nop.w

0800bce0 <pxCurrentTCBConst>:
 800bce0:	2400dd80 	.word	0x2400dd80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop

0800bce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd02:	f001 f87d 	bl	800ce00 <xTaskIncrementTick>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d003      	beq.n	800bd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd0c:	4b06      	ldr	r3, [pc, #24]	@ (800bd28 <xPortSysTickHandler+0x40>)
 800bd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f383 8811 	msr	BASEPRI, r3
}
 800bd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd30:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	@ (800bd64 <vPortSetupTimerInterrupt+0x38>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd68 <vPortSetupTimerInterrupt+0x3c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	@ (800bd6c <vPortSetupTimerInterrupt+0x40>)
 800bd42:	fba2 2303 	umull	r2, r3, r2, r3
 800bd46:	099b      	lsrs	r3, r3, #6
 800bd48:	4a09      	ldr	r2, [pc, #36]	@ (800bd70 <vPortSetupTimerInterrupt+0x44>)
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd4e:	4b04      	ldr	r3, [pc, #16]	@ (800bd60 <vPortSetupTimerInterrupt+0x34>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	e000e010 	.word	0xe000e010
 800bd64:	e000e018 	.word	0xe000e018
 800bd68:	24000000 	.word	0x24000000
 800bd6c:	10624dd3 	.word	0x10624dd3
 800bd70:	e000e014 	.word	0xe000e014

0800bd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd84 <vPortEnableVFP+0x10>
 800bd78:	6801      	ldr	r1, [r0, #0]
 800bd7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bd7e:	6001      	str	r1, [r0, #0]
 800bd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd82:	bf00      	nop
 800bd84:	e000ed88 	.word	0xe000ed88

0800bd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd8e:	f3ef 8305 	mrs	r3, IPSR
 800bd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b0f      	cmp	r3, #15
 800bd98:	d915      	bls.n	800bdc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd9a:	4a18      	ldr	r2, [pc, #96]	@ (800bdfc <vPortValidateInterruptPriority+0x74>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bda4:	4b16      	ldr	r3, [pc, #88]	@ (800be00 <vPortValidateInterruptPriority+0x78>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	7afa      	ldrb	r2, [r7, #11]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d20b      	bcs.n	800bdc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
 800bdc2:	bf00      	nop
 800bdc4:	e7fd      	b.n	800bdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800be04 <vPortValidateInterruptPriority+0x7c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bdce:	4b0e      	ldr	r3, [pc, #56]	@ (800be08 <vPortValidateInterruptPriority+0x80>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d90b      	bls.n	800bdee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	603b      	str	r3, [r7, #0]
}
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	e7fd      	b.n	800bdea <vPortValidateInterruptPriority+0x62>
	}
 800bdee:	bf00      	nop
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	e000e3f0 	.word	0xe000e3f0
 800be00:	2400dd38 	.word	0x2400dd38
 800be04:	e000ed0c 	.word	0xe000ed0c
 800be08:	2400dd3c 	.word	0x2400dd3c

0800be0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10b      	bne.n	800be38 <xQueueGenericReset+0x2c>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	60bb      	str	r3, [r7, #8]
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	e7fd      	b.n	800be34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be38:	f7ff fec6 	bl	800bbc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be44:	68f9      	ldr	r1, [r7, #12]
 800be46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be48:	fb01 f303 	mul.w	r3, r1, r3
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be68:	3b01      	subs	r3, #1
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be6e:	fb01 f303 	mul.w	r3, r1, r3
 800be72:	441a      	add	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	22ff      	movs	r2, #255	@ 0xff
 800be7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	22ff      	movs	r2, #255	@ 0xff
 800be84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d114      	bne.n	800beb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d01a      	beq.n	800becc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f91a 	bl	800d0d4 <xTaskRemoveFromEventList>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d012      	beq.n	800becc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bea6:	4b0d      	ldr	r3, [pc, #52]	@ (800bedc <xQueueGenericReset+0xd0>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	e009      	b.n	800becc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3310      	adds	r3, #16
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7ff fc9d 	bl	800b7fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3324      	adds	r3, #36	@ 0x24
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff fc98 	bl	800b7fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800becc:	f7ff feae 	bl	800bc2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bed0:	2301      	movs	r3, #1
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	e000ed04 	.word	0xe000ed04

0800bee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08e      	sub	sp, #56	@ 0x38
 800bee4:	af02      	add	r7, sp, #8
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10b      	bne.n	800bf0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	e7fd      	b.n	800bf08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	e7fd      	b.n	800bf26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <xQueueGenericCreateStatic+0x56>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <xQueueGenericCreateStatic+0x5a>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <xQueueGenericCreateStatic+0x5c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10b      	bne.n	800bf58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	623b      	str	r3, [r7, #32]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <xQueueGenericCreateStatic+0x84>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <xQueueGenericCreateStatic+0x88>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e000      	b.n	800bf6a <xQueueGenericCreateStatic+0x8a>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10b      	bne.n	800bf86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	61fb      	str	r3, [r7, #28]
}
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	e7fd      	b.n	800bf82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf86:	2350      	movs	r3, #80	@ 0x50
 800bf88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b50      	cmp	r3, #80	@ 0x50
 800bf8e:	d00b      	beq.n	800bfa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	61bb      	str	r3, [r7, #24]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	68b9      	ldr	r1, [r7, #8]
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 f805 	bl	800bfda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3730      	adds	r7, #48	@ 0x30
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	607a      	str	r2, [r7, #4]
 800bfe6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d103      	bne.n	800bff6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	e002      	b.n	800bffc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c008:	2101      	movs	r1, #1
 800c00a:	69b8      	ldr	r0, [r7, #24]
 800c00c:	f7ff fefe 	bl	800be0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	78fa      	ldrb	r2, [r7, #3]
 800c014:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08e      	sub	sp, #56	@ 0x38
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c02e:	2300      	movs	r3, #0
 800c030:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <xQueueGenericSend+0x34>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	e7fd      	b.n	800c050 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d103      	bne.n	800c062 <xQueueGenericSend+0x42>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <xQueueGenericSend+0x46>
 800c062:	2301      	movs	r3, #1
 800c064:	e000      	b.n	800c068 <xQueueGenericSend+0x48>
 800c066:	2300      	movs	r3, #0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <xQueueGenericSend+0x64>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c07e:	bf00      	nop
 800c080:	bf00      	nop
 800c082:	e7fd      	b.n	800c080 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b02      	cmp	r3, #2
 800c088:	d103      	bne.n	800c092 <xQueueGenericSend+0x72>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d101      	bne.n	800c096 <xQueueGenericSend+0x76>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <xQueueGenericSend+0x78>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <xQueueGenericSend+0x94>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	623b      	str	r3, [r7, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	e7fd      	b.n	800c0b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0b4:	f001 f9f6 	bl	800d4a4 <xTaskGetSchedulerState>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <xQueueGenericSend+0xa4>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <xQueueGenericSend+0xa8>
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e000      	b.n	800c0ca <xQueueGenericSend+0xaa>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10b      	bne.n	800c0e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	61fb      	str	r3, [r7, #28]
}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	e7fd      	b.n	800c0e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0e6:	f7ff fd6f 	bl	800bbc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d302      	bcc.n	800c0fc <xQueueGenericSend+0xdc>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d129      	bne.n	800c150 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	68b9      	ldr	r1, [r7, #8]
 800c100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c102:	f000 fa0f 	bl	800c524 <prvCopyDataToQueue>
 800c106:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d010      	beq.n	800c132 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c112:	3324      	adds	r3, #36	@ 0x24
 800c114:	4618      	mov	r0, r3
 800c116:	f000 ffdd 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d013      	beq.n	800c148 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c120:	4b3f      	ldr	r3, [pc, #252]	@ (800c220 <xQueueGenericSend+0x200>)
 800c122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	e00a      	b.n	800c148 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d007      	beq.n	800c148 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c138:	4b39      	ldr	r3, [pc, #228]	@ (800c220 <xQueueGenericSend+0x200>)
 800c13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c148:	f7ff fd70 	bl	800bc2c <vPortExitCritical>
				return pdPASS;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e063      	b.n	800c218 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c156:	f7ff fd69 	bl	800bc2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e05c      	b.n	800c218 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c160:	2b00      	cmp	r3, #0
 800c162:	d106      	bne.n	800c172 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	4618      	mov	r0, r3
 800c16a:	f001 f83f 	bl	800d1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c16e:	2301      	movs	r3, #1
 800c170:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c172:	f7ff fd5b 	bl	800bc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c176:	f000 fd87 	bl	800cc88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c17a:	f7ff fd25 	bl	800bbc8 <vPortEnterCritical>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c184:	b25b      	sxtb	r3, r3
 800c186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c18a:	d103      	bne.n	800c194 <xQueueGenericSend+0x174>
 800c18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c19a:	b25b      	sxtb	r3, r3
 800c19c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1a0:	d103      	bne.n	800c1aa <xQueueGenericSend+0x18a>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1aa:	f7ff fd3f 	bl	800bc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1ae:	1d3a      	adds	r2, r7, #4
 800c1b0:	f107 0314 	add.w	r3, r7, #20
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f001 f82e 	bl	800d218 <xTaskCheckForTimeOut>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d124      	bne.n	800c20c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c1c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1c4:	f000 faa6 	bl	800c714 <prvIsQueueFull>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d018      	beq.n	800c200 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	3310      	adds	r3, #16
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 ff2a 	bl	800d030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1de:	f000 fa31 	bl	800c644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1e2:	f000 fd5f 	bl	800cca4 <xTaskResumeAll>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f47f af7c 	bne.w	800c0e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c220 <xQueueGenericSend+0x200>)
 800c1f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	e772      	b.n	800c0e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c202:	f000 fa1f 	bl	800c644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c206:	f000 fd4d 	bl	800cca4 <xTaskResumeAll>
 800c20a:	e76c      	b.n	800c0e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c20c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c20e:	f000 fa19 	bl	800c644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c212:	f000 fd47 	bl	800cca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3738      	adds	r7, #56	@ 0x38
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b090      	sub	sp, #64	@ 0x40
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10b      	bne.n	800c254 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	e7fd      	b.n	800c250 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <xQueueGenericSendFromISR+0x3e>
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <xQueueGenericSendFromISR+0x42>
 800c262:	2301      	movs	r3, #1
 800c264:	e000      	b.n	800c268 <xQueueGenericSendFromISR+0x44>
 800c266:	2300      	movs	r3, #0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10b      	bne.n	800c284 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c27e:	bf00      	nop
 800c280:	bf00      	nop
 800c282:	e7fd      	b.n	800c280 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d103      	bne.n	800c292 <xQueueGenericSendFromISR+0x6e>
 800c28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d101      	bne.n	800c296 <xQueueGenericSendFromISR+0x72>
 800c292:	2301      	movs	r3, #1
 800c294:	e000      	b.n	800c298 <xQueueGenericSendFromISR+0x74>
 800c296:	2300      	movs	r3, #0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10b      	bne.n	800c2b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	623b      	str	r3, [r7, #32]
}
 800c2ae:	bf00      	nop
 800c2b0:	bf00      	nop
 800c2b2:	e7fd      	b.n	800c2b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2b4:	f7ff fd68 	bl	800bd88 <vPortValidateInterruptPriority>
	__asm volatile
 800c2b8:	f3ef 8211 	mrs	r2, BASEPRI
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	61fa      	str	r2, [r7, #28]
 800c2ce:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c2d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <xQueueGenericSendFromISR+0xc2>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d12f      	bne.n	800c346 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2fc:	f000 f912 	bl	800c524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c300:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c308:	d112      	bne.n	800c330 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d016      	beq.n	800c340 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c314:	3324      	adds	r3, #36	@ 0x24
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fedc 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00e      	beq.n	800c340 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e007      	b.n	800c340 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c334:	3301      	adds	r3, #1
 800c336:	b2db      	uxtb	r3, r3
 800c338:	b25a      	sxtb	r2, r3
 800c33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c340:	2301      	movs	r3, #1
 800c342:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c344:	e001      	b.n	800c34a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c346:	2300      	movs	r3, #0
 800c348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f383 8811 	msr	BASEPRI, r3
}
 800c354:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3740      	adds	r7, #64	@ 0x40
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08c      	sub	sp, #48	@ 0x30
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c36c:	2300      	movs	r3, #0
 800c36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <xQueueReceive+0x32>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	623b      	str	r3, [r7, #32]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <xQueueReceive+0x40>
 800c398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <xQueueReceive+0x44>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <xQueueReceive+0x46>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <xQueueReceive+0x62>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	61fb      	str	r3, [r7, #28]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3c2:	f001 f86f 	bl	800d4a4 <xTaskGetSchedulerState>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <xQueueReceive+0x72>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <xQueueReceive+0x76>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <xQueueReceive+0x78>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10b      	bne.n	800c3f4 <xQueueReceive+0x94>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	61bb      	str	r3, [r7, #24]
}
 800c3ee:	bf00      	nop
 800c3f0:	bf00      	nop
 800c3f2:	e7fd      	b.n	800c3f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f4:	f7ff fbe8 	bl	800bbc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01f      	beq.n	800c444 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c404:	68b9      	ldr	r1, [r7, #8]
 800c406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c408:	f000 f8f6 	bl	800c5f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	1e5a      	subs	r2, r3, #1
 800c410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c412:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00f      	beq.n	800c43c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41e:	3310      	adds	r3, #16
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fe57 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c42c:	4b3c      	ldr	r3, [pc, #240]	@ (800c520 <xQueueReceive+0x1c0>)
 800c42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c43c:	f7ff fbf6 	bl	800bc2c <vPortExitCritical>
				return pdPASS;
 800c440:	2301      	movs	r3, #1
 800c442:	e069      	b.n	800c518 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d103      	bne.n	800c452 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c44a:	f7ff fbef 	bl	800bc2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c44e:	2300      	movs	r3, #0
 800c450:	e062      	b.n	800c518 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d106      	bne.n	800c466 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c458:	f107 0310 	add.w	r3, r7, #16
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fec5 	bl	800d1ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c462:	2301      	movs	r3, #1
 800c464:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c466:	f7ff fbe1 	bl	800bc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c46a:	f000 fc0d 	bl	800cc88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46e:	f7ff fbab 	bl	800bbc8 <vPortEnterCritical>
 800c472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c478:	b25b      	sxtb	r3, r3
 800c47a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c47e:	d103      	bne.n	800c488 <xQueueReceive+0x128>
 800c480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c482:	2200      	movs	r2, #0
 800c484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c48e:	b25b      	sxtb	r3, r3
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c494:	d103      	bne.n	800c49e <xQueueReceive+0x13e>
 800c496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c49e:	f7ff fbc5 	bl	800bc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4a2:	1d3a      	adds	r2, r7, #4
 800c4a4:	f107 0310 	add.w	r3, r7, #16
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 feb4 	bl	800d218 <xTaskCheckForTimeOut>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d123      	bne.n	800c4fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b8:	f000 f916 	bl	800c6e8 <prvIsQueueEmpty>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d017      	beq.n	800c4f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c4:	3324      	adds	r3, #36	@ 0x24
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fdb0 	bl	800d030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4d2:	f000 f8b7 	bl	800c644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d6:	f000 fbe5 	bl	800cca4 <xTaskResumeAll>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d189      	bne.n	800c3f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <xQueueReceive+0x1c0>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	e780      	b.n	800c3f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f4:	f000 f8a6 	bl	800c644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f8:	f000 fbd4 	bl	800cca4 <xTaskResumeAll>
 800c4fc:	e77a      	b.n	800c3f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c500:	f000 f8a0 	bl	800c644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c504:	f000 fbce 	bl	800cca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c50a:	f000 f8ed 	bl	800c6e8 <prvIsQueueEmpty>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	f43f af6f 	beq.w	800c3f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c516:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3730      	adds	r7, #48	@ 0x30
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	e000ed04 	.word	0xe000ed04

0800c524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10d      	bne.n	800c55e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d14d      	bne.n	800c5e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 ffc6 	bl	800d4e0 <xTaskPriorityDisinherit>
 800c554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	609a      	str	r2, [r3, #8]
 800c55c:	e043      	b.n	800c5e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d119      	bne.n	800c598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6858      	ldr	r0, [r3, #4]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c56c:	461a      	mov	r2, r3
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	f00f facb 	bl	801bb0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57c:	441a      	add	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d32b      	bcc.n	800c5e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	605a      	str	r2, [r3, #4]
 800c596:	e026      	b.n	800c5e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68d8      	ldr	r0, [r3, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	f00f fab1 	bl	801bb0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68da      	ldr	r2, [r3, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	425b      	negs	r3, r3
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d207      	bcs.n	800c5d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5cc:	425b      	negs	r3, r3
 800c5ce:	441a      	add	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d105      	bne.n	800c5e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c606:	2b00      	cmp	r3, #0
 800c608:	d018      	beq.n	800c63c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c612:	441a      	add	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68da      	ldr	r2, [r3, #12]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	429a      	cmp	r2, r3
 800c622:	d303      	bcc.n	800c62c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68d9      	ldr	r1, [r3, #12]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c634:	461a      	mov	r2, r3
 800c636:	6838      	ldr	r0, [r7, #0]
 800c638:	f00f fa67 	bl	801bb0a <memcpy>
	}
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c64c:	f7ff fabc 	bl	800bbc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c658:	e011      	b.n	800c67e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d012      	beq.n	800c688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3324      	adds	r3, #36	@ 0x24
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fd34 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c672:	f000 fe35 	bl	800d2e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	3b01      	subs	r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	dce9      	bgt.n	800c65a <prvUnlockQueue+0x16>
 800c686:	e000      	b.n	800c68a <prvUnlockQueue+0x46>
					break;
 800c688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	22ff      	movs	r2, #255	@ 0xff
 800c68e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c692:	f7ff facb 	bl	800bc2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c696:	f7ff fa97 	bl	800bbc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6a2:	e011      	b.n	800c6c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d012      	beq.n	800c6d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3310      	adds	r3, #16
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fd0f 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6bc:	f000 fe10 	bl	800d2e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dce9      	bgt.n	800c6a4 <prvUnlockQueue+0x60>
 800c6d0:	e000      	b.n	800c6d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	22ff      	movs	r2, #255	@ 0xff
 800c6d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c6dc:	f7ff faa6 	bl	800bc2c <vPortExitCritical>
}
 800c6e0:	bf00      	nop
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f0:	f7ff fa6a 	bl	800bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e001      	b.n	800c706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c702:	2300      	movs	r3, #0
 800c704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c706:	f7ff fa91 	bl	800bc2c <vPortExitCritical>

	return xReturn;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c71c:	f7ff fa54 	bl	800bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c728:	429a      	cmp	r2, r3
 800c72a:	d102      	bne.n	800c732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	e001      	b.n	800c736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c736:	f7ff fa79 	bl	800bc2c <vPortExitCritical>

	return xReturn;
 800c73a:	68fb      	ldr	r3, [r7, #12]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c74e:	2300      	movs	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	e014      	b.n	800c77e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c754:	4a0f      	ldr	r2, [pc, #60]	@ (800c794 <vQueueAddToRegistry+0x50>)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10b      	bne.n	800c778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c760:	490c      	ldr	r1, [pc, #48]	@ (800c794 <vQueueAddToRegistry+0x50>)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c76a:	4a0a      	ldr	r2, [pc, #40]	@ (800c794 <vQueueAddToRegistry+0x50>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	4413      	add	r3, r2
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c776:	e006      	b.n	800c786 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3301      	adds	r3, #1
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b07      	cmp	r3, #7
 800c782:	d9e7      	bls.n	800c754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	2400dd40 	.word	0x2400dd40

0800c798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7a8:	f7ff fa0e 	bl	800bbc8 <vPortEnterCritical>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7b8:	d103      	bne.n	800c7c2 <vQueueWaitForMessageRestricted+0x2a>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7c8:	b25b      	sxtb	r3, r3
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7ce:	d103      	bne.n	800c7d8 <vQueueWaitForMessageRestricted+0x40>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7d8:	f7ff fa28 	bl	800bc2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	3324      	adds	r3, #36	@ 0x24
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fc45 	bl	800d07c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c7f2:	6978      	ldr	r0, [r7, #20]
 800c7f4:	f7ff ff26 	bl	800c644 <prvUnlockQueue>
	}
 800c7f8:	bf00      	nop
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08e      	sub	sp, #56	@ 0x38
 800c804:	af04      	add	r7, sp, #16
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10b      	bne.n	800c82c <xTaskCreateStatic+0x2c>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	623b      	str	r3, [r7, #32]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10b      	bne.n	800c84a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	61fb      	str	r3, [r7, #28]
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	e7fd      	b.n	800c846 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c84a:	235c      	movs	r3, #92	@ 0x5c
 800c84c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b5c      	cmp	r3, #92	@ 0x5c
 800c852:	d00b      	beq.n	800c86c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	61bb      	str	r3, [r7, #24]
}
 800c866:	bf00      	nop
 800c868:	bf00      	nop
 800c86a:	e7fd      	b.n	800c868 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c86c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01e      	beq.n	800c8b2 <xTaskCreateStatic+0xb2>
 800c874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c876:	2b00      	cmp	r3, #0
 800c878:	d01b      	beq.n	800c8b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c882:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	2202      	movs	r2, #2
 800c888:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c88c:	2300      	movs	r3, #0
 800c88e:	9303      	str	r3, [sp, #12]
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	f107 0314 	add.w	r3, r7, #20
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f850 	bl	800c94a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8ac:	f000 f8de 	bl	800ca6c <prvAddNewTaskToReadyList>
 800c8b0:	e001      	b.n	800c8b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8b6:	697b      	ldr	r3, [r7, #20]
	}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3728      	adds	r7, #40	@ 0x28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08c      	sub	sp, #48	@ 0x30
 800c8c4:	af04      	add	r7, sp, #16
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8d0:	88fb      	ldrh	r3, [r7, #6]
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe fda3 	bl	800b420 <pvPortMalloc>
 800c8da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00e      	beq.n	800c900 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8e2:	205c      	movs	r0, #92	@ 0x5c
 800c8e4:	f7fe fd9c 	bl	800b420 <pvPortMalloc>
 800c8e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	697a      	ldr	r2, [r7, #20]
 800c8f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8f6:	e005      	b.n	800c904 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8f8:	6978      	ldr	r0, [r7, #20]
 800c8fa:	f7fe fe5f 	bl	800b5bc <vPortFree>
 800c8fe:	e001      	b.n	800c904 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d017      	beq.n	800c93a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c912:	88fa      	ldrh	r2, [r7, #6]
 800c914:	2300      	movs	r3, #0
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	9302      	str	r3, [sp, #8]
 800c91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 f80e 	bl	800c94a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c92e:	69f8      	ldr	r0, [r7, #28]
 800c930:	f000 f89c 	bl	800ca6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c934:	2301      	movs	r3, #1
 800c936:	61bb      	str	r3, [r7, #24]
 800c938:	e002      	b.n	800c940 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c93a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c93e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c940:	69bb      	ldr	r3, [r7, #24]
	}
 800c942:	4618      	mov	r0, r3
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b088      	sub	sp, #32
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
 800c956:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	461a      	mov	r2, r3
 800c962:	21a5      	movs	r1, #165	@ 0xa5
 800c964:	f00f f808 	bl	801b978 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c972:	440b      	add	r3, r1
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	f023 0307 	bic.w	r3, r3, #7
 800c980:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00b      	beq.n	800c9a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	617b      	str	r3, [r7, #20]
}
 800c99e:	bf00      	nop
 800c9a0:	bf00      	nop
 800c9a2:	e7fd      	b.n	800c9a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d01f      	beq.n	800c9ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61fb      	str	r3, [r7, #28]
 800c9ae:	e012      	b.n	800c9d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	7819      	ldrb	r1, [r3, #0]
 800c9b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	4413      	add	r3, r2
 800c9be:	3334      	adds	r3, #52	@ 0x34
 800c9c0:	460a      	mov	r2, r1
 800c9c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d006      	beq.n	800c9de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	2b0f      	cmp	r3, #15
 800c9da:	d9e9      	bls.n	800c9b0 <prvInitialiseNewTask+0x66>
 800c9dc:	e000      	b.n	800c9e0 <prvInitialiseNewTask+0x96>
			{
				break;
 800c9de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c9e8:	e003      	b.n	800c9f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	2b37      	cmp	r3, #55	@ 0x37
 800c9f6:	d901      	bls.n	800c9fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9f8:	2337      	movs	r3, #55	@ 0x37
 800c9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca06:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	3304      	adds	r3, #4
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe ff12 	bl	800b83c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	3318      	adds	r3, #24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fe ff0d 	bl	800b83c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	68f9      	ldr	r1, [r7, #12]
 800ca4a:	69b8      	ldr	r0, [r7, #24]
 800ca4c:	f7fe ff8a 	bl	800b964 <pxPortInitialiseStack>
 800ca50:	4602      	mov	r2, r0
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca62:	bf00      	nop
 800ca64:	3720      	adds	r7, #32
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca74:	f7ff f8a8 	bl	800bbc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca78:	4b2d      	ldr	r3, [pc, #180]	@ (800cb30 <prvAddNewTaskToReadyList+0xc4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	4a2c      	ldr	r2, [pc, #176]	@ (800cb30 <prvAddNewTaskToReadyList+0xc4>)
 800ca80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca82:	4b2c      	ldr	r3, [pc, #176]	@ (800cb34 <prvAddNewTaskToReadyList+0xc8>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d109      	bne.n	800ca9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca8a:	4a2a      	ldr	r2, [pc, #168]	@ (800cb34 <prvAddNewTaskToReadyList+0xc8>)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca90:	4b27      	ldr	r3, [pc, #156]	@ (800cb30 <prvAddNewTaskToReadyList+0xc4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d110      	bne.n	800caba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca98:	f000 fc46 	bl	800d328 <prvInitialiseTaskLists>
 800ca9c:	e00d      	b.n	800caba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca9e:	4b26      	ldr	r3, [pc, #152]	@ (800cb38 <prvAddNewTaskToReadyList+0xcc>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d109      	bne.n	800caba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caa6:	4b23      	ldr	r3, [pc, #140]	@ (800cb34 <prvAddNewTaskToReadyList+0xc8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d802      	bhi.n	800caba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cab4:	4a1f      	ldr	r2, [pc, #124]	@ (800cb34 <prvAddNewTaskToReadyList+0xc8>)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caba:	4b20      	ldr	r3, [pc, #128]	@ (800cb3c <prvAddNewTaskToReadyList+0xd0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3301      	adds	r3, #1
 800cac0:	4a1e      	ldr	r2, [pc, #120]	@ (800cb3c <prvAddNewTaskToReadyList+0xd0>)
 800cac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cac4:	4b1d      	ldr	r3, [pc, #116]	@ (800cb3c <prvAddNewTaskToReadyList+0xd0>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad0:	4b1b      	ldr	r3, [pc, #108]	@ (800cb40 <prvAddNewTaskToReadyList+0xd4>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d903      	bls.n	800cae0 <prvAddNewTaskToReadyList+0x74>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cadc:	4a18      	ldr	r2, [pc, #96]	@ (800cb40 <prvAddNewTaskToReadyList+0xd4>)
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4a15      	ldr	r2, [pc, #84]	@ (800cb44 <prvAddNewTaskToReadyList+0xd8>)
 800caee:	441a      	add	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4619      	mov	r1, r3
 800caf6:	4610      	mov	r0, r2
 800caf8:	f7fe fead 	bl	800b856 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cafc:	f7ff f896 	bl	800bc2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb00:	4b0d      	ldr	r3, [pc, #52]	@ (800cb38 <prvAddNewTaskToReadyList+0xcc>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00e      	beq.n	800cb26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb08:	4b0a      	ldr	r3, [pc, #40]	@ (800cb34 <prvAddNewTaskToReadyList+0xc8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d207      	bcs.n	800cb26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb16:	4b0c      	ldr	r3, [pc, #48]	@ (800cb48 <prvAddNewTaskToReadyList+0xdc>)
 800cb18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	2400e254 	.word	0x2400e254
 800cb34:	2400dd80 	.word	0x2400dd80
 800cb38:	2400e260 	.word	0x2400e260
 800cb3c:	2400e270 	.word	0x2400e270
 800cb40:	2400e25c 	.word	0x2400e25c
 800cb44:	2400dd84 	.word	0x2400dd84
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d018      	beq.n	800cb90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb5e:	4b14      	ldr	r3, [pc, #80]	@ (800cbb0 <vTaskDelay+0x64>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00b      	beq.n	800cb7e <vTaskDelay+0x32>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60bb      	str	r3, [r7, #8]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb7e:	f000 f883 	bl	800cc88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb82:	2100      	movs	r1, #0
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fd1b 	bl	800d5c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb8a:	f000 f88b 	bl	800cca4 <xTaskResumeAll>
 800cb8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d107      	bne.n	800cba6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb96:	4b07      	ldr	r3, [pc, #28]	@ (800cbb4 <vTaskDelay+0x68>)
 800cb98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cba6:	bf00      	nop
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	2400e27c 	.word	0x2400e27c
 800cbb4:	e000ed04 	.word	0xe000ed04

0800cbb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08a      	sub	sp, #40	@ 0x28
 800cbbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbc6:	463a      	mov	r2, r7
 800cbc8:	1d39      	adds	r1, r7, #4
 800cbca:	f107 0308 	add.w	r3, r7, #8
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fbf2 	bl	800b3b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	9202      	str	r2, [sp, #8]
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	460a      	mov	r2, r1
 800cbe6:	4922      	ldr	r1, [pc, #136]	@ (800cc70 <vTaskStartScheduler+0xb8>)
 800cbe8:	4822      	ldr	r0, [pc, #136]	@ (800cc74 <vTaskStartScheduler+0xbc>)
 800cbea:	f7ff fe09 	bl	800c800 <xTaskCreateStatic>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4a21      	ldr	r2, [pc, #132]	@ (800cc78 <vTaskStartScheduler+0xc0>)
 800cbf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cbf4:	4b20      	ldr	r3, [pc, #128]	@ (800cc78 <vTaskStartScheduler+0xc0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	e001      	b.n	800cc06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d102      	bne.n	800cc12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc0c:	f000 fd2c 	bl	800d668 <xTimerCreateTimerTask>
 800cc10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d116      	bne.n	800cc46 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	613b      	str	r3, [r7, #16]
}
 800cc2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc2c:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <vTaskStartScheduler+0xc4>)
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc34:	4b12      	ldr	r3, [pc, #72]	@ (800cc80 <vTaskStartScheduler+0xc8>)
 800cc36:	2201      	movs	r2, #1
 800cc38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc3a:	4b12      	ldr	r3, [pc, #72]	@ (800cc84 <vTaskStartScheduler+0xcc>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc40:	f7fe ff1e 	bl	800ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc44:	e00f      	b.n	800cc66 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc4c:	d10b      	bne.n	800cc66 <vTaskStartScheduler+0xae>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	60fb      	str	r3, [r7, #12]
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	e7fd      	b.n	800cc62 <vTaskStartScheduler+0xaa>
}
 800cc66:	bf00      	nop
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	0801c800 	.word	0x0801c800
 800cc74:	0800d2f9 	.word	0x0800d2f9
 800cc78:	2400e278 	.word	0x2400e278
 800cc7c:	2400e274 	.word	0x2400e274
 800cc80:	2400e260 	.word	0x2400e260
 800cc84:	2400e258 	.word	0x2400e258

0800cc88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc8c:	4b04      	ldr	r3, [pc, #16]	@ (800cca0 <vTaskSuspendAll+0x18>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3301      	adds	r3, #1
 800cc92:	4a03      	ldr	r2, [pc, #12]	@ (800cca0 <vTaskSuspendAll+0x18>)
 800cc94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc96:	bf00      	nop
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	2400e27c 	.word	0x2400e27c

0800cca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccb2:	4b42      	ldr	r3, [pc, #264]	@ (800cdbc <xTaskResumeAll+0x118>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <xTaskResumeAll+0x2e>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	603b      	str	r3, [r7, #0]
}
 800cccc:	bf00      	nop
 800ccce:	bf00      	nop
 800ccd0:	e7fd      	b.n	800ccce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccd2:	f7fe ff79 	bl	800bbc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccd6:	4b39      	ldr	r3, [pc, #228]	@ (800cdbc <xTaskResumeAll+0x118>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	4a37      	ldr	r2, [pc, #220]	@ (800cdbc <xTaskResumeAll+0x118>)
 800ccde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce0:	4b36      	ldr	r3, [pc, #216]	@ (800cdbc <xTaskResumeAll+0x118>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d162      	bne.n	800cdae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cce8:	4b35      	ldr	r3, [pc, #212]	@ (800cdc0 <xTaskResumeAll+0x11c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d05e      	beq.n	800cdae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccf0:	e02f      	b.n	800cd52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccf2:	4b34      	ldr	r3, [pc, #208]	@ (800cdc4 <xTaskResumeAll+0x120>)
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fe06 	bl	800b910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3304      	adds	r3, #4
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe fe01 	bl	800b910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd12:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc8 <xTaskResumeAll+0x124>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d903      	bls.n	800cd22 <xTaskResumeAll+0x7e>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1e:	4a2a      	ldr	r2, [pc, #168]	@ (800cdc8 <xTaskResumeAll+0x124>)
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd26:	4613      	mov	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4a27      	ldr	r2, [pc, #156]	@ (800cdcc <xTaskResumeAll+0x128>)
 800cd30:	441a      	add	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4619      	mov	r1, r3
 800cd38:	4610      	mov	r0, r2
 800cd3a:	f7fe fd8c 	bl	800b856 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd42:	4b23      	ldr	r3, [pc, #140]	@ (800cdd0 <xTaskResumeAll+0x12c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d302      	bcc.n	800cd52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cd4c:	4b21      	ldr	r3, [pc, #132]	@ (800cdd4 <xTaskResumeAll+0x130>)
 800cd4e:	2201      	movs	r2, #1
 800cd50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd52:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc4 <xTaskResumeAll+0x120>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1cb      	bne.n	800ccf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd60:	f000 fb80 	bl	800d464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd64:	4b1c      	ldr	r3, [pc, #112]	@ (800cdd8 <xTaskResumeAll+0x134>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d010      	beq.n	800cd92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd70:	f000 f846 	bl	800ce00 <xTaskIncrementTick>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cd7a:	4b16      	ldr	r3, [pc, #88]	@ (800cdd4 <xTaskResumeAll+0x130>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1f1      	bne.n	800cd70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cd8c:	4b12      	ldr	r3, [pc, #72]	@ (800cdd8 <xTaskResumeAll+0x134>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd92:	4b10      	ldr	r3, [pc, #64]	@ (800cdd4 <xTaskResumeAll+0x130>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d009      	beq.n	800cdae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cddc <xTaskResumeAll+0x138>)
 800cda0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdae:	f7fe ff3d 	bl	800bc2c <vPortExitCritical>

	return xAlreadyYielded;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	2400e27c 	.word	0x2400e27c
 800cdc0:	2400e254 	.word	0x2400e254
 800cdc4:	2400e214 	.word	0x2400e214
 800cdc8:	2400e25c 	.word	0x2400e25c
 800cdcc:	2400dd84 	.word	0x2400dd84
 800cdd0:	2400dd80 	.word	0x2400dd80
 800cdd4:	2400e268 	.word	0x2400e268
 800cdd8:	2400e264 	.word	0x2400e264
 800cddc:	e000ed04 	.word	0xe000ed04

0800cde0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cde6:	4b05      	ldr	r3, [pc, #20]	@ (800cdfc <xTaskGetTickCount+0x1c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cdec:	687b      	ldr	r3, [r7, #4]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	2400e258 	.word	0x2400e258

0800ce00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce0a:	4b4f      	ldr	r3, [pc, #316]	@ (800cf48 <xTaskIncrementTick+0x148>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 8090 	bne.w	800cf34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce14:	4b4d      	ldr	r3, [pc, #308]	@ (800cf4c <xTaskIncrementTick+0x14c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce1c:	4a4b      	ldr	r2, [pc, #300]	@ (800cf4c <xTaskIncrementTick+0x14c>)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d121      	bne.n	800ce6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce28:	4b49      	ldr	r3, [pc, #292]	@ (800cf50 <xTaskIncrementTick+0x150>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00b      	beq.n	800ce4a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	603b      	str	r3, [r7, #0]
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	e7fd      	b.n	800ce46 <xTaskIncrementTick+0x46>
 800ce4a:	4b41      	ldr	r3, [pc, #260]	@ (800cf50 <xTaskIncrementTick+0x150>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	4b40      	ldr	r3, [pc, #256]	@ (800cf54 <xTaskIncrementTick+0x154>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a3e      	ldr	r2, [pc, #248]	@ (800cf50 <xTaskIncrementTick+0x150>)
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	4a3e      	ldr	r2, [pc, #248]	@ (800cf54 <xTaskIncrementTick+0x154>)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	4b3e      	ldr	r3, [pc, #248]	@ (800cf58 <xTaskIncrementTick+0x158>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	4a3c      	ldr	r2, [pc, #240]	@ (800cf58 <xTaskIncrementTick+0x158>)
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	f000 fafc 	bl	800d464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce6c:	4b3b      	ldr	r3, [pc, #236]	@ (800cf5c <xTaskIncrementTick+0x15c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d349      	bcc.n	800cf0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce76:	4b36      	ldr	r3, [pc, #216]	@ (800cf50 <xTaskIncrementTick+0x150>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d104      	bne.n	800ce8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce80:	4b36      	ldr	r3, [pc, #216]	@ (800cf5c <xTaskIncrementTick+0x15c>)
 800ce82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce86:	601a      	str	r2, [r3, #0]
					break;
 800ce88:	e03f      	b.n	800cf0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce8a:	4b31      	ldr	r3, [pc, #196]	@ (800cf50 <xTaskIncrementTick+0x150>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d203      	bcs.n	800ceaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cea2:	4a2e      	ldr	r2, [pc, #184]	@ (800cf5c <xTaskIncrementTick+0x15c>)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cea8:	e02f      	b.n	800cf0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	3304      	adds	r3, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fd2e 	bl	800b910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	3318      	adds	r3, #24
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fd25 	bl	800b910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceca:	4b25      	ldr	r3, [pc, #148]	@ (800cf60 <xTaskIncrementTick+0x160>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d903      	bls.n	800ceda <xTaskIncrementTick+0xda>
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced6:	4a22      	ldr	r2, [pc, #136]	@ (800cf60 <xTaskIncrementTick+0x160>)
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4a1f      	ldr	r2, [pc, #124]	@ (800cf64 <xTaskIncrementTick+0x164>)
 800cee8:	441a      	add	r2, r3
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	3304      	adds	r3, #4
 800ceee:	4619      	mov	r1, r3
 800cef0:	4610      	mov	r0, r2
 800cef2:	f7fe fcb0 	bl	800b856 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cefa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf68 <xTaskIncrementTick+0x168>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d3b8      	bcc.n	800ce76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf08:	e7b5      	b.n	800ce76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf0a:	4b17      	ldr	r3, [pc, #92]	@ (800cf68 <xTaskIncrementTick+0x168>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf10:	4914      	ldr	r1, [pc, #80]	@ (800cf64 <xTaskIncrementTick+0x164>)
 800cf12:	4613      	mov	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	440b      	add	r3, r1
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d901      	bls.n	800cf26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cf22:	2301      	movs	r3, #1
 800cf24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf26:	4b11      	ldr	r3, [pc, #68]	@ (800cf6c <xTaskIncrementTick+0x16c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d007      	beq.n	800cf3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	e004      	b.n	800cf3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf34:	4b0e      	ldr	r3, [pc, #56]	@ (800cf70 <xTaskIncrementTick+0x170>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	4a0d      	ldr	r2, [pc, #52]	@ (800cf70 <xTaskIncrementTick+0x170>)
 800cf3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf3e:	697b      	ldr	r3, [r7, #20]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	2400e27c 	.word	0x2400e27c
 800cf4c:	2400e258 	.word	0x2400e258
 800cf50:	2400e20c 	.word	0x2400e20c
 800cf54:	2400e210 	.word	0x2400e210
 800cf58:	2400e26c 	.word	0x2400e26c
 800cf5c:	2400e274 	.word	0x2400e274
 800cf60:	2400e25c 	.word	0x2400e25c
 800cf64:	2400dd84 	.word	0x2400dd84
 800cf68:	2400dd80 	.word	0x2400dd80
 800cf6c:	2400e268 	.word	0x2400e268
 800cf70:	2400e264 	.word	0x2400e264

0800cf74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf7a:	4b28      	ldr	r3, [pc, #160]	@ (800d01c <vTaskSwitchContext+0xa8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf82:	4b27      	ldr	r3, [pc, #156]	@ (800d020 <vTaskSwitchContext+0xac>)
 800cf84:	2201      	movs	r2, #1
 800cf86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf88:	e042      	b.n	800d010 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cf8a:	4b25      	ldr	r3, [pc, #148]	@ (800d020 <vTaskSwitchContext+0xac>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf90:	4b24      	ldr	r3, [pc, #144]	@ (800d024 <vTaskSwitchContext+0xb0>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	e011      	b.n	800cfbc <vTaskSwitchContext+0x48>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10b      	bne.n	800cfb6 <vTaskSwitchContext+0x42>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	607b      	str	r3, [r7, #4]
}
 800cfb0:	bf00      	nop
 800cfb2:	bf00      	nop
 800cfb4:	e7fd      	b.n	800cfb2 <vTaskSwitchContext+0x3e>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	491a      	ldr	r1, [pc, #104]	@ (800d028 <vTaskSwitchContext+0xb4>)
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	440b      	add	r3, r1
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0e3      	beq.n	800cf98 <vTaskSwitchContext+0x24>
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4a13      	ldr	r2, [pc, #76]	@ (800d028 <vTaskSwitchContext+0xb4>)
 800cfdc:	4413      	add	r3, r2
 800cfde:	60bb      	str	r3, [r7, #8]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	605a      	str	r2, [r3, #4]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3308      	adds	r3, #8
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d104      	bne.n	800d000 <vTaskSwitchContext+0x8c>
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	605a      	str	r2, [r3, #4]
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	4a09      	ldr	r2, [pc, #36]	@ (800d02c <vTaskSwitchContext+0xb8>)
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	4a06      	ldr	r2, [pc, #24]	@ (800d024 <vTaskSwitchContext+0xb0>)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6013      	str	r3, [r2, #0]
}
 800d010:	bf00      	nop
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	2400e27c 	.word	0x2400e27c
 800d020:	2400e268 	.word	0x2400e268
 800d024:	2400e25c 	.word	0x2400e25c
 800d028:	2400dd84 	.word	0x2400dd84
 800d02c:	2400dd80 	.word	0x2400dd80

0800d030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10b      	bne.n	800d058 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	60fb      	str	r3, [r7, #12]
}
 800d052:	bf00      	nop
 800d054:	bf00      	nop
 800d056:	e7fd      	b.n	800d054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d058:	4b07      	ldr	r3, [pc, #28]	@ (800d078 <vTaskPlaceOnEventList+0x48>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3318      	adds	r3, #24
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7fe fc1c 	bl	800b89e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d066:	2101      	movs	r1, #1
 800d068:	6838      	ldr	r0, [r7, #0]
 800d06a:	f000 faa9 	bl	800d5c0 <prvAddCurrentTaskToDelayedList>
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2400dd80 	.word	0x2400dd80

0800d07c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10b      	bne.n	800d0a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	617b      	str	r3, [r7, #20]
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	e7fd      	b.n	800d0a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3318      	adds	r3, #24
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f7fe fbd1 	bl	800b856 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	68b8      	ldr	r0, [r7, #8]
 800d0c4:	f000 fa7c 	bl	800d5c0 <prvAddCurrentTaskToDelayedList>
	}
 800d0c8:	bf00      	nop
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	2400dd80 	.word	0x2400dd80

0800d0d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	60fb      	str	r3, [r7, #12]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	3318      	adds	r3, #24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fc02 	bl	800b910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d10c:	4b1d      	ldr	r3, [pc, #116]	@ (800d184 <xTaskRemoveFromEventList+0xb0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d11d      	bne.n	800d150 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	3304      	adds	r3, #4
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fbf9 	bl	800b910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d122:	4b19      	ldr	r3, [pc, #100]	@ (800d188 <xTaskRemoveFromEventList+0xb4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	429a      	cmp	r2, r3
 800d128:	d903      	bls.n	800d132 <xTaskRemoveFromEventList+0x5e>
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d12e:	4a16      	ldr	r2, [pc, #88]	@ (800d188 <xTaskRemoveFromEventList+0xb4>)
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d136:	4613      	mov	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4a13      	ldr	r2, [pc, #76]	@ (800d18c <xTaskRemoveFromEventList+0xb8>)
 800d140:	441a      	add	r2, r3
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	3304      	adds	r3, #4
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f7fe fb84 	bl	800b856 <vListInsertEnd>
 800d14e:	e005      	b.n	800d15c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	3318      	adds	r3, #24
 800d154:	4619      	mov	r1, r3
 800d156:	480e      	ldr	r0, [pc, #56]	@ (800d190 <xTaskRemoveFromEventList+0xbc>)
 800d158:	f7fe fb7d 	bl	800b856 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d160:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <xTaskRemoveFromEventList+0xc0>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d166:	429a      	cmp	r2, r3
 800d168:	d905      	bls.n	800d176 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d16a:	2301      	movs	r3, #1
 800d16c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d16e:	4b0a      	ldr	r3, [pc, #40]	@ (800d198 <xTaskRemoveFromEventList+0xc4>)
 800d170:	2201      	movs	r2, #1
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e001      	b.n	800d17a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d176:	2300      	movs	r3, #0
 800d178:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d17a:	697b      	ldr	r3, [r7, #20]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2400e27c 	.word	0x2400e27c
 800d188:	2400e25c 	.word	0x2400e25c
 800d18c:	2400dd84 	.word	0x2400dd84
 800d190:	2400e214 	.word	0x2400e214
 800d194:	2400dd80 	.word	0x2400dd80
 800d198:	2400e268 	.word	0x2400e268

0800d19c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10b      	bne.n	800d1c2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	60fb      	str	r3, [r7, #12]
}
 800d1bc:	bf00      	nop
 800d1be:	bf00      	nop
 800d1c0:	e7fd      	b.n	800d1be <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d1c2:	f7fe fd01 	bl	800bbc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1c6:	4b07      	ldr	r3, [pc, #28]	@ (800d1e4 <vTaskSetTimeOutState+0x48>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d1ce:	4b06      	ldr	r3, [pc, #24]	@ (800d1e8 <vTaskSetTimeOutState+0x4c>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d1d6:	f7fe fd29 	bl	800bc2c <vPortExitCritical>
}
 800d1da:	bf00      	nop
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	2400e26c 	.word	0x2400e26c
 800d1e8:	2400e258 	.word	0x2400e258

0800d1ec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1f4:	4b06      	ldr	r3, [pc, #24]	@ (800d210 <vTaskInternalSetTimeOutState+0x24>)
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1fc:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <vTaskInternalSetTimeOutState+0x28>)
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	605a      	str	r2, [r3, #4]
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	2400e26c 	.word	0x2400e26c
 800d214:	2400e258 	.word	0x2400e258

0800d218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10b      	bne.n	800d240 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	613b      	str	r3, [r7, #16]
}
 800d23a:	bf00      	nop
 800d23c:	bf00      	nop
 800d23e:	e7fd      	b.n	800d23c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10b      	bne.n	800d25e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60fb      	str	r3, [r7, #12]
}
 800d258:	bf00      	nop
 800d25a:	bf00      	nop
 800d25c:	e7fd      	b.n	800d25a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d25e:	f7fe fcb3 	bl	800bbc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d262:	4b1d      	ldr	r3, [pc, #116]	@ (800d2d8 <xTaskCheckForTimeOut+0xc0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	69ba      	ldr	r2, [r7, #24]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d27a:	d102      	bne.n	800d282 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e023      	b.n	800d2ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b15      	ldr	r3, [pc, #84]	@ (800d2dc <xTaskCheckForTimeOut+0xc4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d007      	beq.n	800d29e <xTaskCheckForTimeOut+0x86>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	69ba      	ldr	r2, [r7, #24]
 800d294:	429a      	cmp	r2, r3
 800d296:	d302      	bcc.n	800d29e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d298:	2301      	movs	r3, #1
 800d29a:	61fb      	str	r3, [r7, #28]
 800d29c:	e015      	b.n	800d2ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d20b      	bcs.n	800d2c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ff99 	bl	800d1ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	61fb      	str	r3, [r7, #28]
 800d2be:	e004      	b.n	800d2ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2ca:	f7fe fcaf 	bl	800bc2c <vPortExitCritical>

	return xReturn;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3720      	adds	r7, #32
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	2400e258 	.word	0x2400e258
 800d2dc:	2400e26c 	.word	0x2400e26c

0800d2e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2e4:	4b03      	ldr	r3, [pc, #12]	@ (800d2f4 <vTaskMissedYield+0x14>)
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
}
 800d2ea:	bf00      	nop
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	2400e268 	.word	0x2400e268

0800d2f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d300:	f000 f852 	bl	800d3a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d304:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <prvIdleTask+0x28>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d9f9      	bls.n	800d300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d30c:	4b05      	ldr	r3, [pc, #20]	@ (800d324 <prvIdleTask+0x2c>)
 800d30e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d31c:	e7f0      	b.n	800d300 <prvIdleTask+0x8>
 800d31e:	bf00      	nop
 800d320:	2400dd84 	.word	0x2400dd84
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d32e:	2300      	movs	r3, #0
 800d330:	607b      	str	r3, [r7, #4]
 800d332:	e00c      	b.n	800d34e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4a12      	ldr	r2, [pc, #72]	@ (800d388 <prvInitialiseTaskLists+0x60>)
 800d340:	4413      	add	r3, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f7fe fa5a 	bl	800b7fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3301      	adds	r3, #1
 800d34c:	607b      	str	r3, [r7, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b37      	cmp	r3, #55	@ 0x37
 800d352:	d9ef      	bls.n	800d334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d354:	480d      	ldr	r0, [pc, #52]	@ (800d38c <prvInitialiseTaskLists+0x64>)
 800d356:	f7fe fa51 	bl	800b7fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d35a:	480d      	ldr	r0, [pc, #52]	@ (800d390 <prvInitialiseTaskLists+0x68>)
 800d35c:	f7fe fa4e 	bl	800b7fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d360:	480c      	ldr	r0, [pc, #48]	@ (800d394 <prvInitialiseTaskLists+0x6c>)
 800d362:	f7fe fa4b 	bl	800b7fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d366:	480c      	ldr	r0, [pc, #48]	@ (800d398 <prvInitialiseTaskLists+0x70>)
 800d368:	f7fe fa48 	bl	800b7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d36c:	480b      	ldr	r0, [pc, #44]	@ (800d39c <prvInitialiseTaskLists+0x74>)
 800d36e:	f7fe fa45 	bl	800b7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d372:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a0 <prvInitialiseTaskLists+0x78>)
 800d374:	4a05      	ldr	r2, [pc, #20]	@ (800d38c <prvInitialiseTaskLists+0x64>)
 800d376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d378:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a4 <prvInitialiseTaskLists+0x7c>)
 800d37a:	4a05      	ldr	r2, [pc, #20]	@ (800d390 <prvInitialiseTaskLists+0x68>)
 800d37c:	601a      	str	r2, [r3, #0]
}
 800d37e:	bf00      	nop
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	2400dd84 	.word	0x2400dd84
 800d38c:	2400e1e4 	.word	0x2400e1e4
 800d390:	2400e1f8 	.word	0x2400e1f8
 800d394:	2400e214 	.word	0x2400e214
 800d398:	2400e228 	.word	0x2400e228
 800d39c:	2400e240 	.word	0x2400e240
 800d3a0:	2400e20c 	.word	0x2400e20c
 800d3a4:	2400e210 	.word	0x2400e210

0800d3a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3ae:	e019      	b.n	800d3e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3b0:	f7fe fc0a 	bl	800bbc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b4:	4b10      	ldr	r3, [pc, #64]	@ (800d3f8 <prvCheckTasksWaitingTermination+0x50>)
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe faa5 	bl	800b910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d3fc <prvCheckTasksWaitingTermination+0x54>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	4a0b      	ldr	r2, [pc, #44]	@ (800d3fc <prvCheckTasksWaitingTermination+0x54>)
 800d3ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3da:	f7fe fc27 	bl	800bc2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f810 	bl	800d404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3e4:	4b06      	ldr	r3, [pc, #24]	@ (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e1      	bne.n	800d3b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3ec:	bf00      	nop
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	2400e228 	.word	0x2400e228
 800d3fc:	2400e254 	.word	0x2400e254
 800d400:	2400e23c 	.word	0x2400e23c

0800d404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d412:	2b00      	cmp	r3, #0
 800d414:	d108      	bne.n	800d428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe f8ce 	bl	800b5bc <vPortFree>
				vPortFree( pxTCB );
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7fe f8cb 	bl	800b5bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d426:	e019      	b.n	800d45c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d103      	bne.n	800d43a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fe f8c2 	bl	800b5bc <vPortFree>
	}
 800d438:	e010      	b.n	800d45c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d440:	2b02      	cmp	r3, #2
 800d442:	d00b      	beq.n	800d45c <prvDeleteTCB+0x58>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	60fb      	str	r3, [r7, #12]
}
 800d456:	bf00      	nop
 800d458:	bf00      	nop
 800d45a:	e7fd      	b.n	800d458 <prvDeleteTCB+0x54>
	}
 800d45c:	bf00      	nop
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d46a:	4b0c      	ldr	r3, [pc, #48]	@ (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d104      	bne.n	800d47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d474:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d476:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d47c:	e008      	b.n	800d490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47e:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	4a04      	ldr	r2, [pc, #16]	@ (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d48e:	6013      	str	r3, [r2, #0]
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	2400e20c 	.word	0x2400e20c
 800d4a0:	2400e274 	.word	0x2400e274

0800d4a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d8 <xTaskGetSchedulerState+0x34>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	607b      	str	r3, [r7, #4]
 800d4b6:	e008      	b.n	800d4ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b8:	4b08      	ldr	r3, [pc, #32]	@ (800d4dc <xTaskGetSchedulerState+0x38>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	607b      	str	r3, [r7, #4]
 800d4c4:	e001      	b.n	800d4ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4ca:	687b      	ldr	r3, [r7, #4]
	}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	2400e260 	.word	0x2400e260
 800d4dc:	2400e27c 	.word	0x2400e27c

0800d4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d058      	beq.n	800d5a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d5b4 <xTaskPriorityDisinherit+0xd4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d00b      	beq.n	800d518 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	e7fd      	b.n	800d514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10b      	bne.n	800d538 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	60bb      	str	r3, [r7, #8]
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d53c:	1e5a      	subs	r2, r3, #1
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d02c      	beq.n	800d5a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d552:	2b00      	cmp	r3, #0
 800d554:	d128      	bne.n	800d5a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	3304      	adds	r3, #4
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe f9d8 	bl	800b910 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d578:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b8 <xTaskPriorityDisinherit+0xd8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d903      	bls.n	800d588 <xTaskPriorityDisinherit+0xa8>
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d584:	4a0c      	ldr	r2, [pc, #48]	@ (800d5b8 <xTaskPriorityDisinherit+0xd8>)
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4a09      	ldr	r2, [pc, #36]	@ (800d5bc <xTaskPriorityDisinherit+0xdc>)
 800d596:	441a      	add	r2, r3
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fe f959 	bl	800b856 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5a8:	697b      	ldr	r3, [r7, #20]
	}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	2400dd80 	.word	0x2400dd80
 800d5b8:	2400e25c 	.word	0x2400e25c
 800d5bc:	2400dd84 	.word	0x2400dd84

0800d5c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5ca:	4b21      	ldr	r3, [pc, #132]	@ (800d650 <prvAddCurrentTaskToDelayedList+0x90>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5d0:	4b20      	ldr	r3, [pc, #128]	@ (800d654 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe f99a 	bl	800b910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5e2:	d10a      	bne.n	800d5fa <prvAddCurrentTaskToDelayedList+0x3a>
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d007      	beq.n	800d5fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d654 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4819      	ldr	r0, [pc, #100]	@ (800d658 <prvAddCurrentTaskToDelayedList+0x98>)
 800d5f4:	f7fe f92f 	bl	800b856 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5f8:	e026      	b.n	800d648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4413      	add	r3, r2
 800d600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d602:	4b14      	ldr	r3, [pc, #80]	@ (800d654 <prvAddCurrentTaskToDelayedList+0x94>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d209      	bcs.n	800d626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d612:	4b12      	ldr	r3, [pc, #72]	@ (800d65c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	4b0f      	ldr	r3, [pc, #60]	@ (800d654 <prvAddCurrentTaskToDelayedList+0x94>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4619      	mov	r1, r3
 800d61e:	4610      	mov	r0, r2
 800d620:	f7fe f93d 	bl	800b89e <vListInsert>
}
 800d624:	e010      	b.n	800d648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d626:	4b0e      	ldr	r3, [pc, #56]	@ (800d660 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	4b0a      	ldr	r3, [pc, #40]	@ (800d654 <prvAddCurrentTaskToDelayedList+0x94>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3304      	adds	r3, #4
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7fe f933 	bl	800b89e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d638:	4b0a      	ldr	r3, [pc, #40]	@ (800d664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d202      	bcs.n	800d648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d642:	4a08      	ldr	r2, [pc, #32]	@ (800d664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	6013      	str	r3, [r2, #0]
}
 800d648:	bf00      	nop
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	2400e258 	.word	0x2400e258
 800d654:	2400dd80 	.word	0x2400dd80
 800d658:	2400e240 	.word	0x2400e240
 800d65c:	2400e210 	.word	0x2400e210
 800d660:	2400e20c 	.word	0x2400e20c
 800d664:	2400e274 	.word	0x2400e274

0800d668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08a      	sub	sp, #40	@ 0x28
 800d66c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d66e:	2300      	movs	r3, #0
 800d670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d672:	f000 fb13 	bl	800dc9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d676:	4b1d      	ldr	r3, [pc, #116]	@ (800d6ec <xTimerCreateTimerTask+0x84>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d021      	beq.n	800d6c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d686:	1d3a      	adds	r2, r7, #4
 800d688:	f107 0108 	add.w	r1, r7, #8
 800d68c:	f107 030c 	add.w	r3, r7, #12
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd feab 	bl	800b3ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	9202      	str	r2, [sp, #8]
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	460a      	mov	r2, r1
 800d6a8:	4911      	ldr	r1, [pc, #68]	@ (800d6f0 <xTimerCreateTimerTask+0x88>)
 800d6aa:	4812      	ldr	r0, [pc, #72]	@ (800d6f4 <xTimerCreateTimerTask+0x8c>)
 800d6ac:	f7ff f8a8 	bl	800c800 <xTaskCreateStatic>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	4a11      	ldr	r2, [pc, #68]	@ (800d6f8 <xTimerCreateTimerTask+0x90>)
 800d6b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d6b6:	4b10      	ldr	r3, [pc, #64]	@ (800d6f8 <xTimerCreateTimerTask+0x90>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10b      	bne.n	800d6e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	613b      	str	r3, [r7, #16]
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	e7fd      	b.n	800d6dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6e0:	697b      	ldr	r3, [r7, #20]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	2400e2b0 	.word	0x2400e2b0
 800d6f0:	0801c808 	.word	0x0801c808
 800d6f4:	0800d835 	.word	0x0800d835
 800d6f8:	2400e2b4 	.word	0x2400e2b4

0800d6fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	@ 0x28
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10b      	bne.n	800d72c <xTimerGenericCommand+0x30>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	623b      	str	r3, [r7, #32]
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d72c:	4b19      	ldr	r3, [pc, #100]	@ (800d794 <xTimerGenericCommand+0x98>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d02a      	beq.n	800d78a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2b05      	cmp	r3, #5
 800d744:	dc18      	bgt.n	800d778 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d746:	f7ff fead 	bl	800d4a4 <xTaskGetSchedulerState>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d109      	bne.n	800d764 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d750:	4b10      	ldr	r3, [pc, #64]	@ (800d794 <xTimerGenericCommand+0x98>)
 800d752:	6818      	ldr	r0, [r3, #0]
 800d754:	f107 0110 	add.w	r1, r7, #16
 800d758:	2300      	movs	r3, #0
 800d75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d75c:	f7fe fc60 	bl	800c020 <xQueueGenericSend>
 800d760:	6278      	str	r0, [r7, #36]	@ 0x24
 800d762:	e012      	b.n	800d78a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d764:	4b0b      	ldr	r3, [pc, #44]	@ (800d794 <xTimerGenericCommand+0x98>)
 800d766:	6818      	ldr	r0, [r3, #0]
 800d768:	f107 0110 	add.w	r1, r7, #16
 800d76c:	2300      	movs	r3, #0
 800d76e:	2200      	movs	r2, #0
 800d770:	f7fe fc56 	bl	800c020 <xQueueGenericSend>
 800d774:	6278      	str	r0, [r7, #36]	@ 0x24
 800d776:	e008      	b.n	800d78a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d778:	4b06      	ldr	r3, [pc, #24]	@ (800d794 <xTimerGenericCommand+0x98>)
 800d77a:	6818      	ldr	r0, [r3, #0]
 800d77c:	f107 0110 	add.w	r1, r7, #16
 800d780:	2300      	movs	r3, #0
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	f7fe fd4e 	bl	800c224 <xQueueGenericSendFromISR>
 800d788:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3728      	adds	r7, #40	@ 0x28
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	2400e2b0 	.word	0x2400e2b0

0800d798 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af02      	add	r7, sp, #8
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a2:	4b23      	ldr	r3, [pc, #140]	@ (800d830 <prvProcessExpiredTimer+0x98>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fe f8ad 	bl	800b910 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d023      	beq.n	800d80c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	699a      	ldr	r2, [r3, #24]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	18d1      	adds	r1, r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	6978      	ldr	r0, [r7, #20]
 800d7d2:	f000 f8d5 	bl	800d980 <prvInsertTimerInActiveList>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d020      	beq.n	800d81e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	2100      	movs	r1, #0
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f7ff ff88 	bl	800d6fc <xTimerGenericCommand>
 800d7ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d114      	bne.n	800d81e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	60fb      	str	r3, [r7, #12]
}
 800d806:	bf00      	nop
 800d808:	bf00      	nop
 800d80a:	e7fd      	b.n	800d808 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d812:	f023 0301 	bic.w	r3, r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	6978      	ldr	r0, [r7, #20]
 800d824:	4798      	blx	r3
}
 800d826:	bf00      	nop
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	2400e2a8 	.word	0x2400e2a8

0800d834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d83c:	f107 0308 	add.w	r3, r7, #8
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f859 	bl	800d8f8 <prvGetNextExpireTime>
 800d846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	4619      	mov	r1, r3
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 f805 	bl	800d85c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d852:	f000 f8d7 	bl	800da04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d856:	bf00      	nop
 800d858:	e7f0      	b.n	800d83c <prvTimerTask+0x8>
	...

0800d85c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d866:	f7ff fa0f 	bl	800cc88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f866 	bl	800d940 <prvSampleTimeNow>
 800d874:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d130      	bne.n	800d8de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <prvProcessTimerOrBlockTask+0x3c>
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	429a      	cmp	r2, r3
 800d888:	d806      	bhi.n	800d898 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d88a:	f7ff fa0b 	bl	800cca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d88e:	68f9      	ldr	r1, [r7, #12]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ff81 	bl	800d798 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d896:	e024      	b.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d89e:	4b13      	ldr	r3, [pc, #76]	@ (800d8ec <prvProcessTimerOrBlockTask+0x90>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <prvProcessTimerOrBlockTask+0x50>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e000      	b.n	800d8ae <prvProcessTimerOrBlockTask+0x52>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d8f0 <prvProcessTimerOrBlockTask+0x94>)
 800d8b2:	6818      	ldr	r0, [r3, #0]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f7fe ff6b 	bl	800c798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d8c2:	f7ff f9ef 	bl	800cca4 <xTaskResumeAll>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8cc:	4b09      	ldr	r3, [pc, #36]	@ (800d8f4 <prvProcessTimerOrBlockTask+0x98>)
 800d8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	f3bf 8f6f 	isb	sy
}
 800d8dc:	e001      	b.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8de:	f7ff f9e1 	bl	800cca4 <xTaskResumeAll>
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2400e2ac 	.word	0x2400e2ac
 800d8f0:	2400e2b0 	.word	0x2400e2b0
 800d8f4:	e000ed04 	.word	0xe000ed04

0800d8f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d900:	4b0e      	ldr	r3, [pc, #56]	@ (800d93c <prvGetNextExpireTime+0x44>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <prvGetNextExpireTime+0x16>
 800d90a:	2201      	movs	r2, #1
 800d90c:	e000      	b.n	800d910 <prvGetNextExpireTime+0x18>
 800d90e:	2200      	movs	r2, #0
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d91c:	4b07      	ldr	r3, [pc, #28]	@ (800d93c <prvGetNextExpireTime+0x44>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	e001      	b.n	800d92c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d92c:	68fb      	ldr	r3, [r7, #12]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	2400e2a8 	.word	0x2400e2a8

0800d940 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d948:	f7ff fa4a 	bl	800cde0 <xTaskGetTickCount>
 800d94c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d94e:	4b0b      	ldr	r3, [pc, #44]	@ (800d97c <prvSampleTimeNow+0x3c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	429a      	cmp	r2, r3
 800d956:	d205      	bcs.n	800d964 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d958:	f000 f93a 	bl	800dbd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	e002      	b.n	800d96a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d96a:	4a04      	ldr	r2, [pc, #16]	@ (800d97c <prvSampleTimeNow+0x3c>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d970:	68fb      	ldr	r3, [r7, #12]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	2400e2b8 	.word	0x2400e2b8

0800d980 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d812      	bhi.n	800d9cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d302      	bcc.n	800d9ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	e01b      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9ba:	4b10      	ldr	r3, [pc, #64]	@ (800d9fc <prvInsertTimerInActiveList+0x7c>)
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7fd ff6a 	bl	800b89e <vListInsert>
 800d9ca:	e012      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d206      	bcs.n	800d9e2 <prvInsertTimerInActiveList+0x62>
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	e007      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9e2:	4b07      	ldr	r3, [pc, #28]	@ (800da00 <prvInsertTimerInActiveList+0x80>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7fd ff56 	bl	800b89e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9f2:	697b      	ldr	r3, [r7, #20]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	2400e2ac 	.word	0x2400e2ac
 800da00:	2400e2a8 	.word	0x2400e2a8

0800da04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da0a:	e0ce      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	da19      	bge.n	800da46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da12:	1d3b      	adds	r3, r7, #4
 800da14:	3304      	adds	r3, #4
 800da16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10b      	bne.n	800da36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	61fb      	str	r3, [r7, #28]
}
 800da30:	bf00      	nop
 800da32:	bf00      	nop
 800da34:	e7fd      	b.n	800da32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da3c:	6850      	ldr	r0, [r2, #4]
 800da3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da40:	6892      	ldr	r2, [r2, #8]
 800da42:	4611      	mov	r1, r2
 800da44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f2c0 80ae 	blt.w	800dbaa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d004      	beq.n	800da64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5c:	3304      	adds	r3, #4
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fd ff56 	bl	800b910 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da64:	463b      	mov	r3, r7
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff ff6a 	bl	800d940 <prvSampleTimeNow>
 800da6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b09      	cmp	r3, #9
 800da72:	f200 8097 	bhi.w	800dba4 <prvProcessReceivedCommands+0x1a0>
 800da76:	a201      	add	r2, pc, #4	@ (adr r2, 800da7c <prvProcessReceivedCommands+0x78>)
 800da78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7c:	0800daa5 	.word	0x0800daa5
 800da80:	0800daa5 	.word	0x0800daa5
 800da84:	0800daa5 	.word	0x0800daa5
 800da88:	0800db1b 	.word	0x0800db1b
 800da8c:	0800db2f 	.word	0x0800db2f
 800da90:	0800db7b 	.word	0x0800db7b
 800da94:	0800daa5 	.word	0x0800daa5
 800da98:	0800daa5 	.word	0x0800daa5
 800da9c:	0800db1b 	.word	0x0800db1b
 800daa0:	0800db2f 	.word	0x0800db2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daaa:	f043 0301 	orr.w	r3, r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	18d1      	adds	r1, r2, r3
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dac4:	f7ff ff5c 	bl	800d980 <prvInsertTimerInActiveList>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d06c      	beq.n	800dba8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dad4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dadc:	f003 0304 	and.w	r3, r3, #4
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d061      	beq.n	800dba8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	441a      	add	r2, r3
 800daec:	2300      	movs	r3, #0
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	2300      	movs	r3, #0
 800daf2:	2100      	movs	r1, #0
 800daf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daf6:	f7ff fe01 	bl	800d6fc <xTimerGenericCommand>
 800dafa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d152      	bne.n	800dba8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	61bb      	str	r3, [r7, #24]
}
 800db14:	bf00      	nop
 800db16:	bf00      	nop
 800db18:	e7fd      	b.n	800db16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db2c:	e03d      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db34:	f043 0301 	orr.w	r3, r3, #1
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	699b      	ldr	r3, [r3, #24]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	617b      	str	r3, [r7, #20]
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	699a      	ldr	r2, [r3, #24]
 800db6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6c:	18d1      	adds	r1, r2, r3
 800db6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db74:	f7ff ff04 	bl	800d980 <prvInsertTimerInActiveList>
					break;
 800db78:	e017      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db80:	f003 0302 	and.w	r3, r3, #2
 800db84:	2b00      	cmp	r3, #0
 800db86:	d103      	bne.n	800db90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db8a:	f7fd fd17 	bl	800b5bc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db8e:	e00c      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db96:	f023 0301 	bic.w	r3, r3, #1
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dba2:	e002      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dba4:	bf00      	nop
 800dba6:	e000      	b.n	800dbaa <prvProcessReceivedCommands+0x1a6>
					break;
 800dba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbaa:	4b08      	ldr	r3, [pc, #32]	@ (800dbcc <prvProcessReceivedCommands+0x1c8>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	1d39      	adds	r1, r7, #4
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fbd4 	bl	800c360 <xQueueReceive>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f47f af26 	bne.w	800da0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	3730      	adds	r7, #48	@ 0x30
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	2400e2b0 	.word	0x2400e2b0

0800dbd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbd6:	e049      	b.n	800dc6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbd8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe2:	4b2c      	ldr	r3, [pc, #176]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68db      	ldr	r3, [r3, #12]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fd fe8d 	bl	800b910 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc04:	f003 0304 	and.w	r3, r3, #4
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02f      	beq.n	800dc6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	693a      	ldr	r2, [r7, #16]
 800dc12:	4413      	add	r3, r2
 800dc14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d90e      	bls.n	800dc3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3304      	adds	r3, #4
 800dc32:	4619      	mov	r1, r3
 800dc34:	4610      	mov	r0, r2
 800dc36:	f7fd fe32 	bl	800b89e <vListInsert>
 800dc3a:	e017      	b.n	800dc6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	2300      	movs	r3, #0
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	2100      	movs	r1, #0
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7ff fd58 	bl	800d6fc <xTimerGenericCommand>
 800dc4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10b      	bne.n	800dc6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	603b      	str	r3, [r7, #0]
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	e7fd      	b.n	800dc68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc6c:	4b09      	ldr	r3, [pc, #36]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1b0      	bne.n	800dbd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc76:	4b07      	ldr	r3, [pc, #28]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc7c:	4b06      	ldr	r3, [pc, #24]	@ (800dc98 <prvSwitchTimerLists+0xc8>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a04      	ldr	r2, [pc, #16]	@ (800dc94 <prvSwitchTimerLists+0xc4>)
 800dc82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc84:	4a04      	ldr	r2, [pc, #16]	@ (800dc98 <prvSwitchTimerLists+0xc8>)
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	6013      	str	r3, [r2, #0]
}
 800dc8a:	bf00      	nop
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	2400e2a8 	.word	0x2400e2a8
 800dc98:	2400e2ac 	.word	0x2400e2ac

0800dc9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dca2:	f7fd ff91 	bl	800bbc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dca6:	4b15      	ldr	r3, [pc, #84]	@ (800dcfc <prvCheckForValidListAndQueue+0x60>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d120      	bne.n	800dcf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dcae:	4814      	ldr	r0, [pc, #80]	@ (800dd00 <prvCheckForValidListAndQueue+0x64>)
 800dcb0:	f7fd fda4 	bl	800b7fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dcb4:	4813      	ldr	r0, [pc, #76]	@ (800dd04 <prvCheckForValidListAndQueue+0x68>)
 800dcb6:	f7fd fda1 	bl	800b7fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcba:	4b13      	ldr	r3, [pc, #76]	@ (800dd08 <prvCheckForValidListAndQueue+0x6c>)
 800dcbc:	4a10      	ldr	r2, [pc, #64]	@ (800dd00 <prvCheckForValidListAndQueue+0x64>)
 800dcbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dcc0:	4b12      	ldr	r3, [pc, #72]	@ (800dd0c <prvCheckForValidListAndQueue+0x70>)
 800dcc2:	4a10      	ldr	r2, [pc, #64]	@ (800dd04 <prvCheckForValidListAndQueue+0x68>)
 800dcc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	4b11      	ldr	r3, [pc, #68]	@ (800dd10 <prvCheckForValidListAndQueue+0x74>)
 800dccc:	4a11      	ldr	r2, [pc, #68]	@ (800dd14 <prvCheckForValidListAndQueue+0x78>)
 800dcce:	2110      	movs	r1, #16
 800dcd0:	200a      	movs	r0, #10
 800dcd2:	f7fe f905 	bl	800bee0 <xQueueGenericCreateStatic>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4a08      	ldr	r2, [pc, #32]	@ (800dcfc <prvCheckForValidListAndQueue+0x60>)
 800dcda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dcdc:	4b07      	ldr	r3, [pc, #28]	@ (800dcfc <prvCheckForValidListAndQueue+0x60>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d005      	beq.n	800dcf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dce4:	4b05      	ldr	r3, [pc, #20]	@ (800dcfc <prvCheckForValidListAndQueue+0x60>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	490b      	ldr	r1, [pc, #44]	@ (800dd18 <prvCheckForValidListAndQueue+0x7c>)
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe fd2a 	bl	800c744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcf0:	f7fd ff9c 	bl	800bc2c <vPortExitCritical>
}
 800dcf4:	bf00      	nop
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	2400e2b0 	.word	0x2400e2b0
 800dd00:	2400e280 	.word	0x2400e280
 800dd04:	2400e294 	.word	0x2400e294
 800dd08:	2400e2a8 	.word	0x2400e2a8
 800dd0c:	2400e2ac 	.word	0x2400e2ac
 800dd10:	2400e35c 	.word	0x2400e35c
 800dd14:	2400e2bc 	.word	0x2400e2bc
 800dd18:	0801c810 	.word	0x0801c810

0800dd1c <rcl_get_zero_initialized_init_options>:
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	4770      	bx	lr

0800dd20 <rcl_init_options_init>:
 800dd20:	b084      	sub	sp, #16
 800dd22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd24:	b097      	sub	sp, #92	@ 0x5c
 800dd26:	ae1d      	add	r6, sp, #116	@ 0x74
 800dd28:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d058      	beq.n	800dde2 <rcl_init_options_init+0xc2>
 800dd30:	6803      	ldr	r3, [r0, #0]
 800dd32:	4605      	mov	r5, r0
 800dd34:	b133      	cbz	r3, 800dd44 <rcl_init_options_init+0x24>
 800dd36:	2464      	movs	r4, #100	@ 0x64
 800dd38:	4620      	mov	r0, r4
 800dd3a:	b017      	add	sp, #92	@ 0x5c
 800dd3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd40:	b004      	add	sp, #16
 800dd42:	4770      	bx	lr
 800dd44:	4630      	mov	r0, r6
 800dd46:	f001 f953 	bl	800eff0 <rcutils_allocator_is_valid>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d049      	beq.n	800dde2 <rcl_init_options_init+0xc2>
 800dd4e:	46b4      	mov	ip, r6
 800dd50:	ac11      	add	r4, sp, #68	@ 0x44
 800dd52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd58:	f8dc 3000 	ldr.w	r3, [ip]
 800dd5c:	2050      	movs	r0, #80	@ 0x50
 800dd5e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd64:	4798      	blx	r3
 800dd66:	4604      	mov	r4, r0
 800dd68:	6028      	str	r0, [r5, #0]
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d03b      	beq.n	800dde6 <rcl_init_options_init+0xc6>
 800dd6e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800dd72:	4686      	mov	lr, r0
 800dd74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd7c:	f8dc 3000 	ldr.w	r3, [ip]
 800dd80:	a802      	add	r0, sp, #8
 800dd82:	f8ce 3000 	str.w	r3, [lr]
 800dd86:	f001 f9bf 	bl	800f108 <rmw_get_zero_initialized_init_options>
 800dd8a:	f10d 0e08 	add.w	lr, sp, #8
 800dd8e:	f104 0c18 	add.w	ip, r4, #24
 800dd92:	682f      	ldr	r7, [r5, #0]
 800dd94:	ac20      	add	r4, sp, #128	@ 0x80
 800dd96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dd9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dda2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dda6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ddaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ddae:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ddb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ddb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ddba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ddbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ddc2:	f107 0018 	add.w	r0, r7, #24
 800ddc6:	f001 f9cd 	bl	800f164 <rmw_init_options_init>
 800ddca:	4604      	mov	r4, r0
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d0b3      	beq.n	800dd38 <rcl_init_options_init+0x18>
 800ddd0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ddd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ddd4:	6828      	ldr	r0, [r5, #0]
 800ddd6:	4798      	blx	r3
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f007 fbbf 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 800ddde:	4604      	mov	r4, r0
 800dde0:	e7aa      	b.n	800dd38 <rcl_init_options_init+0x18>
 800dde2:	240b      	movs	r4, #11
 800dde4:	e7a8      	b.n	800dd38 <rcl_init_options_init+0x18>
 800dde6:	240a      	movs	r4, #10
 800dde8:	e7a6      	b.n	800dd38 <rcl_init_options_init+0x18>
 800ddea:	bf00      	nop

0800ddec <rcl_init_options_fini>:
 800ddec:	b530      	push	{r4, r5, lr}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	b1f0      	cbz	r0, 800de30 <rcl_init_options_fini+0x44>
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	b1db      	cbz	r3, 800de30 <rcl_init_options_fini+0x44>
 800ddf8:	469c      	mov	ip, r3
 800ddfa:	f10d 0e04 	add.w	lr, sp, #4
 800ddfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800de06:	f8dc 3000 	ldr.w	r3, [ip]
 800de0a:	a801      	add	r0, sp, #4
 800de0c:	f8ce 3000 	str.w	r3, [lr]
 800de10:	f001 f8ee 	bl	800eff0 <rcutils_allocator_is_valid>
 800de14:	b160      	cbz	r0, 800de30 <rcl_init_options_fini+0x44>
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	3018      	adds	r0, #24
 800de1a:	f001 fa5d 	bl	800f2d8 <rmw_init_options_fini>
 800de1e:	4605      	mov	r5, r0
 800de20:	b950      	cbnz	r0, 800de38 <rcl_init_options_fini+0x4c>
 800de22:	6820      	ldr	r0, [r4, #0]
 800de24:	9b02      	ldr	r3, [sp, #8]
 800de26:	9905      	ldr	r1, [sp, #20]
 800de28:	4798      	blx	r3
 800de2a:	4628      	mov	r0, r5
 800de2c:	b007      	add	sp, #28
 800de2e:	bd30      	pop	{r4, r5, pc}
 800de30:	250b      	movs	r5, #11
 800de32:	4628      	mov	r0, r5
 800de34:	b007      	add	sp, #28
 800de36:	bd30      	pop	{r4, r5, pc}
 800de38:	f007 fb90 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 800de3c:	4605      	mov	r5, r0
 800de3e:	e7f8      	b.n	800de32 <rcl_init_options_fini+0x46>

0800de40 <rcl_init_options_copy>:
 800de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de44:	b094      	sub	sp, #80	@ 0x50
 800de46:	2800      	cmp	r0, #0
 800de48:	d05b      	beq.n	800df02 <rcl_init_options_copy+0xc2>
 800de4a:	4604      	mov	r4, r0
 800de4c:	6800      	ldr	r0, [r0, #0]
 800de4e:	2800      	cmp	r0, #0
 800de50:	d057      	beq.n	800df02 <rcl_init_options_copy+0xc2>
 800de52:	460e      	mov	r6, r1
 800de54:	f001 f8cc 	bl	800eff0 <rcutils_allocator_is_valid>
 800de58:	2e00      	cmp	r6, #0
 800de5a:	d052      	beq.n	800df02 <rcl_init_options_copy+0xc2>
 800de5c:	f080 0001 	eor.w	r0, r0, #1
 800de60:	b2c0      	uxtb	r0, r0
 800de62:	2800      	cmp	r0, #0
 800de64:	d14d      	bne.n	800df02 <rcl_init_options_copy+0xc2>
 800de66:	6833      	ldr	r3, [r6, #0]
 800de68:	b123      	cbz	r3, 800de74 <rcl_init_options_copy+0x34>
 800de6a:	2464      	movs	r4, #100	@ 0x64
 800de6c:	4620      	mov	r0, r4
 800de6e:	b014      	add	sp, #80	@ 0x50
 800de70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de74:	6827      	ldr	r7, [r4, #0]
 800de76:	ad0f      	add	r5, sp, #60	@ 0x3c
 800de78:	46bc      	mov	ip, r7
 800de7a:	f8d7 8000 	ldr.w	r8, [r7]
 800de7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de84:	f8dc 3000 	ldr.w	r3, [ip]
 800de88:	2050      	movs	r0, #80	@ 0x50
 800de8a:	4619      	mov	r1, r3
 800de8c:	602b      	str	r3, [r5, #0]
 800de8e:	47c0      	blx	r8
 800de90:	4605      	mov	r5, r0
 800de92:	6030      	str	r0, [r6, #0]
 800de94:	b3d0      	cbz	r0, 800df0c <rcl_init_options_copy+0xcc>
 800de96:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800de9a:	4686      	mov	lr, r0
 800de9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dea0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dea4:	f8dc 3000 	ldr.w	r3, [ip]
 800dea8:	4668      	mov	r0, sp
 800deaa:	f8ce 3000 	str.w	r3, [lr]
 800deae:	f001 f92b 	bl	800f108 <rmw_get_zero_initialized_init_options>
 800deb2:	46ee      	mov	lr, sp
 800deb4:	f105 0c18 	add.w	ip, r5, #24
 800deb8:	6824      	ldr	r4, [r4, #0]
 800deba:	6835      	ldr	r5, [r6, #0]
 800debc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dec4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800decc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ded0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ded4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ded8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dedc:	f104 0018 	add.w	r0, r4, #24
 800dee0:	f105 0118 	add.w	r1, r5, #24
 800dee4:	f001 f9a6 	bl	800f234 <rmw_init_options_copy>
 800dee8:	4604      	mov	r4, r0
 800deea:	2800      	cmp	r0, #0
 800deec:	d0be      	beq.n	800de6c <rcl_init_options_copy+0x2c>
 800deee:	f001 f88d 	bl	800f00c <rcutils_get_error_string>
 800def2:	f001 f8a1 	bl	800f038 <rcutils_reset_error>
 800def6:	4630      	mov	r0, r6
 800def8:	f7ff ff78 	bl	800ddec <rcl_init_options_fini>
 800defc:	b140      	cbz	r0, 800df10 <rcl_init_options_copy+0xd0>
 800defe:	4604      	mov	r4, r0
 800df00:	e7b4      	b.n	800de6c <rcl_init_options_copy+0x2c>
 800df02:	240b      	movs	r4, #11
 800df04:	4620      	mov	r0, r4
 800df06:	b014      	add	sp, #80	@ 0x50
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	240a      	movs	r4, #10
 800df0e:	e7ad      	b.n	800de6c <rcl_init_options_copy+0x2c>
 800df10:	4620      	mov	r0, r4
 800df12:	b014      	add	sp, #80	@ 0x50
 800df14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df18:	f007 bb20 	b.w	801555c <rcl_convert_rmw_ret_to_rcl_ret>

0800df1c <rcl_init_options_set_domain_id>:
 800df1c:	b120      	cbz	r0, 800df28 <rcl_init_options_set_domain_id+0xc>
 800df1e:	6803      	ldr	r3, [r0, #0]
 800df20:	b113      	cbz	r3, 800df28 <rcl_init_options_set_domain_id+0xc>
 800df22:	2000      	movs	r0, #0
 800df24:	6259      	str	r1, [r3, #36]	@ 0x24
 800df26:	4770      	bx	lr
 800df28:	200b      	movs	r0, #11
 800df2a:	4770      	bx	lr

0800df2c <rcl_get_zero_initialized_publisher>:
 800df2c:	4b01      	ldr	r3, [pc, #4]	@ (800df34 <rcl_get_zero_initialized_publisher+0x8>)
 800df2e:	6818      	ldr	r0, [r3, #0]
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	0801c89c 	.word	0x0801c89c

0800df38 <rcl_publisher_init>:
 800df38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3c:	b088      	sub	sp, #32
 800df3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800df40:	2e00      	cmp	r6, #0
 800df42:	d06b      	beq.n	800e01c <rcl_publisher_init+0xe4>
 800df44:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800df48:	4605      	mov	r5, r0
 800df4a:	460f      	mov	r7, r1
 800df4c:	4690      	mov	r8, r2
 800df4e:	4650      	mov	r0, sl
 800df50:	4699      	mov	r9, r3
 800df52:	f001 f84d 	bl	800eff0 <rcutils_allocator_is_valid>
 800df56:	f080 0401 	eor.w	r4, r0, #1
 800df5a:	b2e4      	uxtb	r4, r4
 800df5c:	2c00      	cmp	r4, #0
 800df5e:	d15d      	bne.n	800e01c <rcl_publisher_init+0xe4>
 800df60:	2d00      	cmp	r5, #0
 800df62:	d05b      	beq.n	800e01c <rcl_publisher_init+0xe4>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b123      	cbz	r3, 800df72 <rcl_publisher_init+0x3a>
 800df68:	2464      	movs	r4, #100	@ 0x64
 800df6a:	4620      	mov	r0, r4
 800df6c:	b008      	add	sp, #32
 800df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df72:	4638      	mov	r0, r7
 800df74:	f007 fdf0 	bl	8015b58 <rcl_node_is_valid>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d054      	beq.n	800e026 <rcl_publisher_init+0xee>
 800df7c:	f1b8 0f00 	cmp.w	r8, #0
 800df80:	d04c      	beq.n	800e01c <rcl_publisher_init+0xe4>
 800df82:	fab9 f389 	clz	r3, r9
 800df86:	095b      	lsrs	r3, r3, #5
 800df88:	f1b9 0f00 	cmp.w	r9, #0
 800df8c:	d046      	beq.n	800e01c <rcl_publisher_init+0xe4>
 800df8e:	aa07      	add	r2, sp, #28
 800df90:	9307      	str	r3, [sp, #28]
 800df92:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800df96:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800df9a:	9205      	str	r2, [sp, #20]
 800df9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfa0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800dfac:	f007 fe2c 	bl	8015c08 <rcl_node_resolve_name>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d14f      	bne.n	800e054 <rcl_publisher_init+0x11c>
 800dfb4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800dfb6:	20c8      	movs	r0, #200	@ 0xc8
 800dfb8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800dfba:	4798      	blx	r3
 800dfbc:	6028      	str	r0, [r5, #0]
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d050      	beq.n	800e064 <rcl_publisher_init+0x12c>
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	f007 fdea 	bl	8015b9c <rcl_node_get_rmw_handle>
 800dfc8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800dfcc:	4641      	mov	r1, r8
 800dfce:	9a07      	ldr	r2, [sp, #28]
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	4633      	mov	r3, r6
 800dfd4:	682c      	ldr	r4, [r5, #0]
 800dfd6:	f001 fca5 	bl	800f924 <rmw_create_publisher>
 800dfda:	682b      	ldr	r3, [r5, #0]
 800dfdc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800dfe0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800dfe4:	b370      	cbz	r0, 800e044 <rcl_publisher_init+0x10c>
 800dfe6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800dfea:	f001 fd7f 	bl	800faec <rmw_publisher_get_actual_qos>
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	4604      	mov	r4, r0
 800dff2:	b9d0      	cbnz	r0, 800e02a <rcl_publisher_init+0xf2>
 800dff4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800dff8:	4631      	mov	r1, r6
 800dffa:	4618      	mov	r0, r3
 800dffc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e000:	2270      	movs	r2, #112	@ 0x70
 800e002:	f00d fd82 	bl	801bb0a <memcpy>
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e00c:	9807      	ldr	r0, [sp, #28]
 800e00e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e010:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e012:	4798      	blx	r3
 800e014:	4620      	mov	r0, r4
 800e016:	b008      	add	sp, #32
 800e018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01c:	240b      	movs	r4, #11
 800e01e:	4620      	mov	r0, r4
 800e020:	b008      	add	sp, #32
 800e022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e026:	24c8      	movs	r4, #200	@ 0xc8
 800e028:	e79f      	b.n	800df6a <rcl_publisher_init+0x32>
 800e02a:	b1cb      	cbz	r3, 800e060 <rcl_publisher_init+0x128>
 800e02c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e030:	b142      	cbz	r2, 800e044 <rcl_publisher_init+0x10c>
 800e032:	4638      	mov	r0, r7
 800e034:	f007 fdb2 	bl	8015b9c <rcl_node_get_rmw_handle>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e03e:	f001 fd69 	bl	800fb14 <rmw_destroy_publisher>
 800e042:	682b      	ldr	r3, [r5, #0]
 800e044:	4618      	mov	r0, r3
 800e046:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e048:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e04a:	2401      	movs	r4, #1
 800e04c:	4790      	blx	r2
 800e04e:	2300      	movs	r3, #0
 800e050:	602b      	str	r3, [r5, #0]
 800e052:	e7db      	b.n	800e00c <rcl_publisher_init+0xd4>
 800e054:	2867      	cmp	r0, #103	@ 0x67
 800e056:	d007      	beq.n	800e068 <rcl_publisher_init+0x130>
 800e058:	2869      	cmp	r0, #105	@ 0x69
 800e05a:	d005      	beq.n	800e068 <rcl_publisher_init+0x130>
 800e05c:	280a      	cmp	r0, #10
 800e05e:	d001      	beq.n	800e064 <rcl_publisher_init+0x12c>
 800e060:	2401      	movs	r4, #1
 800e062:	e7d3      	b.n	800e00c <rcl_publisher_init+0xd4>
 800e064:	240a      	movs	r4, #10
 800e066:	e7d1      	b.n	800e00c <rcl_publisher_init+0xd4>
 800e068:	2467      	movs	r4, #103	@ 0x67
 800e06a:	e7cf      	b.n	800e00c <rcl_publisher_init+0xd4>

0800e06c <rcl_publisher_get_default_options>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	4d14      	ldr	r5, [pc, #80]	@ (800e0c0 <rcl_publisher_get_default_options+0x54>)
 800e070:	b088      	sub	sp, #32
 800e072:	4604      	mov	r4, r0
 800e074:	2250      	movs	r2, #80	@ 0x50
 800e076:	4913      	ldr	r1, [pc, #76]	@ (800e0c4 <rcl_publisher_get_default_options+0x58>)
 800e078:	4628      	mov	r0, r5
 800e07a:	f00d fd46 	bl	801bb0a <memcpy>
 800e07e:	a802      	add	r0, sp, #8
 800e080:	f000 ffa8 	bl	800efd4 <rcutils_get_default_allocator>
 800e084:	f10d 0c08 	add.w	ip, sp, #8
 800e088:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e08c:	466e      	mov	r6, sp
 800e08e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e096:	f8dc 3000 	ldr.w	r3, [ip]
 800e09a:	4630      	mov	r0, r6
 800e09c:	f8ce 3000 	str.w	r3, [lr]
 800e0a0:	f001 f842 	bl	800f128 <rmw_get_default_publisher_options>
 800e0a4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e0a8:	2270      	movs	r2, #112	@ 0x70
 800e0aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e0ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f00d fd28 	bl	801bb0a <memcpy>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	b008      	add	sp, #32
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	2400e3b0 	.word	0x2400e3b0
 800e0c4:	0801c8a0 	.word	0x0801c8a0

0800e0c8 <rcl_publish>:
 800e0c8:	b1f8      	cbz	r0, 800e10a <rcl_publish+0x42>
 800e0ca:	6803      	ldr	r3, [r0, #0]
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	b1b3      	cbz	r3, 800e100 <rcl_publish+0x38>
 800e0d2:	4616      	mov	r6, r2
 800e0d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e0d8:	b192      	cbz	r2, 800e100 <rcl_publish+0x38>
 800e0da:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e0de:	460d      	mov	r5, r1
 800e0e0:	f007 fa5a 	bl	8015598 <rcl_context_is_valid>
 800e0e4:	b160      	cbz	r0, 800e100 <rcl_publish+0x38>
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e0ec:	b140      	cbz	r0, 800e100 <rcl_publish+0x38>
 800e0ee:	b155      	cbz	r5, 800e106 <rcl_publish+0x3e>
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	4629      	mov	r1, r5
 800e0f4:	f001 fbb6 	bl	800f864 <rmw_publish>
 800e0f8:	3800      	subs	r0, #0
 800e0fa:	bf18      	it	ne
 800e0fc:	2001      	movne	r0, #1
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}
 800e100:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	200b      	movs	r0, #11
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e10e:	4770      	bx	lr

0800e110 <rcl_publisher_is_valid>:
 800e110:	b1a0      	cbz	r0, 800e13c <rcl_publisher_is_valid+0x2c>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	b510      	push	{r4, lr}
 800e116:	4604      	mov	r4, r0
 800e118:	b173      	cbz	r3, 800e138 <rcl_publisher_is_valid+0x28>
 800e11a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e11e:	b15a      	cbz	r2, 800e138 <rcl_publisher_is_valid+0x28>
 800e120:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e124:	f007 fa38 	bl	8015598 <rcl_context_is_valid>
 800e128:	b130      	cbz	r0, 800e138 <rcl_publisher_is_valid+0x28>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e130:	3800      	subs	r0, #0
 800e132:	bf18      	it	ne
 800e134:	2001      	movne	r0, #1
 800e136:	bd10      	pop	{r4, pc}
 800e138:	2000      	movs	r0, #0
 800e13a:	bd10      	pop	{r4, pc}
 800e13c:	2000      	movs	r0, #0
 800e13e:	4770      	bx	lr

0800e140 <rcl_publisher_is_valid_except_context>:
 800e140:	b130      	cbz	r0, 800e150 <rcl_publisher_is_valid_except_context+0x10>
 800e142:	6800      	ldr	r0, [r0, #0]
 800e144:	b120      	cbz	r0, 800e150 <rcl_publisher_is_valid_except_context+0x10>
 800e146:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e14a:	3800      	subs	r0, #0
 800e14c:	bf18      	it	ne
 800e14e:	2001      	movne	r0, #1
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop

0800e154 <_rclc_check_for_new_data>:
 800e154:	2800      	cmp	r0, #0
 800e156:	d046      	beq.n	800e1e6 <_rclc_check_for_new_data+0x92>
 800e158:	4603      	mov	r3, r0
 800e15a:	b530      	push	{r4, r5, lr}
 800e15c:	7802      	ldrb	r2, [r0, #0]
 800e15e:	b085      	sub	sp, #20
 800e160:	2a0a      	cmp	r2, #10
 800e162:	d842      	bhi.n	800e1ea <_rclc_check_for_new_data+0x96>
 800e164:	e8df f002 	tbb	[pc, r2]
 800e168:	14181212 	.word	0x14181212
 800e16c:	06060614 	.word	0x06060614
 800e170:	2e1a      	.short	0x2e1a
 800e172:	16          	.byte	0x16
 800e173:	00          	.byte	0x00
 800e174:	6a0a      	ldr	r2, [r1, #32]
 800e176:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e178:	2000      	movs	r0, #0
 800e17a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e17e:	1a12      	subs	r2, r2, r0
 800e180:	bf18      	it	ne
 800e182:	2201      	movne	r2, #1
 800e184:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e188:	b005      	add	sp, #20
 800e18a:	bd30      	pop	{r4, r5, pc}
 800e18c:	680a      	ldr	r2, [r1, #0]
 800e18e:	e7f2      	b.n	800e176 <_rclc_check_for_new_data+0x22>
 800e190:	698a      	ldr	r2, [r1, #24]
 800e192:	e7f0      	b.n	800e176 <_rclc_check_for_new_data+0x22>
 800e194:	688a      	ldr	r2, [r1, #8]
 800e196:	e7ee      	b.n	800e176 <_rclc_check_for_new_data+0x22>
 800e198:	690a      	ldr	r2, [r1, #16]
 800e19a:	e7ec      	b.n	800e176 <_rclc_check_for_new_data+0x22>
 800e19c:	685c      	ldr	r4, [r3, #4]
 800e19e:	4608      	mov	r0, r1
 800e1a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1a8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800e1ac:	f104 0110 	add.w	r1, r4, #16
 800e1b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e1b4:	9500      	str	r5, [sp, #0]
 800e1b6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e1ba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e1be:	f009 fb7f 	bl	80178c0 <rcl_action_client_wait_set_get_entities_ready>
 800e1c2:	e7e1      	b.n	800e188 <_rclc_check_for_new_data+0x34>
 800e1c4:	685c      	ldr	r4, [r3, #4]
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800e1cc:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800e1d0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e1d4:	e9cd 2100 	strd	r2, r1, [sp]
 800e1d8:	f104 0220 	add.w	r2, r4, #32
 800e1dc:	f104 0110 	add.w	r1, r4, #16
 800e1e0:	f009 fd88 	bl	8017cf4 <rcl_action_server_wait_set_get_entities_ready>
 800e1e4:	e7d0      	b.n	800e188 <_rclc_check_for_new_data+0x34>
 800e1e6:	200b      	movs	r0, #11
 800e1e8:	4770      	bx	lr
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	e7cc      	b.n	800e188 <_rclc_check_for_new_data+0x34>
 800e1ee:	bf00      	nop

0800e1f0 <_rclc_take_new_data>:
 800e1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f2:	b09b      	sub	sp, #108	@ 0x6c
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f000 8088 	beq.w	800e30a <_rclc_take_new_data+0x11a>
 800e1fa:	7803      	ldrb	r3, [r0, #0]
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2b0a      	cmp	r3, #10
 800e200:	f200 8167 	bhi.w	800e4d2 <_rclc_take_new_data+0x2e2>
 800e204:	e8df f003 	tbb	[pc, r3]
 800e208:	44152d2d 	.word	0x44152d2d
 800e20c:	19191944 	.word	0x19191944
 800e210:	065a      	.short	0x065a
 800e212:	15          	.byte	0x15
 800e213:	00          	.byte	0x00
 800e214:	6840      	ldr	r0, [r0, #4]
 800e216:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f040 80b2 	bne.w	800e384 <_rclc_take_new_data+0x194>
 800e220:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e224:	2b00      	cmp	r3, #0
 800e226:	f040 80e4 	bne.w	800e3f2 <_rclc_take_new_data+0x202>
 800e22a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d16f      	bne.n	800e312 <_rclc_take_new_data+0x122>
 800e232:	2500      	movs	r5, #0
 800e234:	4628      	mov	r0, r5
 800e236:	b01b      	add	sp, #108	@ 0x6c
 800e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e23c:	6a0b      	ldr	r3, [r1, #32]
 800e23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d0f5      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e246:	6882      	ldr	r2, [r0, #8]
 800e248:	f100 0110 	add.w	r1, r0, #16
 800e24c:	6840      	ldr	r0, [r0, #4]
 800e24e:	f007 feb5 	bl	8015fbc <rcl_take_request>
 800e252:	4605      	mov	r5, r0
 800e254:	2800      	cmp	r0, #0
 800e256:	d0ec      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e258:	f240 2359 	movw	r3, #601	@ 0x259
 800e25c:	4298      	cmp	r0, r3
 800e25e:	d013      	beq.n	800e288 <_rclc_take_new_data+0x98>
 800e260:	e029      	b.n	800e2b6 <_rclc_take_new_data+0xc6>
 800e262:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e264:	680b      	ldr	r3, [r1, #0]
 800e266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0e1      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e26e:	2300      	movs	r3, #0
 800e270:	aa0a      	add	r2, sp, #40	@ 0x28
 800e272:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e276:	f007 ff03 	bl	8016080 <rcl_take>
 800e27a:	4605      	mov	r5, r0
 800e27c:	2800      	cmp	r0, #0
 800e27e:	d0d9      	beq.n	800e234 <_rclc_take_new_data+0x44>
 800e280:	f240 1391 	movw	r3, #401	@ 0x191
 800e284:	4298      	cmp	r0, r3
 800e286:	d116      	bne.n	800e2b6 <_rclc_take_new_data+0xc6>
 800e288:	2300      	movs	r3, #0
 800e28a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e28e:	e7d1      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e290:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e292:	698b      	ldr	r3, [r1, #24]
 800e294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0ca      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e29c:	6882      	ldr	r2, [r0, #8]
 800e29e:	f100 0110 	add.w	r1, r0, #16
 800e2a2:	6840      	ldr	r0, [r0, #4]
 800e2a4:	f007 f908 	bl	80154b8 <rcl_take_response>
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d0c1      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e2ae:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e2b2:	4298      	cmp	r0, r3
 800e2b4:	d0be      	beq.n	800e234 <_rclc_take_new_data+0x44>
 800e2b6:	f000 febf 	bl	800f038 <rcutils_reset_error>
 800e2ba:	e7bb      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e2bc:	6840      	ldr	r0, [r0, #4]
 800e2be:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d17d      	bne.n	800e3c2 <_rclc_take_new_data+0x1d2>
 800e2c6:	69c3      	ldr	r3, [r0, #28]
 800e2c8:	b11b      	cbz	r3, 800e2d2 <_rclc_take_new_data+0xe2>
 800e2ca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d144      	bne.n	800e35c <_rclc_take_new_data+0x16c>
 800e2d2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f040 80ac 	bne.w	800e434 <_rclc_take_new_data+0x244>
 800e2dc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d0a6      	beq.n	800e232 <_rclc_take_new_data+0x42>
 800e2e4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e2e6:	a90a      	add	r1, sp, #40	@ 0x28
 800e2e8:	3010      	adds	r0, #16
 800e2ea:	f009 f9c1 	bl	8017670 <rcl_action_take_result_response>
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d1e0      	bne.n	800e2b6 <_rclc_take_new_data+0xc6>
 800e2f4:	6860      	ldr	r0, [r4, #4]
 800e2f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2fa:	f009 fe2b 	bl	8017f54 <rclc_action_find_handle_by_result_request_sequence_number>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d098      	beq.n	800e234 <_rclc_take_new_data+0x44>
 800e302:	2301      	movs	r3, #1
 800e304:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e308:	e794      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e30a:	250b      	movs	r5, #11
 800e30c:	4628      	mov	r0, r5
 800e30e:	b01b      	add	sp, #108	@ 0x6c
 800e310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e312:	ae04      	add	r6, sp, #16
 800e314:	3010      	adds	r0, #16
 800e316:	aa0a      	add	r2, sp, #40	@ 0x28
 800e318:	4631      	mov	r1, r6
 800e31a:	f009 fc1f 	bl	8017b5c <rcl_action_take_cancel_request>
 800e31e:	4605      	mov	r5, r0
 800e320:	2800      	cmp	r0, #0
 800e322:	d1c8      	bne.n	800e2b6 <_rclc_take_new_data+0xc6>
 800e324:	a90a      	add	r1, sp, #40	@ 0x28
 800e326:	6860      	ldr	r0, [r4, #4]
 800e328:	f009 fdd4 	bl	8017ed4 <rclc_action_find_goal_handle_by_uuid>
 800e32c:	4607      	mov	r7, r0
 800e32e:	2800      	cmp	r0, #0
 800e330:	f000 80bb 	beq.w	800e4aa <_rclc_take_new_data+0x2ba>
 800e334:	2101      	movs	r1, #1
 800e336:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e33a:	f009 fd55 	bl	8017de8 <rcl_action_transition_goal_state>
 800e33e:	2803      	cmp	r0, #3
 800e340:	4684      	mov	ip, r0
 800e342:	f040 80a7 	bne.w	800e494 <_rclc_take_new_data+0x2a4>
 800e346:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e34a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e34e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e352:	e884 0003 	stmia.w	r4, {r0, r1}
 800e356:	f887 c008 	strb.w	ip, [r7, #8]
 800e35a:	e76b      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e35c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e35e:	3010      	adds	r0, #16
 800e360:	f009 fa06 	bl	8017770 <rcl_action_take_feedback>
 800e364:	4605      	mov	r5, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	d1a5      	bne.n	800e2b6 <_rclc_take_new_data+0xc6>
 800e36a:	6860      	ldr	r0, [r4, #4]
 800e36c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e36e:	f009 fdb1 	bl	8017ed4 <rclc_action_find_goal_handle_by_uuid>
 800e372:	4603      	mov	r3, r0
 800e374:	2800      	cmp	r0, #0
 800e376:	f000 80a3 	beq.w	800e4c0 <_rclc_take_new_data+0x2d0>
 800e37a:	2201      	movs	r2, #1
 800e37c:	6860      	ldr	r0, [r4, #4]
 800e37e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e382:	e7a6      	b.n	800e2d2 <_rclc_take_new_data+0xe2>
 800e384:	f009 fd80 	bl	8017e88 <rclc_action_take_goal_handle>
 800e388:	4606      	mov	r6, r0
 800e38a:	6860      	ldr	r0, [r4, #4]
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	f43f af47 	beq.w	800e220 <_rclc_take_new_data+0x30>
 800e392:	6070      	str	r0, [r6, #4]
 800e394:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e398:	69f2      	ldr	r2, [r6, #28]
 800e39a:	3010      	adds	r0, #16
 800e39c:	f009 fb26 	bl	80179ec <rcl_action_take_goal_request>
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	f040 808e 	bne.w	800e4c4 <_rclc_take_new_data+0x2d4>
 800e3a8:	69f7      	ldr	r7, [r6, #28]
 800e3aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e3ac:	7235      	strb	r5, [r6, #8]
 800e3ae:	f8c6 0009 	str.w	r0, [r6, #9]
 800e3b2:	f8c6 100d 	str.w	r1, [r6, #13]
 800e3b6:	6860      	ldr	r0, [r4, #4]
 800e3b8:	f8c6 2011 	str.w	r2, [r6, #17]
 800e3bc:	f8c6 3015 	str.w	r3, [r6, #21]
 800e3c0:	e72e      	b.n	800e220 <_rclc_take_new_data+0x30>
 800e3c2:	aa04      	add	r2, sp, #16
 800e3c4:	a90a      	add	r1, sp, #40	@ 0x28
 800e3c6:	3010      	adds	r0, #16
 800e3c8:	f009 f8da 	bl	8017580 <rcl_action_take_goal_response>
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	f47f af71 	bne.w	800e2b6 <_rclc_take_new_data+0xc6>
 800e3d4:	6860      	ldr	r0, [r4, #4]
 800e3d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3da:	f009 fda9 	bl	8017f30 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e3de:	b130      	cbz	r0, 800e3ee <_rclc_take_new_data+0x1fe>
 800e3e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e3ea:	f880 2020 	strb.w	r2, [r0, #32]
 800e3ee:	6860      	ldr	r0, [r4, #4]
 800e3f0:	e769      	b.n	800e2c6 <_rclc_take_new_data+0xd6>
 800e3f2:	3010      	adds	r0, #16
 800e3f4:	aa04      	add	r2, sp, #16
 800e3f6:	a90a      	add	r1, sp, #40	@ 0x28
 800e3f8:	f009 fb70 	bl	8017adc <rcl_action_take_result_request>
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	2800      	cmp	r0, #0
 800e400:	f47f af59 	bne.w	800e2b6 <_rclc_take_new_data+0xc6>
 800e404:	a904      	add	r1, sp, #16
 800e406:	6860      	ldr	r0, [r4, #4]
 800e408:	f009 fd64 	bl	8017ed4 <rclc_action_find_goal_handle_by_uuid>
 800e40c:	4607      	mov	r7, r0
 800e40e:	b160      	cbz	r0, 800e42a <_rclc_take_new_data+0x23a>
 800e410:	ad0a      	add	r5, sp, #40	@ 0x28
 800e412:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e416:	f04f 0c02 	mov.w	ip, #2
 800e41a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e41c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e41e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e422:	e886 0003 	stmia.w	r6, {r0, r1}
 800e426:	f887 c008 	strb.w	ip, [r7, #8]
 800e42a:	6860      	ldr	r0, [r4, #4]
 800e42c:	2300      	movs	r3, #0
 800e42e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e432:	e6fa      	b.n	800e22a <_rclc_take_new_data+0x3a>
 800e434:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e438:	a90a      	add	r1, sp, #40	@ 0x28
 800e43a:	3010      	adds	r0, #16
 800e43c:	f009 f958 	bl	80176f0 <rcl_action_take_cancel_response>
 800e440:	4605      	mov	r5, r0
 800e442:	2800      	cmp	r0, #0
 800e444:	f47f af37 	bne.w	800e2b6 <_rclc_take_new_data+0xc6>
 800e448:	6860      	ldr	r0, [r4, #4]
 800e44a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e44e:	f009 fd93 	bl	8017f78 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e452:	4606      	mov	r6, r0
 800e454:	6860      	ldr	r0, [r4, #4]
 800e456:	2e00      	cmp	r6, #0
 800e458:	f43f af40 	beq.w	800e2dc <_rclc_take_new_data+0xec>
 800e45c:	2701      	movs	r7, #1
 800e45e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e460:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e462:	2b00      	cmp	r3, #0
 800e464:	f43f af3a 	beq.w	800e2dc <_rclc_take_new_data+0xec>
 800e468:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e46a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e46e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e472:	f009 fd2f 	bl	8017ed4 <rclc_action_find_goal_handle_by_uuid>
 800e476:	b138      	cbz	r0, 800e488 <_rclc_take_new_data+0x298>
 800e478:	6860      	ldr	r0, [r4, #4]
 800e47a:	3501      	adds	r5, #1
 800e47c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e480:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e482:	42ab      	cmp	r3, r5
 800e484:	d8f0      	bhi.n	800e468 <_rclc_take_new_data+0x278>
 800e486:	e729      	b.n	800e2dc <_rclc_take_new_data+0xec>
 800e488:	6860      	ldr	r0, [r4, #4]
 800e48a:	3501      	adds	r5, #1
 800e48c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e48e:	42ab      	cmp	r3, r5
 800e490:	d8ea      	bhi.n	800e468 <_rclc_take_new_data+0x278>
 800e492:	e723      	b.n	800e2dc <_rclc_take_new_data+0xec>
 800e494:	ab06      	add	r3, sp, #24
 800e496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e498:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e49c:	2103      	movs	r1, #3
 800e49e:	6860      	ldr	r0, [r4, #4]
 800e4a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e4a4:	f009 fddc 	bl	8018060 <rclc_action_server_goal_cancel_reject>
 800e4a8:	e6c4      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e4aa:	ab06      	add	r3, sp, #24
 800e4ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e4b2:	2102      	movs	r1, #2
 800e4b4:	6860      	ldr	r0, [r4, #4]
 800e4b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e4ba:	f009 fdd1 	bl	8018060 <rclc_action_server_goal_cancel_reject>
 800e4be:	e6b9      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e4c0:	6860      	ldr	r0, [r4, #4]
 800e4c2:	e706      	b.n	800e2d2 <_rclc_take_new_data+0xe2>
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	6860      	ldr	r0, [r4, #4]
 800e4c8:	f009 fcee 	bl	8017ea8 <rclc_action_remove_used_goal_handle>
 800e4cc:	f000 fdb4 	bl	800f038 <rcutils_reset_error>
 800e4d0:	e6b0      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e4d2:	2501      	movs	r5, #1
 800e4d4:	e6ae      	b.n	800e234 <_rclc_take_new_data+0x44>
 800e4d6:	bf00      	nop

0800e4d8 <_rclc_execute.part.0>:
 800e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4da:	7803      	ldrb	r3, [r0, #0]
 800e4dc:	b085      	sub	sp, #20
 800e4de:	4604      	mov	r4, r0
 800e4e0:	2b0a      	cmp	r3, #10
 800e4e2:	f200 8139 	bhi.w	800e758 <_rclc_execute.part.0+0x280>
 800e4e6:	e8df f003 	tbb	[pc, r3]
 800e4ea:	4268      	.short	0x4268
 800e4ec:	06a75b4d 	.word	0x06a75b4d
 800e4f0:	721d0606 	.word	0x721d0606
 800e4f4:	62          	.byte	0x62
 800e4f5:	00          	.byte	0x00
 800e4f6:	2b06      	cmp	r3, #6
 800e4f8:	f000 8126 	beq.w	800e748 <_rclc_execute.part.0+0x270>
 800e4fc:	2b07      	cmp	r3, #7
 800e4fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e500:	f040 811c 	bne.w	800e73c <_rclc_execute.part.0+0x264>
 800e504:	f104 0510 	add.w	r5, r4, #16
 800e508:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e50c:	6880      	ldr	r0, [r0, #8]
 800e50e:	4798      	blx	r3
 800e510:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e512:	4629      	mov	r1, r5
 800e514:	6860      	ldr	r0, [r4, #4]
 800e516:	f007 fd91 	bl	801603c <rcl_send_response>
 800e51a:	4604      	mov	r4, r0
 800e51c:	b378      	cbz	r0, 800e57e <_rclc_execute.part.0+0xa6>
 800e51e:	f000 fd8b 	bl	800f038 <rcutils_reset_error>
 800e522:	e02c      	b.n	800e57e <_rclc_execute.part.0+0xa6>
 800e524:	6840      	ldr	r0, [r0, #4]
 800e526:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 808e 	beq.w	800e64c <_rclc_execute.part.0+0x174>
 800e530:	2600      	movs	r6, #0
 800e532:	2701      	movs	r7, #1
 800e534:	e004      	b.n	800e540 <_rclc_execute.part.0+0x68>
 800e536:	f009 fc81 	bl	8017e3c <rclc_action_send_result_request>
 800e53a:	b998      	cbnz	r0, 800e564 <_rclc_execute.part.0+0x8c>
 800e53c:	722f      	strb	r7, [r5, #8]
 800e53e:	6860      	ldr	r0, [r4, #4]
 800e540:	f009 fd2c 	bl	8017f9c <rclc_action_find_first_handle_with_goal_response>
 800e544:	4605      	mov	r5, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	d07f      	beq.n	800e64a <_rclc_execute.part.0+0x172>
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e554:	f885 6020 	strb.w	r6, [r5, #32]
 800e558:	4798      	blx	r3
 800e55a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e55e:	4628      	mov	r0, r5
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1e8      	bne.n	800e536 <_rclc_execute.part.0+0x5e>
 800e564:	6860      	ldr	r0, [r4, #4]
 800e566:	4629      	mov	r1, r5
 800e568:	f009 fc9e 	bl	8017ea8 <rclc_action_remove_used_goal_handle>
 800e56c:	e7e7      	b.n	800e53e <_rclc_execute.part.0+0x66>
 800e56e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e572:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800e576:	b100      	cbz	r0, 800e57a <_rclc_execute.part.0+0xa2>
 800e578:	68a0      	ldr	r0, [r4, #8]
 800e57a:	2400      	movs	r4, #0
 800e57c:	4798      	blx	r3
 800e57e:	4620      	mov	r0, r4
 800e580:	b005      	add	sp, #20
 800e582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e584:	6840      	ldr	r0, [r0, #4]
 800e586:	f008 f8b1 	bl	80166ec <rcl_timer_call>
 800e58a:	f240 3321 	movw	r3, #801	@ 0x321
 800e58e:	4604      	mov	r4, r0
 800e590:	4298      	cmp	r0, r3
 800e592:	d001      	beq.n	800e598 <_rclc_execute.part.0+0xc0>
 800e594:	2800      	cmp	r0, #0
 800e596:	d1c2      	bne.n	800e51e <_rclc_execute.part.0+0x46>
 800e598:	2400      	movs	r4, #0
 800e59a:	4620      	mov	r0, r4
 800e59c:	b005      	add	sp, #20
 800e59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a0:	2400      	movs	r4, #0
 800e5a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5a4:	6880      	ldr	r0, [r0, #8]
 800e5a6:	4798      	blx	r3
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	b005      	add	sp, #20
 800e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ae:	2400      	movs	r4, #0
 800e5b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5b2:	4798      	blx	r3
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	b005      	add	sp, #20
 800e5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ba:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e5be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e5c0:	b100      	cbz	r0, 800e5c4 <_rclc_execute.part.0+0xec>
 800e5c2:	68a0      	ldr	r0, [r4, #8]
 800e5c4:	2400      	movs	r4, #0
 800e5c6:	4798      	blx	r3
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	b005      	add	sp, #20
 800e5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ce:	6840      	ldr	r0, [r0, #4]
 800e5d0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e5d4:	bb3b      	cbnz	r3, 800e626 <_rclc_execute.part.0+0x14e>
 800e5d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d07d      	beq.n	800e6da <_rclc_execute.part.0+0x202>
 800e5de:	f640 0634 	movw	r6, #2100	@ 0x834
 800e5e2:	2701      	movs	r7, #1
 800e5e4:	e007      	b.n	800e5f6 <_rclc_execute.part.0+0x11e>
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f009 fcf0 	bl	8017fcc <rclc_action_server_response_goal_request>
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	6860      	ldr	r0, [r4, #4]
 800e5f0:	f009 fc5a 	bl	8017ea8 <rclc_action_remove_used_goal_handle>
 800e5f4:	6860      	ldr	r0, [r4, #4]
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	f009 fc82 	bl	8017f00 <rclc_action_find_first_handle_by_status>
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d068      	beq.n	800e6d4 <_rclc_execute.part.0+0x1fc>
 800e602:	6863      	ldr	r3, [r4, #4]
 800e604:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	4798      	blx	r3
 800e60a:	42b0      	cmp	r0, r6
 800e60c:	f04f 0100 	mov.w	r1, #0
 800e610:	d1e9      	bne.n	800e5e6 <_rclc_execute.part.0+0x10e>
 800e612:	2101      	movs	r1, #1
 800e614:	4628      	mov	r0, r5
 800e616:	f009 fcd9 	bl	8017fcc <rclc_action_server_response_goal_request>
 800e61a:	722f      	strb	r7, [r5, #8]
 800e61c:	e7ea      	b.n	800e5f4 <_rclc_execute.part.0+0x11c>
 800e61e:	6848      	ldr	r0, [r1, #4]
 800e620:	f009 fc42 	bl	8017ea8 <rclc_action_remove_used_goal_handle>
 800e624:	6860      	ldr	r0, [r4, #4]
 800e626:	f009 fc77 	bl	8017f18 <rclc_action_find_first_terminated_handle>
 800e62a:	4601      	mov	r1, r0
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d1f6      	bne.n	800e61e <_rclc_execute.part.0+0x146>
 800e630:	6860      	ldr	r0, [r4, #4]
 800e632:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e636:	e7ce      	b.n	800e5d6 <_rclc_execute.part.0+0xfe>
 800e638:	2400      	movs	r4, #0
 800e63a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e63c:	f100 0110 	add.w	r1, r0, #16
 800e640:	6880      	ldr	r0, [r0, #8]
 800e642:	4798      	blx	r3
 800e644:	4620      	mov	r0, r4
 800e646:	b005      	add	sp, #20
 800e648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e64a:	6860      	ldr	r0, [r4, #4]
 800e64c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e650:	b18b      	cbz	r3, 800e676 <_rclc_execute.part.0+0x19e>
 800e652:	68c5      	ldr	r5, [r0, #12]
 800e654:	b32d      	cbz	r5, 800e6a2 <_rclc_execute.part.0+0x1ca>
 800e656:	2600      	movs	r6, #0
 800e658:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e65c:	b143      	cbz	r3, 800e670 <_rclc_execute.part.0+0x198>
 800e65e:	69c3      	ldr	r3, [r0, #28]
 800e660:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e664:	b123      	cbz	r3, 800e670 <_rclc_execute.part.0+0x198>
 800e666:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e668:	4628      	mov	r0, r5
 800e66a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e66c:	4798      	blx	r3
 800e66e:	6860      	ldr	r0, [r4, #4]
 800e670:	682d      	ldr	r5, [r5, #0]
 800e672:	2d00      	cmp	r5, #0
 800e674:	d1f0      	bne.n	800e658 <_rclc_execute.part.0+0x180>
 800e676:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e67a:	b193      	cbz	r3, 800e6a2 <_rclc_execute.part.0+0x1ca>
 800e67c:	68c5      	ldr	r5, [r0, #12]
 800e67e:	b185      	cbz	r5, 800e6a2 <_rclc_execute.part.0+0x1ca>
 800e680:	2600      	movs	r6, #0
 800e682:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e686:	b14b      	cbz	r3, 800e69c <_rclc_execute.part.0+0x1c4>
 800e688:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e68a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e68e:	b12b      	cbz	r3, 800e69c <_rclc_execute.part.0+0x1c4>
 800e690:	4628      	mov	r0, r5
 800e692:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e696:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e698:	4798      	blx	r3
 800e69a:	6860      	ldr	r0, [r4, #4]
 800e69c:	682d      	ldr	r5, [r5, #0]
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	d1ef      	bne.n	800e682 <_rclc_execute.part.0+0x1aa>
 800e6a2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f43f af76 	beq.w	800e598 <_rclc_execute.part.0+0xc0>
 800e6ac:	2700      	movs	r7, #0
 800e6ae:	e00b      	b.n	800e6c8 <_rclc_execute.part.0+0x1f0>
 800e6b0:	6863      	ldr	r3, [r4, #4]
 800e6b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e6b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e6b6:	6a1e      	ldr	r6, [r3, #32]
 800e6b8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e6bc:	47b0      	blx	r6
 800e6be:	6860      	ldr	r0, [r4, #4]
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	f009 fbf1 	bl	8017ea8 <rclc_action_remove_used_goal_handle>
 800e6c6:	6860      	ldr	r0, [r4, #4]
 800e6c8:	f009 fc74 	bl	8017fb4 <rclc_action_find_first_handle_with_result_response>
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d1ee      	bne.n	800e6b0 <_rclc_execute.part.0+0x1d8>
 800e6d2:	e761      	b.n	800e598 <_rclc_execute.part.0+0xc0>
 800e6d4:	6860      	ldr	r0, [r4, #4]
 800e6d6:	f880 5020 	strb.w	r5, [r0, #32]
 800e6da:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f43f af5a 	beq.w	800e598 <_rclc_execute.part.0+0xc0>
 800e6e4:	68c5      	ldr	r5, [r0, #12]
 800e6e6:	b1b5      	cbz	r5, 800e716 <_rclc_execute.part.0+0x23e>
 800e6e8:	2602      	movs	r6, #2
 800e6ea:	e001      	b.n	800e6f0 <_rclc_execute.part.0+0x218>
 800e6ec:	682d      	ldr	r5, [r5, #0]
 800e6ee:	b195      	cbz	r5, 800e716 <_rclc_execute.part.0+0x23e>
 800e6f0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	d1f9      	bne.n	800e6ec <_rclc_execute.part.0+0x214>
 800e6f8:	69c3      	ldr	r3, [r0, #28]
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e6fe:	4798      	blx	r3
 800e700:	4603      	mov	r3, r0
 800e702:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e706:	4628      	mov	r0, r5
 800e708:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e70c:	b143      	cbz	r3, 800e720 <_rclc_execute.part.0+0x248>
 800e70e:	f009 fc7b 	bl	8018008 <rclc_action_server_goal_cancel_accept>
 800e712:	6860      	ldr	r0, [r4, #4]
 800e714:	e7ea      	b.n	800e6ec <_rclc_execute.part.0+0x214>
 800e716:	2300      	movs	r3, #0
 800e718:	461c      	mov	r4, r3
 800e71a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e71e:	e72e      	b.n	800e57e <_rclc_execute.part.0+0xa6>
 800e720:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e722:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e726:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e72a:	2101      	movs	r1, #1
 800e72c:	6860      	ldr	r0, [r4, #4]
 800e72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e732:	f009 fc95 	bl	8018060 <rclc_action_server_goal_cancel_reject>
 800e736:	722e      	strb	r6, [r5, #8]
 800e738:	6860      	ldr	r0, [r4, #4]
 800e73a:	e7d7      	b.n	800e6ec <_rclc_execute.part.0+0x214>
 800e73c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e73e:	f104 0510 	add.w	r5, r4, #16
 800e742:	6880      	ldr	r0, [r0, #8]
 800e744:	4798      	blx	r3
 800e746:	e6e3      	b.n	800e510 <_rclc_execute.part.0+0x38>
 800e748:	f100 0510 	add.w	r5, r0, #16
 800e74c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e74e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e750:	4629      	mov	r1, r5
 800e752:	6880      	ldr	r0, [r0, #8]
 800e754:	4798      	blx	r3
 800e756:	e6db      	b.n	800e510 <_rclc_execute.part.0+0x38>
 800e758:	2401      	movs	r4, #1
 800e75a:	e710      	b.n	800e57e <_rclc_execute.part.0+0xa6>

0800e75c <rclc_executor_trigger_any>:
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d03d      	beq.n	800e7dc <rclc_executor_trigger_any+0x80>
 800e760:	2900      	cmp	r1, #0
 800e762:	d03c      	beq.n	800e7de <rclc_executor_trigger_any+0x82>
 800e764:	4603      	mov	r3, r0
 800e766:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e76a:	2200      	movs	r2, #0
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d035      	beq.n	800e7dc <rclc_executor_trigger_any+0x80>
 800e770:	b430      	push	{r4, r5}
 800e772:	f893 c000 	ldrb.w	ip, [r3]
 800e776:	f1bc 0f08 	cmp.w	ip, #8
 800e77a:	d11d      	bne.n	800e7b8 <rclc_executor_trigger_any+0x5c>
 800e77c:	685c      	ldr	r4, [r3, #4]
 800e77e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e780:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e784:	d105      	bne.n	800e792 <rclc_executor_trigger_any+0x36>
 800e786:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e78a:	b910      	cbnz	r0, 800e792 <rclc_executor_trigger_any+0x36>
 800e78c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e790:	b128      	cbz	r0, 800e79e <rclc_executor_trigger_any+0x42>
 800e792:	bc30      	pop	{r4, r5}
 800e794:	4770      	bx	lr
 800e796:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d1f9      	bne.n	800e792 <rclc_executor_trigger_any+0x36>
 800e79e:	3201      	adds	r2, #1
 800e7a0:	3340      	adds	r3, #64	@ 0x40
 800e7a2:	4291      	cmp	r1, r2
 800e7a4:	d017      	beq.n	800e7d6 <rclc_executor_trigger_any+0x7a>
 800e7a6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d0f1      	beq.n	800e792 <rclc_executor_trigger_any+0x36>
 800e7ae:	f893 c000 	ldrb.w	ip, [r3]
 800e7b2:	f1bc 0f08 	cmp.w	ip, #8
 800e7b6:	d0e1      	beq.n	800e77c <rclc_executor_trigger_any+0x20>
 800e7b8:	f1bc 0f09 	cmp.w	ip, #9
 800e7bc:	d1eb      	bne.n	800e796 <rclc_executor_trigger_any+0x3a>
 800e7be:	685c      	ldr	r4, [r3, #4]
 800e7c0:	6a25      	ldr	r5, [r4, #32]
 800e7c2:	2d00      	cmp	r5, #0
 800e7c4:	d1e5      	bne.n	800e792 <rclc_executor_trigger_any+0x36>
 800e7c6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d1e1      	bne.n	800e792 <rclc_executor_trigger_any+0x36>
 800e7ce:	3201      	adds	r2, #1
 800e7d0:	3340      	adds	r3, #64	@ 0x40
 800e7d2:	4291      	cmp	r1, r2
 800e7d4:	d1e7      	bne.n	800e7a6 <rclc_executor_trigger_any+0x4a>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	bc30      	pop	{r4, r5}
 800e7da:	4770      	bx	lr
 800e7dc:	4770      	bx	lr
 800e7de:	4608      	mov	r0, r1
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop

0800e7e4 <rclc_executor_get_zero_initialized_executor>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	2288      	movs	r2, #136	@ 0x88
 800e7ea:	4902      	ldr	r1, [pc, #8]	@ (800e7f4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e7ec:	f00d f98d 	bl	801bb0a <memcpy>
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	bd10      	pop	{r4, pc}
 800e7f4:	0801c8f0 	.word	0x0801c8f0

0800e7f8 <rclc_executor_init>:
 800e7f8:	2900      	cmp	r1, #0
 800e7fa:	d06a      	beq.n	800e8d2 <rclc_executor_init+0xda>
 800e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	4605      	mov	r5, r0
 800e802:	b0b0      	sub	sp, #192	@ 0xc0
 800e804:	2800      	cmp	r0, #0
 800e806:	d05c      	beq.n	800e8c2 <rclc_executor_init+0xca>
 800e808:	4616      	mov	r6, r2
 800e80a:	4618      	mov	r0, r3
 800e80c:	4688      	mov	r8, r1
 800e80e:	461f      	mov	r7, r3
 800e810:	f000 fbee 	bl	800eff0 <rcutils_allocator_is_valid>
 800e814:	2e00      	cmp	r6, #0
 800e816:	d054      	beq.n	800e8c2 <rclc_executor_init+0xca>
 800e818:	f080 0401 	eor.w	r4, r0, #1
 800e81c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800e820:	d14f      	bne.n	800e8c2 <rclc_executor_init+0xca>
 800e822:	2288      	movs	r2, #136	@ 0x88
 800e824:	4930      	ldr	r1, [pc, #192]	@ (800e8e8 <rclc_executor_init+0xf0>)
 800e826:	a80e      	add	r0, sp, #56	@ 0x38
 800e828:	f00d f96f 	bl	801bb0a <memcpy>
 800e82c:	a90e      	add	r1, sp, #56	@ 0x38
 800e82e:	2288      	movs	r2, #136	@ 0x88
 800e830:	4628      	mov	r0, r5
 800e832:	f00d f96a 	bl	801bb0a <memcpy>
 800e836:	4668      	mov	r0, sp
 800e838:	f8c5 8000 	str.w	r8, [r5]
 800e83c:	60ae      	str	r6, [r5, #8]
 800e83e:	f008 f8cb 	bl	80169d8 <rcl_get_zero_initialized_wait_set>
 800e842:	46ec      	mov	ip, sp
 800e844:	f105 0e14 	add.w	lr, r5, #20
 800e848:	f8d7 8000 	ldr.w	r8, [r7]
 800e84c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e850:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e858:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e85c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e860:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800e8e0 <rclc_executor_init+0xe8>
 800e864:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e868:	f8dc 3000 	ldr.w	r3, [ip]
 800e86c:	01b0      	lsls	r0, r6, #6
 800e86e:	6939      	ldr	r1, [r7, #16]
 800e870:	f8ce 3000 	str.w	r3, [lr]
 800e874:	612f      	str	r7, [r5, #16]
 800e876:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800e87a:	47c0      	blx	r8
 800e87c:	6068      	str	r0, [r5, #4]
 800e87e:	b908      	cbnz	r0, 800e884 <rclc_executor_init+0x8c>
 800e880:	e029      	b.n	800e8d6 <rclc_executor_init+0xde>
 800e882:	6868      	ldr	r0, [r5, #4]
 800e884:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e888:	3401      	adds	r4, #1
 800e88a:	4631      	mov	r1, r6
 800e88c:	f000 fa74 	bl	800ed78 <rclc_executor_handle_init>
 800e890:	42a6      	cmp	r6, r4
 800e892:	d8f6      	bhi.n	800e882 <rclc_executor_init+0x8a>
 800e894:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e898:	f000 fa62 	bl	800ed60 <rclc_executor_handle_counters_zero_init>
 800e89c:	4a13      	ldr	r2, [pc, #76]	@ (800e8ec <rclc_executor_init+0xf4>)
 800e89e:	2300      	movs	r3, #0
 800e8a0:	6868      	ldr	r0, [r5, #4]
 800e8a2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800e8a6:	b168      	cbz	r0, 800e8c4 <rclc_executor_init+0xcc>
 800e8a8:	68ab      	ldr	r3, [r5, #8]
 800e8aa:	b173      	cbz	r3, 800e8ca <rclc_executor_init+0xd2>
 800e8ac:	692a      	ldr	r2, [r5, #16]
 800e8ae:	fab2 f382 	clz	r3, r2
 800e8b2:	095b      	lsrs	r3, r3, #5
 800e8b4:	b14a      	cbz	r2, 800e8ca <rclc_executor_init+0xd2>
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800e8bc:	b030      	add	sp, #192	@ 0xc0
 800e8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c2:	200b      	movs	r0, #11
 800e8c4:	b030      	add	sp, #192	@ 0xc0
 800e8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	b030      	add	sp, #192	@ 0xc0
 800e8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d2:	200b      	movs	r0, #11
 800e8d4:	4770      	bx	lr
 800e8d6:	200a      	movs	r0, #10
 800e8d8:	e7f4      	b.n	800e8c4 <rclc_executor_init+0xcc>
 800e8da:	bf00      	nop
 800e8dc:	f3af 8000 	nop.w
 800e8e0:	3b9aca00 	.word	0x3b9aca00
 800e8e4:	00000000 	.word	0x00000000
 800e8e8:	0801c8f0 	.word	0x0801c8f0
 800e8ec:	0800e75d 	.word	0x0800e75d

0800e8f0 <rclc_executor_add_timer>:
 800e8f0:	b351      	cbz	r1, 800e948 <rclc_executor_add_timer+0x58>
 800e8f2:	fab0 f280 	clz	r2, r0
 800e8f6:	b570      	push	{r4, r5, r6, lr}
 800e8f8:	0952      	lsrs	r2, r2, #5
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	b1e0      	cbz	r0, 800e938 <rclc_executor_add_timer+0x48>
 800e8fe:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800e902:	4283      	cmp	r3, r0
 800e904:	d301      	bcc.n	800e90a <rclc_executor_add_timer+0x1a>
 800e906:	2001      	movs	r0, #1
 800e908:	bd70      	pop	{r4, r5, r6, pc}
 800e90a:	6860      	ldr	r0, [r4, #4]
 800e90c:	019d      	lsls	r5, r3, #6
 800e90e:	1c5e      	adds	r6, r3, #1
 800e910:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e914:	6059      	str	r1, [r3, #4]
 800e916:	2102      	movs	r1, #2
 800e918:	5341      	strh	r1, [r0, r5]
 800e91a:	2101      	movs	r1, #1
 800e91c:	f104 0514 	add.w	r5, r4, #20
 800e920:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e922:	8719      	strh	r1, [r3, #56]	@ 0x38
 800e924:	4628      	mov	r0, r5
 800e926:	60e6      	str	r6, [r4, #12]
 800e928:	f008 f86a 	bl	8016a00 <rcl_wait_set_is_valid>
 800e92c:	b930      	cbnz	r0, 800e93c <rclc_executor_add_timer+0x4c>
 800e92e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e930:	2000      	movs	r0, #0
 800e932:	3301      	adds	r3, #1
 800e934:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	200b      	movs	r0, #11
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	4628      	mov	r0, r5
 800e93e:	f008 f865 	bl	8016a0c <rcl_wait_set_fini>
 800e942:	2800      	cmp	r0, #0
 800e944:	d0f3      	beq.n	800e92e <rclc_executor_add_timer+0x3e>
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	200b      	movs	r0, #11
 800e94a:	4770      	bx	lr

0800e94c <rclc_executor_prepare>:
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d044      	beq.n	800e9da <rclc_executor_prepare+0x8e>
 800e950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e952:	f100 0514 	add.w	r5, r0, #20
 800e956:	b09b      	sub	sp, #108	@ 0x6c
 800e958:	4604      	mov	r4, r0
 800e95a:	4628      	mov	r0, r5
 800e95c:	f008 f850 	bl	8016a00 <rcl_wait_set_is_valid>
 800e960:	b110      	cbz	r0, 800e968 <rclc_executor_prepare+0x1c>
 800e962:	2000      	movs	r0, #0
 800e964:	b01b      	add	sp, #108	@ 0x6c
 800e966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e968:	4628      	mov	r0, r5
 800e96a:	f008 f84f 	bl	8016a0c <rcl_wait_set_fini>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d130      	bne.n	800e9d4 <rclc_executor_prepare+0x88>
 800e972:	a80c      	add	r0, sp, #48	@ 0x30
 800e974:	ae04      	add	r6, sp, #16
 800e976:	f008 f82f 	bl	80169d8 <rcl_get_zero_initialized_wait_set>
 800e97a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e97e:	46ae      	mov	lr, r5
 800e980:	6927      	ldr	r7, [r4, #16]
 800e982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e986:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e98a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e98e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e992:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e996:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e99a:	f8dc 3000 	ldr.w	r3, [ip]
 800e99e:	f8ce 3000 	str.w	r3, [lr]
 800e9a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e9a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	6822      	ldr	r2, [r4, #0]
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e9b0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e9b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e9b6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800e9ba:	e9cd 2100 	strd	r2, r1, [sp]
 800e9be:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800e9c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e9c2:	f008 fb23 	bl	801700c <rcl_wait_set_init>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d0cc      	beq.n	800e964 <rclc_executor_prepare+0x18>
 800e9ca:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e9cc:	f000 fb34 	bl	800f038 <rcutils_reset_error>
 800e9d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e9d2:	e7c7      	b.n	800e964 <rclc_executor_prepare+0x18>
 800e9d4:	f000 fb30 	bl	800f038 <rcutils_reset_error>
 800e9d8:	e7cb      	b.n	800e972 <rclc_executor_prepare+0x26>
 800e9da:	200b      	movs	r0, #11
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop

0800e9e0 <rclc_executor_spin_some.part.0>:
 800e9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	4691      	mov	r9, r2
 800e9e8:	4698      	mov	r8, r3
 800e9ea:	f7ff ffaf 	bl	800e94c <rclc_executor_prepare>
 800e9ee:	f105 0614 	add.w	r6, r5, #20
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f008 f8d6 	bl	8016ba4 <rcl_wait_set_clear>
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 80a8 	bne.w	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800ea00:	68ab      	ldr	r3, [r5, #8]
 800ea02:	b30b      	cbz	r3, 800ea48 <rclc_executor_spin_some.part.0+0x68>
 800ea04:	4604      	mov	r4, r0
 800ea06:	6869      	ldr	r1, [r5, #4]
 800ea08:	01a2      	lsls	r2, r4, #6
 800ea0a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ea0e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ea12:	b1cb      	cbz	r3, 800ea48 <rclc_executor_spin_some.part.0+0x68>
 800ea14:	5c8b      	ldrb	r3, [r1, r2]
 800ea16:	2b0a      	cmp	r3, #10
 800ea18:	f200 80de 	bhi.w	800ebd8 <rclc_executor_spin_some.part.0+0x1f8>
 800ea1c:	e8df f003 	tbb	[pc, r3]
 800ea20:	8da99d9d 	.word	0x8da99d9d
 800ea24:	0606068d 	.word	0x0606068d
 800ea28:	c1ce      	.short	0xc1ce
 800ea2a:	b5          	.byte	0xb5
 800ea2b:	00          	.byte	0x00
 800ea2c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ea30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ea34:	4630      	mov	r0, r6
 800ea36:	f008 fc05 	bl	8017244 <rcl_wait_set_add_service>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f040 8087 	bne.w	800eb4e <rclc_executor_spin_some.part.0+0x16e>
 800ea40:	3401      	adds	r4, #1
 800ea42:	68ab      	ldr	r3, [r5, #8]
 800ea44:	429c      	cmp	r4, r3
 800ea46:	d3de      	bcc.n	800ea06 <rclc_executor_spin_some.part.0+0x26>
 800ea48:	4643      	mov	r3, r8
 800ea4a:	464a      	mov	r2, r9
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f008 fc27 	bl	80172a0 <rcl_wait>
 800ea52:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 80c6 	beq.w	800ebe8 <rclc_executor_spin_some.part.0+0x208>
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	f040 80bb 	bne.w	800ebd8 <rclc_executor_spin_some.part.0+0x1f8>
 800ea62:	68ab      	ldr	r3, [r5, #8]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 8159 	beq.w	800ed1c <rclc_executor_spin_some.part.0+0x33c>
 800ea6a:	2400      	movs	r4, #0
 800ea6c:	f240 1991 	movw	r9, #401	@ 0x191
 800ea70:	46a0      	mov	r8, r4
 800ea72:	e00a      	b.n	800ea8a <rclc_executor_spin_some.part.0+0xaa>
 800ea74:	f7ff fb6e 	bl	800e154 <_rclc_check_for_new_data>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	b110      	cbz	r0, 800ea82 <rclc_executor_spin_some.part.0+0xa2>
 800ea7c:	4548      	cmp	r0, r9
 800ea7e:	f040 80b1 	bne.w	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ea82:	68ab      	ldr	r3, [r5, #8]
 800ea84:	4598      	cmp	r8, r3
 800ea86:	f080 8126 	bcs.w	800ecd6 <rclc_executor_spin_some.part.0+0x2f6>
 800ea8a:	686a      	ldr	r2, [r5, #4]
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ea92:	f108 0801 	add.w	r8, r8, #1
 800ea96:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ea9a:	f1bc 0f00 	cmp.w	ip, #0
 800ea9e:	d1e9      	bne.n	800ea74 <rclc_executor_spin_some.part.0+0x94>
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800eaa8:	4798      	blx	r3
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f000 809a 	beq.w	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800eab0:	68ab      	ldr	r3, [r5, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 8096 	beq.w	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800eab8:	f04f 0800 	mov.w	r8, #0
 800eabc:	f240 1991 	movw	r9, #401	@ 0x191
 800eac0:	e009      	b.n	800ead6 <rclc_executor_spin_some.part.0+0xf6>
 800eac2:	f7ff fb95 	bl	800e1f0 <_rclc_take_new_data>
 800eac6:	4604      	mov	r4, r0
 800eac8:	b110      	cbz	r0, 800ead0 <rclc_executor_spin_some.part.0+0xf0>
 800eaca:	4548      	cmp	r0, r9
 800eacc:	f040 808a 	bne.w	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ead0:	68ab      	ldr	r3, [r5, #8]
 800ead2:	4598      	cmp	r8, r3
 800ead4:	d209      	bcs.n	800eaea <rclc_executor_spin_some.part.0+0x10a>
 800ead6:	6868      	ldr	r0, [r5, #4]
 800ead8:	4631      	mov	r1, r6
 800eada:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800eade:	f108 0801 	add.w	r8, r8, #1
 800eae2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	d1eb      	bne.n	800eac2 <rclc_executor_spin_some.part.0+0xe2>
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d07a      	beq.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800eaee:	2600      	movs	r6, #0
 800eaf0:	e00e      	b.n	800eb10 <rclc_executor_spin_some.part.0+0x130>
 800eaf2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800eaf6:	2a08      	cmp	r2, #8
 800eaf8:	f000 80fc 	beq.w	800ecf4 <rclc_executor_spin_some.part.0+0x314>
 800eafc:	2a09      	cmp	r2, #9
 800eafe:	f000 80ee 	beq.w	800ecde <rclc_executor_spin_some.part.0+0x2fe>
 800eb02:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800eb06:	b98a      	cbnz	r2, 800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800eb08:	3601      	adds	r6, #1
 800eb0a:	429e      	cmp	r6, r3
 800eb0c:	d267      	bcs.n	800ebde <rclc_executor_spin_some.part.0+0x1fe>
 800eb0e:	2400      	movs	r4, #0
 800eb10:	686a      	ldr	r2, [r5, #4]
 800eb12:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800eb16:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800eb1a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800eb1e:	2900      	cmp	r1, #0
 800eb20:	d060      	beq.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800eb22:	7841      	ldrb	r1, [r0, #1]
 800eb24:	2900      	cmp	r1, #0
 800eb26:	d0e4      	beq.n	800eaf2 <rclc_executor_spin_some.part.0+0x112>
 800eb28:	2901      	cmp	r1, #1
 800eb2a:	d1ed      	bne.n	800eb08 <rclc_executor_spin_some.part.0+0x128>
 800eb2c:	f7ff fcd4 	bl	800e4d8 <_rclc_execute.part.0>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	f040 80b5 	bne.w	800eca0 <rclc_executor_spin_some.part.0+0x2c0>
 800eb36:	68ab      	ldr	r3, [r5, #8]
 800eb38:	e7e6      	b.n	800eb08 <rclc_executor_spin_some.part.0+0x128>
 800eb3a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eb3e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eb42:	4630      	mov	r0, r6
 800eb44:	f008 fb52 	bl	80171ec <rcl_wait_set_add_client>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f43f af79 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800eb4e:	4607      	mov	r7, r0
 800eb50:	f000 fa72 	bl	800f038 <rcutils_reset_error>
 800eb54:	4638      	mov	r0, r7
 800eb56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eb5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eb62:	4630      	mov	r0, r6
 800eb64:	f007 fff2 	bl	8016b4c <rcl_wait_set_add_subscription>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	f43f af69 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800eb6e:	4607      	mov	r7, r0
 800eb70:	e7ee      	b.n	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800eb72:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eb76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f008 fb06 	bl	801718c <rcl_wait_set_add_timer>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	f43f af5d 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800eb86:	4607      	mov	r7, r0
 800eb88:	e7e2      	b.n	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800eb8a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eb8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eb92:	4630      	mov	r0, r6
 800eb94:	f008 face 	bl	8017134 <rcl_wait_set_add_guard_condition>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	f43f af51 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800eb9e:	4607      	mov	r7, r0
 800eba0:	e7d6      	b.n	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800eba2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eba6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ebaa:	4630      	mov	r0, r6
 800ebac:	3110      	adds	r1, #16
 800ebae:	f009 f84d 	bl	8017c4c <rcl_action_wait_set_add_action_server>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f af44 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800ebb8:	4607      	mov	r7, r0
 800ebba:	e7c9      	b.n	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800ebbc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	3110      	adds	r1, #16
 800ebca:	f008 fe15 	bl	80177f8 <rcl_action_wait_set_add_action_client>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	f43f af36 	beq.w	800ea40 <rclc_executor_spin_some.part.0+0x60>
 800ebd4:	4607      	mov	r7, r0
 800ebd6:	e7bb      	b.n	800eb50 <rclc_executor_spin_some.part.0+0x170>
 800ebd8:	2701      	movs	r7, #1
 800ebda:	f000 fa2d 	bl	800f038 <rcutils_reset_error>
 800ebde:	4638      	mov	r0, r7
 800ebe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	4627      	mov	r7, r4
 800ebe6:	e7fa      	b.n	800ebde <rclc_executor_spin_some.part.0+0x1fe>
 800ebe8:	68ab      	ldr	r3, [r5, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f000 8093 	beq.w	800ed16 <rclc_executor_spin_some.part.0+0x336>
 800ebf0:	2400      	movs	r4, #0
 800ebf2:	f240 1991 	movw	r9, #401	@ 0x191
 800ebf6:	46a0      	mov	r8, r4
 800ebf8:	e008      	b.n	800ec0c <rclc_executor_spin_some.part.0+0x22c>
 800ebfa:	f7ff faab 	bl	800e154 <_rclc_check_for_new_data>
 800ebfe:	4604      	mov	r4, r0
 800ec00:	b108      	cbz	r0, 800ec06 <rclc_executor_spin_some.part.0+0x226>
 800ec02:	4548      	cmp	r0, r9
 800ec04:	d1ee      	bne.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ec06:	68ab      	ldr	r3, [r5, #8]
 800ec08:	4598      	cmp	r8, r3
 800ec0a:	d266      	bcs.n	800ecda <rclc_executor_spin_some.part.0+0x2fa>
 800ec0c:	686a      	ldr	r2, [r5, #4]
 800ec0e:	4631      	mov	r1, r6
 800ec10:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ec14:	f108 0801 	add.w	r8, r8, #1
 800ec18:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ec1c:	f1bc 0f00 	cmp.w	ip, #0
 800ec20:	d1eb      	bne.n	800ebfa <rclc_executor_spin_some.part.0+0x21a>
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ec2a:	4798      	blx	r3
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d0d9      	beq.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ec30:	68ab      	ldr	r3, [r5, #8]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0d6      	beq.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ec36:	f04f 0a00 	mov.w	sl, #0
 800ec3a:	f240 1891 	movw	r8, #401	@ 0x191
 800ec3e:	f240 2959 	movw	r9, #601	@ 0x259
 800ec42:	e00e      	b.n	800ec62 <rclc_executor_spin_some.part.0+0x282>
 800ec44:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ec48:	2b08      	cmp	r3, #8
 800ec4a:	d034      	beq.n	800ecb6 <rclc_executor_spin_some.part.0+0x2d6>
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d029      	beq.n	800eca4 <rclc_executor_spin_some.part.0+0x2c4>
 800ec50:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ec54:	bb03      	cbnz	r3, 800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ec56:	f10a 0a01 	add.w	sl, sl, #1
 800ec5a:	68ab      	ldr	r3, [r5, #8]
 800ec5c:	459a      	cmp	sl, r3
 800ec5e:	d2be      	bcs.n	800ebde <rclc_executor_spin_some.part.0+0x1fe>
 800ec60:	2400      	movs	r4, #0
 800ec62:	6868      	ldr	r0, [r5, #4]
 800ec64:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800ec68:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800ec6c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d0b7      	beq.n	800ebe4 <rclc_executor_spin_some.part.0+0x204>
 800ec74:	4631      	mov	r1, r6
 800ec76:	f7ff fabb 	bl	800e1f0 <_rclc_take_new_data>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	bf18      	it	ne
 800ec7e:	4540      	cmpne	r0, r8
 800ec80:	d001      	beq.n	800ec86 <rclc_executor_spin_some.part.0+0x2a6>
 800ec82:	4548      	cmp	r0, r9
 800ec84:	d10c      	bne.n	800eca0 <rclc_executor_spin_some.part.0+0x2c0>
 800ec86:	686b      	ldr	r3, [r5, #4]
 800ec88:	eb13 000b 	adds.w	r0, r3, fp
 800ec8c:	d021      	beq.n	800ecd2 <rclc_executor_spin_some.part.0+0x2f2>
 800ec8e:	7842      	ldrb	r2, [r0, #1]
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	d0d7      	beq.n	800ec44 <rclc_executor_spin_some.part.0+0x264>
 800ec94:	2a01      	cmp	r2, #1
 800ec96:	d1de      	bne.n	800ec56 <rclc_executor_spin_some.part.0+0x276>
 800ec98:	f7ff fc1e 	bl	800e4d8 <_rclc_execute.part.0>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d0da      	beq.n	800ec56 <rclc_executor_spin_some.part.0+0x276>
 800eca0:	4607      	mov	r7, r0
 800eca2:	e79c      	b.n	800ebde <rclc_executor_spin_some.part.0+0x1fe>
 800eca4:	6843      	ldr	r3, [r0, #4]
 800eca6:	6a1a      	ldr	r2, [r3, #32]
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	d1f5      	bne.n	800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ecac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d0d0      	beq.n	800ec56 <rclc_executor_spin_some.part.0+0x276>
 800ecb4:	e7f0      	b.n	800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ecb6:	6843      	ldr	r3, [r0, #4]
 800ecb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ecba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ecbe:	d1eb      	bne.n	800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ecc0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ecc4:	2a00      	cmp	r2, #0
 800ecc6:	d1e7      	bne.n	800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ecc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0c2      	beq.n	800ec56 <rclc_executor_spin_some.part.0+0x276>
 800ecd0:	e7e2      	b.n	800ec98 <rclc_executor_spin_some.part.0+0x2b8>
 800ecd2:	270b      	movs	r7, #11
 800ecd4:	e783      	b.n	800ebde <rclc_executor_spin_some.part.0+0x1fe>
 800ecd6:	686a      	ldr	r2, [r5, #4]
 800ecd8:	e6e2      	b.n	800eaa0 <rclc_executor_spin_some.part.0+0xc0>
 800ecda:	686a      	ldr	r2, [r5, #4]
 800ecdc:	e7a1      	b.n	800ec22 <rclc_executor_spin_some.part.0+0x242>
 800ecde:	6842      	ldr	r2, [r0, #4]
 800ece0:	6a11      	ldr	r1, [r2, #32]
 800ece2:	2900      	cmp	r1, #0
 800ece4:	f47f af22 	bne.w	800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800ece8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ecec:	2a00      	cmp	r2, #0
 800ecee:	f43f af0b 	beq.w	800eb08 <rclc_executor_spin_some.part.0+0x128>
 800ecf2:	e71b      	b.n	800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800ecf4:	6842      	ldr	r2, [r0, #4]
 800ecf6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ecf8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ecfc:	f47f af16 	bne.w	800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800ed00:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ed04:	2900      	cmp	r1, #0
 800ed06:	f47f af11 	bne.w	800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800ed0a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ed0e:	2a00      	cmp	r2, #0
 800ed10:	f43f aefa 	beq.w	800eb08 <rclc_executor_spin_some.part.0+0x128>
 800ed14:	e70a      	b.n	800eb2c <rclc_executor_spin_some.part.0+0x14c>
 800ed16:	686a      	ldr	r2, [r5, #4]
 800ed18:	461c      	mov	r4, r3
 800ed1a:	e782      	b.n	800ec22 <rclc_executor_spin_some.part.0+0x242>
 800ed1c:	686a      	ldr	r2, [r5, #4]
 800ed1e:	461c      	mov	r4, r3
 800ed20:	e6be      	b.n	800eaa0 <rclc_executor_spin_some.part.0+0xc0>
 800ed22:	bf00      	nop

0800ed24 <rclc_executor_spin>:
 800ed24:	b1d0      	cbz	r0, 800ed5c <rclc_executor_spin+0x38>
 800ed26:	b510      	push	{r4, lr}
 800ed28:	4604      	mov	r4, r0
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	e004      	b.n	800ed38 <rclc_executor_spin+0x14>
 800ed2e:	f7ff fe57 	bl	800e9e0 <rclc_executor_spin_some.part.0>
 800ed32:	f030 0302 	bics.w	r3, r0, #2
 800ed36:	d10f      	bne.n	800ed58 <rclc_executor_spin+0x34>
 800ed38:	6820      	ldr	r0, [r4, #0]
 800ed3a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ed3e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed42:	f006 fc29 	bl	8015598 <rcl_context_is_valid>
 800ed46:	4601      	mov	r1, r0
 800ed48:	4620      	mov	r0, r4
 800ed4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	d1ed      	bne.n	800ed2e <rclc_executor_spin+0xa>
 800ed52:	f000 f971 	bl	800f038 <rcutils_reset_error>
 800ed56:	2001      	movs	r0, #1
 800ed58:	b002      	add	sp, #8
 800ed5a:	bd10      	pop	{r4, pc}
 800ed5c:	200b      	movs	r0, #11
 800ed5e:	4770      	bx	lr

0800ed60 <rclc_executor_handle_counters_zero_init>:
 800ed60:	b130      	cbz	r0, 800ed70 <rclc_executor_handle_counters_zero_init+0x10>
 800ed62:	2220      	movs	r2, #32
 800ed64:	2100      	movs	r1, #0
 800ed66:	b508      	push	{r3, lr}
 800ed68:	f00c fe06 	bl	801b978 <memset>
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	bd08      	pop	{r3, pc}
 800ed70:	200b      	movs	r0, #11
 800ed72:	4770      	bx	lr
 800ed74:	0000      	movs	r0, r0
	...

0800ed78 <rclc_executor_handle_init>:
 800ed78:	4603      	mov	r3, r0
 800ed7a:	b178      	cbz	r0, 800ed9c <rclc_executor_handle_init+0x24>
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f04f 0c0b 	mov.w	ip, #11
 800ed82:	6341      	str	r1, [r0, #52]	@ 0x34
 800ed84:	4610      	mov	r0, r2
 800ed86:	f8a3 c000 	strh.w	ip, [r3]
 800ed8a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed8c:	871a      	strh	r2, [r3, #56]	@ 0x38
 800ed8e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800eda0 <rclc_executor_handle_init+0x28>
 800ed92:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800ed96:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800ed9a:	4770      	bx	lr
 800ed9c:	200b      	movs	r0, #11
 800ed9e:	4770      	bx	lr
	...

0800eda8 <rclc_support_init_with_options>:
 800eda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edac:	b083      	sub	sp, #12
 800edae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	bf18      	it	ne
 800edb4:	2f00      	cmpne	r7, #0
 800edb6:	d027      	beq.n	800ee08 <rclc_support_init_with_options+0x60>
 800edb8:	4604      	mov	r4, r0
 800edba:	b328      	cbz	r0, 800ee08 <rclc_support_init_with_options+0x60>
 800edbc:	46e9      	mov	r9, sp
 800edbe:	461d      	mov	r5, r3
 800edc0:	460e      	mov	r6, r1
 800edc2:	4690      	mov	r8, r2
 800edc4:	4648      	mov	r0, r9
 800edc6:	f006 fbdd 	bl	8015584 <rcl_get_zero_initialized_context>
 800edca:	462a      	mov	r2, r5
 800edcc:	4623      	mov	r3, r4
 800edce:	e899 0003 	ldmia.w	r9, {r0, r1}
 800edd2:	e884 0003 	stmia.w	r4, {r0, r1}
 800edd6:	4641      	mov	r1, r8
 800edd8:	4630      	mov	r0, r6
 800edda:	f006 fc43 	bl	8015664 <rcl_init>
 800edde:	4605      	mov	r5, r0
 800ede0:	b960      	cbnz	r0, 800edfc <rclc_support_init_with_options+0x54>
 800ede2:	463a      	mov	r2, r7
 800ede4:	f104 010c 	add.w	r1, r4, #12
 800ede8:	2003      	movs	r0, #3
 800edea:	60a7      	str	r7, [r4, #8]
 800edec:	f007 f9c8 	bl	8016180 <rcl_clock_init>
 800edf0:	4605      	mov	r5, r0
 800edf2:	b918      	cbnz	r0, 800edfc <rclc_support_init_with_options+0x54>
 800edf4:	4628      	mov	r0, r5
 800edf6:	b003      	add	sp, #12
 800edf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edfc:	f000 f91c 	bl	800f038 <rcutils_reset_error>
 800ee00:	4628      	mov	r0, r5
 800ee02:	b003      	add	sp, #12
 800ee04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee08:	250b      	movs	r5, #11
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	b003      	add	sp, #12
 800ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee12:	bf00      	nop

0800ee14 <rclc_node_init_default>:
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	bf18      	it	ne
 800ee18:	2a00      	cmpne	r2, #0
 800ee1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee1e:	4616      	mov	r6, r2
 800ee20:	bf0c      	ite	eq
 800ee22:	2201      	moveq	r2, #1
 800ee24:	2200      	movne	r2, #0
 800ee26:	b0a1      	sub	sp, #132	@ 0x84
 800ee28:	2900      	cmp	r1, #0
 800ee2a:	bf08      	it	eq
 800ee2c:	f042 0201 	orreq.w	r2, r2, #1
 800ee30:	bb22      	cbnz	r2, 800ee7c <rclc_node_init_default+0x68>
 800ee32:	4604      	mov	r4, r0
 800ee34:	b310      	cbz	r0, 800ee7c <rclc_node_init_default+0x68>
 800ee36:	f10d 0810 	add.w	r8, sp, #16
 800ee3a:	461f      	mov	r7, r3
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	f10d 0918 	add.w	r9, sp, #24
 800ee42:	4640      	mov	r0, r8
 800ee44:	f006 fd36 	bl	80158b4 <rcl_get_zero_initialized_node>
 800ee48:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ee4c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee50:	4648      	mov	r0, r9
 800ee52:	f006 fea9 	bl	8015ba8 <rcl_node_get_default_options>
 800ee56:	4640      	mov	r0, r8
 800ee58:	f006 fd2c 	bl	80158b4 <rcl_get_zero_initialized_node>
 800ee5c:	f8cd 9000 	str.w	r9, [sp]
 800ee60:	463b      	mov	r3, r7
 800ee62:	4632      	mov	r2, r6
 800ee64:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ee68:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f006 fd2a 	bl	80158c8 <rcl_node_init>
 800ee74:	b930      	cbnz	r0, 800ee84 <rclc_node_init_default+0x70>
 800ee76:	b021      	add	sp, #132	@ 0x84
 800ee78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee7c:	200b      	movs	r0, #11
 800ee7e:	b021      	add	sp, #132	@ 0x84
 800ee80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee84:	9003      	str	r0, [sp, #12]
 800ee86:	f000 f8d7 	bl	800f038 <rcutils_reset_error>
 800ee8a:	f000 f8d5 	bl	800f038 <rcutils_reset_error>
 800ee8e:	9803      	ldr	r0, [sp, #12]
 800ee90:	b021      	add	sp, #132	@ 0x84
 800ee92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee96:	bf00      	nop

0800ee98 <rclc_publisher_init_best_effort>:
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	bf18      	it	ne
 800ee9c:	2a00      	cmpne	r2, #0
 800ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea2:	4616      	mov	r6, r2
 800eea4:	bf0c      	ite	eq
 800eea6:	2201      	moveq	r2, #1
 800eea8:	2200      	movne	r2, #0
 800eeaa:	b0a0      	sub	sp, #128	@ 0x80
 800eeac:	2900      	cmp	r1, #0
 800eeae:	bf08      	it	eq
 800eeb0:	f042 0201 	orreq.w	r2, r2, #1
 800eeb4:	bb1a      	cbnz	r2, 800eefe <rclc_publisher_init_best_effort+0x66>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	b308      	cbz	r0, 800eefe <rclc_publisher_init_best_effort+0x66>
 800eeba:	f10d 0810 	add.w	r8, sp, #16
 800eebe:	461f      	mov	r7, r3
 800eec0:	460d      	mov	r5, r1
 800eec2:	f7ff f833 	bl	800df2c <rcl_get_zero_initialized_publisher>
 800eec6:	6020      	str	r0, [r4, #0]
 800eec8:	4640      	mov	r0, r8
 800eeca:	f7ff f8cf 	bl	800e06c <rcl_publisher_get_default_options>
 800eece:	2250      	movs	r2, #80	@ 0x50
 800eed0:	490d      	ldr	r1, [pc, #52]	@ (800ef08 <rclc_publisher_init_best_effort+0x70>)
 800eed2:	4640      	mov	r0, r8
 800eed4:	f00c fe19 	bl	801bb0a <memcpy>
 800eed8:	463b      	mov	r3, r7
 800eeda:	4632      	mov	r2, r6
 800eedc:	4629      	mov	r1, r5
 800eede:	4620      	mov	r0, r4
 800eee0:	f8cd 8000 	str.w	r8, [sp]
 800eee4:	f7ff f828 	bl	800df38 <rcl_publisher_init>
 800eee8:	b910      	cbnz	r0, 800eef0 <rclc_publisher_init_best_effort+0x58>
 800eeea:	b020      	add	sp, #128	@ 0x80
 800eeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef0:	9003      	str	r0, [sp, #12]
 800eef2:	f000 f8a1 	bl	800f038 <rcutils_reset_error>
 800eef6:	9803      	ldr	r0, [sp, #12]
 800eef8:	b020      	add	sp, #128	@ 0x80
 800eefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefe:	200b      	movs	r0, #11
 800ef00:	b020      	add	sp, #128	@ 0x80
 800ef02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef06:	bf00      	nop
 800ef08:	0801c978 	.word	0x0801c978

0800ef0c <rclc_timer_init_default>:
 800ef0c:	b361      	cbz	r1, 800ef68 <rclc_timer_init_default+0x5c>
 800ef0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	4606      	mov	r6, r0
 800ef14:	b08a      	sub	sp, #40	@ 0x28
 800ef16:	b318      	cbz	r0, 800ef60 <rclc_timer_init_default+0x54>
 800ef18:	460d      	mov	r5, r1
 800ef1a:	4690      	mov	r8, r2
 800ef1c:	461f      	mov	r7, r3
 800ef1e:	f007 fb27 	bl	8016570 <rcl_get_zero_initialized_timer>
 800ef22:	68ac      	ldr	r4, [r5, #8]
 800ef24:	f10d 0c0c 	add.w	ip, sp, #12
 800ef28:	6030      	str	r0, [r6, #0]
 800ef2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	462a      	mov	r2, r5
 800ef34:	f105 010c 	add.w	r1, r5, #12
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f8cc 3000 	str.w	r3, [ip]
 800ef3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef40:	e9cd 8700 	strd	r8, r7, [sp]
 800ef44:	9302      	str	r3, [sp, #8]
 800ef46:	f007 fb1b 	bl	8016580 <rcl_timer_init>
 800ef4a:	b910      	cbnz	r0, 800ef52 <rclc_timer_init_default+0x46>
 800ef4c:	b00a      	add	sp, #40	@ 0x28
 800ef4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef52:	9009      	str	r0, [sp, #36]	@ 0x24
 800ef54:	f000 f870 	bl	800f038 <rcutils_reset_error>
 800ef58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef5a:	b00a      	add	sp, #40	@ 0x28
 800ef5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef60:	200b      	movs	r0, #11
 800ef62:	b00a      	add	sp, #40	@ 0x28
 800ef64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef68:	200b      	movs	r0, #11
 800ef6a:	4770      	bx	lr

0800ef6c <__default_zero_allocate>:
 800ef6c:	f00c b81a 	b.w	801afa4 <calloc>

0800ef70 <__default_reallocate>:
 800ef70:	f00c b9b8 	b.w	801b2e4 <realloc>

0800ef74 <__default_deallocate>:
 800ef74:	f00c b894 	b.w	801b0a0 <free>

0800ef78 <__default_allocate>:
 800ef78:	f00c b88a 	b.w	801b090 <malloc>

0800ef7c <rcutils_get_zero_initialized_allocator>:
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	4c05      	ldr	r4, [pc, #20]	@ (800ef94 <rcutils_get_zero_initialized_allocator+0x18>)
 800ef80:	4686      	mov	lr, r0
 800ef82:	4684      	mov	ip, r0
 800ef84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef8a:	6823      	ldr	r3, [r4, #0]
 800ef8c:	4670      	mov	r0, lr
 800ef8e:	f8cc 3000 	str.w	r3, [ip]
 800ef92:	bd10      	pop	{r4, pc}
 800ef94:	0801c9c8 	.word	0x0801c9c8

0800ef98 <rcutils_set_default_allocator>:
 800ef98:	b1a8      	cbz	r0, 800efc6 <rcutils_set_default_allocator+0x2e>
 800ef9a:	6802      	ldr	r2, [r0, #0]
 800ef9c:	b1a2      	cbz	r2, 800efc8 <rcutils_set_default_allocator+0x30>
 800ef9e:	6841      	ldr	r1, [r0, #4]
 800efa0:	b1a1      	cbz	r1, 800efcc <rcutils_set_default_allocator+0x34>
 800efa2:	b410      	push	{r4}
 800efa4:	68c4      	ldr	r4, [r0, #12]
 800efa6:	b164      	cbz	r4, 800efc2 <rcutils_set_default_allocator+0x2a>
 800efa8:	6880      	ldr	r0, [r0, #8]
 800efaa:	b138      	cbz	r0, 800efbc <rcutils_set_default_allocator+0x24>
 800efac:	4b08      	ldr	r3, [pc, #32]	@ (800efd0 <rcutils_set_default_allocator+0x38>)
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	2200      	movs	r2, #0
 800efb2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800efb6:	2001      	movs	r0, #1
 800efb8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800efbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	4620      	mov	r0, r4
 800efc4:	e7fa      	b.n	800efbc <rcutils_set_default_allocator+0x24>
 800efc6:	4770      	bx	lr
 800efc8:	4610      	mov	r0, r2
 800efca:	4770      	bx	lr
 800efcc:	4608      	mov	r0, r1
 800efce:	4770      	bx	lr
 800efd0:	24000034 	.word	0x24000034

0800efd4 <rcutils_get_default_allocator>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	4c05      	ldr	r4, [pc, #20]	@ (800efec <rcutils_get_default_allocator+0x18>)
 800efd8:	4686      	mov	lr, r0
 800efda:	4684      	mov	ip, r0
 800efdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	4670      	mov	r0, lr
 800efe6:	f8cc 3000 	str.w	r3, [ip]
 800efea:	bd10      	pop	{r4, pc}
 800efec:	24000034 	.word	0x24000034

0800eff0 <rcutils_allocator_is_valid>:
 800eff0:	b158      	cbz	r0, 800f00a <rcutils_allocator_is_valid+0x1a>
 800eff2:	6803      	ldr	r3, [r0, #0]
 800eff4:	b143      	cbz	r3, 800f008 <rcutils_allocator_is_valid+0x18>
 800eff6:	6843      	ldr	r3, [r0, #4]
 800eff8:	b133      	cbz	r3, 800f008 <rcutils_allocator_is_valid+0x18>
 800effa:	68c3      	ldr	r3, [r0, #12]
 800effc:	b123      	cbz	r3, 800f008 <rcutils_allocator_is_valid+0x18>
 800effe:	6880      	ldr	r0, [r0, #8]
 800f000:	3800      	subs	r0, #0
 800f002:	bf18      	it	ne
 800f004:	2001      	movne	r0, #1
 800f006:	4770      	bx	lr
 800f008:	4618      	mov	r0, r3
 800f00a:	4770      	bx	lr

0800f00c <rcutils_get_error_string>:
 800f00c:	4b06      	ldr	r3, [pc, #24]	@ (800f028 <rcutils_get_error_string+0x1c>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	b13b      	cbz	r3, 800f022 <rcutils_get_error_string+0x16>
 800f012:	4b06      	ldr	r3, [pc, #24]	@ (800f02c <rcutils_get_error_string+0x20>)
 800f014:	781a      	ldrb	r2, [r3, #0]
 800f016:	b90a      	cbnz	r2, 800f01c <rcutils_get_error_string+0x10>
 800f018:	2201      	movs	r2, #1
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	4b04      	ldr	r3, [pc, #16]	@ (800f030 <rcutils_get_error_string+0x24>)
 800f01e:	7818      	ldrb	r0, [r3, #0]
 800f020:	4770      	bx	lr
 800f022:	4b04      	ldr	r3, [pc, #16]	@ (800f034 <rcutils_get_error_string+0x28>)
 800f024:	7818      	ldrb	r0, [r3, #0]
 800f026:	4770      	bx	lr
 800f028:	2400e420 	.word	0x2400e420
 800f02c:	2400e439 	.word	0x2400e439
 800f030:	2400e438 	.word	0x2400e438
 800f034:	0801c9dc 	.word	0x0801c9dc

0800f038 <rcutils_reset_error>:
 800f038:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f058 <rcutils_reset_error+0x20>
 800f03c:	2300      	movs	r3, #0
 800f03e:	4a08      	ldr	r2, [pc, #32]	@ (800f060 <rcutils_reset_error+0x28>)
 800f040:	4808      	ldr	r0, [pc, #32]	@ (800f064 <rcutils_reset_error+0x2c>)
 800f042:	8013      	strh	r3, [r2, #0]
 800f044:	4908      	ldr	r1, [pc, #32]	@ (800f068 <rcutils_reset_error+0x30>)
 800f046:	7003      	strb	r3, [r0, #0]
 800f048:	700b      	strb	r3, [r1, #0]
 800f04a:	ed82 7b02 	vstr	d7, [r2, #8]
 800f04e:	4a07      	ldr	r2, [pc, #28]	@ (800f06c <rcutils_reset_error+0x34>)
 800f050:	7013      	strb	r3, [r2, #0]
 800f052:	4770      	bx	lr
 800f054:	f3af 8000 	nop.w
	...
 800f060:	2400e428 	.word	0x2400e428
 800f064:	2400e439 	.word	0x2400e439
 800f068:	2400e438 	.word	0x2400e438
 800f06c:	2400e420 	.word	0x2400e420

0800f070 <rcutils_system_time_now>:
 800f070:	b300      	cbz	r0, 800f0b4 <rcutils_system_time_now+0x44>
 800f072:	b570      	push	{r4, r5, r6, lr}
 800f074:	b084      	sub	sp, #16
 800f076:	4604      	mov	r4, r0
 800f078:	2001      	movs	r0, #1
 800f07a:	4669      	mov	r1, sp
 800f07c:	f7f2 fe50 	bl	8001d20 <clock_gettime>
 800f080:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f084:	2900      	cmp	r1, #0
 800f086:	db12      	blt.n	800f0ae <rcutils_system_time_now+0x3e>
 800f088:	ea53 0201 	orrs.w	r2, r3, r1
 800f08c:	9d02      	ldr	r5, [sp, #8]
 800f08e:	d101      	bne.n	800f094 <rcutils_system_time_now+0x24>
 800f090:	2d00      	cmp	r5, #0
 800f092:	db0c      	blt.n	800f0ae <rcutils_system_time_now+0x3e>
 800f094:	4e08      	ldr	r6, [pc, #32]	@ (800f0b8 <rcutils_system_time_now+0x48>)
 800f096:	2000      	movs	r0, #0
 800f098:	fba3 3206 	umull	r3, r2, r3, r6
 800f09c:	195b      	adds	r3, r3, r5
 800f09e:	fb06 2201 	mla	r2, r6, r1, r2
 800f0a2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f0a6:	e9c4 3200 	strd	r3, r2, [r4]
 800f0aa:	b004      	add	sp, #16
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	2002      	movs	r0, #2
 800f0b0:	b004      	add	sp, #16
 800f0b2:	bd70      	pop	{r4, r5, r6, pc}
 800f0b4:	200b      	movs	r0, #11
 800f0b6:	4770      	bx	lr
 800f0b8:	3b9aca00 	.word	0x3b9aca00

0800f0bc <rcutils_steady_time_now>:
 800f0bc:	b300      	cbz	r0, 800f100 <rcutils_steady_time_now+0x44>
 800f0be:	b570      	push	{r4, r5, r6, lr}
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	4669      	mov	r1, sp
 800f0c8:	f7f2 fe2a 	bl	8001d20 <clock_gettime>
 800f0cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f0d0:	2900      	cmp	r1, #0
 800f0d2:	db12      	blt.n	800f0fa <rcutils_steady_time_now+0x3e>
 800f0d4:	ea53 0201 	orrs.w	r2, r3, r1
 800f0d8:	9d02      	ldr	r5, [sp, #8]
 800f0da:	d101      	bne.n	800f0e0 <rcutils_steady_time_now+0x24>
 800f0dc:	2d00      	cmp	r5, #0
 800f0de:	db0c      	blt.n	800f0fa <rcutils_steady_time_now+0x3e>
 800f0e0:	4e08      	ldr	r6, [pc, #32]	@ (800f104 <rcutils_steady_time_now+0x48>)
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	fba3 3206 	umull	r3, r2, r3, r6
 800f0e8:	195b      	adds	r3, r3, r5
 800f0ea:	fb06 2201 	mla	r2, r6, r1, r2
 800f0ee:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f0f2:	e9c4 3200 	strd	r3, r2, [r4]
 800f0f6:	b004      	add	sp, #16
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
 800f0fa:	2002      	movs	r0, #2
 800f0fc:	b004      	add	sp, #16
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	200b      	movs	r0, #11
 800f102:	4770      	bx	lr
 800f104:	3b9aca00 	.word	0x3b9aca00

0800f108 <rmw_get_zero_initialized_init_options>:
 800f108:	b510      	push	{r4, lr}
 800f10a:	4604      	mov	r4, r0
 800f10c:	2238      	movs	r2, #56	@ 0x38
 800f10e:	2100      	movs	r1, #0
 800f110:	f00c fc32 	bl	801b978 <memset>
 800f114:	f104 0010 	add.w	r0, r4, #16
 800f118:	f000 f80a 	bl	800f130 <rmw_get_default_security_options>
 800f11c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f120:	4620      	mov	r0, r4
 800f122:	60e3      	str	r3, [r4, #12]
 800f124:	bd10      	pop	{r4, pc}
 800f126:	bf00      	nop

0800f128 <rmw_get_default_publisher_options>:
 800f128:	2200      	movs	r2, #0
 800f12a:	6002      	str	r2, [r0, #0]
 800f12c:	7102      	strb	r2, [r0, #4]
 800f12e:	4770      	bx	lr

0800f130 <rmw_get_default_security_options>:
 800f130:	2200      	movs	r2, #0
 800f132:	7002      	strb	r2, [r0, #0]
 800f134:	6042      	str	r2, [r0, #4]
 800f136:	4770      	bx	lr

0800f138 <rmw_uros_set_custom_transport>:
 800f138:	b470      	push	{r4, r5, r6}
 800f13a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f13e:	b162      	cbz	r2, 800f15a <rmw_uros_set_custom_transport+0x22>
 800f140:	b15b      	cbz	r3, 800f15a <rmw_uros_set_custom_transport+0x22>
 800f142:	b155      	cbz	r5, 800f15a <rmw_uros_set_custom_transport+0x22>
 800f144:	b14e      	cbz	r6, 800f15a <rmw_uros_set_custom_transport+0x22>
 800f146:	4c06      	ldr	r4, [pc, #24]	@ (800f160 <rmw_uros_set_custom_transport+0x28>)
 800f148:	7020      	strb	r0, [r4, #0]
 800f14a:	2000      	movs	r0, #0
 800f14c:	6166      	str	r6, [r4, #20]
 800f14e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f152:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f156:	bc70      	pop	{r4, r5, r6}
 800f158:	4770      	bx	lr
 800f15a:	200b      	movs	r0, #11
 800f15c:	bc70      	pop	{r4, r5, r6}
 800f15e:	4770      	bx	lr
 800f160:	2400e43c 	.word	0x2400e43c

0800f164 <rmw_init_options_init>:
 800f164:	b084      	sub	sp, #16
 800f166:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f168:	b083      	sub	sp, #12
 800f16a:	ad09      	add	r5, sp, #36	@ 0x24
 800f16c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f170:	b130      	cbz	r0, 800f180 <rmw_init_options_init+0x1c>
 800f172:	4604      	mov	r4, r0
 800f174:	4628      	mov	r0, r5
 800f176:	f7ff ff3b 	bl	800eff0 <rcutils_allocator_is_valid>
 800f17a:	b108      	cbz	r0, 800f180 <rmw_init_options_init+0x1c>
 800f17c:	68a6      	ldr	r6, [r4, #8]
 800f17e:	b12e      	cbz	r6, 800f18c <rmw_init_options_init+0x28>
 800f180:	200b      	movs	r0, #11
 800f182:	b003      	add	sp, #12
 800f184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f188:	b004      	add	sp, #16
 800f18a:	4770      	bx	lr
 800f18c:	2200      	movs	r2, #0
 800f18e:	2300      	movs	r3, #0
 800f190:	f104 0c20 	add.w	ip, r4, #32
 800f194:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f230 <rmw_init_options_init+0xcc>
 800f198:	466f      	mov	r7, sp
 800f19a:	e9c4 2300 	strd	r2, r3, [r4]
 800f19e:	4b20      	ldr	r3, [pc, #128]	@ (800f220 <rmw_init_options_init+0xbc>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	60a3      	str	r3, [r4, #8]
 800f1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f8cc 3000 	str.w	r3, [ip]
 800f1b2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800f1b6:	60e6      	str	r6, [r4, #12]
 800f1b8:	f7ff ffba 	bl	800f130 <rmw_get_default_security_options>
 800f1bc:	f104 0310 	add.w	r3, r4, #16
 800f1c0:	2203      	movs	r2, #3
 800f1c2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f1c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ca:	4816      	ldr	r0, [pc, #88]	@ (800f224 <rmw_init_options_init+0xc0>)
 800f1cc:	4916      	ldr	r1, [pc, #88]	@ (800f228 <rmw_init_options_init+0xc4>)
 800f1ce:	7626      	strb	r6, [r4, #24]
 800f1d0:	f000 fed2 	bl	800ff78 <rmw_uxrce_init_init_options_impl_memory>
 800f1d4:	4813      	ldr	r0, [pc, #76]	@ (800f224 <rmw_init_options_init+0xc0>)
 800f1d6:	f009 fdb1 	bl	8018d3c <get_memory>
 800f1da:	b1f0      	cbz	r0, 800f21a <rmw_init_options_init+0xb6>
 800f1dc:	4a13      	ldr	r2, [pc, #76]	@ (800f22c <rmw_init_options_init+0xc8>)
 800f1de:	6883      	ldr	r3, [r0, #8]
 800f1e0:	6851      	ldr	r1, [r2, #4]
 800f1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1e4:	7810      	ldrb	r0, [r2, #0]
 800f1e6:	6159      	str	r1, [r3, #20]
 800f1e8:	68d1      	ldr	r1, [r2, #12]
 800f1ea:	7418      	strb	r0, [r3, #16]
 800f1ec:	61d9      	str	r1, [r3, #28]
 800f1ee:	6911      	ldr	r1, [r2, #16]
 800f1f0:	6219      	str	r1, [r3, #32]
 800f1f2:	6951      	ldr	r1, [r2, #20]
 800f1f4:	6892      	ldr	r2, [r2, #8]
 800f1f6:	6259      	str	r1, [r3, #36]	@ 0x24
 800f1f8:	619a      	str	r2, [r3, #24]
 800f1fa:	f004 ffd5 	bl	80141a8 <uxr_nanos>
 800f1fe:	f00c f805 	bl	801b20c <srand>
 800f202:	f00c f831 	bl	801b268 <rand>
 800f206:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f208:	6298      	str	r0, [r3, #40]	@ 0x28
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d0f9      	beq.n	800f202 <rmw_init_options_init+0x9e>
 800f20e:	2000      	movs	r0, #0
 800f210:	b003      	add	sp, #12
 800f212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f216:	b004      	add	sp, #16
 800f218:	4770      	bx	lr
 800f21a:	2001      	movs	r0, #1
 800f21c:	e7b1      	b.n	800f182 <rmw_init_options_init+0x1e>
 800f21e:	bf00      	nop
 800f220:	0801d344 	.word	0x0801d344
 800f224:	24012d54 	.word	0x24012d54
 800f228:	2400e5f0 	.word	0x2400e5f0
 800f22c:	2400e43c 	.word	0x2400e43c
 800f230:	0801c9e0 	.word	0x0801c9e0

0800f234 <rmw_init_options_copy>:
 800f234:	2800      	cmp	r0, #0
 800f236:	d047      	beq.n	800f2c8 <rmw_init_options_copy+0x94>
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	460d      	mov	r5, r1
 800f23c:	b149      	cbz	r1, 800f252 <rmw_init_options_copy+0x1e>
 800f23e:	4604      	mov	r4, r0
 800f240:	6880      	ldr	r0, [r0, #8]
 800f242:	b120      	cbz	r0, 800f24e <rmw_init_options_copy+0x1a>
 800f244:	4b22      	ldr	r3, [pc, #136]	@ (800f2d0 <rmw_init_options_copy+0x9c>)
 800f246:	6819      	ldr	r1, [r3, #0]
 800f248:	f7f1 f84a 	bl	80002e0 <strcmp>
 800f24c:	bba8      	cbnz	r0, 800f2ba <rmw_init_options_copy+0x86>
 800f24e:	68ab      	ldr	r3, [r5, #8]
 800f250:	b11b      	cbz	r3, 800f25a <rmw_init_options_copy+0x26>
 800f252:	f04f 0c0b 	mov.w	ip, #11
 800f256:	4660      	mov	r0, ip
 800f258:	bd70      	pop	{r4, r5, r6, pc}
 800f25a:	4623      	mov	r3, r4
 800f25c:	462a      	mov	r2, r5
 800f25e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f262:	f8d3 e000 	ldr.w	lr, [r3]
 800f266:	3310      	adds	r3, #16
 800f268:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800f26c:	3210      	adds	r2, #16
 800f26e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800f272:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f276:	42b3      	cmp	r3, r6
 800f278:	f842 ec10 	str.w	lr, [r2, #-16]
 800f27c:	f842 cc0c 	str.w	ip, [r2, #-12]
 800f280:	f842 0c08 	str.w	r0, [r2, #-8]
 800f284:	f842 1c04 	str.w	r1, [r2, #-4]
 800f288:	d1eb      	bne.n	800f262 <rmw_init_options_copy+0x2e>
 800f28a:	6819      	ldr	r1, [r3, #0]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	4811      	ldr	r0, [pc, #68]	@ (800f2d4 <rmw_init_options_copy+0xa0>)
 800f290:	6011      	str	r1, [r2, #0]
 800f292:	6053      	str	r3, [r2, #4]
 800f294:	f009 fd52 	bl	8018d3c <get_memory>
 800f298:	b198      	cbz	r0, 800f2c2 <rmw_init_options_copy+0x8e>
 800f29a:	6883      	ldr	r3, [r0, #8]
 800f29c:	f04f 0c00 	mov.w	ip, #0
 800f2a0:	636b      	str	r3, [r5, #52]	@ 0x34
 800f2a2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800f2a4:	f103 0410 	add.w	r4, r3, #16
 800f2a8:	3510      	adds	r5, #16
 800f2aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f2b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f2b6:	4660      	mov	r0, ip
 800f2b8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ba:	f04f 0c0c 	mov.w	ip, #12
 800f2be:	4660      	mov	r0, ip
 800f2c0:	bd70      	pop	{r4, r5, r6, pc}
 800f2c2:	f04f 0c01 	mov.w	ip, #1
 800f2c6:	e7c6      	b.n	800f256 <rmw_init_options_copy+0x22>
 800f2c8:	f04f 0c0b 	mov.w	ip, #11
 800f2cc:	4660      	mov	r0, ip
 800f2ce:	4770      	bx	lr
 800f2d0:	0801d344 	.word	0x0801d344
 800f2d4:	24012d54 	.word	0x24012d54

0800f2d8 <rmw_init_options_fini>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	b08e      	sub	sp, #56	@ 0x38
 800f2dc:	b388      	cbz	r0, 800f342 <rmw_init_options_fini+0x6a>
 800f2de:	4604      	mov	r4, r0
 800f2e0:	3020      	adds	r0, #32
 800f2e2:	f7ff fe85 	bl	800eff0 <rcutils_allocator_is_valid>
 800f2e6:	b360      	cbz	r0, 800f342 <rmw_init_options_fini+0x6a>
 800f2e8:	68a0      	ldr	r0, [r4, #8]
 800f2ea:	b120      	cbz	r0, 800f2f6 <rmw_init_options_fini+0x1e>
 800f2ec:	4b1a      	ldr	r3, [pc, #104]	@ (800f358 <rmw_init_options_fini+0x80>)
 800f2ee:	6819      	ldr	r1, [r3, #0]
 800f2f0:	f7f0 fff6 	bl	80002e0 <strcmp>
 800f2f4:	bb68      	cbnz	r0, 800f352 <rmw_init_options_fini+0x7a>
 800f2f6:	4b19      	ldr	r3, [pc, #100]	@ (800f35c <rmw_init_options_fini+0x84>)
 800f2f8:	6819      	ldr	r1, [r3, #0]
 800f2fa:	b331      	cbz	r1, 800f34a <rmw_init_options_fini+0x72>
 800f2fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f2fe:	e001      	b.n	800f304 <rmw_init_options_fini+0x2c>
 800f300:	6849      	ldr	r1, [r1, #4]
 800f302:	b311      	cbz	r1, 800f34a <rmw_init_options_fini+0x72>
 800f304:	688b      	ldr	r3, [r1, #8]
 800f306:	429a      	cmp	r2, r3
 800f308:	d1fa      	bne.n	800f300 <rmw_init_options_fini+0x28>
 800f30a:	4814      	ldr	r0, [pc, #80]	@ (800f35c <rmw_init_options_fini+0x84>)
 800f30c:	f009 fd26 	bl	8018d5c <put_memory>
 800f310:	4668      	mov	r0, sp
 800f312:	f7ff fef9 	bl	800f108 <rmw_get_zero_initialized_init_options>
 800f316:	46ee      	mov	lr, sp
 800f318:	46a4      	mov	ip, r4
 800f31a:	2400      	movs	r4, #0
 800f31c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f324:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f32c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f334:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f338:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f33c:	4620      	mov	r0, r4
 800f33e:	b00e      	add	sp, #56	@ 0x38
 800f340:	bd10      	pop	{r4, pc}
 800f342:	240b      	movs	r4, #11
 800f344:	4620      	mov	r0, r4
 800f346:	b00e      	add	sp, #56	@ 0x38
 800f348:	bd10      	pop	{r4, pc}
 800f34a:	2401      	movs	r4, #1
 800f34c:	4620      	mov	r0, r4
 800f34e:	b00e      	add	sp, #56	@ 0x38
 800f350:	bd10      	pop	{r4, pc}
 800f352:	240c      	movs	r4, #12
 800f354:	e7f2      	b.n	800f33c <rmw_init_options_fini+0x64>
 800f356:	bf00      	nop
 800f358:	0801d344 	.word	0x0801d344
 800f35c:	24012d54 	.word	0x24012d54

0800f360 <rmw_init>:
 800f360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f364:	b083      	sub	sp, #12
 800f366:	2800      	cmp	r0, #0
 800f368:	f000 80d3 	beq.w	800f512 <rmw_init+0x1b2>
 800f36c:	460e      	mov	r6, r1
 800f36e:	2900      	cmp	r1, #0
 800f370:	f000 80cf 	beq.w	800f512 <rmw_init+0x1b2>
 800f374:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f376:	4605      	mov	r5, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f000 80ca 	beq.w	800f512 <rmw_init+0x1b2>
 800f37e:	4b78      	ldr	r3, [pc, #480]	@ (800f560 <rmw_init+0x200>)
 800f380:	6880      	ldr	r0, [r0, #8]
 800f382:	681f      	ldr	r7, [r3, #0]
 800f384:	b128      	cbz	r0, 800f392 <rmw_init+0x32>
 800f386:	4639      	mov	r1, r7
 800f388:	f7f0 ffaa 	bl	80002e0 <strcmp>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	f040 80ca 	bne.w	800f526 <rmw_init+0x1c6>
 800f392:	4c74      	ldr	r4, [pc, #464]	@ (800f564 <rmw_init+0x204>)
 800f394:	f04f 0800 	mov.w	r8, #0
 800f398:	4973      	ldr	r1, [pc, #460]	@ (800f568 <rmw_init+0x208>)
 800f39a:	4874      	ldr	r0, [pc, #464]	@ (800f56c <rmw_init+0x20c>)
 800f39c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3a0:	60b7      	str	r7, [r6, #8]
 800f3a2:	e9c6 2300 	strd	r2, r3, [r6]
 800f3a6:	68eb      	ldr	r3, [r5, #12]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f3ac:	f000 fd84 	bl	800feb8 <rmw_uxrce_init_session_memory>
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	2204      	movs	r2, #4
 800f3b4:	496e      	ldr	r1, [pc, #440]	@ (800f570 <rmw_init+0x210>)
 800f3b6:	f000 fdbf 	bl	800ff38 <rmw_uxrce_init_static_input_buffer_memory>
 800f3ba:	486c      	ldr	r0, [pc, #432]	@ (800f56c <rmw_init+0x20c>)
 800f3bc:	f884 800d 	strb.w	r8, [r4, #13]
 800f3c0:	f009 fcbc 	bl	8018d3c <get_memory>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f000 80a9 	beq.w	800f51c <rmw_init+0x1bc>
 800f3ca:	6884      	ldr	r4, [r0, #8]
 800f3cc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f3ce:	f104 0910 	add.w	r9, r4, #16
 800f3d2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f3d4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f3d8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f3dc:	9101      	str	r1, [sp, #4]
 800f3de:	4661      	mov	r1, ip
 800f3e0:	6a00      	ldr	r0, [r0, #32]
 800f3e2:	9000      	str	r0, [sp, #0]
 800f3e4:	4648      	mov	r0, r9
 800f3e6:	f002 fe6d 	bl	80120c4 <uxr_set_custom_transport_callbacks>
 800f3ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f3ee:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f3f2:	4960      	ldr	r1, [pc, #384]	@ (800f574 <rmw_init+0x214>)
 800f3f4:	4860      	ldr	r0, [pc, #384]	@ (800f578 <rmw_init+0x218>)
 800f3f6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f3fa:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f3fe:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f402:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f406:	2201      	movs	r2, #1
 800f408:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f40c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f410:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f414:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f418:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f41a:	f000 fd2d 	bl	800fe78 <rmw_uxrce_init_node_memory>
 800f41e:	2205      	movs	r2, #5
 800f420:	4956      	ldr	r1, [pc, #344]	@ (800f57c <rmw_init+0x21c>)
 800f422:	4857      	ldr	r0, [pc, #348]	@ (800f580 <rmw_init+0x220>)
 800f424:	f000 fd08 	bl	800fe38 <rmw_uxrce_init_subscription_memory>
 800f428:	220a      	movs	r2, #10
 800f42a:	4956      	ldr	r1, [pc, #344]	@ (800f584 <rmw_init+0x224>)
 800f42c:	4856      	ldr	r0, [pc, #344]	@ (800f588 <rmw_init+0x228>)
 800f42e:	f000 fce3 	bl	800fdf8 <rmw_uxrce_init_publisher_memory>
 800f432:	2201      	movs	r2, #1
 800f434:	4955      	ldr	r1, [pc, #340]	@ (800f58c <rmw_init+0x22c>)
 800f436:	4856      	ldr	r0, [pc, #344]	@ (800f590 <rmw_init+0x230>)
 800f438:	f000 fc9e 	bl	800fd78 <rmw_uxrce_init_service_memory>
 800f43c:	2201      	movs	r2, #1
 800f43e:	4955      	ldr	r1, [pc, #340]	@ (800f594 <rmw_init+0x234>)
 800f440:	4855      	ldr	r0, [pc, #340]	@ (800f598 <rmw_init+0x238>)
 800f442:	f000 fcb9 	bl	800fdb8 <rmw_uxrce_init_client_memory>
 800f446:	220f      	movs	r2, #15
 800f448:	4954      	ldr	r1, [pc, #336]	@ (800f59c <rmw_init+0x23c>)
 800f44a:	4855      	ldr	r0, [pc, #340]	@ (800f5a0 <rmw_init+0x240>)
 800f44c:	f000 fd54 	bl	800fef8 <rmw_uxrce_init_topic_memory>
 800f450:	2203      	movs	r2, #3
 800f452:	4954      	ldr	r1, [pc, #336]	@ (800f5a4 <rmw_init+0x244>)
 800f454:	4854      	ldr	r0, [pc, #336]	@ (800f5a8 <rmw_init+0x248>)
 800f456:	f000 fd8f 	bl	800ff78 <rmw_uxrce_init_init_options_impl_memory>
 800f45a:	2204      	movs	r2, #4
 800f45c:	4953      	ldr	r1, [pc, #332]	@ (800f5ac <rmw_init+0x24c>)
 800f45e:	4854      	ldr	r0, [pc, #336]	@ (800f5b0 <rmw_init+0x250>)
 800f460:	f000 fdaa 	bl	800ffb8 <rmw_uxrce_init_wait_set_memory>
 800f464:	4953      	ldr	r1, [pc, #332]	@ (800f5b4 <rmw_init+0x254>)
 800f466:	4854      	ldr	r0, [pc, #336]	@ (800f5b8 <rmw_init+0x258>)
 800f468:	2204      	movs	r2, #4
 800f46a:	f000 fdc5 	bl	800fff8 <rmw_uxrce_init_guard_condition_memory>
 800f46e:	4642      	mov	r2, r8
 800f470:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f472:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f474:	f000 fc48 	bl	800fd08 <rmw_uxrce_transport_init>
 800f478:	4607      	mov	r7, r0
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d158      	bne.n	800f530 <rmw_init+0x1d0>
 800f47e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f480:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f484:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f48a:	4628      	mov	r0, r5
 800f48c:	f003 f810 	bl	80124b0 <uxr_init_session>
 800f490:	4622      	mov	r2, r4
 800f492:	494a      	ldr	r1, [pc, #296]	@ (800f5bc <rmw_init+0x25c>)
 800f494:	4628      	mov	r0, r5
 800f496:	f003 f82f 	bl	80124f8 <uxr_set_topic_callback>
 800f49a:	463a      	mov	r2, r7
 800f49c:	4948      	ldr	r1, [pc, #288]	@ (800f5c0 <rmw_init+0x260>)
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f003 f826 	bl	80124f0 <uxr_set_status_callback>
 800f4a4:	463a      	mov	r2, r7
 800f4a6:	4947      	ldr	r1, [pc, #284]	@ (800f5c4 <rmw_init+0x264>)
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	f003 f829 	bl	8012500 <uxr_set_request_callback>
 800f4ae:	463a      	mov	r2, r7
 800f4b0:	4945      	ldr	r1, [pc, #276]	@ (800f5c8 <rmw_init+0x268>)
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f003 f828 	bl	8012508 <uxr_set_reply_callback>
 800f4b8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4bc:	2304      	movs	r3, #4
 800f4be:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f4c2:	0092      	lsls	r2, r2, #2
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f003 f85f 	bl	8012588 <uxr_create_input_reliable_stream>
 800f4ca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4ce:	2304      	movs	r3, #4
 800f4d0:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f4d4:	0092      	lsls	r2, r2, #2
 800f4d6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f4da:	4628      	mov	r0, r5
 800f4dc:	f003 f82a 	bl	8012534 <uxr_create_output_reliable_stream>
 800f4e0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f003 f849 	bl	801257c <uxr_create_input_best_effort_stream>
 800f4ea:	f241 3194 	movw	r1, #5012	@ 0x1394
 800f4ee:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	4421      	add	r1, r4
 800f4f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4fa:	f003 f809 	bl	8012510 <uxr_create_output_best_effort_stream>
 800f4fe:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f502:	4628      	mov	r0, r5
 800f504:	f003 fde8 	bl	80130d8 <uxr_create_session>
 800f508:	b1f8      	cbz	r0, 800f54a <rmw_init+0x1ea>
 800f50a:	4638      	mov	r0, r7
 800f50c:	b003      	add	sp, #12
 800f50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f512:	270b      	movs	r7, #11
 800f514:	4638      	mov	r0, r7
 800f516:	b003      	add	sp, #12
 800f518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f51c:	2701      	movs	r7, #1
 800f51e:	4638      	mov	r0, r7
 800f520:	b003      	add	sp, #12
 800f522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f526:	270c      	movs	r7, #12
 800f528:	4638      	mov	r0, r7
 800f52a:	b003      	add	sp, #12
 800f52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f530:	4648      	mov	r0, r9
 800f532:	f002 fe05 	bl	8012140 <uxr_close_custom_transport>
 800f536:	4621      	mov	r1, r4
 800f538:	480c      	ldr	r0, [pc, #48]	@ (800f56c <rmw_init+0x20c>)
 800f53a:	f009 fc0f 	bl	8018d5c <put_memory>
 800f53e:	4638      	mov	r0, r7
 800f540:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f544:	b003      	add	sp, #12
 800f546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f54a:	4648      	mov	r0, r9
 800f54c:	f002 fdf8 	bl	8012140 <uxr_close_custom_transport>
 800f550:	4621      	mov	r1, r4
 800f552:	4806      	ldr	r0, [pc, #24]	@ (800f56c <rmw_init+0x20c>)
 800f554:	f009 fc02 	bl	8018d5c <put_memory>
 800f558:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f55a:	2701      	movs	r7, #1
 800f55c:	e7d5      	b.n	800f50a <rmw_init+0x1aa>
 800f55e:	bf00      	nop
 800f560:	0801d344 	.word	0x0801d344
 800f564:	24012da4 	.word	0x24012da4
 800f568:	2400f050 	.word	0x2400f050
 800f56c:	24012d94 	.word	0x24012d94
 800f570:	240105f8 	.word	0x240105f8
 800f574:	2400e674 	.word	0x2400e674
 800f578:	24012d64 	.word	0x24012d64
 800f57c:	240126f8 	.word	0x240126f8
 800f580:	24012db4 	.word	0x24012db4
 800f584:	2400e718 	.word	0x2400e718
 800f588:	24012d74 	.word	0x24012d74
 800f58c:	2400ef88 	.word	0x2400ef88
 800f590:	24012d84 	.word	0x24012d84
 800f594:	2400e4a8 	.word	0x2400e4a8
 800f598:	2400e494 	.word	0x2400e494
 800f59c:	24012b30 	.word	0x24012b30
 800f5a0:	24012dc4 	.word	0x24012dc4
 800f5a4:	2400e5f0 	.word	0x2400e5f0
 800f5a8:	24012d54 	.word	0x24012d54
 800f5ac:	24012cd4 	.word	0x24012cd4
 800f5b0:	24012dd4 	.word	0x24012dd4
 800f5b4:	2400e570 	.word	0x2400e570
 800f5b8:	24012d44 	.word	0x24012d44
 800f5bc:	08018b75 	.word	0x08018b75
 800f5c0:	08018b6d 	.word	0x08018b6d
 800f5c4:	08018c0d 	.word	0x08018c0d
 800f5c8:	08018ca9 	.word	0x08018ca9

0800f5cc <rmw_context_fini>:
 800f5cc:	4b17      	ldr	r3, [pc, #92]	@ (800f62c <rmw_context_fini+0x60>)
 800f5ce:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	681c      	ldr	r4, [r3, #0]
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	b334      	cbz	r4, 800f626 <rmw_context_fini+0x5a>
 800f5d8:	2600      	movs	r6, #0
 800f5da:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f5de:	6902      	ldr	r2, [r0, #16]
 800f5e0:	428a      	cmp	r2, r1
 800f5e2:	d018      	beq.n	800f616 <rmw_context_fini+0x4a>
 800f5e4:	2c00      	cmp	r4, #0
 800f5e6:	d1f8      	bne.n	800f5da <rmw_context_fini+0xe>
 800f5e8:	b189      	cbz	r1, 800f60e <rmw_context_fini+0x42>
 800f5ea:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f5ee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f5f2:	789b      	ldrb	r3, [r3, #2]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	bf14      	ite	ne
 800f5f8:	210a      	movne	r1, #10
 800f5fa:	2100      	moveq	r1, #0
 800f5fc:	f003 fd44 	bl	8013088 <uxr_delete_session_retries>
 800f600:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f602:	f000 fd19 	bl	8010038 <rmw_uxrce_fini_session_memory>
 800f606:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f608:	3010      	adds	r0, #16
 800f60a:	f002 fd99 	bl	8012140 <uxr_close_custom_transport>
 800f60e:	2300      	movs	r3, #0
 800f610:	4630      	mov	r0, r6
 800f612:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f614:	bd70      	pop	{r4, r5, r6, pc}
 800f616:	3018      	adds	r0, #24
 800f618:	f000 f89c 	bl	800f754 <rmw_destroy_node>
 800f61c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f61e:	4606      	mov	r6, r0
 800f620:	2c00      	cmp	r4, #0
 800f622:	d1da      	bne.n	800f5da <rmw_context_fini+0xe>
 800f624:	e7e0      	b.n	800f5e8 <rmw_context_fini+0x1c>
 800f626:	4626      	mov	r6, r4
 800f628:	e7de      	b.n	800f5e8 <rmw_context_fini+0x1c>
 800f62a:	bf00      	nop
 800f62c:	24012d64 	.word	0x24012d64

0800f630 <create_node>:
 800f630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f634:	b083      	sub	sp, #12
 800f636:	2b00      	cmp	r3, #0
 800f638:	d064      	beq.n	800f704 <create_node+0xd4>
 800f63a:	4606      	mov	r6, r0
 800f63c:	4838      	ldr	r0, [pc, #224]	@ (800f720 <create_node+0xf0>)
 800f63e:	460f      	mov	r7, r1
 800f640:	4690      	mov	r8, r2
 800f642:	461d      	mov	r5, r3
 800f644:	f009 fb7a 	bl	8018d3c <get_memory>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d05b      	beq.n	800f704 <create_node+0xd4>
 800f64c:	6884      	ldr	r4, [r0, #8]
 800f64e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f650:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f654:	f104 0518 	add.w	r5, r4, #24
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	f009 fbd7 	bl	8018e0c <rmw_get_implementation_identifier>
 800f65e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f662:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f666:	4630      	mov	r0, r6
 800f668:	f7f0 fe44 	bl	80002f4 <strlen>
 800f66c:	1c42      	adds	r2, r0, #1
 800f66e:	2a3c      	cmp	r2, #60	@ 0x3c
 800f670:	d840      	bhi.n	800f6f4 <create_node+0xc4>
 800f672:	4648      	mov	r0, r9
 800f674:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f678:	4631      	mov	r1, r6
 800f67a:	f00c fa46 	bl	801bb0a <memcpy>
 800f67e:	4638      	mov	r0, r7
 800f680:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f684:	f7f0 fe36 	bl	80002f4 <strlen>
 800f688:	1c42      	adds	r2, r0, #1
 800f68a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f68c:	d832      	bhi.n	800f6f4 <create_node+0xc4>
 800f68e:	4639      	mov	r1, r7
 800f690:	4648      	mov	r0, r9
 800f692:	f00c fa3a 	bl	801bb0a <memcpy>
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	2101      	movs	r1, #1
 800f69a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f69e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f6a2:	1842      	adds	r2, r0, r1
 800f6a4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f6a8:	f002 fd4e 	bl	8012148 <uxr_object_id>
 800f6ac:	6160      	str	r0, [r4, #20]
 800f6ae:	783b      	ldrb	r3, [r7, #0]
 800f6b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f6b2:	d12c      	bne.n	800f70e <create_node+0xde>
 800f6b4:	787b      	ldrb	r3, [r7, #1]
 800f6b6:	bb53      	cbnz	r3, 800f70e <create_node+0xde>
 800f6b8:	4633      	mov	r3, r6
 800f6ba:	4a1a      	ldr	r2, [pc, #104]	@ (800f724 <create_node+0xf4>)
 800f6bc:	213c      	movs	r1, #60	@ 0x3c
 800f6be:	481a      	ldr	r0, [pc, #104]	@ (800f728 <create_node+0xf8>)
 800f6c0:	f00b ffec 	bl	801b69c <sniprintf>
 800f6c4:	6920      	ldr	r0, [r4, #16]
 800f6c6:	2106      	movs	r1, #6
 800f6c8:	fa1f f388 	uxth.w	r3, r8
 800f6cc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f6d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6d4:	9101      	str	r1, [sp, #4]
 800f6d6:	4914      	ldr	r1, [pc, #80]	@ (800f728 <create_node+0xf8>)
 800f6d8:	9100      	str	r1, [sp, #0]
 800f6da:	6811      	ldr	r1, [r2, #0]
 800f6dc:	6962      	ldr	r2, [r4, #20]
 800f6de:	f002 fb67 	bl	8011db0 <uxr_buffer_create_participant_bin>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	6920      	ldr	r0, [r4, #16]
 800f6e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f6ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6ee:	f000 fe25 	bl	801033c <run_xrce_session>
 800f6f2:	b918      	cbnz	r0, 800f6fc <create_node+0xcc>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	2500      	movs	r5, #0
 800f6f8:	f000 fca4 	bl	8010044 <rmw_uxrce_fini_node_memory>
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	b003      	add	sp, #12
 800f700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f704:	2500      	movs	r5, #0
 800f706:	4628      	mov	r0, r5
 800f708:	b003      	add	sp, #12
 800f70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f70e:	463b      	mov	r3, r7
 800f710:	4a06      	ldr	r2, [pc, #24]	@ (800f72c <create_node+0xfc>)
 800f712:	213c      	movs	r1, #60	@ 0x3c
 800f714:	9600      	str	r6, [sp, #0]
 800f716:	4804      	ldr	r0, [pc, #16]	@ (800f728 <create_node+0xf8>)
 800f718:	f00b ffc0 	bl	801b69c <sniprintf>
 800f71c:	e7d2      	b.n	800f6c4 <create_node+0x94>
 800f71e:	bf00      	nop
 800f720:	24012d64 	.word	0x24012d64
 800f724:	0801ca20 	.word	0x0801ca20
 800f728:	2400e458 	.word	0x2400e458
 800f72c:	0801c9e4 	.word	0x0801c9e4

0800f730 <rmw_create_node>:
 800f730:	468c      	mov	ip, r1
 800f732:	4611      	mov	r1, r2
 800f734:	f1bc 0f00 	cmp.w	ip, #0
 800f738:	d00a      	beq.n	800f750 <rmw_create_node+0x20>
 800f73a:	f89c 3000 	ldrb.w	r3, [ip]
 800f73e:	b13b      	cbz	r3, 800f750 <rmw_create_node+0x20>
 800f740:	b132      	cbz	r2, 800f750 <rmw_create_node+0x20>
 800f742:	7813      	ldrb	r3, [r2, #0]
 800f744:	b123      	cbz	r3, 800f750 <rmw_create_node+0x20>
 800f746:	4603      	mov	r3, r0
 800f748:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f74a:	4660      	mov	r0, ip
 800f74c:	f7ff bf70 	b.w	800f630 <create_node>
 800f750:	2000      	movs	r0, #0
 800f752:	4770      	bx	lr

0800f754 <rmw_destroy_node>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	b328      	cbz	r0, 800f7a4 <rmw_destroy_node+0x50>
 800f758:	4607      	mov	r7, r0
 800f75a:	6800      	ldr	r0, [r0, #0]
 800f75c:	b120      	cbz	r0, 800f768 <rmw_destroy_node+0x14>
 800f75e:	4b37      	ldr	r3, [pc, #220]	@ (800f83c <rmw_destroy_node+0xe8>)
 800f760:	6819      	ldr	r1, [r3, #0]
 800f762:	f7f0 fdbd 	bl	80002e0 <strcmp>
 800f766:	b9e8      	cbnz	r0, 800f7a4 <rmw_destroy_node+0x50>
 800f768:	687d      	ldr	r5, [r7, #4]
 800f76a:	b1dd      	cbz	r5, 800f7a4 <rmw_destroy_node+0x50>
 800f76c:	4b34      	ldr	r3, [pc, #208]	@ (800f840 <rmw_destroy_node+0xec>)
 800f76e:	681c      	ldr	r4, [r3, #0]
 800f770:	2c00      	cmp	r4, #0
 800f772:	d060      	beq.n	800f836 <rmw_destroy_node+0xe2>
 800f774:	2600      	movs	r6, #0
 800f776:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f77a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f77e:	429d      	cmp	r5, r3
 800f780:	d013      	beq.n	800f7aa <rmw_destroy_node+0x56>
 800f782:	2c00      	cmp	r4, #0
 800f784:	d1f7      	bne.n	800f776 <rmw_destroy_node+0x22>
 800f786:	4b2f      	ldr	r3, [pc, #188]	@ (800f844 <rmw_destroy_node+0xf0>)
 800f788:	681c      	ldr	r4, [r3, #0]
 800f78a:	b1c4      	cbz	r4, 800f7be <rmw_destroy_node+0x6a>
 800f78c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f790:	6a0b      	ldr	r3, [r1, #32]
 800f792:	429d      	cmp	r5, r3
 800f794:	d1f9      	bne.n	800f78a <rmw_destroy_node+0x36>
 800f796:	317c      	adds	r1, #124	@ 0x7c
 800f798:	4638      	mov	r0, r7
 800f79a:	f000 fa53 	bl	800fc44 <rmw_destroy_subscription>
 800f79e:	2801      	cmp	r0, #1
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	d1f2      	bne.n	800f78a <rmw_destroy_node+0x36>
 800f7a4:	2601      	movs	r6, #1
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7aa:	3184      	adds	r1, #132	@ 0x84
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f000 f9b1 	bl	800fb14 <rmw_destroy_publisher>
 800f7b2:	2801      	cmp	r0, #1
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	d0f5      	beq.n	800f7a4 <rmw_destroy_node+0x50>
 800f7b8:	2c00      	cmp	r4, #0
 800f7ba:	d1dc      	bne.n	800f776 <rmw_destroy_node+0x22>
 800f7bc:	e7e3      	b.n	800f786 <rmw_destroy_node+0x32>
 800f7be:	4b22      	ldr	r3, [pc, #136]	@ (800f848 <rmw_destroy_node+0xf4>)
 800f7c0:	681c      	ldr	r4, [r3, #0]
 800f7c2:	b16c      	cbz	r4, 800f7e0 <rmw_destroy_node+0x8c>
 800f7c4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f7c8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f7ca:	429d      	cmp	r5, r3
 800f7cc:	d1f9      	bne.n	800f7c2 <rmw_destroy_node+0x6e>
 800f7ce:	317c      	adds	r1, #124	@ 0x7c
 800f7d0:	4638      	mov	r0, r7
 800f7d2:	f000 f9f3 	bl	800fbbc <rmw_destroy_service>
 800f7d6:	2801      	cmp	r0, #1
 800f7d8:	4606      	mov	r6, r0
 800f7da:	d0e3      	beq.n	800f7a4 <rmw_destroy_node+0x50>
 800f7dc:	2c00      	cmp	r4, #0
 800f7de:	d1f1      	bne.n	800f7c4 <rmw_destroy_node+0x70>
 800f7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800f84c <rmw_destroy_node+0xf8>)
 800f7e2:	681c      	ldr	r4, [r3, #0]
 800f7e4:	b16c      	cbz	r4, 800f802 <rmw_destroy_node+0xae>
 800f7e6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f7ea:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f7ec:	429d      	cmp	r5, r3
 800f7ee:	d1f9      	bne.n	800f7e4 <rmw_destroy_node+0x90>
 800f7f0:	317c      	adds	r1, #124	@ 0x7c
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f009 fac6 	bl	8018d84 <rmw_destroy_client>
 800f7f8:	2801      	cmp	r0, #1
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	d0d2      	beq.n	800f7a4 <rmw_destroy_node+0x50>
 800f7fe:	2c00      	cmp	r4, #0
 800f800:	d1f1      	bne.n	800f7e6 <rmw_destroy_node+0x92>
 800f802:	6928      	ldr	r0, [r5, #16]
 800f804:	696a      	ldr	r2, [r5, #20]
 800f806:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f80a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f80e:	6819      	ldr	r1, [r3, #0]
 800f810:	f002 fa82 	bl	8011d18 <uxr_buffer_delete_entity>
 800f814:	4602      	mov	r2, r0
 800f816:	6928      	ldr	r0, [r5, #16]
 800f818:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f81c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f820:	f000 fd8c 	bl	801033c <run_xrce_session>
 800f824:	4603      	mov	r3, r0
 800f826:	4638      	mov	r0, r7
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bf08      	it	eq
 800f82c:	2602      	moveq	r6, #2
 800f82e:	f000 fc09 	bl	8010044 <rmw_uxrce_fini_node_memory>
 800f832:	4630      	mov	r0, r6
 800f834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f836:	4626      	mov	r6, r4
 800f838:	e7a5      	b.n	800f786 <rmw_destroy_node+0x32>
 800f83a:	bf00      	nop
 800f83c:	0801d344 	.word	0x0801d344
 800f840:	24012d74 	.word	0x24012d74
 800f844:	24012db4 	.word	0x24012db4
 800f848:	24012d84 	.word	0x24012d84
 800f84c:	2400e494 	.word	0x2400e494

0800f850 <rmw_node_get_graph_guard_condition>:
 800f850:	6843      	ldr	r3, [r0, #4]
 800f852:	6918      	ldr	r0, [r3, #16]
 800f854:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop

0800f85c <flush_session>:
 800f85c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f85e:	f003 ba73 	b.w	8012d48 <uxr_run_session_until_confirm_delivery>
 800f862:	bf00      	nop

0800f864 <rmw_publish>:
 800f864:	2800      	cmp	r0, #0
 800f866:	d053      	beq.n	800f910 <rmw_publish+0xac>
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	460d      	mov	r5, r1
 800f86c:	b08e      	sub	sp, #56	@ 0x38
 800f86e:	2900      	cmp	r1, #0
 800f870:	d04b      	beq.n	800f90a <rmw_publish+0xa6>
 800f872:	4604      	mov	r4, r0
 800f874:	6800      	ldr	r0, [r0, #0]
 800f876:	f000 fddb 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d045      	beq.n	800f90a <rmw_publish+0xa6>
 800f87e:	6866      	ldr	r6, [r4, #4]
 800f880:	2e00      	cmp	r6, #0
 800f882:	d042      	beq.n	800f90a <rmw_publish+0xa6>
 800f884:	69b4      	ldr	r4, [r6, #24]
 800f886:	4628      	mov	r0, r5
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	4798      	blx	r3
 800f88c:	69f3      	ldr	r3, [r6, #28]
 800f88e:	9005      	str	r0, [sp, #20]
 800f890:	b113      	cbz	r3, 800f898 <rmw_publish+0x34>
 800f892:	a805      	add	r0, sp, #20
 800f894:	4798      	blx	r3
 800f896:	9805      	ldr	r0, [sp, #20]
 800f898:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f89c:	691b      	ldr	r3, [r3, #16]
 800f89e:	9000      	str	r0, [sp, #0]
 800f8a0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f8a4:	6972      	ldr	r2, [r6, #20]
 800f8a6:	ab06      	add	r3, sp, #24
 800f8a8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f8aa:	f004 fd1d 	bl	80142e8 <uxr_prepare_output_stream>
 800f8ae:	b1d8      	cbz	r0, 800f8e8 <rmw_publish+0x84>
 800f8b0:	68a3      	ldr	r3, [r4, #8]
 800f8b2:	a906      	add	r1, sp, #24
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	4798      	blx	r3
 800f8b8:	6a33      	ldr	r3, [r6, #32]
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	b10b      	cbz	r3, 800f8c2 <rmw_publish+0x5e>
 800f8be:	a806      	add	r0, sp, #24
 800f8c0:	4798      	blx	r3
 800f8c2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f8cc:	d022      	beq.n	800f914 <rmw_publish+0xb0>
 800f8ce:	6918      	ldr	r0, [r3, #16]
 800f8d0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f8d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8d6:	f003 fa37 	bl	8012d48 <uxr_run_session_until_confirm_delivery>
 800f8da:	4020      	ands	r0, r4
 800f8dc:	b2c4      	uxtb	r4, r0
 800f8de:	f084 0001 	eor.w	r0, r4, #1
 800f8e2:	b2c0      	uxtb	r0, r0
 800f8e4:	b00e      	add	sp, #56	@ 0x38
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
 800f8e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f8ec:	6918      	ldr	r0, [r3, #16]
 800f8ee:	9b05      	ldr	r3, [sp, #20]
 800f8f0:	9602      	str	r6, [sp, #8]
 800f8f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	4b09      	ldr	r3, [pc, #36]	@ (800f920 <rmw_publish+0xbc>)
 800f8fa:	9301      	str	r3, [sp, #4]
 800f8fc:	ab06      	add	r3, sp, #24
 800f8fe:	6972      	ldr	r2, [r6, #20]
 800f900:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f902:	f004 fd21 	bl	8014348 <uxr_prepare_output_stream_fragmented>
 800f906:	2800      	cmp	r0, #0
 800f908:	d1d2      	bne.n	800f8b0 <rmw_publish+0x4c>
 800f90a:	2001      	movs	r0, #1
 800f90c:	b00e      	add	sp, #56	@ 0x38
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	2001      	movs	r0, #1
 800f912:	4770      	bx	lr
 800f914:	6918      	ldr	r0, [r3, #16]
 800f916:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f91a:	f002 fe5b 	bl	80125d4 <uxr_flash_output_streams>
 800f91e:	e7de      	b.n	800f8de <rmw_publish+0x7a>
 800f920:	0800f85d 	.word	0x0800f85d

0800f924 <rmw_create_publisher>:
 800f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f928:	b087      	sub	sp, #28
 800f92a:	2800      	cmp	r0, #0
 800f92c:	f000 80d2 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f930:	460e      	mov	r6, r1
 800f932:	2900      	cmp	r1, #0
 800f934:	f000 80ce 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f938:	4604      	mov	r4, r0
 800f93a:	6800      	ldr	r0, [r0, #0]
 800f93c:	4615      	mov	r5, r2
 800f93e:	461f      	mov	r7, r3
 800f940:	f000 fd76 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800f944:	f080 0001 	eor.w	r0, r0, #1
 800f948:	b2c0      	uxtb	r0, r0
 800f94a:	2800      	cmp	r0, #0
 800f94c:	f040 80c2 	bne.w	800fad4 <rmw_create_publisher+0x1b0>
 800f950:	2d00      	cmp	r5, #0
 800f952:	f000 80bf 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f956:	782b      	ldrb	r3, [r5, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 80bb 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f95e:	2f00      	cmp	r7, #0
 800f960:	f000 80b8 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f964:	485e      	ldr	r0, [pc, #376]	@ (800fae0 <rmw_create_publisher+0x1bc>)
 800f966:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f96a:	f009 f9e7 	bl	8018d3c <get_memory>
 800f96e:	2800      	cmp	r0, #0
 800f970:	f000 80b0 	beq.w	800fad4 <rmw_create_publisher+0x1b0>
 800f974:	6884      	ldr	r4, [r0, #8]
 800f976:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f97a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f97e:	f009 fa45 	bl	8018e0c <rmw_get_implementation_identifier>
 800f982:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f986:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7f0 fcb2 	bl	80002f4 <strlen>
 800f990:	3001      	adds	r0, #1
 800f992:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800f996:	283c      	cmp	r0, #60	@ 0x3c
 800f998:	f200 808f 	bhi.w	800faba <rmw_create_publisher+0x196>
 800f99c:	462b      	mov	r3, r5
 800f99e:	4a51      	ldr	r2, [pc, #324]	@ (800fae4 <rmw_create_publisher+0x1c0>)
 800f9a0:	213c      	movs	r1, #60	@ 0x3c
 800f9a2:	4650      	mov	r0, sl
 800f9a4:	f00b fe7a 	bl	801b69c <sniprintf>
 800f9a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9ac:	4639      	mov	r1, r7
 800f9ae:	2250      	movs	r2, #80	@ 0x50
 800f9b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f9b2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f9b6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f9ba:	f00c f8a6 	bl	801bb0a <memcpy>
 800f9be:	7a3b      	ldrb	r3, [r7, #8]
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	4949      	ldr	r1, [pc, #292]	@ (800fae8 <rmw_create_publisher+0x1c4>)
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9ca:	bf0c      	ite	eq
 800f9cc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f9d0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f9d4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f9dc:	f000 fd36 	bl	801044c <get_message_typesupport_handle>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d06a      	beq.n	800faba <rmw_create_publisher+0x196>
 800f9e4:	6842      	ldr	r2, [r0, #4]
 800f9e6:	61a2      	str	r2, [r4, #24]
 800f9e8:	2a00      	cmp	r2, #0
 800f9ea:	d066      	beq.n	800faba <rmw_create_publisher+0x196>
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	4648      	mov	r0, r9
 800f9f2:	f009 fa11 	bl	8018e18 <create_topic>
 800f9f6:	6260      	str	r0, [r4, #36]	@ 0x24
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d062      	beq.n	800fac2 <rmw_create_publisher+0x19e>
 800f9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa00:	2103      	movs	r1, #3
 800fa02:	2506      	movs	r5, #6
 800fa04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa08:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800fa0c:	1c42      	adds	r2, r0, #1
 800fa0e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800fa12:	f002 fb99 	bl	8012148 <uxr_object_id>
 800fa16:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fa1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa1e:	6120      	str	r0, [r4, #16]
 800fa20:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800fa24:	6910      	ldr	r0, [r2, #16]
 800fa26:	9500      	str	r5, [sp, #0]
 800fa28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa2c:	6819      	ldr	r1, [r3, #0]
 800fa2e:	6922      	ldr	r2, [r4, #16]
 800fa30:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fa34:	f002 fa24 	bl	8011e80 <uxr_buffer_create_publisher_bin>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fa3e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fa42:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fa46:	f000 fc79 	bl	801033c <run_xrce_session>
 800fa4a:	b3b0      	cbz	r0, 800faba <rmw_create_publisher+0x196>
 800fa4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa50:	2105      	movs	r1, #5
 800fa52:	f10d 0a10 	add.w	sl, sp, #16
 800fa56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fa5a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800fa5e:	1c42      	adds	r2, r0, #1
 800fa60:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800fa64:	f002 fb70 	bl	8012148 <uxr_object_id>
 800fa68:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	6160      	str	r0, [r4, #20]
 800fa70:	691e      	ldr	r6, [r3, #16]
 800fa72:	4650      	mov	r0, sl
 800fa74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa78:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fa7c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800fa80:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800fa84:	f000 fc76 	bl	8010374 <convert_qos_profile>
 800fa88:	9503      	str	r5, [sp, #12]
 800fa8a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800fa8e:	9001      	str	r0, [sp, #4]
 800fa90:	4630      	mov	r0, r6
 800fa92:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fa96:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800faa2:	f002 fa1d 	bl	8011ee0 <uxr_buffer_create_datawriter_bin>
 800faa6:	4602      	mov	r2, r0
 800faa8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800faac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fab0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fab4:	f000 fc42 	bl	801033c <run_xrce_session>
 800fab8:	b970      	cbnz	r0, 800fad8 <rmw_create_publisher+0x1b4>
 800faba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fabc:	b108      	cbz	r0, 800fac2 <rmw_create_publisher+0x19e>
 800fabe:	f000 fb31 	bl	8010124 <rmw_uxrce_fini_topic_memory>
 800fac2:	4640      	mov	r0, r8
 800fac4:	f04f 0800 	mov.w	r8, #0
 800fac8:	f000 fad4 	bl	8010074 <rmw_uxrce_fini_publisher_memory>
 800facc:	4640      	mov	r0, r8
 800face:	b007      	add	sp, #28
 800fad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad4:	f04f 0800 	mov.w	r8, #0
 800fad8:	4640      	mov	r0, r8
 800fada:	b007      	add	sp, #28
 800fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae0:	24012d74 	.word	0x24012d74
 800fae4:	0801ca20 	.word	0x0801ca20
 800fae8:	0801c9ec 	.word	0x0801c9ec

0800faec <rmw_publisher_get_actual_qos>:
 800faec:	b178      	cbz	r0, 800fb0e <rmw_publisher_get_actual_qos+0x22>
 800faee:	b510      	push	{r4, lr}
 800faf0:	fab1 f481 	clz	r4, r1
 800faf4:	0964      	lsrs	r4, r4, #5
 800faf6:	b141      	cbz	r1, 800fb0a <rmw_publisher_get_actual_qos+0x1e>
 800faf8:	6843      	ldr	r3, [r0, #4]
 800fafa:	2250      	movs	r2, #80	@ 0x50
 800fafc:	4608      	mov	r0, r1
 800fafe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800fb02:	f00c f802 	bl	801bb0a <memcpy>
 800fb06:	4620      	mov	r0, r4
 800fb08:	bd10      	pop	{r4, pc}
 800fb0a:	200b      	movs	r0, #11
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	200b      	movs	r0, #11
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop

0800fb14 <rmw_destroy_publisher>:
 800fb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb18:	b128      	cbz	r0, 800fb26 <rmw_destroy_publisher+0x12>
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	6800      	ldr	r0, [r0, #0]
 800fb1e:	460d      	mov	r5, r1
 800fb20:	f000 fc86 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fb24:	b918      	cbnz	r0, 800fb2e <rmw_destroy_publisher+0x1a>
 800fb26:	2401      	movs	r4, #1
 800fb28:	4620      	mov	r0, r4
 800fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb2e:	6863      	ldr	r3, [r4, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0f8      	beq.n	800fb26 <rmw_destroy_publisher+0x12>
 800fb34:	fab5 f485 	clz	r4, r5
 800fb38:	0964      	lsrs	r4, r4, #5
 800fb3a:	2d00      	cmp	r5, #0
 800fb3c:	d0f3      	beq.n	800fb26 <rmw_destroy_publisher+0x12>
 800fb3e:	6828      	ldr	r0, [r5, #0]
 800fb40:	f000 fc76 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d0ee      	beq.n	800fb26 <rmw_destroy_publisher+0x12>
 800fb48:	686e      	ldr	r6, [r5, #4]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	d0eb      	beq.n	800fb26 <rmw_destroy_publisher+0x12>
 800fb4e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800fb50:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800fb54:	f009 f9b0 	bl	8018eb8 <destroy_topic>
 800fb58:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fb5c:	6972      	ldr	r2, [r6, #20]
 800fb5e:	6918      	ldr	r0, [r3, #16]
 800fb60:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb68:	6819      	ldr	r1, [r3, #0]
 800fb6a:	f002 f8d5 	bl	8011d18 <uxr_buffer_delete_entity>
 800fb6e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fb72:	4680      	mov	r8, r0
 800fb74:	6932      	ldr	r2, [r6, #16]
 800fb76:	6918      	ldr	r0, [r3, #16]
 800fb78:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb80:	6819      	ldr	r1, [r3, #0]
 800fb82:	f002 f8c9 	bl	8011d18 <uxr_buffer_delete_entity>
 800fb86:	4606      	mov	r6, r0
 800fb88:	6938      	ldr	r0, [r7, #16]
 800fb8a:	4642      	mov	r2, r8
 800fb8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb94:	f000 fbd2 	bl	801033c <run_xrce_session>
 800fb98:	693f      	ldr	r7, [r7, #16]
 800fb9a:	4632      	mov	r2, r6
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fba2:	4638      	mov	r0, r7
 800fba4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fba8:	f000 fbc8 	bl	801033c <run_xrce_session>
 800fbac:	b126      	cbz	r6, 800fbb8 <rmw_destroy_publisher+0xa4>
 800fbae:	b118      	cbz	r0, 800fbb8 <rmw_destroy_publisher+0xa4>
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	f000 fa5f 	bl	8010074 <rmw_uxrce_fini_publisher_memory>
 800fbb6:	e7b7      	b.n	800fb28 <rmw_destroy_publisher+0x14>
 800fbb8:	2402      	movs	r4, #2
 800fbba:	e7f9      	b.n	800fbb0 <rmw_destroy_publisher+0x9c>

0800fbbc <rmw_destroy_service>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	b128      	cbz	r0, 800fbcc <rmw_destroy_service+0x10>
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	6800      	ldr	r0, [r0, #0]
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	f000 fc33 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fbca:	b910      	cbnz	r0, 800fbd2 <rmw_destroy_service+0x16>
 800fbcc:	2401      	movs	r4, #1
 800fbce:	4620      	mov	r0, r4
 800fbd0:	bd70      	pop	{r4, r5, r6, pc}
 800fbd2:	6863      	ldr	r3, [r4, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d0f9      	beq.n	800fbcc <rmw_destroy_service+0x10>
 800fbd8:	2d00      	cmp	r5, #0
 800fbda:	d0f7      	beq.n	800fbcc <rmw_destroy_service+0x10>
 800fbdc:	6828      	ldr	r0, [r5, #0]
 800fbde:	f000 fc27 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d0f2      	beq.n	800fbcc <rmw_destroy_service+0x10>
 800fbe6:	686e      	ldr	r6, [r5, #4]
 800fbe8:	2e00      	cmp	r6, #0
 800fbea:	d0ef      	beq.n	800fbcc <rmw_destroy_service+0x10>
 800fbec:	6864      	ldr	r4, [r4, #4]
 800fbee:	6932      	ldr	r2, [r6, #16]
 800fbf0:	6920      	ldr	r0, [r4, #16]
 800fbf2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fbf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbfa:	6819      	ldr	r1, [r3, #0]
 800fbfc:	f002 fad4 	bl	80121a8 <uxr_buffer_cancel_data>
 800fc00:	4602      	mov	r2, r0
 800fc02:	6920      	ldr	r0, [r4, #16]
 800fc04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc0c:	f000 fb96 	bl	801033c <run_xrce_session>
 800fc10:	6920      	ldr	r0, [r4, #16]
 800fc12:	6932      	ldr	r2, [r6, #16]
 800fc14:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fc18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc1c:	6819      	ldr	r1, [r3, #0]
 800fc1e:	f002 f87b 	bl	8011d18 <uxr_buffer_delete_entity>
 800fc22:	4602      	mov	r2, r0
 800fc24:	6920      	ldr	r0, [r4, #16]
 800fc26:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc2e:	f000 fb85 	bl	801033c <run_xrce_session>
 800fc32:	4603      	mov	r3, r0
 800fc34:	4628      	mov	r0, r5
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	bf14      	ite	ne
 800fc3a:	2400      	movne	r4, #0
 800fc3c:	2402      	moveq	r4, #2
 800fc3e:	f000 fa45 	bl	80100cc <rmw_uxrce_fini_service_memory>
 800fc42:	e7c4      	b.n	800fbce <rmw_destroy_service+0x12>

0800fc44 <rmw_destroy_subscription>:
 800fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc48:	b128      	cbz	r0, 800fc56 <rmw_destroy_subscription+0x12>
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	6800      	ldr	r0, [r0, #0]
 800fc4e:	460d      	mov	r5, r1
 800fc50:	f000 fbee 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fc54:	b918      	cbnz	r0, 800fc5e <rmw_destroy_subscription+0x1a>
 800fc56:	2401      	movs	r4, #1
 800fc58:	4620      	mov	r0, r4
 800fc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5e:	6863      	ldr	r3, [r4, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d0f8      	beq.n	800fc56 <rmw_destroy_subscription+0x12>
 800fc64:	fab5 f485 	clz	r4, r5
 800fc68:	0964      	lsrs	r4, r4, #5
 800fc6a:	2d00      	cmp	r5, #0
 800fc6c:	d0f3      	beq.n	800fc56 <rmw_destroy_subscription+0x12>
 800fc6e:	6828      	ldr	r0, [r5, #0]
 800fc70:	f000 fbde 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d0ee      	beq.n	800fc56 <rmw_destroy_subscription+0x12>
 800fc78:	686e      	ldr	r6, [r5, #4]
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	d0eb      	beq.n	800fc56 <rmw_destroy_subscription+0x12>
 800fc7e:	6a37      	ldr	r7, [r6, #32]
 800fc80:	6972      	ldr	r2, [r6, #20]
 800fc82:	6938      	ldr	r0, [r7, #16]
 800fc84:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fc88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc8c:	6819      	ldr	r1, [r3, #0]
 800fc8e:	f002 fa8b 	bl	80121a8 <uxr_buffer_cancel_data>
 800fc92:	4602      	mov	r2, r0
 800fc94:	6938      	ldr	r0, [r7, #16]
 800fc96:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fc9a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fc9e:	f000 fb4d 	bl	801033c <run_xrce_session>
 800fca2:	69f0      	ldr	r0, [r6, #28]
 800fca4:	f009 f908 	bl	8018eb8 <destroy_topic>
 800fca8:	6a33      	ldr	r3, [r6, #32]
 800fcaa:	6972      	ldr	r2, [r6, #20]
 800fcac:	6918      	ldr	r0, [r3, #16]
 800fcae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fcb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fcb6:	6819      	ldr	r1, [r3, #0]
 800fcb8:	f002 f82e 	bl	8011d18 <uxr_buffer_delete_entity>
 800fcbc:	6a33      	ldr	r3, [r6, #32]
 800fcbe:	4680      	mov	r8, r0
 800fcc0:	6932      	ldr	r2, [r6, #16]
 800fcc2:	6918      	ldr	r0, [r3, #16]
 800fcc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fcc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fccc:	6819      	ldr	r1, [r3, #0]
 800fcce:	f002 f823 	bl	8011d18 <uxr_buffer_delete_entity>
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	6938      	ldr	r0, [r7, #16]
 800fcd6:	4642      	mov	r2, r8
 800fcd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fcdc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fce0:	f000 fb2c 	bl	801033c <run_xrce_session>
 800fce4:	693f      	ldr	r7, [r7, #16]
 800fce6:	4632      	mov	r2, r6
 800fce8:	4606      	mov	r6, r0
 800fcea:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fcee:	4638      	mov	r0, r7
 800fcf0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fcf4:	f000 fb22 	bl	801033c <run_xrce_session>
 800fcf8:	b126      	cbz	r6, 800fd04 <rmw_destroy_subscription+0xc0>
 800fcfa:	b118      	cbz	r0, 800fd04 <rmw_destroy_subscription+0xc0>
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	f000 f9cf 	bl	80100a0 <rmw_uxrce_fini_subscription_memory>
 800fd02:	e7a9      	b.n	800fc58 <rmw_destroy_subscription+0x14>
 800fd04:	2402      	movs	r4, #2
 800fd06:	e7f9      	b.n	800fcfc <rmw_destroy_subscription+0xb8>

0800fd08 <rmw_uxrce_transport_init>:
 800fd08:	b508      	push	{r3, lr}
 800fd0a:	b108      	cbz	r0, 800fd10 <rmw_uxrce_transport_init+0x8>
 800fd0c:	f100 0210 	add.w	r2, r0, #16
 800fd10:	b139      	cbz	r1, 800fd22 <rmw_uxrce_transport_init+0x1a>
 800fd12:	6949      	ldr	r1, [r1, #20]
 800fd14:	4610      	mov	r0, r2
 800fd16:	f002 f9df 	bl	80120d8 <uxr_init_custom_transport>
 800fd1a:	f080 0001 	eor.w	r0, r0, #1
 800fd1e:	b2c0      	uxtb	r0, r0
 800fd20:	bd08      	pop	{r3, pc}
 800fd22:	4b04      	ldr	r3, [pc, #16]	@ (800fd34 <rmw_uxrce_transport_init+0x2c>)
 800fd24:	4610      	mov	r0, r2
 800fd26:	6859      	ldr	r1, [r3, #4]
 800fd28:	f002 f9d6 	bl	80120d8 <uxr_init_custom_transport>
 800fd2c:	f080 0001 	eor.w	r0, r0, #1
 800fd30:	b2c0      	uxtb	r0, r0
 800fd32:	bd08      	pop	{r3, pc}
 800fd34:	2400e43c 	.word	0x2400e43c

0800fd38 <rmw_uros_epoch_nanos>:
 800fd38:	4b05      	ldr	r3, [pc, #20]	@ (800fd50 <rmw_uros_epoch_nanos+0x18>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	b123      	cbz	r3, 800fd48 <rmw_uros_epoch_nanos+0x10>
 800fd3e:	6898      	ldr	r0, [r3, #8]
 800fd40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd44:	f002 bc3c 	b.w	80125c0 <uxr_epoch_nanos>
 800fd48:	2000      	movs	r0, #0
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	24012d94 	.word	0x24012d94

0800fd54 <rmw_uros_sync_session>:
 800fd54:	b508      	push	{r3, lr}
 800fd56:	4b07      	ldr	r3, [pc, #28]	@ (800fd74 <rmw_uros_sync_session+0x20>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	b14b      	cbz	r3, 800fd70 <rmw_uros_sync_session+0x1c>
 800fd5c:	4601      	mov	r1, r0
 800fd5e:	6898      	ldr	r0, [r3, #8]
 800fd60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd64:	f003 f86c 	bl	8012e40 <uxr_sync_session>
 800fd68:	f080 0001 	eor.w	r0, r0, #1
 800fd6c:	b2c0      	uxtb	r0, r0
 800fd6e:	bd08      	pop	{r3, pc}
 800fd70:	2001      	movs	r0, #1
 800fd72:	bd08      	pop	{r3, pc}
 800fd74:	24012d94 	.word	0x24012d94

0800fd78 <rmw_uxrce_init_service_memory>:
 800fd78:	b1e2      	cbz	r2, 800fdb4 <rmw_uxrce_init_service_memory+0x3c>
 800fd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7e:	7b05      	ldrb	r5, [r0, #12]
 800fd80:	4606      	mov	r6, r0
 800fd82:	b9ad      	cbnz	r5, 800fdb0 <rmw_uxrce_init_service_memory+0x38>
 800fd84:	23c8      	movs	r3, #200	@ 0xc8
 800fd86:	4617      	mov	r7, r2
 800fd88:	460c      	mov	r4, r1
 800fd8a:	46a8      	mov	r8, r5
 800fd8c:	6083      	str	r3, [r0, #8]
 800fd8e:	f240 1301 	movw	r3, #257	@ 0x101
 800fd92:	e9c0 5500 	strd	r5, r5, [r0]
 800fd96:	8183      	strh	r3, [r0, #12]
 800fd98:	3501      	adds	r5, #1
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f008 ffdd 	bl	8018d5c <put_memory>
 800fda2:	42af      	cmp	r7, r5
 800fda4:	60a4      	str	r4, [r4, #8]
 800fda6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fdaa:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fdae:	d1f3      	bne.n	800fd98 <rmw_uxrce_init_service_memory+0x20>
 800fdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop

0800fdb8 <rmw_uxrce_init_client_memory>:
 800fdb8:	b1e2      	cbz	r2, 800fdf4 <rmw_uxrce_init_client_memory+0x3c>
 800fdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbe:	7b05      	ldrb	r5, [r0, #12]
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	b9ad      	cbnz	r5, 800fdf0 <rmw_uxrce_init_client_memory+0x38>
 800fdc4:	23c8      	movs	r3, #200	@ 0xc8
 800fdc6:	4617      	mov	r7, r2
 800fdc8:	460c      	mov	r4, r1
 800fdca:	46a8      	mov	r8, r5
 800fdcc:	6083      	str	r3, [r0, #8]
 800fdce:	f240 1301 	movw	r3, #257	@ 0x101
 800fdd2:	e9c0 5500 	strd	r5, r5, [r0]
 800fdd6:	8183      	strh	r3, [r0, #12]
 800fdd8:	3501      	adds	r5, #1
 800fdda:	4621      	mov	r1, r4
 800fddc:	4630      	mov	r0, r6
 800fdde:	f008 ffbd 	bl	8018d5c <put_memory>
 800fde2:	42af      	cmp	r7, r5
 800fde4:	60a4      	str	r4, [r4, #8]
 800fde6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fdea:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fdee:	d1f3      	bne.n	800fdd8 <rmw_uxrce_init_client_memory+0x20>
 800fdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop

0800fdf8 <rmw_uxrce_init_publisher_memory>:
 800fdf8:	b1e2      	cbz	r2, 800fe34 <rmw_uxrce_init_publisher_memory+0x3c>
 800fdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfe:	7b05      	ldrb	r5, [r0, #12]
 800fe00:	4606      	mov	r6, r0
 800fe02:	b9ad      	cbnz	r5, 800fe30 <rmw_uxrce_init_publisher_memory+0x38>
 800fe04:	23d8      	movs	r3, #216	@ 0xd8
 800fe06:	4617      	mov	r7, r2
 800fe08:	460c      	mov	r4, r1
 800fe0a:	46a8      	mov	r8, r5
 800fe0c:	6083      	str	r3, [r0, #8]
 800fe0e:	f240 1301 	movw	r3, #257	@ 0x101
 800fe12:	e9c0 5500 	strd	r5, r5, [r0]
 800fe16:	8183      	strh	r3, [r0, #12]
 800fe18:	3501      	adds	r5, #1
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f008 ff9d 	bl	8018d5c <put_memory>
 800fe22:	42af      	cmp	r7, r5
 800fe24:	60a4      	str	r4, [r4, #8]
 800fe26:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fe2a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fe2e:	d1f3      	bne.n	800fe18 <rmw_uxrce_init_publisher_memory+0x20>
 800fe30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop

0800fe38 <rmw_uxrce_init_subscription_memory>:
 800fe38:	b1e2      	cbz	r2, 800fe74 <rmw_uxrce_init_subscription_memory+0x3c>
 800fe3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe3e:	7b05      	ldrb	r5, [r0, #12]
 800fe40:	4606      	mov	r6, r0
 800fe42:	b9ad      	cbnz	r5, 800fe70 <rmw_uxrce_init_subscription_memory+0x38>
 800fe44:	23d8      	movs	r3, #216	@ 0xd8
 800fe46:	4617      	mov	r7, r2
 800fe48:	460c      	mov	r4, r1
 800fe4a:	46a8      	mov	r8, r5
 800fe4c:	6083      	str	r3, [r0, #8]
 800fe4e:	f240 1301 	movw	r3, #257	@ 0x101
 800fe52:	e9c0 5500 	strd	r5, r5, [r0]
 800fe56:	8183      	strh	r3, [r0, #12]
 800fe58:	3501      	adds	r5, #1
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f008 ff7d 	bl	8018d5c <put_memory>
 800fe62:	42af      	cmp	r7, r5
 800fe64:	60a4      	str	r4, [r4, #8]
 800fe66:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fe6a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fe6e:	d1f3      	bne.n	800fe58 <rmw_uxrce_init_subscription_memory+0x20>
 800fe70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop

0800fe78 <rmw_uxrce_init_node_memory>:
 800fe78:	b1e2      	cbz	r2, 800feb4 <rmw_uxrce_init_node_memory+0x3c>
 800fe7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7e:	7b05      	ldrb	r5, [r0, #12]
 800fe80:	4606      	mov	r6, r0
 800fe82:	b9ad      	cbnz	r5, 800feb0 <rmw_uxrce_init_node_memory+0x38>
 800fe84:	23a4      	movs	r3, #164	@ 0xa4
 800fe86:	4617      	mov	r7, r2
 800fe88:	460c      	mov	r4, r1
 800fe8a:	46a8      	mov	r8, r5
 800fe8c:	6083      	str	r3, [r0, #8]
 800fe8e:	f240 1301 	movw	r3, #257	@ 0x101
 800fe92:	e9c0 5500 	strd	r5, r5, [r0]
 800fe96:	8183      	strh	r3, [r0, #12]
 800fe98:	3501      	adds	r5, #1
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f008 ff5d 	bl	8018d5c <put_memory>
 800fea2:	42af      	cmp	r7, r5
 800fea4:	60a4      	str	r4, [r4, #8]
 800fea6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800feaa:	f804 8c98 	strb.w	r8, [r4, #-152]
 800feae:	d1f3      	bne.n	800fe98 <rmw_uxrce_init_node_memory+0x20>
 800feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop

0800feb8 <rmw_uxrce_init_session_memory>:
 800feb8:	b1ea      	cbz	r2, 800fef6 <rmw_uxrce_init_session_memory+0x3e>
 800feba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800febe:	7b05      	ldrb	r5, [r0, #12]
 800fec0:	4606      	mov	r6, r0
 800fec2:	b9b5      	cbnz	r5, 800fef2 <rmw_uxrce_init_session_memory+0x3a>
 800fec4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fec8:	f240 1301 	movw	r3, #257	@ 0x101
 800fecc:	4617      	mov	r7, r2
 800fece:	460c      	mov	r4, r1
 800fed0:	46a9      	mov	r9, r5
 800fed2:	f8c0 8008 	str.w	r8, [r0, #8]
 800fed6:	8183      	strh	r3, [r0, #12]
 800fed8:	e9c0 5500 	strd	r5, r5, [r0]
 800fedc:	3501      	adds	r5, #1
 800fede:	4621      	mov	r1, r4
 800fee0:	4630      	mov	r0, r6
 800fee2:	f008 ff3b 	bl	8018d5c <put_memory>
 800fee6:	42af      	cmp	r7, r5
 800fee8:	60a4      	str	r4, [r4, #8]
 800feea:	f884 900c 	strb.w	r9, [r4, #12]
 800feee:	4444      	add	r4, r8
 800fef0:	d1f4      	bne.n	800fedc <rmw_uxrce_init_session_memory+0x24>
 800fef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fef6:	4770      	bx	lr

0800fef8 <rmw_uxrce_init_topic_memory>:
 800fef8:	b1e2      	cbz	r2, 800ff34 <rmw_uxrce_init_topic_memory+0x3c>
 800fefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefe:	7b05      	ldrb	r5, [r0, #12]
 800ff00:	4606      	mov	r6, r0
 800ff02:	b9ad      	cbnz	r5, 800ff30 <rmw_uxrce_init_topic_memory+0x38>
 800ff04:	231c      	movs	r3, #28
 800ff06:	4617      	mov	r7, r2
 800ff08:	460c      	mov	r4, r1
 800ff0a:	46a8      	mov	r8, r5
 800ff0c:	6083      	str	r3, [r0, #8]
 800ff0e:	f240 1301 	movw	r3, #257	@ 0x101
 800ff12:	e9c0 5500 	strd	r5, r5, [r0]
 800ff16:	8183      	strh	r3, [r0, #12]
 800ff18:	3501      	adds	r5, #1
 800ff1a:	4621      	mov	r1, r4
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f008 ff1d 	bl	8018d5c <put_memory>
 800ff22:	42af      	cmp	r7, r5
 800ff24:	60a4      	str	r4, [r4, #8]
 800ff26:	f104 041c 	add.w	r4, r4, #28
 800ff2a:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ff2e:	d1f3      	bne.n	800ff18 <rmw_uxrce_init_topic_memory+0x20>
 800ff30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <rmw_uxrce_init_static_input_buffer_memory>:
 800ff38:	b1ea      	cbz	r2, 800ff76 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ff3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3e:	7b05      	ldrb	r5, [r0, #12]
 800ff40:	4606      	mov	r6, r0
 800ff42:	b9b5      	cbnz	r5, 800ff72 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ff44:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ff48:	4617      	mov	r7, r2
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	46a8      	mov	r8, r5
 800ff4e:	6083      	str	r3, [r0, #8]
 800ff50:	f240 1301 	movw	r3, #257	@ 0x101
 800ff54:	e9c0 5500 	strd	r5, r5, [r0]
 800ff58:	8183      	strh	r3, [r0, #12]
 800ff5a:	3501      	adds	r5, #1
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f008 fefc 	bl	8018d5c <put_memory>
 800ff64:	42af      	cmp	r7, r5
 800ff66:	60a4      	str	r4, [r4, #8]
 800ff68:	f884 800c 	strb.w	r8, [r4, #12]
 800ff6c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ff70:	d1f3      	bne.n	800ff5a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff76:	4770      	bx	lr

0800ff78 <rmw_uxrce_init_init_options_impl_memory>:
 800ff78:	b1e2      	cbz	r2, 800ffb4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7e:	7b05      	ldrb	r5, [r0, #12]
 800ff80:	4606      	mov	r6, r0
 800ff82:	b9ad      	cbnz	r5, 800ffb0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ff84:	232c      	movs	r3, #44	@ 0x2c
 800ff86:	4617      	mov	r7, r2
 800ff88:	460c      	mov	r4, r1
 800ff8a:	46a8      	mov	r8, r5
 800ff8c:	6083      	str	r3, [r0, #8]
 800ff8e:	f240 1301 	movw	r3, #257	@ 0x101
 800ff92:	e9c0 5500 	strd	r5, r5, [r0]
 800ff96:	8183      	strh	r3, [r0, #12]
 800ff98:	3501      	adds	r5, #1
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f008 fedd 	bl	8018d5c <put_memory>
 800ffa2:	42af      	cmp	r7, r5
 800ffa4:	60a4      	str	r4, [r4, #8]
 800ffa6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ffaa:	f804 8c20 	strb.w	r8, [r4, #-32]
 800ffae:	d1f3      	bne.n	800ff98 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ffb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop

0800ffb8 <rmw_uxrce_init_wait_set_memory>:
 800ffb8:	b1e2      	cbz	r2, 800fff4 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ffba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbe:	7b05      	ldrb	r5, [r0, #12]
 800ffc0:	4606      	mov	r6, r0
 800ffc2:	b9ad      	cbnz	r5, 800fff0 <rmw_uxrce_init_wait_set_memory+0x38>
 800ffc4:	231c      	movs	r3, #28
 800ffc6:	4617      	mov	r7, r2
 800ffc8:	460c      	mov	r4, r1
 800ffca:	46a8      	mov	r8, r5
 800ffcc:	6083      	str	r3, [r0, #8]
 800ffce:	f240 1301 	movw	r3, #257	@ 0x101
 800ffd2:	e9c0 5500 	strd	r5, r5, [r0]
 800ffd6:	8183      	strh	r3, [r0, #12]
 800ffd8:	3501      	adds	r5, #1
 800ffda:	4621      	mov	r1, r4
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f008 febd 	bl	8018d5c <put_memory>
 800ffe2:	42af      	cmp	r7, r5
 800ffe4:	60a4      	str	r4, [r4, #8]
 800ffe6:	f104 041c 	add.w	r4, r4, #28
 800ffea:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ffee:	d1f3      	bne.n	800ffd8 <rmw_uxrce_init_wait_set_memory+0x20>
 800fff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop

0800fff8 <rmw_uxrce_init_guard_condition_memory>:
 800fff8:	b1e2      	cbz	r2, 8010034 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fffe:	7b05      	ldrb	r5, [r0, #12]
 8010000:	4606      	mov	r6, r0
 8010002:	b9ad      	cbnz	r5, 8010030 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010004:	2320      	movs	r3, #32
 8010006:	4617      	mov	r7, r2
 8010008:	460c      	mov	r4, r1
 801000a:	46a8      	mov	r8, r5
 801000c:	6083      	str	r3, [r0, #8]
 801000e:	f240 1301 	movw	r3, #257	@ 0x101
 8010012:	e9c0 5500 	strd	r5, r5, [r0]
 8010016:	8183      	strh	r3, [r0, #12]
 8010018:	3501      	adds	r5, #1
 801001a:	4621      	mov	r1, r4
 801001c:	4630      	mov	r0, r6
 801001e:	f008 fe9d 	bl	8018d5c <put_memory>
 8010022:	42af      	cmp	r7, r5
 8010024:	60a4      	str	r4, [r4, #8]
 8010026:	f104 0420 	add.w	r4, r4, #32
 801002a:	f804 8c14 	strb.w	r8, [r4, #-20]
 801002e:	d1f3      	bne.n	8010018 <rmw_uxrce_init_guard_condition_memory+0x20>
 8010030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop

08010038 <rmw_uxrce_fini_session_memory>:
 8010038:	4601      	mov	r1, r0
 801003a:	4801      	ldr	r0, [pc, #4]	@ (8010040 <rmw_uxrce_fini_session_memory+0x8>)
 801003c:	f008 be8e 	b.w	8018d5c <put_memory>
 8010040:	24012d94 	.word	0x24012d94

08010044 <rmw_uxrce_fini_node_memory>:
 8010044:	b538      	push	{r3, r4, r5, lr}
 8010046:	4604      	mov	r4, r0
 8010048:	6800      	ldr	r0, [r0, #0]
 801004a:	b128      	cbz	r0, 8010058 <rmw_uxrce_fini_node_memory+0x14>
 801004c:	4b07      	ldr	r3, [pc, #28]	@ (801006c <rmw_uxrce_fini_node_memory+0x28>)
 801004e:	6819      	ldr	r1, [r3, #0]
 8010050:	f7f0 f946 	bl	80002e0 <strcmp>
 8010054:	b940      	cbnz	r0, 8010068 <rmw_uxrce_fini_node_memory+0x24>
 8010056:	6020      	str	r0, [r4, #0]
 8010058:	6861      	ldr	r1, [r4, #4]
 801005a:	b129      	cbz	r1, 8010068 <rmw_uxrce_fini_node_memory+0x24>
 801005c:	2500      	movs	r5, #0
 801005e:	4804      	ldr	r0, [pc, #16]	@ (8010070 <rmw_uxrce_fini_node_memory+0x2c>)
 8010060:	610d      	str	r5, [r1, #16]
 8010062:	f008 fe7b 	bl	8018d5c <put_memory>
 8010066:	6065      	str	r5, [r4, #4]
 8010068:	bd38      	pop	{r3, r4, r5, pc}
 801006a:	bf00      	nop
 801006c:	0801d344 	.word	0x0801d344
 8010070:	24012d64 	.word	0x24012d64

08010074 <rmw_uxrce_fini_publisher_memory>:
 8010074:	b510      	push	{r4, lr}
 8010076:	4604      	mov	r4, r0
 8010078:	6800      	ldr	r0, [r0, #0]
 801007a:	b128      	cbz	r0, 8010088 <rmw_uxrce_fini_publisher_memory+0x14>
 801007c:	4b06      	ldr	r3, [pc, #24]	@ (8010098 <rmw_uxrce_fini_publisher_memory+0x24>)
 801007e:	6819      	ldr	r1, [r3, #0]
 8010080:	f7f0 f92e 	bl	80002e0 <strcmp>
 8010084:	b938      	cbnz	r0, 8010096 <rmw_uxrce_fini_publisher_memory+0x22>
 8010086:	6020      	str	r0, [r4, #0]
 8010088:	6861      	ldr	r1, [r4, #4]
 801008a:	b121      	cbz	r1, 8010096 <rmw_uxrce_fini_publisher_memory+0x22>
 801008c:	4803      	ldr	r0, [pc, #12]	@ (801009c <rmw_uxrce_fini_publisher_memory+0x28>)
 801008e:	f008 fe65 	bl	8018d5c <put_memory>
 8010092:	2300      	movs	r3, #0
 8010094:	6063      	str	r3, [r4, #4]
 8010096:	bd10      	pop	{r4, pc}
 8010098:	0801d344 	.word	0x0801d344
 801009c:	24012d74 	.word	0x24012d74

080100a0 <rmw_uxrce_fini_subscription_memory>:
 80100a0:	b510      	push	{r4, lr}
 80100a2:	4604      	mov	r4, r0
 80100a4:	6800      	ldr	r0, [r0, #0]
 80100a6:	b128      	cbz	r0, 80100b4 <rmw_uxrce_fini_subscription_memory+0x14>
 80100a8:	4b06      	ldr	r3, [pc, #24]	@ (80100c4 <rmw_uxrce_fini_subscription_memory+0x24>)
 80100aa:	6819      	ldr	r1, [r3, #0]
 80100ac:	f7f0 f918 	bl	80002e0 <strcmp>
 80100b0:	b938      	cbnz	r0, 80100c2 <rmw_uxrce_fini_subscription_memory+0x22>
 80100b2:	6020      	str	r0, [r4, #0]
 80100b4:	6861      	ldr	r1, [r4, #4]
 80100b6:	b121      	cbz	r1, 80100c2 <rmw_uxrce_fini_subscription_memory+0x22>
 80100b8:	4803      	ldr	r0, [pc, #12]	@ (80100c8 <rmw_uxrce_fini_subscription_memory+0x28>)
 80100ba:	f008 fe4f 	bl	8018d5c <put_memory>
 80100be:	2300      	movs	r3, #0
 80100c0:	6063      	str	r3, [r4, #4]
 80100c2:	bd10      	pop	{r4, pc}
 80100c4:	0801d344 	.word	0x0801d344
 80100c8:	24012db4 	.word	0x24012db4

080100cc <rmw_uxrce_fini_service_memory>:
 80100cc:	b510      	push	{r4, lr}
 80100ce:	4604      	mov	r4, r0
 80100d0:	6800      	ldr	r0, [r0, #0]
 80100d2:	b128      	cbz	r0, 80100e0 <rmw_uxrce_fini_service_memory+0x14>
 80100d4:	4b06      	ldr	r3, [pc, #24]	@ (80100f0 <rmw_uxrce_fini_service_memory+0x24>)
 80100d6:	6819      	ldr	r1, [r3, #0]
 80100d8:	f7f0 f902 	bl	80002e0 <strcmp>
 80100dc:	b938      	cbnz	r0, 80100ee <rmw_uxrce_fini_service_memory+0x22>
 80100de:	6020      	str	r0, [r4, #0]
 80100e0:	6861      	ldr	r1, [r4, #4]
 80100e2:	b121      	cbz	r1, 80100ee <rmw_uxrce_fini_service_memory+0x22>
 80100e4:	4803      	ldr	r0, [pc, #12]	@ (80100f4 <rmw_uxrce_fini_service_memory+0x28>)
 80100e6:	f008 fe39 	bl	8018d5c <put_memory>
 80100ea:	2300      	movs	r3, #0
 80100ec:	6063      	str	r3, [r4, #4]
 80100ee:	bd10      	pop	{r4, pc}
 80100f0:	0801d344 	.word	0x0801d344
 80100f4:	24012d84 	.word	0x24012d84

080100f8 <rmw_uxrce_fini_client_memory>:
 80100f8:	b510      	push	{r4, lr}
 80100fa:	4604      	mov	r4, r0
 80100fc:	6800      	ldr	r0, [r0, #0]
 80100fe:	b128      	cbz	r0, 801010c <rmw_uxrce_fini_client_memory+0x14>
 8010100:	4b06      	ldr	r3, [pc, #24]	@ (801011c <rmw_uxrce_fini_client_memory+0x24>)
 8010102:	6819      	ldr	r1, [r3, #0]
 8010104:	f7f0 f8ec 	bl	80002e0 <strcmp>
 8010108:	b938      	cbnz	r0, 801011a <rmw_uxrce_fini_client_memory+0x22>
 801010a:	6020      	str	r0, [r4, #0]
 801010c:	6861      	ldr	r1, [r4, #4]
 801010e:	b121      	cbz	r1, 801011a <rmw_uxrce_fini_client_memory+0x22>
 8010110:	4803      	ldr	r0, [pc, #12]	@ (8010120 <rmw_uxrce_fini_client_memory+0x28>)
 8010112:	f008 fe23 	bl	8018d5c <put_memory>
 8010116:	2300      	movs	r3, #0
 8010118:	6063      	str	r3, [r4, #4]
 801011a:	bd10      	pop	{r4, pc}
 801011c:	0801d344 	.word	0x0801d344
 8010120:	2400e494 	.word	0x2400e494

08010124 <rmw_uxrce_fini_topic_memory>:
 8010124:	b510      	push	{r4, lr}
 8010126:	4604      	mov	r4, r0
 8010128:	4803      	ldr	r0, [pc, #12]	@ (8010138 <rmw_uxrce_fini_topic_memory+0x14>)
 801012a:	4621      	mov	r1, r4
 801012c:	f008 fe16 	bl	8018d5c <put_memory>
 8010130:	2300      	movs	r3, #0
 8010132:	61a3      	str	r3, [r4, #24]
 8010134:	bd10      	pop	{r4, pc}
 8010136:	bf00      	nop
 8010138:	24012dc4 	.word	0x24012dc4

0801013c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801013c:	b082      	sub	sp, #8
 801013e:	492b      	ldr	r1, [pc, #172]	@ (80101ec <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010140:	b530      	push	{r4, r5, lr}
 8010142:	680d      	ldr	r5, [r1, #0]
 8010144:	ac03      	add	r4, sp, #12
 8010146:	e884 000c 	stmia.w	r4, {r2, r3}
 801014a:	461c      	mov	r4, r3
 801014c:	2d00      	cmp	r5, #0
 801014e:	d04b      	beq.n	80101e8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8010150:	462b      	mov	r3, r5
 8010152:	2100      	movs	r1, #0
 8010154:	689a      	ldr	r2, [r3, #8]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801015c:	4290      	cmp	r0, r2
 801015e:	bf08      	it	eq
 8010160:	3101      	addeq	r1, #1
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1f6      	bne.n	8010154 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010166:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801016a:	2b02      	cmp	r3, #2
 801016c:	d029      	beq.n	80101c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801016e:	d820      	bhi.n	80101b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8010170:	428c      	cmp	r4, r1
 8010172:	d828      	bhi.n	80101c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010174:	fab4 f284 	clz	r2, r4
 8010178:	0952      	lsrs	r2, r2, #5
 801017a:	b324      	cbz	r4, 80101c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801017c:	b1dd      	cbz	r5, 80101b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801017e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010182:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010186:	e001      	b.n	801018c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010188:	686d      	ldr	r5, [r5, #4]
 801018a:	b1ad      	cbz	r5, 80101b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801018c:	68ab      	ldr	r3, [r5, #8]
 801018e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8010192:	4288      	cmp	r0, r1
 8010194:	d1f8      	bne.n	8010188 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010196:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801019a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801019e:	4561      	cmp	r1, ip
 80101a0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80101a4:	eb73 0e04 	sbcs.w	lr, r3, r4
 80101a8:	daee      	bge.n	8010188 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80101aa:	468c      	mov	ip, r1
 80101ac:	461c      	mov	r4, r3
 80101ae:	462a      	mov	r2, r5
 80101b0:	e7ea      	b.n	8010188 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d0dc      	beq.n	8010170 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 80101b6:	2200      	movs	r2, #0
 80101b8:	4610      	mov	r0, r2
 80101ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101be:	b002      	add	sp, #8
 80101c0:	4770      	bx	lr
 80101c2:	428c      	cmp	r4, r1
 80101c4:	d905      	bls.n	80101d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80101c6:	4809      	ldr	r0, [pc, #36]	@ (80101ec <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80101c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101cc:	b002      	add	sp, #8
 80101ce:	f008 bdb5 	b.w	8018d3c <get_memory>
 80101d2:	fab4 f284 	clz	r2, r4
 80101d6:	0952      	lsrs	r2, r2, #5
 80101d8:	2c00      	cmp	r4, #0
 80101da:	d1ed      	bne.n	80101b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80101dc:	4803      	ldr	r0, [pc, #12]	@ (80101ec <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80101de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101e2:	b002      	add	sp, #8
 80101e4:	f008 bdaa 	b.w	8018d3c <get_memory>
 80101e8:	4629      	mov	r1, r5
 80101ea:	e7bc      	b.n	8010166 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80101ec:	24012da4 	.word	0x24012da4

080101f0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80101f0:	4b12      	ldr	r3, [pc, #72]	@ (801023c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	b530      	push	{r4, r5, lr}
 80101f6:	b1f3      	cbz	r3, 8010236 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80101f8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80101fc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010200:	2400      	movs	r4, #0
 8010202:	e001      	b.n	8010208 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	b1a3      	cbz	r3, 8010232 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010208:	689a      	ldr	r2, [r3, #8]
 801020a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801020e:	4288      	cmp	r0, r1
 8010210:	d1f8      	bne.n	8010204 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010212:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010216:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801021a:	4571      	cmp	r1, lr
 801021c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010220:	eb72 050c 	sbcs.w	r5, r2, ip
 8010224:	daee      	bge.n	8010204 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010226:	461c      	mov	r4, r3
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	468e      	mov	lr, r1
 801022c:	4694      	mov	ip, r2
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1ea      	bne.n	8010208 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010232:	4620      	mov	r0, r4
 8010234:	bd30      	pop	{r4, r5, pc}
 8010236:	461c      	mov	r4, r3
 8010238:	4620      	mov	r0, r4
 801023a:	bd30      	pop	{r4, r5, pc}
 801023c:	24012da4 	.word	0x24012da4

08010240 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010240:	4b3d      	ldr	r3, [pc, #244]	@ (8010338 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010246:	681f      	ldr	r7, [r3, #0]
 8010248:	ed2d 8b06 	vpush	{d8-d10}
 801024c:	b08d      	sub	sp, #52	@ 0x34
 801024e:	f7ff fd73 	bl	800fd38 <rmw_uros_epoch_nanos>
 8010252:	2f00      	cmp	r7, #0
 8010254:	d05d      	beq.n	8010312 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010256:	46b8      	mov	r8, r7
 8010258:	4681      	mov	r9, r0
 801025a:	468a      	mov	sl, r1
 801025c:	ac04      	add	r4, sp, #16
 801025e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010262:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010266:	2b04      	cmp	r3, #4
 8010268:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8010320 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801026c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8010328 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010270:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8010330 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010274:	d03f      	beq.n	80102f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010276:	2b05      	cmp	r3, #5
 8010278:	d044      	beq.n	8010304 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801027a:	2b03      	cmp	r3, #3
 801027c:	d03b      	beq.n	80102f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801027e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010282:	ed8d ab06 	vstr	d10, [sp, #24]
 8010286:	ab08      	add	r3, sp, #32
 8010288:	ed8d 8b08 	vstr	d8, [sp, #32]
 801028c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010292:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010296:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801029a:	f008 fa89 	bl	80187b0 <rmw_time_equal>
 801029e:	b118      	cbz	r0, 80102a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80102a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 80102a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80102a8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 80102ac:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80102b0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80102b4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80102b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80102bc:	f008 face 	bl	801885c <rmw_time_total_nsec>
 80102c0:	1830      	adds	r0, r6, r0
 80102c2:	eb47 0101 	adc.w	r1, r7, r1
 80102c6:	4548      	cmp	r0, r9
 80102c8:	eb71 030a 	sbcs.w	r3, r1, sl
 80102cc:	db05      	blt.n	80102da <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80102ce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80102d2:	4591      	cmp	r9, r2
 80102d4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80102d8:	da03      	bge.n	80102e2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80102da:	4641      	mov	r1, r8
 80102dc:	4816      	ldr	r0, [pc, #88]	@ (8010338 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80102de:	f008 fd3d 	bl	8018d5c <put_memory>
 80102e2:	f1bb 0f00 	cmp.w	fp, #0
 80102e6:	d014      	beq.n	8010312 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80102e8:	46d8      	mov	r8, fp
 80102ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80102ee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80102f2:	2b04      	cmp	r3, #4
 80102f4:	d1bf      	bne.n	8010276 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80102f6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80102fa:	3340      	adds	r3, #64	@ 0x40
 80102fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010302:	e7c0      	b.n	8010286 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010304:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010308:	3348      	adds	r3, #72	@ 0x48
 801030a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801030c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010310:	e7b9      	b.n	8010286 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010312:	b00d      	add	sp, #52	@ 0x34
 8010314:	ecbd 8b06 	vpop	{d8-d10}
 8010318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031c:	f3af 8000 	nop.w
	...
 8010328:	00000001 	.word	0x00000001
 801032c:	00000000 	.word	0x00000000
 8010330:	0000001e 	.word	0x0000001e
 8010334:	00000000 	.word	0x00000000
 8010338:	24012da4 	.word	0x24012da4

0801033c <run_xrce_session>:
 801033c:	b510      	push	{r4, lr}
 801033e:	788c      	ldrb	r4, [r1, #2]
 8010340:	b086      	sub	sp, #24
 8010342:	2c01      	cmp	r4, #1
 8010344:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010348:	d00c      	beq.n	8010364 <run_xrce_session+0x28>
 801034a:	2401      	movs	r4, #1
 801034c:	4619      	mov	r1, r3
 801034e:	f10d 020e 	add.w	r2, sp, #14
 8010352:	f10d 0317 	add.w	r3, sp, #23
 8010356:	9400      	str	r4, [sp, #0]
 8010358:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801035c:	f002 fd18 	bl	8012d90 <uxr_run_session_until_all_status>
 8010360:	b006      	add	sp, #24
 8010362:	bd10      	pop	{r4, pc}
 8010364:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010368:	f002 f934 	bl	80125d4 <uxr_flash_output_streams>
 801036c:	4620      	mov	r0, r4
 801036e:	b006      	add	sp, #24
 8010370:	bd10      	pop	{r4, pc}
 8010372:	bf00      	nop

08010374 <convert_qos_profile>:
 8010374:	7a4a      	ldrb	r2, [r1, #9]
 8010376:	f891 c008 	ldrb.w	ip, [r1, #8]
 801037a:	2a02      	cmp	r2, #2
 801037c:	bf18      	it	ne
 801037e:	2200      	movne	r2, #0
 8010380:	7002      	strb	r2, [r0, #0]
 8010382:	f1ac 0202 	sub.w	r2, ip, #2
 8010386:	fab2 f282 	clz	r2, r2
 801038a:	0952      	lsrs	r2, r2, #5
 801038c:	7042      	strb	r2, [r0, #1]
 801038e:	780a      	ldrb	r2, [r1, #0]
 8010390:	8889      	ldrh	r1, [r1, #4]
 8010392:	f1a2 0202 	sub.w	r2, r2, #2
 8010396:	8081      	strh	r1, [r0, #4]
 8010398:	fab2 f282 	clz	r2, r2
 801039c:	0952      	lsrs	r2, r2, #5
 801039e:	7082      	strb	r2, [r0, #2]
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop

080103a4 <generate_type_name>:
 80103a4:	2300      	movs	r3, #0
 80103a6:	b530      	push	{r4, r5, lr}
 80103a8:	700b      	strb	r3, [r1, #0]
 80103aa:	b087      	sub	sp, #28
 80103ac:	6803      	ldr	r3, [r0, #0]
 80103ae:	4614      	mov	r4, r2
 80103b0:	b1bb      	cbz	r3, 80103e2 <generate_type_name+0x3e>
 80103b2:	4a0e      	ldr	r2, [pc, #56]	@ (80103ec <generate_type_name+0x48>)
 80103b4:	4615      	mov	r5, r2
 80103b6:	9500      	str	r5, [sp, #0]
 80103b8:	9203      	str	r2, [sp, #12]
 80103ba:	4d0d      	ldr	r5, [pc, #52]	@ (80103f0 <generate_type_name+0x4c>)
 80103bc:	6842      	ldr	r2, [r0, #4]
 80103be:	4608      	mov	r0, r1
 80103c0:	490c      	ldr	r1, [pc, #48]	@ (80103f4 <generate_type_name+0x50>)
 80103c2:	9204      	str	r2, [sp, #16]
 80103c4:	9105      	str	r1, [sp, #20]
 80103c6:	9102      	str	r1, [sp, #8]
 80103c8:	4621      	mov	r1, r4
 80103ca:	4a0b      	ldr	r2, [pc, #44]	@ (80103f8 <generate_type_name+0x54>)
 80103cc:	9501      	str	r5, [sp, #4]
 80103ce:	f00b f965 	bl	801b69c <sniprintf>
 80103d2:	2800      	cmp	r0, #0
 80103d4:	bfa8      	it	ge
 80103d6:	4284      	cmpge	r4, r0
 80103d8:	bfcc      	ite	gt
 80103da:	2001      	movgt	r0, #1
 80103dc:	2000      	movle	r0, #0
 80103de:	b007      	add	sp, #28
 80103e0:	bd30      	pop	{r4, r5, pc}
 80103e2:	4b06      	ldr	r3, [pc, #24]	@ (80103fc <generate_type_name+0x58>)
 80103e4:	4a01      	ldr	r2, [pc, #4]	@ (80103ec <generate_type_name+0x48>)
 80103e6:	461d      	mov	r5, r3
 80103e8:	e7e5      	b.n	80103b6 <generate_type_name+0x12>
 80103ea:	bf00      	nop
 80103ec:	0801ca10 	.word	0x0801ca10
 80103f0:	0801ca28 	.word	0x0801ca28
 80103f4:	0801ca24 	.word	0x0801ca24
 80103f8:	0801ca14 	.word	0x0801ca14
 80103fc:	0801d430 	.word	0x0801d430

08010400 <generate_topic_name>:
 8010400:	b530      	push	{r4, r5, lr}
 8010402:	4614      	mov	r4, r2
 8010404:	b083      	sub	sp, #12
 8010406:	4605      	mov	r5, r0
 8010408:	4b07      	ldr	r3, [pc, #28]	@ (8010428 <generate_topic_name+0x28>)
 801040a:	4a08      	ldr	r2, [pc, #32]	@ (801042c <generate_topic_name+0x2c>)
 801040c:	4608      	mov	r0, r1
 801040e:	9500      	str	r5, [sp, #0]
 8010410:	4621      	mov	r1, r4
 8010412:	f00b f943 	bl	801b69c <sniprintf>
 8010416:	2800      	cmp	r0, #0
 8010418:	bfa8      	it	ge
 801041a:	4284      	cmpge	r4, r0
 801041c:	bfcc      	ite	gt
 801041e:	2001      	movgt	r0, #1
 8010420:	2000      	movle	r0, #0
 8010422:	b003      	add	sp, #12
 8010424:	bd30      	pop	{r4, r5, pc}
 8010426:	bf00      	nop
 8010428:	0801ca34 	.word	0x0801ca34
 801042c:	0801ca2c 	.word	0x0801ca2c

08010430 <is_uxrce_rmw_identifier_valid>:
 8010430:	b510      	push	{r4, lr}
 8010432:	4604      	mov	r4, r0
 8010434:	b140      	cbz	r0, 8010448 <is_uxrce_rmw_identifier_valid+0x18>
 8010436:	f008 fce9 	bl	8018e0c <rmw_get_implementation_identifier>
 801043a:	4601      	mov	r1, r0
 801043c:	4620      	mov	r0, r4
 801043e:	f7ef ff4f 	bl	80002e0 <strcmp>
 8010442:	fab0 f080 	clz	r0, r0
 8010446:	0940      	lsrs	r0, r0, #5
 8010448:	bd10      	pop	{r4, pc}
 801044a:	bf00      	nop

0801044c <get_message_typesupport_handle>:
 801044c:	6883      	ldr	r3, [r0, #8]
 801044e:	4718      	bx	r3

08010450 <get_message_typesupport_handle_function>:
 8010450:	b510      	push	{r4, lr}
 8010452:	4604      	mov	r4, r0
 8010454:	6800      	ldr	r0, [r0, #0]
 8010456:	f7ef ff43 	bl	80002e0 <strcmp>
 801045a:	2800      	cmp	r0, #0
 801045c:	bf0c      	ite	eq
 801045e:	4620      	moveq	r0, r4
 8010460:	2000      	movne	r0, #0
 8010462:	bd10      	pop	{r4, pc}

08010464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010464:	4b04      	ldr	r3, [pc, #16]	@ (8010478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	b10a      	cbz	r2, 801046e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 801046a:	4803      	ldr	r0, [pc, #12]	@ (8010478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801046c:	4770      	bx	lr
 801046e:	4a03      	ldr	r2, [pc, #12]	@ (801047c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 8010470:	4801      	ldr	r0, [pc, #4]	@ (8010478 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8010472:	6812      	ldr	r2, [r2, #0]
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	4770      	bx	lr
 8010478:	24000050 	.word	0x24000050
 801047c:	240001b4 	.word	0x240001b4

08010480 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010480:	4a02      	ldr	r2, [pc, #8]	@ (801048c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 8010482:	4b03      	ldr	r3, [pc, #12]	@ (8010490 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 8010484:	6812      	ldr	r2, [r2, #0]
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	240001b4 	.word	0x240001b4
 8010490:	24000050 	.word	0x24000050

08010494 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 8010494:	6840      	ldr	r0, [r0, #4]
 8010496:	4770      	bx	lr

08010498 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8010498:	6800      	ldr	r0, [r0, #0]
 801049a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801049e:	4770      	bx	lr

080104a0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 80104a0:	6803      	ldr	r3, [r0, #0]
 80104a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80104a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104aa:	e9c2 0100 	strd	r0, r1, [r2]
 80104ae:	4770      	bx	lr

080104b0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 80104b0:	6803      	ldr	r3, [r0, #0]
 80104b2:	ed92 7b00 	vldr	d7, [r2]
 80104b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80104ba:	ed81 7b00 	vstr	d7, [r1]
 80104be:	4770      	bx	lr

080104c0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 80104c0:	f009 b89c 	b.w	80195fc <std_msgs__msg__Float64MultiArray__init>

080104c4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 80104c4:	f009 b8be 	b.w	8019644 <std_msgs__msg__Float64MultiArray__fini>

080104c8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	b082      	sub	sp, #8
 80104ce:	9101      	str	r1, [sp, #4]
 80104d0:	f009 f852 	bl	8019578 <rosidl_runtime_c__double__Sequence__fini>
 80104d4:	9901      	ldr	r1, [sp, #4]
 80104d6:	4620      	mov	r0, r4
 80104d8:	b002      	add	sp, #8
 80104da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104de:	f009 b833 	b.w	8019548 <rosidl_runtime_c__double__Sequence__init>
 80104e2:	bf00      	nop

080104e4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 80104e4:	6800      	ldr	r0, [r0, #0]
 80104e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80104ea:	4770      	bx	lr

080104ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80104ec:	b508      	push	{r3, lr}
 80104ee:	f000 f857 	bl	80105a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80104f2:	4b06      	ldr	r3, [pc, #24]	@ (801050c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80104f4:	4906      	ldr	r1, [pc, #24]	@ (8010510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	60c8      	str	r0, [r1, #12]
 80104fa:	b10a      	cbz	r2, 8010500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 80104fc:	4803      	ldr	r0, [pc, #12]	@ (801050c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80104fe:	bd08      	pop	{r3, pc}
 8010500:	4a04      	ldr	r2, [pc, #16]	@ (8010514 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 8010502:	4802      	ldr	r0, [pc, #8]	@ (801050c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8010504:	6812      	ldr	r2, [r2, #0]
 8010506:	601a      	str	r2, [r3, #0]
 8010508:	bd08      	pop	{r3, pc}
 801050a:	bf00      	nop
 801050c:	240000d4 	.word	0x240000d4
 8010510:	2400005c 	.word	0x2400005c
 8010514:	240001b8 	.word	0x240001b8

08010518 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8010518:	6840      	ldr	r0, [r0, #4]
 801051a:	4770      	bx	lr

0801051c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 801051c:	6800      	ldr	r0, [r0, #0]
 801051e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010522:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010526:	4770      	bx	lr

08010528 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8010528:	6803      	ldr	r3, [r0, #0]
 801052a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801052e:	4694      	mov	ip, r2
 8010530:	b500      	push	{lr}
 8010532:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8010536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801053a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801053e:	f8de 3000 	ldr.w	r3, [lr]
 8010542:	f8cc 3000 	str.w	r3, [ip]
 8010546:	f85d fb04 	ldr.w	pc, [sp], #4
 801054a:	bf00      	nop

0801054c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 801054c:	6803      	ldr	r3, [r0, #0]
 801054e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010552:	b500      	push	{lr}
 8010554:	4696      	mov	lr, r2
 8010556:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 801055a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801055e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010562:	f8de 3000 	ldr.w	r3, [lr]
 8010566:	f8cc 3000 	str.w	r3, [ip]
 801056a:	f85d fb04 	ldr.w	pc, [sp], #4
 801056e:	bf00      	nop

08010570 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8010570:	f009 b8fc 	b.w	801976c <std_msgs__msg__MultiArrayLayout__init>

08010574 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8010574:	f009 b90c 	b.w	8019790 <std_msgs__msg__MultiArrayLayout__fini>

08010578 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8010578:	b510      	push	{r4, lr}
 801057a:	4604      	mov	r4, r0
 801057c:	b082      	sub	sp, #8
 801057e:	9101      	str	r1, [sp, #4]
 8010580:	f009 f8cc 	bl	801971c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8010584:	9901      	ldr	r1, [sp, #4]
 8010586:	4620      	mov	r0, r4
 8010588:	b002      	add	sp, #8
 801058a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801058e:	f009 b8c1 	b.w	8019714 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8010592:	bf00      	nop

08010594 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8010594:	6800      	ldr	r0, [r0, #0]
 8010596:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801059a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801059e:	4770      	bx	lr

080105a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 80105a0:	b508      	push	{r3, lr}
 80105a2:	f009 f8fd 	bl	80197a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80105a6:	4b06      	ldr	r3, [pc, #24]	@ (80105c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80105a8:	4906      	ldr	r1, [pc, #24]	@ (80105c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	60c8      	str	r0, [r1, #12]
 80105ae:	b10a      	cbz	r2, 80105b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 80105b0:	4803      	ldr	r0, [pc, #12]	@ (80105c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80105b2:	bd08      	pop	{r3, pc}
 80105b4:	4a04      	ldr	r2, [pc, #16]	@ (80105c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 80105b6:	4802      	ldr	r0, [pc, #8]	@ (80105c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80105b8:	6812      	ldr	r2, [r2, #0]
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	bd08      	pop	{r3, pc}
 80105be:	bf00      	nop
 80105c0:	24000158 	.word	0x24000158
 80105c4:	240000e0 	.word	0x240000e0
 80105c8:	240001b8 	.word	0x240001b8

080105cc <_Float64MultiArray__max_serialized_size>:
 80105cc:	b500      	push	{lr}
 80105ce:	b083      	sub	sp, #12
 80105d0:	2301      	movs	r3, #1
 80105d2:	2100      	movs	r1, #0
 80105d4:	f10d 0007 	add.w	r0, sp, #7
 80105d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80105dc:	f000 f91c 	bl	8010818 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80105e0:	b003      	add	sp, #12
 80105e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80105e6:	bf00      	nop

080105e8 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	4604      	mov	r4, r0
 80105ec:	b160      	cbz	r0, 8010608 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 80105ee:	460d      	mov	r5, r1
 80105f0:	f000 f8b6 	bl	8010760 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80105f4:	6966      	ldr	r6, [r4, #20]
 80105f6:	2104      	movs	r1, #4
 80105f8:	182c      	adds	r4, r5, r0
 80105fa:	4620      	mov	r0, r4
 80105fc:	f001 fa98 	bl	8011b30 <ucdr_alignment>
 8010600:	1d03      	adds	r3, r0, #4
 8010602:	441c      	add	r4, r3
 8010604:	b90e      	cbnz	r6, 801060a <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 8010606:	1b60      	subs	r0, r4, r5
 8010608:	bd70      	pop	{r4, r5, r6, pc}
 801060a:	4620      	mov	r0, r4
 801060c:	2108      	movs	r1, #8
 801060e:	f001 fa8f 	bl	8011b30 <ucdr_alignment>
 8010612:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010616:	181c      	adds	r4, r3, r0
 8010618:	1b60      	subs	r0, r4, r5
 801061a:	e7f5      	b.n	8010608 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0801061c <_Float64MultiArray__cdr_deserialize>:
 801061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801061e:	460c      	mov	r4, r1
 8010620:	b083      	sub	sp, #12
 8010622:	b1d9      	cbz	r1, 801065c <_Float64MultiArray__cdr_deserialize+0x40>
 8010624:	4606      	mov	r6, r0
 8010626:	f000 f901 	bl	801082c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801062a:	4603      	mov	r3, r0
 801062c:	4621      	mov	r1, r4
 801062e:	4630      	mov	r0, r6
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	4798      	blx	r3
 8010636:	69a7      	ldr	r7, [r4, #24]
 8010638:	ab01      	add	r3, sp, #4
 801063a:	6921      	ldr	r1, [r4, #16]
 801063c:	463a      	mov	r2, r7
 801063e:	4630      	mov	r0, r6
 8010640:	f001 fb50 	bl	8011ce4 <ucdr_deserialize_sequence_double>
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	4605      	mov	r5, r0
 8010648:	b920      	cbnz	r0, 8010654 <_Float64MultiArray__cdr_deserialize+0x38>
 801064a:	429f      	cmp	r7, r3
 801064c:	d30a      	bcc.n	8010664 <_Float64MultiArray__cdr_deserialize+0x48>
 801064e:	4628      	mov	r0, r5
 8010650:	b003      	add	sp, #12
 8010652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010654:	4628      	mov	r0, r5
 8010656:	6163      	str	r3, [r4, #20]
 8010658:	b003      	add	sp, #12
 801065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801065c:	460d      	mov	r5, r1
 801065e:	4628      	mov	r0, r5
 8010660:	b003      	add	sp, #12
 8010662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010664:	2301      	movs	r3, #1
 8010666:	4630      	mov	r0, r6
 8010668:	75b5      	strb	r5, [r6, #22]
 801066a:	2108      	movs	r1, #8
 801066c:	7573      	strb	r3, [r6, #21]
 801066e:	6165      	str	r5, [r4, #20]
 8010670:	f001 fa76 	bl	8011b60 <ucdr_align_to>
 8010674:	9901      	ldr	r1, [sp, #4]
 8010676:	4630      	mov	r0, r6
 8010678:	00c9      	lsls	r1, r1, #3
 801067a:	f001 faa9 	bl	8011bd0 <ucdr_advance_buffer>
 801067e:	4628      	mov	r0, r5
 8010680:	b003      	add	sp, #12
 8010682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010684 <_Float64MultiArray__cdr_serialize>:
 8010684:	b188      	cbz	r0, 80106aa <_Float64MultiArray__cdr_serialize+0x26>
 8010686:	b538      	push	{r3, r4, r5, lr}
 8010688:	4604      	mov	r4, r0
 801068a:	460d      	mov	r5, r1
 801068c:	f000 f8ce 	bl	801082c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010690:	4603      	mov	r3, r0
 8010692:	4629      	mov	r1, r5
 8010694:	4620      	mov	r0, r4
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	4798      	blx	r3
 801069c:	4628      	mov	r0, r5
 801069e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80106a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106a6:	f001 bb0b 	b.w	8011cc0 <ucdr_serialize_sequence_double>
 80106aa:	4770      	bx	lr

080106ac <_Float64MultiArray__get_serialized_size>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	b150      	cbz	r0, 80106c8 <_Float64MultiArray__get_serialized_size+0x1c>
 80106b2:	2100      	movs	r1, #0
 80106b4:	f000 f854 	bl	8010760 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80106b8:	6965      	ldr	r5, [r4, #20]
 80106ba:	4604      	mov	r4, r0
 80106bc:	2104      	movs	r1, #4
 80106be:	f001 fa37 	bl	8011b30 <ucdr_alignment>
 80106c2:	4404      	add	r4, r0
 80106c4:	3404      	adds	r4, #4
 80106c6:	b90d      	cbnz	r5, 80106cc <_Float64MultiArray__get_serialized_size+0x20>
 80106c8:	4620      	mov	r0, r4
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	4620      	mov	r0, r4
 80106ce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80106d2:	2108      	movs	r1, #8
 80106d4:	f001 fa2c 	bl	8011b30 <ucdr_alignment>
 80106d8:	4404      	add	r4, r0
 80106da:	4620      	mov	r0, r4
 80106dc:	bd38      	pop	{r3, r4, r5, pc}
 80106de:	bf00      	nop

080106e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80106e0:	4800      	ldr	r0, [pc, #0]	@ (80106e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 80106e2:	4770      	bx	lr
 80106e4:	24000164 	.word	0x24000164

080106e8 <_MultiArrayLayout__max_serialized_size>:
 80106e8:	2104      	movs	r1, #4
 80106ea:	2000      	movs	r0, #0
 80106ec:	b508      	push	{r3, lr}
 80106ee:	f001 fa1f 	bl	8011b30 <ucdr_alignment>
 80106f2:	3004      	adds	r0, #4
 80106f4:	bd08      	pop	{r3, pc}
 80106f6:	bf00      	nop

080106f8 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 80106f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106fc:	4689      	mov	r9, r1
 80106fe:	4607      	mov	r7, r0
 8010700:	2104      	movs	r1, #4
 8010702:	4648      	mov	r0, r9
 8010704:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8010708:	f001 fa12 	bl	8011b30 <ucdr_alignment>
 801070c:	f109 0304 	add.w	r3, r9, #4
 8010710:	18c6      	adds	r6, r0, r3
 8010712:	f1b8 0f00 	cmp.w	r8, #0
 8010716:	d018      	beq.n	801074a <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8010718:	2500      	movs	r5, #0
 801071a:	f009 f8df 	bl	80198dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8010724:	6843      	ldr	r3, [r0, #4]
 8010726:	4631      	mov	r1, r6
 8010728:	3501      	adds	r5, #1
 801072a:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 801072e:	695b      	ldr	r3, [r3, #20]
 8010730:	4798      	blx	r3
 8010732:	4604      	mov	r4, r0
 8010734:	4630      	mov	r0, r6
 8010736:	2c04      	cmp	r4, #4
 8010738:	4621      	mov	r1, r4
 801073a:	bf28      	it	cs
 801073c:	2104      	movcs	r1, #4
 801073e:	f001 f9f7 	bl	8011b30 <ucdr_alignment>
 8010742:	45a8      	cmp	r8, r5
 8010744:	4404      	add	r4, r0
 8010746:	4426      	add	r6, r4
 8010748:	d1e7      	bne.n	801071a <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 801074a:	f1c9 0904 	rsb	r9, r9, #4
 801074e:	4630      	mov	r0, r6
 8010750:	2104      	movs	r1, #4
 8010752:	444e      	add	r6, r9
 8010754:	f001 f9ec 	bl	8011b30 <ucdr_alignment>
 8010758:	4430      	add	r0, r6
 801075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801075e:	bf00      	nop

08010760 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010760:	b108      	cbz	r0, 8010766 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8010762:	f7ff bfc9 	b.w	80106f8 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010766:	4770      	bx	lr

08010768 <_MultiArrayLayout__get_serialized_size>:
 8010768:	b110      	cbz	r0, 8010770 <_MultiArrayLayout__get_serialized_size+0x8>
 801076a:	2100      	movs	r1, #0
 801076c:	f7ff bfc4 	b.w	80106f8 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010770:	4770      	bx	lr
 8010772:	bf00      	nop

08010774 <_MultiArrayLayout__cdr_deserialize>:
 8010774:	b349      	cbz	r1, 80107ca <_MultiArrayLayout__cdr_deserialize+0x56>
 8010776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010778:	b083      	sub	sp, #12
 801077a:	460e      	mov	r6, r1
 801077c:	4607      	mov	r7, r0
 801077e:	a901      	add	r1, sp, #4
 8010780:	f000 fbcc 	bl	8010f1c <ucdr_deserialize_uint32_t>
 8010784:	9b01      	ldr	r3, [sp, #4]
 8010786:	68b2      	ldr	r2, [r6, #8]
 8010788:	429a      	cmp	r2, r3
 801078a:	d31b      	bcc.n	80107c4 <_MultiArrayLayout__cdr_deserialize+0x50>
 801078c:	6073      	str	r3, [r6, #4]
 801078e:	b18b      	cbz	r3, 80107b4 <_MultiArrayLayout__cdr_deserialize+0x40>
 8010790:	2400      	movs	r4, #0
 8010792:	4625      	mov	r5, r4
 8010794:	e002      	b.n	801079c <_MultiArrayLayout__cdr_deserialize+0x28>
 8010796:	9b01      	ldr	r3, [sp, #4]
 8010798:	429d      	cmp	r5, r3
 801079a:	d20b      	bcs.n	80107b4 <_MultiArrayLayout__cdr_deserialize+0x40>
 801079c:	f009 f89e 	bl	80198dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80107a0:	6831      	ldr	r1, [r6, #0]
 80107a2:	6843      	ldr	r3, [r0, #4]
 80107a4:	4638      	mov	r0, r7
 80107a6:	4421      	add	r1, r4
 80107a8:	3501      	adds	r5, #1
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	3414      	adds	r4, #20
 80107ae:	4798      	blx	r3
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d1f0      	bne.n	8010796 <_MultiArrayLayout__cdr_deserialize+0x22>
 80107b4:	f106 010c 	add.w	r1, r6, #12
 80107b8:	4638      	mov	r0, r7
 80107ba:	b003      	add	sp, #12
 80107bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107c0:	f000 bbac 	b.w	8010f1c <ucdr_deserialize_uint32_t>
 80107c4:	2000      	movs	r0, #0
 80107c6:	b003      	add	sp, #12
 80107c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ca:	2000      	movs	r0, #0
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop

080107d0 <_MultiArrayLayout__cdr_serialize>:
 80107d0:	b308      	cbz	r0, 8010816 <_MultiArrayLayout__cdr_serialize+0x46>
 80107d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d4:	6847      	ldr	r7, [r0, #4]
 80107d6:	4605      	mov	r5, r0
 80107d8:	460e      	mov	r6, r1
 80107da:	4608      	mov	r0, r1
 80107dc:	4639      	mov	r1, r7
 80107de:	f000 fa6d 	bl	8010cbc <ucdr_serialize_uint32_t>
 80107e2:	b190      	cbz	r0, 801080a <_MultiArrayLayout__cdr_serialize+0x3a>
 80107e4:	b18f      	cbz	r7, 801080a <_MultiArrayLayout__cdr_serialize+0x3a>
 80107e6:	2400      	movs	r4, #0
 80107e8:	e001      	b.n	80107ee <_MultiArrayLayout__cdr_serialize+0x1e>
 80107ea:	42a7      	cmp	r7, r4
 80107ec:	d00d      	beq.n	801080a <_MultiArrayLayout__cdr_serialize+0x3a>
 80107ee:	f009 f875 	bl	80198dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80107f2:	682a      	ldr	r2, [r5, #0]
 80107f4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80107f8:	6843      	ldr	r3, [r0, #4]
 80107fa:	4631      	mov	r1, r6
 80107fc:	3401      	adds	r4, #1
 80107fe:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8010802:	689b      	ldr	r3, [r3, #8]
 8010804:	4798      	blx	r3
 8010806:	2800      	cmp	r0, #0
 8010808:	d1ef      	bne.n	80107ea <_MultiArrayLayout__cdr_serialize+0x1a>
 801080a:	68e9      	ldr	r1, [r5, #12]
 801080c:	4630      	mov	r0, r6
 801080e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010812:	f000 ba53 	b.w	8010cbc <ucdr_serialize_uint32_t>
 8010816:	4770      	bx	lr

08010818 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010818:	b508      	push	{r3, lr}
 801081a:	2200      	movs	r2, #0
 801081c:	4603      	mov	r3, r0
 801081e:	4608      	mov	r0, r1
 8010820:	2104      	movs	r1, #4
 8010822:	701a      	strb	r2, [r3, #0]
 8010824:	f001 f984 	bl	8011b30 <ucdr_alignment>
 8010828:	3004      	adds	r0, #4
 801082a:	bd08      	pop	{r3, pc}

0801082c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 801082c:	4800      	ldr	r0, [pc, #0]	@ (8010830 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 801082e:	4770      	bx	lr
 8010830:	2400018c 	.word	0x2400018c

08010834 <ucdr_serialize_bool>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	460d      	mov	r5, r1
 8010838:	2101      	movs	r1, #1
 801083a:	4604      	mov	r4, r0
 801083c:	f001 f92c 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010840:	b148      	cbz	r0, 8010856 <ucdr_serialize_bool+0x22>
 8010842:	68a3      	ldr	r3, [r4, #8]
 8010844:	2101      	movs	r1, #1
 8010846:	701d      	strb	r5, [r3, #0]
 8010848:	68a2      	ldr	r2, [r4, #8]
 801084a:	6923      	ldr	r3, [r4, #16]
 801084c:	440a      	add	r2, r1
 801084e:	7561      	strb	r1, [r4, #21]
 8010850:	440b      	add	r3, r1
 8010852:	60a2      	str	r2, [r4, #8]
 8010854:	6123      	str	r3, [r4, #16]
 8010856:	7da0      	ldrb	r0, [r4, #22]
 8010858:	f080 0001 	eor.w	r0, r0, #1
 801085c:	bd38      	pop	{r3, r4, r5, pc}
 801085e:	bf00      	nop

08010860 <ucdr_deserialize_bool>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	460d      	mov	r5, r1
 8010864:	2101      	movs	r1, #1
 8010866:	4604      	mov	r4, r0
 8010868:	f001 f916 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801086c:	b160      	cbz	r0, 8010888 <ucdr_deserialize_bool+0x28>
 801086e:	68a2      	ldr	r2, [r4, #8]
 8010870:	2101      	movs	r1, #1
 8010872:	6923      	ldr	r3, [r4, #16]
 8010874:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010878:	440b      	add	r3, r1
 801087a:	3800      	subs	r0, #0
 801087c:	bf18      	it	ne
 801087e:	2001      	movne	r0, #1
 8010880:	7028      	strb	r0, [r5, #0]
 8010882:	60a2      	str	r2, [r4, #8]
 8010884:	6123      	str	r3, [r4, #16]
 8010886:	7561      	strb	r1, [r4, #21]
 8010888:	7da0      	ldrb	r0, [r4, #22]
 801088a:	f080 0001 	eor.w	r0, r0, #1
 801088e:	bd38      	pop	{r3, r4, r5, pc}

08010890 <ucdr_serialize_uint8_t>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	460d      	mov	r5, r1
 8010894:	2101      	movs	r1, #1
 8010896:	4604      	mov	r4, r0
 8010898:	f001 f8fe 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801089c:	b148      	cbz	r0, 80108b2 <ucdr_serialize_uint8_t+0x22>
 801089e:	68a3      	ldr	r3, [r4, #8]
 80108a0:	2101      	movs	r1, #1
 80108a2:	701d      	strb	r5, [r3, #0]
 80108a4:	68a2      	ldr	r2, [r4, #8]
 80108a6:	6923      	ldr	r3, [r4, #16]
 80108a8:	440a      	add	r2, r1
 80108aa:	7561      	strb	r1, [r4, #21]
 80108ac:	440b      	add	r3, r1
 80108ae:	60a2      	str	r2, [r4, #8]
 80108b0:	6123      	str	r3, [r4, #16]
 80108b2:	7da0      	ldrb	r0, [r4, #22]
 80108b4:	f080 0001 	eor.w	r0, r0, #1
 80108b8:	bd38      	pop	{r3, r4, r5, pc}
 80108ba:	bf00      	nop

080108bc <ucdr_deserialize_uint8_t>:
 80108bc:	b538      	push	{r3, r4, r5, lr}
 80108be:	460d      	mov	r5, r1
 80108c0:	2101      	movs	r1, #1
 80108c2:	4604      	mov	r4, r0
 80108c4:	f001 f8e8 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 80108c8:	b150      	cbz	r0, 80108e0 <ucdr_deserialize_uint8_t+0x24>
 80108ca:	68a3      	ldr	r3, [r4, #8]
 80108cc:	2101      	movs	r1, #1
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	702b      	strb	r3, [r5, #0]
 80108d2:	68a2      	ldr	r2, [r4, #8]
 80108d4:	6923      	ldr	r3, [r4, #16]
 80108d6:	440a      	add	r2, r1
 80108d8:	7561      	strb	r1, [r4, #21]
 80108da:	440b      	add	r3, r1
 80108dc:	60a2      	str	r2, [r4, #8]
 80108de:	6123      	str	r3, [r4, #16]
 80108e0:	7da0      	ldrb	r0, [r4, #22]
 80108e2:	f080 0001 	eor.w	r0, r0, #1
 80108e6:	bd38      	pop	{r3, r4, r5, pc}

080108e8 <ucdr_serialize_uint16_t>:
 80108e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ec:	460b      	mov	r3, r1
 80108ee:	b082      	sub	sp, #8
 80108f0:	4604      	mov	r4, r0
 80108f2:	2102      	movs	r1, #2
 80108f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80108f8:	f001 f922 	bl	8011b40 <ucdr_buffer_alignment>
 80108fc:	4601      	mov	r1, r0
 80108fe:	4620      	mov	r0, r4
 8010900:	7d67      	ldrb	r7, [r4, #21]
 8010902:	f001 f965 	bl	8011bd0 <ucdr_advance_buffer>
 8010906:	2102      	movs	r1, #2
 8010908:	4620      	mov	r0, r4
 801090a:	f001 f8b9 	bl	8011a80 <ucdr_check_buffer_available_for>
 801090e:	bb78      	cbnz	r0, 8010970 <ucdr_serialize_uint16_t+0x88>
 8010910:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010914:	42ab      	cmp	r3, r5
 8010916:	d926      	bls.n	8010966 <ucdr_serialize_uint16_t+0x7e>
 8010918:	1b5e      	subs	r6, r3, r5
 801091a:	60a3      	str	r3, [r4, #8]
 801091c:	6923      	ldr	r3, [r4, #16]
 801091e:	4620      	mov	r0, r4
 8010920:	f1c6 0802 	rsb	r8, r6, #2
 8010924:	4433      	add	r3, r6
 8010926:	4641      	mov	r1, r8
 8010928:	6123      	str	r3, [r4, #16]
 801092a:	f001 f8b5 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801092e:	2800      	cmp	r0, #0
 8010930:	d03b      	beq.n	80109aa <ucdr_serialize_uint16_t+0xc2>
 8010932:	7d23      	ldrb	r3, [r4, #20]
 8010934:	2b01      	cmp	r3, #1
 8010936:	d04a      	beq.n	80109ce <ucdr_serialize_uint16_t+0xe6>
 8010938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801093c:	702b      	strb	r3, [r5, #0]
 801093e:	2e00      	cmp	r6, #0
 8010940:	d040      	beq.n	80109c4 <ucdr_serialize_uint16_t+0xdc>
 8010942:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010946:	706b      	strb	r3, [r5, #1]
 8010948:	6923      	ldr	r3, [r4, #16]
 801094a:	2102      	movs	r1, #2
 801094c:	68a2      	ldr	r2, [r4, #8]
 801094e:	3302      	adds	r3, #2
 8010950:	7da0      	ldrb	r0, [r4, #22]
 8010952:	4442      	add	r2, r8
 8010954:	7561      	strb	r1, [r4, #21]
 8010956:	1b9e      	subs	r6, r3, r6
 8010958:	f080 0001 	eor.w	r0, r0, #1
 801095c:	60a2      	str	r2, [r4, #8]
 801095e:	6126      	str	r6, [r4, #16]
 8010960:	b002      	add	sp, #8
 8010962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010966:	2102      	movs	r1, #2
 8010968:	4620      	mov	r0, r4
 801096a:	f001 f895 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801096e:	b190      	cbz	r0, 8010996 <ucdr_serialize_uint16_t+0xae>
 8010970:	7d23      	ldrb	r3, [r4, #20]
 8010972:	2b01      	cmp	r3, #1
 8010974:	68a3      	ldr	r3, [r4, #8]
 8010976:	d014      	beq.n	80109a2 <ucdr_serialize_uint16_t+0xba>
 8010978:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801097c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010980:	7019      	strb	r1, [r3, #0]
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	705a      	strb	r2, [r3, #1]
 8010986:	2102      	movs	r1, #2
 8010988:	68a2      	ldr	r2, [r4, #8]
 801098a:	6923      	ldr	r3, [r4, #16]
 801098c:	440a      	add	r2, r1
 801098e:	7561      	strb	r1, [r4, #21]
 8010990:	440b      	add	r3, r1
 8010992:	60a2      	str	r2, [r4, #8]
 8010994:	6123      	str	r3, [r4, #16]
 8010996:	7da0      	ldrb	r0, [r4, #22]
 8010998:	f080 0001 	eor.w	r0, r0, #1
 801099c:	b002      	add	sp, #8
 801099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109a6:	801a      	strh	r2, [r3, #0]
 80109a8:	e7ed      	b.n	8010986 <ucdr_serialize_uint16_t+0x9e>
 80109aa:	68a2      	ldr	r2, [r4, #8]
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	7da0      	ldrb	r0, [r4, #22]
 80109b0:	1b92      	subs	r2, r2, r6
 80109b2:	1b9b      	subs	r3, r3, r6
 80109b4:	7567      	strb	r7, [r4, #21]
 80109b6:	f080 0001 	eor.w	r0, r0, #1
 80109ba:	60a2      	str	r2, [r4, #8]
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	b002      	add	sp, #8
 80109c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109c4:	68a3      	ldr	r3, [r4, #8]
 80109c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80109ca:	701a      	strb	r2, [r3, #0]
 80109cc:	e7bc      	b.n	8010948 <ucdr_serialize_uint16_t+0x60>
 80109ce:	4628      	mov	r0, r5
 80109d0:	f10d 0506 	add.w	r5, sp, #6
 80109d4:	4632      	mov	r2, r6
 80109d6:	4629      	mov	r1, r5
 80109d8:	f00b f897 	bl	801bb0a <memcpy>
 80109dc:	4642      	mov	r2, r8
 80109de:	19a9      	adds	r1, r5, r6
 80109e0:	68a0      	ldr	r0, [r4, #8]
 80109e2:	f00b f892 	bl	801bb0a <memcpy>
 80109e6:	e7af      	b.n	8010948 <ucdr_serialize_uint16_t+0x60>

080109e8 <ucdr_serialize_endian_uint16_t>:
 80109e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109ec:	4604      	mov	r4, r0
 80109ee:	b083      	sub	sp, #12
 80109f0:	460d      	mov	r5, r1
 80109f2:	2102      	movs	r1, #2
 80109f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80109f8:	f001 f8a2 	bl	8011b40 <ucdr_buffer_alignment>
 80109fc:	4601      	mov	r1, r0
 80109fe:	4620      	mov	r0, r4
 8010a00:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010a04:	f001 f8e4 	bl	8011bd0 <ucdr_advance_buffer>
 8010a08:	2102      	movs	r1, #2
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f001 f838 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010a10:	bb70      	cbnz	r0, 8010a70 <ucdr_serialize_endian_uint16_t+0x88>
 8010a12:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010a16:	42be      	cmp	r6, r7
 8010a18:	d925      	bls.n	8010a66 <ucdr_serialize_endian_uint16_t+0x7e>
 8010a1a:	6923      	ldr	r3, [r4, #16]
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	60a6      	str	r6, [r4, #8]
 8010a20:	1bf6      	subs	r6, r6, r7
 8010a22:	4433      	add	r3, r6
 8010a24:	f1c6 0902 	rsb	r9, r6, #2
 8010a28:	6123      	str	r3, [r4, #16]
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	f001 f834 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d039      	beq.n	8010aa8 <ucdr_serialize_endian_uint16_t+0xc0>
 8010a34:	2d01      	cmp	r5, #1
 8010a36:	d04a      	beq.n	8010ace <ucdr_serialize_endian_uint16_t+0xe6>
 8010a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a3c:	703b      	strb	r3, [r7, #0]
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	d040      	beq.n	8010ac4 <ucdr_serialize_endian_uint16_t+0xdc>
 8010a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a46:	707b      	strb	r3, [r7, #1]
 8010a48:	6923      	ldr	r3, [r4, #16]
 8010a4a:	2102      	movs	r1, #2
 8010a4c:	68a2      	ldr	r2, [r4, #8]
 8010a4e:	7da0      	ldrb	r0, [r4, #22]
 8010a50:	3302      	adds	r3, #2
 8010a52:	444a      	add	r2, r9
 8010a54:	7561      	strb	r1, [r4, #21]
 8010a56:	1b9b      	subs	r3, r3, r6
 8010a58:	f080 0001 	eor.w	r0, r0, #1
 8010a5c:	60a2      	str	r2, [r4, #8]
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	b003      	add	sp, #12
 8010a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a66:	2102      	movs	r1, #2
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f001 f815 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010a6e:	b188      	cbz	r0, 8010a94 <ucdr_serialize_endian_uint16_t+0xac>
 8010a70:	2d01      	cmp	r5, #1
 8010a72:	68a3      	ldr	r3, [r4, #8]
 8010a74:	d014      	beq.n	8010aa0 <ucdr_serialize_endian_uint16_t+0xb8>
 8010a76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010a7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a7e:	7019      	strb	r1, [r3, #0]
 8010a80:	68a3      	ldr	r3, [r4, #8]
 8010a82:	705a      	strb	r2, [r3, #1]
 8010a84:	2102      	movs	r1, #2
 8010a86:	68a2      	ldr	r2, [r4, #8]
 8010a88:	6923      	ldr	r3, [r4, #16]
 8010a8a:	440a      	add	r2, r1
 8010a8c:	7561      	strb	r1, [r4, #21]
 8010a8e:	440b      	add	r3, r1
 8010a90:	60a2      	str	r2, [r4, #8]
 8010a92:	6123      	str	r3, [r4, #16]
 8010a94:	7da0      	ldrb	r0, [r4, #22]
 8010a96:	f080 0001 	eor.w	r0, r0, #1
 8010a9a:	b003      	add	sp, #12
 8010a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010aa4:	801a      	strh	r2, [r3, #0]
 8010aa6:	e7ed      	b.n	8010a84 <ucdr_serialize_endian_uint16_t+0x9c>
 8010aa8:	68a2      	ldr	r2, [r4, #8]
 8010aaa:	6923      	ldr	r3, [r4, #16]
 8010aac:	7da0      	ldrb	r0, [r4, #22]
 8010aae:	1b92      	subs	r2, r2, r6
 8010ab0:	1b9b      	subs	r3, r3, r6
 8010ab2:	f884 8015 	strb.w	r8, [r4, #21]
 8010ab6:	f080 0001 	eor.w	r0, r0, #1
 8010aba:	60a2      	str	r2, [r4, #8]
 8010abc:	6123      	str	r3, [r4, #16]
 8010abe:	b003      	add	sp, #12
 8010ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ac4:	68a3      	ldr	r3, [r4, #8]
 8010ac6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	e7bc      	b.n	8010a48 <ucdr_serialize_endian_uint16_t+0x60>
 8010ace:	f10d 0506 	add.w	r5, sp, #6
 8010ad2:	4632      	mov	r2, r6
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	f00b f817 	bl	801bb0a <memcpy>
 8010adc:	464a      	mov	r2, r9
 8010ade:	19a9      	adds	r1, r5, r6
 8010ae0:	68a0      	ldr	r0, [r4, #8]
 8010ae2:	f00b f812 	bl	801bb0a <memcpy>
 8010ae6:	e7af      	b.n	8010a48 <ucdr_serialize_endian_uint16_t+0x60>

08010ae8 <ucdr_deserialize_uint16_t>:
 8010ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aec:	4604      	mov	r4, r0
 8010aee:	460d      	mov	r5, r1
 8010af0:	2102      	movs	r1, #2
 8010af2:	f001 f825 	bl	8011b40 <ucdr_buffer_alignment>
 8010af6:	4601      	mov	r1, r0
 8010af8:	4620      	mov	r0, r4
 8010afa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010afe:	f001 f867 	bl	8011bd0 <ucdr_advance_buffer>
 8010b02:	2102      	movs	r1, #2
 8010b04:	4620      	mov	r0, r4
 8010b06:	f000 ffbb 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010b0a:	bb60      	cbnz	r0, 8010b66 <ucdr_deserialize_uint16_t+0x7e>
 8010b0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010b10:	42be      	cmp	r6, r7
 8010b12:	d923      	bls.n	8010b5c <ucdr_deserialize_uint16_t+0x74>
 8010b14:	6923      	ldr	r3, [r4, #16]
 8010b16:	4620      	mov	r0, r4
 8010b18:	60a6      	str	r6, [r4, #8]
 8010b1a:	1bf6      	subs	r6, r6, r7
 8010b1c:	4433      	add	r3, r6
 8010b1e:	f1c6 0902 	rsb	r9, r6, #2
 8010b22:	6123      	str	r3, [r4, #16]
 8010b24:	4649      	mov	r1, r9
 8010b26:	f000 ffb7 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d034      	beq.n	8010b98 <ucdr_deserialize_uint16_t+0xb0>
 8010b2e:	7d23      	ldrb	r3, [r4, #20]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d042      	beq.n	8010bba <ucdr_deserialize_uint16_t+0xd2>
 8010b34:	787b      	ldrb	r3, [r7, #1]
 8010b36:	702b      	strb	r3, [r5, #0]
 8010b38:	2e00      	cmp	r6, #0
 8010b3a:	d03a      	beq.n	8010bb2 <ucdr_deserialize_uint16_t+0xca>
 8010b3c:	783b      	ldrb	r3, [r7, #0]
 8010b3e:	706b      	strb	r3, [r5, #1]
 8010b40:	6923      	ldr	r3, [r4, #16]
 8010b42:	2102      	movs	r1, #2
 8010b44:	68a2      	ldr	r2, [r4, #8]
 8010b46:	3302      	adds	r3, #2
 8010b48:	7da0      	ldrb	r0, [r4, #22]
 8010b4a:	444a      	add	r2, r9
 8010b4c:	7561      	strb	r1, [r4, #21]
 8010b4e:	1b9b      	subs	r3, r3, r6
 8010b50:	f080 0001 	eor.w	r0, r0, #1
 8010b54:	60a2      	str	r2, [r4, #8]
 8010b56:	6123      	str	r3, [r4, #16]
 8010b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b5c:	2102      	movs	r1, #2
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 ff9a 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010b64:	b180      	cbz	r0, 8010b88 <ucdr_deserialize_uint16_t+0xa0>
 8010b66:	7d23      	ldrb	r3, [r4, #20]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	68a3      	ldr	r3, [r4, #8]
 8010b6c:	d011      	beq.n	8010b92 <ucdr_deserialize_uint16_t+0xaa>
 8010b6e:	785b      	ldrb	r3, [r3, #1]
 8010b70:	702b      	strb	r3, [r5, #0]
 8010b72:	68a3      	ldr	r3, [r4, #8]
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	706b      	strb	r3, [r5, #1]
 8010b78:	2102      	movs	r1, #2
 8010b7a:	68a2      	ldr	r2, [r4, #8]
 8010b7c:	6923      	ldr	r3, [r4, #16]
 8010b7e:	440a      	add	r2, r1
 8010b80:	7561      	strb	r1, [r4, #21]
 8010b82:	440b      	add	r3, r1
 8010b84:	60a2      	str	r2, [r4, #8]
 8010b86:	6123      	str	r3, [r4, #16]
 8010b88:	7da0      	ldrb	r0, [r4, #22]
 8010b8a:	f080 0001 	eor.w	r0, r0, #1
 8010b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	802b      	strh	r3, [r5, #0]
 8010b96:	e7ef      	b.n	8010b78 <ucdr_deserialize_uint16_t+0x90>
 8010b98:	68a2      	ldr	r2, [r4, #8]
 8010b9a:	6923      	ldr	r3, [r4, #16]
 8010b9c:	1b92      	subs	r2, r2, r6
 8010b9e:	7da0      	ldrb	r0, [r4, #22]
 8010ba0:	1b9b      	subs	r3, r3, r6
 8010ba2:	f884 8015 	strb.w	r8, [r4, #21]
 8010ba6:	f080 0001 	eor.w	r0, r0, #1
 8010baa:	60a2      	str	r2, [r4, #8]
 8010bac:	6123      	str	r3, [r4, #16]
 8010bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bb2:	68a3      	ldr	r3, [r4, #8]
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	706b      	strb	r3, [r5, #1]
 8010bb8:	e7c2      	b.n	8010b40 <ucdr_deserialize_uint16_t+0x58>
 8010bba:	4639      	mov	r1, r7
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f00a ffa3 	bl	801bb0a <memcpy>
 8010bc4:	464a      	mov	r2, r9
 8010bc6:	19a8      	adds	r0, r5, r6
 8010bc8:	68a1      	ldr	r1, [r4, #8]
 8010bca:	f00a ff9e 	bl	801bb0a <memcpy>
 8010bce:	e7b7      	b.n	8010b40 <ucdr_deserialize_uint16_t+0x58>

08010bd0 <ucdr_deserialize_endian_uint16_t>:
 8010bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	460e      	mov	r6, r1
 8010bd8:	2102      	movs	r1, #2
 8010bda:	4615      	mov	r5, r2
 8010bdc:	f000 ffb0 	bl	8011b40 <ucdr_buffer_alignment>
 8010be0:	4601      	mov	r1, r0
 8010be2:	4620      	mov	r0, r4
 8010be4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010be8:	f000 fff2 	bl	8011bd0 <ucdr_advance_buffer>
 8010bec:	2102      	movs	r1, #2
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 ff46 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010bf4:	bb70      	cbnz	r0, 8010c54 <ucdr_deserialize_endian_uint16_t+0x84>
 8010bf6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010bfa:	454f      	cmp	r7, r9
 8010bfc:	d925      	bls.n	8010c4a <ucdr_deserialize_endian_uint16_t+0x7a>
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	4620      	mov	r0, r4
 8010c02:	60a7      	str	r7, [r4, #8]
 8010c04:	eba7 0709 	sub.w	r7, r7, r9
 8010c08:	443b      	add	r3, r7
 8010c0a:	f1c7 0a02 	rsb	sl, r7, #2
 8010c0e:	6123      	str	r3, [r4, #16]
 8010c10:	4651      	mov	r1, sl
 8010c12:	f000 ff41 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d034      	beq.n	8010c84 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010c1a:	2e01      	cmp	r6, #1
 8010c1c:	d043      	beq.n	8010ca6 <ucdr_deserialize_endian_uint16_t+0xd6>
 8010c1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010c22:	702b      	strb	r3, [r5, #0]
 8010c24:	2f00      	cmp	r7, #0
 8010c26:	d03a      	beq.n	8010c9e <ucdr_deserialize_endian_uint16_t+0xce>
 8010c28:	f899 3000 	ldrb.w	r3, [r9]
 8010c2c:	706b      	strb	r3, [r5, #1]
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	2102      	movs	r1, #2
 8010c32:	68a2      	ldr	r2, [r4, #8]
 8010c34:	3302      	adds	r3, #2
 8010c36:	7da0      	ldrb	r0, [r4, #22]
 8010c38:	4452      	add	r2, sl
 8010c3a:	7561      	strb	r1, [r4, #21]
 8010c3c:	1bdb      	subs	r3, r3, r7
 8010c3e:	f080 0001 	eor.w	r0, r0, #1
 8010c42:	60a2      	str	r2, [r4, #8]
 8010c44:	6123      	str	r3, [r4, #16]
 8010c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c4a:	2102      	movs	r1, #2
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f000 ff23 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010c52:	b178      	cbz	r0, 8010c74 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010c54:	2e01      	cmp	r6, #1
 8010c56:	68a3      	ldr	r3, [r4, #8]
 8010c58:	d011      	beq.n	8010c7e <ucdr_deserialize_endian_uint16_t+0xae>
 8010c5a:	785b      	ldrb	r3, [r3, #1]
 8010c5c:	702b      	strb	r3, [r5, #0]
 8010c5e:	68a3      	ldr	r3, [r4, #8]
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	706b      	strb	r3, [r5, #1]
 8010c64:	2102      	movs	r1, #2
 8010c66:	68a2      	ldr	r2, [r4, #8]
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	440a      	add	r2, r1
 8010c6c:	7561      	strb	r1, [r4, #21]
 8010c6e:	440b      	add	r3, r1
 8010c70:	60a2      	str	r2, [r4, #8]
 8010c72:	6123      	str	r3, [r4, #16]
 8010c74:	7da0      	ldrb	r0, [r4, #22]
 8010c76:	f080 0001 	eor.w	r0, r0, #1
 8010c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	802b      	strh	r3, [r5, #0]
 8010c82:	e7ef      	b.n	8010c64 <ucdr_deserialize_endian_uint16_t+0x94>
 8010c84:	68a2      	ldr	r2, [r4, #8]
 8010c86:	6923      	ldr	r3, [r4, #16]
 8010c88:	1bd2      	subs	r2, r2, r7
 8010c8a:	7da0      	ldrb	r0, [r4, #22]
 8010c8c:	1bdb      	subs	r3, r3, r7
 8010c8e:	f884 8015 	strb.w	r8, [r4, #21]
 8010c92:	f080 0001 	eor.w	r0, r0, #1
 8010c96:	60a2      	str	r2, [r4, #8]
 8010c98:	6123      	str	r3, [r4, #16]
 8010c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c9e:	68a3      	ldr	r3, [r4, #8]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	706b      	strb	r3, [r5, #1]
 8010ca4:	e7c3      	b.n	8010c2e <ucdr_deserialize_endian_uint16_t+0x5e>
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	463a      	mov	r2, r7
 8010caa:	4628      	mov	r0, r5
 8010cac:	f00a ff2d 	bl	801bb0a <memcpy>
 8010cb0:	4652      	mov	r2, sl
 8010cb2:	19e8      	adds	r0, r5, r7
 8010cb4:	68a1      	ldr	r1, [r4, #8]
 8010cb6:	f00a ff28 	bl	801bb0a <memcpy>
 8010cba:	e7b8      	b.n	8010c2e <ucdr_deserialize_endian_uint16_t+0x5e>

08010cbc <ucdr_serialize_uint32_t>:
 8010cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc0:	b082      	sub	sp, #8
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	9101      	str	r1, [sp, #4]
 8010cc6:	2104      	movs	r1, #4
 8010cc8:	f000 ff3a 	bl	8011b40 <ucdr_buffer_alignment>
 8010ccc:	4601      	mov	r1, r0
 8010cce:	4620      	mov	r0, r4
 8010cd0:	7d67      	ldrb	r7, [r4, #21]
 8010cd2:	f000 ff7d 	bl	8011bd0 <ucdr_advance_buffer>
 8010cd6:	2104      	movs	r1, #4
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fed1 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d139      	bne.n	8010d56 <ucdr_serialize_uint32_t+0x9a>
 8010ce2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010ce6:	42ab      	cmp	r3, r5
 8010ce8:	d930      	bls.n	8010d4c <ucdr_serialize_uint32_t+0x90>
 8010cea:	1b5e      	subs	r6, r3, r5
 8010cec:	60a3      	str	r3, [r4, #8]
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f1c6 0804 	rsb	r8, r6, #4
 8010cf6:	4433      	add	r3, r6
 8010cf8:	4641      	mov	r1, r8
 8010cfa:	6123      	str	r3, [r4, #16]
 8010cfc:	f000 fecc 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d04c      	beq.n	8010d9e <ucdr_serialize_uint32_t+0xe2>
 8010d04:	7d23      	ldrb	r3, [r4, #20]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d063      	beq.n	8010dd2 <ucdr_serialize_uint32_t+0x116>
 8010d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d0e:	702b      	strb	r3, [r5, #0]
 8010d10:	2e00      	cmp	r6, #0
 8010d12:	d051      	beq.n	8010db8 <ucdr_serialize_uint32_t+0xfc>
 8010d14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010d18:	2e01      	cmp	r6, #1
 8010d1a:	706b      	strb	r3, [r5, #1]
 8010d1c:	d050      	beq.n	8010dc0 <ucdr_serialize_uint32_t+0x104>
 8010d1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d22:	2e02      	cmp	r6, #2
 8010d24:	70ab      	strb	r3, [r5, #2]
 8010d26:	d04f      	beq.n	8010dc8 <ucdr_serialize_uint32_t+0x10c>
 8010d28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d2c:	70eb      	strb	r3, [r5, #3]
 8010d2e:	6923      	ldr	r3, [r4, #16]
 8010d30:	2104      	movs	r1, #4
 8010d32:	68a2      	ldr	r2, [r4, #8]
 8010d34:	3304      	adds	r3, #4
 8010d36:	7da0      	ldrb	r0, [r4, #22]
 8010d38:	4442      	add	r2, r8
 8010d3a:	7561      	strb	r1, [r4, #21]
 8010d3c:	1b9e      	subs	r6, r3, r6
 8010d3e:	f080 0001 	eor.w	r0, r0, #1
 8010d42:	60a2      	str	r2, [r4, #8]
 8010d44:	6126      	str	r6, [r4, #16]
 8010d46:	b002      	add	sp, #8
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	2104      	movs	r1, #4
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 fea2 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010d54:	b1d0      	cbz	r0, 8010d8c <ucdr_serialize_uint32_t+0xd0>
 8010d56:	7d23      	ldrb	r3, [r4, #20]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	68a3      	ldr	r3, [r4, #8]
 8010d5c:	d01c      	beq.n	8010d98 <ucdr_serialize_uint32_t+0xdc>
 8010d5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010d62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010d6a:	7018      	strb	r0, [r3, #0]
 8010d6c:	68a3      	ldr	r3, [r4, #8]
 8010d6e:	705a      	strb	r2, [r3, #1]
 8010d70:	68a3      	ldr	r3, [r4, #8]
 8010d72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d76:	7099      	strb	r1, [r3, #2]
 8010d78:	68a3      	ldr	r3, [r4, #8]
 8010d7a:	70da      	strb	r2, [r3, #3]
 8010d7c:	2104      	movs	r1, #4
 8010d7e:	68a2      	ldr	r2, [r4, #8]
 8010d80:	6923      	ldr	r3, [r4, #16]
 8010d82:	440a      	add	r2, r1
 8010d84:	7561      	strb	r1, [r4, #21]
 8010d86:	440b      	add	r3, r1
 8010d88:	60a2      	str	r2, [r4, #8]
 8010d8a:	6123      	str	r3, [r4, #16]
 8010d8c:	7da0      	ldrb	r0, [r4, #22]
 8010d8e:	f080 0001 	eor.w	r0, r0, #1
 8010d92:	b002      	add	sp, #8
 8010d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d98:	9a01      	ldr	r2, [sp, #4]
 8010d9a:	601a      	str	r2, [r3, #0]
 8010d9c:	e7ee      	b.n	8010d7c <ucdr_serialize_uint32_t+0xc0>
 8010d9e:	68a2      	ldr	r2, [r4, #8]
 8010da0:	6923      	ldr	r3, [r4, #16]
 8010da2:	7da0      	ldrb	r0, [r4, #22]
 8010da4:	1b92      	subs	r2, r2, r6
 8010da6:	1b9b      	subs	r3, r3, r6
 8010da8:	7567      	strb	r7, [r4, #21]
 8010daa:	f080 0001 	eor.w	r0, r0, #1
 8010dae:	60a2      	str	r2, [r4, #8]
 8010db0:	6123      	str	r3, [r4, #16]
 8010db2:	b002      	add	sp, #8
 8010db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db8:	68a3      	ldr	r3, [r4, #8]
 8010dba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010dbe:	701a      	strb	r2, [r3, #0]
 8010dc0:	68a3      	ldr	r3, [r4, #8]
 8010dc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010dc6:	701a      	strb	r2, [r3, #0]
 8010dc8:	68a3      	ldr	r3, [r4, #8]
 8010dca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010dce:	701a      	strb	r2, [r3, #0]
 8010dd0:	e7ad      	b.n	8010d2e <ucdr_serialize_uint32_t+0x72>
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	ad01      	add	r5, sp, #4
 8010dd6:	4632      	mov	r2, r6
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f00a fe96 	bl	801bb0a <memcpy>
 8010dde:	4642      	mov	r2, r8
 8010de0:	19a9      	adds	r1, r5, r6
 8010de2:	68a0      	ldr	r0, [r4, #8]
 8010de4:	f00a fe91 	bl	801bb0a <memcpy>
 8010de8:	e7a1      	b.n	8010d2e <ucdr_serialize_uint32_t+0x72>
 8010dea:	bf00      	nop

08010dec <ucdr_serialize_endian_uint32_t>:
 8010dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df0:	4604      	mov	r4, r0
 8010df2:	b083      	sub	sp, #12
 8010df4:	460d      	mov	r5, r1
 8010df6:	2104      	movs	r1, #4
 8010df8:	9201      	str	r2, [sp, #4]
 8010dfa:	f000 fea1 	bl	8011b40 <ucdr_buffer_alignment>
 8010dfe:	4601      	mov	r1, r0
 8010e00:	4620      	mov	r0, r4
 8010e02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e06:	f000 fee3 	bl	8011bd0 <ucdr_advance_buffer>
 8010e0a:	2104      	movs	r1, #4
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 fe37 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d138      	bne.n	8010e88 <ucdr_serialize_endian_uint32_t+0x9c>
 8010e16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010e1a:	42b7      	cmp	r7, r6
 8010e1c:	d92f      	bls.n	8010e7e <ucdr_serialize_endian_uint32_t+0x92>
 8010e1e:	6923      	ldr	r3, [r4, #16]
 8010e20:	4620      	mov	r0, r4
 8010e22:	60a7      	str	r7, [r4, #8]
 8010e24:	1bbf      	subs	r7, r7, r6
 8010e26:	443b      	add	r3, r7
 8010e28:	f1c7 0904 	rsb	r9, r7, #4
 8010e2c:	6123      	str	r3, [r4, #16]
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f000 fe32 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d04a      	beq.n	8010ece <ucdr_serialize_endian_uint32_t+0xe2>
 8010e38:	2d01      	cmp	r5, #1
 8010e3a:	d063      	beq.n	8010f04 <ucdr_serialize_endian_uint32_t+0x118>
 8010e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e40:	7033      	strb	r3, [r6, #0]
 8010e42:	2f00      	cmp	r7, #0
 8010e44:	d051      	beq.n	8010eea <ucdr_serialize_endian_uint32_t+0xfe>
 8010e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e4a:	2f01      	cmp	r7, #1
 8010e4c:	7073      	strb	r3, [r6, #1]
 8010e4e:	d050      	beq.n	8010ef2 <ucdr_serialize_endian_uint32_t+0x106>
 8010e50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e54:	2f02      	cmp	r7, #2
 8010e56:	70b3      	strb	r3, [r6, #2]
 8010e58:	d04f      	beq.n	8010efa <ucdr_serialize_endian_uint32_t+0x10e>
 8010e5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e5e:	70f3      	strb	r3, [r6, #3]
 8010e60:	6923      	ldr	r3, [r4, #16]
 8010e62:	2104      	movs	r1, #4
 8010e64:	68a2      	ldr	r2, [r4, #8]
 8010e66:	7da0      	ldrb	r0, [r4, #22]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	444a      	add	r2, r9
 8010e6c:	7561      	strb	r1, [r4, #21]
 8010e6e:	1bdb      	subs	r3, r3, r7
 8010e70:	f080 0001 	eor.w	r0, r0, #1
 8010e74:	60a2      	str	r2, [r4, #8]
 8010e76:	6123      	str	r3, [r4, #16]
 8010e78:	b003      	add	sp, #12
 8010e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e7e:	2104      	movs	r1, #4
 8010e80:	4620      	mov	r0, r4
 8010e82:	f000 fe09 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010e86:	b1c8      	cbz	r0, 8010ebc <ucdr_serialize_endian_uint32_t+0xd0>
 8010e88:	2d01      	cmp	r5, #1
 8010e8a:	68a3      	ldr	r3, [r4, #8]
 8010e8c:	d01c      	beq.n	8010ec8 <ucdr_serialize_endian_uint32_t+0xdc>
 8010e8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010e92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e96:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010e9a:	7018      	strb	r0, [r3, #0]
 8010e9c:	68a3      	ldr	r3, [r4, #8]
 8010e9e:	705a      	strb	r2, [r3, #1]
 8010ea0:	68a3      	ldr	r3, [r4, #8]
 8010ea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010ea6:	7099      	strb	r1, [r3, #2]
 8010ea8:	68a3      	ldr	r3, [r4, #8]
 8010eaa:	70da      	strb	r2, [r3, #3]
 8010eac:	2104      	movs	r1, #4
 8010eae:	68a2      	ldr	r2, [r4, #8]
 8010eb0:	6923      	ldr	r3, [r4, #16]
 8010eb2:	440a      	add	r2, r1
 8010eb4:	7561      	strb	r1, [r4, #21]
 8010eb6:	440b      	add	r3, r1
 8010eb8:	60a2      	str	r2, [r4, #8]
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	7da0      	ldrb	r0, [r4, #22]
 8010ebe:	f080 0001 	eor.w	r0, r0, #1
 8010ec2:	b003      	add	sp, #12
 8010ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ec8:	9a01      	ldr	r2, [sp, #4]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	e7ee      	b.n	8010eac <ucdr_serialize_endian_uint32_t+0xc0>
 8010ece:	68a2      	ldr	r2, [r4, #8]
 8010ed0:	6923      	ldr	r3, [r4, #16]
 8010ed2:	7da0      	ldrb	r0, [r4, #22]
 8010ed4:	1bd2      	subs	r2, r2, r7
 8010ed6:	1bdb      	subs	r3, r3, r7
 8010ed8:	f884 8015 	strb.w	r8, [r4, #21]
 8010edc:	f080 0001 	eor.w	r0, r0, #1
 8010ee0:	60a2      	str	r2, [r4, #8]
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	b003      	add	sp, #12
 8010ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eea:	68a3      	ldr	r3, [r4, #8]
 8010eec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ef0:	701a      	strb	r2, [r3, #0]
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010ef8:	701a      	strb	r2, [r3, #0]
 8010efa:	68a3      	ldr	r3, [r4, #8]
 8010efc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f00:	701a      	strb	r2, [r3, #0]
 8010f02:	e7ad      	b.n	8010e60 <ucdr_serialize_endian_uint32_t+0x74>
 8010f04:	ad01      	add	r5, sp, #4
 8010f06:	463a      	mov	r2, r7
 8010f08:	4630      	mov	r0, r6
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	f00a fdfd 	bl	801bb0a <memcpy>
 8010f10:	464a      	mov	r2, r9
 8010f12:	19e9      	adds	r1, r5, r7
 8010f14:	68a0      	ldr	r0, [r4, #8]
 8010f16:	f00a fdf8 	bl	801bb0a <memcpy>
 8010f1a:	e7a1      	b.n	8010e60 <ucdr_serialize_endian_uint32_t+0x74>

08010f1c <ucdr_deserialize_uint32_t>:
 8010f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f20:	4604      	mov	r4, r0
 8010f22:	460d      	mov	r5, r1
 8010f24:	2104      	movs	r1, #4
 8010f26:	f000 fe0b 	bl	8011b40 <ucdr_buffer_alignment>
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f32:	f000 fe4d 	bl	8011bd0 <ucdr_advance_buffer>
 8010f36:	2104      	movs	r1, #4
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f000 fda1 	bl	8011a80 <ucdr_check_buffer_available_for>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d138      	bne.n	8010fb4 <ucdr_deserialize_uint32_t+0x98>
 8010f42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010f46:	42b7      	cmp	r7, r6
 8010f48:	d92f      	bls.n	8010faa <ucdr_deserialize_uint32_t+0x8e>
 8010f4a:	6923      	ldr	r3, [r4, #16]
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	60a7      	str	r7, [r4, #8]
 8010f50:	1bbf      	subs	r7, r7, r6
 8010f52:	443b      	add	r3, r7
 8010f54:	f1c7 0904 	rsb	r9, r7, #4
 8010f58:	6123      	str	r3, [r4, #16]
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	f000 fd9c 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d046      	beq.n	8010ff2 <ucdr_deserialize_uint32_t+0xd6>
 8010f64:	7d23      	ldrb	r3, [r4, #20]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d05c      	beq.n	8011024 <ucdr_deserialize_uint32_t+0x108>
 8010f6a:	78f3      	ldrb	r3, [r6, #3]
 8010f6c:	702b      	strb	r3, [r5, #0]
 8010f6e:	2f00      	cmp	r7, #0
 8010f70:	d04c      	beq.n	801100c <ucdr_deserialize_uint32_t+0xf0>
 8010f72:	78b3      	ldrb	r3, [r6, #2]
 8010f74:	2f01      	cmp	r7, #1
 8010f76:	706b      	strb	r3, [r5, #1]
 8010f78:	f105 0302 	add.w	r3, r5, #2
 8010f7c:	d04a      	beq.n	8011014 <ucdr_deserialize_uint32_t+0xf8>
 8010f7e:	7873      	ldrb	r3, [r6, #1]
 8010f80:	2f02      	cmp	r7, #2
 8010f82:	70ab      	strb	r3, [r5, #2]
 8010f84:	f105 0303 	add.w	r3, r5, #3
 8010f88:	d048      	beq.n	801101c <ucdr_deserialize_uint32_t+0x100>
 8010f8a:	7833      	ldrb	r3, [r6, #0]
 8010f8c:	70eb      	strb	r3, [r5, #3]
 8010f8e:	6923      	ldr	r3, [r4, #16]
 8010f90:	2104      	movs	r1, #4
 8010f92:	68a2      	ldr	r2, [r4, #8]
 8010f94:	3304      	adds	r3, #4
 8010f96:	7da0      	ldrb	r0, [r4, #22]
 8010f98:	444a      	add	r2, r9
 8010f9a:	7561      	strb	r1, [r4, #21]
 8010f9c:	1bdb      	subs	r3, r3, r7
 8010f9e:	f080 0001 	eor.w	r0, r0, #1
 8010fa2:	60a2      	str	r2, [r4, #8]
 8010fa4:	6123      	str	r3, [r4, #16]
 8010fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010faa:	2104      	movs	r1, #4
 8010fac:	4620      	mov	r0, r4
 8010fae:	f000 fd73 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8010fb2:	b1b0      	cbz	r0, 8010fe2 <ucdr_deserialize_uint32_t+0xc6>
 8010fb4:	7d23      	ldrb	r3, [r4, #20]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	68a3      	ldr	r3, [r4, #8]
 8010fba:	d017      	beq.n	8010fec <ucdr_deserialize_uint32_t+0xd0>
 8010fbc:	78db      	ldrb	r3, [r3, #3]
 8010fbe:	702b      	strb	r3, [r5, #0]
 8010fc0:	68a3      	ldr	r3, [r4, #8]
 8010fc2:	789b      	ldrb	r3, [r3, #2]
 8010fc4:	706b      	strb	r3, [r5, #1]
 8010fc6:	68a3      	ldr	r3, [r4, #8]
 8010fc8:	785b      	ldrb	r3, [r3, #1]
 8010fca:	70ab      	strb	r3, [r5, #2]
 8010fcc:	68a3      	ldr	r3, [r4, #8]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	70eb      	strb	r3, [r5, #3]
 8010fd2:	2104      	movs	r1, #4
 8010fd4:	68a2      	ldr	r2, [r4, #8]
 8010fd6:	6923      	ldr	r3, [r4, #16]
 8010fd8:	440a      	add	r2, r1
 8010fda:	7561      	strb	r1, [r4, #21]
 8010fdc:	440b      	add	r3, r1
 8010fde:	60a2      	str	r2, [r4, #8]
 8010fe0:	6123      	str	r3, [r4, #16]
 8010fe2:	7da0      	ldrb	r0, [r4, #22]
 8010fe4:	f080 0001 	eor.w	r0, r0, #1
 8010fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	602b      	str	r3, [r5, #0]
 8010ff0:	e7ef      	b.n	8010fd2 <ucdr_deserialize_uint32_t+0xb6>
 8010ff2:	68a2      	ldr	r2, [r4, #8]
 8010ff4:	6923      	ldr	r3, [r4, #16]
 8010ff6:	1bd2      	subs	r2, r2, r7
 8010ff8:	7da0      	ldrb	r0, [r4, #22]
 8010ffa:	1bdb      	subs	r3, r3, r7
 8010ffc:	f884 8015 	strb.w	r8, [r4, #21]
 8011000:	f080 0001 	eor.w	r0, r0, #1
 8011004:	60a2      	str	r2, [r4, #8]
 8011006:	6123      	str	r3, [r4, #16]
 8011008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801100c:	68a3      	ldr	r3, [r4, #8]
 801100e:	789b      	ldrb	r3, [r3, #2]
 8011010:	706b      	strb	r3, [r5, #1]
 8011012:	1cab      	adds	r3, r5, #2
 8011014:	68a2      	ldr	r2, [r4, #8]
 8011016:	7852      	ldrb	r2, [r2, #1]
 8011018:	f803 2b01 	strb.w	r2, [r3], #1
 801101c:	68a2      	ldr	r2, [r4, #8]
 801101e:	7812      	ldrb	r2, [r2, #0]
 8011020:	701a      	strb	r2, [r3, #0]
 8011022:	e7b4      	b.n	8010f8e <ucdr_deserialize_uint32_t+0x72>
 8011024:	4631      	mov	r1, r6
 8011026:	463a      	mov	r2, r7
 8011028:	4628      	mov	r0, r5
 801102a:	f00a fd6e 	bl	801bb0a <memcpy>
 801102e:	464a      	mov	r2, r9
 8011030:	19e8      	adds	r0, r5, r7
 8011032:	68a1      	ldr	r1, [r4, #8]
 8011034:	f00a fd69 	bl	801bb0a <memcpy>
 8011038:	e7a9      	b.n	8010f8e <ucdr_deserialize_uint32_t+0x72>
 801103a:	bf00      	nop

0801103c <ucdr_deserialize_endian_uint32_t>:
 801103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	4604      	mov	r4, r0
 8011042:	460e      	mov	r6, r1
 8011044:	2104      	movs	r1, #4
 8011046:	4615      	mov	r5, r2
 8011048:	f000 fd7a 	bl	8011b40 <ucdr_buffer_alignment>
 801104c:	4601      	mov	r1, r0
 801104e:	4620      	mov	r0, r4
 8011050:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011054:	f000 fdbc 	bl	8011bd0 <ucdr_advance_buffer>
 8011058:	2104      	movs	r1, #4
 801105a:	4620      	mov	r0, r4
 801105c:	f000 fd10 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011060:	2800      	cmp	r0, #0
 8011062:	d13c      	bne.n	80110de <ucdr_deserialize_endian_uint32_t+0xa2>
 8011064:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011068:	42bb      	cmp	r3, r7
 801106a:	d933      	bls.n	80110d4 <ucdr_deserialize_endian_uint32_t+0x98>
 801106c:	eba3 0907 	sub.w	r9, r3, r7
 8011070:	60a3      	str	r3, [r4, #8]
 8011072:	6923      	ldr	r3, [r4, #16]
 8011074:	4620      	mov	r0, r4
 8011076:	f1c9 0a04 	rsb	sl, r9, #4
 801107a:	444b      	add	r3, r9
 801107c:	4651      	mov	r1, sl
 801107e:	6123      	str	r3, [r4, #16]
 8011080:	f000 fd0a 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011084:	2800      	cmp	r0, #0
 8011086:	d048      	beq.n	801111a <ucdr_deserialize_endian_uint32_t+0xde>
 8011088:	2e01      	cmp	r6, #1
 801108a:	d061      	beq.n	8011150 <ucdr_deserialize_endian_uint32_t+0x114>
 801108c:	78fb      	ldrb	r3, [r7, #3]
 801108e:	702b      	strb	r3, [r5, #0]
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	d050      	beq.n	8011138 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011096:	78bb      	ldrb	r3, [r7, #2]
 8011098:	f1b9 0f01 	cmp.w	r9, #1
 801109c:	706b      	strb	r3, [r5, #1]
 801109e:	f105 0302 	add.w	r3, r5, #2
 80110a2:	d04d      	beq.n	8011140 <ucdr_deserialize_endian_uint32_t+0x104>
 80110a4:	787b      	ldrb	r3, [r7, #1]
 80110a6:	f1b9 0f02 	cmp.w	r9, #2
 80110aa:	70ab      	strb	r3, [r5, #2]
 80110ac:	f105 0303 	add.w	r3, r5, #3
 80110b0:	d04a      	beq.n	8011148 <ucdr_deserialize_endian_uint32_t+0x10c>
 80110b2:	783b      	ldrb	r3, [r7, #0]
 80110b4:	70eb      	strb	r3, [r5, #3]
 80110b6:	6923      	ldr	r3, [r4, #16]
 80110b8:	2104      	movs	r1, #4
 80110ba:	68a2      	ldr	r2, [r4, #8]
 80110bc:	3304      	adds	r3, #4
 80110be:	7da0      	ldrb	r0, [r4, #22]
 80110c0:	4452      	add	r2, sl
 80110c2:	7561      	strb	r1, [r4, #21]
 80110c4:	eba3 0309 	sub.w	r3, r3, r9
 80110c8:	f080 0001 	eor.w	r0, r0, #1
 80110cc:	60a2      	str	r2, [r4, #8]
 80110ce:	6123      	str	r3, [r4, #16]
 80110d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d4:	2104      	movs	r1, #4
 80110d6:	4620      	mov	r0, r4
 80110d8:	f000 fcde 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 80110dc:	b1a8      	cbz	r0, 801110a <ucdr_deserialize_endian_uint32_t+0xce>
 80110de:	2e01      	cmp	r6, #1
 80110e0:	68a3      	ldr	r3, [r4, #8]
 80110e2:	d017      	beq.n	8011114 <ucdr_deserialize_endian_uint32_t+0xd8>
 80110e4:	78db      	ldrb	r3, [r3, #3]
 80110e6:	702b      	strb	r3, [r5, #0]
 80110e8:	68a3      	ldr	r3, [r4, #8]
 80110ea:	789b      	ldrb	r3, [r3, #2]
 80110ec:	706b      	strb	r3, [r5, #1]
 80110ee:	68a3      	ldr	r3, [r4, #8]
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	70ab      	strb	r3, [r5, #2]
 80110f4:	68a3      	ldr	r3, [r4, #8]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	70eb      	strb	r3, [r5, #3]
 80110fa:	2104      	movs	r1, #4
 80110fc:	68a2      	ldr	r2, [r4, #8]
 80110fe:	6923      	ldr	r3, [r4, #16]
 8011100:	440a      	add	r2, r1
 8011102:	7561      	strb	r1, [r4, #21]
 8011104:	440b      	add	r3, r1
 8011106:	60a2      	str	r2, [r4, #8]
 8011108:	6123      	str	r3, [r4, #16]
 801110a:	7da0      	ldrb	r0, [r4, #22]
 801110c:	f080 0001 	eor.w	r0, r0, #1
 8011110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	e7ef      	b.n	80110fa <ucdr_deserialize_endian_uint32_t+0xbe>
 801111a:	68a2      	ldr	r2, [r4, #8]
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	eba2 0209 	sub.w	r2, r2, r9
 8011122:	7da0      	ldrb	r0, [r4, #22]
 8011124:	eba3 0309 	sub.w	r3, r3, r9
 8011128:	f884 8015 	strb.w	r8, [r4, #21]
 801112c:	f080 0001 	eor.w	r0, r0, #1
 8011130:	60a2      	str	r2, [r4, #8]
 8011132:	6123      	str	r3, [r4, #16]
 8011134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011138:	68a3      	ldr	r3, [r4, #8]
 801113a:	789b      	ldrb	r3, [r3, #2]
 801113c:	706b      	strb	r3, [r5, #1]
 801113e:	1cab      	adds	r3, r5, #2
 8011140:	68a2      	ldr	r2, [r4, #8]
 8011142:	7852      	ldrb	r2, [r2, #1]
 8011144:	f803 2b01 	strb.w	r2, [r3], #1
 8011148:	68a2      	ldr	r2, [r4, #8]
 801114a:	7812      	ldrb	r2, [r2, #0]
 801114c:	701a      	strb	r2, [r3, #0]
 801114e:	e7b2      	b.n	80110b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011150:	4639      	mov	r1, r7
 8011152:	464a      	mov	r2, r9
 8011154:	4628      	mov	r0, r5
 8011156:	f00a fcd8 	bl	801bb0a <memcpy>
 801115a:	4652      	mov	r2, sl
 801115c:	eb05 0009 	add.w	r0, r5, r9
 8011160:	68a1      	ldr	r1, [r4, #8]
 8011162:	f00a fcd2 	bl	801bb0a <memcpy>
 8011166:	e7a6      	b.n	80110b6 <ucdr_deserialize_endian_uint32_t+0x7a>

08011168 <ucdr_serialize_uint64_t>:
 8011168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801116c:	4604      	mov	r4, r0
 801116e:	b082      	sub	sp, #8
 8011170:	2108      	movs	r1, #8
 8011172:	e9cd 2300 	strd	r2, r3, [sp]
 8011176:	f000 fce3 	bl	8011b40 <ucdr_buffer_alignment>
 801117a:	4601      	mov	r1, r0
 801117c:	4620      	mov	r0, r4
 801117e:	7d67      	ldrb	r7, [r4, #21]
 8011180:	f000 fd26 	bl	8011bd0 <ucdr_advance_buffer>
 8011184:	2108      	movs	r1, #8
 8011186:	4620      	mov	r0, r4
 8011188:	f000 fc7a 	bl	8011a80 <ucdr_check_buffer_available_for>
 801118c:	2800      	cmp	r0, #0
 801118e:	d14e      	bne.n	801122e <ucdr_serialize_uint64_t+0xc6>
 8011190:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011194:	42ab      	cmp	r3, r5
 8011196:	d945      	bls.n	8011224 <ucdr_serialize_uint64_t+0xbc>
 8011198:	1b5e      	subs	r6, r3, r5
 801119a:	60a3      	str	r3, [r4, #8]
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	4620      	mov	r0, r4
 80111a0:	f1c6 0808 	rsb	r8, r6, #8
 80111a4:	4433      	add	r3, r6
 80111a6:	4641      	mov	r1, r8
 80111a8:	6123      	str	r3, [r4, #16]
 80111aa:	f000 fc75 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	d074      	beq.n	801129c <ucdr_serialize_uint64_t+0x134>
 80111b2:	7d23      	ldrb	r3, [r4, #20]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	f000 809b 	beq.w	80112f0 <ucdr_serialize_uint64_t+0x188>
 80111ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111be:	702b      	strb	r3, [r5, #0]
 80111c0:	2e00      	cmp	r6, #0
 80111c2:	d078      	beq.n	80112b6 <ucdr_serialize_uint64_t+0x14e>
 80111c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111c8:	2e01      	cmp	r6, #1
 80111ca:	706b      	strb	r3, [r5, #1]
 80111cc:	d077      	beq.n	80112be <ucdr_serialize_uint64_t+0x156>
 80111ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111d2:	2e02      	cmp	r6, #2
 80111d4:	70ab      	strb	r3, [r5, #2]
 80111d6:	d076      	beq.n	80112c6 <ucdr_serialize_uint64_t+0x15e>
 80111d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80111dc:	2e03      	cmp	r6, #3
 80111de:	70eb      	strb	r3, [r5, #3]
 80111e0:	d075      	beq.n	80112ce <ucdr_serialize_uint64_t+0x166>
 80111e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80111e6:	2e04      	cmp	r6, #4
 80111e8:	712b      	strb	r3, [r5, #4]
 80111ea:	d074      	beq.n	80112d6 <ucdr_serialize_uint64_t+0x16e>
 80111ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80111f0:	2e05      	cmp	r6, #5
 80111f2:	716b      	strb	r3, [r5, #5]
 80111f4:	d073      	beq.n	80112de <ucdr_serialize_uint64_t+0x176>
 80111f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80111fa:	2e06      	cmp	r6, #6
 80111fc:	71ab      	strb	r3, [r5, #6]
 80111fe:	d072      	beq.n	80112e6 <ucdr_serialize_uint64_t+0x17e>
 8011200:	f89d 3000 	ldrb.w	r3, [sp]
 8011204:	71eb      	strb	r3, [r5, #7]
 8011206:	6923      	ldr	r3, [r4, #16]
 8011208:	2108      	movs	r1, #8
 801120a:	68a2      	ldr	r2, [r4, #8]
 801120c:	3308      	adds	r3, #8
 801120e:	7da0      	ldrb	r0, [r4, #22]
 8011210:	4442      	add	r2, r8
 8011212:	7561      	strb	r1, [r4, #21]
 8011214:	1b9e      	subs	r6, r3, r6
 8011216:	f080 0001 	eor.w	r0, r0, #1
 801121a:	60a2      	str	r2, [r4, #8]
 801121c:	6126      	str	r6, [r4, #16]
 801121e:	b002      	add	sp, #8
 8011220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011224:	2108      	movs	r1, #8
 8011226:	4620      	mov	r0, r4
 8011228:	f000 fc36 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801122c:	b350      	cbz	r0, 8011284 <ucdr_serialize_uint64_t+0x11c>
 801122e:	7d23      	ldrb	r3, [r4, #20]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d02d      	beq.n	8011290 <ucdr_serialize_uint64_t+0x128>
 8011234:	68a3      	ldr	r3, [r4, #8]
 8011236:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801123a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801123e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011242:	7018      	strb	r0, [r3, #0]
 8011244:	68a3      	ldr	r3, [r4, #8]
 8011246:	705a      	strb	r2, [r3, #1]
 8011248:	68a3      	ldr	r3, [r4, #8]
 801124a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801124e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011252:	7099      	strb	r1, [r3, #2]
 8011254:	68a3      	ldr	r3, [r4, #8]
 8011256:	70da      	strb	r2, [r3, #3]
 8011258:	68a3      	ldr	r3, [r4, #8]
 801125a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801125e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011262:	7118      	strb	r0, [r3, #4]
 8011264:	68a3      	ldr	r3, [r4, #8]
 8011266:	715a      	strb	r2, [r3, #5]
 8011268:	68a3      	ldr	r3, [r4, #8]
 801126a:	f89d 2000 	ldrb.w	r2, [sp]
 801126e:	7199      	strb	r1, [r3, #6]
 8011270:	68a3      	ldr	r3, [r4, #8]
 8011272:	71da      	strb	r2, [r3, #7]
 8011274:	2108      	movs	r1, #8
 8011276:	68a2      	ldr	r2, [r4, #8]
 8011278:	6923      	ldr	r3, [r4, #16]
 801127a:	440a      	add	r2, r1
 801127c:	7561      	strb	r1, [r4, #21]
 801127e:	440b      	add	r3, r1
 8011280:	60a2      	str	r2, [r4, #8]
 8011282:	6123      	str	r3, [r4, #16]
 8011284:	7da0      	ldrb	r0, [r4, #22]
 8011286:	f080 0001 	eor.w	r0, r0, #1
 801128a:	b002      	add	sp, #8
 801128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011290:	466b      	mov	r3, sp
 8011292:	68a2      	ldr	r2, [r4, #8]
 8011294:	cb03      	ldmia	r3!, {r0, r1}
 8011296:	6010      	str	r0, [r2, #0]
 8011298:	6051      	str	r1, [r2, #4]
 801129a:	e7eb      	b.n	8011274 <ucdr_serialize_uint64_t+0x10c>
 801129c:	68a2      	ldr	r2, [r4, #8]
 801129e:	6923      	ldr	r3, [r4, #16]
 80112a0:	7da0      	ldrb	r0, [r4, #22]
 80112a2:	1b92      	subs	r2, r2, r6
 80112a4:	1b9b      	subs	r3, r3, r6
 80112a6:	7567      	strb	r7, [r4, #21]
 80112a8:	f080 0001 	eor.w	r0, r0, #1
 80112ac:	60a2      	str	r2, [r4, #8]
 80112ae:	6123      	str	r3, [r4, #16]
 80112b0:	b002      	add	sp, #8
 80112b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b6:	68a3      	ldr	r3, [r4, #8]
 80112b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112bc:	701a      	strb	r2, [r3, #0]
 80112be:	68a3      	ldr	r3, [r4, #8]
 80112c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112c4:	701a      	strb	r2, [r3, #0]
 80112c6:	68a3      	ldr	r3, [r4, #8]
 80112c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112cc:	701a      	strb	r2, [r3, #0]
 80112ce:	68a3      	ldr	r3, [r4, #8]
 80112d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80112d4:	701a      	strb	r2, [r3, #0]
 80112d6:	68a3      	ldr	r3, [r4, #8]
 80112d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80112dc:	701a      	strb	r2, [r3, #0]
 80112de:	68a3      	ldr	r3, [r4, #8]
 80112e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80112e4:	701a      	strb	r2, [r3, #0]
 80112e6:	68a3      	ldr	r3, [r4, #8]
 80112e8:	f89d 2000 	ldrb.w	r2, [sp]
 80112ec:	701a      	strb	r2, [r3, #0]
 80112ee:	e78a      	b.n	8011206 <ucdr_serialize_uint64_t+0x9e>
 80112f0:	4628      	mov	r0, r5
 80112f2:	466d      	mov	r5, sp
 80112f4:	4632      	mov	r2, r6
 80112f6:	4629      	mov	r1, r5
 80112f8:	f00a fc07 	bl	801bb0a <memcpy>
 80112fc:	4642      	mov	r2, r8
 80112fe:	19a9      	adds	r1, r5, r6
 8011300:	68a0      	ldr	r0, [r4, #8]
 8011302:	f00a fc02 	bl	801bb0a <memcpy>
 8011306:	e77e      	b.n	8011206 <ucdr_serialize_uint64_t+0x9e>

08011308 <ucdr_serialize_int16_t>:
 8011308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801130c:	460b      	mov	r3, r1
 801130e:	b082      	sub	sp, #8
 8011310:	4604      	mov	r4, r0
 8011312:	2102      	movs	r1, #2
 8011314:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011318:	f000 fc12 	bl	8011b40 <ucdr_buffer_alignment>
 801131c:	4601      	mov	r1, r0
 801131e:	4620      	mov	r0, r4
 8011320:	7d67      	ldrb	r7, [r4, #21]
 8011322:	f000 fc55 	bl	8011bd0 <ucdr_advance_buffer>
 8011326:	2102      	movs	r1, #2
 8011328:	4620      	mov	r0, r4
 801132a:	f000 fba9 	bl	8011a80 <ucdr_check_buffer_available_for>
 801132e:	bb78      	cbnz	r0, 8011390 <ucdr_serialize_int16_t+0x88>
 8011330:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011334:	42ab      	cmp	r3, r5
 8011336:	d926      	bls.n	8011386 <ucdr_serialize_int16_t+0x7e>
 8011338:	1b5e      	subs	r6, r3, r5
 801133a:	60a3      	str	r3, [r4, #8]
 801133c:	6923      	ldr	r3, [r4, #16]
 801133e:	4620      	mov	r0, r4
 8011340:	f1c6 0802 	rsb	r8, r6, #2
 8011344:	4433      	add	r3, r6
 8011346:	4641      	mov	r1, r8
 8011348:	6123      	str	r3, [r4, #16]
 801134a:	f000 fba5 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801134e:	2800      	cmp	r0, #0
 8011350:	d03b      	beq.n	80113ca <ucdr_serialize_int16_t+0xc2>
 8011352:	7d23      	ldrb	r3, [r4, #20]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d04a      	beq.n	80113ee <ucdr_serialize_int16_t+0xe6>
 8011358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801135c:	702b      	strb	r3, [r5, #0]
 801135e:	2e00      	cmp	r6, #0
 8011360:	d040      	beq.n	80113e4 <ucdr_serialize_int16_t+0xdc>
 8011362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011366:	706b      	strb	r3, [r5, #1]
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	2102      	movs	r1, #2
 801136c:	68a2      	ldr	r2, [r4, #8]
 801136e:	3302      	adds	r3, #2
 8011370:	7da0      	ldrb	r0, [r4, #22]
 8011372:	4442      	add	r2, r8
 8011374:	7561      	strb	r1, [r4, #21]
 8011376:	1b9e      	subs	r6, r3, r6
 8011378:	f080 0001 	eor.w	r0, r0, #1
 801137c:	60a2      	str	r2, [r4, #8]
 801137e:	6126      	str	r6, [r4, #16]
 8011380:	b002      	add	sp, #8
 8011382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011386:	2102      	movs	r1, #2
 8011388:	4620      	mov	r0, r4
 801138a:	f000 fb85 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801138e:	b190      	cbz	r0, 80113b6 <ucdr_serialize_int16_t+0xae>
 8011390:	7d23      	ldrb	r3, [r4, #20]
 8011392:	2b01      	cmp	r3, #1
 8011394:	68a3      	ldr	r3, [r4, #8]
 8011396:	d014      	beq.n	80113c2 <ucdr_serialize_int16_t+0xba>
 8011398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801139c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113a0:	7019      	strb	r1, [r3, #0]
 80113a2:	68a3      	ldr	r3, [r4, #8]
 80113a4:	705a      	strb	r2, [r3, #1]
 80113a6:	2102      	movs	r1, #2
 80113a8:	68a2      	ldr	r2, [r4, #8]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	440a      	add	r2, r1
 80113ae:	7561      	strb	r1, [r4, #21]
 80113b0:	440b      	add	r3, r1
 80113b2:	60a2      	str	r2, [r4, #8]
 80113b4:	6123      	str	r3, [r4, #16]
 80113b6:	7da0      	ldrb	r0, [r4, #22]
 80113b8:	f080 0001 	eor.w	r0, r0, #1
 80113bc:	b002      	add	sp, #8
 80113be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80113c6:	801a      	strh	r2, [r3, #0]
 80113c8:	e7ed      	b.n	80113a6 <ucdr_serialize_int16_t+0x9e>
 80113ca:	68a2      	ldr	r2, [r4, #8]
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	7da0      	ldrb	r0, [r4, #22]
 80113d0:	1b92      	subs	r2, r2, r6
 80113d2:	1b9b      	subs	r3, r3, r6
 80113d4:	7567      	strb	r7, [r4, #21]
 80113d6:	f080 0001 	eor.w	r0, r0, #1
 80113da:	60a2      	str	r2, [r4, #8]
 80113dc:	6123      	str	r3, [r4, #16]
 80113de:	b002      	add	sp, #8
 80113e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e4:	68a3      	ldr	r3, [r4, #8]
 80113e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113ea:	701a      	strb	r2, [r3, #0]
 80113ec:	e7bc      	b.n	8011368 <ucdr_serialize_int16_t+0x60>
 80113ee:	4628      	mov	r0, r5
 80113f0:	f10d 0506 	add.w	r5, sp, #6
 80113f4:	4632      	mov	r2, r6
 80113f6:	4629      	mov	r1, r5
 80113f8:	f00a fb87 	bl	801bb0a <memcpy>
 80113fc:	4642      	mov	r2, r8
 80113fe:	19a9      	adds	r1, r5, r6
 8011400:	68a0      	ldr	r0, [r4, #8]
 8011402:	f00a fb82 	bl	801bb0a <memcpy>
 8011406:	e7af      	b.n	8011368 <ucdr_serialize_int16_t+0x60>

08011408 <ucdr_deserialize_int16_t>:
 8011408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801140c:	4604      	mov	r4, r0
 801140e:	460d      	mov	r5, r1
 8011410:	2102      	movs	r1, #2
 8011412:	f000 fb95 	bl	8011b40 <ucdr_buffer_alignment>
 8011416:	4601      	mov	r1, r0
 8011418:	4620      	mov	r0, r4
 801141a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801141e:	f000 fbd7 	bl	8011bd0 <ucdr_advance_buffer>
 8011422:	2102      	movs	r1, #2
 8011424:	4620      	mov	r0, r4
 8011426:	f000 fb2b 	bl	8011a80 <ucdr_check_buffer_available_for>
 801142a:	bb60      	cbnz	r0, 8011486 <ucdr_deserialize_int16_t+0x7e>
 801142c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011430:	42be      	cmp	r6, r7
 8011432:	d923      	bls.n	801147c <ucdr_deserialize_int16_t+0x74>
 8011434:	6923      	ldr	r3, [r4, #16]
 8011436:	4620      	mov	r0, r4
 8011438:	60a6      	str	r6, [r4, #8]
 801143a:	1bf6      	subs	r6, r6, r7
 801143c:	4433      	add	r3, r6
 801143e:	f1c6 0902 	rsb	r9, r6, #2
 8011442:	6123      	str	r3, [r4, #16]
 8011444:	4649      	mov	r1, r9
 8011446:	f000 fb27 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801144a:	2800      	cmp	r0, #0
 801144c:	d034      	beq.n	80114b8 <ucdr_deserialize_int16_t+0xb0>
 801144e:	7d23      	ldrb	r3, [r4, #20]
 8011450:	2b01      	cmp	r3, #1
 8011452:	d042      	beq.n	80114da <ucdr_deserialize_int16_t+0xd2>
 8011454:	787b      	ldrb	r3, [r7, #1]
 8011456:	702b      	strb	r3, [r5, #0]
 8011458:	2e00      	cmp	r6, #0
 801145a:	d03a      	beq.n	80114d2 <ucdr_deserialize_int16_t+0xca>
 801145c:	783b      	ldrb	r3, [r7, #0]
 801145e:	706b      	strb	r3, [r5, #1]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	2102      	movs	r1, #2
 8011464:	68a2      	ldr	r2, [r4, #8]
 8011466:	3302      	adds	r3, #2
 8011468:	7da0      	ldrb	r0, [r4, #22]
 801146a:	444a      	add	r2, r9
 801146c:	7561      	strb	r1, [r4, #21]
 801146e:	1b9b      	subs	r3, r3, r6
 8011470:	f080 0001 	eor.w	r0, r0, #1
 8011474:	60a2      	str	r2, [r4, #8]
 8011476:	6123      	str	r3, [r4, #16]
 8011478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801147c:	2102      	movs	r1, #2
 801147e:	4620      	mov	r0, r4
 8011480:	f000 fb0a 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011484:	b180      	cbz	r0, 80114a8 <ucdr_deserialize_int16_t+0xa0>
 8011486:	7d23      	ldrb	r3, [r4, #20]
 8011488:	2b01      	cmp	r3, #1
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	d011      	beq.n	80114b2 <ucdr_deserialize_int16_t+0xaa>
 801148e:	785b      	ldrb	r3, [r3, #1]
 8011490:	702b      	strb	r3, [r5, #0]
 8011492:	68a3      	ldr	r3, [r4, #8]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	706b      	strb	r3, [r5, #1]
 8011498:	2102      	movs	r1, #2
 801149a:	68a2      	ldr	r2, [r4, #8]
 801149c:	6923      	ldr	r3, [r4, #16]
 801149e:	440a      	add	r2, r1
 80114a0:	7561      	strb	r1, [r4, #21]
 80114a2:	440b      	add	r3, r1
 80114a4:	60a2      	str	r2, [r4, #8]
 80114a6:	6123      	str	r3, [r4, #16]
 80114a8:	7da0      	ldrb	r0, [r4, #22]
 80114aa:	f080 0001 	eor.w	r0, r0, #1
 80114ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	802b      	strh	r3, [r5, #0]
 80114b6:	e7ef      	b.n	8011498 <ucdr_deserialize_int16_t+0x90>
 80114b8:	68a2      	ldr	r2, [r4, #8]
 80114ba:	6923      	ldr	r3, [r4, #16]
 80114bc:	1b92      	subs	r2, r2, r6
 80114be:	7da0      	ldrb	r0, [r4, #22]
 80114c0:	1b9b      	subs	r3, r3, r6
 80114c2:	f884 8015 	strb.w	r8, [r4, #21]
 80114c6:	f080 0001 	eor.w	r0, r0, #1
 80114ca:	60a2      	str	r2, [r4, #8]
 80114cc:	6123      	str	r3, [r4, #16]
 80114ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114d2:	68a3      	ldr	r3, [r4, #8]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	706b      	strb	r3, [r5, #1]
 80114d8:	e7c2      	b.n	8011460 <ucdr_deserialize_int16_t+0x58>
 80114da:	4639      	mov	r1, r7
 80114dc:	4632      	mov	r2, r6
 80114de:	4628      	mov	r0, r5
 80114e0:	f00a fb13 	bl	801bb0a <memcpy>
 80114e4:	464a      	mov	r2, r9
 80114e6:	19a8      	adds	r0, r5, r6
 80114e8:	68a1      	ldr	r1, [r4, #8]
 80114ea:	f00a fb0e 	bl	801bb0a <memcpy>
 80114ee:	e7b7      	b.n	8011460 <ucdr_deserialize_int16_t+0x58>

080114f0 <ucdr_serialize_int32_t>:
 80114f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114f4:	b082      	sub	sp, #8
 80114f6:	4604      	mov	r4, r0
 80114f8:	9101      	str	r1, [sp, #4]
 80114fa:	2104      	movs	r1, #4
 80114fc:	f000 fb20 	bl	8011b40 <ucdr_buffer_alignment>
 8011500:	4601      	mov	r1, r0
 8011502:	4620      	mov	r0, r4
 8011504:	7d67      	ldrb	r7, [r4, #21]
 8011506:	f000 fb63 	bl	8011bd0 <ucdr_advance_buffer>
 801150a:	2104      	movs	r1, #4
 801150c:	4620      	mov	r0, r4
 801150e:	f000 fab7 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011512:	2800      	cmp	r0, #0
 8011514:	d139      	bne.n	801158a <ucdr_serialize_int32_t+0x9a>
 8011516:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801151a:	42ab      	cmp	r3, r5
 801151c:	d930      	bls.n	8011580 <ucdr_serialize_int32_t+0x90>
 801151e:	1b5e      	subs	r6, r3, r5
 8011520:	60a3      	str	r3, [r4, #8]
 8011522:	6923      	ldr	r3, [r4, #16]
 8011524:	4620      	mov	r0, r4
 8011526:	f1c6 0804 	rsb	r8, r6, #4
 801152a:	4433      	add	r3, r6
 801152c:	4641      	mov	r1, r8
 801152e:	6123      	str	r3, [r4, #16]
 8011530:	f000 fab2 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011534:	2800      	cmp	r0, #0
 8011536:	d04c      	beq.n	80115d2 <ucdr_serialize_int32_t+0xe2>
 8011538:	7d23      	ldrb	r3, [r4, #20]
 801153a:	2b01      	cmp	r3, #1
 801153c:	d063      	beq.n	8011606 <ucdr_serialize_int32_t+0x116>
 801153e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011542:	702b      	strb	r3, [r5, #0]
 8011544:	2e00      	cmp	r6, #0
 8011546:	d051      	beq.n	80115ec <ucdr_serialize_int32_t+0xfc>
 8011548:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801154c:	2e01      	cmp	r6, #1
 801154e:	706b      	strb	r3, [r5, #1]
 8011550:	d050      	beq.n	80115f4 <ucdr_serialize_int32_t+0x104>
 8011552:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011556:	2e02      	cmp	r6, #2
 8011558:	70ab      	strb	r3, [r5, #2]
 801155a:	d04f      	beq.n	80115fc <ucdr_serialize_int32_t+0x10c>
 801155c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011560:	70eb      	strb	r3, [r5, #3]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	2104      	movs	r1, #4
 8011566:	68a2      	ldr	r2, [r4, #8]
 8011568:	3304      	adds	r3, #4
 801156a:	7da0      	ldrb	r0, [r4, #22]
 801156c:	4442      	add	r2, r8
 801156e:	7561      	strb	r1, [r4, #21]
 8011570:	1b9e      	subs	r6, r3, r6
 8011572:	f080 0001 	eor.w	r0, r0, #1
 8011576:	60a2      	str	r2, [r4, #8]
 8011578:	6126      	str	r6, [r4, #16]
 801157a:	b002      	add	sp, #8
 801157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011580:	2104      	movs	r1, #4
 8011582:	4620      	mov	r0, r4
 8011584:	f000 fa88 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011588:	b1d0      	cbz	r0, 80115c0 <ucdr_serialize_int32_t+0xd0>
 801158a:	7d23      	ldrb	r3, [r4, #20]
 801158c:	2b01      	cmp	r3, #1
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	d01c      	beq.n	80115cc <ucdr_serialize_int32_t+0xdc>
 8011592:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801159a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801159e:	7018      	strb	r0, [r3, #0]
 80115a0:	68a3      	ldr	r3, [r4, #8]
 80115a2:	705a      	strb	r2, [r3, #1]
 80115a4:	68a3      	ldr	r3, [r4, #8]
 80115a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80115aa:	7099      	strb	r1, [r3, #2]
 80115ac:	68a3      	ldr	r3, [r4, #8]
 80115ae:	70da      	strb	r2, [r3, #3]
 80115b0:	2104      	movs	r1, #4
 80115b2:	68a2      	ldr	r2, [r4, #8]
 80115b4:	6923      	ldr	r3, [r4, #16]
 80115b6:	440a      	add	r2, r1
 80115b8:	7561      	strb	r1, [r4, #21]
 80115ba:	440b      	add	r3, r1
 80115bc:	60a2      	str	r2, [r4, #8]
 80115be:	6123      	str	r3, [r4, #16]
 80115c0:	7da0      	ldrb	r0, [r4, #22]
 80115c2:	f080 0001 	eor.w	r0, r0, #1
 80115c6:	b002      	add	sp, #8
 80115c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115cc:	9a01      	ldr	r2, [sp, #4]
 80115ce:	601a      	str	r2, [r3, #0]
 80115d0:	e7ee      	b.n	80115b0 <ucdr_serialize_int32_t+0xc0>
 80115d2:	68a2      	ldr	r2, [r4, #8]
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	7da0      	ldrb	r0, [r4, #22]
 80115d8:	1b92      	subs	r2, r2, r6
 80115da:	1b9b      	subs	r3, r3, r6
 80115dc:	7567      	strb	r7, [r4, #21]
 80115de:	f080 0001 	eor.w	r0, r0, #1
 80115e2:	60a2      	str	r2, [r4, #8]
 80115e4:	6123      	str	r3, [r4, #16]
 80115e6:	b002      	add	sp, #8
 80115e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ec:	68a3      	ldr	r3, [r4, #8]
 80115ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80115f2:	701a      	strb	r2, [r3, #0]
 80115f4:	68a3      	ldr	r3, [r4, #8]
 80115f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80115fa:	701a      	strb	r2, [r3, #0]
 80115fc:	68a3      	ldr	r3, [r4, #8]
 80115fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011602:	701a      	strb	r2, [r3, #0]
 8011604:	e7ad      	b.n	8011562 <ucdr_serialize_int32_t+0x72>
 8011606:	4628      	mov	r0, r5
 8011608:	ad01      	add	r5, sp, #4
 801160a:	4632      	mov	r2, r6
 801160c:	4629      	mov	r1, r5
 801160e:	f00a fa7c 	bl	801bb0a <memcpy>
 8011612:	4642      	mov	r2, r8
 8011614:	19a9      	adds	r1, r5, r6
 8011616:	68a0      	ldr	r0, [r4, #8]
 8011618:	f00a fa77 	bl	801bb0a <memcpy>
 801161c:	e7a1      	b.n	8011562 <ucdr_serialize_int32_t+0x72>
 801161e:	bf00      	nop

08011620 <ucdr_deserialize_int32_t>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	4604      	mov	r4, r0
 8011626:	460d      	mov	r5, r1
 8011628:	2104      	movs	r1, #4
 801162a:	f000 fa89 	bl	8011b40 <ucdr_buffer_alignment>
 801162e:	4601      	mov	r1, r0
 8011630:	4620      	mov	r0, r4
 8011632:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011636:	f000 facb 	bl	8011bd0 <ucdr_advance_buffer>
 801163a:	2104      	movs	r1, #4
 801163c:	4620      	mov	r0, r4
 801163e:	f000 fa1f 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011642:	2800      	cmp	r0, #0
 8011644:	d138      	bne.n	80116b8 <ucdr_deserialize_int32_t+0x98>
 8011646:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801164a:	42b7      	cmp	r7, r6
 801164c:	d92f      	bls.n	80116ae <ucdr_deserialize_int32_t+0x8e>
 801164e:	6923      	ldr	r3, [r4, #16]
 8011650:	4620      	mov	r0, r4
 8011652:	60a7      	str	r7, [r4, #8]
 8011654:	1bbf      	subs	r7, r7, r6
 8011656:	443b      	add	r3, r7
 8011658:	f1c7 0904 	rsb	r9, r7, #4
 801165c:	6123      	str	r3, [r4, #16]
 801165e:	4649      	mov	r1, r9
 8011660:	f000 fa1a 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011664:	2800      	cmp	r0, #0
 8011666:	d046      	beq.n	80116f6 <ucdr_deserialize_int32_t+0xd6>
 8011668:	7d23      	ldrb	r3, [r4, #20]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d05c      	beq.n	8011728 <ucdr_deserialize_int32_t+0x108>
 801166e:	78f3      	ldrb	r3, [r6, #3]
 8011670:	702b      	strb	r3, [r5, #0]
 8011672:	2f00      	cmp	r7, #0
 8011674:	d04c      	beq.n	8011710 <ucdr_deserialize_int32_t+0xf0>
 8011676:	78b3      	ldrb	r3, [r6, #2]
 8011678:	2f01      	cmp	r7, #1
 801167a:	706b      	strb	r3, [r5, #1]
 801167c:	f105 0302 	add.w	r3, r5, #2
 8011680:	d04a      	beq.n	8011718 <ucdr_deserialize_int32_t+0xf8>
 8011682:	7873      	ldrb	r3, [r6, #1]
 8011684:	2f02      	cmp	r7, #2
 8011686:	70ab      	strb	r3, [r5, #2]
 8011688:	f105 0303 	add.w	r3, r5, #3
 801168c:	d048      	beq.n	8011720 <ucdr_deserialize_int32_t+0x100>
 801168e:	7833      	ldrb	r3, [r6, #0]
 8011690:	70eb      	strb	r3, [r5, #3]
 8011692:	6923      	ldr	r3, [r4, #16]
 8011694:	2104      	movs	r1, #4
 8011696:	68a2      	ldr	r2, [r4, #8]
 8011698:	3304      	adds	r3, #4
 801169a:	7da0      	ldrb	r0, [r4, #22]
 801169c:	444a      	add	r2, r9
 801169e:	7561      	strb	r1, [r4, #21]
 80116a0:	1bdb      	subs	r3, r3, r7
 80116a2:	f080 0001 	eor.w	r0, r0, #1
 80116a6:	60a2      	str	r2, [r4, #8]
 80116a8:	6123      	str	r3, [r4, #16]
 80116aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ae:	2104      	movs	r1, #4
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 f9f1 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 80116b6:	b1b0      	cbz	r0, 80116e6 <ucdr_deserialize_int32_t+0xc6>
 80116b8:	7d23      	ldrb	r3, [r4, #20]
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	68a3      	ldr	r3, [r4, #8]
 80116be:	d017      	beq.n	80116f0 <ucdr_deserialize_int32_t+0xd0>
 80116c0:	78db      	ldrb	r3, [r3, #3]
 80116c2:	702b      	strb	r3, [r5, #0]
 80116c4:	68a3      	ldr	r3, [r4, #8]
 80116c6:	789b      	ldrb	r3, [r3, #2]
 80116c8:	706b      	strb	r3, [r5, #1]
 80116ca:	68a3      	ldr	r3, [r4, #8]
 80116cc:	785b      	ldrb	r3, [r3, #1]
 80116ce:	70ab      	strb	r3, [r5, #2]
 80116d0:	68a3      	ldr	r3, [r4, #8]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	70eb      	strb	r3, [r5, #3]
 80116d6:	2104      	movs	r1, #4
 80116d8:	68a2      	ldr	r2, [r4, #8]
 80116da:	6923      	ldr	r3, [r4, #16]
 80116dc:	440a      	add	r2, r1
 80116de:	7561      	strb	r1, [r4, #21]
 80116e0:	440b      	add	r3, r1
 80116e2:	60a2      	str	r2, [r4, #8]
 80116e4:	6123      	str	r3, [r4, #16]
 80116e6:	7da0      	ldrb	r0, [r4, #22]
 80116e8:	f080 0001 	eor.w	r0, r0, #1
 80116ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	e7ef      	b.n	80116d6 <ucdr_deserialize_int32_t+0xb6>
 80116f6:	68a2      	ldr	r2, [r4, #8]
 80116f8:	6923      	ldr	r3, [r4, #16]
 80116fa:	1bd2      	subs	r2, r2, r7
 80116fc:	7da0      	ldrb	r0, [r4, #22]
 80116fe:	1bdb      	subs	r3, r3, r7
 8011700:	f884 8015 	strb.w	r8, [r4, #21]
 8011704:	f080 0001 	eor.w	r0, r0, #1
 8011708:	60a2      	str	r2, [r4, #8]
 801170a:	6123      	str	r3, [r4, #16]
 801170c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011710:	68a3      	ldr	r3, [r4, #8]
 8011712:	789b      	ldrb	r3, [r3, #2]
 8011714:	706b      	strb	r3, [r5, #1]
 8011716:	1cab      	adds	r3, r5, #2
 8011718:	68a2      	ldr	r2, [r4, #8]
 801171a:	7852      	ldrb	r2, [r2, #1]
 801171c:	f803 2b01 	strb.w	r2, [r3], #1
 8011720:	68a2      	ldr	r2, [r4, #8]
 8011722:	7812      	ldrb	r2, [r2, #0]
 8011724:	701a      	strb	r2, [r3, #0]
 8011726:	e7b4      	b.n	8011692 <ucdr_deserialize_int32_t+0x72>
 8011728:	4631      	mov	r1, r6
 801172a:	463a      	mov	r2, r7
 801172c:	4628      	mov	r0, r5
 801172e:	f00a f9ec 	bl	801bb0a <memcpy>
 8011732:	464a      	mov	r2, r9
 8011734:	19e8      	adds	r0, r5, r7
 8011736:	68a1      	ldr	r1, [r4, #8]
 8011738:	f00a f9e7 	bl	801bb0a <memcpy>
 801173c:	e7a9      	b.n	8011692 <ucdr_deserialize_int32_t+0x72>
 801173e:	bf00      	nop

08011740 <ucdr_serialize_endian_double>:
 8011740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011744:	4604      	mov	r4, r0
 8011746:	b083      	sub	sp, #12
 8011748:	460e      	mov	r6, r1
 801174a:	2108      	movs	r1, #8
 801174c:	ed8d 0b00 	vstr	d0, [sp]
 8011750:	f000 f9f6 	bl	8011b40 <ucdr_buffer_alignment>
 8011754:	4601      	mov	r1, r0
 8011756:	4620      	mov	r0, r4
 8011758:	f894 8015 	ldrb.w	r8, [r4, #21]
 801175c:	f000 fa38 	bl	8011bd0 <ucdr_advance_buffer>
 8011760:	2108      	movs	r1, #8
 8011762:	4620      	mov	r0, r4
 8011764:	f000 f98c 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011768:	2800      	cmp	r0, #0
 801176a:	d14d      	bne.n	8011808 <ucdr_serialize_endian_double+0xc8>
 801176c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8011770:	42bd      	cmp	r5, r7
 8011772:	d944      	bls.n	80117fe <ucdr_serialize_endian_double+0xbe>
 8011774:	6923      	ldr	r3, [r4, #16]
 8011776:	4620      	mov	r0, r4
 8011778:	60a5      	str	r5, [r4, #8]
 801177a:	1bed      	subs	r5, r5, r7
 801177c:	442b      	add	r3, r5
 801177e:	f1c5 0908 	rsb	r9, r5, #8
 8011782:	6123      	str	r3, [r4, #16]
 8011784:	4649      	mov	r1, r9
 8011786:	f000 f987 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801178a:	2800      	cmp	r0, #0
 801178c:	d072      	beq.n	8011874 <ucdr_serialize_endian_double+0x134>
 801178e:	2e01      	cmp	r6, #1
 8011790:	f000 809b 	beq.w	80118ca <ucdr_serialize_endian_double+0x18a>
 8011794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011798:	703b      	strb	r3, [r7, #0]
 801179a:	2d00      	cmp	r5, #0
 801179c:	d078      	beq.n	8011890 <ucdr_serialize_endian_double+0x150>
 801179e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117a2:	2d01      	cmp	r5, #1
 80117a4:	707b      	strb	r3, [r7, #1]
 80117a6:	d077      	beq.n	8011898 <ucdr_serialize_endian_double+0x158>
 80117a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117ac:	2d02      	cmp	r5, #2
 80117ae:	70bb      	strb	r3, [r7, #2]
 80117b0:	d076      	beq.n	80118a0 <ucdr_serialize_endian_double+0x160>
 80117b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117b6:	2d03      	cmp	r5, #3
 80117b8:	70fb      	strb	r3, [r7, #3]
 80117ba:	d075      	beq.n	80118a8 <ucdr_serialize_endian_double+0x168>
 80117bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80117c0:	2d04      	cmp	r5, #4
 80117c2:	713b      	strb	r3, [r7, #4]
 80117c4:	d074      	beq.n	80118b0 <ucdr_serialize_endian_double+0x170>
 80117c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80117ca:	2d05      	cmp	r5, #5
 80117cc:	717b      	strb	r3, [r7, #5]
 80117ce:	d073      	beq.n	80118b8 <ucdr_serialize_endian_double+0x178>
 80117d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80117d4:	2d06      	cmp	r5, #6
 80117d6:	71bb      	strb	r3, [r7, #6]
 80117d8:	d072      	beq.n	80118c0 <ucdr_serialize_endian_double+0x180>
 80117da:	f89d 3000 	ldrb.w	r3, [sp]
 80117de:	71fb      	strb	r3, [r7, #7]
 80117e0:	6923      	ldr	r3, [r4, #16]
 80117e2:	2108      	movs	r1, #8
 80117e4:	68a2      	ldr	r2, [r4, #8]
 80117e6:	3308      	adds	r3, #8
 80117e8:	7da0      	ldrb	r0, [r4, #22]
 80117ea:	444a      	add	r2, r9
 80117ec:	7561      	strb	r1, [r4, #21]
 80117ee:	1b5d      	subs	r5, r3, r5
 80117f0:	f080 0001 	eor.w	r0, r0, #1
 80117f4:	60a2      	str	r2, [r4, #8]
 80117f6:	6125      	str	r5, [r4, #16]
 80117f8:	b003      	add	sp, #12
 80117fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fe:	2108      	movs	r1, #8
 8011800:	4620      	mov	r0, r4
 8011802:	f000 f949 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 8011806:	b348      	cbz	r0, 801185c <ucdr_serialize_endian_double+0x11c>
 8011808:	2e01      	cmp	r6, #1
 801180a:	d02d      	beq.n	8011868 <ucdr_serialize_endian_double+0x128>
 801180c:	68a3      	ldr	r3, [r4, #8]
 801180e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011812:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011816:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801181a:	7018      	strb	r0, [r3, #0]
 801181c:	68a3      	ldr	r3, [r4, #8]
 801181e:	705a      	strb	r2, [r3, #1]
 8011820:	68a3      	ldr	r3, [r4, #8]
 8011822:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011826:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801182a:	7099      	strb	r1, [r3, #2]
 801182c:	68a3      	ldr	r3, [r4, #8]
 801182e:	70da      	strb	r2, [r3, #3]
 8011830:	68a3      	ldr	r3, [r4, #8]
 8011832:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011836:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801183a:	7118      	strb	r0, [r3, #4]
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	715a      	strb	r2, [r3, #5]
 8011840:	68a3      	ldr	r3, [r4, #8]
 8011842:	f89d 2000 	ldrb.w	r2, [sp]
 8011846:	7199      	strb	r1, [r3, #6]
 8011848:	68a3      	ldr	r3, [r4, #8]
 801184a:	71da      	strb	r2, [r3, #7]
 801184c:	2108      	movs	r1, #8
 801184e:	68a2      	ldr	r2, [r4, #8]
 8011850:	6923      	ldr	r3, [r4, #16]
 8011852:	440a      	add	r2, r1
 8011854:	7561      	strb	r1, [r4, #21]
 8011856:	440b      	add	r3, r1
 8011858:	60a2      	str	r2, [r4, #8]
 801185a:	6123      	str	r3, [r4, #16]
 801185c:	7da0      	ldrb	r0, [r4, #22]
 801185e:	f080 0001 	eor.w	r0, r0, #1
 8011862:	b003      	add	sp, #12
 8011864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011868:	466b      	mov	r3, sp
 801186a:	68a2      	ldr	r2, [r4, #8]
 801186c:	cb03      	ldmia	r3!, {r0, r1}
 801186e:	6010      	str	r0, [r2, #0]
 8011870:	6051      	str	r1, [r2, #4]
 8011872:	e7eb      	b.n	801184c <ucdr_serialize_endian_double+0x10c>
 8011874:	68a2      	ldr	r2, [r4, #8]
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	7da0      	ldrb	r0, [r4, #22]
 801187a:	1b52      	subs	r2, r2, r5
 801187c:	1b5b      	subs	r3, r3, r5
 801187e:	f884 8015 	strb.w	r8, [r4, #21]
 8011882:	f080 0001 	eor.w	r0, r0, #1
 8011886:	60a2      	str	r2, [r4, #8]
 8011888:	6123      	str	r3, [r4, #16]
 801188a:	b003      	add	sp, #12
 801188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011890:	68a3      	ldr	r3, [r4, #8]
 8011892:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011896:	701a      	strb	r2, [r3, #0]
 8011898:	68a3      	ldr	r3, [r4, #8]
 801189a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	68a3      	ldr	r3, [r4, #8]
 80118a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80118a6:	701a      	strb	r2, [r3, #0]
 80118a8:	68a3      	ldr	r3, [r4, #8]
 80118aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80118ae:	701a      	strb	r2, [r3, #0]
 80118b0:	68a3      	ldr	r3, [r4, #8]
 80118b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80118b6:	701a      	strb	r2, [r3, #0]
 80118b8:	68a3      	ldr	r3, [r4, #8]
 80118ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80118be:	701a      	strb	r2, [r3, #0]
 80118c0:	68a3      	ldr	r3, [r4, #8]
 80118c2:	f89d 2000 	ldrb.w	r2, [sp]
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e78a      	b.n	80117e0 <ucdr_serialize_endian_double+0xa0>
 80118ca:	466e      	mov	r6, sp
 80118cc:	462a      	mov	r2, r5
 80118ce:	4638      	mov	r0, r7
 80118d0:	4631      	mov	r1, r6
 80118d2:	f00a f91a 	bl	801bb0a <memcpy>
 80118d6:	464a      	mov	r2, r9
 80118d8:	1971      	adds	r1, r6, r5
 80118da:	68a0      	ldr	r0, [r4, #8]
 80118dc:	f00a f915 	bl	801bb0a <memcpy>
 80118e0:	e77e      	b.n	80117e0 <ucdr_serialize_endian_double+0xa0>
 80118e2:	bf00      	nop

080118e4 <ucdr_deserialize_endian_double>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	4604      	mov	r4, r0
 80118ea:	460f      	mov	r7, r1
 80118ec:	2108      	movs	r1, #8
 80118ee:	4615      	mov	r5, r2
 80118f0:	f000 f926 	bl	8011b40 <ucdr_buffer_alignment>
 80118f4:	4601      	mov	r1, r0
 80118f6:	4620      	mov	r0, r4
 80118f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118fc:	f000 f968 	bl	8011bd0 <ucdr_advance_buffer>
 8011900:	2108      	movs	r1, #8
 8011902:	4620      	mov	r0, r4
 8011904:	f000 f8bc 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011908:	2800      	cmp	r0, #0
 801190a:	d159      	bne.n	80119c0 <ucdr_deserialize_endian_double+0xdc>
 801190c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 8011910:	454e      	cmp	r6, r9
 8011912:	d950      	bls.n	80119b6 <ucdr_deserialize_endian_double+0xd2>
 8011914:	6923      	ldr	r3, [r4, #16]
 8011916:	4620      	mov	r0, r4
 8011918:	60a6      	str	r6, [r4, #8]
 801191a:	eba6 0609 	sub.w	r6, r6, r9
 801191e:	4433      	add	r3, r6
 8011920:	f1c6 0a08 	rsb	sl, r6, #8
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	4651      	mov	r1, sl
 8011928:	f000 f8b6 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 801192c:	2800      	cmp	r0, #0
 801192e:	d073      	beq.n	8011a18 <ucdr_deserialize_endian_double+0x134>
 8011930:	2f01      	cmp	r7, #1
 8011932:	f000 809a 	beq.w	8011a6a <ucdr_deserialize_endian_double+0x186>
 8011936:	f899 3007 	ldrb.w	r3, [r9, #7]
 801193a:	702b      	strb	r3, [r5, #0]
 801193c:	2e00      	cmp	r6, #0
 801193e:	d078      	beq.n	8011a32 <ucdr_deserialize_endian_double+0x14e>
 8011940:	f899 3006 	ldrb.w	r3, [r9, #6]
 8011944:	2e01      	cmp	r6, #1
 8011946:	706b      	strb	r3, [r5, #1]
 8011948:	f105 0302 	add.w	r3, r5, #2
 801194c:	d075      	beq.n	8011a3a <ucdr_deserialize_endian_double+0x156>
 801194e:	f899 3005 	ldrb.w	r3, [r9, #5]
 8011952:	2e02      	cmp	r6, #2
 8011954:	70ab      	strb	r3, [r5, #2]
 8011956:	f105 0303 	add.w	r3, r5, #3
 801195a:	d072      	beq.n	8011a42 <ucdr_deserialize_endian_double+0x15e>
 801195c:	f899 3004 	ldrb.w	r3, [r9, #4]
 8011960:	2e03      	cmp	r6, #3
 8011962:	70eb      	strb	r3, [r5, #3]
 8011964:	f105 0304 	add.w	r3, r5, #4
 8011968:	d06f      	beq.n	8011a4a <ucdr_deserialize_endian_double+0x166>
 801196a:	f899 3003 	ldrb.w	r3, [r9, #3]
 801196e:	2e04      	cmp	r6, #4
 8011970:	712b      	strb	r3, [r5, #4]
 8011972:	f105 0305 	add.w	r3, r5, #5
 8011976:	d06c      	beq.n	8011a52 <ucdr_deserialize_endian_double+0x16e>
 8011978:	f899 3002 	ldrb.w	r3, [r9, #2]
 801197c:	2e05      	cmp	r6, #5
 801197e:	716b      	strb	r3, [r5, #5]
 8011980:	f105 0306 	add.w	r3, r5, #6
 8011984:	d069      	beq.n	8011a5a <ucdr_deserialize_endian_double+0x176>
 8011986:	f899 3001 	ldrb.w	r3, [r9, #1]
 801198a:	2e06      	cmp	r6, #6
 801198c:	71ab      	strb	r3, [r5, #6]
 801198e:	f105 0307 	add.w	r3, r5, #7
 8011992:	d066      	beq.n	8011a62 <ucdr_deserialize_endian_double+0x17e>
 8011994:	f899 3000 	ldrb.w	r3, [r9]
 8011998:	71eb      	strb	r3, [r5, #7]
 801199a:	6923      	ldr	r3, [r4, #16]
 801199c:	2108      	movs	r1, #8
 801199e:	68a2      	ldr	r2, [r4, #8]
 80119a0:	3308      	adds	r3, #8
 80119a2:	7da0      	ldrb	r0, [r4, #22]
 80119a4:	4452      	add	r2, sl
 80119a6:	7561      	strb	r1, [r4, #21]
 80119a8:	1b9e      	subs	r6, r3, r6
 80119aa:	f080 0001 	eor.w	r0, r0, #1
 80119ae:	60a2      	str	r2, [r4, #8]
 80119b0:	6126      	str	r6, [r4, #16]
 80119b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b6:	2108      	movs	r1, #8
 80119b8:	4620      	mov	r0, r4
 80119ba:	f000 f86d 	bl	8011a98 <ucdr_check_final_buffer_behavior>
 80119be:	b308      	cbz	r0, 8011a04 <ucdr_deserialize_endian_double+0x120>
 80119c0:	2f01      	cmp	r7, #1
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	d023      	beq.n	8011a0e <ucdr_deserialize_endian_double+0x12a>
 80119c6:	79db      	ldrb	r3, [r3, #7]
 80119c8:	702b      	strb	r3, [r5, #0]
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	799b      	ldrb	r3, [r3, #6]
 80119ce:	706b      	strb	r3, [r5, #1]
 80119d0:	68a3      	ldr	r3, [r4, #8]
 80119d2:	795b      	ldrb	r3, [r3, #5]
 80119d4:	70ab      	strb	r3, [r5, #2]
 80119d6:	68a3      	ldr	r3, [r4, #8]
 80119d8:	791b      	ldrb	r3, [r3, #4]
 80119da:	70eb      	strb	r3, [r5, #3]
 80119dc:	68a3      	ldr	r3, [r4, #8]
 80119de:	78db      	ldrb	r3, [r3, #3]
 80119e0:	712b      	strb	r3, [r5, #4]
 80119e2:	68a3      	ldr	r3, [r4, #8]
 80119e4:	789b      	ldrb	r3, [r3, #2]
 80119e6:	716b      	strb	r3, [r5, #5]
 80119e8:	68a3      	ldr	r3, [r4, #8]
 80119ea:	785b      	ldrb	r3, [r3, #1]
 80119ec:	71ab      	strb	r3, [r5, #6]
 80119ee:	68a3      	ldr	r3, [r4, #8]
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	71eb      	strb	r3, [r5, #7]
 80119f4:	2108      	movs	r1, #8
 80119f6:	68a2      	ldr	r2, [r4, #8]
 80119f8:	6923      	ldr	r3, [r4, #16]
 80119fa:	440a      	add	r2, r1
 80119fc:	7561      	strb	r1, [r4, #21]
 80119fe:	440b      	add	r3, r1
 8011a00:	60a2      	str	r2, [r4, #8]
 8011a02:	6123      	str	r3, [r4, #16]
 8011a04:	7da0      	ldrb	r0, [r4, #22]
 8011a06:	f080 0001 	eor.w	r0, r0, #1
 8011a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	602a      	str	r2, [r5, #0]
 8011a14:	606b      	str	r3, [r5, #4]
 8011a16:	e7ed      	b.n	80119f4 <ucdr_deserialize_endian_double+0x110>
 8011a18:	68a2      	ldr	r2, [r4, #8]
 8011a1a:	6923      	ldr	r3, [r4, #16]
 8011a1c:	1b92      	subs	r2, r2, r6
 8011a1e:	7da0      	ldrb	r0, [r4, #22]
 8011a20:	1b9b      	subs	r3, r3, r6
 8011a22:	f884 8015 	strb.w	r8, [r4, #21]
 8011a26:	f080 0001 	eor.w	r0, r0, #1
 8011a2a:	60a2      	str	r2, [r4, #8]
 8011a2c:	6123      	str	r3, [r4, #16]
 8011a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a32:	68a3      	ldr	r3, [r4, #8]
 8011a34:	799b      	ldrb	r3, [r3, #6]
 8011a36:	706b      	strb	r3, [r5, #1]
 8011a38:	1cab      	adds	r3, r5, #2
 8011a3a:	68a2      	ldr	r2, [r4, #8]
 8011a3c:	7952      	ldrb	r2, [r2, #5]
 8011a3e:	f803 2b01 	strb.w	r2, [r3], #1
 8011a42:	68a2      	ldr	r2, [r4, #8]
 8011a44:	7912      	ldrb	r2, [r2, #4]
 8011a46:	f803 2b01 	strb.w	r2, [r3], #1
 8011a4a:	68a2      	ldr	r2, [r4, #8]
 8011a4c:	78d2      	ldrb	r2, [r2, #3]
 8011a4e:	f803 2b01 	strb.w	r2, [r3], #1
 8011a52:	68a2      	ldr	r2, [r4, #8]
 8011a54:	7892      	ldrb	r2, [r2, #2]
 8011a56:	f803 2b01 	strb.w	r2, [r3], #1
 8011a5a:	68a2      	ldr	r2, [r4, #8]
 8011a5c:	7852      	ldrb	r2, [r2, #1]
 8011a5e:	f803 2b01 	strb.w	r2, [r3], #1
 8011a62:	68a2      	ldr	r2, [r4, #8]
 8011a64:	7812      	ldrb	r2, [r2, #0]
 8011a66:	701a      	strb	r2, [r3, #0]
 8011a68:	e797      	b.n	801199a <ucdr_deserialize_endian_double+0xb6>
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	4632      	mov	r2, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f00a f84b 	bl	801bb0a <memcpy>
 8011a74:	4652      	mov	r2, sl
 8011a76:	19a8      	adds	r0, r5, r6
 8011a78:	68a1      	ldr	r1, [r4, #8]
 8011a7a:	f00a f846 	bl	801bb0a <memcpy>
 8011a7e:	e78c      	b.n	801199a <ucdr_deserialize_endian_double+0xb6>

08011a80 <ucdr_check_buffer_available_for>:
 8011a80:	7d83      	ldrb	r3, [r0, #22]
 8011a82:	b93b      	cbnz	r3, 8011a94 <ucdr_check_buffer_available_for+0x14>
 8011a84:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011a88:	4419      	add	r1, r3
 8011a8a:	4288      	cmp	r0, r1
 8011a8c:	bf34      	ite	cc
 8011a8e:	2000      	movcc	r0, #0
 8011a90:	2001      	movcs	r0, #1
 8011a92:	4770      	bx	lr
 8011a94:	2000      	movs	r0, #0
 8011a96:	4770      	bx	lr

08011a98 <ucdr_check_final_buffer_behavior>:
 8011a98:	7d83      	ldrb	r3, [r0, #22]
 8011a9a:	b943      	cbnz	r3, 8011aae <ucdr_check_final_buffer_behavior+0x16>
 8011a9c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	4291      	cmp	r1, r2
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	d205      	bcs.n	8011ab4 <ucdr_check_final_buffer_behavior+0x1c>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	4618      	mov	r0, r3
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	2300      	movs	r3, #0
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	4770      	bx	lr
 8011ab4:	6982      	ldr	r2, [r0, #24]
 8011ab6:	b13a      	cbz	r2, 8011ac8 <ucdr_check_final_buffer_behavior+0x30>
 8011ab8:	69c1      	ldr	r1, [r0, #28]
 8011aba:	4790      	blx	r2
 8011abc:	f080 0301 	eor.w	r3, r0, #1
 8011ac0:	75a0      	strb	r0, [r4, #22]
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	bd10      	pop	{r4, pc}
 8011ac8:	2001      	movs	r0, #1
 8011aca:	75a0      	strb	r0, [r4, #22]
 8011acc:	e7fa      	b.n	8011ac4 <ucdr_check_final_buffer_behavior+0x2c>
 8011ace:	bf00      	nop

08011ad0 <ucdr_set_on_full_buffer_callback>:
 8011ad0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop

08011ad8 <ucdr_init_buffer_origin_offset_endian>:
 8011ad8:	b410      	push	{r4}
 8011ada:	9c01      	ldr	r4, [sp, #4]
 8011adc:	440a      	add	r2, r1
 8011ade:	6001      	str	r1, [r0, #0]
 8011ae0:	6042      	str	r2, [r0, #4]
 8011ae2:	190a      	adds	r2, r1, r4
 8011ae4:	441c      	add	r4, r3
 8011ae6:	6082      	str	r2, [r0, #8]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011aee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011af2:	7542      	strb	r2, [r0, #21]
 8011af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011af8:	7582      	strb	r2, [r0, #22]
 8011afa:	7503      	strb	r3, [r0, #20]
 8011afc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop

08011b04 <ucdr_init_buffer_origin_offset>:
 8011b04:	b510      	push	{r4, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	9c04      	ldr	r4, [sp, #16]
 8011b0a:	9400      	str	r4, [sp, #0]
 8011b0c:	2401      	movs	r4, #1
 8011b0e:	9401      	str	r4, [sp, #4]
 8011b10:	f7ff ffe2 	bl	8011ad8 <ucdr_init_buffer_origin_offset_endian>
 8011b14:	b002      	add	sp, #8
 8011b16:	bd10      	pop	{r4, pc}

08011b18 <ucdr_init_buffer_origin>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	2400      	movs	r4, #0
 8011b1c:	b082      	sub	sp, #8
 8011b1e:	9400      	str	r4, [sp, #0]
 8011b20:	f7ff fff0 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8011b24:	b002      	add	sp, #8
 8011b26:	bd10      	pop	{r4, pc}

08011b28 <ucdr_init_buffer>:
 8011b28:	2300      	movs	r3, #0
 8011b2a:	f7ff bff5 	b.w	8011b18 <ucdr_init_buffer_origin>
 8011b2e:	bf00      	nop

08011b30 <ucdr_alignment>:
 8011b30:	fbb0 f2f1 	udiv	r2, r0, r1
 8011b34:	fb02 0011 	mls	r0, r2, r1, r0
 8011b38:	1e4b      	subs	r3, r1, #1
 8011b3a:	1a08      	subs	r0, r1, r0
 8011b3c:	4018      	ands	r0, r3
 8011b3e:	4770      	bx	lr

08011b40 <ucdr_buffer_alignment>:
 8011b40:	7d43      	ldrb	r3, [r0, #21]
 8011b42:	428b      	cmp	r3, r1
 8011b44:	d209      	bcs.n	8011b5a <ucdr_buffer_alignment+0x1a>
 8011b46:	6903      	ldr	r3, [r0, #16]
 8011b48:	1e4a      	subs	r2, r1, #1
 8011b4a:	fbb3 f0f1 	udiv	r0, r3, r1
 8011b4e:	fb01 3010 	mls	r0, r1, r0, r3
 8011b52:	1a09      	subs	r1, r1, r0
 8011b54:	ea01 0002 	and.w	r0, r1, r2
 8011b58:	4770      	bx	lr
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <ucdr_align_to>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	4604      	mov	r4, r0
 8011b64:	460d      	mov	r5, r1
 8011b66:	f7ff ffeb 	bl	8011b40 <ucdr_buffer_alignment>
 8011b6a:	68a3      	ldr	r3, [r4, #8]
 8011b6c:	7565      	strb	r5, [r4, #21]
 8011b6e:	181a      	adds	r2, r3, r0
 8011b70:	6923      	ldr	r3, [r4, #16]
 8011b72:	4418      	add	r0, r3
 8011b74:	6863      	ldr	r3, [r4, #4]
 8011b76:	4293      	cmp	r3, r2
 8011b78:	6120      	str	r0, [r4, #16]
 8011b7a:	bf28      	it	cs
 8011b7c:	4613      	movcs	r3, r2
 8011b7e:	60a3      	str	r3, [r4, #8]
 8011b80:	bd38      	pop	{r3, r4, r5, pc}
 8011b82:	bf00      	nop

08011b84 <ucdr_buffer_length>:
 8011b84:	6882      	ldr	r2, [r0, #8]
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	1a10      	subs	r0, r2, r0
 8011b8a:	4770      	bx	lr

08011b8c <ucdr_buffer_remaining>:
 8011b8c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011b90:	1a10      	subs	r0, r2, r0
 8011b92:	4770      	bx	lr

08011b94 <ucdr_check_final_buffer_behavior_array>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	7d83      	ldrb	r3, [r0, #22]
 8011b98:	b9a3      	cbnz	r3, 8011bc4 <ucdr_check_final_buffer_behavior_array+0x30>
 8011b9a:	4604      	mov	r4, r0
 8011b9c:	460d      	mov	r5, r1
 8011b9e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d300      	bcc.n	8011ba8 <ucdr_check_final_buffer_behavior_array+0x14>
 8011ba6:	b931      	cbnz	r1, 8011bb6 <ucdr_check_final_buffer_behavior_array+0x22>
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f7ff ffef 	bl	8011b8c <ucdr_buffer_remaining>
 8011bae:	42a8      	cmp	r0, r5
 8011bb0:	bf28      	it	cs
 8011bb2:	4628      	movcs	r0, r5
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	6983      	ldr	r3, [r0, #24]
 8011bb8:	b133      	cbz	r3, 8011bc8 <ucdr_check_final_buffer_behavior_array+0x34>
 8011bba:	69c1      	ldr	r1, [r0, #28]
 8011bbc:	4798      	blx	r3
 8011bbe:	75a0      	strb	r0, [r4, #22]
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d0f1      	beq.n	8011ba8 <ucdr_check_final_buffer_behavior_array+0x14>
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	bd38      	pop	{r3, r4, r5, pc}
 8011bc8:	2301      	movs	r3, #1
 8011bca:	7583      	strb	r3, [r0, #22]
 8011bcc:	e7fa      	b.n	8011bc4 <ucdr_check_final_buffer_behavior_array+0x30>
 8011bce:	bf00      	nop

08011bd0 <ucdr_advance_buffer>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	460d      	mov	r5, r1
 8011bd6:	f7ff ff53 	bl	8011a80 <ucdr_check_buffer_available_for>
 8011bda:	b178      	cbz	r0, 8011bfc <ucdr_advance_buffer+0x2c>
 8011bdc:	6923      	ldr	r3, [r4, #16]
 8011bde:	68a2      	ldr	r2, [r4, #8]
 8011be0:	442b      	add	r3, r5
 8011be2:	442a      	add	r2, r5
 8011be4:	6123      	str	r3, [r4, #16]
 8011be6:	2301      	movs	r3, #1
 8011be8:	60a2      	str	r2, [r4, #8]
 8011bea:	7563      	strb	r3, [r4, #21]
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	68a2      	ldr	r2, [r4, #8]
 8011bf0:	1a2d      	subs	r5, r5, r0
 8011bf2:	6923      	ldr	r3, [r4, #16]
 8011bf4:	4402      	add	r2, r0
 8011bf6:	4418      	add	r0, r3
 8011bf8:	60a2      	str	r2, [r4, #8]
 8011bfa:	6120      	str	r0, [r4, #16]
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	2201      	movs	r2, #1
 8011c00:	4620      	mov	r0, r4
 8011c02:	f7ff ffc7 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d1f1      	bne.n	8011bee <ucdr_advance_buffer+0x1e>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	7563      	strb	r3, [r4, #21]
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}

08011c10 <ucdr_serialize_sequence_char>:
 8011c10:	b570      	push	{r4, r5, r6, lr}
 8011c12:	4615      	mov	r5, r2
 8011c14:	460e      	mov	r6, r1
 8011c16:	7d01      	ldrb	r1, [r0, #20]
 8011c18:	4604      	mov	r4, r0
 8011c1a:	f7ff f8e7 	bl	8010dec <ucdr_serialize_endian_uint32_t>
 8011c1e:	b90d      	cbnz	r5, 8011c24 <ucdr_serialize_sequence_char+0x14>
 8011c20:	2001      	movs	r0, #1
 8011c22:	bd70      	pop	{r4, r5, r6, pc}
 8011c24:	462b      	mov	r3, r5
 8011c26:	4632      	mov	r2, r6
 8011c28:	7d21      	ldrb	r1, [r4, #20]
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c30:	f007 be58 	b.w	80198e4 <ucdr_serialize_endian_array_char>

08011c34 <ucdr_deserialize_sequence_char>:
 8011c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c38:	461d      	mov	r5, r3
 8011c3a:	4616      	mov	r6, r2
 8011c3c:	460f      	mov	r7, r1
 8011c3e:	461a      	mov	r2, r3
 8011c40:	7d01      	ldrb	r1, [r0, #20]
 8011c42:	4604      	mov	r4, r0
 8011c44:	f7ff f9fa 	bl	801103c <ucdr_deserialize_endian_uint32_t>
 8011c48:	682b      	ldr	r3, [r5, #0]
 8011c4a:	429e      	cmp	r6, r3
 8011c4c:	d201      	bcs.n	8011c52 <ucdr_deserialize_sequence_char+0x1e>
 8011c4e:	2201      	movs	r2, #1
 8011c50:	75a2      	strb	r2, [r4, #22]
 8011c52:	b913      	cbnz	r3, 8011c5a <ucdr_deserialize_sequence_char+0x26>
 8011c54:	2001      	movs	r0, #1
 8011c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5a:	463a      	mov	r2, r7
 8011c5c:	7d21      	ldrb	r1, [r4, #20]
 8011c5e:	4620      	mov	r0, r4
 8011c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c64:	f007 be70 	b.w	8019948 <ucdr_deserialize_endian_array_char>

08011c68 <ucdr_serialize_sequence_uint8_t>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	4615      	mov	r5, r2
 8011c6c:	460e      	mov	r6, r1
 8011c6e:	7d01      	ldrb	r1, [r0, #20]
 8011c70:	4604      	mov	r4, r0
 8011c72:	f7ff f8bb 	bl	8010dec <ucdr_serialize_endian_uint32_t>
 8011c76:	b90d      	cbnz	r5, 8011c7c <ucdr_serialize_sequence_uint8_t+0x14>
 8011c78:	2001      	movs	r0, #1
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
 8011c7c:	462b      	mov	r3, r5
 8011c7e:	4632      	mov	r2, r6
 8011c80:	7d21      	ldrb	r1, [r4, #20]
 8011c82:	4620      	mov	r0, r4
 8011c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c88:	f007 bec4 	b.w	8019a14 <ucdr_serialize_endian_array_uint8_t>

08011c8c <ucdr_deserialize_sequence_uint8_t>:
 8011c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c90:	461d      	mov	r5, r3
 8011c92:	4616      	mov	r6, r2
 8011c94:	460f      	mov	r7, r1
 8011c96:	461a      	mov	r2, r3
 8011c98:	7d01      	ldrb	r1, [r0, #20]
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	f7ff f9ce 	bl	801103c <ucdr_deserialize_endian_uint32_t>
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	429e      	cmp	r6, r3
 8011ca4:	d201      	bcs.n	8011caa <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	75a2      	strb	r2, [r4, #22]
 8011caa:	b913      	cbnz	r3, 8011cb2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011cac:	2001      	movs	r0, #1
 8011cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb2:	463a      	mov	r2, r7
 8011cb4:	7d21      	ldrb	r1, [r4, #20]
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	f007 bf10 	b.w	8019ae0 <ucdr_deserialize_endian_array_uint8_t>

08011cc0 <ucdr_serialize_sequence_double>:
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	4615      	mov	r5, r2
 8011cc4:	460e      	mov	r6, r1
 8011cc6:	7d01      	ldrb	r1, [r0, #20]
 8011cc8:	4604      	mov	r4, r0
 8011cca:	f7ff f88f 	bl	8010dec <ucdr_serialize_endian_uint32_t>
 8011cce:	b90d      	cbnz	r5, 8011cd4 <ucdr_serialize_sequence_double+0x14>
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	462b      	mov	r3, r5
 8011cd6:	4632      	mov	r2, r6
 8011cd8:	7d21      	ldrb	r1, [r4, #20]
 8011cda:	4620      	mov	r0, r4
 8011cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ce0:	f007 bf32 	b.w	8019b48 <ucdr_serialize_endian_array_double>

08011ce4 <ucdr_deserialize_sequence_double>:
 8011ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce8:	461d      	mov	r5, r3
 8011cea:	4616      	mov	r6, r2
 8011cec:	460f      	mov	r7, r1
 8011cee:	461a      	mov	r2, r3
 8011cf0:	7d01      	ldrb	r1, [r0, #20]
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	f7ff f9a2 	bl	801103c <ucdr_deserialize_endian_uint32_t>
 8011cf8:	682b      	ldr	r3, [r5, #0]
 8011cfa:	429e      	cmp	r6, r3
 8011cfc:	d201      	bcs.n	8011d02 <ucdr_deserialize_sequence_double+0x1e>
 8011cfe:	2201      	movs	r2, #1
 8011d00:	75a2      	strb	r2, [r4, #22]
 8011d02:	b913      	cbnz	r3, 8011d0a <ucdr_deserialize_sequence_double+0x26>
 8011d04:	2001      	movs	r0, #1
 8011d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0a:	463a      	mov	r2, r7
 8011d0c:	7d21      	ldrb	r1, [r4, #20]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	f007 bf6c 	b.w	8019bf0 <ucdr_deserialize_endian_array_double>

08011d18 <uxr_buffer_delete_entity>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	b08e      	sub	sp, #56	@ 0x38
 8011d1e:	4604      	mov	r4, r0
 8011d20:	9103      	str	r1, [sp, #12]
 8011d22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011d26:	2303      	movs	r3, #3
 8011d28:	2204      	movs	r2, #4
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	ab06      	add	r3, sp, #24
 8011d2e:	f001 fab1 	bl	8013294 <uxr_prepare_stream_to_write_submessage>
 8011d32:	b918      	cbnz	r0, 8011d3c <uxr_buffer_delete_entity+0x24>
 8011d34:	4604      	mov	r4, r0
 8011d36:	4620      	mov	r0, r4
 8011d38:	b00e      	add	sp, #56	@ 0x38
 8011d3a:	bd10      	pop	{r4, pc}
 8011d3c:	9902      	ldr	r1, [sp, #8]
 8011d3e:	aa05      	add	r2, sp, #20
 8011d40:	4620      	mov	r0, r4
 8011d42:	f001 fbe3 	bl	801350c <uxr_init_base_object_request>
 8011d46:	4604      	mov	r4, r0
 8011d48:	a905      	add	r1, sp, #20
 8011d4a:	a806      	add	r0, sp, #24
 8011d4c:	f003 f9c8 	bl	80150e0 <uxr_serialize_DELETE_Payload>
 8011d50:	4620      	mov	r0, r4
 8011d52:	b00e      	add	sp, #56	@ 0x38
 8011d54:	bd10      	pop	{r4, pc}
 8011d56:	bf00      	nop

08011d58 <uxr_common_create_entity>:
 8011d58:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	f1bc 0f01 	cmp.w	ip, #1
 8011d62:	b08c      	sub	sp, #48	@ 0x30
 8011d64:	4604      	mov	r4, r0
 8011d66:	9202      	str	r2, [sp, #8]
 8011d68:	bf0c      	ite	eq
 8011d6a:	f003 0201 	andeq.w	r2, r3, #1
 8011d6e:	2200      	movne	r2, #0
 8011d70:	330e      	adds	r3, #14
 8011d72:	9103      	str	r1, [sp, #12]
 8011d74:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8011d78:	441a      	add	r2, r3
 8011d7a:	ab04      	add	r3, sp, #16
 8011d7c:	9101      	str	r1, [sp, #4]
 8011d7e:	2101      	movs	r1, #1
 8011d80:	b292      	uxth	r2, r2
 8011d82:	9100      	str	r1, [sp, #0]
 8011d84:	9903      	ldr	r1, [sp, #12]
 8011d86:	f001 fa85 	bl	8013294 <uxr_prepare_stream_to_write_submessage>
 8011d8a:	b918      	cbnz	r0, 8011d94 <uxr_common_create_entity+0x3c>
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	4620      	mov	r0, r4
 8011d90:	b00c      	add	sp, #48	@ 0x30
 8011d92:	bd10      	pop	{r4, pc}
 8011d94:	9902      	ldr	r1, [sp, #8]
 8011d96:	4620      	mov	r0, r4
 8011d98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011d9a:	f001 fbb7 	bl	801350c <uxr_init_base_object_request>
 8011d9e:	4604      	mov	r4, r0
 8011da0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011da2:	a804      	add	r0, sp, #16
 8011da4:	f003 f8f6 	bl	8014f94 <uxr_serialize_CREATE_Payload>
 8011da8:	4620      	mov	r0, r4
 8011daa:	b00c      	add	sp, #48	@ 0x30
 8011dac:	bd10      	pop	{r4, pc}
 8011dae:	bf00      	nop

08011db0 <uxr_buffer_create_participant_bin>:
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8011db6:	4605      	mov	r5, r0
 8011db8:	ac11      	add	r4, sp, #68	@ 0x44
 8011dba:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011dbe:	2303      	movs	r3, #3
 8011dc0:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8011dc4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011dc8:	7223      	strb	r3, [r4, #8]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f88d 3014 	strb.w	r3, [sp, #20]
 8011dd2:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8011dd4:	7122      	strb	r2, [r4, #4]
 8011dd6:	b1cb      	cbz	r3, 8011e0c <uxr_buffer_create_participant_bin+0x5c>
 8011dd8:	f88d 201c 	strb.w	r2, [sp, #28]
 8011ddc:	9308      	str	r3, [sp, #32]
 8011dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011de2:	a915      	add	r1, sp, #84	@ 0x54
 8011de4:	a809      	add	r0, sp, #36	@ 0x24
 8011de6:	f7ff fe9f 	bl	8011b28 <ucdr_init_buffer>
 8011dea:	a905      	add	r1, sp, #20
 8011dec:	a809      	add	r0, sp, #36	@ 0x24
 8011dee:	f002 fda7 	bl	8014940 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011df4:	9600      	str	r6, [sp, #0]
 8011df6:	4628      	mov	r0, r5
 8011df8:	9401      	str	r4, [sp, #4]
 8011dfa:	60e3      	str	r3, [r4, #12]
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011e02:	f7ff ffa9 	bl	8011d58 <uxr_common_create_entity>
 8011e06:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e10:	e7e5      	b.n	8011dde <uxr_buffer_create_participant_bin+0x2e>
 8011e12:	bf00      	nop

08011e14 <uxr_buffer_create_topic_bin>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	9105      	str	r1, [sp, #20]
 8011e20:	a997      	add	r1, sp, #604	@ 0x25c
 8011e22:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8011e26:	ac13      	add	r4, sp, #76	@ 0x4c
 8011e28:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011e2c:	2302      	movs	r3, #2
 8011e2e:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8011e32:	f000 f9ab 	bl	801218c <uxr_object_id_to_raw>
 8011e36:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8011e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e3c:	a917      	add	r1, sp, #92	@ 0x5c
 8011e3e:	a80b      	add	r0, sp, #44	@ 0x2c
 8011e40:	9306      	str	r3, [sp, #24]
 8011e42:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e46:	2303      	movs	r3, #3
 8011e48:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011e52:	2300      	movs	r3, #0
 8011e54:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e58:	f7ff fe66 	bl	8011b28 <ucdr_init_buffer>
 8011e5c:	a906      	add	r1, sp, #24
 8011e5e:	a80b      	add	r0, sp, #44	@ 0x2c
 8011e60:	f002 fd90 	bl	8014984 <uxr_serialize_OBJK_Topic_Binary>
 8011e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e66:	4628      	mov	r0, r5
 8011e68:	9600      	str	r6, [sp, #0]
 8011e6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	9401      	str	r4, [sp, #4]
 8011e70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e74:	f7ff ff70 	bl	8011d58 <uxr_common_create_entity>
 8011e78:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011e7c:	bd70      	pop	{r4, r5, r6, pc}
 8011e7e:	bf00      	nop

08011e80 <uxr_buffer_create_publisher_bin>:
 8011e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e82:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8011e86:	2603      	movs	r6, #3
 8011e88:	4605      	mov	r5, r0
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	9105      	str	r1, [sp, #20]
 8011e8e:	a992      	add	r1, sp, #584	@ 0x248
 8011e90:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011e94:	ac0e      	add	r4, sp, #56	@ 0x38
 8011e96:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011e9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011e9e:	f000 f975 	bl	801218c <uxr_object_id_to_raw>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ea8:	a912      	add	r1, sp, #72	@ 0x48
 8011eaa:	a806      	add	r0, sp, #24
 8011eac:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011eb0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011eb4:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8011eb8:	f7ff fe36 	bl	8011b28 <ucdr_init_buffer>
 8011ebc:	a993      	add	r1, sp, #588	@ 0x24c
 8011ebe:	a806      	add	r0, sp, #24
 8011ec0:	f002 fe14 	bl	8014aec <uxr_serialize_OBJK_Publisher_Binary>
 8011ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ec6:	4628      	mov	r0, r5
 8011ec8:	9700      	str	r7, [sp, #0]
 8011eca:	9311      	str	r3, [sp, #68]	@ 0x44
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	9401      	str	r4, [sp, #4]
 8011ed0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011ed4:	f7ff ff40 	bl	8011d58 <uxr_common_create_entity>
 8011ed8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ede:	bf00      	nop

08011ee0 <uxr_buffer_create_datawriter_bin>:
 8011ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011ee8:	4606      	mov	r6, r0
 8011eea:	4618      	mov	r0, r3
 8011eec:	2703      	movs	r7, #3
 8011eee:	ac1d      	add	r4, sp, #116	@ 0x74
 8011ef0:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8011ef4:	9105      	str	r1, [sp, #20]
 8011ef6:	a9a1      	add	r1, sp, #644	@ 0x284
 8011ef8:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8011efc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011f00:	2305      	movs	r3, #5
 8011f02:	7123      	strb	r3, [r4, #4]
 8011f04:	f000 f942 	bl	801218c <uxr_object_id_to_raw>
 8011f08:	a90e      	add	r1, sp, #56	@ 0x38
 8011f0a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8011f0c:	7227      	strb	r7, [r4, #8]
 8011f0e:	f000 f93d 	bl	801218c <uxr_object_id_to_raw>
 8011f12:	2300      	movs	r3, #0
 8011f14:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8011f18:	3d00      	subs	r5, #0
 8011f1a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8011f1e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011f22:	bf18      	it	ne
 8011f24:	2501      	movne	r5, #1
 8011f26:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011f2a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011f2e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011f32:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011f36:	2301      	movs	r3, #1
 8011f38:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011f3c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011f40:	bb8a      	cbnz	r2, 8011fa6 <uxr_buffer_create_datawriter_bin+0xc6>
 8011f42:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011f46:	f04f 0c13 	mov.w	ip, #19
 8011f4a:	250b      	movs	r5, #11
 8011f4c:	2221      	movs	r2, #33	@ 0x21
 8011f4e:	2111      	movs	r1, #17
 8011f50:	2009      	movs	r0, #9
 8011f52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011f56:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011f5a:	b923      	cbnz	r3, 8011f66 <uxr_buffer_create_datawriter_bin+0x86>
 8011f5c:	4672      	mov	r2, lr
 8011f5e:	4661      	mov	r1, ip
 8011f60:	4628      	mov	r0, r5
 8011f62:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011f66:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d025      	beq.n	8011fba <uxr_buffer_create_datawriter_bin+0xda>
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d029      	beq.n	8011fc6 <uxr_buffer_create_datawriter_bin+0xe6>
 8011f72:	b32b      	cbz	r3, 8011fc0 <uxr_buffer_create_datawriter_bin+0xe0>
 8011f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f78:	a921      	add	r1, sp, #132	@ 0x84
 8011f7a:	a806      	add	r0, sp, #24
 8011f7c:	f7ff fdd4 	bl	8011b28 <ucdr_init_buffer>
 8011f80:	a90e      	add	r1, sp, #56	@ 0x38
 8011f82:	a806      	add	r0, sp, #24
 8011f84:	f002 fe28 	bl	8014bd8 <uxr_serialize_OBJK_DataWriter_Binary>
 8011f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f8a:	f8cd 8000 	str.w	r8, [sp]
 8011f8e:	4630      	mov	r0, r6
 8011f90:	9401      	str	r4, [sp, #4]
 8011f92:	60e3      	str	r3, [r4, #12]
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011f9a:	f7ff fedd 	bl	8011d58 <uxr_common_create_entity>
 8011f9e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011faa:	f04f 0c12 	mov.w	ip, #18
 8011fae:	250a      	movs	r5, #10
 8011fb0:	2220      	movs	r2, #32
 8011fb2:	2110      	movs	r1, #16
 8011fb4:	2008      	movs	r0, #8
 8011fb6:	2702      	movs	r7, #2
 8011fb8:	e7cd      	b.n	8011f56 <uxr_buffer_create_datawriter_bin+0x76>
 8011fba:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011fbe:	e7d9      	b.n	8011f74 <uxr_buffer_create_datawriter_bin+0x94>
 8011fc0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011fc4:	e7d6      	b.n	8011f74 <uxr_buffer_create_datawriter_bin+0x94>
 8011fc6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011fca:	e7d3      	b.n	8011f74 <uxr_buffer_create_datawriter_bin+0x94>

08011fcc <get_custom_error>:
 8011fcc:	4b01      	ldr	r3, [pc, #4]	@ (8011fd4 <get_custom_error+0x8>)
 8011fce:	7818      	ldrb	r0, [r3, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	24012de4 	.word	0x24012de4

08011fd8 <recv_custom_msg>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	4693      	mov	fp, r2
 8011fde:	b089      	sub	sp, #36	@ 0x24
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	468a      	mov	sl, r1
 8011fe6:	9305      	str	r3, [sp, #20]
 8011fe8:	f88d 201e 	strb.w	r2, [sp, #30]
 8011fec:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011ff0:	b322      	cbz	r2, 801203c <recv_custom_msg+0x64>
 8011ff2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8011ff6:	f10d 081f 	add.w	r8, sp, #31
 8011ffa:	af05      	add	r7, sp, #20
 8011ffc:	f10d 061e 	add.w	r6, sp, #30
 8012000:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8012004:	e002      	b.n	801200c <recv_custom_msg+0x34>
 8012006:	9b05      	ldr	r3, [sp, #20]
 8012008:	2b00      	cmp	r3, #0
 801200a:	dd0f      	ble.n	801202c <recv_custom_msg+0x54>
 801200c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012010:	4623      	mov	r3, r4
 8012012:	4622      	mov	r2, r4
 8012014:	4648      	mov	r0, r9
 8012016:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801201a:	e9cd 5600 	strd	r5, r6, [sp]
 801201e:	f001 fc8b 	bl	8013938 <uxr_read_framed_msg>
 8012022:	2800      	cmp	r0, #0
 8012024:	d0ef      	beq.n	8012006 <recv_custom_msg+0x2e>
 8012026:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801202a:	b1b3      	cbz	r3, 801205a <recv_custom_msg+0x82>
 801202c:	4b0f      	ldr	r3, [pc, #60]	@ (801206c <recv_custom_msg+0x94>)
 801202e:	2000      	movs	r0, #0
 8012030:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	b009      	add	sp, #36	@ 0x24
 8012038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203c:	f10d 021f 	add.w	r2, sp, #31
 8012040:	4601      	mov	r1, r0
 8012042:	9200      	str	r2, [sp, #0]
 8012044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012048:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801204c:	47a8      	blx	r5
 801204e:	2800      	cmp	r0, #0
 8012050:	d0ec      	beq.n	801202c <recv_custom_msg+0x54>
 8012052:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1e8      	bne.n	801202c <recv_custom_msg+0x54>
 801205a:	f8cb 0000 	str.w	r0, [fp]
 801205e:	2001      	movs	r0, #1
 8012060:	f8ca 4000 	str.w	r4, [sl]
 8012064:	b009      	add	sp, #36	@ 0x24
 8012066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206a:	bf00      	nop
 801206c:	24012de4 	.word	0x24012de4

08012070 <send_custom_msg>:
 8012070:	b530      	push	{r4, r5, lr}
 8012072:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8012076:	b087      	sub	sp, #28
 8012078:	4614      	mov	r4, r2
 801207a:	b995      	cbnz	r5, 80120a2 <send_custom_msg+0x32>
 801207c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8012080:	f10d 0317 	add.w	r3, sp, #23
 8012084:	47a8      	blx	r5
 8012086:	1e03      	subs	r3, r0, #0
 8012088:	bf18      	it	ne
 801208a:	2301      	movne	r3, #1
 801208c:	42a0      	cmp	r0, r4
 801208e:	bf18      	it	ne
 8012090:	2300      	movne	r3, #0
 8012092:	b91b      	cbnz	r3, 801209c <send_custom_msg+0x2c>
 8012094:	4a0a      	ldr	r2, [pc, #40]	@ (80120c0 <send_custom_msg+0x50>)
 8012096:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801209a:	7011      	strb	r1, [r2, #0]
 801209c:	4618      	mov	r0, r3
 801209e:	b007      	add	sp, #28
 80120a0:	bd30      	pop	{r4, r5, pc}
 80120a2:	460b      	mov	r3, r1
 80120a4:	2200      	movs	r2, #0
 80120a6:	f10d 0117 	add.w	r1, sp, #23
 80120aa:	9400      	str	r4, [sp, #0]
 80120ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80120b0:	4602      	mov	r2, r0
 80120b2:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80120b6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80120ba:	f001 fa5f 	bl	801357c <uxr_write_framed_msg>
 80120be:	e7e2      	b.n	8012086 <send_custom_msg+0x16>
 80120c0:	24012de4 	.word	0x24012de4

080120c4 <uxr_set_custom_transport_callbacks>:
 80120c4:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80120c8:	9901      	ldr	r1, [sp, #4]
 80120ca:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80120ce:	9b00      	ldr	r3, [sp, #0]
 80120d0:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop

080120d8 <uxr_init_custom_transport>:
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80120de:	b303      	cbz	r3, 8012122 <uxr_init_custom_transport+0x4a>
 80120e0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80120e4:	4604      	mov	r4, r0
 80120e6:	b1e2      	cbz	r2, 8012122 <uxr_init_custom_transport+0x4a>
 80120e8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80120ec:	b1ca      	cbz	r2, 8012122 <uxr_init_custom_transport+0x4a>
 80120ee:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80120f2:	b1b2      	cbz	r2, 8012122 <uxr_init_custom_transport+0x4a>
 80120f4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80120f8:	4798      	blx	r3
 80120fa:	4605      	mov	r5, r0
 80120fc:	b188      	cbz	r0, 8012122 <uxr_init_custom_transport+0x4a>
 80120fe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012102:	b98b      	cbnz	r3, 8012128 <uxr_init_custom_transport+0x50>
 8012104:	4b0b      	ldr	r3, [pc, #44]	@ (8012134 <uxr_init_custom_transport+0x5c>)
 8012106:	4628      	mov	r0, r5
 8012108:	490b      	ldr	r1, [pc, #44]	@ (8012138 <uxr_init_custom_transport+0x60>)
 801210a:	4a0c      	ldr	r2, [pc, #48]	@ (801213c <uxr_init_custom_transport+0x64>)
 801210c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012114:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012118:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801211c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012120:	bd38      	pop	{r3, r4, r5, pc}
 8012122:	2500      	movs	r5, #0
 8012124:	4628      	mov	r0, r5
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	2100      	movs	r1, #0
 801212a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801212e:	f001 fa1f 	bl	8013570 <uxr_init_framing_io>
 8012132:	e7e7      	b.n	8012104 <uxr_init_custom_transport+0x2c>
 8012134:	08011fd9 	.word	0x08011fd9
 8012138:	08012071 	.word	0x08012071
 801213c:	08011fcd 	.word	0x08011fcd

08012140 <uxr_close_custom_transport>:
 8012140:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012144:	4718      	bx	r3
 8012146:	bf00      	nop

08012148 <uxr_object_id>:
 8012148:	b082      	sub	sp, #8
 801214a:	2300      	movs	r3, #0
 801214c:	f88d 1006 	strb.w	r1, [sp, #6]
 8012150:	f360 030f 	bfi	r3, r0, #0, #16
 8012154:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012158:	f362 431f 	bfi	r3, r2, #16, #16
 801215c:	4618      	mov	r0, r3
 801215e:	b002      	add	sp, #8
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop

08012164 <uxr_object_id_from_raw>:
 8012164:	7843      	ldrb	r3, [r0, #1]
 8012166:	b082      	sub	sp, #8
 8012168:	7801      	ldrb	r1, [r0, #0]
 801216a:	2000      	movs	r0, #0
 801216c:	091a      	lsrs	r2, r3, #4
 801216e:	f003 030f 	and.w	r3, r3, #15
 8012172:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8012176:	f88d 3006 	strb.w	r3, [sp, #6]
 801217a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801217e:	f362 000f 	bfi	r0, r2, #0, #16
 8012182:	f363 401f 	bfi	r0, r3, #16, #16
 8012186:	b002      	add	sp, #8
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop

0801218c <uxr_object_id_to_raw>:
 801218c:	4602      	mov	r2, r0
 801218e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8012192:	b082      	sub	sp, #8
 8012194:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012198:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801219c:	f881 c000 	strb.w	ip, [r1]
 80121a0:	7048      	strb	r0, [r1, #1]
 80121a2:	b002      	add	sp, #8
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop

080121a8 <uxr_buffer_cancel_data>:
 80121a8:	b510      	push	{r4, lr}
 80121aa:	2300      	movs	r3, #0
 80121ac:	b094      	sub	sp, #80	@ 0x50
 80121ae:	4604      	mov	r4, r0
 80121b0:	9205      	str	r2, [sp, #20]
 80121b2:	9301      	str	r3, [sp, #4]
 80121b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80121b8:	f88d 301e 	strb.w	r3, [sp, #30]
 80121bc:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80121c0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80121c4:	2308      	movs	r3, #8
 80121c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80121ca:	2201      	movs	r2, #1
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80121d0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80121d4:	2210      	movs	r2, #16
 80121d6:	f001 f85d 	bl	8013294 <uxr_prepare_stream_to_write_submessage>
 80121da:	b918      	cbnz	r0, 80121e4 <uxr_buffer_cancel_data+0x3c>
 80121dc:	4604      	mov	r4, r0
 80121de:	4620      	mov	r0, r4
 80121e0:	b014      	add	sp, #80	@ 0x50
 80121e2:	bd10      	pop	{r4, pc}
 80121e4:	9905      	ldr	r1, [sp, #20]
 80121e6:	aa06      	add	r2, sp, #24
 80121e8:	4620      	mov	r0, r4
 80121ea:	f001 f98f 	bl	801350c <uxr_init_base_object_request>
 80121ee:	4604      	mov	r4, r0
 80121f0:	a906      	add	r1, sp, #24
 80121f2:	a80c      	add	r0, sp, #48	@ 0x30
 80121f4:	f003 f81e 	bl	8015234 <uxr_serialize_READ_DATA_Payload>
 80121f8:	4620      	mov	r0, r4
 80121fa:	b014      	add	sp, #80	@ 0x50
 80121fc:	bd10      	pop	{r4, pc}
 80121fe:	bf00      	nop

08012200 <read_submessage_format>:
 8012200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012204:	b095      	sub	sp, #84	@ 0x54
 8012206:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801220a:	b113      	cbz	r3, 8012212 <read_submessage_format+0x12>
 801220c:	b015      	add	sp, #84	@ 0x54
 801220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012212:	4606      	mov	r6, r0
 8012214:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012216:	460c      	mov	r4, r1
 8012218:	4615      	mov	r5, r2
 801221a:	9004      	str	r0, [sp, #16]
 801221c:	4699      	mov	r9, r3
 801221e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012220:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8012224:	9005      	str	r0, [sp, #20]
 8012226:	a80c      	add	r0, sp, #48	@ 0x30
 8012228:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801222c:	1a52      	subs	r2, r2, r1
 801222e:	f7ff fc7b 	bl	8011b28 <ucdr_init_buffer>
 8012232:	a80c      	add	r0, sp, #48	@ 0x30
 8012234:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012238:	f7ff fc4a 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 801223c:	69e2      	ldr	r2, [r4, #28]
 801223e:	b19a      	cbz	r2, 8012268 <read_submessage_format+0x68>
 8012240:	f1b8 0f07 	cmp.w	r8, #7
 8012244:	f882 9014 	strb.w	r9, [r2, #20]
 8012248:	d040      	beq.n	80122cc <read_submessage_format+0xcc>
 801224a:	f1b8 0f08 	cmp.w	r8, #8
 801224e:	d02e      	beq.n	80122ae <read_submessage_format+0xae>
 8012250:	f1b8 0f06 	cmp.w	r8, #6
 8012254:	d011      	beq.n	801227a <read_submessage_format+0x7a>
 8012256:	2301      	movs	r3, #1
 8012258:	7513      	strb	r3, [r2, #20]
 801225a:	4629      	mov	r1, r5
 801225c:	4620      	mov	r0, r4
 801225e:	f7ff fcb7 	bl	8011bd0 <ucdr_advance_buffer>
 8012262:	b015      	add	sp, #84	@ 0x54
 8012264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012268:	f1b8 0f07 	cmp.w	r8, #7
 801226c:	d02e      	beq.n	80122cc <read_submessage_format+0xcc>
 801226e:	f1b8 0f08 	cmp.w	r8, #8
 8012272:	d01c      	beq.n	80122ae <read_submessage_format+0xae>
 8012274:	f1b8 0f06 	cmp.w	r8, #6
 8012278:	d1ef      	bne.n	801225a <read_submessage_format+0x5a>
 801227a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801227e:	f1b8 0f00 	cmp.w	r8, #0
 8012282:	d011      	beq.n	80122a8 <read_submessage_format+0xa8>
 8012284:	ab0c      	add	r3, sp, #48	@ 0x30
 8012286:	9501      	str	r5, [sp, #4]
 8012288:	463a      	mov	r2, r7
 801228a:	4630      	mov	r0, r6
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	2306      	movs	r3, #6
 8012290:	f88d 3016 	strb.w	r3, [sp, #22]
 8012294:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8012298:	9302      	str	r3, [sp, #8]
 801229a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801229e:	47c0      	blx	r8
 80122a0:	2301      	movs	r3, #1
 80122a2:	69e2      	ldr	r2, [r4, #28]
 80122a4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80122a8:	2a00      	cmp	r2, #0
 80122aa:	d1d4      	bne.n	8012256 <read_submessage_format+0x56>
 80122ac:	e7d5      	b.n	801225a <read_submessage_format+0x5a>
 80122ae:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d0f8      	beq.n	80122a8 <read_submessage_format+0xa8>
 80122b6:	a80c      	add	r0, sp, #48	@ 0x30
 80122b8:	a906      	add	r1, sp, #24
 80122ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80122be:	f003 f893 	bl	80153e8 <uxr_deserialize_SampleIdentity>
 80122c2:	b9a0      	cbnz	r0, 80122ee <read_submessage_format+0xee>
 80122c4:	69e2      	ldr	r2, [r4, #28]
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	d1c5      	bne.n	8012256 <read_submessage_format+0x56>
 80122ca:	e7c6      	b.n	801225a <read_submessage_format+0x5a>
 80122cc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80122d0:	b13b      	cbz	r3, 80122e2 <read_submessage_format+0xe2>
 80122d2:	a906      	add	r1, sp, #24
 80122d4:	a80c      	add	r0, sp, #48	@ 0x30
 80122d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80122da:	f002 fd4b 	bl	8014d74 <uxr_deserialize_BaseObjectRequest>
 80122de:	bb60      	cbnz	r0, 801233a <read_submessage_format+0x13a>
 80122e0:	69e2      	ldr	r2, [r4, #28]
 80122e2:	68a3      	ldr	r3, [r4, #8]
 80122e4:	442b      	add	r3, r5
 80122e6:	60a3      	str	r3, [r4, #8]
 80122e8:	2a00      	cmp	r2, #0
 80122ea:	d1b4      	bne.n	8012256 <read_submessage_format+0x56>
 80122ec:	e7b5      	b.n	801225a <read_submessage_format+0x5a>
 80122ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80122f0:	a80c      	add	r0, sp, #48	@ 0x30
 80122f2:	eba8 0803 	sub.w	r8, r8, r3
 80122f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80122fa:	44a8      	add	r8, r5
 80122fc:	1a52      	subs	r2, r2, r1
 80122fe:	f7ff fc13 	bl	8011b28 <ucdr_init_buffer>
 8012302:	a80c      	add	r0, sp, #48	@ 0x30
 8012304:	fa1f f888 	uxth.w	r8, r8
 8012308:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801230c:	f7ff fbe0 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 8012310:	ab0c      	add	r3, sp, #48	@ 0x30
 8012312:	2108      	movs	r1, #8
 8012314:	f8cd 8004 	str.w	r8, [sp, #4]
 8012318:	9300      	str	r3, [sp, #0]
 801231a:	463a      	mov	r2, r7
 801231c:	f88d 1016 	strb.w	r1, [sp, #22]
 8012320:	ab06      	add	r3, sp, #24
 8012322:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8012326:	4630      	mov	r0, r6
 8012328:	9102      	str	r1, [sp, #8]
 801232a:	9905      	ldr	r1, [sp, #20]
 801232c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8012330:	47b8      	blx	r7
 8012332:	2301      	movs	r3, #1
 8012334:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012338:	e7c4      	b.n	80122c4 <read_submessage_format+0xc4>
 801233a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801233e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012340:	a80c      	add	r0, sp, #48	@ 0x30
 8012342:	1a52      	subs	r2, r2, r1
 8012344:	eba8 0803 	sub.w	r8, r8, r3
 8012348:	f7ff fbee 	bl	8011b28 <ucdr_init_buffer>
 801234c:	a80c      	add	r0, sp, #48	@ 0x30
 801234e:	44a8      	add	r8, r5
 8012350:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012354:	f7ff fbbc 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 8012358:	ab0c      	add	r3, sp, #48	@ 0x30
 801235a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801235e:	fa1f f888 	uxth.w	r8, r8
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	463a      	mov	r2, r7
 8012366:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801236a:	4630      	mov	r0, r6
 801236c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012370:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012374:	2107      	movs	r1, #7
 8012376:	f88d 1016 	strb.w	r1, [sp, #22]
 801237a:	b29b      	uxth	r3, r3
 801237c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8012380:	9102      	str	r1, [sp, #8]
 8012382:	9905      	ldr	r1, [sp, #20]
 8012384:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8012388:	47b8      	blx	r7
 801238a:	2301      	movs	r3, #1
 801238c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012390:	e7a6      	b.n	80122e0 <read_submessage_format+0xe0>
 8012392:	bf00      	nop

08012394 <on_get_fragmentation_info>:
 8012394:	b500      	push	{lr}
 8012396:	b08b      	sub	sp, #44	@ 0x2c
 8012398:	4601      	mov	r1, r0
 801239a:	2204      	movs	r2, #4
 801239c:	a802      	add	r0, sp, #8
 801239e:	f7ff fbc3 	bl	8011b28 <ucdr_init_buffer>
 80123a2:	f10d 0305 	add.w	r3, sp, #5
 80123a6:	f10d 0206 	add.w	r2, sp, #6
 80123aa:	a901      	add	r1, sp, #4
 80123ac:	a802      	add	r0, sp, #8
 80123ae:	f001 feb3 	bl	8014118 <uxr_read_submessage_header>
 80123b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80123b6:	2b0d      	cmp	r3, #13
 80123b8:	d003      	beq.n	80123c2 <on_get_fragmentation_info+0x2e>
 80123ba:	2000      	movs	r0, #0
 80123bc:	b00b      	add	sp, #44	@ 0x2c
 80123be:	f85d fb04 	ldr.w	pc, [sp], #4
 80123c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80123c6:	f013 0f02 	tst.w	r3, #2
 80123ca:	bf14      	ite	ne
 80123cc:	2002      	movne	r0, #2
 80123ce:	2001      	moveq	r0, #1
 80123d0:	b00b      	add	sp, #44	@ 0x2c
 80123d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80123d6:	bf00      	nop

080123d8 <read_submessage_get_info>:
 80123d8:	b570      	push	{r4, r5, r6, lr}
 80123da:	2500      	movs	r5, #0
 80123dc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80123e0:	460e      	mov	r6, r1
 80123e2:	4604      	mov	r4, r0
 80123e4:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80123e8:	4629      	mov	r1, r5
 80123ea:	a810      	add	r0, sp, #64	@ 0x40
 80123ec:	9503      	str	r5, [sp, #12]
 80123ee:	9504      	str	r5, [sp, #16]
 80123f0:	f009 fac2 	bl	801b978 <memset>
 80123f4:	a903      	add	r1, sp, #12
 80123f6:	4630      	mov	r0, r6
 80123f8:	f002 fe5c 	bl	80150b4 <uxr_deserialize_GET_INFO_Payload>
 80123fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012400:	4620      	mov	r0, r4
 8012402:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012406:	f001 f879 	bl	80134fc <uxr_session_header_offset>
 801240a:	462b      	mov	r3, r5
 801240c:	220c      	movs	r2, #12
 801240e:	a905      	add	r1, sp, #20
 8012410:	9000      	str	r0, [sp, #0]
 8012412:	a808      	add	r0, sp, #32
 8012414:	f7ff fb76 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8012418:	a910      	add	r1, sp, #64	@ 0x40
 801241a:	a808      	add	r0, sp, #32
 801241c:	f002 febe 	bl	801519c <uxr_serialize_INFO_Payload>
 8012420:	9b08      	ldr	r3, [sp, #32]
 8012422:	462a      	mov	r2, r5
 8012424:	4629      	mov	r1, r5
 8012426:	4620      	mov	r0, r4
 8012428:	f001 f814 	bl	8013454 <uxr_stamp_session_header>
 801242c:	a808      	add	r0, sp, #32
 801242e:	f7ff fba9 	bl	8011b84 <ucdr_buffer_length>
 8012432:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012434:	4602      	mov	r2, r0
 8012436:	a905      	add	r1, sp, #20
 8012438:	e9d3 0400 	ldrd	r0, r4, [r3]
 801243c:	47a0      	blx	r4
 801243e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8012442:	bd70      	pop	{r4, r5, r6, pc}

08012444 <write_submessage_acknack.isra.0>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	b092      	sub	sp, #72	@ 0x48
 8012448:	4605      	mov	r5, r0
 801244a:	460e      	mov	r6, r1
 801244c:	4614      	mov	r4, r2
 801244e:	f001 f855 	bl	80134fc <uxr_session_header_offset>
 8012452:	a905      	add	r1, sp, #20
 8012454:	9000      	str	r0, [sp, #0]
 8012456:	2300      	movs	r3, #0
 8012458:	a80a      	add	r0, sp, #40	@ 0x28
 801245a:	2211      	movs	r2, #17
 801245c:	f7ff fb52 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8012460:	2218      	movs	r2, #24
 8012462:	2300      	movs	r3, #0
 8012464:	210a      	movs	r1, #10
 8012466:	fb02 5404 	mla	r4, r2, r4, r5
 801246a:	a80a      	add	r0, sp, #40	@ 0x28
 801246c:	2205      	movs	r2, #5
 801246e:	3450      	adds	r4, #80	@ 0x50
 8012470:	f001 fe38 	bl	80140e4 <uxr_buffer_submessage_header>
 8012474:	a903      	add	r1, sp, #12
 8012476:	4620      	mov	r0, r4
 8012478:	f007 fdc2 	bl	801a000 <uxr_compute_acknack>
 801247c:	ba40      	rev16	r0, r0
 801247e:	a903      	add	r1, sp, #12
 8012480:	f88d 6010 	strb.w	r6, [sp, #16]
 8012484:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012488:	a80a      	add	r0, sp, #40	@ 0x28
 801248a:	f002 fef9 	bl	8015280 <uxr_serialize_ACKNACK_Payload>
 801248e:	2200      	movs	r2, #0
 8012490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012492:	4628      	mov	r0, r5
 8012494:	4611      	mov	r1, r2
 8012496:	f000 ffdd 	bl	8013454 <uxr_stamp_session_header>
 801249a:	a80a      	add	r0, sp, #40	@ 0x28
 801249c:	f7ff fb72 	bl	8011b84 <ucdr_buffer_length>
 80124a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80124a2:	4602      	mov	r2, r0
 80124a4:	a905      	add	r1, sp, #20
 80124a6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80124aa:	47a0      	blx	r4
 80124ac:	b012      	add	sp, #72	@ 0x48
 80124ae:	bd70      	pop	{r4, r5, r6, pc}

080124b0 <uxr_init_session>:
 80124b0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80124e8 <uxr_init_session+0x38>
 80124b4:	2300      	movs	r3, #0
 80124b6:	b510      	push	{r4, lr}
 80124b8:	4604      	mov	r4, r0
 80124ba:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80124be:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80124c2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80124c6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80124ca:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80124ce:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80124d2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80124d6:	2181      	movs	r1, #129	@ 0x81
 80124d8:	f000 ff20 	bl	801331c <uxr_init_session_info>
 80124dc:	f104 0008 	add.w	r0, r4, #8
 80124e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124e4:	f001 bd1a 	b.w	8013f1c <uxr_init_stream_storage>
	...

080124f0 <uxr_set_status_callback>:
 80124f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop

080124f8 <uxr_set_topic_callback>:
 80124f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop

08012500 <uxr_set_request_callback>:
 8012500:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop

08012508 <uxr_set_reply_callback>:
 8012508:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop

08012510 <uxr_create_output_best_effort_stream>:
 8012510:	b510      	push	{r4, lr}
 8012512:	4604      	mov	r4, r0
 8012514:	b084      	sub	sp, #16
 8012516:	e9cd 2100 	strd	r2, r1, [sp]
 801251a:	f000 ffef 	bl	80134fc <uxr_session_header_offset>
 801251e:	4603      	mov	r3, r0
 8012520:	f104 0008 	add.w	r0, r4, #8
 8012524:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012528:	b004      	add	sp, #16
 801252a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801252e:	f001 bd3b 	b.w	8013fa8 <uxr_add_output_best_effort_buffer>
 8012532:	bf00      	nop

08012534 <uxr_create_output_reliable_stream>:
 8012534:	b530      	push	{r4, r5, lr}
 8012536:	b089      	sub	sp, #36	@ 0x24
 8012538:	4604      	mov	r4, r0
 801253a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801253e:	9303      	str	r3, [sp, #12]
 8012540:	f000 ffdc 	bl	80134fc <uxr_session_header_offset>
 8012544:	4605      	mov	r5, r0
 8012546:	9905      	ldr	r1, [sp, #20]
 8012548:	f104 0008 	add.w	r0, r4, #8
 801254c:	9500      	str	r5, [sp, #0]
 801254e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012552:	f001 fd3d 	bl	8013fd0 <uxr_add_output_reliable_buffer>
 8012556:	2200      	movs	r2, #0
 8012558:	fa5f fc80 	uxtb.w	ip, r0
 801255c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012560:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012564:	0e03      	lsrs	r3, r0, #24
 8012566:	f36c 0207 	bfi	r2, ip, #0, #8
 801256a:	f364 220f 	bfi	r2, r4, #8, #8
 801256e:	f361 4217 	bfi	r2, r1, #16, #8
 8012572:	f363 621f 	bfi	r2, r3, #24, #8
 8012576:	4610      	mov	r0, r2
 8012578:	b009      	add	sp, #36	@ 0x24
 801257a:	bd30      	pop	{r4, r5, pc}

0801257c <uxr_create_input_best_effort_stream>:
 801257c:	b082      	sub	sp, #8
 801257e:	3008      	adds	r0, #8
 8012580:	b002      	add	sp, #8
 8012582:	f001 bd3f 	b.w	8014004 <uxr_add_input_best_effort_buffer>
 8012586:	bf00      	nop

08012588 <uxr_create_input_reliable_stream>:
 8012588:	b510      	push	{r4, lr}
 801258a:	4c0c      	ldr	r4, [pc, #48]	@ (80125bc <uxr_create_input_reliable_stream+0x34>)
 801258c:	b084      	sub	sp, #16
 801258e:	3008      	adds	r0, #8
 8012590:	9400      	str	r4, [sp, #0]
 8012592:	f001 fd4d 	bl	8014030 <uxr_add_input_reliable_buffer>
 8012596:	2200      	movs	r2, #0
 8012598:	fa5f fe80 	uxtb.w	lr, r0
 801259c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80125a0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80125a4:	0e03      	lsrs	r3, r0, #24
 80125a6:	f36e 0207 	bfi	r2, lr, #0, #8
 80125aa:	f36c 220f 	bfi	r2, ip, #8, #8
 80125ae:	f361 4217 	bfi	r2, r1, #16, #8
 80125b2:	f363 621f 	bfi	r2, r3, #24, #8
 80125b6:	4610      	mov	r0, r2
 80125b8:	b004      	add	sp, #16
 80125ba:	bd10      	pop	{r4, pc}
 80125bc:	08012395 	.word	0x08012395

080125c0 <uxr_epoch_nanos>:
 80125c0:	b510      	push	{r4, lr}
 80125c2:	4604      	mov	r4, r0
 80125c4:	f001 fdf0 	bl	80141a8 <uxr_nanos>
 80125c8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80125cc:	1ac0      	subs	r0, r0, r3
 80125ce:	eb61 0102 	sbc.w	r1, r1, r2
 80125d2:	bd10      	pop	{r4, pc}

080125d4 <uxr_flash_output_streams>:
 80125d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125d8:	7e03      	ldrb	r3, [r0, #24]
 80125da:	b084      	sub	sp, #16
 80125dc:	4604      	mov	r4, r0
 80125de:	b1fb      	cbz	r3, 8012620 <uxr_flash_output_streams+0x4c>
 80125e0:	f04f 0900 	mov.w	r9, #0
 80125e4:	f10d 0802 	add.w	r8, sp, #2
 80125e8:	af03      	add	r7, sp, #12
 80125ea:	ae02      	add	r6, sp, #8
 80125ec:	4648      	mov	r0, r9
 80125ee:	2201      	movs	r2, #1
 80125f0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80125f4:	4611      	mov	r1, r2
 80125f6:	3508      	adds	r5, #8
 80125f8:	f001 fc36 	bl	8013e68 <uxr_stream_id>
 80125fc:	4684      	mov	ip, r0
 80125fe:	4643      	mov	r3, r8
 8012600:	463a      	mov	r2, r7
 8012602:	4631      	mov	r1, r6
 8012604:	4628      	mov	r0, r5
 8012606:	f8cd c004 	str.w	ip, [sp, #4]
 801260a:	f007 fd83 	bl	801a114 <uxr_prepare_best_effort_buffer_to_send>
 801260e:	2800      	cmp	r0, #0
 8012610:	d13d      	bne.n	801268e <uxr_flash_output_streams+0xba>
 8012612:	f109 0901 	add.w	r9, r9, #1
 8012616:	7e23      	ldrb	r3, [r4, #24]
 8012618:	fa5f f089 	uxtb.w	r0, r9
 801261c:	4283      	cmp	r3, r0
 801261e:	d8e6      	bhi.n	80125ee <uxr_flash_output_streams+0x1a>
 8012620:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012624:	b383      	cbz	r3, 8012688 <uxr_flash_output_streams+0xb4>
 8012626:	f04f 0900 	mov.w	r9, #0
 801262a:	f10d 0802 	add.w	r8, sp, #2
 801262e:	af03      	add	r7, sp, #12
 8012630:	ae02      	add	r6, sp, #8
 8012632:	4648      	mov	r0, r9
 8012634:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012638:	2201      	movs	r2, #1
 801263a:	2102      	movs	r1, #2
 801263c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012640:	f001 fc12 	bl	8013e68 <uxr_stream_id>
 8012644:	9001      	str	r0, [sp, #4]
 8012646:	3520      	adds	r5, #32
 8012648:	e00c      	b.n	8012664 <uxr_flash_output_streams+0x90>
 801264a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801264e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012652:	9b02      	ldr	r3, [sp, #8]
 8012654:	f000 fefe 	bl	8013454 <uxr_stamp_session_header>
 8012658:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801265a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801265e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012662:	47d0      	blx	sl
 8012664:	4643      	mov	r3, r8
 8012666:	463a      	mov	r2, r7
 8012668:	4631      	mov	r1, r6
 801266a:	4628      	mov	r0, r5
 801266c:	f007 ff74 	bl	801a558 <uxr_prepare_next_reliable_buffer_to_send>
 8012670:	4603      	mov	r3, r0
 8012672:	4620      	mov	r0, r4
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1e8      	bne.n	801264a <uxr_flash_output_streams+0x76>
 8012678:	f109 0901 	add.w	r9, r9, #1
 801267c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012680:	fa5f f089 	uxtb.w	r0, r9
 8012684:	4283      	cmp	r3, r0
 8012686:	d8d5      	bhi.n	8012634 <uxr_flash_output_streams+0x60>
 8012688:	b004      	add	sp, #16
 801268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801268e:	9b02      	ldr	r3, [sp, #8]
 8012690:	4620      	mov	r0, r4
 8012692:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012696:	f109 0901 	add.w	r9, r9, #1
 801269a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801269e:	f000 fed9 	bl	8013454 <uxr_stamp_session_header>
 80126a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80126a4:	9a03      	ldr	r2, [sp, #12]
 80126a6:	685d      	ldr	r5, [r3, #4]
 80126a8:	6818      	ldr	r0, [r3, #0]
 80126aa:	9902      	ldr	r1, [sp, #8]
 80126ac:	47a8      	blx	r5
 80126ae:	7e23      	ldrb	r3, [r4, #24]
 80126b0:	fa5f f089 	uxtb.w	r0, r9
 80126b4:	4283      	cmp	r3, r0
 80126b6:	d89a      	bhi.n	80125ee <uxr_flash_output_streams+0x1a>
 80126b8:	e7b2      	b.n	8012620 <uxr_flash_output_streams+0x4c>
 80126ba:	bf00      	nop

080126bc <read_submessage_info>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	460d      	mov	r5, r1
 80126c2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80126c6:	4606      	mov	r6, r0
 80126c8:	4669      	mov	r1, sp
 80126ca:	4628      	mov	r0, r5
 80126cc:	f002 fc04 	bl	8014ed8 <uxr_deserialize_BaseObjectReply>
 80126d0:	4604      	mov	r4, r0
 80126d2:	a902      	add	r1, sp, #8
 80126d4:	4628      	mov	r0, r5
 80126d6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80126da:	f7fe f8c1 	bl	8010860 <ucdr_deserialize_bool>
 80126de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80126e2:	4004      	ands	r4, r0
 80126e4:	b2e4      	uxtb	r4, r4
 80126e6:	b95b      	cbnz	r3, 8012700 <read_submessage_info+0x44>
 80126e8:	a987      	add	r1, sp, #540	@ 0x21c
 80126ea:	4628      	mov	r0, r5
 80126ec:	f7fe f8b8 	bl	8010860 <ucdr_deserialize_bool>
 80126f0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80126f4:	4680      	mov	r8, r0
 80126f6:	b94b      	cbnz	r3, 801270c <read_submessage_info+0x50>
 80126f8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012700:	a903      	add	r1, sp, #12
 8012702:	4628      	mov	r0, r5
 8012704:	f002 fa94 	bl	8014c30 <uxr_deserialize_ObjectVariant>
 8012708:	4004      	ands	r4, r0
 801270a:	e7ed      	b.n	80126e8 <read_submessage_info+0x2c>
 801270c:	a988      	add	r1, sp, #544	@ 0x220
 801270e:	4628      	mov	r0, r5
 8012710:	f7fe f8d4 	bl	80108bc <ucdr_deserialize_uint8_t>
 8012714:	ea14 0f08 	tst.w	r4, r8
 8012718:	d0ee      	beq.n	80126f8 <read_submessage_info+0x3c>
 801271a:	2800      	cmp	r0, #0
 801271c:	d0ec      	beq.n	80126f8 <read_submessage_info+0x3c>
 801271e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012722:	2b0d      	cmp	r3, #13
 8012724:	d1e8      	bne.n	80126f8 <read_submessage_info+0x3c>
 8012726:	a98a      	add	r1, sp, #552	@ 0x228
 8012728:	4628      	mov	r0, r5
 801272a:	f7fe fe6d 	bl	8011408 <ucdr_deserialize_int16_t>
 801272e:	b138      	cbz	r0, 8012740 <read_submessage_info+0x84>
 8012730:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012734:	2b00      	cmp	r3, #0
 8012736:	dd06      	ble.n	8012746 <read_submessage_info+0x8a>
 8012738:	2f00      	cmp	r7, #0
 801273a:	bf14      	ite	ne
 801273c:	2001      	movne	r0, #1
 801273e:	2002      	moveq	r0, #2
 8012740:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8012744:	e7d8      	b.n	80126f8 <read_submessage_info+0x3c>
 8012746:	2000      	movs	r0, #0
 8012748:	e7fa      	b.n	8012740 <read_submessage_info+0x84>
 801274a:	bf00      	nop

0801274c <read_submessage_list>:
 801274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012750:	4604      	mov	r4, r0
 8012752:	b097      	sub	sp, #92	@ 0x5c
 8012754:	460d      	mov	r5, r1
 8012756:	4ec1      	ldr	r6, [pc, #772]	@ (8012a5c <read_submessage_list+0x310>)
 8012758:	9209      	str	r2, [sp, #36]	@ 0x24
 801275a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801275e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012760:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012764:	4628      	mov	r0, r5
 8012766:	f001 fcd7 	bl	8014118 <uxr_read_submessage_header>
 801276a:	2800      	cmp	r0, #0
 801276c:	f000 8142 	beq.w	80129f4 <read_submessage_list+0x2a8>
 8012770:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012774:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012778:	3b02      	subs	r3, #2
 801277a:	2b0d      	cmp	r3, #13
 801277c:	d8ed      	bhi.n	801275a <read_submessage_list+0xe>
 801277e:	a101      	add	r1, pc, #4	@ (adr r1, 8012784 <read_submessage_list+0x38>)
 8012780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012784:	080129eb 	.word	0x080129eb
 8012788:	0801275b 	.word	0x0801275b
 801278c:	080129db 	.word	0x080129db
 8012790:	08012979 	.word	0x08012979
 8012794:	0801296f 	.word	0x0801296f
 8012798:	0801275b 	.word	0x0801275b
 801279c:	0801275b 	.word	0x0801275b
 80127a0:	080128c5 	.word	0x080128c5
 80127a4:	08012857 	.word	0x08012857
 80127a8:	08012817 	.word	0x08012817
 80127ac:	0801275b 	.word	0x0801275b
 80127b0:	0801275b 	.word	0x0801275b
 80127b4:	0801275b 	.word	0x0801275b
 80127b8:	080127bd 	.word	0x080127bd
 80127bc:	a910      	add	r1, sp, #64	@ 0x40
 80127be:	4628      	mov	r0, r5
 80127c0:	f002 fdc0 	bl	8015344 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80127c4:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 80127c8:	f1b8 0f00 	cmp.w	r8, #0
 80127cc:	f000 811a 	beq.w	8012a04 <read_submessage_list+0x2b8>
 80127d0:	f001 fcea 	bl	80141a8 <uxr_nanos>
 80127d4:	4602      	mov	r2, r0
 80127d6:	460b      	mov	r3, r1
 80127d8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80127dc:	2100      	movs	r1, #0
 80127de:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80127e0:	9006      	str	r0, [sp, #24]
 80127e2:	468c      	mov	ip, r1
 80127e4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80127e6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80127ea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80127ec:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80127f0:	468c      	mov	ip, r1
 80127f2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80127f4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80127f8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80127fc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8012800:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012804:	e9cd 0100 	strd	r0, r1, [sp]
 8012808:	4620      	mov	r0, r4
 801280a:	47c0      	blx	r8
 801280c:	f04f 0301 	mov.w	r3, #1
 8012810:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012814:	e7a1      	b.n	801275a <read_submessage_list+0xe>
 8012816:	a910      	add	r1, sp, #64	@ 0x40
 8012818:	4628      	mov	r0, r5
 801281a:	f002 fd71 	bl	8015300 <uxr_deserialize_HEARTBEAT_Payload>
 801281e:	2100      	movs	r1, #0
 8012820:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012824:	f001 fb4e 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012828:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801282c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801282e:	f104 0008 	add.w	r0, r4, #8
 8012832:	4641      	mov	r1, r8
 8012834:	f001 fc34 	bl	80140a0 <uxr_get_input_reliable_stream>
 8012838:	2800      	cmp	r0, #0
 801283a:	d08e      	beq.n	801275a <read_submessage_list+0xe>
 801283c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012840:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012844:	f007 fbd0 	bl	8019fe8 <uxr_process_heartbeat>
 8012848:	4642      	mov	r2, r8
 801284a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff fdf8 	bl	8012444 <write_submessage_acknack.isra.0>
 8012854:	e781      	b.n	801275a <read_submessage_list+0xe>
 8012856:	a910      	add	r1, sp, #64	@ 0x40
 8012858:	4628      	mov	r0, r5
 801285a:	f002 fd29 	bl	80152b0 <uxr_deserialize_ACKNACK_Payload>
 801285e:	2100      	movs	r1, #0
 8012860:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012864:	f001 fb2e 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012868:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801286c:	900d      	str	r0, [sp, #52]	@ 0x34
 801286e:	f104 0008 	add.w	r0, r4, #8
 8012872:	f001 fbff 	bl	8014074 <uxr_get_output_reliable_stream>
 8012876:	4680      	mov	r8, r0
 8012878:	2800      	cmp	r0, #0
 801287a:	f43f af6e 	beq.w	801275a <read_submessage_list+0xe>
 801287e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012882:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012886:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801288a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801288e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012892:	b289      	uxth	r1, r1
 8012894:	f007 ff08 	bl	801a6a8 <uxr_process_acknack>
 8012898:	4640      	mov	r0, r8
 801289a:	f007 fec9 	bl	801a630 <uxr_begin_output_nack_buffer_it>
 801289e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80128a2:	e005      	b.n	80128b0 <read_submessage_list+0x164>
 80128a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80128a6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80128aa:	e9d3 0900 	ldrd	r0, r9, [r3]
 80128ae:	47c8      	blx	r9
 80128b0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80128b4:	aa0f      	add	r2, sp, #60	@ 0x3c
 80128b6:	4651      	mov	r1, sl
 80128b8:	4640      	mov	r0, r8
 80128ba:	f007 febb 	bl	801a634 <uxr_next_reliable_nack_buffer_to_send>
 80128be:	2800      	cmp	r0, #0
 80128c0:	d1f0      	bne.n	80128a4 <read_submessage_list+0x158>
 80128c2:	e74a      	b.n	801275a <read_submessage_list+0xe>
 80128c4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80128c8:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80128cc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80128d0:	4628      	mov	r0, r5
 80128d2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80128d6:	4651      	mov	r1, sl
 80128d8:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80128dc:	f1a8 0804 	sub.w	r8, r8, #4
 80128e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80128e4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80128e8:	fa1f f888 	uxth.w	r8, r8
 80128ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80128f0:	f009 090e 	and.w	r9, r9, #14
 80128f4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80128f8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80128fc:	f002 fa3a 	bl	8014d74 <uxr_deserialize_BaseObjectRequest>
 8012900:	4650      	mov	r0, sl
 8012902:	a90f      	add	r1, sp, #60	@ 0x3c
 8012904:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012908:	f000 fe20 	bl	801354c <uxr_parse_base_object_request>
 801290c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801290e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012912:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012916:	9110      	str	r1, [sp, #64]	@ 0x40
 8012918:	f1bb 0f00 	cmp.w	fp, #0
 801291c:	d006      	beq.n	801292c <read_submessage_list+0x1e0>
 801291e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012922:	4652      	mov	r2, sl
 8012924:	4620      	mov	r0, r4
 8012926:	9300      	str	r3, [sp, #0]
 8012928:	2300      	movs	r3, #0
 801292a:	47d8      	blx	fp
 801292c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801292e:	b182      	cbz	r2, 8012952 <read_submessage_list+0x206>
 8012930:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012932:	f04f 0c00 	mov.w	ip, #0
 8012936:	3902      	subs	r1, #2
 8012938:	e003      	b.n	8012942 <read_submessage_list+0x1f6>
 801293a:	f10c 0c01 	add.w	ip, ip, #1
 801293e:	4594      	cmp	ip, r2
 8012940:	d007      	beq.n	8012952 <read_submessage_list+0x206>
 8012942:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012946:	4553      	cmp	r3, sl
 8012948:	d1f7      	bne.n	801293a <read_submessage_list+0x1ee>
 801294a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801294c:	2200      	movs	r2, #0
 801294e:	f803 200c 	strb.w	r2, [r3, ip]
 8012952:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012956:	464b      	mov	r3, r9
 8012958:	4642      	mov	r2, r8
 801295a:	4620      	mov	r0, r4
 801295c:	9102      	str	r1, [sp, #8]
 801295e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012960:	9101      	str	r1, [sp, #4]
 8012962:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012964:	9100      	str	r1, [sp, #0]
 8012966:	4629      	mov	r1, r5
 8012968:	f7ff fc4a 	bl	8012200 <read_submessage_format>
 801296c:	e6f5      	b.n	801275a <read_submessage_list+0xe>
 801296e:	4629      	mov	r1, r5
 8012970:	4620      	mov	r0, r4
 8012972:	f7ff fea3 	bl	80126bc <read_submessage_info>
 8012976:	e6f0      	b.n	801275a <read_submessage_list+0xe>
 8012978:	2a00      	cmp	r2, #0
 801297a:	d03e      	beq.n	80129fa <read_submessage_list+0x2ae>
 801297c:	a910      	add	r1, sp, #64	@ 0x40
 801297e:	4628      	mov	r0, r5
 8012980:	f002 fbee 	bl	8015160 <uxr_deserialize_STATUS_Payload>
 8012984:	a90e      	add	r1, sp, #56	@ 0x38
 8012986:	aa0d      	add	r2, sp, #52	@ 0x34
 8012988:	a810      	add	r0, sp, #64	@ 0x40
 801298a:	f000 fddf 	bl	801354c <uxr_parse_base_object_request>
 801298e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012990:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012994:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012998:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801299c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801299e:	f1ba 0f00 	cmp.w	sl, #0
 80129a2:	d006      	beq.n	80129b2 <read_submessage_list+0x266>
 80129a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80129a8:	4642      	mov	r2, r8
 80129aa:	4620      	mov	r0, r4
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	464b      	mov	r3, r9
 80129b0:	47d0      	blx	sl
 80129b2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80129b4:	2a00      	cmp	r2, #0
 80129b6:	f43f aed0 	beq.w	801275a <read_submessage_list+0xe>
 80129ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80129bc:	2100      	movs	r1, #0
 80129be:	3802      	subs	r0, #2
 80129c0:	e003      	b.n	80129ca <read_submessage_list+0x27e>
 80129c2:	3101      	adds	r1, #1
 80129c4:	4291      	cmp	r1, r2
 80129c6:	f43f aec8 	beq.w	801275a <read_submessage_list+0xe>
 80129ca:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80129ce:	4543      	cmp	r3, r8
 80129d0:	d1f7      	bne.n	80129c2 <read_submessage_list+0x276>
 80129d2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80129d4:	f803 9001 	strb.w	r9, [r3, r1]
 80129d8:	e6bf      	b.n	801275a <read_submessage_list+0xe>
 80129da:	2a00      	cmp	r2, #0
 80129dc:	f47f aebd 	bne.w	801275a <read_submessage_list+0xe>
 80129e0:	4629      	mov	r1, r5
 80129e2:	4620      	mov	r0, r4
 80129e4:	f000 fcf6 	bl	80133d4 <uxr_read_create_session_status>
 80129e8:	e6b7      	b.n	801275a <read_submessage_list+0xe>
 80129ea:	4629      	mov	r1, r5
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7ff fcf3 	bl	80123d8 <read_submessage_get_info>
 80129f2:	e6b2      	b.n	801275a <read_submessage_list+0xe>
 80129f4:	b017      	add	sp, #92	@ 0x5c
 80129f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fa:	4629      	mov	r1, r5
 80129fc:	4620      	mov	r0, r4
 80129fe:	f000 fcf7 	bl	80133f0 <uxr_read_delete_session_status>
 8012a02:	e6aa      	b.n	801275a <read_submessage_list+0xe>
 8012a04:	f001 fbd0 	bl	80141a8 <uxr_nanos>
 8012a08:	4642      	mov	r2, r8
 8012a0a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012a0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012a0e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012a12:	1818      	adds	r0, r3, r0
 8012a14:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012a16:	eb42 0101 	adc.w	r1, r2, r1
 8012a1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012a1c:	4642      	mov	r2, r8
 8012a1e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012a22:	469c      	mov	ip, r3
 8012a24:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8012a28:	fbc3 7806 	smlal	r7, r8, r3, r6
 8012a2c:	4643      	mov	r3, r8
 8012a2e:	eb1c 0c07 	adds.w	ip, ip, r7
 8012a32:	eb42 0203 	adc.w	r2, r2, r3
 8012a36:	ebb0 030c 	subs.w	r3, r0, ip
 8012a3a:	eb61 0202 	sbc.w	r2, r1, r2
 8012a3e:	2a00      	cmp	r2, #0
 8012a40:	db08      	blt.n	8012a54 <read_submessage_list+0x308>
 8012a42:	085b      	lsrs	r3, r3, #1
 8012a44:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012a48:	1052      	asrs	r2, r2, #1
 8012a4a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8012a4e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8012a52:	e6db      	b.n	801280c <read_submessage_list+0xc0>
 8012a54:	3301      	adds	r3, #1
 8012a56:	f142 0200 	adc.w	r2, r2, #0
 8012a5a:	e7f2      	b.n	8012a42 <read_submessage_list+0x2f6>
 8012a5c:	3b9aca00 	.word	0x3b9aca00

08012a60 <listen_message_reliably>:
 8012a60:	1e0b      	subs	r3, r1, #0
 8012a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a66:	bfb8      	it	lt
 8012a68:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8012a6c:	b09d      	sub	sp, #116	@ 0x74
 8012a6e:	4680      	mov	r8, r0
 8012a70:	9305      	str	r3, [sp, #20]
 8012a72:	f001 fb7d 	bl	8014170 <uxr_millis>
 8012a76:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012a7a:	4681      	mov	r9, r0
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	f000 809a 	beq.w	8012bb6 <listen_message_reliably+0x156>
 8012a82:	2600      	movs	r6, #0
 8012a84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012a88:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012a8c:	460f      	mov	r7, r1
 8012a8e:	4630      	mov	r0, r6
 8012a90:	9303      	str	r3, [sp, #12]
 8012a92:	e00e      	b.n	8012ab2 <listen_message_reliably+0x52>
 8012a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a96:	3601      	adds	r6, #1
 8012a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a9a:	455a      	cmp	r2, fp
 8012a9c:	9903      	ldr	r1, [sp, #12]
 8012a9e:	b2f0      	uxtb	r0, r6
 8012aa0:	eb73 0101 	sbcs.w	r1, r3, r1
 8012aa4:	da01      	bge.n	8012aaa <listen_message_reliably+0x4a>
 8012aa6:	4693      	mov	fp, r2
 8012aa8:	9303      	str	r3, [sp, #12]
 8012aaa:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012aae:	4283      	cmp	r3, r0
 8012ab0:	d95f      	bls.n	8012b72 <listen_message_reliably+0x112>
 8012ab2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012ab6:	2102      	movs	r1, #2
 8012ab8:	2201      	movs	r2, #1
 8012aba:	00e4      	lsls	r4, r4, #3
 8012abc:	f001 f9d4 	bl	8013e68 <uxr_stream_id>
 8012ac0:	4601      	mov	r1, r0
 8012ac2:	f104 0520 	add.w	r5, r4, #32
 8012ac6:	463b      	mov	r3, r7
 8012ac8:	464a      	mov	r2, r9
 8012aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8012acc:	4445      	add	r5, r8
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f007 fd82 	bl	801a5d8 <uxr_update_output_stream_heartbeat_timestamp>
 8012ad4:	eb08 0304 	add.w	r3, r8, r4
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d0db      	beq.n	8012a94 <listen_message_reliably+0x34>
 8012adc:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8012ae0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012ae4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012ae8:	4640      	mov	r0, r8
 8012aea:	3501      	adds	r5, #1
 8012aec:	4444      	add	r4, r8
 8012aee:	9304      	str	r3, [sp, #16]
 8012af0:	f000 fd04 	bl	80134fc <uxr_session_header_offset>
 8012af4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012af8:	2300      	movs	r3, #0
 8012afa:	2211      	movs	r2, #17
 8012afc:	a90c      	add	r1, sp, #48	@ 0x30
 8012afe:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012b02:	9000      	str	r0, [sp, #0]
 8012b04:	4650      	mov	r0, sl
 8012b06:	3601      	adds	r6, #1
 8012b08:	f7fe fffc 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	2205      	movs	r2, #5
 8012b10:	210b      	movs	r1, #11
 8012b12:	4650      	mov	r0, sl
 8012b14:	f001 fae6 	bl	80140e4 <uxr_buffer_submessage_header>
 8012b18:	2101      	movs	r1, #1
 8012b1a:	8968      	ldrh	r0, [r5, #10]
 8012b1c:	f007 fe20 	bl	801a760 <uxr_seq_num_add>
 8012b20:	892b      	ldrh	r3, [r5, #8]
 8012b22:	4602      	mov	r2, r0
 8012b24:	a90a      	add	r1, sp, #40	@ 0x28
 8012b26:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012b2a:	4650      	mov	r0, sl
 8012b2c:	9b04      	ldr	r3, [sp, #16]
 8012b2e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012b32:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012b36:	f002 fbcf 	bl	80152d8 <uxr_serialize_HEARTBEAT_Payload>
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012b3e:	4640      	mov	r0, r8
 8012b40:	4611      	mov	r1, r2
 8012b42:	f000 fc87 	bl	8013454 <uxr_stamp_session_header>
 8012b46:	4650      	mov	r0, sl
 8012b48:	f7ff f81c 	bl	8011b84 <ucdr_buffer_length>
 8012b4c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8012b50:	4602      	mov	r2, r0
 8012b52:	a90c      	add	r1, sp, #48	@ 0x30
 8012b54:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b58:	47a8      	blx	r5
 8012b5a:	9903      	ldr	r1, [sp, #12]
 8012b5c:	b2f0      	uxtb	r0, r6
 8012b5e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8012b62:	455a      	cmp	r2, fp
 8012b64:	eb73 0101 	sbcs.w	r1, r3, r1
 8012b68:	db9d      	blt.n	8012aa6 <listen_message_reliably+0x46>
 8012b6a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012b6e:	4283      	cmp	r3, r0
 8012b70:	d89f      	bhi.n	8012ab2 <listen_message_reliably+0x52>
 8012b72:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b76:	9a03      	ldr	r2, [sp, #12]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	bf08      	it	eq
 8012b7c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8012b80:	d019      	beq.n	8012bb6 <listen_message_reliably+0x156>
 8012b82:	ebab 0309 	sub.w	r3, fp, r9
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	9d05      	ldr	r5, [sp, #20]
 8012b8a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8012b8e:	aa08      	add	r2, sp, #32
 8012b90:	bf08      	it	eq
 8012b92:	2301      	moveq	r3, #1
 8012b94:	a907      	add	r1, sp, #28
 8012b96:	6884      	ldr	r4, [r0, #8]
 8012b98:	429d      	cmp	r5, r3
 8012b9a:	6800      	ldr	r0, [r0, #0]
 8012b9c:	bfa8      	it	ge
 8012b9e:	461d      	movge	r5, r3
 8012ba0:	462b      	mov	r3, r5
 8012ba2:	47a0      	blx	r4
 8012ba4:	b948      	cbnz	r0, 8012bba <listen_message_reliably+0x15a>
 8012ba6:	9b05      	ldr	r3, [sp, #20]
 8012ba8:	1b5b      	subs	r3, r3, r5
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	9305      	str	r3, [sp, #20]
 8012bae:	f73f af60 	bgt.w	8012a72 <listen_message_reliably+0x12>
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	e012      	b.n	8012bdc <listen_message_reliably+0x17c>
 8012bb6:	9b05      	ldr	r3, [sp, #20]
 8012bb8:	e7e5      	b.n	8012b86 <listen_message_reliably+0x126>
 8012bba:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	2500      	movs	r5, #0
 8012bc2:	a80c      	add	r0, sp, #48	@ 0x30
 8012bc4:	f7fe ffb0 	bl	8011b28 <ucdr_init_buffer>
 8012bc8:	f10d 031a 	add.w	r3, sp, #26
 8012bcc:	aa06      	add	r2, sp, #24
 8012bce:	a90c      	add	r1, sp, #48	@ 0x30
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f88d 5018 	strb.w	r5, [sp, #24]
 8012bd6:	f000 fc51 	bl	801347c <uxr_read_session_header>
 8012bda:	b918      	cbnz	r0, 8012be4 <listen_message_reliably+0x184>
 8012bdc:	4620      	mov	r0, r4
 8012bde:	b01d      	add	sp, #116	@ 0x74
 8012be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be4:	4629      	mov	r1, r5
 8012be6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012bea:	f001 f96b 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012bee:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012bf2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8012bf6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012bfa:	2e01      	cmp	r6, #1
 8012bfc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012c00:	d04b      	beq.n	8012c9a <listen_message_reliably+0x23a>
 8012c02:	2e02      	cmp	r6, #2
 8012c04:	d00f      	beq.n	8012c26 <listen_message_reliably+0x1c6>
 8012c06:	2e00      	cmp	r6, #0
 8012c08:	d1e8      	bne.n	8012bdc <listen_message_reliably+0x17c>
 8012c0a:	4631      	mov	r1, r6
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f001 f959 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012c12:	4602      	mov	r2, r0
 8012c14:	a90c      	add	r1, sp, #48	@ 0x30
 8012c16:	4640      	mov	r0, r8
 8012c18:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c1a:	f7ff fd97 	bl	801274c <read_submessage_list>
 8012c1e:	4620      	mov	r0, r4
 8012c20:	b01d      	add	sp, #116	@ 0x74
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	4629      	mov	r1, r5
 8012c28:	f108 0008 	add.w	r0, r8, #8
 8012c2c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8012c30:	f001 fa36 	bl	80140a0 <uxr_get_input_reliable_stream>
 8012c34:	4607      	mov	r7, r0
 8012c36:	b338      	cbz	r0, 8012c88 <listen_message_reliably+0x228>
 8012c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c3a:	a80c      	add	r0, sp, #48	@ 0x30
 8012c3c:	9203      	str	r2, [sp, #12]
 8012c3e:	f7fe ffa5 	bl	8011b8c <ucdr_buffer_remaining>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f10d 0019 	add.w	r0, sp, #25
 8012c48:	9a03      	ldr	r2, [sp, #12]
 8012c4a:	4651      	mov	r1, sl
 8012c4c:	9000      	str	r0, [sp, #0]
 8012c4e:	4638      	mov	r0, r7
 8012c50:	f007 f8ce 	bl	8019df0 <uxr_receive_reliable_message>
 8012c54:	b1c0      	cbz	r0, 8012c88 <listen_message_reliably+0x228>
 8012c56:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c5a:	b393      	cbz	r3, 8012cc2 <listen_message_reliably+0x262>
 8012c5c:	ae14      	add	r6, sp, #80	@ 0x50
 8012c5e:	f04f 0a02 	mov.w	sl, #2
 8012c62:	e00a      	b.n	8012c7a <listen_message_reliably+0x21a>
 8012c64:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8012c68:	4631      	mov	r1, r6
 8012c6a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8012c6e:	4640      	mov	r0, r8
 8012c70:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8012c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c76:	f7ff fd69 	bl	801274c <read_submessage_list>
 8012c7a:	2204      	movs	r2, #4
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4638      	mov	r0, r7
 8012c80:	f007 f938 	bl	8019ef4 <uxr_next_input_reliable_buffer_available>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d1ed      	bne.n	8012c64 <listen_message_reliably+0x204>
 8012c88:	4640      	mov	r0, r8
 8012c8a:	462a      	mov	r2, r5
 8012c8c:	4649      	mov	r1, r9
 8012c8e:	f7ff fbd9 	bl	8012444 <write_submessage_acknack.isra.0>
 8012c92:	4620      	mov	r0, r4
 8012c94:	b01d      	add	sp, #116	@ 0x74
 8012c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	f108 0008 	add.w	r0, r8, #8
 8012ca0:	f001 f9f4 	bl	801408c <uxr_get_input_best_effort_stream>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d099      	beq.n	8012bdc <listen_message_reliably+0x17c>
 8012ca8:	4651      	mov	r1, sl
 8012caa:	f007 f817 	bl	8019cdc <uxr_receive_best_effort_message>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d094      	beq.n	8012bdc <listen_message_reliably+0x17c>
 8012cb2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cb6:	a90c      	add	r1, sp, #48	@ 0x30
 8012cb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cba:	4640      	mov	r0, r8
 8012cbc:	f7ff fd46 	bl	801274c <read_submessage_list>
 8012cc0:	e78c      	b.n	8012bdc <listen_message_reliably+0x17c>
 8012cc2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cc6:	a90c      	add	r1, sp, #48	@ 0x30
 8012cc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cca:	4640      	mov	r0, r8
 8012ccc:	f7ff fd3e 	bl	801274c <read_submessage_list>
 8012cd0:	e7c4      	b.n	8012c5c <listen_message_reliably+0x1fc>
 8012cd2:	bf00      	nop

08012cd4 <uxr_run_session_timeout>:
 8012cd4:	b570      	push	{r4, r5, r6, lr}
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	460d      	mov	r5, r1
 8012cda:	f001 fa49 	bl	8014170 <uxr_millis>
 8012cde:	4606      	mov	r6, r0
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f7ff fc77 	bl	80125d4 <uxr_flash_output_streams>
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f7ff feb9 	bl	8012a60 <listen_message_reliably>
 8012cee:	f001 fa3f 	bl	8014170 <uxr_millis>
 8012cf2:	1b83      	subs	r3, r0, r6
 8012cf4:	1ae9      	subs	r1, r5, r3
 8012cf6:	2900      	cmp	r1, #0
 8012cf8:	dcf6      	bgt.n	8012ce8 <uxr_run_session_timeout+0x14>
 8012cfa:	f104 0008 	add.w	r0, r4, #8
 8012cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d02:	f001 b9d9 	b.w	80140b8 <uxr_output_streams_confirmed>
 8012d06:	bf00      	nop

08012d08 <uxr_run_session_until_data>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	460d      	mov	r5, r1
 8012d0e:	f001 fa2f 	bl	8014170 <uxr_millis>
 8012d12:	4606      	mov	r6, r0
 8012d14:	4620      	mov	r0, r4
 8012d16:	f7ff fc5d 	bl	80125d4 <uxr_flash_output_streams>
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012d22:	e005      	b.n	8012d30 <uxr_run_session_until_data+0x28>
 8012d24:	f001 fa24 	bl	8014170 <uxr_millis>
 8012d28:	1b83      	subs	r3, r0, r6
 8012d2a:	1ae9      	subs	r1, r5, r3
 8012d2c:	2900      	cmp	r1, #0
 8012d2e:	dd07      	ble.n	8012d40 <uxr_run_session_until_data+0x38>
 8012d30:	4620      	mov	r0, r4
 8012d32:	f7ff fe95 	bl	8012a60 <listen_message_reliably>
 8012d36:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	d0f2      	beq.n	8012d24 <uxr_run_session_until_data+0x1c>
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
 8012d40:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012d44:	bd70      	pop	{r4, r5, r6, pc}
 8012d46:	bf00      	nop

08012d48 <uxr_run_session_until_confirm_delivery>:
 8012d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4c:	4606      	mov	r6, r0
 8012d4e:	460d      	mov	r5, r1
 8012d50:	f001 fa0e 	bl	8014170 <uxr_millis>
 8012d54:	4607      	mov	r7, r0
 8012d56:	4630      	mov	r0, r6
 8012d58:	f106 0808 	add.w	r8, r6, #8
 8012d5c:	f7ff fc3a 	bl	80125d4 <uxr_flash_output_streams>
 8012d60:	2d00      	cmp	r5, #0
 8012d62:	db10      	blt.n	8012d86 <uxr_run_session_until_confirm_delivery+0x3e>
 8012d64:	462c      	mov	r4, r5
 8012d66:	e006      	b.n	8012d76 <uxr_run_session_until_confirm_delivery+0x2e>
 8012d68:	f7ff fe7a 	bl	8012a60 <listen_message_reliably>
 8012d6c:	f001 fa00 	bl	8014170 <uxr_millis>
 8012d70:	1bc3      	subs	r3, r0, r7
 8012d72:	1aec      	subs	r4, r5, r3
 8012d74:	d407      	bmi.n	8012d86 <uxr_run_session_until_confirm_delivery+0x3e>
 8012d76:	4640      	mov	r0, r8
 8012d78:	f001 f99e 	bl	80140b8 <uxr_output_streams_confirmed>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	4621      	mov	r1, r4
 8012d80:	4630      	mov	r0, r6
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d0f0      	beq.n	8012d68 <uxr_run_session_until_confirm_delivery+0x20>
 8012d86:	4640      	mov	r0, r8
 8012d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8c:	f001 b994 	b.w	80140b8 <uxr_output_streams_confirmed>

08012d90 <uxr_run_session_until_all_status>:
 8012d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d94:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8012d98:	4606      	mov	r6, r0
 8012d9a:	4688      	mov	r8, r1
 8012d9c:	4692      	mov	sl, r2
 8012d9e:	461f      	mov	r7, r3
 8012da0:	f7ff fc18 	bl	80125d4 <uxr_flash_output_streams>
 8012da4:	f1bb 0f00 	cmp.w	fp, #0
 8012da8:	d004      	beq.n	8012db4 <uxr_run_session_until_all_status+0x24>
 8012daa:	465a      	mov	r2, fp
 8012dac:	21ff      	movs	r1, #255	@ 0xff
 8012dae:	4638      	mov	r0, r7
 8012db0:	f008 fde2 	bl	801b978 <memset>
 8012db4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8012db8:	1e7d      	subs	r5, r7, #1
 8012dba:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8012dbe:	f001 f9d7 	bl	8014170 <uxr_millis>
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	4681      	mov	r9, r0
 8012dc6:	4630      	mov	r0, r6
 8012dc8:	f7ff fe4a 	bl	8012a60 <listen_message_reliably>
 8012dcc:	f001 f9d0 	bl	8014170 <uxr_millis>
 8012dd0:	eba0 0009 	sub.w	r0, r0, r9
 8012dd4:	eba8 0100 	sub.w	r1, r8, r0
 8012dd8:	f1bb 0f00 	cmp.w	fp, #0
 8012ddc:	d029      	beq.n	8012e32 <uxr_run_session_until_all_status+0xa2>
 8012dde:	46ae      	mov	lr, r5
 8012de0:	f04f 0c00 	mov.w	ip, #0
 8012de4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012de8:	2cff      	cmp	r4, #255	@ 0xff
 8012dea:	d015      	beq.n	8012e18 <uxr_run_session_until_all_status+0x88>
 8012dec:	f10c 0c01 	add.w	ip, ip, #1
 8012df0:	45e3      	cmp	fp, ip
 8012df2:	d8f7      	bhi.n	8012de4 <uxr_run_session_until_all_status+0x54>
 8012df4:	2300      	movs	r3, #0
 8012df6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012df8:	e000      	b.n	8012dfc <uxr_run_session_until_all_status+0x6c>
 8012dfa:	b158      	cbz	r0, 8012e14 <uxr_run_session_until_all_status+0x84>
 8012dfc:	462b      	mov	r3, r5
 8012dfe:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012e02:	3302      	adds	r3, #2
 8012e04:	2801      	cmp	r0, #1
 8012e06:	eba3 0307 	sub.w	r3, r3, r7
 8012e0a:	bf8c      	ite	hi
 8012e0c:	2000      	movhi	r0, #0
 8012e0e:	2001      	movls	r0, #1
 8012e10:	459b      	cmp	fp, r3
 8012e12:	d8f2      	bhi.n	8012dfa <uxr_run_session_until_all_status+0x6a>
 8012e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e18:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8012e1c:	f10c 0c01 	add.w	ip, ip, #1
 8012e20:	45dc      	cmp	ip, fp
 8012e22:	d201      	bcs.n	8012e28 <uxr_run_session_until_all_status+0x98>
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d0dd      	beq.n	8012de4 <uxr_run_session_until_all_status+0x54>
 8012e28:	2900      	cmp	r1, #0
 8012e2a:	dde3      	ble.n	8012df4 <uxr_run_session_until_all_status+0x64>
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d1ca      	bne.n	8012dc6 <uxr_run_session_until_all_status+0x36>
 8012e30:	e7e0      	b.n	8012df4 <uxr_run_session_until_all_status+0x64>
 8012e32:	2001      	movs	r0, #1
 8012e34:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8012e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	0000      	movs	r0, r0
	...

08012e40 <uxr_sync_session>:
 8012e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e42:	b093      	sub	sp, #76	@ 0x4c
 8012e44:	4604      	mov	r4, r0
 8012e46:	460d      	mov	r5, r1
 8012e48:	f000 fb58 	bl	80134fc <uxr_session_header_offset>
 8012e4c:	2214      	movs	r2, #20
 8012e4e:	2300      	movs	r3, #0
 8012e50:	9000      	str	r0, [sp, #0]
 8012e52:	a80a      	add	r0, sp, #40	@ 0x28
 8012e54:	eb0d 0102 	add.w	r1, sp, r2
 8012e58:	f7fe fe54 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	2208      	movs	r2, #8
 8012e60:	210e      	movs	r1, #14
 8012e62:	a80a      	add	r0, sp, #40	@ 0x28
 8012e64:	f001 f93e 	bl	80140e4 <uxr_buffer_submessage_header>
 8012e68:	f001 f99e 	bl	80141a8 <uxr_nanos>
 8012e6c:	460e      	mov	r6, r1
 8012e6e:	4607      	mov	r7, r0
 8012e70:	a31b      	add	r3, pc, #108	@ (adr r3, 8012ee0 <uxr_sync_session+0xa0>)
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f7ed fa9b 	bl	80003b0 <__aeabi_ldivmod>
 8012e7a:	4631      	mov	r1, r6
 8012e7c:	9003      	str	r0, [sp, #12]
 8012e7e:	4638      	mov	r0, r7
 8012e80:	a317      	add	r3, pc, #92	@ (adr r3, 8012ee0 <uxr_sync_session+0xa0>)
 8012e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e86:	f7ed fa93 	bl	80003b0 <__aeabi_ldivmod>
 8012e8a:	a903      	add	r1, sp, #12
 8012e8c:	a80a      	add	r0, sp, #40	@ 0x28
 8012e8e:	9204      	str	r2, [sp, #16]
 8012e90:	f002 fa4a 	bl	8015328 <uxr_serialize_TIMESTAMP_Payload>
 8012e94:	2200      	movs	r2, #0
 8012e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e98:	4620      	mov	r0, r4
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	f000 fada 	bl	8013454 <uxr_stamp_session_header>
 8012ea0:	a80a      	add	r0, sp, #40	@ 0x28
 8012ea2:	f7fe fe6f 	bl	8011b84 <ucdr_buffer_length>
 8012ea6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	a905      	add	r1, sp, #20
 8012eac:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012eb0:	47b0      	blx	r6
 8012eb2:	f001 f95d 	bl	8014170 <uxr_millis>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	4606      	mov	r6, r0
 8012eba:	4629      	mov	r1, r5
 8012ebc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012ec0:	e000      	b.n	8012ec4 <uxr_sync_session+0x84>
 8012ec2:	b950      	cbnz	r0, 8012eda <uxr_sync_session+0x9a>
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f7ff fdcb 	bl	8012a60 <listen_message_reliably>
 8012eca:	f001 f951 	bl	8014170 <uxr_millis>
 8012ece:	1b83      	subs	r3, r0, r6
 8012ed0:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8012ed4:	1ae9      	subs	r1, r5, r3
 8012ed6:	2900      	cmp	r1, #0
 8012ed8:	dcf3      	bgt.n	8012ec2 <uxr_sync_session+0x82>
 8012eda:	b013      	add	sp, #76	@ 0x4c
 8012edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	3b9aca00 	.word	0x3b9aca00
 8012ee4:	00000000 	.word	0x00000000

08012ee8 <wait_session_status>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	4604      	mov	r4, r0
 8012eee:	b09d      	sub	sp, #116	@ 0x74
 8012ef0:	20ff      	movs	r0, #255	@ 0xff
 8012ef2:	9303      	str	r3, [sp, #12]
 8012ef4:	7160      	strb	r0, [r4, #5]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 80b6 	beq.w	8013068 <wait_session_status+0x180>
 8012efc:	4689      	mov	r9, r1
 8012efe:	4692      	mov	sl, r2
 8012f00:	f04f 0b00 	mov.w	fp, #0
 8012f04:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012f06:	4652      	mov	r2, sl
 8012f08:	4649      	mov	r1, r9
 8012f0a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012f0e:	47a8      	blx	r5
 8012f10:	f001 f92e 	bl	8014170 <uxr_millis>
 8012f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012f18:	4605      	mov	r5, r0
 8012f1a:	e009      	b.n	8012f30 <wait_session_status+0x48>
 8012f1c:	f001 f928 	bl	8014170 <uxr_millis>
 8012f20:	1b40      	subs	r0, r0, r5
 8012f22:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	dd40      	ble.n	8012fac <wait_session_status+0xc4>
 8012f2a:	7960      	ldrb	r0, [r4, #5]
 8012f2c:	28ff      	cmp	r0, #255	@ 0xff
 8012f2e:	d145      	bne.n	8012fbc <wait_session_status+0xd4>
 8012f30:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012f32:	a908      	add	r1, sp, #32
 8012f34:	6896      	ldr	r6, [r2, #8]
 8012f36:	6810      	ldr	r0, [r2, #0]
 8012f38:	aa09      	add	r2, sp, #36	@ 0x24
 8012f3a:	47b0      	blx	r6
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d0ed      	beq.n	8012f1c <wait_session_status+0x34>
 8012f40:	a80c      	add	r0, sp, #48	@ 0x30
 8012f42:	2600      	movs	r6, #0
 8012f44:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012f48:	f7fe fdee 	bl	8011b28 <ucdr_init_buffer>
 8012f4c:	f10d 031e 	add.w	r3, sp, #30
 8012f50:	aa07      	add	r2, sp, #28
 8012f52:	a90c      	add	r1, sp, #48	@ 0x30
 8012f54:	4620      	mov	r0, r4
 8012f56:	f88d 601c 	strb.w	r6, [sp, #28]
 8012f5a:	f000 fa8f 	bl	801347c <uxr_read_session_header>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d0dc      	beq.n	8012f1c <wait_session_status+0x34>
 8012f62:	4631      	mov	r1, r6
 8012f64:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012f68:	f000 ffac 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012f6c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012f70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012f74:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012f78:	2f01      	cmp	r7, #1
 8012f7a:	9302      	str	r3, [sp, #8]
 8012f7c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8012f80:	d05c      	beq.n	801303c <wait_session_status+0x154>
 8012f82:	2f02      	cmp	r7, #2
 8012f84:	d020      	beq.n	8012fc8 <wait_session_status+0xe0>
 8012f86:	2f00      	cmp	r7, #0
 8012f88:	d1c8      	bne.n	8012f1c <wait_session_status+0x34>
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f000 ff99 	bl	8013ec4 <uxr_stream_id_from_raw>
 8012f92:	a90c      	add	r1, sp, #48	@ 0x30
 8012f94:	4602      	mov	r2, r0
 8012f96:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f7ff fbd7 	bl	801274c <read_submessage_list>
 8012f9e:	f001 f8e7 	bl	8014170 <uxr_millis>
 8012fa2:	1b40      	subs	r0, r0, r5
 8012fa4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	dcbe      	bgt.n	8012f2a <wait_session_status+0x42>
 8012fac:	f10b 0b01 	add.w	fp, fp, #1
 8012fb0:	9b03      	ldr	r3, [sp, #12]
 8012fb2:	7960      	ldrb	r0, [r4, #5]
 8012fb4:	455b      	cmp	r3, fp
 8012fb6:	d001      	beq.n	8012fbc <wait_session_status+0xd4>
 8012fb8:	28ff      	cmp	r0, #255	@ 0xff
 8012fba:	d0a3      	beq.n	8012f04 <wait_session_status+0x1c>
 8012fbc:	38ff      	subs	r0, #255	@ 0xff
 8012fbe:	bf18      	it	ne
 8012fc0:	2001      	movne	r0, #1
 8012fc2:	b01d      	add	sp, #116	@ 0x74
 8012fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012fcc:	4631      	mov	r1, r6
 8012fce:	f104 0008 	add.w	r0, r4, #8
 8012fd2:	9304      	str	r3, [sp, #16]
 8012fd4:	f001 f864 	bl	80140a0 <uxr_get_input_reliable_stream>
 8012fd8:	4680      	mov	r8, r0
 8012fda:	b348      	cbz	r0, 8013030 <wait_session_status+0x148>
 8012fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012fde:	a80c      	add	r0, sp, #48	@ 0x30
 8012fe0:	9205      	str	r2, [sp, #20]
 8012fe2:	f7fe fdd3 	bl	8011b8c <ucdr_buffer_remaining>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	f10d 001d 	add.w	r0, sp, #29
 8012fec:	9a05      	ldr	r2, [sp, #20]
 8012fee:	9000      	str	r0, [sp, #0]
 8012ff0:	4640      	mov	r0, r8
 8012ff2:	9902      	ldr	r1, [sp, #8]
 8012ff4:	f006 fefc 	bl	8019df0 <uxr_receive_reliable_message>
 8012ff8:	b1d0      	cbz	r0, 8013030 <wait_session_status+0x148>
 8012ffa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d03a      	beq.n	8013078 <wait_session_status+0x190>
 8013002:	9f04      	ldr	r7, [sp, #16]
 8013004:	e00a      	b.n	801301c <wait_session_status+0x134>
 8013006:	f04f 0302 	mov.w	r3, #2
 801300a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801300e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013012:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8013016:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013018:	f7ff fb98 	bl	801274c <read_submessage_list>
 801301c:	a914      	add	r1, sp, #80	@ 0x50
 801301e:	2204      	movs	r2, #4
 8013020:	4640      	mov	r0, r8
 8013022:	f006 ff67 	bl	8019ef4 <uxr_next_input_reliable_buffer_available>
 8013026:	4603      	mov	r3, r0
 8013028:	a914      	add	r1, sp, #80	@ 0x50
 801302a:	4620      	mov	r0, r4
 801302c:	2b00      	cmp	r3, #0
 801302e:	d1ea      	bne.n	8013006 <wait_session_status+0x11e>
 8013030:	4632      	mov	r2, r6
 8013032:	9904      	ldr	r1, [sp, #16]
 8013034:	4620      	mov	r0, r4
 8013036:	f7ff fa05 	bl	8012444 <write_submessage_acknack.isra.0>
 801303a:	e76f      	b.n	8012f1c <wait_session_status+0x34>
 801303c:	4631      	mov	r1, r6
 801303e:	f104 0008 	add.w	r0, r4, #8
 8013042:	f001 f823 	bl	801408c <uxr_get_input_best_effort_stream>
 8013046:	2800      	cmp	r0, #0
 8013048:	f43f af68 	beq.w	8012f1c <wait_session_status+0x34>
 801304c:	9902      	ldr	r1, [sp, #8]
 801304e:	f006 fe45 	bl	8019cdc <uxr_receive_best_effort_message>
 8013052:	2800      	cmp	r0, #0
 8013054:	f43f af62 	beq.w	8012f1c <wait_session_status+0x34>
 8013058:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801305c:	a90c      	add	r1, sp, #48	@ 0x30
 801305e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013060:	4620      	mov	r0, r4
 8013062:	f7ff fb73 	bl	801274c <read_submessage_list>
 8013066:	e759      	b.n	8012f1c <wait_session_status+0x34>
 8013068:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801306a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801306e:	47a0      	blx	r4
 8013070:	2001      	movs	r0, #1
 8013072:	b01d      	add	sp, #116	@ 0x74
 8013074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013078:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801307c:	a90c      	add	r1, sp, #48	@ 0x30
 801307e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013080:	4620      	mov	r0, r4
 8013082:	f7ff fb63 	bl	801274c <read_submessage_list>
 8013086:	e7bc      	b.n	8013002 <wait_session_status+0x11a>

08013088 <uxr_delete_session_retries>:
 8013088:	b530      	push	{r4, r5, lr}
 801308a:	b08f      	sub	sp, #60	@ 0x3c
 801308c:	4604      	mov	r4, r0
 801308e:	460d      	mov	r5, r1
 8013090:	f000 fa34 	bl	80134fc <uxr_session_header_offset>
 8013094:	2300      	movs	r3, #0
 8013096:	2210      	movs	r2, #16
 8013098:	a902      	add	r1, sp, #8
 801309a:	9000      	str	r0, [sp, #0]
 801309c:	a806      	add	r0, sp, #24
 801309e:	f7fe fd31 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 80130a2:	a906      	add	r1, sp, #24
 80130a4:	4620      	mov	r0, r4
 80130a6:	f000 f979 	bl	801339c <uxr_buffer_delete_session>
 80130aa:	2200      	movs	r2, #0
 80130ac:	9b06      	ldr	r3, [sp, #24]
 80130ae:	4620      	mov	r0, r4
 80130b0:	4611      	mov	r1, r2
 80130b2:	f000 f9cf 	bl	8013454 <uxr_stamp_session_header>
 80130b6:	a806      	add	r0, sp, #24
 80130b8:	f7fe fd64 	bl	8011b84 <ucdr_buffer_length>
 80130bc:	462b      	mov	r3, r5
 80130be:	4602      	mov	r2, r0
 80130c0:	a902      	add	r1, sp, #8
 80130c2:	4620      	mov	r0, r4
 80130c4:	f7ff ff10 	bl	8012ee8 <wait_session_status>
 80130c8:	b118      	cbz	r0, 80130d2 <uxr_delete_session_retries+0x4a>
 80130ca:	7960      	ldrb	r0, [r4, #5]
 80130cc:	fab0 f080 	clz	r0, r0
 80130d0:	0940      	lsrs	r0, r0, #5
 80130d2:	b00f      	add	sp, #60	@ 0x3c
 80130d4:	bd30      	pop	{r4, r5, pc}
 80130d6:	bf00      	nop

080130d8 <uxr_create_session>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	f100 0b08 	add.w	fp, r0, #8
 80130e0:	4604      	mov	r4, r0
 80130e2:	b0ab      	sub	sp, #172	@ 0xac
 80130e4:	4658      	mov	r0, fp
 80130e6:	465e      	mov	r6, fp
 80130e8:	f000 ff22 	bl	8013f30 <uxr_reset_stream_storage>
 80130ec:	4620      	mov	r0, r4
 80130ee:	f000 fa05 	bl	80134fc <uxr_session_header_offset>
 80130f2:	2300      	movs	r3, #0
 80130f4:	221c      	movs	r2, #28
 80130f6:	a90b      	add	r1, sp, #44	@ 0x2c
 80130f8:	9000      	str	r0, [sp, #0]
 80130fa:	a812      	add	r0, sp, #72	@ 0x48
 80130fc:	f7fe fd02 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8013100:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013102:	a912      	add	r1, sp, #72	@ 0x48
 8013104:	4620      	mov	r0, r4
 8013106:	8a1a      	ldrh	r2, [r3, #16]
 8013108:	3a04      	subs	r2, #4
 801310a:	b292      	uxth	r2, r2
 801310c:	f000 f91c 	bl	8013348 <uxr_buffer_create_session>
 8013110:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013112:	4620      	mov	r0, r4
 8013114:	f000 f98a 	bl	801342c <uxr_stamp_create_session_header>
 8013118:	a812      	add	r0, sp, #72	@ 0x48
 801311a:	f7fe fd33 	bl	8011b84 <ucdr_buffer_length>
 801311e:	23ff      	movs	r3, #255	@ 0xff
 8013120:	4681      	mov	r9, r0
 8013122:	7163      	strb	r3, [r4, #5]
 8013124:	230a      	movs	r3, #10
 8013126:	9303      	str	r3, [sp, #12]
 8013128:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801312a:	464a      	mov	r2, r9
 801312c:	a90b      	add	r1, sp, #44	@ 0x2c
 801312e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013132:	47a8      	blx	r5
 8013134:	f001 f81c 	bl	8014170 <uxr_millis>
 8013138:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801313c:	4605      	mov	r5, r0
 801313e:	e009      	b.n	8013154 <uxr_create_session+0x7c>
 8013140:	f001 f816 	bl	8014170 <uxr_millis>
 8013144:	1b40      	subs	r0, r0, r5
 8013146:	7962      	ldrb	r2, [r4, #5]
 8013148:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801314c:	2b00      	cmp	r3, #0
 801314e:	dd38      	ble.n	80131c2 <uxr_create_session+0xea>
 8013150:	2aff      	cmp	r2, #255	@ 0xff
 8013152:	d13c      	bne.n	80131ce <uxr_create_session+0xf6>
 8013154:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013156:	a907      	add	r1, sp, #28
 8013158:	6897      	ldr	r7, [r2, #8]
 801315a:	6810      	ldr	r0, [r2, #0]
 801315c:	aa08      	add	r2, sp, #32
 801315e:	47b8      	blx	r7
 8013160:	2800      	cmp	r0, #0
 8013162:	d0ed      	beq.n	8013140 <uxr_create_session+0x68>
 8013164:	a81a      	add	r0, sp, #104	@ 0x68
 8013166:	2700      	movs	r7, #0
 8013168:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801316c:	f7fe fcdc 	bl	8011b28 <ucdr_init_buffer>
 8013170:	f10d 031a 	add.w	r3, sp, #26
 8013174:	aa06      	add	r2, sp, #24
 8013176:	a91a      	add	r1, sp, #104	@ 0x68
 8013178:	4620      	mov	r0, r4
 801317a:	f88d 7018 	strb.w	r7, [sp, #24]
 801317e:	f000 f97d 	bl	801347c <uxr_read_session_header>
 8013182:	2800      	cmp	r0, #0
 8013184:	d0dc      	beq.n	8013140 <uxr_create_session+0x68>
 8013186:	4639      	mov	r1, r7
 8013188:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801318c:	f000 fe9a 	bl	8013ec4 <uxr_stream_id_from_raw>
 8013190:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013194:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8013198:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801319c:	2f01      	cmp	r7, #1
 801319e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80131a2:	d053      	beq.n	801324c <uxr_create_session+0x174>
 80131a4:	2f02      	cmp	r7, #2
 80131a6:	d018      	beq.n	80131da <uxr_create_session+0x102>
 80131a8:	2f00      	cmp	r7, #0
 80131aa:	d1c9      	bne.n	8013140 <uxr_create_session+0x68>
 80131ac:	4639      	mov	r1, r7
 80131ae:	4638      	mov	r0, r7
 80131b0:	f000 fe88 	bl	8013ec4 <uxr_stream_id_from_raw>
 80131b4:	a91a      	add	r1, sp, #104	@ 0x68
 80131b6:	4602      	mov	r2, r0
 80131b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80131ba:	4620      	mov	r0, r4
 80131bc:	f7ff fac6 	bl	801274c <read_submessage_list>
 80131c0:	e7be      	b.n	8013140 <uxr_create_session+0x68>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	3b01      	subs	r3, #1
 80131c6:	9303      	str	r3, [sp, #12]
 80131c8:	d001      	beq.n	80131ce <uxr_create_session+0xf6>
 80131ca:	2aff      	cmp	r2, #255	@ 0xff
 80131cc:	d0ac      	beq.n	8013128 <uxr_create_session+0x50>
 80131ce:	2a00      	cmp	r2, #0
 80131d0:	d051      	beq.n	8013276 <uxr_create_session+0x19e>
 80131d2:	2000      	movs	r0, #0
 80131d4:	b02b      	add	sp, #172	@ 0xac
 80131d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131da:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80131de:	4641      	mov	r1, r8
 80131e0:	4630      	mov	r0, r6
 80131e2:	9304      	str	r3, [sp, #16]
 80131e4:	f000 ff5c 	bl	80140a0 <uxr_get_input_reliable_stream>
 80131e8:	4682      	mov	sl, r0
 80131ea:	b348      	cbz	r0, 8013240 <uxr_create_session+0x168>
 80131ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80131ee:	a81a      	add	r0, sp, #104	@ 0x68
 80131f0:	9205      	str	r2, [sp, #20]
 80131f2:	f7fe fccb 	bl	8011b8c <ucdr_buffer_remaining>
 80131f6:	4603      	mov	r3, r0
 80131f8:	f10d 0019 	add.w	r0, sp, #25
 80131fc:	9a05      	ldr	r2, [sp, #20]
 80131fe:	4659      	mov	r1, fp
 8013200:	9000      	str	r0, [sp, #0]
 8013202:	4650      	mov	r0, sl
 8013204:	f006 fdf4 	bl	8019df0 <uxr_receive_reliable_message>
 8013208:	b1d0      	cbz	r0, 8013240 <uxr_create_session+0x168>
 801320a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d038      	beq.n	8013284 <uxr_create_session+0x1ac>
 8013212:	9f04      	ldr	r7, [sp, #16]
 8013214:	e00a      	b.n	801322c <uxr_create_session+0x154>
 8013216:	f04f 0302 	mov.w	r3, #2
 801321a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801321e:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8013222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013226:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013228:	f7ff fa90 	bl	801274c <read_submessage_list>
 801322c:	a922      	add	r1, sp, #136	@ 0x88
 801322e:	2204      	movs	r2, #4
 8013230:	4650      	mov	r0, sl
 8013232:	f006 fe5f 	bl	8019ef4 <uxr_next_input_reliable_buffer_available>
 8013236:	4603      	mov	r3, r0
 8013238:	a922      	add	r1, sp, #136	@ 0x88
 801323a:	4620      	mov	r0, r4
 801323c:	2b00      	cmp	r3, #0
 801323e:	d1ea      	bne.n	8013216 <uxr_create_session+0x13e>
 8013240:	4642      	mov	r2, r8
 8013242:	9904      	ldr	r1, [sp, #16]
 8013244:	4620      	mov	r0, r4
 8013246:	f7ff f8fd 	bl	8012444 <write_submessage_acknack.isra.0>
 801324a:	e779      	b.n	8013140 <uxr_create_session+0x68>
 801324c:	4641      	mov	r1, r8
 801324e:	4630      	mov	r0, r6
 8013250:	f000 ff1c 	bl	801408c <uxr_get_input_best_effort_stream>
 8013254:	2800      	cmp	r0, #0
 8013256:	f43f af73 	beq.w	8013140 <uxr_create_session+0x68>
 801325a:	4659      	mov	r1, fp
 801325c:	f006 fd3e 	bl	8019cdc <uxr_receive_best_effort_message>
 8013260:	2800      	cmp	r0, #0
 8013262:	f43f af6d 	beq.w	8013140 <uxr_create_session+0x68>
 8013266:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801326a:	a91a      	add	r1, sp, #104	@ 0x68
 801326c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801326e:	4620      	mov	r0, r4
 8013270:	f7ff fa6c 	bl	801274c <read_submessage_list>
 8013274:	e764      	b.n	8013140 <uxr_create_session+0x68>
 8013276:	4630      	mov	r0, r6
 8013278:	f000 fe5a 	bl	8013f30 <uxr_reset_stream_storage>
 801327c:	2001      	movs	r0, #1
 801327e:	b02b      	add	sp, #172	@ 0xac
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8013288:	a91a      	add	r1, sp, #104	@ 0x68
 801328a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801328c:	4620      	mov	r0, r4
 801328e:	f7ff fa5d 	bl	801274c <read_submessage_list>
 8013292:	e7be      	b.n	8013212 <uxr_create_session+0x13a>

08013294 <uxr_prepare_stream_to_write_submessage>:
 8013294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	4604      	mov	r4, r0
 801329c:	4610      	mov	r0, r2
 801329e:	4615      	mov	r5, r2
 80132a0:	461e      	mov	r6, r3
 80132a2:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80132a6:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80132aa:	f105 0904 	add.w	r9, r5, #4
 80132ae:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80132b2:	9101      	str	r1, [sp, #4]
 80132b4:	f000 ff56 	bl	8014164 <uxr_submessage_padding>
 80132b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80132bc:	4481      	add	r9, r0
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d01d      	beq.n	80132fe <uxr_prepare_stream_to_write_submessage+0x6a>
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d116      	bne.n	80132f4 <uxr_prepare_stream_to_write_submessage+0x60>
 80132c6:	f104 0008 	add.w	r0, r4, #8
 80132ca:	4651      	mov	r1, sl
 80132cc:	f000 fed2 	bl	8014074 <uxr_get_output_reliable_stream>
 80132d0:	4604      	mov	r4, r0
 80132d2:	b158      	cbz	r0, 80132ec <uxr_prepare_stream_to_write_submessage+0x58>
 80132d4:	4649      	mov	r1, r9
 80132d6:	4632      	mov	r2, r6
 80132d8:	f006 ffd0 	bl	801a27c <uxr_prepare_reliable_buffer_to_write>
 80132dc:	4604      	mov	r4, r0
 80132de:	b12c      	cbz	r4, 80132ec <uxr_prepare_stream_to_write_submessage+0x58>
 80132e0:	4643      	mov	r3, r8
 80132e2:	b2aa      	uxth	r2, r5
 80132e4:	4639      	mov	r1, r7
 80132e6:	4630      	mov	r0, r6
 80132e8:	f000 fefc 	bl	80140e4 <uxr_buffer_submessage_header>
 80132ec:	4620      	mov	r0, r4
 80132ee:	b002      	add	sp, #8
 80132f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f4:	2400      	movs	r4, #0
 80132f6:	4620      	mov	r0, r4
 80132f8:	b002      	add	sp, #8
 80132fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132fe:	f104 0008 	add.w	r0, r4, #8
 8013302:	4651      	mov	r1, sl
 8013304:	f000 feae 	bl	8014064 <uxr_get_output_best_effort_stream>
 8013308:	4604      	mov	r4, r0
 801330a:	2800      	cmp	r0, #0
 801330c:	d0ee      	beq.n	80132ec <uxr_prepare_stream_to_write_submessage+0x58>
 801330e:	4649      	mov	r1, r9
 8013310:	4632      	mov	r2, r6
 8013312:	f006 fedf 	bl	801a0d4 <uxr_prepare_best_effort_buffer_to_write>
 8013316:	4604      	mov	r4, r0
 8013318:	e7e1      	b.n	80132de <uxr_prepare_stream_to_write_submessage+0x4a>
 801331a:	bf00      	nop

0801331c <uxr_init_session_info>:
 801331c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8013320:	23ff      	movs	r3, #255	@ 0xff
 8013322:	7102      	strb	r2, [r0, #4]
 8013324:	f880 c001 	strb.w	ip, [r0, #1]
 8013328:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801332c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013330:	7001      	strb	r1, [r0, #0]
 8013332:	f880 c002 	strb.w	ip, [r0, #2]
 8013336:	7143      	strb	r3, [r0, #5]
 8013338:	70c2      	strb	r2, [r0, #3]
 801333a:	b500      	push	{lr}
 801333c:	f04f 0e09 	mov.w	lr, #9
 8013340:	f8a0 e006 	strh.w	lr, [r0, #6]
 8013344:	f85d fb04 	ldr.w	pc, [sp], #4

08013348 <uxr_buffer_create_session>:
 8013348:	b530      	push	{r4, r5, lr}
 801334a:	2300      	movs	r3, #0
 801334c:	b089      	sub	sp, #36	@ 0x24
 801334e:	4d12      	ldr	r5, [pc, #72]	@ (8013398 <uxr_buffer_create_session+0x50>)
 8013350:	460c      	mov	r4, r1
 8013352:	9307      	str	r3, [sp, #28]
 8013354:	4619      	mov	r1, r3
 8013356:	f8ad 201c 	strh.w	r2, [sp, #28]
 801335a:	2201      	movs	r2, #1
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	80c2      	strh	r2, [r0, #6]
 8013360:	f88d 2004 	strb.w	r2, [sp, #4]
 8013364:	682a      	ldr	r2, [r5, #0]
 8013366:	9303      	str	r3, [sp, #12]
 8013368:	9200      	str	r2, [sp, #0]
 801336a:	88aa      	ldrh	r2, [r5, #4]
 801336c:	9306      	str	r3, [sp, #24]
 801336e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013372:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8013376:	9202      	str	r2, [sp, #8]
 8013378:	7802      	ldrb	r2, [r0, #0]
 801337a:	4620      	mov	r0, r4
 801337c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013380:	2210      	movs	r2, #16
 8013382:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013386:	f000 fead 	bl	80140e4 <uxr_buffer_submessage_header>
 801338a:	4669      	mov	r1, sp
 801338c:	4620      	mov	r0, r4
 801338e:	f001 fdff 	bl	8014f90 <uxr_serialize_CREATE_CLIENT_Payload>
 8013392:	b009      	add	sp, #36	@ 0x24
 8013394:	bd30      	pop	{r4, r5, pc}
 8013396:	bf00      	nop
 8013398:	0801c818 	.word	0x0801c818

0801339c <uxr_buffer_delete_session>:
 801339c:	4a0c      	ldr	r2, [pc, #48]	@ (80133d0 <uxr_buffer_delete_session+0x34>)
 801339e:	2302      	movs	r3, #2
 80133a0:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80133a4:	b510      	push	{r4, lr}
 80133a6:	460c      	mov	r4, r1
 80133a8:	b082      	sub	sp, #8
 80133aa:	8911      	ldrh	r1, [r2, #8]
 80133ac:	2204      	movs	r2, #4
 80133ae:	80c3      	strh	r3, [r0, #6]
 80133b0:	2300      	movs	r3, #0
 80133b2:	f8ad 1006 	strh.w	r1, [sp, #6]
 80133b6:	4620      	mov	r0, r4
 80133b8:	2103      	movs	r1, #3
 80133ba:	f8ad c004 	strh.w	ip, [sp, #4]
 80133be:	f000 fe91 	bl	80140e4 <uxr_buffer_submessage_header>
 80133c2:	a901      	add	r1, sp, #4
 80133c4:	4620      	mov	r0, r4
 80133c6:	f001 fe8b 	bl	80150e0 <uxr_serialize_DELETE_Payload>
 80133ca:	b002      	add	sp, #8
 80133cc:	bd10      	pop	{r4, pc}
 80133ce:	bf00      	nop
 80133d0:	0801c818 	.word	0x0801c818

080133d4 <uxr_read_create_session_status>:
 80133d4:	b510      	push	{r4, lr}
 80133d6:	460b      	mov	r3, r1
 80133d8:	b088      	sub	sp, #32
 80133da:	4604      	mov	r4, r0
 80133dc:	a901      	add	r1, sp, #4
 80133de:	4618      	mov	r0, r3
 80133e0:	f001 fe8e 	bl	8015100 <uxr_deserialize_STATUS_AGENT_Payload>
 80133e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80133e8:	7163      	strb	r3, [r4, #5]
 80133ea:	b008      	add	sp, #32
 80133ec:	bd10      	pop	{r4, pc}
 80133ee:	bf00      	nop

080133f0 <uxr_read_delete_session_status>:
 80133f0:	b510      	push	{r4, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	4604      	mov	r4, r0
 80133f6:	4608      	mov	r0, r1
 80133f8:	a902      	add	r1, sp, #8
 80133fa:	f001 feb1 	bl	8015160 <uxr_deserialize_STATUS_Payload>
 80133fe:	88e3      	ldrh	r3, [r4, #6]
 8013400:	2b02      	cmp	r3, #2
 8013402:	d001      	beq.n	8013408 <uxr_read_delete_session_status+0x18>
 8013404:	b004      	add	sp, #16
 8013406:	bd10      	pop	{r4, pc}
 8013408:	f10d 000a 	add.w	r0, sp, #10
 801340c:	f7fe feaa 	bl	8012164 <uxr_object_id_from_raw>
 8013410:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013414:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013418:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801341c:	b29b      	uxth	r3, r3
 801341e:	2b02      	cmp	r3, #2
 8013420:	d1f0      	bne.n	8013404 <uxr_read_delete_session_status+0x14>
 8013422:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013426:	7163      	strb	r3, [r4, #5]
 8013428:	e7ec      	b.n	8013404 <uxr_read_delete_session_status+0x14>
 801342a:	bf00      	nop

0801342c <uxr_stamp_create_session_header>:
 801342c:	b510      	push	{r4, lr}
 801342e:	2208      	movs	r2, #8
 8013430:	b08a      	sub	sp, #40	@ 0x28
 8013432:	4604      	mov	r4, r0
 8013434:	eb0d 0002 	add.w	r0, sp, r2
 8013438:	f7fe fb76 	bl	8011b28 <ucdr_init_buffer>
 801343c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013440:	2300      	movs	r3, #0
 8013442:	a802      	add	r0, sp, #8
 8013444:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013448:	9400      	str	r4, [sp, #0]
 801344a:	461a      	mov	r2, r3
 801344c:	f001 f846 	bl	80144dc <uxr_serialize_message_header>
 8013450:	b00a      	add	sp, #40	@ 0x28
 8013452:	bd10      	pop	{r4, pc}

08013454 <uxr_stamp_session_header>:
 8013454:	b530      	push	{r4, r5, lr}
 8013456:	b08d      	sub	sp, #52	@ 0x34
 8013458:	4604      	mov	r4, r0
 801345a:	460d      	mov	r5, r1
 801345c:	4619      	mov	r1, r3
 801345e:	a804      	add	r0, sp, #16
 8013460:	9203      	str	r2, [sp, #12]
 8013462:	2208      	movs	r2, #8
 8013464:	f7fe fb60 	bl	8011b28 <ucdr_init_buffer>
 8013468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801346c:	9b03      	ldr	r3, [sp, #12]
 801346e:	462a      	mov	r2, r5
 8013470:	a804      	add	r0, sp, #16
 8013472:	9400      	str	r4, [sp, #0]
 8013474:	f001 f832 	bl	80144dc <uxr_serialize_message_header>
 8013478:	b00d      	add	sp, #52	@ 0x34
 801347a:	bd30      	pop	{r4, r5, pc}

0801347c <uxr_read_session_header>:
 801347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013480:	4607      	mov	r7, r0
 8013482:	b084      	sub	sp, #16
 8013484:	4608      	mov	r0, r1
 8013486:	460c      	mov	r4, r1
 8013488:	4615      	mov	r5, r2
 801348a:	461e      	mov	r6, r3
 801348c:	f7fe fb7e 	bl	8011b8c <ucdr_buffer_remaining>
 8013490:	2808      	cmp	r0, #8
 8013492:	d803      	bhi.n	801349c <uxr_read_session_header+0x20>
 8013494:	2000      	movs	r0, #0
 8013496:	b004      	add	sp, #16
 8013498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801349c:	f10d 080c 	add.w	r8, sp, #12
 80134a0:	4633      	mov	r3, r6
 80134a2:	462a      	mov	r2, r5
 80134a4:	4620      	mov	r0, r4
 80134a6:	f10d 010b 	add.w	r1, sp, #11
 80134aa:	f8cd 8000 	str.w	r8, [sp]
 80134ae:	f001 f833 	bl	8014518 <uxr_deserialize_message_header>
 80134b2:	783a      	ldrb	r2, [r7, #0]
 80134b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d1eb      	bne.n	8013494 <uxr_read_session_header+0x18>
 80134bc:	061b      	lsls	r3, r3, #24
 80134be:	d41b      	bmi.n	80134f8 <uxr_read_session_header+0x7c>
 80134c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80134c4:	787b      	ldrb	r3, [r7, #1]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d003      	beq.n	80134d2 <uxr_read_session_header+0x56>
 80134ca:	2001      	movs	r0, #1
 80134cc:	f080 0001 	eor.w	r0, r0, #1
 80134d0:	e7e1      	b.n	8013496 <uxr_read_session_header+0x1a>
 80134d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80134d6:	1cb8      	adds	r0, r7, #2
 80134d8:	78bb      	ldrb	r3, [r7, #2]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d1f5      	bne.n	80134ca <uxr_read_session_header+0x4e>
 80134de:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80134e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d1ef      	bne.n	80134ca <uxr_read_session_header+0x4e>
 80134ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80134ee:	7843      	ldrb	r3, [r0, #1]
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d1ea      	bne.n	80134ca <uxr_read_session_header+0x4e>
 80134f4:	2000      	movs	r0, #0
 80134f6:	e7e9      	b.n	80134cc <uxr_read_session_header+0x50>
 80134f8:	2001      	movs	r0, #1
 80134fa:	e7cc      	b.n	8013496 <uxr_read_session_header+0x1a>

080134fc <uxr_session_header_offset>:
 80134fc:	f990 3000 	ldrsb.w	r3, [r0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	bfac      	ite	ge
 8013504:	2008      	movge	r0, #8
 8013506:	2004      	movlt	r0, #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop

0801350c <uxr_init_base_object_request>:
 801350c:	b510      	push	{r4, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013514:	9101      	str	r1, [sp, #4]
 8013516:	88c3      	ldrh	r3, [r0, #6]
 8013518:	f1a3 010a 	sub.w	r1, r3, #10
 801351c:	b289      	uxth	r1, r1
 801351e:	42a1      	cmp	r1, r4
 8013520:	d80f      	bhi.n	8013542 <uxr_init_base_object_request+0x36>
 8013522:	3301      	adds	r3, #1
 8013524:	b29c      	uxth	r4, r3
 8013526:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801352a:	b2db      	uxtb	r3, r3
 801352c:	80c4      	strh	r4, [r0, #6]
 801352e:	1c91      	adds	r1, r2, #2
 8013530:	9801      	ldr	r0, [sp, #4]
 8013532:	f882 c000 	strb.w	ip, [r2]
 8013536:	7053      	strb	r3, [r2, #1]
 8013538:	f7fe fe28 	bl	801218c <uxr_object_id_to_raw>
 801353c:	4620      	mov	r0, r4
 801353e:	b002      	add	sp, #8
 8013540:	bd10      	pop	{r4, pc}
 8013542:	230a      	movs	r3, #10
 8013544:	f04f 0c00 	mov.w	ip, #0
 8013548:	461c      	mov	r4, r3
 801354a:	e7ef      	b.n	801352c <uxr_init_base_object_request+0x20>

0801354c <uxr_parse_base_object_request>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	4604      	mov	r4, r0
 8013550:	3002      	adds	r0, #2
 8013552:	460d      	mov	r5, r1
 8013554:	4616      	mov	r6, r2
 8013556:	f7fe fe05 	bl	8012164 <uxr_object_id_from_raw>
 801355a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801355e:	8028      	strh	r0, [r5, #0]
 8013560:	806b      	strh	r3, [r5, #2]
 8013562:	7822      	ldrb	r2, [r4, #0]
 8013564:	7863      	ldrb	r3, [r4, #1]
 8013566:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801356a:	8033      	strh	r3, [r6, #0]
 801356c:	bd70      	pop	{r4, r5, r6, pc}
 801356e:	bf00      	nop

08013570 <uxr_init_framing_io>:
 8013570:	2300      	movs	r3, #0
 8013572:	7041      	strb	r1, [r0, #1]
 8013574:	7003      	strb	r3, [r0, #0]
 8013576:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <uxr_write_framed_msg>:
 801357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	4617      	mov	r7, r2
 8013582:	7842      	ldrb	r2, [r0, #1]
 8013584:	460e      	mov	r6, r1
 8013586:	b083      	sub	sp, #12
 8013588:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801358c:	469b      	mov	fp, r3
 801358e:	237e      	movs	r3, #126	@ 0x7e
 8013590:	4604      	mov	r4, r0
 8013592:	2901      	cmp	r1, #1
 8013594:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8013598:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801359c:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80135a0:	f240 8115 	bls.w	80137ce <uxr_write_framed_msg+0x252>
 80135a4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80135a8:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80135ac:	2202      	movs	r2, #2
 80135ae:	2901      	cmp	r1, #1
 80135b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80135b4:	d952      	bls.n	801365c <uxr_write_framed_msg+0xe0>
 80135b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135b8:	2103      	movs	r1, #3
 80135ba:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80135be:	b2dd      	uxtb	r5, r3
 80135c0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80135c4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80135c8:	2a01      	cmp	r2, #1
 80135ca:	d95c      	bls.n	8013686 <uxr_write_framed_msg+0x10a>
 80135cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135ce:	1862      	adds	r2, r4, r1
 80135d0:	3101      	adds	r1, #1
 80135d2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80135d6:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80135da:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80135de:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80135e2:	2a01      	cmp	r2, #1
 80135e4:	d961      	bls.n	80136aa <uxr_write_framed_msg+0x12e>
 80135e6:	1c4a      	adds	r2, r1, #1
 80135e8:	4421      	add	r1, r4
 80135ea:	b2d2      	uxtb	r2, r2
 80135ec:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80135f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d06a      	beq.n	80136ce <uxr_write_framed_msg+0x152>
 80135f8:	f04f 0800 	mov.w	r8, #0
 80135fc:	46c1      	mov	r9, r8
 80135fe:	e016      	b.n	801362e <uxr_write_framed_msg+0xb2>
 8013600:	2a29      	cmp	r2, #41	@ 0x29
 8013602:	d868      	bhi.n	80136d6 <uxr_write_framed_msg+0x15a>
 8013604:	18a0      	adds	r0, r4, r2
 8013606:	3201      	adds	r2, #1
 8013608:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801360c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013610:	ea88 0101 	eor.w	r1, r8, r1
 8013614:	4b7d      	ldr	r3, [pc, #500]	@ (801380c <uxr_write_framed_msg+0x290>)
 8013616:	f109 0901 	add.w	r9, r9, #1
 801361a:	b2c9      	uxtb	r1, r1
 801361c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8013620:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8013624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013626:	454b      	cmp	r3, r9
 8013628:	d969      	bls.n	80136fe <uxr_write_framed_msg+0x182>
 801362a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801362e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8013632:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013636:	2801      	cmp	r0, #1
 8013638:	d8e2      	bhi.n	8013600 <uxr_write_framed_msg+0x84>
 801363a:	1c50      	adds	r0, r2, #1
 801363c:	b2c0      	uxtb	r0, r0
 801363e:	2829      	cmp	r0, #41	@ 0x29
 8013640:	d849      	bhi.n	80136d6 <uxr_write_framed_msg+0x15a>
 8013642:	18a0      	adds	r0, r4, r2
 8013644:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013648:	3202      	adds	r2, #2
 801364a:	f081 0520 	eor.w	r5, r1, #32
 801364e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013652:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013656:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801365a:	e7d9      	b.n	8013610 <uxr_write_framed_msg+0x94>
 801365c:	2104      	movs	r1, #4
 801365e:	f04f 0c03 	mov.w	ip, #3
 8013662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013664:	4422      	add	r2, r4
 8013666:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801366a:	44a4      	add	ip, r4
 801366c:	b2dd      	uxtb	r5, r3
 801366e:	f080 0020 	eor.w	r0, r0, #32
 8013672:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8013676:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801367a:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801367e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013682:	2a01      	cmp	r2, #1
 8013684:	d8a2      	bhi.n	80135cc <uxr_write_framed_msg+0x50>
 8013686:	1862      	adds	r2, r4, r1
 8013688:	207d      	movs	r0, #125	@ 0x7d
 801368a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801368c:	f085 0520 	eor.w	r5, r5, #32
 8013690:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8013694:	3102      	adds	r1, #2
 8013696:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801369a:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801369e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80136a2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80136a6:	2a01      	cmp	r2, #1
 80136a8:	d89d      	bhi.n	80135e6 <uxr_write_framed_msg+0x6a>
 80136aa:	1c4d      	adds	r5, r1, #1
 80136ac:	1c8a      	adds	r2, r1, #2
 80136ae:	f080 0020 	eor.w	r0, r0, #32
 80136b2:	4421      	add	r1, r4
 80136b4:	fa54 f585 	uxtab	r5, r4, r5
 80136b8:	b2d2      	uxtb	r2, r2
 80136ba:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80136be:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80136c2:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80136c6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d194      	bne.n	80135f8 <uxr_write_framed_msg+0x7c>
 80136ce:	4619      	mov	r1, r3
 80136d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80136d4:	e019      	b.n	801370a <uxr_write_framed_msg+0x18e>
 80136d6:	2500      	movs	r5, #0
 80136d8:	e000      	b.n	80136dc <uxr_write_framed_msg+0x160>
 80136da:	b160      	cbz	r0, 80136f6 <uxr_write_framed_msg+0x17a>
 80136dc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80136e0:	1b52      	subs	r2, r2, r5
 80136e2:	4653      	mov	r3, sl
 80136e4:	4638      	mov	r0, r7
 80136e6:	4421      	add	r1, r4
 80136e8:	47b0      	blx	r6
 80136ea:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80136ee:	4405      	add	r5, r0
 80136f0:	4295      	cmp	r5, r2
 80136f2:	d3f2      	bcc.n	80136da <uxr_write_framed_msg+0x15e>
 80136f4:	d066      	beq.n	80137c4 <uxr_write_framed_msg+0x248>
 80136f6:	2000      	movs	r0, #0
 80136f8:	b003      	add	sp, #12
 80136fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136fe:	fa5f f188 	uxtb.w	r1, r8
 8013702:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013706:	f8ad 8004 	strh.w	r8, [sp, #4]
 801370a:	f04f 0900 	mov.w	r9, #0
 801370e:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8013712:	46c8      	mov	r8, r9
 8013714:	e013      	b.n	801373e <uxr_write_framed_msg+0x1c2>
 8013716:	2a29      	cmp	r2, #41	@ 0x29
 8013718:	d824      	bhi.n	8013764 <uxr_write_framed_msg+0x1e8>
 801371a:	18a3      	adds	r3, r4, r2
 801371c:	3201      	adds	r2, #1
 801371e:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8013722:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013726:	f109 0901 	add.w	r9, r9, #1
 801372a:	f1b9 0f02 	cmp.w	r9, #2
 801372e:	d02d      	beq.n	801378c <uxr_write_framed_msg+0x210>
 8013730:	f109 0308 	add.w	r3, r9, #8
 8013734:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013738:	446b      	add	r3, sp
 801373a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801373e:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8013742:	2b01      	cmp	r3, #1
 8013744:	d8e7      	bhi.n	8013716 <uxr_write_framed_msg+0x19a>
 8013746:	1c53      	adds	r3, r2, #1
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b29      	cmp	r3, #41	@ 0x29
 801374c:	d80a      	bhi.n	8013764 <uxr_write_framed_msg+0x1e8>
 801374e:	18a3      	adds	r3, r4, r2
 8013750:	f081 0120 	eor.w	r1, r1, #32
 8013754:	3202      	adds	r2, #2
 8013756:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801375a:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801375e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013762:	e7e0      	b.n	8013726 <uxr_write_framed_msg+0x1aa>
 8013764:	2500      	movs	r5, #0
 8013766:	e001      	b.n	801376c <uxr_write_framed_msg+0x1f0>
 8013768:	2800      	cmp	r0, #0
 801376a:	d0c4      	beq.n	80136f6 <uxr_write_framed_msg+0x17a>
 801376c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013770:	1b52      	subs	r2, r2, r5
 8013772:	4653      	mov	r3, sl
 8013774:	4638      	mov	r0, r7
 8013776:	4421      	add	r1, r4
 8013778:	47b0      	blx	r6
 801377a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801377e:	4405      	add	r5, r0
 8013780:	4295      	cmp	r5, r2
 8013782:	d3f1      	bcc.n	8013768 <uxr_write_framed_msg+0x1ec>
 8013784:	d1b7      	bne.n	80136f6 <uxr_write_framed_msg+0x17a>
 8013786:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801378a:	e7d1      	b.n	8013730 <uxr_write_framed_msg+0x1b4>
 801378c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013790:	b19a      	cbz	r2, 80137ba <uxr_write_framed_msg+0x23e>
 8013792:	2500      	movs	r5, #0
 8013794:	e001      	b.n	801379a <uxr_write_framed_msg+0x21e>
 8013796:	2800      	cmp	r0, #0
 8013798:	d0ad      	beq.n	80136f6 <uxr_write_framed_msg+0x17a>
 801379a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801379e:	1b52      	subs	r2, r2, r5
 80137a0:	4653      	mov	r3, sl
 80137a2:	4638      	mov	r0, r7
 80137a4:	4421      	add	r1, r4
 80137a6:	47b0      	blx	r6
 80137a8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80137ac:	4405      	add	r5, r0
 80137ae:	4295      	cmp	r5, r2
 80137b0:	d3f1      	bcc.n	8013796 <uxr_write_framed_msg+0x21a>
 80137b2:	d1a0      	bne.n	80136f6 <uxr_write_framed_msg+0x17a>
 80137b4:	2300      	movs	r3, #0
 80137b6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80137ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137bc:	b298      	uxth	r0, r3
 80137be:	b003      	add	sp, #12
 80137c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c4:	f04f 0300 	mov.w	r3, #0
 80137c8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80137cc:	e72a      	b.n	8013624 <uxr_write_framed_msg+0xa8>
 80137ce:	217d      	movs	r1, #125	@ 0x7d
 80137d0:	f082 0220 	eor.w	r2, r2, #32
 80137d4:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80137d8:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80137dc:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80137e0:	2203      	movs	r2, #3
 80137e2:	2901      	cmp	r1, #1
 80137e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80137e8:	d803      	bhi.n	80137f2 <uxr_write_framed_msg+0x276>
 80137ea:	2105      	movs	r1, #5
 80137ec:	f04f 0c04 	mov.w	ip, #4
 80137f0:	e737      	b.n	8013662 <uxr_write_framed_msg+0xe6>
 80137f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137f4:	2104      	movs	r1, #4
 80137f6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80137fa:	b2dd      	uxtb	r5, r3
 80137fc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013800:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013804:	2a01      	cmp	r2, #1
 8013806:	f63f aee1 	bhi.w	80135cc <uxr_write_framed_msg+0x50>
 801380a:	e73c      	b.n	8013686 <uxr_write_framed_msg+0x10a>
 801380c:	0801cbe8 	.word	0x0801cbe8

08013810 <uxr_framing_read_transport>:
 8013810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013814:	4604      	mov	r4, r0
 8013816:	b085      	sub	sp, #20
 8013818:	4692      	mov	sl, r2
 801381a:	4689      	mov	r9, r1
 801381c:	461d      	mov	r5, r3
 801381e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8013820:	f000 fca6 	bl	8014170 <uxr_millis>
 8013824:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013828:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801382c:	4680      	mov	r8, r0
 801382e:	42ba      	cmp	r2, r7
 8013830:	d05f      	beq.n	80138f2 <uxr_framing_read_transport+0xe2>
 8013832:	d817      	bhi.n	8013864 <uxr_framing_read_transport+0x54>
 8013834:	3f01      	subs	r7, #1
 8013836:	1aba      	subs	r2, r7, r2
 8013838:	2700      	movs	r7, #0
 801383a:	b2d2      	uxtb	r2, r2
 801383c:	42b2      	cmp	r2, r6
 801383e:	d81a      	bhi.n	8013876 <uxr_framing_read_transport+0x66>
 8013840:	19d3      	adds	r3, r2, r7
 8013842:	42b3      	cmp	r3, r6
 8013844:	d852      	bhi.n	80138ec <uxr_framing_read_transport+0xdc>
 8013846:	b9d2      	cbnz	r2, 801387e <uxr_framing_read_transport+0x6e>
 8013848:	2600      	movs	r6, #0
 801384a:	f000 fc91 	bl	8014170 <uxr_millis>
 801384e:	682b      	ldr	r3, [r5, #0]
 8013850:	eba0 0008 	sub.w	r0, r0, r8
 8013854:	1a1b      	subs	r3, r3, r0
 8013856:	4630      	mov	r0, r6
 8013858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801385c:	602b      	str	r3, [r5, #0]
 801385e:	b005      	add	sp, #20
 8013860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013864:	2f00      	cmp	r7, #0
 8013866:	d060      	beq.n	801392a <uxr_framing_read_transport+0x11a>
 8013868:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801386c:	3f01      	subs	r7, #1
 801386e:	b2d2      	uxtb	r2, r2
 8013870:	b2ff      	uxtb	r7, r7
 8013872:	42b2      	cmp	r2, r6
 8013874:	d9e4      	bls.n	8013840 <uxr_framing_read_transport+0x30>
 8013876:	b2f2      	uxtb	r2, r6
 8013878:	2700      	movs	r7, #0
 801387a:	2a00      	cmp	r2, #0
 801387c:	d0e4      	beq.n	8013848 <uxr_framing_read_transport+0x38>
 801387e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013880:	4650      	mov	r0, sl
 8013882:	9203      	str	r2, [sp, #12]
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	3102      	adds	r1, #2
 801388e:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8013934 <uxr_framing_read_transport+0x124>
 8013892:	4421      	add	r1, r4
 8013894:	47c8      	blx	r9
 8013896:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801389a:	4606      	mov	r6, r0
 801389c:	4403      	add	r3, r0
 801389e:	0859      	lsrs	r1, r3, #1
 80138a0:	fbab 2101 	umull	r2, r1, fp, r1
 80138a4:	222a      	movs	r2, #42	@ 0x2a
 80138a6:	0889      	lsrs	r1, r1, #2
 80138a8:	fb02 3111 	mls	r1, r2, r1, r3
 80138ac:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d0c9      	beq.n	8013848 <uxr_framing_read_transport+0x38>
 80138b4:	9a03      	ldr	r2, [sp, #12]
 80138b6:	4290      	cmp	r0, r2
 80138b8:	d1c7      	bne.n	801384a <uxr_framing_read_transport+0x3a>
 80138ba:	2f00      	cmp	r7, #0
 80138bc:	d0c5      	beq.n	801384a <uxr_framing_read_transport+0x3a>
 80138be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138c0:	3102      	adds	r1, #2
 80138c2:	463a      	mov	r2, r7
 80138c4:	4650      	mov	r0, sl
 80138c6:	4421      	add	r1, r4
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	2300      	movs	r3, #0
 80138cc:	47c8      	blx	r9
 80138ce:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80138d2:	4406      	add	r6, r0
 80138d4:	1813      	adds	r3, r2, r0
 80138d6:	085a      	lsrs	r2, r3, #1
 80138d8:	fbab 1b02 	umull	r1, fp, fp, r2
 80138dc:	222a      	movs	r2, #42	@ 0x2a
 80138de:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80138e2:	fb02 331b 	mls	r3, r2, fp, r3
 80138e6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80138ea:	e7ae      	b.n	801384a <uxr_framing_read_transport+0x3a>
 80138ec:	1ab6      	subs	r6, r6, r2
 80138ee:	b2f7      	uxtb	r7, r6
 80138f0:	e7a9      	b.n	8013846 <uxr_framing_read_transport+0x36>
 80138f2:	2300      	movs	r3, #0
 80138f4:	2e28      	cmp	r6, #40	@ 0x28
 80138f6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80138f8:	d9bd      	bls.n	8013876 <uxr_framing_read_transport+0x66>
 80138fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138fc:	2229      	movs	r2, #41	@ 0x29
 80138fe:	1ca1      	adds	r1, r4, #2
 8013900:	4650      	mov	r0, sl
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	682b      	ldr	r3, [r5, #0]
 8013906:	47c8      	blx	r9
 8013908:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801390c:	4606      	mov	r6, r0
 801390e:	212a      	movs	r1, #42	@ 0x2a
 8013910:	4403      	add	r3, r0
 8013912:	4808      	ldr	r0, [pc, #32]	@ (8013934 <uxr_framing_read_transport+0x124>)
 8013914:	085a      	lsrs	r2, r3, #1
 8013916:	fba0 0202 	umull	r0, r2, r0, r2
 801391a:	0892      	lsrs	r2, r2, #2
 801391c:	fb01 3312 	mls	r3, r1, r2, r3
 8013920:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013924:	2e00      	cmp	r6, #0
 8013926:	d08f      	beq.n	8013848 <uxr_framing_read_transport+0x38>
 8013928:	e78f      	b.n	801384a <uxr_framing_read_transport+0x3a>
 801392a:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	e784      	b.n	801383c <uxr_framing_read_transport+0x2c>
 8013932:	bf00      	nop
 8013934:	30c30c31 	.word	0x30c30c31

08013938 <uxr_read_framed_msg>:
 8013938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801393c:	461e      	mov	r6, r3
 801393e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013942:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8013946:	b083      	sub	sp, #12
 8013948:	4604      	mov	r4, r0
 801394a:	4688      	mov	r8, r1
 801394c:	429d      	cmp	r5, r3
 801394e:	4691      	mov	r9, r2
 8013950:	f000 818c 	beq.w	8013c6c <uxr_read_framed_msg+0x334>
 8013954:	7823      	ldrb	r3, [r4, #0]
 8013956:	4dc3      	ldr	r5, [pc, #780]	@ (8013c64 <uxr_read_framed_msg+0x32c>)
 8013958:	4fc3      	ldr	r7, [pc, #780]	@ (8013c68 <uxr_read_framed_msg+0x330>)
 801395a:	2b07      	cmp	r3, #7
 801395c:	d8fd      	bhi.n	801395a <uxr_read_framed_msg+0x22>
 801395e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013962:	011c      	.short	0x011c
 8013964:	00d900fb 	.word	0x00d900fb
 8013968:	008f00ba 	.word	0x008f00ba
 801396c:	00320051 	.word	0x00320051
 8013970:	0008      	.short	0x0008
 8013972:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013976:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801397a:	4299      	cmp	r1, r3
 801397c:	f000 814d 	beq.w	8013c1a <uxr_read_framed_msg+0x2e2>
 8013980:	18e2      	adds	r2, r4, r3
 8013982:	7892      	ldrb	r2, [r2, #2]
 8013984:	2a7d      	cmp	r2, #125	@ 0x7d
 8013986:	f000 81b8 	beq.w	8013cfa <uxr_read_framed_msg+0x3c2>
 801398a:	3301      	adds	r3, #1
 801398c:	212a      	movs	r1, #42	@ 0x2a
 801398e:	2a7e      	cmp	r2, #126	@ 0x7e
 8013990:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8013994:	fba5 c000 	umull	ip, r0, r5, r0
 8013998:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801399c:	fb01 3310 	mls	r3, r1, r0, r3
 80139a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80139a4:	f000 8257 	beq.w	8013e56 <uxr_read_framed_msg+0x51e>
 80139a8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80139aa:	2000      	movs	r0, #0
 80139ac:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80139ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80139b2:	7020      	strb	r0, [r4, #0]
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	4299      	cmp	r1, r3
 80139b8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80139ba:	f000 8178 	beq.w	8013cae <uxr_read_framed_msg+0x376>
 80139be:	2000      	movs	r0, #0
 80139c0:	b003      	add	sp, #12
 80139c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80139ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80139ce:	4298      	cmp	r0, r3
 80139d0:	f000 8132 	beq.w	8013c38 <uxr_read_framed_msg+0x300>
 80139d4:	18e2      	adds	r2, r4, r3
 80139d6:	7891      	ldrb	r1, [r2, #2]
 80139d8:	297d      	cmp	r1, #125	@ 0x7d
 80139da:	f000 8170 	beq.w	8013cbe <uxr_read_framed_msg+0x386>
 80139de:	3301      	adds	r3, #1
 80139e0:	202a      	movs	r0, #42	@ 0x2a
 80139e2:	297e      	cmp	r1, #126	@ 0x7e
 80139e4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80139e8:	fba5 c202 	umull	ip, r2, r5, r2
 80139ec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80139f0:	fb00 3312 	mls	r3, r0, r2, r3
 80139f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80139f8:	f000 821d 	beq.w	8013e36 <uxr_read_framed_msg+0x4fe>
 80139fc:	2307      	movs	r3, #7
 80139fe:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013a00:	7023      	strb	r3, [r4, #0]
 8013a02:	e7aa      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013a04:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013a06:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013a0a:	459e      	cmp	lr, r3
 8013a0c:	d827      	bhi.n	8013a5e <uxr_read_framed_msg+0x126>
 8013a0e:	e032      	b.n	8013a76 <uxr_read_framed_msg+0x13e>
 8013a10:	fba5 b101 	umull	fp, r1, r5, r1
 8013a14:	f89c c002 	ldrb.w	ip, [ip, #2]
 8013a18:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013a1c:	0889      	lsrs	r1, r1, #2
 8013a1e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013a22:	fb0b 0111 	mls	r1, fp, r1, r0
 8013a26:	f000 80d4 	beq.w	8013bd2 <uxr_read_framed_msg+0x29a>
 8013a2a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013a2e:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8013a32:	f000 80cb 	beq.w	8013bcc <uxr_read_framed_msg+0x294>
 8013a36:	f806 c003 	strb.w	ip, [r6, r3]
 8013a3a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8013a3c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013a3e:	ea80 010c 	eor.w	r1, r0, ip
 8013a42:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013a46:	3301      	adds	r3, #1
 8013a48:	b2c9      	uxtb	r1, r1
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8013a50:	4573      	cmp	r3, lr
 8013a52:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013a54:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013a58:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013a5a:	f080 811d 	bcs.w	8013c98 <uxr_read_framed_msg+0x360>
 8013a5e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013a62:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013a66:	1c50      	adds	r0, r2, #1
 8013a68:	eb04 0c02 	add.w	ip, r4, r2
 8013a6c:	4592      	cmp	sl, r2
 8013a6e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8013a72:	d1cd      	bne.n	8013a10 <uxr_read_framed_msg+0xd8>
 8013a74:	459e      	cmp	lr, r3
 8013a76:	f040 8114 	bne.w	8013ca2 <uxr_read_framed_msg+0x36a>
 8013a7a:	2306      	movs	r3, #6
 8013a7c:	7023      	strb	r3, [r4, #0]
 8013a7e:	e76c      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013a80:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013a84:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013a88:	4298      	cmp	r0, r3
 8013a8a:	f000 80c6 	beq.w	8013c1a <uxr_read_framed_msg+0x2e2>
 8013a8e:	18e2      	adds	r2, r4, r3
 8013a90:	7891      	ldrb	r1, [r2, #2]
 8013a92:	297d      	cmp	r1, #125	@ 0x7d
 8013a94:	f000 8193 	beq.w	8013dbe <uxr_read_framed_msg+0x486>
 8013a98:	3301      	adds	r3, #1
 8013a9a:	202a      	movs	r0, #42	@ 0x2a
 8013a9c:	297e      	cmp	r1, #126	@ 0x7e
 8013a9e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013aa2:	fba5 c202 	umull	ip, r2, r5, r2
 8013aa6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013aaa:	fb00 3312 	mls	r3, r0, r2, r3
 8013aae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013ab2:	f000 81d0 	beq.w	8013e56 <uxr_read_framed_msg+0x51e>
 8013ab6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013ab8:	2000      	movs	r0, #0
 8013aba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013abe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ac0:	8660      	strh	r0, [r4, #50]	@ 0x32
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013ac6:	428b      	cmp	r3, r1
 8013ac8:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013aca:	f240 80e2 	bls.w	8013c92 <uxr_read_framed_msg+0x35a>
 8013ace:	7020      	strb	r0, [r4, #0]
 8013ad0:	b003      	add	sp, #12
 8013ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013ada:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013ade:	4298      	cmp	r0, r3
 8013ae0:	f000 80aa 	beq.w	8013c38 <uxr_read_framed_msg+0x300>
 8013ae4:	18e2      	adds	r2, r4, r3
 8013ae6:	7891      	ldrb	r1, [r2, #2]
 8013ae8:	297d      	cmp	r1, #125	@ 0x7d
 8013aea:	f000 8186 	beq.w	8013dfa <uxr_read_framed_msg+0x4c2>
 8013aee:	3301      	adds	r3, #1
 8013af0:	202a      	movs	r0, #42	@ 0x2a
 8013af2:	297e      	cmp	r1, #126	@ 0x7e
 8013af4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013af8:	fba5 c202 	umull	ip, r2, r5, r2
 8013afc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013b00:	fb00 3312 	mls	r3, r0, r2, r3
 8013b04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013b08:	f000 8195 	beq.w	8013e36 <uxr_read_framed_msg+0x4fe>
 8013b0c:	2304      	movs	r3, #4
 8013b0e:	8621      	strh	r1, [r4, #48]	@ 0x30
 8013b10:	7023      	strb	r3, [r4, #0]
 8013b12:	e722      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013b14:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013b18:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013b1c:	4290      	cmp	r0, r2
 8013b1e:	f000 80b4 	beq.w	8013c8a <uxr_read_framed_msg+0x352>
 8013b22:	18a3      	adds	r3, r4, r2
 8013b24:	7899      	ldrb	r1, [r3, #2]
 8013b26:	297d      	cmp	r1, #125	@ 0x7d
 8013b28:	f000 8107 	beq.w	8013d3a <uxr_read_framed_msg+0x402>
 8013b2c:	3201      	adds	r2, #1
 8013b2e:	232a      	movs	r3, #42	@ 0x2a
 8013b30:	297e      	cmp	r1, #126	@ 0x7e
 8013b32:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8013b36:	fba5 c000 	umull	ip, r0, r5, r0
 8013b3a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013b3e:	fb03 2210 	mls	r2, r3, r0, r2
 8013b42:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013b46:	f000 818a 	beq.w	8013e5e <uxr_read_framed_msg+0x526>
 8013b4a:	7863      	ldrb	r3, [r4, #1]
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	bf0c      	ite	eq
 8013b50:	2303      	moveq	r3, #3
 8013b52:	2300      	movne	r3, #0
 8013b54:	7023      	strb	r3, [r4, #0]
 8013b56:	e700      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013b5e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8013b62:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013b66:	4299      	cmp	r1, r3
 8013b68:	d06a      	beq.n	8013c40 <uxr_read_framed_msg+0x308>
 8013b6a:	18e2      	adds	r2, r4, r3
 8013b6c:	7890      	ldrb	r0, [r2, #2]
 8013b6e:	287d      	cmp	r0, #125	@ 0x7d
 8013b70:	f000 8100 	beq.w	8013d74 <uxr_read_framed_msg+0x43c>
 8013b74:	3301      	adds	r3, #1
 8013b76:	212a      	movs	r1, #42	@ 0x2a
 8013b78:	287e      	cmp	r0, #126	@ 0x7e
 8013b7a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8013b7e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013b82:	fba5 c202 	umull	ip, r2, r5, r2
 8013b86:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013b8a:	fb01 3312 	mls	r3, r1, r2, r3
 8013b8e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013b92:	d055      	beq.n	8013c40 <uxr_read_framed_msg+0x308>
 8013b94:	2302      	movs	r3, #2
 8013b96:	7023      	strb	r3, [r4, #0]
 8013b98:	e6df      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013b9a:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8013b9e:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013ba2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013ba6:	1c5a      	adds	r2, r3, #1
 8013ba8:	459c      	cmp	ip, r3
 8013baa:	eb04 0103 	add.w	r1, r4, r3
 8013bae:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8013bb2:	f43f af04 	beq.w	80139be <uxr_read_framed_msg+0x86>
 8013bb6:	fba5 0303 	umull	r0, r3, r5, r3
 8013bba:	7889      	ldrb	r1, [r1, #2]
 8013bbc:	089b      	lsrs	r3, r3, #2
 8013bbe:	297e      	cmp	r1, #126	@ 0x7e
 8013bc0:	fb0e 2313 	mls	r3, lr, r3, r2
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013bca:	d1ec      	bne.n	8013ba6 <uxr_read_framed_msg+0x26e>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	7023      	strb	r3, [r4, #0]
 8013bd0:	e6c3      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013bd2:	1c50      	adds	r0, r2, #1
 8013bd4:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013bd8:	3202      	adds	r2, #2
 8013bda:	0841      	lsrs	r1, r0, #1
 8013bdc:	fba5 c101 	umull	ip, r1, r5, r1
 8013be0:	0889      	lsrs	r1, r1, #2
 8013be2:	fb0b 0111 	mls	r1, fp, r1, r0
 8013be6:	1860      	adds	r0, r4, r1
 8013be8:	b2c9      	uxtb	r1, r1
 8013bea:	458a      	cmp	sl, r1
 8013bec:	f43f af42 	beq.w	8013a74 <uxr_read_framed_msg+0x13c>
 8013bf0:	0851      	lsrs	r1, r2, #1
 8013bf2:	7880      	ldrb	r0, [r0, #2]
 8013bf4:	fba5 a101 	umull	sl, r1, r5, r1
 8013bf8:	287e      	cmp	r0, #126	@ 0x7e
 8013bfa:	f080 0c20 	eor.w	ip, r0, #32
 8013bfe:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8013c02:	fb0b 2211 	mls	r2, fp, r1, r2
 8013c06:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013c0a:	f47f af14 	bne.w	8013a36 <uxr_read_framed_msg+0xfe>
 8013c0e:	459e      	cmp	lr, r3
 8013c10:	f43f af33 	beq.w	8013a7a <uxr_read_framed_msg+0x142>
 8013c14:	2301      	movs	r3, #1
 8013c16:	7023      	strb	r3, [r4, #0]
 8013c18:	e69f      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c1c:	9300      	str	r3, [sp, #0]
 8013c1e:	2301      	movs	r3, #1
 8013c20:	9301      	str	r3, [sp, #4]
 8013c22:	464a      	mov	r2, r9
 8013c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c26:	4641      	mov	r1, r8
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f7ff fdf1 	bl	8013810 <uxr_framing_read_transport>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f43f aec5 	beq.w	80139be <uxr_read_framed_msg+0x86>
 8013c34:	7823      	ldrb	r3, [r4, #0]
 8013c36:	e690      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	2302      	movs	r3, #2
 8013c3e:	e7ef      	b.n	8013c20 <uxr_read_framed_msg+0x2e8>
 8013c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c42:	464a      	mov	r2, r9
 8013c44:	4641      	mov	r1, r8
 8013c46:	4620      	mov	r0, r4
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	2304      	movs	r3, #4
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c50:	f7ff fdde 	bl	8013810 <uxr_framing_read_transport>
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d1ed      	bne.n	8013c34 <uxr_read_framed_msg+0x2fc>
 8013c58:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8013c5c:	2b7e      	cmp	r3, #126	@ 0x7e
 8013c5e:	d0e9      	beq.n	8013c34 <uxr_read_framed_msg+0x2fc>
 8013c60:	e6ad      	b.n	80139be <uxr_read_framed_msg+0x86>
 8013c62:	bf00      	nop
 8013c64:	30c30c31 	.word	0x30c30c31
 8013c68:	0801cbe8 	.word	0x0801cbe8
 8013c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	2305      	movs	r3, #5
 8013c72:	9301      	str	r3, [sp, #4]
 8013c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c76:	f7ff fdcb 	bl	8013810 <uxr_framing_read_transport>
 8013c7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013c7e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013c82:	429a      	cmp	r2, r3
 8013c84:	f43f ae9b 	beq.w	80139be <uxr_read_framed_msg+0x86>
 8013c88:	e664      	b.n	8013954 <uxr_read_framed_msg+0x1c>
 8013c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	2303      	movs	r3, #3
 8013c90:	e7c6      	b.n	8013c20 <uxr_read_framed_msg+0x2e8>
 8013c92:	2305      	movs	r3, #5
 8013c94:	7023      	strb	r3, [r4, #0]
 8013c96:	e660      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013c98:	f43f aeef 	beq.w	8013a7a <uxr_read_framed_msg+0x142>
 8013c9c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013ca0:	d094      	beq.n	8013bcc <uxr_read_framed_msg+0x294>
 8013ca2:	ebae 0303 	sub.w	r3, lr, r3
 8013ca6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013ca8:	3302      	adds	r3, #2
 8013caa:	9200      	str	r2, [sp, #0]
 8013cac:	e7b8      	b.n	8013c20 <uxr_read_framed_msg+0x2e8>
 8013cae:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8013cb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013cb4:	7013      	strb	r3, [r2, #0]
 8013cb6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8013cb8:	b003      	add	sp, #12
 8013cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbe:	1c59      	adds	r1, r3, #1
 8013cc0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013cc4:	084a      	lsrs	r2, r1, #1
 8013cc6:	fba5 e202 	umull	lr, r2, r5, r2
 8013cca:	0892      	lsrs	r2, r2, #2
 8013ccc:	fb0c 1212 	mls	r2, ip, r2, r1
 8013cd0:	b2d1      	uxtb	r1, r2
 8013cd2:	4288      	cmp	r0, r1
 8013cd4:	d0b0      	beq.n	8013c38 <uxr_read_framed_msg+0x300>
 8013cd6:	3302      	adds	r3, #2
 8013cd8:	4422      	add	r2, r4
 8013cda:	7891      	ldrb	r1, [r2, #2]
 8013cdc:	085a      	lsrs	r2, r3, #1
 8013cde:	fba5 0202 	umull	r0, r2, r5, r2
 8013ce2:	297e      	cmp	r1, #126	@ 0x7e
 8013ce4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013ce8:	fb0c 3312 	mls	r3, ip, r2, r3
 8013cec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013cf0:	f000 80a1 	beq.w	8013e36 <uxr_read_framed_msg+0x4fe>
 8013cf4:	f081 0120 	eor.w	r1, r1, #32
 8013cf8:	e680      	b.n	80139fc <uxr_read_framed_msg+0xc4>
 8013cfa:	f103 0c01 	add.w	ip, r3, #1
 8013cfe:	202a      	movs	r0, #42	@ 0x2a
 8013d00:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013d04:	fba5 e202 	umull	lr, r2, r5, r2
 8013d08:	0892      	lsrs	r2, r2, #2
 8013d0a:	fb00 c212 	mls	r2, r0, r2, ip
 8013d0e:	fa5f fc82 	uxtb.w	ip, r2
 8013d12:	4561      	cmp	r1, ip
 8013d14:	d081      	beq.n	8013c1a <uxr_read_framed_msg+0x2e2>
 8013d16:	3302      	adds	r3, #2
 8013d18:	4422      	add	r2, r4
 8013d1a:	0859      	lsrs	r1, r3, #1
 8013d1c:	7892      	ldrb	r2, [r2, #2]
 8013d1e:	fba5 c101 	umull	ip, r1, r5, r1
 8013d22:	2a7e      	cmp	r2, #126	@ 0x7e
 8013d24:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8013d28:	fb00 3311 	mls	r3, r0, r1, r3
 8013d2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013d30:	f000 8091 	beq.w	8013e56 <uxr_read_framed_msg+0x51e>
 8013d34:	f082 0220 	eor.w	r2, r2, #32
 8013d38:	e636      	b.n	80139a8 <uxr_read_framed_msg+0x70>
 8013d3a:	1c51      	adds	r1, r2, #1
 8013d3c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013d40:	084b      	lsrs	r3, r1, #1
 8013d42:	fba5 e303 	umull	lr, r3, r5, r3
 8013d46:	089b      	lsrs	r3, r3, #2
 8013d48:	fb0c 1313 	mls	r3, ip, r3, r1
 8013d4c:	b2d9      	uxtb	r1, r3
 8013d4e:	4288      	cmp	r0, r1
 8013d50:	d09b      	beq.n	8013c8a <uxr_read_framed_msg+0x352>
 8013d52:	3202      	adds	r2, #2
 8013d54:	4423      	add	r3, r4
 8013d56:	0850      	lsrs	r0, r2, #1
 8013d58:	789b      	ldrb	r3, [r3, #2]
 8013d5a:	fba5 1000 	umull	r1, r0, r5, r0
 8013d5e:	2b7e      	cmp	r3, #126	@ 0x7e
 8013d60:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013d64:	fb0c 2210 	mls	r2, ip, r0, r2
 8013d68:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013d6c:	d077      	beq.n	8013e5e <uxr_read_framed_msg+0x526>
 8013d6e:	f083 0120 	eor.w	r1, r3, #32
 8013d72:	e6ea      	b.n	8013b4a <uxr_read_framed_msg+0x212>
 8013d74:	f103 0c01 	add.w	ip, r3, #1
 8013d78:	202a      	movs	r0, #42	@ 0x2a
 8013d7a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013d7e:	fba5 e202 	umull	lr, r2, r5, r2
 8013d82:	0892      	lsrs	r2, r2, #2
 8013d84:	fb00 c212 	mls	r2, r0, r2, ip
 8013d88:	fa5f fc82 	uxtb.w	ip, r2
 8013d8c:	4561      	cmp	r1, ip
 8013d8e:	f43f af57 	beq.w	8013c40 <uxr_read_framed_msg+0x308>
 8013d92:	3302      	adds	r3, #2
 8013d94:	4422      	add	r2, r4
 8013d96:	7891      	ldrb	r1, [r2, #2]
 8013d98:	085a      	lsrs	r2, r3, #1
 8013d9a:	fba5 c202 	umull	ip, r2, r5, r2
 8013d9e:	297e      	cmp	r1, #126	@ 0x7e
 8013da0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013da4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013da8:	fb00 3312 	mls	r3, r0, r2, r3
 8013dac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013db0:	f43f af46 	beq.w	8013c40 <uxr_read_framed_msg+0x308>
 8013db4:	f081 0120 	eor.w	r1, r1, #32
 8013db8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013dbc:	e6ea      	b.n	8013b94 <uxr_read_framed_msg+0x25c>
 8013dbe:	1c59      	adds	r1, r3, #1
 8013dc0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013dc4:	084a      	lsrs	r2, r1, #1
 8013dc6:	fba5 e202 	umull	lr, r2, r5, r2
 8013dca:	0892      	lsrs	r2, r2, #2
 8013dcc:	fb0c 1212 	mls	r2, ip, r2, r1
 8013dd0:	b2d1      	uxtb	r1, r2
 8013dd2:	4288      	cmp	r0, r1
 8013dd4:	f43f af21 	beq.w	8013c1a <uxr_read_framed_msg+0x2e2>
 8013dd8:	3302      	adds	r3, #2
 8013dda:	4422      	add	r2, r4
 8013ddc:	7891      	ldrb	r1, [r2, #2]
 8013dde:	085a      	lsrs	r2, r3, #1
 8013de0:	fba5 0202 	umull	r0, r2, r5, r2
 8013de4:	297e      	cmp	r1, #126	@ 0x7e
 8013de6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013dea:	fb0c 3312 	mls	r3, ip, r2, r3
 8013dee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013df2:	d030      	beq.n	8013e56 <uxr_read_framed_msg+0x51e>
 8013df4:	f081 0120 	eor.w	r1, r1, #32
 8013df8:	e65d      	b.n	8013ab6 <uxr_read_framed_msg+0x17e>
 8013dfa:	1c59      	adds	r1, r3, #1
 8013dfc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013e00:	084a      	lsrs	r2, r1, #1
 8013e02:	fba5 e202 	umull	lr, r2, r5, r2
 8013e06:	0892      	lsrs	r2, r2, #2
 8013e08:	fb0c 1212 	mls	r2, ip, r2, r1
 8013e0c:	b2d1      	uxtb	r1, r2
 8013e0e:	4288      	cmp	r0, r1
 8013e10:	f43f af12 	beq.w	8013c38 <uxr_read_framed_msg+0x300>
 8013e14:	3302      	adds	r3, #2
 8013e16:	4422      	add	r2, r4
 8013e18:	7891      	ldrb	r1, [r2, #2]
 8013e1a:	085a      	lsrs	r2, r3, #1
 8013e1c:	fba5 0202 	umull	r0, r2, r5, r2
 8013e20:	297e      	cmp	r1, #126	@ 0x7e
 8013e22:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013e26:	fb0c 3312 	mls	r3, ip, r2, r3
 8013e2a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013e2e:	d002      	beq.n	8013e36 <uxr_read_framed_msg+0x4fe>
 8013e30:	f081 0120 	eor.w	r1, r1, #32
 8013e34:	e66a      	b.n	8013b0c <uxr_read_framed_msg+0x1d4>
 8013e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	2302      	movs	r3, #2
 8013e3c:	9301      	str	r3, [sp, #4]
 8013e3e:	464a      	mov	r2, r9
 8013e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e42:	4641      	mov	r1, r8
 8013e44:	4620      	mov	r0, r4
 8013e46:	f7ff fce3 	bl	8013810 <uxr_framing_read_transport>
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	f47f aef2 	bne.w	8013c34 <uxr_read_framed_msg+0x2fc>
 8013e50:	2301      	movs	r3, #1
 8013e52:	7023      	strb	r3, [r4, #0]
 8013e54:	e581      	b.n	801395a <uxr_read_framed_msg+0x22>
 8013e56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e7ee      	b.n	8013e3c <uxr_read_framed_msg+0x504>
 8013e5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e60:	9300      	str	r3, [sp, #0]
 8013e62:	2303      	movs	r3, #3
 8013e64:	e7ea      	b.n	8013e3c <uxr_read_framed_msg+0x504>
 8013e66:	bf00      	nop

08013e68 <uxr_stream_id>:
 8013e68:	2901      	cmp	r1, #1
 8013e6a:	4684      	mov	ip, r0
 8013e6c:	b500      	push	{lr}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	d01f      	beq.n	8013eb2 <uxr_stream_id+0x4a>
 8013e72:	2902      	cmp	r1, #2
 8013e74:	f04f 0e00 	mov.w	lr, #0
 8013e78:	d020      	beq.n	8013ebc <uxr_stream_id+0x54>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	f36e 0307 	bfi	r3, lr, #0, #8
 8013e82:	f36c 230f 	bfi	r3, ip, #8, #8
 8013e86:	f361 4317 	bfi	r3, r1, #16, #8
 8013e8a:	f362 631f 	bfi	r3, r2, #24, #8
 8013e8e:	fa5f fc83 	uxtb.w	ip, r3
 8013e92:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013e96:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013e9a:	0e1b      	lsrs	r3, r3, #24
 8013e9c:	f36c 0007 	bfi	r0, ip, #0, #8
 8013ea0:	f361 200f 	bfi	r0, r1, #8, #8
 8013ea4:	f362 4017 	bfi	r0, r2, #16, #8
 8013ea8:	f363 601f 	bfi	r0, r3, #24, #8
 8013eac:	b003      	add	sp, #12
 8013eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8013eb2:	f100 0e01 	add.w	lr, r0, #1
 8013eb6:	fa5f fe8e 	uxtb.w	lr, lr
 8013eba:	e7de      	b.n	8013e7a <uxr_stream_id+0x12>
 8013ebc:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8013ec0:	e7db      	b.n	8013e7a <uxr_stream_id+0x12>
 8013ec2:	bf00      	nop

08013ec4 <uxr_stream_id_from_raw>:
 8013ec4:	b082      	sub	sp, #8
 8013ec6:	b130      	cbz	r0, 8013ed6 <uxr_stream_id_from_raw+0x12>
 8013ec8:	0603      	lsls	r3, r0, #24
 8013eca:	d421      	bmi.n	8013f10 <uxr_stream_id_from_raw+0x4c>
 8013ecc:	1e42      	subs	r2, r0, #1
 8013ece:	f04f 0c01 	mov.w	ip, #1
 8013ed2:	b2d2      	uxtb	r2, r2
 8013ed4:	e001      	b.n	8013eda <uxr_stream_id_from_raw+0x16>
 8013ed6:	4684      	mov	ip, r0
 8013ed8:	4602      	mov	r2, r0
 8013eda:	2300      	movs	r3, #0
 8013edc:	f360 0307 	bfi	r3, r0, #0, #8
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	f362 230f 	bfi	r3, r2, #8, #8
 8013ee6:	f36c 4317 	bfi	r3, ip, #16, #8
 8013eea:	f361 631f 	bfi	r3, r1, #24, #8
 8013eee:	fa5f fc83 	uxtb.w	ip, r3
 8013ef2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013ef6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013efa:	0e1b      	lsrs	r3, r3, #24
 8013efc:	f36c 0007 	bfi	r0, ip, #0, #8
 8013f00:	f361 200f 	bfi	r0, r1, #8, #8
 8013f04:	f362 4017 	bfi	r0, r2, #16, #8
 8013f08:	f363 601f 	bfi	r0, r3, #24, #8
 8013f0c:	b002      	add	sp, #8
 8013f0e:	4770      	bx	lr
 8013f10:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013f14:	f04f 0c02 	mov.w	ip, #2
 8013f18:	e7df      	b.n	8013eda <uxr_stream_id_from_raw+0x16>
 8013f1a:	bf00      	nop

08013f1c <uxr_init_stream_storage>:
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	7403      	strb	r3, [r0, #16]
 8013f20:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013f24:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013f28:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop

08013f30 <uxr_reset_stream_storage>:
 8013f30:	b570      	push	{r4, r5, r6, lr}
 8013f32:	7c03      	ldrb	r3, [r0, #16]
 8013f34:	4604      	mov	r4, r0
 8013f36:	b14b      	cbz	r3, 8013f4c <uxr_reset_stream_storage+0x1c>
 8013f38:	4606      	mov	r6, r0
 8013f3a:	2500      	movs	r5, #0
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	3501      	adds	r5, #1
 8013f40:	f006 f8c2 	bl	801a0c8 <uxr_reset_output_best_effort_stream>
 8013f44:	7c23      	ldrb	r3, [r4, #16]
 8013f46:	3610      	adds	r6, #16
 8013f48:	42ab      	cmp	r3, r5
 8013f4a:	d8f7      	bhi.n	8013f3c <uxr_reset_stream_storage+0xc>
 8013f4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013f50:	b15b      	cbz	r3, 8013f6a <uxr_reset_stream_storage+0x3a>
 8013f52:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f56:	2500      	movs	r5, #0
 8013f58:	4630      	mov	r0, r6
 8013f5a:	3501      	adds	r5, #1
 8013f5c:	f005 feba 	bl	8019cd4 <uxr_reset_input_best_effort_stream>
 8013f60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013f64:	3602      	adds	r6, #2
 8013f66:	42ab      	cmp	r3, r5
 8013f68:	d8f6      	bhi.n	8013f58 <uxr_reset_stream_storage+0x28>
 8013f6a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013f6e:	b15b      	cbz	r3, 8013f88 <uxr_reset_stream_storage+0x58>
 8013f70:	f104 0618 	add.w	r6, r4, #24
 8013f74:	2500      	movs	r5, #0
 8013f76:	4630      	mov	r0, r6
 8013f78:	3501      	adds	r5, #1
 8013f7a:	f006 f951 	bl	801a220 <uxr_reset_output_reliable_stream>
 8013f7e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013f82:	3628      	adds	r6, #40	@ 0x28
 8013f84:	42ab      	cmp	r3, r5
 8013f86:	d8f6      	bhi.n	8013f76 <uxr_reset_stream_storage+0x46>
 8013f88:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013f8c:	b15b      	cbz	r3, 8013fa6 <uxr_reset_stream_storage+0x76>
 8013f8e:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013f92:	2500      	movs	r5, #0
 8013f94:	4630      	mov	r0, r6
 8013f96:	3501      	adds	r5, #1
 8013f98:	f005 ff08 	bl	8019dac <uxr_reset_input_reliable_stream>
 8013f9c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013fa0:	3618      	adds	r6, #24
 8013fa2:	42ab      	cmp	r3, r5
 8013fa4:	d8f6      	bhi.n	8013f94 <uxr_reset_stream_storage+0x64>
 8013fa6:	bd70      	pop	{r4, r5, r6, pc}

08013fa8 <uxr_add_output_best_effort_buffer>:
 8013fa8:	b510      	push	{r4, lr}
 8013faa:	7c04      	ldrb	r4, [r0, #16]
 8013fac:	b082      	sub	sp, #8
 8013fae:	f104 0c01 	add.w	ip, r4, #1
 8013fb2:	f880 c010 	strb.w	ip, [r0, #16]
 8013fb6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013fba:	f006 f87b 	bl	801a0b4 <uxr_init_output_best_effort_stream>
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	b002      	add	sp, #8
 8013fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fca:	f7ff bf4d 	b.w	8013e68 <uxr_stream_id>
 8013fce:	bf00      	nop

08013fd0 <uxr_add_output_reliable_buffer>:
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	4684      	mov	ip, r0
 8013fd6:	2028      	movs	r0, #40	@ 0x28
 8013fd8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013fdc:	9400      	str	r4, [sp, #0]
 8013fde:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013fe2:	fb00 c004 	mla	r0, r0, r4, ip
 8013fe6:	f104 0e01 	add.w	lr, r4, #1
 8013fea:	3018      	adds	r0, #24
 8013fec:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013ff0:	f006 f8e0 	bl	801a1b4 <uxr_init_output_reliable_stream>
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	2102      	movs	r1, #2
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	b004      	add	sp, #16
 8013ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014000:	f7ff bf32 	b.w	8013e68 <uxr_stream_id>

08014004 <uxr_add_input_best_effort_buffer>:
 8014004:	b510      	push	{r4, lr}
 8014006:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801400a:	b082      	sub	sp, #8
 801400c:	1c62      	adds	r2, r4, #1
 801400e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014012:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8014016:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801401a:	f005 fe57 	bl	8019ccc <uxr_init_input_best_effort_stream>
 801401e:	2200      	movs	r2, #0
 8014020:	2101      	movs	r1, #1
 8014022:	4620      	mov	r0, r4
 8014024:	b002      	add	sp, #8
 8014026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801402a:	f7ff bf1d 	b.w	8013e68 <uxr_stream_id>
 801402e:	bf00      	nop

08014030 <uxr_add_input_reliable_buffer>:
 8014030:	b510      	push	{r4, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	4684      	mov	ip, r0
 8014036:	2018      	movs	r0, #24
 8014038:	9c06      	ldr	r4, [sp, #24]
 801403a:	9400      	str	r4, [sp, #0]
 801403c:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014040:	fb00 c004 	mla	r0, r0, r4, ip
 8014044:	f104 0e01 	add.w	lr, r4, #1
 8014048:	3048      	adds	r0, #72	@ 0x48
 801404a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801404e:	f005 fe87 	bl	8019d60 <uxr_init_input_reliable_stream>
 8014052:	2200      	movs	r2, #0
 8014054:	2102      	movs	r1, #2
 8014056:	4620      	mov	r0, r4
 8014058:	b004      	add	sp, #16
 801405a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801405e:	f7ff bf03 	b.w	8013e68 <uxr_stream_id>
 8014062:	bf00      	nop

08014064 <uxr_get_output_best_effort_stream>:
 8014064:	7c03      	ldrb	r3, [r0, #16]
 8014066:	428b      	cmp	r3, r1
 8014068:	bf8c      	ite	hi
 801406a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801406e:	2000      	movls	r0, #0
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop

08014074 <uxr_get_output_reliable_stream>:
 8014074:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014078:	428b      	cmp	r3, r1
 801407a:	d904      	bls.n	8014086 <uxr_get_output_reliable_stream+0x12>
 801407c:	2328      	movs	r3, #40	@ 0x28
 801407e:	fb03 0001 	mla	r0, r3, r1, r0
 8014082:	3018      	adds	r0, #24
 8014084:	4770      	bx	lr
 8014086:	2000      	movs	r0, #0
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop

0801408c <uxr_get_input_best_effort_stream>:
 801408c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014090:	428b      	cmp	r3, r1
 8014092:	d903      	bls.n	801409c <uxr_get_input_best_effort_stream+0x10>
 8014094:	3121      	adds	r1, #33	@ 0x21
 8014096:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801409a:	4770      	bx	lr
 801409c:	2000      	movs	r0, #0
 801409e:	4770      	bx	lr

080140a0 <uxr_get_input_reliable_stream>:
 80140a0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80140a4:	428b      	cmp	r3, r1
 80140a6:	d904      	bls.n	80140b2 <uxr_get_input_reliable_stream+0x12>
 80140a8:	2318      	movs	r3, #24
 80140aa:	fb03 0001 	mla	r0, r3, r1, r0
 80140ae:	3048      	adds	r0, #72	@ 0x48
 80140b0:	4770      	bx	lr
 80140b2:	2000      	movs	r0, #0
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop

080140b8 <uxr_output_streams_confirmed>:
 80140b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80140bc:	b183      	cbz	r3, 80140e0 <uxr_output_streams_confirmed+0x28>
 80140be:	b570      	push	{r4, r5, r6, lr}
 80140c0:	4606      	mov	r6, r0
 80140c2:	f100 0518 	add.w	r5, r0, #24
 80140c6:	2400      	movs	r4, #0
 80140c8:	e000      	b.n	80140cc <uxr_output_streams_confirmed+0x14>
 80140ca:	b140      	cbz	r0, 80140de <uxr_output_streams_confirmed+0x26>
 80140cc:	4628      	mov	r0, r5
 80140ce:	3401      	adds	r4, #1
 80140d0:	f006 fb1a 	bl	801a708 <uxr_is_output_up_to_date>
 80140d4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80140d8:	3528      	adds	r5, #40	@ 0x28
 80140da:	42a3      	cmp	r3, r4
 80140dc:	d8f5      	bhi.n	80140ca <uxr_output_streams_confirmed+0x12>
 80140de:	bd70      	pop	{r4, r5, r6, pc}
 80140e0:	2001      	movs	r0, #1
 80140e2:	4770      	bx	lr

080140e4 <uxr_buffer_submessage_header>:
 80140e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140e6:	460e      	mov	r6, r1
 80140e8:	2104      	movs	r1, #4
 80140ea:	4604      	mov	r4, r0
 80140ec:	4615      	mov	r5, r2
 80140ee:	461f      	mov	r7, r3
 80140f0:	f7fd fd36 	bl	8011b60 <ucdr_align_to>
 80140f4:	2301      	movs	r3, #1
 80140f6:	4631      	mov	r1, r6
 80140f8:	4620      	mov	r0, r4
 80140fa:	ea47 0203 	orr.w	r2, r7, r3
 80140fe:	7523      	strb	r3, [r4, #20]
 8014100:	462b      	mov	r3, r5
 8014102:	f000 fa29 	bl	8014558 <uxr_serialize_submessage_header>
 8014106:	4620      	mov	r0, r4
 8014108:	f7fd fd40 	bl	8011b8c <ucdr_buffer_remaining>
 801410c:	42a8      	cmp	r0, r5
 801410e:	bf34      	ite	cc
 8014110:	2000      	movcc	r0, #0
 8014112:	2001      	movcs	r0, #1
 8014114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014116:	bf00      	nop

08014118 <uxr_read_submessage_header>:
 8014118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801411c:	4604      	mov	r4, r0
 801411e:	460d      	mov	r5, r1
 8014120:	2104      	movs	r1, #4
 8014122:	4616      	mov	r6, r2
 8014124:	4698      	mov	r8, r3
 8014126:	f7fd fd1b 	bl	8011b60 <ucdr_align_to>
 801412a:	4620      	mov	r0, r4
 801412c:	f7fd fd2e 	bl	8011b8c <ucdr_buffer_remaining>
 8014130:	2803      	cmp	r0, #3
 8014132:	bf8c      	ite	hi
 8014134:	2701      	movhi	r7, #1
 8014136:	2700      	movls	r7, #0
 8014138:	d802      	bhi.n	8014140 <uxr_read_submessage_header+0x28>
 801413a:	4638      	mov	r0, r7
 801413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014140:	4633      	mov	r3, r6
 8014142:	4642      	mov	r2, r8
 8014144:	4620      	mov	r0, r4
 8014146:	4629      	mov	r1, r5
 8014148:	f000 fa1a 	bl	8014580 <uxr_deserialize_submessage_header>
 801414c:	f898 3000 	ldrb.w	r3, [r8]
 8014150:	4638      	mov	r0, r7
 8014152:	f003 0201 	and.w	r2, r3, #1
 8014156:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801415a:	f888 3000 	strb.w	r3, [r8]
 801415e:	7522      	strb	r2, [r4, #20]
 8014160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014164 <uxr_submessage_padding>:
 8014164:	f010 0003 	ands.w	r0, r0, #3
 8014168:	bf18      	it	ne
 801416a:	f1c0 0004 	rsbne	r0, r0, #4
 801416e:	4770      	bx	lr

08014170 <uxr_millis>:
 8014170:	b510      	push	{r4, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	2001      	movs	r0, #1
 8014176:	4669      	mov	r1, sp
 8014178:	f7ed fdd2 	bl	8001d20 <clock_gettime>
 801417c:	4908      	ldr	r1, [pc, #32]	@ (80141a0 <uxr_millis+0x30>)
 801417e:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014182:	fba0 0301 	umull	r0, r3, r0, r1
 8014186:	1900      	adds	r0, r0, r4
 8014188:	fb01 3102 	mla	r1, r1, r2, r3
 801418c:	4a05      	ldr	r2, [pc, #20]	@ (80141a4 <uxr_millis+0x34>)
 801418e:	f04f 0300 	mov.w	r3, #0
 8014192:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014196:	f7ec f90b 	bl	80003b0 <__aeabi_ldivmod>
 801419a:	b004      	add	sp, #16
 801419c:	bd10      	pop	{r4, pc}
 801419e:	bf00      	nop
 80141a0:	3b9aca00 	.word	0x3b9aca00
 80141a4:	000f4240 	.word	0x000f4240

080141a8 <uxr_nanos>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	b084      	sub	sp, #16
 80141ac:	2001      	movs	r0, #1
 80141ae:	4669      	mov	r1, sp
 80141b0:	f7ed fdb6 	bl	8001d20 <clock_gettime>
 80141b4:	4a06      	ldr	r2, [pc, #24]	@ (80141d0 <uxr_nanos+0x28>)
 80141b6:	9800      	ldr	r0, [sp, #0]
 80141b8:	9902      	ldr	r1, [sp, #8]
 80141ba:	fba0 0302 	umull	r0, r3, r0, r2
 80141be:	9c01      	ldr	r4, [sp, #4]
 80141c0:	1840      	adds	r0, r0, r1
 80141c2:	fb02 3304 	mla	r3, r2, r4, r3
 80141c6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80141ca:	b004      	add	sp, #16
 80141cc:	bd10      	pop	{r4, pc}
 80141ce:	bf00      	nop
 80141d0:	3b9aca00 	.word	0x3b9aca00

080141d4 <on_full_output_buffer_fragmented>:
 80141d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d8:	460c      	mov	r4, r1
 80141da:	b08a      	sub	sp, #40	@ 0x28
 80141dc:	4606      	mov	r6, r0
 80141de:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80141e2:	f104 0008 	add.w	r0, r4, #8
 80141e6:	f7ff ff45 	bl	8014074 <uxr_get_output_reliable_stream>
 80141ea:	4605      	mov	r5, r0
 80141ec:	f006 fa96 	bl	801a71c <get_available_free_slots>
 80141f0:	b968      	cbnz	r0, 801420e <on_full_output_buffer_fragmented+0x3a>
 80141f2:	4620      	mov	r0, r4
 80141f4:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80141f8:	4798      	blx	r3
 80141fa:	b918      	cbnz	r0, 8014204 <on_full_output_buffer_fragmented+0x30>
 80141fc:	2001      	movs	r0, #1
 80141fe:	b00a      	add	sp, #40	@ 0x28
 8014200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014204:	4628      	mov	r0, r5
 8014206:	f006 fa89 	bl	801a71c <get_available_free_slots>
 801420a:	2800      	cmp	r0, #0
 801420c:	d0f6      	beq.n	80141fc <on_full_output_buffer_fragmented+0x28>
 801420e:	8929      	ldrh	r1, [r5, #8]
 8014210:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8014214:	89eb      	ldrh	r3, [r5, #14]
 8014216:	7b28      	ldrb	r0, [r5, #12]
 8014218:	686f      	ldr	r7, [r5, #4]
 801421a:	1a12      	subs	r2, r2, r0
 801421c:	fbb3 f0f1 	udiv	r0, r3, r1
 8014220:	fbb7 f7f1 	udiv	r7, r7, r1
 8014224:	fb01 3110 	mls	r1, r1, r0, r3
 8014228:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801422c:	b289      	uxth	r1, r1
 801422e:	fb07 f101 	mul.w	r1, r7, r1
 8014232:	3f04      	subs	r7, #4
 8014234:	443a      	add	r2, r7
 8014236:	3104      	adds	r1, #4
 8014238:	fa1f f882 	uxth.w	r8, r2
 801423c:	463a      	mov	r2, r7
 801423e:	eba3 0308 	sub.w	r3, r3, r8
 8014242:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	4419      	add	r1, r3
 801424a:	2300      	movs	r3, #0
 801424c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014250:	9000      	str	r0, [sp, #0]
 8014252:	a802      	add	r0, sp, #8
 8014254:	f7fd fc56 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 8014258:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801425c:	f102 0308 	add.w	r3, r2, #8
 8014260:	42bb      	cmp	r3, r7
 8014262:	d927      	bls.n	80142b4 <on_full_output_buffer_fragmented+0xe0>
 8014264:	4642      	mov	r2, r8
 8014266:	2300      	movs	r3, #0
 8014268:	210d      	movs	r1, #13
 801426a:	a802      	add	r0, sp, #8
 801426c:	f7ff ff3a 	bl	80140e4 <uxr_buffer_submessage_header>
 8014270:	8929      	ldrh	r1, [r5, #8]
 8014272:	89eb      	ldrh	r3, [r5, #14]
 8014274:	686a      	ldr	r2, [r5, #4]
 8014276:	fbb3 f0f1 	udiv	r0, r3, r1
 801427a:	fbb2 f2f1 	udiv	r2, r2, r1
 801427e:	fb01 3310 	mls	r3, r1, r0, r3
 8014282:	b29b      	uxth	r3, r3
 8014284:	fb02 f303 	mul.w	r3, r2, r3
 8014288:	682a      	ldr	r2, [r5, #0]
 801428a:	50d7      	str	r7, [r2, r3]
 801428c:	2101      	movs	r1, #1
 801428e:	89e8      	ldrh	r0, [r5, #14]
 8014290:	f006 fa66 	bl	801a760 <uxr_seq_num_add>
 8014294:	9904      	ldr	r1, [sp, #16]
 8014296:	9a03      	ldr	r2, [sp, #12]
 8014298:	81e8      	strh	r0, [r5, #14]
 801429a:	4630      	mov	r0, r6
 801429c:	1a52      	subs	r2, r2, r1
 801429e:	f7fd fc43 	bl	8011b28 <ucdr_init_buffer>
 80142a2:	4630      	mov	r0, r6
 80142a4:	4622      	mov	r2, r4
 80142a6:	490f      	ldr	r1, [pc, #60]	@ (80142e4 <on_full_output_buffer_fragmented+0x110>)
 80142a8:	f7fd fc12 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 80142ac:	2000      	movs	r0, #0
 80142ae:	b00a      	add	sp, #40	@ 0x28
 80142b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b4:	b292      	uxth	r2, r2
 80142b6:	2302      	movs	r3, #2
 80142b8:	210d      	movs	r1, #13
 80142ba:	a802      	add	r0, sp, #8
 80142bc:	f7ff ff12 	bl	80140e4 <uxr_buffer_submessage_header>
 80142c0:	8928      	ldrh	r0, [r5, #8]
 80142c2:	89eb      	ldrh	r3, [r5, #14]
 80142c4:	6869      	ldr	r1, [r5, #4]
 80142c6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80142ca:	fbb3 f7f0 	udiv	r7, r3, r0
 80142ce:	fbb1 f1f0 	udiv	r1, r1, r0
 80142d2:	fb00 3317 	mls	r3, r0, r7, r3
 80142d6:	3208      	adds	r2, #8
 80142d8:	b29b      	uxth	r3, r3
 80142da:	fb01 f303 	mul.w	r3, r1, r3
 80142de:	6829      	ldr	r1, [r5, #0]
 80142e0:	50ca      	str	r2, [r1, r3]
 80142e2:	e7d3      	b.n	801428c <on_full_output_buffer_fragmented+0xb8>
 80142e4:	080141d5 	.word	0x080141d5

080142e8 <uxr_prepare_output_stream>:
 80142e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ea:	b087      	sub	sp, #28
 80142ec:	2707      	movs	r7, #7
 80142ee:	2500      	movs	r5, #0
 80142f0:	461c      	mov	r4, r3
 80142f2:	4606      	mov	r6, r0
 80142f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80142f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80142fa:	e9cd 7500 	strd	r7, r5, [sp]
 80142fe:	3204      	adds	r2, #4
 8014300:	f7fe ffc8 	bl	8013294 <uxr_prepare_stream_to_write_submessage>
 8014304:	f080 0201 	eor.w	r2, r0, #1
 8014308:	b2d2      	uxtb	r2, r2
 801430a:	75a2      	strb	r2, [r4, #22]
 801430c:	b112      	cbz	r2, 8014314 <uxr_prepare_output_stream+0x2c>
 801430e:	4628      	mov	r0, r5
 8014310:	b007      	add	sp, #28
 8014312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014314:	aa05      	add	r2, sp, #20
 8014316:	9902      	ldr	r1, [sp, #8]
 8014318:	4630      	mov	r0, r6
 801431a:	f7ff f8f7 	bl	801350c <uxr_init_base_object_request>
 801431e:	a905      	add	r1, sp, #20
 8014320:	4605      	mov	r5, r0
 8014322:	4620      	mov	r0, r4
 8014324:	f000 ff9c 	bl	8015260 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014328:	69a6      	ldr	r6, [r4, #24]
 801432a:	69e7      	ldr	r7, [r4, #28]
 801432c:	4620      	mov	r0, r4
 801432e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014332:	1a52      	subs	r2, r2, r1
 8014334:	f7fd fbf8 	bl	8011b28 <ucdr_init_buffer>
 8014338:	4620      	mov	r0, r4
 801433a:	463a      	mov	r2, r7
 801433c:	4631      	mov	r1, r6
 801433e:	f7fd fbc7 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 8014342:	4628      	mov	r0, r5
 8014344:	b007      	add	sp, #28
 8014346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014348 <uxr_prepare_output_stream_fragmented>:
 8014348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801434c:	b091      	sub	sp, #68	@ 0x44
 801434e:	4605      	mov	r5, r0
 8014350:	3008      	adds	r0, #8
 8014352:	461e      	mov	r6, r3
 8014354:	9105      	str	r1, [sp, #20]
 8014356:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801435a:	9204      	str	r2, [sp, #16]
 801435c:	f7ff fe8a 	bl	8014074 <uxr_get_output_reliable_stream>
 8014360:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014364:	2b01      	cmp	r3, #1
 8014366:	f000 8093 	beq.w	8014490 <uxr_prepare_output_stream_fragmented+0x148>
 801436a:	4604      	mov	r4, r0
 801436c:	2800      	cmp	r0, #0
 801436e:	f000 808f 	beq.w	8014490 <uxr_prepare_output_stream_fragmented+0x148>
 8014372:	f006 f9d3 	bl	801a71c <get_available_free_slots>
 8014376:	2800      	cmp	r0, #0
 8014378:	f000 8085 	beq.w	8014486 <uxr_prepare_output_stream_fragmented+0x13e>
 801437c:	8923      	ldrh	r3, [r4, #8]
 801437e:	89e7      	ldrh	r7, [r4, #14]
 8014380:	6862      	ldr	r2, [r4, #4]
 8014382:	fbb7 f9f3 	udiv	r9, r7, r3
 8014386:	fbb2 f2f3 	udiv	r2, r2, r3
 801438a:	fb03 7919 	mls	r9, r3, r9, r7
 801438e:	6823      	ldr	r3, [r4, #0]
 8014390:	f1a2 0b04 	sub.w	fp, r2, #4
 8014394:	9203      	str	r2, [sp, #12]
 8014396:	fa1f f989 	uxth.w	r9, r9
 801439a:	fb02 f909 	mul.w	r9, r2, r9
 801439e:	f109 0904 	add.w	r9, r9, #4
 80143a2:	4499      	add	r9, r3
 80143a4:	7b23      	ldrb	r3, [r4, #12]
 80143a6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80143aa:	4543      	cmp	r3, r8
 80143ac:	d37c      	bcc.n	80144a8 <uxr_prepare_output_stream_fragmented+0x160>
 80143ae:	f1ab 0a04 	sub.w	sl, fp, #4
 80143b2:	465a      	mov	r2, fp
 80143b4:	4649      	mov	r1, r9
 80143b6:	a808      	add	r0, sp, #32
 80143b8:	ebaa 0a03 	sub.w	sl, sl, r3
 80143bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80143be:	f8cd 8000 	str.w	r8, [sp]
 80143c2:	3308      	adds	r3, #8
 80143c4:	fa1f fa8a 	uxth.w	sl, sl
 80143c8:	9302      	str	r3, [sp, #8]
 80143ca:	2300      	movs	r3, #0
 80143cc:	f7fd fb9a 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 80143d0:	9b02      	ldr	r3, [sp, #8]
 80143d2:	4652      	mov	r2, sl
 80143d4:	210d      	movs	r1, #13
 80143d6:	455b      	cmp	r3, fp
 80143d8:	bf34      	ite	cc
 80143da:	2302      	movcc	r3, #2
 80143dc:	2300      	movcs	r3, #0
 80143de:	a808      	add	r0, sp, #32
 80143e0:	f7ff fe80 	bl	80140e4 <uxr_buffer_submessage_header>
 80143e4:	8921      	ldrh	r1, [r4, #8]
 80143e6:	6863      	ldr	r3, [r4, #4]
 80143e8:	4638      	mov	r0, r7
 80143ea:	fbb7 f2f1 	udiv	r2, r7, r1
 80143ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80143f2:	fb01 7212 	mls	r2, r1, r2, r7
 80143f6:	2101      	movs	r1, #1
 80143f8:	b292      	uxth	r2, r2
 80143fa:	fb02 f303 	mul.w	r3, r2, r3
 80143fe:	6822      	ldr	r2, [r4, #0]
 8014400:	f842 b003 	str.w	fp, [r2, r3]
 8014404:	f006 f9ac 	bl	801a760 <uxr_seq_num_add>
 8014408:	9b03      	ldr	r3, [sp, #12]
 801440a:	f108 0104 	add.w	r1, r8, #4
 801440e:	4607      	mov	r7, r0
 8014410:	f1a3 0208 	sub.w	r2, r3, #8
 8014414:	4630      	mov	r0, r6
 8014416:	4449      	add	r1, r9
 8014418:	eba2 0208 	sub.w	r2, r2, r8
 801441c:	f7fd fb84 	bl	8011b28 <ucdr_init_buffer>
 8014420:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014422:	2107      	movs	r1, #7
 8014424:	81e7      	strh	r7, [r4, #14]
 8014426:	1d1a      	adds	r2, r3, #4
 8014428:	2300      	movs	r3, #0
 801442a:	4630      	mov	r0, r6
 801442c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014430:	bf28      	it	cs
 8014432:	461a      	movcs	r2, r3
 8014434:	b292      	uxth	r2, r2
 8014436:	f7ff fe55 	bl	80140e4 <uxr_buffer_submessage_header>
 801443a:	aa07      	add	r2, sp, #28
 801443c:	9904      	ldr	r1, [sp, #16]
 801443e:	4628      	mov	r0, r5
 8014440:	f7ff f864 	bl	801350c <uxr_init_base_object_request>
 8014444:	4604      	mov	r4, r0
 8014446:	b320      	cbz	r0, 8014492 <uxr_prepare_output_stream_fragmented+0x14a>
 8014448:	a907      	add	r1, sp, #28
 801444a:	4630      	mov	r0, r6
 801444c:	f000 ff08 	bl	8015260 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014450:	4630      	mov	r0, r6
 8014452:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014456:	1a52      	subs	r2, r2, r1
 8014458:	f7fd fb66 	bl	8011b28 <ucdr_init_buffer>
 801445c:	9b05      	ldr	r3, [sp, #20]
 801445e:	9a02      	ldr	r2, [sp, #8]
 8014460:	4630      	mov	r0, r6
 8014462:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014466:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014468:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 801446c:	462a      	mov	r2, r5
 801446e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014472:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014474:	4918      	ldr	r1, [pc, #96]	@ (80144d8 <uxr_prepare_output_stream_fragmented+0x190>)
 8014476:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801447a:	f7fd fb29 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 801447e:	4620      	mov	r0, r4
 8014480:	b011      	add	sp, #68	@ 0x44
 8014482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014486:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014488:	4628      	mov	r0, r5
 801448a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801448c:	4798      	blx	r3
 801448e:	b920      	cbnz	r0, 801449a <uxr_prepare_output_stream_fragmented+0x152>
 8014490:	2400      	movs	r4, #0
 8014492:	4620      	mov	r0, r4
 8014494:	b011      	add	sp, #68	@ 0x44
 8014496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449a:	4620      	mov	r0, r4
 801449c:	f006 f93e 	bl	801a71c <get_available_free_slots>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f47f af6b 	bne.w	801437c <uxr_prepare_output_stream_fragmented+0x34>
 80144a6:	e7f3      	b.n	8014490 <uxr_prepare_output_stream_fragmented+0x148>
 80144a8:	4638      	mov	r0, r7
 80144aa:	2101      	movs	r1, #1
 80144ac:	f006 f958 	bl	801a760 <uxr_seq_num_add>
 80144b0:	8922      	ldrh	r2, [r4, #8]
 80144b2:	6863      	ldr	r3, [r4, #4]
 80144b4:	4607      	mov	r7, r0
 80144b6:	fbb3 f9f2 	udiv	r9, r3, r2
 80144ba:	fbb0 f3f2 	udiv	r3, r0, r2
 80144be:	fb02 0313 	mls	r3, r2, r3, r0
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	fb03 f909 	mul.w	r9, r3, r9
 80144c8:	6823      	ldr	r3, [r4, #0]
 80144ca:	f109 0904 	add.w	r9, r9, #4
 80144ce:	4499      	add	r9, r3
 80144d0:	7b23      	ldrb	r3, [r4, #12]
 80144d2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80144d6:	e76a      	b.n	80143ae <uxr_prepare_output_stream_fragmented+0x66>
 80144d8:	080141d5 	.word	0x080141d5

080144dc <uxr_serialize_message_header>:
 80144dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144de:	4616      	mov	r6, r2
 80144e0:	b083      	sub	sp, #12
 80144e2:	4604      	mov	r4, r0
 80144e4:	460d      	mov	r5, r1
 80144e6:	9301      	str	r3, [sp, #4]
 80144e8:	9f08      	ldr	r7, [sp, #32]
 80144ea:	f7fc f9d1 	bl	8010890 <ucdr_serialize_uint8_t>
 80144ee:	4631      	mov	r1, r6
 80144f0:	4620      	mov	r0, r4
 80144f2:	f7fc f9cd 	bl	8010890 <ucdr_serialize_uint8_t>
 80144f6:	9a01      	ldr	r2, [sp, #4]
 80144f8:	2101      	movs	r1, #1
 80144fa:	4620      	mov	r0, r4
 80144fc:	f7fc fa74 	bl	80109e8 <ucdr_serialize_endian_uint16_t>
 8014500:	062b      	lsls	r3, r5, #24
 8014502:	d501      	bpl.n	8014508 <uxr_serialize_message_header+0x2c>
 8014504:	b003      	add	sp, #12
 8014506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014508:	2204      	movs	r2, #4
 801450a:	4639      	mov	r1, r7
 801450c:	4620      	mov	r0, r4
 801450e:	b003      	add	sp, #12
 8014510:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014514:	f005 ba4c 	b.w	80199b0 <ucdr_serialize_array_uint8_t>

08014518 <uxr_deserialize_message_header>:
 8014518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801451a:	4616      	mov	r6, r2
 801451c:	b083      	sub	sp, #12
 801451e:	4604      	mov	r4, r0
 8014520:	460d      	mov	r5, r1
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	9f08      	ldr	r7, [sp, #32]
 8014526:	f7fc f9c9 	bl	80108bc <ucdr_deserialize_uint8_t>
 801452a:	4631      	mov	r1, r6
 801452c:	4620      	mov	r0, r4
 801452e:	f7fc f9c5 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014532:	9a01      	ldr	r2, [sp, #4]
 8014534:	2101      	movs	r1, #1
 8014536:	4620      	mov	r0, r4
 8014538:	f7fc fb4a 	bl	8010bd0 <ucdr_deserialize_endian_uint16_t>
 801453c:	f995 3000 	ldrsb.w	r3, [r5]
 8014540:	2b00      	cmp	r3, #0
 8014542:	da01      	bge.n	8014548 <uxr_deserialize_message_header+0x30>
 8014544:	b003      	add	sp, #12
 8014546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014548:	2204      	movs	r2, #4
 801454a:	4639      	mov	r1, r7
 801454c:	4620      	mov	r0, r4
 801454e:	b003      	add	sp, #12
 8014550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014554:	f005 ba90 	b.w	8019a78 <ucdr_deserialize_array_uint8_t>

08014558 <uxr_serialize_submessage_header>:
 8014558:	b530      	push	{r4, r5, lr}
 801455a:	4615      	mov	r5, r2
 801455c:	b083      	sub	sp, #12
 801455e:	4604      	mov	r4, r0
 8014560:	9301      	str	r3, [sp, #4]
 8014562:	f7fc f995 	bl	8010890 <ucdr_serialize_uint8_t>
 8014566:	4629      	mov	r1, r5
 8014568:	4620      	mov	r0, r4
 801456a:	f7fc f991 	bl	8010890 <ucdr_serialize_uint8_t>
 801456e:	9a01      	ldr	r2, [sp, #4]
 8014570:	2101      	movs	r1, #1
 8014572:	4620      	mov	r0, r4
 8014574:	b003      	add	sp, #12
 8014576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801457a:	f7fc ba35 	b.w	80109e8 <ucdr_serialize_endian_uint16_t>
 801457e:	bf00      	nop

08014580 <uxr_deserialize_submessage_header>:
 8014580:	b530      	push	{r4, r5, lr}
 8014582:	4615      	mov	r5, r2
 8014584:	b083      	sub	sp, #12
 8014586:	4604      	mov	r4, r0
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	f7fc f997 	bl	80108bc <ucdr_deserialize_uint8_t>
 801458e:	4629      	mov	r1, r5
 8014590:	4620      	mov	r0, r4
 8014592:	f7fc f993 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014596:	9a01      	ldr	r2, [sp, #4]
 8014598:	2101      	movs	r1, #1
 801459a:	4620      	mov	r0, r4
 801459c:	b003      	add	sp, #12
 801459e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145a2:	f7fc bb15 	b.w	8010bd0 <ucdr_deserialize_endian_uint16_t>
 80145a6:	bf00      	nop

080145a8 <uxr_serialize_CLIENT_Representation>:
 80145a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145ac:	2204      	movs	r2, #4
 80145ae:	460e      	mov	r6, r1
 80145b0:	4605      	mov	r5, r0
 80145b2:	f005 f9fd 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80145b6:	4607      	mov	r7, r0
 80145b8:	2202      	movs	r2, #2
 80145ba:	1d31      	adds	r1, r6, #4
 80145bc:	4628      	mov	r0, r5
 80145be:	f005 f9f7 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80145c2:	4038      	ands	r0, r7
 80145c4:	2202      	movs	r2, #2
 80145c6:	1db1      	adds	r1, r6, #6
 80145c8:	b2c7      	uxtb	r7, r0
 80145ca:	4628      	mov	r0, r5
 80145cc:	f005 f9f0 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80145d0:	2204      	movs	r2, #4
 80145d2:	4007      	ands	r7, r0
 80145d4:	f106 0108 	add.w	r1, r6, #8
 80145d8:	4628      	mov	r0, r5
 80145da:	f005 f9e9 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80145de:	4007      	ands	r7, r0
 80145e0:	7b31      	ldrb	r1, [r6, #12]
 80145e2:	4628      	mov	r0, r5
 80145e4:	f7fc f954 	bl	8010890 <ucdr_serialize_uint8_t>
 80145e8:	7b71      	ldrb	r1, [r6, #13]
 80145ea:	4007      	ands	r7, r0
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7fc f921 	bl	8010834 <ucdr_serialize_bool>
 80145f2:	7b73      	ldrb	r3, [r6, #13]
 80145f4:	ea07 0800 	and.w	r8, r7, r0
 80145f8:	b93b      	cbnz	r3, 801460a <uxr_serialize_CLIENT_Representation+0x62>
 80145fa:	8bb1      	ldrh	r1, [r6, #28]
 80145fc:	4628      	mov	r0, r5
 80145fe:	f7fc f973 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014602:	ea08 0000 	and.w	r0, r8, r0
 8014606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801460a:	6931      	ldr	r1, [r6, #16]
 801460c:	4628      	mov	r0, r5
 801460e:	f7fc fb55 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014612:	6933      	ldr	r3, [r6, #16]
 8014614:	b1e3      	cbz	r3, 8014650 <uxr_serialize_CLIENT_Representation+0xa8>
 8014616:	b1c0      	cbz	r0, 801464a <uxr_serialize_CLIENT_Representation+0xa2>
 8014618:	4637      	mov	r7, r6
 801461a:	f04f 0900 	mov.w	r9, #0
 801461e:	e000      	b.n	8014622 <uxr_serialize_CLIENT_Representation+0x7a>
 8014620:	b19c      	cbz	r4, 801464a <uxr_serialize_CLIENT_Representation+0xa2>
 8014622:	6979      	ldr	r1, [r7, #20]
 8014624:	4628      	mov	r0, r5
 8014626:	f005 fb39 	bl	8019c9c <ucdr_serialize_string>
 801462a:	69b9      	ldr	r1, [r7, #24]
 801462c:	4604      	mov	r4, r0
 801462e:	4628      	mov	r0, r5
 8014630:	f005 fb34 	bl	8019c9c <ucdr_serialize_string>
 8014634:	f109 0901 	add.w	r9, r9, #1
 8014638:	6933      	ldr	r3, [r6, #16]
 801463a:	4004      	ands	r4, r0
 801463c:	3708      	adds	r7, #8
 801463e:	4599      	cmp	r9, r3
 8014640:	b2e4      	uxtb	r4, r4
 8014642:	d3ed      	bcc.n	8014620 <uxr_serialize_CLIENT_Representation+0x78>
 8014644:	ea08 0804 	and.w	r8, r8, r4
 8014648:	e7d7      	b.n	80145fa <uxr_serialize_CLIENT_Representation+0x52>
 801464a:	f04f 0800 	mov.w	r8, #0
 801464e:	e7d4      	b.n	80145fa <uxr_serialize_CLIENT_Representation+0x52>
 8014650:	ea08 0800 	and.w	r8, r8, r0
 8014654:	e7d1      	b.n	80145fa <uxr_serialize_CLIENT_Representation+0x52>
 8014656:	bf00      	nop

08014658 <uxr_deserialize_CLIENT_Representation>:
 8014658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801465c:	2204      	movs	r2, #4
 801465e:	460c      	mov	r4, r1
 8014660:	4605      	mov	r5, r0
 8014662:	f005 fa09 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014666:	4607      	mov	r7, r0
 8014668:	2202      	movs	r2, #2
 801466a:	1d21      	adds	r1, r4, #4
 801466c:	4628      	mov	r0, r5
 801466e:	f005 fa03 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014672:	4038      	ands	r0, r7
 8014674:	2202      	movs	r2, #2
 8014676:	1da1      	adds	r1, r4, #6
 8014678:	b2c6      	uxtb	r6, r0
 801467a:	4628      	mov	r0, r5
 801467c:	f005 f9fc 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014680:	2204      	movs	r2, #4
 8014682:	4006      	ands	r6, r0
 8014684:	f104 0108 	add.w	r1, r4, #8
 8014688:	4628      	mov	r0, r5
 801468a:	f005 f9f5 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 801468e:	4006      	ands	r6, r0
 8014690:	f104 010c 	add.w	r1, r4, #12
 8014694:	4628      	mov	r0, r5
 8014696:	f7fc f911 	bl	80108bc <ucdr_deserialize_uint8_t>
 801469a:	f104 010d 	add.w	r1, r4, #13
 801469e:	ea06 0700 	and.w	r7, r6, r0
 80146a2:	4628      	mov	r0, r5
 80146a4:	f7fc f8dc 	bl	8010860 <ucdr_deserialize_bool>
 80146a8:	7b63      	ldrb	r3, [r4, #13]
 80146aa:	4007      	ands	r7, r0
 80146ac:	b93b      	cbnz	r3, 80146be <uxr_deserialize_CLIENT_Representation+0x66>
 80146ae:	f104 011c 	add.w	r1, r4, #28
 80146b2:	4628      	mov	r0, r5
 80146b4:	f7fc fa18 	bl	8010ae8 <ucdr_deserialize_uint16_t>
 80146b8:	4038      	ands	r0, r7
 80146ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146be:	f104 0110 	add.w	r1, r4, #16
 80146c2:	4628      	mov	r0, r5
 80146c4:	f7fc fc2a 	bl	8010f1c <ucdr_deserialize_uint32_t>
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	d903      	bls.n	80146d6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80146ce:	2301      	movs	r3, #1
 80146d0:	2700      	movs	r7, #0
 80146d2:	75ab      	strb	r3, [r5, #22]
 80146d4:	e7eb      	b.n	80146ae <uxr_deserialize_CLIENT_Representation+0x56>
 80146d6:	b30b      	cbz	r3, 801471c <uxr_deserialize_CLIENT_Representation+0xc4>
 80146d8:	b1f0      	cbz	r0, 8014718 <uxr_deserialize_CLIENT_Representation+0xc0>
 80146da:	46a0      	mov	r8, r4
 80146dc:	f04f 0900 	mov.w	r9, #0
 80146e0:	e000      	b.n	80146e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80146e2:	b1ce      	cbz	r6, 8014718 <uxr_deserialize_CLIENT_Representation+0xc0>
 80146e4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80146e8:	f108 0808 	add.w	r8, r8, #8
 80146ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80146f0:	4628      	mov	r0, r5
 80146f2:	f005 fae3 	bl	8019cbc <ucdr_deserialize_string>
 80146f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80146fa:	4606      	mov	r6, r0
 80146fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014700:	4628      	mov	r0, r5
 8014702:	f109 0901 	add.w	r9, r9, #1
 8014706:	f005 fad9 	bl	8019cbc <ucdr_deserialize_string>
 801470a:	6923      	ldr	r3, [r4, #16]
 801470c:	4006      	ands	r6, r0
 801470e:	4599      	cmp	r9, r3
 8014710:	b2f6      	uxtb	r6, r6
 8014712:	d3e6      	bcc.n	80146e2 <uxr_deserialize_CLIENT_Representation+0x8a>
 8014714:	4037      	ands	r7, r6
 8014716:	e7ca      	b.n	80146ae <uxr_deserialize_CLIENT_Representation+0x56>
 8014718:	2700      	movs	r7, #0
 801471a:	e7c8      	b.n	80146ae <uxr_deserialize_CLIENT_Representation+0x56>
 801471c:	4007      	ands	r7, r0
 801471e:	e7c6      	b.n	80146ae <uxr_deserialize_CLIENT_Representation+0x56>

08014720 <uxr_serialize_AGENT_Representation>:
 8014720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014724:	2204      	movs	r2, #4
 8014726:	460f      	mov	r7, r1
 8014728:	4605      	mov	r5, r0
 801472a:	f005 f941 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801472e:	4604      	mov	r4, r0
 8014730:	2202      	movs	r2, #2
 8014732:	1d39      	adds	r1, r7, #4
 8014734:	4628      	mov	r0, r5
 8014736:	f005 f93b 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801473a:	4020      	ands	r0, r4
 801473c:	2202      	movs	r2, #2
 801473e:	1db9      	adds	r1, r7, #6
 8014740:	b2c4      	uxtb	r4, r0
 8014742:	4628      	mov	r0, r5
 8014744:	f005 f934 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014748:	7a39      	ldrb	r1, [r7, #8]
 801474a:	4004      	ands	r4, r0
 801474c:	4628      	mov	r0, r5
 801474e:	f7fc f871 	bl	8010834 <ucdr_serialize_bool>
 8014752:	7a3b      	ldrb	r3, [r7, #8]
 8014754:	ea00 0804 	and.w	r8, r0, r4
 8014758:	b913      	cbnz	r3, 8014760 <uxr_serialize_AGENT_Representation+0x40>
 801475a:	4640      	mov	r0, r8
 801475c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014760:	68f9      	ldr	r1, [r7, #12]
 8014762:	4628      	mov	r0, r5
 8014764:	f7fc faaa 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	b303      	cbz	r3, 80147ae <uxr_serialize_AGENT_Representation+0x8e>
 801476c:	b1d0      	cbz	r0, 80147a4 <uxr_serialize_AGENT_Representation+0x84>
 801476e:	463e      	mov	r6, r7
 8014770:	f04f 0900 	mov.w	r9, #0
 8014774:	e000      	b.n	8014778 <uxr_serialize_AGENT_Representation+0x58>
 8014776:	b1ac      	cbz	r4, 80147a4 <uxr_serialize_AGENT_Representation+0x84>
 8014778:	6931      	ldr	r1, [r6, #16]
 801477a:	4628      	mov	r0, r5
 801477c:	f005 fa8e 	bl	8019c9c <ucdr_serialize_string>
 8014780:	6971      	ldr	r1, [r6, #20]
 8014782:	4604      	mov	r4, r0
 8014784:	4628      	mov	r0, r5
 8014786:	f005 fa89 	bl	8019c9c <ucdr_serialize_string>
 801478a:	f109 0901 	add.w	r9, r9, #1
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	4004      	ands	r4, r0
 8014792:	3608      	adds	r6, #8
 8014794:	4599      	cmp	r9, r3
 8014796:	b2e4      	uxtb	r4, r4
 8014798:	d3ed      	bcc.n	8014776 <uxr_serialize_AGENT_Representation+0x56>
 801479a:	ea08 0804 	and.w	r8, r8, r4
 801479e:	4640      	mov	r0, r8
 80147a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147a4:	f04f 0800 	mov.w	r8, #0
 80147a8:	4640      	mov	r0, r8
 80147aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ae:	ea08 0800 	and.w	r8, r8, r0
 80147b2:	e7d2      	b.n	801475a <uxr_serialize_AGENT_Representation+0x3a>

080147b4 <uxr_serialize_DATAWRITER_Representation>:
 80147b4:	b570      	push	{r4, r5, r6, lr}
 80147b6:	460d      	mov	r5, r1
 80147b8:	7809      	ldrb	r1, [r1, #0]
 80147ba:	4606      	mov	r6, r0
 80147bc:	f7fc f868 	bl	8010890 <ucdr_serialize_uint8_t>
 80147c0:	4604      	mov	r4, r0
 80147c2:	b130      	cbz	r0, 80147d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80147c4:	782b      	ldrb	r3, [r5, #0]
 80147c6:	2b02      	cmp	r3, #2
 80147c8:	d00c      	beq.n	80147e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80147ca:	2b03      	cmp	r3, #3
 80147cc:	d010      	beq.n	80147f0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80147ce:	2b01      	cmp	r3, #1
 80147d0:	d008      	beq.n	80147e4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80147d2:	2202      	movs	r2, #2
 80147d4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80147d8:	4630      	mov	r0, r6
 80147da:	f005 f8e9 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80147de:	4020      	ands	r0, r4
 80147e0:	b2c0      	uxtb	r0, r0
 80147e2:	bd70      	pop	{r4, r5, r6, pc}
 80147e4:	6869      	ldr	r1, [r5, #4]
 80147e6:	4630      	mov	r0, r6
 80147e8:	f005 fa58 	bl	8019c9c <ucdr_serialize_string>
 80147ec:	4604      	mov	r4, r0
 80147ee:	e7f0      	b.n	80147d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80147f0:	4629      	mov	r1, r5
 80147f2:	4630      	mov	r0, r6
 80147f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80147f8:	3104      	adds	r1, #4
 80147fa:	f7fd fa35 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 80147fe:	4604      	mov	r4, r0
 8014800:	e7e7      	b.n	80147d2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014802:	bf00      	nop

08014804 <uxr_serialize_ObjectVariant.part.0>:
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	780b      	ldrb	r3, [r1, #0]
 8014808:	460c      	mov	r4, r1
 801480a:	4605      	mov	r5, r0
 801480c:	3b01      	subs	r3, #1
 801480e:	2b0d      	cmp	r3, #13
 8014810:	d854      	bhi.n	80148bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014812:	e8df f003 	tbb	[pc, r3]
 8014816:	0730      	.short	0x0730
 8014818:	07071b1b 	.word	0x07071b1b
 801481c:	0c530707 	.word	0x0c530707
 8014820:	494e0c0c 	.word	0x494e0c0c
 8014824:	3104      	adds	r1, #4
 8014826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801482a:	f7ff bfc3 	b.w	80147b4 <uxr_serialize_DATAWRITER_Representation>
 801482e:	7909      	ldrb	r1, [r1, #4]
 8014830:	f7fc f82e 	bl	8010890 <ucdr_serialize_uint8_t>
 8014834:	b1e8      	cbz	r0, 8014872 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014836:	7923      	ldrb	r3, [r4, #4]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d001      	beq.n	8014840 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801483c:	2b02      	cmp	r3, #2
 801483e:	d13d      	bne.n	80148bc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014840:	68a1      	ldr	r1, [r4, #8]
 8014842:	4628      	mov	r0, r5
 8014844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014848:	f005 ba28 	b.w	8019c9c <ucdr_serialize_string>
 801484c:	7909      	ldrb	r1, [r1, #4]
 801484e:	f7fc f81f 	bl	8010890 <ucdr_serialize_uint8_t>
 8014852:	4606      	mov	r6, r0
 8014854:	b120      	cbz	r0, 8014860 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014856:	7923      	ldrb	r3, [r4, #4]
 8014858:	2b02      	cmp	r3, #2
 801485a:	d039      	beq.n	80148d0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801485c:	2b03      	cmp	r3, #3
 801485e:	d02f      	beq.n	80148c0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014860:	2202      	movs	r2, #2
 8014862:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014866:	4628      	mov	r0, r5
 8014868:	f005 f8a2 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801486c:	4030      	ands	r0, r6
 801486e:	b2c0      	uxtb	r0, r0
 8014870:	bd70      	pop	{r4, r5, r6, pc}
 8014872:	2000      	movs	r0, #0
 8014874:	bd70      	pop	{r4, r5, r6, pc}
 8014876:	7909      	ldrb	r1, [r1, #4]
 8014878:	f7fc f80a 	bl	8010890 <ucdr_serialize_uint8_t>
 801487c:	4606      	mov	r6, r0
 801487e:	b158      	cbz	r0, 8014898 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014880:	7923      	ldrb	r3, [r4, #4]
 8014882:	2b02      	cmp	r3, #2
 8014884:	d003      	beq.n	801488e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8014886:	2b03      	cmp	r3, #3
 8014888:	d028      	beq.n	80148dc <uxr_serialize_ObjectVariant.part.0+0xd8>
 801488a:	2b01      	cmp	r3, #1
 801488c:	d104      	bne.n	8014898 <uxr_serialize_ObjectVariant.part.0+0x94>
 801488e:	68a1      	ldr	r1, [r4, #8]
 8014890:	4628      	mov	r0, r5
 8014892:	f005 fa03 	bl	8019c9c <ucdr_serialize_string>
 8014896:	4606      	mov	r6, r0
 8014898:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801489c:	4628      	mov	r0, r5
 801489e:	f7fc fd33 	bl	8011308 <ucdr_serialize_int16_t>
 80148a2:	4030      	ands	r0, r6
 80148a4:	b2c0      	uxtb	r0, r0
 80148a6:	bd70      	pop	{r4, r5, r6, pc}
 80148a8:	3104      	adds	r1, #4
 80148aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148ae:	f7ff be7b 	b.w	80145a8 <uxr_serialize_CLIENT_Representation>
 80148b2:	3104      	adds	r1, #4
 80148b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148b8:	f7ff bf32 	b.w	8014720 <uxr_serialize_AGENT_Representation>
 80148bc:	2001      	movs	r0, #1
 80148be:	bd70      	pop	{r4, r5, r6, pc}
 80148c0:	68a2      	ldr	r2, [r4, #8]
 80148c2:	f104 010c 	add.w	r1, r4, #12
 80148c6:	4628      	mov	r0, r5
 80148c8:	f7fd f9ce 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 80148cc:	4606      	mov	r6, r0
 80148ce:	e7c7      	b.n	8014860 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80148d0:	68a1      	ldr	r1, [r4, #8]
 80148d2:	4628      	mov	r0, r5
 80148d4:	f005 f9e2 	bl	8019c9c <ucdr_serialize_string>
 80148d8:	4606      	mov	r6, r0
 80148da:	e7c1      	b.n	8014860 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80148dc:	68a2      	ldr	r2, [r4, #8]
 80148de:	f104 010c 	add.w	r1, r4, #12
 80148e2:	4628      	mov	r0, r5
 80148e4:	f7fd f9c0 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 80148e8:	4606      	mov	r6, r0
 80148ea:	e7d5      	b.n	8014898 <uxr_serialize_ObjectVariant.part.0+0x94>

080148ec <uxr_deserialize_DATAWRITER_Representation>:
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	4606      	mov	r6, r0
 80148f0:	460d      	mov	r5, r1
 80148f2:	f7fb ffe3 	bl	80108bc <ucdr_deserialize_uint8_t>
 80148f6:	4604      	mov	r4, r0
 80148f8:	b130      	cbz	r0, 8014908 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80148fa:	782b      	ldrb	r3, [r5, #0]
 80148fc:	2b02      	cmp	r3, #2
 80148fe:	d00c      	beq.n	801491a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014900:	2b03      	cmp	r3, #3
 8014902:	d012      	beq.n	801492a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014904:	2b01      	cmp	r3, #1
 8014906:	d008      	beq.n	801491a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014908:	2202      	movs	r2, #2
 801490a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801490e:	4630      	mov	r0, r6
 8014910:	f005 f8b2 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014914:	4020      	ands	r0, r4
 8014916:	b2c0      	uxtb	r0, r0
 8014918:	bd70      	pop	{r4, r5, r6, pc}
 801491a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801491e:	6869      	ldr	r1, [r5, #4]
 8014920:	4630      	mov	r0, r6
 8014922:	f005 f9cb 	bl	8019cbc <ucdr_deserialize_string>
 8014926:	4604      	mov	r4, r0
 8014928:	e7ee      	b.n	8014908 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801492a:	1d2b      	adds	r3, r5, #4
 801492c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014930:	f105 0108 	add.w	r1, r5, #8
 8014934:	4630      	mov	r0, r6
 8014936:	f7fd f9a9 	bl	8011c8c <ucdr_deserialize_sequence_uint8_t>
 801493a:	4604      	mov	r4, r0
 801493c:	e7e4      	b.n	8014908 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801493e:	bf00      	nop

08014940 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	460d      	mov	r5, r1
 8014944:	7809      	ldrb	r1, [r1, #0]
 8014946:	4606      	mov	r6, r0
 8014948:	f7fb ff74 	bl	8010834 <ucdr_serialize_bool>
 801494c:	782b      	ldrb	r3, [r5, #0]
 801494e:	4604      	mov	r4, r0
 8014950:	b94b      	cbnz	r3, 8014966 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014952:	7a29      	ldrb	r1, [r5, #8]
 8014954:	4630      	mov	r0, r6
 8014956:	f7fb ff6d 	bl	8010834 <ucdr_serialize_bool>
 801495a:	7a2b      	ldrb	r3, [r5, #8]
 801495c:	4004      	ands	r4, r0
 801495e:	b2e4      	uxtb	r4, r4
 8014960:	b943      	cbnz	r3, 8014974 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014962:	4620      	mov	r0, r4
 8014964:	bd70      	pop	{r4, r5, r6, pc}
 8014966:	6869      	ldr	r1, [r5, #4]
 8014968:	4630      	mov	r0, r6
 801496a:	f005 f997 	bl	8019c9c <ucdr_serialize_string>
 801496e:	4004      	ands	r4, r0
 8014970:	b2e4      	uxtb	r4, r4
 8014972:	e7ee      	b.n	8014952 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014974:	68e9      	ldr	r1, [r5, #12]
 8014976:	4630      	mov	r0, r6
 8014978:	f005 f990 	bl	8019c9c <ucdr_serialize_string>
 801497c:	4004      	ands	r4, r0
 801497e:	4620      	mov	r0, r4
 8014980:	bd70      	pop	{r4, r5, r6, pc}
 8014982:	bf00      	nop

08014984 <uxr_serialize_OBJK_Topic_Binary>:
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	460d      	mov	r5, r1
 8014988:	4606      	mov	r6, r0
 801498a:	6809      	ldr	r1, [r1, #0]
 801498c:	f005 f986 	bl	8019c9c <ucdr_serialize_string>
 8014990:	4604      	mov	r4, r0
 8014992:	7929      	ldrb	r1, [r5, #4]
 8014994:	4630      	mov	r0, r6
 8014996:	f7fb ff4d 	bl	8010834 <ucdr_serialize_bool>
 801499a:	792b      	ldrb	r3, [r5, #4]
 801499c:	4004      	ands	r4, r0
 801499e:	b2e4      	uxtb	r4, r4
 80149a0:	b943      	cbnz	r3, 80149b4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80149a2:	7b29      	ldrb	r1, [r5, #12]
 80149a4:	4630      	mov	r0, r6
 80149a6:	f7fb ff45 	bl	8010834 <ucdr_serialize_bool>
 80149aa:	7b2b      	ldrb	r3, [r5, #12]
 80149ac:	4004      	ands	r4, r0
 80149ae:	b93b      	cbnz	r3, 80149c0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80149b0:	4620      	mov	r0, r4
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	68a9      	ldr	r1, [r5, #8]
 80149b6:	4630      	mov	r0, r6
 80149b8:	f005 f970 	bl	8019c9c <ucdr_serialize_string>
 80149bc:	4004      	ands	r4, r0
 80149be:	e7f0      	b.n	80149a2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80149c0:	6929      	ldr	r1, [r5, #16]
 80149c2:	4630      	mov	r0, r6
 80149c4:	f005 f96a 	bl	8019c9c <ucdr_serialize_string>
 80149c8:	4004      	ands	r4, r0
 80149ca:	b2e4      	uxtb	r4, r4
 80149cc:	4620      	mov	r0, r4
 80149ce:	bd70      	pop	{r4, r5, r6, pc}

080149d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80149d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d4:	460c      	mov	r4, r1
 80149d6:	7809      	ldrb	r1, [r1, #0]
 80149d8:	4606      	mov	r6, r0
 80149da:	f7fb ff2b 	bl	8010834 <ucdr_serialize_bool>
 80149de:	7823      	ldrb	r3, [r4, #0]
 80149e0:	4605      	mov	r5, r0
 80149e2:	b96b      	cbnz	r3, 8014a00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80149e4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80149e8:	4630      	mov	r0, r6
 80149ea:	f7fb ff23 	bl	8010834 <ucdr_serialize_bool>
 80149ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80149f2:	4005      	ands	r5, r0
 80149f4:	b2ed      	uxtb	r5, r5
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d169      	bne.n	8014ace <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80149fa:	4628      	mov	r0, r5
 80149fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a00:	6861      	ldr	r1, [r4, #4]
 8014a02:	4630      	mov	r0, r6
 8014a04:	f7fc f95a 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014a08:	6863      	ldr	r3, [r4, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d06b      	beq.n	8014ae6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d067      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a12:	68a1      	ldr	r1, [r4, #8]
 8014a14:	4630      	mov	r0, r6
 8014a16:	f005 f941 	bl	8019c9c <ucdr_serialize_string>
 8014a1a:	6863      	ldr	r3, [r4, #4]
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d953      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d05e      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a24:	68e1      	ldr	r1, [r4, #12]
 8014a26:	4630      	mov	r0, r6
 8014a28:	f005 f938 	bl	8019c9c <ucdr_serialize_string>
 8014a2c:	6863      	ldr	r3, [r4, #4]
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	d94a      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a32:	2800      	cmp	r0, #0
 8014a34:	d055      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a36:	6921      	ldr	r1, [r4, #16]
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f005 f92f 	bl	8019c9c <ucdr_serialize_string>
 8014a3e:	6863      	ldr	r3, [r4, #4]
 8014a40:	2b03      	cmp	r3, #3
 8014a42:	d941      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d04c      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a48:	6961      	ldr	r1, [r4, #20]
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f005 f926 	bl	8019c9c <ucdr_serialize_string>
 8014a50:	6863      	ldr	r3, [r4, #4]
 8014a52:	2b04      	cmp	r3, #4
 8014a54:	d938      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d043      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a5a:	69a1      	ldr	r1, [r4, #24]
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f005 f91d 	bl	8019c9c <ucdr_serialize_string>
 8014a62:	6863      	ldr	r3, [r4, #4]
 8014a64:	2b05      	cmp	r3, #5
 8014a66:	d92f      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d03a      	beq.n	8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a6c:	69e1      	ldr	r1, [r4, #28]
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f005 f914 	bl	8019c9c <ucdr_serialize_string>
 8014a74:	6863      	ldr	r3, [r4, #4]
 8014a76:	2b06      	cmp	r3, #6
 8014a78:	d926      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a7a:	b390      	cbz	r0, 8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a7c:	6a21      	ldr	r1, [r4, #32]
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f005 f90c 	bl	8019c9c <ucdr_serialize_string>
 8014a84:	6863      	ldr	r3, [r4, #4]
 8014a86:	2b07      	cmp	r3, #7
 8014a88:	d91e      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a8a:	b350      	cbz	r0, 8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f005 f904 	bl	8019c9c <ucdr_serialize_string>
 8014a94:	6863      	ldr	r3, [r4, #4]
 8014a96:	2b08      	cmp	r3, #8
 8014a98:	d916      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014a9a:	b310      	cbz	r0, 8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014a9c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	f005 f8fc 	bl	8019c9c <ucdr_serialize_string>
 8014aa4:	6863      	ldr	r3, [r4, #4]
 8014aa6:	2b09      	cmp	r3, #9
 8014aa8:	d90e      	bls.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014aaa:	b1d0      	cbz	r0, 8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014aac:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014ab0:	2709      	movs	r7, #9
 8014ab2:	e000      	b.n	8014ab6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014ab4:	b1a8      	cbz	r0, 8014ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ab6:	f858 1b04 	ldr.w	r1, [r8], #4
 8014aba:	4630      	mov	r0, r6
 8014abc:	f005 f8ee 	bl	8019c9c <ucdr_serialize_string>
 8014ac0:	3701      	adds	r7, #1
 8014ac2:	6862      	ldr	r2, [r4, #4]
 8014ac4:	4297      	cmp	r7, r2
 8014ac6:	d3f5      	bcc.n	8014ab4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014ac8:	4005      	ands	r5, r0
 8014aca:	b2ed      	uxtb	r5, r5
 8014acc:	e78a      	b.n	80149e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014ace:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014ad0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f7fd f8c7 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 8014ada:	4005      	ands	r5, r0
 8014adc:	4628      	mov	r0, r5
 8014ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae2:	2500      	movs	r5, #0
 8014ae4:	e77e      	b.n	80149e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014ae6:	4028      	ands	r0, r5
 8014ae8:	b2c5      	uxtb	r5, r0
 8014aea:	e77b      	b.n	80149e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014aec <uxr_serialize_OBJK_Publisher_Binary>:
 8014aec:	b570      	push	{r4, r5, r6, lr}
 8014aee:	460d      	mov	r5, r1
 8014af0:	7809      	ldrb	r1, [r1, #0]
 8014af2:	4606      	mov	r6, r0
 8014af4:	f7fb fe9e 	bl	8010834 <ucdr_serialize_bool>
 8014af8:	782b      	ldrb	r3, [r5, #0]
 8014afa:	4604      	mov	r4, r0
 8014afc:	b94b      	cbnz	r3, 8014b12 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014afe:	7a29      	ldrb	r1, [r5, #8]
 8014b00:	4630      	mov	r0, r6
 8014b02:	f7fb fe97 	bl	8010834 <ucdr_serialize_bool>
 8014b06:	7a2b      	ldrb	r3, [r5, #8]
 8014b08:	4004      	ands	r4, r0
 8014b0a:	b2e4      	uxtb	r4, r4
 8014b0c:	b943      	cbnz	r3, 8014b20 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014b0e:	4620      	mov	r0, r4
 8014b10:	bd70      	pop	{r4, r5, r6, pc}
 8014b12:	6869      	ldr	r1, [r5, #4]
 8014b14:	4630      	mov	r0, r6
 8014b16:	f005 f8c1 	bl	8019c9c <ucdr_serialize_string>
 8014b1a:	4004      	ands	r4, r0
 8014b1c:	b2e4      	uxtb	r4, r4
 8014b1e:	e7ee      	b.n	8014afe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014b20:	f105 010c 	add.w	r1, r5, #12
 8014b24:	4630      	mov	r0, r6
 8014b26:	f7ff ff53 	bl	80149d0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014b2a:	4004      	ands	r4, r0
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}

08014b30 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014b30:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014b34:	4688      	mov	r8, r1
 8014b36:	4681      	mov	r9, r0
 8014b38:	8809      	ldrh	r1, [r1, #0]
 8014b3a:	f7fb fed5 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014b3e:	4606      	mov	r6, r0
 8014b40:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014b44:	4648      	mov	r0, r9
 8014b46:	f7fb fe75 	bl	8010834 <ucdr_serialize_bool>
 8014b4a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014b4e:	4006      	ands	r6, r0
 8014b50:	b2f5      	uxtb	r5, r6
 8014b52:	b9eb      	cbnz	r3, 8014b90 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014b54:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014b58:	4648      	mov	r0, r9
 8014b5a:	f7fb fe6b 	bl	8010834 <ucdr_serialize_bool>
 8014b5e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014b62:	4005      	ands	r5, r0
 8014b64:	bb7b      	cbnz	r3, 8014bc6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014b66:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014b6a:	4648      	mov	r0, r9
 8014b6c:	f7fb fe62 	bl	8010834 <ucdr_serialize_bool>
 8014b70:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014b74:	4005      	ands	r5, r0
 8014b76:	b9f3      	cbnz	r3, 8014bb6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014b78:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014b7c:	4648      	mov	r0, r9
 8014b7e:	f7fb fe59 	bl	8010834 <ucdr_serialize_bool>
 8014b82:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014b86:	4005      	ands	r5, r0
 8014b88:	b94b      	cbnz	r3, 8014b9e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014b90:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014b94:	4648      	mov	r0, r9
 8014b96:	f7fb fea7 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014b9a:	4005      	ands	r5, r0
 8014b9c:	e7da      	b.n	8014b54 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014b9e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014ba2:	f108 011c 	add.w	r1, r8, #28
 8014ba6:	4648      	mov	r0, r9
 8014ba8:	f7fd f85e 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 8014bac:	4028      	ands	r0, r5
 8014bae:	b2c5      	uxtb	r5, r0
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014bb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bba:	4648      	mov	r0, r9
 8014bbc:	f7fc f87e 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014bc0:	4028      	ands	r0, r5
 8014bc2:	b2c5      	uxtb	r5, r0
 8014bc4:	e7d8      	b.n	8014b78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014bc6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014bca:	4648      	mov	r0, r9
 8014bcc:	f7fc f876 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014bd0:	4028      	ands	r0, r5
 8014bd2:	b2c5      	uxtb	r5, r0
 8014bd4:	e7c7      	b.n	8014b66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014bd6:	bf00      	nop

08014bd8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bda:	2202      	movs	r2, #2
 8014bdc:	460d      	mov	r5, r1
 8014bde:	4606      	mov	r6, r0
 8014be0:	f004 fee6 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014be4:	4604      	mov	r4, r0
 8014be6:	78a9      	ldrb	r1, [r5, #2]
 8014be8:	4630      	mov	r0, r6
 8014bea:	f7fb fe23 	bl	8010834 <ucdr_serialize_bool>
 8014bee:	78ab      	ldrb	r3, [r5, #2]
 8014bf0:	4004      	ands	r4, r0
 8014bf2:	b2e4      	uxtb	r4, r4
 8014bf4:	b90b      	cbnz	r3, 8014bfa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bfa:	f105 0108 	add.w	r1, r5, #8
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f7ff ff96 	bl	8014b30 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014c04:	4607      	mov	r7, r0
 8014c06:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	f7fb fe12 	bl	8010834 <ucdr_serialize_bool>
 8014c10:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014c14:	4038      	ands	r0, r7
 8014c16:	b2c7      	uxtb	r7, r0
 8014c18:	b913      	cbnz	r3, 8014c20 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014c1a:	403c      	ands	r4, r7
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c20:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014c24:	4630      	mov	r0, r6
 8014c26:	f7fc fa9f 	bl	8011168 <ucdr_serialize_uint64_t>
 8014c2a:	4007      	ands	r7, r0
 8014c2c:	e7f5      	b.n	8014c1a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014c2e:	bf00      	nop

08014c30 <uxr_deserialize_ObjectVariant>:
 8014c30:	b570      	push	{r4, r5, r6, lr}
 8014c32:	4605      	mov	r5, r0
 8014c34:	460e      	mov	r6, r1
 8014c36:	f7fb fe41 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014c3a:	b168      	cbz	r0, 8014c58 <uxr_deserialize_ObjectVariant+0x28>
 8014c3c:	7833      	ldrb	r3, [r6, #0]
 8014c3e:	4604      	mov	r4, r0
 8014c40:	3b01      	subs	r3, #1
 8014c42:	2b0d      	cmp	r3, #13
 8014c44:	d809      	bhi.n	8014c5a <uxr_deserialize_ObjectVariant+0x2a>
 8014c46:	e8df f003 	tbb	[pc, r3]
 8014c4a:	0a41      	.short	0x0a41
 8014c4c:	0a0a2323 	.word	0x0a0a2323
 8014c50:	10080a0a 	.word	0x10080a0a
 8014c54:	565c1010 	.word	0x565c1010
 8014c58:	2400      	movs	r4, #0
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	bd70      	pop	{r4, r5, r6, pc}
 8014c5e:	1d31      	adds	r1, r6, #4
 8014c60:	4628      	mov	r0, r5
 8014c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c66:	f7ff be41 	b.w	80148ec <uxr_deserialize_DATAWRITER_Representation>
 8014c6a:	1d31      	adds	r1, r6, #4
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f7fb fe25 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	d0f0      	beq.n	8014c58 <uxr_deserialize_ObjectVariant+0x28>
 8014c76:	7933      	ldrb	r3, [r6, #4]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d001      	beq.n	8014c80 <uxr_deserialize_ObjectVariant+0x50>
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	d1ec      	bne.n	8014c5a <uxr_deserialize_ObjectVariant+0x2a>
 8014c80:	68b1      	ldr	r1, [r6, #8]
 8014c82:	4628      	mov	r0, r5
 8014c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c8c:	f005 b816 	b.w	8019cbc <ucdr_deserialize_string>
 8014c90:	1d31      	adds	r1, r6, #4
 8014c92:	4628      	mov	r0, r5
 8014c94:	f7fb fe12 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014c98:	4604      	mov	r4, r0
 8014c9a:	b170      	cbz	r0, 8014cba <uxr_deserialize_ObjectVariant+0x8a>
 8014c9c:	7933      	ldrb	r3, [r6, #4]
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	d04c      	beq.n	8014d3c <uxr_deserialize_ObjectVariant+0x10c>
 8014ca2:	2b03      	cmp	r3, #3
 8014ca4:	d109      	bne.n	8014cba <uxr_deserialize_ObjectVariant+0x8a>
 8014ca6:	f106 0308 	add.w	r3, r6, #8
 8014caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cae:	f106 010c 	add.w	r1, r6, #12
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	f7fc ffea 	bl	8011c8c <ucdr_deserialize_sequence_uint8_t>
 8014cb8:	4604      	mov	r4, r0
 8014cba:	2202      	movs	r2, #2
 8014cbc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014cc0:	4628      	mov	r0, r5
 8014cc2:	f004 fed9 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014cc6:	4020      	ands	r0, r4
 8014cc8:	b2c4      	uxtb	r4, r0
 8014cca:	e7c6      	b.n	8014c5a <uxr_deserialize_ObjectVariant+0x2a>
 8014ccc:	1d31      	adds	r1, r6, #4
 8014cce:	4628      	mov	r0, r5
 8014cd0:	f7fb fdf4 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	b130      	cbz	r0, 8014ce6 <uxr_deserialize_ObjectVariant+0xb6>
 8014cd8:	7933      	ldrb	r3, [r6, #4]
 8014cda:	2b02      	cmp	r3, #2
 8014cdc:	d036      	beq.n	8014d4c <uxr_deserialize_ObjectVariant+0x11c>
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d03c      	beq.n	8014d5c <uxr_deserialize_ObjectVariant+0x12c>
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d032      	beq.n	8014d4c <uxr_deserialize_ObjectVariant+0x11c>
 8014ce6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014cea:	4628      	mov	r0, r5
 8014cec:	f7fc fb8c 	bl	8011408 <ucdr_deserialize_int16_t>
 8014cf0:	4020      	ands	r0, r4
 8014cf2:	b2c4      	uxtb	r4, r0
 8014cf4:	e7b1      	b.n	8014c5a <uxr_deserialize_ObjectVariant+0x2a>
 8014cf6:	1d31      	adds	r1, r6, #4
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cfe:	f7ff bcab 	b.w	8014658 <uxr_deserialize_CLIENT_Representation>
 8014d02:	2204      	movs	r2, #4
 8014d04:	4628      	mov	r0, r5
 8014d06:	18b1      	adds	r1, r6, r2
 8014d08:	f004 feb6 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	2202      	movs	r2, #2
 8014d10:	f106 0108 	add.w	r1, r6, #8
 8014d14:	4628      	mov	r0, r5
 8014d16:	f004 feaf 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014d1a:	4004      	ands	r4, r0
 8014d1c:	2202      	movs	r2, #2
 8014d1e:	f106 010a 	add.w	r1, r6, #10
 8014d22:	4628      	mov	r0, r5
 8014d24:	b2e4      	uxtb	r4, r4
 8014d26:	f004 fea7 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	f106 010c 	add.w	r1, r6, #12
 8014d30:	4628      	mov	r0, r5
 8014d32:	401c      	ands	r4, r3
 8014d34:	f7fb fd94 	bl	8010860 <ucdr_deserialize_bool>
 8014d38:	4004      	ands	r4, r0
 8014d3a:	e78e      	b.n	8014c5a <uxr_deserialize_ObjectVariant+0x2a>
 8014d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d40:	68b1      	ldr	r1, [r6, #8]
 8014d42:	4628      	mov	r0, r5
 8014d44:	f004 ffba 	bl	8019cbc <ucdr_deserialize_string>
 8014d48:	4604      	mov	r4, r0
 8014d4a:	e7b6      	b.n	8014cba <uxr_deserialize_ObjectVariant+0x8a>
 8014d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d50:	68b1      	ldr	r1, [r6, #8]
 8014d52:	4628      	mov	r0, r5
 8014d54:	f004 ffb2 	bl	8019cbc <ucdr_deserialize_string>
 8014d58:	4604      	mov	r4, r0
 8014d5a:	e7c4      	b.n	8014ce6 <uxr_deserialize_ObjectVariant+0xb6>
 8014d5c:	f106 0308 	add.w	r3, r6, #8
 8014d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d64:	f106 010c 	add.w	r1, r6, #12
 8014d68:	4628      	mov	r0, r5
 8014d6a:	f7fc ff8f 	bl	8011c8c <ucdr_deserialize_sequence_uint8_t>
 8014d6e:	4604      	mov	r4, r0
 8014d70:	e7b9      	b.n	8014ce6 <uxr_deserialize_ObjectVariant+0xb6>
 8014d72:	bf00      	nop

08014d74 <uxr_deserialize_BaseObjectRequest>:
 8014d74:	b570      	push	{r4, r5, r6, lr}
 8014d76:	2202      	movs	r2, #2
 8014d78:	4605      	mov	r5, r0
 8014d7a:	460e      	mov	r6, r1
 8014d7c:	f004 fe7c 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014d80:	2202      	movs	r2, #2
 8014d82:	4604      	mov	r4, r0
 8014d84:	4628      	mov	r0, r5
 8014d86:	18b1      	adds	r1, r6, r2
 8014d88:	f004 fe76 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014d8c:	4020      	ands	r0, r4
 8014d8e:	b2c0      	uxtb	r0, r0
 8014d90:	bd70      	pop	{r4, r5, r6, pc}
 8014d92:	bf00      	nop

08014d94 <uxr_serialize_ActivityInfoVariant>:
 8014d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d98:	460e      	mov	r6, r1
 8014d9a:	7809      	ldrb	r1, [r1, #0]
 8014d9c:	4680      	mov	r8, r0
 8014d9e:	f7fb fd77 	bl	8010890 <ucdr_serialize_uint8_t>
 8014da2:	4607      	mov	r7, r0
 8014da4:	b138      	cbz	r0, 8014db6 <uxr_serialize_ActivityInfoVariant+0x22>
 8014da6:	7833      	ldrb	r3, [r6, #0]
 8014da8:	2b06      	cmp	r3, #6
 8014daa:	f000 8081 	beq.w	8014eb0 <uxr_serialize_ActivityInfoVariant+0x11c>
 8014dae:	2b0d      	cmp	r3, #13
 8014db0:	d014      	beq.n	8014ddc <uxr_serialize_ActivityInfoVariant+0x48>
 8014db2:	2b05      	cmp	r3, #5
 8014db4:	d002      	beq.n	8014dbc <uxr_serialize_ActivityInfoVariant+0x28>
 8014db6:	4638      	mov	r0, r7
 8014db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dbc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014dc0:	4640      	mov	r0, r8
 8014dc2:	f7fc faa1 	bl	8011308 <ucdr_serialize_int16_t>
 8014dc6:	4607      	mov	r7, r0
 8014dc8:	4640      	mov	r0, r8
 8014dca:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8014dce:	f7fc f9cb 	bl	8011168 <ucdr_serialize_uint64_t>
 8014dd2:	4038      	ands	r0, r7
 8014dd4:	b2c7      	uxtb	r7, r0
 8014dd6:	4638      	mov	r0, r7
 8014dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ddc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014de0:	4640      	mov	r0, r8
 8014de2:	f7fc fa91 	bl	8011308 <ucdr_serialize_int16_t>
 8014de6:	68f1      	ldr	r1, [r6, #12]
 8014de8:	4607      	mov	r7, r0
 8014dea:	4640      	mov	r0, r8
 8014dec:	f7fb ff66 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014df0:	68f3      	ldr	r3, [r6, #12]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d0ed      	beq.n	8014dd2 <uxr_serialize_ActivityInfoVariant+0x3e>
 8014df6:	b318      	cbz	r0, 8014e40 <uxr_serialize_ActivityInfoVariant+0xac>
 8014df8:	f106 090c 	add.w	r9, r6, #12
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014e02:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8014e06:	7c29      	ldrb	r1, [r5, #16]
 8014e08:	4640      	mov	r0, r8
 8014e0a:	f7fb fd41 	bl	8010890 <ucdr_serialize_uint8_t>
 8014e0e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8014e12:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d051      	beq.n	8014ebe <uxr_serialize_ActivityInfoVariant+0x12a>
 8014e1a:	7c2b      	ldrb	r3, [r5, #16]
 8014e1c:	00c9      	lsls	r1, r1, #3
 8014e1e:	2b03      	cmp	r3, #3
 8014e20:	d854      	bhi.n	8014ecc <uxr_serialize_ActivityInfoVariant+0x138>
 8014e22:	e8df f003 	tbb	[pc, r3]
 8014e26:	2133      	.short	0x2133
 8014e28:	020f      	.short	0x020f
 8014e2a:	4449      	add	r1, r9
 8014e2c:	4640      	mov	r0, r8
 8014e2e:	6889      	ldr	r1, [r1, #8]
 8014e30:	f004 ff34 	bl	8019c9c <ucdr_serialize_string>
 8014e34:	3401      	adds	r4, #1
 8014e36:	68f2      	ldr	r2, [r6, #12]
 8014e38:	4294      	cmp	r4, r2
 8014e3a:	d244      	bcs.n	8014ec6 <uxr_serialize_ActivityInfoVariant+0x132>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d1de      	bne.n	8014dfe <uxr_serialize_ActivityInfoVariant+0x6a>
 8014e40:	2700      	movs	r7, #0
 8014e42:	e7b8      	b.n	8014db6 <uxr_serialize_ActivityInfoVariant+0x22>
 8014e44:	3108      	adds	r1, #8
 8014e46:	44a2      	add	sl, r4
 8014e48:	2210      	movs	r2, #16
 8014e4a:	4640      	mov	r0, r8
 8014e4c:	4449      	add	r1, r9
 8014e4e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014e52:	f004 fdad 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014e56:	4605      	mov	r5, r0
 8014e58:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8014e5c:	4640      	mov	r0, r8
 8014e5e:	f7fb ff2d 	bl	8010cbc <ucdr_serialize_uint32_t>
 8014e62:	4028      	ands	r0, r5
 8014e64:	b2c0      	uxtb	r0, r0
 8014e66:	e7e5      	b.n	8014e34 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014e68:	3108      	adds	r1, #8
 8014e6a:	44a2      	add	sl, r4
 8014e6c:	2204      	movs	r2, #4
 8014e6e:	4640      	mov	r0, r8
 8014e70:	4449      	add	r1, r9
 8014e72:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014e76:	f004 fd9b 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014e7a:	4605      	mov	r5, r0
 8014e7c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8014e80:	4640      	mov	r0, r8
 8014e82:	f7fb fd31 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014e86:	4028      	ands	r0, r5
 8014e88:	b2c0      	uxtb	r0, r0
 8014e8a:	e7d3      	b.n	8014e34 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014e8c:	3108      	adds	r1, #8
 8014e8e:	44a2      	add	sl, r4
 8014e90:	2202      	movs	r2, #2
 8014e92:	4640      	mov	r0, r8
 8014e94:	4449      	add	r1, r9
 8014e96:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014e9a:	f004 fd89 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014e9e:	4605      	mov	r5, r0
 8014ea0:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014ea4:	4640      	mov	r0, r8
 8014ea6:	f7fb fcf3 	bl	8010890 <ucdr_serialize_uint8_t>
 8014eaa:	4028      	ands	r0, r5
 8014eac:	b2c0      	uxtb	r0, r0
 8014eae:	e7c1      	b.n	8014e34 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014eb0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014eb4:	4640      	mov	r0, r8
 8014eb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eba:	f7fc ba25 	b.w	8011308 <ucdr_serialize_int16_t>
 8014ebe:	3401      	adds	r4, #1
 8014ec0:	68f2      	ldr	r2, [r6, #12]
 8014ec2:	42a2      	cmp	r2, r4
 8014ec4:	d8bc      	bhi.n	8014e40 <uxr_serialize_ActivityInfoVariant+0xac>
 8014ec6:	4007      	ands	r7, r0
 8014ec8:	b2ff      	uxtb	r7, r7
 8014eca:	e774      	b.n	8014db6 <uxr_serialize_ActivityInfoVariant+0x22>
 8014ecc:	3401      	adds	r4, #1
 8014ece:	68f3      	ldr	r3, [r6, #12]
 8014ed0:	3518      	adds	r5, #24
 8014ed2:	429c      	cmp	r4, r3
 8014ed4:	d397      	bcc.n	8014e06 <uxr_serialize_ActivityInfoVariant+0x72>
 8014ed6:	e76e      	b.n	8014db6 <uxr_serialize_ActivityInfoVariant+0x22>

08014ed8 <uxr_deserialize_BaseObjectReply>:
 8014ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014edc:	2202      	movs	r2, #2
 8014ede:	4606      	mov	r6, r0
 8014ee0:	460f      	mov	r7, r1
 8014ee2:	f004 fdc9 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014ee6:	2202      	movs	r2, #2
 8014ee8:	4605      	mov	r5, r0
 8014eea:	4630      	mov	r0, r6
 8014eec:	18b9      	adds	r1, r7, r2
 8014eee:	f004 fdc3 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8014ef2:	4680      	mov	r8, r0
 8014ef4:	1d39      	adds	r1, r7, #4
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f7fb fce0 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014efc:	ea05 0508 	and.w	r5, r5, r8
 8014f00:	4604      	mov	r4, r0
 8014f02:	1d79      	adds	r1, r7, #5
 8014f04:	4630      	mov	r0, r6
 8014f06:	402c      	ands	r4, r5
 8014f08:	f7fb fcd8 	bl	80108bc <ucdr_deserialize_uint8_t>
 8014f0c:	4020      	ands	r0, r4
 8014f0e:	b2c0      	uxtb	r0, r0
 8014f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f14 <uxr_serialize_ReadSpecification>:
 8014f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f16:	460e      	mov	r6, r1
 8014f18:	4607      	mov	r7, r0
 8014f1a:	7809      	ldrb	r1, [r1, #0]
 8014f1c:	f7fb fcb8 	bl	8010890 <ucdr_serialize_uint8_t>
 8014f20:	4604      	mov	r4, r0
 8014f22:	7871      	ldrb	r1, [r6, #1]
 8014f24:	4638      	mov	r0, r7
 8014f26:	f7fb fcb3 	bl	8010890 <ucdr_serialize_uint8_t>
 8014f2a:	4004      	ands	r4, r0
 8014f2c:	78b1      	ldrb	r1, [r6, #2]
 8014f2e:	4638      	mov	r0, r7
 8014f30:	f7fb fc80 	bl	8010834 <ucdr_serialize_bool>
 8014f34:	78b3      	ldrb	r3, [r6, #2]
 8014f36:	b2e4      	uxtb	r4, r4
 8014f38:	4004      	ands	r4, r0
 8014f3a:	b943      	cbnz	r3, 8014f4e <uxr_serialize_ReadSpecification+0x3a>
 8014f3c:	7a31      	ldrb	r1, [r6, #8]
 8014f3e:	4638      	mov	r0, r7
 8014f40:	f7fb fc78 	bl	8010834 <ucdr_serialize_bool>
 8014f44:	7a33      	ldrb	r3, [r6, #8]
 8014f46:	4004      	ands	r4, r0
 8014f48:	b93b      	cbnz	r3, 8014f5a <uxr_serialize_ReadSpecification+0x46>
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f4e:	6871      	ldr	r1, [r6, #4]
 8014f50:	4638      	mov	r0, r7
 8014f52:	f004 fea3 	bl	8019c9c <ucdr_serialize_string>
 8014f56:	4004      	ands	r4, r0
 8014f58:	e7f0      	b.n	8014f3c <uxr_serialize_ReadSpecification+0x28>
 8014f5a:	8971      	ldrh	r1, [r6, #10]
 8014f5c:	4638      	mov	r0, r7
 8014f5e:	f7fb fcc3 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014f62:	4605      	mov	r5, r0
 8014f64:	89b1      	ldrh	r1, [r6, #12]
 8014f66:	4638      	mov	r0, r7
 8014f68:	f7fb fcbe 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014f6c:	4005      	ands	r5, r0
 8014f6e:	89f1      	ldrh	r1, [r6, #14]
 8014f70:	4638      	mov	r0, r7
 8014f72:	b2ed      	uxtb	r5, r5
 8014f74:	f7fb fcb8 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014f78:	8a31      	ldrh	r1, [r6, #16]
 8014f7a:	4025      	ands	r5, r4
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	4638      	mov	r0, r7
 8014f80:	4025      	ands	r5, r4
 8014f82:	f7fb fcb1 	bl	80108e8 <ucdr_serialize_uint16_t>
 8014f86:	ea00 0405 	and.w	r4, r0, r5
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f8e:	bf00      	nop

08014f90 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014f90:	f7ff bb0a 	b.w	80145a8 <uxr_serialize_CLIENT_Representation>

08014f94 <uxr_serialize_CREATE_Payload>:
 8014f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f96:	2202      	movs	r2, #2
 8014f98:	4607      	mov	r7, r0
 8014f9a:	460e      	mov	r6, r1
 8014f9c:	f004 fd08 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014fa0:	2202      	movs	r2, #2
 8014fa2:	4605      	mov	r5, r0
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	18b1      	adds	r1, r6, r2
 8014fa8:	f004 fd02 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8014fac:	7931      	ldrb	r1, [r6, #4]
 8014fae:	4604      	mov	r4, r0
 8014fb0:	4638      	mov	r0, r7
 8014fb2:	f7fb fc6d 	bl	8010890 <ucdr_serialize_uint8_t>
 8014fb6:	b170      	cbz	r0, 8014fd6 <uxr_serialize_CREATE_Payload+0x42>
 8014fb8:	7933      	ldrb	r3, [r6, #4]
 8014fba:	402c      	ands	r4, r5
 8014fbc:	3b01      	subs	r3, #1
 8014fbe:	b2e4      	uxtb	r4, r4
 8014fc0:	2b0d      	cmp	r3, #13
 8014fc2:	d809      	bhi.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 8014fc4:	e8df f003 	tbb	[pc, r3]
 8014fc8:	23230a4c 	.word	0x23230a4c
 8014fcc:	0a0a0a0a 	.word	0x0a0a0a0a
 8014fd0:	12121208 	.word	0x12121208
 8014fd4:	3e45      	.short	0x3e45
 8014fd6:	2400      	movs	r4, #0
 8014fd8:	4620      	mov	r0, r4
 8014fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fdc:	f106 0108 	add.w	r1, r6, #8
 8014fe0:	4638      	mov	r0, r7
 8014fe2:	f7ff fbe7 	bl	80147b4 <uxr_serialize_DATAWRITER_Representation>
 8014fe6:	4004      	ands	r4, r0
 8014fe8:	4620      	mov	r0, r4
 8014fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fec:	7a31      	ldrb	r1, [r6, #8]
 8014fee:	4638      	mov	r0, r7
 8014ff0:	f7fb fc4e 	bl	8010890 <ucdr_serialize_uint8_t>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d0ee      	beq.n	8014fd6 <uxr_serialize_CREATE_Payload+0x42>
 8014ff8:	7a33      	ldrb	r3, [r6, #8]
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d001      	beq.n	8015002 <uxr_serialize_CREATE_Payload+0x6e>
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d1ea      	bne.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 8015002:	68f1      	ldr	r1, [r6, #12]
 8015004:	4638      	mov	r0, r7
 8015006:	f004 fe49 	bl	8019c9c <ucdr_serialize_string>
 801500a:	4004      	ands	r4, r0
 801500c:	e7e4      	b.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 801500e:	7a31      	ldrb	r1, [r6, #8]
 8015010:	4638      	mov	r0, r7
 8015012:	f7fb fc3d 	bl	8010890 <ucdr_serialize_uint8_t>
 8015016:	4605      	mov	r5, r0
 8015018:	b158      	cbz	r0, 8015032 <uxr_serialize_CREATE_Payload+0x9e>
 801501a:	7a33      	ldrb	r3, [r6, #8]
 801501c:	2b02      	cmp	r3, #2
 801501e:	d034      	beq.n	801508a <uxr_serialize_CREATE_Payload+0xf6>
 8015020:	2b03      	cmp	r3, #3
 8015022:	d106      	bne.n	8015032 <uxr_serialize_CREATE_Payload+0x9e>
 8015024:	68f2      	ldr	r2, [r6, #12]
 8015026:	f106 0110 	add.w	r1, r6, #16
 801502a:	4638      	mov	r0, r7
 801502c:	f7fc fe1c 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 8015030:	4605      	mov	r5, r0
 8015032:	2202      	movs	r2, #2
 8015034:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015038:	4638      	mov	r0, r7
 801503a:	f004 fcb9 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801503e:	4028      	ands	r0, r5
 8015040:	4004      	ands	r4, r0
 8015042:	e7c9      	b.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 8015044:	f106 0108 	add.w	r1, r6, #8
 8015048:	4638      	mov	r0, r7
 801504a:	f7ff faad 	bl	80145a8 <uxr_serialize_CLIENT_Representation>
 801504e:	4004      	ands	r4, r0
 8015050:	e7c2      	b.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 8015052:	f106 0108 	add.w	r1, r6, #8
 8015056:	4638      	mov	r0, r7
 8015058:	f7ff fb62 	bl	8014720 <uxr_serialize_AGENT_Representation>
 801505c:	4004      	ands	r4, r0
 801505e:	e7bb      	b.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 8015060:	7a31      	ldrb	r1, [r6, #8]
 8015062:	4638      	mov	r0, r7
 8015064:	f7fb fc14 	bl	8010890 <ucdr_serialize_uint8_t>
 8015068:	4605      	mov	r5, r0
 801506a:	b130      	cbz	r0, 801507a <uxr_serialize_CREATE_Payload+0xe6>
 801506c:	7a33      	ldrb	r3, [r6, #8]
 801506e:	2b02      	cmp	r3, #2
 8015070:	d011      	beq.n	8015096 <uxr_serialize_CREATE_Payload+0x102>
 8015072:	2b03      	cmp	r3, #3
 8015074:	d015      	beq.n	80150a2 <uxr_serialize_CREATE_Payload+0x10e>
 8015076:	2b01      	cmp	r3, #1
 8015078:	d00d      	beq.n	8015096 <uxr_serialize_CREATE_Payload+0x102>
 801507a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801507e:	4638      	mov	r0, r7
 8015080:	f7fc f942 	bl	8011308 <ucdr_serialize_int16_t>
 8015084:	4028      	ands	r0, r5
 8015086:	4004      	ands	r4, r0
 8015088:	e7a6      	b.n	8014fd8 <uxr_serialize_CREATE_Payload+0x44>
 801508a:	68f1      	ldr	r1, [r6, #12]
 801508c:	4638      	mov	r0, r7
 801508e:	f004 fe05 	bl	8019c9c <ucdr_serialize_string>
 8015092:	4605      	mov	r5, r0
 8015094:	e7cd      	b.n	8015032 <uxr_serialize_CREATE_Payload+0x9e>
 8015096:	68f1      	ldr	r1, [r6, #12]
 8015098:	4638      	mov	r0, r7
 801509a:	f004 fdff 	bl	8019c9c <ucdr_serialize_string>
 801509e:	4605      	mov	r5, r0
 80150a0:	e7eb      	b.n	801507a <uxr_serialize_CREATE_Payload+0xe6>
 80150a2:	68f2      	ldr	r2, [r6, #12]
 80150a4:	f106 0110 	add.w	r1, r6, #16
 80150a8:	4638      	mov	r0, r7
 80150aa:	f7fc fddd 	bl	8011c68 <ucdr_serialize_sequence_uint8_t>
 80150ae:	4605      	mov	r5, r0
 80150b0:	e7e3      	b.n	801507a <uxr_serialize_CREATE_Payload+0xe6>
 80150b2:	bf00      	nop

080150b4 <uxr_deserialize_GET_INFO_Payload>:
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	2202      	movs	r2, #2
 80150b8:	4605      	mov	r5, r0
 80150ba:	460e      	mov	r6, r1
 80150bc:	f004 fcdc 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 80150c0:	2202      	movs	r2, #2
 80150c2:	4604      	mov	r4, r0
 80150c4:	4628      	mov	r0, r5
 80150c6:	18b1      	adds	r1, r6, r2
 80150c8:	f004 fcd6 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 80150cc:	4603      	mov	r3, r0
 80150ce:	1d31      	adds	r1, r6, #4
 80150d0:	4628      	mov	r0, r5
 80150d2:	401c      	ands	r4, r3
 80150d4:	f7fb ff22 	bl	8010f1c <ucdr_deserialize_uint32_t>
 80150d8:	b2e4      	uxtb	r4, r4
 80150da:	4020      	ands	r0, r4
 80150dc:	bd70      	pop	{r4, r5, r6, pc}
 80150de:	bf00      	nop

080150e0 <uxr_serialize_DELETE_Payload>:
 80150e0:	b570      	push	{r4, r5, r6, lr}
 80150e2:	2202      	movs	r2, #2
 80150e4:	4605      	mov	r5, r0
 80150e6:	460e      	mov	r6, r1
 80150e8:	f004 fc62 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80150ec:	2202      	movs	r2, #2
 80150ee:	4604      	mov	r4, r0
 80150f0:	4628      	mov	r0, r5
 80150f2:	18b1      	adds	r1, r6, r2
 80150f4:	f004 fc5c 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80150f8:	4020      	ands	r0, r4
 80150fa:	b2c0      	uxtb	r0, r0
 80150fc:	bd70      	pop	{r4, r5, r6, pc}
 80150fe:	bf00      	nop

08015100 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015104:	460e      	mov	r6, r1
 8015106:	4605      	mov	r5, r0
 8015108:	f7fb fbd8 	bl	80108bc <ucdr_deserialize_uint8_t>
 801510c:	4604      	mov	r4, r0
 801510e:	1c71      	adds	r1, r6, #1
 8015110:	4628      	mov	r0, r5
 8015112:	f7fb fbd3 	bl	80108bc <ucdr_deserialize_uint8_t>
 8015116:	2204      	movs	r2, #4
 8015118:	4681      	mov	r9, r0
 801511a:	4628      	mov	r0, r5
 801511c:	18b1      	adds	r1, r6, r2
 801511e:	f004 fcab 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8015122:	f106 0108 	add.w	r1, r6, #8
 8015126:	4680      	mov	r8, r0
 8015128:	2202      	movs	r2, #2
 801512a:	4628      	mov	r0, r5
 801512c:	f004 fca4 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8015130:	ea04 0309 	and.w	r3, r4, r9
 8015134:	4607      	mov	r7, r0
 8015136:	2202      	movs	r2, #2
 8015138:	b2db      	uxtb	r3, r3
 801513a:	f106 010a 	add.w	r1, r6, #10
 801513e:	4628      	mov	r0, r5
 8015140:	ea03 0408 	and.w	r4, r3, r8
 8015144:	f004 fc98 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8015148:	4603      	mov	r3, r0
 801514a:	4628      	mov	r0, r5
 801514c:	403c      	ands	r4, r7
 801514e:	f106 010c 	add.w	r1, r6, #12
 8015152:	461d      	mov	r5, r3
 8015154:	f7fb fb84 	bl	8010860 <ucdr_deserialize_bool>
 8015158:	4025      	ands	r5, r4
 801515a:	4028      	ands	r0, r5
 801515c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015160 <uxr_deserialize_STATUS_Payload>:
 8015160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015164:	2202      	movs	r2, #2
 8015166:	4606      	mov	r6, r0
 8015168:	460f      	mov	r7, r1
 801516a:	f004 fc85 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 801516e:	2202      	movs	r2, #2
 8015170:	4605      	mov	r5, r0
 8015172:	4630      	mov	r0, r6
 8015174:	18b9      	adds	r1, r7, r2
 8015176:	f004 fc7f 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 801517a:	4680      	mov	r8, r0
 801517c:	1d39      	adds	r1, r7, #4
 801517e:	4630      	mov	r0, r6
 8015180:	f7fb fb9c 	bl	80108bc <ucdr_deserialize_uint8_t>
 8015184:	ea05 0508 	and.w	r5, r5, r8
 8015188:	4604      	mov	r4, r0
 801518a:	1d79      	adds	r1, r7, #5
 801518c:	4630      	mov	r0, r6
 801518e:	402c      	ands	r4, r5
 8015190:	f7fb fb94 	bl	80108bc <ucdr_deserialize_uint8_t>
 8015194:	4020      	ands	r0, r4
 8015196:	b2c0      	uxtb	r0, r0
 8015198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801519c <uxr_serialize_INFO_Payload>:
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	2202      	movs	r2, #2
 80151a2:	460c      	mov	r4, r1
 80151a4:	4605      	mov	r5, r0
 80151a6:	f004 fc03 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80151aa:	2202      	movs	r2, #2
 80151ac:	4680      	mov	r8, r0
 80151ae:	4628      	mov	r0, r5
 80151b0:	18a1      	adds	r1, r4, r2
 80151b2:	f004 fbfd 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80151b6:	4607      	mov	r7, r0
 80151b8:	7921      	ldrb	r1, [r4, #4]
 80151ba:	4628      	mov	r0, r5
 80151bc:	f7fb fb68 	bl	8010890 <ucdr_serialize_uint8_t>
 80151c0:	ea08 0807 	and.w	r8, r8, r7
 80151c4:	4606      	mov	r6, r0
 80151c6:	7961      	ldrb	r1, [r4, #5]
 80151c8:	4628      	mov	r0, r5
 80151ca:	ea06 0608 	and.w	r6, r6, r8
 80151ce:	f7fb fb5f 	bl	8010890 <ucdr_serialize_uint8_t>
 80151d2:	7a21      	ldrb	r1, [r4, #8]
 80151d4:	4030      	ands	r0, r6
 80151d6:	b2c7      	uxtb	r7, r0
 80151d8:	4628      	mov	r0, r5
 80151da:	f7fb fb2b 	bl	8010834 <ucdr_serialize_bool>
 80151de:	7a23      	ldrb	r3, [r4, #8]
 80151e0:	4606      	mov	r6, r0
 80151e2:	b96b      	cbnz	r3, 8015200 <uxr_serialize_INFO_Payload+0x64>
 80151e4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80151e8:	4628      	mov	r0, r5
 80151ea:	f7fb fb23 	bl	8010834 <ucdr_serialize_bool>
 80151ee:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80151f2:	4030      	ands	r0, r6
 80151f4:	b2c6      	uxtb	r6, r0
 80151f6:	b983      	cbnz	r3, 801521a <uxr_serialize_INFO_Payload+0x7e>
 80151f8:	ea06 0007 	and.w	r0, r6, r7
 80151fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015200:	7b21      	ldrb	r1, [r4, #12]
 8015202:	4628      	mov	r0, r5
 8015204:	f7fb fb44 	bl	8010890 <ucdr_serialize_uint8_t>
 8015208:	b188      	cbz	r0, 801522e <uxr_serialize_INFO_Payload+0x92>
 801520a:	f104 010c 	add.w	r1, r4, #12
 801520e:	4628      	mov	r0, r5
 8015210:	f7ff faf8 	bl	8014804 <uxr_serialize_ObjectVariant.part.0>
 8015214:	4030      	ands	r0, r6
 8015216:	b2c6      	uxtb	r6, r0
 8015218:	e7e4      	b.n	80151e4 <uxr_serialize_INFO_Payload+0x48>
 801521a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801521e:	4628      	mov	r0, r5
 8015220:	f7ff fdb8 	bl	8014d94 <uxr_serialize_ActivityInfoVariant>
 8015224:	4006      	ands	r6, r0
 8015226:	ea06 0007 	and.w	r0, r6, r7
 801522a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801522e:	4606      	mov	r6, r0
 8015230:	e7d8      	b.n	80151e4 <uxr_serialize_INFO_Payload+0x48>
 8015232:	bf00      	nop

08015234 <uxr_serialize_READ_DATA_Payload>:
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	2202      	movs	r2, #2
 8015238:	4605      	mov	r5, r0
 801523a:	460e      	mov	r6, r1
 801523c:	f004 fbb8 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8015240:	2202      	movs	r2, #2
 8015242:	4604      	mov	r4, r0
 8015244:	4628      	mov	r0, r5
 8015246:	18b1      	adds	r1, r6, r2
 8015248:	f004 fbb2 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801524c:	4603      	mov	r3, r0
 801524e:	1d31      	adds	r1, r6, #4
 8015250:	4628      	mov	r0, r5
 8015252:	401c      	ands	r4, r3
 8015254:	f7ff fe5e 	bl	8014f14 <uxr_serialize_ReadSpecification>
 8015258:	b2e4      	uxtb	r4, r4
 801525a:	4020      	ands	r0, r4
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	bf00      	nop

08015260 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015260:	b570      	push	{r4, r5, r6, lr}
 8015262:	2202      	movs	r2, #2
 8015264:	4605      	mov	r5, r0
 8015266:	460e      	mov	r6, r1
 8015268:	f004 fba2 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801526c:	2202      	movs	r2, #2
 801526e:	4604      	mov	r4, r0
 8015270:	4628      	mov	r0, r5
 8015272:	18b1      	adds	r1, r6, r2
 8015274:	f004 fb9c 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 8015278:	4020      	ands	r0, r4
 801527a:	b2c0      	uxtb	r0, r0
 801527c:	bd70      	pop	{r4, r5, r6, pc}
 801527e:	bf00      	nop

08015280 <uxr_serialize_ACKNACK_Payload>:
 8015280:	b570      	push	{r4, r5, r6, lr}
 8015282:	460c      	mov	r4, r1
 8015284:	4605      	mov	r5, r0
 8015286:	460e      	mov	r6, r1
 8015288:	f834 1b02 	ldrh.w	r1, [r4], #2
 801528c:	f7fb fb2c 	bl	80108e8 <ucdr_serialize_uint16_t>
 8015290:	2202      	movs	r2, #2
 8015292:	4621      	mov	r1, r4
 8015294:	4604      	mov	r4, r0
 8015296:	4628      	mov	r0, r5
 8015298:	f004 fb8a 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 801529c:	4603      	mov	r3, r0
 801529e:	7931      	ldrb	r1, [r6, #4]
 80152a0:	4628      	mov	r0, r5
 80152a2:	401c      	ands	r4, r3
 80152a4:	f7fb faf4 	bl	8010890 <ucdr_serialize_uint8_t>
 80152a8:	b2e4      	uxtb	r4, r4
 80152aa:	4020      	ands	r0, r4
 80152ac:	bd70      	pop	{r4, r5, r6, pc}
 80152ae:	bf00      	nop

080152b0 <uxr_deserialize_ACKNACK_Payload>:
 80152b0:	b570      	push	{r4, r5, r6, lr}
 80152b2:	460e      	mov	r6, r1
 80152b4:	4605      	mov	r5, r0
 80152b6:	f7fb fc17 	bl	8010ae8 <ucdr_deserialize_uint16_t>
 80152ba:	2202      	movs	r2, #2
 80152bc:	4604      	mov	r4, r0
 80152be:	4628      	mov	r0, r5
 80152c0:	18b1      	adds	r1, r6, r2
 80152c2:	f004 fbd9 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 80152c6:	4603      	mov	r3, r0
 80152c8:	1d31      	adds	r1, r6, #4
 80152ca:	4628      	mov	r0, r5
 80152cc:	401c      	ands	r4, r3
 80152ce:	f7fb faf5 	bl	80108bc <ucdr_deserialize_uint8_t>
 80152d2:	b2e4      	uxtb	r4, r4
 80152d4:	4020      	ands	r0, r4
 80152d6:	bd70      	pop	{r4, r5, r6, pc}

080152d8 <uxr_serialize_HEARTBEAT_Payload>:
 80152d8:	b570      	push	{r4, r5, r6, lr}
 80152da:	460d      	mov	r5, r1
 80152dc:	4606      	mov	r6, r0
 80152de:	8809      	ldrh	r1, [r1, #0]
 80152e0:	f7fb fb02 	bl	80108e8 <ucdr_serialize_uint16_t>
 80152e4:	8869      	ldrh	r1, [r5, #2]
 80152e6:	4604      	mov	r4, r0
 80152e8:	4630      	mov	r0, r6
 80152ea:	f7fb fafd 	bl	80108e8 <ucdr_serialize_uint16_t>
 80152ee:	4603      	mov	r3, r0
 80152f0:	7929      	ldrb	r1, [r5, #4]
 80152f2:	4630      	mov	r0, r6
 80152f4:	401c      	ands	r4, r3
 80152f6:	f7fb facb 	bl	8010890 <ucdr_serialize_uint8_t>
 80152fa:	b2e4      	uxtb	r4, r4
 80152fc:	4020      	ands	r0, r4
 80152fe:	bd70      	pop	{r4, r5, r6, pc}

08015300 <uxr_deserialize_HEARTBEAT_Payload>:
 8015300:	b570      	push	{r4, r5, r6, lr}
 8015302:	460e      	mov	r6, r1
 8015304:	4605      	mov	r5, r0
 8015306:	f7fb fbef 	bl	8010ae8 <ucdr_deserialize_uint16_t>
 801530a:	4604      	mov	r4, r0
 801530c:	1cb1      	adds	r1, r6, #2
 801530e:	4628      	mov	r0, r5
 8015310:	f7fb fbea 	bl	8010ae8 <ucdr_deserialize_uint16_t>
 8015314:	4603      	mov	r3, r0
 8015316:	1d31      	adds	r1, r6, #4
 8015318:	4628      	mov	r0, r5
 801531a:	401c      	ands	r4, r3
 801531c:	f7fb face 	bl	80108bc <ucdr_deserialize_uint8_t>
 8015320:	b2e4      	uxtb	r4, r4
 8015322:	4020      	ands	r0, r4
 8015324:	bd70      	pop	{r4, r5, r6, pc}
 8015326:	bf00      	nop

08015328 <uxr_serialize_TIMESTAMP_Payload>:
 8015328:	b570      	push	{r4, r5, r6, lr}
 801532a:	460d      	mov	r5, r1
 801532c:	4606      	mov	r6, r0
 801532e:	6809      	ldr	r1, [r1, #0]
 8015330:	f7fc f8de 	bl	80114f0 <ucdr_serialize_int32_t>
 8015334:	4604      	mov	r4, r0
 8015336:	6869      	ldr	r1, [r5, #4]
 8015338:	4630      	mov	r0, r6
 801533a:	f7fb fcbf 	bl	8010cbc <ucdr_serialize_uint32_t>
 801533e:	4020      	ands	r0, r4
 8015340:	b2c0      	uxtb	r0, r0
 8015342:	bd70      	pop	{r4, r5, r6, pc}

08015344 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015348:	460e      	mov	r6, r1
 801534a:	4605      	mov	r5, r0
 801534c:	f7fc f968 	bl	8011620 <ucdr_deserialize_int32_t>
 8015350:	4607      	mov	r7, r0
 8015352:	1d31      	adds	r1, r6, #4
 8015354:	4628      	mov	r0, r5
 8015356:	f7fb fde1 	bl	8010f1c <ucdr_deserialize_uint32_t>
 801535a:	4680      	mov	r8, r0
 801535c:	f106 0108 	add.w	r1, r6, #8
 8015360:	4628      	mov	r0, r5
 8015362:	f7fc f95d 	bl	8011620 <ucdr_deserialize_int32_t>
 8015366:	ea07 0708 	and.w	r7, r7, r8
 801536a:	4604      	mov	r4, r0
 801536c:	f106 010c 	add.w	r1, r6, #12
 8015370:	4628      	mov	r0, r5
 8015372:	403c      	ands	r4, r7
 8015374:	f7fb fdd2 	bl	8010f1c <ucdr_deserialize_uint32_t>
 8015378:	f106 0110 	add.w	r1, r6, #16
 801537c:	4004      	ands	r4, r0
 801537e:	4628      	mov	r0, r5
 8015380:	f7fc f94e 	bl	8011620 <ucdr_deserialize_int32_t>
 8015384:	4603      	mov	r3, r0
 8015386:	b2e4      	uxtb	r4, r4
 8015388:	4628      	mov	r0, r5
 801538a:	461d      	mov	r5, r3
 801538c:	f106 0114 	add.w	r1, r6, #20
 8015390:	f7fb fdc4 	bl	8010f1c <ucdr_deserialize_uint32_t>
 8015394:	402c      	ands	r4, r5
 8015396:	4020      	ands	r0, r4
 8015398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801539c <uxr_serialize_SampleIdentity>:
 801539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a0:	4604      	mov	r4, r0
 80153a2:	460d      	mov	r5, r1
 80153a4:	220c      	movs	r2, #12
 80153a6:	f004 fb03 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80153aa:	2203      	movs	r2, #3
 80153ac:	f105 010c 	add.w	r1, r5, #12
 80153b0:	4607      	mov	r7, r0
 80153b2:	4620      	mov	r0, r4
 80153b4:	f004 fafc 	bl	80199b0 <ucdr_serialize_array_uint8_t>
 80153b8:	7be9      	ldrb	r1, [r5, #15]
 80153ba:	4680      	mov	r8, r0
 80153bc:	4620      	mov	r0, r4
 80153be:	f7fb fa67 	bl	8010890 <ucdr_serialize_uint8_t>
 80153c2:	6929      	ldr	r1, [r5, #16]
 80153c4:	4606      	mov	r6, r0
 80153c6:	4620      	mov	r0, r4
 80153c8:	f7fc f892 	bl	80114f0 <ucdr_serialize_int32_t>
 80153cc:	ea07 0708 	and.w	r7, r7, r8
 80153d0:	4603      	mov	r3, r0
 80153d2:	4620      	mov	r0, r4
 80153d4:	403e      	ands	r6, r7
 80153d6:	6969      	ldr	r1, [r5, #20]
 80153d8:	461c      	mov	r4, r3
 80153da:	f7fb fc6f 	bl	8010cbc <ucdr_serialize_uint32_t>
 80153de:	4034      	ands	r4, r6
 80153e0:	4020      	ands	r0, r4
 80153e2:	b2c0      	uxtb	r0, r0
 80153e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153e8 <uxr_deserialize_SampleIdentity>:
 80153e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ec:	4604      	mov	r4, r0
 80153ee:	460d      	mov	r5, r1
 80153f0:	220c      	movs	r2, #12
 80153f2:	f004 fb41 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 80153f6:	2203      	movs	r2, #3
 80153f8:	f105 010c 	add.w	r1, r5, #12
 80153fc:	4607      	mov	r7, r0
 80153fe:	4620      	mov	r0, r4
 8015400:	f004 fb3a 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8015404:	f105 010f 	add.w	r1, r5, #15
 8015408:	4680      	mov	r8, r0
 801540a:	4620      	mov	r0, r4
 801540c:	f7fb fa56 	bl	80108bc <ucdr_deserialize_uint8_t>
 8015410:	f105 0110 	add.w	r1, r5, #16
 8015414:	4606      	mov	r6, r0
 8015416:	4620      	mov	r0, r4
 8015418:	f7fc f902 	bl	8011620 <ucdr_deserialize_int32_t>
 801541c:	ea07 0708 	and.w	r7, r7, r8
 8015420:	4603      	mov	r3, r0
 8015422:	4620      	mov	r0, r4
 8015424:	403e      	ands	r6, r7
 8015426:	f105 0114 	add.w	r1, r5, #20
 801542a:	461c      	mov	r4, r3
 801542c:	f7fb fd76 	bl	8010f1c <ucdr_deserialize_uint32_t>
 8015430:	4034      	ands	r4, r6
 8015432:	4020      	ands	r0, r4
 8015434:	b2c0      	uxtb	r0, r0
 8015436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801543a:	bf00      	nop

0801543c <rcl_client_get_rmw_handle>:
 801543c:	b118      	cbz	r0, 8015446 <rcl_client_get_rmw_handle+0xa>
 801543e:	6800      	ldr	r0, [r0, #0]
 8015440:	b108      	cbz	r0, 8015446 <rcl_client_get_rmw_handle+0xa>
 8015442:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015446:	4770      	bx	lr

08015448 <rcl_send_request>:
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	b1f8      	cbz	r0, 801548e <rcl_send_request+0x46>
 801544e:	4604      	mov	r4, r0
 8015450:	6800      	ldr	r0, [r0, #0]
 8015452:	b1e0      	cbz	r0, 801548e <rcl_send_request+0x46>
 8015454:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015458:	b1cb      	cbz	r3, 801548e <rcl_send_request+0x46>
 801545a:	460e      	mov	r6, r1
 801545c:	b1e1      	cbz	r1, 8015498 <rcl_send_request+0x50>
 801545e:	4615      	mov	r5, r2
 8015460:	b1d2      	cbz	r2, 8015498 <rcl_send_request+0x50>
 8015462:	2105      	movs	r1, #5
 8015464:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015468:	f002 fe1a 	bl	80180a0 <__atomic_load_8>
 801546c:	4602      	mov	r2, r0
 801546e:	460b      	mov	r3, r1
 8015470:	4631      	mov	r1, r6
 8015472:	e9c5 2300 	strd	r2, r3, [r5]
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	462a      	mov	r2, r5
 801547a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801547e:	f003 fd3d 	bl	8018efc <rmw_send_request>
 8015482:	4606      	mov	r6, r0
 8015484:	b160      	cbz	r0, 80154a0 <rcl_send_request+0x58>
 8015486:	2601      	movs	r6, #1
 8015488:	4630      	mov	r0, r6
 801548a:	b002      	add	sp, #8
 801548c:	bd70      	pop	{r4, r5, r6, pc}
 801548e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8015492:	4630      	mov	r0, r6
 8015494:	b002      	add	sp, #8
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	260b      	movs	r6, #11
 801549a:	4630      	mov	r0, r6
 801549c:	b002      	add	sp, #8
 801549e:	bd70      	pop	{r4, r5, r6, pc}
 80154a0:	6820      	ldr	r0, [r4, #0]
 80154a2:	2105      	movs	r1, #5
 80154a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154a8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80154ac:	9100      	str	r1, [sp, #0]
 80154ae:	f002 fe63 	bl	8018178 <__atomic_exchange_8>
 80154b2:	4630      	mov	r0, r6
 80154b4:	b002      	add	sp, #8
 80154b6:	bd70      	pop	{r4, r5, r6, pc}

080154b8 <rcl_take_response>:
 80154b8:	b570      	push	{r4, r5, r6, lr}
 80154ba:	468e      	mov	lr, r1
 80154bc:	b08c      	sub	sp, #48	@ 0x30
 80154be:	460c      	mov	r4, r1
 80154c0:	4616      	mov	r6, r2
 80154c2:	f10d 0c18 	add.w	ip, sp, #24
 80154c6:	4605      	mov	r5, r0
 80154c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80154d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154d8:	b35d      	cbz	r5, 8015532 <rcl_take_response+0x7a>
 80154da:	682b      	ldr	r3, [r5, #0]
 80154dc:	b34b      	cbz	r3, 8015532 <rcl_take_response+0x7a>
 80154de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80154e2:	b330      	cbz	r0, 8015532 <rcl_take_response+0x7a>
 80154e4:	b346      	cbz	r6, 8015538 <rcl_take_response+0x80>
 80154e6:	2300      	movs	r3, #0
 80154e8:	4632      	mov	r2, r6
 80154ea:	a902      	add	r1, sp, #8
 80154ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80154f0:	f10d 0307 	add.w	r3, sp, #7
 80154f4:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015540 <rcl_take_response+0x88>
 80154f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80154fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015500:	f003 fe04 	bl	801910c <rmw_take_response>
 8015504:	4605      	mov	r5, r0
 8015506:	b9c8      	cbnz	r0, 801553c <rcl_take_response+0x84>
 8015508:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801550c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015510:	2a00      	cmp	r2, #0
 8015512:	bf08      	it	eq
 8015514:	461d      	moveq	r5, r3
 8015516:	f10d 0e18 	add.w	lr, sp, #24
 801551a:	46a4      	mov	ip, r4
 801551c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015524:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015528:	e88c 0003 	stmia.w	ip, {r0, r1}
 801552c:	4628      	mov	r0, r5
 801552e:	b00c      	add	sp, #48	@ 0x30
 8015530:	bd70      	pop	{r4, r5, r6, pc}
 8015532:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015536:	e7ee      	b.n	8015516 <rcl_take_response+0x5e>
 8015538:	250b      	movs	r5, #11
 801553a:	e7ec      	b.n	8015516 <rcl_take_response+0x5e>
 801553c:	2501      	movs	r5, #1
 801553e:	e7ea      	b.n	8015516 <rcl_take_response+0x5e>
	...

08015548 <rcl_client_is_valid>:
 8015548:	b130      	cbz	r0, 8015558 <rcl_client_is_valid+0x10>
 801554a:	6800      	ldr	r0, [r0, #0]
 801554c:	b120      	cbz	r0, 8015558 <rcl_client_is_valid+0x10>
 801554e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015552:	3800      	subs	r0, #0
 8015554:	bf18      	it	ne
 8015556:	2001      	movne	r0, #1
 8015558:	4770      	bx	lr
 801555a:	bf00      	nop

0801555c <rcl_convert_rmw_ret_to_rcl_ret>:
 801555c:	280b      	cmp	r0, #11
 801555e:	dc0d      	bgt.n	801557c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015560:	2800      	cmp	r0, #0
 8015562:	db09      	blt.n	8015578 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015564:	280b      	cmp	r0, #11
 8015566:	d807      	bhi.n	8015578 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015568:	e8df f000 	tbb	[pc, r0]
 801556c:	07060607 	.word	0x07060607
 8015570:	06060606 	.word	0x06060606
 8015574:	07070606 	.word	0x07070606
 8015578:	2001      	movs	r0, #1
 801557a:	4770      	bx	lr
 801557c:	28cb      	cmp	r0, #203	@ 0xcb
 801557e:	bf18      	it	ne
 8015580:	2001      	movne	r0, #1
 8015582:	4770      	bx	lr

08015584 <rcl_get_zero_initialized_context>:
 8015584:	4a03      	ldr	r2, [pc, #12]	@ (8015594 <rcl_get_zero_initialized_context+0x10>)
 8015586:	4603      	mov	r3, r0
 8015588:	e892 0003 	ldmia.w	r2, {r0, r1}
 801558c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015590:	4618      	mov	r0, r3
 8015592:	4770      	bx	lr
 8015594:	0801cde8 	.word	0x0801cde8

08015598 <rcl_context_is_valid>:
 8015598:	b118      	cbz	r0, 80155a2 <rcl_context_is_valid+0xa>
 801559a:	6840      	ldr	r0, [r0, #4]
 801559c:	3800      	subs	r0, #0
 801559e:	bf18      	it	ne
 80155a0:	2001      	movne	r0, #1
 80155a2:	4770      	bx	lr

080155a4 <__cleanup_context>:
 80155a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155a8:	4606      	mov	r6, r0
 80155aa:	2300      	movs	r3, #0
 80155ac:	6800      	ldr	r0, [r0, #0]
 80155ae:	6073      	str	r3, [r6, #4]
 80155b0:	2800      	cmp	r0, #0
 80155b2:	d049      	beq.n	8015648 <__cleanup_context+0xa4>
 80155b4:	6947      	ldr	r7, [r0, #20]
 80155b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80155ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80155be:	b137      	cbz	r7, 80155ce <__cleanup_context+0x2a>
 80155c0:	3014      	adds	r0, #20
 80155c2:	f7f8 fc13 	bl	800ddec <rcl_init_options_fini>
 80155c6:	4607      	mov	r7, r0
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d144      	bne.n	8015656 <__cleanup_context+0xb2>
 80155cc:	6830      	ldr	r0, [r6, #0]
 80155ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80155d0:	b143      	cbz	r3, 80155e4 <__cleanup_context+0x40>
 80155d2:	3028      	adds	r0, #40	@ 0x28
 80155d4:	f7f9 fffa 	bl	800f5cc <rmw_context_fini>
 80155d8:	b118      	cbz	r0, 80155e2 <__cleanup_context+0x3e>
 80155da:	2f00      	cmp	r7, #0
 80155dc:	d03e      	beq.n	801565c <__cleanup_context+0xb8>
 80155de:	f7f9 fd2b 	bl	800f038 <rcutils_reset_error>
 80155e2:	6830      	ldr	r0, [r6, #0]
 80155e4:	6a03      	ldr	r3, [r0, #32]
 80155e6:	b1db      	cbz	r3, 8015620 <__cleanup_context+0x7c>
 80155e8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80155ec:	2a01      	cmp	r2, #1
 80155ee:	f17c 0100 	sbcs.w	r1, ip, #0
 80155f2:	db11      	blt.n	8015618 <__cleanup_context+0x74>
 80155f4:	2400      	movs	r4, #0
 80155f6:	4625      	mov	r5, r4
 80155f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80155fc:	4649      	mov	r1, r9
 80155fe:	b1b8      	cbz	r0, 8015630 <__cleanup_context+0x8c>
 8015600:	47c0      	blx	r8
 8015602:	6833      	ldr	r3, [r6, #0]
 8015604:	3401      	adds	r4, #1
 8015606:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801560a:	f145 0500 	adc.w	r5, r5, #0
 801560e:	6a1b      	ldr	r3, [r3, #32]
 8015610:	4294      	cmp	r4, r2
 8015612:	eb75 010c 	sbcs.w	r1, r5, ip
 8015616:	dbef      	blt.n	80155f8 <__cleanup_context+0x54>
 8015618:	4618      	mov	r0, r3
 801561a:	4649      	mov	r1, r9
 801561c:	47c0      	blx	r8
 801561e:	6830      	ldr	r0, [r6, #0]
 8015620:	4649      	mov	r1, r9
 8015622:	47c0      	blx	r8
 8015624:	2300      	movs	r3, #0
 8015626:	4638      	mov	r0, r7
 8015628:	e9c6 3300 	strd	r3, r3, [r6]
 801562c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015630:	3401      	adds	r4, #1
 8015632:	f145 0500 	adc.w	r5, r5, #0
 8015636:	4294      	cmp	r4, r2
 8015638:	eb75 010c 	sbcs.w	r1, r5, ip
 801563c:	dbdc      	blt.n	80155f8 <__cleanup_context+0x54>
 801563e:	4618      	mov	r0, r3
 8015640:	4649      	mov	r1, r9
 8015642:	47c0      	blx	r8
 8015644:	6830      	ldr	r0, [r6, #0]
 8015646:	e7eb      	b.n	8015620 <__cleanup_context+0x7c>
 8015648:	4607      	mov	r7, r0
 801564a:	2300      	movs	r3, #0
 801564c:	4638      	mov	r0, r7
 801564e:	e9c6 3300 	strd	r3, r3, [r6]
 8015652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015656:	f7f9 fcef 	bl	800f038 <rcutils_reset_error>
 801565a:	e7b7      	b.n	80155cc <__cleanup_context+0x28>
 801565c:	f7ff ff7e 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 8015660:	4607      	mov	r7, r0
 8015662:	e7bc      	b.n	80155de <__cleanup_context+0x3a>

08015664 <rcl_init>:
 8015664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015668:	1e05      	subs	r5, r0, #0
 801566a:	b09e      	sub	sp, #120	@ 0x78
 801566c:	460e      	mov	r6, r1
 801566e:	4690      	mov	r8, r2
 8015670:	461f      	mov	r7, r3
 8015672:	f340 809f 	ble.w	80157b4 <rcl_init+0x150>
 8015676:	2900      	cmp	r1, #0
 8015678:	f000 809f 	beq.w	80157ba <rcl_init+0x156>
 801567c:	f1a1 0e04 	sub.w	lr, r1, #4
 8015680:	f04f 0c00 	mov.w	ip, #0
 8015684:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015688:	f10c 0c01 	add.w	ip, ip, #1
 801568c:	2c00      	cmp	r4, #0
 801568e:	f000 8094 	beq.w	80157ba <rcl_init+0x156>
 8015692:	4565      	cmp	r5, ip
 8015694:	d1f6      	bne.n	8015684 <rcl_init+0x20>
 8015696:	f1b8 0f00 	cmp.w	r8, #0
 801569a:	f000 808e 	beq.w	80157ba <rcl_init+0x156>
 801569e:	f8d8 4000 	ldr.w	r4, [r8]
 80156a2:	2c00      	cmp	r4, #0
 80156a4:	f000 8089 	beq.w	80157ba <rcl_init+0x156>
 80156a8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80156ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156b2:	6823      	ldr	r3, [r4, #0]
 80156b4:	a819      	add	r0, sp, #100	@ 0x64
 80156b6:	f8cc 3000 	str.w	r3, [ip]
 80156ba:	f7f9 fc99 	bl	800eff0 <rcutils_allocator_is_valid>
 80156be:	f080 0001 	eor.w	r0, r0, #1
 80156c2:	b2c0      	uxtb	r0, r0
 80156c4:	2800      	cmp	r0, #0
 80156c6:	d178      	bne.n	80157ba <rcl_init+0x156>
 80156c8:	2f00      	cmp	r7, #0
 80156ca:	d076      	beq.n	80157ba <rcl_init+0x156>
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d178      	bne.n	80157c4 <rcl_init+0x160>
 80156d2:	2178      	movs	r1, #120	@ 0x78
 80156d4:	2001      	movs	r0, #1
 80156d6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80156da:	4798      	blx	r3
 80156dc:	4604      	mov	r4, r0
 80156de:	6038      	str	r0, [r7, #0]
 80156e0:	2800      	cmp	r0, #0
 80156e2:	f000 80b6 	beq.w	8015852 <rcl_init+0x1ee>
 80156e6:	a802      	add	r0, sp, #8
 80156e8:	f003 f84e 	bl	8018788 <rmw_get_zero_initialized_context>
 80156ec:	a902      	add	r1, sp, #8
 80156ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80156f2:	2250      	movs	r2, #80	@ 0x50
 80156f4:	f006 fa09 	bl	801bb0a <memcpy>
 80156f8:	ac19      	add	r4, sp, #100	@ 0x64
 80156fa:	f8d7 e000 	ldr.w	lr, [r7]
 80156fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015700:	46f4      	mov	ip, lr
 8015702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015706:	6823      	ldr	r3, [r4, #0]
 8015708:	f10e 0114 	add.w	r1, lr, #20
 801570c:	4640      	mov	r0, r8
 801570e:	f8cc 3000 	str.w	r3, [ip]
 8015712:	f7f8 fb95 	bl	800de40 <rcl_init_options_copy>
 8015716:	4604      	mov	r4, r0
 8015718:	2800      	cmp	r0, #0
 801571a:	d144      	bne.n	80157a6 <rcl_init+0x142>
 801571c:	f8d7 9000 	ldr.w	r9, [r7]
 8015720:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015724:	f8c9 0020 	str.w	r0, [r9, #32]
 8015728:	f8c9 5018 	str.w	r5, [r9, #24]
 801572c:	f8c9 801c 	str.w	r8, [r9, #28]
 8015730:	2d00      	cmp	r5, #0
 8015732:	d04e      	beq.n	80157d2 <rcl_init+0x16e>
 8015734:	2e00      	cmp	r6, #0
 8015736:	d04c      	beq.n	80157d2 <rcl_init+0x16e>
 8015738:	2104      	movs	r1, #4
 801573a:	4628      	mov	r0, r5
 801573c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015740:	4798      	blx	r3
 8015742:	f8c9 0020 	str.w	r0, [r9, #32]
 8015746:	f8d7 9000 	ldr.w	r9, [r7]
 801574a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801574e:	46ca      	mov	sl, r9
 8015750:	b343      	cbz	r3, 80157a4 <rcl_init+0x140>
 8015752:	2d01      	cmp	r5, #1
 8015754:	f178 0300 	sbcs.w	r3, r8, #0
 8015758:	db3b      	blt.n	80157d2 <rcl_init+0x16e>
 801575a:	2400      	movs	r4, #0
 801575c:	3e04      	subs	r6, #4
 801575e:	46a1      	mov	r9, r4
 8015760:	e00b      	b.n	801577a <rcl_init+0x116>
 8015762:	6831      	ldr	r1, [r6, #0]
 8015764:	f006 f9d1 	bl	801bb0a <memcpy>
 8015768:	3401      	adds	r4, #1
 801576a:	f149 0900 	adc.w	r9, r9, #0
 801576e:	45c8      	cmp	r8, r9
 8015770:	bf08      	it	eq
 8015772:	42a5      	cmpeq	r5, r4
 8015774:	d02b      	beq.n	80157ce <rcl_init+0x16a>
 8015776:	f8d7 a000 	ldr.w	sl, [r7]
 801577a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801577e:	f7ea fdb9 	bl	80002f4 <strlen>
 8015782:	1c42      	adds	r2, r0, #1
 8015784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015786:	4610      	mov	r0, r2
 8015788:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801578a:	f8da a020 	ldr.w	sl, [sl, #32]
 801578e:	9201      	str	r2, [sp, #4]
 8015790:	4798      	blx	r3
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015798:	6a1b      	ldr	r3, [r3, #32]
 801579a:	9a01      	ldr	r2, [sp, #4]
 801579c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d1de      	bne.n	8015762 <rcl_init+0xfe>
 80157a4:	240a      	movs	r4, #10
 80157a6:	4638      	mov	r0, r7
 80157a8:	f7ff fefc 	bl	80155a4 <__cleanup_context>
 80157ac:	4620      	mov	r0, r4
 80157ae:	b01e      	add	sp, #120	@ 0x78
 80157b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157b4:	2900      	cmp	r1, #0
 80157b6:	f43f af6e 	beq.w	8015696 <rcl_init+0x32>
 80157ba:	240b      	movs	r4, #11
 80157bc:	4620      	mov	r0, r4
 80157be:	b01e      	add	sp, #120	@ 0x78
 80157c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157c4:	2464      	movs	r4, #100	@ 0x64
 80157c6:	4620      	mov	r0, r4
 80157c8:	b01e      	add	sp, #120	@ 0x78
 80157ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157ce:	f8d7 9000 	ldr.w	r9, [r7]
 80157d2:	4926      	ldr	r1, [pc, #152]	@ (801586c <rcl_init+0x208>)
 80157d4:	680b      	ldr	r3, [r1, #0]
 80157d6:	3301      	adds	r3, #1
 80157d8:	d036      	beq.n	8015848 <rcl_init+0x1e4>
 80157da:	461a      	mov	r2, r3
 80157dc:	2400      	movs	r4, #0
 80157de:	600b      	str	r3, [r1, #0]
 80157e0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80157e4:	607b      	str	r3, [r7, #4]
 80157e6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80157e8:	3301      	adds	r3, #1
 80157ea:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80157ee:	d034      	beq.n	801585a <rcl_init+0x1f6>
 80157f0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80157f4:	b93b      	cbnz	r3, 8015806 <rcl_init+0x1a2>
 80157f6:	3030      	adds	r0, #48	@ 0x30
 80157f8:	f000 f83a 	bl	8015870 <rcl_get_localhost_only>
 80157fc:	4604      	mov	r4, r0
 80157fe:	2800      	cmp	r0, #0
 8015800:	d1d1      	bne.n	80157a6 <rcl_init+0x142>
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	6958      	ldr	r0, [r3, #20]
 8015806:	aa18      	add	r2, sp, #96	@ 0x60
 8015808:	a917      	add	r1, sp, #92	@ 0x5c
 801580a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801580c:	f001 f8d2 	bl	80169b4 <rcl_validate_enclave_name>
 8015810:	4604      	mov	r4, r0
 8015812:	2800      	cmp	r0, #0
 8015814:	d1c7      	bne.n	80157a6 <rcl_init+0x142>
 8015816:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015818:	b9eb      	cbnz	r3, 8015856 <rcl_init+0x1f2>
 801581a:	6839      	ldr	r1, [r7, #0]
 801581c:	694b      	ldr	r3, [r1, #20]
 801581e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015822:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015824:	f000 fb72 	bl	8015f0c <rcl_get_security_options_from_environment>
 8015828:	4604      	mov	r4, r0
 801582a:	2800      	cmp	r0, #0
 801582c:	d1bb      	bne.n	80157a6 <rcl_init+0x142>
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	6948      	ldr	r0, [r1, #20]
 8015832:	3128      	adds	r1, #40	@ 0x28
 8015834:	3018      	adds	r0, #24
 8015836:	f7f9 fd93 	bl	800f360 <rmw_init>
 801583a:	4604      	mov	r4, r0
 801583c:	2800      	cmp	r0, #0
 801583e:	d0bd      	beq.n	80157bc <rcl_init+0x158>
 8015840:	f7ff fe8c 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 8015844:	4604      	mov	r4, r0
 8015846:	e7ae      	b.n	80157a6 <rcl_init+0x142>
 8015848:	2201      	movs	r2, #1
 801584a:	461c      	mov	r4, r3
 801584c:	600a      	str	r2, [r1, #0]
 801584e:	4613      	mov	r3, r2
 8015850:	e7c6      	b.n	80157e0 <rcl_init+0x17c>
 8015852:	240a      	movs	r4, #10
 8015854:	e7b2      	b.n	80157bc <rcl_init+0x158>
 8015856:	2401      	movs	r4, #1
 8015858:	e7a5      	b.n	80157a6 <rcl_init+0x142>
 801585a:	3024      	adds	r0, #36	@ 0x24
 801585c:	f004 ffa0 	bl	801a7a0 <rcl_get_default_domain_id>
 8015860:	4604      	mov	r4, r0
 8015862:	2800      	cmp	r0, #0
 8015864:	d19f      	bne.n	80157a6 <rcl_init+0x142>
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	6958      	ldr	r0, [r3, #20]
 801586a:	e7c1      	b.n	80157f0 <rcl_init+0x18c>
 801586c:	24012de8 	.word	0x24012de8

08015870 <rcl_get_localhost_only>:
 8015870:	b510      	push	{r4, lr}
 8015872:	2300      	movs	r3, #0
 8015874:	b082      	sub	sp, #8
 8015876:	9301      	str	r3, [sp, #4]
 8015878:	b1b8      	cbz	r0, 80158aa <rcl_get_localhost_only+0x3a>
 801587a:	4604      	mov	r4, r0
 801587c:	a901      	add	r1, sp, #4
 801587e:	480c      	ldr	r0, [pc, #48]	@ (80158b0 <rcl_get_localhost_only+0x40>)
 8015880:	f002 fcb2 	bl	80181e8 <rcutils_get_env>
 8015884:	b110      	cbz	r0, 801588c <rcl_get_localhost_only+0x1c>
 8015886:	2001      	movs	r0, #1
 8015888:	b002      	add	sp, #8
 801588a:	bd10      	pop	{r4, pc}
 801588c:	9b01      	ldr	r3, [sp, #4]
 801588e:	b113      	cbz	r3, 8015896 <rcl_get_localhost_only+0x26>
 8015890:	781a      	ldrb	r2, [r3, #0]
 8015892:	2a31      	cmp	r2, #49	@ 0x31
 8015894:	d004      	beq.n	80158a0 <rcl_get_localhost_only+0x30>
 8015896:	2302      	movs	r3, #2
 8015898:	2000      	movs	r0, #0
 801589a:	7023      	strb	r3, [r4, #0]
 801589c:	b002      	add	sp, #8
 801589e:	bd10      	pop	{r4, pc}
 80158a0:	785b      	ldrb	r3, [r3, #1]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d1f7      	bne.n	8015896 <rcl_get_localhost_only+0x26>
 80158a6:	2301      	movs	r3, #1
 80158a8:	e7f6      	b.n	8015898 <rcl_get_localhost_only+0x28>
 80158aa:	200b      	movs	r0, #11
 80158ac:	b002      	add	sp, #8
 80158ae:	bd10      	pop	{r4, pc}
 80158b0:	0801cdf0 	.word	0x0801cdf0

080158b4 <rcl_get_zero_initialized_node>:
 80158b4:	4a03      	ldr	r2, [pc, #12]	@ (80158c4 <rcl_get_zero_initialized_node+0x10>)
 80158b6:	4603      	mov	r3, r0
 80158b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80158c0:	4618      	mov	r0, r3
 80158c2:	4770      	bx	lr
 80158c4:	0801ce0c 	.word	0x0801ce0c

080158c8 <rcl_node_init>:
 80158c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158cc:	b0a9      	sub	sp, #164	@ 0xa4
 80158ce:	4604      	mov	r4, r0
 80158d0:	460e      	mov	r6, r1
 80158d2:	4615      	mov	r5, r2
 80158d4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80158d8:	a823      	add	r0, sp, #140	@ 0x8c
 80158da:	461f      	mov	r7, r3
 80158dc:	f005 f9d4 	bl	801ac88 <rcl_guard_condition_get_default_options>
 80158e0:	f1b8 0f00 	cmp.w	r8, #0
 80158e4:	f000 80f3 	beq.w	8015ace <rcl_node_init+0x206>
 80158e8:	4640      	mov	r0, r8
 80158ea:	f7f9 fb81 	bl	800eff0 <rcutils_allocator_is_valid>
 80158ee:	2d00      	cmp	r5, #0
 80158f0:	bf18      	it	ne
 80158f2:	2c00      	cmpne	r4, #0
 80158f4:	f080 0001 	eor.w	r0, r0, #1
 80158f8:	bf0c      	ite	eq
 80158fa:	f04f 0c01 	moveq.w	ip, #1
 80158fe:	f04f 0c00 	movne.w	ip, #0
 8015902:	2e00      	cmp	r6, #0
 8015904:	bf08      	it	eq
 8015906:	f04c 0c01 	orreq.w	ip, ip, #1
 801590a:	ea4c 0c00 	orr.w	ip, ip, r0
 801590e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8015912:	f040 80dc 	bne.w	8015ace <rcl_node_init+0x206>
 8015916:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801591a:	f1ba 0f00 	cmp.w	sl, #0
 801591e:	f040 80fc 	bne.w	8015b1a <rcl_node_init+0x252>
 8015922:	2f00      	cmp	r7, #0
 8015924:	f000 80d3 	beq.w	8015ace <rcl_node_init+0x206>
 8015928:	4638      	mov	r0, r7
 801592a:	f7ff fe35 	bl	8015598 <rcl_context_is_valid>
 801592e:	4683      	mov	fp, r0
 8015930:	2800      	cmp	r0, #0
 8015932:	f000 80d2 	beq.w	8015ada <rcl_node_init+0x212>
 8015936:	4652      	mov	r2, sl
 8015938:	4630      	mov	r0, r6
 801593a:	a922      	add	r1, sp, #136	@ 0x88
 801593c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8015940:	f003 f8b4 	bl	8018aac <rmw_validate_node_name>
 8015944:	4682      	mov	sl, r0
 8015946:	2800      	cmp	r0, #0
 8015948:	f040 80c3 	bne.w	8015ad2 <rcl_node_init+0x20a>
 801594c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801594e:	2800      	cmp	r0, #0
 8015950:	f040 80f1 	bne.w	8015b36 <rcl_node_init+0x26e>
 8015954:	4628      	mov	r0, r5
 8015956:	f7ea fccd 	bl	80002f4 <strlen>
 801595a:	2800      	cmp	r0, #0
 801595c:	f040 80c0 	bne.w	8015ae0 <rcl_node_init+0x218>
 8015960:	4d79      	ldr	r5, [pc, #484]	@ (8015b48 <rcl_node_init+0x280>)
 8015962:	a922      	add	r1, sp, #136	@ 0x88
 8015964:	2200      	movs	r2, #0
 8015966:	4628      	mov	r0, r5
 8015968:	f003 f882 	bl	8018a70 <rmw_validate_namespace>
 801596c:	4682      	mov	sl, r0
 801596e:	2800      	cmp	r0, #0
 8015970:	f040 80af 	bne.w	8015ad2 <rcl_node_init+0x20a>
 8015974:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015976:	2800      	cmp	r0, #0
 8015978:	f040 80d5 	bne.w	8015b26 <rcl_node_init+0x25e>
 801597c:	f8d8 3000 	ldr.w	r3, [r8]
 8015980:	2078      	movs	r0, #120	@ 0x78
 8015982:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015986:	4798      	blx	r3
 8015988:	4682      	mov	sl, r0
 801598a:	6060      	str	r0, [r4, #4]
 801598c:	2800      	cmp	r0, #0
 801598e:	f000 80cf 	beq.w	8015b30 <rcl_node_init+0x268>
 8015992:	2200      	movs	r2, #0
 8015994:	2300      	movs	r3, #0
 8015996:	a808      	add	r0, sp, #32
 8015998:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801599c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80159a0:	f000 f902 	bl	8015ba8 <rcl_node_get_default_options>
 80159a4:	a908      	add	r1, sp, #32
 80159a6:	4650      	mov	r0, sl
 80159a8:	2268      	movs	r2, #104	@ 0x68
 80159aa:	f006 f8ae 	bl	801bb0a <memcpy>
 80159ae:	6861      	ldr	r1, [r4, #4]
 80159b0:	4640      	mov	r0, r8
 80159b2:	6027      	str	r7, [r4, #0]
 80159b4:	f000 f906 	bl	8015bc4 <rcl_node_options_copy>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d158      	bne.n	8015a6e <rcl_node_init+0x1a6>
 80159bc:	4628      	mov	r0, r5
 80159be:	f7ea fc99 	bl	80002f4 <strlen>
 80159c2:	4428      	add	r0, r5
 80159c4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80159c8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80159cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80159ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	bf0c      	ite	eq
 80159d6:	4b5d      	ldreq	r3, [pc, #372]	@ (8015b4c <rcl_node_init+0x284>)
 80159d8:	4b5d      	ldrne	r3, [pc, #372]	@ (8015b50 <rcl_node_init+0x288>)
 80159da:	9302      	str	r3, [sp, #8]
 80159dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80159e0:	9301      	str	r3, [sp, #4]
 80159e2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80159e6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80159ea:	f002 fc25 	bl	8018238 <rcutils_format_string_limit>
 80159ee:	6823      	ldr	r3, [r4, #0]
 80159f0:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80159f4:	4631      	mov	r1, r6
 80159f6:	6818      	ldr	r0, [r3, #0]
 80159f8:	462a      	mov	r2, r5
 80159fa:	6866      	ldr	r6, [r4, #4]
 80159fc:	3028      	adds	r0, #40	@ 0x28
 80159fe:	f7f9 fe97 	bl	800f730 <rmw_create_node>
 8015a02:	6863      	ldr	r3, [r4, #4]
 8015a04:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015a06:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d032      	beq.n	8015a72 <rcl_node_init+0x1aa>
 8015a0c:	f7f9 ff20 	bl	800f850 <rmw_node_get_graph_guard_condition>
 8015a10:	4682      	mov	sl, r0
 8015a12:	b360      	cbz	r0, 8015a6e <rcl_node_init+0x1a6>
 8015a14:	f8d8 3000 	ldr.w	r3, [r8]
 8015a18:	2008      	movs	r0, #8
 8015a1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a1e:	6866      	ldr	r6, [r4, #4]
 8015a20:	4798      	blx	r3
 8015a22:	6863      	ldr	r3, [r4, #4]
 8015a24:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015a26:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015a2a:	f1bb 0f00 	cmp.w	fp, #0
 8015a2e:	d020      	beq.n	8015a72 <rcl_node_init+0x1aa>
 8015a30:	a806      	add	r0, sp, #24
 8015a32:	ae23      	add	r6, sp, #140	@ 0x8c
 8015a34:	f005 f84e 	bl	801aad4 <rcl_get_zero_initialized_guard_condition>
 8015a38:	a806      	add	r0, sp, #24
 8015a3a:	6863      	ldr	r3, [r4, #4]
 8015a3c:	46c4      	mov	ip, r8
 8015a3e:	c803      	ldmia	r0, {r0, r1}
 8015a40:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015a44:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015a48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8015a52:	6033      	str	r3, [r6, #0]
 8015a54:	ab28      	add	r3, sp, #160	@ 0xa0
 8015a56:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015a5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015a5e:	4651      	mov	r1, sl
 8015a60:	463a      	mov	r2, r7
 8015a62:	4670      	mov	r0, lr
 8015a64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a66:	f005 f88d 	bl	801ab84 <rcl_guard_condition_init_from_rmw>
 8015a6a:	4682      	mov	sl, r0
 8015a6c:	b328      	cbz	r0, 8015aba <rcl_node_init+0x1f2>
 8015a6e:	6863      	ldr	r3, [r4, #4]
 8015a70:	b1f3      	cbz	r3, 8015ab0 <rcl_node_init+0x1e8>
 8015a72:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015a74:	b128      	cbz	r0, 8015a82 <rcl_node_init+0x1ba>
 8015a76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a7a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a7e:	4798      	blx	r3
 8015a80:	6863      	ldr	r3, [r4, #4]
 8015a82:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015a84:	b110      	cbz	r0, 8015a8c <rcl_node_init+0x1c4>
 8015a86:	f7f9 fe65 	bl	800f754 <rmw_destroy_node>
 8015a8a:	6863      	ldr	r3, [r4, #4]
 8015a8c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015a8e:	b148      	cbz	r0, 8015aa4 <rcl_node_init+0x1dc>
 8015a90:	f005 f8d4 	bl	801ac3c <rcl_guard_condition_fini>
 8015a94:	6863      	ldr	r3, [r4, #4]
 8015a96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a9a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015a9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015aa0:	4798      	blx	r3
 8015aa2:	6863      	ldr	r3, [r4, #4]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015aaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015aae:	4798      	blx	r3
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	f04f 0a01 	mov.w	sl, #1
 8015ab6:	e9c4 3300 	strd	r3, r3, [r4]
 8015aba:	f1b9 0f00 	cmp.w	r9, #0
 8015abe:	d008      	beq.n	8015ad2 <rcl_node_init+0x20a>
 8015ac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015aca:	4798      	blx	r3
 8015acc:	e001      	b.n	8015ad2 <rcl_node_init+0x20a>
 8015ace:	f04f 0a0b 	mov.w	sl, #11
 8015ad2:	4650      	mov	r0, sl
 8015ad4:	b029      	add	sp, #164	@ 0xa4
 8015ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ada:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8015ade:	e7f8      	b.n	8015ad2 <rcl_node_init+0x20a>
 8015ae0:	782b      	ldrb	r3, [r5, #0]
 8015ae2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ae4:	f43f af3d 	beq.w	8015962 <rcl_node_init+0x9a>
 8015ae8:	9503      	str	r5, [sp, #12]
 8015aea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015aee:	9300      	str	r3, [sp, #0]
 8015af0:	4b18      	ldr	r3, [pc, #96]	@ (8015b54 <rcl_node_init+0x28c>)
 8015af2:	9302      	str	r3, [sp, #8]
 8015af4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015af8:	9301      	str	r3, [sp, #4]
 8015afa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015afe:	f002 fb9b 	bl	8018238 <rcutils_format_string_limit>
 8015b02:	4605      	mov	r5, r0
 8015b04:	b1e0      	cbz	r0, 8015b40 <rcl_node_init+0x278>
 8015b06:	2200      	movs	r2, #0
 8015b08:	a922      	add	r1, sp, #136	@ 0x88
 8015b0a:	9222      	str	r2, [sp, #136]	@ 0x88
 8015b0c:	f002 ffb0 	bl	8018a70 <rmw_validate_namespace>
 8015b10:	4682      	mov	sl, r0
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d1d4      	bne.n	8015ac0 <rcl_node_init+0x1f8>
 8015b16:	46d9      	mov	r9, fp
 8015b18:	e72c      	b.n	8015974 <rcl_node_init+0xac>
 8015b1a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8015b1e:	4650      	mov	r0, sl
 8015b20:	b029      	add	sp, #164	@ 0xa4
 8015b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b26:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8015b2a:	f002 ffb3 	bl	8018a94 <rmw_namespace_validation_result_string>
 8015b2e:	e7c4      	b.n	8015aba <rcl_node_init+0x1f2>
 8015b30:	f04f 0a0a 	mov.w	sl, #10
 8015b34:	e7c1      	b.n	8015aba <rcl_node_init+0x1f2>
 8015b36:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8015b3a:	f003 f80b 	bl	8018b54 <rmw_node_name_validation_result_string>
 8015b3e:	e7c8      	b.n	8015ad2 <rcl_node_init+0x20a>
 8015b40:	f04f 0a0a 	mov.w	sl, #10
 8015b44:	e7c5      	b.n	8015ad2 <rcl_node_init+0x20a>
 8015b46:	bf00      	nop
 8015b48:	0801c9e0 	.word	0x0801c9e0
 8015b4c:	0801ca2c 	.word	0x0801ca2c
 8015b50:	0801c9e4 	.word	0x0801c9e4
 8015b54:	0801ce08 	.word	0x0801ce08

08015b58 <rcl_node_is_valid>:
 8015b58:	b130      	cbz	r0, 8015b68 <rcl_node_is_valid+0x10>
 8015b5a:	6843      	ldr	r3, [r0, #4]
 8015b5c:	b123      	cbz	r3, 8015b68 <rcl_node_is_valid+0x10>
 8015b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b60:	b113      	cbz	r3, 8015b68 <rcl_node_is_valid+0x10>
 8015b62:	6800      	ldr	r0, [r0, #0]
 8015b64:	f7ff bd18 	b.w	8015598 <rcl_context_is_valid>
 8015b68:	2000      	movs	r0, #0
 8015b6a:	4770      	bx	lr

08015b6c <rcl_node_get_name>:
 8015b6c:	b120      	cbz	r0, 8015b78 <rcl_node_get_name+0xc>
 8015b6e:	6840      	ldr	r0, [r0, #4]
 8015b70:	b110      	cbz	r0, 8015b78 <rcl_node_get_name+0xc>
 8015b72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b74:	b100      	cbz	r0, 8015b78 <rcl_node_get_name+0xc>
 8015b76:	6880      	ldr	r0, [r0, #8]
 8015b78:	4770      	bx	lr
 8015b7a:	bf00      	nop

08015b7c <rcl_node_get_namespace>:
 8015b7c:	b120      	cbz	r0, 8015b88 <rcl_node_get_namespace+0xc>
 8015b7e:	6840      	ldr	r0, [r0, #4]
 8015b80:	b110      	cbz	r0, 8015b88 <rcl_node_get_namespace+0xc>
 8015b82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b84:	b100      	cbz	r0, 8015b88 <rcl_node_get_namespace+0xc>
 8015b86:	68c0      	ldr	r0, [r0, #12]
 8015b88:	4770      	bx	lr
 8015b8a:	bf00      	nop

08015b8c <rcl_node_get_options>:
 8015b8c:	b128      	cbz	r0, 8015b9a <rcl_node_get_options+0xe>
 8015b8e:	6840      	ldr	r0, [r0, #4]
 8015b90:	b118      	cbz	r0, 8015b9a <rcl_node_get_options+0xe>
 8015b92:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	bf08      	it	eq
 8015b98:	2000      	moveq	r0, #0
 8015b9a:	4770      	bx	lr

08015b9c <rcl_node_get_rmw_handle>:
 8015b9c:	b110      	cbz	r0, 8015ba4 <rcl_node_get_rmw_handle+0x8>
 8015b9e:	6840      	ldr	r0, [r0, #4]
 8015ba0:	b100      	cbz	r0, 8015ba4 <rcl_node_get_rmw_handle+0x8>
 8015ba2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop

08015ba8 <rcl_node_get_default_options>:
 8015ba8:	b510      	push	{r4, lr}
 8015baa:	4604      	mov	r4, r0
 8015bac:	2268      	movs	r2, #104	@ 0x68
 8015bae:	2100      	movs	r1, #0
 8015bb0:	f005 fee2 	bl	801b978 <memset>
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f7f9 fa0d 	bl	800efd4 <rcutils_get_default_allocator>
 8015bba:	2301      	movs	r3, #1
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	7523      	strb	r3, [r4, #20]
 8015bc0:	bd10      	pop	{r4, pc}
 8015bc2:	bf00      	nop

08015bc4 <rcl_node_options_copy>:
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	bf18      	it	ne
 8015bc8:	4288      	cmpne	r0, r1
 8015bca:	d01b      	beq.n	8015c04 <rcl_node_options_copy+0x40>
 8015bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bce:	fab1 f681 	clz	r6, r1
 8015bd2:	460c      	mov	r4, r1
 8015bd4:	0976      	lsrs	r6, r6, #5
 8015bd6:	b199      	cbz	r1, 8015c00 <rcl_node_options_copy+0x3c>
 8015bd8:	4605      	mov	r5, r0
 8015bda:	8a87      	ldrh	r7, [r0, #20]
 8015bdc:	4684      	mov	ip, r0
 8015bde:	468e      	mov	lr, r1
 8015be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015be2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015be6:	682b      	ldr	r3, [r5, #0]
 8015be8:	2250      	movs	r2, #80	@ 0x50
 8015bea:	f10c 0118 	add.w	r1, ip, #24
 8015bee:	f104 0018 	add.w	r0, r4, #24
 8015bf2:	f8ce 3000 	str.w	r3, [lr]
 8015bf6:	82a7      	strh	r7, [r4, #20]
 8015bf8:	f005 ff87 	bl	801bb0a <memcpy>
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c00:	200b      	movs	r0, #11
 8015c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c04:	200b      	movs	r0, #11
 8015c06:	4770      	bx	lr

08015c08 <rcl_node_resolve_name>:
 8015c08:	b082      	sub	sp, #8
 8015c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c0e:	b091      	sub	sp, #68	@ 0x44
 8015c10:	ac1a      	add	r4, sp, #104	@ 0x68
 8015c12:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015c16:	e884 000c 	stmia.w	r4, {r2, r3}
 8015c1a:	2800      	cmp	r0, #0
 8015c1c:	d03d      	beq.n	8015c9a <rcl_node_resolve_name+0x92>
 8015c1e:	460c      	mov	r4, r1
 8015c20:	4605      	mov	r5, r0
 8015c22:	f7ff ffb3 	bl	8015b8c <rcl_node_get_options>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d03a      	beq.n	8015ca0 <rcl_node_resolve_name+0x98>
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	f7ff ff9e 	bl	8015b6c <rcl_node_get_name>
 8015c30:	4606      	mov	r6, r0
 8015c32:	4628      	mov	r0, r5
 8015c34:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015c36:	f7ff ffa1 	bl	8015b7c <rcl_node_get_namespace>
 8015c3a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015c3e:	4607      	mov	r7, r0
 8015c40:	46ac      	mov	ip, r5
 8015c42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c4a:	f8de 3000 	ldr.w	r3, [lr]
 8015c4e:	f8cc 3000 	str.w	r3, [ip]
 8015c52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015c54:	b30b      	cbz	r3, 8015c9a <rcl_node_resolve_name+0x92>
 8015c56:	4689      	mov	r9, r1
 8015c58:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8015c5c:	f002 fc64 	bl	8018528 <rcutils_get_zero_initialized_string_map>
 8015c60:	ab10      	add	r3, sp, #64	@ 0x40
 8015c62:	9008      	str	r0, [sp, #32]
 8015c64:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015c68:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	a808      	add	r0, sp, #32
 8015c70:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015c74:	f002 fcce 	bl	8018614 <rcutils_string_map_init>
 8015c78:	4683      	mov	fp, r0
 8015c7a:	b1a0      	cbz	r0, 8015ca6 <rcl_node_resolve_name+0x9e>
 8015c7c:	f7f9 f9c6 	bl	800f00c <rcutils_get_error_string>
 8015c80:	f7f9 f9da 	bl	800f038 <rcutils_reset_error>
 8015c84:	f1bb 0f0a 	cmp.w	fp, #10
 8015c88:	bf18      	it	ne
 8015c8a:	f04f 0b01 	movne.w	fp, #1
 8015c8e:	4658      	mov	r0, fp
 8015c90:	b011      	add	sp, #68	@ 0x44
 8015c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c96:	b002      	add	sp, #8
 8015c98:	4770      	bx	lr
 8015c9a:	f04f 0b0b 	mov.w	fp, #11
 8015c9e:	e7f6      	b.n	8015c8e <rcl_node_resolve_name+0x86>
 8015ca0:	f04f 0b01 	mov.w	fp, #1
 8015ca4:	e7f3      	b.n	8015c8e <rcl_node_resolve_name+0x86>
 8015ca6:	9009      	str	r0, [sp, #36]	@ 0x24
 8015ca8:	9007      	str	r0, [sp, #28]
 8015caa:	a808      	add	r0, sp, #32
 8015cac:	f004 ff0c 	bl	801aac8 <rcl_get_default_topic_name_substitutions>
 8015cb0:	4683      	mov	fp, r0
 8015cb2:	b180      	cbz	r0, 8015cd6 <rcl_node_resolve_name+0xce>
 8015cb4:	280a      	cmp	r0, #10
 8015cb6:	a808      	add	r0, sp, #32
 8015cb8:	bf18      	it	ne
 8015cba:	f04f 0b01 	movne.w	fp, #1
 8015cbe:	f002 fce9 	bl	8018694 <rcutils_string_map_fini>
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d15b      	bne.n	8015d80 <rcl_node_resolve_name+0x178>
 8015cc8:	4651      	mov	r1, sl
 8015cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ccc:	47c8      	blx	r9
 8015cce:	4651      	mov	r1, sl
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	47c8      	blx	r9
 8015cd4:	e7db      	b.n	8015c8e <rcl_node_resolve_name+0x86>
 8015cd6:	ab09      	add	r3, sp, #36	@ 0x24
 8015cd8:	46ec      	mov	ip, sp
 8015cda:	9305      	str	r3, [sp, #20]
 8015cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ce2:	682b      	ldr	r3, [r5, #0]
 8015ce4:	463a      	mov	r2, r7
 8015ce6:	4631      	mov	r1, r6
 8015ce8:	4620      	mov	r0, r4
 8015cea:	f8cc 3000 	str.w	r3, [ip]
 8015cee:	ab08      	add	r3, sp, #32
 8015cf0:	f004 fd8a 	bl	801a808 <rcl_expand_topic_name>
 8015cf4:	4683      	mov	fp, r0
 8015cf6:	b9d8      	cbnz	r0, 8015d30 <rcl_node_resolve_name+0x128>
 8015cf8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	9009      	str	r0, [sp, #36]	@ 0x24
 8015cfe:	a90a      	add	r1, sp, #40	@ 0x28
 8015d00:	4620      	mov	r0, r4
 8015d02:	f002 fde5 	bl	80188d0 <rmw_validate_full_topic_name>
 8015d06:	bb50      	cbnz	r0, 8015d5e <rcl_node_resolve_name+0x156>
 8015d08:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015d0a:	2d00      	cmp	r5, #0
 8015d0c:	d140      	bne.n	8015d90 <rcl_node_resolve_name+0x188>
 8015d0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015d10:	a808      	add	r0, sp, #32
 8015d12:	601c      	str	r4, [r3, #0]
 8015d14:	f002 fcbe 	bl	8018694 <rcutils_string_map_fini>
 8015d18:	4683      	mov	fp, r0
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	d043      	beq.n	8015da6 <rcl_node_resolve_name+0x19e>
 8015d1e:	f7f9 f975 	bl	800f00c <rcutils_get_error_string>
 8015d22:	46a8      	mov	r8, r5
 8015d24:	f04f 0b01 	mov.w	fp, #1
 8015d28:	462c      	mov	r4, r5
 8015d2a:	f7f9 f985 	bl	800f038 <rcutils_reset_error>
 8015d2e:	e00a      	b.n	8015d46 <rcl_node_resolve_name+0x13e>
 8015d30:	2867      	cmp	r0, #103	@ 0x67
 8015d32:	bf14      	ite	ne
 8015d34:	f04f 0800 	movne.w	r8, #0
 8015d38:	f008 0801 	andeq.w	r8, r8, #1
 8015d3c:	9c07      	ldr	r4, [sp, #28]
 8015d3e:	a808      	add	r0, sp, #32
 8015d40:	f002 fca8 	bl	8018694 <rcutils_string_map_fini>
 8015d44:	bb50      	cbnz	r0, 8015d9c <rcl_node_resolve_name+0x194>
 8015d46:	4651      	mov	r1, sl
 8015d48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d4a:	47c8      	blx	r9
 8015d4c:	4651      	mov	r1, sl
 8015d4e:	4620      	mov	r0, r4
 8015d50:	47c8      	blx	r9
 8015d52:	f1b8 0f00 	cmp.w	r8, #0
 8015d56:	bf18      	it	ne
 8015d58:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8015d5c:	e797      	b.n	8015c8e <rcl_node_resolve_name+0x86>
 8015d5e:	f7f9 f955 	bl	800f00c <rcutils_get_error_string>
 8015d62:	f7f9 f969 	bl	800f038 <rcutils_reset_error>
 8015d66:	a808      	add	r0, sp, #32
 8015d68:	f002 fc94 	bl	8018694 <rcutils_string_map_fini>
 8015d6c:	b998      	cbnz	r0, 8015d96 <rcl_node_resolve_name+0x18e>
 8015d6e:	4651      	mov	r1, sl
 8015d70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d72:	47c8      	blx	r9
 8015d74:	4651      	mov	r1, sl
 8015d76:	4620      	mov	r0, r4
 8015d78:	f04f 0b01 	mov.w	fp, #1
 8015d7c:	47c8      	blx	r9
 8015d7e:	e786      	b.n	8015c8e <rcl_node_resolve_name+0x86>
 8015d80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015d84:	f7f9 f942 	bl	800f00c <rcutils_get_error_string>
 8015d88:	f7f9 f956 	bl	800f038 <rcutils_reset_error>
 8015d8c:	4644      	mov	r4, r8
 8015d8e:	e7da      	b.n	8015d46 <rcl_node_resolve_name+0x13e>
 8015d90:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8015d94:	e7d3      	b.n	8015d3e <rcl_node_resolve_name+0x136>
 8015d96:	46d8      	mov	r8, fp
 8015d98:	f04f 0b01 	mov.w	fp, #1
 8015d9c:	f7f9 f936 	bl	800f00c <rcutils_get_error_string>
 8015da0:	f7f9 f94a 	bl	800f038 <rcutils_reset_error>
 8015da4:	e7cf      	b.n	8015d46 <rcl_node_resolve_name+0x13e>
 8015da6:	4651      	mov	r1, sl
 8015da8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015daa:	47c8      	blx	r9
 8015dac:	4651      	mov	r1, sl
 8015dae:	4658      	mov	r0, fp
 8015db0:	47c8      	blx	r9
 8015db2:	e76c      	b.n	8015c8e <rcl_node_resolve_name+0x86>

08015db4 <exact_match_lookup>:
 8015db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015db6:	f102 0708 	add.w	r7, r2, #8
 8015dba:	460b      	mov	r3, r1
 8015dbc:	b085      	sub	sp, #20
 8015dbe:	4614      	mov	r4, r2
 8015dc0:	4606      	mov	r6, r0
 8015dc2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015dc6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	4919      	ldr	r1, [pc, #100]	@ (8015e34 <exact_match_lookup+0x80>)
 8015dce:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015dd2:	f002 fa23 	bl	801821c <rcutils_join_path>
 8015dd6:	7833      	ldrb	r3, [r6, #0]
 8015dd8:	4605      	mov	r5, r0
 8015dda:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ddc:	d023      	beq.n	8015e26 <exact_match_lookup+0x72>
 8015dde:	f104 030c 	add.w	r3, r4, #12
 8015de2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015de6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015dea:	1c70      	adds	r0, r6, #1
 8015dec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015df0:	f002 fa1a 	bl	8018228 <rcutils_to_native_path>
 8015df4:	4606      	mov	r6, r0
 8015df6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015dfa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015dfe:	4631      	mov	r1, r6
 8015e00:	4628      	mov	r0, r5
 8015e02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015e06:	f002 fa09 	bl	801821c <rcutils_join_path>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	6862      	ldr	r2, [r4, #4]
 8015e10:	461e      	mov	r6, r3
 8015e12:	6921      	ldr	r1, [r4, #16]
 8015e14:	4790      	blx	r2
 8015e16:	4628      	mov	r0, r5
 8015e18:	4635      	mov	r5, r6
 8015e1a:	6863      	ldr	r3, [r4, #4]
 8015e1c:	6921      	ldr	r1, [r4, #16]
 8015e1e:	4798      	blx	r3
 8015e20:	4628      	mov	r0, r5
 8015e22:	b005      	add	sp, #20
 8015e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e26:	7873      	ldrb	r3, [r6, #1]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d1d8      	bne.n	8015dde <exact_match_lookup+0x2a>
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	b005      	add	sp, #20
 8015e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e32:	bf00      	nop
 8015e34:	0801ce50 	.word	0x0801ce50

08015e38 <rcl_get_secure_root>:
 8015e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e3c:	b085      	sub	sp, #20
 8015e3e:	b168      	cbz	r0, 8015e5c <rcl_get_secure_root+0x24>
 8015e40:	4607      	mov	r7, r0
 8015e42:	4608      	mov	r0, r1
 8015e44:	460c      	mov	r4, r1
 8015e46:	f7f9 f8d3 	bl	800eff0 <rcutils_allocator_is_valid>
 8015e4a:	b138      	cbz	r0, 8015e5c <rcl_get_secure_root+0x24>
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	482d      	ldr	r0, [pc, #180]	@ (8015f04 <rcl_get_secure_root+0xcc>)
 8015e50:	a903      	add	r1, sp, #12
 8015e52:	9303      	str	r3, [sp, #12]
 8015e54:	f002 f9c8 	bl	80181e8 <rcutils_get_env>
 8015e58:	4605      	mov	r5, r0
 8015e5a:	b120      	cbz	r0, 8015e66 <rcl_get_secure_root+0x2e>
 8015e5c:	2500      	movs	r5, #0
 8015e5e:	4628      	mov	r0, r5
 8015e60:	b005      	add	sp, #20
 8015e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e66:	9b03      	ldr	r3, [sp, #12]
 8015e68:	781a      	ldrb	r2, [r3, #0]
 8015e6a:	2a00      	cmp	r2, #0
 8015e6c:	d0f6      	beq.n	8015e5c <rcl_get_secure_root+0x24>
 8015e6e:	f104 090c 	add.w	r9, r4, #12
 8015e72:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015e76:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015e80:	f002 fb14 	bl	80184ac <rcutils_strdup>
 8015e84:	4680      	mov	r8, r0
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d0e8      	beq.n	8015e5c <rcl_get_secure_root+0x24>
 8015e8a:	a903      	add	r1, sp, #12
 8015e8c:	481e      	ldr	r0, [pc, #120]	@ (8015f08 <rcl_get_secure_root+0xd0>)
 8015e8e:	9503      	str	r5, [sp, #12]
 8015e90:	f002 f9aa 	bl	80181e8 <rcutils_get_env>
 8015e94:	b160      	cbz	r0, 8015eb0 <rcl_get_secure_root+0x78>
 8015e96:	2600      	movs	r6, #0
 8015e98:	4630      	mov	r0, r6
 8015e9a:	6863      	ldr	r3, [r4, #4]
 8015e9c:	6921      	ldr	r1, [r4, #16]
 8015e9e:	4798      	blx	r3
 8015ea0:	4640      	mov	r0, r8
 8015ea2:	6863      	ldr	r3, [r4, #4]
 8015ea4:	6921      	ldr	r1, [r4, #16]
 8015ea6:	4798      	blx	r3
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	b005      	add	sp, #20
 8015eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eb0:	9b03      	ldr	r3, [sp, #12]
 8015eb2:	781e      	ldrb	r6, [r3, #0]
 8015eb4:	b1f6      	cbz	r6, 8015ef4 <rcl_get_secure_root+0xbc>
 8015eb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015eba:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015ec4:	f002 faf2 	bl	80184ac <rcutils_strdup>
 8015ec8:	4606      	mov	r6, r0
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	d0e3      	beq.n	8015e96 <rcl_get_secure_root+0x5e>
 8015ece:	4622      	mov	r2, r4
 8015ed0:	4641      	mov	r1, r8
 8015ed2:	f7ff ff6f 	bl	8015db4 <exact_match_lookup>
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	2d00      	cmp	r5, #0
 8015eda:	d0dd      	beq.n	8015e98 <rcl_get_secure_root+0x60>
 8015edc:	4628      	mov	r0, r5
 8015ede:	f002 f99b 	bl	8018218 <rcutils_is_directory>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d1d7      	bne.n	8015e98 <rcl_get_secure_root+0x60>
 8015ee8:	4628      	mov	r0, r5
 8015eea:	6921      	ldr	r1, [r4, #16]
 8015eec:	461d      	mov	r5, r3
 8015eee:	6863      	ldr	r3, [r4, #4]
 8015ef0:	4798      	blx	r3
 8015ef2:	e7d1      	b.n	8015e98 <rcl_get_secure_root+0x60>
 8015ef4:	4622      	mov	r2, r4
 8015ef6:	4638      	mov	r0, r7
 8015ef8:	4641      	mov	r1, r8
 8015efa:	f7ff ff5b 	bl	8015db4 <exact_match_lookup>
 8015efe:	4605      	mov	r5, r0
 8015f00:	e7ea      	b.n	8015ed8 <rcl_get_secure_root+0xa0>
 8015f02:	bf00      	nop
 8015f04:	0801ce5c 	.word	0x0801ce5c
 8015f08:	0801ce74 	.word	0x0801ce74

08015f0c <rcl_get_security_options_from_environment>:
 8015f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f10:	b082      	sub	sp, #8
 8015f12:	2300      	movs	r3, #0
 8015f14:	4606      	mov	r6, r0
 8015f16:	460f      	mov	r7, r1
 8015f18:	4821      	ldr	r0, [pc, #132]	@ (8015fa0 <rcl_get_security_options_from_environment+0x94>)
 8015f1a:	a901      	add	r1, sp, #4
 8015f1c:	4690      	mov	r8, r2
 8015f1e:	9301      	str	r3, [sp, #4]
 8015f20:	f002 f962 	bl	80181e8 <rcutils_get_env>
 8015f24:	b120      	cbz	r0, 8015f30 <rcl_get_security_options_from_environment+0x24>
 8015f26:	2501      	movs	r5, #1
 8015f28:	4628      	mov	r0, r5
 8015f2a:	b002      	add	sp, #8
 8015f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f30:	4604      	mov	r4, r0
 8015f32:	491c      	ldr	r1, [pc, #112]	@ (8015fa4 <rcl_get_security_options_from_environment+0x98>)
 8015f34:	9801      	ldr	r0, [sp, #4]
 8015f36:	f7ea f9d3 	bl	80002e0 <strcmp>
 8015f3a:	4605      	mov	r5, r0
 8015f3c:	b9f0      	cbnz	r0, 8015f7c <rcl_get_security_options_from_environment+0x70>
 8015f3e:	9001      	str	r0, [sp, #4]
 8015f40:	f1b8 0f00 	cmp.w	r8, #0
 8015f44:	d021      	beq.n	8015f8a <rcl_get_security_options_from_environment+0x7e>
 8015f46:	a901      	add	r1, sp, #4
 8015f48:	4817      	ldr	r0, [pc, #92]	@ (8015fa8 <rcl_get_security_options_from_environment+0x9c>)
 8015f4a:	f002 f94d 	bl	80181e8 <rcutils_get_env>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	d1e9      	bne.n	8015f26 <rcl_get_security_options_from_environment+0x1a>
 8015f52:	4916      	ldr	r1, [pc, #88]	@ (8015fac <rcl_get_security_options_from_environment+0xa0>)
 8015f54:	9801      	ldr	r0, [sp, #4]
 8015f56:	f7ea f9c3 	bl	80002e0 <strcmp>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	4639      	mov	r1, r7
 8015f5e:	4630      	mov	r0, r6
 8015f60:	fab3 f383 	clz	r3, r3
 8015f64:	095b      	lsrs	r3, r3, #5
 8015f66:	f888 3000 	strb.w	r3, [r8]
 8015f6a:	f7ff ff65 	bl	8015e38 <rcl_get_secure_root>
 8015f6e:	b170      	cbz	r0, 8015f8e <rcl_get_security_options_from_environment+0x82>
 8015f70:	f8c8 0004 	str.w	r0, [r8, #4]
 8015f74:	4628      	mov	r0, r5
 8015f76:	b002      	add	sp, #8
 8015f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f7c:	4625      	mov	r5, r4
 8015f7e:	f888 4000 	strb.w	r4, [r8]
 8015f82:	4628      	mov	r0, r5
 8015f84:	b002      	add	sp, #8
 8015f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f8a:	250b      	movs	r5, #11
 8015f8c:	e7cc      	b.n	8015f28 <rcl_get_security_options_from_environment+0x1c>
 8015f8e:	f898 5000 	ldrb.w	r5, [r8]
 8015f92:	f1a5 0501 	sub.w	r5, r5, #1
 8015f96:	fab5 f585 	clz	r5, r5
 8015f9a:	096d      	lsrs	r5, r5, #5
 8015f9c:	e7c4      	b.n	8015f28 <rcl_get_security_options_from_environment+0x1c>
 8015f9e:	bf00      	nop
 8015fa0:	0801ce14 	.word	0x0801ce14
 8015fa4:	0801ce28 	.word	0x0801ce28
 8015fa8:	0801ce30 	.word	0x0801ce30
 8015fac:	0801ce48 	.word	0x0801ce48

08015fb0 <rcl_service_get_rmw_handle>:
 8015fb0:	b118      	cbz	r0, 8015fba <rcl_service_get_rmw_handle+0xa>
 8015fb2:	6800      	ldr	r0, [r0, #0]
 8015fb4:	b108      	cbz	r0, 8015fba <rcl_service_get_rmw_handle+0xa>
 8015fb6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015fba:	4770      	bx	lr

08015fbc <rcl_take_request>:
 8015fbc:	b570      	push	{r4, r5, r6, lr}
 8015fbe:	468e      	mov	lr, r1
 8015fc0:	b08c      	sub	sp, #48	@ 0x30
 8015fc2:	460c      	mov	r4, r1
 8015fc4:	4616      	mov	r6, r2
 8015fc6:	f10d 0c18 	add.w	ip, sp, #24
 8015fca:	4605      	mov	r5, r0
 8015fcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015fd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015fd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015fdc:	b30d      	cbz	r5, 8016022 <rcl_take_request+0x66>
 8015fde:	682b      	ldr	r3, [r5, #0]
 8015fe0:	b1fb      	cbz	r3, 8016022 <rcl_take_request+0x66>
 8015fe2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015fe6:	b1e0      	cbz	r0, 8016022 <rcl_take_request+0x66>
 8015fe8:	b336      	cbz	r6, 8016038 <rcl_take_request+0x7c>
 8015fea:	2300      	movs	r3, #0
 8015fec:	4632      	mov	r2, r6
 8015fee:	a902      	add	r1, sp, #8
 8015ff0:	f88d 3007 	strb.w	r3, [sp, #7]
 8015ff4:	f10d 0307 	add.w	r3, sp, #7
 8015ff8:	f002 ffce 	bl	8018f98 <rmw_take_request>
 8015ffc:	4605      	mov	r5, r0
 8015ffe:	b198      	cbz	r0, 8016028 <rcl_take_request+0x6c>
 8016000:	280a      	cmp	r0, #10
 8016002:	bf18      	it	ne
 8016004:	2501      	movne	r5, #1
 8016006:	f10d 0e18 	add.w	lr, sp, #24
 801600a:	46a4      	mov	ip, r4
 801600c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016014:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016018:	e88c 0003 	stmia.w	ip, {r0, r1}
 801601c:	4628      	mov	r0, r5
 801601e:	b00c      	add	sp, #48	@ 0x30
 8016020:	bd70      	pop	{r4, r5, r6, pc}
 8016022:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8016026:	e7ee      	b.n	8016006 <rcl_take_request+0x4a>
 8016028:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801602c:	f240 2359 	movw	r3, #601	@ 0x259
 8016030:	2a00      	cmp	r2, #0
 8016032:	bf08      	it	eq
 8016034:	461d      	moveq	r5, r3
 8016036:	e7e6      	b.n	8016006 <rcl_take_request+0x4a>
 8016038:	250b      	movs	r5, #11
 801603a:	e7e4      	b.n	8016006 <rcl_take_request+0x4a>

0801603c <rcl_send_response>:
 801603c:	b170      	cbz	r0, 801605c <rcl_send_response+0x20>
 801603e:	6800      	ldr	r0, [r0, #0]
 8016040:	b160      	cbz	r0, 801605c <rcl_send_response+0x20>
 8016042:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016046:	b148      	cbz	r0, 801605c <rcl_send_response+0x20>
 8016048:	b169      	cbz	r1, 8016066 <rcl_send_response+0x2a>
 801604a:	b510      	push	{r4, lr}
 801604c:	b14a      	cbz	r2, 8016062 <rcl_send_response+0x26>
 801604e:	f003 f801 	bl	8019054 <rmw_send_response>
 8016052:	b110      	cbz	r0, 801605a <rcl_send_response+0x1e>
 8016054:	2802      	cmp	r0, #2
 8016056:	bf18      	it	ne
 8016058:	2001      	movne	r0, #1
 801605a:	bd10      	pop	{r4, pc}
 801605c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016060:	4770      	bx	lr
 8016062:	200b      	movs	r0, #11
 8016064:	bd10      	pop	{r4, pc}
 8016066:	200b      	movs	r0, #11
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop

0801606c <rcl_service_is_valid>:
 801606c:	b130      	cbz	r0, 801607c <rcl_service_is_valid+0x10>
 801606e:	6800      	ldr	r0, [r0, #0]
 8016070:	b120      	cbz	r0, 801607c <rcl_service_is_valid+0x10>
 8016072:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016076:	3800      	subs	r0, #0
 8016078:	bf18      	it	ne
 801607a:	2001      	movne	r0, #1
 801607c:	4770      	bx	lr
 801607e:	bf00      	nop

08016080 <rcl_take>:
 8016080:	2800      	cmp	r0, #0
 8016082:	d049      	beq.n	8016118 <rcl_take+0x98>
 8016084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016088:	4615      	mov	r5, r2
 801608a:	6802      	ldr	r2, [r0, #0]
 801608c:	b0a4      	sub	sp, #144	@ 0x90
 801608e:	4604      	mov	r4, r0
 8016090:	2a00      	cmp	r2, #0
 8016092:	d039      	beq.n	8016108 <rcl_take+0x88>
 8016094:	461f      	mov	r7, r3
 8016096:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801609a:	b3ab      	cbz	r3, 8016108 <rcl_take+0x88>
 801609c:	460e      	mov	r6, r1
 801609e:	2900      	cmp	r1, #0
 80160a0:	d038      	beq.n	8016114 <rcl_take+0x94>
 80160a2:	2d00      	cmp	r5, #0
 80160a4:	d03c      	beq.n	8016120 <rcl_take+0xa0>
 80160a6:	a802      	add	r0, sp, #8
 80160a8:	f04f 0800 	mov.w	r8, #0
 80160ac:	f002 fc08 	bl	80188c0 <rmw_get_zero_initialized_message_info>
 80160b0:	f10d 0c08 	add.w	ip, sp, #8
 80160b4:	46ae      	mov	lr, r5
 80160b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80160be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80160c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80160ce:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80160d2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80160d6:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80160da:	462b      	mov	r3, r5
 80160dc:	6820      	ldr	r0, [r4, #0]
 80160de:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80160e2:	4631      	mov	r1, r6
 80160e4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80160e8:	9700      	str	r7, [sp, #0]
 80160ea:	f003 f857 	bl	801919c <rmw_take_with_info>
 80160ee:	4603      	mov	r3, r0
 80160f0:	b9c0      	cbnz	r0, 8016124 <rcl_take+0xa4>
 80160f2:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80160f6:	f240 1291 	movw	r2, #401	@ 0x191
 80160fa:	2900      	cmp	r1, #0
 80160fc:	bf08      	it	eq
 80160fe:	4613      	moveq	r3, r2
 8016100:	4618      	mov	r0, r3
 8016102:	b024      	add	sp, #144	@ 0x90
 8016104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016108:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801610c:	4618      	mov	r0, r3
 801610e:	b024      	add	sp, #144	@ 0x90
 8016110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016114:	230b      	movs	r3, #11
 8016116:	e7f3      	b.n	8016100 <rcl_take+0x80>
 8016118:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801611c:	4618      	mov	r0, r3
 801611e:	4770      	bx	lr
 8016120:	ad14      	add	r5, sp, #80	@ 0x50
 8016122:	e7c0      	b.n	80160a6 <rcl_take+0x26>
 8016124:	f7ff fa1a 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 8016128:	4603      	mov	r3, r0
 801612a:	e7e9      	b.n	8016100 <rcl_take+0x80>

0801612c <rcl_subscription_get_rmw_handle>:
 801612c:	b118      	cbz	r0, 8016136 <rcl_subscription_get_rmw_handle+0xa>
 801612e:	6800      	ldr	r0, [r0, #0]
 8016130:	b108      	cbz	r0, 8016136 <rcl_subscription_get_rmw_handle+0xa>
 8016132:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016136:	4770      	bx	lr

08016138 <rcl_subscription_is_valid>:
 8016138:	b130      	cbz	r0, 8016148 <rcl_subscription_is_valid+0x10>
 801613a:	6800      	ldr	r0, [r0, #0]
 801613c:	b120      	cbz	r0, 8016148 <rcl_subscription_is_valid+0x10>
 801613e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016142:	3800      	subs	r0, #0
 8016144:	bf18      	it	ne
 8016146:	2001      	movne	r0, #1
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop

0801614c <rcl_get_system_time>:
 801614c:	4608      	mov	r0, r1
 801614e:	f7f8 bf8f 	b.w	800f070 <rcutils_system_time_now>
 8016152:	bf00      	nop

08016154 <rcl_get_steady_time>:
 8016154:	4608      	mov	r0, r1
 8016156:	f7f8 bfb1 	b.w	800f0bc <rcutils_steady_time_now>
 801615a:	bf00      	nop

0801615c <rcl_get_ros_time>:
 801615c:	7a03      	ldrb	r3, [r0, #8]
 801615e:	b510      	push	{r4, lr}
 8016160:	460c      	mov	r4, r1
 8016162:	b143      	cbz	r3, 8016176 <rcl_get_ros_time+0x1a>
 8016164:	2105      	movs	r1, #5
 8016166:	f001 ff9b 	bl	80180a0 <__atomic_load_8>
 801616a:	4602      	mov	r2, r0
 801616c:	460b      	mov	r3, r1
 801616e:	2000      	movs	r0, #0
 8016170:	e9c4 2300 	strd	r2, r3, [r4]
 8016174:	bd10      	pop	{r4, pc}
 8016176:	4608      	mov	r0, r1
 8016178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801617c:	f7f8 bf78 	b.w	800f070 <rcutils_system_time_now>

08016180 <rcl_clock_init>:
 8016180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016182:	4605      	mov	r5, r0
 8016184:	4610      	mov	r0, r2
 8016186:	4614      	mov	r4, r2
 8016188:	460e      	mov	r6, r1
 801618a:	f7f8 ff31 	bl	800eff0 <rcutils_allocator_is_valid>
 801618e:	b128      	cbz	r0, 801619c <rcl_clock_init+0x1c>
 8016190:	2d03      	cmp	r5, #3
 8016192:	d803      	bhi.n	801619c <rcl_clock_init+0x1c>
 8016194:	e8df f005 	tbb	[pc, r5]
 8016198:	0659301f 	.word	0x0659301f
 801619c:	f04f 0c0b 	mov.w	ip, #11
 80161a0:	4660      	mov	r0, ip
 80161a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161a4:	2c00      	cmp	r4, #0
 80161a6:	d0f9      	beq.n	801619c <rcl_clock_init+0x1c>
 80161a8:	fab6 f386 	clz	r3, r6
 80161ac:	095b      	lsrs	r3, r3, #5
 80161ae:	2e00      	cmp	r6, #0
 80161b0:	d0f4      	beq.n	801619c <rcl_clock_init+0x1c>
 80161b2:	6133      	str	r3, [r6, #16]
 80161b4:	469c      	mov	ip, r3
 80161b6:	f106 0514 	add.w	r5, r6, #20
 80161ba:	4f32      	ldr	r7, [pc, #200]	@ (8016284 <rcl_clock_init+0x104>)
 80161bc:	f04f 0e03 	mov.w	lr, #3
 80161c0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80161c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161c8:	6823      	ldr	r3, [r4, #0]
 80161ca:	4660      	mov	r0, ip
 80161cc:	602b      	str	r3, [r5, #0]
 80161ce:	60f7      	str	r7, [r6, #12]
 80161d0:	f886 e000 	strb.w	lr, [r6]
 80161d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161d6:	2e00      	cmp	r6, #0
 80161d8:	d0e0      	beq.n	801619c <rcl_clock_init+0x1c>
 80161da:	2300      	movs	r3, #0
 80161dc:	f106 0514 	add.w	r5, r6, #20
 80161e0:	7033      	strb	r3, [r6, #0]
 80161e2:	469c      	mov	ip, r3
 80161e4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80161e8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80161ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80161f0:	6823      	ldr	r3, [r4, #0]
 80161f2:	4660      	mov	r0, ip
 80161f4:	602b      	str	r3, [r5, #0]
 80161f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161f8:	2c00      	cmp	r4, #0
 80161fa:	d0cf      	beq.n	801619c <rcl_clock_init+0x1c>
 80161fc:	fab6 f586 	clz	r5, r6
 8016200:	096d      	lsrs	r5, r5, #5
 8016202:	2e00      	cmp	r6, #0
 8016204:	d0ca      	beq.n	801619c <rcl_clock_init+0x1c>
 8016206:	46a6      	mov	lr, r4
 8016208:	7035      	strb	r5, [r6, #0]
 801620a:	f106 0c14 	add.w	ip, r6, #20
 801620e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016212:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016216:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801621a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801621e:	f8de 3000 	ldr.w	r3, [lr]
 8016222:	2010      	movs	r0, #16
 8016224:	f8cc 3000 	str.w	r3, [ip]
 8016228:	6823      	ldr	r3, [r4, #0]
 801622a:	6921      	ldr	r1, [r4, #16]
 801622c:	4798      	blx	r3
 801622e:	6130      	str	r0, [r6, #16]
 8016230:	b320      	cbz	r0, 801627c <rcl_clock_init+0xfc>
 8016232:	2200      	movs	r2, #0
 8016234:	2300      	movs	r3, #0
 8016236:	46ac      	mov	ip, r5
 8016238:	7205      	strb	r5, [r0, #8]
 801623a:	e9c0 2300 	strd	r2, r3, [r0]
 801623e:	4a12      	ldr	r2, [pc, #72]	@ (8016288 <rcl_clock_init+0x108>)
 8016240:	2301      	movs	r3, #1
 8016242:	4660      	mov	r0, ip
 8016244:	60f2      	str	r2, [r6, #12]
 8016246:	7033      	strb	r3, [r6, #0]
 8016248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801624a:	2c00      	cmp	r4, #0
 801624c:	d0a6      	beq.n	801619c <rcl_clock_init+0x1c>
 801624e:	fab6 f386 	clz	r3, r6
 8016252:	095b      	lsrs	r3, r3, #5
 8016254:	2e00      	cmp	r6, #0
 8016256:	d0a1      	beq.n	801619c <rcl_clock_init+0x1c>
 8016258:	6133      	str	r3, [r6, #16]
 801625a:	469c      	mov	ip, r3
 801625c:	f106 0514 	add.w	r5, r6, #20
 8016260:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801628c <rcl_clock_init+0x10c>
 8016264:	2702      	movs	r7, #2
 8016266:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801626a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801626c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	4660      	mov	r0, ip
 8016272:	602b      	str	r3, [r5, #0]
 8016274:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016278:	7037      	strb	r7, [r6, #0]
 801627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801627c:	f04f 0c0a 	mov.w	ip, #10
 8016280:	e78e      	b.n	80161a0 <rcl_clock_init+0x20>
 8016282:	bf00      	nop
 8016284:	08016155 	.word	0x08016155
 8016288:	0801615d 	.word	0x0801615d
 801628c:	0801614d 	.word	0x0801614d

08016290 <rcl_clock_get_now>:
 8016290:	b140      	cbz	r0, 80162a4 <rcl_clock_get_now+0x14>
 8016292:	b139      	cbz	r1, 80162a4 <rcl_clock_get_now+0x14>
 8016294:	7803      	ldrb	r3, [r0, #0]
 8016296:	b11b      	cbz	r3, 80162a0 <rcl_clock_get_now+0x10>
 8016298:	68c3      	ldr	r3, [r0, #12]
 801629a:	b10b      	cbz	r3, 80162a0 <rcl_clock_get_now+0x10>
 801629c:	6900      	ldr	r0, [r0, #16]
 801629e:	4718      	bx	r3
 80162a0:	2001      	movs	r0, #1
 80162a2:	4770      	bx	lr
 80162a4:	200b      	movs	r0, #11
 80162a6:	4770      	bx	lr

080162a8 <rcl_clock_add_jump_callback>:
 80162a8:	b082      	sub	sp, #8
 80162aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ae:	a906      	add	r1, sp, #24
 80162b0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 80162b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80162b8:	b330      	cbz	r0, 8016308 <rcl_clock_add_jump_callback+0x60>
 80162ba:	4604      	mov	r4, r0
 80162bc:	3014      	adds	r0, #20
 80162be:	f7f8 fe97 	bl	800eff0 <rcutils_allocator_is_valid>
 80162c2:	b30d      	cbz	r5, 8016308 <rcl_clock_add_jump_callback+0x60>
 80162c4:	f080 0301 	eor.w	r3, r0, #1
 80162c8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80162cc:	d11c      	bne.n	8016308 <rcl_clock_add_jump_callback+0x60>
 80162ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	db19      	blt.n	8016308 <rcl_clock_add_jump_callback+0x60>
 80162d4:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 80162d8:	2901      	cmp	r1, #1
 80162da:	f172 0200 	sbcs.w	r2, r2, #0
 80162de:	da13      	bge.n	8016308 <rcl_clock_add_jump_callback+0x60>
 80162e0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80162e4:	2f00      	cmp	r7, #0
 80162e6:	d040      	beq.n	801636a <rcl_clock_add_jump_callback+0xc2>
 80162e8:	4602      	mov	r2, r0
 80162ea:	e003      	b.n	80162f4 <rcl_clock_add_jump_callback+0x4c>
 80162ec:	42bb      	cmp	r3, r7
 80162ee:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80162f2:	d010      	beq.n	8016316 <rcl_clock_add_jump_callback+0x6e>
 80162f4:	6811      	ldr	r1, [r2, #0]
 80162f6:	3301      	adds	r3, #1
 80162f8:	42a9      	cmp	r1, r5
 80162fa:	d1f7      	bne.n	80162ec <rcl_clock_add_jump_callback+0x44>
 80162fc:	6a11      	ldr	r1, [r2, #32]
 80162fe:	42b1      	cmp	r1, r6
 8016300:	d1f4      	bne.n	80162ec <rcl_clock_add_jump_callback+0x44>
 8016302:	f04f 0e01 	mov.w	lr, #1
 8016306:	e001      	b.n	801630c <rcl_clock_add_jump_callback+0x64>
 8016308:	f04f 0e0b 	mov.w	lr, #11
 801630c:	4670      	mov	r0, lr
 801630e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016312:	b002      	add	sp, #8
 8016314:	4770      	bx	lr
 8016316:	3301      	adds	r3, #1
 8016318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801631c:	00d9      	lsls	r1, r3, #3
 801631e:	69e3      	ldr	r3, [r4, #28]
 8016320:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016322:	4798      	blx	r3
 8016324:	b1f0      	cbz	r0, 8016364 <rcl_clock_add_jump_callback+0xbc>
 8016326:	68a3      	ldr	r3, [r4, #8]
 8016328:	f10d 0c18 	add.w	ip, sp, #24
 801632c:	6060      	str	r0, [r4, #4]
 801632e:	f04f 0e00 	mov.w	lr, #0
 8016332:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016336:	f103 0801 	add.w	r8, r3, #1
 801633a:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801633e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016346:	f105 0708 	add.w	r7, r5, #8
 801634a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801634c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016350:	e887 0003 	stmia.w	r7, {r0, r1}
 8016354:	4670      	mov	r0, lr
 8016356:	622e      	str	r6, [r5, #32]
 8016358:	f8c4 8008 	str.w	r8, [r4, #8]
 801635c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016360:	b002      	add	sp, #8
 8016362:	4770      	bx	lr
 8016364:	f04f 0e0a 	mov.w	lr, #10
 8016368:	e7d0      	b.n	801630c <rcl_clock_add_jump_callback+0x64>
 801636a:	2128      	movs	r1, #40	@ 0x28
 801636c:	e7d7      	b.n	801631e <rcl_clock_add_jump_callback+0x76>
 801636e:	bf00      	nop

08016370 <rcl_clock_remove_jump_callback>:
 8016370:	2800      	cmp	r0, #0
 8016372:	d05f      	beq.n	8016434 <rcl_clock_remove_jump_callback+0xc4>
 8016374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016378:	4605      	mov	r5, r0
 801637a:	3014      	adds	r0, #20
 801637c:	460f      	mov	r7, r1
 801637e:	4692      	mov	sl, r2
 8016380:	f7f8 fe36 	bl	800eff0 <rcutils_allocator_is_valid>
 8016384:	f080 0001 	eor.w	r0, r0, #1
 8016388:	b2c0      	uxtb	r0, r0
 801638a:	2800      	cmp	r0, #0
 801638c:	d13f      	bne.n	801640e <rcl_clock_remove_jump_callback+0x9e>
 801638e:	2f00      	cmp	r7, #0
 8016390:	d03d      	beq.n	801640e <rcl_clock_remove_jump_callback+0x9e>
 8016392:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8016396:	f1b8 0f00 	cmp.w	r8, #0
 801639a:	d00c      	beq.n	80163b6 <rcl_clock_remove_jump_callback+0x46>
 801639c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80163a0:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 80163a4:	464c      	mov	r4, r9
 80163a6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80163aa:	6823      	ldr	r3, [r4, #0]
 80163ac:	42bb      	cmp	r3, r7
 80163ae:	d005      	beq.n	80163bc <rcl_clock_remove_jump_callback+0x4c>
 80163b0:	3428      	adds	r4, #40	@ 0x28
 80163b2:	42a6      	cmp	r6, r4
 80163b4:	d1f9      	bne.n	80163aa <rcl_clock_remove_jump_callback+0x3a>
 80163b6:	2001      	movs	r0, #1
 80163b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163bc:	6a23      	ldr	r3, [r4, #32]
 80163be:	3428      	adds	r4, #40	@ 0x28
 80163c0:	42a6      	cmp	r6, r4
 80163c2:	d02f      	beq.n	8016424 <rcl_clock_remove_jump_callback+0xb4>
 80163c4:	4553      	cmp	r3, sl
 80163c6:	d1f0      	bne.n	80163aa <rcl_clock_remove_jump_callback+0x3a>
 80163c8:	46a6      	mov	lr, r4
 80163ca:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80163ce:	3428      	adds	r4, #40	@ 0x28
 80163d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163dc:	42a6      	cmp	r6, r4
 80163de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163e2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80163e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80163ea:	d1ed      	bne.n	80163c8 <rcl_clock_remove_jump_callback+0x58>
 80163ec:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80163f0:	60ac      	str	r4, [r5, #8]
 80163f2:	b17c      	cbz	r4, 8016414 <rcl_clock_remove_jump_callback+0xa4>
 80163f4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80163f8:	69eb      	ldr	r3, [r5, #28]
 80163fa:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80163fc:	4648      	mov	r0, r9
 80163fe:	00e1      	lsls	r1, r4, #3
 8016400:	4798      	blx	r3
 8016402:	4603      	mov	r3, r0
 8016404:	b1c0      	cbz	r0, 8016438 <rcl_clock_remove_jump_callback+0xc8>
 8016406:	2000      	movs	r0, #0
 8016408:	606b      	str	r3, [r5, #4]
 801640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801640e:	200b      	movs	r0, #11
 8016410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016414:	4648      	mov	r0, r9
 8016416:	69ab      	ldr	r3, [r5, #24]
 8016418:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801641a:	4798      	blx	r3
 801641c:	4620      	mov	r0, r4
 801641e:	606c      	str	r4, [r5, #4]
 8016420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016424:	4553      	cmp	r3, sl
 8016426:	d1c6      	bne.n	80163b6 <rcl_clock_remove_jump_callback+0x46>
 8016428:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801642c:	60ac      	str	r4, [r5, #8]
 801642e:	2c00      	cmp	r4, #0
 8016430:	d1e0      	bne.n	80163f4 <rcl_clock_remove_jump_callback+0x84>
 8016432:	e7ef      	b.n	8016414 <rcl_clock_remove_jump_callback+0xa4>
 8016434:	200b      	movs	r0, #11
 8016436:	4770      	bx	lr
 8016438:	200a      	movs	r0, #10
 801643a:	e7e9      	b.n	8016410 <rcl_clock_remove_jump_callback+0xa0>

0801643c <_rcl_timer_time_jump>:
 801643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016440:	4605      	mov	r5, r0
 8016442:	b084      	sub	sp, #16
 8016444:	4614      	mov	r4, r2
 8016446:	b131      	cbz	r1, 8016456 <_rcl_timer_time_jump+0x1a>
 8016448:	7803      	ldrb	r3, [r0, #0]
 801644a:	3b02      	subs	r3, #2
 801644c:	2b01      	cmp	r3, #1
 801644e:	d93f      	bls.n	80164d0 <_rcl_timer_time_jump+0x94>
 8016450:	b004      	add	sp, #16
 8016452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016456:	6813      	ldr	r3, [r2, #0]
 8016458:	a902      	add	r1, sp, #8
 801645a:	6818      	ldr	r0, [r3, #0]
 801645c:	f7ff ff18 	bl	8016290 <rcl_clock_get_now>
 8016460:	2800      	cmp	r0, #0
 8016462:	d1f5      	bne.n	8016450 <_rcl_timer_time_jump+0x14>
 8016464:	6820      	ldr	r0, [r4, #0]
 8016466:	2105      	movs	r1, #5
 8016468:	3020      	adds	r0, #32
 801646a:	f001 fe19 	bl	80180a0 <__atomic_load_8>
 801646e:	6823      	ldr	r3, [r4, #0]
 8016470:	4681      	mov	r9, r0
 8016472:	4688      	mov	r8, r1
 8016474:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8016478:	2105      	movs	r1, #5
 801647a:	f001 fe11 	bl	80180a0 <__atomic_load_8>
 801647e:	4607      	mov	r7, r0
 8016480:	6820      	ldr	r0, [r4, #0]
 8016482:	460e      	mov	r6, r1
 8016484:	2105      	movs	r1, #5
 8016486:	3018      	adds	r0, #24
 8016488:	f001 fe0a 	bl	80180a0 <__atomic_load_8>
 801648c:	782b      	ldrb	r3, [r5, #0]
 801648e:	4682      	mov	sl, r0
 8016490:	460d      	mov	r5, r1
 8016492:	3b02      	subs	r3, #2
 8016494:	9a02      	ldr	r2, [sp, #8]
 8016496:	2b01      	cmp	r3, #1
 8016498:	9b03      	ldr	r3, [sp, #12]
 801649a:	d937      	bls.n	801650c <_rcl_timer_time_jump+0xd0>
 801649c:	42ba      	cmp	r2, r7
 801649e:	eb73 0106 	sbcs.w	r1, r3, r6
 80164a2:	da60      	bge.n	8016566 <_rcl_timer_time_jump+0x12a>
 80164a4:	454a      	cmp	r2, r9
 80164a6:	eb73 0108 	sbcs.w	r1, r3, r8
 80164aa:	dad1      	bge.n	8016450 <_rcl_timer_time_jump+0x14>
 80164ac:	eb1a 0202 	adds.w	r2, sl, r2
 80164b0:	6820      	ldr	r0, [r4, #0]
 80164b2:	eb43 0305 	adc.w	r3, r3, r5
 80164b6:	2505      	movs	r5, #5
 80164b8:	3028      	adds	r0, #40	@ 0x28
 80164ba:	9500      	str	r5, [sp, #0]
 80164bc:	f001 fe26 	bl	801810c <__atomic_store_8>
 80164c0:	6820      	ldr	r0, [r4, #0]
 80164c2:	9500      	str	r5, [sp, #0]
 80164c4:	3020      	adds	r0, #32
 80164c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80164ca:	f001 fe1f 	bl	801810c <__atomic_store_8>
 80164ce:	e7bf      	b.n	8016450 <_rcl_timer_time_jump+0x14>
 80164d0:	6813      	ldr	r3, [r2, #0]
 80164d2:	a902      	add	r1, sp, #8
 80164d4:	6818      	ldr	r0, [r3, #0]
 80164d6:	f7ff fedb 	bl	8016290 <rcl_clock_get_now>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d1b8      	bne.n	8016450 <_rcl_timer_time_jump+0x14>
 80164de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80164e2:	4313      	orrs	r3, r2
 80164e4:	d0b4      	beq.n	8016450 <_rcl_timer_time_jump+0x14>
 80164e6:	6820      	ldr	r0, [r4, #0]
 80164e8:	2105      	movs	r1, #5
 80164ea:	3028      	adds	r0, #40	@ 0x28
 80164ec:	f001 fdd8 	bl	80180a0 <__atomic_load_8>
 80164f0:	9d02      	ldr	r5, [sp, #8]
 80164f2:	4602      	mov	r2, r0
 80164f4:	9b03      	ldr	r3, [sp, #12]
 80164f6:	6820      	ldr	r0, [r4, #0]
 80164f8:	1b52      	subs	r2, r2, r5
 80164fa:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 80164fe:	eb61 0303 	sbc.w	r3, r1, r3
 8016502:	2105      	movs	r1, #5
 8016504:	9100      	str	r1, [sp, #0]
 8016506:	f001 fe01 	bl	801810c <__atomic_store_8>
 801650a:	e7a1      	b.n	8016450 <_rcl_timer_time_jump+0x14>
 801650c:	4313      	orrs	r3, r2
 801650e:	d09f      	beq.n	8016450 <_rcl_timer_time_jump+0x14>
 8016510:	6820      	ldr	r0, [r4, #0]
 8016512:	f04f 0805 	mov.w	r8, #5
 8016516:	2300      	movs	r3, #0
 8016518:	2200      	movs	r2, #0
 801651a:	3030      	adds	r0, #48	@ 0x30
 801651c:	f8cd 8000 	str.w	r8, [sp]
 8016520:	f001 fe2a 	bl	8018178 <__atomic_exchange_8>
 8016524:	ea51 0300 	orrs.w	r3, r1, r0
 8016528:	4606      	mov	r6, r0
 801652a:	460f      	mov	r7, r1
 801652c:	d090      	beq.n	8016450 <_rcl_timer_time_jump+0x14>
 801652e:	9a02      	ldr	r2, [sp, #8]
 8016530:	9b03      	ldr	r3, [sp, #12]
 8016532:	1a12      	subs	r2, r2, r0
 8016534:	f8cd 8000 	str.w	r8, [sp]
 8016538:	6820      	ldr	r0, [r4, #0]
 801653a:	eb63 0301 	sbc.w	r3, r3, r1
 801653e:	eb12 020a 	adds.w	r2, r2, sl
 8016542:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8016546:	eb43 0305 	adc.w	r3, r3, r5
 801654a:	f001 fddf 	bl	801810c <__atomic_store_8>
 801654e:	f8cd 8000 	str.w	r8, [sp]
 8016552:	6820      	ldr	r0, [r4, #0]
 8016554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016558:	3020      	adds	r0, #32
 801655a:	1b92      	subs	r2, r2, r6
 801655c:	eb63 0307 	sbc.w	r3, r3, r7
 8016560:	f001 fdd4 	bl	801810c <__atomic_store_8>
 8016564:	e774      	b.n	8016450 <_rcl_timer_time_jump+0x14>
 8016566:	6820      	ldr	r0, [r4, #0]
 8016568:	3008      	adds	r0, #8
 801656a:	f004 fba9 	bl	801acc0 <rcl_trigger_guard_condition>
 801656e:	e76f      	b.n	8016450 <_rcl_timer_time_jump+0x14>

08016570 <rcl_get_zero_initialized_timer>:
 8016570:	4b01      	ldr	r3, [pc, #4]	@ (8016578 <rcl_get_zero_initialized_timer+0x8>)
 8016572:	6818      	ldr	r0, [r3, #0]
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop
 8016578:	0801ce94 	.word	0x0801ce94
 801657c:	00000000 	.word	0x00000000

08016580 <rcl_timer_init>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	b0ab      	sub	sp, #172	@ 0xac
 8016586:	460d      	mov	r5, r1
 8016588:	4604      	mov	r4, r0
 801658a:	4692      	mov	sl, r2
 801658c:	a837      	add	r0, sp, #220	@ 0xdc
 801658e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8016590:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8016594:	f7f8 fd2c 	bl	800eff0 <rcutils_allocator_is_valid>
 8016598:	fab5 f385 	clz	r3, r5
 801659c:	095b      	lsrs	r3, r3, #5
 801659e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 80165a2:	2c00      	cmp	r4, #0
 80165a4:	bf08      	it	eq
 80165a6:	f043 0301 	orreq.w	r3, r3, #1
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d164      	bne.n	8016678 <rcl_timer_init+0xf8>
 80165ae:	f080 0001 	eor.w	r0, r0, #1
 80165b2:	b2c0      	uxtb	r0, r0
 80165b4:	2800      	cmp	r0, #0
 80165b6:	d15f      	bne.n	8016678 <rcl_timer_init+0xf8>
 80165b8:	6823      	ldr	r3, [r4, #0]
 80165ba:	b123      	cbz	r3, 80165c6 <rcl_timer_init+0x46>
 80165bc:	2664      	movs	r6, #100	@ 0x64
 80165be:	4630      	mov	r0, r6
 80165c0:	b02b      	add	sp, #172	@ 0xac
 80165c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c6:	a908      	add	r1, sp, #32
 80165c8:	4628      	mov	r0, r5
 80165ca:	f7ff fe61 	bl	8016290 <rcl_clock_get_now>
 80165ce:	4606      	mov	r6, r0
 80165d0:	2800      	cmp	r0, #0
 80165d2:	d1f4      	bne.n	80165be <rcl_timer_init+0x3e>
 80165d4:	f10d 0b18 	add.w	fp, sp, #24
 80165d8:	ae0b      	add	r6, sp, #44	@ 0x2c
 80165da:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80165de:	4658      	mov	r0, fp
 80165e0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80165e4:	f004 fa76 	bl	801aad4 <rcl_get_zero_initialized_guard_condition>
 80165e8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80165ec:	e889 0003 	stmia.w	r9, {r0, r1}
 80165f0:	4630      	mov	r0, r6
 80165f2:	f004 fb49 	bl	801ac88 <rcl_guard_condition_get_default_options>
 80165f6:	ab0d      	add	r3, sp, #52	@ 0x34
 80165f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016600:	4651      	mov	r1, sl
 8016602:	4648      	mov	r0, r9
 8016604:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016608:	f004 fa6e 	bl	801aae8 <rcl_guard_condition_init>
 801660c:	4606      	mov	r6, r0
 801660e:	2800      	cmp	r0, #0
 8016610:	d1d5      	bne.n	80165be <rcl_timer_init+0x3e>
 8016612:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	2b01      	cmp	r3, #1
 8016618:	d033      	beq.n	8016682 <rcl_timer_init+0x102>
 801661a:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801661c:	4642      	mov	r2, r8
 801661e:	463b      	mov	r3, r7
 8016620:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 8016624:	911a      	str	r1, [sp, #104]	@ 0x68
 8016626:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801662a:	f04f 0a00 	mov.w	sl, #0
 801662e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8016632:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016636:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80166e0 <rcl_timer_init+0x160>
 801663a:	eb12 0008 	adds.w	r0, r2, r8
 801663e:	eb47 0103 	adc.w	r1, r7, r3
 8016642:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016646:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801664a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801664e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016656:	f8de 3000 	ldr.w	r3, [lr]
 801665a:	2050      	movs	r0, #80	@ 0x50
 801665c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016660:	4619      	mov	r1, r3
 8016662:	f8cc 3000 	str.w	r3, [ip]
 8016666:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8016668:	4798      	blx	r3
 801666a:	6020      	str	r0, [r4, #0]
 801666c:	b358      	cbz	r0, 80166c6 <rcl_timer_init+0x146>
 801666e:	2250      	movs	r2, #80	@ 0x50
 8016670:	a916      	add	r1, sp, #88	@ 0x58
 8016672:	f005 fa4a 	bl	801bb0a <memcpy>
 8016676:	e7a2      	b.n	80165be <rcl_timer_init+0x3e>
 8016678:	260b      	movs	r6, #11
 801667a:	4630      	mov	r0, r6
 801667c:	b02b      	add	sp, #172	@ 0xac
 801667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016682:	2001      	movs	r0, #1
 8016684:	2100      	movs	r1, #0
 8016686:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801668a:	ab12      	add	r3, sp, #72	@ 0x48
 801668c:	4a16      	ldr	r2, [pc, #88]	@ (80166e8 <rcl_timer_init+0x168>)
 801668e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016692:	9405      	str	r4, [sp, #20]
 8016694:	9204      	str	r2, [sp, #16]
 8016696:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801669a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801669e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80166a2:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80166a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80166a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80166ac:	4628      	mov	r0, r5
 80166ae:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80166b2:	f7ff fdf9 	bl	80162a8 <rcl_clock_add_jump_callback>
 80166b6:	4603      	mov	r3, r0
 80166b8:	2800      	cmp	r0, #0
 80166ba:	d0ae      	beq.n	801661a <rcl_timer_init+0x9a>
 80166bc:	4648      	mov	r0, r9
 80166be:	461e      	mov	r6, r3
 80166c0:	f004 fabc 	bl	801ac3c <rcl_guard_condition_fini>
 80166c4:	e77b      	b.n	80165be <rcl_timer_init+0x3e>
 80166c6:	4648      	mov	r0, r9
 80166c8:	260a      	movs	r6, #10
 80166ca:	f004 fab7 	bl	801ac3c <rcl_guard_condition_fini>
 80166ce:	4622      	mov	r2, r4
 80166d0:	4905      	ldr	r1, [pc, #20]	@ (80166e8 <rcl_timer_init+0x168>)
 80166d2:	4628      	mov	r0, r5
 80166d4:	f7ff fe4c 	bl	8016370 <rcl_clock_remove_jump_callback>
 80166d8:	e771      	b.n	80165be <rcl_timer_init+0x3e>
 80166da:	bf00      	nop
 80166dc:	f3af 8000 	nop.w
	...
 80166e8:	0801643d 	.word	0x0801643d

080166ec <rcl_timer_call>:
 80166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f0:	b087      	sub	sp, #28
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d06c      	beq.n	80167d0 <rcl_timer_call+0xe4>
 80166f6:	6803      	ldr	r3, [r0, #0]
 80166f8:	4604      	mov	r4, r0
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d062      	beq.n	80167c4 <rcl_timer_call+0xd8>
 80166fe:	f3bf 8f5b 	dmb	ish
 8016702:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016706:	f3bf 8f5b 	dmb	ish
 801670a:	2b00      	cmp	r3, #0
 801670c:	d14f      	bne.n	80167ae <rcl_timer_call+0xc2>
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	a904      	add	r1, sp, #16
 8016712:	6818      	ldr	r0, [r3, #0]
 8016714:	f7ff fdbc 	bl	8016290 <rcl_clock_get_now>
 8016718:	4605      	mov	r5, r0
 801671a:	2800      	cmp	r0, #0
 801671c:	d149      	bne.n	80167b2 <rcl_timer_call+0xc6>
 801671e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016722:	2b00      	cmp	r3, #0
 8016724:	db49      	blt.n	80167ba <rcl_timer_call+0xce>
 8016726:	2605      	movs	r6, #5
 8016728:	6820      	ldr	r0, [r4, #0]
 801672a:	9600      	str	r6, [sp, #0]
 801672c:	3020      	adds	r0, #32
 801672e:	f001 fd23 	bl	8018178 <__atomic_exchange_8>
 8016732:	6823      	ldr	r3, [r4, #0]
 8016734:	4680      	mov	r8, r0
 8016736:	f3bf 8f5b 	dmb	ish
 801673a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801673e:	f3bf 8f5b 	dmb	ish
 8016742:	6820      	ldr	r0, [r4, #0]
 8016744:	4689      	mov	r9, r1
 8016746:	4631      	mov	r1, r6
 8016748:	3028      	adds	r0, #40	@ 0x28
 801674a:	f001 fca9 	bl	80180a0 <__atomic_load_8>
 801674e:	460f      	mov	r7, r1
 8016750:	4631      	mov	r1, r6
 8016752:	4606      	mov	r6, r0
 8016754:	6820      	ldr	r0, [r4, #0]
 8016756:	3018      	adds	r0, #24
 8016758:	f001 fca2 	bl	80180a0 <__atomic_load_8>
 801675c:	4602      	mov	r2, r0
 801675e:	9804      	ldr	r0, [sp, #16]
 8016760:	460b      	mov	r3, r1
 8016762:	18b6      	adds	r6, r6, r2
 8016764:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016768:	4692      	mov	sl, r2
 801676a:	eb47 0701 	adc.w	r7, r7, r1
 801676e:	4286      	cmp	r6, r0
 8016770:	eb77 010c 	sbcs.w	r1, r7, ip
 8016774:	da04      	bge.n	8016780 <rcl_timer_call+0x94>
 8016776:	ea53 0102 	orrs.w	r1, r3, r2
 801677a:	d12e      	bne.n	80167da <rcl_timer_call+0xee>
 801677c:	4606      	mov	r6, r0
 801677e:	4667      	mov	r7, ip
 8016780:	6820      	ldr	r0, [r4, #0]
 8016782:	2105      	movs	r1, #5
 8016784:	4632      	mov	r2, r6
 8016786:	463b      	mov	r3, r7
 8016788:	3028      	adds	r0, #40	@ 0x28
 801678a:	9100      	str	r1, [sp, #0]
 801678c:	f001 fcbe 	bl	801810c <__atomic_store_8>
 8016790:	f1bb 0f00 	cmp.w	fp, #0
 8016794:	d00d      	beq.n	80167b2 <rcl_timer_call+0xc6>
 8016796:	9a04      	ldr	r2, [sp, #16]
 8016798:	4620      	mov	r0, r4
 801679a:	9b05      	ldr	r3, [sp, #20]
 801679c:	ebb2 0208 	subs.w	r2, r2, r8
 80167a0:	eb63 0309 	sbc.w	r3, r3, r9
 80167a4:	47d8      	blx	fp
 80167a6:	4628      	mov	r0, r5
 80167a8:	b007      	add	sp, #28
 80167aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ae:	f240 3521 	movw	r5, #801	@ 0x321
 80167b2:	4628      	mov	r0, r5
 80167b4:	b007      	add	sp, #28
 80167b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ba:	2501      	movs	r5, #1
 80167bc:	4628      	mov	r0, r5
 80167be:	b007      	add	sp, #28
 80167c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80167c8:	4628      	mov	r0, r5
 80167ca:	b007      	add	sp, #28
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d0:	250b      	movs	r5, #11
 80167d2:	4628      	mov	r0, r5
 80167d4:	b007      	add	sp, #28
 80167d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167da:	1b80      	subs	r0, r0, r6
 80167dc:	eb6c 0107 	sbc.w	r1, ip, r7
 80167e0:	3801      	subs	r0, #1
 80167e2:	f161 0100 	sbc.w	r1, r1, #0
 80167e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80167ea:	f7e9 fde1 	bl	80003b0 <__aeabi_ldivmod>
 80167ee:	9b02      	ldr	r3, [sp, #8]
 80167f0:	3001      	adds	r0, #1
 80167f2:	f141 0100 	adc.w	r1, r1, #0
 80167f6:	fb00 f303 	mul.w	r3, r0, r3
 80167fa:	fb01 330a 	mla	r3, r1, sl, r3
 80167fe:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016802:	1986      	adds	r6, r0, r6
 8016804:	4453      	add	r3, sl
 8016806:	eb43 0707 	adc.w	r7, r3, r7
 801680a:	e7b9      	b.n	8016780 <rcl_timer_call+0x94>

0801680c <rcl_timer_is_ready>:
 801680c:	b570      	push	{r4, r5, r6, lr}
 801680e:	b082      	sub	sp, #8
 8016810:	b380      	cbz	r0, 8016874 <rcl_timer_is_ready+0x68>
 8016812:	6803      	ldr	r3, [r0, #0]
 8016814:	4604      	mov	r4, r0
 8016816:	b38b      	cbz	r3, 801687c <rcl_timer_is_ready+0x70>
 8016818:	460d      	mov	r5, r1
 801681a:	b359      	cbz	r1, 8016874 <rcl_timer_is_ready+0x68>
 801681c:	f3bf 8f5b 	dmb	ish
 8016820:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016824:	f3bf 8f5b 	dmb	ish
 8016828:	b953      	cbnz	r3, 8016840 <rcl_timer_is_ready+0x34>
 801682a:	6803      	ldr	r3, [r0, #0]
 801682c:	4669      	mov	r1, sp
 801682e:	6818      	ldr	r0, [r3, #0]
 8016830:	f7ff fd2e 	bl	8016290 <rcl_clock_get_now>
 8016834:	4606      	mov	r6, r0
 8016836:	b148      	cbz	r0, 801684c <rcl_timer_is_ready+0x40>
 8016838:	f240 3321 	movw	r3, #801	@ 0x321
 801683c:	4298      	cmp	r0, r3
 801683e:	d102      	bne.n	8016846 <rcl_timer_is_ready+0x3a>
 8016840:	2300      	movs	r3, #0
 8016842:	461e      	mov	r6, r3
 8016844:	702b      	strb	r3, [r5, #0]
 8016846:	4630      	mov	r0, r6
 8016848:	b002      	add	sp, #8
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	6820      	ldr	r0, [r4, #0]
 801684e:	2105      	movs	r1, #5
 8016850:	3028      	adds	r0, #40	@ 0x28
 8016852:	f001 fc25 	bl	80180a0 <__atomic_load_8>
 8016856:	9b00      	ldr	r3, [sp, #0]
 8016858:	1ac0      	subs	r0, r0, r3
 801685a:	9b01      	ldr	r3, [sp, #4]
 801685c:	eb61 0103 	sbc.w	r1, r1, r3
 8016860:	2801      	cmp	r0, #1
 8016862:	4630      	mov	r0, r6
 8016864:	f171 0300 	sbcs.w	r3, r1, #0
 8016868:	bfb4      	ite	lt
 801686a:	2301      	movlt	r3, #1
 801686c:	2300      	movge	r3, #0
 801686e:	702b      	strb	r3, [r5, #0]
 8016870:	b002      	add	sp, #8
 8016872:	bd70      	pop	{r4, r5, r6, pc}
 8016874:	260b      	movs	r6, #11
 8016876:	4630      	mov	r0, r6
 8016878:	b002      	add	sp, #8
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016880:	e7e1      	b.n	8016846 <rcl_timer_is_ready+0x3a>
 8016882:	bf00      	nop

08016884 <rcl_timer_get_time_until_next_call>:
 8016884:	b570      	push	{r4, r5, r6, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	b330      	cbz	r0, 80168d8 <rcl_timer_get_time_until_next_call+0x54>
 801688a:	6803      	ldr	r3, [r0, #0]
 801688c:	4604      	mov	r4, r0
 801688e:	b33b      	cbz	r3, 80168e0 <rcl_timer_get_time_until_next_call+0x5c>
 8016890:	460d      	mov	r5, r1
 8016892:	b309      	cbz	r1, 80168d8 <rcl_timer_get_time_until_next_call+0x54>
 8016894:	f3bf 8f5b 	dmb	ish
 8016898:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801689c:	f3bf 8f5b 	dmb	ish
 80168a0:	b9ab      	cbnz	r3, 80168ce <rcl_timer_get_time_until_next_call+0x4a>
 80168a2:	6803      	ldr	r3, [r0, #0]
 80168a4:	4669      	mov	r1, sp
 80168a6:	6818      	ldr	r0, [r3, #0]
 80168a8:	f7ff fcf2 	bl	8016290 <rcl_clock_get_now>
 80168ac:	4606      	mov	r6, r0
 80168ae:	b958      	cbnz	r0, 80168c8 <rcl_timer_get_time_until_next_call+0x44>
 80168b0:	6820      	ldr	r0, [r4, #0]
 80168b2:	2105      	movs	r1, #5
 80168b4:	3028      	adds	r0, #40	@ 0x28
 80168b6:	f001 fbf3 	bl	80180a0 <__atomic_load_8>
 80168ba:	9b00      	ldr	r3, [sp, #0]
 80168bc:	1ac0      	subs	r0, r0, r3
 80168be:	9b01      	ldr	r3, [sp, #4]
 80168c0:	eb61 0103 	sbc.w	r1, r1, r3
 80168c4:	6028      	str	r0, [r5, #0]
 80168c6:	6069      	str	r1, [r5, #4]
 80168c8:	4630      	mov	r0, r6
 80168ca:	b002      	add	sp, #8
 80168cc:	bd70      	pop	{r4, r5, r6, pc}
 80168ce:	f240 3621 	movw	r6, #801	@ 0x321
 80168d2:	4630      	mov	r0, r6
 80168d4:	b002      	add	sp, #8
 80168d6:	bd70      	pop	{r4, r5, r6, pc}
 80168d8:	260b      	movs	r6, #11
 80168da:	4630      	mov	r0, r6
 80168dc:	b002      	add	sp, #8
 80168de:	bd70      	pop	{r4, r5, r6, pc}
 80168e0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80168e4:	e7f0      	b.n	80168c8 <rcl_timer_get_time_until_next_call+0x44>
 80168e6:	bf00      	nop

080168e8 <rcl_timer_get_guard_condition>:
 80168e8:	b130      	cbz	r0, 80168f8 <rcl_timer_get_guard_condition+0x10>
 80168ea:	6800      	ldr	r0, [r0, #0]
 80168ec:	b120      	cbz	r0, 80168f8 <rcl_timer_get_guard_condition+0x10>
 80168ee:	68c3      	ldr	r3, [r0, #12]
 80168f0:	b10b      	cbz	r3, 80168f6 <rcl_timer_get_guard_condition+0xe>
 80168f2:	3008      	adds	r0, #8
 80168f4:	4770      	bx	lr
 80168f6:	4618      	mov	r0, r3
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop

080168fc <rcl_validate_enclave_name_with_size>:
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d049      	beq.n	8016994 <rcl_validate_enclave_name_with_size+0x98>
 8016900:	b570      	push	{r4, r5, r6, lr}
 8016902:	4615      	mov	r5, r2
 8016904:	b0c2      	sub	sp, #264	@ 0x108
 8016906:	b19a      	cbz	r2, 8016930 <rcl_validate_enclave_name_with_size+0x34>
 8016908:	461e      	mov	r6, r3
 801690a:	466a      	mov	r2, sp
 801690c:	ab01      	add	r3, sp, #4
 801690e:	460c      	mov	r4, r1
 8016910:	f002 f85a 	bl	80189c8 <rmw_validate_namespace_with_size>
 8016914:	4684      	mov	ip, r0
 8016916:	b9b8      	cbnz	r0, 8016948 <rcl_validate_enclave_name_with_size+0x4c>
 8016918:	9900      	ldr	r1, [sp, #0]
 801691a:	b171      	cbz	r1, 801693a <rcl_validate_enclave_name_with_size+0x3e>
 801691c:	2907      	cmp	r1, #7
 801691e:	d019      	beq.n	8016954 <rcl_validate_enclave_name_with_size+0x58>
 8016920:	1e4b      	subs	r3, r1, #1
 8016922:	2b05      	cmp	r3, #5
 8016924:	d83a      	bhi.n	801699c <rcl_validate_enclave_name_with_size+0xa0>
 8016926:	e8df f003 	tbb	[pc, r3]
 801692a:	2926      	.short	0x2926
 801692c:	1d322f2c 	.word	0x1d322f2c
 8016930:	f04f 0c0b 	mov.w	ip, #11
 8016934:	4660      	mov	r0, ip
 8016936:	b042      	add	sp, #264	@ 0x108
 8016938:	bd70      	pop	{r4, r5, r6, pc}
 801693a:	2907      	cmp	r1, #7
 801693c:	d00a      	beq.n	8016954 <rcl_validate_enclave_name_with_size+0x58>
 801693e:	2300      	movs	r3, #0
 8016940:	4660      	mov	r0, ip
 8016942:	602b      	str	r3, [r5, #0]
 8016944:	b042      	add	sp, #264	@ 0x108
 8016946:	bd70      	pop	{r4, r5, r6, pc}
 8016948:	f7fe fe08 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 801694c:	4684      	mov	ip, r0
 801694e:	4660      	mov	r0, ip
 8016950:	b042      	add	sp, #264	@ 0x108
 8016952:	bd70      	pop	{r4, r5, r6, pc}
 8016954:	2cff      	cmp	r4, #255	@ 0xff
 8016956:	d9f2      	bls.n	801693e <rcl_validate_enclave_name_with_size+0x42>
 8016958:	6029      	str	r1, [r5, #0]
 801695a:	2e00      	cmp	r6, #0
 801695c:	d0ea      	beq.n	8016934 <rcl_validate_enclave_name_with_size+0x38>
 801695e:	23fe      	movs	r3, #254	@ 0xfe
 8016960:	6033      	str	r3, [r6, #0]
 8016962:	e7e7      	b.n	8016934 <rcl_validate_enclave_name_with_size+0x38>
 8016964:	2306      	movs	r3, #6
 8016966:	602b      	str	r3, [r5, #0]
 8016968:	2e00      	cmp	r6, #0
 801696a:	d0e3      	beq.n	8016934 <rcl_validate_enclave_name_with_size+0x38>
 801696c:	9b01      	ldr	r3, [sp, #4]
 801696e:	4660      	mov	r0, ip
 8016970:	6033      	str	r3, [r6, #0]
 8016972:	b042      	add	sp, #264	@ 0x108
 8016974:	bd70      	pop	{r4, r5, r6, pc}
 8016976:	2301      	movs	r3, #1
 8016978:	602b      	str	r3, [r5, #0]
 801697a:	e7f5      	b.n	8016968 <rcl_validate_enclave_name_with_size+0x6c>
 801697c:	2302      	movs	r3, #2
 801697e:	602b      	str	r3, [r5, #0]
 8016980:	e7f2      	b.n	8016968 <rcl_validate_enclave_name_with_size+0x6c>
 8016982:	2303      	movs	r3, #3
 8016984:	602b      	str	r3, [r5, #0]
 8016986:	e7ef      	b.n	8016968 <rcl_validate_enclave_name_with_size+0x6c>
 8016988:	2304      	movs	r3, #4
 801698a:	602b      	str	r3, [r5, #0]
 801698c:	e7ec      	b.n	8016968 <rcl_validate_enclave_name_with_size+0x6c>
 801698e:	2305      	movs	r3, #5
 8016990:	602b      	str	r3, [r5, #0]
 8016992:	e7e9      	b.n	8016968 <rcl_validate_enclave_name_with_size+0x6c>
 8016994:	f04f 0c0b 	mov.w	ip, #11
 8016998:	4660      	mov	r0, ip
 801699a:	4770      	bx	lr
 801699c:	460b      	mov	r3, r1
 801699e:	4a04      	ldr	r2, [pc, #16]	@ (80169b0 <rcl_validate_enclave_name_with_size+0xb4>)
 80169a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80169a4:	a802      	add	r0, sp, #8
 80169a6:	f001 fd33 	bl	8018410 <rcutils_snprintf>
 80169aa:	f04f 0c01 	mov.w	ip, #1
 80169ae:	e7c1      	b.n	8016934 <rcl_validate_enclave_name_with_size+0x38>
 80169b0:	0801ce98 	.word	0x0801ce98

080169b4 <rcl_validate_enclave_name>:
 80169b4:	b168      	cbz	r0, 80169d2 <rcl_validate_enclave_name+0x1e>
 80169b6:	b570      	push	{r4, r5, r6, lr}
 80169b8:	460d      	mov	r5, r1
 80169ba:	4616      	mov	r6, r2
 80169bc:	4604      	mov	r4, r0
 80169be:	f7e9 fc99 	bl	80002f4 <strlen>
 80169c2:	4633      	mov	r3, r6
 80169c4:	4601      	mov	r1, r0
 80169c6:	462a      	mov	r2, r5
 80169c8:	4620      	mov	r0, r4
 80169ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169ce:	f7ff bf95 	b.w	80168fc <rcl_validate_enclave_name_with_size>
 80169d2:	200b      	movs	r0, #11
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop

080169d8 <rcl_get_zero_initialized_wait_set>:
 80169d8:	b510      	push	{r4, lr}
 80169da:	4c08      	ldr	r4, [pc, #32]	@ (80169fc <rcl_get_zero_initialized_wait_set+0x24>)
 80169dc:	4686      	mov	lr, r0
 80169de:	4684      	mov	ip, r0
 80169e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	4670      	mov	r0, lr
 80169f6:	f8cc 3000 	str.w	r3, [ip]
 80169fa:	bd10      	pop	{r4, pc}
 80169fc:	0801cef8 	.word	0x0801cef8

08016a00 <rcl_wait_set_is_valid>:
 8016a00:	b118      	cbz	r0, 8016a0a <rcl_wait_set_is_valid+0xa>
 8016a02:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016a04:	3800      	subs	r0, #0
 8016a06:	bf18      	it	ne
 8016a08:	2001      	movne	r0, #1
 8016a0a:	4770      	bx	lr

08016a0c <rcl_wait_set_fini>:
 8016a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a10:	b082      	sub	sp, #8
 8016a12:	2800      	cmp	r0, #0
 8016a14:	f000 8095 	beq.w	8016b42 <rcl_wait_set_fini+0x136>
 8016a18:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	2e00      	cmp	r6, #0
 8016a1e:	f000 808c 	beq.w	8016b3a <rcl_wait_set_fini+0x12e>
 8016a22:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016a24:	f002 fd7c 	bl	8019520 <rmw_destroy_wait_set>
 8016a28:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a2a:	1e06      	subs	r6, r0, #0
 8016a2c:	bf18      	it	ne
 8016a2e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016a32:	2d00      	cmp	r5, #0
 8016a34:	f000 8081 	beq.w	8016b3a <rcl_wait_set_fini+0x12e>
 8016a38:	2700      	movs	r7, #0
 8016a3a:	6820      	ldr	r0, [r4, #0]
 8016a3c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016a40:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016a42:	6067      	str	r7, [r4, #4]
 8016a44:	602f      	str	r7, [r5, #0]
 8016a46:	b120      	cbz	r0, 8016a52 <rcl_wait_set_fini+0x46>
 8016a48:	9101      	str	r1, [sp, #4]
 8016a4a:	47c0      	blx	r8
 8016a4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a4e:	9901      	ldr	r1, [sp, #4]
 8016a50:	6027      	str	r7, [r4, #0]
 8016a52:	68a8      	ldr	r0, [r5, #8]
 8016a54:	b120      	cbz	r0, 8016a60 <rcl_wait_set_fini+0x54>
 8016a56:	47c0      	blx	r8
 8016a58:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016a60:	f04f 0800 	mov.w	r8, #0
 8016a64:	68a0      	ldr	r0, [r4, #8]
 8016a66:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016a68:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016a6a:	f8c4 800c 	str.w	r8, [r4, #12]
 8016a6e:	f8c5 800c 	str.w	r8, [r5, #12]
 8016a72:	b128      	cbz	r0, 8016a80 <rcl_wait_set_fini+0x74>
 8016a74:	47b8      	blx	r7
 8016a76:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a78:	f8c4 8008 	str.w	r8, [r4, #8]
 8016a7c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016a7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016a80:	f04f 0800 	mov.w	r8, #0
 8016a84:	6968      	ldr	r0, [r5, #20]
 8016a86:	f8c5 8010 	str.w	r8, [r5, #16]
 8016a8a:	b128      	cbz	r0, 8016a98 <rcl_wait_set_fini+0x8c>
 8016a8c:	47b8      	blx	r7
 8016a8e:	f8c5 8014 	str.w	r8, [r5, #20]
 8016a92:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a94:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016a96:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016a98:	f04f 0800 	mov.w	r8, #0
 8016a9c:	6920      	ldr	r0, [r4, #16]
 8016a9e:	f8c4 8014 	str.w	r8, [r4, #20]
 8016aa2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016aa6:	b128      	cbz	r0, 8016ab4 <rcl_wait_set_fini+0xa8>
 8016aa8:	47b8      	blx	r7
 8016aaa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016aac:	f8c4 8010 	str.w	r8, [r4, #16]
 8016ab0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016ab2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016ab4:	f04f 0800 	mov.w	r8, #0
 8016ab8:	69a0      	ldr	r0, [r4, #24]
 8016aba:	f8c4 801c 	str.w	r8, [r4, #28]
 8016abe:	f8c5 8018 	str.w	r8, [r5, #24]
 8016ac2:	b128      	cbz	r0, 8016ad0 <rcl_wait_set_fini+0xc4>
 8016ac4:	9101      	str	r1, [sp, #4]
 8016ac6:	47b8      	blx	r7
 8016ac8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016aca:	9901      	ldr	r1, [sp, #4]
 8016acc:	f8c4 8018 	str.w	r8, [r4, #24]
 8016ad0:	6a28      	ldr	r0, [r5, #32]
 8016ad2:	b120      	cbz	r0, 8016ade <rcl_wait_set_fini+0xd2>
 8016ad4:	47b8      	blx	r7
 8016ad6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ad8:	2300      	movs	r3, #0
 8016ada:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016ade:	2700      	movs	r7, #0
 8016ae0:	6a20      	ldr	r0, [r4, #32]
 8016ae2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016ae6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016ae8:	6267      	str	r7, [r4, #36]	@ 0x24
 8016aea:	626f      	str	r7, [r5, #36]	@ 0x24
 8016aec:	b120      	cbz	r0, 8016af8 <rcl_wait_set_fini+0xec>
 8016aee:	9101      	str	r1, [sp, #4]
 8016af0:	47c0      	blx	r8
 8016af2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016af4:	9901      	ldr	r1, [sp, #4]
 8016af6:	6227      	str	r7, [r4, #32]
 8016af8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016afa:	b120      	cbz	r0, 8016b06 <rcl_wait_set_fini+0xfa>
 8016afc:	47c0      	blx	r8
 8016afe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b00:	2300      	movs	r3, #0
 8016b02:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016b06:	2700      	movs	r7, #0
 8016b08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016b0a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016b0e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b10:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016b12:	632f      	str	r7, [r5, #48]	@ 0x30
 8016b14:	b120      	cbz	r0, 8016b20 <rcl_wait_set_fini+0x114>
 8016b16:	9101      	str	r1, [sp, #4]
 8016b18:	47c0      	blx	r8
 8016b1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b1c:	9901      	ldr	r1, [sp, #4]
 8016b1e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016b20:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016b22:	b120      	cbz	r0, 8016b2e <rcl_wait_set_fini+0x122>
 8016b24:	47c0      	blx	r8
 8016b26:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b28:	2300      	movs	r3, #0
 8016b2a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016b2e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016b30:	4628      	mov	r0, r5
 8016b32:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b34:	4798      	blx	r3
 8016b36:	2300      	movs	r3, #0
 8016b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8016b3a:	4630      	mov	r0, r6
 8016b3c:	b002      	add	sp, #8
 8016b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b42:	260b      	movs	r6, #11
 8016b44:	4630      	mov	r0, r6
 8016b46:	b002      	add	sp, #8
 8016b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b4c <rcl_wait_set_add_subscription>:
 8016b4c:	b318      	cbz	r0, 8016b96 <rcl_wait_set_add_subscription+0x4a>
 8016b4e:	b538      	push	{r3, r4, r5, lr}
 8016b50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016b52:	4604      	mov	r4, r0
 8016b54:	b30b      	cbz	r3, 8016b9a <rcl_wait_set_add_subscription+0x4e>
 8016b56:	b319      	cbz	r1, 8016ba0 <rcl_wait_set_add_subscription+0x54>
 8016b58:	681d      	ldr	r5, [r3, #0]
 8016b5a:	6840      	ldr	r0, [r0, #4]
 8016b5c:	4285      	cmp	r5, r0
 8016b5e:	d217      	bcs.n	8016b90 <rcl_wait_set_add_subscription+0x44>
 8016b60:	1c68      	adds	r0, r5, #1
 8016b62:	6018      	str	r0, [r3, #0]
 8016b64:	6823      	ldr	r3, [r4, #0]
 8016b66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016b6a:	b102      	cbz	r2, 8016b6e <rcl_wait_set_add_subscription+0x22>
 8016b6c:	6015      	str	r5, [r2, #0]
 8016b6e:	4608      	mov	r0, r1
 8016b70:	f7ff fadc 	bl	801612c <rcl_subscription_get_rmw_handle>
 8016b74:	b150      	cbz	r0, 8016b8c <rcl_wait_set_add_subscription+0x40>
 8016b76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b78:	6842      	ldr	r2, [r0, #4]
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	689b      	ldr	r3, [r3, #8]
 8016b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016b84:	6853      	ldr	r3, [r2, #4]
 8016b86:	3301      	adds	r3, #1
 8016b88:	6053      	str	r3, [r2, #4]
 8016b8a:	bd38      	pop	{r3, r4, r5, pc}
 8016b8c:	2001      	movs	r0, #1
 8016b8e:	bd38      	pop	{r3, r4, r5, pc}
 8016b90:	f240 3086 	movw	r0, #902	@ 0x386
 8016b94:	bd38      	pop	{r3, r4, r5, pc}
 8016b96:	200b      	movs	r0, #11
 8016b98:	4770      	bx	lr
 8016b9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ba0:	200b      	movs	r0, #11
 8016ba2:	bd38      	pop	{r3, r4, r5, pc}

08016ba4 <rcl_wait_set_clear>:
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d074      	beq.n	8016c92 <rcl_wait_set_clear+0xee>
 8016ba8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016baa:	b510      	push	{r4, lr}
 8016bac:	4604      	mov	r4, r0
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d071      	beq.n	8016c96 <rcl_wait_set_clear+0xf2>
 8016bb2:	6800      	ldr	r0, [r0, #0]
 8016bb4:	b138      	cbz	r0, 8016bc6 <rcl_wait_set_clear+0x22>
 8016bb6:	6862      	ldr	r2, [r4, #4]
 8016bb8:	2100      	movs	r1, #0
 8016bba:	0092      	lsls	r2, r2, #2
 8016bbc:	f004 fedc 	bl	801b978 <memset>
 8016bc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	601a      	str	r2, [r3, #0]
 8016bc6:	68a0      	ldr	r0, [r4, #8]
 8016bc8:	b138      	cbz	r0, 8016bda <rcl_wait_set_clear+0x36>
 8016bca:	68e2      	ldr	r2, [r4, #12]
 8016bcc:	2100      	movs	r1, #0
 8016bce:	0092      	lsls	r2, r2, #2
 8016bd0:	f004 fed2 	bl	801b978 <memset>
 8016bd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	60da      	str	r2, [r3, #12]
 8016bda:	69a0      	ldr	r0, [r4, #24]
 8016bdc:	b138      	cbz	r0, 8016bee <rcl_wait_set_clear+0x4a>
 8016bde:	69e2      	ldr	r2, [r4, #28]
 8016be0:	2100      	movs	r1, #0
 8016be2:	0092      	lsls	r2, r2, #2
 8016be4:	f004 fec8 	bl	801b978 <memset>
 8016be8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bea:	2200      	movs	r2, #0
 8016bec:	619a      	str	r2, [r3, #24]
 8016bee:	6a20      	ldr	r0, [r4, #32]
 8016bf0:	b138      	cbz	r0, 8016c02 <rcl_wait_set_clear+0x5e>
 8016bf2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	0092      	lsls	r2, r2, #2
 8016bf8:	f004 febe 	bl	801b978 <memset>
 8016bfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bfe:	2200      	movs	r2, #0
 8016c00:	625a      	str	r2, [r3, #36]	@ 0x24
 8016c02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016c04:	b138      	cbz	r0, 8016c16 <rcl_wait_set_clear+0x72>
 8016c06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016c08:	2100      	movs	r1, #0
 8016c0a:	0092      	lsls	r2, r2, #2
 8016c0c:	f004 feb4 	bl	801b978 <memset>
 8016c10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c12:	2200      	movs	r2, #0
 8016c14:	631a      	str	r2, [r3, #48]	@ 0x30
 8016c16:	6920      	ldr	r0, [r4, #16]
 8016c18:	b138      	cbz	r0, 8016c2a <rcl_wait_set_clear+0x86>
 8016c1a:	6962      	ldr	r2, [r4, #20]
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	0092      	lsls	r2, r2, #2
 8016c20:	f004 feaa 	bl	801b978 <memset>
 8016c24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c26:	2200      	movs	r2, #0
 8016c28:	641a      	str	r2, [r3, #64]	@ 0x40
 8016c2a:	6898      	ldr	r0, [r3, #8]
 8016c2c:	b138      	cbz	r0, 8016c3e <rcl_wait_set_clear+0x9a>
 8016c2e:	685a      	ldr	r2, [r3, #4]
 8016c30:	2100      	movs	r1, #0
 8016c32:	0092      	lsls	r2, r2, #2
 8016c34:	f004 fea0 	bl	801b978 <memset>
 8016c38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	605a      	str	r2, [r3, #4]
 8016c3e:	6958      	ldr	r0, [r3, #20]
 8016c40:	b138      	cbz	r0, 8016c52 <rcl_wait_set_clear+0xae>
 8016c42:	691a      	ldr	r2, [r3, #16]
 8016c44:	2100      	movs	r1, #0
 8016c46:	0092      	lsls	r2, r2, #2
 8016c48:	f004 fe96 	bl	801b978 <memset>
 8016c4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c4e:	2200      	movs	r2, #0
 8016c50:	611a      	str	r2, [r3, #16]
 8016c52:	6a18      	ldr	r0, [r3, #32]
 8016c54:	b138      	cbz	r0, 8016c66 <rcl_wait_set_clear+0xc2>
 8016c56:	69da      	ldr	r2, [r3, #28]
 8016c58:	2100      	movs	r1, #0
 8016c5a:	0092      	lsls	r2, r2, #2
 8016c5c:	f004 fe8c 	bl	801b978 <memset>
 8016c60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c62:	2200      	movs	r2, #0
 8016c64:	61da      	str	r2, [r3, #28]
 8016c66:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8016c68:	b138      	cbz	r0, 8016c7a <rcl_wait_set_clear+0xd6>
 8016c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	0092      	lsls	r2, r2, #2
 8016c70:	f004 fe82 	bl	801b978 <memset>
 8016c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c76:	2200      	movs	r2, #0
 8016c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8016c7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016c7c:	b140      	cbz	r0, 8016c90 <rcl_wait_set_clear+0xec>
 8016c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c80:	2100      	movs	r1, #0
 8016c82:	0092      	lsls	r2, r2, #2
 8016c84:	f004 fe78 	bl	801b978 <memset>
 8016c88:	2300      	movs	r3, #0
 8016c8a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	6353      	str	r3, [r2, #52]	@ 0x34
 8016c90:	bd10      	pop	{r4, pc}
 8016c92:	200b      	movs	r0, #11
 8016c94:	4770      	bx	lr
 8016c96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c9a:	bd10      	pop	{r4, pc}

08016c9c <rcl_wait_set_resize>:
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	f000 8180 	beq.w	8016fa2 <rcl_wait_set_resize+0x306>
 8016ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016ca8:	b083      	sub	sp, #12
 8016caa:	4605      	mov	r5, r0
 8016cac:	2c00      	cmp	r4, #0
 8016cae:	f000 817a 	beq.w	8016fa6 <rcl_wait_set_resize+0x30a>
 8016cb2:	f04f 0900 	mov.w	r9, #0
 8016cb6:	461f      	mov	r7, r3
 8016cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016cbc:	4688      	mov	r8, r1
 8016cbe:	4616      	mov	r6, r2
 8016cc0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8016cc4:	f8c0 9004 	str.w	r9, [r0, #4]
 8016cc8:	f8c4 9000 	str.w	r9, [r4]
 8016ccc:	2900      	cmp	r1, #0
 8016cce:	f000 80bf 	beq.w	8016e50 <rcl_wait_set_resize+0x1b4>
 8016cd2:	008c      	lsls	r4, r1, #2
 8016cd4:	4652      	mov	r2, sl
 8016cd6:	6800      	ldr	r0, [r0, #0]
 8016cd8:	4621      	mov	r1, r4
 8016cda:	9301      	str	r3, [sp, #4]
 8016cdc:	4798      	blx	r3
 8016cde:	9b01      	ldr	r3, [sp, #4]
 8016ce0:	6028      	str	r0, [r5, #0]
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	f000 80f6 	beq.w	8016ed4 <rcl_wait_set_resize+0x238>
 8016ce8:	4622      	mov	r2, r4
 8016cea:	4649      	mov	r1, r9
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	f004 fe43 	bl	801b978 <memset>
 8016cf2:	f8c5 8004 	str.w	r8, [r5, #4]
 8016cf6:	4652      	mov	r2, sl
 8016cf8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016cfc:	4621      	mov	r1, r4
 8016cfe:	9b01      	ldr	r3, [sp, #4]
 8016d00:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016d04:	f8c8 9004 	str.w	r9, [r8, #4]
 8016d08:	4798      	blx	r3
 8016d0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016d0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8016d10:	689b      	ldr	r3, [r3, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f000 814a 	beq.w	8016fac <rcl_wait_set_resize+0x310>
 8016d18:	4622      	mov	r2, r4
 8016d1a:	4649      	mov	r1, r9
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f004 fe2b 	bl	801b978 <memset>
 8016d22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016d24:	f04f 0800 	mov.w	r8, #0
 8016d28:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016d2c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016d30:	f8c5 800c 	str.w	r8, [r5, #12]
 8016d34:	f8c4 800c 	str.w	r8, [r4, #12]
 8016d38:	2e00      	cmp	r6, #0
 8016d3a:	f040 809b 	bne.w	8016e74 <rcl_wait_set_resize+0x1d8>
 8016d3e:	68a8      	ldr	r0, [r5, #8]
 8016d40:	b128      	cbz	r0, 8016d4e <rcl_wait_set_resize+0xb2>
 8016d42:	4649      	mov	r1, r9
 8016d44:	4790      	blx	r2
 8016d46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016d48:	60ae      	str	r6, [r5, #8]
 8016d4a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016d4e:	f04f 0800 	mov.w	r8, #0
 8016d52:	19f6      	adds	r6, r6, r7
 8016d54:	f8c4 8010 	str.w	r8, [r4, #16]
 8016d58:	f040 80a2 	bne.w	8016ea0 <rcl_wait_set_resize+0x204>
 8016d5c:	6960      	ldr	r0, [r4, #20]
 8016d5e:	b130      	cbz	r0, 8016d6e <rcl_wait_set_resize+0xd2>
 8016d60:	4649      	mov	r1, r9
 8016d62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016d64:	4798      	blx	r3
 8016d66:	6166      	str	r6, [r4, #20]
 8016d68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016d6a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016d6e:	2600      	movs	r6, #0
 8016d70:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016d74:	616e      	str	r6, [r5, #20]
 8016d76:	6426      	str	r6, [r4, #64]	@ 0x40
 8016d78:	2f00      	cmp	r7, #0
 8016d7a:	f040 80af 	bne.w	8016edc <rcl_wait_set_resize+0x240>
 8016d7e:	6928      	ldr	r0, [r5, #16]
 8016d80:	b138      	cbz	r0, 8016d92 <rcl_wait_set_resize+0xf6>
 8016d82:	4649      	mov	r1, r9
 8016d84:	47d0      	blx	sl
 8016d86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016d88:	612f      	str	r7, [r5, #16]
 8016d8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016d8e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016d92:	2600      	movs	r6, #0
 8016d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016d96:	61ee      	str	r6, [r5, #28]
 8016d98:	61a6      	str	r6, [r4, #24]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f040 8093 	bne.w	8016ec6 <rcl_wait_set_resize+0x22a>
 8016da0:	69a8      	ldr	r0, [r5, #24]
 8016da2:	b120      	cbz	r0, 8016dae <rcl_wait_set_resize+0x112>
 8016da4:	4649      	mov	r1, r9
 8016da6:	47d0      	blx	sl
 8016da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016daa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016dac:	61ab      	str	r3, [r5, #24]
 8016dae:	6a20      	ldr	r0, [r4, #32]
 8016db0:	b128      	cbz	r0, 8016dbe <rcl_wait_set_resize+0x122>
 8016db2:	4649      	mov	r1, r9
 8016db4:	47d0      	blx	sl
 8016db6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016db8:	2300      	movs	r3, #0
 8016dba:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016dbe:	2600      	movs	r6, #0
 8016dc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016dc2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016dc4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016dc8:	626e      	str	r6, [r5, #36]	@ 0x24
 8016dca:	6266      	str	r6, [r4, #36]	@ 0x24
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 8098 	beq.w	8016f02 <rcl_wait_set_resize+0x266>
 8016dd2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016dd6:	463a      	mov	r2, r7
 8016dd8:	6a28      	ldr	r0, [r5, #32]
 8016dda:	4651      	mov	r1, sl
 8016ddc:	47c8      	blx	r9
 8016dde:	6228      	str	r0, [r5, #32]
 8016de0:	2800      	cmp	r0, #0
 8016de2:	d077      	beq.n	8016ed4 <rcl_wait_set_resize+0x238>
 8016de4:	4652      	mov	r2, sl
 8016de6:	4631      	mov	r1, r6
 8016de8:	f004 fdc6 	bl	801b978 <memset>
 8016dec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016df0:	463a      	mov	r2, r7
 8016df2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016df4:	4651      	mov	r1, sl
 8016df6:	626b      	str	r3, [r5, #36]	@ 0x24
 8016df8:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016dfa:	47c8      	blx	r9
 8016dfc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016dfe:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016e00:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016e02:	2c00      	cmp	r4, #0
 8016e04:	f000 80f2 	beq.w	8016fec <rcl_wait_set_resize+0x350>
 8016e08:	4620      	mov	r0, r4
 8016e0a:	4652      	mov	r2, sl
 8016e0c:	4631      	mov	r1, r6
 8016e0e:	f004 fdb3 	bl	801b978 <memset>
 8016e12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e14:	2600      	movs	r6, #0
 8016e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e18:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016e1a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016e1e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016e20:	6326      	str	r6, [r4, #48]	@ 0x30
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f040 8097 	bne.w	8016f56 <rcl_wait_set_resize+0x2ba>
 8016e28:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016e2a:	b120      	cbz	r0, 8016e36 <rcl_wait_set_resize+0x19a>
 8016e2c:	4639      	mov	r1, r7
 8016e2e:	47c0      	blx	r8
 8016e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e34:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016e36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d04c      	beq.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016e3c:	4639      	mov	r1, r7
 8016e3e:	47c0      	blx	r8
 8016e40:	2300      	movs	r3, #0
 8016e42:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016e44:	4618      	mov	r0, r3
 8016e46:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8016e4a:	b003      	add	sp, #12
 8016e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e50:	6800      	ldr	r0, [r0, #0]
 8016e52:	b120      	cbz	r0, 8016e5e <rcl_wait_set_resize+0x1c2>
 8016e54:	4651      	mov	r1, sl
 8016e56:	47d8      	blx	fp
 8016e58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e5a:	f8c5 8000 	str.w	r8, [r5]
 8016e5e:	68a0      	ldr	r0, [r4, #8]
 8016e60:	2800      	cmp	r0, #0
 8016e62:	f43f af5f 	beq.w	8016d24 <rcl_wait_set_resize+0x88>
 8016e66:	4651      	mov	r1, sl
 8016e68:	47d8      	blx	fp
 8016e6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016e72:	e757      	b.n	8016d24 <rcl_wait_set_resize+0x88>
 8016e74:	00b4      	lsls	r4, r6, #2
 8016e76:	464a      	mov	r2, r9
 8016e78:	68a8      	ldr	r0, [r5, #8]
 8016e7a:	4621      	mov	r1, r4
 8016e7c:	4798      	blx	r3
 8016e7e:	60a8      	str	r0, [r5, #8]
 8016e80:	b340      	cbz	r0, 8016ed4 <rcl_wait_set_resize+0x238>
 8016e82:	4622      	mov	r2, r4
 8016e84:	4641      	mov	r1, r8
 8016e86:	f004 fd77 	bl	801b978 <memset>
 8016e8a:	f04f 0800 	mov.w	r8, #0
 8016e8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e90:	60ee      	str	r6, [r5, #12]
 8016e92:	19f6      	adds	r6, r6, r7
 8016e94:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e98:	f8c4 8010 	str.w	r8, [r4, #16]
 8016e9c:	f43f af5e 	beq.w	8016d5c <rcl_wait_set_resize+0xc0>
 8016ea0:	00b6      	lsls	r6, r6, #2
 8016ea2:	464a      	mov	r2, r9
 8016ea4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016ea6:	6960      	ldr	r0, [r4, #20]
 8016ea8:	4631      	mov	r1, r6
 8016eaa:	4798      	blx	r3
 8016eac:	4681      	mov	r9, r0
 8016eae:	6160      	str	r0, [r4, #20]
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	f000 8084 	beq.w	8016fbe <rcl_wait_set_resize+0x322>
 8016eb6:	4632      	mov	r2, r6
 8016eb8:	4641      	mov	r1, r8
 8016eba:	f004 fd5d 	bl	801b978 <memset>
 8016ebe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ec0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016ec4:	e753      	b.n	8016d6e <rcl_wait_set_resize+0xd2>
 8016ec6:	009c      	lsls	r4, r3, #2
 8016ec8:	464a      	mov	r2, r9
 8016eca:	69a8      	ldr	r0, [r5, #24]
 8016ecc:	4621      	mov	r1, r4
 8016ece:	47c0      	blx	r8
 8016ed0:	61a8      	str	r0, [r5, #24]
 8016ed2:	bb40      	cbnz	r0, 8016f26 <rcl_wait_set_resize+0x28a>
 8016ed4:	200a      	movs	r0, #10
 8016ed6:	b003      	add	sp, #12
 8016ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016edc:	00bc      	lsls	r4, r7, #2
 8016ede:	464a      	mov	r2, r9
 8016ee0:	6928      	ldr	r0, [r5, #16]
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	47c0      	blx	r8
 8016ee6:	6128      	str	r0, [r5, #16]
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d0f3      	beq.n	8016ed4 <rcl_wait_set_resize+0x238>
 8016eec:	4622      	mov	r2, r4
 8016eee:	4631      	mov	r1, r6
 8016ef0:	f004 fd42 	bl	801b978 <memset>
 8016ef4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ef6:	616f      	str	r7, [r5, #20]
 8016ef8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016efc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016f00:	e747      	b.n	8016d92 <rcl_wait_set_resize+0xf6>
 8016f02:	6a28      	ldr	r0, [r5, #32]
 8016f04:	b120      	cbz	r0, 8016f10 <rcl_wait_set_resize+0x274>
 8016f06:	4639      	mov	r1, r7
 8016f08:	47c0      	blx	r8
 8016f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f0c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f0e:	622b      	str	r3, [r5, #32]
 8016f10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016f12:	2800      	cmp	r0, #0
 8016f14:	f43f af7e 	beq.w	8016e14 <rcl_wait_set_resize+0x178>
 8016f18:	4639      	mov	r1, r7
 8016f1a:	47c0      	blx	r8
 8016f1c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f1e:	2300      	movs	r3, #0
 8016f20:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016f24:	e776      	b.n	8016e14 <rcl_wait_set_resize+0x178>
 8016f26:	4622      	mov	r2, r4
 8016f28:	4631      	mov	r1, r6
 8016f2a:	f004 fd25 	bl	801b978 <memset>
 8016f2e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016f30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f32:	464a      	mov	r2, r9
 8016f34:	6a38      	ldr	r0, [r7, #32]
 8016f36:	4621      	mov	r1, r4
 8016f38:	61eb      	str	r3, [r5, #28]
 8016f3a:	61fe      	str	r6, [r7, #28]
 8016f3c:	47c0      	blx	r8
 8016f3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f40:	6238      	str	r0, [r7, #32]
 8016f42:	6a1f      	ldr	r7, [r3, #32]
 8016f44:	2f00      	cmp	r7, #0
 8016f46:	d04a      	beq.n	8016fde <rcl_wait_set_resize+0x342>
 8016f48:	4622      	mov	r2, r4
 8016f4a:	4631      	mov	r1, r6
 8016f4c:	4638      	mov	r0, r7
 8016f4e:	f004 fd13 	bl	801b978 <memset>
 8016f52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f54:	e733      	b.n	8016dbe <rcl_wait_set_resize+0x122>
 8016f56:	009c      	lsls	r4, r3, #2
 8016f58:	463a      	mov	r2, r7
 8016f5a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	47c8      	blx	r9
 8016f60:	62a8      	str	r0, [r5, #40]	@ 0x28
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d0b6      	beq.n	8016ed4 <rcl_wait_set_resize+0x238>
 8016f66:	4622      	mov	r2, r4
 8016f68:	4631      	mov	r1, r6
 8016f6a:	f004 fd05 	bl	801b978 <memset>
 8016f6e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8016f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f74:	463a      	mov	r2, r7
 8016f76:	4621      	mov	r1, r4
 8016f78:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016f7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8016f7e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8016f82:	47c8      	blx	r9
 8016f84:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f86:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d034      	beq.n	8016ffa <rcl_wait_set_resize+0x35e>
 8016f90:	4622      	mov	r2, r4
 8016f92:	4631      	mov	r1, r6
 8016f94:	4618      	mov	r0, r3
 8016f96:	f004 fcef 	bl	801b978 <memset>
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	b003      	add	sp, #12
 8016f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa2:	200b      	movs	r0, #11
 8016fa4:	4770      	bx	lr
 8016fa6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016faa:	e794      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016fac:	6828      	ldr	r0, [r5, #0]
 8016fae:	4651      	mov	r1, sl
 8016fb0:	9301      	str	r3, [sp, #4]
 8016fb2:	47d8      	blx	fp
 8016fb4:	9b01      	ldr	r3, [sp, #4]
 8016fb6:	200a      	movs	r0, #10
 8016fb8:	e9c5 3300 	strd	r3, r3, [r5]
 8016fbc:	e78b      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016fbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016fc0:	68a8      	ldr	r0, [r5, #8]
 8016fc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016fc6:	4798      	blx	r3
 8016fc8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016fca:	6928      	ldr	r0, [r5, #16]
 8016fcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016fce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016fd0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8016fd4:	4790      	blx	r2
 8016fd6:	200a      	movs	r0, #10
 8016fd8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016fdc:	e77b      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016fde:	69a8      	ldr	r0, [r5, #24]
 8016fe0:	4649      	mov	r1, r9
 8016fe2:	47d0      	blx	sl
 8016fe4:	200a      	movs	r0, #10
 8016fe6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016fea:	e774      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016fec:	6a28      	ldr	r0, [r5, #32]
 8016fee:	4639      	mov	r1, r7
 8016ff0:	47c0      	blx	r8
 8016ff2:	200a      	movs	r0, #10
 8016ff4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016ff8:	e76d      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>
 8016ffa:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	9301      	str	r3, [sp, #4]
 8017000:	47c0      	blx	r8
 8017002:	9b01      	ldr	r3, [sp, #4]
 8017004:	200a      	movs	r0, #10
 8017006:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801700a:	e764      	b.n	8016ed6 <rcl_wait_set_resize+0x23a>

0801700c <rcl_wait_set_init>:
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	b085      	sub	sp, #20
 8017012:	4605      	mov	r5, r0
 8017014:	460e      	mov	r6, r1
 8017016:	4617      	mov	r7, r2
 8017018:	a812      	add	r0, sp, #72	@ 0x48
 801701a:	4698      	mov	r8, r3
 801701c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8017020:	f7f7 ffe6 	bl	800eff0 <rcutils_allocator_is_valid>
 8017024:	2d00      	cmp	r5, #0
 8017026:	d072      	beq.n	801710e <rcl_wait_set_init+0x102>
 8017028:	f080 0001 	eor.w	r0, r0, #1
 801702c:	b2c0      	uxtb	r0, r0
 801702e:	2800      	cmp	r0, #0
 8017030:	d16d      	bne.n	801710e <rcl_wait_set_init+0x102>
 8017032:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017036:	f1ba 0f00 	cmp.w	sl, #0
 801703a:	d004      	beq.n	8017046 <rcl_wait_set_init+0x3a>
 801703c:	2464      	movs	r4, #100	@ 0x64
 801703e:	4620      	mov	r0, r4
 8017040:	b005      	add	sp, #20
 8017042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017046:	f1b9 0f00 	cmp.w	r9, #0
 801704a:	d060      	beq.n	801710e <rcl_wait_set_init+0x102>
 801704c:	4648      	mov	r0, r9
 801704e:	f7fe faa3 	bl	8015598 <rcl_context_is_valid>
 8017052:	2800      	cmp	r0, #0
 8017054:	d068      	beq.n	8017128 <rcl_wait_set_init+0x11c>
 8017056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017058:	205c      	movs	r0, #92	@ 0x5c
 801705a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801705c:	4798      	blx	r3
 801705e:	6328      	str	r0, [r5, #48]	@ 0x30
 8017060:	2800      	cmp	r0, #0
 8017062:	d063      	beq.n	801712c <rcl_wait_set_init+0x120>
 8017064:	225c      	movs	r2, #92	@ 0x5c
 8017066:	4651      	mov	r1, sl
 8017068:	f004 fc86 	bl	801b978 <memset>
 801706c:	ac12      	add	r4, sp, #72	@ 0x48
 801706e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8017072:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8017076:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801707a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801707e:	eb03 0e02 	add.w	lr, r3, r2
 8017082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017084:	f8d9 9000 	ldr.w	r9, [r9]
 8017088:	449e      	add	lr, r3
 801708a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801708c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017090:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017094:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017098:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801709c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80170a0:	44be      	add	lr, r7
 80170a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170a6:	6823      	ldr	r3, [r4, #0]
 80170a8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80170ac:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80170b0:	f8cc 3000 	str.w	r3, [ip]
 80170b4:	f002 fa2a 	bl	801950c <rmw_create_wait_set>
 80170b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170ba:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80170be:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80170c0:	b350      	cbz	r0, 8017118 <rcl_wait_set_init+0x10c>
 80170c2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80170c4:	4643      	mov	r3, r8
 80170c6:	463a      	mov	r2, r7
 80170c8:	4631      	mov	r1, r6
 80170ca:	9402      	str	r4, [sp, #8]
 80170cc:	4628      	mov	r0, r5
 80170ce:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80170d0:	9401      	str	r4, [sp, #4]
 80170d2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80170d4:	9400      	str	r4, [sp, #0]
 80170d6:	f7ff fde1 	bl	8016c9c <rcl_wait_set_resize>
 80170da:	4604      	mov	r4, r0
 80170dc:	2800      	cmp	r0, #0
 80170de:	d0ae      	beq.n	801703e <rcl_wait_set_init+0x32>
 80170e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170e2:	bb2b      	cbnz	r3, 8017130 <rcl_wait_set_init+0x124>
 80170e4:	2600      	movs	r6, #0
 80170e6:	4628      	mov	r0, r5
 80170e8:	4633      	mov	r3, r6
 80170ea:	4632      	mov	r2, r6
 80170ec:	4631      	mov	r1, r6
 80170ee:	9600      	str	r6, [sp, #0]
 80170f0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80170f4:	f7ff fdd2 	bl	8016c9c <rcl_wait_set_resize>
 80170f8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d09f      	beq.n	801703e <rcl_wait_set_init+0x32>
 80170fe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017100:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017102:	4798      	blx	r3
 8017104:	4620      	mov	r0, r4
 8017106:	632e      	str	r6, [r5, #48]	@ 0x30
 8017108:	b005      	add	sp, #20
 801710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710e:	240b      	movs	r4, #11
 8017110:	4620      	mov	r0, r4
 8017112:	b005      	add	sp, #20
 8017114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017118:	2401      	movs	r4, #1
 801711a:	f002 fa01 	bl	8019520 <rmw_destroy_wait_set>
 801711e:	2800      	cmp	r0, #0
 8017120:	bf18      	it	ne
 8017122:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8017126:	e7dd      	b.n	80170e4 <rcl_wait_set_init+0xd8>
 8017128:	2465      	movs	r4, #101	@ 0x65
 801712a:	e788      	b.n	801703e <rcl_wait_set_init+0x32>
 801712c:	240a      	movs	r4, #10
 801712e:	e786      	b.n	801703e <rcl_wait_set_init+0x32>
 8017130:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017132:	e7f2      	b.n	801711a <rcl_wait_set_init+0x10e>

08017134 <rcl_wait_set_add_guard_condition>:
 8017134:	b318      	cbz	r0, 801717e <rcl_wait_set_add_guard_condition+0x4a>
 8017136:	b538      	push	{r3, r4, r5, lr}
 8017138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801713a:	4604      	mov	r4, r0
 801713c:	b30b      	cbz	r3, 8017182 <rcl_wait_set_add_guard_condition+0x4e>
 801713e:	b319      	cbz	r1, 8017188 <rcl_wait_set_add_guard_condition+0x54>
 8017140:	68dd      	ldr	r5, [r3, #12]
 8017142:	68c0      	ldr	r0, [r0, #12]
 8017144:	4285      	cmp	r5, r0
 8017146:	d217      	bcs.n	8017178 <rcl_wait_set_add_guard_condition+0x44>
 8017148:	1c68      	adds	r0, r5, #1
 801714a:	60d8      	str	r0, [r3, #12]
 801714c:	68a3      	ldr	r3, [r4, #8]
 801714e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017152:	b102      	cbz	r2, 8017156 <rcl_wait_set_add_guard_condition+0x22>
 8017154:	6015      	str	r5, [r2, #0]
 8017156:	4608      	mov	r0, r1
 8017158:	f003 fdc2 	bl	801ace0 <rcl_guard_condition_get_rmw_handle>
 801715c:	b150      	cbz	r0, 8017174 <rcl_wait_set_add_guard_condition+0x40>
 801715e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017160:	6842      	ldr	r2, [r0, #4]
 8017162:	2000      	movs	r0, #0
 8017164:	695b      	ldr	r3, [r3, #20]
 8017166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801716a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801716c:	6913      	ldr	r3, [r2, #16]
 801716e:	3301      	adds	r3, #1
 8017170:	6113      	str	r3, [r2, #16]
 8017172:	bd38      	pop	{r3, r4, r5, pc}
 8017174:	2001      	movs	r0, #1
 8017176:	bd38      	pop	{r3, r4, r5, pc}
 8017178:	f240 3086 	movw	r0, #902	@ 0x386
 801717c:	bd38      	pop	{r3, r4, r5, pc}
 801717e:	200b      	movs	r0, #11
 8017180:	4770      	bx	lr
 8017182:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017186:	bd38      	pop	{r3, r4, r5, pc}
 8017188:	200b      	movs	r0, #11
 801718a:	bd38      	pop	{r3, r4, r5, pc}

0801718c <rcl_wait_set_add_timer>:
 801718c:	b328      	cbz	r0, 80171da <rcl_wait_set_add_timer+0x4e>
 801718e:	b538      	push	{r3, r4, r5, lr}
 8017190:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017192:	4604      	mov	r4, r0
 8017194:	b31b      	cbz	r3, 80171de <rcl_wait_set_add_timer+0x52>
 8017196:	b329      	cbz	r1, 80171e4 <rcl_wait_set_add_timer+0x58>
 8017198:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801719a:	6965      	ldr	r5, [r4, #20]
 801719c:	42a8      	cmp	r0, r5
 801719e:	d219      	bcs.n	80171d4 <rcl_wait_set_add_timer+0x48>
 80171a0:	1c45      	adds	r5, r0, #1
 80171a2:	641d      	str	r5, [r3, #64]	@ 0x40
 80171a4:	6923      	ldr	r3, [r4, #16]
 80171a6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80171aa:	b102      	cbz	r2, 80171ae <rcl_wait_set_add_timer+0x22>
 80171ac:	6010      	str	r0, [r2, #0]
 80171ae:	4608      	mov	r0, r1
 80171b0:	f7ff fb9a 	bl	80168e8 <rcl_timer_get_guard_condition>
 80171b4:	b168      	cbz	r0, 80171d2 <rcl_wait_set_add_timer+0x46>
 80171b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80171b8:	68e3      	ldr	r3, [r4, #12]
 80171ba:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80171bc:	3b01      	subs	r3, #1
 80171be:	441d      	add	r5, r3
 80171c0:	f003 fd8e 	bl	801ace0 <rcl_guard_condition_get_rmw_handle>
 80171c4:	b180      	cbz	r0, 80171e8 <rcl_wait_set_add_timer+0x5c>
 80171c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171c8:	6842      	ldr	r2, [r0, #4]
 80171ca:	2000      	movs	r0, #0
 80171cc:	695b      	ldr	r3, [r3, #20]
 80171ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80171d2:	bd38      	pop	{r3, r4, r5, pc}
 80171d4:	f240 3086 	movw	r0, #902	@ 0x386
 80171d8:	bd38      	pop	{r3, r4, r5, pc}
 80171da:	200b      	movs	r0, #11
 80171dc:	4770      	bx	lr
 80171de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80171e2:	bd38      	pop	{r3, r4, r5, pc}
 80171e4:	200b      	movs	r0, #11
 80171e6:	bd38      	pop	{r3, r4, r5, pc}
 80171e8:	2001      	movs	r0, #1
 80171ea:	bd38      	pop	{r3, r4, r5, pc}

080171ec <rcl_wait_set_add_client>:
 80171ec:	b318      	cbz	r0, 8017236 <rcl_wait_set_add_client+0x4a>
 80171ee:	b538      	push	{r3, r4, r5, lr}
 80171f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80171f2:	4604      	mov	r4, r0
 80171f4:	b30b      	cbz	r3, 801723a <rcl_wait_set_add_client+0x4e>
 80171f6:	b319      	cbz	r1, 8017240 <rcl_wait_set_add_client+0x54>
 80171f8:	699d      	ldr	r5, [r3, #24]
 80171fa:	69c0      	ldr	r0, [r0, #28]
 80171fc:	4285      	cmp	r5, r0
 80171fe:	d217      	bcs.n	8017230 <rcl_wait_set_add_client+0x44>
 8017200:	1c68      	adds	r0, r5, #1
 8017202:	6198      	str	r0, [r3, #24]
 8017204:	69a3      	ldr	r3, [r4, #24]
 8017206:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801720a:	b102      	cbz	r2, 801720e <rcl_wait_set_add_client+0x22>
 801720c:	6015      	str	r5, [r2, #0]
 801720e:	4608      	mov	r0, r1
 8017210:	f7fe f914 	bl	801543c <rcl_client_get_rmw_handle>
 8017214:	b150      	cbz	r0, 801722c <rcl_wait_set_add_client+0x40>
 8017216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017218:	6842      	ldr	r2, [r0, #4]
 801721a:	2000      	movs	r0, #0
 801721c:	6a1b      	ldr	r3, [r3, #32]
 801721e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017222:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017224:	69d3      	ldr	r3, [r2, #28]
 8017226:	3301      	adds	r3, #1
 8017228:	61d3      	str	r3, [r2, #28]
 801722a:	bd38      	pop	{r3, r4, r5, pc}
 801722c:	2001      	movs	r0, #1
 801722e:	bd38      	pop	{r3, r4, r5, pc}
 8017230:	f240 3086 	movw	r0, #902	@ 0x386
 8017234:	bd38      	pop	{r3, r4, r5, pc}
 8017236:	200b      	movs	r0, #11
 8017238:	4770      	bx	lr
 801723a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801723e:	bd38      	pop	{r3, r4, r5, pc}
 8017240:	200b      	movs	r0, #11
 8017242:	bd38      	pop	{r3, r4, r5, pc}

08017244 <rcl_wait_set_add_service>:
 8017244:	b318      	cbz	r0, 801728e <rcl_wait_set_add_service+0x4a>
 8017246:	b538      	push	{r3, r4, r5, lr}
 8017248:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801724a:	4604      	mov	r4, r0
 801724c:	b30b      	cbz	r3, 8017292 <rcl_wait_set_add_service+0x4e>
 801724e:	b319      	cbz	r1, 8017298 <rcl_wait_set_add_service+0x54>
 8017250:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017252:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017254:	4285      	cmp	r5, r0
 8017256:	d217      	bcs.n	8017288 <rcl_wait_set_add_service+0x44>
 8017258:	1c68      	adds	r0, r5, #1
 801725a:	6258      	str	r0, [r3, #36]	@ 0x24
 801725c:	6a23      	ldr	r3, [r4, #32]
 801725e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017262:	b102      	cbz	r2, 8017266 <rcl_wait_set_add_service+0x22>
 8017264:	6015      	str	r5, [r2, #0]
 8017266:	4608      	mov	r0, r1
 8017268:	f7fe fea2 	bl	8015fb0 <rcl_service_get_rmw_handle>
 801726c:	b150      	cbz	r0, 8017284 <rcl_wait_set_add_service+0x40>
 801726e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017270:	6842      	ldr	r2, [r0, #4]
 8017272:	2000      	movs	r0, #0
 8017274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801727a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801727c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801727e:	3301      	adds	r3, #1
 8017280:	6293      	str	r3, [r2, #40]	@ 0x28
 8017282:	bd38      	pop	{r3, r4, r5, pc}
 8017284:	2001      	movs	r0, #1
 8017286:	bd38      	pop	{r3, r4, r5, pc}
 8017288:	f240 3086 	movw	r0, #902	@ 0x386
 801728c:	bd38      	pop	{r3, r4, r5, pc}
 801728e:	200b      	movs	r0, #11
 8017290:	4770      	bx	lr
 8017292:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017296:	bd38      	pop	{r3, r4, r5, pc}
 8017298:	200b      	movs	r0, #11
 801729a:	bd38      	pop	{r3, r4, r5, pc}
 801729c:	0000      	movs	r0, r0
	...

080172a0 <rcl_wait>:
 80172a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a4:	ed2d 8b02 	vpush	{d8}
 80172a8:	b08d      	sub	sp, #52	@ 0x34
 80172aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80172ae:	2800      	cmp	r0, #0
 80172b0:	f000 814f 	beq.w	8017552 <rcl_wait+0x2b2>
 80172b4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80172b6:	4605      	mov	r5, r0
 80172b8:	2e00      	cmp	r6, #0
 80172ba:	f000 811a 	beq.w	80174f2 <rcl_wait+0x252>
 80172be:	6843      	ldr	r3, [r0, #4]
 80172c0:	b983      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172c2:	68eb      	ldr	r3, [r5, #12]
 80172c4:	b973      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172c6:	696b      	ldr	r3, [r5, #20]
 80172c8:	b963      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172ca:	69eb      	ldr	r3, [r5, #28]
 80172cc:	b953      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172ce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80172d0:	b943      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80172d4:	b933      	cbnz	r3, 80172e4 <rcl_wait+0x44>
 80172d6:	f240 3085 	movw	r0, #901	@ 0x385
 80172da:	b00d      	add	sp, #52	@ 0x34
 80172dc:	ecbd 8b02 	vpop	{d8}
 80172e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e4:	9b04      	ldr	r3, [sp, #16]
 80172e6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80172e8:	2b01      	cmp	r3, #1
 80172ea:	9b05      	ldr	r3, [sp, #20]
 80172ec:	f173 0300 	sbcs.w	r3, r3, #0
 80172f0:	f2c0 80f8 	blt.w	80174e4 <rcl_wait+0x244>
 80172f4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80172f8:	2a00      	cmp	r2, #0
 80172fa:	f000 810f 	beq.w	801751c <rcl_wait+0x27c>
 80172fe:	2400      	movs	r4, #0
 8017300:	4613      	mov	r3, r2
 8017302:	f240 3921 	movw	r9, #801	@ 0x321
 8017306:	4632      	mov	r2, r6
 8017308:	46a2      	mov	sl, r4
 801730a:	46a3      	mov	fp, r4
 801730c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017570 <rcl_wait+0x2d0>
 8017310:	e014      	b.n	801733c <rcl_wait+0x9c>
 8017312:	2800      	cmp	r0, #0
 8017314:	d1e1      	bne.n	80172da <rcl_wait+0x3a>
 8017316:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801731a:	4542      	cmp	r2, r8
 801731c:	eb73 0107 	sbcs.w	r1, r3, r7
 8017320:	da03      	bge.n	801732a <rcl_wait+0x8a>
 8017322:	4690      	mov	r8, r2
 8017324:	461f      	mov	r7, r3
 8017326:	f04f 0b01 	mov.w	fp, #1
 801732a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801732c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801732e:	3401      	adds	r4, #1
 8017330:	f14a 0a00 	adc.w	sl, sl, #0
 8017334:	429c      	cmp	r4, r3
 8017336:	f17a 0100 	sbcs.w	r1, sl, #0
 801733a:	d228      	bcs.n	801738e <rcl_wait+0xee>
 801733c:	6928      	ldr	r0, [r5, #16]
 801733e:	a908      	add	r1, sp, #32
 8017340:	00a6      	lsls	r6, r4, #2
 8017342:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017346:	2800      	cmp	r0, #0
 8017348:	d0f1      	beq.n	801732e <rcl_wait+0x8e>
 801734a:	68eb      	ldr	r3, [r5, #12]
 801734c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017350:	4423      	add	r3, r4
 8017352:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017356:	f1be 0f00 	cmp.w	lr, #0
 801735a:	d006      	beq.n	801736a <rcl_wait+0xca>
 801735c:	6913      	ldr	r3, [r2, #16]
 801735e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017362:	3301      	adds	r3, #1
 8017364:	6113      	str	r3, [r2, #16]
 8017366:	692b      	ldr	r3, [r5, #16]
 8017368:	5998      	ldr	r0, [r3, r6]
 801736a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801736e:	f7ff fa89 	bl	8016884 <rcl_timer_get_time_until_next_call>
 8017372:	4548      	cmp	r0, r9
 8017374:	d1cd      	bne.n	8017312 <rcl_wait+0x72>
 8017376:	692b      	ldr	r3, [r5, #16]
 8017378:	2200      	movs	r2, #0
 801737a:	3401      	adds	r4, #1
 801737c:	519a      	str	r2, [r3, r6]
 801737e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017380:	f14a 0a00 	adc.w	sl, sl, #0
 8017384:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017386:	429c      	cmp	r4, r3
 8017388:	f17a 0100 	sbcs.w	r1, sl, #0
 801738c:	d3d6      	bcc.n	801733c <rcl_wait+0x9c>
 801738e:	4659      	mov	r1, fp
 8017390:	4616      	mov	r6, r2
 8017392:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017396:	4313      	orrs	r3, r2
 8017398:	f040 80b4 	bne.w	8017504 <rcl_wait+0x264>
 801739c:	2300      	movs	r3, #0
 801739e:	2200      	movs	r2, #0
 80173a0:	460c      	mov	r4, r1
 80173a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80173a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80173aa:	ab08      	add	r3, sp, #32
 80173ac:	9302      	str	r3, [sp, #8]
 80173ae:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80173b2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80173b4:	f106 0110 	add.w	r1, r6, #16
 80173b8:	9300      	str	r3, [sp, #0]
 80173ba:	1d30      	adds	r0, r6, #4
 80173bc:	f106 031c 	add.w	r3, r6, #28
 80173c0:	9201      	str	r2, [sp, #4]
 80173c2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80173c6:	f001 ff3d 	bl	8019244 <rmw_wait>
 80173ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80173cc:	4680      	mov	r8, r0
 80173ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80173d0:	b1e2      	cbz	r2, 801740c <rcl_wait+0x16c>
 80173d2:	f04f 0900 	mov.w	r9, #0
 80173d6:	464f      	mov	r7, r9
 80173d8:	692a      	ldr	r2, [r5, #16]
 80173da:	f10d 011f 	add.w	r1, sp, #31
 80173de:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80173e2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80173e6:	b160      	cbz	r0, 8017402 <rcl_wait+0x162>
 80173e8:	f88d 701f 	strb.w	r7, [sp, #31]
 80173ec:	f7ff fa0e 	bl	801680c <rcl_timer_is_ready>
 80173f0:	2800      	cmp	r0, #0
 80173f2:	f47f af72 	bne.w	80172da <rcl_wait+0x3a>
 80173f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80173fa:	b90b      	cbnz	r3, 8017400 <rcl_wait+0x160>
 80173fc:	692a      	ldr	r2, [r5, #16]
 80173fe:	5193      	str	r3, [r2, r6]
 8017400:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017402:	f109 0901 	add.w	r9, r9, #1
 8017406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017408:	454a      	cmp	r2, r9
 801740a:	d8e5      	bhi.n	80173d8 <rcl_wait+0x138>
 801740c:	f038 0002 	bics.w	r0, r8, #2
 8017410:	d176      	bne.n	8017500 <rcl_wait+0x260>
 8017412:	686f      	ldr	r7, [r5, #4]
 8017414:	b17f      	cbz	r7, 8017436 <rcl_wait+0x196>
 8017416:	4602      	mov	r2, r0
 8017418:	e002      	b.n	8017420 <rcl_wait+0x180>
 801741a:	3201      	adds	r2, #1
 801741c:	42ba      	cmp	r2, r7
 801741e:	d00a      	beq.n	8017436 <rcl_wait+0x196>
 8017420:	6899      	ldr	r1, [r3, #8]
 8017422:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017426:	2900      	cmp	r1, #0
 8017428:	d1f7      	bne.n	801741a <rcl_wait+0x17a>
 801742a:	682e      	ldr	r6, [r5, #0]
 801742c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017430:	3201      	adds	r2, #1
 8017432:	42ba      	cmp	r2, r7
 8017434:	d1f4      	bne.n	8017420 <rcl_wait+0x180>
 8017436:	68ef      	ldr	r7, [r5, #12]
 8017438:	b17f      	cbz	r7, 801745a <rcl_wait+0x1ba>
 801743a:	2200      	movs	r2, #0
 801743c:	e002      	b.n	8017444 <rcl_wait+0x1a4>
 801743e:	3201      	adds	r2, #1
 8017440:	42ba      	cmp	r2, r7
 8017442:	d00a      	beq.n	801745a <rcl_wait+0x1ba>
 8017444:	6959      	ldr	r1, [r3, #20]
 8017446:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801744a:	2900      	cmp	r1, #0
 801744c:	d1f7      	bne.n	801743e <rcl_wait+0x19e>
 801744e:	68ae      	ldr	r6, [r5, #8]
 8017450:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017454:	3201      	adds	r2, #1
 8017456:	42ba      	cmp	r2, r7
 8017458:	d1f4      	bne.n	8017444 <rcl_wait+0x1a4>
 801745a:	69ef      	ldr	r7, [r5, #28]
 801745c:	b17f      	cbz	r7, 801747e <rcl_wait+0x1de>
 801745e:	2200      	movs	r2, #0
 8017460:	e002      	b.n	8017468 <rcl_wait+0x1c8>
 8017462:	3201      	adds	r2, #1
 8017464:	42ba      	cmp	r2, r7
 8017466:	d00a      	beq.n	801747e <rcl_wait+0x1de>
 8017468:	6a19      	ldr	r1, [r3, #32]
 801746a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801746e:	2900      	cmp	r1, #0
 8017470:	d1f7      	bne.n	8017462 <rcl_wait+0x1c2>
 8017472:	69ae      	ldr	r6, [r5, #24]
 8017474:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017478:	3201      	adds	r2, #1
 801747a:	42ba      	cmp	r2, r7
 801747c:	d1f4      	bne.n	8017468 <rcl_wait+0x1c8>
 801747e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8017480:	b17f      	cbz	r7, 80174a2 <rcl_wait+0x202>
 8017482:	2200      	movs	r2, #0
 8017484:	e002      	b.n	801748c <rcl_wait+0x1ec>
 8017486:	3201      	adds	r2, #1
 8017488:	42ba      	cmp	r2, r7
 801748a:	d00a      	beq.n	80174a2 <rcl_wait+0x202>
 801748c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801748e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017492:	2900      	cmp	r1, #0
 8017494:	d1f7      	bne.n	8017486 <rcl_wait+0x1e6>
 8017496:	6a2e      	ldr	r6, [r5, #32]
 8017498:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801749c:	3201      	adds	r2, #1
 801749e:	42ba      	cmp	r2, r7
 80174a0:	d1f4      	bne.n	801748c <rcl_wait+0x1ec>
 80174a2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80174a4:	b17f      	cbz	r7, 80174c6 <rcl_wait+0x226>
 80174a6:	2200      	movs	r2, #0
 80174a8:	e002      	b.n	80174b0 <rcl_wait+0x210>
 80174aa:	3201      	adds	r2, #1
 80174ac:	42ba      	cmp	r2, r7
 80174ae:	d00a      	beq.n	80174c6 <rcl_wait+0x226>
 80174b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80174b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80174b6:	2900      	cmp	r1, #0
 80174b8:	d1f7      	bne.n	80174aa <rcl_wait+0x20a>
 80174ba:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80174bc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80174c0:	3201      	adds	r2, #1
 80174c2:	42ba      	cmp	r2, r7
 80174c4:	d1f4      	bne.n	80174b0 <rcl_wait+0x210>
 80174c6:	f1b8 0f02 	cmp.w	r8, #2
 80174ca:	f47f af06 	bne.w	80172da <rcl_wait+0x3a>
 80174ce:	f084 0301 	eor.w	r3, r4, #1
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	bf18      	it	ne
 80174d8:	2002      	movne	r0, #2
 80174da:	b00d      	add	sp, #52	@ 0x34
 80174dc:	ecbd 8b02 	vpop	{d8}
 80174e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e4:	2a00      	cmp	r2, #0
 80174e6:	d03a      	beq.n	801755e <rcl_wait+0x2be>
 80174e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80174ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80174f0:	e705      	b.n	80172fe <rcl_wait+0x5e>
 80174f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80174f6:	b00d      	add	sp, #52	@ 0x34
 80174f8:	ecbd 8b02 	vpop	{d8}
 80174fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017500:	2001      	movs	r0, #1
 8017502:	e6ea      	b.n	80172da <rcl_wait+0x3a>
 8017504:	9b04      	ldr	r3, [sp, #16]
 8017506:	460c      	mov	r4, r1
 8017508:	2b01      	cmp	r3, #1
 801750a:	9b05      	ldr	r3, [sp, #20]
 801750c:	f173 0300 	sbcs.w	r3, r3, #0
 8017510:	bfa8      	it	ge
 8017512:	f044 0401 	orrge.w	r4, r4, #1
 8017516:	b914      	cbnz	r4, 801751e <rcl_wait+0x27e>
 8017518:	4623      	mov	r3, r4
 801751a:	e747      	b.n	80173ac <rcl_wait+0x10c>
 801751c:	4611      	mov	r1, r2
 801751e:	2f00      	cmp	r7, #0
 8017520:	da02      	bge.n	8017528 <rcl_wait+0x288>
 8017522:	f04f 0800 	mov.w	r8, #0
 8017526:	4647      	mov	r7, r8
 8017528:	460c      	mov	r4, r1
 801752a:	4640      	mov	r0, r8
 801752c:	4639      	mov	r1, r7
 801752e:	a312      	add	r3, pc, #72	@ (adr r3, 8017578 <rcl_wait+0x2d8>)
 8017530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017534:	f7e8 ff3c 	bl	80003b0 <__aeabi_ldivmod>
 8017538:	a30f      	add	r3, pc, #60	@ (adr r3, 8017578 <rcl_wait+0x2d8>)
 801753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801753e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017542:	4640      	mov	r0, r8
 8017544:	4639      	mov	r1, r7
 8017546:	f7e8 ff33 	bl	80003b0 <__aeabi_ldivmod>
 801754a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801754e:	ab08      	add	r3, sp, #32
 8017550:	e72c      	b.n	80173ac <rcl_wait+0x10c>
 8017552:	200b      	movs	r0, #11
 8017554:	b00d      	add	sp, #52	@ 0x34
 8017556:	ecbd 8b02 	vpop	{d8}
 801755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801755e:	4611      	mov	r1, r2
 8017560:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017564:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017568:	e713      	b.n	8017392 <rcl_wait+0xf2>
 801756a:	bf00      	nop
 801756c:	f3af 8000 	nop.w
 8017570:	ffffffff 	.word	0xffffffff
 8017574:	7fffffff 	.word	0x7fffffff
 8017578:	3b9aca00 	.word	0x3b9aca00
 801757c:	00000000 	.word	0x00000000

08017580 <rcl_action_take_goal_response>:
 8017580:	2800      	cmp	r0, #0
 8017582:	d039      	beq.n	80175f8 <rcl_action_take_goal_response+0x78>
 8017584:	b570      	push	{r4, r5, r6, lr}
 8017586:	4604      	mov	r4, r0
 8017588:	6800      	ldr	r0, [r0, #0]
 801758a:	b380      	cbz	r0, 80175ee <rcl_action_take_goal_response+0x6e>
 801758c:	460e      	mov	r6, r1
 801758e:	4615      	mov	r5, r2
 8017590:	f7fd ffda 	bl	8015548 <rcl_client_is_valid>
 8017594:	b330      	cbz	r0, 80175e4 <rcl_action_take_goal_response+0x64>
 8017596:	6820      	ldr	r0, [r4, #0]
 8017598:	3004      	adds	r0, #4
 801759a:	f7fd ffd5 	bl	8015548 <rcl_client_is_valid>
 801759e:	b308      	cbz	r0, 80175e4 <rcl_action_take_goal_response+0x64>
 80175a0:	6820      	ldr	r0, [r4, #0]
 80175a2:	3008      	adds	r0, #8
 80175a4:	f7fd ffd0 	bl	8015548 <rcl_client_is_valid>
 80175a8:	b1e0      	cbz	r0, 80175e4 <rcl_action_take_goal_response+0x64>
 80175aa:	6820      	ldr	r0, [r4, #0]
 80175ac:	300c      	adds	r0, #12
 80175ae:	f7fe fdc3 	bl	8016138 <rcl_subscription_is_valid>
 80175b2:	b1b8      	cbz	r0, 80175e4 <rcl_action_take_goal_response+0x64>
 80175b4:	6820      	ldr	r0, [r4, #0]
 80175b6:	3010      	adds	r0, #16
 80175b8:	f7fe fdbe 	bl	8016138 <rcl_subscription_is_valid>
 80175bc:	b190      	cbz	r0, 80175e4 <rcl_action_take_goal_response+0x64>
 80175be:	b1cd      	cbz	r5, 80175f4 <rcl_action_take_goal_response+0x74>
 80175c0:	b1c6      	cbz	r6, 80175f4 <rcl_action_take_goal_response+0x74>
 80175c2:	462a      	mov	r2, r5
 80175c4:	4631      	mov	r1, r6
 80175c6:	6820      	ldr	r0, [r4, #0]
 80175c8:	f7fd ff76 	bl	80154b8 <rcl_take_response>
 80175cc:	b148      	cbz	r0, 80175e2 <rcl_action_take_goal_response+0x62>
 80175ce:	280a      	cmp	r0, #10
 80175d0:	d007      	beq.n	80175e2 <rcl_action_take_goal_response+0x62>
 80175d2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80175d6:	f640 0337 	movw	r3, #2103	@ 0x837
 80175da:	4290      	cmp	r0, r2
 80175dc:	bf0c      	ite	eq
 80175de:	4618      	moveq	r0, r3
 80175e0:	2001      	movne	r0, #1
 80175e2:	bd70      	pop	{r4, r5, r6, pc}
 80175e4:	f7f7 fd28 	bl	800f038 <rcutils_reset_error>
 80175e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80175ec:	bd70      	pop	{r4, r5, r6, pc}
 80175ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80175f2:	bd70      	pop	{r4, r5, r6, pc}
 80175f4:	200b      	movs	r0, #11
 80175f6:	bd70      	pop	{r4, r5, r6, pc}
 80175f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80175fc:	4770      	bx	lr
 80175fe:	bf00      	nop

08017600 <rcl_action_send_result_request>:
 8017600:	b390      	cbz	r0, 8017668 <rcl_action_send_result_request+0x68>
 8017602:	b570      	push	{r4, r5, r6, lr}
 8017604:	4604      	mov	r4, r0
 8017606:	6800      	ldr	r0, [r0, #0]
 8017608:	b348      	cbz	r0, 801765e <rcl_action_send_result_request+0x5e>
 801760a:	460e      	mov	r6, r1
 801760c:	4615      	mov	r5, r2
 801760e:	f7fd ff9b 	bl	8015548 <rcl_client_is_valid>
 8017612:	b1f8      	cbz	r0, 8017654 <rcl_action_send_result_request+0x54>
 8017614:	6820      	ldr	r0, [r4, #0]
 8017616:	3004      	adds	r0, #4
 8017618:	f7fd ff96 	bl	8015548 <rcl_client_is_valid>
 801761c:	b1d0      	cbz	r0, 8017654 <rcl_action_send_result_request+0x54>
 801761e:	6820      	ldr	r0, [r4, #0]
 8017620:	3008      	adds	r0, #8
 8017622:	f7fd ff91 	bl	8015548 <rcl_client_is_valid>
 8017626:	b1a8      	cbz	r0, 8017654 <rcl_action_send_result_request+0x54>
 8017628:	6820      	ldr	r0, [r4, #0]
 801762a:	300c      	adds	r0, #12
 801762c:	f7fe fd84 	bl	8016138 <rcl_subscription_is_valid>
 8017630:	b180      	cbz	r0, 8017654 <rcl_action_send_result_request+0x54>
 8017632:	6820      	ldr	r0, [r4, #0]
 8017634:	3010      	adds	r0, #16
 8017636:	f7fe fd7f 	bl	8016138 <rcl_subscription_is_valid>
 801763a:	b158      	cbz	r0, 8017654 <rcl_action_send_result_request+0x54>
 801763c:	b195      	cbz	r5, 8017664 <rcl_action_send_result_request+0x64>
 801763e:	b18e      	cbz	r6, 8017664 <rcl_action_send_result_request+0x64>
 8017640:	6820      	ldr	r0, [r4, #0]
 8017642:	462a      	mov	r2, r5
 8017644:	4631      	mov	r1, r6
 8017646:	3008      	adds	r0, #8
 8017648:	f7fd fefe 	bl	8015448 <rcl_send_request>
 801764c:	3800      	subs	r0, #0
 801764e:	bf18      	it	ne
 8017650:	2001      	movne	r0, #1
 8017652:	bd70      	pop	{r4, r5, r6, pc}
 8017654:	f7f7 fcf0 	bl	800f038 <rcutils_reset_error>
 8017658:	f640 0036 	movw	r0, #2102	@ 0x836
 801765c:	bd70      	pop	{r4, r5, r6, pc}
 801765e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017662:	bd70      	pop	{r4, r5, r6, pc}
 8017664:	200b      	movs	r0, #11
 8017666:	bd70      	pop	{r4, r5, r6, pc}
 8017668:	f640 0036 	movw	r0, #2102	@ 0x836
 801766c:	4770      	bx	lr
 801766e:	bf00      	nop

08017670 <rcl_action_take_result_response>:
 8017670:	2800      	cmp	r0, #0
 8017672:	d03a      	beq.n	80176ea <rcl_action_take_result_response+0x7a>
 8017674:	b570      	push	{r4, r5, r6, lr}
 8017676:	4604      	mov	r4, r0
 8017678:	6800      	ldr	r0, [r0, #0]
 801767a:	b388      	cbz	r0, 80176e0 <rcl_action_take_result_response+0x70>
 801767c:	460e      	mov	r6, r1
 801767e:	4615      	mov	r5, r2
 8017680:	f7fd ff62 	bl	8015548 <rcl_client_is_valid>
 8017684:	b338      	cbz	r0, 80176d6 <rcl_action_take_result_response+0x66>
 8017686:	6820      	ldr	r0, [r4, #0]
 8017688:	3004      	adds	r0, #4
 801768a:	f7fd ff5d 	bl	8015548 <rcl_client_is_valid>
 801768e:	b310      	cbz	r0, 80176d6 <rcl_action_take_result_response+0x66>
 8017690:	6820      	ldr	r0, [r4, #0]
 8017692:	3008      	adds	r0, #8
 8017694:	f7fd ff58 	bl	8015548 <rcl_client_is_valid>
 8017698:	b1e8      	cbz	r0, 80176d6 <rcl_action_take_result_response+0x66>
 801769a:	6820      	ldr	r0, [r4, #0]
 801769c:	300c      	adds	r0, #12
 801769e:	f7fe fd4b 	bl	8016138 <rcl_subscription_is_valid>
 80176a2:	b1c0      	cbz	r0, 80176d6 <rcl_action_take_result_response+0x66>
 80176a4:	6820      	ldr	r0, [r4, #0]
 80176a6:	3010      	adds	r0, #16
 80176a8:	f7fe fd46 	bl	8016138 <rcl_subscription_is_valid>
 80176ac:	b198      	cbz	r0, 80176d6 <rcl_action_take_result_response+0x66>
 80176ae:	b1d5      	cbz	r5, 80176e6 <rcl_action_take_result_response+0x76>
 80176b0:	b1ce      	cbz	r6, 80176e6 <rcl_action_take_result_response+0x76>
 80176b2:	6820      	ldr	r0, [r4, #0]
 80176b4:	462a      	mov	r2, r5
 80176b6:	4631      	mov	r1, r6
 80176b8:	3008      	adds	r0, #8
 80176ba:	f7fd fefd 	bl	80154b8 <rcl_take_response>
 80176be:	b148      	cbz	r0, 80176d4 <rcl_action_take_result_response+0x64>
 80176c0:	280a      	cmp	r0, #10
 80176c2:	d007      	beq.n	80176d4 <rcl_action_take_result_response+0x64>
 80176c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80176c8:	f640 0337 	movw	r3, #2103	@ 0x837
 80176cc:	4290      	cmp	r0, r2
 80176ce:	bf0c      	ite	eq
 80176d0:	4618      	moveq	r0, r3
 80176d2:	2001      	movne	r0, #1
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	f7f7 fcaf 	bl	800f038 <rcutils_reset_error>
 80176da:	f640 0036 	movw	r0, #2102	@ 0x836
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80176e4:	bd70      	pop	{r4, r5, r6, pc}
 80176e6:	200b      	movs	r0, #11
 80176e8:	bd70      	pop	{r4, r5, r6, pc}
 80176ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80176ee:	4770      	bx	lr

080176f0 <rcl_action_take_cancel_response>:
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d03a      	beq.n	801776a <rcl_action_take_cancel_response+0x7a>
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	4604      	mov	r4, r0
 80176f8:	6800      	ldr	r0, [r0, #0]
 80176fa:	b388      	cbz	r0, 8017760 <rcl_action_take_cancel_response+0x70>
 80176fc:	460e      	mov	r6, r1
 80176fe:	4615      	mov	r5, r2
 8017700:	f7fd ff22 	bl	8015548 <rcl_client_is_valid>
 8017704:	b338      	cbz	r0, 8017756 <rcl_action_take_cancel_response+0x66>
 8017706:	6820      	ldr	r0, [r4, #0]
 8017708:	3004      	adds	r0, #4
 801770a:	f7fd ff1d 	bl	8015548 <rcl_client_is_valid>
 801770e:	b310      	cbz	r0, 8017756 <rcl_action_take_cancel_response+0x66>
 8017710:	6820      	ldr	r0, [r4, #0]
 8017712:	3008      	adds	r0, #8
 8017714:	f7fd ff18 	bl	8015548 <rcl_client_is_valid>
 8017718:	b1e8      	cbz	r0, 8017756 <rcl_action_take_cancel_response+0x66>
 801771a:	6820      	ldr	r0, [r4, #0]
 801771c:	300c      	adds	r0, #12
 801771e:	f7fe fd0b 	bl	8016138 <rcl_subscription_is_valid>
 8017722:	b1c0      	cbz	r0, 8017756 <rcl_action_take_cancel_response+0x66>
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	3010      	adds	r0, #16
 8017728:	f7fe fd06 	bl	8016138 <rcl_subscription_is_valid>
 801772c:	b198      	cbz	r0, 8017756 <rcl_action_take_cancel_response+0x66>
 801772e:	b1d5      	cbz	r5, 8017766 <rcl_action_take_cancel_response+0x76>
 8017730:	b1ce      	cbz	r6, 8017766 <rcl_action_take_cancel_response+0x76>
 8017732:	6820      	ldr	r0, [r4, #0]
 8017734:	462a      	mov	r2, r5
 8017736:	4631      	mov	r1, r6
 8017738:	3004      	adds	r0, #4
 801773a:	f7fd febd 	bl	80154b8 <rcl_take_response>
 801773e:	b148      	cbz	r0, 8017754 <rcl_action_take_cancel_response+0x64>
 8017740:	280a      	cmp	r0, #10
 8017742:	d007      	beq.n	8017754 <rcl_action_take_cancel_response+0x64>
 8017744:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017748:	f640 0337 	movw	r3, #2103	@ 0x837
 801774c:	4290      	cmp	r0, r2
 801774e:	bf0c      	ite	eq
 8017750:	4618      	moveq	r0, r3
 8017752:	2001      	movne	r0, #1
 8017754:	bd70      	pop	{r4, r5, r6, pc}
 8017756:	f7f7 fc6f 	bl	800f038 <rcutils_reset_error>
 801775a:	f640 0036 	movw	r0, #2102	@ 0x836
 801775e:	bd70      	pop	{r4, r5, r6, pc}
 8017760:	f640 0036 	movw	r0, #2102	@ 0x836
 8017764:	bd70      	pop	{r4, r5, r6, pc}
 8017766:	200b      	movs	r0, #11
 8017768:	bd70      	pop	{r4, r5, r6, pc}
 801776a:	f640 0036 	movw	r0, #2102	@ 0x836
 801776e:	4770      	bx	lr

08017770 <rcl_action_take_feedback>:
 8017770:	2800      	cmp	r0, #0
 8017772:	d038      	beq.n	80177e6 <rcl_action_take_feedback+0x76>
 8017774:	b530      	push	{r4, r5, lr}
 8017776:	4604      	mov	r4, r0
 8017778:	6800      	ldr	r0, [r0, #0]
 801777a:	b091      	sub	sp, #68	@ 0x44
 801777c:	b378      	cbz	r0, 80177de <rcl_action_take_feedback+0x6e>
 801777e:	460d      	mov	r5, r1
 8017780:	f7fd fee2 	bl	8015548 <rcl_client_is_valid>
 8017784:	b328      	cbz	r0, 80177d2 <rcl_action_take_feedback+0x62>
 8017786:	6820      	ldr	r0, [r4, #0]
 8017788:	3004      	adds	r0, #4
 801778a:	f7fd fedd 	bl	8015548 <rcl_client_is_valid>
 801778e:	b300      	cbz	r0, 80177d2 <rcl_action_take_feedback+0x62>
 8017790:	6820      	ldr	r0, [r4, #0]
 8017792:	3008      	adds	r0, #8
 8017794:	f7fd fed8 	bl	8015548 <rcl_client_is_valid>
 8017798:	b1d8      	cbz	r0, 80177d2 <rcl_action_take_feedback+0x62>
 801779a:	6820      	ldr	r0, [r4, #0]
 801779c:	300c      	adds	r0, #12
 801779e:	f7fe fccb 	bl	8016138 <rcl_subscription_is_valid>
 80177a2:	b1b0      	cbz	r0, 80177d2 <rcl_action_take_feedback+0x62>
 80177a4:	6820      	ldr	r0, [r4, #0]
 80177a6:	3010      	adds	r0, #16
 80177a8:	f7fe fcc6 	bl	8016138 <rcl_subscription_is_valid>
 80177ac:	b188      	cbz	r0, 80177d2 <rcl_action_take_feedback+0x62>
 80177ae:	b1ed      	cbz	r5, 80177ec <rcl_action_take_feedback+0x7c>
 80177b0:	6820      	ldr	r0, [r4, #0]
 80177b2:	2300      	movs	r3, #0
 80177b4:	466a      	mov	r2, sp
 80177b6:	4629      	mov	r1, r5
 80177b8:	300c      	adds	r0, #12
 80177ba:	f7fe fc61 	bl	8016080 <rcl_take>
 80177be:	b160      	cbz	r0, 80177da <rcl_action_take_feedback+0x6a>
 80177c0:	f240 1391 	movw	r3, #401	@ 0x191
 80177c4:	4298      	cmp	r0, r3
 80177c6:	d014      	beq.n	80177f2 <rcl_action_take_feedback+0x82>
 80177c8:	280a      	cmp	r0, #10
 80177ca:	bf18      	it	ne
 80177cc:	2001      	movne	r0, #1
 80177ce:	b011      	add	sp, #68	@ 0x44
 80177d0:	bd30      	pop	{r4, r5, pc}
 80177d2:	f7f7 fc31 	bl	800f038 <rcutils_reset_error>
 80177d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80177da:	b011      	add	sp, #68	@ 0x44
 80177dc:	bd30      	pop	{r4, r5, pc}
 80177de:	f640 0036 	movw	r0, #2102	@ 0x836
 80177e2:	b011      	add	sp, #68	@ 0x44
 80177e4:	bd30      	pop	{r4, r5, pc}
 80177e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80177ea:	4770      	bx	lr
 80177ec:	200b      	movs	r0, #11
 80177ee:	b011      	add	sp, #68	@ 0x44
 80177f0:	bd30      	pop	{r4, r5, pc}
 80177f2:	f640 0037 	movw	r0, #2103	@ 0x837
 80177f6:	e7f0      	b.n	80177da <rcl_action_take_feedback+0x6a>

080177f8 <rcl_action_wait_set_add_action_client>:
 80177f8:	2800      	cmp	r0, #0
 80177fa:	d048      	beq.n	801788e <rcl_action_wait_set_add_action_client+0x96>
 80177fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177fe:	460c      	mov	r4, r1
 8017800:	2900      	cmp	r1, #0
 8017802:	d03c      	beq.n	801787e <rcl_action_wait_set_add_action_client+0x86>
 8017804:	4605      	mov	r5, r0
 8017806:	6808      	ldr	r0, [r1, #0]
 8017808:	2800      	cmp	r0, #0
 801780a:	d038      	beq.n	801787e <rcl_action_wait_set_add_action_client+0x86>
 801780c:	4617      	mov	r7, r2
 801780e:	461e      	mov	r6, r3
 8017810:	f7fd fe9a 	bl	8015548 <rcl_client_is_valid>
 8017814:	b3b0      	cbz	r0, 8017884 <rcl_action_wait_set_add_action_client+0x8c>
 8017816:	6820      	ldr	r0, [r4, #0]
 8017818:	3004      	adds	r0, #4
 801781a:	f7fd fe95 	bl	8015548 <rcl_client_is_valid>
 801781e:	b388      	cbz	r0, 8017884 <rcl_action_wait_set_add_action_client+0x8c>
 8017820:	6820      	ldr	r0, [r4, #0]
 8017822:	3008      	adds	r0, #8
 8017824:	f7fd fe90 	bl	8015548 <rcl_client_is_valid>
 8017828:	b360      	cbz	r0, 8017884 <rcl_action_wait_set_add_action_client+0x8c>
 801782a:	6820      	ldr	r0, [r4, #0]
 801782c:	300c      	adds	r0, #12
 801782e:	f7fe fc83 	bl	8016138 <rcl_subscription_is_valid>
 8017832:	b338      	cbz	r0, 8017884 <rcl_action_wait_set_add_action_client+0x8c>
 8017834:	6820      	ldr	r0, [r4, #0]
 8017836:	3010      	adds	r0, #16
 8017838:	f7fe fc7e 	bl	8016138 <rcl_subscription_is_valid>
 801783c:	b310      	cbz	r0, 8017884 <rcl_action_wait_set_add_action_client+0x8c>
 801783e:	6821      	ldr	r1, [r4, #0]
 8017840:	4628      	mov	r0, r5
 8017842:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8017846:	f7ff fcd1 	bl	80171ec <rcl_wait_set_add_client>
 801784a:	b9b8      	cbnz	r0, 801787c <rcl_action_wait_set_add_action_client+0x84>
 801784c:	6821      	ldr	r1, [r4, #0]
 801784e:	4628      	mov	r0, r5
 8017850:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017854:	3104      	adds	r1, #4
 8017856:	f7ff fcc9 	bl	80171ec <rcl_wait_set_add_client>
 801785a:	b978      	cbnz	r0, 801787c <rcl_action_wait_set_add_action_client+0x84>
 801785c:	6821      	ldr	r1, [r4, #0]
 801785e:	4628      	mov	r0, r5
 8017860:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017864:	3108      	adds	r1, #8
 8017866:	f7ff fcc1 	bl	80171ec <rcl_wait_set_add_client>
 801786a:	b938      	cbnz	r0, 801787c <rcl_action_wait_set_add_action_client+0x84>
 801786c:	6821      	ldr	r1, [r4, #0]
 801786e:	4628      	mov	r0, r5
 8017870:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017874:	310c      	adds	r1, #12
 8017876:	f7ff f969 	bl	8016b4c <rcl_wait_set_add_subscription>
 801787a:	b158      	cbz	r0, 8017894 <rcl_action_wait_set_add_action_client+0x9c>
 801787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801787e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017884:	f7f7 fbd8 	bl	800f038 <rcutils_reset_error>
 8017888:	f640 0036 	movw	r0, #2102	@ 0x836
 801788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801788e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017892:	4770      	bx	lr
 8017894:	6821      	ldr	r1, [r4, #0]
 8017896:	4628      	mov	r0, r5
 8017898:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801789c:	3110      	adds	r1, #16
 801789e:	f7ff f955 	bl	8016b4c <rcl_wait_set_add_subscription>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d1ea      	bne.n	801787c <rcl_action_wait_set_add_action_client+0x84>
 80178a6:	b11f      	cbz	r7, 80178b0 <rcl_action_wait_set_add_action_client+0xb8>
 80178a8:	6823      	ldr	r3, [r4, #0]
 80178aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80178ae:	603b      	str	r3, [r7, #0]
 80178b0:	2e00      	cmp	r6, #0
 80178b2:	d0e3      	beq.n	801787c <rcl_action_wait_set_add_action_client+0x84>
 80178b4:	6823      	ldr	r3, [r4, #0]
 80178b6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80178ba:	6033      	str	r3, [r6, #0]
 80178bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178be:	bf00      	nop

080178c0 <rcl_action_client_wait_set_get_entities_ready>:
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d050      	beq.n	8017966 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80178c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178c8:	460c      	mov	r4, r1
 80178ca:	2900      	cmp	r1, #0
 80178cc:	d03e      	beq.n	801794c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80178ce:	4605      	mov	r5, r0
 80178d0:	6808      	ldr	r0, [r1, #0]
 80178d2:	2800      	cmp	r0, #0
 80178d4:	d03a      	beq.n	801794c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80178d6:	4616      	mov	r6, r2
 80178d8:	461f      	mov	r7, r3
 80178da:	f7fd fe35 	bl	8015548 <rcl_client_is_valid>
 80178de:	2800      	cmp	r0, #0
 80178e0:	d038      	beq.n	8017954 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80178e2:	6820      	ldr	r0, [r4, #0]
 80178e4:	3004      	adds	r0, #4
 80178e6:	f7fd fe2f 	bl	8015548 <rcl_client_is_valid>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d032      	beq.n	8017954 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80178ee:	6820      	ldr	r0, [r4, #0]
 80178f0:	3008      	adds	r0, #8
 80178f2:	f7fd fe29 	bl	8015548 <rcl_client_is_valid>
 80178f6:	b368      	cbz	r0, 8017954 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80178f8:	6820      	ldr	r0, [r4, #0]
 80178fa:	300c      	adds	r0, #12
 80178fc:	f7fe fc1c 	bl	8016138 <rcl_subscription_is_valid>
 8017900:	b340      	cbz	r0, 8017954 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017902:	6820      	ldr	r0, [r4, #0]
 8017904:	3010      	adds	r0, #16
 8017906:	f7fe fc17 	bl	8016138 <rcl_subscription_is_valid>
 801790a:	b318      	cbz	r0, 8017954 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801790c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8017910:	2a00      	cmp	r2, #0
 8017912:	bf18      	it	ne
 8017914:	2b00      	cmpne	r3, #0
 8017916:	9b08      	ldr	r3, [sp, #32]
 8017918:	bf0c      	ite	eq
 801791a:	2101      	moveq	r1, #1
 801791c:	2100      	movne	r1, #0
 801791e:	2b00      	cmp	r3, #0
 8017920:	bf08      	it	eq
 8017922:	f041 0101 	orreq.w	r1, r1, #1
 8017926:	2f00      	cmp	r7, #0
 8017928:	bf08      	it	eq
 801792a:	f041 0101 	orreq.w	r1, r1, #1
 801792e:	b9b9      	cbnz	r1, 8017960 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017930:	b1b6      	cbz	r6, 8017960 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017932:	6823      	ldr	r3, [r4, #0]
 8017934:	686c      	ldr	r4, [r5, #4]
 8017936:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801793a:	428a      	cmp	r2, r1
 801793c:	4610      	mov	r0, r2
 801793e:	bf38      	it	cc
 8017940:	4608      	movcc	r0, r1
 8017942:	4284      	cmp	r4, r0
 8017944:	d812      	bhi.n	801796c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8017946:	2001      	movs	r0, #1
 8017948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801794c:	f640 0036 	movw	r0, #2102	@ 0x836
 8017950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017954:	f7f7 fb70 	bl	800f038 <rcutils_reset_error>
 8017958:	f640 0036 	movw	r0, #2102	@ 0x836
 801795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017960:	200b      	movs	r0, #11
 8017962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017966:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801796a:	4770      	bx	lr
 801796c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8017970:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8017974:	45f0      	cmp	r8, lr
 8017976:	4640      	mov	r0, r8
 8017978:	69ec      	ldr	r4, [r5, #28]
 801797a:	bf38      	it	cc
 801797c:	4670      	movcc	r0, lr
 801797e:	4560      	cmp	r0, ip
 8017980:	bf38      	it	cc
 8017982:	4660      	movcc	r0, ip
 8017984:	4284      	cmp	r4, r0
 8017986:	d9de      	bls.n	8017946 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017988:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801798c:	682d      	ldr	r5, [r5, #0]
 801798e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8017992:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8017996:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801799a:	1a18      	subs	r0, r3, r0
 801799c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80179a0:	f103 0c0c 	add.w	ip, r3, #12
 80179a4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80179a8:	fab0 f080 	clz	r0, r0
 80179ac:	eba5 050c 	sub.w	r5, r5, ip
 80179b0:	0940      	lsrs	r0, r0, #5
 80179b2:	fab5 f585 	clz	r5, r5
 80179b6:	096d      	lsrs	r5, r5, #5
 80179b8:	7035      	strb	r5, [r6, #0]
 80179ba:	f103 0510 	add.w	r5, r3, #16
 80179be:	1b64      	subs	r4, r4, r5
 80179c0:	9d08      	ldr	r5, [sp, #32]
 80179c2:	fab4 f484 	clz	r4, r4
 80179c6:	0964      	lsrs	r4, r4, #5
 80179c8:	703c      	strb	r4, [r7, #0]
 80179ca:	1d1c      	adds	r4, r3, #4
 80179cc:	3308      	adds	r3, #8
 80179ce:	7028      	strb	r0, [r5, #0]
 80179d0:	1b09      	subs	r1, r1, r4
 80179d2:	2000      	movs	r0, #0
 80179d4:	1ad3      	subs	r3, r2, r3
 80179d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179d8:	fab1 f181 	clz	r1, r1
 80179dc:	fab3 f383 	clz	r3, r3
 80179e0:	0949      	lsrs	r1, r1, #5
 80179e2:	095b      	lsrs	r3, r3, #5
 80179e4:	7011      	strb	r1, [r2, #0]
 80179e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80179e8:	7013      	strb	r3, [r2, #0]
 80179ea:	e7b1      	b.n	8017950 <rcl_action_client_wait_set_get_entities_ready+0x90>

080179ec <rcl_action_take_goal_request>:
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d039      	beq.n	8017a64 <rcl_action_take_goal_request+0x78>
 80179f0:	b570      	push	{r4, r5, r6, lr}
 80179f2:	4604      	mov	r4, r0
 80179f4:	6800      	ldr	r0, [r0, #0]
 80179f6:	b380      	cbz	r0, 8017a5a <rcl_action_take_goal_request+0x6e>
 80179f8:	460e      	mov	r6, r1
 80179fa:	4615      	mov	r5, r2
 80179fc:	f7fe fb36 	bl	801606c <rcl_service_is_valid>
 8017a00:	b330      	cbz	r0, 8017a50 <rcl_action_take_goal_request+0x64>
 8017a02:	6820      	ldr	r0, [r4, #0]
 8017a04:	3004      	adds	r0, #4
 8017a06:	f7fe fb31 	bl	801606c <rcl_service_is_valid>
 8017a0a:	b308      	cbz	r0, 8017a50 <rcl_action_take_goal_request+0x64>
 8017a0c:	6820      	ldr	r0, [r4, #0]
 8017a0e:	3008      	adds	r0, #8
 8017a10:	f7fe fb2c 	bl	801606c <rcl_service_is_valid>
 8017a14:	b1e0      	cbz	r0, 8017a50 <rcl_action_take_goal_request+0x64>
 8017a16:	6820      	ldr	r0, [r4, #0]
 8017a18:	300c      	adds	r0, #12
 8017a1a:	f7f6 fb79 	bl	800e110 <rcl_publisher_is_valid>
 8017a1e:	b1b8      	cbz	r0, 8017a50 <rcl_action_take_goal_request+0x64>
 8017a20:	6820      	ldr	r0, [r4, #0]
 8017a22:	3010      	adds	r0, #16
 8017a24:	f7f6 fb74 	bl	800e110 <rcl_publisher_is_valid>
 8017a28:	b190      	cbz	r0, 8017a50 <rcl_action_take_goal_request+0x64>
 8017a2a:	b1cd      	cbz	r5, 8017a60 <rcl_action_take_goal_request+0x74>
 8017a2c:	b1c6      	cbz	r6, 8017a60 <rcl_action_take_goal_request+0x74>
 8017a2e:	462a      	mov	r2, r5
 8017a30:	4631      	mov	r1, r6
 8017a32:	6820      	ldr	r0, [r4, #0]
 8017a34:	f7fe fac2 	bl	8015fbc <rcl_take_request>
 8017a38:	b148      	cbz	r0, 8017a4e <rcl_action_take_goal_request+0x62>
 8017a3a:	280a      	cmp	r0, #10
 8017a3c:	d007      	beq.n	8017a4e <rcl_action_take_goal_request+0x62>
 8017a3e:	f240 2259 	movw	r2, #601	@ 0x259
 8017a42:	f640 0399 	movw	r3, #2201	@ 0x899
 8017a46:	4290      	cmp	r0, r2
 8017a48:	bf0c      	ite	eq
 8017a4a:	4618      	moveq	r0, r3
 8017a4c:	2001      	movne	r0, #1
 8017a4e:	bd70      	pop	{r4, r5, r6, pc}
 8017a50:	f7f7 faf2 	bl	800f038 <rcutils_reset_error>
 8017a54:	f640 0098 	movw	r0, #2200	@ 0x898
 8017a58:	bd70      	pop	{r4, r5, r6, pc}
 8017a5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8017a5e:	bd70      	pop	{r4, r5, r6, pc}
 8017a60:	200b      	movs	r0, #11
 8017a62:	bd70      	pop	{r4, r5, r6, pc}
 8017a64:	f640 0098 	movw	r0, #2200	@ 0x898
 8017a68:	4770      	bx	lr
 8017a6a:	bf00      	nop

08017a6c <rcl_action_send_goal_response>:
 8017a6c:	b390      	cbz	r0, 8017ad4 <rcl_action_send_goal_response+0x68>
 8017a6e:	b570      	push	{r4, r5, r6, lr}
 8017a70:	4604      	mov	r4, r0
 8017a72:	6800      	ldr	r0, [r0, #0]
 8017a74:	b348      	cbz	r0, 8017aca <rcl_action_send_goal_response+0x5e>
 8017a76:	460e      	mov	r6, r1
 8017a78:	4615      	mov	r5, r2
 8017a7a:	f7fe faf7 	bl	801606c <rcl_service_is_valid>
 8017a7e:	b1f8      	cbz	r0, 8017ac0 <rcl_action_send_goal_response+0x54>
 8017a80:	6820      	ldr	r0, [r4, #0]
 8017a82:	3004      	adds	r0, #4
 8017a84:	f7fe faf2 	bl	801606c <rcl_service_is_valid>
 8017a88:	b1d0      	cbz	r0, 8017ac0 <rcl_action_send_goal_response+0x54>
 8017a8a:	6820      	ldr	r0, [r4, #0]
 8017a8c:	3008      	adds	r0, #8
 8017a8e:	f7fe faed 	bl	801606c <rcl_service_is_valid>
 8017a92:	b1a8      	cbz	r0, 8017ac0 <rcl_action_send_goal_response+0x54>
 8017a94:	6820      	ldr	r0, [r4, #0]
 8017a96:	300c      	adds	r0, #12
 8017a98:	f7f6 fb3a 	bl	800e110 <rcl_publisher_is_valid>
 8017a9c:	b180      	cbz	r0, 8017ac0 <rcl_action_send_goal_response+0x54>
 8017a9e:	6820      	ldr	r0, [r4, #0]
 8017aa0:	3010      	adds	r0, #16
 8017aa2:	f7f6 fb35 	bl	800e110 <rcl_publisher_is_valid>
 8017aa6:	b158      	cbz	r0, 8017ac0 <rcl_action_send_goal_response+0x54>
 8017aa8:	b195      	cbz	r5, 8017ad0 <rcl_action_send_goal_response+0x64>
 8017aaa:	b18e      	cbz	r6, 8017ad0 <rcl_action_send_goal_response+0x64>
 8017aac:	462a      	mov	r2, r5
 8017aae:	4631      	mov	r1, r6
 8017ab0:	6820      	ldr	r0, [r4, #0]
 8017ab2:	f7fe fac3 	bl	801603c <rcl_send_response>
 8017ab6:	b110      	cbz	r0, 8017abe <rcl_action_send_goal_response+0x52>
 8017ab8:	2802      	cmp	r0, #2
 8017aba:	bf18      	it	ne
 8017abc:	2001      	movne	r0, #1
 8017abe:	bd70      	pop	{r4, r5, r6, pc}
 8017ac0:	f7f7 faba 	bl	800f038 <rcutils_reset_error>
 8017ac4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ac8:	bd70      	pop	{r4, r5, r6, pc}
 8017aca:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ace:	bd70      	pop	{r4, r5, r6, pc}
 8017ad0:	200b      	movs	r0, #11
 8017ad2:	bd70      	pop	{r4, r5, r6, pc}
 8017ad4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop

08017adc <rcl_action_take_result_request>:
 8017adc:	2800      	cmp	r0, #0
 8017ade:	d03a      	beq.n	8017b56 <rcl_action_take_result_request+0x7a>
 8017ae0:	b570      	push	{r4, r5, r6, lr}
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	6800      	ldr	r0, [r0, #0]
 8017ae6:	b388      	cbz	r0, 8017b4c <rcl_action_take_result_request+0x70>
 8017ae8:	460e      	mov	r6, r1
 8017aea:	4615      	mov	r5, r2
 8017aec:	f7fe fabe 	bl	801606c <rcl_service_is_valid>
 8017af0:	b338      	cbz	r0, 8017b42 <rcl_action_take_result_request+0x66>
 8017af2:	6820      	ldr	r0, [r4, #0]
 8017af4:	3004      	adds	r0, #4
 8017af6:	f7fe fab9 	bl	801606c <rcl_service_is_valid>
 8017afa:	b310      	cbz	r0, 8017b42 <rcl_action_take_result_request+0x66>
 8017afc:	6820      	ldr	r0, [r4, #0]
 8017afe:	3008      	adds	r0, #8
 8017b00:	f7fe fab4 	bl	801606c <rcl_service_is_valid>
 8017b04:	b1e8      	cbz	r0, 8017b42 <rcl_action_take_result_request+0x66>
 8017b06:	6820      	ldr	r0, [r4, #0]
 8017b08:	300c      	adds	r0, #12
 8017b0a:	f7f6 fb01 	bl	800e110 <rcl_publisher_is_valid>
 8017b0e:	b1c0      	cbz	r0, 8017b42 <rcl_action_take_result_request+0x66>
 8017b10:	6820      	ldr	r0, [r4, #0]
 8017b12:	3010      	adds	r0, #16
 8017b14:	f7f6 fafc 	bl	800e110 <rcl_publisher_is_valid>
 8017b18:	b198      	cbz	r0, 8017b42 <rcl_action_take_result_request+0x66>
 8017b1a:	b1d5      	cbz	r5, 8017b52 <rcl_action_take_result_request+0x76>
 8017b1c:	b1ce      	cbz	r6, 8017b52 <rcl_action_take_result_request+0x76>
 8017b1e:	6820      	ldr	r0, [r4, #0]
 8017b20:	462a      	mov	r2, r5
 8017b22:	4631      	mov	r1, r6
 8017b24:	3008      	adds	r0, #8
 8017b26:	f7fe fa49 	bl	8015fbc <rcl_take_request>
 8017b2a:	b148      	cbz	r0, 8017b40 <rcl_action_take_result_request+0x64>
 8017b2c:	280a      	cmp	r0, #10
 8017b2e:	d007      	beq.n	8017b40 <rcl_action_take_result_request+0x64>
 8017b30:	f240 2259 	movw	r2, #601	@ 0x259
 8017b34:	f640 0399 	movw	r3, #2201	@ 0x899
 8017b38:	4290      	cmp	r0, r2
 8017b3a:	bf0c      	ite	eq
 8017b3c:	4618      	moveq	r0, r3
 8017b3e:	2001      	movne	r0, #1
 8017b40:	bd70      	pop	{r4, r5, r6, pc}
 8017b42:	f7f7 fa79 	bl	800f038 <rcutils_reset_error>
 8017b46:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b4a:	bd70      	pop	{r4, r5, r6, pc}
 8017b4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b50:	bd70      	pop	{r4, r5, r6, pc}
 8017b52:	200b      	movs	r0, #11
 8017b54:	bd70      	pop	{r4, r5, r6, pc}
 8017b56:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b5a:	4770      	bx	lr

08017b5c <rcl_action_take_cancel_request>:
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	d03a      	beq.n	8017bd6 <rcl_action_take_cancel_request+0x7a>
 8017b60:	b570      	push	{r4, r5, r6, lr}
 8017b62:	4604      	mov	r4, r0
 8017b64:	6800      	ldr	r0, [r0, #0]
 8017b66:	b388      	cbz	r0, 8017bcc <rcl_action_take_cancel_request+0x70>
 8017b68:	460e      	mov	r6, r1
 8017b6a:	4615      	mov	r5, r2
 8017b6c:	f7fe fa7e 	bl	801606c <rcl_service_is_valid>
 8017b70:	b338      	cbz	r0, 8017bc2 <rcl_action_take_cancel_request+0x66>
 8017b72:	6820      	ldr	r0, [r4, #0]
 8017b74:	3004      	adds	r0, #4
 8017b76:	f7fe fa79 	bl	801606c <rcl_service_is_valid>
 8017b7a:	b310      	cbz	r0, 8017bc2 <rcl_action_take_cancel_request+0x66>
 8017b7c:	6820      	ldr	r0, [r4, #0]
 8017b7e:	3008      	adds	r0, #8
 8017b80:	f7fe fa74 	bl	801606c <rcl_service_is_valid>
 8017b84:	b1e8      	cbz	r0, 8017bc2 <rcl_action_take_cancel_request+0x66>
 8017b86:	6820      	ldr	r0, [r4, #0]
 8017b88:	300c      	adds	r0, #12
 8017b8a:	f7f6 fac1 	bl	800e110 <rcl_publisher_is_valid>
 8017b8e:	b1c0      	cbz	r0, 8017bc2 <rcl_action_take_cancel_request+0x66>
 8017b90:	6820      	ldr	r0, [r4, #0]
 8017b92:	3010      	adds	r0, #16
 8017b94:	f7f6 fabc 	bl	800e110 <rcl_publisher_is_valid>
 8017b98:	b198      	cbz	r0, 8017bc2 <rcl_action_take_cancel_request+0x66>
 8017b9a:	b1d5      	cbz	r5, 8017bd2 <rcl_action_take_cancel_request+0x76>
 8017b9c:	b1ce      	cbz	r6, 8017bd2 <rcl_action_take_cancel_request+0x76>
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	462a      	mov	r2, r5
 8017ba2:	4631      	mov	r1, r6
 8017ba4:	3004      	adds	r0, #4
 8017ba6:	f7fe fa09 	bl	8015fbc <rcl_take_request>
 8017baa:	b148      	cbz	r0, 8017bc0 <rcl_action_take_cancel_request+0x64>
 8017bac:	280a      	cmp	r0, #10
 8017bae:	d007      	beq.n	8017bc0 <rcl_action_take_cancel_request+0x64>
 8017bb0:	f240 2259 	movw	r2, #601	@ 0x259
 8017bb4:	f640 0399 	movw	r3, #2201	@ 0x899
 8017bb8:	4290      	cmp	r0, r2
 8017bba:	bf0c      	ite	eq
 8017bbc:	4618      	moveq	r0, r3
 8017bbe:	2001      	movne	r0, #1
 8017bc0:	bd70      	pop	{r4, r5, r6, pc}
 8017bc2:	f7f7 fa39 	bl	800f038 <rcutils_reset_error>
 8017bc6:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bca:	bd70      	pop	{r4, r5, r6, pc}
 8017bcc:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bd0:	bd70      	pop	{r4, r5, r6, pc}
 8017bd2:	200b      	movs	r0, #11
 8017bd4:	bd70      	pop	{r4, r5, r6, pc}
 8017bd6:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bda:	4770      	bx	lr

08017bdc <rcl_action_send_cancel_response>:
 8017bdc:	b398      	cbz	r0, 8017c46 <rcl_action_send_cancel_response+0x6a>
 8017bde:	b570      	push	{r4, r5, r6, lr}
 8017be0:	4604      	mov	r4, r0
 8017be2:	6800      	ldr	r0, [r0, #0]
 8017be4:	b350      	cbz	r0, 8017c3c <rcl_action_send_cancel_response+0x60>
 8017be6:	460e      	mov	r6, r1
 8017be8:	4615      	mov	r5, r2
 8017bea:	f7fe fa3f 	bl	801606c <rcl_service_is_valid>
 8017bee:	b300      	cbz	r0, 8017c32 <rcl_action_send_cancel_response+0x56>
 8017bf0:	6820      	ldr	r0, [r4, #0]
 8017bf2:	3004      	adds	r0, #4
 8017bf4:	f7fe fa3a 	bl	801606c <rcl_service_is_valid>
 8017bf8:	b1d8      	cbz	r0, 8017c32 <rcl_action_send_cancel_response+0x56>
 8017bfa:	6820      	ldr	r0, [r4, #0]
 8017bfc:	3008      	adds	r0, #8
 8017bfe:	f7fe fa35 	bl	801606c <rcl_service_is_valid>
 8017c02:	b1b0      	cbz	r0, 8017c32 <rcl_action_send_cancel_response+0x56>
 8017c04:	6820      	ldr	r0, [r4, #0]
 8017c06:	300c      	adds	r0, #12
 8017c08:	f7f6 fa82 	bl	800e110 <rcl_publisher_is_valid>
 8017c0c:	b188      	cbz	r0, 8017c32 <rcl_action_send_cancel_response+0x56>
 8017c0e:	6820      	ldr	r0, [r4, #0]
 8017c10:	3010      	adds	r0, #16
 8017c12:	f7f6 fa7d 	bl	800e110 <rcl_publisher_is_valid>
 8017c16:	b160      	cbz	r0, 8017c32 <rcl_action_send_cancel_response+0x56>
 8017c18:	b19d      	cbz	r5, 8017c42 <rcl_action_send_cancel_response+0x66>
 8017c1a:	b196      	cbz	r6, 8017c42 <rcl_action_send_cancel_response+0x66>
 8017c1c:	6820      	ldr	r0, [r4, #0]
 8017c1e:	462a      	mov	r2, r5
 8017c20:	4631      	mov	r1, r6
 8017c22:	3004      	adds	r0, #4
 8017c24:	f7fe fa0a 	bl	801603c <rcl_send_response>
 8017c28:	b110      	cbz	r0, 8017c30 <rcl_action_send_cancel_response+0x54>
 8017c2a:	2802      	cmp	r0, #2
 8017c2c:	bf18      	it	ne
 8017c2e:	2001      	movne	r0, #1
 8017c30:	bd70      	pop	{r4, r5, r6, pc}
 8017c32:	f7f7 fa01 	bl	800f038 <rcutils_reset_error>
 8017c36:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c40:	bd70      	pop	{r4, r5, r6, pc}
 8017c42:	200b      	movs	r0, #11
 8017c44:	bd70      	pop	{r4, r5, r6, pc}
 8017c46:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c4a:	4770      	bx	lr

08017c4c <rcl_action_wait_set_add_action_server>:
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d04d      	beq.n	8017cec <rcl_action_wait_set_add_action_server+0xa0>
 8017c50:	b570      	push	{r4, r5, r6, lr}
 8017c52:	460c      	mov	r4, r1
 8017c54:	b159      	cbz	r1, 8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c56:	4605      	mov	r5, r0
 8017c58:	6808      	ldr	r0, [r1, #0]
 8017c5a:	b140      	cbz	r0, 8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c5c:	4616      	mov	r6, r2
 8017c5e:	f7fe fa05 	bl	801606c <rcl_service_is_valid>
 8017c62:	b120      	cbz	r0, 8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c64:	6820      	ldr	r0, [r4, #0]
 8017c66:	3004      	adds	r0, #4
 8017c68:	f7fe fa00 	bl	801606c <rcl_service_is_valid>
 8017c6c:	b910      	cbnz	r0, 8017c74 <rcl_action_wait_set_add_action_server+0x28>
 8017c6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c72:	bd70      	pop	{r4, r5, r6, pc}
 8017c74:	6820      	ldr	r0, [r4, #0]
 8017c76:	3008      	adds	r0, #8
 8017c78:	f7fe f9f8 	bl	801606c <rcl_service_is_valid>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	d0f6      	beq.n	8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c80:	6820      	ldr	r0, [r4, #0]
 8017c82:	300c      	adds	r0, #12
 8017c84:	f7f6 fa5c 	bl	800e140 <rcl_publisher_is_valid_except_context>
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d0f0      	beq.n	8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c8c:	6820      	ldr	r0, [r4, #0]
 8017c8e:	3010      	adds	r0, #16
 8017c90:	f7f6 fa56 	bl	800e140 <rcl_publisher_is_valid_except_context>
 8017c94:	2800      	cmp	r0, #0
 8017c96:	d0ea      	beq.n	8017c6e <rcl_action_wait_set_add_action_server+0x22>
 8017c98:	6821      	ldr	r1, [r4, #0]
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017ca0:	f7ff fad0 	bl	8017244 <rcl_wait_set_add_service>
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	d1e4      	bne.n	8017c72 <rcl_action_wait_set_add_action_server+0x26>
 8017ca8:	6821      	ldr	r1, [r4, #0]
 8017caa:	4628      	mov	r0, r5
 8017cac:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017cb0:	3104      	adds	r1, #4
 8017cb2:	f7ff fac7 	bl	8017244 <rcl_wait_set_add_service>
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d1db      	bne.n	8017c72 <rcl_action_wait_set_add_action_server+0x26>
 8017cba:	6821      	ldr	r1, [r4, #0]
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017cc2:	3108      	adds	r1, #8
 8017cc4:	f7ff fabe 	bl	8017244 <rcl_wait_set_add_service>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	d1d2      	bne.n	8017c72 <rcl_action_wait_set_add_action_server+0x26>
 8017ccc:	6821      	ldr	r1, [r4, #0]
 8017cce:	4628      	mov	r0, r5
 8017cd0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017cd4:	3114      	adds	r1, #20
 8017cd6:	f7ff fa59 	bl	801718c <rcl_wait_set_add_timer>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d1c9      	bne.n	8017c72 <rcl_action_wait_set_add_action_server+0x26>
 8017cde:	2e00      	cmp	r6, #0
 8017ce0:	d0c7      	beq.n	8017c72 <rcl_action_wait_set_add_action_server+0x26>
 8017ce2:	6823      	ldr	r3, [r4, #0]
 8017ce4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017ce8:	6033      	str	r3, [r6, #0]
 8017cea:	bd70      	pop	{r4, r5, r6, pc}
 8017cec:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cf0:	4770      	bx	lr
 8017cf2:	bf00      	nop

08017cf4 <rcl_action_server_wait_set_get_entities_ready>:
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	d067      	beq.n	8017dc8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8017cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cfc:	460c      	mov	r4, r1
 8017cfe:	b161      	cbz	r1, 8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d00:	4605      	mov	r5, r0
 8017d02:	6808      	ldr	r0, [r1, #0]
 8017d04:	b148      	cbz	r0, 8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d06:	4616      	mov	r6, r2
 8017d08:	4698      	mov	r8, r3
 8017d0a:	f7fe f9af 	bl	801606c <rcl_service_is_valid>
 8017d0e:	b120      	cbz	r0, 8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d10:	6820      	ldr	r0, [r4, #0]
 8017d12:	3004      	adds	r0, #4
 8017d14:	f7fe f9aa 	bl	801606c <rcl_service_is_valid>
 8017d18:	b918      	cbnz	r0, 8017d22 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8017d1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d22:	6820      	ldr	r0, [r4, #0]
 8017d24:	3008      	adds	r0, #8
 8017d26:	f7fe f9a1 	bl	801606c <rcl_service_is_valid>
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	d0f5      	beq.n	8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d2e:	6820      	ldr	r0, [r4, #0]
 8017d30:	300c      	adds	r0, #12
 8017d32:	f7f6 fa05 	bl	800e140 <rcl_publisher_is_valid_except_context>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	d0ef      	beq.n	8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d3a:	6820      	ldr	r0, [r4, #0]
 8017d3c:	3010      	adds	r0, #16
 8017d3e:	f7f6 f9ff 	bl	800e140 <rcl_publisher_is_valid_except_context>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d0e9      	beq.n	8017d1a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017d4a:	2a00      	cmp	r2, #0
 8017d4c:	bf18      	it	ne
 8017d4e:	2b00      	cmpne	r3, #0
 8017d50:	bf0c      	ite	eq
 8017d52:	2101      	moveq	r1, #1
 8017d54:	2100      	movne	r1, #0
 8017d56:	f1b8 0f00 	cmp.w	r8, #0
 8017d5a:	bf08      	it	eq
 8017d5c:	f041 0101 	orreq.w	r1, r1, #1
 8017d60:	bba9      	cbnz	r1, 8017dce <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017d62:	b3a6      	cbz	r6, 8017dce <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017d64:	6821      	ldr	r1, [r4, #0]
 8017d66:	2000      	movs	r0, #0
 8017d68:	692c      	ldr	r4, [r5, #16]
 8017d6a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8017d6e:	6a2f      	ldr	r7, [r5, #32]
 8017d70:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017d74:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8017d78:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017d7c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8017d80:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8017d84:	1a64      	subs	r4, r4, r1
 8017d86:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8017d8a:	fab4 f484 	clz	r4, r4
 8017d8e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017d92:	0964      	lsrs	r4, r4, #5
 8017d94:	7034      	strb	r4, [r6, #0]
 8017d96:	1d0c      	adds	r4, r1, #4
 8017d98:	1b2c      	subs	r4, r5, r4
 8017d9a:	fab4 f484 	clz	r4, r4
 8017d9e:	0964      	lsrs	r4, r4, #5
 8017da0:	f888 4000 	strb.w	r4, [r8]
 8017da4:	f101 0408 	add.w	r4, r1, #8
 8017da8:	1b1b      	subs	r3, r3, r4
 8017daa:	9c06      	ldr	r4, [sp, #24]
 8017dac:	fab3 f383 	clz	r3, r3
 8017db0:	095b      	lsrs	r3, r3, #5
 8017db2:	7023      	strb	r3, [r4, #0]
 8017db4:	f101 0314 	add.w	r3, r1, #20
 8017db8:	1ad3      	subs	r3, r2, r3
 8017dba:	9a07      	ldr	r2, [sp, #28]
 8017dbc:	fab3 f383 	clz	r3, r3
 8017dc0:	095b      	lsrs	r3, r3, #5
 8017dc2:	7013      	strb	r3, [r2, #0]
 8017dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dc8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017dcc:	4770      	bx	lr
 8017dce:	200b      	movs	r0, #11
 8017dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017dd4 <_execute_event_handler>:
 8017dd4:	2002      	movs	r0, #2
 8017dd6:	4770      	bx	lr

08017dd8 <_cancel_goal_event_handler>:
 8017dd8:	2003      	movs	r0, #3
 8017dda:	4770      	bx	lr

08017ddc <_succeed_event_handler>:
 8017ddc:	2004      	movs	r0, #4
 8017dde:	4770      	bx	lr

08017de0 <_abort_event_handler>:
 8017de0:	2006      	movs	r0, #6
 8017de2:	4770      	bx	lr

08017de4 <_canceled_event_handler>:
 8017de4:	2005      	movs	r0, #5
 8017de6:	4770      	bx	lr

08017de8 <rcl_action_transition_goal_state>:
 8017de8:	b2c2      	uxtb	r2, r0
 8017dea:	2a06      	cmp	r2, #6
 8017dec:	d810      	bhi.n	8017e10 <rcl_action_transition_goal_state+0x28>
 8017dee:	2904      	cmp	r1, #4
 8017df0:	d80e      	bhi.n	8017e10 <rcl_action_transition_goal_state+0x28>
 8017df2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017df6:	b410      	push	{r4}
 8017df8:	1853      	adds	r3, r2, r1
 8017dfa:	4c06      	ldr	r4, [pc, #24]	@ (8017e14 <rcl_action_transition_goal_state+0x2c>)
 8017dfc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017e00:	b113      	cbz	r3, 8017e08 <rcl_action_transition_goal_state+0x20>
 8017e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e06:	4718      	bx	r3
 8017e08:	2000      	movs	r0, #0
 8017e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e0e:	4770      	bx	lr
 8017e10:	2000      	movs	r0, #0
 8017e12:	4770      	bx	lr
 8017e14:	0801cf2c 	.word	0x0801cf2c

08017e18 <rcl_action_get_zero_initialized_cancel_response>:
 8017e18:	b510      	push	{r4, lr}
 8017e1a:	4c07      	ldr	r4, [pc, #28]	@ (8017e38 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017e1c:	4686      	mov	lr, r0
 8017e1e:	4684      	mov	ip, r0
 8017e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e2c:	6823      	ldr	r3, [r4, #0]
 8017e2e:	4670      	mov	r0, lr
 8017e30:	f8cc 3000 	str.w	r3, [ip]
 8017e34:	bd10      	pop	{r4, pc}
 8017e36:	bf00      	nop
 8017e38:	0801cfb8 	.word	0x0801cfb8

08017e3c <rclc_action_send_result_request>:
 8017e3c:	b1d0      	cbz	r0, 8017e74 <rclc_action_send_result_request+0x38>
 8017e3e:	4684      	mov	ip, r0
 8017e40:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017e44:	b500      	push	{lr}
 8017e46:	b087      	sub	sp, #28
 8017e48:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017e4c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017e50:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017e54:	f10d 0e08 	add.w	lr, sp, #8
 8017e58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017e5c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017e60:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8017e64:	a902      	add	r1, sp, #8
 8017e66:	3010      	adds	r0, #16
 8017e68:	f7ff fbca 	bl	8017600 <rcl_action_send_result_request>
 8017e6c:	b920      	cbnz	r0, 8017e78 <rclc_action_send_result_request+0x3c>
 8017e6e:	b007      	add	sp, #28
 8017e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e74:	200b      	movs	r0, #11
 8017e76:	4770      	bx	lr
 8017e78:	9001      	str	r0, [sp, #4]
 8017e7a:	f7f7 f8dd 	bl	800f038 <rcutils_reset_error>
 8017e7e:	9801      	ldr	r0, [sp, #4]
 8017e80:	b007      	add	sp, #28
 8017e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e86:	bf00      	nop

08017e88 <rclc_action_take_goal_handle>:
 8017e88:	b160      	cbz	r0, 8017ea4 <rclc_action_take_goal_handle+0x1c>
 8017e8a:	6883      	ldr	r3, [r0, #8]
 8017e8c:	b143      	cbz	r3, 8017ea0 <rclc_action_take_goal_handle+0x18>
 8017e8e:	6819      	ldr	r1, [r3, #0]
 8017e90:	2200      	movs	r2, #0
 8017e92:	6081      	str	r1, [r0, #8]
 8017e94:	721a      	strb	r2, [r3, #8]
 8017e96:	68c1      	ldr	r1, [r0, #12]
 8017e98:	621a      	str	r2, [r3, #32]
 8017e9a:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017e9c:	6019      	str	r1, [r3, #0]
 8017e9e:	60c3      	str	r3, [r0, #12]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	4770      	bx	lr
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	e7fb      	b.n	8017ea0 <rclc_action_take_goal_handle+0x18>

08017ea8 <rclc_action_remove_used_goal_handle>:
 8017ea8:	b180      	cbz	r0, 8017ecc <rclc_action_remove_used_goal_handle+0x24>
 8017eaa:	b179      	cbz	r1, 8017ecc <rclc_action_remove_used_goal_handle+0x24>
 8017eac:	68c3      	ldr	r3, [r0, #12]
 8017eae:	4299      	cmp	r1, r3
 8017eb0:	d00d      	beq.n	8017ece <rclc_action_remove_used_goal_handle+0x26>
 8017eb2:	b12b      	cbz	r3, 8017ec0 <rclc_action_remove_used_goal_handle+0x18>
 8017eb4:	681a      	ldr	r2, [r3, #0]
 8017eb6:	4291      	cmp	r1, r2
 8017eb8:	d003      	beq.n	8017ec2 <rclc_action_remove_used_goal_handle+0x1a>
 8017eba:	4613      	mov	r3, r2
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d1f9      	bne.n	8017eb4 <rclc_action_remove_used_goal_handle+0xc>
 8017ec0:	4770      	bx	lr
 8017ec2:	680a      	ldr	r2, [r1, #0]
 8017ec4:	601a      	str	r2, [r3, #0]
 8017ec6:	6883      	ldr	r3, [r0, #8]
 8017ec8:	600b      	str	r3, [r1, #0]
 8017eca:	6081      	str	r1, [r0, #8]
 8017ecc:	4770      	bx	lr
 8017ece:	680b      	ldr	r3, [r1, #0]
 8017ed0:	60c3      	str	r3, [r0, #12]
 8017ed2:	e7f8      	b.n	8017ec6 <rclc_action_remove_used_goal_handle+0x1e>

08017ed4 <rclc_action_find_goal_handle_by_uuid>:
 8017ed4:	b538      	push	{r3, r4, r5, lr}
 8017ed6:	b181      	cbz	r1, 8017efa <rclc_action_find_goal_handle_by_uuid+0x26>
 8017ed8:	b178      	cbz	r0, 8017efa <rclc_action_find_goal_handle_by_uuid+0x26>
 8017eda:	68c4      	ldr	r4, [r0, #12]
 8017edc:	460d      	mov	r5, r1
 8017ede:	b914      	cbnz	r4, 8017ee6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017ee0:	e009      	b.n	8017ef6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017ee2:	6824      	ldr	r4, [r4, #0]
 8017ee4:	b13c      	cbz	r4, 8017ef6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017ee6:	f104 0009 	add.w	r0, r4, #9
 8017eea:	2210      	movs	r2, #16
 8017eec:	4629      	mov	r1, r5
 8017eee:	f003 fd19 	bl	801b924 <memcmp>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d1f5      	bne.n	8017ee2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	bd38      	pop	{r3, r4, r5, pc}
 8017efa:	2400      	movs	r4, #0
 8017efc:	4620      	mov	r0, r4
 8017efe:	bd38      	pop	{r3, r4, r5, pc}

08017f00 <rclc_action_find_first_handle_by_status>:
 8017f00:	b140      	cbz	r0, 8017f14 <rclc_action_find_first_handle_by_status+0x14>
 8017f02:	68c0      	ldr	r0, [r0, #12]
 8017f04:	b910      	cbnz	r0, 8017f0c <rclc_action_find_first_handle_by_status+0xc>
 8017f06:	e005      	b.n	8017f14 <rclc_action_find_first_handle_by_status+0x14>
 8017f08:	6800      	ldr	r0, [r0, #0]
 8017f0a:	b118      	cbz	r0, 8017f14 <rclc_action_find_first_handle_by_status+0x14>
 8017f0c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017f10:	428b      	cmp	r3, r1
 8017f12:	d1f9      	bne.n	8017f08 <rclc_action_find_first_handle_by_status+0x8>
 8017f14:	4770      	bx	lr
 8017f16:	bf00      	nop

08017f18 <rclc_action_find_first_terminated_handle>:
 8017f18:	b140      	cbz	r0, 8017f2c <rclc_action_find_first_terminated_handle+0x14>
 8017f1a:	68c0      	ldr	r0, [r0, #12]
 8017f1c:	b910      	cbnz	r0, 8017f24 <rclc_action_find_first_terminated_handle+0xc>
 8017f1e:	e005      	b.n	8017f2c <rclc_action_find_first_terminated_handle+0x14>
 8017f20:	6800      	ldr	r0, [r0, #0]
 8017f22:	b118      	cbz	r0, 8017f2c <rclc_action_find_first_terminated_handle+0x14>
 8017f24:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017f28:	2b03      	cmp	r3, #3
 8017f2a:	ddf9      	ble.n	8017f20 <rclc_action_find_first_terminated_handle+0x8>
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop

08017f30 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017f30:	b170      	cbz	r0, 8017f50 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017f32:	68c0      	ldr	r0, [r0, #12]
 8017f34:	b160      	cbz	r0, 8017f50 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017f36:	b410      	push	{r4}
 8017f38:	e001      	b.n	8017f3e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017f3a:	6800      	ldr	r0, [r0, #0]
 8017f3c:	b128      	cbz	r0, 8017f4a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017f3e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8017f42:	4299      	cmp	r1, r3
 8017f44:	bf08      	it	eq
 8017f46:	4294      	cmpeq	r4, r2
 8017f48:	d1f7      	bne.n	8017f3a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f4e:	4770      	bx	lr
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop

08017f54 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017f54:	b170      	cbz	r0, 8017f74 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017f56:	68c0      	ldr	r0, [r0, #12]
 8017f58:	b160      	cbz	r0, 8017f74 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017f5a:	b410      	push	{r4}
 8017f5c:	e001      	b.n	8017f62 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8017f5e:	6800      	ldr	r0, [r0, #0]
 8017f60:	b128      	cbz	r0, 8017f6e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8017f62:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017f66:	4299      	cmp	r1, r3
 8017f68:	bf08      	it	eq
 8017f6a:	4294      	cmpeq	r4, r2
 8017f6c:	d1f7      	bne.n	8017f5e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8017f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f72:	4770      	bx	lr
 8017f74:	4770      	bx	lr
 8017f76:	bf00      	nop

08017f78 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017f78:	b170      	cbz	r0, 8017f98 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017f7a:	68c0      	ldr	r0, [r0, #12]
 8017f7c:	b160      	cbz	r0, 8017f98 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017f7e:	b410      	push	{r4}
 8017f80:	e001      	b.n	8017f86 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8017f82:	6800      	ldr	r0, [r0, #0]
 8017f84:	b128      	cbz	r0, 8017f92 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017f86:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017f8a:	4299      	cmp	r1, r3
 8017f8c:	bf08      	it	eq
 8017f8e:	4294      	cmpeq	r4, r2
 8017f90:	d1f7      	bne.n	8017f82 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8017f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	4770      	bx	lr
 8017f9a:	bf00      	nop

08017f9c <rclc_action_find_first_handle_with_goal_response>:
 8017f9c:	b140      	cbz	r0, 8017fb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017f9e:	68c0      	ldr	r0, [r0, #12]
 8017fa0:	b910      	cbnz	r0, 8017fa8 <rclc_action_find_first_handle_with_goal_response+0xc>
 8017fa2:	e005      	b.n	8017fb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017fa4:	6800      	ldr	r0, [r0, #0]
 8017fa6:	b118      	cbz	r0, 8017fb0 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017fa8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d0f9      	beq.n	8017fa4 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017fb0:	4770      	bx	lr
 8017fb2:	bf00      	nop

08017fb4 <rclc_action_find_first_handle_with_result_response>:
 8017fb4:	b140      	cbz	r0, 8017fc8 <rclc_action_find_first_handle_with_result_response+0x14>
 8017fb6:	68c0      	ldr	r0, [r0, #12]
 8017fb8:	b910      	cbnz	r0, 8017fc0 <rclc_action_find_first_handle_with_result_response+0xc>
 8017fba:	e005      	b.n	8017fc8 <rclc_action_find_first_handle_with_result_response+0x14>
 8017fbc:	6800      	ldr	r0, [r0, #0]
 8017fbe:	b118      	cbz	r0, 8017fc8 <rclc_action_find_first_handle_with_result_response+0x14>
 8017fc0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d0f9      	beq.n	8017fbc <rclc_action_find_first_handle_with_result_response+0x8>
 8017fc8:	4770      	bx	lr
 8017fca:	bf00      	nop

08017fcc <rclc_action_server_response_goal_request>:
 8017fcc:	b198      	cbz	r0, 8017ff6 <rclc_action_server_response_goal_request+0x2a>
 8017fce:	2200      	movs	r2, #0
 8017fd0:	460b      	mov	r3, r1
 8017fd2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8017fd6:	b510      	push	{r4, lr}
 8017fd8:	6844      	ldr	r4, [r0, #4]
 8017fda:	b086      	sub	sp, #24
 8017fdc:	f104 0010 	add.w	r0, r4, #16
 8017fe0:	9205      	str	r2, [sp, #20]
 8017fe2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017fe6:	aa03      	add	r2, sp, #12
 8017fe8:	f88d 300c 	strb.w	r3, [sp, #12]
 8017fec:	f7ff fd3e 	bl	8017a6c <rcl_action_send_goal_response>
 8017ff0:	b918      	cbnz	r0, 8017ffa <rclc_action_server_response_goal_request+0x2e>
 8017ff2:	b006      	add	sp, #24
 8017ff4:	bd10      	pop	{r4, pc}
 8017ff6:	200b      	movs	r0, #11
 8017ff8:	4770      	bx	lr
 8017ffa:	9001      	str	r0, [sp, #4]
 8017ffc:	f7f7 f81c 	bl	800f038 <rcutils_reset_error>
 8018000:	9801      	ldr	r0, [sp, #4]
 8018002:	b006      	add	sp, #24
 8018004:	bd10      	pop	{r4, pc}
 8018006:	bf00      	nop

08018008 <rclc_action_server_goal_cancel_accept>:
 8018008:	b310      	cbz	r0, 8018050 <rclc_action_server_goal_cancel_accept+0x48>
 801800a:	b510      	push	{r4, lr}
 801800c:	b090      	sub	sp, #64	@ 0x40
 801800e:	4604      	mov	r4, r0
 8018010:	a806      	add	r0, sp, #24
 8018012:	f7ff ff01 	bl	8017e18 <rcl_action_get_zero_initialized_cancel_response>
 8018016:	2300      	movs	r3, #0
 8018018:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801801c:	46ec      	mov	ip, sp
 801801e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018022:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018026:	f88d 3018 	strb.w	r3, [sp, #24]
 801802a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801802e:	f8cd d01c 	str.w	sp, [sp, #28]
 8018032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018036:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018058 <rclc_action_server_goal_cancel_accept+0x50>
 801803a:	6860      	ldr	r0, [r4, #4]
 801803c:	aa06      	add	r2, sp, #24
 801803e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018042:	3010      	adds	r0, #16
 8018044:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018048:	f7ff fdc8 	bl	8017bdc <rcl_action_send_cancel_response>
 801804c:	b010      	add	sp, #64	@ 0x40
 801804e:	bd10      	pop	{r4, pc}
 8018050:	200b      	movs	r0, #11
 8018052:	4770      	bx	lr
 8018054:	f3af 8000 	nop.w
 8018058:	00000001 	.word	0x00000001
 801805c:	00000001 	.word	0x00000001

08018060 <rclc_action_server_goal_cancel_reject>:
 8018060:	b082      	sub	sp, #8
 8018062:	b530      	push	{r4, r5, lr}
 8018064:	b08b      	sub	sp, #44	@ 0x2c
 8018066:	ac0e      	add	r4, sp, #56	@ 0x38
 8018068:	e884 000c 	stmia.w	r4, {r2, r3}
 801806c:	b188      	cbz	r0, 8018092 <rclc_action_server_goal_cancel_reject+0x32>
 801806e:	4604      	mov	r4, r0
 8018070:	a801      	add	r0, sp, #4
 8018072:	460d      	mov	r5, r1
 8018074:	f7ff fed0 	bl	8017e18 <rcl_action_get_zero_initialized_cancel_response>
 8018078:	aa01      	add	r2, sp, #4
 801807a:	a90e      	add	r1, sp, #56	@ 0x38
 801807c:	f104 0010 	add.w	r0, r4, #16
 8018080:	f88d 5004 	strb.w	r5, [sp, #4]
 8018084:	f7ff fdaa 	bl	8017bdc <rcl_action_send_cancel_response>
 8018088:	b00b      	add	sp, #44	@ 0x2c
 801808a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801808e:	b002      	add	sp, #8
 8018090:	4770      	bx	lr
 8018092:	200b      	movs	r0, #11
 8018094:	b00b      	add	sp, #44	@ 0x2c
 8018096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801809a:	b002      	add	sp, #8
 801809c:	4770      	bx	lr
 801809e:	bf00      	nop

080180a0 <__atomic_load_8>:
 80180a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80180a4:	4a16      	ldr	r2, [pc, #88]	@ (8018100 <__atomic_load_8+0x60>)
 80180a6:	4b17      	ldr	r3, [pc, #92]	@ (8018104 <__atomic_load_8+0x64>)
 80180a8:	f04f 0c01 	mov.w	ip, #1
 80180ac:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80180b0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80180b4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80180b8:	fb02 f101 	mul.w	r1, r2, r1
 80180bc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80180c0:	fba3 2301 	umull	r2, r3, r3, r1
 80180c4:	091b      	lsrs	r3, r3, #4
 80180c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80180ca:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80180ce:	b4d0      	push	{r4, r6, r7}
 80180d0:	1ac9      	subs	r1, r1, r3
 80180d2:	4c0d      	ldr	r4, [pc, #52]	@ (8018108 <__atomic_load_8+0x68>)
 80180d4:	1862      	adds	r2, r4, r1
 80180d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80180da:	e8c2 cf46 	strexb	r6, ip, [r2]
 80180de:	2e00      	cmp	r6, #0
 80180e0:	d1f9      	bne.n	80180d6 <__atomic_load_8+0x36>
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	f3bf 8f5b 	dmb	ish
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d1f4      	bne.n	80180d6 <__atomic_load_8+0x36>
 80180ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80180f0:	f3bf 8f5b 	dmb	ish
 80180f4:	5463      	strb	r3, [r4, r1]
 80180f6:	4630      	mov	r0, r6
 80180f8:	4639      	mov	r1, r7
 80180fa:	bcd0      	pop	{r4, r6, r7}
 80180fc:	4770      	bx	lr
 80180fe:	bf00      	nop
 8018100:	27d4eb2d 	.word	0x27d4eb2d
 8018104:	b21642c9 	.word	0xb21642c9
 8018108:	24012dec 	.word	0x24012dec

0801810c <__atomic_store_8>:
 801810c:	b570      	push	{r4, r5, r6, lr}
 801810e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018112:	4916      	ldr	r1, [pc, #88]	@ (801816c <__atomic_store_8+0x60>)
 8018114:	4c16      	ldr	r4, [pc, #88]	@ (8018170 <__atomic_store_8+0x64>)
 8018116:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801811a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801811e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018122:	fb01 fe0e 	mul.w	lr, r1, lr
 8018126:	4913      	ldr	r1, [pc, #76]	@ (8018174 <__atomic_store_8+0x68>)
 8018128:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801812c:	fba1 510e 	umull	r5, r1, r1, lr
 8018130:	f04f 0501 	mov.w	r5, #1
 8018134:	0909      	lsrs	r1, r1, #4
 8018136:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801813a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801813e:	ebae 0e01 	sub.w	lr, lr, r1
 8018142:	eb04 0c0e 	add.w	ip, r4, lr
 8018146:	e8dc 1f4f 	ldrexb	r1, [ip]
 801814a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801814e:	2e00      	cmp	r6, #0
 8018150:	d1f9      	bne.n	8018146 <__atomic_store_8+0x3a>
 8018152:	b2c9      	uxtb	r1, r1
 8018154:	f3bf 8f5b 	dmb	ish
 8018158:	2900      	cmp	r1, #0
 801815a:	d1f4      	bne.n	8018146 <__atomic_store_8+0x3a>
 801815c:	e9c0 2300 	strd	r2, r3, [r0]
 8018160:	f3bf 8f5b 	dmb	ish
 8018164:	f804 100e 	strb.w	r1, [r4, lr]
 8018168:	bd70      	pop	{r4, r5, r6, pc}
 801816a:	bf00      	nop
 801816c:	27d4eb2d 	.word	0x27d4eb2d
 8018170:	24012dec 	.word	0x24012dec
 8018174:	b21642c9 	.word	0xb21642c9

08018178 <__atomic_exchange_8>:
 8018178:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801817c:	4917      	ldr	r1, [pc, #92]	@ (80181dc <__atomic_exchange_8+0x64>)
 801817e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018182:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018186:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801818a:	fb01 fc0c 	mul.w	ip, r1, ip
 801818e:	4914      	ldr	r1, [pc, #80]	@ (80181e0 <__atomic_exchange_8+0x68>)
 8018190:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018194:	b570      	push	{r4, r5, r6, lr}
 8018196:	4686      	mov	lr, r0
 8018198:	fba1 010c 	umull	r0, r1, r1, ip
 801819c:	4d11      	ldr	r5, [pc, #68]	@ (80181e4 <__atomic_exchange_8+0x6c>)
 801819e:	f04f 0001 	mov.w	r0, #1
 80181a2:	0909      	lsrs	r1, r1, #4
 80181a4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80181a8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80181ac:	ebac 0c01 	sub.w	ip, ip, r1
 80181b0:	eb05 010c 	add.w	r1, r5, ip
 80181b4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80181b8:	e8c1 0f46 	strexb	r6, r0, [r1]
 80181bc:	2e00      	cmp	r6, #0
 80181be:	d1f9      	bne.n	80181b4 <__atomic_exchange_8+0x3c>
 80181c0:	b2e4      	uxtb	r4, r4
 80181c2:	f3bf 8f5b 	dmb	ish
 80181c6:	2c00      	cmp	r4, #0
 80181c8:	d1f4      	bne.n	80181b4 <__atomic_exchange_8+0x3c>
 80181ca:	e9de 0100 	ldrd	r0, r1, [lr]
 80181ce:	e9ce 2300 	strd	r2, r3, [lr]
 80181d2:	f3bf 8f5b 	dmb	ish
 80181d6:	f805 400c 	strb.w	r4, [r5, ip]
 80181da:	bd70      	pop	{r4, r5, r6, pc}
 80181dc:	27d4eb2d 	.word	0x27d4eb2d
 80181e0:	b21642c9 	.word	0xb21642c9
 80181e4:	24012dec 	.word	0x24012dec

080181e8 <rcutils_get_env>:
 80181e8:	b168      	cbz	r0, 8018206 <rcutils_get_env+0x1e>
 80181ea:	b510      	push	{r4, lr}
 80181ec:	460c      	mov	r4, r1
 80181ee:	b129      	cbz	r1, 80181fc <rcutils_get_env+0x14>
 80181f0:	f002 ff06 	bl	801b000 <getenv>
 80181f4:	b120      	cbz	r0, 8018200 <rcutils_get_env+0x18>
 80181f6:	6020      	str	r0, [r4, #0]
 80181f8:	2000      	movs	r0, #0
 80181fa:	bd10      	pop	{r4, pc}
 80181fc:	4803      	ldr	r0, [pc, #12]	@ (801820c <rcutils_get_env+0x24>)
 80181fe:	bd10      	pop	{r4, pc}
 8018200:	4b03      	ldr	r3, [pc, #12]	@ (8018210 <rcutils_get_env+0x28>)
 8018202:	6023      	str	r3, [r4, #0]
 8018204:	bd10      	pop	{r4, pc}
 8018206:	4803      	ldr	r0, [pc, #12]	@ (8018214 <rcutils_get_env+0x2c>)
 8018208:	4770      	bx	lr
 801820a:	bf00      	nop
 801820c:	0801cff8 	.word	0x0801cff8
 8018210:	0801d430 	.word	0x0801d430
 8018214:	0801cfdc 	.word	0x0801cfdc

08018218 <rcutils_is_directory>:
 8018218:	2000      	movs	r0, #0
 801821a:	4770      	bx	lr

0801821c <rcutils_join_path>:
 801821c:	b082      	sub	sp, #8
 801821e:	2000      	movs	r0, #0
 8018220:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018224:	b002      	add	sp, #8
 8018226:	4770      	bx	lr

08018228 <rcutils_to_native_path>:
 8018228:	b084      	sub	sp, #16
 801822a:	2000      	movs	r0, #0
 801822c:	f10d 0c04 	add.w	ip, sp, #4
 8018230:	b004      	add	sp, #16
 8018232:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018236:	4770      	bx	lr

08018238 <rcutils_format_string_limit>:
 8018238:	b40f      	push	{r0, r1, r2, r3}
 801823a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801823c:	b083      	sub	sp, #12
 801823e:	ac08      	add	r4, sp, #32
 8018240:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018246:	b326      	cbz	r6, 8018292 <rcutils_format_string_limit+0x5a>
 8018248:	a808      	add	r0, sp, #32
 801824a:	f7f6 fed1 	bl	800eff0 <rcutils_allocator_is_valid>
 801824e:	b300      	cbz	r0, 8018292 <rcutils_format_string_limit+0x5a>
 8018250:	2100      	movs	r1, #0
 8018252:	ab0f      	add	r3, sp, #60	@ 0x3c
 8018254:	4632      	mov	r2, r6
 8018256:	4608      	mov	r0, r1
 8018258:	e9cd 3300 	strd	r3, r3, [sp]
 801825c:	f000 f906 	bl	801846c <rcutils_vsnprintf>
 8018260:	1c43      	adds	r3, r0, #1
 8018262:	4605      	mov	r5, r0
 8018264:	d015      	beq.n	8018292 <rcutils_format_string_limit+0x5a>
 8018266:	1c47      	adds	r7, r0, #1
 8018268:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801826a:	429f      	cmp	r7, r3
 801826c:	d901      	bls.n	8018272 <rcutils_format_string_limit+0x3a>
 801826e:	1e5d      	subs	r5, r3, #1
 8018270:	461f      	mov	r7, r3
 8018272:	9b08      	ldr	r3, [sp, #32]
 8018274:	4638      	mov	r0, r7
 8018276:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018278:	4798      	blx	r3
 801827a:	4604      	mov	r4, r0
 801827c:	b148      	cbz	r0, 8018292 <rcutils_format_string_limit+0x5a>
 801827e:	4632      	mov	r2, r6
 8018280:	4639      	mov	r1, r7
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	f000 f8f2 	bl	801846c <rcutils_vsnprintf>
 8018288:	2800      	cmp	r0, #0
 801828a:	db09      	blt.n	80182a0 <rcutils_format_string_limit+0x68>
 801828c:	2300      	movs	r3, #0
 801828e:	5563      	strb	r3, [r4, r5]
 8018290:	e000      	b.n	8018294 <rcutils_format_string_limit+0x5c>
 8018292:	2400      	movs	r4, #0
 8018294:	4620      	mov	r0, r4
 8018296:	b003      	add	sp, #12
 8018298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801829c:	b004      	add	sp, #16
 801829e:	4770      	bx	lr
 80182a0:	4620      	mov	r0, r4
 80182a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80182a6:	2400      	movs	r4, #0
 80182a8:	4798      	blx	r3
 80182aa:	e7f3      	b.n	8018294 <rcutils_format_string_limit+0x5c>

080182ac <rcutils_repl_str>:
 80182ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182b0:	ed2d 8b02 	vpush	{d8}
 80182b4:	b087      	sub	sp, #28
 80182b6:	2600      	movs	r6, #0
 80182b8:	4680      	mov	r8, r0
 80182ba:	468a      	mov	sl, r1
 80182bc:	9000      	str	r0, [sp, #0]
 80182be:	4608      	mov	r0, r1
 80182c0:	ee08 2a10 	vmov	s16, r2
 80182c4:	4699      	mov	r9, r3
 80182c6:	2510      	movs	r5, #16
 80182c8:	f7e8 f814 	bl	80002f4 <strlen>
 80182cc:	4637      	mov	r7, r6
 80182ce:	46b3      	mov	fp, r6
 80182d0:	9001      	str	r0, [sp, #4]
 80182d2:	e01e      	b.n	8018312 <rcutils_repl_str+0x66>
 80182d4:	f10b 0b01 	add.w	fp, fp, #1
 80182d8:	9b01      	ldr	r3, [sp, #4]
 80182da:	455e      	cmp	r6, fp
 80182dc:	eb04 0803 	add.w	r8, r4, r3
 80182e0:	d211      	bcs.n	8018306 <rcutils_repl_str+0x5a>
 80182e2:	442e      	add	r6, r5
 80182e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80182e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80182ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182f0:	00b1      	lsls	r1, r6, #2
 80182f2:	4798      	blx	r3
 80182f4:	2800      	cmp	r0, #0
 80182f6:	f000 8088 	beq.w	801840a <rcutils_repl_str+0x15e>
 80182fa:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80182fe:	4607      	mov	r7, r0
 8018300:	bf28      	it	cs
 8018302:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8018306:	9a00      	ldr	r2, [sp, #0]
 8018308:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801830c:	1aa4      	subs	r4, r4, r2
 801830e:	f843 4c04 	str.w	r4, [r3, #-4]
 8018312:	4651      	mov	r1, sl
 8018314:	4640      	mov	r0, r8
 8018316:	f003 fb56 	bl	801b9c6 <strstr>
 801831a:	4604      	mov	r4, r0
 801831c:	4638      	mov	r0, r7
 801831e:	2c00      	cmp	r4, #0
 8018320:	d1d8      	bne.n	80182d4 <rcutils_repl_str+0x28>
 8018322:	4640      	mov	r0, r8
 8018324:	f7e7 ffe6 	bl	80002f4 <strlen>
 8018328:	9b00      	ldr	r3, [sp, #0]
 801832a:	eba8 0803 	sub.w	r8, r8, r3
 801832e:	eb08 0400 	add.w	r4, r8, r0
 8018332:	9402      	str	r4, [sp, #8]
 8018334:	f1bb 0f00 	cmp.w	fp, #0
 8018338:	d045      	beq.n	80183c6 <rcutils_repl_str+0x11a>
 801833a:	ee18 0a10 	vmov	r0, s16
 801833e:	f7e7 ffd9 	bl	80002f4 <strlen>
 8018342:	9a01      	ldr	r2, [sp, #4]
 8018344:	4606      	mov	r6, r0
 8018346:	f8d9 3000 	ldr.w	r3, [r9]
 801834a:	1a82      	subs	r2, r0, r2
 801834c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018350:	fb0b 4202 	mla	r2, fp, r2, r4
 8018354:	1c50      	adds	r0, r2, #1
 8018356:	9205      	str	r2, [sp, #20]
 8018358:	4798      	blx	r3
 801835a:	4682      	mov	sl, r0
 801835c:	2800      	cmp	r0, #0
 801835e:	d054      	beq.n	801840a <rcutils_repl_str+0x15e>
 8018360:	683a      	ldr	r2, [r7, #0]
 8018362:	463d      	mov	r5, r7
 8018364:	9900      	ldr	r1, [sp, #0]
 8018366:	2401      	movs	r4, #1
 8018368:	f003 fbcf 	bl	801bb0a <memcpy>
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018372:	eb0a 0803 	add.w	r8, sl, r3
 8018376:	ee18 7a10 	vmov	r7, s16
 801837a:	f8dd a000 	ldr.w	sl, [sp]
 801837e:	f8cd 9000 	str.w	r9, [sp]
 8018382:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018386:	4632      	mov	r2, r6
 8018388:	4639      	mov	r1, r7
 801838a:	4640      	mov	r0, r8
 801838c:	44b0      	add	r8, r6
 801838e:	f003 fbbc 	bl	801bb0a <memcpy>
 8018392:	f855 2b04 	ldr.w	r2, [r5], #4
 8018396:	45a3      	cmp	fp, r4
 8018398:	444a      	add	r2, r9
 801839a:	eb0a 0102 	add.w	r1, sl, r2
 801839e:	d02a      	beq.n	80183f6 <rcutils_repl_str+0x14a>
 80183a0:	6828      	ldr	r0, [r5, #0]
 80183a2:	1a82      	subs	r2, r0, r2
 80183a4:	4640      	mov	r0, r8
 80183a6:	4490      	add	r8, r2
 80183a8:	f003 fbaf 	bl	801bb0a <memcpy>
 80183ac:	1c62      	adds	r2, r4, #1
 80183ae:	45a3      	cmp	fp, r4
 80183b0:	4614      	mov	r4, r2
 80183b2:	d8e8      	bhi.n	8018386 <rcutils_repl_str+0xda>
 80183b4:	f8dd 9000 	ldr.w	r9, [sp]
 80183b8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80183bc:	2300      	movs	r3, #0
 80183be:	9a05      	ldr	r2, [sp, #20]
 80183c0:	f80a 3002 	strb.w	r3, [sl, r2]
 80183c4:	e00b      	b.n	80183de <rcutils_repl_str+0x132>
 80183c6:	4620      	mov	r0, r4
 80183c8:	f8d9 3000 	ldr.w	r3, [r9]
 80183cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80183d0:	3001      	adds	r0, #1
 80183d2:	4798      	blx	r3
 80183d4:	4682      	mov	sl, r0
 80183d6:	b110      	cbz	r0, 80183de <rcutils_repl_str+0x132>
 80183d8:	9900      	ldr	r1, [sp, #0]
 80183da:	f003 fb8e 	bl	801bafa <strcpy>
 80183de:	4638      	mov	r0, r7
 80183e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80183e4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80183e8:	4798      	blx	r3
 80183ea:	4650      	mov	r0, sl
 80183ec:	b007      	add	sp, #28
 80183ee:	ecbd 8b02 	vpop	{d8}
 80183f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f6:	9b02      	ldr	r3, [sp, #8]
 80183f8:	4640      	mov	r0, r8
 80183fa:	f8dd 9000 	ldr.w	r9, [sp]
 80183fe:	1a9a      	subs	r2, r3, r2
 8018400:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018404:	f003 fb81 	bl	801bb0a <memcpy>
 8018408:	e7d8      	b.n	80183bc <rcutils_repl_str+0x110>
 801840a:	f04f 0a00 	mov.w	sl, #0
 801840e:	e7e6      	b.n	80183de <rcutils_repl_str+0x132>

08018410 <rcutils_snprintf>:
 8018410:	b40c      	push	{r2, r3}
 8018412:	b530      	push	{r4, r5, lr}
 8018414:	b083      	sub	sp, #12
 8018416:	ab06      	add	r3, sp, #24
 8018418:	f853 2b04 	ldr.w	r2, [r3], #4
 801841c:	9301      	str	r3, [sp, #4]
 801841e:	b1e2      	cbz	r2, 801845a <rcutils_snprintf+0x4a>
 8018420:	fab0 f480 	clz	r4, r0
 8018424:	fab1 f581 	clz	r5, r1
 8018428:	ea50 0c01 	orrs.w	ip, r0, r1
 801842c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018430:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018434:	d008      	beq.n	8018448 <rcutils_snprintf+0x38>
 8018436:	b984      	cbnz	r4, 801845a <rcutils_snprintf+0x4a>
 8018438:	b97d      	cbnz	r5, 801845a <rcutils_snprintf+0x4a>
 801843a:	f003 f9d1 	bl	801b7e0 <vsniprintf>
 801843e:	b003      	add	sp, #12
 8018440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018444:	b002      	add	sp, #8
 8018446:	4770      	bx	lr
 8018448:	4661      	mov	r1, ip
 801844a:	4660      	mov	r0, ip
 801844c:	f003 f9c8 	bl	801b7e0 <vsniprintf>
 8018450:	b003      	add	sp, #12
 8018452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018456:	b002      	add	sp, #8
 8018458:	4770      	bx	lr
 801845a:	f003 fb21 	bl	801baa0 <__errno>
 801845e:	2216      	movs	r2, #22
 8018460:	4603      	mov	r3, r0
 8018462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018466:	601a      	str	r2, [r3, #0]
 8018468:	e7e9      	b.n	801843e <rcutils_snprintf+0x2e>
 801846a:	bf00      	nop

0801846c <rcutils_vsnprintf>:
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	b1b2      	cbz	r2, 801849e <rcutils_vsnprintf+0x32>
 8018470:	fab0 f480 	clz	r4, r0
 8018474:	fab1 f581 	clz	r5, r1
 8018478:	ea50 0c01 	orrs.w	ip, r0, r1
 801847c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018480:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018484:	d005      	beq.n	8018492 <rcutils_vsnprintf+0x26>
 8018486:	b954      	cbnz	r4, 801849e <rcutils_vsnprintf+0x32>
 8018488:	b94d      	cbnz	r5, 801849e <rcutils_vsnprintf+0x32>
 801848a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801848e:	f003 b9a7 	b.w	801b7e0 <vsniprintf>
 8018492:	4661      	mov	r1, ip
 8018494:	4660      	mov	r0, ip
 8018496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801849a:	f003 b9a1 	b.w	801b7e0 <vsniprintf>
 801849e:	f003 faff 	bl	801baa0 <__errno>
 80184a2:	2316      	movs	r3, #22
 80184a4:	6003      	str	r3, [r0, #0]
 80184a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184aa:	bd70      	pop	{r4, r5, r6, pc}

080184ac <rcutils_strdup>:
 80184ac:	b084      	sub	sp, #16
 80184ae:	b570      	push	{r4, r5, r6, lr}
 80184b0:	b082      	sub	sp, #8
 80184b2:	4605      	mov	r5, r0
 80184b4:	ac07      	add	r4, sp, #28
 80184b6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80184ba:	b1b0      	cbz	r0, 80184ea <rcutils_strdup+0x3e>
 80184bc:	f7e7 ff1a 	bl	80002f4 <strlen>
 80184c0:	1c42      	adds	r2, r0, #1
 80184c2:	9b07      	ldr	r3, [sp, #28]
 80184c4:	4606      	mov	r6, r0
 80184c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80184c8:	4610      	mov	r0, r2
 80184ca:	9201      	str	r2, [sp, #4]
 80184cc:	4798      	blx	r3
 80184ce:	4604      	mov	r4, r0
 80184d0:	b128      	cbz	r0, 80184de <rcutils_strdup+0x32>
 80184d2:	9a01      	ldr	r2, [sp, #4]
 80184d4:	4629      	mov	r1, r5
 80184d6:	f003 fb18 	bl	801bb0a <memcpy>
 80184da:	2300      	movs	r3, #0
 80184dc:	55a3      	strb	r3, [r4, r6]
 80184de:	4620      	mov	r0, r4
 80184e0:	b002      	add	sp, #8
 80184e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184e6:	b004      	add	sp, #16
 80184e8:	4770      	bx	lr
 80184ea:	4604      	mov	r4, r0
 80184ec:	e7f7      	b.n	80184de <rcutils_strdup+0x32>
 80184ee:	bf00      	nop

080184f0 <rcutils_strndup>:
 80184f0:	b082      	sub	sp, #8
 80184f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184f4:	ac06      	add	r4, sp, #24
 80184f6:	4605      	mov	r5, r0
 80184f8:	e884 000c 	stmia.w	r4, {r2, r3}
 80184fc:	b188      	cbz	r0, 8018522 <rcutils_strndup+0x32>
 80184fe:	1c4f      	adds	r7, r1, #1
 8018500:	460e      	mov	r6, r1
 8018502:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018504:	4638      	mov	r0, r7
 8018506:	4790      	blx	r2
 8018508:	4604      	mov	r4, r0
 801850a:	b128      	cbz	r0, 8018518 <rcutils_strndup+0x28>
 801850c:	463a      	mov	r2, r7
 801850e:	4629      	mov	r1, r5
 8018510:	f003 fafb 	bl	801bb0a <memcpy>
 8018514:	2300      	movs	r3, #0
 8018516:	55a3      	strb	r3, [r4, r6]
 8018518:	4620      	mov	r0, r4
 801851a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801851e:	b002      	add	sp, #8
 8018520:	4770      	bx	lr
 8018522:	4604      	mov	r4, r0
 8018524:	e7f8      	b.n	8018518 <rcutils_strndup+0x28>
 8018526:	bf00      	nop

08018528 <rcutils_get_zero_initialized_string_map>:
 8018528:	2000      	movs	r0, #0
 801852a:	4b01      	ldr	r3, [pc, #4]	@ (8018530 <rcutils_get_zero_initialized_string_map+0x8>)
 801852c:	6018      	str	r0, [r3, #0]
 801852e:	4770      	bx	lr
 8018530:	24012e04 	.word	0x24012e04

08018534 <rcutils_string_map_reserve>:
 8018534:	2800      	cmp	r0, #0
 8018536:	d05e      	beq.n	80185f6 <rcutils_string_map_reserve+0xc2>
 8018538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801853c:	460c      	mov	r4, r1
 801853e:	6801      	ldr	r1, [r0, #0]
 8018540:	b082      	sub	sp, #8
 8018542:	4605      	mov	r5, r0
 8018544:	b129      	cbz	r1, 8018552 <rcutils_string_map_reserve+0x1e>
 8018546:	68cb      	ldr	r3, [r1, #12]
 8018548:	42a3      	cmp	r3, r4
 801854a:	d906      	bls.n	801855a <rcutils_string_map_reserve+0x26>
 801854c:	461c      	mov	r4, r3
 801854e:	2900      	cmp	r1, #0
 8018550:	d1f9      	bne.n	8018546 <rcutils_string_map_reserve+0x12>
 8018552:	201f      	movs	r0, #31
 8018554:	b002      	add	sp, #8
 8018556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801855a:	688b      	ldr	r3, [r1, #8]
 801855c:	42a3      	cmp	r3, r4
 801855e:	d046      	beq.n	80185ee <rcutils_string_map_reserve+0xba>
 8018560:	6a0e      	ldr	r6, [r1, #32]
 8018562:	2c00      	cmp	r4, #0
 8018564:	d033      	beq.n	80185ce <rcutils_string_map_reserve+0x9a>
 8018566:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801856a:	d242      	bcs.n	80185f2 <rcutils_string_map_reserve+0xbe>
 801856c:	00a7      	lsls	r7, r4, #2
 801856e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018572:	6808      	ldr	r0, [r1, #0]
 8018574:	4632      	mov	r2, r6
 8018576:	4639      	mov	r1, r7
 8018578:	47c0      	blx	r8
 801857a:	2800      	cmp	r0, #0
 801857c:	d039      	beq.n	80185f2 <rcutils_string_map_reserve+0xbe>
 801857e:	682b      	ldr	r3, [r5, #0]
 8018580:	4632      	mov	r2, r6
 8018582:	4639      	mov	r1, r7
 8018584:	6018      	str	r0, [r3, #0]
 8018586:	6858      	ldr	r0, [r3, #4]
 8018588:	47c0      	blx	r8
 801858a:	2800      	cmp	r0, #0
 801858c:	d031      	beq.n	80185f2 <rcutils_string_map_reserve+0xbe>
 801858e:	682d      	ldr	r5, [r5, #0]
 8018590:	68ab      	ldr	r3, [r5, #8]
 8018592:	6068      	str	r0, [r5, #4]
 8018594:	42a3      	cmp	r3, r4
 8018596:	d225      	bcs.n	80185e4 <rcutils_string_map_reserve+0xb0>
 8018598:	682a      	ldr	r2, [r5, #0]
 801859a:	eb00 0c07 	add.w	ip, r0, r7
 801859e:	0099      	lsls	r1, r3, #2
 80185a0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80185a4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80185a8:	45e6      	cmp	lr, ip
 80185aa:	d203      	bcs.n	80185b4 <rcutils_string_map_reserve+0x80>
 80185ac:	eb02 0c07 	add.w	ip, r2, r7
 80185b0:	4566      	cmp	r6, ip
 80185b2:	d322      	bcc.n	80185fa <rcutils_string_map_reserve+0xc6>
 80185b4:	1ae3      	subs	r3, r4, r3
 80185b6:	4670      	mov	r0, lr
 80185b8:	2100      	movs	r1, #0
 80185ba:	009a      	lsls	r2, r3, #2
 80185bc:	9201      	str	r2, [sp, #4]
 80185be:	f003 f9db 	bl	801b978 <memset>
 80185c2:	9a01      	ldr	r2, [sp, #4]
 80185c4:	2100      	movs	r1, #0
 80185c6:	4630      	mov	r0, r6
 80185c8:	f003 f9d6 	bl	801b978 <memset>
 80185cc:	e00a      	b.n	80185e4 <rcutils_string_map_reserve+0xb0>
 80185ce:	694f      	ldr	r7, [r1, #20]
 80185d0:	6808      	ldr	r0, [r1, #0]
 80185d2:	4631      	mov	r1, r6
 80185d4:	47b8      	blx	r7
 80185d6:	682b      	ldr	r3, [r5, #0]
 80185d8:	4631      	mov	r1, r6
 80185da:	6858      	ldr	r0, [r3, #4]
 80185dc:	601c      	str	r4, [r3, #0]
 80185de:	47b8      	blx	r7
 80185e0:	682d      	ldr	r5, [r5, #0]
 80185e2:	606c      	str	r4, [r5, #4]
 80185e4:	2000      	movs	r0, #0
 80185e6:	60ac      	str	r4, [r5, #8]
 80185e8:	b002      	add	sp, #8
 80185ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185ee:	2000      	movs	r0, #0
 80185f0:	e7b0      	b.n	8018554 <rcutils_string_map_reserve+0x20>
 80185f2:	200a      	movs	r0, #10
 80185f4:	e7ae      	b.n	8018554 <rcutils_string_map_reserve+0x20>
 80185f6:	200b      	movs	r0, #11
 80185f8:	4770      	bx	lr
 80185fa:	1f0b      	subs	r3, r1, #4
 80185fc:	4418      	add	r0, r3
 80185fe:	4413      	add	r3, r2
 8018600:	3a04      	subs	r2, #4
 8018602:	4417      	add	r7, r2
 8018604:	2200      	movs	r2, #0
 8018606:	f843 2f04 	str.w	r2, [r3, #4]!
 801860a:	42bb      	cmp	r3, r7
 801860c:	f840 2f04 	str.w	r2, [r0, #4]!
 8018610:	d1f9      	bne.n	8018606 <rcutils_string_map_reserve+0xd2>
 8018612:	e7e7      	b.n	80185e4 <rcutils_string_map_reserve+0xb0>

08018614 <rcutils_string_map_init>:
 8018614:	b082      	sub	sp, #8
 8018616:	b570      	push	{r4, r5, r6, lr}
 8018618:	ac04      	add	r4, sp, #16
 801861a:	e884 000c 	stmia.w	r4, {r2, r3}
 801861e:	b380      	cbz	r0, 8018682 <rcutils_string_map_init+0x6e>
 8018620:	6806      	ldr	r6, [r0, #0]
 8018622:	4604      	mov	r4, r0
 8018624:	b12e      	cbz	r6, 8018632 <rcutils_string_map_init+0x1e>
 8018626:	251e      	movs	r5, #30
 8018628:	4628      	mov	r0, r5
 801862a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801862e:	b002      	add	sp, #8
 8018630:	4770      	bx	lr
 8018632:	a804      	add	r0, sp, #16
 8018634:	460d      	mov	r5, r1
 8018636:	f7f6 fcdb 	bl	800eff0 <rcutils_allocator_is_valid>
 801863a:	b310      	cbz	r0, 8018682 <rcutils_string_map_init+0x6e>
 801863c:	9b04      	ldr	r3, [sp, #16]
 801863e:	2024      	movs	r0, #36	@ 0x24
 8018640:	9908      	ldr	r1, [sp, #32]
 8018642:	4798      	blx	r3
 8018644:	6020      	str	r0, [r4, #0]
 8018646:	b310      	cbz	r0, 801868e <rcutils_string_map_init+0x7a>
 8018648:	f10d 0e10 	add.w	lr, sp, #16
 801864c:	f100 0c10 	add.w	ip, r0, #16
 8018650:	e9c0 6600 	strd	r6, r6, [r0]
 8018654:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018658:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801865c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018660:	f8de 3000 	ldr.w	r3, [lr]
 8018664:	4629      	mov	r1, r5
 8018666:	4620      	mov	r0, r4
 8018668:	f8cc 3000 	str.w	r3, [ip]
 801866c:	f7ff ff62 	bl	8018534 <rcutils_string_map_reserve>
 8018670:	4605      	mov	r5, r0
 8018672:	2800      	cmp	r0, #0
 8018674:	d0d8      	beq.n	8018628 <rcutils_string_map_init+0x14>
 8018676:	9b05      	ldr	r3, [sp, #20]
 8018678:	9908      	ldr	r1, [sp, #32]
 801867a:	6820      	ldr	r0, [r4, #0]
 801867c:	4798      	blx	r3
 801867e:	6026      	str	r6, [r4, #0]
 8018680:	e7d2      	b.n	8018628 <rcutils_string_map_init+0x14>
 8018682:	250b      	movs	r5, #11
 8018684:	4628      	mov	r0, r5
 8018686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801868a:	b002      	add	sp, #8
 801868c:	4770      	bx	lr
 801868e:	250a      	movs	r5, #10
 8018690:	e7ca      	b.n	8018628 <rcutils_string_map_init+0x14>
 8018692:	bf00      	nop

08018694 <rcutils_string_map_fini>:
 8018694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018698:	b082      	sub	sp, #8
 801869a:	2800      	cmp	r0, #0
 801869c:	d03a      	beq.n	8018714 <rcutils_string_map_fini+0x80>
 801869e:	6804      	ldr	r4, [r0, #0]
 80186a0:	4606      	mov	r6, r0
 80186a2:	2c00      	cmp	r4, #0
 80186a4:	d032      	beq.n	801870c <rcutils_string_map_fini+0x78>
 80186a6:	68a3      	ldr	r3, [r4, #8]
 80186a8:	b32b      	cbz	r3, 80186f6 <rcutils_string_map_fini+0x62>
 80186aa:	2500      	movs	r5, #0
 80186ac:	6822      	ldr	r2, [r4, #0]
 80186ae:	462f      	mov	r7, r5
 80186b0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80186b4:	b1e0      	cbz	r0, 80186f0 <rcutils_string_map_fini+0x5c>
 80186b6:	6a21      	ldr	r1, [r4, #32]
 80186b8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80186bc:	9101      	str	r1, [sp, #4]
 80186be:	47c0      	blx	r8
 80186c0:	9901      	ldr	r1, [sp, #4]
 80186c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80186c6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80186ca:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80186ce:	47c0      	blx	r8
 80186d0:	68e3      	ldr	r3, [r4, #12]
 80186d2:	6862      	ldr	r2, [r4, #4]
 80186d4:	3b01      	subs	r3, #1
 80186d6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80186da:	3501      	adds	r5, #1
 80186dc:	60e3      	str	r3, [r4, #12]
 80186de:	6834      	ldr	r4, [r6, #0]
 80186e0:	68a3      	ldr	r3, [r4, #8]
 80186e2:	429d      	cmp	r5, r3
 80186e4:	d207      	bcs.n	80186f6 <rcutils_string_map_fini+0x62>
 80186e6:	6822      	ldr	r2, [r4, #0]
 80186e8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80186ec:	2800      	cmp	r0, #0
 80186ee:	d1e2      	bne.n	80186b6 <rcutils_string_map_fini+0x22>
 80186f0:	3501      	adds	r5, #1
 80186f2:	429d      	cmp	r5, r3
 80186f4:	d3dc      	bcc.n	80186b0 <rcutils_string_map_fini+0x1c>
 80186f6:	2100      	movs	r1, #0
 80186f8:	4630      	mov	r0, r6
 80186fa:	f7ff ff1b 	bl	8018534 <rcutils_string_map_reserve>
 80186fe:	4604      	mov	r4, r0
 8018700:	b920      	cbnz	r0, 801870c <rcutils_string_map_fini+0x78>
 8018702:	6830      	ldr	r0, [r6, #0]
 8018704:	6943      	ldr	r3, [r0, #20]
 8018706:	6a01      	ldr	r1, [r0, #32]
 8018708:	4798      	blx	r3
 801870a:	6034      	str	r4, [r6, #0]
 801870c:	4620      	mov	r0, r4
 801870e:	b002      	add	sp, #8
 8018710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018714:	240b      	movs	r4, #11
 8018716:	4620      	mov	r0, r4
 8018718:	b002      	add	sp, #8
 801871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801871e:	bf00      	nop

08018720 <rcutils_string_map_getn>:
 8018720:	b378      	cbz	r0, 8018782 <rcutils_string_map_getn+0x62>
 8018722:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018726:	f8d0 b000 	ldr.w	fp, [r0]
 801872a:	f1bb 0f00 	cmp.w	fp, #0
 801872e:	d01f      	beq.n	8018770 <rcutils_string_map_getn+0x50>
 8018730:	fab1 f481 	clz	r4, r1
 8018734:	4688      	mov	r8, r1
 8018736:	0964      	lsrs	r4, r4, #5
 8018738:	b1d1      	cbz	r1, 8018770 <rcutils_string_map_getn+0x50>
 801873a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801873e:	f8db 6000 	ldr.w	r6, [fp]
 8018742:	b1af      	cbz	r7, 8018770 <rcutils_string_map_getn+0x50>
 8018744:	4691      	mov	r9, r2
 8018746:	3e04      	subs	r6, #4
 8018748:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801874c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018750:	3401      	adds	r4, #1
 8018752:	4628      	mov	r0, r5
 8018754:	b155      	cbz	r5, 801876c <rcutils_string_map_getn+0x4c>
 8018756:	f7e7 fdcd 	bl	80002f4 <strlen>
 801875a:	4602      	mov	r2, r0
 801875c:	4629      	mov	r1, r5
 801875e:	4640      	mov	r0, r8
 8018760:	454a      	cmp	r2, r9
 8018762:	bf38      	it	cc
 8018764:	464a      	movcc	r2, r9
 8018766:	f003 f91c 	bl	801b9a2 <strncmp>
 801876a:	b120      	cbz	r0, 8018776 <rcutils_string_map_getn+0x56>
 801876c:	42a7      	cmp	r7, r4
 801876e:	d1eb      	bne.n	8018748 <rcutils_string_map_getn+0x28>
 8018770:	2000      	movs	r0, #0
 8018772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018776:	f8db 3004 	ldr.w	r3, [fp, #4]
 801877a:	f853 000a 	ldr.w	r0, [r3, sl]
 801877e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018782:	4770      	bx	lr
 8018784:	0000      	movs	r0, r0
	...

08018788 <rmw_get_zero_initialized_context>:
 8018788:	b510      	push	{r4, lr}
 801878a:	4604      	mov	r4, r0
 801878c:	3010      	adds	r0, #16
 801878e:	f7f6 fcbb 	bl	800f108 <rmw_get_zero_initialized_init_options>
 8018792:	2300      	movs	r3, #0
 8018794:	4620      	mov	r0, r4
 8018796:	60a3      	str	r3, [r4, #8]
 8018798:	64a3      	str	r3, [r4, #72]	@ 0x48
 801879a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801879c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80187a8 <rmw_get_zero_initialized_context+0x20>
 80187a0:	ed84 7b00 	vstr	d7, [r4]
 80187a4:	bd10      	pop	{r4, pc}
 80187a6:	bf00      	nop
	...

080187b0 <rmw_time_equal>:
 80187b0:	b4f0      	push	{r4, r5, r6, r7}
 80187b2:	b084      	sub	sp, #16
 80187b4:	ac04      	add	r4, sp, #16
 80187b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80187ba:	4603      	mov	r3, r0
 80187bc:	4925      	ldr	r1, [pc, #148]	@ (8018854 <rmw_time_equal+0xa4>)
 80187be:	9d01      	ldr	r5, [sp, #4]
 80187c0:	4610      	mov	r0, r2
 80187c2:	4299      	cmp	r1, r3
 80187c4:	f04f 0202 	mov.w	r2, #2
 80187c8:	9e03      	ldr	r6, [sp, #12]
 80187ca:	41aa      	sbcs	r2, r5
 80187cc:	d330      	bcc.n	8018830 <rmw_time_equal+0x80>
 80187ce:	4c22      	ldr	r4, [pc, #136]	@ (8018858 <rmw_time_equal+0xa8>)
 80187d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80187d4:	fba3 3204 	umull	r3, r2, r3, r4
 80187d8:	fb04 2205 	mla	r2, r4, r5, r2
 80187dc:	43dd      	mvns	r5, r3
 80187de:	1a8c      	subs	r4, r1, r2
 80187e0:	4285      	cmp	r5, r0
 80187e2:	41b4      	sbcs	r4, r6
 80187e4:	d332      	bcc.n	801884c <rmw_time_equal+0x9c>
 80187e6:	eb10 0c03 	adds.w	ip, r0, r3
 80187ea:	eb42 0106 	adc.w	r1, r2, r6
 80187ee:	4819      	ldr	r0, [pc, #100]	@ (8018854 <rmw_time_equal+0xa4>)
 80187f0:	2202      	movs	r2, #2
 80187f2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80187f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80187f6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80187fa:	4298      	cmp	r0, r3
 80187fc:	41b2      	sbcs	r2, r6
 80187fe:	d31c      	bcc.n	801883a <rmw_time_equal+0x8a>
 8018800:	4c15      	ldr	r4, [pc, #84]	@ (8018858 <rmw_time_equal+0xa8>)
 8018802:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018806:	fba3 3204 	umull	r3, r2, r3, r4
 801880a:	fb04 2206 	mla	r2, r4, r6, r2
 801880e:	43de      	mvns	r6, r3
 8018810:	1a84      	subs	r4, r0, r2
 8018812:	42ae      	cmp	r6, r5
 8018814:	41bc      	sbcs	r4, r7
 8018816:	d315      	bcc.n	8018844 <rmw_time_equal+0x94>
 8018818:	195b      	adds	r3, r3, r5
 801881a:	eb42 0207 	adc.w	r2, r2, r7
 801881e:	428a      	cmp	r2, r1
 8018820:	bf08      	it	eq
 8018822:	4563      	cmpeq	r3, ip
 8018824:	bf0c      	ite	eq
 8018826:	2001      	moveq	r0, #1
 8018828:	2000      	movne	r0, #0
 801882a:	b004      	add	sp, #16
 801882c:	bcf0      	pop	{r4, r5, r6, r7}
 801882e:	4770      	bx	lr
 8018830:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018834:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018838:	e7d9      	b.n	80187ee <rmw_time_equal+0x3e>
 801883a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801883e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018842:	e7ec      	b.n	801881e <rmw_time_equal+0x6e>
 8018844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018848:	4602      	mov	r2, r0
 801884a:	e7e8      	b.n	801881e <rmw_time_equal+0x6e>
 801884c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018850:	e7cd      	b.n	80187ee <rmw_time_equal+0x3e>
 8018852:	bf00      	nop
 8018854:	25c17d04 	.word	0x25c17d04
 8018858:	3b9aca00 	.word	0x3b9aca00

0801885c <rmw_time_total_nsec>:
 801885c:	b470      	push	{r4, r5, r6}
 801885e:	b085      	sub	sp, #20
 8018860:	ac04      	add	r4, sp, #16
 8018862:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018866:	4603      	mov	r3, r0
 8018868:	4913      	ldr	r1, [pc, #76]	@ (80188b8 <rmw_time_total_nsec+0x5c>)
 801886a:	9d01      	ldr	r5, [sp, #4]
 801886c:	4610      	mov	r0, r2
 801886e:	4299      	cmp	r1, r3
 8018870:	f04f 0202 	mov.w	r2, #2
 8018874:	9e03      	ldr	r6, [sp, #12]
 8018876:	41aa      	sbcs	r2, r5
 8018878:	d311      	bcc.n	801889e <rmw_time_total_nsec+0x42>
 801887a:	4c10      	ldr	r4, [pc, #64]	@ (80188bc <rmw_time_total_nsec+0x60>)
 801887c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018880:	fba3 3204 	umull	r3, r2, r3, r4
 8018884:	fb04 2205 	mla	r2, r4, r5, r2
 8018888:	43dd      	mvns	r5, r3
 801888a:	1a8c      	subs	r4, r1, r2
 801888c:	4285      	cmp	r5, r0
 801888e:	41b4      	sbcs	r4, r6
 8018890:	d30c      	bcc.n	80188ac <rmw_time_total_nsec+0x50>
 8018892:	1818      	adds	r0, r3, r0
 8018894:	eb42 0106 	adc.w	r1, r2, r6
 8018898:	b005      	add	sp, #20
 801889a:	bc70      	pop	{r4, r5, r6}
 801889c:	4770      	bx	lr
 801889e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80188a6:	b005      	add	sp, #20
 80188a8:	bc70      	pop	{r4, r5, r6}
 80188aa:	4770      	bx	lr
 80188ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188b0:	b005      	add	sp, #20
 80188b2:	bc70      	pop	{r4, r5, r6}
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop
 80188b8:	25c17d04 	.word	0x25c17d04
 80188bc:	3b9aca00 	.word	0x3b9aca00

080188c0 <rmw_get_zero_initialized_message_info>:
 80188c0:	b510      	push	{r4, lr}
 80188c2:	4604      	mov	r4, r0
 80188c4:	2240      	movs	r2, #64	@ 0x40
 80188c6:	2100      	movs	r1, #0
 80188c8:	f003 f856 	bl	801b978 <memset>
 80188cc:	4620      	mov	r0, r4
 80188ce:	bd10      	pop	{r4, pc}

080188d0 <rmw_validate_full_topic_name>:
 80188d0:	2800      	cmp	r0, #0
 80188d2:	d05d      	beq.n	8018990 <rmw_validate_full_topic_name+0xc0>
 80188d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d8:	460d      	mov	r5, r1
 80188da:	2900      	cmp	r1, #0
 80188dc:	d05a      	beq.n	8018994 <rmw_validate_full_topic_name+0xc4>
 80188de:	4604      	mov	r4, r0
 80188e0:	4616      	mov	r6, r2
 80188e2:	f7e7 fd07 	bl	80002f4 <strlen>
 80188e6:	b150      	cbz	r0, 80188fe <rmw_validate_full_topic_name+0x2e>
 80188e8:	7823      	ldrb	r3, [r4, #0]
 80188ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80188ec:	d00e      	beq.n	801890c <rmw_validate_full_topic_name+0x3c>
 80188ee:	2302      	movs	r3, #2
 80188f0:	602b      	str	r3, [r5, #0]
 80188f2:	b146      	cbz	r6, 8018906 <rmw_validate_full_topic_name+0x36>
 80188f4:	2300      	movs	r3, #0
 80188f6:	4618      	mov	r0, r3
 80188f8:	6033      	str	r3, [r6, #0]
 80188fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188fe:	2301      	movs	r3, #1
 8018900:	602b      	str	r3, [r5, #0]
 8018902:	2e00      	cmp	r6, #0
 8018904:	d1f6      	bne.n	80188f4 <rmw_validate_full_topic_name+0x24>
 8018906:	2000      	movs	r0, #0
 8018908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801890c:	1e43      	subs	r3, r0, #1
 801890e:	5ce2      	ldrb	r2, [r4, r3]
 8018910:	2a2f      	cmp	r2, #47	@ 0x2f
 8018912:	d041      	beq.n	8018998 <rmw_validate_full_topic_name+0xc8>
 8018914:	1e62      	subs	r2, r4, #1
 8018916:	f1c4 0e01 	rsb	lr, r4, #1
 801891a:	eb02 0800 	add.w	r8, r2, r0
 801891e:	eb0e 0702 	add.w	r7, lr, r2
 8018922:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018926:	f023 0120 	bic.w	r1, r3, #32
 801892a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801892e:	3941      	subs	r1, #65	@ 0x41
 8018930:	2919      	cmp	r1, #25
 8018932:	d90f      	bls.n	8018954 <rmw_validate_full_topic_name+0x84>
 8018934:	f1bc 0f0a 	cmp.w	ip, #10
 8018938:	d90c      	bls.n	8018954 <rmw_validate_full_topic_name+0x84>
 801893a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801893e:	fab3 f383 	clz	r3, r3
 8018942:	095b      	lsrs	r3, r3, #5
 8018944:	b933      	cbnz	r3, 8018954 <rmw_validate_full_topic_name+0x84>
 8018946:	2204      	movs	r2, #4
 8018948:	602a      	str	r2, [r5, #0]
 801894a:	2e00      	cmp	r6, #0
 801894c:	d0db      	beq.n	8018906 <rmw_validate_full_topic_name+0x36>
 801894e:	4618      	mov	r0, r3
 8018950:	6037      	str	r7, [r6, #0]
 8018952:	e7d2      	b.n	80188fa <rmw_validate_full_topic_name+0x2a>
 8018954:	4542      	cmp	r2, r8
 8018956:	d1e2      	bne.n	801891e <rmw_validate_full_topic_name+0x4e>
 8018958:	2301      	movs	r3, #1
 801895a:	4f1a      	ldr	r7, [pc, #104]	@ (80189c4 <rmw_validate_full_topic_name+0xf4>)
 801895c:	e004      	b.n	8018968 <rmw_validate_full_topic_name+0x98>
 801895e:	4298      	cmp	r0, r3
 8018960:	f104 0401 	add.w	r4, r4, #1
 8018964:	4613      	mov	r3, r2
 8018966:	d91c      	bls.n	80189a2 <rmw_validate_full_topic_name+0xd2>
 8018968:	4298      	cmp	r0, r3
 801896a:	f103 0201 	add.w	r2, r3, #1
 801896e:	d0f6      	beq.n	801895e <rmw_validate_full_topic_name+0x8e>
 8018970:	7821      	ldrb	r1, [r4, #0]
 8018972:	292f      	cmp	r1, #47	@ 0x2f
 8018974:	d1f3      	bne.n	801895e <rmw_validate_full_topic_name+0x8e>
 8018976:	7861      	ldrb	r1, [r4, #1]
 8018978:	292f      	cmp	r1, #47	@ 0x2f
 801897a:	d01e      	beq.n	80189ba <rmw_validate_full_topic_name+0xea>
 801897c:	5dc9      	ldrb	r1, [r1, r7]
 801897e:	0749      	lsls	r1, r1, #29
 8018980:	d5ed      	bpl.n	801895e <rmw_validate_full_topic_name+0x8e>
 8018982:	2206      	movs	r2, #6
 8018984:	602a      	str	r2, [r5, #0]
 8018986:	2e00      	cmp	r6, #0
 8018988:	d0bd      	beq.n	8018906 <rmw_validate_full_topic_name+0x36>
 801898a:	2000      	movs	r0, #0
 801898c:	6033      	str	r3, [r6, #0]
 801898e:	e7b4      	b.n	80188fa <rmw_validate_full_topic_name+0x2a>
 8018990:	200b      	movs	r0, #11
 8018992:	4770      	bx	lr
 8018994:	200b      	movs	r0, #11
 8018996:	e7b0      	b.n	80188fa <rmw_validate_full_topic_name+0x2a>
 8018998:	2203      	movs	r2, #3
 801899a:	602a      	str	r2, [r5, #0]
 801899c:	2e00      	cmp	r6, #0
 801899e:	d1f4      	bne.n	801898a <rmw_validate_full_topic_name+0xba>
 80189a0:	e7b1      	b.n	8018906 <rmw_validate_full_topic_name+0x36>
 80189a2:	28f7      	cmp	r0, #247	@ 0xf7
 80189a4:	d803      	bhi.n	80189ae <rmw_validate_full_topic_name+0xde>
 80189a6:	2300      	movs	r3, #0
 80189a8:	4618      	mov	r0, r3
 80189aa:	602b      	str	r3, [r5, #0]
 80189ac:	e7a5      	b.n	80188fa <rmw_validate_full_topic_name+0x2a>
 80189ae:	2307      	movs	r3, #7
 80189b0:	602b      	str	r3, [r5, #0]
 80189b2:	2e00      	cmp	r6, #0
 80189b4:	d0a7      	beq.n	8018906 <rmw_validate_full_topic_name+0x36>
 80189b6:	23f6      	movs	r3, #246	@ 0xf6
 80189b8:	e7e7      	b.n	801898a <rmw_validate_full_topic_name+0xba>
 80189ba:	2205      	movs	r2, #5
 80189bc:	602a      	str	r2, [r5, #0]
 80189be:	2e00      	cmp	r6, #0
 80189c0:	d1e3      	bne.n	801898a <rmw_validate_full_topic_name+0xba>
 80189c2:	e7a0      	b.n	8018906 <rmw_validate_full_topic_name+0x36>
 80189c4:	0801d546 	.word	0x0801d546

080189c8 <rmw_validate_namespace_with_size>:
 80189c8:	2800      	cmp	r0, #0
 80189ca:	d043      	beq.n	8018a54 <rmw_validate_namespace_with_size+0x8c>
 80189cc:	b570      	push	{r4, r5, r6, lr}
 80189ce:	4614      	mov	r4, r2
 80189d0:	b0c2      	sub	sp, #264	@ 0x108
 80189d2:	b32a      	cbz	r2, 8018a20 <rmw_validate_namespace_with_size+0x58>
 80189d4:	2901      	cmp	r1, #1
 80189d6:	460d      	mov	r5, r1
 80189d8:	461e      	mov	r6, r3
 80189da:	d102      	bne.n	80189e2 <rmw_validate_namespace_with_size+0x1a>
 80189dc:	7803      	ldrb	r3, [r0, #0]
 80189de:	2b2f      	cmp	r3, #47	@ 0x2f
 80189e0:	d012      	beq.n	8018a08 <rmw_validate_namespace_with_size+0x40>
 80189e2:	aa01      	add	r2, sp, #4
 80189e4:	4669      	mov	r1, sp
 80189e6:	f7ff ff73 	bl	80188d0 <rmw_validate_full_topic_name>
 80189ea:	b980      	cbnz	r0, 8018a0e <rmw_validate_namespace_with_size+0x46>
 80189ec:	9a00      	ldr	r2, [sp, #0]
 80189ee:	b14a      	cbz	r2, 8018a04 <rmw_validate_namespace_with_size+0x3c>
 80189f0:	2a07      	cmp	r2, #7
 80189f2:	d007      	beq.n	8018a04 <rmw_validate_namespace_with_size+0x3c>
 80189f4:	1e53      	subs	r3, r2, #1
 80189f6:	2b05      	cmp	r3, #5
 80189f8:	d82e      	bhi.n	8018a58 <rmw_validate_namespace_with_size+0x90>
 80189fa:	e8df f003 	tbb	[pc, r3]
 80189fe:	1f1c      	.short	0x1f1c
 8018a00:	14282522 	.word	0x14282522
 8018a04:	2df5      	cmp	r5, #245	@ 0xf5
 8018a06:	d804      	bhi.n	8018a12 <rmw_validate_namespace_with_size+0x4a>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	6023      	str	r3, [r4, #0]
 8018a0e:	b042      	add	sp, #264	@ 0x108
 8018a10:	bd70      	pop	{r4, r5, r6, pc}
 8018a12:	2307      	movs	r3, #7
 8018a14:	6023      	str	r3, [r4, #0]
 8018a16:	2e00      	cmp	r6, #0
 8018a18:	d0f9      	beq.n	8018a0e <rmw_validate_namespace_with_size+0x46>
 8018a1a:	23f4      	movs	r3, #244	@ 0xf4
 8018a1c:	6033      	str	r3, [r6, #0]
 8018a1e:	e7f6      	b.n	8018a0e <rmw_validate_namespace_with_size+0x46>
 8018a20:	200b      	movs	r0, #11
 8018a22:	b042      	add	sp, #264	@ 0x108
 8018a24:	bd70      	pop	{r4, r5, r6, pc}
 8018a26:	2306      	movs	r3, #6
 8018a28:	6023      	str	r3, [r4, #0]
 8018a2a:	2e00      	cmp	r6, #0
 8018a2c:	d0ef      	beq.n	8018a0e <rmw_validate_namespace_with_size+0x46>
 8018a2e:	9b01      	ldr	r3, [sp, #4]
 8018a30:	6033      	str	r3, [r6, #0]
 8018a32:	b042      	add	sp, #264	@ 0x108
 8018a34:	bd70      	pop	{r4, r5, r6, pc}
 8018a36:	2301      	movs	r3, #1
 8018a38:	6023      	str	r3, [r4, #0]
 8018a3a:	e7f6      	b.n	8018a2a <rmw_validate_namespace_with_size+0x62>
 8018a3c:	2302      	movs	r3, #2
 8018a3e:	6023      	str	r3, [r4, #0]
 8018a40:	e7f3      	b.n	8018a2a <rmw_validate_namespace_with_size+0x62>
 8018a42:	2303      	movs	r3, #3
 8018a44:	6023      	str	r3, [r4, #0]
 8018a46:	e7f0      	b.n	8018a2a <rmw_validate_namespace_with_size+0x62>
 8018a48:	2304      	movs	r3, #4
 8018a4a:	6023      	str	r3, [r4, #0]
 8018a4c:	e7ed      	b.n	8018a2a <rmw_validate_namespace_with_size+0x62>
 8018a4e:	2305      	movs	r3, #5
 8018a50:	6023      	str	r3, [r4, #0]
 8018a52:	e7ea      	b.n	8018a2a <rmw_validate_namespace_with_size+0x62>
 8018a54:	200b      	movs	r0, #11
 8018a56:	4770      	bx	lr
 8018a58:	4613      	mov	r3, r2
 8018a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018a5e:	4a03      	ldr	r2, [pc, #12]	@ (8018a6c <rmw_validate_namespace_with_size+0xa4>)
 8018a60:	a802      	add	r0, sp, #8
 8018a62:	f7ff fcd5 	bl	8018410 <rcutils_snprintf>
 8018a66:	2001      	movs	r0, #1
 8018a68:	e7d1      	b.n	8018a0e <rmw_validate_namespace_with_size+0x46>
 8018a6a:	bf00      	nop
 8018a6c:	0801d014 	.word	0x0801d014

08018a70 <rmw_validate_namespace>:
 8018a70:	b168      	cbz	r0, 8018a8e <rmw_validate_namespace+0x1e>
 8018a72:	b570      	push	{r4, r5, r6, lr}
 8018a74:	460d      	mov	r5, r1
 8018a76:	4616      	mov	r6, r2
 8018a78:	4604      	mov	r4, r0
 8018a7a:	f7e7 fc3b 	bl	80002f4 <strlen>
 8018a7e:	4633      	mov	r3, r6
 8018a80:	4601      	mov	r1, r0
 8018a82:	462a      	mov	r2, r5
 8018a84:	4620      	mov	r0, r4
 8018a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a8a:	f7ff bf9d 	b.w	80189c8 <rmw_validate_namespace_with_size>
 8018a8e:	200b      	movs	r0, #11
 8018a90:	4770      	bx	lr
 8018a92:	bf00      	nop

08018a94 <rmw_namespace_validation_result_string>:
 8018a94:	2807      	cmp	r0, #7
 8018a96:	d803      	bhi.n	8018aa0 <rmw_namespace_validation_result_string+0xc>
 8018a98:	4b02      	ldr	r3, [pc, #8]	@ (8018aa4 <rmw_namespace_validation_result_string+0x10>)
 8018a9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018a9e:	4770      	bx	lr
 8018aa0:	4801      	ldr	r0, [pc, #4]	@ (8018aa8 <rmw_namespace_validation_result_string+0x14>)
 8018aa2:	4770      	bx	lr
 8018aa4:	0801d20c 	.word	0x0801d20c
 8018aa8:	0801d064 	.word	0x0801d064

08018aac <rmw_validate_node_name>:
 8018aac:	2800      	cmp	r0, #0
 8018aae:	d042      	beq.n	8018b36 <rmw_validate_node_name+0x8a>
 8018ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ab4:	460d      	mov	r5, r1
 8018ab6:	2900      	cmp	r1, #0
 8018ab8:	d03f      	beq.n	8018b3a <rmw_validate_node_name+0x8e>
 8018aba:	4604      	mov	r4, r0
 8018abc:	4616      	mov	r6, r2
 8018abe:	f7e7 fc19 	bl	80002f4 <strlen>
 8018ac2:	b310      	cbz	r0, 8018b0a <rmw_validate_node_name+0x5e>
 8018ac4:	1e63      	subs	r3, r4, #1
 8018ac6:	f1c4 0101 	rsb	r1, r4, #1
 8018aca:	eb03 0800 	add.w	r8, r3, r0
 8018ace:	18cf      	adds	r7, r1, r3
 8018ad0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018ad4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018ad8:	f02e 0c20 	bic.w	ip, lr, #32
 8018adc:	2a09      	cmp	r2, #9
 8018ade:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018ae2:	d905      	bls.n	8018af0 <rmw_validate_node_name+0x44>
 8018ae4:	f1bc 0f19 	cmp.w	ip, #25
 8018ae8:	d902      	bls.n	8018af0 <rmw_validate_node_name+0x44>
 8018aea:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8018aee:	d114      	bne.n	8018b1a <rmw_validate_node_name+0x6e>
 8018af0:	4598      	cmp	r8, r3
 8018af2:	d1ec      	bne.n	8018ace <rmw_validate_node_name+0x22>
 8018af4:	7822      	ldrb	r2, [r4, #0]
 8018af6:	4b16      	ldr	r3, [pc, #88]	@ (8018b50 <rmw_validate_node_name+0xa4>)
 8018af8:	5cd3      	ldrb	r3, [r2, r3]
 8018afa:	f013 0304 	ands.w	r3, r3, #4
 8018afe:	d113      	bne.n	8018b28 <rmw_validate_node_name+0x7c>
 8018b00:	28ff      	cmp	r0, #255	@ 0xff
 8018b02:	d81c      	bhi.n	8018b3e <rmw_validate_node_name+0x92>
 8018b04:	4618      	mov	r0, r3
 8018b06:	602b      	str	r3, [r5, #0]
 8018b08:	e00c      	b.n	8018b24 <rmw_validate_node_name+0x78>
 8018b0a:	2301      	movs	r3, #1
 8018b0c:	602b      	str	r3, [r5, #0]
 8018b0e:	b17e      	cbz	r6, 8018b30 <rmw_validate_node_name+0x84>
 8018b10:	2300      	movs	r3, #0
 8018b12:	4618      	mov	r0, r3
 8018b14:	6033      	str	r3, [r6, #0]
 8018b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b1a:	2302      	movs	r3, #2
 8018b1c:	602b      	str	r3, [r5, #0]
 8018b1e:	b13e      	cbz	r6, 8018b30 <rmw_validate_node_name+0x84>
 8018b20:	2000      	movs	r0, #0
 8018b22:	6037      	str	r7, [r6, #0]
 8018b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b28:	2303      	movs	r3, #3
 8018b2a:	602b      	str	r3, [r5, #0]
 8018b2c:	2e00      	cmp	r6, #0
 8018b2e:	d1ef      	bne.n	8018b10 <rmw_validate_node_name+0x64>
 8018b30:	2000      	movs	r0, #0
 8018b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b36:	200b      	movs	r0, #11
 8018b38:	4770      	bx	lr
 8018b3a:	200b      	movs	r0, #11
 8018b3c:	e7f2      	b.n	8018b24 <rmw_validate_node_name+0x78>
 8018b3e:	2204      	movs	r2, #4
 8018b40:	602a      	str	r2, [r5, #0]
 8018b42:	2e00      	cmp	r6, #0
 8018b44:	d0f4      	beq.n	8018b30 <rmw_validate_node_name+0x84>
 8018b46:	22fe      	movs	r2, #254	@ 0xfe
 8018b48:	4618      	mov	r0, r3
 8018b4a:	6032      	str	r2, [r6, #0]
 8018b4c:	e7ea      	b.n	8018b24 <rmw_validate_node_name+0x78>
 8018b4e:	bf00      	nop
 8018b50:	0801d546 	.word	0x0801d546

08018b54 <rmw_node_name_validation_result_string>:
 8018b54:	2804      	cmp	r0, #4
 8018b56:	d803      	bhi.n	8018b60 <rmw_node_name_validation_result_string+0xc>
 8018b58:	4b02      	ldr	r3, [pc, #8]	@ (8018b64 <rmw_node_name_validation_result_string+0x10>)
 8018b5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018b5e:	4770      	bx	lr
 8018b60:	4801      	ldr	r0, [pc, #4]	@ (8018b68 <rmw_node_name_validation_result_string+0x14>)
 8018b62:	4770      	bx	lr
 8018b64:	0801d318 	.word	0x0801d318
 8018b68:	0801d22c 	.word	0x0801d22c

08018b6c <on_status>:
 8018b6c:	b082      	sub	sp, #8
 8018b6e:	b002      	add	sp, #8
 8018b70:	4770      	bx	lr
 8018b72:	bf00      	nop

08018b74 <on_topic>:
 8018b74:	4a23      	ldr	r2, [pc, #140]	@ (8018c04 <on_topic+0x90>)
 8018b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b7a:	6812      	ldr	r2, [r2, #0]
 8018b7c:	b094      	sub	sp, #80	@ 0x50
 8018b7e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018b80:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8018b84:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018b86:	9312      	str	r3, [sp, #72]	@ 0x48
 8018b88:	b3c2      	cbz	r2, 8018bfc <on_topic+0x88>
 8018b8a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018b8e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018b92:	e001      	b.n	8018b98 <on_topic+0x24>
 8018b94:	6852      	ldr	r2, [r2, #4]
 8018b96:	b38a      	cbz	r2, 8018bfc <on_topic+0x88>
 8018b98:	6894      	ldr	r4, [r2, #8]
 8018b9a:	8aa3      	ldrh	r3, [r4, #20]
 8018b9c:	428b      	cmp	r3, r1
 8018b9e:	d1f9      	bne.n	8018b94 <on_topic+0x20>
 8018ba0:	7da3      	ldrb	r3, [r4, #22]
 8018ba2:	4283      	cmp	r3, r0
 8018ba4:	d1f6      	bne.n	8018b94 <on_topic+0x20>
 8018ba6:	2248      	movs	r2, #72	@ 0x48
 8018ba8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018bac:	4668      	mov	r0, sp
 8018bae:	f002 ffac 	bl	801bb0a <memcpy>
 8018bb2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018bb6:	4620      	mov	r0, r4
 8018bb8:	cb0c      	ldmia	r3, {r2, r3}
 8018bba:	f7f7 fabf 	bl	801013c <rmw_uxrce_get_static_input_buffer_for_entity>
 8018bbe:	4607      	mov	r7, r0
 8018bc0:	b1e0      	cbz	r0, 8018bfc <on_topic+0x88>
 8018bc2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018bc6:	462a      	mov	r2, r5
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f108 0110 	add.w	r1, r8, #16
 8018bce:	f000 ff53 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8018bd2:	b930      	cbnz	r0, 8018be2 <on_topic+0x6e>
 8018bd4:	4639      	mov	r1, r7
 8018bd6:	480c      	ldr	r0, [pc, #48]	@ (8018c08 <on_topic+0x94>)
 8018bd8:	b014      	add	sp, #80	@ 0x50
 8018bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bde:	f000 b8bd 	b.w	8018d5c <put_memory>
 8018be2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018be6:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8018bea:	f7f7 f8a5 	bl	800fd38 <rmw_uros_epoch_nanos>
 8018bee:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8018bf2:	2305      	movs	r3, #5
 8018bf4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018bf8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018bfc:	b014      	add	sp, #80	@ 0x50
 8018bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c02:	bf00      	nop
 8018c04:	24012db4 	.word	0x24012db4
 8018c08:	24012da4 	.word	0x24012da4

08018c0c <on_request>:
 8018c0c:	4824      	ldr	r0, [pc, #144]	@ (8018ca0 <on_request+0x94>)
 8018c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c12:	6800      	ldr	r0, [r0, #0]
 8018c14:	b094      	sub	sp, #80	@ 0x50
 8018c16:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018c18:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8018c1c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018c1e:	2800      	cmp	r0, #0
 8018c20:	d03b      	beq.n	8018c9a <on_request+0x8e>
 8018c22:	461d      	mov	r5, r3
 8018c24:	e001      	b.n	8018c2a <on_request+0x1e>
 8018c26:	6840      	ldr	r0, [r0, #4]
 8018c28:	b3b8      	cbz	r0, 8018c9a <on_request+0x8e>
 8018c2a:	6884      	ldr	r4, [r0, #8]
 8018c2c:	8b21      	ldrh	r1, [r4, #24]
 8018c2e:	4291      	cmp	r1, r2
 8018c30:	d1f9      	bne.n	8018c26 <on_request+0x1a>
 8018c32:	2248      	movs	r2, #72	@ 0x48
 8018c34:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018c38:	4668      	mov	r0, sp
 8018c3a:	f002 ff66 	bl	801bb0a <memcpy>
 8018c3e:	f104 0320 	add.w	r3, r4, #32
 8018c42:	4620      	mov	r0, r4
 8018c44:	cb0c      	ldmia	r3, {r2, r3}
 8018c46:	f7f7 fa79 	bl	801013c <rmw_uxrce_get_static_input_buffer_for_entity>
 8018c4a:	4680      	mov	r8, r0
 8018c4c:	b328      	cbz	r0, 8018c9a <on_request+0x8e>
 8018c4e:	4630      	mov	r0, r6
 8018c50:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018c54:	463a      	mov	r2, r7
 8018c56:	f106 0110 	add.w	r1, r6, #16
 8018c5a:	f000 ff0d 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8018c5e:	b930      	cbnz	r0, 8018c6e <on_request+0x62>
 8018c60:	4641      	mov	r1, r8
 8018c62:	4810      	ldr	r0, [pc, #64]	@ (8018ca4 <on_request+0x98>)
 8018c64:	b014      	add	sp, #80	@ 0x50
 8018c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c6a:	f000 b877 	b.w	8018d5c <put_memory>
 8018c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c70:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8018c74:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8018c78:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8018c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018c84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018c88:	f7f7 f856 	bl	800fd38 <rmw_uros_epoch_nanos>
 8018c8c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8018c90:	2303      	movs	r3, #3
 8018c92:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018c96:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8018c9a:	b014      	add	sp, #80	@ 0x50
 8018c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ca0:	24012d84 	.word	0x24012d84
 8018ca4:	24012da4 	.word	0x24012da4

08018ca8 <on_reply>:
 8018ca8:	4822      	ldr	r0, [pc, #136]	@ (8018d34 <on_reply+0x8c>)
 8018caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cae:	6800      	ldr	r0, [r0, #0]
 8018cb0:	b094      	sub	sp, #80	@ 0x50
 8018cb2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018cb4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8018cb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018cba:	b3b8      	cbz	r0, 8018d2c <on_reply+0x84>
 8018cbc:	461d      	mov	r5, r3
 8018cbe:	e001      	b.n	8018cc4 <on_reply+0x1c>
 8018cc0:	6840      	ldr	r0, [r0, #4]
 8018cc2:	b398      	cbz	r0, 8018d2c <on_reply+0x84>
 8018cc4:	6884      	ldr	r4, [r0, #8]
 8018cc6:	8b21      	ldrh	r1, [r4, #24]
 8018cc8:	4291      	cmp	r1, r2
 8018cca:	d1f9      	bne.n	8018cc0 <on_reply+0x18>
 8018ccc:	2248      	movs	r2, #72	@ 0x48
 8018cce:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018cd2:	4668      	mov	r0, sp
 8018cd4:	f002 ff19 	bl	801bb0a <memcpy>
 8018cd8:	f104 0320 	add.w	r3, r4, #32
 8018cdc:	4620      	mov	r0, r4
 8018cde:	cb0c      	ldmia	r3, {r2, r3}
 8018ce0:	f7f7 fa2c 	bl	801013c <rmw_uxrce_get_static_input_buffer_for_entity>
 8018ce4:	4680      	mov	r8, r0
 8018ce6:	b308      	cbz	r0, 8018d2c <on_reply+0x84>
 8018ce8:	4630      	mov	r0, r6
 8018cea:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018cee:	463a      	mov	r2, r7
 8018cf0:	f106 0110 	add.w	r1, r6, #16
 8018cf4:	f000 fec0 	bl	8019a78 <ucdr_deserialize_array_uint8_t>
 8018cf8:	b930      	cbnz	r0, 8018d08 <on_reply+0x60>
 8018cfa:	4641      	mov	r1, r8
 8018cfc:	480e      	ldr	r0, [pc, #56]	@ (8018d38 <on_reply+0x90>)
 8018cfe:	b014      	add	sp, #80	@ 0x50
 8018d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d04:	f000 b82a 	b.w	8018d5c <put_memory>
 8018d08:	2200      	movs	r2, #0
 8018d0a:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8018d0e:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8018d12:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8018d16:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8018d1a:	f7f7 f80d 	bl	800fd38 <rmw_uros_epoch_nanos>
 8018d1e:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8018d22:	2304      	movs	r3, #4
 8018d24:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018d28:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8018d2c:	b014      	add	sp, #80	@ 0x50
 8018d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d32:	bf00      	nop
 8018d34:	2400e494 	.word	0x2400e494
 8018d38:	24012da4 	.word	0x24012da4

08018d3c <get_memory>:
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	6840      	ldr	r0, [r0, #4]
 8018d40:	b158      	cbz	r0, 8018d5a <get_memory+0x1e>
 8018d42:	6842      	ldr	r2, [r0, #4]
 8018d44:	605a      	str	r2, [r3, #4]
 8018d46:	b10a      	cbz	r2, 8018d4c <get_memory+0x10>
 8018d48:	2100      	movs	r1, #0
 8018d4a:	6011      	str	r1, [r2, #0]
 8018d4c:	681a      	ldr	r2, [r3, #0]
 8018d4e:	6042      	str	r2, [r0, #4]
 8018d50:	b102      	cbz	r2, 8018d54 <get_memory+0x18>
 8018d52:	6010      	str	r0, [r2, #0]
 8018d54:	2200      	movs	r2, #0
 8018d56:	6002      	str	r2, [r0, #0]
 8018d58:	6018      	str	r0, [r3, #0]
 8018d5a:	4770      	bx	lr

08018d5c <put_memory>:
 8018d5c:	680b      	ldr	r3, [r1, #0]
 8018d5e:	b10b      	cbz	r3, 8018d64 <put_memory+0x8>
 8018d60:	684a      	ldr	r2, [r1, #4]
 8018d62:	605a      	str	r2, [r3, #4]
 8018d64:	684a      	ldr	r2, [r1, #4]
 8018d66:	b102      	cbz	r2, 8018d6a <put_memory+0xe>
 8018d68:	6013      	str	r3, [r2, #0]
 8018d6a:	6803      	ldr	r3, [r0, #0]
 8018d6c:	428b      	cmp	r3, r1
 8018d6e:	6843      	ldr	r3, [r0, #4]
 8018d70:	bf08      	it	eq
 8018d72:	6002      	streq	r2, [r0, #0]
 8018d74:	604b      	str	r3, [r1, #4]
 8018d76:	b103      	cbz	r3, 8018d7a <put_memory+0x1e>
 8018d78:	6019      	str	r1, [r3, #0]
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	600b      	str	r3, [r1, #0]
 8018d7e:	6041      	str	r1, [r0, #4]
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop

08018d84 <rmw_destroy_client>:
 8018d84:	b570      	push	{r4, r5, r6, lr}
 8018d86:	b128      	cbz	r0, 8018d94 <rmw_destroy_client+0x10>
 8018d88:	4604      	mov	r4, r0
 8018d8a:	6800      	ldr	r0, [r0, #0]
 8018d8c:	460d      	mov	r5, r1
 8018d8e:	f7f7 fb4f 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 8018d92:	b910      	cbnz	r0, 8018d9a <rmw_destroy_client+0x16>
 8018d94:	2401      	movs	r4, #1
 8018d96:	4620      	mov	r0, r4
 8018d98:	bd70      	pop	{r4, r5, r6, pc}
 8018d9a:	6863      	ldr	r3, [r4, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d0f9      	beq.n	8018d94 <rmw_destroy_client+0x10>
 8018da0:	2d00      	cmp	r5, #0
 8018da2:	d0f7      	beq.n	8018d94 <rmw_destroy_client+0x10>
 8018da4:	6828      	ldr	r0, [r5, #0]
 8018da6:	f7f7 fb43 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 8018daa:	2800      	cmp	r0, #0
 8018dac:	d0f2      	beq.n	8018d94 <rmw_destroy_client+0x10>
 8018dae:	686e      	ldr	r6, [r5, #4]
 8018db0:	2e00      	cmp	r6, #0
 8018db2:	d0ef      	beq.n	8018d94 <rmw_destroy_client+0x10>
 8018db4:	6864      	ldr	r4, [r4, #4]
 8018db6:	6932      	ldr	r2, [r6, #16]
 8018db8:	6920      	ldr	r0, [r4, #16]
 8018dba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018dbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018dc2:	6819      	ldr	r1, [r3, #0]
 8018dc4:	f7f9 f9f0 	bl	80121a8 <uxr_buffer_cancel_data>
 8018dc8:	4602      	mov	r2, r0
 8018dca:	6920      	ldr	r0, [r4, #16]
 8018dcc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018dd0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018dd4:	f7f7 fab2 	bl	801033c <run_xrce_session>
 8018dd8:	6920      	ldr	r0, [r4, #16]
 8018dda:	6932      	ldr	r2, [r6, #16]
 8018ddc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018de0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018de4:	6819      	ldr	r1, [r3, #0]
 8018de6:	f7f8 ff97 	bl	8011d18 <uxr_buffer_delete_entity>
 8018dea:	4602      	mov	r2, r0
 8018dec:	6920      	ldr	r0, [r4, #16]
 8018dee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018df2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018df6:	f7f7 faa1 	bl	801033c <run_xrce_session>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	bf14      	ite	ne
 8018e02:	2400      	movne	r4, #0
 8018e04:	2402      	moveq	r4, #2
 8018e06:	f7f7 f977 	bl	80100f8 <rmw_uxrce_fini_client_memory>
 8018e0a:	e7c4      	b.n	8018d96 <rmw_destroy_client+0x12>

08018e0c <rmw_get_implementation_identifier>:
 8018e0c:	4b01      	ldr	r3, [pc, #4]	@ (8018e14 <rmw_get_implementation_identifier+0x8>)
 8018e0e:	6818      	ldr	r0, [r3, #0]
 8018e10:	4770      	bx	lr
 8018e12:	bf00      	nop
 8018e14:	0801d344 	.word	0x0801d344

08018e18 <create_topic>:
 8018e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e1c:	4605      	mov	r5, r0
 8018e1e:	b084      	sub	sp, #16
 8018e20:	4822      	ldr	r0, [pc, #136]	@ (8018eac <create_topic+0x94>)
 8018e22:	460f      	mov	r7, r1
 8018e24:	4616      	mov	r6, r2
 8018e26:	f7ff ff89 	bl	8018d3c <get_memory>
 8018e2a:	4604      	mov	r4, r0
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d039      	beq.n	8018ea4 <create_topic+0x8c>
 8018e30:	692b      	ldr	r3, [r5, #16]
 8018e32:	2102      	movs	r1, #2
 8018e34:	6884      	ldr	r4, [r0, #8]
 8018e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e3a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8018eb4 <create_topic+0x9c>
 8018e3e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018e42:	1c42      	adds	r2, r0, #1
 8018e44:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8018e48:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8018e4c:	f7f9 f97c 	bl	8012148 <uxr_object_id>
 8018e50:	223c      	movs	r2, #60	@ 0x3c
 8018e52:	6120      	str	r0, [r4, #16]
 8018e54:	4641      	mov	r1, r8
 8018e56:	4638      	mov	r0, r7
 8018e58:	f7f7 fad2 	bl	8010400 <generate_topic_name>
 8018e5c:	b1f0      	cbz	r0, 8018e9c <create_topic+0x84>
 8018e5e:	4f14      	ldr	r7, [pc, #80]	@ (8018eb0 <create_topic+0x98>)
 8018e60:	4630      	mov	r0, r6
 8018e62:	2264      	movs	r2, #100	@ 0x64
 8018e64:	4639      	mov	r1, r7
 8018e66:	f7f7 fa9d 	bl	80103a4 <generate_type_name>
 8018e6a:	b1b8      	cbz	r0, 8018e9c <create_topic+0x84>
 8018e6c:	6928      	ldr	r0, [r5, #16]
 8018e6e:	2106      	movs	r1, #6
 8018e70:	696b      	ldr	r3, [r5, #20]
 8018e72:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018e76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e7a:	f8cd 8000 	str.w	r8, [sp]
 8018e7e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8018e82:	6811      	ldr	r1, [r2, #0]
 8018e84:	6922      	ldr	r2, [r4, #16]
 8018e86:	f7f8 ffc5 	bl	8011e14 <uxr_buffer_create_topic_bin>
 8018e8a:	4602      	mov	r2, r0
 8018e8c:	6928      	ldr	r0, [r5, #16]
 8018e8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018e92:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e96:	f7f7 fa51 	bl	801033c <run_xrce_session>
 8018e9a:	b918      	cbnz	r0, 8018ea4 <create_topic+0x8c>
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	2400      	movs	r4, #0
 8018ea0:	f7f7 f940 	bl	8010124 <rmw_uxrce_fini_topic_memory>
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	b004      	add	sp, #16
 8018ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eac:	24012dc4 	.word	0x24012dc4
 8018eb0:	24012e44 	.word	0x24012e44
 8018eb4:	24012e08 	.word	0x24012e08

08018eb8 <destroy_topic>:
 8018eb8:	b538      	push	{r3, r4, r5, lr}
 8018eba:	6985      	ldr	r5, [r0, #24]
 8018ebc:	b1dd      	cbz	r5, 8018ef6 <destroy_topic+0x3e>
 8018ebe:	4604      	mov	r4, r0
 8018ec0:	6928      	ldr	r0, [r5, #16]
 8018ec2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ec6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018eca:	6922      	ldr	r2, [r4, #16]
 8018ecc:	6819      	ldr	r1, [r3, #0]
 8018ece:	f7f8 ff23 	bl	8011d18 <uxr_buffer_delete_entity>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	6928      	ldr	r0, [r5, #16]
 8018ed6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018eda:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018ede:	f7f7 fa2d 	bl	801033c <run_xrce_session>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	bf14      	ite	ne
 8018eea:	2400      	movne	r4, #0
 8018eec:	2402      	moveq	r4, #2
 8018eee:	f7f7 f919 	bl	8010124 <rmw_uxrce_fini_topic_memory>
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	bd38      	pop	{r3, r4, r5, pc}
 8018ef6:	2401      	movs	r4, #1
 8018ef8:	4620      	mov	r0, r4
 8018efa:	bd38      	pop	{r3, r4, r5, pc}

08018efc <rmw_send_request>:
 8018efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f00:	4604      	mov	r4, r0
 8018f02:	6800      	ldr	r0, [r0, #0]
 8018f04:	b08b      	sub	sp, #44	@ 0x2c
 8018f06:	460e      	mov	r6, r1
 8018f08:	4615      	mov	r5, r2
 8018f0a:	b128      	cbz	r0, 8018f18 <rmw_send_request+0x1c>
 8018f0c:	4b21      	ldr	r3, [pc, #132]	@ (8018f94 <rmw_send_request+0x98>)
 8018f0e:	6819      	ldr	r1, [r3, #0]
 8018f10:	f7e7 f9e6 	bl	80002e0 <strcmp>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d139      	bne.n	8018f8c <rmw_send_request+0x90>
 8018f18:	6864      	ldr	r4, [r4, #4]
 8018f1a:	2700      	movs	r7, #0
 8018f1c:	6963      	ldr	r3, [r4, #20]
 8018f1e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8018f22:	689b      	ldr	r3, [r3, #8]
 8018f24:	4798      	blx	r3
 8018f26:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f30:	4798      	blx	r3
 8018f32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018f36:	9000      	str	r0, [sp, #0]
 8018f38:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018f3c:	6922      	ldr	r2, [r4, #16]
 8018f3e:	ab02      	add	r3, sp, #8
 8018f40:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8018f42:	f7fb f9d1 	bl	80142e8 <uxr_prepare_output_stream>
 8018f46:	e9c5 0700 	strd	r0, r7, [r5]
 8018f4a:	b198      	cbz	r0, 8018f74 <rmw_send_request+0x78>
 8018f4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018f50:	a902      	add	r1, sp, #8
 8018f52:	4630      	mov	r0, r6
 8018f54:	4798      	blx	r3
 8018f56:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018f5a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f5e:	2b01      	cmp	r3, #1
 8018f60:	d00c      	beq.n	8018f7c <rmw_send_request+0x80>
 8018f62:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018f64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f68:	f7f9 feee 	bl	8012d48 <uxr_run_session_until_confirm_delivery>
 8018f6c:	4638      	mov	r0, r7
 8018f6e:	b00b      	add	sp, #44	@ 0x2c
 8018f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f74:	2001      	movs	r0, #1
 8018f76:	b00b      	add	sp, #44	@ 0x2c
 8018f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f80:	f7f9 fb28 	bl	80125d4 <uxr_flash_output_streams>
 8018f84:	4638      	mov	r0, r7
 8018f86:	b00b      	add	sp, #44	@ 0x2c
 8018f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f8c:	200c      	movs	r0, #12
 8018f8e:	b00b      	add	sp, #44	@ 0x2c
 8018f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f94:	0801d344 	.word	0x0801d344

08018f98 <rmw_take_request>:
 8018f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f9c:	4605      	mov	r5, r0
 8018f9e:	6800      	ldr	r0, [r0, #0]
 8018fa0:	b089      	sub	sp, #36	@ 0x24
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	4690      	mov	r8, r2
 8018fa6:	461e      	mov	r6, r3
 8018fa8:	b128      	cbz	r0, 8018fb6 <rmw_take_request+0x1e>
 8018faa:	4b28      	ldr	r3, [pc, #160]	@ (801904c <rmw_take_request+0xb4>)
 8018fac:	6819      	ldr	r1, [r3, #0]
 8018fae:	f7e7 f997 	bl	80002e0 <strcmp>
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	d146      	bne.n	8019044 <rmw_take_request+0xac>
 8018fb6:	b10e      	cbz	r6, 8018fbc <rmw_take_request+0x24>
 8018fb8:	2300      	movs	r3, #0
 8018fba:	7033      	strb	r3, [r6, #0]
 8018fbc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018fc0:	f7f7 f93e 	bl	8010240 <rmw_uxrce_clean_expired_static_input_buffer>
 8018fc4:	4648      	mov	r0, r9
 8018fc6:	f7f7 f913 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018fca:	4607      	mov	r7, r0
 8018fcc:	b3b0      	cbz	r0, 801903c <rmw_take_request+0xa4>
 8018fce:	6885      	ldr	r5, [r0, #8]
 8018fd0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8018fd4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8018fd8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018fdc:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8018fe0:	7423      	strb	r3, [r4, #16]
 8018fe2:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8018fe6:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8018fea:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018fee:	74e3      	strb	r3, [r4, #19]
 8018ff0:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8018ff4:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8018ff8:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8018ffc:	6161      	str	r1, [r4, #20]
 8018ffe:	61a2      	str	r2, [r4, #24]
 8019000:	61e3      	str	r3, [r4, #28]
 8019002:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019006:	689b      	ldr	r3, [r3, #8]
 8019008:	4798      	blx	r3
 801900a:	6844      	ldr	r4, [r0, #4]
 801900c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019010:	f105 0110 	add.w	r1, r5, #16
 8019014:	4668      	mov	r0, sp
 8019016:	f7f8 fd87 	bl	8011b28 <ucdr_init_buffer>
 801901a:	4641      	mov	r1, r8
 801901c:	68e3      	ldr	r3, [r4, #12]
 801901e:	4668      	mov	r0, sp
 8019020:	4798      	blx	r3
 8019022:	4639      	mov	r1, r7
 8019024:	4604      	mov	r4, r0
 8019026:	480a      	ldr	r0, [pc, #40]	@ (8019050 <rmw_take_request+0xb8>)
 8019028:	f7ff fe98 	bl	8018d5c <put_memory>
 801902c:	b106      	cbz	r6, 8019030 <rmw_take_request+0x98>
 801902e:	7034      	strb	r4, [r6, #0]
 8019030:	f084 0001 	eor.w	r0, r4, #1
 8019034:	b2c0      	uxtb	r0, r0
 8019036:	b009      	add	sp, #36	@ 0x24
 8019038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801903c:	2001      	movs	r0, #1
 801903e:	b009      	add	sp, #36	@ 0x24
 8019040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019044:	200c      	movs	r0, #12
 8019046:	b009      	add	sp, #36	@ 0x24
 8019048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801904c:	0801d344 	.word	0x0801d344
 8019050:	24012da4 	.word	0x24012da4

08019054 <rmw_send_response>:
 8019054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019056:	4605      	mov	r5, r0
 8019058:	6800      	ldr	r0, [r0, #0]
 801905a:	b091      	sub	sp, #68	@ 0x44
 801905c:	460c      	mov	r4, r1
 801905e:	4616      	mov	r6, r2
 8019060:	b128      	cbz	r0, 801906e <rmw_send_response+0x1a>
 8019062:	4b29      	ldr	r3, [pc, #164]	@ (8019108 <rmw_send_response+0xb4>)
 8019064:	6819      	ldr	r1, [r3, #0]
 8019066:	f7e7 f93b 	bl	80002e0 <strcmp>
 801906a:	2800      	cmp	r0, #0
 801906c:	d141      	bne.n	80190f2 <rmw_send_response+0x9e>
 801906e:	686d      	ldr	r5, [r5, #4]
 8019070:	68a1      	ldr	r1, [r4, #8]
 8019072:	6860      	ldr	r0, [r4, #4]
 8019074:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019076:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801907a:	9307      	str	r3, [sp, #28]
 801907c:	4623      	mov	r3, r4
 801907e:	9206      	str	r2, [sp, #24]
 8019080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019084:	789b      	ldrb	r3, [r3, #2]
 8019086:	f88d 2017 	strb.w	r2, [sp, #23]
 801908a:	f88d 3016 	strb.w	r3, [sp, #22]
 801908e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019092:	68e2      	ldr	r2, [r4, #12]
 8019094:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019098:	ab02      	add	r3, sp, #8
 801909a:	696c      	ldr	r4, [r5, #20]
 801909c:	c307      	stmia	r3!, {r0, r1, r2}
 801909e:	68e3      	ldr	r3, [r4, #12]
 80190a0:	4798      	blx	r3
 80190a2:	6844      	ldr	r4, [r0, #4]
 80190a4:	4630      	mov	r0, r6
 80190a6:	6923      	ldr	r3, [r4, #16]
 80190a8:	4798      	blx	r3
 80190aa:	f100 0318 	add.w	r3, r0, #24
 80190ae:	6938      	ldr	r0, [r7, #16]
 80190b0:	9300      	str	r3, [sp, #0]
 80190b2:	ab08      	add	r3, sp, #32
 80190b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190b8:	692a      	ldr	r2, [r5, #16]
 80190ba:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80190bc:	f7fb f914 	bl	80142e8 <uxr_prepare_output_stream>
 80190c0:	b910      	cbnz	r0, 80190c8 <rmw_send_response+0x74>
 80190c2:	2001      	movs	r0, #1
 80190c4:	b011      	add	sp, #68	@ 0x44
 80190c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190c8:	a902      	add	r1, sp, #8
 80190ca:	a808      	add	r0, sp, #32
 80190cc:	f7fc f966 	bl	801539c <uxr_serialize_SampleIdentity>
 80190d0:	68a3      	ldr	r3, [r4, #8]
 80190d2:	a908      	add	r1, sp, #32
 80190d4:	4630      	mov	r0, r6
 80190d6:	4798      	blx	r3
 80190d8:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80190dc:	6938      	ldr	r0, [r7, #16]
 80190de:	2b01      	cmp	r3, #1
 80190e0:	d00a      	beq.n	80190f8 <rmw_send_response+0xa4>
 80190e2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80190e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190e8:	f7f9 fe2e 	bl	8012d48 <uxr_run_session_until_confirm_delivery>
 80190ec:	2000      	movs	r0, #0
 80190ee:	b011      	add	sp, #68	@ 0x44
 80190f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190f2:	200c      	movs	r0, #12
 80190f4:	b011      	add	sp, #68	@ 0x44
 80190f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190fc:	f7f9 fa6a 	bl	80125d4 <uxr_flash_output_streams>
 8019100:	2000      	movs	r0, #0
 8019102:	b011      	add	sp, #68	@ 0x44
 8019104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019106:	bf00      	nop
 8019108:	0801d344 	.word	0x0801d344

0801910c <rmw_take_response>:
 801910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019110:	4604      	mov	r4, r0
 8019112:	6800      	ldr	r0, [r0, #0]
 8019114:	b088      	sub	sp, #32
 8019116:	460f      	mov	r7, r1
 8019118:	4690      	mov	r8, r2
 801911a:	461d      	mov	r5, r3
 801911c:	b120      	cbz	r0, 8019128 <rmw_take_response+0x1c>
 801911e:	4b1d      	ldr	r3, [pc, #116]	@ (8019194 <rmw_take_response+0x88>)
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	f7e7 f8dd 	bl	80002e0 <strcmp>
 8019126:	bb68      	cbnz	r0, 8019184 <rmw_take_response+0x78>
 8019128:	b10d      	cbz	r5, 801912e <rmw_take_response+0x22>
 801912a:	2300      	movs	r3, #0
 801912c:	702b      	strb	r3, [r5, #0]
 801912e:	6864      	ldr	r4, [r4, #4]
 8019130:	f7f7 f886 	bl	8010240 <rmw_uxrce_clean_expired_static_input_buffer>
 8019134:	4620      	mov	r0, r4
 8019136:	f7f7 f85b 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801913a:	4606      	mov	r6, r0
 801913c:	b330      	cbz	r0, 801918c <rmw_take_response+0x80>
 801913e:	6963      	ldr	r3, [r4, #20]
 8019140:	6884      	ldr	r4, [r0, #8]
 8019142:	68db      	ldr	r3, [r3, #12]
 8019144:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019148:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801914c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8019150:	4798      	blx	r3
 8019152:	6847      	ldr	r7, [r0, #4]
 8019154:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019158:	f104 0110 	add.w	r1, r4, #16
 801915c:	4668      	mov	r0, sp
 801915e:	f7f8 fce3 	bl	8011b28 <ucdr_init_buffer>
 8019162:	4641      	mov	r1, r8
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	4668      	mov	r0, sp
 8019168:	4798      	blx	r3
 801916a:	4631      	mov	r1, r6
 801916c:	4604      	mov	r4, r0
 801916e:	480a      	ldr	r0, [pc, #40]	@ (8019198 <rmw_take_response+0x8c>)
 8019170:	f7ff fdf4 	bl	8018d5c <put_memory>
 8019174:	b105      	cbz	r5, 8019178 <rmw_take_response+0x6c>
 8019176:	702c      	strb	r4, [r5, #0]
 8019178:	f084 0001 	eor.w	r0, r4, #1
 801917c:	b2c0      	uxtb	r0, r0
 801917e:	b008      	add	sp, #32
 8019180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019184:	200c      	movs	r0, #12
 8019186:	b008      	add	sp, #32
 8019188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801918c:	2001      	movs	r0, #1
 801918e:	b008      	add	sp, #32
 8019190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019194:	0801d344 	.word	0x0801d344
 8019198:	24012da4 	.word	0x24012da4

0801919c <rmw_take_with_info>:
 801919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801919e:	4604      	mov	r4, r0
 80191a0:	6800      	ldr	r0, [r0, #0]
 80191a2:	b089      	sub	sp, #36	@ 0x24
 80191a4:	460f      	mov	r7, r1
 80191a6:	4615      	mov	r5, r2
 80191a8:	b128      	cbz	r0, 80191b6 <rmw_take_with_info+0x1a>
 80191aa:	4b24      	ldr	r3, [pc, #144]	@ (801923c <rmw_take_with_info+0xa0>)
 80191ac:	6819      	ldr	r1, [r3, #0]
 80191ae:	f7e7 f897 	bl	80002e0 <strcmp>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d13e      	bne.n	8019234 <rmw_take_with_info+0x98>
 80191b6:	b305      	cbz	r5, 80191fa <rmw_take_with_info+0x5e>
 80191b8:	2300      	movs	r3, #0
 80191ba:	6864      	ldr	r4, [r4, #4]
 80191bc:	702b      	strb	r3, [r5, #0]
 80191be:	f7f7 f83f 	bl	8010240 <rmw_uxrce_clean_expired_static_input_buffer>
 80191c2:	4620      	mov	r0, r4
 80191c4:	f7f7 f814 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191c8:	4606      	mov	r6, r0
 80191ca:	b1f0      	cbz	r0, 801920a <rmw_take_with_info+0x6e>
 80191cc:	6881      	ldr	r1, [r0, #8]
 80191ce:	4668      	mov	r0, sp
 80191d0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80191d4:	3110      	adds	r1, #16
 80191d6:	f7f8 fca7 	bl	8011b28 <ucdr_init_buffer>
 80191da:	69a3      	ldr	r3, [r4, #24]
 80191dc:	4639      	mov	r1, r7
 80191de:	4668      	mov	r0, sp
 80191e0:	68db      	ldr	r3, [r3, #12]
 80191e2:	4798      	blx	r3
 80191e4:	4604      	mov	r4, r0
 80191e6:	4631      	mov	r1, r6
 80191e8:	4815      	ldr	r0, [pc, #84]	@ (8019240 <rmw_take_with_info+0xa4>)
 80191ea:	f7ff fdb7 	bl	8018d5c <put_memory>
 80191ee:	702c      	strb	r4, [r5, #0]
 80191f0:	f084 0001 	eor.w	r0, r4, #1
 80191f4:	b2c0      	uxtb	r0, r0
 80191f6:	b009      	add	sp, #36	@ 0x24
 80191f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191fa:	6864      	ldr	r4, [r4, #4]
 80191fc:	f7f7 f820 	bl	8010240 <rmw_uxrce_clean_expired_static_input_buffer>
 8019200:	4620      	mov	r0, r4
 8019202:	f7f6 fff5 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019206:	4605      	mov	r5, r0
 8019208:	b910      	cbnz	r0, 8019210 <rmw_take_with_info+0x74>
 801920a:	2001      	movs	r0, #1
 801920c:	b009      	add	sp, #36	@ 0x24
 801920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019210:	68a9      	ldr	r1, [r5, #8]
 8019212:	4668      	mov	r0, sp
 8019214:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019218:	3110      	adds	r1, #16
 801921a:	f7f8 fc85 	bl	8011b28 <ucdr_init_buffer>
 801921e:	69a3      	ldr	r3, [r4, #24]
 8019220:	4639      	mov	r1, r7
 8019222:	4668      	mov	r0, sp
 8019224:	68db      	ldr	r3, [r3, #12]
 8019226:	4798      	blx	r3
 8019228:	4629      	mov	r1, r5
 801922a:	4604      	mov	r4, r0
 801922c:	4804      	ldr	r0, [pc, #16]	@ (8019240 <rmw_take_with_info+0xa4>)
 801922e:	f7ff fd95 	bl	8018d5c <put_memory>
 8019232:	e7dd      	b.n	80191f0 <rmw_take_with_info+0x54>
 8019234:	200c      	movs	r0, #12
 8019236:	b009      	add	sp, #36	@ 0x24
 8019238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801923a:	bf00      	nop
 801923c:	0801d344 	.word	0x0801d344
 8019240:	24012da4 	.word	0x24012da4

08019244 <rmw_wait>:
 8019244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019248:	4698      	mov	r8, r3
 801924a:	ea40 0301 	orr.w	r3, r0, r1
 801924e:	b089      	sub	sp, #36	@ 0x24
 8019250:	ea48 0303 	orr.w	r3, r8, r3
 8019254:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019256:	4313      	orrs	r3, r2
 8019258:	f000 8106 	beq.w	8019468 <rmw_wait+0x224>
 801925c:	4605      	mov	r5, r0
 801925e:	460e      	mov	r6, r1
 8019260:	4691      	mov	r9, r2
 8019262:	b16c      	cbz	r4, 8019280 <rmw_wait+0x3c>
 8019264:	4ba6      	ldr	r3, [pc, #664]	@ (8019500 <rmw_wait+0x2bc>)
 8019266:	af04      	add	r7, sp, #16
 8019268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801926a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801926e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019272:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019276:	f7ff fa9b 	bl	80187b0 <rmw_time_equal>
 801927a:	2800      	cmp	r0, #0
 801927c:	f000 810b 	beq.w	8019496 <rmw_wait+0x252>
 8019280:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019284:	f7f6 ffdc 	bl	8010240 <rmw_uxrce_clean_expired_static_input_buffer>
 8019288:	4b9e      	ldr	r3, [pc, #632]	@ (8019504 <rmw_wait+0x2c0>)
 801928a:	681c      	ldr	r4, [r3, #0]
 801928c:	b14c      	cbz	r4, 80192a2 <rmw_wait+0x5e>
 801928e:	4623      	mov	r3, r4
 8019290:	2100      	movs	r1, #0
 8019292:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801929a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d1f7      	bne.n	8019292 <rmw_wait+0x4e>
 80192a2:	f1b9 0f00 	cmp.w	r9, #0
 80192a6:	d011      	beq.n	80192cc <rmw_wait+0x88>
 80192a8:	f8d9 1000 	ldr.w	r1, [r9]
 80192ac:	b171      	cbz	r1, 80192cc <rmw_wait+0x88>
 80192ae:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80192b2:	2300      	movs	r3, #0
 80192b4:	2001      	movs	r0, #1
 80192b6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80192ba:	3301      	adds	r3, #1
 80192bc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80192be:	4299      	cmp	r1, r3
 80192c0:	6912      	ldr	r2, [r2, #16]
 80192c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192c6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80192ca:	d1f4      	bne.n	80192b6 <rmw_wait+0x72>
 80192cc:	f1b8 0f00 	cmp.w	r8, #0
 80192d0:	d011      	beq.n	80192f6 <rmw_wait+0xb2>
 80192d2:	f8d8 1000 	ldr.w	r1, [r8]
 80192d6:	b171      	cbz	r1, 80192f6 <rmw_wait+0xb2>
 80192d8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80192dc:	2300      	movs	r3, #0
 80192de:	2001      	movs	r0, #1
 80192e0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80192e4:	3301      	adds	r3, #1
 80192e6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80192e8:	4299      	cmp	r1, r3
 80192ea:	6912      	ldr	r2, [r2, #16]
 80192ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192f0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80192f4:	d1f4      	bne.n	80192e0 <rmw_wait+0x9c>
 80192f6:	b185      	cbz	r5, 801931a <rmw_wait+0xd6>
 80192f8:	6829      	ldr	r1, [r5, #0]
 80192fa:	b171      	cbz	r1, 801931a <rmw_wait+0xd6>
 80192fc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019300:	2300      	movs	r3, #0
 8019302:	2001      	movs	r0, #1
 8019304:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019308:	3301      	adds	r3, #1
 801930a:	6a12      	ldr	r2, [r2, #32]
 801930c:	4299      	cmp	r1, r3
 801930e:	6912      	ldr	r2, [r2, #16]
 8019310:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019314:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019318:	d1f4      	bne.n	8019304 <rmw_wait+0xc0>
 801931a:	b344      	cbz	r4, 801936e <rmw_wait+0x12a>
 801931c:	4622      	mov	r2, r4
 801931e:	2300      	movs	r3, #0
 8019320:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019324:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019328:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801932c:	440b      	add	r3, r1
 801932e:	b2db      	uxtb	r3, r3
 8019330:	2a00      	cmp	r2, #0
 8019332:	d1f5      	bne.n	8019320 <rmw_wait+0xdc>
 8019334:	2b00      	cmp	r3, #0
 8019336:	d05f      	beq.n	80193f8 <rmw_wait+0x1b4>
 8019338:	1c7a      	adds	r2, r7, #1
 801933a:	d00d      	beq.n	8019358 <rmw_wait+0x114>
 801933c:	ee07 7a90 	vmov	s15, r7
 8019340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019344:	ee07 3a90 	vmov	s15, r3
 8019348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801934c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019350:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019354:	ee17 7a90 	vmov	r7, s15
 8019358:	68a0      	ldr	r0, [r4, #8]
 801935a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801935e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019362:	2b00      	cmp	r3, #0
 8019364:	f040 808d 	bne.w	8019482 <rmw_wait+0x23e>
 8019368:	6864      	ldr	r4, [r4, #4]
 801936a:	2c00      	cmp	r4, #0
 801936c:	d1f4      	bne.n	8019358 <rmw_wait+0x114>
 801936e:	f1b9 0f00 	cmp.w	r9, #0
 8019372:	f000 80a1 	beq.w	80194b8 <rmw_wait+0x274>
 8019376:	f8d9 7000 	ldr.w	r7, [r9]
 801937a:	2f00      	cmp	r7, #0
 801937c:	f000 80a4 	beq.w	80194c8 <rmw_wait+0x284>
 8019380:	2400      	movs	r4, #0
 8019382:	4627      	mov	r7, r4
 8019384:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019388:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801938c:	f7f6 ff30 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019390:	2800      	cmp	r0, #0
 8019392:	d03b      	beq.n	801940c <rmw_wait+0x1c8>
 8019394:	3401      	adds	r4, #1
 8019396:	f8d9 3000 	ldr.w	r3, [r9]
 801939a:	2701      	movs	r7, #1
 801939c:	42a3      	cmp	r3, r4
 801939e:	d8f1      	bhi.n	8019384 <rmw_wait+0x140>
 80193a0:	2701      	movs	r7, #1
 80193a2:	f1b8 0f00 	cmp.w	r8, #0
 80193a6:	d010      	beq.n	80193ca <rmw_wait+0x186>
 80193a8:	f8d8 3000 	ldr.w	r3, [r8]
 80193ac:	b16b      	cbz	r3, 80193ca <rmw_wait+0x186>
 80193ae:	2400      	movs	r4, #0
 80193b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80193b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80193b8:	f7f6 ff1a 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193bc:	b370      	cbz	r0, 801941c <rmw_wait+0x1d8>
 80193be:	3401      	adds	r4, #1
 80193c0:	f8d8 3000 	ldr.w	r3, [r8]
 80193c4:	2701      	movs	r7, #1
 80193c6:	42a3      	cmp	r3, r4
 80193c8:	d8f2      	bhi.n	80193b0 <rmw_wait+0x16c>
 80193ca:	2d00      	cmp	r5, #0
 80193cc:	d035      	beq.n	801943a <rmw_wait+0x1f6>
 80193ce:	682b      	ldr	r3, [r5, #0]
 80193d0:	b39b      	cbz	r3, 801943a <rmw_wait+0x1f6>
 80193d2:	2400      	movs	r4, #0
 80193d4:	686b      	ldr	r3, [r5, #4]
 80193d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80193da:	f7f6 ff09 	bl	80101f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193de:	b328      	cbz	r0, 801942c <rmw_wait+0x1e8>
 80193e0:	3401      	adds	r4, #1
 80193e2:	682b      	ldr	r3, [r5, #0]
 80193e4:	2701      	movs	r7, #1
 80193e6:	42a3      	cmp	r3, r4
 80193e8:	d8f4      	bhi.n	80193d4 <rmw_wait+0x190>
 80193ea:	2e00      	cmp	r6, #0
 80193ec:	d03c      	beq.n	8019468 <rmw_wait+0x224>
 80193ee:	6834      	ldr	r4, [r6, #0]
 80193f0:	2c00      	cmp	r4, #0
 80193f2:	d039      	beq.n	8019468 <rmw_wait+0x224>
 80193f4:	2701      	movs	r7, #1
 80193f6:	e023      	b.n	8019440 <rmw_wait+0x1fc>
 80193f8:	68a0      	ldr	r0, [r4, #8]
 80193fa:	2100      	movs	r1, #0
 80193fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019400:	f7f9 fc68 	bl	8012cd4 <uxr_run_session_timeout>
 8019404:	6864      	ldr	r4, [r4, #4]
 8019406:	2c00      	cmp	r4, #0
 8019408:	d1f6      	bne.n	80193f8 <rmw_wait+0x1b4>
 801940a:	e7b0      	b.n	801936e <rmw_wait+0x12a>
 801940c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019410:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019414:	3401      	adds	r4, #1
 8019416:	42a3      	cmp	r3, r4
 8019418:	d8b4      	bhi.n	8019384 <rmw_wait+0x140>
 801941a:	e7c2      	b.n	80193a2 <rmw_wait+0x15e>
 801941c:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019420:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019424:	3401      	adds	r4, #1
 8019426:	429c      	cmp	r4, r3
 8019428:	d3c2      	bcc.n	80193b0 <rmw_wait+0x16c>
 801942a:	e7ce      	b.n	80193ca <rmw_wait+0x186>
 801942c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019430:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019434:	3401      	adds	r4, #1
 8019436:	42a3      	cmp	r3, r4
 8019438:	d8cc      	bhi.n	80193d4 <rmw_wait+0x190>
 801943a:	b1a6      	cbz	r6, 8019466 <rmw_wait+0x222>
 801943c:	6834      	ldr	r4, [r6, #0]
 801943e:	b194      	cbz	r4, 8019466 <rmw_wait+0x222>
 8019440:	2300      	movs	r3, #0
 8019442:	461d      	mov	r5, r3
 8019444:	e004      	b.n	8019450 <rmw_wait+0x20c>
 8019446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801944a:	3301      	adds	r3, #1
 801944c:	42a3      	cmp	r3, r4
 801944e:	d00a      	beq.n	8019466 <rmw_wait+0x222>
 8019450:	6870      	ldr	r0, [r6, #4]
 8019452:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019456:	7c0a      	ldrb	r2, [r1, #16]
 8019458:	2a00      	cmp	r2, #0
 801945a:	d0f4      	beq.n	8019446 <rmw_wait+0x202>
 801945c:	3301      	adds	r3, #1
 801945e:	4617      	mov	r7, r2
 8019460:	740d      	strb	r5, [r1, #16]
 8019462:	42a3      	cmp	r3, r4
 8019464:	d1f4      	bne.n	8019450 <rmw_wait+0x20c>
 8019466:	b147      	cbz	r7, 801947a <rmw_wait+0x236>
 8019468:	2000      	movs	r0, #0
 801946a:	b009      	add	sp, #36	@ 0x24
 801946c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019470:	b11e      	cbz	r6, 801947a <rmw_wait+0x236>
 8019472:	6834      	ldr	r4, [r6, #0]
 8019474:	462f      	mov	r7, r5
 8019476:	2c00      	cmp	r4, #0
 8019478:	d1e2      	bne.n	8019440 <rmw_wait+0x1fc>
 801947a:	2002      	movs	r0, #2
 801947c:	b009      	add	sp, #36	@ 0x24
 801947e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019482:	4639      	mov	r1, r7
 8019484:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019488:	f7f9 fc3e 	bl	8012d08 <uxr_run_session_until_data>
 801948c:	6864      	ldr	r4, [r4, #4]
 801948e:	2c00      	cmp	r4, #0
 8019490:	f47f af62 	bne.w	8019358 <rmw_wait+0x114>
 8019494:	e76b      	b.n	801936e <rmw_wait+0x12a>
 8019496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801949a:	f7ff f9df 	bl	801885c <rmw_time_total_nsec>
 801949e:	2300      	movs	r3, #0
 80194a0:	4a19      	ldr	r2, [pc, #100]	@ (8019508 <rmw_wait+0x2c4>)
 80194a2:	f7e6 ffd5 	bl	8000450 <__aeabi_uldivmod>
 80194a6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80194aa:	4607      	mov	r7, r0
 80194ac:	f171 0300 	sbcs.w	r3, r1, #0
 80194b0:	bfa8      	it	ge
 80194b2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80194b6:	e6e5      	b.n	8019284 <rmw_wait+0x40>
 80194b8:	f1b8 0f00 	cmp.w	r8, #0
 80194bc:	d00f      	beq.n	80194de <rmw_wait+0x29a>
 80194be:	f8d8 3000 	ldr.w	r3, [r8]
 80194c2:	b193      	cbz	r3, 80194ea <rmw_wait+0x2a6>
 80194c4:	464f      	mov	r7, r9
 80194c6:	e772      	b.n	80193ae <rmw_wait+0x16a>
 80194c8:	f1b8 0f00 	cmp.w	r8, #0
 80194cc:	d007      	beq.n	80194de <rmw_wait+0x29a>
 80194ce:	f8d8 3000 	ldr.w	r3, [r8]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	f47f af6b 	bne.w	80193ae <rmw_wait+0x16a>
 80194d8:	b155      	cbz	r5, 80194f0 <rmw_wait+0x2ac>
 80194da:	461f      	mov	r7, r3
 80194dc:	e777      	b.n	80193ce <rmw_wait+0x18a>
 80194de:	2d00      	cmp	r5, #0
 80194e0:	d0c6      	beq.n	8019470 <rmw_wait+0x22c>
 80194e2:	682b      	ldr	r3, [r5, #0]
 80194e4:	b143      	cbz	r3, 80194f8 <rmw_wait+0x2b4>
 80194e6:	4647      	mov	r7, r8
 80194e8:	e773      	b.n	80193d2 <rmw_wait+0x18e>
 80194ea:	b10d      	cbz	r5, 80194f0 <rmw_wait+0x2ac>
 80194ec:	464f      	mov	r7, r9
 80194ee:	e76e      	b.n	80193ce <rmw_wait+0x18a>
 80194f0:	462f      	mov	r7, r5
 80194f2:	2e00      	cmp	r6, #0
 80194f4:	d1a2      	bne.n	801943c <rmw_wait+0x1f8>
 80194f6:	e7c0      	b.n	801947a <rmw_wait+0x236>
 80194f8:	4647      	mov	r7, r8
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d19e      	bne.n	801943c <rmw_wait+0x1f8>
 80194fe:	e7bc      	b.n	801947a <rmw_wait+0x236>
 8019500:	0801c828 	.word	0x0801c828
 8019504:	24012d94 	.word	0x24012d94
 8019508:	000f4240 	.word	0x000f4240

0801950c <rmw_create_wait_set>:
 801950c:	b508      	push	{r3, lr}
 801950e:	4803      	ldr	r0, [pc, #12]	@ (801951c <rmw_create_wait_set+0x10>)
 8019510:	f7ff fc14 	bl	8018d3c <get_memory>
 8019514:	b108      	cbz	r0, 801951a <rmw_create_wait_set+0xe>
 8019516:	6880      	ldr	r0, [r0, #8]
 8019518:	3010      	adds	r0, #16
 801951a:	bd08      	pop	{r3, pc}
 801951c:	24012dd4 	.word	0x24012dd4

08019520 <rmw_destroy_wait_set>:
 8019520:	b508      	push	{r3, lr}
 8019522:	4b08      	ldr	r3, [pc, #32]	@ (8019544 <rmw_destroy_wait_set+0x24>)
 8019524:	6819      	ldr	r1, [r3, #0]
 8019526:	b911      	cbnz	r1, 801952e <rmw_destroy_wait_set+0xe>
 8019528:	e00a      	b.n	8019540 <rmw_destroy_wait_set+0x20>
 801952a:	6849      	ldr	r1, [r1, #4]
 801952c:	b141      	cbz	r1, 8019540 <rmw_destroy_wait_set+0x20>
 801952e:	688b      	ldr	r3, [r1, #8]
 8019530:	3310      	adds	r3, #16
 8019532:	4298      	cmp	r0, r3
 8019534:	d1f9      	bne.n	801952a <rmw_destroy_wait_set+0xa>
 8019536:	4803      	ldr	r0, [pc, #12]	@ (8019544 <rmw_destroy_wait_set+0x24>)
 8019538:	f7ff fc10 	bl	8018d5c <put_memory>
 801953c:	2000      	movs	r0, #0
 801953e:	bd08      	pop	{r3, pc}
 8019540:	2001      	movs	r0, #1
 8019542:	bd08      	pop	{r3, pc}
 8019544:	24012dd4 	.word	0x24012dd4

08019548 <rosidl_runtime_c__double__Sequence__init>:
 8019548:	b530      	push	{r4, r5, lr}
 801954a:	4604      	mov	r4, r0
 801954c:	b087      	sub	sp, #28
 801954e:	b130      	cbz	r0, 801955e <rosidl_runtime_c__double__Sequence__init+0x16>
 8019550:	460d      	mov	r5, r1
 8019552:	b931      	cbnz	r1, 8019562 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8019554:	460b      	mov	r3, r1
 8019556:	2001      	movs	r0, #1
 8019558:	60a5      	str	r5, [r4, #8]
 801955a:	e9c4 3500 	strd	r3, r5, [r4]
 801955e:	b007      	add	sp, #28
 8019560:	bd30      	pop	{r4, r5, pc}
 8019562:	a801      	add	r0, sp, #4
 8019564:	f7f5 fd36 	bl	800efd4 <rcutils_get_default_allocator>
 8019568:	9b01      	ldr	r3, [sp, #4]
 801956a:	9905      	ldr	r1, [sp, #20]
 801956c:	00e8      	lsls	r0, r5, #3
 801956e:	4798      	blx	r3
 8019570:	4603      	mov	r3, r0
 8019572:	2800      	cmp	r0, #0
 8019574:	d1ef      	bne.n	8019556 <rosidl_runtime_c__double__Sequence__init+0xe>
 8019576:	e7f2      	b.n	801955e <rosidl_runtime_c__double__Sequence__init+0x16>

08019578 <rosidl_runtime_c__double__Sequence__fini>:
 8019578:	b188      	cbz	r0, 801959e <rosidl_runtime_c__double__Sequence__fini+0x26>
 801957a:	6803      	ldr	r3, [r0, #0]
 801957c:	b510      	push	{r4, lr}
 801957e:	4604      	mov	r4, r0
 8019580:	b086      	sub	sp, #24
 8019582:	b153      	cbz	r3, 801959a <rosidl_runtime_c__double__Sequence__fini+0x22>
 8019584:	a801      	add	r0, sp, #4
 8019586:	f7f5 fd25 	bl	800efd4 <rcutils_get_default_allocator>
 801958a:	9b02      	ldr	r3, [sp, #8]
 801958c:	9905      	ldr	r1, [sp, #20]
 801958e:	6820      	ldr	r0, [r4, #0]
 8019590:	4798      	blx	r3
 8019592:	2300      	movs	r3, #0
 8019594:	e9c4 3300 	strd	r3, r3, [r4]
 8019598:	60a3      	str	r3, [r4, #8]
 801959a:	b006      	add	sp, #24
 801959c:	bd10      	pop	{r4, pc}
 801959e:	4770      	bx	lr

080195a0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80195a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195a4:	6805      	ldr	r5, [r0, #0]
 80195a6:	4604      	mov	r4, r0
 80195a8:	460e      	mov	r6, r1
 80195aa:	4628      	mov	r0, r5
 80195ac:	f7e6 fe98 	bl	80002e0 <strcmp>
 80195b0:	b1c8      	cbz	r0, 80195e6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80195b2:	4b11      	ldr	r3, [pc, #68]	@ (80195f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	429d      	cmp	r5, r3
 80195b8:	d112      	bne.n	80195e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80195ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80195be:	f8d8 4000 	ldr.w	r4, [r8]
 80195c2:	b16c      	cbz	r4, 80195e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80195c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80195c8:	2700      	movs	r7, #0
 80195ca:	3d04      	subs	r5, #4
 80195cc:	4631      	mov	r1, r6
 80195ce:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80195d2:	f7e6 fe85 	bl	80002e0 <strcmp>
 80195d6:	00bb      	lsls	r3, r7, #2
 80195d8:	b140      	cbz	r0, 80195ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80195da:	3701      	adds	r7, #1
 80195dc:	42bc      	cmp	r4, r7
 80195de:	d1f5      	bne.n	80195cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80195e0:	2000      	movs	r0, #0
 80195e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195e6:	4620      	mov	r0, r4
 80195e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80195f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195f4:	58d3      	ldr	r3, [r2, r3]
 80195f6:	4718      	bx	r3
 80195f8:	240001b4 	.word	0x240001b4

080195fc <std_msgs__msg__Float64MultiArray__init>:
 80195fc:	b570      	push	{r4, r5, r6, lr}
 80195fe:	4605      	mov	r5, r0
 8019600:	b1b0      	cbz	r0, 8019630 <std_msgs__msg__Float64MultiArray__init+0x34>
 8019602:	f000 f8b3 	bl	801976c <std_msgs__msg__MultiArrayLayout__init>
 8019606:	4604      	mov	r4, r0
 8019608:	b148      	cbz	r0, 801961e <std_msgs__msg__Float64MultiArray__init+0x22>
 801960a:	f105 0610 	add.w	r6, r5, #16
 801960e:	2100      	movs	r1, #0
 8019610:	4630      	mov	r0, r6
 8019612:	f7ff ff99 	bl	8019548 <rosidl_runtime_c__double__Sequence__init>
 8019616:	4604      	mov	r4, r0
 8019618:	b168      	cbz	r0, 8019636 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801961a:	4620      	mov	r0, r4
 801961c:	bd70      	pop	{r4, r5, r6, pc}
 801961e:	4628      	mov	r0, r5
 8019620:	f000 f8b6 	bl	8019790 <std_msgs__msg__MultiArrayLayout__fini>
 8019624:	f105 0010 	add.w	r0, r5, #16
 8019628:	f7ff ffa6 	bl	8019578 <rosidl_runtime_c__double__Sequence__fini>
 801962c:	4620      	mov	r0, r4
 801962e:	bd70      	pop	{r4, r5, r6, pc}
 8019630:	4604      	mov	r4, r0
 8019632:	4620      	mov	r0, r4
 8019634:	bd70      	pop	{r4, r5, r6, pc}
 8019636:	4628      	mov	r0, r5
 8019638:	f000 f8aa 	bl	8019790 <std_msgs__msg__MultiArrayLayout__fini>
 801963c:	4630      	mov	r0, r6
 801963e:	f7ff ff9b 	bl	8019578 <rosidl_runtime_c__double__Sequence__fini>
 8019642:	e7ea      	b.n	801961a <std_msgs__msg__Float64MultiArray__init+0x1e>

08019644 <std_msgs__msg__Float64MultiArray__fini>:
 8019644:	b148      	cbz	r0, 801965a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8019646:	b510      	push	{r4, lr}
 8019648:	4604      	mov	r4, r0
 801964a:	f000 f8a1 	bl	8019790 <std_msgs__msg__MultiArrayLayout__fini>
 801964e:	f104 0010 	add.w	r0, r4, #16
 8019652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019656:	f7ff bf8f 	b.w	8019578 <rosidl_runtime_c__double__Sequence__fini>
 801965a:	4770      	bx	lr

0801965c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019660:	b086      	sub	sp, #24
 8019662:	4689      	mov	r9, r1
 8019664:	4682      	mov	sl, r0
 8019666:	a801      	add	r0, sp, #4
 8019668:	f7f5 fcb4 	bl	800efd4 <rcutils_get_default_allocator>
 801966c:	f1b9 0f00 	cmp.w	r9, #0
 8019670:	d02e      	beq.n	80196d0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 8019672:	2114      	movs	r1, #20
 8019674:	4648      	mov	r0, r9
 8019676:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 801967a:	4642      	mov	r2, r8
 801967c:	4798      	blx	r3
 801967e:	4607      	mov	r7, r0
 8019680:	b380      	cbz	r0, 80196e4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 8019682:	4606      	mov	r6, r0
 8019684:	2400      	movs	r4, #0
 8019686:	e003      	b.n	8019690 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 8019688:	3401      	adds	r4, #1
 801968a:	3614      	adds	r6, #20
 801968c:	45a1      	cmp	r9, r4
 801968e:	d020      	beq.n	80196d2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019690:	4630      	mov	r0, r6
 8019692:	f001 fc29 	bl	801aee8 <rosidl_runtime_c__String__init>
 8019696:	4605      	mov	r5, r0
 8019698:	2800      	cmp	r0, #0
 801969a:	d1f5      	bne.n	8019688 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801969c:	4630      	mov	r0, r6
 801969e:	f001 fc39 	bl	801af14 <rosidl_runtime_c__String__fini>
 80196a2:	45a1      	cmp	r9, r4
 80196a4:	d915      	bls.n	80196d2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80196a6:	b15c      	cbz	r4, 80196c0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 80196a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80196ac:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80196b0:	3c14      	subs	r4, #20
 80196b2:	4620      	mov	r0, r4
 80196b4:	f001 fc2e 	bl	801af14 <rosidl_runtime_c__String__fini>
 80196b8:	42a7      	cmp	r7, r4
 80196ba:	f1a4 0414 	sub.w	r4, r4, #20
 80196be:	d1f8      	bne.n	80196b2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 80196c0:	4638      	mov	r0, r7
 80196c2:	9b02      	ldr	r3, [sp, #8]
 80196c4:	4641      	mov	r1, r8
 80196c6:	4798      	blx	r3
 80196c8:	4628      	mov	r0, r5
 80196ca:	b006      	add	sp, #24
 80196cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196d0:	464f      	mov	r7, r9
 80196d2:	2501      	movs	r5, #1
 80196d4:	f8ca 9008 	str.w	r9, [sl, #8]
 80196d8:	e9ca 7900 	strd	r7, r9, [sl]
 80196dc:	4628      	mov	r0, r5
 80196de:	b006      	add	sp, #24
 80196e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196e4:	4605      	mov	r5, r0
 80196e6:	e7f9      	b.n	80196dc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

080196e8 <std_msgs__msg__MultiArrayDimension__init>:
 80196e8:	b538      	push	{r3, r4, r5, lr}
 80196ea:	4604      	mov	r4, r0
 80196ec:	b128      	cbz	r0, 80196fa <std_msgs__msg__MultiArrayDimension__init+0x12>
 80196ee:	f001 fbfb 	bl	801aee8 <rosidl_runtime_c__String__init>
 80196f2:	4605      	mov	r5, r0
 80196f4:	b120      	cbz	r0, 8019700 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80196f6:	4628      	mov	r0, r5
 80196f8:	bd38      	pop	{r3, r4, r5, pc}
 80196fa:	4605      	mov	r5, r0
 80196fc:	4628      	mov	r0, r5
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	4620      	mov	r0, r4
 8019702:	f001 fc07 	bl	801af14 <rosidl_runtime_c__String__fini>
 8019706:	4628      	mov	r0, r5
 8019708:	bd38      	pop	{r3, r4, r5, pc}
 801970a:	bf00      	nop

0801970c <std_msgs__msg__MultiArrayDimension__fini>:
 801970c:	b108      	cbz	r0, 8019712 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801970e:	f001 bc01 	b.w	801af14 <rosidl_runtime_c__String__fini>
 8019712:	4770      	bx	lr

08019714 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019714:	b108      	cbz	r0, 801971a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019716:	f7ff bfa1 	b.w	801965c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801971a:	4770      	bx	lr

0801971c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801971c:	b320      	cbz	r0, 8019768 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801971e:	b530      	push	{r4, r5, lr}
 8019720:	b087      	sub	sp, #28
 8019722:	4605      	mov	r5, r0
 8019724:	a801      	add	r0, sp, #4
 8019726:	f7f5 fc55 	bl	800efd4 <rcutils_get_default_allocator>
 801972a:	682a      	ldr	r2, [r5, #0]
 801972c:	b1b2      	cbz	r2, 801975c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801972e:	68a9      	ldr	r1, [r5, #8]
 8019730:	b161      	cbz	r1, 801974c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019732:	2400      	movs	r4, #0
 8019734:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019738:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 801973c:	d010      	beq.n	8019760 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801973e:	f001 fbe9 	bl	801af14 <rosidl_runtime_c__String__fini>
 8019742:	3401      	adds	r4, #1
 8019744:	68a9      	ldr	r1, [r5, #8]
 8019746:	682a      	ldr	r2, [r5, #0]
 8019748:	428c      	cmp	r4, r1
 801974a:	d3f3      	bcc.n	8019734 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801974c:	9b02      	ldr	r3, [sp, #8]
 801974e:	4610      	mov	r0, r2
 8019750:	9905      	ldr	r1, [sp, #20]
 8019752:	4798      	blx	r3
 8019754:	2300      	movs	r3, #0
 8019756:	e9c5 3300 	strd	r3, r3, [r5]
 801975a:	60ab      	str	r3, [r5, #8]
 801975c:	b007      	add	sp, #28
 801975e:	bd30      	pop	{r4, r5, pc}
 8019760:	3401      	adds	r4, #1
 8019762:	428c      	cmp	r4, r1
 8019764:	d3e6      	bcc.n	8019734 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019766:	e7f1      	b.n	801974c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop

0801976c <std_msgs__msg__MultiArrayLayout__init>:
 801976c:	b538      	push	{r3, r4, r5, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	b130      	cbz	r0, 8019780 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019772:	2100      	movs	r1, #0
 8019774:	f7ff ffce 	bl	8019714 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019778:	4605      	mov	r5, r0
 801977a:	b120      	cbz	r0, 8019786 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 801977c:	4628      	mov	r0, r5
 801977e:	bd38      	pop	{r3, r4, r5, pc}
 8019780:	4605      	mov	r5, r0
 8019782:	4628      	mov	r0, r5
 8019784:	bd38      	pop	{r3, r4, r5, pc}
 8019786:	4620      	mov	r0, r4
 8019788:	f7ff ffc8 	bl	801971c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801978c:	4628      	mov	r0, r5
 801978e:	bd38      	pop	{r3, r4, r5, pc}

08019790 <std_msgs__msg__MultiArrayLayout__fini>:
 8019790:	b108      	cbz	r0, 8019796 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019792:	f7ff bfc3 	b.w	801971c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019796:	4770      	bx	lr

08019798 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019798:	f7ff bfa6 	b.w	80196e8 <std_msgs__msg__MultiArrayDimension__init>

0801979c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801979c:	f7ff bfb6 	b.w	801970c <std_msgs__msg__MultiArrayDimension__fini>

080197a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80197a0:	4b04      	ldr	r3, [pc, #16]	@ (80197b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	b10a      	cbz	r2, 80197aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80197a6:	4803      	ldr	r0, [pc, #12]	@ (80197b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80197a8:	4770      	bx	lr
 80197aa:	4a03      	ldr	r2, [pc, #12]	@ (80197b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80197ac:	4801      	ldr	r0, [pc, #4]	@ (80197b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80197ae:	6812      	ldr	r2, [r2, #0]
 80197b0:	601a      	str	r2, [r3, #0]
 80197b2:	4770      	bx	lr
 80197b4:	24000270 	.word	0x24000270
 80197b8:	240001b8 	.word	0x240001b8

080197bc <_MultiArrayDimension__cdr_serialize>:
 80197bc:	b1d0      	cbz	r0, 80197f4 <_MultiArrayDimension__cdr_serialize+0x38>
 80197be:	b570      	push	{r4, r5, r6, lr}
 80197c0:	6806      	ldr	r6, [r0, #0]
 80197c2:	4604      	mov	r4, r0
 80197c4:	460d      	mov	r5, r1
 80197c6:	b196      	cbz	r6, 80197ee <_MultiArrayDimension__cdr_serialize+0x32>
 80197c8:	4630      	mov	r0, r6
 80197ca:	f7e6 fd93 	bl	80002f4 <strlen>
 80197ce:	1c42      	adds	r2, r0, #1
 80197d0:	4631      	mov	r1, r6
 80197d2:	6060      	str	r0, [r4, #4]
 80197d4:	4628      	mov	r0, r5
 80197d6:	f7f8 fa1b 	bl	8011c10 <ucdr_serialize_sequence_char>
 80197da:	68e1      	ldr	r1, [r4, #12]
 80197dc:	4628      	mov	r0, r5
 80197de:	f7f7 fa6d 	bl	8010cbc <ucdr_serialize_uint32_t>
 80197e2:	6921      	ldr	r1, [r4, #16]
 80197e4:	4628      	mov	r0, r5
 80197e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197ea:	f7f7 ba67 	b.w	8010cbc <ucdr_serialize_uint32_t>
 80197ee:	4632      	mov	r2, r6
 80197f0:	4630      	mov	r0, r6
 80197f2:	e7ed      	b.n	80197d0 <_MultiArrayDimension__cdr_serialize+0x14>
 80197f4:	4770      	bx	lr
 80197f6:	bf00      	nop

080197f8 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80197f8:	b570      	push	{r4, r5, r6, lr}
 80197fa:	4604      	mov	r4, r0
 80197fc:	b1b0      	cbz	r0, 801982c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80197fe:	460d      	mov	r5, r1
 8019800:	2104      	movs	r1, #4
 8019802:	4628      	mov	r0, r5
 8019804:	f7f8 f994 	bl	8011b30 <ucdr_alignment>
 8019808:	6866      	ldr	r6, [r4, #4]
 801980a:	1d6b      	adds	r3, r5, #5
 801980c:	2104      	movs	r1, #4
 801980e:	f1c5 0504 	rsb	r5, r5, #4
 8019812:	4433      	add	r3, r6
 8019814:	181e      	adds	r6, r3, r0
 8019816:	4630      	mov	r0, r6
 8019818:	f7f8 f98a 	bl	8011b30 <ucdr_alignment>
 801981c:	2104      	movs	r1, #4
 801981e:	1844      	adds	r4, r0, r1
 8019820:	4434      	add	r4, r6
 8019822:	4620      	mov	r0, r4
 8019824:	f7f8 f984 	bl	8011b30 <ucdr_alignment>
 8019828:	4428      	add	r0, r5
 801982a:	4420      	add	r0, r4
 801982c:	bd70      	pop	{r4, r5, r6, pc}
 801982e:	bf00      	nop

08019830 <_MultiArrayDimension__cdr_deserialize>:
 8019830:	b570      	push	{r4, r5, r6, lr}
 8019832:	460c      	mov	r4, r1
 8019834:	b082      	sub	sp, #8
 8019836:	b1d9      	cbz	r1, 8019870 <_MultiArrayDimension__cdr_deserialize+0x40>
 8019838:	688e      	ldr	r6, [r1, #8]
 801983a:	ab01      	add	r3, sp, #4
 801983c:	6809      	ldr	r1, [r1, #0]
 801983e:	4605      	mov	r5, r0
 8019840:	4632      	mov	r2, r6
 8019842:	f7f8 f9f7 	bl	8011c34 <ucdr_deserialize_sequence_char>
 8019846:	9b01      	ldr	r3, [sp, #4]
 8019848:	b970      	cbnz	r0, 8019868 <_MultiArrayDimension__cdr_deserialize+0x38>
 801984a:	429e      	cmp	r6, r3
 801984c:	d313      	bcc.n	8019876 <_MultiArrayDimension__cdr_deserialize+0x46>
 801984e:	f104 010c 	add.w	r1, r4, #12
 8019852:	4628      	mov	r0, r5
 8019854:	f7f7 fb62 	bl	8010f1c <ucdr_deserialize_uint32_t>
 8019858:	f104 0110 	add.w	r1, r4, #16
 801985c:	4628      	mov	r0, r5
 801985e:	b002      	add	sp, #8
 8019860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019864:	f7f7 bb5a 	b.w	8010f1c <ucdr_deserialize_uint32_t>
 8019868:	b103      	cbz	r3, 801986c <_MultiArrayDimension__cdr_deserialize+0x3c>
 801986a:	3b01      	subs	r3, #1
 801986c:	6063      	str	r3, [r4, #4]
 801986e:	e7ee      	b.n	801984e <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019870:	4608      	mov	r0, r1
 8019872:	b002      	add	sp, #8
 8019874:	bd70      	pop	{r4, r5, r6, pc}
 8019876:	2101      	movs	r1, #1
 8019878:	75a8      	strb	r0, [r5, #22]
 801987a:	7569      	strb	r1, [r5, #21]
 801987c:	6060      	str	r0, [r4, #4]
 801987e:	4628      	mov	r0, r5
 8019880:	f7f8 f96e 	bl	8011b60 <ucdr_align_to>
 8019884:	9901      	ldr	r1, [sp, #4]
 8019886:	4628      	mov	r0, r5
 8019888:	f7f8 f9a2 	bl	8011bd0 <ucdr_advance_buffer>
 801988c:	e7df      	b.n	801984e <_MultiArrayDimension__cdr_deserialize+0x1e>
 801988e:	bf00      	nop

08019890 <_MultiArrayDimension__max_serialized_size>:
 8019890:	b510      	push	{r4, lr}
 8019892:	2104      	movs	r1, #4
 8019894:	2000      	movs	r0, #0
 8019896:	f7f8 f94b 	bl	8011b30 <ucdr_alignment>
 801989a:	2104      	movs	r1, #4
 801989c:	1844      	adds	r4, r0, r1
 801989e:	4620      	mov	r0, r4
 80198a0:	f7f8 f946 	bl	8011b30 <ucdr_alignment>
 80198a4:	3004      	adds	r0, #4
 80198a6:	4420      	add	r0, r4
 80198a8:	bd10      	pop	{r4, pc}
 80198aa:	bf00      	nop

080198ac <_MultiArrayDimension__get_serialized_size>:
 80198ac:	b510      	push	{r4, lr}
 80198ae:	4604      	mov	r4, r0
 80198b0:	b190      	cbz	r0, 80198d8 <_MultiArrayDimension__get_serialized_size+0x2c>
 80198b2:	2104      	movs	r1, #4
 80198b4:	2000      	movs	r0, #0
 80198b6:	f7f8 f93b 	bl	8011b30 <ucdr_alignment>
 80198ba:	6863      	ldr	r3, [r4, #4]
 80198bc:	2104      	movs	r1, #4
 80198be:	3305      	adds	r3, #5
 80198c0:	181c      	adds	r4, r3, r0
 80198c2:	4620      	mov	r0, r4
 80198c4:	f7f8 f934 	bl	8011b30 <ucdr_alignment>
 80198c8:	2104      	movs	r1, #4
 80198ca:	4408      	add	r0, r1
 80198cc:	4404      	add	r4, r0
 80198ce:	4620      	mov	r0, r4
 80198d0:	f7f8 f92e 	bl	8011b30 <ucdr_alignment>
 80198d4:	3004      	adds	r0, #4
 80198d6:	4420      	add	r0, r4
 80198d8:	bd10      	pop	{r4, pc}
 80198da:	bf00      	nop

080198dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80198dc:	4800      	ldr	r0, [pc, #0]	@ (80198e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80198de:	4770      	bx	lr
 80198e0:	2400027c 	.word	0x2400027c

080198e4 <ucdr_serialize_endian_array_char>:
 80198e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198e8:	4619      	mov	r1, r3
 80198ea:	461f      	mov	r7, r3
 80198ec:	4605      	mov	r5, r0
 80198ee:	4690      	mov	r8, r2
 80198f0:	f7f8 f8c6 	bl	8011a80 <ucdr_check_buffer_available_for>
 80198f4:	b9e0      	cbnz	r0, 8019930 <ucdr_serialize_endian_array_char+0x4c>
 80198f6:	463e      	mov	r6, r7
 80198f8:	e00b      	b.n	8019912 <ucdr_serialize_endian_array_char+0x2e>
 80198fa:	4441      	add	r1, r8
 80198fc:	68a8      	ldr	r0, [r5, #8]
 80198fe:	4622      	mov	r2, r4
 8019900:	1b36      	subs	r6, r6, r4
 8019902:	f002 f902 	bl	801bb0a <memcpy>
 8019906:	68ab      	ldr	r3, [r5, #8]
 8019908:	6928      	ldr	r0, [r5, #16]
 801990a:	4423      	add	r3, r4
 801990c:	4420      	add	r0, r4
 801990e:	60ab      	str	r3, [r5, #8]
 8019910:	6128      	str	r0, [r5, #16]
 8019912:	4631      	mov	r1, r6
 8019914:	2201      	movs	r2, #1
 8019916:	4628      	mov	r0, r5
 8019918:	f7f8 f93c 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 801991c:	1bb9      	subs	r1, r7, r6
 801991e:	4604      	mov	r4, r0
 8019920:	2800      	cmp	r0, #0
 8019922:	d1ea      	bne.n	80198fa <ucdr_serialize_endian_array_char+0x16>
 8019924:	2301      	movs	r3, #1
 8019926:	7da8      	ldrb	r0, [r5, #22]
 8019928:	756b      	strb	r3, [r5, #21]
 801992a:	4058      	eors	r0, r3
 801992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019930:	463a      	mov	r2, r7
 8019932:	4641      	mov	r1, r8
 8019934:	68a8      	ldr	r0, [r5, #8]
 8019936:	f002 f8e8 	bl	801bb0a <memcpy>
 801993a:	68aa      	ldr	r2, [r5, #8]
 801993c:	692b      	ldr	r3, [r5, #16]
 801993e:	443a      	add	r2, r7
 8019940:	443b      	add	r3, r7
 8019942:	60aa      	str	r2, [r5, #8]
 8019944:	612b      	str	r3, [r5, #16]
 8019946:	e7ed      	b.n	8019924 <ucdr_serialize_endian_array_char+0x40>

08019948 <ucdr_deserialize_endian_array_char>:
 8019948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801994c:	4619      	mov	r1, r3
 801994e:	461f      	mov	r7, r3
 8019950:	4605      	mov	r5, r0
 8019952:	4690      	mov	r8, r2
 8019954:	f7f8 f894 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019958:	b9e8      	cbnz	r0, 8019996 <ucdr_deserialize_endian_array_char+0x4e>
 801995a:	463e      	mov	r6, r7
 801995c:	e00c      	b.n	8019978 <ucdr_deserialize_endian_array_char+0x30>
 801995e:	eb08 0003 	add.w	r0, r8, r3
 8019962:	68a9      	ldr	r1, [r5, #8]
 8019964:	4622      	mov	r2, r4
 8019966:	1b36      	subs	r6, r6, r4
 8019968:	f002 f8cf 	bl	801bb0a <memcpy>
 801996c:	68ab      	ldr	r3, [r5, #8]
 801996e:	6928      	ldr	r0, [r5, #16]
 8019970:	4423      	add	r3, r4
 8019972:	4420      	add	r0, r4
 8019974:	60ab      	str	r3, [r5, #8]
 8019976:	6128      	str	r0, [r5, #16]
 8019978:	4631      	mov	r1, r6
 801997a:	2201      	movs	r2, #1
 801997c:	4628      	mov	r0, r5
 801997e:	f7f8 f909 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019982:	1bbb      	subs	r3, r7, r6
 8019984:	4604      	mov	r4, r0
 8019986:	2800      	cmp	r0, #0
 8019988:	d1e9      	bne.n	801995e <ucdr_deserialize_endian_array_char+0x16>
 801998a:	2301      	movs	r3, #1
 801998c:	7da8      	ldrb	r0, [r5, #22]
 801998e:	756b      	strb	r3, [r5, #21]
 8019990:	4058      	eors	r0, r3
 8019992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019996:	463a      	mov	r2, r7
 8019998:	68a9      	ldr	r1, [r5, #8]
 801999a:	4640      	mov	r0, r8
 801999c:	f002 f8b5 	bl	801bb0a <memcpy>
 80199a0:	68aa      	ldr	r2, [r5, #8]
 80199a2:	692b      	ldr	r3, [r5, #16]
 80199a4:	443a      	add	r2, r7
 80199a6:	443b      	add	r3, r7
 80199a8:	60aa      	str	r2, [r5, #8]
 80199aa:	612b      	str	r3, [r5, #16]
 80199ac:	e7ed      	b.n	801998a <ucdr_deserialize_endian_array_char+0x42>
 80199ae:	bf00      	nop

080199b0 <ucdr_serialize_array_uint8_t>:
 80199b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b4:	4688      	mov	r8, r1
 80199b6:	4611      	mov	r1, r2
 80199b8:	4617      	mov	r7, r2
 80199ba:	4605      	mov	r5, r0
 80199bc:	f7f8 f860 	bl	8011a80 <ucdr_check_buffer_available_for>
 80199c0:	b9e0      	cbnz	r0, 80199fc <ucdr_serialize_array_uint8_t+0x4c>
 80199c2:	463e      	mov	r6, r7
 80199c4:	e00b      	b.n	80199de <ucdr_serialize_array_uint8_t+0x2e>
 80199c6:	4441      	add	r1, r8
 80199c8:	68a8      	ldr	r0, [r5, #8]
 80199ca:	4622      	mov	r2, r4
 80199cc:	1b36      	subs	r6, r6, r4
 80199ce:	f002 f89c 	bl	801bb0a <memcpy>
 80199d2:	68ab      	ldr	r3, [r5, #8]
 80199d4:	6928      	ldr	r0, [r5, #16]
 80199d6:	4423      	add	r3, r4
 80199d8:	4420      	add	r0, r4
 80199da:	60ab      	str	r3, [r5, #8]
 80199dc:	6128      	str	r0, [r5, #16]
 80199de:	4631      	mov	r1, r6
 80199e0:	2201      	movs	r2, #1
 80199e2:	4628      	mov	r0, r5
 80199e4:	f7f8 f8d6 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 80199e8:	1bb9      	subs	r1, r7, r6
 80199ea:	4604      	mov	r4, r0
 80199ec:	2800      	cmp	r0, #0
 80199ee:	d1ea      	bne.n	80199c6 <ucdr_serialize_array_uint8_t+0x16>
 80199f0:	2301      	movs	r3, #1
 80199f2:	7da8      	ldrb	r0, [r5, #22]
 80199f4:	756b      	strb	r3, [r5, #21]
 80199f6:	4058      	eors	r0, r3
 80199f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199fc:	463a      	mov	r2, r7
 80199fe:	4641      	mov	r1, r8
 8019a00:	68a8      	ldr	r0, [r5, #8]
 8019a02:	f002 f882 	bl	801bb0a <memcpy>
 8019a06:	68aa      	ldr	r2, [r5, #8]
 8019a08:	692b      	ldr	r3, [r5, #16]
 8019a0a:	443a      	add	r2, r7
 8019a0c:	443b      	add	r3, r7
 8019a0e:	60aa      	str	r2, [r5, #8]
 8019a10:	612b      	str	r3, [r5, #16]
 8019a12:	e7ed      	b.n	80199f0 <ucdr_serialize_array_uint8_t+0x40>

08019a14 <ucdr_serialize_endian_array_uint8_t>:
 8019a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a18:	4619      	mov	r1, r3
 8019a1a:	461f      	mov	r7, r3
 8019a1c:	4605      	mov	r5, r0
 8019a1e:	4690      	mov	r8, r2
 8019a20:	f7f8 f82e 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019a24:	b9e0      	cbnz	r0, 8019a60 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8019a26:	463e      	mov	r6, r7
 8019a28:	e00b      	b.n	8019a42 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8019a2a:	4441      	add	r1, r8
 8019a2c:	68a8      	ldr	r0, [r5, #8]
 8019a2e:	4622      	mov	r2, r4
 8019a30:	1b36      	subs	r6, r6, r4
 8019a32:	f002 f86a 	bl	801bb0a <memcpy>
 8019a36:	68ab      	ldr	r3, [r5, #8]
 8019a38:	6928      	ldr	r0, [r5, #16]
 8019a3a:	4423      	add	r3, r4
 8019a3c:	4420      	add	r0, r4
 8019a3e:	60ab      	str	r3, [r5, #8]
 8019a40:	6128      	str	r0, [r5, #16]
 8019a42:	4631      	mov	r1, r6
 8019a44:	2201      	movs	r2, #1
 8019a46:	4628      	mov	r0, r5
 8019a48:	f7f8 f8a4 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019a4c:	1bb9      	subs	r1, r7, r6
 8019a4e:	4604      	mov	r4, r0
 8019a50:	2800      	cmp	r0, #0
 8019a52:	d1ea      	bne.n	8019a2a <ucdr_serialize_endian_array_uint8_t+0x16>
 8019a54:	2301      	movs	r3, #1
 8019a56:	7da8      	ldrb	r0, [r5, #22]
 8019a58:	756b      	strb	r3, [r5, #21]
 8019a5a:	4058      	eors	r0, r3
 8019a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a60:	463a      	mov	r2, r7
 8019a62:	4641      	mov	r1, r8
 8019a64:	68a8      	ldr	r0, [r5, #8]
 8019a66:	f002 f850 	bl	801bb0a <memcpy>
 8019a6a:	68aa      	ldr	r2, [r5, #8]
 8019a6c:	692b      	ldr	r3, [r5, #16]
 8019a6e:	443a      	add	r2, r7
 8019a70:	443b      	add	r3, r7
 8019a72:	60aa      	str	r2, [r5, #8]
 8019a74:	612b      	str	r3, [r5, #16]
 8019a76:	e7ed      	b.n	8019a54 <ucdr_serialize_endian_array_uint8_t+0x40>

08019a78 <ucdr_deserialize_array_uint8_t>:
 8019a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a7c:	4688      	mov	r8, r1
 8019a7e:	4611      	mov	r1, r2
 8019a80:	4617      	mov	r7, r2
 8019a82:	4605      	mov	r5, r0
 8019a84:	f7f7 fffc 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019a88:	b9e8      	cbnz	r0, 8019ac6 <ucdr_deserialize_array_uint8_t+0x4e>
 8019a8a:	463e      	mov	r6, r7
 8019a8c:	e00c      	b.n	8019aa8 <ucdr_deserialize_array_uint8_t+0x30>
 8019a8e:	eb08 0003 	add.w	r0, r8, r3
 8019a92:	68a9      	ldr	r1, [r5, #8]
 8019a94:	4622      	mov	r2, r4
 8019a96:	1b36      	subs	r6, r6, r4
 8019a98:	f002 f837 	bl	801bb0a <memcpy>
 8019a9c:	68ab      	ldr	r3, [r5, #8]
 8019a9e:	6928      	ldr	r0, [r5, #16]
 8019aa0:	4423      	add	r3, r4
 8019aa2:	4420      	add	r0, r4
 8019aa4:	60ab      	str	r3, [r5, #8]
 8019aa6:	6128      	str	r0, [r5, #16]
 8019aa8:	4631      	mov	r1, r6
 8019aaa:	2201      	movs	r2, #1
 8019aac:	4628      	mov	r0, r5
 8019aae:	f7f8 f871 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019ab2:	1bbb      	subs	r3, r7, r6
 8019ab4:	4604      	mov	r4, r0
 8019ab6:	2800      	cmp	r0, #0
 8019ab8:	d1e9      	bne.n	8019a8e <ucdr_deserialize_array_uint8_t+0x16>
 8019aba:	2301      	movs	r3, #1
 8019abc:	7da8      	ldrb	r0, [r5, #22]
 8019abe:	756b      	strb	r3, [r5, #21]
 8019ac0:	4058      	eors	r0, r3
 8019ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ac6:	463a      	mov	r2, r7
 8019ac8:	68a9      	ldr	r1, [r5, #8]
 8019aca:	4640      	mov	r0, r8
 8019acc:	f002 f81d 	bl	801bb0a <memcpy>
 8019ad0:	68aa      	ldr	r2, [r5, #8]
 8019ad2:	692b      	ldr	r3, [r5, #16]
 8019ad4:	443a      	add	r2, r7
 8019ad6:	443b      	add	r3, r7
 8019ad8:	60aa      	str	r2, [r5, #8]
 8019ada:	612b      	str	r3, [r5, #16]
 8019adc:	e7ed      	b.n	8019aba <ucdr_deserialize_array_uint8_t+0x42>
 8019ade:	bf00      	nop

08019ae0 <ucdr_deserialize_endian_array_uint8_t>:
 8019ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	461f      	mov	r7, r3
 8019ae8:	4605      	mov	r5, r0
 8019aea:	4690      	mov	r8, r2
 8019aec:	f7f7 ffc8 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019af0:	b9e8      	cbnz	r0, 8019b2e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8019af2:	463e      	mov	r6, r7
 8019af4:	e00c      	b.n	8019b10 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8019af6:	eb08 0003 	add.w	r0, r8, r3
 8019afa:	68a9      	ldr	r1, [r5, #8]
 8019afc:	4622      	mov	r2, r4
 8019afe:	1b36      	subs	r6, r6, r4
 8019b00:	f002 f803 	bl	801bb0a <memcpy>
 8019b04:	68ab      	ldr	r3, [r5, #8]
 8019b06:	6928      	ldr	r0, [r5, #16]
 8019b08:	4423      	add	r3, r4
 8019b0a:	4420      	add	r0, r4
 8019b0c:	60ab      	str	r3, [r5, #8]
 8019b0e:	6128      	str	r0, [r5, #16]
 8019b10:	4631      	mov	r1, r6
 8019b12:	2201      	movs	r2, #1
 8019b14:	4628      	mov	r0, r5
 8019b16:	f7f8 f83d 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019b1a:	1bbb      	subs	r3, r7, r6
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	2800      	cmp	r0, #0
 8019b20:	d1e9      	bne.n	8019af6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019b22:	2301      	movs	r3, #1
 8019b24:	7da8      	ldrb	r0, [r5, #22]
 8019b26:	756b      	strb	r3, [r5, #21]
 8019b28:	4058      	eors	r0, r3
 8019b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b2e:	463a      	mov	r2, r7
 8019b30:	68a9      	ldr	r1, [r5, #8]
 8019b32:	4640      	mov	r0, r8
 8019b34:	f001 ffe9 	bl	801bb0a <memcpy>
 8019b38:	68aa      	ldr	r2, [r5, #8]
 8019b3a:	692b      	ldr	r3, [r5, #16]
 8019b3c:	443a      	add	r2, r7
 8019b3e:	443b      	add	r3, r7
 8019b40:	60aa      	str	r2, [r5, #8]
 8019b42:	612b      	str	r3, [r5, #16]
 8019b44:	e7ed      	b.n	8019b22 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8019b46:	bf00      	nop

08019b48 <ucdr_serialize_endian_array_double>:
 8019b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b4c:	4604      	mov	r4, r0
 8019b4e:	4688      	mov	r8, r1
 8019b50:	2108      	movs	r1, #8
 8019b52:	4616      	mov	r6, r2
 8019b54:	461f      	mov	r7, r3
 8019b56:	f7f7 fff3 	bl	8011b40 <ucdr_buffer_alignment>
 8019b5a:	4601      	mov	r1, r0
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	7d65      	ldrb	r5, [r4, #21]
 8019b60:	f7f8 f836 	bl	8011bd0 <ucdr_advance_buffer>
 8019b64:	f1b8 0f01 	cmp.w	r8, #1
 8019b68:	7565      	strb	r5, [r4, #21]
 8019b6a:	d00f      	beq.n	8019b8c <ucdr_serialize_endian_array_double+0x44>
 8019b6c:	b14f      	cbz	r7, 8019b82 <ucdr_serialize_endian_array_double+0x3a>
 8019b6e:	2500      	movs	r5, #0
 8019b70:	3501      	adds	r5, #1
 8019b72:	4641      	mov	r1, r8
 8019b74:	4620      	mov	r0, r4
 8019b76:	ecb6 0b02 	vldmia	r6!, {d0}
 8019b7a:	f7f7 fde1 	bl	8011740 <ucdr_serialize_endian_double>
 8019b7e:	42af      	cmp	r7, r5
 8019b80:	d1f6      	bne.n	8019b70 <ucdr_serialize_endian_array_double+0x28>
 8019b82:	7da0      	ldrb	r0, [r4, #22]
 8019b84:	f080 0001 	eor.w	r0, r0, #1
 8019b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b8c:	00ff      	lsls	r7, r7, #3
 8019b8e:	4620      	mov	r0, r4
 8019b90:	4639      	mov	r1, r7
 8019b92:	f7f7 ff75 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019b96:	b9f8      	cbnz	r0, 8019bd8 <ucdr_serialize_endian_array_double+0x90>
 8019b98:	46b8      	mov	r8, r7
 8019b9a:	e00c      	b.n	8019bb6 <ucdr_serialize_endian_array_double+0x6e>
 8019b9c:	462a      	mov	r2, r5
 8019b9e:	4431      	add	r1, r6
 8019ba0:	68a0      	ldr	r0, [r4, #8]
 8019ba2:	eba8 0805 	sub.w	r8, r8, r5
 8019ba6:	f001 ffb0 	bl	801bb0a <memcpy>
 8019baa:	68a2      	ldr	r2, [r4, #8]
 8019bac:	6923      	ldr	r3, [r4, #16]
 8019bae:	442a      	add	r2, r5
 8019bb0:	442b      	add	r3, r5
 8019bb2:	60a2      	str	r2, [r4, #8]
 8019bb4:	6123      	str	r3, [r4, #16]
 8019bb6:	4641      	mov	r1, r8
 8019bb8:	2208      	movs	r2, #8
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f7f7 ffea 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019bc0:	eba7 0108 	sub.w	r1, r7, r8
 8019bc4:	4605      	mov	r5, r0
 8019bc6:	2800      	cmp	r0, #0
 8019bc8:	d1e8      	bne.n	8019b9c <ucdr_serialize_endian_array_double+0x54>
 8019bca:	2308      	movs	r3, #8
 8019bcc:	7da0      	ldrb	r0, [r4, #22]
 8019bce:	7563      	strb	r3, [r4, #21]
 8019bd0:	f080 0001 	eor.w	r0, r0, #1
 8019bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bd8:	463a      	mov	r2, r7
 8019bda:	4631      	mov	r1, r6
 8019bdc:	68a0      	ldr	r0, [r4, #8]
 8019bde:	f001 ff94 	bl	801bb0a <memcpy>
 8019be2:	68a2      	ldr	r2, [r4, #8]
 8019be4:	6923      	ldr	r3, [r4, #16]
 8019be6:	443a      	add	r2, r7
 8019be8:	441f      	add	r7, r3
 8019bea:	60a2      	str	r2, [r4, #8]
 8019bec:	6127      	str	r7, [r4, #16]
 8019bee:	e7ec      	b.n	8019bca <ucdr_serialize_endian_array_double+0x82>

08019bf0 <ucdr_deserialize_endian_array_double>:
 8019bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf4:	4605      	mov	r5, r0
 8019bf6:	4688      	mov	r8, r1
 8019bf8:	2108      	movs	r1, #8
 8019bfa:	4614      	mov	r4, r2
 8019bfc:	461f      	mov	r7, r3
 8019bfe:	f7f7 ff9f 	bl	8011b40 <ucdr_buffer_alignment>
 8019c02:	4601      	mov	r1, r0
 8019c04:	4628      	mov	r0, r5
 8019c06:	7d6e      	ldrb	r6, [r5, #21]
 8019c08:	f7f7 ffe2 	bl	8011bd0 <ucdr_advance_buffer>
 8019c0c:	f1b8 0f01 	cmp.w	r8, #1
 8019c10:	756e      	strb	r6, [r5, #21]
 8019c12:	d010      	beq.n	8019c36 <ucdr_deserialize_endian_array_double+0x46>
 8019c14:	b157      	cbz	r7, 8019c2c <ucdr_deserialize_endian_array_double+0x3c>
 8019c16:	2600      	movs	r6, #0
 8019c18:	3601      	adds	r6, #1
 8019c1a:	4622      	mov	r2, r4
 8019c1c:	4641      	mov	r1, r8
 8019c1e:	4628      	mov	r0, r5
 8019c20:	f7f7 fe60 	bl	80118e4 <ucdr_deserialize_endian_double>
 8019c24:	42b7      	cmp	r7, r6
 8019c26:	f104 0408 	add.w	r4, r4, #8
 8019c2a:	d1f5      	bne.n	8019c18 <ucdr_deserialize_endian_array_double+0x28>
 8019c2c:	7da8      	ldrb	r0, [r5, #22]
 8019c2e:	f080 0001 	eor.w	r0, r0, #1
 8019c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c36:	00ff      	lsls	r7, r7, #3
 8019c38:	4628      	mov	r0, r5
 8019c3a:	4639      	mov	r1, r7
 8019c3c:	f7f7 ff20 	bl	8011a80 <ucdr_check_buffer_available_for>
 8019c40:	b9f8      	cbnz	r0, 8019c82 <ucdr_deserialize_endian_array_double+0x92>
 8019c42:	46b8      	mov	r8, r7
 8019c44:	e00c      	b.n	8019c60 <ucdr_deserialize_endian_array_double+0x70>
 8019c46:	18e0      	adds	r0, r4, r3
 8019c48:	4632      	mov	r2, r6
 8019c4a:	68a9      	ldr	r1, [r5, #8]
 8019c4c:	eba8 0806 	sub.w	r8, r8, r6
 8019c50:	f001 ff5b 	bl	801bb0a <memcpy>
 8019c54:	68aa      	ldr	r2, [r5, #8]
 8019c56:	692b      	ldr	r3, [r5, #16]
 8019c58:	4432      	add	r2, r6
 8019c5a:	4433      	add	r3, r6
 8019c5c:	60aa      	str	r2, [r5, #8]
 8019c5e:	612b      	str	r3, [r5, #16]
 8019c60:	4641      	mov	r1, r8
 8019c62:	2208      	movs	r2, #8
 8019c64:	4628      	mov	r0, r5
 8019c66:	f7f7 ff95 	bl	8011b94 <ucdr_check_final_buffer_behavior_array>
 8019c6a:	eba7 0308 	sub.w	r3, r7, r8
 8019c6e:	4606      	mov	r6, r0
 8019c70:	2800      	cmp	r0, #0
 8019c72:	d1e8      	bne.n	8019c46 <ucdr_deserialize_endian_array_double+0x56>
 8019c74:	2308      	movs	r3, #8
 8019c76:	7da8      	ldrb	r0, [r5, #22]
 8019c78:	756b      	strb	r3, [r5, #21]
 8019c7a:	f080 0001 	eor.w	r0, r0, #1
 8019c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c82:	463a      	mov	r2, r7
 8019c84:	68a9      	ldr	r1, [r5, #8]
 8019c86:	4620      	mov	r0, r4
 8019c88:	f001 ff3f 	bl	801bb0a <memcpy>
 8019c8c:	68aa      	ldr	r2, [r5, #8]
 8019c8e:	692b      	ldr	r3, [r5, #16]
 8019c90:	443a      	add	r2, r7
 8019c92:	441f      	add	r7, r3
 8019c94:	60aa      	str	r2, [r5, #8]
 8019c96:	612f      	str	r7, [r5, #16]
 8019c98:	e7ec      	b.n	8019c74 <ucdr_deserialize_endian_array_double+0x84>
 8019c9a:	bf00      	nop

08019c9c <ucdr_serialize_string>:
 8019c9c:	b510      	push	{r4, lr}
 8019c9e:	b082      	sub	sp, #8
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	4608      	mov	r0, r1
 8019ca4:	9101      	str	r1, [sp, #4]
 8019ca6:	f7e6 fb25 	bl	80002f4 <strlen>
 8019caa:	4602      	mov	r2, r0
 8019cac:	9901      	ldr	r1, [sp, #4]
 8019cae:	4620      	mov	r0, r4
 8019cb0:	3201      	adds	r2, #1
 8019cb2:	b002      	add	sp, #8
 8019cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cb8:	f7f7 bfaa 	b.w	8011c10 <ucdr_serialize_sequence_char>

08019cbc <ucdr_deserialize_string>:
 8019cbc:	b500      	push	{lr}
 8019cbe:	b083      	sub	sp, #12
 8019cc0:	ab01      	add	r3, sp, #4
 8019cc2:	f7f7 ffb7 	bl	8011c34 <ucdr_deserialize_sequence_char>
 8019cc6:	b003      	add	sp, #12
 8019cc8:	f85d fb04 	ldr.w	pc, [sp], #4

08019ccc <uxr_init_input_best_effort_stream>:
 8019ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019cd0:	8003      	strh	r3, [r0, #0]
 8019cd2:	4770      	bx	lr

08019cd4 <uxr_reset_input_best_effort_stream>:
 8019cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019cd8:	8003      	strh	r3, [r0, #0]
 8019cda:	4770      	bx	lr

08019cdc <uxr_receive_best_effort_message>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4604      	mov	r4, r0
 8019ce0:	8800      	ldrh	r0, [r0, #0]
 8019ce2:	460d      	mov	r5, r1
 8019ce4:	f000 fd44 	bl	801a770 <uxr_seq_num_cmp>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	0fc0      	lsrs	r0, r0, #31
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	bfb8      	it	lt
 8019cf0:	8025      	strhlt	r5, [r4, #0]
 8019cf2:	bd38      	pop	{r3, r4, r5, pc}

08019cf4 <on_full_input_buffer>:
 8019cf4:	b570      	push	{r4, r5, r6, lr}
 8019cf6:	460c      	mov	r4, r1
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	8908      	ldrh	r0, [r1, #8]
 8019cfc:	682b      	ldr	r3, [r5, #0]
 8019cfe:	7d26      	ldrb	r6, [r4, #20]
 8019d00:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019d04:	fbb2 f2f0 	udiv	r2, r2, r0
 8019d08:	eba3 0c01 	sub.w	ip, r3, r1
 8019d0c:	fbbc fcf2 	udiv	ip, ip, r2
 8019d10:	f10c 0c01 	add.w	ip, ip, #1
 8019d14:	fa1f f38c 	uxth.w	r3, ip
 8019d18:	fbb3 fcf0 	udiv	ip, r3, r0
 8019d1c:	fb00 331c 	mls	r3, r0, ip, r3
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	fb02 f303 	mul.w	r3, r2, r3
 8019d26:	1d18      	adds	r0, r3, #4
 8019d28:	4408      	add	r0, r1
 8019d2a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019d2e:	b116      	cbz	r6, 8019d36 <on_full_input_buffer+0x42>
 8019d30:	2600      	movs	r6, #0
 8019d32:	f840 6c04 	str.w	r6, [r0, #-4]
 8019d36:	2a03      	cmp	r2, #3
 8019d38:	d801      	bhi.n	8019d3e <on_full_input_buffer+0x4a>
 8019d3a:	2001      	movs	r0, #1
 8019d3c:	bd70      	pop	{r4, r5, r6, pc}
 8019d3e:	3308      	adds	r3, #8
 8019d40:	4628      	mov	r0, r5
 8019d42:	3a04      	subs	r2, #4
 8019d44:	4419      	add	r1, r3
 8019d46:	692b      	ldr	r3, [r5, #16]
 8019d48:	f7f7 fee6 	bl	8011b18 <ucdr_init_buffer_origin>
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	4622      	mov	r2, r4
 8019d50:	4902      	ldr	r1, [pc, #8]	@ (8019d5c <on_full_input_buffer+0x68>)
 8019d52:	f7f7 febd 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 8019d56:	2000      	movs	r0, #0
 8019d58:	bd70      	pop	{r4, r5, r6, pc}
 8019d5a:	bf00      	nop
 8019d5c:	08019cf5 	.word	0x08019cf5

08019d60 <uxr_init_input_reliable_stream>:
 8019d60:	b510      	push	{r4, lr}
 8019d62:	e9c0 1200 	strd	r1, r2, [r0]
 8019d66:	2400      	movs	r4, #0
 8019d68:	9a02      	ldr	r2, [sp, #8]
 8019d6a:	8103      	strh	r3, [r0, #8]
 8019d6c:	6102      	str	r2, [r0, #16]
 8019d6e:	7504      	strb	r4, [r0, #20]
 8019d70:	b1c3      	cbz	r3, 8019da4 <uxr_init_input_reliable_stream+0x44>
 8019d72:	600c      	str	r4, [r1, #0]
 8019d74:	8901      	ldrh	r1, [r0, #8]
 8019d76:	2901      	cmp	r1, #1
 8019d78:	d914      	bls.n	8019da4 <uxr_init_input_reliable_stream+0x44>
 8019d7a:	f04f 0c01 	mov.w	ip, #1
 8019d7e:	6843      	ldr	r3, [r0, #4]
 8019d80:	f10c 0e01 	add.w	lr, ip, #1
 8019d84:	fbbc f2f1 	udiv	r2, ip, r1
 8019d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d8c:	fb01 c212 	mls	r2, r1, r2, ip
 8019d90:	fa1f fc8e 	uxth.w	ip, lr
 8019d94:	b292      	uxth	r2, r2
 8019d96:	fb02 f303 	mul.w	r3, r2, r3
 8019d9a:	6802      	ldr	r2, [r0, #0]
 8019d9c:	50d4      	str	r4, [r2, r3]
 8019d9e:	8901      	ldrh	r1, [r0, #8]
 8019da0:	4561      	cmp	r1, ip
 8019da2:	d8ec      	bhi.n	8019d7e <uxr_init_input_reliable_stream+0x1e>
 8019da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019da8:	60c3      	str	r3, [r0, #12]
 8019daa:	bd10      	pop	{r4, pc}

08019dac <uxr_reset_input_reliable_stream>:
 8019dac:	8901      	ldrh	r1, [r0, #8]
 8019dae:	b1d9      	cbz	r1, 8019de8 <uxr_reset_input_reliable_stream+0x3c>
 8019db0:	b510      	push	{r4, lr}
 8019db2:	f04f 0e00 	mov.w	lr, #0
 8019db6:	46f4      	mov	ip, lr
 8019db8:	4674      	mov	r4, lr
 8019dba:	6843      	ldr	r3, [r0, #4]
 8019dbc:	f10e 0e01 	add.w	lr, lr, #1
 8019dc0:	fbbc f2f1 	udiv	r2, ip, r1
 8019dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019dc8:	fb01 c212 	mls	r2, r1, r2, ip
 8019dcc:	fa1f fc8e 	uxth.w	ip, lr
 8019dd0:	b292      	uxth	r2, r2
 8019dd2:	fb02 f303 	mul.w	r3, r2, r3
 8019dd6:	6802      	ldr	r2, [r0, #0]
 8019dd8:	50d4      	str	r4, [r2, r3]
 8019dda:	8901      	ldrh	r1, [r0, #8]
 8019ddc:	4561      	cmp	r1, ip
 8019dde:	d8ec      	bhi.n	8019dba <uxr_reset_input_reliable_stream+0xe>
 8019de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019de4:	60c3      	str	r3, [r0, #12]
 8019de6:	bd10      	pop	{r4, pc}
 8019de8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dec:	60c3      	str	r3, [r0, #12]
 8019dee:	4770      	bx	lr

08019df0 <uxr_receive_reliable_message>:
 8019df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019df4:	4604      	mov	r4, r0
 8019df6:	460d      	mov	r5, r1
 8019df8:	8901      	ldrh	r1, [r0, #8]
 8019dfa:	4617      	mov	r7, r2
 8019dfc:	8980      	ldrh	r0, [r0, #12]
 8019dfe:	4698      	mov	r8, r3
 8019e00:	f000 fcae 	bl	801a760 <uxr_seq_num_add>
 8019e04:	4629      	mov	r1, r5
 8019e06:	4606      	mov	r6, r0
 8019e08:	89a0      	ldrh	r0, [r4, #12]
 8019e0a:	f000 fcb1 	bl	801a770 <uxr_seq_num_cmp>
 8019e0e:	2800      	cmp	r0, #0
 8019e10:	db0a      	blt.n	8019e28 <uxr_receive_reliable_message+0x38>
 8019e12:	2600      	movs	r6, #0
 8019e14:	4629      	mov	r1, r5
 8019e16:	89e0      	ldrh	r0, [r4, #14]
 8019e18:	f000 fcaa 	bl	801a770 <uxr_seq_num_cmp>
 8019e1c:	2800      	cmp	r0, #0
 8019e1e:	da00      	bge.n	8019e22 <uxr_receive_reliable_message+0x32>
 8019e20:	81e5      	strh	r5, [r4, #14]
 8019e22:	4630      	mov	r0, r6
 8019e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e28:	4630      	mov	r0, r6
 8019e2a:	4629      	mov	r1, r5
 8019e2c:	f000 fca0 	bl	801a770 <uxr_seq_num_cmp>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	dbee      	blt.n	8019e12 <uxr_receive_reliable_message+0x22>
 8019e34:	6923      	ldr	r3, [r4, #16]
 8019e36:	4638      	mov	r0, r7
 8019e38:	4798      	blx	r3
 8019e3a:	4681      	mov	r9, r0
 8019e3c:	2101      	movs	r1, #1
 8019e3e:	89a0      	ldrh	r0, [r4, #12]
 8019e40:	f000 fc8e 	bl	801a760 <uxr_seq_num_add>
 8019e44:	f1b9 0f00 	cmp.w	r9, #0
 8019e48:	bf08      	it	eq
 8019e4a:	4285      	cmpeq	r5, r0
 8019e4c:	bf0c      	ite	eq
 8019e4e:	2601      	moveq	r6, #1
 8019e50:	2600      	movne	r6, #0
 8019e52:	d104      	bne.n	8019e5e <uxr_receive_reliable_message+0x6e>
 8019e54:	2300      	movs	r3, #0
 8019e56:	9a08      	ldr	r2, [sp, #32]
 8019e58:	81a0      	strh	r0, [r4, #12]
 8019e5a:	7013      	strb	r3, [r2, #0]
 8019e5c:	e7da      	b.n	8019e14 <uxr_receive_reliable_message+0x24>
 8019e5e:	8922      	ldrh	r2, [r4, #8]
 8019e60:	6863      	ldr	r3, [r4, #4]
 8019e62:	fbb5 f0f2 	udiv	r0, r5, r2
 8019e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e6a:	fb02 5010 	mls	r0, r2, r0, r5
 8019e6e:	b280      	uxth	r0, r0
 8019e70:	fb03 f000 	mul.w	r0, r3, r0
 8019e74:	6823      	ldr	r3, [r4, #0]
 8019e76:	3004      	adds	r0, #4
 8019e78:	4418      	add	r0, r3
 8019e7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d1c7      	bne.n	8019e12 <uxr_receive_reliable_message+0x22>
 8019e82:	4639      	mov	r1, r7
 8019e84:	4642      	mov	r2, r8
 8019e86:	f001 fe40 	bl	801bb0a <memcpy>
 8019e8a:	8921      	ldrh	r1, [r4, #8]
 8019e8c:	6863      	ldr	r3, [r4, #4]
 8019e8e:	fbb5 f2f1 	udiv	r2, r5, r1
 8019e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e96:	fb01 5212 	mls	r2, r1, r2, r5
 8019e9a:	b292      	uxth	r2, r2
 8019e9c:	fb02 f303 	mul.w	r3, r2, r3
 8019ea0:	6822      	ldr	r2, [r4, #0]
 8019ea2:	f842 8003 	str.w	r8, [r2, r3]
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	9a08      	ldr	r2, [sp, #32]
 8019eaa:	7013      	strb	r3, [r2, #0]
 8019eac:	f1b9 0f00 	cmp.w	r9, #0
 8019eb0:	d0af      	beq.n	8019e12 <uxr_receive_reliable_message+0x22>
 8019eb2:	89a6      	ldrh	r6, [r4, #12]
 8019eb4:	2101      	movs	r1, #1
 8019eb6:	4630      	mov	r0, r6
 8019eb8:	f000 fc52 	bl	801a760 <uxr_seq_num_add>
 8019ebc:	8921      	ldrh	r1, [r4, #8]
 8019ebe:	6863      	ldr	r3, [r4, #4]
 8019ec0:	4606      	mov	r6, r0
 8019ec2:	fbb0 f2f1 	udiv	r2, r0, r1
 8019ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eca:	fb01 0212 	mls	r2, r1, r2, r0
 8019ece:	6820      	ldr	r0, [r4, #0]
 8019ed0:	b292      	uxth	r2, r2
 8019ed2:	fb02 f303 	mul.w	r3, r2, r3
 8019ed6:	3304      	adds	r3, #4
 8019ed8:	4418      	add	r0, r3
 8019eda:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d097      	beq.n	8019e12 <uxr_receive_reliable_message+0x22>
 8019ee2:	6923      	ldr	r3, [r4, #16]
 8019ee4:	4798      	blx	r3
 8019ee6:	2802      	cmp	r0, #2
 8019ee8:	d002      	beq.n	8019ef0 <uxr_receive_reliable_message+0x100>
 8019eea:	2801      	cmp	r0, #1
 8019eec:	d0e2      	beq.n	8019eb4 <uxr_receive_reliable_message+0xc4>
 8019eee:	e790      	b.n	8019e12 <uxr_receive_reliable_message+0x22>
 8019ef0:	2601      	movs	r6, #1
 8019ef2:	e78f      	b.n	8019e14 <uxr_receive_reliable_message+0x24>

08019ef4 <uxr_next_input_reliable_buffer_available>:
 8019ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef8:	4604      	mov	r4, r0
 8019efa:	460f      	mov	r7, r1
 8019efc:	8980      	ldrh	r0, [r0, #12]
 8019efe:	2101      	movs	r1, #1
 8019f00:	4690      	mov	r8, r2
 8019f02:	f000 fc2d 	bl	801a760 <uxr_seq_num_add>
 8019f06:	8922      	ldrh	r2, [r4, #8]
 8019f08:	6866      	ldr	r6, [r4, #4]
 8019f0a:	fbb0 f3f2 	udiv	r3, r0, r2
 8019f0e:	fbb6 f6f2 	udiv	r6, r6, r2
 8019f12:	fb02 0313 	mls	r3, r2, r3, r0
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	fb03 f606 	mul.w	r6, r3, r6
 8019f1c:	6823      	ldr	r3, [r4, #0]
 8019f1e:	3604      	adds	r6, #4
 8019f20:	441e      	add	r6, r3
 8019f22:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019f26:	f1b9 0f00 	cmp.w	r9, #0
 8019f2a:	d023      	beq.n	8019f74 <uxr_next_input_reliable_buffer_available+0x80>
 8019f2c:	4605      	mov	r5, r0
 8019f2e:	6923      	ldr	r3, [r4, #16]
 8019f30:	4630      	mov	r0, r6
 8019f32:	4798      	blx	r3
 8019f34:	4682      	mov	sl, r0
 8019f36:	b300      	cbz	r0, 8019f7a <uxr_next_input_reliable_buffer_available+0x86>
 8019f38:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019f3c:	2101      	movs	r1, #1
 8019f3e:	4650      	mov	r0, sl
 8019f40:	f000 fc0e 	bl	801a760 <uxr_seq_num_add>
 8019f44:	8921      	ldrh	r1, [r4, #8]
 8019f46:	4682      	mov	sl, r0
 8019f48:	6863      	ldr	r3, [r4, #4]
 8019f4a:	6820      	ldr	r0, [r4, #0]
 8019f4c:	fbba f2f1 	udiv	r2, sl, r1
 8019f50:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f54:	fb01 a212 	mls	r2, r1, r2, sl
 8019f58:	b292      	uxth	r2, r2
 8019f5a:	fb02 f303 	mul.w	r3, r2, r3
 8019f5e:	3304      	adds	r3, #4
 8019f60:	4418      	add	r0, r3
 8019f62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019f66:	b12b      	cbz	r3, 8019f74 <uxr_next_input_reliable_buffer_available+0x80>
 8019f68:	6923      	ldr	r3, [r4, #16]
 8019f6a:	4798      	blx	r3
 8019f6c:	2802      	cmp	r0, #2
 8019f6e:	d01b      	beq.n	8019fa8 <uxr_next_input_reliable_buffer_available+0xb4>
 8019f70:	2801      	cmp	r0, #1
 8019f72:	d0e3      	beq.n	8019f3c <uxr_next_input_reliable_buffer_available+0x48>
 8019f74:	2000      	movs	r0, #0
 8019f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f7a:	464a      	mov	r2, r9
 8019f7c:	4631      	mov	r1, r6
 8019f7e:	4638      	mov	r0, r7
 8019f80:	f7f7 fdd2 	bl	8011b28 <ucdr_init_buffer>
 8019f84:	8921      	ldrh	r1, [r4, #8]
 8019f86:	6863      	ldr	r3, [r4, #4]
 8019f88:	2001      	movs	r0, #1
 8019f8a:	fbb5 f2f1 	udiv	r2, r5, r1
 8019f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f92:	fb01 5212 	mls	r2, r1, r2, r5
 8019f96:	b292      	uxth	r2, r2
 8019f98:	fb02 f303 	mul.w	r3, r2, r3
 8019f9c:	6822      	ldr	r2, [r4, #0]
 8019f9e:	f842 a003 	str.w	sl, [r2, r3]
 8019fa2:	81a5      	strh	r5, [r4, #12]
 8019fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fa8:	8920      	ldrh	r0, [r4, #8]
 8019faa:	eb06 0108 	add.w	r1, r6, r8
 8019fae:	6863      	ldr	r3, [r4, #4]
 8019fb0:	eba9 0208 	sub.w	r2, r9, r8
 8019fb4:	fbb5 f6f0 	udiv	r6, r5, r0
 8019fb8:	fbb3 f3f0 	udiv	r3, r3, r0
 8019fbc:	fb00 5516 	mls	r5, r0, r6, r5
 8019fc0:	2000      	movs	r0, #0
 8019fc2:	b2ad      	uxth	r5, r5
 8019fc4:	fb03 f505 	mul.w	r5, r3, r5
 8019fc8:	6823      	ldr	r3, [r4, #0]
 8019fca:	5158      	str	r0, [r3, r5]
 8019fcc:	4638      	mov	r0, r7
 8019fce:	f7f7 fdab 	bl	8011b28 <ucdr_init_buffer>
 8019fd2:	4638      	mov	r0, r7
 8019fd4:	4622      	mov	r2, r4
 8019fd6:	4903      	ldr	r1, [pc, #12]	@ (8019fe4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019fd8:	f7f7 fd7a 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 8019fdc:	2001      	movs	r0, #1
 8019fde:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019fe2:	e7c8      	b.n	8019f76 <uxr_next_input_reliable_buffer_available+0x82>
 8019fe4:	08019cf5 	.word	0x08019cf5

08019fe8 <uxr_process_heartbeat>:
 8019fe8:	b538      	push	{r3, r4, r5, lr}
 8019fea:	4611      	mov	r1, r2
 8019fec:	4604      	mov	r4, r0
 8019fee:	89c0      	ldrh	r0, [r0, #14]
 8019ff0:	4615      	mov	r5, r2
 8019ff2:	f000 fbbd 	bl	801a770 <uxr_seq_num_cmp>
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	bfb8      	it	lt
 8019ffa:	81e5      	strhlt	r5, [r4, #14]
 8019ffc:	bd38      	pop	{r3, r4, r5, pc}
 8019ffe:	bf00      	nop

0801a000 <uxr_compute_acknack>:
 801a000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a004:	8903      	ldrh	r3, [r0, #8]
 801a006:	4604      	mov	r4, r0
 801a008:	460f      	mov	r7, r1
 801a00a:	8985      	ldrh	r5, [r0, #12]
 801a00c:	b1db      	cbz	r3, 801a046 <uxr_compute_acknack+0x46>
 801a00e:	4628      	mov	r0, r5
 801a010:	2601      	movs	r6, #1
 801a012:	e004      	b.n	801a01e <uxr_compute_acknack+0x1e>
 801a014:	4566      	cmp	r6, ip
 801a016:	f106 0601 	add.w	r6, r6, #1
 801a01a:	d214      	bcs.n	801a046 <uxr_compute_acknack+0x46>
 801a01c:	89a0      	ldrh	r0, [r4, #12]
 801a01e:	b2b1      	uxth	r1, r6
 801a020:	f000 fb9e 	bl	801a760 <uxr_seq_num_add>
 801a024:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a028:	fbb0 f2fc 	udiv	r2, r0, ip
 801a02c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a030:	fb0c 0212 	mls	r2, ip, r2, r0
 801a034:	fbb3 f3fc 	udiv	r3, r3, ip
 801a038:	b292      	uxth	r2, r2
 801a03a:	fb02 f303 	mul.w	r3, r2, r3
 801a03e:	58cb      	ldr	r3, [r1, r3]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d1e7      	bne.n	801a014 <uxr_compute_acknack+0x14>
 801a044:	4605      	mov	r5, r0
 801a046:	803d      	strh	r5, [r7, #0]
 801a048:	2101      	movs	r1, #1
 801a04a:	89e6      	ldrh	r6, [r4, #14]
 801a04c:	4628      	mov	r0, r5
 801a04e:	f000 fb8b 	bl	801a768 <uxr_seq_num_sub>
 801a052:	4601      	mov	r1, r0
 801a054:	4630      	mov	r0, r6
 801a056:	f000 fb87 	bl	801a768 <uxr_seq_num_sub>
 801a05a:	4606      	mov	r6, r0
 801a05c:	b328      	cbz	r0, 801a0aa <uxr_compute_acknack+0xaa>
 801a05e:	f04f 0900 	mov.w	r9, #0
 801a062:	f04f 0801 	mov.w	r8, #1
 801a066:	464d      	mov	r5, r9
 801a068:	fa1f f189 	uxth.w	r1, r9
 801a06c:	8838      	ldrh	r0, [r7, #0]
 801a06e:	f000 fb77 	bl	801a760 <uxr_seq_num_add>
 801a072:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a076:	6861      	ldr	r1, [r4, #4]
 801a078:	fa08 fe09 	lsl.w	lr, r8, r9
 801a07c:	6822      	ldr	r2, [r4, #0]
 801a07e:	f109 0901 	add.w	r9, r9, #1
 801a082:	ea4e 0e05 	orr.w	lr, lr, r5
 801a086:	fbb0 f3fc 	udiv	r3, r0, ip
 801a08a:	fbb1 f1fc 	udiv	r1, r1, ip
 801a08e:	fb03 001c 	mls	r0, r3, ip, r0
 801a092:	b283      	uxth	r3, r0
 801a094:	fb01 f303 	mul.w	r3, r1, r3
 801a098:	58d3      	ldr	r3, [r2, r3]
 801a09a:	b90b      	cbnz	r3, 801a0a0 <uxr_compute_acknack+0xa0>
 801a09c:	fa1f f58e 	uxth.w	r5, lr
 801a0a0:	454e      	cmp	r6, r9
 801a0a2:	d1e1      	bne.n	801a068 <uxr_compute_acknack+0x68>
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0aa:	4605      	mov	r5, r0
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0b2:	bf00      	nop

0801a0b4 <uxr_init_output_best_effort_stream>:
 801a0b4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a0b8:	6001      	str	r1, [r0, #0]
 801a0ba:	7303      	strb	r3, [r0, #12]
 801a0bc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a0c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a0c4:	4770      	bx	lr
 801a0c6:	bf00      	nop

0801a0c8 <uxr_reset_output_best_effort_stream>:
 801a0c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a0cc:	7b03      	ldrb	r3, [r0, #12]
 801a0ce:	81c2      	strh	r2, [r0, #14]
 801a0d0:	6043      	str	r3, [r0, #4]
 801a0d2:	4770      	bx	lr

0801a0d4 <uxr_prepare_best_effort_buffer_to_write>:
 801a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0d6:	4604      	mov	r4, r0
 801a0d8:	b083      	sub	sp, #12
 801a0da:	6840      	ldr	r0, [r0, #4]
 801a0dc:	460d      	mov	r5, r1
 801a0de:	4616      	mov	r6, r2
 801a0e0:	f7fa f840 	bl	8014164 <uxr_submessage_padding>
 801a0e4:	6863      	ldr	r3, [r4, #4]
 801a0e6:	4418      	add	r0, r3
 801a0e8:	68a3      	ldr	r3, [r4, #8]
 801a0ea:	1942      	adds	r2, r0, r5
 801a0ec:	4293      	cmp	r3, r2
 801a0ee:	bf2c      	ite	cs
 801a0f0:	2701      	movcs	r7, #1
 801a0f2:	2700      	movcc	r7, #0
 801a0f4:	d202      	bcs.n	801a0fc <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a0f6:	4638      	mov	r0, r7
 801a0f8:	b003      	add	sp, #12
 801a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0fc:	9000      	str	r0, [sp, #0]
 801a0fe:	2300      	movs	r3, #0
 801a100:	4630      	mov	r0, r6
 801a102:	6821      	ldr	r1, [r4, #0]
 801a104:	f7f7 fcfe 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 801a108:	6861      	ldr	r1, [r4, #4]
 801a10a:	4638      	mov	r0, r7
 801a10c:	4429      	add	r1, r5
 801a10e:	6061      	str	r1, [r4, #4]
 801a110:	b003      	add	sp, #12
 801a112:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a114 <uxr_prepare_best_effort_buffer_to_send>:
 801a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a118:	4604      	mov	r4, r0
 801a11a:	461d      	mov	r5, r3
 801a11c:	6840      	ldr	r0, [r0, #4]
 801a11e:	7b23      	ldrb	r3, [r4, #12]
 801a120:	4298      	cmp	r0, r3
 801a122:	bf8c      	ite	hi
 801a124:	2601      	movhi	r6, #1
 801a126:	2600      	movls	r6, #0
 801a128:	d802      	bhi.n	801a130 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a12a:	4630      	mov	r0, r6
 801a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a130:	4688      	mov	r8, r1
 801a132:	89e0      	ldrh	r0, [r4, #14]
 801a134:	2101      	movs	r1, #1
 801a136:	4617      	mov	r7, r2
 801a138:	f000 fb12 	bl	801a760 <uxr_seq_num_add>
 801a13c:	6823      	ldr	r3, [r4, #0]
 801a13e:	81e0      	strh	r0, [r4, #14]
 801a140:	8028      	strh	r0, [r5, #0]
 801a142:	4630      	mov	r0, r6
 801a144:	f8c8 3000 	str.w	r3, [r8]
 801a148:	6863      	ldr	r3, [r4, #4]
 801a14a:	603b      	str	r3, [r7, #0]
 801a14c:	7b23      	ldrb	r3, [r4, #12]
 801a14e:	6063      	str	r3, [r4, #4]
 801a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a154 <on_full_output_buffer>:
 801a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a156:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a15a:	460c      	mov	r4, r1
 801a15c:	6803      	ldr	r3, [r0, #0]
 801a15e:	4605      	mov	r5, r0
 801a160:	7b26      	ldrb	r6, [r4, #12]
 801a162:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a166:	fbb2 f2fc 	udiv	r2, r2, ip
 801a16a:	eba3 0e01 	sub.w	lr, r3, r1
 801a16e:	6903      	ldr	r3, [r0, #16]
 801a170:	fbbe fef2 	udiv	lr, lr, r2
 801a174:	f10e 0e01 	add.w	lr, lr, #1
 801a178:	fa1f fe8e 	uxth.w	lr, lr
 801a17c:	fbbe f7fc 	udiv	r7, lr, ip
 801a180:	fb0c ec17 	mls	ip, ip, r7, lr
 801a184:	fa1f fc8c 	uxth.w	ip, ip
 801a188:	fb02 fc0c 	mul.w	ip, r2, ip
 801a18c:	f851 200c 	ldr.w	r2, [r1, ip]
 801a190:	44b4      	add	ip, r6
 801a192:	1b92      	subs	r2, r2, r6
 801a194:	f10c 0c08 	add.w	ip, ip, #8
 801a198:	3a04      	subs	r2, #4
 801a19a:	4461      	add	r1, ip
 801a19c:	f7f7 fcbc 	bl	8011b18 <ucdr_init_buffer_origin>
 801a1a0:	4628      	mov	r0, r5
 801a1a2:	4622      	mov	r2, r4
 801a1a4:	4902      	ldr	r1, [pc, #8]	@ (801a1b0 <on_full_output_buffer+0x5c>)
 801a1a6:	f7f7 fc93 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 801a1aa:	2000      	movs	r0, #0
 801a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1ae:	bf00      	nop
 801a1b0:	0801a155 	.word	0x0801a155

0801a1b4 <uxr_init_output_reliable_stream>:
 801a1b4:	b530      	push	{r4, r5, lr}
 801a1b6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a1ba:	8103      	strh	r3, [r0, #8]
 801a1bc:	7304      	strb	r4, [r0, #12]
 801a1be:	e9c0 1200 	strd	r1, r2, [r0]
 801a1c2:	b1e3      	cbz	r3, 801a1fe <uxr_init_output_reliable_stream+0x4a>
 801a1c4:	600c      	str	r4, [r1, #0]
 801a1c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a1ca:	f1bc 0f01 	cmp.w	ip, #1
 801a1ce:	d916      	bls.n	801a1fe <uxr_init_output_reliable_stream+0x4a>
 801a1d0:	f04f 0e01 	mov.w	lr, #1
 801a1d4:	6843      	ldr	r3, [r0, #4]
 801a1d6:	f10e 0501 	add.w	r5, lr, #1
 801a1da:	7b04      	ldrb	r4, [r0, #12]
 801a1dc:	6801      	ldr	r1, [r0, #0]
 801a1de:	fbbe f2fc 	udiv	r2, lr, ip
 801a1e2:	fbb3 f3fc 	udiv	r3, r3, ip
 801a1e6:	fb0c e212 	mls	r2, ip, r2, lr
 801a1ea:	fa1f fe85 	uxth.w	lr, r5
 801a1ee:	b292      	uxth	r2, r2
 801a1f0:	fb02 f303 	mul.w	r3, r2, r3
 801a1f4:	50cc      	str	r4, [r1, r3]
 801a1f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a1fa:	45f4      	cmp	ip, lr
 801a1fc:	d8ea      	bhi.n	801a1d4 <uxr_init_output_reliable_stream+0x20>
 801a1fe:	4b07      	ldr	r3, [pc, #28]	@ (801a21c <uxr_init_output_reliable_stream+0x68>)
 801a200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a204:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a208:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a20c:	f8c0 300e 	str.w	r3, [r0, #14]
 801a210:	2300      	movs	r3, #0
 801a212:	8242      	strh	r2, [r0, #18]
 801a214:	8403      	strh	r3, [r0, #32]
 801a216:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a21a:	bd30      	pop	{r4, r5, pc}
 801a21c:	ffff0000 	.word	0xffff0000

0801a220 <uxr_reset_output_reliable_stream>:
 801a220:	8901      	ldrh	r1, [r0, #8]
 801a222:	b510      	push	{r4, lr}
 801a224:	b1b1      	cbz	r1, 801a254 <uxr_reset_output_reliable_stream+0x34>
 801a226:	f04f 0e00 	mov.w	lr, #0
 801a22a:	46f4      	mov	ip, lr
 801a22c:	6843      	ldr	r3, [r0, #4]
 801a22e:	f10e 0e01 	add.w	lr, lr, #1
 801a232:	7b04      	ldrb	r4, [r0, #12]
 801a234:	fbbc f2f1 	udiv	r2, ip, r1
 801a238:	fbb3 f3f1 	udiv	r3, r3, r1
 801a23c:	fb01 c212 	mls	r2, r1, r2, ip
 801a240:	fa1f fc8e 	uxth.w	ip, lr
 801a244:	b292      	uxth	r2, r2
 801a246:	fb02 f303 	mul.w	r3, r2, r3
 801a24a:	6802      	ldr	r2, [r0, #0]
 801a24c:	50d4      	str	r4, [r2, r3]
 801a24e:	8901      	ldrh	r1, [r0, #8]
 801a250:	4561      	cmp	r1, ip
 801a252:	d8eb      	bhi.n	801a22c <uxr_reset_output_reliable_stream+0xc>
 801a254:	4b08      	ldr	r3, [pc, #32]	@ (801a278 <uxr_reset_output_reliable_stream+0x58>)
 801a256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a25a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801a270 <uxr_reset_output_reliable_stream+0x50>
 801a25e:	f8c0 300e 	str.w	r3, [r0, #14]
 801a262:	2300      	movs	r3, #0
 801a264:	8242      	strh	r2, [r0, #18]
 801a266:	8403      	strh	r3, [r0, #32]
 801a268:	ed80 7b06 	vstr	d7, [r0, #24]
 801a26c:	bd10      	pop	{r4, pc}
 801a26e:	bf00      	nop
 801a270:	ffffffff 	.word	0xffffffff
 801a274:	7fffffff 	.word	0x7fffffff
 801a278:	ffff0000 	.word	0xffff0000

0801a27c <uxr_prepare_reliable_buffer_to_write>:
 801a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a280:	4604      	mov	r4, r0
 801a282:	b091      	sub	sp, #68	@ 0x44
 801a284:	8900      	ldrh	r0, [r0, #8]
 801a286:	468b      	mov	fp, r1
 801a288:	89e6      	ldrh	r6, [r4, #14]
 801a28a:	9204      	str	r2, [sp, #16]
 801a28c:	6865      	ldr	r5, [r4, #4]
 801a28e:	6823      	ldr	r3, [r4, #0]
 801a290:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a294:	fbb6 f2f0 	udiv	r2, r6, r0
 801a298:	fbb5 f5f0 	udiv	r5, r5, r0
 801a29c:	fb00 6212 	mls	r2, r0, r2, r6
 801a2a0:	1f2f      	subs	r7, r5, #4
 801a2a2:	b292      	uxth	r2, r2
 801a2a4:	fb05 3202 	mla	r2, r5, r2, r3
 801a2a8:	1d11      	adds	r1, r2, #4
 801a2aa:	f8d2 8000 	ldr.w	r8, [r2]
 801a2ae:	9103      	str	r1, [sp, #12]
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	f000 814a 	beq.w	801a54a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a2b6:	f04f 0c00 	mov.w	ip, #0
 801a2ba:	46e2      	mov	sl, ip
 801a2bc:	4661      	mov	r1, ip
 801a2be:	f10c 0c01 	add.w	ip, ip, #1
 801a2c2:	fbb1 f2f0 	udiv	r2, r1, r0
 801a2c6:	fb00 1212 	mls	r2, r0, r2, r1
 801a2ca:	fa1f f18c 	uxth.w	r1, ip
 801a2ce:	b292      	uxth	r2, r2
 801a2d0:	fb05 f202 	mul.w	r2, r5, r2
 801a2d4:	589a      	ldr	r2, [r3, r2]
 801a2d6:	454a      	cmp	r2, r9
 801a2d8:	d103      	bne.n	801a2e2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801a2da:	f10a 0a01 	add.w	sl, sl, #1
 801a2de:	fa1f fa8a 	uxth.w	sl, sl
 801a2e2:	4281      	cmp	r1, r0
 801a2e4:	d3eb      	bcc.n	801a2be <uxr_prepare_reliable_buffer_to_write+0x42>
 801a2e6:	4640      	mov	r0, r8
 801a2e8:	2104      	movs	r1, #4
 801a2ea:	f8cd a014 	str.w	sl, [sp, #20]
 801a2ee:	f7f7 fc1f 	bl	8011b30 <ucdr_alignment>
 801a2f2:	4480      	add	r8, r0
 801a2f4:	eb08 020b 	add.w	r2, r8, fp
 801a2f8:	42ba      	cmp	r2, r7
 801a2fa:	f240 80ca 	bls.w	801a492 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a2fe:	7b22      	ldrb	r2, [r4, #12]
 801a300:	445a      	add	r2, fp
 801a302:	42ba      	cmp	r2, r7
 801a304:	f240 80b2 	bls.w	801a46c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a308:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a30c:	b2bb      	uxth	r3, r7
 801a30e:	eba2 0209 	sub.w	r2, r2, r9
 801a312:	441a      	add	r2, r3
 801a314:	b292      	uxth	r2, r2
 801a316:	fb0a f902 	mul.w	r9, sl, r2
 801a31a:	9205      	str	r2, [sp, #20]
 801a31c:	45d9      	cmp	r9, fp
 801a31e:	9206      	str	r2, [sp, #24]
 801a320:	f0c0 80b3 	bcc.w	801a48a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a324:	f108 0204 	add.w	r2, r8, #4
 801a328:	42ba      	cmp	r2, r7
 801a32a:	f080 80da 	bcs.w	801a4e2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801a32e:	f1a3 0904 	sub.w	r9, r3, #4
 801a332:	9b05      	ldr	r3, [sp, #20]
 801a334:	eba9 0908 	sub.w	r9, r9, r8
 801a338:	fa1f f989 	uxth.w	r9, r9
 801a33c:	ebab 0b09 	sub.w	fp, fp, r9
 801a340:	fbbb f2f3 	udiv	r2, fp, r3
 801a344:	fb03 b312 	mls	r3, r3, r2, fp
 801a348:	2b00      	cmp	r3, #0
 801a34a:	f040 80c4 	bne.w	801a4d6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a34e:	b293      	uxth	r3, r2
 801a350:	4553      	cmp	r3, sl
 801a352:	f200 809a 	bhi.w	801a48a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a356:	2b00      	cmp	r3, #0
 801a358:	f000 80f9 	beq.w	801a54e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a35c:	f8cd 801c 	str.w	r8, [sp, #28]
 801a360:	f04f 0a00 	mov.w	sl, #0
 801a364:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a368:	f10d 0b20 	add.w	fp, sp, #32
 801a36c:	9505      	str	r5, [sp, #20]
 801a36e:	461d      	mov	r5, r3
 801a370:	e000      	b.n	801a374 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a372:	46c1      	mov	r9, r8
 801a374:	8922      	ldrh	r2, [r4, #8]
 801a376:	4658      	mov	r0, fp
 801a378:	6863      	ldr	r3, [r4, #4]
 801a37a:	f10a 0a01 	add.w	sl, sl, #1
 801a37e:	fbb6 f1f2 	udiv	r1, r6, r2
 801a382:	fbb3 f3f2 	udiv	r3, r3, r2
 801a386:	fb02 6111 	mls	r1, r2, r1, r6
 801a38a:	463a      	mov	r2, r7
 801a38c:	b289      	uxth	r1, r1
 801a38e:	fb03 f101 	mul.w	r1, r3, r1
 801a392:	6823      	ldr	r3, [r4, #0]
 801a394:	3104      	adds	r1, #4
 801a396:	4419      	add	r1, r3
 801a398:	2300      	movs	r3, #0
 801a39a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a39e:	f8cd c000 	str.w	ip, [sp]
 801a3a2:	f7f7 fbaf 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 801a3a6:	464a      	mov	r2, r9
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	210d      	movs	r1, #13
 801a3ac:	4658      	mov	r0, fp
 801a3ae:	f7f9 fe99 	bl	80140e4 <uxr_buffer_submessage_header>
 801a3b2:	8921      	ldrh	r1, [r4, #8]
 801a3b4:	6863      	ldr	r3, [r4, #4]
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	fbb6 f2f1 	udiv	r2, r6, r1
 801a3bc:	fbb3 f3f1 	udiv	r3, r3, r1
 801a3c0:	fb01 6212 	mls	r2, r1, r2, r6
 801a3c4:	2101      	movs	r1, #1
 801a3c6:	b292      	uxth	r2, r2
 801a3c8:	fb02 f303 	mul.w	r3, r2, r3
 801a3cc:	6822      	ldr	r2, [r4, #0]
 801a3ce:	50d7      	str	r7, [r2, r3]
 801a3d0:	f000 f9c6 	bl	801a760 <uxr_seq_num_add>
 801a3d4:	4606      	mov	r6, r0
 801a3d6:	fa1f f38a 	uxth.w	r3, sl
 801a3da:	429d      	cmp	r5, r3
 801a3dc:	d8c9      	bhi.n	801a372 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a3e2:	9d05      	ldr	r5, [sp, #20]
 801a3e4:	8920      	ldrh	r0, [r4, #8]
 801a3e6:	463a      	mov	r2, r7
 801a3e8:	6863      	ldr	r3, [r4, #4]
 801a3ea:	fbb6 f1f0 	udiv	r1, r6, r0
 801a3ee:	fbb3 f3f0 	udiv	r3, r3, r0
 801a3f2:	fb00 6111 	mls	r1, r0, r1, r6
 801a3f6:	4658      	mov	r0, fp
 801a3f8:	b289      	uxth	r1, r1
 801a3fa:	fb01 f303 	mul.w	r3, r1, r3
 801a3fe:	6821      	ldr	r1, [r4, #0]
 801a400:	3304      	adds	r3, #4
 801a402:	4419      	add	r1, r3
 801a404:	2300      	movs	r3, #0
 801a406:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a40a:	9700      	str	r7, [sp, #0]
 801a40c:	f7f7 fb7a 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 801a410:	9f06      	ldr	r7, [sp, #24]
 801a412:	4658      	mov	r0, fp
 801a414:	2302      	movs	r3, #2
 801a416:	b2ba      	uxth	r2, r7
 801a418:	210d      	movs	r1, #13
 801a41a:	f7f9 fe63 	bl	80140e4 <uxr_buffer_submessage_header>
 801a41e:	f108 0104 	add.w	r1, r8, #4
 801a422:	9b03      	ldr	r3, [sp, #12]
 801a424:	f1a5 0208 	sub.w	r2, r5, #8
 801a428:	8925      	ldrh	r5, [r4, #8]
 801a42a:	440b      	add	r3, r1
 801a42c:	eba2 0208 	sub.w	r2, r2, r8
 801a430:	fbb6 f0f5 	udiv	r0, r6, r5
 801a434:	4619      	mov	r1, r3
 801a436:	6863      	ldr	r3, [r4, #4]
 801a438:	fb05 6010 	mls	r0, r5, r0, r6
 801a43c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a440:	b280      	uxth	r0, r0
 801a442:	6825      	ldr	r5, [r4, #0]
 801a444:	fb00 f303 	mul.w	r3, r0, r3
 801a448:	7b20      	ldrb	r0, [r4, #12]
 801a44a:	3004      	adds	r0, #4
 801a44c:	4438      	add	r0, r7
 801a44e:	50e8      	str	r0, [r5, r3]
 801a450:	9d04      	ldr	r5, [sp, #16]
 801a452:	4628      	mov	r0, r5
 801a454:	f7f7 fb68 	bl	8011b28 <ucdr_init_buffer>
 801a458:	4628      	mov	r0, r5
 801a45a:	4622      	mov	r2, r4
 801a45c:	493d      	ldr	r1, [pc, #244]	@ (801a554 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a45e:	f7f7 fb37 	bl	8011ad0 <ucdr_set_on_full_buffer_callback>
 801a462:	2001      	movs	r0, #1
 801a464:	81e6      	strh	r6, [r4, #14]
 801a466:	b011      	add	sp, #68	@ 0x44
 801a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a46c:	2101      	movs	r1, #1
 801a46e:	89e0      	ldrh	r0, [r4, #14]
 801a470:	f000 f976 	bl	801a760 <uxr_seq_num_add>
 801a474:	4605      	mov	r5, r0
 801a476:	8921      	ldrh	r1, [r4, #8]
 801a478:	8a60      	ldrh	r0, [r4, #18]
 801a47a:	f000 f971 	bl	801a760 <uxr_seq_num_add>
 801a47e:	4601      	mov	r1, r0
 801a480:	4628      	mov	r0, r5
 801a482:	f000 f975 	bl	801a770 <uxr_seq_num_cmp>
 801a486:	2800      	cmp	r0, #0
 801a488:	dd44      	ble.n	801a514 <uxr_prepare_reliable_buffer_to_write+0x298>
 801a48a:	2000      	movs	r0, #0
 801a48c:	b011      	add	sp, #68	@ 0x44
 801a48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a492:	8921      	ldrh	r1, [r4, #8]
 801a494:	8a60      	ldrh	r0, [r4, #18]
 801a496:	9205      	str	r2, [sp, #20]
 801a498:	f000 f962 	bl	801a760 <uxr_seq_num_add>
 801a49c:	4601      	mov	r1, r0
 801a49e:	4630      	mov	r0, r6
 801a4a0:	f000 f966 	bl	801a770 <uxr_seq_num_cmp>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	9a05      	ldr	r2, [sp, #20]
 801a4a8:	dcef      	bgt.n	801a48a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a4aa:	8925      	ldrh	r5, [r4, #8]
 801a4ac:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a4b0:	fbb6 f4f5 	udiv	r4, r6, r5
 801a4b4:	fbb3 f3f5 	udiv	r3, r3, r5
 801a4b8:	fb05 6414 	mls	r4, r5, r4, r6
 801a4bc:	b2a4      	uxth	r4, r4
 801a4be:	fb04 f303 	mul.w	r3, r4, r3
 801a4c2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a4c6:	50fa      	str	r2, [r7, r3]
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	f8cd 8000 	str.w	r8, [sp]
 801a4ce:	f7f7 fb19 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 801a4d2:	2001      	movs	r0, #1
 801a4d4:	e7da      	b.n	801a48c <uxr_prepare_reliable_buffer_to_write+0x210>
 801a4d6:	3201      	adds	r2, #1
 801a4d8:	9306      	str	r3, [sp, #24]
 801a4da:	b293      	uxth	r3, r2
 801a4dc:	4553      	cmp	r3, sl
 801a4de:	d8d4      	bhi.n	801a48a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a4e0:	e739      	b.n	801a356 <uxr_prepare_reliable_buffer_to_write+0xda>
 801a4e2:	4630      	mov	r0, r6
 801a4e4:	2101      	movs	r1, #1
 801a4e6:	9307      	str	r3, [sp, #28]
 801a4e8:	f000 f93a 	bl	801a760 <uxr_seq_num_add>
 801a4ec:	4606      	mov	r6, r0
 801a4ee:	8920      	ldrh	r0, [r4, #8]
 801a4f0:	6862      	ldr	r2, [r4, #4]
 801a4f2:	fbb6 f1f0 	udiv	r1, r6, r0
 801a4f6:	fbb2 f2f0 	udiv	r2, r2, r0
 801a4fa:	fb00 6111 	mls	r1, r0, r1, r6
 801a4fe:	b289      	uxth	r1, r1
 801a500:	fb01 f202 	mul.w	r2, r1, r2
 801a504:	6821      	ldr	r1, [r4, #0]
 801a506:	3204      	adds	r2, #4
 801a508:	188b      	adds	r3, r1, r2
 801a50a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a50e:	9303      	str	r3, [sp, #12]
 801a510:	9b07      	ldr	r3, [sp, #28]
 801a512:	e70c      	b.n	801a32e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a514:	8921      	ldrh	r1, [r4, #8]
 801a516:	6863      	ldr	r3, [r4, #4]
 801a518:	9804      	ldr	r0, [sp, #16]
 801a51a:	fbb5 f2f1 	udiv	r2, r5, r1
 801a51e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a522:	fb01 5212 	mls	r2, r1, r2, r5
 801a526:	6821      	ldr	r1, [r4, #0]
 801a528:	b292      	uxth	r2, r2
 801a52a:	fb02 f303 	mul.w	r3, r2, r3
 801a52e:	7b22      	ldrb	r2, [r4, #12]
 801a530:	3304      	adds	r3, #4
 801a532:	445a      	add	r2, fp
 801a534:	4419      	add	r1, r3
 801a536:	f841 2c04 	str.w	r2, [r1, #-4]
 801a53a:	7b23      	ldrb	r3, [r4, #12]
 801a53c:	9300      	str	r3, [sp, #0]
 801a53e:	2300      	movs	r3, #0
 801a540:	f7f7 fae0 	bl	8011b04 <ucdr_init_buffer_origin_offset>
 801a544:	2001      	movs	r0, #1
 801a546:	81e5      	strh	r5, [r4, #14]
 801a548:	e7a0      	b.n	801a48c <uxr_prepare_reliable_buffer_to_write+0x210>
 801a54a:	4682      	mov	sl, r0
 801a54c:	e6cb      	b.n	801a2e6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a54e:	f10d 0b20 	add.w	fp, sp, #32
 801a552:	e747      	b.n	801a3e4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801a554:	0801a155 	.word	0x0801a155

0801a558 <uxr_prepare_next_reliable_buffer_to_send>:
 801a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a55a:	4604      	mov	r4, r0
 801a55c:	461d      	mov	r5, r3
 801a55e:	460f      	mov	r7, r1
 801a560:	8a00      	ldrh	r0, [r0, #16]
 801a562:	2101      	movs	r1, #1
 801a564:	4616      	mov	r6, r2
 801a566:	f000 f8fb 	bl	801a760 <uxr_seq_num_add>
 801a56a:	8028      	strh	r0, [r5, #0]
 801a56c:	8922      	ldrh	r2, [r4, #8]
 801a56e:	6863      	ldr	r3, [r4, #4]
 801a570:	fbb0 f1f2 	udiv	r1, r0, r2
 801a574:	fbb3 f3f2 	udiv	r3, r3, r2
 801a578:	fb02 0c11 	mls	ip, r2, r1, r0
 801a57c:	89e1      	ldrh	r1, [r4, #14]
 801a57e:	fa1f fc8c 	uxth.w	ip, ip
 801a582:	fb0c fc03 	mul.w	ip, ip, r3
 801a586:	6823      	ldr	r3, [r4, #0]
 801a588:	f10c 0c04 	add.w	ip, ip, #4
 801a58c:	4463      	add	r3, ip
 801a58e:	603b      	str	r3, [r7, #0]
 801a590:	6823      	ldr	r3, [r4, #0]
 801a592:	449c      	add	ip, r3
 801a594:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a598:	6033      	str	r3, [r6, #0]
 801a59a:	f000 f8e9 	bl	801a770 <uxr_seq_num_cmp>
 801a59e:	2800      	cmp	r0, #0
 801a5a0:	dd01      	ble.n	801a5a6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a5a2:	2000      	movs	r0, #0
 801a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a6:	7b23      	ldrb	r3, [r4, #12]
 801a5a8:	6832      	ldr	r2, [r6, #0]
 801a5aa:	429a      	cmp	r2, r3
 801a5ac:	d9f9      	bls.n	801a5a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a5ae:	8a61      	ldrh	r1, [r4, #18]
 801a5b0:	8a20      	ldrh	r0, [r4, #16]
 801a5b2:	f000 f8d9 	bl	801a768 <uxr_seq_num_sub>
 801a5b6:	8923      	ldrh	r3, [r4, #8]
 801a5b8:	4283      	cmp	r3, r0
 801a5ba:	d0f2      	beq.n	801a5a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a5bc:	8828      	ldrh	r0, [r5, #0]
 801a5be:	89e3      	ldrh	r3, [r4, #14]
 801a5c0:	8220      	strh	r0, [r4, #16]
 801a5c2:	4298      	cmp	r0, r3
 801a5c4:	d001      	beq.n	801a5ca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a5c6:	2001      	movs	r0, #1
 801a5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5ca:	2101      	movs	r1, #1
 801a5cc:	f000 f8c8 	bl	801a760 <uxr_seq_num_add>
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	2001      	movs	r0, #1
 801a5d4:	81e3      	strh	r3, [r4, #14]
 801a5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a5d8 <uxr_update_output_stream_heartbeat_timestamp>:
 801a5d8:	b570      	push	{r4, r5, r6, lr}
 801a5da:	8a01      	ldrh	r1, [r0, #16]
 801a5dc:	4604      	mov	r4, r0
 801a5de:	8a40      	ldrh	r0, [r0, #18]
 801a5e0:	4615      	mov	r5, r2
 801a5e2:	461e      	mov	r6, r3
 801a5e4:	f000 f8c4 	bl	801a770 <uxr_seq_num_cmp>
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	db07      	blt.n	801a5fc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a5ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a5f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a5fa:	bd70      	pop	{r4, r5, r6, pc}
 801a5fc:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a600:	b940      	cbnz	r0, 801a614 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a602:	2301      	movs	r3, #1
 801a604:	f884 3020 	strb.w	r3, [r4, #32]
 801a608:	3564      	adds	r5, #100	@ 0x64
 801a60a:	f146 0600 	adc.w	r6, r6, #0
 801a60e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a612:	bd70      	pop	{r4, r5, r6, pc}
 801a614:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a618:	4295      	cmp	r5, r2
 801a61a:	eb76 0303 	sbcs.w	r3, r6, r3
 801a61e:	db04      	blt.n	801a62a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a620:	1c43      	adds	r3, r0, #1
 801a622:	2001      	movs	r0, #1
 801a624:	f884 3020 	strb.w	r3, [r4, #32]
 801a628:	e7ee      	b.n	801a608 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a62a:	2000      	movs	r0, #0
 801a62c:	e7ec      	b.n	801a608 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a62e:	bf00      	nop

0801a630 <uxr_begin_output_nack_buffer_it>:
 801a630:	8a40      	ldrh	r0, [r0, #18]
 801a632:	4770      	bx	lr

0801a634 <uxr_next_reliable_nack_buffer_to_send>:
 801a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a638:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801a63c:	b197      	cbz	r7, 801a664 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a63e:	4680      	mov	r8, r0
 801a640:	460d      	mov	r5, r1
 801a642:	4616      	mov	r6, r2
 801a644:	461c      	mov	r4, r3
 801a646:	8818      	ldrh	r0, [r3, #0]
 801a648:	2101      	movs	r1, #1
 801a64a:	f000 f889 	bl	801a760 <uxr_seq_num_add>
 801a64e:	8020      	strh	r0, [r4, #0]
 801a650:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a654:	f000 f88c 	bl	801a770 <uxr_seq_num_cmp>
 801a658:	2800      	cmp	r0, #0
 801a65a:	dd06      	ble.n	801a66a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a65c:	2300      	movs	r3, #0
 801a65e:	461f      	mov	r7, r3
 801a660:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801a664:	4638      	mov	r0, r7
 801a666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a66a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a66e:	8820      	ldrh	r0, [r4, #0]
 801a670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a674:	fbb0 f3f2 	udiv	r3, r0, r2
 801a678:	fbb1 fcf2 	udiv	ip, r1, r2
 801a67c:	fb02 0313 	mls	r3, r2, r3, r0
 801a680:	b29b      	uxth	r3, r3
 801a682:	fb03 fc0c 	mul.w	ip, r3, ip
 801a686:	f8d8 3000 	ldr.w	r3, [r8]
 801a68a:	f10c 0c04 	add.w	ip, ip, #4
 801a68e:	4463      	add	r3, ip
 801a690:	602b      	str	r3, [r5, #0]
 801a692:	f8d8 3000 	ldr.w	r3, [r8]
 801a696:	4463      	add	r3, ip
 801a698:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a69c:	6033      	str	r3, [r6, #0]
 801a69e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d0d0      	beq.n	801a648 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a6a6:	e7dd      	b.n	801a664 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a6a8 <uxr_process_acknack>:
 801a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6aa:	4604      	mov	r4, r0
 801a6ac:	460e      	mov	r6, r1
 801a6ae:	4610      	mov	r0, r2
 801a6b0:	2101      	movs	r1, #1
 801a6b2:	f000 f859 	bl	801a768 <uxr_seq_num_sub>
 801a6b6:	8a61      	ldrh	r1, [r4, #18]
 801a6b8:	f000 f856 	bl	801a768 <uxr_seq_num_sub>
 801a6bc:	b1c8      	cbz	r0, 801a6f2 <uxr_process_acknack+0x4a>
 801a6be:	4605      	mov	r5, r0
 801a6c0:	2700      	movs	r7, #0
 801a6c2:	2101      	movs	r1, #1
 801a6c4:	8a60      	ldrh	r0, [r4, #18]
 801a6c6:	f000 f84b 	bl	801a760 <uxr_seq_num_add>
 801a6ca:	8923      	ldrh	r3, [r4, #8]
 801a6cc:	6862      	ldr	r2, [r4, #4]
 801a6ce:	3701      	adds	r7, #1
 801a6d0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a6d4:	6821      	ldr	r1, [r4, #0]
 801a6d6:	42bd      	cmp	r5, r7
 801a6d8:	8260      	strh	r0, [r4, #18]
 801a6da:	fbb0 fef3 	udiv	lr, r0, r3
 801a6de:	fbb2 f2f3 	udiv	r2, r2, r3
 801a6e2:	fb03 031e 	mls	r3, r3, lr, r0
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	fb02 f303 	mul.w	r3, r2, r3
 801a6ec:	f841 c003 	str.w	ip, [r1, r3]
 801a6f0:	d1e7      	bne.n	801a6c2 <uxr_process_acknack+0x1a>
 801a6f2:	3e00      	subs	r6, #0
 801a6f4:	f04f 0300 	mov.w	r3, #0
 801a6f8:	bf18      	it	ne
 801a6fa:	2601      	movne	r6, #1
 801a6fc:	f884 3020 	strb.w	r3, [r4, #32]
 801a700:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a706:	bf00      	nop

0801a708 <uxr_is_output_up_to_date>:
 801a708:	8a01      	ldrh	r1, [r0, #16]
 801a70a:	8a40      	ldrh	r0, [r0, #18]
 801a70c:	b508      	push	{r3, lr}
 801a70e:	f000 f82f 	bl	801a770 <uxr_seq_num_cmp>
 801a712:	fab0 f080 	clz	r0, r0
 801a716:	0940      	lsrs	r0, r0, #5
 801a718:	bd08      	pop	{r3, pc}
 801a71a:	bf00      	nop

0801a71c <get_available_free_slots>:
 801a71c:	8901      	ldrh	r1, [r0, #8]
 801a71e:	b1e1      	cbz	r1, 801a75a <get_available_free_slots+0x3e>
 801a720:	6843      	ldr	r3, [r0, #4]
 801a722:	f04f 0c00 	mov.w	ip, #0
 801a726:	b530      	push	{r4, r5, lr}
 801a728:	fbb3 fef1 	udiv	lr, r3, r1
 801a72c:	6805      	ldr	r5, [r0, #0]
 801a72e:	4662      	mov	r2, ip
 801a730:	7b04      	ldrb	r4, [r0, #12]
 801a732:	4660      	mov	r0, ip
 801a734:	f10c 0c01 	add.w	ip, ip, #1
 801a738:	fbb2 f3f1 	udiv	r3, r2, r1
 801a73c:	fb01 2313 	mls	r3, r1, r3, r2
 801a740:	fa1f f28c 	uxth.w	r2, ip
 801a744:	b29b      	uxth	r3, r3
 801a746:	fb0e f303 	mul.w	r3, lr, r3
 801a74a:	58eb      	ldr	r3, [r5, r3]
 801a74c:	429c      	cmp	r4, r3
 801a74e:	d101      	bne.n	801a754 <get_available_free_slots+0x38>
 801a750:	3001      	adds	r0, #1
 801a752:	b280      	uxth	r0, r0
 801a754:	428a      	cmp	r2, r1
 801a756:	d3ed      	bcc.n	801a734 <get_available_free_slots+0x18>
 801a758:	bd30      	pop	{r4, r5, pc}
 801a75a:	4608      	mov	r0, r1
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop

0801a760 <uxr_seq_num_add>:
 801a760:	4408      	add	r0, r1
 801a762:	b280      	uxth	r0, r0
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop

0801a768 <uxr_seq_num_sub>:
 801a768:	1a40      	subs	r0, r0, r1
 801a76a:	b280      	uxth	r0, r0
 801a76c:	4770      	bx	lr
 801a76e:	bf00      	nop

0801a770 <uxr_seq_num_cmp>:
 801a770:	4288      	cmp	r0, r1
 801a772:	d011      	beq.n	801a798 <uxr_seq_num_cmp+0x28>
 801a774:	d309      	bcc.n	801a78a <uxr_seq_num_cmp+0x1a>
 801a776:	4288      	cmp	r0, r1
 801a778:	d910      	bls.n	801a79c <uxr_seq_num_cmp+0x2c>
 801a77a:	1a40      	subs	r0, r0, r1
 801a77c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a780:	bfd4      	ite	le
 801a782:	2001      	movle	r0, #1
 801a784:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a788:	4770      	bx	lr
 801a78a:	1a0b      	subs	r3, r1, r0
 801a78c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a790:	daf1      	bge.n	801a776 <uxr_seq_num_cmp+0x6>
 801a792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a796:	4770      	bx	lr
 801a798:	2000      	movs	r0, #0
 801a79a:	4770      	bx	lr
 801a79c:	2001      	movs	r0, #1
 801a79e:	4770      	bx	lr

0801a7a0 <rcl_get_default_domain_id>:
 801a7a0:	b530      	push	{r4, r5, lr}
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	b083      	sub	sp, #12
 801a7a6:	9300      	str	r3, [sp, #0]
 801a7a8:	b1d0      	cbz	r0, 801a7e0 <rcl_get_default_domain_id+0x40>
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	4669      	mov	r1, sp
 801a7ae:	4815      	ldr	r0, [pc, #84]	@ (801a804 <rcl_get_default_domain_id+0x64>)
 801a7b0:	f7fd fd1a 	bl	80181e8 <rcutils_get_env>
 801a7b4:	4602      	mov	r2, r0
 801a7b6:	b110      	cbz	r0, 801a7be <rcl_get_default_domain_id+0x1e>
 801a7b8:	2001      	movs	r0, #1
 801a7ba:	b003      	add	sp, #12
 801a7bc:	bd30      	pop	{r4, r5, pc}
 801a7be:	9b00      	ldr	r3, [sp, #0]
 801a7c0:	b18b      	cbz	r3, 801a7e6 <rcl_get_default_domain_id+0x46>
 801a7c2:	7818      	ldrb	r0, [r3, #0]
 801a7c4:	2800      	cmp	r0, #0
 801a7c6:	d0f8      	beq.n	801a7ba <rcl_get_default_domain_id+0x1a>
 801a7c8:	a901      	add	r1, sp, #4
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	9201      	str	r2, [sp, #4]
 801a7ce:	f000 fe2d 	bl	801b42c <strtoul>
 801a7d2:	4605      	mov	r5, r0
 801a7d4:	b150      	cbz	r0, 801a7ec <rcl_get_default_domain_id+0x4c>
 801a7d6:	1c43      	adds	r3, r0, #1
 801a7d8:	d00d      	beq.n	801a7f6 <rcl_get_default_domain_id+0x56>
 801a7da:	2000      	movs	r0, #0
 801a7dc:	6025      	str	r5, [r4, #0]
 801a7de:	e7ec      	b.n	801a7ba <rcl_get_default_domain_id+0x1a>
 801a7e0:	200b      	movs	r0, #11
 801a7e2:	b003      	add	sp, #12
 801a7e4:	bd30      	pop	{r4, r5, pc}
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	b003      	add	sp, #12
 801a7ea:	bd30      	pop	{r4, r5, pc}
 801a7ec:	9b01      	ldr	r3, [sp, #4]
 801a7ee:	781b      	ldrb	r3, [r3, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d0f2      	beq.n	801a7da <rcl_get_default_domain_id+0x3a>
 801a7f4:	e7e0      	b.n	801a7b8 <rcl_get_default_domain_id+0x18>
 801a7f6:	f001 f953 	bl	801baa0 <__errno>
 801a7fa:	6803      	ldr	r3, [r0, #0]
 801a7fc:	2b22      	cmp	r3, #34	@ 0x22
 801a7fe:	d1ec      	bne.n	801a7da <rcl_get_default_domain_id+0x3a>
 801a800:	e7da      	b.n	801a7b8 <rcl_get_default_domain_id+0x18>
 801a802:	bf00      	nop
 801a804:	0801d3a8 	.word	0x0801d3a8

0801a808 <rcl_expand_topic_name>:
 801a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a80c:	b08d      	sub	sp, #52	@ 0x34
 801a80e:	4698      	mov	r8, r3
 801a810:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a812:	9207      	str	r2, [sp, #28]
 801a814:	2b00      	cmp	r3, #0
 801a816:	bf18      	it	ne
 801a818:	f1b8 0f00 	cmpne.w	r8, #0
 801a81c:	bf0c      	ite	eq
 801a81e:	2301      	moveq	r3, #1
 801a820:	2300      	movne	r3, #0
 801a822:	2a00      	cmp	r2, #0
 801a824:	bf08      	it	eq
 801a826:	f043 0301 	orreq.w	r3, r3, #1
 801a82a:	2900      	cmp	r1, #0
 801a82c:	bf08      	it	eq
 801a82e:	f043 0301 	orreq.w	r3, r3, #1
 801a832:	2b00      	cmp	r3, #0
 801a834:	d13d      	bne.n	801a8b2 <rcl_expand_topic_name+0xaa>
 801a836:	fab0 f280 	clz	r2, r0
 801a83a:	4604      	mov	r4, r0
 801a83c:	0952      	lsrs	r2, r2, #5
 801a83e:	2800      	cmp	r0, #0
 801a840:	d037      	beq.n	801a8b2 <rcl_expand_topic_name+0xaa>
 801a842:	460f      	mov	r7, r1
 801a844:	a90b      	add	r1, sp, #44	@ 0x2c
 801a846:	f000 fa51 	bl	801acec <rcl_validate_topic_name>
 801a84a:	4605      	mov	r5, r0
 801a84c:	bb68      	cbnz	r0, 801a8aa <rcl_expand_topic_name+0xa2>
 801a84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a850:	2b00      	cmp	r3, #0
 801a852:	d137      	bne.n	801a8c4 <rcl_expand_topic_name+0xbc>
 801a854:	4602      	mov	r2, r0
 801a856:	a90b      	add	r1, sp, #44	@ 0x2c
 801a858:	4638      	mov	r0, r7
 801a85a:	f7fe f927 	bl	8018aac <rmw_validate_node_name>
 801a85e:	bb68      	cbnz	r0, 801a8bc <rcl_expand_topic_name+0xb4>
 801a860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a862:	2b00      	cmp	r3, #0
 801a864:	d133      	bne.n	801a8ce <rcl_expand_topic_name+0xc6>
 801a866:	462a      	mov	r2, r5
 801a868:	a90b      	add	r1, sp, #44	@ 0x2c
 801a86a:	9807      	ldr	r0, [sp, #28]
 801a86c:	f7fe f900 	bl	8018a70 <rmw_validate_namespace>
 801a870:	bb20      	cbnz	r0, 801a8bc <rcl_expand_topic_name+0xb4>
 801a872:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801a874:	2d00      	cmp	r5, #0
 801a876:	f040 80a2 	bne.w	801a9be <rcl_expand_topic_name+0x1b6>
 801a87a:	217b      	movs	r1, #123	@ 0x7b
 801a87c:	4620      	mov	r0, r4
 801a87e:	f001 f883 	bl	801b988 <strchr>
 801a882:	7823      	ldrb	r3, [r4, #0]
 801a884:	4681      	mov	r9, r0
 801a886:	bb20      	cbnz	r0, 801a8d2 <rcl_expand_topic_name+0xca>
 801a888:	2b2f      	cmp	r3, #47	@ 0x2f
 801a88a:	d122      	bne.n	801a8d2 <rcl_expand_topic_name+0xca>
 801a88c:	ab19      	add	r3, sp, #100	@ 0x64
 801a88e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a892:	ab16      	add	r3, sp, #88	@ 0x58
 801a894:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a898:	4620      	mov	r0, r4
 801a89a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a89c:	f7fd fe06 	bl	80184ac <rcutils_strdup>
 801a8a0:	2800      	cmp	r0, #0
 801a8a2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a8a4:	bf08      	it	eq
 801a8a6:	250a      	moveq	r5, #10
 801a8a8:	6018      	str	r0, [r3, #0]
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	b00d      	add	sp, #52	@ 0x34
 801a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8b2:	250b      	movs	r5, #11
 801a8b4:	4628      	mov	r0, r5
 801a8b6:	b00d      	add	sp, #52	@ 0x34
 801a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8bc:	f7fa fe4e 	bl	801555c <rcl_convert_rmw_ret_to_rcl_ret>
 801a8c0:	4605      	mov	r5, r0
 801a8c2:	e7f2      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801a8c4:	2567      	movs	r5, #103	@ 0x67
 801a8c6:	4628      	mov	r0, r5
 801a8c8:	b00d      	add	sp, #52	@ 0x34
 801a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ce:	25c9      	movs	r5, #201	@ 0xc9
 801a8d0:	e7eb      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801a8d2:	2b7e      	cmp	r3, #126	@ 0x7e
 801a8d4:	d075      	beq.n	801a9c2 <rcl_expand_topic_name+0x1ba>
 801a8d6:	f1b9 0f00 	cmp.w	r9, #0
 801a8da:	f000 80c2 	beq.w	801aa62 <rcl_expand_topic_name+0x25a>
 801a8de:	2300      	movs	r3, #0
 801a8e0:	46a2      	mov	sl, r4
 801a8e2:	461e      	mov	r6, r3
 801a8e4:	9508      	str	r5, [sp, #32]
 801a8e6:	4655      	mov	r5, sl
 801a8e8:	9409      	str	r4, [sp, #36]	@ 0x24
 801a8ea:	46b2      	mov	sl, r6
 801a8ec:	464c      	mov	r4, r9
 801a8ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a8f2:	2c00      	cmp	r4, #0
 801a8f4:	f000 80ae 	beq.w	801aa54 <rcl_expand_topic_name+0x24c>
 801a8f8:	217d      	movs	r1, #125	@ 0x7d
 801a8fa:	4628      	mov	r0, r5
 801a8fc:	f001 f844 	bl	801b988 <strchr>
 801a900:	eba0 0904 	sub.w	r9, r0, r4
 801a904:	4621      	mov	r1, r4
 801a906:	4869      	ldr	r0, [pc, #420]	@ (801aaac <rcl_expand_topic_name+0x2a4>)
 801a908:	f109 0601 	add.w	r6, r9, #1
 801a90c:	4632      	mov	r2, r6
 801a90e:	f001 f848 	bl	801b9a2 <strncmp>
 801a912:	2800      	cmp	r0, #0
 801a914:	d051      	beq.n	801a9ba <rcl_expand_topic_name+0x1b2>
 801a916:	4632      	mov	r2, r6
 801a918:	4621      	mov	r1, r4
 801a91a:	4865      	ldr	r0, [pc, #404]	@ (801aab0 <rcl_expand_topic_name+0x2a8>)
 801a91c:	f001 f841 	bl	801b9a2 <strncmp>
 801a920:	b128      	cbz	r0, 801a92e <rcl_expand_topic_name+0x126>
 801a922:	4632      	mov	r2, r6
 801a924:	4621      	mov	r1, r4
 801a926:	4863      	ldr	r0, [pc, #396]	@ (801aab4 <rcl_expand_topic_name+0x2ac>)
 801a928:	f001 f83b 	bl	801b9a2 <strncmp>
 801a92c:	bb38      	cbnz	r0, 801a97e <rcl_expand_topic_name+0x176>
 801a92e:	46d9      	mov	r9, fp
 801a930:	ab18      	add	r3, sp, #96	@ 0x60
 801a932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a936:	ab16      	add	r3, sp, #88	@ 0x58
 801a938:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a93c:	4620      	mov	r0, r4
 801a93e:	4631      	mov	r1, r6
 801a940:	cb0c      	ldmia	r3, {r2, r3}
 801a942:	f7fd fdd5 	bl	80184f0 <rcutils_strndup>
 801a946:	4604      	mov	r4, r0
 801a948:	2800      	cmp	r0, #0
 801a94a:	f000 80a3 	beq.w	801aa94 <rcl_expand_topic_name+0x28c>
 801a94e:	464a      	mov	r2, r9
 801a950:	4628      	mov	r0, r5
 801a952:	ab16      	add	r3, sp, #88	@ 0x58
 801a954:	4621      	mov	r1, r4
 801a956:	f7fd fca9 	bl	80182ac <rcutils_repl_str>
 801a95a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a95c:	4605      	mov	r5, r0
 801a95e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a960:	4620      	mov	r0, r4
 801a962:	4798      	blx	r3
 801a964:	4650      	mov	r0, sl
 801a966:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a96a:	4798      	blx	r3
 801a96c:	2d00      	cmp	r5, #0
 801a96e:	d06c      	beq.n	801aa4a <rcl_expand_topic_name+0x242>
 801a970:	217b      	movs	r1, #123	@ 0x7b
 801a972:	4628      	mov	r0, r5
 801a974:	f001 f808 	bl	801b988 <strchr>
 801a978:	46aa      	mov	sl, r5
 801a97a:	4604      	mov	r4, r0
 801a97c:	e7b9      	b.n	801a8f2 <rcl_expand_topic_name+0xea>
 801a97e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801a982:	1c61      	adds	r1, r4, #1
 801a984:	4640      	mov	r0, r8
 801a986:	f7fd fecb 	bl	8018720 <rcutils_string_map_getn>
 801a98a:	4681      	mov	r9, r0
 801a98c:	2800      	cmp	r0, #0
 801a98e:	d1cf      	bne.n	801a930 <rcl_expand_topic_name+0x128>
 801a990:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a992:	aa18      	add	r2, sp, #96	@ 0x60
 801a994:	2569      	movs	r5, #105	@ 0x69
 801a996:	6018      	str	r0, [r3, #0]
 801a998:	ab16      	add	r3, sp, #88	@ 0x58
 801a99a:	ca07      	ldmia	r2, {r0, r1, r2}
 801a99c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a9a0:	4631      	mov	r1, r6
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	cb0c      	ldmia	r3, {r2, r3}
 801a9a6:	f7fd fda3 	bl	80184f0 <rcutils_strndup>
 801a9aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a9ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a9ae:	4798      	blx	r3
 801a9b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a9b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a9b4:	4650      	mov	r0, sl
 801a9b6:	4798      	blx	r3
 801a9b8:	e777      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801a9ba:	46b9      	mov	r9, r7
 801a9bc:	e7b8      	b.n	801a930 <rcl_expand_topic_name+0x128>
 801a9be:	25ca      	movs	r5, #202	@ 0xca
 801a9c0:	e773      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801a9c2:	9e07      	ldr	r6, [sp, #28]
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f7e5 fc95 	bl	80002f4 <strlen>
 801a9ca:	4a3b      	ldr	r2, [pc, #236]	@ (801aab8 <rcl_expand_topic_name+0x2b0>)
 801a9cc:	4b3b      	ldr	r3, [pc, #236]	@ (801aabc <rcl_expand_topic_name+0x2b4>)
 801a9ce:	9603      	str	r6, [sp, #12]
 801a9d0:	2801      	cmp	r0, #1
 801a9d2:	bf18      	it	ne
 801a9d4:	4613      	movne	r3, r2
 801a9d6:	9704      	str	r7, [sp, #16]
 801a9d8:	9302      	str	r3, [sp, #8]
 801a9da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801a9dc:	9300      	str	r3, [sp, #0]
 801a9de:	1c63      	adds	r3, r4, #1
 801a9e0:	9305      	str	r3, [sp, #20]
 801a9e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a9e6:	9301      	str	r3, [sp, #4]
 801a9e8:	ab16      	add	r3, sp, #88	@ 0x58
 801a9ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a9ec:	f7fd fc24 	bl	8018238 <rcutils_format_string_limit>
 801a9f0:	4606      	mov	r6, r0
 801a9f2:	b350      	cbz	r0, 801aa4a <rcl_expand_topic_name+0x242>
 801a9f4:	f1b9 0f00 	cmp.w	r9, #0
 801a9f8:	d005      	beq.n	801aa06 <rcl_expand_topic_name+0x1fe>
 801a9fa:	217b      	movs	r1, #123	@ 0x7b
 801a9fc:	46b2      	mov	sl, r6
 801a9fe:	f000 ffc3 	bl	801b988 <strchr>
 801aa02:	4681      	mov	r9, r0
 801aa04:	e76e      	b.n	801a8e4 <rcl_expand_topic_name+0xdc>
 801aa06:	7833      	ldrb	r3, [r6, #0]
 801aa08:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa0a:	d01b      	beq.n	801aa44 <rcl_expand_topic_name+0x23c>
 801aa0c:	9c07      	ldr	r4, [sp, #28]
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f7e5 fc70 	bl	80002f4 <strlen>
 801aa14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aa18:	4a29      	ldr	r2, [pc, #164]	@ (801aac0 <rcl_expand_topic_name+0x2b8>)
 801aa1a:	9301      	str	r3, [sp, #4]
 801aa1c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801aa1e:	9604      	str	r6, [sp, #16]
 801aa20:	9300      	str	r3, [sp, #0]
 801aa22:	4b28      	ldr	r3, [pc, #160]	@ (801aac4 <rcl_expand_topic_name+0x2bc>)
 801aa24:	9403      	str	r4, [sp, #12]
 801aa26:	2801      	cmp	r0, #1
 801aa28:	bf18      	it	ne
 801aa2a:	4613      	movne	r3, r2
 801aa2c:	9302      	str	r3, [sp, #8]
 801aa2e:	ab16      	add	r3, sp, #88	@ 0x58
 801aa30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa32:	f7fd fc01 	bl	8018238 <rcutils_format_string_limit>
 801aa36:	4603      	mov	r3, r0
 801aa38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa3e:	461e      	mov	r6, r3
 801aa40:	4790      	blx	r2
 801aa42:	b116      	cbz	r6, 801aa4a <rcl_expand_topic_name+0x242>
 801aa44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801aa46:	601e      	str	r6, [r3, #0]
 801aa48:	e72f      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801aa4e:	250a      	movs	r5, #10
 801aa50:	6013      	str	r3, [r2, #0]
 801aa52:	e72a      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801aa54:	4653      	mov	r3, sl
 801aa56:	4656      	mov	r6, sl
 801aa58:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d1d2      	bne.n	801aa06 <rcl_expand_topic_name+0x1fe>
 801aa60:	7823      	ldrb	r3, [r4, #0]
 801aa62:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa64:	d01e      	beq.n	801aaa4 <rcl_expand_topic_name+0x29c>
 801aa66:	9e07      	ldr	r6, [sp, #28]
 801aa68:	4630      	mov	r0, r6
 801aa6a:	f7e5 fc43 	bl	80002f4 <strlen>
 801aa6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801aa70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aa74:	9603      	str	r6, [sp, #12]
 801aa76:	9404      	str	r4, [sp, #16]
 801aa78:	e9cd 2300 	strd	r2, r3, [sp]
 801aa7c:	4a10      	ldr	r2, [pc, #64]	@ (801aac0 <rcl_expand_topic_name+0x2b8>)
 801aa7e:	4b11      	ldr	r3, [pc, #68]	@ (801aac4 <rcl_expand_topic_name+0x2bc>)
 801aa80:	2801      	cmp	r0, #1
 801aa82:	bf18      	it	ne
 801aa84:	4613      	movne	r3, r2
 801aa86:	9302      	str	r3, [sp, #8]
 801aa88:	ab16      	add	r3, sp, #88	@ 0x58
 801aa8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa8c:	f7fd fbd4 	bl	8018238 <rcutils_format_string_limit>
 801aa90:	4606      	mov	r6, r0
 801aa92:	e7d6      	b.n	801aa42 <rcl_expand_topic_name+0x23a>
 801aa94:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801aa98:	4650      	mov	r0, sl
 801aa9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa9c:	6014      	str	r4, [r2, #0]
 801aa9e:	250a      	movs	r5, #10
 801aaa0:	4798      	blx	r3
 801aaa2:	e702      	b.n	801a8aa <rcl_expand_topic_name+0xa2>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	461e      	mov	r6, r3
 801aaa8:	e7cc      	b.n	801aa44 <rcl_expand_topic_name+0x23c>
 801aaaa:	bf00      	nop
 801aaac:	0801d3c0 	.word	0x0801d3c0
 801aab0:	0801d3c8 	.word	0x0801d3c8
 801aab4:	0801d3d0 	.word	0x0801d3d0
 801aab8:	0801d3b8 	.word	0x0801d3b8
 801aabc:	0801ca1c 	.word	0x0801ca1c
 801aac0:	0801c9e4 	.word	0x0801c9e4
 801aac4:	0801ca2c 	.word	0x0801ca2c

0801aac8 <rcl_get_default_topic_name_substitutions>:
 801aac8:	2800      	cmp	r0, #0
 801aaca:	bf0c      	ite	eq
 801aacc:	200b      	moveq	r0, #11
 801aace:	2000      	movne	r0, #0
 801aad0:	4770      	bx	lr
 801aad2:	bf00      	nop

0801aad4 <rcl_get_zero_initialized_guard_condition>:
 801aad4:	4a03      	ldr	r2, [pc, #12]	@ (801aae4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801aad6:	4603      	mov	r3, r0
 801aad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aadc:	e883 0003 	stmia.w	r3, {r0, r1}
 801aae0:	4618      	mov	r0, r3
 801aae2:	4770      	bx	lr
 801aae4:	0801d3dc 	.word	0x0801d3dc

0801aae8 <rcl_guard_condition_init>:
 801aae8:	b082      	sub	sp, #8
 801aaea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaec:	b087      	sub	sp, #28
 801aaee:	4604      	mov	r4, r0
 801aaf0:	460d      	mov	r5, r1
 801aaf2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801aaf6:	f10d 0c04 	add.w	ip, sp, #4
 801aafa:	e9ce 2300 	strd	r2, r3, [lr]
 801aafe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab06:	f8de 3000 	ldr.w	r3, [lr]
 801ab0a:	a801      	add	r0, sp, #4
 801ab0c:	f8cc 3000 	str.w	r3, [ip]
 801ab10:	f7f4 fa6e 	bl	800eff0 <rcutils_allocator_is_valid>
 801ab14:	b354      	cbz	r4, 801ab6c <rcl_guard_condition_init+0x84>
 801ab16:	f080 0301 	eor.w	r3, r0, #1
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	bb33      	cbnz	r3, 801ab6c <rcl_guard_condition_init+0x84>
 801ab1e:	6866      	ldr	r6, [r4, #4]
 801ab20:	b9ee      	cbnz	r6, 801ab5e <rcl_guard_condition_init+0x76>
 801ab22:	b31d      	cbz	r5, 801ab6c <rcl_guard_condition_init+0x84>
 801ab24:	4628      	mov	r0, r5
 801ab26:	f7fa fd37 	bl	8015598 <rcl_context_is_valid>
 801ab2a:	b308      	cbz	r0, 801ab70 <rcl_guard_condition_init+0x88>
 801ab2c:	9b01      	ldr	r3, [sp, #4]
 801ab2e:	201c      	movs	r0, #28
 801ab30:	9905      	ldr	r1, [sp, #20]
 801ab32:	4798      	blx	r3
 801ab34:	4607      	mov	r7, r0
 801ab36:	6060      	str	r0, [r4, #4]
 801ab38:	b310      	cbz	r0, 801ab80 <rcl_guard_condition_init+0x98>
 801ab3a:	6828      	ldr	r0, [r5, #0]
 801ab3c:	3028      	adds	r0, #40	@ 0x28
 801ab3e:	f000 f999 	bl	801ae74 <rmw_create_guard_condition>
 801ab42:	6038      	str	r0, [r7, #0]
 801ab44:	6860      	ldr	r0, [r4, #4]
 801ab46:	6807      	ldr	r7, [r0, #0]
 801ab48:	b1a7      	cbz	r7, 801ab74 <rcl_guard_condition_init+0x8c>
 801ab4a:	2301      	movs	r3, #1
 801ab4c:	ac01      	add	r4, sp, #4
 801ab4e:	f100 0708 	add.w	r7, r0, #8
 801ab52:	7103      	strb	r3, [r0, #4]
 801ab54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ab58:	6823      	ldr	r3, [r4, #0]
 801ab5a:	603b      	str	r3, [r7, #0]
 801ab5c:	e000      	b.n	801ab60 <rcl_guard_condition_init+0x78>
 801ab5e:	2664      	movs	r6, #100	@ 0x64
 801ab60:	4630      	mov	r0, r6
 801ab62:	b007      	add	sp, #28
 801ab64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ab68:	b002      	add	sp, #8
 801ab6a:	4770      	bx	lr
 801ab6c:	260b      	movs	r6, #11
 801ab6e:	e7f7      	b.n	801ab60 <rcl_guard_condition_init+0x78>
 801ab70:	2665      	movs	r6, #101	@ 0x65
 801ab72:	e7f5      	b.n	801ab60 <rcl_guard_condition_init+0x78>
 801ab74:	9b02      	ldr	r3, [sp, #8]
 801ab76:	2601      	movs	r6, #1
 801ab78:	9905      	ldr	r1, [sp, #20]
 801ab7a:	4798      	blx	r3
 801ab7c:	6067      	str	r7, [r4, #4]
 801ab7e:	e7ef      	b.n	801ab60 <rcl_guard_condition_init+0x78>
 801ab80:	260a      	movs	r6, #10
 801ab82:	e7ed      	b.n	801ab60 <rcl_guard_condition_init+0x78>

0801ab84 <rcl_guard_condition_init_from_rmw>:
 801ab84:	b082      	sub	sp, #8
 801ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab8a:	b086      	sub	sp, #24
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	460e      	mov	r6, r1
 801ab90:	4615      	mov	r5, r2
 801ab92:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801ab96:	f10d 0e04 	add.w	lr, sp, #4
 801ab9a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801ab9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aba2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aba6:	f8dc 3000 	ldr.w	r3, [ip]
 801abaa:	a801      	add	r0, sp, #4
 801abac:	f8ce 3000 	str.w	r3, [lr]
 801abb0:	f7f4 fa1e 	bl	800eff0 <rcutils_allocator_is_valid>
 801abb4:	f080 0301 	eor.w	r3, r0, #1
 801abb8:	b2db      	uxtb	r3, r3
 801abba:	bb3b      	cbnz	r3, 801ac0c <rcl_guard_condition_init_from_rmw+0x88>
 801abbc:	b334      	cbz	r4, 801ac0c <rcl_guard_condition_init_from_rmw+0x88>
 801abbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801abc2:	f1b8 0f00 	cmp.w	r8, #0
 801abc6:	d11a      	bne.n	801abfe <rcl_guard_condition_init_from_rmw+0x7a>
 801abc8:	b305      	cbz	r5, 801ac0c <rcl_guard_condition_init_from_rmw+0x88>
 801abca:	4628      	mov	r0, r5
 801abcc:	f7fa fce4 	bl	8015598 <rcl_context_is_valid>
 801abd0:	b1f0      	cbz	r0, 801ac10 <rcl_guard_condition_init_from_rmw+0x8c>
 801abd2:	9b01      	ldr	r3, [sp, #4]
 801abd4:	201c      	movs	r0, #28
 801abd6:	9905      	ldr	r1, [sp, #20]
 801abd8:	4798      	blx	r3
 801abda:	4607      	mov	r7, r0
 801abdc:	6060      	str	r0, [r4, #4]
 801abde:	b320      	cbz	r0, 801ac2a <rcl_guard_condition_init_from_rmw+0xa6>
 801abe0:	b1c6      	cbz	r6, 801ac14 <rcl_guard_condition_init_from_rmw+0x90>
 801abe2:	6006      	str	r6, [r0, #0]
 801abe4:	f880 8004 	strb.w	r8, [r0, #4]
 801abe8:	ac01      	add	r4, sp, #4
 801abea:	f107 0c08 	add.w	ip, r7, #8
 801abee:	2500      	movs	r5, #0
 801abf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801abf6:	6823      	ldr	r3, [r4, #0]
 801abf8:	f8cc 3000 	str.w	r3, [ip]
 801abfc:	e000      	b.n	801ac00 <rcl_guard_condition_init_from_rmw+0x7c>
 801abfe:	2564      	movs	r5, #100	@ 0x64
 801ac00:	4628      	mov	r0, r5
 801ac02:	b006      	add	sp, #24
 801ac04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac08:	b002      	add	sp, #8
 801ac0a:	4770      	bx	lr
 801ac0c:	250b      	movs	r5, #11
 801ac0e:	e7f7      	b.n	801ac00 <rcl_guard_condition_init_from_rmw+0x7c>
 801ac10:	2565      	movs	r5, #101	@ 0x65
 801ac12:	e7f5      	b.n	801ac00 <rcl_guard_condition_init_from_rmw+0x7c>
 801ac14:	6828      	ldr	r0, [r5, #0]
 801ac16:	3028      	adds	r0, #40	@ 0x28
 801ac18:	f000 f92c 	bl	801ae74 <rmw_create_guard_condition>
 801ac1c:	6038      	str	r0, [r7, #0]
 801ac1e:	6867      	ldr	r7, [r4, #4]
 801ac20:	683e      	ldr	r6, [r7, #0]
 801ac22:	b126      	cbz	r6, 801ac2e <rcl_guard_condition_init_from_rmw+0xaa>
 801ac24:	2301      	movs	r3, #1
 801ac26:	713b      	strb	r3, [r7, #4]
 801ac28:	e7de      	b.n	801abe8 <rcl_guard_condition_init_from_rmw+0x64>
 801ac2a:	250a      	movs	r5, #10
 801ac2c:	e7e8      	b.n	801ac00 <rcl_guard_condition_init_from_rmw+0x7c>
 801ac2e:	9b02      	ldr	r3, [sp, #8]
 801ac30:	4638      	mov	r0, r7
 801ac32:	9905      	ldr	r1, [sp, #20]
 801ac34:	2501      	movs	r5, #1
 801ac36:	4798      	blx	r3
 801ac38:	6066      	str	r6, [r4, #4]
 801ac3a:	e7e1      	b.n	801ac00 <rcl_guard_condition_init_from_rmw+0x7c>

0801ac3c <rcl_guard_condition_fini>:
 801ac3c:	b570      	push	{r4, r5, r6, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	b1f0      	cbz	r0, 801ac80 <rcl_guard_condition_fini+0x44>
 801ac42:	6843      	ldr	r3, [r0, #4]
 801ac44:	4604      	mov	r4, r0
 801ac46:	b163      	cbz	r3, 801ac62 <rcl_guard_condition_fini+0x26>
 801ac48:	6818      	ldr	r0, [r3, #0]
 801ac4a:	68de      	ldr	r6, [r3, #12]
 801ac4c:	6999      	ldr	r1, [r3, #24]
 801ac4e:	b160      	cbz	r0, 801ac6a <rcl_guard_condition_fini+0x2e>
 801ac50:	791d      	ldrb	r5, [r3, #4]
 801ac52:	b965      	cbnz	r5, 801ac6e <rcl_guard_condition_fini+0x32>
 801ac54:	4618      	mov	r0, r3
 801ac56:	47b0      	blx	r6
 801ac58:	2300      	movs	r3, #0
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	6063      	str	r3, [r4, #4]
 801ac5e:	b002      	add	sp, #8
 801ac60:	bd70      	pop	{r4, r5, r6, pc}
 801ac62:	461d      	mov	r5, r3
 801ac64:	4628      	mov	r0, r5
 801ac66:	b002      	add	sp, #8
 801ac68:	bd70      	pop	{r4, r5, r6, pc}
 801ac6a:	4605      	mov	r5, r0
 801ac6c:	e7f2      	b.n	801ac54 <rcl_guard_condition_fini+0x18>
 801ac6e:	9101      	str	r1, [sp, #4]
 801ac70:	f000 f916 	bl	801aea0 <rmw_destroy_guard_condition>
 801ac74:	1e05      	subs	r5, r0, #0
 801ac76:	6863      	ldr	r3, [r4, #4]
 801ac78:	9901      	ldr	r1, [sp, #4]
 801ac7a:	bf18      	it	ne
 801ac7c:	2501      	movne	r5, #1
 801ac7e:	e7e9      	b.n	801ac54 <rcl_guard_condition_fini+0x18>
 801ac80:	250b      	movs	r5, #11
 801ac82:	4628      	mov	r0, r5
 801ac84:	b002      	add	sp, #8
 801ac86:	bd70      	pop	{r4, r5, r6, pc}

0801ac88 <rcl_guard_condition_get_default_options>:
 801ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac8a:	b087      	sub	sp, #28
 801ac8c:	4606      	mov	r6, r0
 801ac8e:	4c0b      	ldr	r4, [pc, #44]	@ (801acbc <rcl_guard_condition_get_default_options+0x34>)
 801ac90:	4668      	mov	r0, sp
 801ac92:	f7f4 f99f 	bl	800efd4 <rcutils_get_default_allocator>
 801ac96:	46ee      	mov	lr, sp
 801ac98:	46a4      	mov	ip, r4
 801ac9a:	4625      	mov	r5, r4
 801ac9c:	4634      	mov	r4, r6
 801ac9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aca2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aca8:	f8de 7000 	ldr.w	r7, [lr]
 801acac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acae:	4630      	mov	r0, r6
 801acb0:	f8cc 7000 	str.w	r7, [ip]
 801acb4:	6027      	str	r7, [r4, #0]
 801acb6:	b007      	add	sp, #28
 801acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acba:	bf00      	nop
 801acbc:	24012ea8 	.word	0x24012ea8

0801acc0 <rcl_trigger_guard_condition>:
 801acc0:	b148      	cbz	r0, 801acd6 <rcl_trigger_guard_condition+0x16>
 801acc2:	b508      	push	{r3, lr}
 801acc4:	6843      	ldr	r3, [r0, #4]
 801acc6:	b143      	cbz	r3, 801acda <rcl_trigger_guard_condition+0x1a>
 801acc8:	6818      	ldr	r0, [r3, #0]
 801acca:	f000 f8fd 	bl	801aec8 <rmw_trigger_guard_condition>
 801acce:	3800      	subs	r0, #0
 801acd0:	bf18      	it	ne
 801acd2:	2001      	movne	r0, #1
 801acd4:	bd08      	pop	{r3, pc}
 801acd6:	200b      	movs	r0, #11
 801acd8:	4770      	bx	lr
 801acda:	200b      	movs	r0, #11
 801acdc:	bd08      	pop	{r3, pc}
 801acde:	bf00      	nop

0801ace0 <rcl_guard_condition_get_rmw_handle>:
 801ace0:	b110      	cbz	r0, 801ace8 <rcl_guard_condition_get_rmw_handle+0x8>
 801ace2:	6840      	ldr	r0, [r0, #4]
 801ace4:	b100      	cbz	r0, 801ace8 <rcl_guard_condition_get_rmw_handle+0x8>
 801ace6:	6800      	ldr	r0, [r0, #0]
 801ace8:	4770      	bx	lr
 801acea:	bf00      	nop

0801acec <rcl_validate_topic_name>:
 801acec:	2800      	cmp	r0, #0
 801acee:	f000 8089 	beq.w	801ae04 <rcl_validate_topic_name+0x118>
 801acf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acf6:	460e      	mov	r6, r1
 801acf8:	2900      	cmp	r1, #0
 801acfa:	f000 8085 	beq.w	801ae08 <rcl_validate_topic_name+0x11c>
 801acfe:	4604      	mov	r4, r0
 801ad00:	4617      	mov	r7, r2
 801ad02:	f7e5 faf7 	bl	80002f4 <strlen>
 801ad06:	b1b0      	cbz	r0, 801ad36 <rcl_validate_topic_name+0x4a>
 801ad08:	f894 e000 	ldrb.w	lr, [r4]
 801ad0c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801ae70 <rcl_validate_topic_name+0x184>
 801ad10:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ad14:	f013 0304 	ands.w	r3, r3, #4
 801ad18:	d139      	bne.n	801ad8e <rcl_validate_topic_name+0xa2>
 801ad1a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ad1e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ad22:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad24:	d10f      	bne.n	801ad46 <rcl_validate_topic_name+0x5a>
 801ad26:	2202      	movs	r2, #2
 801ad28:	6032      	str	r2, [r6, #0]
 801ad2a:	b3a7      	cbz	r7, 801ad96 <rcl_validate_topic_name+0xaa>
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f8c7 8000 	str.w	r8, [r7]
 801ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad36:	2301      	movs	r3, #1
 801ad38:	6033      	str	r3, [r6, #0]
 801ad3a:	b367      	cbz	r7, 801ad96 <rcl_validate_topic_name+0xaa>
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	4618      	mov	r0, r3
 801ad40:	603b      	str	r3, [r7, #0]
 801ad42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad46:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801ad4a:	461d      	mov	r5, r3
 801ad4c:	4619      	mov	r1, r3
 801ad4e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ad52:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801ad56:	f1b9 0f09 	cmp.w	r9, #9
 801ad5a:	d91f      	bls.n	801ad9c <rcl_validate_topic_name+0xb0>
 801ad5c:	f022 0920 	bic.w	r9, r2, #32
 801ad60:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801ad64:	f1b9 0f19 	cmp.w	r9, #25
 801ad68:	d918      	bls.n	801ad9c <rcl_validate_topic_name+0xb0>
 801ad6a:	2a5f      	cmp	r2, #95	@ 0x5f
 801ad6c:	d024      	beq.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ad6e:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad70:	d058      	beq.n	801ae24 <rcl_validate_topic_name+0x138>
 801ad72:	2a7e      	cmp	r2, #126	@ 0x7e
 801ad74:	d04a      	beq.n	801ae0c <rcl_validate_topic_name+0x120>
 801ad76:	2a7b      	cmp	r2, #123	@ 0x7b
 801ad78:	d05b      	beq.n	801ae32 <rcl_validate_topic_name+0x146>
 801ad7a:	2a7d      	cmp	r2, #125	@ 0x7d
 801ad7c:	d169      	bne.n	801ae52 <rcl_validate_topic_name+0x166>
 801ad7e:	2d00      	cmp	r5, #0
 801ad80:	d15c      	bne.n	801ae3c <rcl_validate_topic_name+0x150>
 801ad82:	2305      	movs	r3, #5
 801ad84:	6033      	str	r3, [r6, #0]
 801ad86:	b137      	cbz	r7, 801ad96 <rcl_validate_topic_name+0xaa>
 801ad88:	2000      	movs	r0, #0
 801ad8a:	6039      	str	r1, [r7, #0]
 801ad8c:	e7d9      	b.n	801ad42 <rcl_validate_topic_name+0x56>
 801ad8e:	2304      	movs	r3, #4
 801ad90:	6033      	str	r3, [r6, #0]
 801ad92:	2f00      	cmp	r7, #0
 801ad94:	d1d2      	bne.n	801ad3c <rcl_validate_topic_name+0x50>
 801ad96:	2000      	movs	r0, #0
 801ad98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad9c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ada0:	0752      	lsls	r2, r2, #29
 801ada2:	d509      	bpl.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ada4:	2900      	cmp	r1, #0
 801ada6:	bf0c      	ite	eq
 801ada8:	2200      	moveq	r2, #0
 801adaa:	f005 0201 	andne.w	r2, r5, #1
 801adae:	b11a      	cbz	r2, 801adb8 <rcl_validate_topic_name+0xcc>
 801adb0:	1e4d      	subs	r5, r1, #1
 801adb2:	429d      	cmp	r5, r3
 801adb4:	d031      	beq.n	801ae1a <rcl_validate_topic_name+0x12e>
 801adb6:	4615      	mov	r5, r2
 801adb8:	3101      	adds	r1, #1
 801adba:	4288      	cmp	r0, r1
 801adbc:	d1c7      	bne.n	801ad4e <rcl_validate_topic_name+0x62>
 801adbe:	2d00      	cmp	r5, #0
 801adc0:	d142      	bne.n	801ae48 <rcl_validate_topic_name+0x15c>
 801adc2:	4628      	mov	r0, r5
 801adc4:	2301      	movs	r3, #1
 801adc6:	e00c      	b.n	801ade2 <rcl_validate_topic_name+0xf6>
 801adc8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801adcc:	d101      	bne.n	801add2 <rcl_validate_topic_name+0xe6>
 801adce:	2801      	cmp	r0, #1
 801add0:	d047      	beq.n	801ae62 <rcl_validate_topic_name+0x176>
 801add2:	1c5a      	adds	r2, r3, #1
 801add4:	428b      	cmp	r3, r1
 801add6:	f100 0001 	add.w	r0, r0, #1
 801adda:	f104 0401 	add.w	r4, r4, #1
 801adde:	4613      	mov	r3, r2
 801ade0:	d22e      	bcs.n	801ae40 <rcl_validate_topic_name+0x154>
 801ade2:	4580      	cmp	r8, r0
 801ade4:	d0f5      	beq.n	801add2 <rcl_validate_topic_name+0xe6>
 801ade6:	7822      	ldrb	r2, [r4, #0]
 801ade8:	2a2f      	cmp	r2, #47	@ 0x2f
 801adea:	d1ed      	bne.n	801adc8 <rcl_validate_topic_name+0xdc>
 801adec:	7862      	ldrb	r2, [r4, #1]
 801adee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801adf2:	0752      	lsls	r2, r2, #29
 801adf4:	d5ed      	bpl.n	801add2 <rcl_validate_topic_name+0xe6>
 801adf6:	2204      	movs	r2, #4
 801adf8:	6032      	str	r2, [r6, #0]
 801adfa:	2f00      	cmp	r7, #0
 801adfc:	d0cb      	beq.n	801ad96 <rcl_validate_topic_name+0xaa>
 801adfe:	2000      	movs	r0, #0
 801ae00:	603b      	str	r3, [r7, #0]
 801ae02:	e79e      	b.n	801ad42 <rcl_validate_topic_name+0x56>
 801ae04:	200b      	movs	r0, #11
 801ae06:	4770      	bx	lr
 801ae08:	200b      	movs	r0, #11
 801ae0a:	e79a      	b.n	801ad42 <rcl_validate_topic_name+0x56>
 801ae0c:	2900      	cmp	r1, #0
 801ae0e:	d0d3      	beq.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ae10:	2306      	movs	r3, #6
 801ae12:	6033      	str	r3, [r6, #0]
 801ae14:	2f00      	cmp	r7, #0
 801ae16:	d1b7      	bne.n	801ad88 <rcl_validate_topic_name+0x9c>
 801ae18:	e7bd      	b.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae1a:	2309      	movs	r3, #9
 801ae1c:	6033      	str	r3, [r6, #0]
 801ae1e:	2f00      	cmp	r7, #0
 801ae20:	d1b2      	bne.n	801ad88 <rcl_validate_topic_name+0x9c>
 801ae22:	e7b8      	b.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae24:	2d00      	cmp	r5, #0
 801ae26:	d0c7      	beq.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ae28:	2308      	movs	r3, #8
 801ae2a:	6033      	str	r3, [r6, #0]
 801ae2c:	2f00      	cmp	r7, #0
 801ae2e:	d1ab      	bne.n	801ad88 <rcl_validate_topic_name+0x9c>
 801ae30:	e7b1      	b.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae32:	2d00      	cmp	r5, #0
 801ae34:	d1f8      	bne.n	801ae28 <rcl_validate_topic_name+0x13c>
 801ae36:	460b      	mov	r3, r1
 801ae38:	2501      	movs	r5, #1
 801ae3a:	e7bd      	b.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ae3c:	2500      	movs	r5, #0
 801ae3e:	e7bb      	b.n	801adb8 <rcl_validate_topic_name+0xcc>
 801ae40:	2300      	movs	r3, #0
 801ae42:	4618      	mov	r0, r3
 801ae44:	6033      	str	r3, [r6, #0]
 801ae46:	e77c      	b.n	801ad42 <rcl_validate_topic_name+0x56>
 801ae48:	2205      	movs	r2, #5
 801ae4a:	6032      	str	r2, [r6, #0]
 801ae4c:	2f00      	cmp	r7, #0
 801ae4e:	d1d6      	bne.n	801adfe <rcl_validate_topic_name+0x112>
 801ae50:	e7a1      	b.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae52:	2d00      	cmp	r5, #0
 801ae54:	bf14      	ite	ne
 801ae56:	2308      	movne	r3, #8
 801ae58:	2303      	moveq	r3, #3
 801ae5a:	6033      	str	r3, [r6, #0]
 801ae5c:	2f00      	cmp	r7, #0
 801ae5e:	d193      	bne.n	801ad88 <rcl_validate_topic_name+0x9c>
 801ae60:	e799      	b.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae62:	2307      	movs	r3, #7
 801ae64:	6033      	str	r3, [r6, #0]
 801ae66:	2f00      	cmp	r7, #0
 801ae68:	d095      	beq.n	801ad96 <rcl_validate_topic_name+0xaa>
 801ae6a:	2301      	movs	r3, #1
 801ae6c:	e7c7      	b.n	801adfe <rcl_validate_topic_name+0x112>
 801ae6e:	bf00      	nop
 801ae70:	0801d546 	.word	0x0801d546

0801ae74 <rmw_create_guard_condition>:
 801ae74:	b538      	push	{r3, r4, r5, lr}
 801ae76:	4605      	mov	r5, r0
 801ae78:	4808      	ldr	r0, [pc, #32]	@ (801ae9c <rmw_create_guard_condition+0x28>)
 801ae7a:	f7fd ff5f 	bl	8018d3c <get_memory>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	b148      	cbz	r0, 801ae96 <rmw_create_guard_condition+0x22>
 801ae82:	6884      	ldr	r4, [r0, #8]
 801ae84:	2300      	movs	r3, #0
 801ae86:	61e5      	str	r5, [r4, #28]
 801ae88:	7423      	strb	r3, [r4, #16]
 801ae8a:	f7fd ffbf 	bl	8018e0c <rmw_get_implementation_identifier>
 801ae8e:	f104 0314 	add.w	r3, r4, #20
 801ae92:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801ae96:	4618      	mov	r0, r3
 801ae98:	bd38      	pop	{r3, r4, r5, pc}
 801ae9a:	bf00      	nop
 801ae9c:	24012d44 	.word	0x24012d44

0801aea0 <rmw_destroy_guard_condition>:
 801aea0:	b508      	push	{r3, lr}
 801aea2:	4b08      	ldr	r3, [pc, #32]	@ (801aec4 <rmw_destroy_guard_condition+0x24>)
 801aea4:	6819      	ldr	r1, [r3, #0]
 801aea6:	b911      	cbnz	r1, 801aeae <rmw_destroy_guard_condition+0xe>
 801aea8:	e00a      	b.n	801aec0 <rmw_destroy_guard_condition+0x20>
 801aeaa:	6849      	ldr	r1, [r1, #4]
 801aeac:	b141      	cbz	r1, 801aec0 <rmw_destroy_guard_condition+0x20>
 801aeae:	688b      	ldr	r3, [r1, #8]
 801aeb0:	3314      	adds	r3, #20
 801aeb2:	4298      	cmp	r0, r3
 801aeb4:	d1f9      	bne.n	801aeaa <rmw_destroy_guard_condition+0xa>
 801aeb6:	4803      	ldr	r0, [pc, #12]	@ (801aec4 <rmw_destroy_guard_condition+0x24>)
 801aeb8:	f7fd ff50 	bl	8018d5c <put_memory>
 801aebc:	2000      	movs	r0, #0
 801aebe:	bd08      	pop	{r3, pc}
 801aec0:	2001      	movs	r0, #1
 801aec2:	bd08      	pop	{r3, pc}
 801aec4:	24012d44 	.word	0x24012d44

0801aec8 <rmw_trigger_guard_condition>:
 801aec8:	b160      	cbz	r0, 801aee4 <rmw_trigger_guard_condition+0x1c>
 801aeca:	b510      	push	{r4, lr}
 801aecc:	4604      	mov	r4, r0
 801aece:	6800      	ldr	r0, [r0, #0]
 801aed0:	f7f5 faae 	bl	8010430 <is_uxrce_rmw_identifier_valid>
 801aed4:	b908      	cbnz	r0, 801aeda <rmw_trigger_guard_condition+0x12>
 801aed6:	2001      	movs	r0, #1
 801aed8:	bd10      	pop	{r4, pc}
 801aeda:	6863      	ldr	r3, [r4, #4]
 801aedc:	2201      	movs	r2, #1
 801aede:	2000      	movs	r0, #0
 801aee0:	741a      	strb	r2, [r3, #16]
 801aee2:	bd10      	pop	{r4, pc}
 801aee4:	2001      	movs	r0, #1
 801aee6:	4770      	bx	lr

0801aee8 <rosidl_runtime_c__String__init>:
 801aee8:	b510      	push	{r4, lr}
 801aeea:	4604      	mov	r4, r0
 801aeec:	b086      	sub	sp, #24
 801aeee:	b170      	cbz	r0, 801af0e <rosidl_runtime_c__String__init+0x26>
 801aef0:	a801      	add	r0, sp, #4
 801aef2:	f7f4 f86f 	bl	800efd4 <rcutils_get_default_allocator>
 801aef6:	9b01      	ldr	r3, [sp, #4]
 801aef8:	9905      	ldr	r1, [sp, #20]
 801aefa:	2001      	movs	r0, #1
 801aefc:	4798      	blx	r3
 801aefe:	6020      	str	r0, [r4, #0]
 801af00:	b128      	cbz	r0, 801af0e <rosidl_runtime_c__String__init+0x26>
 801af02:	2100      	movs	r1, #0
 801af04:	2201      	movs	r2, #1
 801af06:	7001      	strb	r1, [r0, #0]
 801af08:	4610      	mov	r0, r2
 801af0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801af0e:	b006      	add	sp, #24
 801af10:	bd10      	pop	{r4, pc}
 801af12:	bf00      	nop

0801af14 <rosidl_runtime_c__String__fini>:
 801af14:	b320      	cbz	r0, 801af60 <rosidl_runtime_c__String__fini+0x4c>
 801af16:	6803      	ldr	r3, [r0, #0]
 801af18:	b510      	push	{r4, lr}
 801af1a:	4604      	mov	r4, r0
 801af1c:	b086      	sub	sp, #24
 801af1e:	b173      	cbz	r3, 801af3e <rosidl_runtime_c__String__fini+0x2a>
 801af20:	6883      	ldr	r3, [r0, #8]
 801af22:	b1f3      	cbz	r3, 801af62 <rosidl_runtime_c__String__fini+0x4e>
 801af24:	a801      	add	r0, sp, #4
 801af26:	f7f4 f855 	bl	800efd4 <rcutils_get_default_allocator>
 801af2a:	9b02      	ldr	r3, [sp, #8]
 801af2c:	9905      	ldr	r1, [sp, #20]
 801af2e:	6820      	ldr	r0, [r4, #0]
 801af30:	4798      	blx	r3
 801af32:	2300      	movs	r3, #0
 801af34:	e9c4 3300 	strd	r3, r3, [r4]
 801af38:	60a3      	str	r3, [r4, #8]
 801af3a:	b006      	add	sp, #24
 801af3c:	bd10      	pop	{r4, pc}
 801af3e:	6843      	ldr	r3, [r0, #4]
 801af40:	b9db      	cbnz	r3, 801af7a <rosidl_runtime_c__String__fini+0x66>
 801af42:	6883      	ldr	r3, [r0, #8]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d0f8      	beq.n	801af3a <rosidl_runtime_c__String__fini+0x26>
 801af48:	4b12      	ldr	r3, [pc, #72]	@ (801af94 <rosidl_runtime_c__String__fini+0x80>)
 801af4a:	2251      	movs	r2, #81	@ 0x51
 801af4c:	2101      	movs	r1, #1
 801af4e:	4812      	ldr	r0, [pc, #72]	@ (801af98 <rosidl_runtime_c__String__fini+0x84>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	68db      	ldr	r3, [r3, #12]
 801af54:	f000 fb82 	bl	801b65c <fwrite>
 801af58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af5c:	f000 f83e 	bl	801afdc <exit>
 801af60:	4770      	bx	lr
 801af62:	4b0c      	ldr	r3, [pc, #48]	@ (801af94 <rosidl_runtime_c__String__fini+0x80>)
 801af64:	224c      	movs	r2, #76	@ 0x4c
 801af66:	2101      	movs	r1, #1
 801af68:	480c      	ldr	r0, [pc, #48]	@ (801af9c <rosidl_runtime_c__String__fini+0x88>)
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	f000 fb75 	bl	801b65c <fwrite>
 801af72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af76:	f000 f831 	bl	801afdc <exit>
 801af7a:	4b06      	ldr	r3, [pc, #24]	@ (801af94 <rosidl_runtime_c__String__fini+0x80>)
 801af7c:	224e      	movs	r2, #78	@ 0x4e
 801af7e:	2101      	movs	r1, #1
 801af80:	4807      	ldr	r0, [pc, #28]	@ (801afa0 <rosidl_runtime_c__String__fini+0x8c>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	68db      	ldr	r3, [r3, #12]
 801af86:	f000 fb69 	bl	801b65c <fwrite>
 801af8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af8e:	f000 f825 	bl	801afdc <exit>
 801af92:	bf00      	nop
 801af94:	240002b0 	.word	0x240002b0
 801af98:	0801d484 	.word	0x0801d484
 801af9c:	0801d3e4 	.word	0x0801d3e4
 801afa0:	0801d434 	.word	0x0801d434

0801afa4 <calloc>:
 801afa4:	4b02      	ldr	r3, [pc, #8]	@ (801afb0 <calloc+0xc>)
 801afa6:	460a      	mov	r2, r1
 801afa8:	4601      	mov	r1, r0
 801afaa:	6818      	ldr	r0, [r3, #0]
 801afac:	f000 b802 	b.w	801afb4 <_calloc_r>
 801afb0:	240002b0 	.word	0x240002b0

0801afb4 <_calloc_r>:
 801afb4:	b570      	push	{r4, r5, r6, lr}
 801afb6:	fba1 5402 	umull	r5, r4, r1, r2
 801afba:	b93c      	cbnz	r4, 801afcc <_calloc_r+0x18>
 801afbc:	4629      	mov	r1, r5
 801afbe:	f000 f899 	bl	801b0f4 <_malloc_r>
 801afc2:	4606      	mov	r6, r0
 801afc4:	b928      	cbnz	r0, 801afd2 <_calloc_r+0x1e>
 801afc6:	2600      	movs	r6, #0
 801afc8:	4630      	mov	r0, r6
 801afca:	bd70      	pop	{r4, r5, r6, pc}
 801afcc:	220c      	movs	r2, #12
 801afce:	6002      	str	r2, [r0, #0]
 801afd0:	e7f9      	b.n	801afc6 <_calloc_r+0x12>
 801afd2:	462a      	mov	r2, r5
 801afd4:	4621      	mov	r1, r4
 801afd6:	f000 fccf 	bl	801b978 <memset>
 801afda:	e7f5      	b.n	801afc8 <_calloc_r+0x14>

0801afdc <exit>:
 801afdc:	b508      	push	{r3, lr}
 801afde:	4b06      	ldr	r3, [pc, #24]	@ (801aff8 <exit+0x1c>)
 801afe0:	4604      	mov	r4, r0
 801afe2:	b113      	cbz	r3, 801afea <exit+0xe>
 801afe4:	2100      	movs	r1, #0
 801afe6:	f3af 8000 	nop.w
 801afea:	4b04      	ldr	r3, [pc, #16]	@ (801affc <exit+0x20>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	b103      	cbz	r3, 801aff2 <exit+0x16>
 801aff0:	4798      	blx	r3
 801aff2:	4620      	mov	r0, r4
 801aff4:	f7e6 fff2 	bl	8001fdc <_exit>
 801aff8:	00000000 	.word	0x00000000
 801affc:	24012ffc 	.word	0x24012ffc

0801b000 <getenv>:
 801b000:	b507      	push	{r0, r1, r2, lr}
 801b002:	4b04      	ldr	r3, [pc, #16]	@ (801b014 <getenv+0x14>)
 801b004:	4601      	mov	r1, r0
 801b006:	aa01      	add	r2, sp, #4
 801b008:	6818      	ldr	r0, [r3, #0]
 801b00a:	f000 f805 	bl	801b018 <_findenv_r>
 801b00e:	b003      	add	sp, #12
 801b010:	f85d fb04 	ldr.w	pc, [sp], #4
 801b014:	240002b0 	.word	0x240002b0

0801b018 <_findenv_r>:
 801b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b08c <_findenv_r+0x74>
 801b020:	4606      	mov	r6, r0
 801b022:	4689      	mov	r9, r1
 801b024:	4617      	mov	r7, r2
 801b026:	f000 fd9d 	bl	801bb64 <__env_lock>
 801b02a:	f8da 4000 	ldr.w	r4, [sl]
 801b02e:	b134      	cbz	r4, 801b03e <_findenv_r+0x26>
 801b030:	464b      	mov	r3, r9
 801b032:	4698      	mov	r8, r3
 801b034:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b038:	b13a      	cbz	r2, 801b04a <_findenv_r+0x32>
 801b03a:	2a3d      	cmp	r2, #61	@ 0x3d
 801b03c:	d1f9      	bne.n	801b032 <_findenv_r+0x1a>
 801b03e:	4630      	mov	r0, r6
 801b040:	f000 fd96 	bl	801bb70 <__env_unlock>
 801b044:	2000      	movs	r0, #0
 801b046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b04a:	eba8 0809 	sub.w	r8, r8, r9
 801b04e:	46a3      	mov	fp, r4
 801b050:	f854 0b04 	ldr.w	r0, [r4], #4
 801b054:	2800      	cmp	r0, #0
 801b056:	d0f2      	beq.n	801b03e <_findenv_r+0x26>
 801b058:	4642      	mov	r2, r8
 801b05a:	4649      	mov	r1, r9
 801b05c:	f000 fca1 	bl	801b9a2 <strncmp>
 801b060:	2800      	cmp	r0, #0
 801b062:	d1f4      	bne.n	801b04e <_findenv_r+0x36>
 801b064:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b068:	eb03 0508 	add.w	r5, r3, r8
 801b06c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b070:	2b3d      	cmp	r3, #61	@ 0x3d
 801b072:	d1ec      	bne.n	801b04e <_findenv_r+0x36>
 801b074:	f8da 3000 	ldr.w	r3, [sl]
 801b078:	ebab 0303 	sub.w	r3, fp, r3
 801b07c:	109b      	asrs	r3, r3, #2
 801b07e:	4630      	mov	r0, r6
 801b080:	603b      	str	r3, [r7, #0]
 801b082:	f000 fd75 	bl	801bb70 <__env_unlock>
 801b086:	1c68      	adds	r0, r5, #1
 801b088:	e7dd      	b.n	801b046 <_findenv_r+0x2e>
 801b08a:	bf00      	nop
 801b08c:	24000024 	.word	0x24000024

0801b090 <malloc>:
 801b090:	4b02      	ldr	r3, [pc, #8]	@ (801b09c <malloc+0xc>)
 801b092:	4601      	mov	r1, r0
 801b094:	6818      	ldr	r0, [r3, #0]
 801b096:	f000 b82d 	b.w	801b0f4 <_malloc_r>
 801b09a:	bf00      	nop
 801b09c:	240002b0 	.word	0x240002b0

0801b0a0 <free>:
 801b0a0:	4b02      	ldr	r3, [pc, #8]	@ (801b0ac <free+0xc>)
 801b0a2:	4601      	mov	r1, r0
 801b0a4:	6818      	ldr	r0, [r3, #0]
 801b0a6:	f000 bd69 	b.w	801bb7c <_free_r>
 801b0aa:	bf00      	nop
 801b0ac:	240002b0 	.word	0x240002b0

0801b0b0 <sbrk_aligned>:
 801b0b0:	b570      	push	{r4, r5, r6, lr}
 801b0b2:	4e0f      	ldr	r6, [pc, #60]	@ (801b0f0 <sbrk_aligned+0x40>)
 801b0b4:	460c      	mov	r4, r1
 801b0b6:	6831      	ldr	r1, [r6, #0]
 801b0b8:	4605      	mov	r5, r0
 801b0ba:	b911      	cbnz	r1, 801b0c2 <sbrk_aligned+0x12>
 801b0bc:	f000 fcce 	bl	801ba5c <_sbrk_r>
 801b0c0:	6030      	str	r0, [r6, #0]
 801b0c2:	4621      	mov	r1, r4
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	f000 fcc9 	bl	801ba5c <_sbrk_r>
 801b0ca:	1c43      	adds	r3, r0, #1
 801b0cc:	d103      	bne.n	801b0d6 <sbrk_aligned+0x26>
 801b0ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	bd70      	pop	{r4, r5, r6, pc}
 801b0d6:	1cc4      	adds	r4, r0, #3
 801b0d8:	f024 0403 	bic.w	r4, r4, #3
 801b0dc:	42a0      	cmp	r0, r4
 801b0de:	d0f8      	beq.n	801b0d2 <sbrk_aligned+0x22>
 801b0e0:	1a21      	subs	r1, r4, r0
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	f000 fcba 	bl	801ba5c <_sbrk_r>
 801b0e8:	3001      	adds	r0, #1
 801b0ea:	d1f2      	bne.n	801b0d2 <sbrk_aligned+0x22>
 801b0ec:	e7ef      	b.n	801b0ce <sbrk_aligned+0x1e>
 801b0ee:	bf00      	nop
 801b0f0:	24012ebc 	.word	0x24012ebc

0801b0f4 <_malloc_r>:
 801b0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0f8:	1ccd      	adds	r5, r1, #3
 801b0fa:	f025 0503 	bic.w	r5, r5, #3
 801b0fe:	3508      	adds	r5, #8
 801b100:	2d0c      	cmp	r5, #12
 801b102:	bf38      	it	cc
 801b104:	250c      	movcc	r5, #12
 801b106:	2d00      	cmp	r5, #0
 801b108:	4606      	mov	r6, r0
 801b10a:	db01      	blt.n	801b110 <_malloc_r+0x1c>
 801b10c:	42a9      	cmp	r1, r5
 801b10e:	d904      	bls.n	801b11a <_malloc_r+0x26>
 801b110:	230c      	movs	r3, #12
 801b112:	6033      	str	r3, [r6, #0]
 801b114:	2000      	movs	r0, #0
 801b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b11a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b1f0 <_malloc_r+0xfc>
 801b11e:	f000 f869 	bl	801b1f4 <__malloc_lock>
 801b122:	f8d8 3000 	ldr.w	r3, [r8]
 801b126:	461c      	mov	r4, r3
 801b128:	bb44      	cbnz	r4, 801b17c <_malloc_r+0x88>
 801b12a:	4629      	mov	r1, r5
 801b12c:	4630      	mov	r0, r6
 801b12e:	f7ff ffbf 	bl	801b0b0 <sbrk_aligned>
 801b132:	1c43      	adds	r3, r0, #1
 801b134:	4604      	mov	r4, r0
 801b136:	d158      	bne.n	801b1ea <_malloc_r+0xf6>
 801b138:	f8d8 4000 	ldr.w	r4, [r8]
 801b13c:	4627      	mov	r7, r4
 801b13e:	2f00      	cmp	r7, #0
 801b140:	d143      	bne.n	801b1ca <_malloc_r+0xd6>
 801b142:	2c00      	cmp	r4, #0
 801b144:	d04b      	beq.n	801b1de <_malloc_r+0xea>
 801b146:	6823      	ldr	r3, [r4, #0]
 801b148:	4639      	mov	r1, r7
 801b14a:	4630      	mov	r0, r6
 801b14c:	eb04 0903 	add.w	r9, r4, r3
 801b150:	f000 fc84 	bl	801ba5c <_sbrk_r>
 801b154:	4581      	cmp	r9, r0
 801b156:	d142      	bne.n	801b1de <_malloc_r+0xea>
 801b158:	6821      	ldr	r1, [r4, #0]
 801b15a:	1a6d      	subs	r5, r5, r1
 801b15c:	4629      	mov	r1, r5
 801b15e:	4630      	mov	r0, r6
 801b160:	f7ff ffa6 	bl	801b0b0 <sbrk_aligned>
 801b164:	3001      	adds	r0, #1
 801b166:	d03a      	beq.n	801b1de <_malloc_r+0xea>
 801b168:	6823      	ldr	r3, [r4, #0]
 801b16a:	442b      	add	r3, r5
 801b16c:	6023      	str	r3, [r4, #0]
 801b16e:	f8d8 3000 	ldr.w	r3, [r8]
 801b172:	685a      	ldr	r2, [r3, #4]
 801b174:	bb62      	cbnz	r2, 801b1d0 <_malloc_r+0xdc>
 801b176:	f8c8 7000 	str.w	r7, [r8]
 801b17a:	e00f      	b.n	801b19c <_malloc_r+0xa8>
 801b17c:	6822      	ldr	r2, [r4, #0]
 801b17e:	1b52      	subs	r2, r2, r5
 801b180:	d420      	bmi.n	801b1c4 <_malloc_r+0xd0>
 801b182:	2a0b      	cmp	r2, #11
 801b184:	d917      	bls.n	801b1b6 <_malloc_r+0xc2>
 801b186:	1961      	adds	r1, r4, r5
 801b188:	42a3      	cmp	r3, r4
 801b18a:	6025      	str	r5, [r4, #0]
 801b18c:	bf18      	it	ne
 801b18e:	6059      	strne	r1, [r3, #4]
 801b190:	6863      	ldr	r3, [r4, #4]
 801b192:	bf08      	it	eq
 801b194:	f8c8 1000 	streq.w	r1, [r8]
 801b198:	5162      	str	r2, [r4, r5]
 801b19a:	604b      	str	r3, [r1, #4]
 801b19c:	4630      	mov	r0, r6
 801b19e:	f000 f82f 	bl	801b200 <__malloc_unlock>
 801b1a2:	f104 000b 	add.w	r0, r4, #11
 801b1a6:	1d23      	adds	r3, r4, #4
 801b1a8:	f020 0007 	bic.w	r0, r0, #7
 801b1ac:	1ac2      	subs	r2, r0, r3
 801b1ae:	bf1c      	itt	ne
 801b1b0:	1a1b      	subne	r3, r3, r0
 801b1b2:	50a3      	strne	r3, [r4, r2]
 801b1b4:	e7af      	b.n	801b116 <_malloc_r+0x22>
 801b1b6:	6862      	ldr	r2, [r4, #4]
 801b1b8:	42a3      	cmp	r3, r4
 801b1ba:	bf0c      	ite	eq
 801b1bc:	f8c8 2000 	streq.w	r2, [r8]
 801b1c0:	605a      	strne	r2, [r3, #4]
 801b1c2:	e7eb      	b.n	801b19c <_malloc_r+0xa8>
 801b1c4:	4623      	mov	r3, r4
 801b1c6:	6864      	ldr	r4, [r4, #4]
 801b1c8:	e7ae      	b.n	801b128 <_malloc_r+0x34>
 801b1ca:	463c      	mov	r4, r7
 801b1cc:	687f      	ldr	r7, [r7, #4]
 801b1ce:	e7b6      	b.n	801b13e <_malloc_r+0x4a>
 801b1d0:	461a      	mov	r2, r3
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	42a3      	cmp	r3, r4
 801b1d6:	d1fb      	bne.n	801b1d0 <_malloc_r+0xdc>
 801b1d8:	2300      	movs	r3, #0
 801b1da:	6053      	str	r3, [r2, #4]
 801b1dc:	e7de      	b.n	801b19c <_malloc_r+0xa8>
 801b1de:	230c      	movs	r3, #12
 801b1e0:	6033      	str	r3, [r6, #0]
 801b1e2:	4630      	mov	r0, r6
 801b1e4:	f000 f80c 	bl	801b200 <__malloc_unlock>
 801b1e8:	e794      	b.n	801b114 <_malloc_r+0x20>
 801b1ea:	6005      	str	r5, [r0, #0]
 801b1ec:	e7d6      	b.n	801b19c <_malloc_r+0xa8>
 801b1ee:	bf00      	nop
 801b1f0:	24012ec0 	.word	0x24012ec0

0801b1f4 <__malloc_lock>:
 801b1f4:	4801      	ldr	r0, [pc, #4]	@ (801b1fc <__malloc_lock+0x8>)
 801b1f6:	f000 bc7e 	b.w	801baf6 <__retarget_lock_acquire_recursive>
 801b1fa:	bf00      	nop
 801b1fc:	24013005 	.word	0x24013005

0801b200 <__malloc_unlock>:
 801b200:	4801      	ldr	r0, [pc, #4]	@ (801b208 <__malloc_unlock+0x8>)
 801b202:	f000 bc79 	b.w	801baf8 <__retarget_lock_release_recursive>
 801b206:	bf00      	nop
 801b208:	24013005 	.word	0x24013005

0801b20c <srand>:
 801b20c:	b538      	push	{r3, r4, r5, lr}
 801b20e:	4b10      	ldr	r3, [pc, #64]	@ (801b250 <srand+0x44>)
 801b210:	681d      	ldr	r5, [r3, #0]
 801b212:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b214:	4604      	mov	r4, r0
 801b216:	b9b3      	cbnz	r3, 801b246 <srand+0x3a>
 801b218:	2018      	movs	r0, #24
 801b21a:	f7ff ff39 	bl	801b090 <malloc>
 801b21e:	4602      	mov	r2, r0
 801b220:	6328      	str	r0, [r5, #48]	@ 0x30
 801b222:	b920      	cbnz	r0, 801b22e <srand+0x22>
 801b224:	4b0b      	ldr	r3, [pc, #44]	@ (801b254 <srand+0x48>)
 801b226:	480c      	ldr	r0, [pc, #48]	@ (801b258 <srand+0x4c>)
 801b228:	2146      	movs	r1, #70	@ 0x46
 801b22a:	f000 fc7d 	bl	801bb28 <__assert_func>
 801b22e:	490b      	ldr	r1, [pc, #44]	@ (801b25c <srand+0x50>)
 801b230:	4b0b      	ldr	r3, [pc, #44]	@ (801b260 <srand+0x54>)
 801b232:	e9c0 1300 	strd	r1, r3, [r0]
 801b236:	4b0b      	ldr	r3, [pc, #44]	@ (801b264 <srand+0x58>)
 801b238:	6083      	str	r3, [r0, #8]
 801b23a:	230b      	movs	r3, #11
 801b23c:	8183      	strh	r3, [r0, #12]
 801b23e:	2100      	movs	r1, #0
 801b240:	2001      	movs	r0, #1
 801b242:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b246:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b248:	2200      	movs	r2, #0
 801b24a:	611c      	str	r4, [r3, #16]
 801b24c:	615a      	str	r2, [r3, #20]
 801b24e:	bd38      	pop	{r3, r4, r5, pc}
 801b250:	240002b0 	.word	0x240002b0
 801b254:	0801d4d6 	.word	0x0801d4d6
 801b258:	0801d4ed 	.word	0x0801d4ed
 801b25c:	abcd330e 	.word	0xabcd330e
 801b260:	e66d1234 	.word	0xe66d1234
 801b264:	0005deec 	.word	0x0005deec

0801b268 <rand>:
 801b268:	4b16      	ldr	r3, [pc, #88]	@ (801b2c4 <rand+0x5c>)
 801b26a:	b510      	push	{r4, lr}
 801b26c:	681c      	ldr	r4, [r3, #0]
 801b26e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b270:	b9b3      	cbnz	r3, 801b2a0 <rand+0x38>
 801b272:	2018      	movs	r0, #24
 801b274:	f7ff ff0c 	bl	801b090 <malloc>
 801b278:	4602      	mov	r2, r0
 801b27a:	6320      	str	r0, [r4, #48]	@ 0x30
 801b27c:	b920      	cbnz	r0, 801b288 <rand+0x20>
 801b27e:	4b12      	ldr	r3, [pc, #72]	@ (801b2c8 <rand+0x60>)
 801b280:	4812      	ldr	r0, [pc, #72]	@ (801b2cc <rand+0x64>)
 801b282:	2152      	movs	r1, #82	@ 0x52
 801b284:	f000 fc50 	bl	801bb28 <__assert_func>
 801b288:	4911      	ldr	r1, [pc, #68]	@ (801b2d0 <rand+0x68>)
 801b28a:	4b12      	ldr	r3, [pc, #72]	@ (801b2d4 <rand+0x6c>)
 801b28c:	e9c0 1300 	strd	r1, r3, [r0]
 801b290:	4b11      	ldr	r3, [pc, #68]	@ (801b2d8 <rand+0x70>)
 801b292:	6083      	str	r3, [r0, #8]
 801b294:	230b      	movs	r3, #11
 801b296:	8183      	strh	r3, [r0, #12]
 801b298:	2100      	movs	r1, #0
 801b29a:	2001      	movs	r0, #1
 801b29c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b2a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b2a2:	480e      	ldr	r0, [pc, #56]	@ (801b2dc <rand+0x74>)
 801b2a4:	690b      	ldr	r3, [r1, #16]
 801b2a6:	694c      	ldr	r4, [r1, #20]
 801b2a8:	4a0d      	ldr	r2, [pc, #52]	@ (801b2e0 <rand+0x78>)
 801b2aa:	4358      	muls	r0, r3
 801b2ac:	fb02 0004 	mla	r0, r2, r4, r0
 801b2b0:	fba3 3202 	umull	r3, r2, r3, r2
 801b2b4:	3301      	adds	r3, #1
 801b2b6:	eb40 0002 	adc.w	r0, r0, r2
 801b2ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b2be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b2c2:	bd10      	pop	{r4, pc}
 801b2c4:	240002b0 	.word	0x240002b0
 801b2c8:	0801d4d6 	.word	0x0801d4d6
 801b2cc:	0801d4ed 	.word	0x0801d4ed
 801b2d0:	abcd330e 	.word	0xabcd330e
 801b2d4:	e66d1234 	.word	0xe66d1234
 801b2d8:	0005deec 	.word	0x0005deec
 801b2dc:	5851f42d 	.word	0x5851f42d
 801b2e0:	4c957f2d 	.word	0x4c957f2d

0801b2e4 <realloc>:
 801b2e4:	4b02      	ldr	r3, [pc, #8]	@ (801b2f0 <realloc+0xc>)
 801b2e6:	460a      	mov	r2, r1
 801b2e8:	4601      	mov	r1, r0
 801b2ea:	6818      	ldr	r0, [r3, #0]
 801b2ec:	f000 b802 	b.w	801b2f4 <_realloc_r>
 801b2f0:	240002b0 	.word	0x240002b0

0801b2f4 <_realloc_r>:
 801b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2f8:	4680      	mov	r8, r0
 801b2fa:	4615      	mov	r5, r2
 801b2fc:	460c      	mov	r4, r1
 801b2fe:	b921      	cbnz	r1, 801b30a <_realloc_r+0x16>
 801b300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b304:	4611      	mov	r1, r2
 801b306:	f7ff bef5 	b.w	801b0f4 <_malloc_r>
 801b30a:	b92a      	cbnz	r2, 801b318 <_realloc_r+0x24>
 801b30c:	f000 fc36 	bl	801bb7c <_free_r>
 801b310:	2400      	movs	r4, #0
 801b312:	4620      	mov	r0, r4
 801b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b318:	f000 fc7a 	bl	801bc10 <_malloc_usable_size_r>
 801b31c:	4285      	cmp	r5, r0
 801b31e:	4606      	mov	r6, r0
 801b320:	d802      	bhi.n	801b328 <_realloc_r+0x34>
 801b322:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b326:	d8f4      	bhi.n	801b312 <_realloc_r+0x1e>
 801b328:	4629      	mov	r1, r5
 801b32a:	4640      	mov	r0, r8
 801b32c:	f7ff fee2 	bl	801b0f4 <_malloc_r>
 801b330:	4607      	mov	r7, r0
 801b332:	2800      	cmp	r0, #0
 801b334:	d0ec      	beq.n	801b310 <_realloc_r+0x1c>
 801b336:	42b5      	cmp	r5, r6
 801b338:	462a      	mov	r2, r5
 801b33a:	4621      	mov	r1, r4
 801b33c:	bf28      	it	cs
 801b33e:	4632      	movcs	r2, r6
 801b340:	f000 fbe3 	bl	801bb0a <memcpy>
 801b344:	4621      	mov	r1, r4
 801b346:	4640      	mov	r0, r8
 801b348:	f000 fc18 	bl	801bb7c <_free_r>
 801b34c:	463c      	mov	r4, r7
 801b34e:	e7e0      	b.n	801b312 <_realloc_r+0x1e>

0801b350 <_strtoul_l.constprop.0>:
 801b350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b354:	4e34      	ldr	r6, [pc, #208]	@ (801b428 <_strtoul_l.constprop.0+0xd8>)
 801b356:	4686      	mov	lr, r0
 801b358:	460d      	mov	r5, r1
 801b35a:	4628      	mov	r0, r5
 801b35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b360:	5d37      	ldrb	r7, [r6, r4]
 801b362:	f017 0708 	ands.w	r7, r7, #8
 801b366:	d1f8      	bne.n	801b35a <_strtoul_l.constprop.0+0xa>
 801b368:	2c2d      	cmp	r4, #45	@ 0x2d
 801b36a:	d12f      	bne.n	801b3cc <_strtoul_l.constprop.0+0x7c>
 801b36c:	782c      	ldrb	r4, [r5, #0]
 801b36e:	2701      	movs	r7, #1
 801b370:	1c85      	adds	r5, r0, #2
 801b372:	f033 0010 	bics.w	r0, r3, #16
 801b376:	d109      	bne.n	801b38c <_strtoul_l.constprop.0+0x3c>
 801b378:	2c30      	cmp	r4, #48	@ 0x30
 801b37a:	d12c      	bne.n	801b3d6 <_strtoul_l.constprop.0+0x86>
 801b37c:	7828      	ldrb	r0, [r5, #0]
 801b37e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b382:	2858      	cmp	r0, #88	@ 0x58
 801b384:	d127      	bne.n	801b3d6 <_strtoul_l.constprop.0+0x86>
 801b386:	786c      	ldrb	r4, [r5, #1]
 801b388:	2310      	movs	r3, #16
 801b38a:	3502      	adds	r5, #2
 801b38c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b390:	2600      	movs	r6, #0
 801b392:	fbb8 f8f3 	udiv	r8, r8, r3
 801b396:	fb03 f908 	mul.w	r9, r3, r8
 801b39a:	ea6f 0909 	mvn.w	r9, r9
 801b39e:	4630      	mov	r0, r6
 801b3a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b3a4:	f1bc 0f09 	cmp.w	ip, #9
 801b3a8:	d81c      	bhi.n	801b3e4 <_strtoul_l.constprop.0+0x94>
 801b3aa:	4664      	mov	r4, ip
 801b3ac:	42a3      	cmp	r3, r4
 801b3ae:	dd2a      	ble.n	801b406 <_strtoul_l.constprop.0+0xb6>
 801b3b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b3b4:	d007      	beq.n	801b3c6 <_strtoul_l.constprop.0+0x76>
 801b3b6:	4580      	cmp	r8, r0
 801b3b8:	d322      	bcc.n	801b400 <_strtoul_l.constprop.0+0xb0>
 801b3ba:	d101      	bne.n	801b3c0 <_strtoul_l.constprop.0+0x70>
 801b3bc:	45a1      	cmp	r9, r4
 801b3be:	db1f      	blt.n	801b400 <_strtoul_l.constprop.0+0xb0>
 801b3c0:	fb00 4003 	mla	r0, r0, r3, r4
 801b3c4:	2601      	movs	r6, #1
 801b3c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3ca:	e7e9      	b.n	801b3a0 <_strtoul_l.constprop.0+0x50>
 801b3cc:	2c2b      	cmp	r4, #43	@ 0x2b
 801b3ce:	bf04      	itt	eq
 801b3d0:	782c      	ldrbeq	r4, [r5, #0]
 801b3d2:	1c85      	addeq	r5, r0, #2
 801b3d4:	e7cd      	b.n	801b372 <_strtoul_l.constprop.0+0x22>
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d1d8      	bne.n	801b38c <_strtoul_l.constprop.0+0x3c>
 801b3da:	2c30      	cmp	r4, #48	@ 0x30
 801b3dc:	bf0c      	ite	eq
 801b3de:	2308      	moveq	r3, #8
 801b3e0:	230a      	movne	r3, #10
 801b3e2:	e7d3      	b.n	801b38c <_strtoul_l.constprop.0+0x3c>
 801b3e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b3e8:	f1bc 0f19 	cmp.w	ip, #25
 801b3ec:	d801      	bhi.n	801b3f2 <_strtoul_l.constprop.0+0xa2>
 801b3ee:	3c37      	subs	r4, #55	@ 0x37
 801b3f0:	e7dc      	b.n	801b3ac <_strtoul_l.constprop.0+0x5c>
 801b3f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b3f6:	f1bc 0f19 	cmp.w	ip, #25
 801b3fa:	d804      	bhi.n	801b406 <_strtoul_l.constprop.0+0xb6>
 801b3fc:	3c57      	subs	r4, #87	@ 0x57
 801b3fe:	e7d5      	b.n	801b3ac <_strtoul_l.constprop.0+0x5c>
 801b400:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b404:	e7df      	b.n	801b3c6 <_strtoul_l.constprop.0+0x76>
 801b406:	1c73      	adds	r3, r6, #1
 801b408:	d106      	bne.n	801b418 <_strtoul_l.constprop.0+0xc8>
 801b40a:	2322      	movs	r3, #34	@ 0x22
 801b40c:	f8ce 3000 	str.w	r3, [lr]
 801b410:	4630      	mov	r0, r6
 801b412:	b932      	cbnz	r2, 801b422 <_strtoul_l.constprop.0+0xd2>
 801b414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b418:	b107      	cbz	r7, 801b41c <_strtoul_l.constprop.0+0xcc>
 801b41a:	4240      	negs	r0, r0
 801b41c:	2a00      	cmp	r2, #0
 801b41e:	d0f9      	beq.n	801b414 <_strtoul_l.constprop.0+0xc4>
 801b420:	b106      	cbz	r6, 801b424 <_strtoul_l.constprop.0+0xd4>
 801b422:	1e69      	subs	r1, r5, #1
 801b424:	6011      	str	r1, [r2, #0]
 801b426:	e7f5      	b.n	801b414 <_strtoul_l.constprop.0+0xc4>
 801b428:	0801d546 	.word	0x0801d546

0801b42c <strtoul>:
 801b42c:	4613      	mov	r3, r2
 801b42e:	460a      	mov	r2, r1
 801b430:	4601      	mov	r1, r0
 801b432:	4802      	ldr	r0, [pc, #8]	@ (801b43c <strtoul+0x10>)
 801b434:	6800      	ldr	r0, [r0, #0]
 801b436:	f7ff bf8b 	b.w	801b350 <_strtoul_l.constprop.0>
 801b43a:	bf00      	nop
 801b43c:	240002b0 	.word	0x240002b0

0801b440 <std>:
 801b440:	2300      	movs	r3, #0
 801b442:	b510      	push	{r4, lr}
 801b444:	4604      	mov	r4, r0
 801b446:	e9c0 3300 	strd	r3, r3, [r0]
 801b44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b44e:	6083      	str	r3, [r0, #8]
 801b450:	8181      	strh	r1, [r0, #12]
 801b452:	6643      	str	r3, [r0, #100]	@ 0x64
 801b454:	81c2      	strh	r2, [r0, #14]
 801b456:	6183      	str	r3, [r0, #24]
 801b458:	4619      	mov	r1, r3
 801b45a:	2208      	movs	r2, #8
 801b45c:	305c      	adds	r0, #92	@ 0x5c
 801b45e:	f000 fa8b 	bl	801b978 <memset>
 801b462:	4b0d      	ldr	r3, [pc, #52]	@ (801b498 <std+0x58>)
 801b464:	6263      	str	r3, [r4, #36]	@ 0x24
 801b466:	4b0d      	ldr	r3, [pc, #52]	@ (801b49c <std+0x5c>)
 801b468:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b46a:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a0 <std+0x60>)
 801b46c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b46e:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a4 <std+0x64>)
 801b470:	6323      	str	r3, [r4, #48]	@ 0x30
 801b472:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a8 <std+0x68>)
 801b474:	6224      	str	r4, [r4, #32]
 801b476:	429c      	cmp	r4, r3
 801b478:	d006      	beq.n	801b488 <std+0x48>
 801b47a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b47e:	4294      	cmp	r4, r2
 801b480:	d002      	beq.n	801b488 <std+0x48>
 801b482:	33d0      	adds	r3, #208	@ 0xd0
 801b484:	429c      	cmp	r4, r3
 801b486:	d105      	bne.n	801b494 <std+0x54>
 801b488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b490:	f000 bb30 	b.w	801baf4 <__retarget_lock_init_recursive>
 801b494:	bd10      	pop	{r4, pc}
 801b496:	bf00      	nop
 801b498:	0801b705 	.word	0x0801b705
 801b49c:	0801b727 	.word	0x0801b727
 801b4a0:	0801b75f 	.word	0x0801b75f
 801b4a4:	0801b783 	.word	0x0801b783
 801b4a8:	24012ec4 	.word	0x24012ec4

0801b4ac <stdio_exit_handler>:
 801b4ac:	4a02      	ldr	r2, [pc, #8]	@ (801b4b8 <stdio_exit_handler+0xc>)
 801b4ae:	4903      	ldr	r1, [pc, #12]	@ (801b4bc <stdio_exit_handler+0x10>)
 801b4b0:	4803      	ldr	r0, [pc, #12]	@ (801b4c0 <stdio_exit_handler+0x14>)
 801b4b2:	f000 b869 	b.w	801b588 <_fwalk_sglue>
 801b4b6:	bf00      	nop
 801b4b8:	240002a4 	.word	0x240002a4
 801b4bc:	0801c579 	.word	0x0801c579
 801b4c0:	240002b4 	.word	0x240002b4

0801b4c4 <cleanup_stdio>:
 801b4c4:	6841      	ldr	r1, [r0, #4]
 801b4c6:	4b0c      	ldr	r3, [pc, #48]	@ (801b4f8 <cleanup_stdio+0x34>)
 801b4c8:	4299      	cmp	r1, r3
 801b4ca:	b510      	push	{r4, lr}
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	d001      	beq.n	801b4d4 <cleanup_stdio+0x10>
 801b4d0:	f001 f852 	bl	801c578 <_fflush_r>
 801b4d4:	68a1      	ldr	r1, [r4, #8]
 801b4d6:	4b09      	ldr	r3, [pc, #36]	@ (801b4fc <cleanup_stdio+0x38>)
 801b4d8:	4299      	cmp	r1, r3
 801b4da:	d002      	beq.n	801b4e2 <cleanup_stdio+0x1e>
 801b4dc:	4620      	mov	r0, r4
 801b4de:	f001 f84b 	bl	801c578 <_fflush_r>
 801b4e2:	68e1      	ldr	r1, [r4, #12]
 801b4e4:	4b06      	ldr	r3, [pc, #24]	@ (801b500 <cleanup_stdio+0x3c>)
 801b4e6:	4299      	cmp	r1, r3
 801b4e8:	d004      	beq.n	801b4f4 <cleanup_stdio+0x30>
 801b4ea:	4620      	mov	r0, r4
 801b4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4f0:	f001 b842 	b.w	801c578 <_fflush_r>
 801b4f4:	bd10      	pop	{r4, pc}
 801b4f6:	bf00      	nop
 801b4f8:	24012ec4 	.word	0x24012ec4
 801b4fc:	24012f2c 	.word	0x24012f2c
 801b500:	24012f94 	.word	0x24012f94

0801b504 <global_stdio_init.part.0>:
 801b504:	b510      	push	{r4, lr}
 801b506:	4b0b      	ldr	r3, [pc, #44]	@ (801b534 <global_stdio_init.part.0+0x30>)
 801b508:	4c0b      	ldr	r4, [pc, #44]	@ (801b538 <global_stdio_init.part.0+0x34>)
 801b50a:	4a0c      	ldr	r2, [pc, #48]	@ (801b53c <global_stdio_init.part.0+0x38>)
 801b50c:	601a      	str	r2, [r3, #0]
 801b50e:	4620      	mov	r0, r4
 801b510:	2200      	movs	r2, #0
 801b512:	2104      	movs	r1, #4
 801b514:	f7ff ff94 	bl	801b440 <std>
 801b518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b51c:	2201      	movs	r2, #1
 801b51e:	2109      	movs	r1, #9
 801b520:	f7ff ff8e 	bl	801b440 <std>
 801b524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b528:	2202      	movs	r2, #2
 801b52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b52e:	2112      	movs	r1, #18
 801b530:	f7ff bf86 	b.w	801b440 <std>
 801b534:	24012ffc 	.word	0x24012ffc
 801b538:	24012ec4 	.word	0x24012ec4
 801b53c:	0801b4ad 	.word	0x0801b4ad

0801b540 <__sfp_lock_acquire>:
 801b540:	4801      	ldr	r0, [pc, #4]	@ (801b548 <__sfp_lock_acquire+0x8>)
 801b542:	f000 bad8 	b.w	801baf6 <__retarget_lock_acquire_recursive>
 801b546:	bf00      	nop
 801b548:	24013006 	.word	0x24013006

0801b54c <__sfp_lock_release>:
 801b54c:	4801      	ldr	r0, [pc, #4]	@ (801b554 <__sfp_lock_release+0x8>)
 801b54e:	f000 bad3 	b.w	801baf8 <__retarget_lock_release_recursive>
 801b552:	bf00      	nop
 801b554:	24013006 	.word	0x24013006

0801b558 <__sinit>:
 801b558:	b510      	push	{r4, lr}
 801b55a:	4604      	mov	r4, r0
 801b55c:	f7ff fff0 	bl	801b540 <__sfp_lock_acquire>
 801b560:	6a23      	ldr	r3, [r4, #32]
 801b562:	b11b      	cbz	r3, 801b56c <__sinit+0x14>
 801b564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b568:	f7ff bff0 	b.w	801b54c <__sfp_lock_release>
 801b56c:	4b04      	ldr	r3, [pc, #16]	@ (801b580 <__sinit+0x28>)
 801b56e:	6223      	str	r3, [r4, #32]
 801b570:	4b04      	ldr	r3, [pc, #16]	@ (801b584 <__sinit+0x2c>)
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d1f5      	bne.n	801b564 <__sinit+0xc>
 801b578:	f7ff ffc4 	bl	801b504 <global_stdio_init.part.0>
 801b57c:	e7f2      	b.n	801b564 <__sinit+0xc>
 801b57e:	bf00      	nop
 801b580:	0801b4c5 	.word	0x0801b4c5
 801b584:	24012ffc 	.word	0x24012ffc

0801b588 <_fwalk_sglue>:
 801b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b58c:	4607      	mov	r7, r0
 801b58e:	4688      	mov	r8, r1
 801b590:	4614      	mov	r4, r2
 801b592:	2600      	movs	r6, #0
 801b594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b598:	f1b9 0901 	subs.w	r9, r9, #1
 801b59c:	d505      	bpl.n	801b5aa <_fwalk_sglue+0x22>
 801b59e:	6824      	ldr	r4, [r4, #0]
 801b5a0:	2c00      	cmp	r4, #0
 801b5a2:	d1f7      	bne.n	801b594 <_fwalk_sglue+0xc>
 801b5a4:	4630      	mov	r0, r6
 801b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5aa:	89ab      	ldrh	r3, [r5, #12]
 801b5ac:	2b01      	cmp	r3, #1
 801b5ae:	d907      	bls.n	801b5c0 <_fwalk_sglue+0x38>
 801b5b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	d003      	beq.n	801b5c0 <_fwalk_sglue+0x38>
 801b5b8:	4629      	mov	r1, r5
 801b5ba:	4638      	mov	r0, r7
 801b5bc:	47c0      	blx	r8
 801b5be:	4306      	orrs	r6, r0
 801b5c0:	3568      	adds	r5, #104	@ 0x68
 801b5c2:	e7e9      	b.n	801b598 <_fwalk_sglue+0x10>

0801b5c4 <_fwrite_r>:
 801b5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5c8:	9c08      	ldr	r4, [sp, #32]
 801b5ca:	468a      	mov	sl, r1
 801b5cc:	4690      	mov	r8, r2
 801b5ce:	fb02 f903 	mul.w	r9, r2, r3
 801b5d2:	4606      	mov	r6, r0
 801b5d4:	b118      	cbz	r0, 801b5de <_fwrite_r+0x1a>
 801b5d6:	6a03      	ldr	r3, [r0, #32]
 801b5d8:	b90b      	cbnz	r3, 801b5de <_fwrite_r+0x1a>
 801b5da:	f7ff ffbd 	bl	801b558 <__sinit>
 801b5de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b5e0:	07dd      	lsls	r5, r3, #31
 801b5e2:	d405      	bmi.n	801b5f0 <_fwrite_r+0x2c>
 801b5e4:	89a3      	ldrh	r3, [r4, #12]
 801b5e6:	0598      	lsls	r0, r3, #22
 801b5e8:	d402      	bmi.n	801b5f0 <_fwrite_r+0x2c>
 801b5ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b5ec:	f000 fa83 	bl	801baf6 <__retarget_lock_acquire_recursive>
 801b5f0:	89a3      	ldrh	r3, [r4, #12]
 801b5f2:	0719      	lsls	r1, r3, #28
 801b5f4:	d516      	bpl.n	801b624 <_fwrite_r+0x60>
 801b5f6:	6923      	ldr	r3, [r4, #16]
 801b5f8:	b1a3      	cbz	r3, 801b624 <_fwrite_r+0x60>
 801b5fa:	2500      	movs	r5, #0
 801b5fc:	454d      	cmp	r5, r9
 801b5fe:	d01f      	beq.n	801b640 <_fwrite_r+0x7c>
 801b600:	68a7      	ldr	r7, [r4, #8]
 801b602:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b606:	3f01      	subs	r7, #1
 801b608:	2f00      	cmp	r7, #0
 801b60a:	60a7      	str	r7, [r4, #8]
 801b60c:	da04      	bge.n	801b618 <_fwrite_r+0x54>
 801b60e:	69a3      	ldr	r3, [r4, #24]
 801b610:	429f      	cmp	r7, r3
 801b612:	db0f      	blt.n	801b634 <_fwrite_r+0x70>
 801b614:	290a      	cmp	r1, #10
 801b616:	d00d      	beq.n	801b634 <_fwrite_r+0x70>
 801b618:	6823      	ldr	r3, [r4, #0]
 801b61a:	1c5a      	adds	r2, r3, #1
 801b61c:	6022      	str	r2, [r4, #0]
 801b61e:	7019      	strb	r1, [r3, #0]
 801b620:	3501      	adds	r5, #1
 801b622:	e7eb      	b.n	801b5fc <_fwrite_r+0x38>
 801b624:	4621      	mov	r1, r4
 801b626:	4630      	mov	r0, r6
 801b628:	f000 f926 	bl	801b878 <__swsetup_r>
 801b62c:	2800      	cmp	r0, #0
 801b62e:	d0e4      	beq.n	801b5fa <_fwrite_r+0x36>
 801b630:	2500      	movs	r5, #0
 801b632:	e005      	b.n	801b640 <_fwrite_r+0x7c>
 801b634:	4622      	mov	r2, r4
 801b636:	4630      	mov	r0, r6
 801b638:	f000 f8e0 	bl	801b7fc <__swbuf_r>
 801b63c:	3001      	adds	r0, #1
 801b63e:	d1ef      	bne.n	801b620 <_fwrite_r+0x5c>
 801b640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b642:	07da      	lsls	r2, r3, #31
 801b644:	d405      	bmi.n	801b652 <_fwrite_r+0x8e>
 801b646:	89a3      	ldrh	r3, [r4, #12]
 801b648:	059b      	lsls	r3, r3, #22
 801b64a:	d402      	bmi.n	801b652 <_fwrite_r+0x8e>
 801b64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b64e:	f000 fa53 	bl	801baf8 <__retarget_lock_release_recursive>
 801b652:	fbb5 f0f8 	udiv	r0, r5, r8
 801b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b65c <fwrite>:
 801b65c:	b507      	push	{r0, r1, r2, lr}
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	4613      	mov	r3, r2
 801b662:	460a      	mov	r2, r1
 801b664:	4601      	mov	r1, r0
 801b666:	4803      	ldr	r0, [pc, #12]	@ (801b674 <fwrite+0x18>)
 801b668:	6800      	ldr	r0, [r0, #0]
 801b66a:	f7ff ffab 	bl	801b5c4 <_fwrite_r>
 801b66e:	b003      	add	sp, #12
 801b670:	f85d fb04 	ldr.w	pc, [sp], #4
 801b674:	240002b0 	.word	0x240002b0

0801b678 <iprintf>:
 801b678:	b40f      	push	{r0, r1, r2, r3}
 801b67a:	b507      	push	{r0, r1, r2, lr}
 801b67c:	4906      	ldr	r1, [pc, #24]	@ (801b698 <iprintf+0x20>)
 801b67e:	ab04      	add	r3, sp, #16
 801b680:	6808      	ldr	r0, [r1, #0]
 801b682:	f853 2b04 	ldr.w	r2, [r3], #4
 801b686:	6881      	ldr	r1, [r0, #8]
 801b688:	9301      	str	r3, [sp, #4]
 801b68a:	f000 fc4b 	bl	801bf24 <_vfiprintf_r>
 801b68e:	b003      	add	sp, #12
 801b690:	f85d eb04 	ldr.w	lr, [sp], #4
 801b694:	b004      	add	sp, #16
 801b696:	4770      	bx	lr
 801b698:	240002b0 	.word	0x240002b0

0801b69c <sniprintf>:
 801b69c:	b40c      	push	{r2, r3}
 801b69e:	b530      	push	{r4, r5, lr}
 801b6a0:	4b17      	ldr	r3, [pc, #92]	@ (801b700 <sniprintf+0x64>)
 801b6a2:	1e0c      	subs	r4, r1, #0
 801b6a4:	681d      	ldr	r5, [r3, #0]
 801b6a6:	b09d      	sub	sp, #116	@ 0x74
 801b6a8:	da08      	bge.n	801b6bc <sniprintf+0x20>
 801b6aa:	238b      	movs	r3, #139	@ 0x8b
 801b6ac:	602b      	str	r3, [r5, #0]
 801b6ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6b2:	b01d      	add	sp, #116	@ 0x74
 801b6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6b8:	b002      	add	sp, #8
 801b6ba:	4770      	bx	lr
 801b6bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b6c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6c4:	bf14      	ite	ne
 801b6c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b6ca:	4623      	moveq	r3, r4
 801b6cc:	9304      	str	r3, [sp, #16]
 801b6ce:	9307      	str	r3, [sp, #28]
 801b6d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6d4:	9002      	str	r0, [sp, #8]
 801b6d6:	9006      	str	r0, [sp, #24]
 801b6d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b6de:	ab21      	add	r3, sp, #132	@ 0x84
 801b6e0:	a902      	add	r1, sp, #8
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	9301      	str	r3, [sp, #4]
 801b6e6:	f000 faf7 	bl	801bcd8 <_svfiprintf_r>
 801b6ea:	1c43      	adds	r3, r0, #1
 801b6ec:	bfbc      	itt	lt
 801b6ee:	238b      	movlt	r3, #139	@ 0x8b
 801b6f0:	602b      	strlt	r3, [r5, #0]
 801b6f2:	2c00      	cmp	r4, #0
 801b6f4:	d0dd      	beq.n	801b6b2 <sniprintf+0x16>
 801b6f6:	9b02      	ldr	r3, [sp, #8]
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	701a      	strb	r2, [r3, #0]
 801b6fc:	e7d9      	b.n	801b6b2 <sniprintf+0x16>
 801b6fe:	bf00      	nop
 801b700:	240002b0 	.word	0x240002b0

0801b704 <__sread>:
 801b704:	b510      	push	{r4, lr}
 801b706:	460c      	mov	r4, r1
 801b708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b70c:	f000 f994 	bl	801ba38 <_read_r>
 801b710:	2800      	cmp	r0, #0
 801b712:	bfab      	itete	ge
 801b714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b716:	89a3      	ldrhlt	r3, [r4, #12]
 801b718:	181b      	addge	r3, r3, r0
 801b71a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b71e:	bfac      	ite	ge
 801b720:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b722:	81a3      	strhlt	r3, [r4, #12]
 801b724:	bd10      	pop	{r4, pc}

0801b726 <__swrite>:
 801b726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b72a:	461f      	mov	r7, r3
 801b72c:	898b      	ldrh	r3, [r1, #12]
 801b72e:	05db      	lsls	r3, r3, #23
 801b730:	4605      	mov	r5, r0
 801b732:	460c      	mov	r4, r1
 801b734:	4616      	mov	r6, r2
 801b736:	d505      	bpl.n	801b744 <__swrite+0x1e>
 801b738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b73c:	2302      	movs	r3, #2
 801b73e:	2200      	movs	r2, #0
 801b740:	f000 f968 	bl	801ba14 <_lseek_r>
 801b744:	89a3      	ldrh	r3, [r4, #12]
 801b746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b74a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b74e:	81a3      	strh	r3, [r4, #12]
 801b750:	4632      	mov	r2, r6
 801b752:	463b      	mov	r3, r7
 801b754:	4628      	mov	r0, r5
 801b756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b75a:	f000 b98f 	b.w	801ba7c <_write_r>

0801b75e <__sseek>:
 801b75e:	b510      	push	{r4, lr}
 801b760:	460c      	mov	r4, r1
 801b762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b766:	f000 f955 	bl	801ba14 <_lseek_r>
 801b76a:	1c43      	adds	r3, r0, #1
 801b76c:	89a3      	ldrh	r3, [r4, #12]
 801b76e:	bf15      	itete	ne
 801b770:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b77a:	81a3      	strheq	r3, [r4, #12]
 801b77c:	bf18      	it	ne
 801b77e:	81a3      	strhne	r3, [r4, #12]
 801b780:	bd10      	pop	{r4, pc}

0801b782 <__sclose>:
 801b782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b786:	f000 b935 	b.w	801b9f4 <_close_r>

0801b78a <_vsniprintf_r>:
 801b78a:	b530      	push	{r4, r5, lr}
 801b78c:	4614      	mov	r4, r2
 801b78e:	2c00      	cmp	r4, #0
 801b790:	b09b      	sub	sp, #108	@ 0x6c
 801b792:	4605      	mov	r5, r0
 801b794:	461a      	mov	r2, r3
 801b796:	da05      	bge.n	801b7a4 <_vsniprintf_r+0x1a>
 801b798:	238b      	movs	r3, #139	@ 0x8b
 801b79a:	6003      	str	r3, [r0, #0]
 801b79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7a0:	b01b      	add	sp, #108	@ 0x6c
 801b7a2:	bd30      	pop	{r4, r5, pc}
 801b7a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b7a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b7ac:	bf14      	ite	ne
 801b7ae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b7b2:	4623      	moveq	r3, r4
 801b7b4:	9302      	str	r3, [sp, #8]
 801b7b6:	9305      	str	r3, [sp, #20]
 801b7b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b7bc:	9100      	str	r1, [sp, #0]
 801b7be:	9104      	str	r1, [sp, #16]
 801b7c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7c4:	4669      	mov	r1, sp
 801b7c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b7c8:	f000 fa86 	bl	801bcd8 <_svfiprintf_r>
 801b7cc:	1c43      	adds	r3, r0, #1
 801b7ce:	bfbc      	itt	lt
 801b7d0:	238b      	movlt	r3, #139	@ 0x8b
 801b7d2:	602b      	strlt	r3, [r5, #0]
 801b7d4:	2c00      	cmp	r4, #0
 801b7d6:	d0e3      	beq.n	801b7a0 <_vsniprintf_r+0x16>
 801b7d8:	9b00      	ldr	r3, [sp, #0]
 801b7da:	2200      	movs	r2, #0
 801b7dc:	701a      	strb	r2, [r3, #0]
 801b7de:	e7df      	b.n	801b7a0 <_vsniprintf_r+0x16>

0801b7e0 <vsniprintf>:
 801b7e0:	b507      	push	{r0, r1, r2, lr}
 801b7e2:	9300      	str	r3, [sp, #0]
 801b7e4:	4613      	mov	r3, r2
 801b7e6:	460a      	mov	r2, r1
 801b7e8:	4601      	mov	r1, r0
 801b7ea:	4803      	ldr	r0, [pc, #12]	@ (801b7f8 <vsniprintf+0x18>)
 801b7ec:	6800      	ldr	r0, [r0, #0]
 801b7ee:	f7ff ffcc 	bl	801b78a <_vsniprintf_r>
 801b7f2:	b003      	add	sp, #12
 801b7f4:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7f8:	240002b0 	.word	0x240002b0

0801b7fc <__swbuf_r>:
 801b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fe:	460e      	mov	r6, r1
 801b800:	4614      	mov	r4, r2
 801b802:	4605      	mov	r5, r0
 801b804:	b118      	cbz	r0, 801b80e <__swbuf_r+0x12>
 801b806:	6a03      	ldr	r3, [r0, #32]
 801b808:	b90b      	cbnz	r3, 801b80e <__swbuf_r+0x12>
 801b80a:	f7ff fea5 	bl	801b558 <__sinit>
 801b80e:	69a3      	ldr	r3, [r4, #24]
 801b810:	60a3      	str	r3, [r4, #8]
 801b812:	89a3      	ldrh	r3, [r4, #12]
 801b814:	071a      	lsls	r2, r3, #28
 801b816:	d501      	bpl.n	801b81c <__swbuf_r+0x20>
 801b818:	6923      	ldr	r3, [r4, #16]
 801b81a:	b943      	cbnz	r3, 801b82e <__swbuf_r+0x32>
 801b81c:	4621      	mov	r1, r4
 801b81e:	4628      	mov	r0, r5
 801b820:	f000 f82a 	bl	801b878 <__swsetup_r>
 801b824:	b118      	cbz	r0, 801b82e <__swbuf_r+0x32>
 801b826:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b82a:	4638      	mov	r0, r7
 801b82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b82e:	6823      	ldr	r3, [r4, #0]
 801b830:	6922      	ldr	r2, [r4, #16]
 801b832:	1a98      	subs	r0, r3, r2
 801b834:	6963      	ldr	r3, [r4, #20]
 801b836:	b2f6      	uxtb	r6, r6
 801b838:	4283      	cmp	r3, r0
 801b83a:	4637      	mov	r7, r6
 801b83c:	dc05      	bgt.n	801b84a <__swbuf_r+0x4e>
 801b83e:	4621      	mov	r1, r4
 801b840:	4628      	mov	r0, r5
 801b842:	f000 fe99 	bl	801c578 <_fflush_r>
 801b846:	2800      	cmp	r0, #0
 801b848:	d1ed      	bne.n	801b826 <__swbuf_r+0x2a>
 801b84a:	68a3      	ldr	r3, [r4, #8]
 801b84c:	3b01      	subs	r3, #1
 801b84e:	60a3      	str	r3, [r4, #8]
 801b850:	6823      	ldr	r3, [r4, #0]
 801b852:	1c5a      	adds	r2, r3, #1
 801b854:	6022      	str	r2, [r4, #0]
 801b856:	701e      	strb	r6, [r3, #0]
 801b858:	6962      	ldr	r2, [r4, #20]
 801b85a:	1c43      	adds	r3, r0, #1
 801b85c:	429a      	cmp	r2, r3
 801b85e:	d004      	beq.n	801b86a <__swbuf_r+0x6e>
 801b860:	89a3      	ldrh	r3, [r4, #12]
 801b862:	07db      	lsls	r3, r3, #31
 801b864:	d5e1      	bpl.n	801b82a <__swbuf_r+0x2e>
 801b866:	2e0a      	cmp	r6, #10
 801b868:	d1df      	bne.n	801b82a <__swbuf_r+0x2e>
 801b86a:	4621      	mov	r1, r4
 801b86c:	4628      	mov	r0, r5
 801b86e:	f000 fe83 	bl	801c578 <_fflush_r>
 801b872:	2800      	cmp	r0, #0
 801b874:	d0d9      	beq.n	801b82a <__swbuf_r+0x2e>
 801b876:	e7d6      	b.n	801b826 <__swbuf_r+0x2a>

0801b878 <__swsetup_r>:
 801b878:	b538      	push	{r3, r4, r5, lr}
 801b87a:	4b29      	ldr	r3, [pc, #164]	@ (801b920 <__swsetup_r+0xa8>)
 801b87c:	4605      	mov	r5, r0
 801b87e:	6818      	ldr	r0, [r3, #0]
 801b880:	460c      	mov	r4, r1
 801b882:	b118      	cbz	r0, 801b88c <__swsetup_r+0x14>
 801b884:	6a03      	ldr	r3, [r0, #32]
 801b886:	b90b      	cbnz	r3, 801b88c <__swsetup_r+0x14>
 801b888:	f7ff fe66 	bl	801b558 <__sinit>
 801b88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b890:	0719      	lsls	r1, r3, #28
 801b892:	d422      	bmi.n	801b8da <__swsetup_r+0x62>
 801b894:	06da      	lsls	r2, r3, #27
 801b896:	d407      	bmi.n	801b8a8 <__swsetup_r+0x30>
 801b898:	2209      	movs	r2, #9
 801b89a:	602a      	str	r2, [r5, #0]
 801b89c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8a0:	81a3      	strh	r3, [r4, #12]
 801b8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8a6:	e033      	b.n	801b910 <__swsetup_r+0x98>
 801b8a8:	0758      	lsls	r0, r3, #29
 801b8aa:	d512      	bpl.n	801b8d2 <__swsetup_r+0x5a>
 801b8ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b8ae:	b141      	cbz	r1, 801b8c2 <__swsetup_r+0x4a>
 801b8b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b8b4:	4299      	cmp	r1, r3
 801b8b6:	d002      	beq.n	801b8be <__swsetup_r+0x46>
 801b8b8:	4628      	mov	r0, r5
 801b8ba:	f000 f95f 	bl	801bb7c <_free_r>
 801b8be:	2300      	movs	r3, #0
 801b8c0:	6363      	str	r3, [r4, #52]	@ 0x34
 801b8c2:	89a3      	ldrh	r3, [r4, #12]
 801b8c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b8c8:	81a3      	strh	r3, [r4, #12]
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	6063      	str	r3, [r4, #4]
 801b8ce:	6923      	ldr	r3, [r4, #16]
 801b8d0:	6023      	str	r3, [r4, #0]
 801b8d2:	89a3      	ldrh	r3, [r4, #12]
 801b8d4:	f043 0308 	orr.w	r3, r3, #8
 801b8d8:	81a3      	strh	r3, [r4, #12]
 801b8da:	6923      	ldr	r3, [r4, #16]
 801b8dc:	b94b      	cbnz	r3, 801b8f2 <__swsetup_r+0x7a>
 801b8de:	89a3      	ldrh	r3, [r4, #12]
 801b8e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b8e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b8e8:	d003      	beq.n	801b8f2 <__swsetup_r+0x7a>
 801b8ea:	4621      	mov	r1, r4
 801b8ec:	4628      	mov	r0, r5
 801b8ee:	f000 fea3 	bl	801c638 <__smakebuf_r>
 801b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8f6:	f013 0201 	ands.w	r2, r3, #1
 801b8fa:	d00a      	beq.n	801b912 <__swsetup_r+0x9a>
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	60a2      	str	r2, [r4, #8]
 801b900:	6962      	ldr	r2, [r4, #20]
 801b902:	4252      	negs	r2, r2
 801b904:	61a2      	str	r2, [r4, #24]
 801b906:	6922      	ldr	r2, [r4, #16]
 801b908:	b942      	cbnz	r2, 801b91c <__swsetup_r+0xa4>
 801b90a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b90e:	d1c5      	bne.n	801b89c <__swsetup_r+0x24>
 801b910:	bd38      	pop	{r3, r4, r5, pc}
 801b912:	0799      	lsls	r1, r3, #30
 801b914:	bf58      	it	pl
 801b916:	6962      	ldrpl	r2, [r4, #20]
 801b918:	60a2      	str	r2, [r4, #8]
 801b91a:	e7f4      	b.n	801b906 <__swsetup_r+0x8e>
 801b91c:	2000      	movs	r0, #0
 801b91e:	e7f7      	b.n	801b910 <__swsetup_r+0x98>
 801b920:	240002b0 	.word	0x240002b0

0801b924 <memcmp>:
 801b924:	b510      	push	{r4, lr}
 801b926:	3901      	subs	r1, #1
 801b928:	4402      	add	r2, r0
 801b92a:	4290      	cmp	r0, r2
 801b92c:	d101      	bne.n	801b932 <memcmp+0xe>
 801b92e:	2000      	movs	r0, #0
 801b930:	e005      	b.n	801b93e <memcmp+0x1a>
 801b932:	7803      	ldrb	r3, [r0, #0]
 801b934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b938:	42a3      	cmp	r3, r4
 801b93a:	d001      	beq.n	801b940 <memcmp+0x1c>
 801b93c:	1b18      	subs	r0, r3, r4
 801b93e:	bd10      	pop	{r4, pc}
 801b940:	3001      	adds	r0, #1
 801b942:	e7f2      	b.n	801b92a <memcmp+0x6>

0801b944 <memmove>:
 801b944:	4288      	cmp	r0, r1
 801b946:	b510      	push	{r4, lr}
 801b948:	eb01 0402 	add.w	r4, r1, r2
 801b94c:	d902      	bls.n	801b954 <memmove+0x10>
 801b94e:	4284      	cmp	r4, r0
 801b950:	4623      	mov	r3, r4
 801b952:	d807      	bhi.n	801b964 <memmove+0x20>
 801b954:	1e43      	subs	r3, r0, #1
 801b956:	42a1      	cmp	r1, r4
 801b958:	d008      	beq.n	801b96c <memmove+0x28>
 801b95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b962:	e7f8      	b.n	801b956 <memmove+0x12>
 801b964:	4402      	add	r2, r0
 801b966:	4601      	mov	r1, r0
 801b968:	428a      	cmp	r2, r1
 801b96a:	d100      	bne.n	801b96e <memmove+0x2a>
 801b96c:	bd10      	pop	{r4, pc}
 801b96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b976:	e7f7      	b.n	801b968 <memmove+0x24>

0801b978 <memset>:
 801b978:	4402      	add	r2, r0
 801b97a:	4603      	mov	r3, r0
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d100      	bne.n	801b982 <memset+0xa>
 801b980:	4770      	bx	lr
 801b982:	f803 1b01 	strb.w	r1, [r3], #1
 801b986:	e7f9      	b.n	801b97c <memset+0x4>

0801b988 <strchr>:
 801b988:	b2c9      	uxtb	r1, r1
 801b98a:	4603      	mov	r3, r0
 801b98c:	4618      	mov	r0, r3
 801b98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b992:	b112      	cbz	r2, 801b99a <strchr+0x12>
 801b994:	428a      	cmp	r2, r1
 801b996:	d1f9      	bne.n	801b98c <strchr+0x4>
 801b998:	4770      	bx	lr
 801b99a:	2900      	cmp	r1, #0
 801b99c:	bf18      	it	ne
 801b99e:	2000      	movne	r0, #0
 801b9a0:	4770      	bx	lr

0801b9a2 <strncmp>:
 801b9a2:	b510      	push	{r4, lr}
 801b9a4:	b16a      	cbz	r2, 801b9c2 <strncmp+0x20>
 801b9a6:	3901      	subs	r1, #1
 801b9a8:	1884      	adds	r4, r0, r2
 801b9aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b9b2:	429a      	cmp	r2, r3
 801b9b4:	d103      	bne.n	801b9be <strncmp+0x1c>
 801b9b6:	42a0      	cmp	r0, r4
 801b9b8:	d001      	beq.n	801b9be <strncmp+0x1c>
 801b9ba:	2a00      	cmp	r2, #0
 801b9bc:	d1f5      	bne.n	801b9aa <strncmp+0x8>
 801b9be:	1ad0      	subs	r0, r2, r3
 801b9c0:	bd10      	pop	{r4, pc}
 801b9c2:	4610      	mov	r0, r2
 801b9c4:	e7fc      	b.n	801b9c0 <strncmp+0x1e>

0801b9c6 <strstr>:
 801b9c6:	780a      	ldrb	r2, [r1, #0]
 801b9c8:	b570      	push	{r4, r5, r6, lr}
 801b9ca:	b96a      	cbnz	r2, 801b9e8 <strstr+0x22>
 801b9cc:	bd70      	pop	{r4, r5, r6, pc}
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d109      	bne.n	801b9e6 <strstr+0x20>
 801b9d2:	460c      	mov	r4, r1
 801b9d4:	4605      	mov	r5, r0
 801b9d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d0f6      	beq.n	801b9cc <strstr+0x6>
 801b9de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b9e2:	429e      	cmp	r6, r3
 801b9e4:	d0f7      	beq.n	801b9d6 <strstr+0x10>
 801b9e6:	3001      	adds	r0, #1
 801b9e8:	7803      	ldrb	r3, [r0, #0]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d1ef      	bne.n	801b9ce <strstr+0x8>
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	e7ec      	b.n	801b9cc <strstr+0x6>
	...

0801b9f4 <_close_r>:
 801b9f4:	b538      	push	{r3, r4, r5, lr}
 801b9f6:	4d06      	ldr	r5, [pc, #24]	@ (801ba10 <_close_r+0x1c>)
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	4604      	mov	r4, r0
 801b9fc:	4608      	mov	r0, r1
 801b9fe:	602b      	str	r3, [r5, #0]
 801ba00:	f7e6 fb30 	bl	8002064 <_close>
 801ba04:	1c43      	adds	r3, r0, #1
 801ba06:	d102      	bne.n	801ba0e <_close_r+0x1a>
 801ba08:	682b      	ldr	r3, [r5, #0]
 801ba0a:	b103      	cbz	r3, 801ba0e <_close_r+0x1a>
 801ba0c:	6023      	str	r3, [r4, #0]
 801ba0e:	bd38      	pop	{r3, r4, r5, pc}
 801ba10:	24013000 	.word	0x24013000

0801ba14 <_lseek_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	4d07      	ldr	r5, [pc, #28]	@ (801ba34 <_lseek_r+0x20>)
 801ba18:	4604      	mov	r4, r0
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	4611      	mov	r1, r2
 801ba1e:	2200      	movs	r2, #0
 801ba20:	602a      	str	r2, [r5, #0]
 801ba22:	461a      	mov	r2, r3
 801ba24:	f7e6 fb45 	bl	80020b2 <_lseek>
 801ba28:	1c43      	adds	r3, r0, #1
 801ba2a:	d102      	bne.n	801ba32 <_lseek_r+0x1e>
 801ba2c:	682b      	ldr	r3, [r5, #0]
 801ba2e:	b103      	cbz	r3, 801ba32 <_lseek_r+0x1e>
 801ba30:	6023      	str	r3, [r4, #0]
 801ba32:	bd38      	pop	{r3, r4, r5, pc}
 801ba34:	24013000 	.word	0x24013000

0801ba38 <_read_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4d07      	ldr	r5, [pc, #28]	@ (801ba58 <_read_r+0x20>)
 801ba3c:	4604      	mov	r4, r0
 801ba3e:	4608      	mov	r0, r1
 801ba40:	4611      	mov	r1, r2
 801ba42:	2200      	movs	r2, #0
 801ba44:	602a      	str	r2, [r5, #0]
 801ba46:	461a      	mov	r2, r3
 801ba48:	f7e6 fad3 	bl	8001ff2 <_read>
 801ba4c:	1c43      	adds	r3, r0, #1
 801ba4e:	d102      	bne.n	801ba56 <_read_r+0x1e>
 801ba50:	682b      	ldr	r3, [r5, #0]
 801ba52:	b103      	cbz	r3, 801ba56 <_read_r+0x1e>
 801ba54:	6023      	str	r3, [r4, #0]
 801ba56:	bd38      	pop	{r3, r4, r5, pc}
 801ba58:	24013000 	.word	0x24013000

0801ba5c <_sbrk_r>:
 801ba5c:	b538      	push	{r3, r4, r5, lr}
 801ba5e:	4d06      	ldr	r5, [pc, #24]	@ (801ba78 <_sbrk_r+0x1c>)
 801ba60:	2300      	movs	r3, #0
 801ba62:	4604      	mov	r4, r0
 801ba64:	4608      	mov	r0, r1
 801ba66:	602b      	str	r3, [r5, #0]
 801ba68:	f7e6 fb30 	bl	80020cc <_sbrk>
 801ba6c:	1c43      	adds	r3, r0, #1
 801ba6e:	d102      	bne.n	801ba76 <_sbrk_r+0x1a>
 801ba70:	682b      	ldr	r3, [r5, #0]
 801ba72:	b103      	cbz	r3, 801ba76 <_sbrk_r+0x1a>
 801ba74:	6023      	str	r3, [r4, #0]
 801ba76:	bd38      	pop	{r3, r4, r5, pc}
 801ba78:	24013000 	.word	0x24013000

0801ba7c <_write_r>:
 801ba7c:	b538      	push	{r3, r4, r5, lr}
 801ba7e:	4d07      	ldr	r5, [pc, #28]	@ (801ba9c <_write_r+0x20>)
 801ba80:	4604      	mov	r4, r0
 801ba82:	4608      	mov	r0, r1
 801ba84:	4611      	mov	r1, r2
 801ba86:	2200      	movs	r2, #0
 801ba88:	602a      	str	r2, [r5, #0]
 801ba8a:	461a      	mov	r2, r3
 801ba8c:	f7e6 face 	bl	800202c <_write>
 801ba90:	1c43      	adds	r3, r0, #1
 801ba92:	d102      	bne.n	801ba9a <_write_r+0x1e>
 801ba94:	682b      	ldr	r3, [r5, #0]
 801ba96:	b103      	cbz	r3, 801ba9a <_write_r+0x1e>
 801ba98:	6023      	str	r3, [r4, #0]
 801ba9a:	bd38      	pop	{r3, r4, r5, pc}
 801ba9c:	24013000 	.word	0x24013000

0801baa0 <__errno>:
 801baa0:	4b01      	ldr	r3, [pc, #4]	@ (801baa8 <__errno+0x8>)
 801baa2:	6818      	ldr	r0, [r3, #0]
 801baa4:	4770      	bx	lr
 801baa6:	bf00      	nop
 801baa8:	240002b0 	.word	0x240002b0

0801baac <__libc_init_array>:
 801baac:	b570      	push	{r4, r5, r6, lr}
 801baae:	4d0d      	ldr	r5, [pc, #52]	@ (801bae4 <__libc_init_array+0x38>)
 801bab0:	4c0d      	ldr	r4, [pc, #52]	@ (801bae8 <__libc_init_array+0x3c>)
 801bab2:	1b64      	subs	r4, r4, r5
 801bab4:	10a4      	asrs	r4, r4, #2
 801bab6:	2600      	movs	r6, #0
 801bab8:	42a6      	cmp	r6, r4
 801baba:	d109      	bne.n	801bad0 <__libc_init_array+0x24>
 801babc:	4d0b      	ldr	r5, [pc, #44]	@ (801baec <__libc_init_array+0x40>)
 801babe:	4c0c      	ldr	r4, [pc, #48]	@ (801baf0 <__libc_init_array+0x44>)
 801bac0:	f000 fe64 	bl	801c78c <_init>
 801bac4:	1b64      	subs	r4, r4, r5
 801bac6:	10a4      	asrs	r4, r4, #2
 801bac8:	2600      	movs	r6, #0
 801baca:	42a6      	cmp	r6, r4
 801bacc:	d105      	bne.n	801bada <__libc_init_array+0x2e>
 801bace:	bd70      	pop	{r4, r5, r6, pc}
 801bad0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bad4:	4798      	blx	r3
 801bad6:	3601      	adds	r6, #1
 801bad8:	e7ee      	b.n	801bab8 <__libc_init_array+0xc>
 801bada:	f855 3b04 	ldr.w	r3, [r5], #4
 801bade:	4798      	blx	r3
 801bae0:	3601      	adds	r6, #1
 801bae2:	e7f2      	b.n	801baca <__libc_init_array+0x1e>
 801bae4:	0801d6c0 	.word	0x0801d6c0
 801bae8:	0801d6c0 	.word	0x0801d6c0
 801baec:	0801d6c0 	.word	0x0801d6c0
 801baf0:	0801d6c8 	.word	0x0801d6c8

0801baf4 <__retarget_lock_init_recursive>:
 801baf4:	4770      	bx	lr

0801baf6 <__retarget_lock_acquire_recursive>:
 801baf6:	4770      	bx	lr

0801baf8 <__retarget_lock_release_recursive>:
 801baf8:	4770      	bx	lr

0801bafa <strcpy>:
 801bafa:	4603      	mov	r3, r0
 801bafc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb00:	f803 2b01 	strb.w	r2, [r3], #1
 801bb04:	2a00      	cmp	r2, #0
 801bb06:	d1f9      	bne.n	801bafc <strcpy+0x2>
 801bb08:	4770      	bx	lr

0801bb0a <memcpy>:
 801bb0a:	440a      	add	r2, r1
 801bb0c:	4291      	cmp	r1, r2
 801bb0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801bb12:	d100      	bne.n	801bb16 <memcpy+0xc>
 801bb14:	4770      	bx	lr
 801bb16:	b510      	push	{r4, lr}
 801bb18:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb20:	4291      	cmp	r1, r2
 801bb22:	d1f9      	bne.n	801bb18 <memcpy+0xe>
 801bb24:	bd10      	pop	{r4, pc}
	...

0801bb28 <__assert_func>:
 801bb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb2a:	4614      	mov	r4, r2
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	4b09      	ldr	r3, [pc, #36]	@ (801bb54 <__assert_func+0x2c>)
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	4605      	mov	r5, r0
 801bb34:	68d8      	ldr	r0, [r3, #12]
 801bb36:	b954      	cbnz	r4, 801bb4e <__assert_func+0x26>
 801bb38:	4b07      	ldr	r3, [pc, #28]	@ (801bb58 <__assert_func+0x30>)
 801bb3a:	461c      	mov	r4, r3
 801bb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb40:	9100      	str	r1, [sp, #0]
 801bb42:	462b      	mov	r3, r5
 801bb44:	4905      	ldr	r1, [pc, #20]	@ (801bb5c <__assert_func+0x34>)
 801bb46:	f000 fd3f 	bl	801c5c8 <fiprintf>
 801bb4a:	f000 fdd3 	bl	801c6f4 <abort>
 801bb4e:	4b04      	ldr	r3, [pc, #16]	@ (801bb60 <__assert_func+0x38>)
 801bb50:	e7f4      	b.n	801bb3c <__assert_func+0x14>
 801bb52:	bf00      	nop
 801bb54:	240002b0 	.word	0x240002b0
 801bb58:	0801d681 	.word	0x0801d681
 801bb5c:	0801d653 	.word	0x0801d653
 801bb60:	0801d646 	.word	0x0801d646

0801bb64 <__env_lock>:
 801bb64:	4801      	ldr	r0, [pc, #4]	@ (801bb6c <__env_lock+0x8>)
 801bb66:	f7ff bfc6 	b.w	801baf6 <__retarget_lock_acquire_recursive>
 801bb6a:	bf00      	nop
 801bb6c:	24013004 	.word	0x24013004

0801bb70 <__env_unlock>:
 801bb70:	4801      	ldr	r0, [pc, #4]	@ (801bb78 <__env_unlock+0x8>)
 801bb72:	f7ff bfc1 	b.w	801baf8 <__retarget_lock_release_recursive>
 801bb76:	bf00      	nop
 801bb78:	24013004 	.word	0x24013004

0801bb7c <_free_r>:
 801bb7c:	b538      	push	{r3, r4, r5, lr}
 801bb7e:	4605      	mov	r5, r0
 801bb80:	2900      	cmp	r1, #0
 801bb82:	d041      	beq.n	801bc08 <_free_r+0x8c>
 801bb84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb88:	1f0c      	subs	r4, r1, #4
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	bfb8      	it	lt
 801bb8e:	18e4      	addlt	r4, r4, r3
 801bb90:	f7ff fb30 	bl	801b1f4 <__malloc_lock>
 801bb94:	4a1d      	ldr	r2, [pc, #116]	@ (801bc0c <_free_r+0x90>)
 801bb96:	6813      	ldr	r3, [r2, #0]
 801bb98:	b933      	cbnz	r3, 801bba8 <_free_r+0x2c>
 801bb9a:	6063      	str	r3, [r4, #4]
 801bb9c:	6014      	str	r4, [r2, #0]
 801bb9e:	4628      	mov	r0, r5
 801bba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bba4:	f7ff bb2c 	b.w	801b200 <__malloc_unlock>
 801bba8:	42a3      	cmp	r3, r4
 801bbaa:	d908      	bls.n	801bbbe <_free_r+0x42>
 801bbac:	6820      	ldr	r0, [r4, #0]
 801bbae:	1821      	adds	r1, r4, r0
 801bbb0:	428b      	cmp	r3, r1
 801bbb2:	bf01      	itttt	eq
 801bbb4:	6819      	ldreq	r1, [r3, #0]
 801bbb6:	685b      	ldreq	r3, [r3, #4]
 801bbb8:	1809      	addeq	r1, r1, r0
 801bbba:	6021      	streq	r1, [r4, #0]
 801bbbc:	e7ed      	b.n	801bb9a <_free_r+0x1e>
 801bbbe:	461a      	mov	r2, r3
 801bbc0:	685b      	ldr	r3, [r3, #4]
 801bbc2:	b10b      	cbz	r3, 801bbc8 <_free_r+0x4c>
 801bbc4:	42a3      	cmp	r3, r4
 801bbc6:	d9fa      	bls.n	801bbbe <_free_r+0x42>
 801bbc8:	6811      	ldr	r1, [r2, #0]
 801bbca:	1850      	adds	r0, r2, r1
 801bbcc:	42a0      	cmp	r0, r4
 801bbce:	d10b      	bne.n	801bbe8 <_free_r+0x6c>
 801bbd0:	6820      	ldr	r0, [r4, #0]
 801bbd2:	4401      	add	r1, r0
 801bbd4:	1850      	adds	r0, r2, r1
 801bbd6:	4283      	cmp	r3, r0
 801bbd8:	6011      	str	r1, [r2, #0]
 801bbda:	d1e0      	bne.n	801bb9e <_free_r+0x22>
 801bbdc:	6818      	ldr	r0, [r3, #0]
 801bbde:	685b      	ldr	r3, [r3, #4]
 801bbe0:	6053      	str	r3, [r2, #4]
 801bbe2:	4408      	add	r0, r1
 801bbe4:	6010      	str	r0, [r2, #0]
 801bbe6:	e7da      	b.n	801bb9e <_free_r+0x22>
 801bbe8:	d902      	bls.n	801bbf0 <_free_r+0x74>
 801bbea:	230c      	movs	r3, #12
 801bbec:	602b      	str	r3, [r5, #0]
 801bbee:	e7d6      	b.n	801bb9e <_free_r+0x22>
 801bbf0:	6820      	ldr	r0, [r4, #0]
 801bbf2:	1821      	adds	r1, r4, r0
 801bbf4:	428b      	cmp	r3, r1
 801bbf6:	bf04      	itt	eq
 801bbf8:	6819      	ldreq	r1, [r3, #0]
 801bbfa:	685b      	ldreq	r3, [r3, #4]
 801bbfc:	6063      	str	r3, [r4, #4]
 801bbfe:	bf04      	itt	eq
 801bc00:	1809      	addeq	r1, r1, r0
 801bc02:	6021      	streq	r1, [r4, #0]
 801bc04:	6054      	str	r4, [r2, #4]
 801bc06:	e7ca      	b.n	801bb9e <_free_r+0x22>
 801bc08:	bd38      	pop	{r3, r4, r5, pc}
 801bc0a:	bf00      	nop
 801bc0c:	24012ec0 	.word	0x24012ec0

0801bc10 <_malloc_usable_size_r>:
 801bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc14:	1f18      	subs	r0, r3, #4
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	bfbc      	itt	lt
 801bc1a:	580b      	ldrlt	r3, [r1, r0]
 801bc1c:	18c0      	addlt	r0, r0, r3
 801bc1e:	4770      	bx	lr

0801bc20 <__ssputs_r>:
 801bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc24:	688e      	ldr	r6, [r1, #8]
 801bc26:	461f      	mov	r7, r3
 801bc28:	42be      	cmp	r6, r7
 801bc2a:	680b      	ldr	r3, [r1, #0]
 801bc2c:	4682      	mov	sl, r0
 801bc2e:	460c      	mov	r4, r1
 801bc30:	4690      	mov	r8, r2
 801bc32:	d82d      	bhi.n	801bc90 <__ssputs_r+0x70>
 801bc34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bc38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bc3c:	d026      	beq.n	801bc8c <__ssputs_r+0x6c>
 801bc3e:	6965      	ldr	r5, [r4, #20]
 801bc40:	6909      	ldr	r1, [r1, #16]
 801bc42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc46:	eba3 0901 	sub.w	r9, r3, r1
 801bc4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bc4e:	1c7b      	adds	r3, r7, #1
 801bc50:	444b      	add	r3, r9
 801bc52:	106d      	asrs	r5, r5, #1
 801bc54:	429d      	cmp	r5, r3
 801bc56:	bf38      	it	cc
 801bc58:	461d      	movcc	r5, r3
 801bc5a:	0553      	lsls	r3, r2, #21
 801bc5c:	d527      	bpl.n	801bcae <__ssputs_r+0x8e>
 801bc5e:	4629      	mov	r1, r5
 801bc60:	f7ff fa48 	bl	801b0f4 <_malloc_r>
 801bc64:	4606      	mov	r6, r0
 801bc66:	b360      	cbz	r0, 801bcc2 <__ssputs_r+0xa2>
 801bc68:	6921      	ldr	r1, [r4, #16]
 801bc6a:	464a      	mov	r2, r9
 801bc6c:	f7ff ff4d 	bl	801bb0a <memcpy>
 801bc70:	89a3      	ldrh	r3, [r4, #12]
 801bc72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bc76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bc7a:	81a3      	strh	r3, [r4, #12]
 801bc7c:	6126      	str	r6, [r4, #16]
 801bc7e:	6165      	str	r5, [r4, #20]
 801bc80:	444e      	add	r6, r9
 801bc82:	eba5 0509 	sub.w	r5, r5, r9
 801bc86:	6026      	str	r6, [r4, #0]
 801bc88:	60a5      	str	r5, [r4, #8]
 801bc8a:	463e      	mov	r6, r7
 801bc8c:	42be      	cmp	r6, r7
 801bc8e:	d900      	bls.n	801bc92 <__ssputs_r+0x72>
 801bc90:	463e      	mov	r6, r7
 801bc92:	6820      	ldr	r0, [r4, #0]
 801bc94:	4632      	mov	r2, r6
 801bc96:	4641      	mov	r1, r8
 801bc98:	f7ff fe54 	bl	801b944 <memmove>
 801bc9c:	68a3      	ldr	r3, [r4, #8]
 801bc9e:	1b9b      	subs	r3, r3, r6
 801bca0:	60a3      	str	r3, [r4, #8]
 801bca2:	6823      	ldr	r3, [r4, #0]
 801bca4:	4433      	add	r3, r6
 801bca6:	6023      	str	r3, [r4, #0]
 801bca8:	2000      	movs	r0, #0
 801bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcae:	462a      	mov	r2, r5
 801bcb0:	f7ff fb20 	bl	801b2f4 <_realloc_r>
 801bcb4:	4606      	mov	r6, r0
 801bcb6:	2800      	cmp	r0, #0
 801bcb8:	d1e0      	bne.n	801bc7c <__ssputs_r+0x5c>
 801bcba:	6921      	ldr	r1, [r4, #16]
 801bcbc:	4650      	mov	r0, sl
 801bcbe:	f7ff ff5d 	bl	801bb7c <_free_r>
 801bcc2:	230c      	movs	r3, #12
 801bcc4:	f8ca 3000 	str.w	r3, [sl]
 801bcc8:	89a3      	ldrh	r3, [r4, #12]
 801bcca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bcce:	81a3      	strh	r3, [r4, #12]
 801bcd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bcd4:	e7e9      	b.n	801bcaa <__ssputs_r+0x8a>
	...

0801bcd8 <_svfiprintf_r>:
 801bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcdc:	4698      	mov	r8, r3
 801bcde:	898b      	ldrh	r3, [r1, #12]
 801bce0:	061b      	lsls	r3, r3, #24
 801bce2:	b09d      	sub	sp, #116	@ 0x74
 801bce4:	4607      	mov	r7, r0
 801bce6:	460d      	mov	r5, r1
 801bce8:	4614      	mov	r4, r2
 801bcea:	d510      	bpl.n	801bd0e <_svfiprintf_r+0x36>
 801bcec:	690b      	ldr	r3, [r1, #16]
 801bcee:	b973      	cbnz	r3, 801bd0e <_svfiprintf_r+0x36>
 801bcf0:	2140      	movs	r1, #64	@ 0x40
 801bcf2:	f7ff f9ff 	bl	801b0f4 <_malloc_r>
 801bcf6:	6028      	str	r0, [r5, #0]
 801bcf8:	6128      	str	r0, [r5, #16]
 801bcfa:	b930      	cbnz	r0, 801bd0a <_svfiprintf_r+0x32>
 801bcfc:	230c      	movs	r3, #12
 801bcfe:	603b      	str	r3, [r7, #0]
 801bd00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd04:	b01d      	add	sp, #116	@ 0x74
 801bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd0a:	2340      	movs	r3, #64	@ 0x40
 801bd0c:	616b      	str	r3, [r5, #20]
 801bd0e:	2300      	movs	r3, #0
 801bd10:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd12:	2320      	movs	r3, #32
 801bd14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bd18:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd1c:	2330      	movs	r3, #48	@ 0x30
 801bd1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bebc <_svfiprintf_r+0x1e4>
 801bd22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bd26:	f04f 0901 	mov.w	r9, #1
 801bd2a:	4623      	mov	r3, r4
 801bd2c:	469a      	mov	sl, r3
 801bd2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd32:	b10a      	cbz	r2, 801bd38 <_svfiprintf_r+0x60>
 801bd34:	2a25      	cmp	r2, #37	@ 0x25
 801bd36:	d1f9      	bne.n	801bd2c <_svfiprintf_r+0x54>
 801bd38:	ebba 0b04 	subs.w	fp, sl, r4
 801bd3c:	d00b      	beq.n	801bd56 <_svfiprintf_r+0x7e>
 801bd3e:	465b      	mov	r3, fp
 801bd40:	4622      	mov	r2, r4
 801bd42:	4629      	mov	r1, r5
 801bd44:	4638      	mov	r0, r7
 801bd46:	f7ff ff6b 	bl	801bc20 <__ssputs_r>
 801bd4a:	3001      	adds	r0, #1
 801bd4c:	f000 80a7 	beq.w	801be9e <_svfiprintf_r+0x1c6>
 801bd50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd52:	445a      	add	r2, fp
 801bd54:	9209      	str	r2, [sp, #36]	@ 0x24
 801bd56:	f89a 3000 	ldrb.w	r3, [sl]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	f000 809f 	beq.w	801be9e <_svfiprintf_r+0x1c6>
 801bd60:	2300      	movs	r3, #0
 801bd62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bd66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd6a:	f10a 0a01 	add.w	sl, sl, #1
 801bd6e:	9304      	str	r3, [sp, #16]
 801bd70:	9307      	str	r3, [sp, #28]
 801bd72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bd76:	931a      	str	r3, [sp, #104]	@ 0x68
 801bd78:	4654      	mov	r4, sl
 801bd7a:	2205      	movs	r2, #5
 801bd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd80:	484e      	ldr	r0, [pc, #312]	@ (801bebc <_svfiprintf_r+0x1e4>)
 801bd82:	f7e4 fac5 	bl	8000310 <memchr>
 801bd86:	9a04      	ldr	r2, [sp, #16]
 801bd88:	b9d8      	cbnz	r0, 801bdc2 <_svfiprintf_r+0xea>
 801bd8a:	06d0      	lsls	r0, r2, #27
 801bd8c:	bf44      	itt	mi
 801bd8e:	2320      	movmi	r3, #32
 801bd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bd94:	0711      	lsls	r1, r2, #28
 801bd96:	bf44      	itt	mi
 801bd98:	232b      	movmi	r3, #43	@ 0x2b
 801bd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bd9e:	f89a 3000 	ldrb.w	r3, [sl]
 801bda2:	2b2a      	cmp	r3, #42	@ 0x2a
 801bda4:	d015      	beq.n	801bdd2 <_svfiprintf_r+0xfa>
 801bda6:	9a07      	ldr	r2, [sp, #28]
 801bda8:	4654      	mov	r4, sl
 801bdaa:	2000      	movs	r0, #0
 801bdac:	f04f 0c0a 	mov.w	ip, #10
 801bdb0:	4621      	mov	r1, r4
 801bdb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdb6:	3b30      	subs	r3, #48	@ 0x30
 801bdb8:	2b09      	cmp	r3, #9
 801bdba:	d94b      	bls.n	801be54 <_svfiprintf_r+0x17c>
 801bdbc:	b1b0      	cbz	r0, 801bdec <_svfiprintf_r+0x114>
 801bdbe:	9207      	str	r2, [sp, #28]
 801bdc0:	e014      	b.n	801bdec <_svfiprintf_r+0x114>
 801bdc2:	eba0 0308 	sub.w	r3, r0, r8
 801bdc6:	fa09 f303 	lsl.w	r3, r9, r3
 801bdca:	4313      	orrs	r3, r2
 801bdcc:	9304      	str	r3, [sp, #16]
 801bdce:	46a2      	mov	sl, r4
 801bdd0:	e7d2      	b.n	801bd78 <_svfiprintf_r+0xa0>
 801bdd2:	9b03      	ldr	r3, [sp, #12]
 801bdd4:	1d19      	adds	r1, r3, #4
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	9103      	str	r1, [sp, #12]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	bfbb      	ittet	lt
 801bdde:	425b      	neglt	r3, r3
 801bde0:	f042 0202 	orrlt.w	r2, r2, #2
 801bde4:	9307      	strge	r3, [sp, #28]
 801bde6:	9307      	strlt	r3, [sp, #28]
 801bde8:	bfb8      	it	lt
 801bdea:	9204      	strlt	r2, [sp, #16]
 801bdec:	7823      	ldrb	r3, [r4, #0]
 801bdee:	2b2e      	cmp	r3, #46	@ 0x2e
 801bdf0:	d10a      	bne.n	801be08 <_svfiprintf_r+0x130>
 801bdf2:	7863      	ldrb	r3, [r4, #1]
 801bdf4:	2b2a      	cmp	r3, #42	@ 0x2a
 801bdf6:	d132      	bne.n	801be5e <_svfiprintf_r+0x186>
 801bdf8:	9b03      	ldr	r3, [sp, #12]
 801bdfa:	1d1a      	adds	r2, r3, #4
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	9203      	str	r2, [sp, #12]
 801be00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801be04:	3402      	adds	r4, #2
 801be06:	9305      	str	r3, [sp, #20]
 801be08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801becc <_svfiprintf_r+0x1f4>
 801be0c:	7821      	ldrb	r1, [r4, #0]
 801be0e:	2203      	movs	r2, #3
 801be10:	4650      	mov	r0, sl
 801be12:	f7e4 fa7d 	bl	8000310 <memchr>
 801be16:	b138      	cbz	r0, 801be28 <_svfiprintf_r+0x150>
 801be18:	9b04      	ldr	r3, [sp, #16]
 801be1a:	eba0 000a 	sub.w	r0, r0, sl
 801be1e:	2240      	movs	r2, #64	@ 0x40
 801be20:	4082      	lsls	r2, r0
 801be22:	4313      	orrs	r3, r2
 801be24:	3401      	adds	r4, #1
 801be26:	9304      	str	r3, [sp, #16]
 801be28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be2c:	4824      	ldr	r0, [pc, #144]	@ (801bec0 <_svfiprintf_r+0x1e8>)
 801be2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801be32:	2206      	movs	r2, #6
 801be34:	f7e4 fa6c 	bl	8000310 <memchr>
 801be38:	2800      	cmp	r0, #0
 801be3a:	d036      	beq.n	801beaa <_svfiprintf_r+0x1d2>
 801be3c:	4b21      	ldr	r3, [pc, #132]	@ (801bec4 <_svfiprintf_r+0x1ec>)
 801be3e:	bb1b      	cbnz	r3, 801be88 <_svfiprintf_r+0x1b0>
 801be40:	9b03      	ldr	r3, [sp, #12]
 801be42:	3307      	adds	r3, #7
 801be44:	f023 0307 	bic.w	r3, r3, #7
 801be48:	3308      	adds	r3, #8
 801be4a:	9303      	str	r3, [sp, #12]
 801be4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be4e:	4433      	add	r3, r6
 801be50:	9309      	str	r3, [sp, #36]	@ 0x24
 801be52:	e76a      	b.n	801bd2a <_svfiprintf_r+0x52>
 801be54:	fb0c 3202 	mla	r2, ip, r2, r3
 801be58:	460c      	mov	r4, r1
 801be5a:	2001      	movs	r0, #1
 801be5c:	e7a8      	b.n	801bdb0 <_svfiprintf_r+0xd8>
 801be5e:	2300      	movs	r3, #0
 801be60:	3401      	adds	r4, #1
 801be62:	9305      	str	r3, [sp, #20]
 801be64:	4619      	mov	r1, r3
 801be66:	f04f 0c0a 	mov.w	ip, #10
 801be6a:	4620      	mov	r0, r4
 801be6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be70:	3a30      	subs	r2, #48	@ 0x30
 801be72:	2a09      	cmp	r2, #9
 801be74:	d903      	bls.n	801be7e <_svfiprintf_r+0x1a6>
 801be76:	2b00      	cmp	r3, #0
 801be78:	d0c6      	beq.n	801be08 <_svfiprintf_r+0x130>
 801be7a:	9105      	str	r1, [sp, #20]
 801be7c:	e7c4      	b.n	801be08 <_svfiprintf_r+0x130>
 801be7e:	fb0c 2101 	mla	r1, ip, r1, r2
 801be82:	4604      	mov	r4, r0
 801be84:	2301      	movs	r3, #1
 801be86:	e7f0      	b.n	801be6a <_svfiprintf_r+0x192>
 801be88:	ab03      	add	r3, sp, #12
 801be8a:	9300      	str	r3, [sp, #0]
 801be8c:	462a      	mov	r2, r5
 801be8e:	4b0e      	ldr	r3, [pc, #56]	@ (801bec8 <_svfiprintf_r+0x1f0>)
 801be90:	a904      	add	r1, sp, #16
 801be92:	4638      	mov	r0, r7
 801be94:	f3af 8000 	nop.w
 801be98:	1c42      	adds	r2, r0, #1
 801be9a:	4606      	mov	r6, r0
 801be9c:	d1d6      	bne.n	801be4c <_svfiprintf_r+0x174>
 801be9e:	89ab      	ldrh	r3, [r5, #12]
 801bea0:	065b      	lsls	r3, r3, #25
 801bea2:	f53f af2d 	bmi.w	801bd00 <_svfiprintf_r+0x28>
 801bea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bea8:	e72c      	b.n	801bd04 <_svfiprintf_r+0x2c>
 801beaa:	ab03      	add	r3, sp, #12
 801beac:	9300      	str	r3, [sp, #0]
 801beae:	462a      	mov	r2, r5
 801beb0:	4b05      	ldr	r3, [pc, #20]	@ (801bec8 <_svfiprintf_r+0x1f0>)
 801beb2:	a904      	add	r1, sp, #16
 801beb4:	4638      	mov	r0, r7
 801beb6:	f000 f9bb 	bl	801c230 <_printf_i>
 801beba:	e7ed      	b.n	801be98 <_svfiprintf_r+0x1c0>
 801bebc:	0801d682 	.word	0x0801d682
 801bec0:	0801d68c 	.word	0x0801d68c
 801bec4:	00000000 	.word	0x00000000
 801bec8:	0801bc21 	.word	0x0801bc21
 801becc:	0801d688 	.word	0x0801d688

0801bed0 <__sfputc_r>:
 801bed0:	6893      	ldr	r3, [r2, #8]
 801bed2:	3b01      	subs	r3, #1
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	b410      	push	{r4}
 801bed8:	6093      	str	r3, [r2, #8]
 801beda:	da08      	bge.n	801beee <__sfputc_r+0x1e>
 801bedc:	6994      	ldr	r4, [r2, #24]
 801bede:	42a3      	cmp	r3, r4
 801bee0:	db01      	blt.n	801bee6 <__sfputc_r+0x16>
 801bee2:	290a      	cmp	r1, #10
 801bee4:	d103      	bne.n	801beee <__sfputc_r+0x1e>
 801bee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801beea:	f7ff bc87 	b.w	801b7fc <__swbuf_r>
 801beee:	6813      	ldr	r3, [r2, #0]
 801bef0:	1c58      	adds	r0, r3, #1
 801bef2:	6010      	str	r0, [r2, #0]
 801bef4:	7019      	strb	r1, [r3, #0]
 801bef6:	4608      	mov	r0, r1
 801bef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801befc:	4770      	bx	lr

0801befe <__sfputs_r>:
 801befe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf00:	4606      	mov	r6, r0
 801bf02:	460f      	mov	r7, r1
 801bf04:	4614      	mov	r4, r2
 801bf06:	18d5      	adds	r5, r2, r3
 801bf08:	42ac      	cmp	r4, r5
 801bf0a:	d101      	bne.n	801bf10 <__sfputs_r+0x12>
 801bf0c:	2000      	movs	r0, #0
 801bf0e:	e007      	b.n	801bf20 <__sfputs_r+0x22>
 801bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf14:	463a      	mov	r2, r7
 801bf16:	4630      	mov	r0, r6
 801bf18:	f7ff ffda 	bl	801bed0 <__sfputc_r>
 801bf1c:	1c43      	adds	r3, r0, #1
 801bf1e:	d1f3      	bne.n	801bf08 <__sfputs_r+0xa>
 801bf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bf24 <_vfiprintf_r>:
 801bf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf28:	460d      	mov	r5, r1
 801bf2a:	b09d      	sub	sp, #116	@ 0x74
 801bf2c:	4614      	mov	r4, r2
 801bf2e:	4698      	mov	r8, r3
 801bf30:	4606      	mov	r6, r0
 801bf32:	b118      	cbz	r0, 801bf3c <_vfiprintf_r+0x18>
 801bf34:	6a03      	ldr	r3, [r0, #32]
 801bf36:	b90b      	cbnz	r3, 801bf3c <_vfiprintf_r+0x18>
 801bf38:	f7ff fb0e 	bl	801b558 <__sinit>
 801bf3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bf3e:	07d9      	lsls	r1, r3, #31
 801bf40:	d405      	bmi.n	801bf4e <_vfiprintf_r+0x2a>
 801bf42:	89ab      	ldrh	r3, [r5, #12]
 801bf44:	059a      	lsls	r2, r3, #22
 801bf46:	d402      	bmi.n	801bf4e <_vfiprintf_r+0x2a>
 801bf48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bf4a:	f7ff fdd4 	bl	801baf6 <__retarget_lock_acquire_recursive>
 801bf4e:	89ab      	ldrh	r3, [r5, #12]
 801bf50:	071b      	lsls	r3, r3, #28
 801bf52:	d501      	bpl.n	801bf58 <_vfiprintf_r+0x34>
 801bf54:	692b      	ldr	r3, [r5, #16]
 801bf56:	b99b      	cbnz	r3, 801bf80 <_vfiprintf_r+0x5c>
 801bf58:	4629      	mov	r1, r5
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	f7ff fc8c 	bl	801b878 <__swsetup_r>
 801bf60:	b170      	cbz	r0, 801bf80 <_vfiprintf_r+0x5c>
 801bf62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bf64:	07dc      	lsls	r4, r3, #31
 801bf66:	d504      	bpl.n	801bf72 <_vfiprintf_r+0x4e>
 801bf68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bf6c:	b01d      	add	sp, #116	@ 0x74
 801bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf72:	89ab      	ldrh	r3, [r5, #12]
 801bf74:	0598      	lsls	r0, r3, #22
 801bf76:	d4f7      	bmi.n	801bf68 <_vfiprintf_r+0x44>
 801bf78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bf7a:	f7ff fdbd 	bl	801baf8 <__retarget_lock_release_recursive>
 801bf7e:	e7f3      	b.n	801bf68 <_vfiprintf_r+0x44>
 801bf80:	2300      	movs	r3, #0
 801bf82:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf84:	2320      	movs	r3, #32
 801bf86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bf8a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf8e:	2330      	movs	r3, #48	@ 0x30
 801bf90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c140 <_vfiprintf_r+0x21c>
 801bf94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bf98:	f04f 0901 	mov.w	r9, #1
 801bf9c:	4623      	mov	r3, r4
 801bf9e:	469a      	mov	sl, r3
 801bfa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfa4:	b10a      	cbz	r2, 801bfaa <_vfiprintf_r+0x86>
 801bfa6:	2a25      	cmp	r2, #37	@ 0x25
 801bfa8:	d1f9      	bne.n	801bf9e <_vfiprintf_r+0x7a>
 801bfaa:	ebba 0b04 	subs.w	fp, sl, r4
 801bfae:	d00b      	beq.n	801bfc8 <_vfiprintf_r+0xa4>
 801bfb0:	465b      	mov	r3, fp
 801bfb2:	4622      	mov	r2, r4
 801bfb4:	4629      	mov	r1, r5
 801bfb6:	4630      	mov	r0, r6
 801bfb8:	f7ff ffa1 	bl	801befe <__sfputs_r>
 801bfbc:	3001      	adds	r0, #1
 801bfbe:	f000 80a7 	beq.w	801c110 <_vfiprintf_r+0x1ec>
 801bfc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bfc4:	445a      	add	r2, fp
 801bfc6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bfc8:	f89a 3000 	ldrb.w	r3, [sl]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	f000 809f 	beq.w	801c110 <_vfiprintf_r+0x1ec>
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bfd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bfdc:	f10a 0a01 	add.w	sl, sl, #1
 801bfe0:	9304      	str	r3, [sp, #16]
 801bfe2:	9307      	str	r3, [sp, #28]
 801bfe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bfe8:	931a      	str	r3, [sp, #104]	@ 0x68
 801bfea:	4654      	mov	r4, sl
 801bfec:	2205      	movs	r2, #5
 801bfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bff2:	4853      	ldr	r0, [pc, #332]	@ (801c140 <_vfiprintf_r+0x21c>)
 801bff4:	f7e4 f98c 	bl	8000310 <memchr>
 801bff8:	9a04      	ldr	r2, [sp, #16]
 801bffa:	b9d8      	cbnz	r0, 801c034 <_vfiprintf_r+0x110>
 801bffc:	06d1      	lsls	r1, r2, #27
 801bffe:	bf44      	itt	mi
 801c000:	2320      	movmi	r3, #32
 801c002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c006:	0713      	lsls	r3, r2, #28
 801c008:	bf44      	itt	mi
 801c00a:	232b      	movmi	r3, #43	@ 0x2b
 801c00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c010:	f89a 3000 	ldrb.w	r3, [sl]
 801c014:	2b2a      	cmp	r3, #42	@ 0x2a
 801c016:	d015      	beq.n	801c044 <_vfiprintf_r+0x120>
 801c018:	9a07      	ldr	r2, [sp, #28]
 801c01a:	4654      	mov	r4, sl
 801c01c:	2000      	movs	r0, #0
 801c01e:	f04f 0c0a 	mov.w	ip, #10
 801c022:	4621      	mov	r1, r4
 801c024:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c028:	3b30      	subs	r3, #48	@ 0x30
 801c02a:	2b09      	cmp	r3, #9
 801c02c:	d94b      	bls.n	801c0c6 <_vfiprintf_r+0x1a2>
 801c02e:	b1b0      	cbz	r0, 801c05e <_vfiprintf_r+0x13a>
 801c030:	9207      	str	r2, [sp, #28]
 801c032:	e014      	b.n	801c05e <_vfiprintf_r+0x13a>
 801c034:	eba0 0308 	sub.w	r3, r0, r8
 801c038:	fa09 f303 	lsl.w	r3, r9, r3
 801c03c:	4313      	orrs	r3, r2
 801c03e:	9304      	str	r3, [sp, #16]
 801c040:	46a2      	mov	sl, r4
 801c042:	e7d2      	b.n	801bfea <_vfiprintf_r+0xc6>
 801c044:	9b03      	ldr	r3, [sp, #12]
 801c046:	1d19      	adds	r1, r3, #4
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	9103      	str	r1, [sp, #12]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	bfbb      	ittet	lt
 801c050:	425b      	neglt	r3, r3
 801c052:	f042 0202 	orrlt.w	r2, r2, #2
 801c056:	9307      	strge	r3, [sp, #28]
 801c058:	9307      	strlt	r3, [sp, #28]
 801c05a:	bfb8      	it	lt
 801c05c:	9204      	strlt	r2, [sp, #16]
 801c05e:	7823      	ldrb	r3, [r4, #0]
 801c060:	2b2e      	cmp	r3, #46	@ 0x2e
 801c062:	d10a      	bne.n	801c07a <_vfiprintf_r+0x156>
 801c064:	7863      	ldrb	r3, [r4, #1]
 801c066:	2b2a      	cmp	r3, #42	@ 0x2a
 801c068:	d132      	bne.n	801c0d0 <_vfiprintf_r+0x1ac>
 801c06a:	9b03      	ldr	r3, [sp, #12]
 801c06c:	1d1a      	adds	r2, r3, #4
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	9203      	str	r2, [sp, #12]
 801c072:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c076:	3402      	adds	r4, #2
 801c078:	9305      	str	r3, [sp, #20]
 801c07a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c150 <_vfiprintf_r+0x22c>
 801c07e:	7821      	ldrb	r1, [r4, #0]
 801c080:	2203      	movs	r2, #3
 801c082:	4650      	mov	r0, sl
 801c084:	f7e4 f944 	bl	8000310 <memchr>
 801c088:	b138      	cbz	r0, 801c09a <_vfiprintf_r+0x176>
 801c08a:	9b04      	ldr	r3, [sp, #16]
 801c08c:	eba0 000a 	sub.w	r0, r0, sl
 801c090:	2240      	movs	r2, #64	@ 0x40
 801c092:	4082      	lsls	r2, r0
 801c094:	4313      	orrs	r3, r2
 801c096:	3401      	adds	r4, #1
 801c098:	9304      	str	r3, [sp, #16]
 801c09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c09e:	4829      	ldr	r0, [pc, #164]	@ (801c144 <_vfiprintf_r+0x220>)
 801c0a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c0a4:	2206      	movs	r2, #6
 801c0a6:	f7e4 f933 	bl	8000310 <memchr>
 801c0aa:	2800      	cmp	r0, #0
 801c0ac:	d03f      	beq.n	801c12e <_vfiprintf_r+0x20a>
 801c0ae:	4b26      	ldr	r3, [pc, #152]	@ (801c148 <_vfiprintf_r+0x224>)
 801c0b0:	bb1b      	cbnz	r3, 801c0fa <_vfiprintf_r+0x1d6>
 801c0b2:	9b03      	ldr	r3, [sp, #12]
 801c0b4:	3307      	adds	r3, #7
 801c0b6:	f023 0307 	bic.w	r3, r3, #7
 801c0ba:	3308      	adds	r3, #8
 801c0bc:	9303      	str	r3, [sp, #12]
 801c0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0c0:	443b      	add	r3, r7
 801c0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0c4:	e76a      	b.n	801bf9c <_vfiprintf_r+0x78>
 801c0c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c0ca:	460c      	mov	r4, r1
 801c0cc:	2001      	movs	r0, #1
 801c0ce:	e7a8      	b.n	801c022 <_vfiprintf_r+0xfe>
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	3401      	adds	r4, #1
 801c0d4:	9305      	str	r3, [sp, #20]
 801c0d6:	4619      	mov	r1, r3
 801c0d8:	f04f 0c0a 	mov.w	ip, #10
 801c0dc:	4620      	mov	r0, r4
 801c0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0e2:	3a30      	subs	r2, #48	@ 0x30
 801c0e4:	2a09      	cmp	r2, #9
 801c0e6:	d903      	bls.n	801c0f0 <_vfiprintf_r+0x1cc>
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d0c6      	beq.n	801c07a <_vfiprintf_r+0x156>
 801c0ec:	9105      	str	r1, [sp, #20]
 801c0ee:	e7c4      	b.n	801c07a <_vfiprintf_r+0x156>
 801c0f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c0f4:	4604      	mov	r4, r0
 801c0f6:	2301      	movs	r3, #1
 801c0f8:	e7f0      	b.n	801c0dc <_vfiprintf_r+0x1b8>
 801c0fa:	ab03      	add	r3, sp, #12
 801c0fc:	9300      	str	r3, [sp, #0]
 801c0fe:	462a      	mov	r2, r5
 801c100:	4b12      	ldr	r3, [pc, #72]	@ (801c14c <_vfiprintf_r+0x228>)
 801c102:	a904      	add	r1, sp, #16
 801c104:	4630      	mov	r0, r6
 801c106:	f3af 8000 	nop.w
 801c10a:	4607      	mov	r7, r0
 801c10c:	1c78      	adds	r0, r7, #1
 801c10e:	d1d6      	bne.n	801c0be <_vfiprintf_r+0x19a>
 801c110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c112:	07d9      	lsls	r1, r3, #31
 801c114:	d405      	bmi.n	801c122 <_vfiprintf_r+0x1fe>
 801c116:	89ab      	ldrh	r3, [r5, #12]
 801c118:	059a      	lsls	r2, r3, #22
 801c11a:	d402      	bmi.n	801c122 <_vfiprintf_r+0x1fe>
 801c11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c11e:	f7ff fceb 	bl	801baf8 <__retarget_lock_release_recursive>
 801c122:	89ab      	ldrh	r3, [r5, #12]
 801c124:	065b      	lsls	r3, r3, #25
 801c126:	f53f af1f 	bmi.w	801bf68 <_vfiprintf_r+0x44>
 801c12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c12c:	e71e      	b.n	801bf6c <_vfiprintf_r+0x48>
 801c12e:	ab03      	add	r3, sp, #12
 801c130:	9300      	str	r3, [sp, #0]
 801c132:	462a      	mov	r2, r5
 801c134:	4b05      	ldr	r3, [pc, #20]	@ (801c14c <_vfiprintf_r+0x228>)
 801c136:	a904      	add	r1, sp, #16
 801c138:	4630      	mov	r0, r6
 801c13a:	f000 f879 	bl	801c230 <_printf_i>
 801c13e:	e7e4      	b.n	801c10a <_vfiprintf_r+0x1e6>
 801c140:	0801d682 	.word	0x0801d682
 801c144:	0801d68c 	.word	0x0801d68c
 801c148:	00000000 	.word	0x00000000
 801c14c:	0801beff 	.word	0x0801beff
 801c150:	0801d688 	.word	0x0801d688

0801c154 <_printf_common>:
 801c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c158:	4616      	mov	r6, r2
 801c15a:	4698      	mov	r8, r3
 801c15c:	688a      	ldr	r2, [r1, #8]
 801c15e:	690b      	ldr	r3, [r1, #16]
 801c160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c164:	4293      	cmp	r3, r2
 801c166:	bfb8      	it	lt
 801c168:	4613      	movlt	r3, r2
 801c16a:	6033      	str	r3, [r6, #0]
 801c16c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c170:	4607      	mov	r7, r0
 801c172:	460c      	mov	r4, r1
 801c174:	b10a      	cbz	r2, 801c17a <_printf_common+0x26>
 801c176:	3301      	adds	r3, #1
 801c178:	6033      	str	r3, [r6, #0]
 801c17a:	6823      	ldr	r3, [r4, #0]
 801c17c:	0699      	lsls	r1, r3, #26
 801c17e:	bf42      	ittt	mi
 801c180:	6833      	ldrmi	r3, [r6, #0]
 801c182:	3302      	addmi	r3, #2
 801c184:	6033      	strmi	r3, [r6, #0]
 801c186:	6825      	ldr	r5, [r4, #0]
 801c188:	f015 0506 	ands.w	r5, r5, #6
 801c18c:	d106      	bne.n	801c19c <_printf_common+0x48>
 801c18e:	f104 0a19 	add.w	sl, r4, #25
 801c192:	68e3      	ldr	r3, [r4, #12]
 801c194:	6832      	ldr	r2, [r6, #0]
 801c196:	1a9b      	subs	r3, r3, r2
 801c198:	42ab      	cmp	r3, r5
 801c19a:	dc26      	bgt.n	801c1ea <_printf_common+0x96>
 801c19c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c1a0:	6822      	ldr	r2, [r4, #0]
 801c1a2:	3b00      	subs	r3, #0
 801c1a4:	bf18      	it	ne
 801c1a6:	2301      	movne	r3, #1
 801c1a8:	0692      	lsls	r2, r2, #26
 801c1aa:	d42b      	bmi.n	801c204 <_printf_common+0xb0>
 801c1ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c1b0:	4641      	mov	r1, r8
 801c1b2:	4638      	mov	r0, r7
 801c1b4:	47c8      	blx	r9
 801c1b6:	3001      	adds	r0, #1
 801c1b8:	d01e      	beq.n	801c1f8 <_printf_common+0xa4>
 801c1ba:	6823      	ldr	r3, [r4, #0]
 801c1bc:	6922      	ldr	r2, [r4, #16]
 801c1be:	f003 0306 	and.w	r3, r3, #6
 801c1c2:	2b04      	cmp	r3, #4
 801c1c4:	bf02      	ittt	eq
 801c1c6:	68e5      	ldreq	r5, [r4, #12]
 801c1c8:	6833      	ldreq	r3, [r6, #0]
 801c1ca:	1aed      	subeq	r5, r5, r3
 801c1cc:	68a3      	ldr	r3, [r4, #8]
 801c1ce:	bf0c      	ite	eq
 801c1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c1d4:	2500      	movne	r5, #0
 801c1d6:	4293      	cmp	r3, r2
 801c1d8:	bfc4      	itt	gt
 801c1da:	1a9b      	subgt	r3, r3, r2
 801c1dc:	18ed      	addgt	r5, r5, r3
 801c1de:	2600      	movs	r6, #0
 801c1e0:	341a      	adds	r4, #26
 801c1e2:	42b5      	cmp	r5, r6
 801c1e4:	d11a      	bne.n	801c21c <_printf_common+0xc8>
 801c1e6:	2000      	movs	r0, #0
 801c1e8:	e008      	b.n	801c1fc <_printf_common+0xa8>
 801c1ea:	2301      	movs	r3, #1
 801c1ec:	4652      	mov	r2, sl
 801c1ee:	4641      	mov	r1, r8
 801c1f0:	4638      	mov	r0, r7
 801c1f2:	47c8      	blx	r9
 801c1f4:	3001      	adds	r0, #1
 801c1f6:	d103      	bne.n	801c200 <_printf_common+0xac>
 801c1f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c200:	3501      	adds	r5, #1
 801c202:	e7c6      	b.n	801c192 <_printf_common+0x3e>
 801c204:	18e1      	adds	r1, r4, r3
 801c206:	1c5a      	adds	r2, r3, #1
 801c208:	2030      	movs	r0, #48	@ 0x30
 801c20a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c20e:	4422      	add	r2, r4
 801c210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c218:	3302      	adds	r3, #2
 801c21a:	e7c7      	b.n	801c1ac <_printf_common+0x58>
 801c21c:	2301      	movs	r3, #1
 801c21e:	4622      	mov	r2, r4
 801c220:	4641      	mov	r1, r8
 801c222:	4638      	mov	r0, r7
 801c224:	47c8      	blx	r9
 801c226:	3001      	adds	r0, #1
 801c228:	d0e6      	beq.n	801c1f8 <_printf_common+0xa4>
 801c22a:	3601      	adds	r6, #1
 801c22c:	e7d9      	b.n	801c1e2 <_printf_common+0x8e>
	...

0801c230 <_printf_i>:
 801c230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c234:	7e0f      	ldrb	r7, [r1, #24]
 801c236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c238:	2f78      	cmp	r7, #120	@ 0x78
 801c23a:	4691      	mov	r9, r2
 801c23c:	4680      	mov	r8, r0
 801c23e:	460c      	mov	r4, r1
 801c240:	469a      	mov	sl, r3
 801c242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c246:	d807      	bhi.n	801c258 <_printf_i+0x28>
 801c248:	2f62      	cmp	r7, #98	@ 0x62
 801c24a:	d80a      	bhi.n	801c262 <_printf_i+0x32>
 801c24c:	2f00      	cmp	r7, #0
 801c24e:	f000 80d2 	beq.w	801c3f6 <_printf_i+0x1c6>
 801c252:	2f58      	cmp	r7, #88	@ 0x58
 801c254:	f000 80b9 	beq.w	801c3ca <_printf_i+0x19a>
 801c258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c25c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c260:	e03a      	b.n	801c2d8 <_printf_i+0xa8>
 801c262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c266:	2b15      	cmp	r3, #21
 801c268:	d8f6      	bhi.n	801c258 <_printf_i+0x28>
 801c26a:	a101      	add	r1, pc, #4	@ (adr r1, 801c270 <_printf_i+0x40>)
 801c26c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c270:	0801c2c9 	.word	0x0801c2c9
 801c274:	0801c2dd 	.word	0x0801c2dd
 801c278:	0801c259 	.word	0x0801c259
 801c27c:	0801c259 	.word	0x0801c259
 801c280:	0801c259 	.word	0x0801c259
 801c284:	0801c259 	.word	0x0801c259
 801c288:	0801c2dd 	.word	0x0801c2dd
 801c28c:	0801c259 	.word	0x0801c259
 801c290:	0801c259 	.word	0x0801c259
 801c294:	0801c259 	.word	0x0801c259
 801c298:	0801c259 	.word	0x0801c259
 801c29c:	0801c3dd 	.word	0x0801c3dd
 801c2a0:	0801c307 	.word	0x0801c307
 801c2a4:	0801c397 	.word	0x0801c397
 801c2a8:	0801c259 	.word	0x0801c259
 801c2ac:	0801c259 	.word	0x0801c259
 801c2b0:	0801c3ff 	.word	0x0801c3ff
 801c2b4:	0801c259 	.word	0x0801c259
 801c2b8:	0801c307 	.word	0x0801c307
 801c2bc:	0801c259 	.word	0x0801c259
 801c2c0:	0801c259 	.word	0x0801c259
 801c2c4:	0801c39f 	.word	0x0801c39f
 801c2c8:	6833      	ldr	r3, [r6, #0]
 801c2ca:	1d1a      	adds	r2, r3, #4
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	6032      	str	r2, [r6, #0]
 801c2d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c2d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c2d8:	2301      	movs	r3, #1
 801c2da:	e09d      	b.n	801c418 <_printf_i+0x1e8>
 801c2dc:	6833      	ldr	r3, [r6, #0]
 801c2de:	6820      	ldr	r0, [r4, #0]
 801c2e0:	1d19      	adds	r1, r3, #4
 801c2e2:	6031      	str	r1, [r6, #0]
 801c2e4:	0606      	lsls	r6, r0, #24
 801c2e6:	d501      	bpl.n	801c2ec <_printf_i+0xbc>
 801c2e8:	681d      	ldr	r5, [r3, #0]
 801c2ea:	e003      	b.n	801c2f4 <_printf_i+0xc4>
 801c2ec:	0645      	lsls	r5, r0, #25
 801c2ee:	d5fb      	bpl.n	801c2e8 <_printf_i+0xb8>
 801c2f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c2f4:	2d00      	cmp	r5, #0
 801c2f6:	da03      	bge.n	801c300 <_printf_i+0xd0>
 801c2f8:	232d      	movs	r3, #45	@ 0x2d
 801c2fa:	426d      	negs	r5, r5
 801c2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c300:	4859      	ldr	r0, [pc, #356]	@ (801c468 <_printf_i+0x238>)
 801c302:	230a      	movs	r3, #10
 801c304:	e011      	b.n	801c32a <_printf_i+0xfa>
 801c306:	6821      	ldr	r1, [r4, #0]
 801c308:	6833      	ldr	r3, [r6, #0]
 801c30a:	0608      	lsls	r0, r1, #24
 801c30c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c310:	d402      	bmi.n	801c318 <_printf_i+0xe8>
 801c312:	0649      	lsls	r1, r1, #25
 801c314:	bf48      	it	mi
 801c316:	b2ad      	uxthmi	r5, r5
 801c318:	2f6f      	cmp	r7, #111	@ 0x6f
 801c31a:	4853      	ldr	r0, [pc, #332]	@ (801c468 <_printf_i+0x238>)
 801c31c:	6033      	str	r3, [r6, #0]
 801c31e:	bf14      	ite	ne
 801c320:	230a      	movne	r3, #10
 801c322:	2308      	moveq	r3, #8
 801c324:	2100      	movs	r1, #0
 801c326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c32a:	6866      	ldr	r6, [r4, #4]
 801c32c:	60a6      	str	r6, [r4, #8]
 801c32e:	2e00      	cmp	r6, #0
 801c330:	bfa2      	ittt	ge
 801c332:	6821      	ldrge	r1, [r4, #0]
 801c334:	f021 0104 	bicge.w	r1, r1, #4
 801c338:	6021      	strge	r1, [r4, #0]
 801c33a:	b90d      	cbnz	r5, 801c340 <_printf_i+0x110>
 801c33c:	2e00      	cmp	r6, #0
 801c33e:	d04b      	beq.n	801c3d8 <_printf_i+0x1a8>
 801c340:	4616      	mov	r6, r2
 801c342:	fbb5 f1f3 	udiv	r1, r5, r3
 801c346:	fb03 5711 	mls	r7, r3, r1, r5
 801c34a:	5dc7      	ldrb	r7, [r0, r7]
 801c34c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c350:	462f      	mov	r7, r5
 801c352:	42bb      	cmp	r3, r7
 801c354:	460d      	mov	r5, r1
 801c356:	d9f4      	bls.n	801c342 <_printf_i+0x112>
 801c358:	2b08      	cmp	r3, #8
 801c35a:	d10b      	bne.n	801c374 <_printf_i+0x144>
 801c35c:	6823      	ldr	r3, [r4, #0]
 801c35e:	07df      	lsls	r7, r3, #31
 801c360:	d508      	bpl.n	801c374 <_printf_i+0x144>
 801c362:	6923      	ldr	r3, [r4, #16]
 801c364:	6861      	ldr	r1, [r4, #4]
 801c366:	4299      	cmp	r1, r3
 801c368:	bfde      	ittt	le
 801c36a:	2330      	movle	r3, #48	@ 0x30
 801c36c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c370:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c374:	1b92      	subs	r2, r2, r6
 801c376:	6122      	str	r2, [r4, #16]
 801c378:	f8cd a000 	str.w	sl, [sp]
 801c37c:	464b      	mov	r3, r9
 801c37e:	aa03      	add	r2, sp, #12
 801c380:	4621      	mov	r1, r4
 801c382:	4640      	mov	r0, r8
 801c384:	f7ff fee6 	bl	801c154 <_printf_common>
 801c388:	3001      	adds	r0, #1
 801c38a:	d14a      	bne.n	801c422 <_printf_i+0x1f2>
 801c38c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c390:	b004      	add	sp, #16
 801c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c396:	6823      	ldr	r3, [r4, #0]
 801c398:	f043 0320 	orr.w	r3, r3, #32
 801c39c:	6023      	str	r3, [r4, #0]
 801c39e:	4833      	ldr	r0, [pc, #204]	@ (801c46c <_printf_i+0x23c>)
 801c3a0:	2778      	movs	r7, #120	@ 0x78
 801c3a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c3a6:	6823      	ldr	r3, [r4, #0]
 801c3a8:	6831      	ldr	r1, [r6, #0]
 801c3aa:	061f      	lsls	r7, r3, #24
 801c3ac:	f851 5b04 	ldr.w	r5, [r1], #4
 801c3b0:	d402      	bmi.n	801c3b8 <_printf_i+0x188>
 801c3b2:	065f      	lsls	r7, r3, #25
 801c3b4:	bf48      	it	mi
 801c3b6:	b2ad      	uxthmi	r5, r5
 801c3b8:	6031      	str	r1, [r6, #0]
 801c3ba:	07d9      	lsls	r1, r3, #31
 801c3bc:	bf44      	itt	mi
 801c3be:	f043 0320 	orrmi.w	r3, r3, #32
 801c3c2:	6023      	strmi	r3, [r4, #0]
 801c3c4:	b11d      	cbz	r5, 801c3ce <_printf_i+0x19e>
 801c3c6:	2310      	movs	r3, #16
 801c3c8:	e7ac      	b.n	801c324 <_printf_i+0xf4>
 801c3ca:	4827      	ldr	r0, [pc, #156]	@ (801c468 <_printf_i+0x238>)
 801c3cc:	e7e9      	b.n	801c3a2 <_printf_i+0x172>
 801c3ce:	6823      	ldr	r3, [r4, #0]
 801c3d0:	f023 0320 	bic.w	r3, r3, #32
 801c3d4:	6023      	str	r3, [r4, #0]
 801c3d6:	e7f6      	b.n	801c3c6 <_printf_i+0x196>
 801c3d8:	4616      	mov	r6, r2
 801c3da:	e7bd      	b.n	801c358 <_printf_i+0x128>
 801c3dc:	6833      	ldr	r3, [r6, #0]
 801c3de:	6825      	ldr	r5, [r4, #0]
 801c3e0:	6961      	ldr	r1, [r4, #20]
 801c3e2:	1d18      	adds	r0, r3, #4
 801c3e4:	6030      	str	r0, [r6, #0]
 801c3e6:	062e      	lsls	r6, r5, #24
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	d501      	bpl.n	801c3f0 <_printf_i+0x1c0>
 801c3ec:	6019      	str	r1, [r3, #0]
 801c3ee:	e002      	b.n	801c3f6 <_printf_i+0x1c6>
 801c3f0:	0668      	lsls	r0, r5, #25
 801c3f2:	d5fb      	bpl.n	801c3ec <_printf_i+0x1bc>
 801c3f4:	8019      	strh	r1, [r3, #0]
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	6123      	str	r3, [r4, #16]
 801c3fa:	4616      	mov	r6, r2
 801c3fc:	e7bc      	b.n	801c378 <_printf_i+0x148>
 801c3fe:	6833      	ldr	r3, [r6, #0]
 801c400:	1d1a      	adds	r2, r3, #4
 801c402:	6032      	str	r2, [r6, #0]
 801c404:	681e      	ldr	r6, [r3, #0]
 801c406:	6862      	ldr	r2, [r4, #4]
 801c408:	2100      	movs	r1, #0
 801c40a:	4630      	mov	r0, r6
 801c40c:	f7e3 ff80 	bl	8000310 <memchr>
 801c410:	b108      	cbz	r0, 801c416 <_printf_i+0x1e6>
 801c412:	1b80      	subs	r0, r0, r6
 801c414:	6060      	str	r0, [r4, #4]
 801c416:	6863      	ldr	r3, [r4, #4]
 801c418:	6123      	str	r3, [r4, #16]
 801c41a:	2300      	movs	r3, #0
 801c41c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c420:	e7aa      	b.n	801c378 <_printf_i+0x148>
 801c422:	6923      	ldr	r3, [r4, #16]
 801c424:	4632      	mov	r2, r6
 801c426:	4649      	mov	r1, r9
 801c428:	4640      	mov	r0, r8
 801c42a:	47d0      	blx	sl
 801c42c:	3001      	adds	r0, #1
 801c42e:	d0ad      	beq.n	801c38c <_printf_i+0x15c>
 801c430:	6823      	ldr	r3, [r4, #0]
 801c432:	079b      	lsls	r3, r3, #30
 801c434:	d413      	bmi.n	801c45e <_printf_i+0x22e>
 801c436:	68e0      	ldr	r0, [r4, #12]
 801c438:	9b03      	ldr	r3, [sp, #12]
 801c43a:	4298      	cmp	r0, r3
 801c43c:	bfb8      	it	lt
 801c43e:	4618      	movlt	r0, r3
 801c440:	e7a6      	b.n	801c390 <_printf_i+0x160>
 801c442:	2301      	movs	r3, #1
 801c444:	4632      	mov	r2, r6
 801c446:	4649      	mov	r1, r9
 801c448:	4640      	mov	r0, r8
 801c44a:	47d0      	blx	sl
 801c44c:	3001      	adds	r0, #1
 801c44e:	d09d      	beq.n	801c38c <_printf_i+0x15c>
 801c450:	3501      	adds	r5, #1
 801c452:	68e3      	ldr	r3, [r4, #12]
 801c454:	9903      	ldr	r1, [sp, #12]
 801c456:	1a5b      	subs	r3, r3, r1
 801c458:	42ab      	cmp	r3, r5
 801c45a:	dcf2      	bgt.n	801c442 <_printf_i+0x212>
 801c45c:	e7eb      	b.n	801c436 <_printf_i+0x206>
 801c45e:	2500      	movs	r5, #0
 801c460:	f104 0619 	add.w	r6, r4, #25
 801c464:	e7f5      	b.n	801c452 <_printf_i+0x222>
 801c466:	bf00      	nop
 801c468:	0801d693 	.word	0x0801d693
 801c46c:	0801d6a4 	.word	0x0801d6a4

0801c470 <__sflush_r>:
 801c470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c478:	0716      	lsls	r6, r2, #28
 801c47a:	4605      	mov	r5, r0
 801c47c:	460c      	mov	r4, r1
 801c47e:	d454      	bmi.n	801c52a <__sflush_r+0xba>
 801c480:	684b      	ldr	r3, [r1, #4]
 801c482:	2b00      	cmp	r3, #0
 801c484:	dc02      	bgt.n	801c48c <__sflush_r+0x1c>
 801c486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c488:	2b00      	cmp	r3, #0
 801c48a:	dd48      	ble.n	801c51e <__sflush_r+0xae>
 801c48c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c48e:	2e00      	cmp	r6, #0
 801c490:	d045      	beq.n	801c51e <__sflush_r+0xae>
 801c492:	2300      	movs	r3, #0
 801c494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c498:	682f      	ldr	r7, [r5, #0]
 801c49a:	6a21      	ldr	r1, [r4, #32]
 801c49c:	602b      	str	r3, [r5, #0]
 801c49e:	d030      	beq.n	801c502 <__sflush_r+0x92>
 801c4a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c4a2:	89a3      	ldrh	r3, [r4, #12]
 801c4a4:	0759      	lsls	r1, r3, #29
 801c4a6:	d505      	bpl.n	801c4b4 <__sflush_r+0x44>
 801c4a8:	6863      	ldr	r3, [r4, #4]
 801c4aa:	1ad2      	subs	r2, r2, r3
 801c4ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c4ae:	b10b      	cbz	r3, 801c4b4 <__sflush_r+0x44>
 801c4b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c4b2:	1ad2      	subs	r2, r2, r3
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c4b8:	6a21      	ldr	r1, [r4, #32]
 801c4ba:	4628      	mov	r0, r5
 801c4bc:	47b0      	blx	r6
 801c4be:	1c43      	adds	r3, r0, #1
 801c4c0:	89a3      	ldrh	r3, [r4, #12]
 801c4c2:	d106      	bne.n	801c4d2 <__sflush_r+0x62>
 801c4c4:	6829      	ldr	r1, [r5, #0]
 801c4c6:	291d      	cmp	r1, #29
 801c4c8:	d82b      	bhi.n	801c522 <__sflush_r+0xb2>
 801c4ca:	4a2a      	ldr	r2, [pc, #168]	@ (801c574 <__sflush_r+0x104>)
 801c4cc:	410a      	asrs	r2, r1
 801c4ce:	07d6      	lsls	r6, r2, #31
 801c4d0:	d427      	bmi.n	801c522 <__sflush_r+0xb2>
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	6062      	str	r2, [r4, #4]
 801c4d6:	04d9      	lsls	r1, r3, #19
 801c4d8:	6922      	ldr	r2, [r4, #16]
 801c4da:	6022      	str	r2, [r4, #0]
 801c4dc:	d504      	bpl.n	801c4e8 <__sflush_r+0x78>
 801c4de:	1c42      	adds	r2, r0, #1
 801c4e0:	d101      	bne.n	801c4e6 <__sflush_r+0x76>
 801c4e2:	682b      	ldr	r3, [r5, #0]
 801c4e4:	b903      	cbnz	r3, 801c4e8 <__sflush_r+0x78>
 801c4e6:	6560      	str	r0, [r4, #84]	@ 0x54
 801c4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c4ea:	602f      	str	r7, [r5, #0]
 801c4ec:	b1b9      	cbz	r1, 801c51e <__sflush_r+0xae>
 801c4ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c4f2:	4299      	cmp	r1, r3
 801c4f4:	d002      	beq.n	801c4fc <__sflush_r+0x8c>
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	f7ff fb40 	bl	801bb7c <_free_r>
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801c500:	e00d      	b.n	801c51e <__sflush_r+0xae>
 801c502:	2301      	movs	r3, #1
 801c504:	4628      	mov	r0, r5
 801c506:	47b0      	blx	r6
 801c508:	4602      	mov	r2, r0
 801c50a:	1c50      	adds	r0, r2, #1
 801c50c:	d1c9      	bne.n	801c4a2 <__sflush_r+0x32>
 801c50e:	682b      	ldr	r3, [r5, #0]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d0c6      	beq.n	801c4a2 <__sflush_r+0x32>
 801c514:	2b1d      	cmp	r3, #29
 801c516:	d001      	beq.n	801c51c <__sflush_r+0xac>
 801c518:	2b16      	cmp	r3, #22
 801c51a:	d11e      	bne.n	801c55a <__sflush_r+0xea>
 801c51c:	602f      	str	r7, [r5, #0]
 801c51e:	2000      	movs	r0, #0
 801c520:	e022      	b.n	801c568 <__sflush_r+0xf8>
 801c522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c526:	b21b      	sxth	r3, r3
 801c528:	e01b      	b.n	801c562 <__sflush_r+0xf2>
 801c52a:	690f      	ldr	r7, [r1, #16]
 801c52c:	2f00      	cmp	r7, #0
 801c52e:	d0f6      	beq.n	801c51e <__sflush_r+0xae>
 801c530:	0793      	lsls	r3, r2, #30
 801c532:	680e      	ldr	r6, [r1, #0]
 801c534:	bf08      	it	eq
 801c536:	694b      	ldreq	r3, [r1, #20]
 801c538:	600f      	str	r7, [r1, #0]
 801c53a:	bf18      	it	ne
 801c53c:	2300      	movne	r3, #0
 801c53e:	eba6 0807 	sub.w	r8, r6, r7
 801c542:	608b      	str	r3, [r1, #8]
 801c544:	f1b8 0f00 	cmp.w	r8, #0
 801c548:	dde9      	ble.n	801c51e <__sflush_r+0xae>
 801c54a:	6a21      	ldr	r1, [r4, #32]
 801c54c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c54e:	4643      	mov	r3, r8
 801c550:	463a      	mov	r2, r7
 801c552:	4628      	mov	r0, r5
 801c554:	47b0      	blx	r6
 801c556:	2800      	cmp	r0, #0
 801c558:	dc08      	bgt.n	801c56c <__sflush_r+0xfc>
 801c55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c562:	81a3      	strh	r3, [r4, #12]
 801c564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c56c:	4407      	add	r7, r0
 801c56e:	eba8 0800 	sub.w	r8, r8, r0
 801c572:	e7e7      	b.n	801c544 <__sflush_r+0xd4>
 801c574:	dfbffffe 	.word	0xdfbffffe

0801c578 <_fflush_r>:
 801c578:	b538      	push	{r3, r4, r5, lr}
 801c57a:	690b      	ldr	r3, [r1, #16]
 801c57c:	4605      	mov	r5, r0
 801c57e:	460c      	mov	r4, r1
 801c580:	b913      	cbnz	r3, 801c588 <_fflush_r+0x10>
 801c582:	2500      	movs	r5, #0
 801c584:	4628      	mov	r0, r5
 801c586:	bd38      	pop	{r3, r4, r5, pc}
 801c588:	b118      	cbz	r0, 801c592 <_fflush_r+0x1a>
 801c58a:	6a03      	ldr	r3, [r0, #32]
 801c58c:	b90b      	cbnz	r3, 801c592 <_fflush_r+0x1a>
 801c58e:	f7fe ffe3 	bl	801b558 <__sinit>
 801c592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d0f3      	beq.n	801c582 <_fflush_r+0xa>
 801c59a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c59c:	07d0      	lsls	r0, r2, #31
 801c59e:	d404      	bmi.n	801c5aa <_fflush_r+0x32>
 801c5a0:	0599      	lsls	r1, r3, #22
 801c5a2:	d402      	bmi.n	801c5aa <_fflush_r+0x32>
 801c5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5a6:	f7ff faa6 	bl	801baf6 <__retarget_lock_acquire_recursive>
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	4621      	mov	r1, r4
 801c5ae:	f7ff ff5f 	bl	801c470 <__sflush_r>
 801c5b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c5b4:	07da      	lsls	r2, r3, #31
 801c5b6:	4605      	mov	r5, r0
 801c5b8:	d4e4      	bmi.n	801c584 <_fflush_r+0xc>
 801c5ba:	89a3      	ldrh	r3, [r4, #12]
 801c5bc:	059b      	lsls	r3, r3, #22
 801c5be:	d4e1      	bmi.n	801c584 <_fflush_r+0xc>
 801c5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5c2:	f7ff fa99 	bl	801baf8 <__retarget_lock_release_recursive>
 801c5c6:	e7dd      	b.n	801c584 <_fflush_r+0xc>

0801c5c8 <fiprintf>:
 801c5c8:	b40e      	push	{r1, r2, r3}
 801c5ca:	b503      	push	{r0, r1, lr}
 801c5cc:	4601      	mov	r1, r0
 801c5ce:	ab03      	add	r3, sp, #12
 801c5d0:	4805      	ldr	r0, [pc, #20]	@ (801c5e8 <fiprintf+0x20>)
 801c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5d6:	6800      	ldr	r0, [r0, #0]
 801c5d8:	9301      	str	r3, [sp, #4]
 801c5da:	f7ff fca3 	bl	801bf24 <_vfiprintf_r>
 801c5de:	b002      	add	sp, #8
 801c5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c5e4:	b003      	add	sp, #12
 801c5e6:	4770      	bx	lr
 801c5e8:	240002b0 	.word	0x240002b0

0801c5ec <__swhatbuf_r>:
 801c5ec:	b570      	push	{r4, r5, r6, lr}
 801c5ee:	460c      	mov	r4, r1
 801c5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5f4:	2900      	cmp	r1, #0
 801c5f6:	b096      	sub	sp, #88	@ 0x58
 801c5f8:	4615      	mov	r5, r2
 801c5fa:	461e      	mov	r6, r3
 801c5fc:	da0d      	bge.n	801c61a <__swhatbuf_r+0x2e>
 801c5fe:	89a3      	ldrh	r3, [r4, #12]
 801c600:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c604:	f04f 0100 	mov.w	r1, #0
 801c608:	bf14      	ite	ne
 801c60a:	2340      	movne	r3, #64	@ 0x40
 801c60c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c610:	2000      	movs	r0, #0
 801c612:	6031      	str	r1, [r6, #0]
 801c614:	602b      	str	r3, [r5, #0]
 801c616:	b016      	add	sp, #88	@ 0x58
 801c618:	bd70      	pop	{r4, r5, r6, pc}
 801c61a:	466a      	mov	r2, sp
 801c61c:	f000 f848 	bl	801c6b0 <_fstat_r>
 801c620:	2800      	cmp	r0, #0
 801c622:	dbec      	blt.n	801c5fe <__swhatbuf_r+0x12>
 801c624:	9901      	ldr	r1, [sp, #4]
 801c626:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c62a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c62e:	4259      	negs	r1, r3
 801c630:	4159      	adcs	r1, r3
 801c632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c636:	e7eb      	b.n	801c610 <__swhatbuf_r+0x24>

0801c638 <__smakebuf_r>:
 801c638:	898b      	ldrh	r3, [r1, #12]
 801c63a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c63c:	079d      	lsls	r5, r3, #30
 801c63e:	4606      	mov	r6, r0
 801c640:	460c      	mov	r4, r1
 801c642:	d507      	bpl.n	801c654 <__smakebuf_r+0x1c>
 801c644:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c648:	6023      	str	r3, [r4, #0]
 801c64a:	6123      	str	r3, [r4, #16]
 801c64c:	2301      	movs	r3, #1
 801c64e:	6163      	str	r3, [r4, #20]
 801c650:	b003      	add	sp, #12
 801c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c654:	ab01      	add	r3, sp, #4
 801c656:	466a      	mov	r2, sp
 801c658:	f7ff ffc8 	bl	801c5ec <__swhatbuf_r>
 801c65c:	9f00      	ldr	r7, [sp, #0]
 801c65e:	4605      	mov	r5, r0
 801c660:	4639      	mov	r1, r7
 801c662:	4630      	mov	r0, r6
 801c664:	f7fe fd46 	bl	801b0f4 <_malloc_r>
 801c668:	b948      	cbnz	r0, 801c67e <__smakebuf_r+0x46>
 801c66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c66e:	059a      	lsls	r2, r3, #22
 801c670:	d4ee      	bmi.n	801c650 <__smakebuf_r+0x18>
 801c672:	f023 0303 	bic.w	r3, r3, #3
 801c676:	f043 0302 	orr.w	r3, r3, #2
 801c67a:	81a3      	strh	r3, [r4, #12]
 801c67c:	e7e2      	b.n	801c644 <__smakebuf_r+0xc>
 801c67e:	89a3      	ldrh	r3, [r4, #12]
 801c680:	6020      	str	r0, [r4, #0]
 801c682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c686:	81a3      	strh	r3, [r4, #12]
 801c688:	9b01      	ldr	r3, [sp, #4]
 801c68a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c68e:	b15b      	cbz	r3, 801c6a8 <__smakebuf_r+0x70>
 801c690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c694:	4630      	mov	r0, r6
 801c696:	f000 f81d 	bl	801c6d4 <_isatty_r>
 801c69a:	b128      	cbz	r0, 801c6a8 <__smakebuf_r+0x70>
 801c69c:	89a3      	ldrh	r3, [r4, #12]
 801c69e:	f023 0303 	bic.w	r3, r3, #3
 801c6a2:	f043 0301 	orr.w	r3, r3, #1
 801c6a6:	81a3      	strh	r3, [r4, #12]
 801c6a8:	89a3      	ldrh	r3, [r4, #12]
 801c6aa:	431d      	orrs	r5, r3
 801c6ac:	81a5      	strh	r5, [r4, #12]
 801c6ae:	e7cf      	b.n	801c650 <__smakebuf_r+0x18>

0801c6b0 <_fstat_r>:
 801c6b0:	b538      	push	{r3, r4, r5, lr}
 801c6b2:	4d07      	ldr	r5, [pc, #28]	@ (801c6d0 <_fstat_r+0x20>)
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	4604      	mov	r4, r0
 801c6b8:	4608      	mov	r0, r1
 801c6ba:	4611      	mov	r1, r2
 801c6bc:	602b      	str	r3, [r5, #0]
 801c6be:	f7e5 fcdd 	bl	800207c <_fstat>
 801c6c2:	1c43      	adds	r3, r0, #1
 801c6c4:	d102      	bne.n	801c6cc <_fstat_r+0x1c>
 801c6c6:	682b      	ldr	r3, [r5, #0]
 801c6c8:	b103      	cbz	r3, 801c6cc <_fstat_r+0x1c>
 801c6ca:	6023      	str	r3, [r4, #0]
 801c6cc:	bd38      	pop	{r3, r4, r5, pc}
 801c6ce:	bf00      	nop
 801c6d0:	24013000 	.word	0x24013000

0801c6d4 <_isatty_r>:
 801c6d4:	b538      	push	{r3, r4, r5, lr}
 801c6d6:	4d06      	ldr	r5, [pc, #24]	@ (801c6f0 <_isatty_r+0x1c>)
 801c6d8:	2300      	movs	r3, #0
 801c6da:	4604      	mov	r4, r0
 801c6dc:	4608      	mov	r0, r1
 801c6de:	602b      	str	r3, [r5, #0]
 801c6e0:	f7e5 fcdc 	bl	800209c <_isatty>
 801c6e4:	1c43      	adds	r3, r0, #1
 801c6e6:	d102      	bne.n	801c6ee <_isatty_r+0x1a>
 801c6e8:	682b      	ldr	r3, [r5, #0]
 801c6ea:	b103      	cbz	r3, 801c6ee <_isatty_r+0x1a>
 801c6ec:	6023      	str	r3, [r4, #0]
 801c6ee:	bd38      	pop	{r3, r4, r5, pc}
 801c6f0:	24013000 	.word	0x24013000

0801c6f4 <abort>:
 801c6f4:	b508      	push	{r3, lr}
 801c6f6:	2006      	movs	r0, #6
 801c6f8:	f000 f82c 	bl	801c754 <raise>
 801c6fc:	2001      	movs	r0, #1
 801c6fe:	f7e5 fc6d 	bl	8001fdc <_exit>

0801c702 <_raise_r>:
 801c702:	291f      	cmp	r1, #31
 801c704:	b538      	push	{r3, r4, r5, lr}
 801c706:	4605      	mov	r5, r0
 801c708:	460c      	mov	r4, r1
 801c70a:	d904      	bls.n	801c716 <_raise_r+0x14>
 801c70c:	2316      	movs	r3, #22
 801c70e:	6003      	str	r3, [r0, #0]
 801c710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c714:	bd38      	pop	{r3, r4, r5, pc}
 801c716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c718:	b112      	cbz	r2, 801c720 <_raise_r+0x1e>
 801c71a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c71e:	b94b      	cbnz	r3, 801c734 <_raise_r+0x32>
 801c720:	4628      	mov	r0, r5
 801c722:	f000 f831 	bl	801c788 <_getpid_r>
 801c726:	4622      	mov	r2, r4
 801c728:	4601      	mov	r1, r0
 801c72a:	4628      	mov	r0, r5
 801c72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c730:	f000 b818 	b.w	801c764 <_kill_r>
 801c734:	2b01      	cmp	r3, #1
 801c736:	d00a      	beq.n	801c74e <_raise_r+0x4c>
 801c738:	1c59      	adds	r1, r3, #1
 801c73a:	d103      	bne.n	801c744 <_raise_r+0x42>
 801c73c:	2316      	movs	r3, #22
 801c73e:	6003      	str	r3, [r0, #0]
 801c740:	2001      	movs	r0, #1
 801c742:	e7e7      	b.n	801c714 <_raise_r+0x12>
 801c744:	2100      	movs	r1, #0
 801c746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c74a:	4620      	mov	r0, r4
 801c74c:	4798      	blx	r3
 801c74e:	2000      	movs	r0, #0
 801c750:	e7e0      	b.n	801c714 <_raise_r+0x12>
	...

0801c754 <raise>:
 801c754:	4b02      	ldr	r3, [pc, #8]	@ (801c760 <raise+0xc>)
 801c756:	4601      	mov	r1, r0
 801c758:	6818      	ldr	r0, [r3, #0]
 801c75a:	f7ff bfd2 	b.w	801c702 <_raise_r>
 801c75e:	bf00      	nop
 801c760:	240002b0 	.word	0x240002b0

0801c764 <_kill_r>:
 801c764:	b538      	push	{r3, r4, r5, lr}
 801c766:	4d07      	ldr	r5, [pc, #28]	@ (801c784 <_kill_r+0x20>)
 801c768:	2300      	movs	r3, #0
 801c76a:	4604      	mov	r4, r0
 801c76c:	4608      	mov	r0, r1
 801c76e:	4611      	mov	r1, r2
 801c770:	602b      	str	r3, [r5, #0]
 801c772:	f7e5 fc23 	bl	8001fbc <_kill>
 801c776:	1c43      	adds	r3, r0, #1
 801c778:	d102      	bne.n	801c780 <_kill_r+0x1c>
 801c77a:	682b      	ldr	r3, [r5, #0]
 801c77c:	b103      	cbz	r3, 801c780 <_kill_r+0x1c>
 801c77e:	6023      	str	r3, [r4, #0]
 801c780:	bd38      	pop	{r3, r4, r5, pc}
 801c782:	bf00      	nop
 801c784:	24013000 	.word	0x24013000

0801c788 <_getpid_r>:
 801c788:	f7e5 bc10 	b.w	8001fac <_getpid>

0801c78c <_init>:
 801c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c78e:	bf00      	nop
 801c790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c792:	bc08      	pop	{r3}
 801c794:	469e      	mov	lr, r3
 801c796:	4770      	bx	lr

0801c798 <_fini>:
 801c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c79a:	bf00      	nop
 801c79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c79e:	bc08      	pop	{r3}
 801c7a0:	469e      	mov	lr, r3
 801c7a2:	4770      	bx	lr
