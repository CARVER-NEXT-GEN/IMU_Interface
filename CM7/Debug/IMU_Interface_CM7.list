
IMU_Interface_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecb4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  0801ef58  0801ef58  0001ff58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ff88  0801ff88  00021388  2**0
                  CONTENTS
  4 .ARM          00000008  0801ff88  0801ff88  00020f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ff90  0801ff90  00021388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ff90  0801ff90  00020f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ff9c  0801ff9c  00020f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000388  24000000  0801ffa0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e38  24000388  08020328  00021388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240131c0  08020328  000221c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002edff  00000000  00000000  000213b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e37  00000000  00000000  000501b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  00055ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001923  00000000  00000000  000580b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044fa6  00000000  00000000  000599d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ebfd  00000000  00000000  0009e979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4115  00000000  00000000  000cd576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0028168b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e4  00000000  00000000  00281704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0028ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000388 	.word	0x24000388
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ef3c 	.word	0x0801ef3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400038c 	.word	0x2400038c
 80002dc:	0801ef3c 	.word	0x0801ef3c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO055_READ_HSEM>:
		HAL_HSEM_Release(HSEM_ID_1,0);
	}
}

#else
void BNO055_READ_HSEM(BNO055_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8000748:	2001      	movs	r0, #1
 800074a:	f006 fca3 	bl	8007094 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d178      	bne.n	8000846 <BNO055_READ_HSEM+0x106>
		bno->quat.x = SRAM4_BNO055->Data[1];
 8000754:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000756:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = SRAM4_BNO055->Data[2];
 8000760:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = SRAM4_BNO055->Data[3];
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800076e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = SRAM4_BNO055->Data[4];
 8000778:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

		bno->lin_acc.x = SRAM4_BNO055->Data[5];
 8000784:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = SRAM4_BNO055->Data[6];
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000792:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = SRAM4_BNO055->Data[7];
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800079e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->gyro.x = SRAM4_BNO055->Data[8];
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		bno->gyro.y = SRAM4_BNO055->Data[9];
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		bno->gyro.z = SRAM4_BNO055->Data[10];
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		bno->mag.x = SRAM4_BNO055->Data[11];
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bno->mag.y = SRAM4_BNO055->Data[12];
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		bno->mag.z = SRAM4_BNO055->Data[13];
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		bno->accel.x = SRAM4_BNO055->Data[14];
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bno->accel.y = SRAM4_BNO055->Data[15];
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bno->accel.z = SRAM4_BNO055->Data[16];
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800080a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	e9c1 2306 	strd	r2, r3, [r1, #24]

		bno->euler.roll = SRAM4_BNO055->Data[17];
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000816:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		bno->euler.pitch = SRAM4_BNO055->Data[18];
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000822:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		bno->euler.yaw = SRAM4_BNO055->Data[19];
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800082e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->State1 = 1;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_Release(HSEM_ID_1,0);
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f006 fc41 	bl	80070c8 <HAL_HSEM_Release>

	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	38002000 	.word	0x38002000

08000854 <BNO086_READ_HSEM>:
		}
	}
}
#else

void BNO086_READ_HSEM(BNO086_t *bno){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 800085c:	2000      	movs	r0, #0
 800085e:	f006 fc19 	bl	8007094 <HAL_HSEM_FastTake>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	f040 80b3 	bne.w	80009d0 <BNO086_READ_HSEM+0x17c>
    	bno->quaternion.i = SRAM4_BNO086->Data[0];
 800086a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800086e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4_BNO086->Data[1];
 800087c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000880:	ed93 7b04 	vldr	d7, [r3, #16]
 8000884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4_BNO086->Data[2];
 800088e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000892:	ed93 7b06 	vldr	d7, [r3, #24]
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4_BNO086->Data[3];
 80008a0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008a4:	ed93 7b08 	vldr	d7, [r3, #32]
 80008a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4_BNO086->Data[4];
 80008b2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008b6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80008ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4_BNO086->Data[5];
 80008c4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008c8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80008cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4_BNO086->Data[6];
 80008d6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008da:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80008de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4_BNO086->Data[7];
 80008e8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008ec:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80008f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4_BNO086->Data[8];
 80008fa:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008fe:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8000902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4_BNO086->Data[9];
 800090c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000910:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4_BNO086->Data[10];
 800091e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000922:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4_BNO086->Data[11];
 8000930:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000934:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4_BNO086->Data[12];
 8000942:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000946:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800094a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4_BNO086->Data[13];
 8000954:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000958:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800095c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4_BNO086->Data[14];
 8000966:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800096a:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800096e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4_BNO086->Data[15];
 8000978:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800097c:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8000980:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4_BNO086->Data[16];
 800098a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800098e:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 8000992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4_BNO086->Data[17];
 800099c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009a0:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80009a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4_BNO086->Data[18];
 80009ae:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009b2:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80009b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		SRAM4_BNO086->State1 = 1;
 80009c0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f006 fb7c 	bl	80070c8 <HAL_HSEM_Release>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009dc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <SystemInit+0xfc>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad4 <SystemInit+0xfc>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80009ec:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <SystemInit+0xfc>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	4a38      	ldr	r2, [pc, #224]	@ (8000ad4 <SystemInit+0xfc>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009f8:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <SystemInit+0x100>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d807      	bhi.n	8000a14 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a04:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <SystemInit+0x100>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 030f 	bic.w	r3, r3, #15
 8000a0c:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <SystemInit+0x100>)
 8000a0e:	f043 0307 	orr.w	r3, r3, #7
 8000a12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a14:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <SystemInit+0x104>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a30      	ldr	r2, [pc, #192]	@ (8000adc <SystemInit+0x104>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <SystemInit+0x104>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <SystemInit+0x104>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	492c      	ldr	r1, [pc, #176]	@ (8000adc <SystemInit+0x104>)
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <SystemInit+0x108>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <SystemInit+0x100>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <SystemInit+0x100>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f023 030f 	bic.w	r3, r3, #15
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <SystemInit+0x100>)
 8000a48:	f043 0307 	orr.w	r3, r3, #7
 8000a4c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <SystemInit+0x104>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <SystemInit+0x104>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <SystemInit+0x104>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <SystemInit+0x104>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <SystemInit+0x10c>)
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <SystemInit+0x104>)
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <SystemInit+0x110>)
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <SystemInit+0x104>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <SystemInit+0x114>)
 8000a70:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <SystemInit+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SystemInit+0x104>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <SystemInit+0x114>)
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <SystemInit+0x104>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <SystemInit+0x104>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <SystemInit+0x114>)
 8000a88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <SystemInit+0x104>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <SystemInit+0x104>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <SystemInit+0x104>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SystemInit+0x104>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <SystemInit+0x118>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <SystemInit+0x118>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <SystemInit+0x11c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <SystemInit+0x120>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aba:	d202      	bcs.n	8000ac2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <SystemInit+0x124>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <SystemInit+0x128>)
 8000ac4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	52002000 	.word	0x52002000
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	01010280 	.word	0x01010280
 8000af0:	580000c0 	.word	0x580000c0
 8000af4:	5c001000 	.word	0x5c001000
 8000af8:	ffff0000 	.word	0xffff0000
 8000afc:	51008108 	.word	0x51008108
 8000b00:	52004000 	.word	0x52004000

08000b04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b28:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b2a:	4a36      	ldr	r2, [pc, #216]	@ (8000c04 <MX_ADC1_Init+0x100>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b34:	4b32      	ldr	r3, [pc, #200]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b40:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b5e:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b7e:	4820      	ldr	r0, [pc, #128]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b80:	f002 f8a2 	bl	8002cc8 <HAL_ADC_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b8a:	f001 f97f 	bl	8001e8c <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b90:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000b9e:	f002 f893 	bl	8002cc8 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ba8:	f001 f970 	bl	8001e8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4812      	ldr	r0, [pc, #72]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000bb8:	f003 f8b6 	bl	8003d28 <HAL_ADCEx_MultiModeConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000bc2:	f001 f963 	bl	8001e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_ADC1_Init+0x104>)
 8000bc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bd6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_ADC1_Init+0xfc>)
 8000bea:	f002 faf1 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000bf4:	f001 f94a 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	240003a4 	.word	0x240003a4
 8000c04:	40022000 	.word	0x40022000
 8000c08:	3ef08000 	.word	0x3ef08000

08000c0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	22c0      	movs	r2, #192	@ 0xc0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f01d fa7b 	bl	801e128 <memset>
  if(adcHandle->Instance==ADC1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a43      	ldr	r2, [pc, #268]	@ (8000d44 <HAL_ADC_MspInit+0x138>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d17f      	bne.n	8000d3c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c5c:	23c0      	movs	r3, #192	@ 0xc0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c60:	2320      	movs	r3, #32
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 fb30 	bl	80082d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000c7e:	f001 f905 	bl	8001e8c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c82:	4b31      	ldr	r3, [pc, #196]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c88:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000c8a:	f043 0320 	orr.w	r3, r3, #32
 8000c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <HAL_ADC_MspInit+0x13c>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0x140>)
 8000cd8:	f006 f82c 	bl	8006d34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000cde:	4a1d      	ldr	r2, [pc, #116]	@ (8000d54 <HAL_ADC_MspInit+0x148>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d20:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d22:	f003 f9bf 	bl	80040a4 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000d2c:	f001 f8ae 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d36:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <HAL_ADC_MspInit+0x144>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	37e8      	adds	r7, #232	@ 0xe8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020000 	.word	0x58020000
 8000d50:	24000408 	.word	0x24000408
 8000d54:	40020010 	.word	0x40020010

08000d58 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d64:	f00e fb08 	bl	800f378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d68:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed4 <pvPortMallocMicroROS+0x17c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d70:	f000 f986 	bl	8001080 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d74:	4b58      	ldr	r3, [pc, #352]	@ (8000ed8 <pvPortMallocMicroROS+0x180>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f040 8090 	bne.w	8000ea2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d01e      	beq.n	8000dc6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d88:	2208      	movs	r2, #8
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d015      	beq.n	8000dc6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f023 0307 	bic.w	r3, r3, #7
 8000da0:	3308      	adds	r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000db2:	f383 8811 	msr	BASEPRI, r3
 8000db6:	f3bf 8f6f 	isb	sy
 8000dba:	f3bf 8f4f 	dsb	sy
 8000dbe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	e7fd      	b.n	8000dc2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d06a      	beq.n	8000ea2 <pvPortMallocMicroROS+0x14a>
 8000dcc:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <pvPortMallocMicroROS+0x184>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d865      	bhi.n	8000ea2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <pvPortMallocMicroROS+0x188>)
 8000dd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000dda:	4b41      	ldr	r3, [pc, #260]	@ (8000ee0 <pvPortMallocMicroROS+0x188>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000de0:	e004      	b.n	8000dec <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d903      	bls.n	8000dfe <pvPortMallocMicroROS+0xa6>
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f1      	bne.n	8000de2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <pvPortMallocMicroROS+0x17c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d04c      	beq.n	8000ea2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	4413      	add	r3, r2
 8000e10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1ad2      	subs	r2, r2, r3
 8000e22:	2308      	movs	r3, #8
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d920      	bls.n	8000e6c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00b      	beq.n	8000e54 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e40:	f383 8811 	msr	BASEPRI, r3
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	613b      	str	r3, [r7, #16]
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1ad2      	subs	r2, r2, r3
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e66:	69b8      	ldr	r0, [r7, #24]
 8000e68:	f000 f96c 	bl	8001144 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <pvPortMallocMicroROS+0x184>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <pvPortMallocMicroROS+0x184>)
 8000e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <pvPortMallocMicroROS+0x184>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <pvPortMallocMicroROS+0x18c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d203      	bcs.n	8000e8e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <pvPortMallocMicroROS+0x184>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <pvPortMallocMicroROS+0x18c>)
 8000e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <pvPortMallocMicroROS+0x180>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000ea2:	f00e fa77 	bl	800f394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eb4:	f383 8811 	msr	BASEPRI, r3
 8000eb8:	f3bf 8f6f 	isb	sy
 8000ebc:	f3bf 8f4f 	dsb	sy
 8000ec0:	60fb      	str	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24004088 	.word	0x24004088
 8000ed8:	24004094 	.word	0x24004094
 8000edc:	2400408c 	.word	0x2400408c
 8000ee0:	24004080 	.word	0x24004080
 8000ee4:	24004090 	.word	0x24004090

08000ee8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d04a      	beq.n	8000f90 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000efa:	2308      	movs	r3, #8
 8000efc:	425b      	negs	r3, r3
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <vPortFreeMicroROS+0xb0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10b      	bne.n	8000f2e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	60fb      	str	r3, [r7, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f3a:	f383 8811 	msr	BASEPRI, r3
 8000f3e:	f3bf 8f6f 	isb	sy
 8000f42:	f3bf 8f4f 	dsb	sy
 8000f46:	60bb      	str	r3, [r7, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	e7fd      	b.n	8000f4a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <vPortFreeMicroROS+0xb0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d019      	beq.n	8000f90 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d115      	bne.n	8000f90 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <vPortFreeMicroROS+0xb0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f74:	f00e fa00 	bl	800f378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <vPortFreeMicroROS+0xb4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <vPortFreeMicroROS+0xb4>)
 8000f84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f86:	6938      	ldr	r0, [r7, #16]
 8000f88:	f000 f8dc 	bl	8001144 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f8c:	f00e fa02 	bl	800f394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24004094 	.word	0x24004094
 8000f9c:	2400408c 	.word	0x2400408c

08000fa0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000fac:	2308      	movs	r3, #8
 8000fae:	425b      	negs	r3, r3
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <getBlockSize+0x38>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	return count;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	24004094 	.word	0x24004094

08000fdc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fe6:	f00e f9c7 	bl	800f378 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff feb4 	bl	8000d58 <pvPortMallocMicroROS>
 8000ff0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d017      	beq.n	8001028 <pvPortReallocMicroROS+0x4c>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d014      	beq.n	8001028 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffce 	bl	8000fa0 <getBlockSize>
 8001004:	4603      	mov	r3, r0
 8001006:	2208      	movs	r2, #8
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d201      	bcs.n	8001018 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	68b8      	ldr	r0, [r7, #8]
 800101e:	f01d f94c 	bl	801e2ba <memcpy>

		vPortFreeMicroROS(pv);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff60 	bl	8000ee8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001028:	f00e f9b4 	bl	800f394 <xTaskResumeAll>

	return newmem;
 800102c:	68bb      	ldr	r3, [r7, #8]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001040:	f00e f99a 	bl	800f378 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff fe82 	bl	8000d58 <pvPortMallocMicroROS>
 8001054:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	613b      	str	r3, [r7, #16]

  	while(count--)
 800105a:	e004      	b.n	8001066 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	613a      	str	r2, [r7, #16]
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	617a      	str	r2, [r7, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f5      	bne.n	800105c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001070:	f00e f990 	bl	800f394 <xTaskResumeAll>
  	return mem;
 8001074:	68fb      	ldr	r3, [r7, #12]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001086:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800108a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <prvHeapInit+0xac>)
 800108e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3307      	adds	r3, #7
 800109e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f023 0307 	bic.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <prvHeapInit+0xac>)
 80010b0:	4413      	add	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <prvHeapInit+0xb0>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <prvHeapInit+0xb0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80010cc:	2208      	movs	r2, #8
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <prvHeapInit+0xb4>)
 80010e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <prvHeapInit+0xb4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <prvHeapInit+0xb4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <prvHeapInit+0xb4>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <prvHeapInit+0xb8>)
 800110e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a09      	ldr	r2, [pc, #36]	@ (800113c <prvHeapInit+0xbc>)
 8001116:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <prvHeapInit+0xc0>)
 800111a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	24000480 	.word	0x24000480
 8001130:	24004080 	.word	0x24004080
 8001134:	24004088 	.word	0x24004088
 8001138:	24004090 	.word	0x24004090
 800113c:	2400408c 	.word	0x2400408c
 8001140:	24004094 	.word	0x24004094

08001144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <prvInsertBlockIntoFreeList+0xac>)
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e002      	b.n	8001158 <prvInsertBlockIntoFreeList+0x14>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d8f7      	bhi.n	8001152 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	d108      	bne.n	8001186 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	441a      	add	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	441a      	add	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d118      	bne.n	80011cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <prvInsertBlockIntoFreeList+0xb0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d00d      	beq.n	80011c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	441a      	add	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e008      	b.n	80011d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <prvInsertBlockIntoFreeList+0xb0>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d002      	beq.n	80011e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	24004080 	.word	0x24004080
 80011f4:	24004088 	.word	0x24004088

080011f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_DMA_Init+0x5c>)
 8001200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001204:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <MX_DMA_Init+0x5c>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_DMA_Init+0x5c>)
 8001210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2105      	movs	r1, #5
 8001220:	200b      	movs	r0, #11
 8001222:	f002 ff17 	bl	8004054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001226:	200b      	movs	r0, #11
 8001228:	f002 ff2e 	bl	8004088 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2105      	movs	r1, #5
 8001230:	200e      	movs	r0, #14
 8001232:	f002 ff0f 	bl	8004054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001236:	200e      	movs	r0, #14
 8001238:	f002 ff26 	bl	8004088 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2105      	movs	r1, #5
 8001240:	200f      	movs	r0, #15
 8001242:	f002 ff07 	bl	8004054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001246:	200f      	movs	r0, #15
 8001248:	f002 ff1e 	bl	8004088 <HAL_NVIC_EnableIRQ>

}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	58024400 	.word	0x58024400

08001258 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001266:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001268:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800126c:	4904      	ldr	r1, [pc, #16]	@ (8001280 <cubemx_transport_open+0x28>)
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00a fae8 	bl	800b844 <HAL_UART_Receive_DMA>
    return true;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24004098 	.word	0x24004098

08001284 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001292:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f00a fb21 	bl	800b8dc <HAL_UART_DMAStop>
    return true;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012b8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d11b      	bne.n	80012fc <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f00a fa39 	bl	800b744 <HAL_UART_Transmit_DMA>
 80012d2:	4603      	mov	r3, r0
 80012d4:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80012d6:	e002      	b.n	80012de <cubemx_transport_write+0x3a>
            osDelay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f00c fbcb 	bl	800da74 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80012de:	7cfb      	ldrb	r3, [r7, #19]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d104      	bne.n	80012ee <cubemx_transport_write+0x4a>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d1f4      	bne.n	80012d8 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80012ee:	7cfb      	ldrb	r3, [r7, #19]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <cubemx_transport_write+0x54>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	e002      	b.n	80012fe <cubemx_transport_write+0x5a>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80012fc:	2300      	movs	r3, #0
    }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800131c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001322:	b672      	cpsid	i
}
 8001324:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a5a      	ldr	r2, [pc, #360]	@ (8001498 <cubemx_transport_read+0x190>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d068      	beq.n	8001406 <cubemx_transport_read+0xfe>
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a57      	ldr	r2, [pc, #348]	@ (800149c <cubemx_transport_read+0x194>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d061      	beq.n	8001406 <cubemx_transport_read+0xfe>
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a55      	ldr	r2, [pc, #340]	@ (80014a0 <cubemx_transport_read+0x198>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d05a      	beq.n	8001406 <cubemx_transport_read+0xfe>
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a52      	ldr	r2, [pc, #328]	@ (80014a4 <cubemx_transport_read+0x19c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d053      	beq.n	8001406 <cubemx_transport_read+0xfe>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <cubemx_transport_read+0x1a0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d04c      	beq.n	8001406 <cubemx_transport_read+0xfe>
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4d      	ldr	r2, [pc, #308]	@ (80014ac <cubemx_transport_read+0x1a4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d045      	beq.n	8001406 <cubemx_transport_read+0xfe>
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a4b      	ldr	r2, [pc, #300]	@ (80014b0 <cubemx_transport_read+0x1a8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d03e      	beq.n	8001406 <cubemx_transport_read+0xfe>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a48      	ldr	r2, [pc, #288]	@ (80014b4 <cubemx_transport_read+0x1ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d037      	beq.n	8001406 <cubemx_transport_read+0xfe>
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <cubemx_transport_read+0x1b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d030      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a43      	ldr	r2, [pc, #268]	@ (80014bc <cubemx_transport_read+0x1b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d029      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a41      	ldr	r2, [pc, #260]	@ (80014c0 <cubemx_transport_read+0x1b8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a3e      	ldr	r2, [pc, #248]	@ (80014c4 <cubemx_transport_read+0x1bc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01b      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a3c      	ldr	r2, [pc, #240]	@ (80014c8 <cubemx_transport_read+0x1c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d014      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a39      	ldr	r2, [pc, #228]	@ (80014cc <cubemx_transport_read+0x1c4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a37      	ldr	r2, [pc, #220]	@ (80014d0 <cubemx_transport_read+0x1c8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d006      	beq.n	8001406 <cubemx_transport_read+0xfe>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a34      	ldr	r2, [pc, #208]	@ (80014d4 <cubemx_transport_read+0x1cc>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d107      	bne.n	8001416 <cubemx_transport_read+0x10e>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001414:	e006      	b.n	8001424 <cubemx_transport_read+0x11c>
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001424:	4a2c      	ldr	r2, [pc, #176]	@ (80014d8 <cubemx_transport_read+0x1d0>)
 8001426:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001428:	b662      	cpsie	i
}
 800142a:	bf00      	nop
        __enable_irq();
        ms_used++;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001432:	2001      	movs	r0, #1
 8001434:	f00c fb1e 	bl	800da74 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001438:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <cubemx_transport_read+0x1d4>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <cubemx_transport_read+0x1d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d104      	bne.n	800144e <cubemx_transport_read+0x146>
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	f6ff af6a 	blt.w	8001322 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001452:	e011      	b.n	8001478 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <cubemx_transport_read+0x1d4>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	440b      	add	r3, r1
 800145e:	4920      	ldr	r1, [pc, #128]	@ (80014e0 <cubemx_transport_read+0x1d8>)
 8001460:	5c8a      	ldrb	r2, [r1, r2]
 8001462:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <cubemx_transport_read+0x1d4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146e:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <cubemx_transport_read+0x1d4>)
 8001470:	6013      	str	r3, [r2, #0]
        wrote++;
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3301      	adds	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <cubemx_transport_read+0x1d4>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <cubemx_transport_read+0x1d0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d003      	beq.n	800148c <cubemx_transport_read+0x184>
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3e3      	bcc.n	8001454 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 800148c:	69bb      	ldr	r3, [r7, #24]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020010 	.word	0x40020010
 800149c:	40020028 	.word	0x40020028
 80014a0:	40020040 	.word	0x40020040
 80014a4:	40020058 	.word	0x40020058
 80014a8:	40020070 	.word	0x40020070
 80014ac:	40020088 	.word	0x40020088
 80014b0:	400200a0 	.word	0x400200a0
 80014b4:	400200b8 	.word	0x400200b8
 80014b8:	40020410 	.word	0x40020410
 80014bc:	40020428 	.word	0x40020428
 80014c0:	40020440 	.word	0x40020440
 80014c4:	40020458 	.word	0x40020458
 80014c8:	40020470 	.word	0x40020470
 80014cc:	40020488 	.word	0x40020488
 80014d0:	400204a0 	.word	0x400204a0
 80014d4:	400204b8 	.word	0x400204b8
 80014d8:	2400489c 	.word	0x2400489c
 80014dc:	24004898 	.word	0x24004898
 80014e0:	24004098 	.word	0x24004098

080014e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
 80014e8:	2228      	movs	r2, #40	@ 0x28
 80014ea:	4907      	ldr	r1, [pc, #28]	@ (8001508 <MX_FREERTOS_Init+0x24>)
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_FREERTOS_Init+0x28>)
 80014ee:	f001 fd8d 	bl	800300c <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014f2:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <MX_FREERTOS_Init+0x2c>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4807      	ldr	r0, [pc, #28]	@ (8001514 <MX_FREERTOS_Init+0x30>)
 80014f8:	f00c fa2a 	bl	800d950 <osThreadNew>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <MX_FREERTOS_Init+0x34>)
 8001500:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240049d0 	.word	0x240049d0
 800150c:	240003a4 	.word	0x240003a4
 8001510:	0801f020 	.word	0x0801f020
 8001514:	0800151d 	.word	0x0800151d
 8001518:	24004a20 	.word	0x24004a20

0800151c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800151c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001520:	b0ec      	sub	sp, #432	@ 0x1b0
 8001522:	af02      	add	r7, sp, #8
 8001524:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800152c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800152e:	4b62      	ldr	r3, [pc, #392]	@ (80016b8 <StartDefaultTask+0x19c>)
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4b62      	ldr	r3, [pc, #392]	@ (80016bc <StartDefaultTask+0x1a0>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b62      	ldr	r3, [pc, #392]	@ (80016c0 <StartDefaultTask+0x1a4>)
 8001538:	4a62      	ldr	r2, [pc, #392]	@ (80016c4 <StartDefaultTask+0x1a8>)
 800153a:	4963      	ldr	r1, [pc, #396]	@ (80016c8 <StartDefaultTask+0x1ac>)
 800153c:	2001      	movs	r0, #1
 800153e:	f010 f973 	bl	8011828 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001542:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001546:	4618      	mov	r0, r3
 8001548:	f010 f890 	bl	801166c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800154c:	4b5f      	ldr	r3, [pc, #380]	@ (80016cc <StartDefaultTask+0x1b0>)
 800154e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001552:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <StartDefaultTask+0x1b4>)
 8001554:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001558:	4b5e      	ldr	r3, [pc, #376]	@ (80016d4 <StartDefaultTask+0x1b8>)
 800155a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800155e:	4b5e      	ldr	r3, [pc, #376]	@ (80016d8 <StartDefaultTask+0x1bc>)
 8001560:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001564:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001568:	4618      	mov	r0, r3
 800156a:	f010 f88d 	bl	8011688 <rcutils_set_default_allocator>
 800156e:	4603      	mov	r3, r0
 8001570:	f083 0301 	eor.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800157a:	21c8      	movs	r1, #200	@ 0xc8
 800157c:	4857      	ldr	r0, [pc, #348]	@ (80016dc <StartDefaultTask+0x1c0>)
 800157e:	f01c fc53 	bl	801de28 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(2);
 8001582:	4b57      	ldr	r3, [pc, #348]	@ (80016e0 <StartDefaultTask+0x1c4>)
 8001584:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8001588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * uint16_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16);
 8001596:	f011 faf5 	bl	8012b84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>
 800159a:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

//	const rosidl_message_type_support_t * bool_type_support =
//	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool);

	const rosidl_message_type_support_t * float64_multi_arr_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray);
 800159e:	f011 fad9 	bl	8012b54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 80015a2:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194

	allocator = rcl_get_default_allocator();
 80015a6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015aa:	4618      	mov	r0, r3
 80015ac:	f010 f88a 	bl	80116c4 <rcutils_get_default_allocator>
 80015b0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015b8:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	682b      	ldr	r3, [r5, #0]
 80015c4:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00f fc83 	bl	8010ed4 <rclc_executor_get_zero_initialized_executor>
 80015ce:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015d2:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80015d6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80015da:	4611      	mov	r1, r2
 80015dc:	2288      	movs	r2, #136	@ 0x88
 80015de:	4618      	mov	r0, r3
 80015e0:	f01c fe6b 	bl	801e2ba <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80015e4:	f00e ff12 	bl	801040c <rcl_get_zero_initialized_init_options>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015f2:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80015f4:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80015f8:	466a      	mov	r2, sp
 80015fa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80015fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001602:	e882 0003 	stmia.w	r2, {r0, r1}
 8001606:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160c:	4620      	mov	r0, r4
 800160e:	f00e feff 	bl	8010410 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 8001612:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001616:	21c6      	movs	r1, #198	@ 0xc6
 8001618:	4618      	mov	r0, r3
 800161a:	f00e fff7 	bl	801060c <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800161e:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001622:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001626:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	f00f ff31 	bl	8011498 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 8001636:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800163a:	2200      	movs	r2, #0
 800163c:	4698      	mov	r8, r3
 800163e:	4691      	mov	r9, r2
 8001640:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001644:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001648:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <StartDefaultTask+0x1c8>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4642      	mov	r2, r8
 800164e:	464b      	mov	r3, r9
 8001650:	f00f ffd4 	bl	80115fc <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 8001654:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001658:	4a23      	ldr	r2, [pc, #140]	@ (80016e8 <StartDefaultTask+0x1cc>)
 800165a:	4924      	ldr	r1, [pc, #144]	@ (80016ec <StartDefaultTask+0x1d0>)
 800165c:	4824      	ldr	r0, [pc, #144]	@ (80016f0 <StartDefaultTask+0x1d4>)
 800165e:	f00f ff51 	bl	8011504 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&xrl8_publisher, &node, uint16_type_support, "accl_publisher");
 8001662:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <StartDefaultTask+0x1d8>)
 8001664:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001668:	4921      	ldr	r1, [pc, #132]	@ (80016f0 <StartDefaultTask+0x1d4>)
 800166a:	4823      	ldr	r0, [pc, #140]	@ (80016f8 <StartDefaultTask+0x1dc>)
 800166c:	f00f ff8c 	bl	8011588 <rclc_publisher_init_best_effort>
//	rclc_publisher_init_best_effort(&emer_publisher, &node, bool_type_support, "H7_Emergency");
	rclc_publisher_init_best_effort(&f64array_pub, &node, float64_multi_arr_type_support, "cubemx_imu_data");
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <StartDefaultTask+0x1e0>)
 8001672:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001676:	491e      	ldr	r1, [pc, #120]	@ (80016f0 <StartDefaultTask+0x1d4>)
 8001678:	4821      	ldr	r0, [pc, #132]	@ (8001700 <StartDefaultTask+0x1e4>)
 800167a:	f00f ff85 	bl	8011588 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 800167e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001682:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001686:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800168a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800168e:	f00f fc2b 	bl	8010ee8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 8001692:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8001696:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f00f fc9f 	bl	8010fe0 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 80016a2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00f feb4 	bl	8011414 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 80016ac:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80016b0:	f010 fec8 	bl	8012444 <rmw_uros_sync_session>

	for(;;)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <StartDefaultTask+0x198>
 80016b8:	08001309 	.word	0x08001309
 80016bc:	080012a5 	.word	0x080012a5
 80016c0:	08001285 	.word	0x08001285
 80016c4:	08001259 	.word	0x08001259
 80016c8:	24009a8c 	.word	0x24009a8c
 80016cc:	08001e99 	.word	0x08001e99
 80016d0:	08001edd 	.word	0x08001edd
 80016d4:	08001f15 	.word	0x08001f15
 80016d8:	08001f81 	.word	0x08001f81
 80016dc:	0801ef64 	.word	0x0801ef64
 80016e0:	001e8480 	.word	0x001e8480
 80016e4:	08001705 	.word	0x08001705
 80016e8:	0801ef8c 	.word	0x0801ef8c
 80016ec:	0801ef90 	.word	0x0801ef90
 80016f0:	240048a0 	.word	0x240048a0
 80016f4:	0801efa0 	.word	0x0801efa0
 80016f8:	240048a8 	.word	0x240048a8
 80016fc:	0801efb0 	.word	0x0801efb0
 8001700:	240048b0 	.word	0x240048b0

08001704 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d022      	beq.n	800175c <timer_callback+0x58>
		SensorsPublished();
 8001716:	f000 f82d 	bl	8001774 <SensorsPublished>
		if (uwTick >= sync_counter) {  // Sync session at lower frequency
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <timer_callback+0x60>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	461a      	mov	r2, r3
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <timer_callback+0x64>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d80d      	bhi.n	8001746 <timer_callback+0x42>
			rmw_uros_sync_session(1000);
 800172a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172e:	f010 fe89 	bl	8012444 <rmw_uros_sync_session>
			sync_counter += 1000;
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <timer_callback+0x60>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	b29b      	uxth	r3, r3
 800173a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <timer_callback+0x60>)
 8001744:	801a      	strh	r2, [r3, #0]
		}
		xlr8_publish(calculate_average(adc_buffer, BUFFER_SIZE));
 8001746:	2128      	movs	r1, #40	@ 0x28
 8001748:	4808      	ldr	r0, [pc, #32]	@ (800176c <timer_callback+0x68>)
 800174a:	f000 f993 	bl	8001a74 <calculate_average>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f96f 	bl	8001a34 <xlr8_publish>
		HAL_IWDG_Refresh(&hiwdg1);
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <timer_callback+0x6c>)
 8001758:	f005 fd2b 	bl	80071b2 <HAL_IWDG_Refresh>
	}

}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	24000024 	.word	0x24000024
 8001768:	24009c10 	.word	0x24009c10
 800176c:	240049d0 	.word	0x240049d0
 8001770:	240098a0 	.word	0x240098a0

08001774 <SensorsPublished>:

void SensorsPublished(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0


	// IMU_086 acceleration
	f64array_msg.data.data[0] = IMU_086_FRTOS.acceleration.x;
 8001778:	4ba4      	ldr	r3, [pc, #656]	@ (8001a0c <SensorsPublished+0x298>)
 800177a:	edd3 7a04 	vldr	s15, [r3, #16]
 800177e:	4ba4      	ldr	r3, [pc, #656]	@ (8001a10 <SensorsPublished+0x29c>)
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001786:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[1] = IMU_086_FRTOS.acceleration.y;
 800178a:	4ba0      	ldr	r3, [pc, #640]	@ (8001a0c <SensorsPublished+0x298>)
 800178c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001790:	4b9f      	ldr	r3, [pc, #636]	@ (8001a10 <SensorsPublished+0x29c>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	3308      	adds	r3, #8
 8001796:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800179a:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[2] = IMU_086_FRTOS.acceleration.z;
 800179e:	4b9b      	ldr	r3, [pc, #620]	@ (8001a0c <SensorsPublished+0x298>)
 80017a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80017a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a10 <SensorsPublished+0x29c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	3310      	adds	r3, #16
 80017aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ae:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 linear acceleration
	f64array_msg.data.data[3] = IMU_086_FRTOS.linear_acceleration.x;
 80017b2:	4b96      	ldr	r3, [pc, #600]	@ (8001a0c <SensorsPublished+0x298>)
 80017b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80017b8:	4b95      	ldr	r3, [pc, #596]	@ (8001a10 <SensorsPublished+0x29c>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	3318      	adds	r3, #24
 80017be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c2:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[4] = IMU_086_FRTOS.linear_acceleration.y;
 80017c6:	4b91      	ldr	r3, [pc, #580]	@ (8001a0c <SensorsPublished+0x298>)
 80017c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80017cc:	4b90      	ldr	r3, [pc, #576]	@ (8001a10 <SensorsPublished+0x29c>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	3320      	adds	r3, #32
 80017d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017d6:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[5] = IMU_086_FRTOS.linear_acceleration.z;
 80017da:	4b8c      	ldr	r3, [pc, #560]	@ (8001a0c <SensorsPublished+0x298>)
 80017dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001a10 <SensorsPublished+0x29c>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	3328      	adds	r3, #40	@ 0x28
 80017e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ea:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 angular velocity
	f64array_msg.data.data[6] = IMU_086_FRTOS.angular_velocity.x;
 80017ee:	4b87      	ldr	r3, [pc, #540]	@ (8001a0c <SensorsPublished+0x298>)
 80017f0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017f4:	4b86      	ldr	r3, [pc, #536]	@ (8001a10 <SensorsPublished+0x29c>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	3330      	adds	r3, #48	@ 0x30
 80017fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fe:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[7] = IMU_086_FRTOS.angular_velocity.y;
 8001802:	4b82      	ldr	r3, [pc, #520]	@ (8001a0c <SensorsPublished+0x298>)
 8001804:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001808:	4b81      	ldr	r3, [pc, #516]	@ (8001a10 <SensorsPublished+0x29c>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	3338      	adds	r3, #56	@ 0x38
 800180e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001812:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[8] = IMU_086_FRTOS.angular_velocity.z;
 8001816:	4b7d      	ldr	r3, [pc, #500]	@ (8001a0c <SensorsPublished+0x298>)
 8001818:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800181c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a10 <SensorsPublished+0x29c>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	3340      	adds	r3, #64	@ 0x40
 8001822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001826:	ed83 7b00 	vstr	d7, [r3]

	// IMU_086 magnetometer
	f64array_msg.data.data[9] = IMU_086_FRTOS.magnetometer.x;
 800182a:	4b78      	ldr	r3, [pc, #480]	@ (8001a0c <SensorsPublished+0x298>)
 800182c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001830:	4b77      	ldr	r3, [pc, #476]	@ (8001a10 <SensorsPublished+0x29c>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	3348      	adds	r3, #72	@ 0x48
 8001836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800183a:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[10] = IMU_086_FRTOS.magnetometer.y;
 800183e:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <SensorsPublished+0x298>)
 8001840:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001844:	4b72      	ldr	r3, [pc, #456]	@ (8001a10 <SensorsPublished+0x29c>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	3350      	adds	r3, #80	@ 0x50
 800184a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800184e:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[11] = IMU_086_FRTOS.magnetometer.z;
 8001852:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <SensorsPublished+0x298>)
 8001854:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001858:	4b6d      	ldr	r3, [pc, #436]	@ (8001a10 <SensorsPublished+0x29c>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	3358      	adds	r3, #88	@ 0x58
 800185e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001862:	ed83 7b00 	vstr	d7, [r3]

	// IMU_055 acceleration
	f64array_msg.data.data[12] = IMU_055_FRTOS.accel.x;
 8001866:	4b6a      	ldr	r3, [pc, #424]	@ (8001a10 <SensorsPublished+0x29c>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800186e:	4b69      	ldr	r3, [pc, #420]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001870:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001874:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[13] = IMU_055_FRTOS.accel.y;
 8001878:	4b65      	ldr	r3, [pc, #404]	@ (8001a10 <SensorsPublished+0x29c>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001880:	4b64      	ldr	r3, [pc, #400]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001886:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[14] = IMU_055_FRTOS.accel.z;
 800188a:	4b61      	ldr	r3, [pc, #388]	@ (8001a10 <SensorsPublished+0x29c>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8001892:	4b60      	ldr	r3, [pc, #384]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001894:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001898:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 linear acceleration
	f64array_msg.data.data[15] = IMU_055_FRTOS.lin_acc.x;
 800189c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a10 <SensorsPublished+0x29c>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80018a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001a14 <SensorsPublished+0x2a0>)
 80018a6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[16] = IMU_055_FRTOS.lin_acc.y;
 80018ae:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <SensorsPublished+0x29c>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <SensorsPublished+0x2a0>)
 80018b8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018bc:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[17] = IMU_055_FRTOS.lin_acc.z;
 80018c0:	4b53      	ldr	r3, [pc, #332]	@ (8001a10 <SensorsPublished+0x29c>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 80018c8:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <SensorsPublished+0x2a0>)
 80018ca:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018ce:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 gyro (angular velocity)
	f64array_msg.data.data[18] = IMU_055_FRTOS.gyro.x;
 80018d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a10 <SensorsPublished+0x29c>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80018da:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <SensorsPublished+0x2a0>)
 80018dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80018e0:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[19] = IMU_055_FRTOS.gyro.y;
 80018e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a10 <SensorsPublished+0x29c>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 80018ec:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <SensorsPublished+0x2a0>)
 80018ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[20] = IMU_055_FRTOS.gyro.z;
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <SensorsPublished+0x29c>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80018fe:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001900:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001904:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 magnetometer
	f64array_msg.data.data[21] = IMU_055_FRTOS.mag.x;
 8001908:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <SensorsPublished+0x29c>)
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8001910:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001916:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[22] = IMU_055_FRTOS.mag.y;
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <SensorsPublished+0x29c>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 8001922:	4b3c      	ldr	r3, [pc, #240]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001924:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001928:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[23] = IMU_055_FRTOS.mag.z;
 800192c:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <SensorsPublished+0x29c>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8001934:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001936:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193a:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 euler angles
	f64array_msg.data.data[24] = IMU_055_FRTOS.euler.roll;
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <SensorsPublished+0x29c>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001946:	4b33      	ldr	r3, [pc, #204]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001948:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800194c:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[25] = IMU_055_FRTOS.euler.pitch;
 8001950:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <SensorsPublished+0x29c>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <SensorsPublished+0x2a0>)
 800195a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[26] = IMU_055_FRTOS.euler.yaw;
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <SensorsPublished+0x29c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800196a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <SensorsPublished+0x2a0>)
 800196c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001970:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_086 quaternion
	f64array_msg.data.data[27] = IMU_086_FRTOS.quaternion.i;
 8001974:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <SensorsPublished+0x298>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <SensorsPublished+0x29c>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	33d8      	adds	r3, #216	@ 0xd8
 8001980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001984:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[28] = IMU_086_FRTOS.quaternion.j;
 8001988:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <SensorsPublished+0x298>)
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <SensorsPublished+0x29c>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	33e0      	adds	r3, #224	@ 0xe0
 8001994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001998:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[29] = IMU_086_FRTOS.quaternion.k;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <SensorsPublished+0x298>)
 800199e:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <SensorsPublished+0x29c>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	33e8      	adds	r3, #232	@ 0xe8
 80019a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ac:	ed83 7b00 	vstr	d7, [r3]
	f64array_msg.data.data[30] = IMU_086_FRTOS.quaternion.w;
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <SensorsPublished+0x298>)
 80019b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <SensorsPublished+0x29c>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	33f0      	adds	r3, #240	@ 0xf0
 80019bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c0:	ed83 7b00 	vstr	d7, [r3]

	// IMU_055 quaternion
	f64array_msg.data.data[31] = IMU_055_FRTOS.quat.x;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <SensorsPublished+0x29c>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f103 01f8 	add.w	r1, r3, #248	@ 0xf8
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <SensorsPublished+0x2a0>)
 80019ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[32] = IMU_055_FRTOS.quat.y;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <SensorsPublished+0x29c>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <SensorsPublished+0x2a0>)
 80019e0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80019e4:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[33] = IMU_055_FRTOS.quat.z;
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <SensorsPublished+0x29c>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <SensorsPublished+0x2a0>)
 80019f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80019f6:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[34] = IMU_055_FRTOS.quat.w;
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SensorsPublished+0x29c>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <SensorsPublished+0x2a0>)
 8001a04:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001a08:	e006      	b.n	8001a18 <SensorsPublished+0x2a4>
 8001a0a:	bf00      	nop
 8001a0c:	24009998 	.word	0x24009998
 8001a10:	24000008 	.word	0x24000008
 8001a14:	240098b0 	.word	0x240098b0
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]



    RCSOFTCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4903      	ldr	r1, [pc, #12]	@ (8001a2c <SensorsPublished+0x2b8>)
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <SensorsPublished+0x2bc>)
 8001a22:	f00e fec9 	bl	80107b8 <rcl_publish>

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000008 	.word	0x24000008
 8001a30:	240048b0 	.word	0x240048b0

08001a34 <xlr8_publish>:

void xlr8_publish(uint16_t xlr8)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	XRL8_msg.data = xlr8;
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <xlr8_publish+0x34>)
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	8013      	strh	r3, [r2, #0]
	rcl_ret_t ret = rcl_publish(&xrl8_publisher, &XRL8_msg, NULL);
 8001a44:	2200      	movs	r2, #0
 8001a46:	4908      	ldr	r1, [pc, #32]	@ (8001a68 <xlr8_publish+0x34>)
 8001a48:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <xlr8_publish+0x38>)
 8001a4a:	f00e feb5 	bl	80107b8 <rcl_publish>
 8001a4e:	60f8      	str	r0, [r7, #12]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <xlr8_publish+0x2c>
 8001a56:	f240 1161 	movw	r1, #353	@ 0x161
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <xlr8_publish+0x3c>)
 8001a5c:	f01c f9e4 	bl	801de28 <iprintf>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	240048ac 	.word	0x240048ac
 8001a6c:	240048a8 	.word	0x240048a8
 8001a70:	0801efc0 	.word	0x0801efc0

08001a74 <calculate_average>:

uint16_t calculate_average(uint16_t *buffer, uint16_t length) {
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
    uint32_t sum = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	e00b      	b.n	8001aa2 <calculate_average+0x2e>
        sum += buffer[i];
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < length; i++) {
 8001a9c:	897b      	ldrh	r3, [r7, #10]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	897a      	ldrh	r2, [r7, #10]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3ef      	bcc.n	8001a8a <calculate_average+0x16>
    }
    return (uint16_t)(sum / length);
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001adc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afa:	4a48      	ldr	r2, [pc, #288]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b04:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b18:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	4a39      	ldr	r2, [pc, #228]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b40:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <MX_GPIO_Init+0x15c>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001b6c:	2332      	movs	r3, #50	@ 0x32
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b7c:	230b      	movs	r3, #11
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4826      	ldr	r0, [pc, #152]	@ (8001c20 <MX_GPIO_Init+0x160>)
 8001b88:	f005 f8d4 	bl	8006d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001b8c:	2386      	movs	r3, #134	@ 0x86
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9c:	230b      	movs	r3, #11
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <MX_GPIO_Init+0x164>)
 8001ba8:	f005 f8c4 	bl	8006d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bbe:	230b      	movs	r3, #11
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4817      	ldr	r0, [pc, #92]	@ (8001c28 <MX_GPIO_Init+0x168>)
 8001bca:	f005 f8b3 	bl	8006d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001bce:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001be0:	230a      	movs	r3, #10
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	480e      	ldr	r0, [pc, #56]	@ (8001c24 <MX_GPIO_Init+0x164>)
 8001bec:	f005 f8a2 	bl	8006d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001bf0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c02:	230b      	movs	r3, #11
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <MX_GPIO_Init+0x16c>)
 8001c0e:	f005 f891 	bl	8006d34 <HAL_GPIO_Init>

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020000 	.word	0x58020000
 8001c28:	58020400 	.word	0x58020400
 8001c2c:	58021800 	.word	0x58021800

08001c30 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <MX_IWDG1_Init+0x34>)
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <MX_IWDG1_Init+0x38>)
 8001c38:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <MX_IWDG1_Init+0x34>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MX_IWDG1_Init+0x34>)
 8001c42:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c46:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_IWDG1_Init+0x34>)
 8001c4a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001c4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_IWDG1_Init+0x34>)
 8001c52:	f005 fa5f 	bl	8007114 <HAL_IWDG_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001c5c:	f000 f916 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240098a0 	.word	0x240098a0
 8001c68:	58004800 	.word	0x58004800

08001c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c76:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c78:	bf00      	nop
 8001c7a:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <main+0xd4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <main+0x24>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dcf4      	bgt.n	8001c7a <main+0xe>
  if ( timeout < 0 )
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da01      	bge.n	8001c9a <main+0x2e>
  {
  Error_Handler();
 8001c96:	f000 f8f9 	bl	8001e8c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9a:	f000 fdc5 	bl	8002828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9e:	f000 f853 	bl	8001d48 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <main+0xd4>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <main+0xd4>)
 8001caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb2:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <main+0xd4>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f005 fa15 	bl	80070f0 <HAL_HSEM_ActivateNotification>
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f005 fa12 	bl	80070f0 <HAL_HSEM_ActivateNotification>
/*Take HSEM0 */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f005 f9e1 	bl	8007094 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f005 f9f7 	bl	80070c8 <HAL_HSEM_Release>
/*Take HSEM1 */
HAL_HSEM_FastTake(HSEM_ID_1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f005 f9da 	bl	8007094 <HAL_HSEM_FastTake>
///*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_1,0);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f005 f9f0 	bl	80070c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cec:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001cee:	bf00      	nop
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <main+0xd4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d104      	bne.n	8001d06 <main+0x9a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dcf4      	bgt.n	8001cf0 <main+0x84>
if ( timeout < 0 )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da01      	bge.n	8001d10 <main+0xa4>
{
Error_Handler();
 8001d0c:	f000 f8be 	bl	8001e8c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d10:	f7ff fed6 	bl	8001ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d14:	f7ff fa70 	bl	80011f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d18:	f7fe fef4 	bl	8000b04 <MX_ADC1_Init>
  MX_IWDG1_Init();
 8001d1c:	f7ff ff88 	bl	8001c30 <MX_IWDG1_Init>
  MX_TIM5_Init();
 8001d20:	f000 fbbc 	bl	800249c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001d24:	f000 fc30 	bl	8002588 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8001d28:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <main+0xd8>)
 8001d2a:	f009 f82b 	bl	800ad84 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d2e:	f00b fdc5 	bl	800d8bc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d32:	f7ff fbd7 	bl	80014e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d36:	f00b fde5 	bl	800d904 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <main+0xce>
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	24009a40 	.word	0x24009a40

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b09c      	sub	sp, #112	@ 0x70
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d52:	224c      	movs	r2, #76	@ 0x4c
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f01c f9e6 	bl	801e128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f01c f9e0 	bl	801e128 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f005 fa33 	bl	80071d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <SystemClock_Config+0xf8>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	4a32      	ldr	r2, [pc, #200]	@ (8001e40 <SystemClock_Config+0xf8>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001d7e:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <SystemClock_Config+0xf8>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <SystemClock_Config+0xfc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d90:	4a2c      	ldr	r2, [pc, #176]	@ (8001e44 <SystemClock_Config+0xfc>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <SystemClock_Config+0xfc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001da4:	bf00      	nop
 8001da6:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <SystemClock_Config+0xfc>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db2:	d1f8      	bne.n	8001da6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001db4:	230a      	movs	r3, #10
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dbc:	2340      	movs	r3, #64	@ 0x40
 8001dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8001dd0:	2315      	movs	r3, #21
 8001dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001de0:	230c      	movs	r3, #12
 8001de2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8001de8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fa48 	bl	8007288 <HAL_RCC_OscConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001dfe:	f000 f845 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e02:	233f      	movs	r3, #63	@ 0x3f
 8001e04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e12:	2340      	movs	r3, #64	@ 0x40
 8001e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001e16:	2350      	movs	r3, #80	@ 0x50
 8001e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e20:	2340      	movs	r3, #64	@ 0x40
 8001e22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2103      	movs	r1, #3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fe87 	bl	8007b3c <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001e34:	f000 f82a 	bl	8001e8c <Error_Handler>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3770      	adds	r7, #112	@ 0x70
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58000400 	.word	0x58000400
 8001e44:	58024800 	.word	0x58024800

08001e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5a:	f000 fd21 	bl	80028a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim5){
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a07      	ldr	r2, [pc, #28]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  BNO086_READ_HSEM(&IMU_086_FRTOS);
 8001e66:	4807      	ldr	r0, [pc, #28]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e68:	f7fe fcf4 	bl	8000854 <BNO086_READ_HSEM>
	  BNO055_READ_HSEM(&IMU_055_FRTOS);
 8001e6c:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e6e:	f7fe fc67 	bl	8000740 <BNO055_READ_HSEM>
  }
  /* USER CODE END Callback 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	24009a40 	.word	0x24009a40
 8001e84:	24009998 	.word	0x24009998
 8001e88:	240098b0 	.word	0x240098b0

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <Error_Handler+0x8>

08001e98 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <microros_allocate+0x3c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <microros_allocate+0x3c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <microros_allocate+0x40>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <microros_allocate+0x40>)
 8001ec0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe ff48 	bl	8000d58 <pvPortMallocMicroROS>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	240099e4 	.word	0x240099e4
 8001ed8:	240099e8 	.word	0x240099e8

08001edc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff f857 	bl	8000fa0 <getBlockSize>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <microros_deallocate+0x34>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <microros_deallocate+0x34>)
 8001efe:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fff1 	bl	8000ee8 <vPortFreeMicroROS>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	240099e8 	.word	0x240099e8

08001f14 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <microros_reallocate+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <microros_reallocate+0x64>)
 8001f2e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <microros_reallocate+0x68>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <microros_reallocate+0x68>)
 8001f3e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f7fe ff06 	bl	8000d58 <pvPortMallocMicroROS>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	e00e      	b.n	8001f6e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff f825 	bl	8000fa0 <getBlockSize>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <microros_reallocate+0x68>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <microros_reallocate+0x68>)
 8001f62:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff f838 	bl	8000fdc <pvPortReallocMicroROS>
 8001f6c:	4603      	mov	r3, r0
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	240099e4 	.word	0x240099e4
 8001f7c:	240099e8 	.word	0x240099e8

08001f80 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc8 <microros_zero_allocate+0x48>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <microros_zero_allocate+0x48>)
 8001f9e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <microros_zero_allocate+0x4c>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <microros_zero_allocate+0x4c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff f83d 	bl	8001036 <pvPortCallocMicroROS>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	240099e4 	.word	0x240099e4
 8001fcc:	240099e8 	.word	0x240099e8

08001fd0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe6:	a320      	add	r3, pc, #128	@ (adr r3, 8002068 <UTILS_NanosecondsToTimespec+0x98>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe f9e0 	bl	80003b0 <__aeabi_ldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002068 <UTILS_NanosecondsToTimespec+0x98>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe f9d4 	bl	80003b0 <__aeabi_ldivmod>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da20      	bge.n	8002056 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <UTILS_NanosecondsToTimespec+0x90>)
 800201a:	fb82 1203 	smull	r1, r2, r2, r3
 800201e:	1712      	asrs	r2, r2, #28
 8002020:	17db      	asrs	r3, r3, #31
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	6979      	ldr	r1, [r7, #20]
 8002030:	17c8      	asrs	r0, r1, #31
 8002032:	460c      	mov	r4, r1
 8002034:	4605      	mov	r5, r0
 8002036:	ebb2 0804 	subs.w	r8, r2, r4
 800203a:	eb63 0905 	sbc.w	r9, r3, r5
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	4906      	ldr	r1, [pc, #24]	@ (8002064 <UTILS_NanosecondsToTimespec+0x94>)
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]
    }
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002060:	44b82fa1 	.word	0x44b82fa1
 8002064:	3b9aca00 	.word	0x3b9aca00
 8002068:	3b9aca00 	.word	0x3b9aca00
 800206c:	00000000 	.word	0x00000000

08002070 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b08e      	sub	sp, #56	@ 0x38
 8002076:	af00      	add	r7, sp, #0
 8002078:	6278      	str	r0, [r7, #36]	@ 0x24
 800207a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800207c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002096:	4618      	mov	r0, r3
 8002098:	f00d fbf8 	bl	800f88c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	17da      	asrs	r2, r3, #31
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	61fa      	str	r2, [r7, #28]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	000b      	movs	r3, r1
 80020b0:	2200      	movs	r2, #0
 80020b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	2200      	movs	r2, #0
 80020ba:	461c      	mov	r4, r3
 80020bc:	4615      	mov	r5, r2
 80020be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020c2:	1911      	adds	r1, r2, r4
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	416b      	adcs	r3, r5
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80020d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	f04f 0500 	mov.w	r5, #0
 80020e2:	015d      	lsls	r5, r3, #5
 80020e4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80020e8:	0154      	lsls	r4, r2, #5
 80020ea:	4622      	mov	r2, r4
 80020ec:	462b      	mov	r3, r5
 80020ee:	ebb2 0800 	subs.w	r8, r2, r0
 80020f2:	eb63 0901 	sbc.w	r9, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002102:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002106:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800210a:	4690      	mov	r8, r2
 800210c:	4699      	mov	r9, r3
 800210e:	eb18 0a00 	adds.w	sl, r8, r0
 8002112:	eb49 0b01 	adc.w	fp, r9, r1
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002122:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002126:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800212a:	ebb2 040a 	subs.w	r4, r2, sl
 800212e:	603c      	str	r4, [r7, #0]
 8002130:	eb63 030b 	sbc.w	r3, r3, fp
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213a:	4623      	mov	r3, r4
 800213c:	181b      	adds	r3, r3, r0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	462b      	mov	r3, r5
 8002142:	eb41 0303 	adc.w	r3, r1, r3
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800214e:	f7ff ff3f 	bl	8001fd0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002152:	2300      	movs	r3, #0
 8002154:	4618      	mov	r0, r3
 8002156:	3738      	adds	r7, #56	@ 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_MspInit+0x38>)
 8002168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_MspInit+0x38>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_MspInit+0x38>)
 8002178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	210f      	movs	r1, #15
 8002188:	f06f 0001 	mvn.w	r0, #1
 800218c:	f001 ff62 	bl	8004054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400

0800219c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	@ 0x38
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	d844      	bhi.n	8002234 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	2019      	movs	r0, #25
 80021b0:	f001 ff50 	bl	8004054 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021b4:	2019      	movs	r0, #25
 80021b6:	f001 ff67 	bl	8004088 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80021ba:	4a24      	ldr	r2, [pc, #144]	@ (800224c <HAL_InitTick+0xb0>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021c0:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <HAL_InitTick+0xb4>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <HAL_InitTick+0xb4>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_InitTick+0xb4>)
 80021d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 f833 	bl	8008254 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021ee:	f006 f81b 	bl	8008228 <HAL_RCC_GetPCLK2Freq>
 80021f2:	4603      	mov	r3, r0
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fa:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <HAL_InitTick+0xb8>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	3b01      	subs	r3, #1
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_InitTick+0xbc>)
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <HAL_InitTick+0xc0>)
 800220a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0xbc>)
 800220e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002212:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002214:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <HAL_InitTick+0xbc>)
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800221a:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <HAL_InitTick+0xbc>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_InitTick+0xbc>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002226:	480c      	ldr	r0, [pc, #48]	@ (8002258 <HAL_InitTick+0xbc>)
 8002228:	f008 fd54 	bl	800acd4 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_InitTick+0xa6>
 8002232:	e001      	b.n	8002238 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e005      	b.n	8002244 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002238:	4807      	ldr	r0, [pc, #28]	@ (8002258 <HAL_InitTick+0xbc>)
 800223a:	f008 fda3 	bl	800ad84 <HAL_TIM_Base_Start_IT>
 800223e:	4603      	mov	r3, r0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3738      	adds	r7, #56	@ 0x38
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2400002c 	.word	0x2400002c
 8002250:	58024400 	.word	0x58024400
 8002254:	431bde83 	.word	0x431bde83
 8002258:	240099ec 	.word	0x240099ec
 800225c:	40010000 	.word	0x40010000

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <NMI_Handler+0x4>

08002268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <MemManage_Handler+0x4>

08002278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <UsageFault_Handler+0x4>

08002288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA1_Stream0_IRQHandler+0x10>)
 800229e:	f003 fa2b 	bl	80056f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	24000408 	.word	0x24000408

080022ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA1_Stream3_IRQHandler+0x10>)
 80022b2:	f003 fa21 	bl	80056f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24009b20 	.word	0x24009b20

080022c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA1_Stream4_IRQHandler+0x10>)
 80022c6:	f003 fa17 	bl	80056f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24009b98 	.word	0x24009b98

080022d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <TIM1_UP_IRQHandler+0x10>)
 80022da:	f008 fdcb 	bl	800ae74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	240099ec 	.word	0x240099ec

080022e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <USART3_IRQHandler+0x10>)
 80022ee:	f009 fb8b 	bl	800ba08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24009a8c 	.word	0x24009a8c

080022fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <TIM5_IRQHandler+0x10>)
 8002302:	f008 fdb7 	bl	800ae74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	24009a40 	.word	0x24009a40

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_kill>:

int _kill(int pid, int sig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232a:	f01b ff91 	bl	801e250 <__errno>
 800232e:	4603      	mov	r3, r0
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
  return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002352:	bf00      	nop
 8002354:	e7fd      	b.n	8002352 <_exit+0x12>

08002356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e00a      	b.n	800237e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002368:	f3af 8000 	nop.w
 800236c:	4601      	mov	r1, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf0      	blt.n	8002368 <_read+0x12>
  }

  return len;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e009      	b.n	80023b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbf1      	blt.n	80023a2 <_write+0x12>
  }
  return len;
 80023be:	687b      	ldr	r3, [r7, #4]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_close>:

int _close(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_isatty>:

int _isatty(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f01b fef6 	bl	801e250 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	24080000 	.word	0x24080000
 8002490:	00000400 	.word	0x00000400
 8002494:	24009a3c 	.word	0x24009a3c
 8002498:	240131c0 	.word	0x240131c0

0800249c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <MX_TIM5_Init+0x98>)
 80024be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024c2:	22a9      	movs	r2, #169	@ 0xa9
 80024c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024e0:	4813      	ldr	r0, [pc, #76]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024e2:	f008 fbf7 	bl	800acd4 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80024ec:	f7ff fcce 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	@ (8002530 <MX_TIM5_Init+0x94>)
 80024fe:	f008 fdc1 	bl	800b084 <HAL_TIM_ConfigClockSource>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002508:	f7ff fcc0 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_TIM5_Init+0x94>)
 800251a:	f009 f817 	bl	800b54c <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002524:	f7ff fcb2 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	24009a40 	.word	0x24009a40
 8002534:	40000c00 	.word	0x40000c00

08002538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0e      	ldr	r2, [pc, #56]	@ (8002580 <HAL_TIM_Base_MspInit+0x48>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d116      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_TIM_Base_MspInit+0x4c>)
 800254c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002550:	4a0c      	ldr	r2, [pc, #48]	@ (8002584 <HAL_TIM_Base_MspInit+0x4c>)
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_TIM_Base_MspInit+0x4c>)
 800255c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2105      	movs	r1, #5
 800256c:	2032      	movs	r0, #50	@ 0x32
 800256e:	f001 fd71 	bl	8004054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002572:	2032      	movs	r0, #50	@ 0x32
 8002574:	f001 fd88 	bl	8004088 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40000c00 	.word	0x40000c00
 8002584:	58024400 	.word	0x58024400

08002588 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 800258e:	4a23      	ldr	r2, [pc, #140]	@ (800261c <MX_USART3_UART_Init+0x94>)
 8002590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8002592:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 8002594:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <MX_USART3_UART_Init+0x98>)
 8002596:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025ac:	220c      	movs	r2, #12
 80025ae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ce:	4812      	ldr	r0, [pc, #72]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025d0:	f009 f868 	bl	800b6a4 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80025da:	f7ff fc57 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025de:	2100      	movs	r1, #0
 80025e0:	480d      	ldr	r0, [pc, #52]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025e2:	f00b f85d 	bl	800d6a0 <HAL_UARTEx_SetTxFifoThreshold>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80025ec:	f7ff fc4e 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	4809      	ldr	r0, [pc, #36]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 80025f4:	f00b f892 	bl	800d71c <HAL_UARTEx_SetRxFifoThreshold>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80025fe:	f7ff fc45 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <MX_USART3_UART_Init+0x90>)
 8002604:	f00b f813 	bl	800d62e <HAL_UARTEx_DisableFifoMode>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800260e:	f7ff fc3d 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	24009a8c 	.word	0x24009a8c
 800261c:	40004800 	.word	0x40004800
 8002620:	001e8480 	.word	0x001e8480

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0ba      	sub	sp, #232	@ 0xe8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	22c0      	movs	r2, #192	@ 0xc0
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f01b fd6f 	bl	801e128 <memset>
  if(uartHandle->Instance==USART3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5a      	ldr	r2, [pc, #360]	@ (80027b8 <HAL_UART_MspInit+0x194>)
 8002650:	4293      	cmp	r3, r2
 8002652:	f040 80ac 	bne.w	80027ae <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002656:	f04f 0202 	mov.w	r2, #2
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	4618      	mov	r0, r3
 800266e:	f005 fe33 	bl	80082d8 <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002678:	f7ff fc08 	bl	8001e8c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800267c:	4b4f      	ldr	r3, [pc, #316]	@ (80027bc <HAL_UART_MspInit+0x198>)
 800267e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002682:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_UART_MspInit+0x198>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800268c:	4b4b      	ldr	r3, [pc, #300]	@ (80027bc <HAL_UART_MspInit+0x198>)
 800268e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800269a:	4b48      	ldr	r3, [pc, #288]	@ (80027bc <HAL_UART_MspInit+0x198>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	4a46      	ldr	r2, [pc, #280]	@ (80027bc <HAL_UART_MspInit+0x198>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026aa:	4b44      	ldr	r3, [pc, #272]	@ (80027bc <HAL_UART_MspInit+0x198>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026d2:	2307      	movs	r3, #7
 80026d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026dc:	4619      	mov	r1, r3
 80026de:	4838      	ldr	r0, [pc, #224]	@ (80027c0 <HAL_UART_MspInit+0x19c>)
 80026e0:	f004 fb28 	bl	8006d34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream3;
 80026e4:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 80026e6:	4a38      	ldr	r2, [pc, #224]	@ (80027c8 <HAL_UART_MspInit+0x1a4>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80026ea:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 80026ec:	222d      	movs	r2, #45	@ 0x2d
 80026ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f0:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f6:	4b33      	ldr	r3, [pc, #204]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026fc:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 80026fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002702:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270a:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002710:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002718:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800271c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002720:	2200      	movs	r2, #0
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002724:	4827      	ldr	r0, [pc, #156]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002726:	f001 fcbd 	bl	80040a4 <HAL_DMA_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002730:	f7ff fbac 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a23      	ldr	r2, [pc, #140]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 8002738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800273c:	4a21      	ldr	r2, [pc, #132]	@ (80027c4 <HAL_UART_MspInit+0x1a0>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_UART_MspInit+0x1ac>)
 8002746:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002748:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 800274a:	222e      	movs	r2, #46	@ 0x2e
 800274c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800274e:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002750:	2240      	movs	r2, #64	@ 0x40
 8002752:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 800275c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002760:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002774:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002776:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800277a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002782:	4812      	ldr	r0, [pc, #72]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002784:	f001 fc8e 	bl	80040a4 <HAL_DMA_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800278e:	f7ff fb7d 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 8002796:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002798:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <HAL_UART_MspInit+0x1a8>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2105      	movs	r1, #5
 80027a2:	2027      	movs	r0, #39	@ 0x27
 80027a4:	f001 fc56 	bl	8004054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027a8:	2027      	movs	r0, #39	@ 0x27
 80027aa:	f001 fc6d 	bl	8004088 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027ae:	bf00      	nop
 80027b0:	37e8      	adds	r7, #232	@ 0xe8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40004800 	.word	0x40004800
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58020c00 	.word	0x58020c00
 80027c4:	24009b20 	.word	0x24009b20
 80027c8:	40020058 	.word	0x40020058
 80027cc:	24009b98 	.word	0x24009b98
 80027d0:	40020070 	.word	0x40020070

080027d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800280c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d8:	f7fe f8fe 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027de:	490d      	ldr	r1, [pc, #52]	@ (8002814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002802:	f01b fd2b 	bl	801e25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002806:	f7ff fa31 	bl	8001c6c <main>
  bx  lr
 800280a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800280c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002810:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002814:	24000388 	.word	0x24000388
  ldr r2, =_sidata
 8002818:	0801ffa0 	.word	0x0801ffa0
  ldr r2, =_sbss
 800281c:	24000388 	.word	0x24000388
  ldr r4, =_ebss
 8002820:	240131c0 	.word	0x240131c0

08002824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC3_IRQHandler>
	...

08002828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282e:	2003      	movs	r0, #3
 8002830:	f001 fc05 	bl	800403e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002834:	f005 fb38 	bl	8007ea8 <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_Init+0x68>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4913      	ldr	r1, [pc, #76]	@ (8002894 <HAL_Init+0x6c>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <HAL_Init+0x68>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a0e      	ldr	r2, [pc, #56]	@ (8002894 <HAL_Init+0x6c>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_Init+0x70>)
 800286a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_Init+0x74>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002872:	200f      	movs	r0, #15
 8002874:	f7ff fc92 	bl	800219c <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e002      	b.n	8002888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002882:	f7ff fc6d 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58024400 	.word	0x58024400
 8002894:	0801f010 	.word	0x0801f010
 8002898:	24000004 	.word	0x24000004
 800289c:	24000000 	.word	0x24000000

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	24000030 	.word	0x24000030
 80028c4:	24009c10 	.word	0x24009c10

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	24009c10 	.word	0x24009c10

080028e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_GetREVID+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0c1b      	lsrs	r3, r3, #16
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	5c001000 	.word	0x5c001000

080028f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3360      	adds	r3, #96	@ 0x60
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	611a      	str	r2, [r3, #16]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3360      	adds	r3, #96	@ 0x60
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	601a      	str	r2, [r3, #0]
  }
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b087      	sub	sp, #28
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3330      	adds	r3, #48	@ 0x30
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	4413      	add	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	211f      	movs	r1, #31
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 011f 	and.w	r1, r3, #31
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	431a      	orrs	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3314      	adds	r3, #20
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0e5b      	lsrs	r3, r3, #25
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0d1b      	lsrs	r3, r3, #20
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2107      	movs	r1, #7
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0d1b      	lsrs	r3, r3, #20
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	401a      	ands	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0318 	and.w	r3, r3, #24
 8002b26:	4908      	ldr	r1, [pc, #32]	@ (8002b48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b28:	40d9      	lsrs	r1, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	000fffff 	.word	0x000fffff

08002b4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6093      	str	r3, [r2, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	5fffffc0 	.word	0x5fffffc0

08002b8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba0:	d101      	bne.n	8002ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	6fffffc0 	.word	0x6fffffc0

08002bdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <LL_ADC_Enable+0x24>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	7fffffc0 	.word	0x7fffffc0

08002c2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_IsEnabled+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_IsEnabled+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <LL_ADC_REG_StartConversion+0x24>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	7fffffc0 	.word	0x7fffffc0

08002c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d101      	bne.n	8002c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d101      	bne.n	8002cba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e18f      	b.n	8003002 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd ff8b 	bl	8000c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff3f 	bl	8002b8c <LL_ADC_IsDeepPowerDownEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff25 	bl	8002b68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff5a 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d114      	bne.n	8002d58 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff3e 	bl	8002bb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d38:	4b87      	ldr	r3, [pc, #540]	@ (8002f58 <HAL_ADC_Init+0x290>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	4a87      	ldr	r2, [pc, #540]	@ (8002f5c <HAL_ADC_Init+0x294>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	3301      	adds	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff3d 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f043 0210 	orr.w	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff77 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002d8e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 8129 	bne.w	8002ff0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 8125 	bne.w	8002ff0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff36 	bl	8002c2c <LL_ADC_IsEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d136      	bne.n	8002e34 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a65      	ldr	r2, [pc, #404]	@ (8002f60 <HAL_ADC_Init+0x298>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x112>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a63      	ldr	r2, [pc, #396]	@ (8002f64 <HAL_ADC_Init+0x29c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10e      	bne.n	8002df8 <HAL_ADC_Init+0x130>
 8002dda:	4861      	ldr	r0, [pc, #388]	@ (8002f60 <HAL_ADC_Init+0x298>)
 8002ddc:	f7ff ff26 	bl	8002c2c <LL_ADC_IsEnabled>
 8002de0:	4604      	mov	r4, r0
 8002de2:	4860      	ldr	r0, [pc, #384]	@ (8002f64 <HAL_ADC_Init+0x29c>)
 8002de4:	f7ff ff22 	bl	8002c2c <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e008      	b.n	8002e0a <HAL_ADC_Init+0x142>
 8002df8:	485b      	ldr	r0, [pc, #364]	@ (8002f68 <HAL_ADC_Init+0x2a0>)
 8002dfa:	f7ff ff17 	bl	8002c2c <LL_ADC_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a53      	ldr	r2, [pc, #332]	@ (8002f60 <HAL_ADC_Init+0x298>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x15a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	@ (8002f64 <HAL_ADC_Init+0x29c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Init+0x15e>
 8002e22:	4a52      	ldr	r2, [pc, #328]	@ (8002f6c <HAL_ADC_Init+0x2a4>)
 8002e24:	e000      	b.n	8002e28 <HAL_ADC_Init+0x160>
 8002e26:	4a52      	ldr	r2, [pc, #328]	@ (8002f70 <HAL_ADC_Init+0x2a8>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7ff fd62 	bl	80028f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e34:	f7ff fd54 	bl	80028e0 <HAL_GetREVID>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d914      	bls.n	8002e6c <HAL_ADC_Init+0x1a4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d110      	bne.n	8002e6c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7d5b      	ldrb	r3, [r3, #21]
 8002e4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e54:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e5a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7f1b      	ldrb	r3, [r3, #28]
 8002e60:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e62:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e64:	f043 030c 	orr.w	r3, r3, #12
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e00d      	b.n	8002e88 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7d5b      	ldrb	r3, [r3, #21]
 8002e70:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e76:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e7c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f1b      	ldrb	r3, [r3, #28]
 8002e82:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7f1b      	ldrb	r3, [r3, #28]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	045b      	lsls	r3, r3, #17
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <HAL_ADC_Init+0x2ac>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fed2 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fedf 	bl	8002ca2 <LL_ADC_INJ_IsConversionOngoing>
 8002ee4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15f      	bne.n	8002fac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d15c      	bne.n	8002fac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7d1b      	ldrb	r3, [r3, #20]
 8002ef6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <HAL_ADC_Init+0x2b0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d130      	bne.n	8002f80 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <HAL_ADC_Init+0x2b4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f32:	3a01      	subs	r2, #1
 8002f34:	0411      	lsls	r1, r2, #16
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f46:	430a      	orrs	r2, r1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	e01c      	b.n	8002f90 <HAL_ADC_Init+0x2c8>
 8002f56:	bf00      	nop
 8002f58:	24000000 	.word	0x24000000
 8002f5c:	053e2d63 	.word	0x053e2d63
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40022100 	.word	0x40022100
 8002f68:	58026000 	.word	0x58026000
 8002f6c:	40022300 	.word	0x40022300
 8002f70:	58026300 	.word	0x58026300
 8002f74:	fff0c003 	.word	0xfff0c003
 8002f78:	ffffbffc 	.word	0xffffbffc
 8002f7c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fd8c 	bl	8003ac4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10c      	bne.n	8002fce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f023 010f 	bic.w	r1, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fcc:	e007      	b.n	8002fde <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020f 	bic.w	r2, r2, #15
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fee:	e007      	b.n	8003000 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003000:	7ffb      	ldrb	r3, [r7, #31]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	@ 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a55      	ldr	r2, [pc, #340]	@ (8003174 <HAL_ADC_Start_DMA+0x168>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_ADC_Start_DMA+0x20>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a54      	ldr	r2, [pc, #336]	@ (8003178 <HAL_ADC_Start_DMA+0x16c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_ADC_Start_DMA+0x24>
 800302c:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_ADC_Start_DMA+0x170>)
 800302e:	e000      	b.n	8003032 <HAL_ADC_Start_DMA+0x26>
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_ADC_Start_DMA+0x174>)
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fd8a 	bl	8002b4c <LL_ADC_GetMultimode>
 8003038:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe1c 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 808c 	bne.w	8003164 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_ADC_Start_DMA+0x4e>
 8003056:	2302      	movs	r3, #2
 8003058:	e087      	b.n	800316a <HAL_ADC_Start_DMA+0x15e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d002      	beq.n	8003074 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d170      	bne.n	8003156 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fc07 	bl	8003888 <ADC_Enable>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d163      	bne.n	800314c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003088:	4b3e      	ldr	r3, [pc, #248]	@ (8003184 <HAL_ADC_Start_DMA+0x178>)
 800308a:	4013      	ands	r3, r2
 800308c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a37      	ldr	r2, [pc, #220]	@ (8003178 <HAL_ADC_Start_DMA+0x16c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start_DMA+0x98>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_Start_DMA+0x9a>
 80030a4:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <HAL_ADC_Start_DMA+0x168>)
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d002      	beq.n	80030b4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f023 0206 	bic.w	r2, r3, #6
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e4:	4a28      	ldr	r2, [pc, #160]	@ (8003188 <HAL_ADC_Start_DMA+0x17c>)
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	4a27      	ldr	r2, [pc, #156]	@ (800318c <HAL_ADC_Start_DMA+0x180>)
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f4:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <HAL_ADC_Start_DMA+0x184>)
 80030f6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	221c      	movs	r2, #28
 80030fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0210 	orr.w	r2, r2, #16
 8003116:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f7ff fcaf 	bl	8002a86 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3340      	adds	r3, #64	@ 0x40
 8003132:	4619      	mov	r1, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f001 fb10 	bl	800475c <HAL_DMA_Start_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fd85 	bl	8002c54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800314a:	e00d      	b.n	8003168 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003154:	e008      	b.n	8003168 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003162:	e001      	b.n	8003168 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40022000 	.word	0x40022000
 8003178:	40022100 	.word	0x40022100
 800317c:	40022300 	.word	0x40022300
 8003180:	58026300 	.word	0x58026300
 8003184:	fffff0fe 	.word	0xfffff0fe
 8003188:	0800399d 	.word	0x0800399d
 800318c:	08003a75 	.word	0x08003a75
 8003190:	08003a91 	.word	0x08003a91

08003194 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b0a1      	sub	sp, #132	@ 0x84
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a65      	ldr	r2, [pc, #404]	@ (8003380 <HAL_ADC_ConfigChannel+0x1b0>)
 80031ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x2a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e32e      	b.n	8003858 <HAL_ADC_ConfigChannel+0x688>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fd38 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8313 	bne.w	800383a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db2c      	blt.n	8003276 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003224:	2b00      	cmp	r3, #0
 8003226:	d108      	bne.n	800323a <HAL_ADC_ConfigChannel+0x6a>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2201      	movs	r2, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	e016      	b.n	8003268 <HAL_ADC_ConfigChannel+0x98>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800324a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800324c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e003      	b.n	800325e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003256:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	69d1      	ldr	r1, [r2, #28]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	430b      	orrs	r3, r1
 8003274:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	f7ff fbd3 	bl	8002a2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fcf5 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8003292:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd02 	bl	8002ca2 <LL_ADC_INJ_IsConversionOngoing>
 800329e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 80b8 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80b4 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	461a      	mov	r2, r3
 80032be:	f7ff fbf5 	bl	8002aac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032c2:	4b30      	ldr	r3, [pc, #192]	@ (8003384 <HAL_ADC_ConfigChannel+0x1b4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ce:	d10b      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x118>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	e01d      	b.n	8003324 <HAL_ADC_ConfigChannel+0x154>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x13e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	e00a      	b.n	8003324 <HAL_ADC_ConfigChannel+0x154>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d02c      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333c:	f7ff fb10 	bl	8002960 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6919      	ldr	r1, [r3, #16]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	7e5b      	ldrb	r3, [r3, #25]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x186>
 8003350:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003354:	e000      	b.n	8003358 <HAL_ADC_ConfigChannel+0x188>
 8003356:	2300      	movs	r3, #0
 8003358:	461a      	mov	r2, r3
 800335a:	f7ff fb3a 	bl	80029d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	7e1b      	ldrb	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1a4>
 800336e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003372:	e000      	b.n	8003376 <HAL_ADC_ConfigChannel+0x1a6>
 8003374:	2300      	movs	r3, #0
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fb12 	bl	80029a0 <LL_ADC_SetDataRightShift>
 800337c:	e04c      	b.n	8003418 <HAL_ADC_ConfigChannel+0x248>
 800337e:	bf00      	nop
 8003380:	47ff0000 	.word	0x47ff0000
 8003384:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	069b      	lsls	r3, r3, #26
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033aa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	069b      	lsls	r3, r3, #26
 80033bc:	429a      	cmp	r2, r3
 80033be:	d107      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033ce:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d107      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033f2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003416:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fc05 	bl	8002c2c <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 8211 	bne.w	800384c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	461a      	mov	r2, r3
 8003438:	f7ff fb64 	bl	8002b04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4aa1      	ldr	r2, [pc, #644]	@ (80036c8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f040 812e 	bne.w	80036a4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x2a0>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	3301      	adds	r3, #1
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2b09      	cmp	r3, #9
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e019      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x2d4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800348c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2b09      	cmp	r3, #9
 800349c:	bf94      	ite	ls
 800349e:	2301      	movls	r3, #1
 80034a0:	2300      	movhi	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d079      	beq.n	800359c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x2f4>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	3301      	adds	r3, #1
 80034bc:	069b      	lsls	r3, r3, #26
 80034be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c2:	e015      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x320>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80034d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80034d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e003      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	069b      	lsls	r3, r3, #26
 80034ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x340>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	3301      	adds	r3, #1
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	e017      	b.n	8003540 <HAL_ADC_ConfigChannel+0x370>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800351e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003520:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003528:	2320      	movs	r3, #32
 800352a:	e003      	b.n	8003534 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800352c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	3301      	adds	r3, #1
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	ea42 0103 	orr.w	r1, r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x396>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	051b      	lsls	r3, r3, #20
 8003564:	e018      	b.n	8003598 <HAL_ADC_ConfigChannel+0x3c8>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e003      	b.n	800358a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003598:	430b      	orrs	r3, r1
 800359a:	e07e      	b.n	800369a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x3e8>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	3301      	adds	r3, #1
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035b6:	e015      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x414>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x434>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	e017      	b.n	8003634 <HAL_ADC_ConfigChannel+0x464>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	61bb      	str	r3, [r7, #24]
  return result;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e003      	b.n	8003628 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x490>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	3b1e      	subs	r3, #30
 8003658:	051b      	lsls	r3, r3, #20
 800365a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800365e:	e01b      	b.n	8003698 <HAL_ADC_ConfigChannel+0x4c8>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	60fb      	str	r3, [r7, #12]
  return result;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e003      	b.n	8003684 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3301      	adds	r3, #1
 8003686:	f003 021f 	and.w	r2, r3, #31
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	3b1e      	subs	r3, #30
 8003692:	051b      	lsls	r3, r3, #20
 8003694:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003698:	430b      	orrs	r3, r1
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6892      	ldr	r2, [r2, #8]
 800369e:	4619      	mov	r1, r3
 80036a0:	f7ff fa04 	bl	8002aac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f280 80cf 	bge.w	800384c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a06      	ldr	r2, [pc, #24]	@ (80036cc <HAL_ADC_ConfigChannel+0x4fc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x4f2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <HAL_ADC_ConfigChannel+0x500>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x508>
 80036c2:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <HAL_ADC_ConfigChannel+0x504>)
 80036c4:	e009      	b.n	80036da <HAL_ADC_ConfigChannel+0x50a>
 80036c6:	bf00      	nop
 80036c8:	47ff0000 	.word	0x47ff0000
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40022100 	.word	0x40022100
 80036d4:	40022300 	.word	0x40022300
 80036d8:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <HAL_ADC_ConfigChannel+0x690>)
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f932 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 80036e0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003864 <HAL_ADC_ConfigChannel+0x694>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x526>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003868 <HAL_ADC_ConfigChannel+0x698>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10e      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x544>
 80036f6:	485b      	ldr	r0, [pc, #364]	@ (8003864 <HAL_ADC_ConfigChannel+0x694>)
 80036f8:	f7ff fa98 	bl	8002c2c <LL_ADC_IsEnabled>
 80036fc:	4604      	mov	r4, r0
 80036fe:	485a      	ldr	r0, [pc, #360]	@ (8003868 <HAL_ADC_ConfigChannel+0x698>)
 8003700:	f7ff fa94 	bl	8002c2c <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_ADC_ConfigChannel+0x556>
 8003714:	4855      	ldr	r0, [pc, #340]	@ (800386c <HAL_ADC_ConfigChannel+0x69c>)
 8003716:	f7ff fa89 	bl	8002c2c <LL_ADC_IsEnabled>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d07d      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a50      	ldr	r2, [pc, #320]	@ (8003870 <HAL_ADC_ConfigChannel+0x6a0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d130      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x5c6>
 8003734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12b      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4a      	ldr	r2, [pc, #296]	@ (800386c <HAL_ADC_ConfigChannel+0x69c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 8081 	bne.w	800384c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a45      	ldr	r2, [pc, #276]	@ (8003864 <HAL_ADC_ConfigChannel+0x694>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_ADC_ConfigChannel+0x58e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a43      	ldr	r2, [pc, #268]	@ (8003868 <HAL_ADC_ConfigChannel+0x698>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x592>
 800375e:	4a45      	ldr	r2, [pc, #276]	@ (8003874 <HAL_ADC_ConfigChannel+0x6a4>)
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0x594>
 8003762:	4a3f      	ldr	r2, [pc, #252]	@ (8003860 <HAL_ADC_ConfigChannel+0x690>)
 8003764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7ff f8d6 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003772:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_ADC_ConfigChannel+0x6a8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	4a40      	ldr	r2, [pc, #256]	@ (800387c <HAL_ADC_ConfigChannel+0x6ac>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	3301      	adds	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003786:	e002      	b.n	800378e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3b01      	subs	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f9      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003794:	e05a      	b.n	800384c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a39      	ldr	r2, [pc, #228]	@ (8003880 <HAL_ADC_ConfigChannel+0x6b0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d11e      	bne.n	80037de <HAL_ADC_ConfigChannel+0x60e>
 80037a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d119      	bne.n	80037de <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <HAL_ADC_ConfigChannel+0x69c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d14b      	bne.n	800384c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003864 <HAL_ADC_ConfigChannel+0x694>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x5f8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a29      	ldr	r2, [pc, #164]	@ (8003868 <HAL_ADC_ConfigChannel+0x698>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x5fc>
 80037c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003874 <HAL_ADC_ConfigChannel+0x6a4>)
 80037ca:	e000      	b.n	80037ce <HAL_ADC_ConfigChannel+0x5fe>
 80037cc:	4a24      	ldr	r2, [pc, #144]	@ (8003860 <HAL_ADC_ConfigChannel+0x690>)
 80037ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f7ff f8a1 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037dc:	e036      	b.n	800384c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <HAL_ADC_ConfigChannel+0x6b4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d131      	bne.n	800384c <HAL_ADC_ConfigChannel+0x67c>
 80037e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d12c      	bne.n	800384c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <HAL_ADC_ConfigChannel+0x69c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d127      	bne.n	800384c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <HAL_ADC_ConfigChannel+0x694>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x640>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a17      	ldr	r2, [pc, #92]	@ (8003868 <HAL_ADC_ConfigChannel+0x698>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x644>
 8003810:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_ADC_ConfigChannel+0x6a4>)
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x646>
 8003814:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <HAL_ADC_ConfigChannel+0x690>)
 8003816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003818:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7ff f87d 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
 8003824:	e012      	b.n	800384c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003838:	e008      	b.n	800384c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003854:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003858:	4618      	mov	r0, r3
 800385a:	3784      	adds	r7, #132	@ 0x84
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	58026300 	.word	0x58026300
 8003864:	40022000 	.word	0x40022000
 8003868:	40022100 	.word	0x40022100
 800386c:	58026000 	.word	0x58026000
 8003870:	cb840000 	.word	0xcb840000
 8003874:	40022300 	.word	0x40022300
 8003878:	24000000 	.word	0x24000000
 800387c:	053e2d63 	.word	0x053e2d63
 8003880:	c7520000 	.word	0xc7520000
 8003884:	cfb80000 	.word	0xcfb80000

08003888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f9c9 	bl	8002c2c <LL_ADC_IsEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d16e      	bne.n	800397e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <ADC_Enable+0x100>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b2:	f043 0210 	orr.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e05a      	b.n	8003980 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f998 	bl	8002c04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038d4:	f7fe fff8 	bl	80028c8 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2b      	ldr	r2, [pc, #172]	@ (800398c <ADC_Enable+0x104>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <ADC_Enable+0x66>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a29      	ldr	r2, [pc, #164]	@ (8003990 <ADC_Enable+0x108>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <ADC_Enable+0x6a>
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <ADC_Enable+0x10c>)
 80038f0:	e000      	b.n	80038f4 <ADC_Enable+0x6c>
 80038f2:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <ADC_Enable+0x110>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f929 	bl	8002b4c <LL_ADC_GetMultimode>
 80038fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a23      	ldr	r2, [pc, #140]	@ (8003990 <ADC_Enable+0x108>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d002      	beq.n	800390c <ADC_Enable+0x84>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e000      	b.n	800390e <ADC_Enable+0x86>
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <ADC_Enable+0x104>)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d130      	bne.n	800397e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391c:	e028      	b.n	8003970 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f982 	bl	8002c2c <LL_ADC_IsEnabled>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f966 	bl	8002c04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003938:	f7fe ffc6 	bl	80028c8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d914      	bls.n	8003970 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d00d      	beq.n	8003970 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e007      	b.n	8003980 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d1cf      	bne.n	800391e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	8000003f 	.word	0x8000003f
 800398c:	40022000 	.word	0x40022000
 8003990:	40022100 	.word	0x40022100
 8003994:	40022300 	.word	0x40022300
 8003998:	58026300 	.word	0x58026300

0800399c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d14b      	bne.n	8003a4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d021      	beq.n	8003a14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff f817 	bl	8002a08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d032      	beq.n	8003a46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12b      	bne.n	8003a46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a12:	e018      	b.n	8003a46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d111      	bne.n	8003a46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff fba4 	bl	8003194 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a4c:	e00e      	b.n	8003a6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff fbae 	bl	80031bc <HAL_ADC_ErrorCallback>
}
 8003a60:	e004      	b.n	8003a6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fb90 	bl	80031a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fb80 	bl	80031bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cbc <ADC_ConfigureBoostMode+0x1f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <ADC_ConfigureBoostMode+0x1c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a79      	ldr	r2, [pc, #484]	@ (8003cc0 <ADC_ConfigureBoostMode+0x1fc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <ADC_ConfigureBoostMode+0x30>
 8003ae0:	4b78      	ldr	r3, [pc, #480]	@ (8003cc4 <ADC_ConfigureBoostMode+0x200>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e008      	b.n	8003b06 <ADC_ConfigureBoostMode+0x42>
 8003af4:	4b74      	ldr	r3, [pc, #464]	@ (8003cc8 <ADC_ConfigureBoostMode+0x204>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01c      	beq.n	8003b44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b0a:	f004 fb47 	bl	800819c <HAL_RCC_GetHCLKFreq>
 8003b0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b18:	d010      	beq.n	8003b3c <ADC_ConfigureBoostMode+0x78>
 8003b1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b1e:	d873      	bhi.n	8003c08 <ADC_ConfigureBoostMode+0x144>
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b24:	d002      	beq.n	8003b2c <ADC_ConfigureBoostMode+0x68>
 8003b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2a:	d16d      	bne.n	8003c08 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	60fb      	str	r3, [r7, #12]
        break;
 8003b3a:	e068      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	60fb      	str	r3, [r7, #12]
        break;
 8003b42:	e064      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b44:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	f005 fdce 	bl	80096ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003b50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b5a:	d051      	beq.n	8003c00 <ADC_ConfigureBoostMode+0x13c>
 8003b5c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b60:	d854      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b62:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b66:	d047      	beq.n	8003bf8 <ADC_ConfigureBoostMode+0x134>
 8003b68:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b6c:	d84e      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b6e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b72:	d03d      	beq.n	8003bf0 <ADC_ConfigureBoostMode+0x12c>
 8003b74:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b78:	d848      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b7e:	d033      	beq.n	8003be8 <ADC_ConfigureBoostMode+0x124>
 8003b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b84:	d842      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b86:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b8a:	d029      	beq.n	8003be0 <ADC_ConfigureBoostMode+0x11c>
 8003b8c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b90:	d83c      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b92:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b96:	d01a      	beq.n	8003bce <ADC_ConfigureBoostMode+0x10a>
 8003b98:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b9c:	d836      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003b9e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ba2:	d014      	beq.n	8003bce <ADC_ConfigureBoostMode+0x10a>
 8003ba4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ba8:	d830      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d00e      	beq.n	8003bce <ADC_ConfigureBoostMode+0x10a>
 8003bb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb4:	d82a      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003bb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bba:	d008      	beq.n	8003bce <ADC_ConfigureBoostMode+0x10a>
 8003bbc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bc0:	d824      	bhi.n	8003c0c <ADC_ConfigureBoostMode+0x148>
 8003bc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bc6:	d002      	beq.n	8003bce <ADC_ConfigureBoostMode+0x10a>
 8003bc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bcc:	d11e      	bne.n	8003c0c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0c9b      	lsrs	r3, r3, #18
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
        break;
 8003bde:	e016      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
        break;
 8003be6:	e012      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e00e      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	60fb      	str	r3, [r7, #12]
        break;
 8003bf6:	e00a      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	09db      	lsrs	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
        break;
 8003bfe:	e006      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	60fb      	str	r3, [r7, #12]
        break;
 8003c06:	e002      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c0c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c0e:	f7fe fe67 	bl	80028e0 <HAL_GetREVID>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d815      	bhi.n	8003c48 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <ADC_ConfigureBoostMode+0x208>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d908      	bls.n	8003c36 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c34:	e03e      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	e035      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd0 <ADC_ConfigureBoostMode+0x20c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d808      	bhi.n	8003c68 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	e025      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <ADC_ConfigureBoostMode+0x210>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d80a      	bhi.n	8003c86 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	e016      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <ADC_ConfigureBoostMode+0x214>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d80a      	bhi.n	8003ca4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca0:	609a      	str	r2, [r3, #8]
}
 8003ca2:	e007      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40022000 	.word	0x40022000
 8003cc0:	40022100 	.word	0x40022100
 8003cc4:	40022300 	.word	0x40022300
 8003cc8:	58026300 	.word	0x58026300
 8003ccc:	01312d00 	.word	0x01312d00
 8003cd0:	005f5e10 	.word	0x005f5e10
 8003cd4:	00bebc20 	.word	0x00bebc20
 8003cd8:	017d7840 	.word	0x017d7840

08003cdc <LL_ADC_IsEnabled>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <LL_ADC_IsEnabled+0x18>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_ADC_IsEnabled+0x1a>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d101      	bne.n	8003d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b09f      	sub	sp, #124	@ 0x7c
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0be      	b.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d102      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d60:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	e001      	b.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e09d      	b.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ffb9 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003d90:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ffb3 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d17f      	bne.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d17c      	bne.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a47      	ldr	r2, [pc, #284]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a46      	ldr	r2, [pc, #280]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003dbc:	4b45      	ldr	r3, [pc, #276]	@ (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003dc0:	4b45      	ldr	r3, [pc, #276]	@ (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d039      	beq.n	8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ddc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3a      	ldr	r2, [pc, #232]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a38      	ldr	r2, [pc, #224]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10e      	bne.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003df2:	4836      	ldr	r0, [pc, #216]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df4:	f7ff ff72 	bl	8003cdc <LL_ADC_IsEnabled>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4835      	ldr	r0, [pc, #212]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dfc:	f7ff ff6e 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4323      	orrs	r3, r4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e008      	b.n	8003e22 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e10:	4832      	ldr	r0, [pc, #200]	@ (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e12:	f7ff ff63 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d047      	beq.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	6811      	ldr	r1, [r2, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e3c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3e:	e03a      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e4a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10e      	bne.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e60:	481a      	ldr	r0, [pc, #104]	@ (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e62:	f7ff ff3b 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e66:	4604      	mov	r4, r0
 8003e68:	4819      	ldr	r0, [pc, #100]	@ (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e6a:	f7ff ff37 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4323      	orrs	r3, r4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	e008      	b.n	8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e7e:	4817      	ldr	r0, [pc, #92]	@ (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e80:	f7ff ff2c 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e9e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ea0:	e009      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ec0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	377c      	adds	r7, #124	@ 0x7c
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40022100 	.word	0x40022100
 8003ed4:	40022300 	.word	0x40022300
 8003ed8:	58026300 	.word	0x58026300
 8003edc:	58026000 	.word	0x58026000
 8003ee0:	fffff0e0 	.word	0xfffff0e0

08003ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <__NVIC_SetPriorityGrouping+0x40>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f00:	4013      	ands	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <__NVIC_SetPriorityGrouping+0x44>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f12:	4a04      	ldr	r2, [pc, #16]	@ (8003f24 <__NVIC_SetPriorityGrouping+0x40>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60d3      	str	r3, [r2, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00
 8003f28:	05fa0000 	.word	0x05fa0000

08003f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <__NVIC_GetPriorityGrouping+0x18>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f003 0307 	and.w	r3, r3, #7
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	db0b      	blt.n	8003f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4907      	ldr	r1, [pc, #28]	@ (8003f80 <__NVIC_EnableIRQ+0x38>)
 8003f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e100 	.word	0xe000e100

08003f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db0a      	blt.n	8003fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	490c      	ldr	r1, [pc, #48]	@ (8003fd0 <__NVIC_SetPriority+0x4c>)
 8003f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fac:	e00a      	b.n	8003fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4908      	ldr	r1, [pc, #32]	@ (8003fd4 <__NVIC_SetPriority+0x50>)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	0112      	lsls	r2, r2, #4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	761a      	strb	r2, [r3, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000e100 	.word	0xe000e100
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	@ 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f1c3 0307 	rsb	r3, r3, #7
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	bf28      	it	cs
 8003ff6:	2304      	movcs	r3, #4
 8003ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2b06      	cmp	r3, #6
 8004000:	d902      	bls.n	8004008 <NVIC_EncodePriority+0x30>
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3b03      	subs	r3, #3
 8004006:	e000      	b.n	800400a <NVIC_EncodePriority+0x32>
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004020:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	43d9      	mvns	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004030:	4313      	orrs	r3, r2
         );
}
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	@ 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ff4c 	bl	8003ee4 <__NVIC_SetPriorityGrouping>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004062:	f7ff ff63 	bl	8003f2c <__NVIC_GetPriorityGrouping>
 8004066:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	6978      	ldr	r0, [r7, #20]
 800406e:	f7ff ffb3 	bl	8003fd8 <NVIC_EncodePriority>
 8004072:	4602      	mov	r2, r0
 8004074:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff82 	bl	8003f84 <__NVIC_SetPriority>
}
 8004080:	bf00      	nop
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff56 	bl	8003f48 <__NVIC_EnableIRQ>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7fe fc0c 	bl	80028c8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e316      	b.n	80046ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a66      	ldr	r2, [pc, #408]	@ (800425c <HAL_DMA_Init+0x1b8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a65      	ldr	r2, [pc, #404]	@ (8004260 <HAL_DMA_Init+0x1bc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a63      	ldr	r2, [pc, #396]	@ (8004264 <HAL_DMA_Init+0x1c0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a62      	ldr	r2, [pc, #392]	@ (8004268 <HAL_DMA_Init+0x1c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a60      	ldr	r2, [pc, #384]	@ (800426c <HAL_DMA_Init+0x1c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004270 <HAL_DMA_Init+0x1cc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Init+0xb8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_DMA_Init+0x1d0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5c      	ldr	r2, [pc, #368]	@ (8004278 <HAL_DMA_Init+0x1d4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5a      	ldr	r2, [pc, #360]	@ (800427c <HAL_DMA_Init+0x1d8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a59      	ldr	r2, [pc, #356]	@ (8004280 <HAL_DMA_Init+0x1dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a57      	ldr	r2, [pc, #348]	@ (8004284 <HAL_DMA_Init+0x1e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a56      	ldr	r2, [pc, #344]	@ (8004288 <HAL_DMA_Init+0x1e4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a54      	ldr	r2, [pc, #336]	@ (800428c <HAL_DMA_Init+0x1e8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Init+0xb8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a53      	ldr	r2, [pc, #332]	@ (8004290 <HAL_DMA_Init+0x1ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a51      	ldr	r2, [pc, #324]	@ (8004294 <HAL_DMA_Init+0x1f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Init+0xb8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a50      	ldr	r2, [pc, #320]	@ (8004298 <HAL_DMA_Init+0x1f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Init+0xbc>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_DMA_Init+0xbe>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 813b 	beq.w	80043de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a37      	ldr	r2, [pc, #220]	@ (800425c <HAL_DMA_Init+0x1b8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <HAL_DMA_Init+0x1bc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <HAL_DMA_Init+0x174>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a34      	ldr	r2, [pc, #208]	@ (8004264 <HAL_DMA_Init+0x1c0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <HAL_DMA_Init+0x1c4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_DMA_Init+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <HAL_DMA_Init+0x1cc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004274 <HAL_DMA_Init+0x1d0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <HAL_DMA_Init+0x1d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <HAL_DMA_Init+0x1d8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004280 <HAL_DMA_Init+0x1dc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a28      	ldr	r2, [pc, #160]	@ (8004284 <HAL_DMA_Init+0x1e0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a27      	ldr	r2, [pc, #156]	@ (8004288 <HAL_DMA_Init+0x1e4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <HAL_DMA_Init+0x1e8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_Init+0x174>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <HAL_DMA_Init+0x1ec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_Init+0x174>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_DMA_Init+0x1f0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_Init+0x174>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <HAL_DMA_Init+0x1f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <HAL_DMA_Init+0x186>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e007      	b.n	800423a <HAL_DMA_Init+0x196>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800423a:	e02f      	b.n	800429c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800423c:	f7fe fb44 	bl	80028c8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d928      	bls.n	800429c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e246      	b.n	80046ea <HAL_DMA_Init+0x646>
 800425c:	40020010 	.word	0x40020010
 8004260:	40020028 	.word	0x40020028
 8004264:	40020040 	.word	0x40020040
 8004268:	40020058 	.word	0x40020058
 800426c:	40020070 	.word	0x40020070
 8004270:	40020088 	.word	0x40020088
 8004274:	400200a0 	.word	0x400200a0
 8004278:	400200b8 	.word	0x400200b8
 800427c:	40020410 	.word	0x40020410
 8004280:	40020428 	.word	0x40020428
 8004284:	40020440 	.word	0x40020440
 8004288:	40020458 	.word	0x40020458
 800428c:	40020470 	.word	0x40020470
 8004290:	40020488 	.word	0x40020488
 8004294:	400204a0 	.word	0x400204a0
 8004298:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1c8      	bne.n	800423c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4b83      	ldr	r3, [pc, #524]	@ (80044c4 <HAL_DMA_Init+0x420>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d107      	bne.n	8004300 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	4313      	orrs	r3, r2
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004300:	4b71      	ldr	r3, [pc, #452]	@ (80044c8 <HAL_DMA_Init+0x424>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b71      	ldr	r3, [pc, #452]	@ (80044cc <HAL_DMA_Init+0x428>)
 8004306:	4013      	ands	r3, r2
 8004308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800430c:	d328      	bcc.n	8004360 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b28      	cmp	r3, #40	@ 0x28
 8004314:	d903      	bls.n	800431e <HAL_DMA_Init+0x27a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b2e      	cmp	r3, #46	@ 0x2e
 800431c:	d917      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b3e      	cmp	r3, #62	@ 0x3e
 8004324:	d903      	bls.n	800432e <HAL_DMA_Init+0x28a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b42      	cmp	r3, #66	@ 0x42
 800432c:	d90f      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b46      	cmp	r3, #70	@ 0x46
 8004334:	d903      	bls.n	800433e <HAL_DMA_Init+0x29a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b48      	cmp	r3, #72	@ 0x48
 800433c:	d907      	bls.n	800434e <HAL_DMA_Init+0x2aa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b4e      	cmp	r3, #78	@ 0x4e
 8004344:	d905      	bls.n	8004352 <HAL_DMA_Init+0x2ae>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b52      	cmp	r3, #82	@ 0x52
 800434c:	d801      	bhi.n	8004352 <HAL_DMA_Init+0x2ae>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_DMA_Init+0x2b0>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	2b04      	cmp	r3, #4
 8004388:	d117      	bne.n	80043ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f002 fb3f 	bl	8006a20 <DMA_CheckFifoParam>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	@ 0x40
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e197      	b.n	80046ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f002 fa7a 	bl	80068bc <DMA_CalcBaseAndBitshift>
 80043c8:	4603      	mov	r3, r0
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	223f      	movs	r2, #63	@ 0x3f
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e0cd      	b.n	800457a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3b      	ldr	r2, [pc, #236]	@ (80044d0 <HAL_DMA_Init+0x42c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a39      	ldr	r2, [pc, #228]	@ (80044d4 <HAL_DMA_Init+0x430>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a38      	ldr	r2, [pc, #224]	@ (80044d8 <HAL_DMA_Init+0x434>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_Init+0x38a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <HAL_DMA_Init+0x438>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a35      	ldr	r2, [pc, #212]	@ (80044e0 <HAL_DMA_Init+0x43c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a33      	ldr	r2, [pc, #204]	@ (80044e4 <HAL_DMA_Init+0x440>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_Init+0x38a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a32      	ldr	r2, [pc, #200]	@ (80044e8 <HAL_DMA_Init+0x444>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_Init+0x38a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a30      	ldr	r2, [pc, #192]	@ (80044ec <HAL_DMA_Init+0x448>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_DMA_Init+0x38e>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_DMA_Init+0x390>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8097 	beq.w	8004568 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <HAL_DMA_Init+0x42c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d021      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <HAL_DMA_Init+0x430>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01c      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <HAL_DMA_Init+0x434>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d017      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1f      	ldr	r2, [pc, #124]	@ (80044dc <HAL_DMA_Init+0x438>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d012      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <HAL_DMA_Init+0x43c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00d      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <HAL_DMA_Init+0x440>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d008      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1b      	ldr	r2, [pc, #108]	@ (80044e8 <HAL_DMA_Init+0x444>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <HAL_DMA_Init+0x3e4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a19      	ldr	r2, [pc, #100]	@ (80044ec <HAL_DMA_Init+0x448>)
 8004486:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <HAL_DMA_Init+0x44c>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d021      	beq.n	80044f4 <HAL_DMA_Init+0x450>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b80      	cmp	r3, #128	@ 0x80
 80044b6:	d102      	bne.n	80044be <HAL_DMA_Init+0x41a>
 80044b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044bc:	e01b      	b.n	80044f6 <HAL_DMA_Init+0x452>
 80044be:	2300      	movs	r3, #0
 80044c0:	e019      	b.n	80044f6 <HAL_DMA_Init+0x452>
 80044c2:	bf00      	nop
 80044c4:	fe10803f 	.word	0xfe10803f
 80044c8:	5c001000 	.word	0x5c001000
 80044cc:	ffff0000 	.word	0xffff0000
 80044d0:	58025408 	.word	0x58025408
 80044d4:	5802541c 	.word	0x5802541c
 80044d8:	58025430 	.word	0x58025430
 80044dc:	58025444 	.word	0x58025444
 80044e0:	58025458 	.word	0x58025458
 80044e4:	5802546c 	.word	0x5802546c
 80044e8:	58025480 	.word	0x58025480
 80044ec:	58025494 	.word	0x58025494
 80044f0:	fffe000f 	.word	0xfffe000f
 80044f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800450c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800451c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004524:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	4b6e      	ldr	r3, [pc, #440]	@ (80046f4 <HAL_DMA_Init+0x650>)
 800453c:	4413      	add	r3, r2
 800453e:	4a6e      	ldr	r2, [pc, #440]	@ (80046f8 <HAL_DMA_Init+0x654>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f002 f9b5 	bl	80068bc <DMA_CalcBaseAndBitshift>
 8004552:	4603      	mov	r3, r0
 8004554:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2201      	movs	r2, #1
 8004560:	409a      	lsls	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e008      	b.n	800457a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2240      	movs	r2, #64	@ 0x40
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2203      	movs	r2, #3
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0b7      	b.n	80046ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5f      	ldr	r2, [pc, #380]	@ (80046fc <HAL_DMA_Init+0x658>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d072      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <HAL_DMA_Init+0x65c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d06d      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5c      	ldr	r2, [pc, #368]	@ (8004704 <HAL_DMA_Init+0x660>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d068      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5a      	ldr	r2, [pc, #360]	@ (8004708 <HAL_DMA_Init+0x664>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d063      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a59      	ldr	r2, [pc, #356]	@ (800470c <HAL_DMA_Init+0x668>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d05e      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a57      	ldr	r2, [pc, #348]	@ (8004710 <HAL_DMA_Init+0x66c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d059      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a56      	ldr	r2, [pc, #344]	@ (8004714 <HAL_DMA_Init+0x670>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d054      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a54      	ldr	r2, [pc, #336]	@ (8004718 <HAL_DMA_Init+0x674>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04f      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a53      	ldr	r2, [pc, #332]	@ (800471c <HAL_DMA_Init+0x678>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04a      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a51      	ldr	r2, [pc, #324]	@ (8004720 <HAL_DMA_Init+0x67c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d045      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a50      	ldr	r2, [pc, #320]	@ (8004724 <HAL_DMA_Init+0x680>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d040      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004728 <HAL_DMA_Init+0x684>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d03b      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	@ (800472c <HAL_DMA_Init+0x688>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d036      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4b      	ldr	r2, [pc, #300]	@ (8004730 <HAL_DMA_Init+0x68c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	@ (8004734 <HAL_DMA_Init+0x690>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d02c      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a48      	ldr	r2, [pc, #288]	@ (8004738 <HAL_DMA_Init+0x694>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d027      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a47      	ldr	r2, [pc, #284]	@ (800473c <HAL_DMA_Init+0x698>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a45      	ldr	r2, [pc, #276]	@ (8004740 <HAL_DMA_Init+0x69c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a44      	ldr	r2, [pc, #272]	@ (8004744 <HAL_DMA_Init+0x6a0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	@ (8004748 <HAL_DMA_Init+0x6a4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a41      	ldr	r2, [pc, #260]	@ (800474c <HAL_DMA_Init+0x6a8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3f      	ldr	r2, [pc, #252]	@ (8004750 <HAL_DMA_Init+0x6ac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3e      	ldr	r2, [pc, #248]	@ (8004754 <HAL_DMA_Init+0x6b0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_DMA_Init+0x5c6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3c      	ldr	r2, [pc, #240]	@ (8004758 <HAL_DMA_Init+0x6b4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_DMA_Init+0x5ca>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_DMA_Init+0x5cc>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d032      	beq.n	80046da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f002 fa4f 	bl	8006b18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b80      	cmp	r3, #128	@ 0x80
 8004680:	d102      	bne.n	8004688 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800469c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_DMA_Init+0x624>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d80c      	bhi.n	80046c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 facc 	bl	8006c4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	e008      	b.n	80046da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	a7fdabf8 	.word	0xa7fdabf8
 80046f8:	cccccccd 	.word	0xcccccccd
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494

0800475c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e226      	b.n	8004bc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_DMA_Start_IT+0x2a>
 8004782:	2302      	movs	r3, #2
 8004784:	e21f      	b.n	8004bc6 <HAL_DMA_Start_IT+0x46a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 820a 	bne.w	8004bb0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a68      	ldr	r2, [pc, #416]	@ (8004950 <HAL_DMA_Start_IT+0x1f4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	@ (8004954 <HAL_DMA_Start_IT+0x1f8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a65      	ldr	r2, [pc, #404]	@ (8004958 <HAL_DMA_Start_IT+0x1fc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a63      	ldr	r2, [pc, #396]	@ (800495c <HAL_DMA_Start_IT+0x200>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a62      	ldr	r2, [pc, #392]	@ (8004960 <HAL_DMA_Start_IT+0x204>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a60      	ldr	r2, [pc, #384]	@ (8004964 <HAL_DMA_Start_IT+0x208>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004968 <HAL_DMA_Start_IT+0x20c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5d      	ldr	r2, [pc, #372]	@ (800496c <HAL_DMA_Start_IT+0x210>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004970 <HAL_DMA_Start_IT+0x214>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5a      	ldr	r2, [pc, #360]	@ (8004974 <HAL_DMA_Start_IT+0x218>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a59      	ldr	r2, [pc, #356]	@ (8004978 <HAL_DMA_Start_IT+0x21c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a57      	ldr	r2, [pc, #348]	@ (800497c <HAL_DMA_Start_IT+0x220>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a56      	ldr	r2, [pc, #344]	@ (8004980 <HAL_DMA_Start_IT+0x224>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a54      	ldr	r2, [pc, #336]	@ (8004984 <HAL_DMA_Start_IT+0x228>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a53      	ldr	r2, [pc, #332]	@ (8004988 <HAL_DMA_Start_IT+0x22c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_Start_IT+0xee>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a51      	ldr	r2, [pc, #324]	@ (800498c <HAL_DMA_Start_IT+0x230>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_DMA_Start_IT+0x100>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DMA_Start_IT+0x110>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f001 fe76 	bl	8006564 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a34      	ldr	r2, [pc, #208]	@ (8004950 <HAL_DMA_Start_IT+0x1f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a33      	ldr	r2, [pc, #204]	@ (8004954 <HAL_DMA_Start_IT+0x1f8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a31      	ldr	r2, [pc, #196]	@ (8004958 <HAL_DMA_Start_IT+0x1fc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a30      	ldr	r2, [pc, #192]	@ (800495c <HAL_DMA_Start_IT+0x200>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <HAL_DMA_Start_IT+0x204>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004964 <HAL_DMA_Start_IT+0x208>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <HAL_DMA_Start_IT+0x20c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2a      	ldr	r2, [pc, #168]	@ (800496c <HAL_DMA_Start_IT+0x210>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_DMA_Start_IT+0x214>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a27      	ldr	r2, [pc, #156]	@ (8004974 <HAL_DMA_Start_IT+0x218>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_DMA_Start_IT+0x21c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a24      	ldr	r2, [pc, #144]	@ (800497c <HAL_DMA_Start_IT+0x220>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_DMA_Start_IT+0x224>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	@ (8004984 <HAL_DMA_Start_IT+0x228>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_DMA_Start_IT+0x22c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_DMA_Start_IT+0x1bc>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_DMA_Start_IT+0x230>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x1c0>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_DMA_Start_IT+0x1c2>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d036      	beq.n	8004990 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 021e 	bic.w	r2, r3, #30
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0216 	orr.w	r2, r2, #22
 8004934:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03e      	beq.n	80049bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0208 	orr.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e035      	b.n	80049bc <HAL_DMA_Start_IT+0x260>
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020e 	bic.w	r2, r3, #14
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 020a 	orr.w	r2, r2, #10
 80049a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0204 	orr.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a83      	ldr	r2, [pc, #524]	@ (8004bd0 <HAL_DMA_Start_IT+0x474>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d072      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a82      	ldr	r2, [pc, #520]	@ (8004bd4 <HAL_DMA_Start_IT+0x478>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d06d      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a80      	ldr	r2, [pc, #512]	@ (8004bd8 <HAL_DMA_Start_IT+0x47c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d068      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7f      	ldr	r2, [pc, #508]	@ (8004bdc <HAL_DMA_Start_IT+0x480>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d063      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7d      	ldr	r2, [pc, #500]	@ (8004be0 <HAL_DMA_Start_IT+0x484>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d05e      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7c      	ldr	r2, [pc, #496]	@ (8004be4 <HAL_DMA_Start_IT+0x488>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d059      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	@ (8004be8 <HAL_DMA_Start_IT+0x48c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d054      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a79      	ldr	r2, [pc, #484]	@ (8004bec <HAL_DMA_Start_IT+0x490>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04f      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a77      	ldr	r2, [pc, #476]	@ (8004bf0 <HAL_DMA_Start_IT+0x494>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a76      	ldr	r2, [pc, #472]	@ (8004bf4 <HAL_DMA_Start_IT+0x498>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a74      	ldr	r2, [pc, #464]	@ (8004bf8 <HAL_DMA_Start_IT+0x49c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a73      	ldr	r2, [pc, #460]	@ (8004bfc <HAL_DMA_Start_IT+0x4a0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a71      	ldr	r2, [pc, #452]	@ (8004c00 <HAL_DMA_Start_IT+0x4a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a70      	ldr	r2, [pc, #448]	@ (8004c04 <HAL_DMA_Start_IT+0x4a8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c08 <HAL_DMA_Start_IT+0x4ac>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6d      	ldr	r2, [pc, #436]	@ (8004c0c <HAL_DMA_Start_IT+0x4b0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6b      	ldr	r2, [pc, #428]	@ (8004c10 <HAL_DMA_Start_IT+0x4b4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c14 <HAL_DMA_Start_IT+0x4b8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a68      	ldr	r2, [pc, #416]	@ (8004c18 <HAL_DMA_Start_IT+0x4bc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_DMA_Start_IT+0x4c0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_DMA_Start_IT+0x4c4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a64      	ldr	r2, [pc, #400]	@ (8004c24 <HAL_DMA_Start_IT+0x4c8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a62      	ldr	r2, [pc, #392]	@ (8004c28 <HAL_DMA_Start_IT+0x4cc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_Start_IT+0x350>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a61      	ldr	r2, [pc, #388]	@ (8004c2c <HAL_DMA_Start_IT+0x4d0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DMA_Start_IT+0x354>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_DMA_Start_IT+0x356>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01a      	beq.n	8004aec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	@ (8004bd0 <HAL_DMA_Start_IT+0x474>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d04a      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	@ (8004bd4 <HAL_DMA_Start_IT+0x478>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d045      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	@ (8004bd8 <HAL_DMA_Start_IT+0x47c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d040      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	@ (8004bdc <HAL_DMA_Start_IT+0x480>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d03b      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	@ (8004be0 <HAL_DMA_Start_IT+0x484>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d036      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <HAL_DMA_Start_IT+0x488>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d031      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004be8 <HAL_DMA_Start_IT+0x48c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02c      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	@ (8004bec <HAL_DMA_Start_IT+0x490>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d027      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf0 <HAL_DMA_Start_IT+0x494>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf4 <HAL_DMA_Start_IT+0x498>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01d      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	@ (8004bf8 <HAL_DMA_Start_IT+0x49c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	@ (8004bfc <HAL_DMA_Start_IT+0x4a0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	@ (8004c00 <HAL_DMA_Start_IT+0x4a4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	@ (8004c04 <HAL_DMA_Start_IT+0x4a8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	@ (8004c08 <HAL_DMA_Start_IT+0x4ac>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_Start_IT+0x430>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_DMA_Start_IT+0x4b0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_DMA_Start_IT+0x442>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e012      	b.n	8004bc4 <HAL_DMA_Start_IT+0x468>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e009      	b.n	8004bc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40020010 	.word	0x40020010
 8004bd4:	40020028 	.word	0x40020028
 8004bd8:	40020040 	.word	0x40020040
 8004bdc:	40020058 	.word	0x40020058
 8004be0:	40020070 	.word	0x40020070
 8004be4:	40020088 	.word	0x40020088
 8004be8:	400200a0 	.word	0x400200a0
 8004bec:	400200b8 	.word	0x400200b8
 8004bf0:	40020410 	.word	0x40020410
 8004bf4:	40020428 	.word	0x40020428
 8004bf8:	40020440 	.word	0x40020440
 8004bfc:	40020458 	.word	0x40020458
 8004c00:	40020470 	.word	0x40020470
 8004c04:	40020488 	.word	0x40020488
 8004c08:	400204a0 	.word	0x400204a0
 8004c0c:	400204b8 	.word	0x400204b8
 8004c10:	58025408 	.word	0x58025408
 8004c14:	5802541c 	.word	0x5802541c
 8004c18:	58025430 	.word	0x58025430
 8004c1c:	58025444 	.word	0x58025444
 8004c20:	58025458 	.word	0x58025458
 8004c24:	5802546c 	.word	0x5802546c
 8004c28:	58025480 	.word	0x58025480
 8004c2c:	58025494 	.word	0x58025494

08004c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c38:	f7fd fe46 	bl	80028c8 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e2dc      	b.n	8005202 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d008      	beq.n	8004c66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2280      	movs	r2, #128	@ 0x80
 8004c58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e2cd      	b.n	8005202 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a76      	ldr	r2, [pc, #472]	@ (8004e44 <HAL_DMA_Abort+0x214>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04a      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a74      	ldr	r2, [pc, #464]	@ (8004e48 <HAL_DMA_Abort+0x218>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d045      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a73      	ldr	r2, [pc, #460]	@ (8004e4c <HAL_DMA_Abort+0x21c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d040      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a71      	ldr	r2, [pc, #452]	@ (8004e50 <HAL_DMA_Abort+0x220>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d03b      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a70      	ldr	r2, [pc, #448]	@ (8004e54 <HAL_DMA_Abort+0x224>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d036      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e58 <HAL_DMA_Abort+0x228>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d031      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8004e5c <HAL_DMA_Abort+0x22c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02c      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e60 <HAL_DMA_Abort+0x230>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d027      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6a      	ldr	r2, [pc, #424]	@ (8004e64 <HAL_DMA_Abort+0x234>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a68      	ldr	r2, [pc, #416]	@ (8004e68 <HAL_DMA_Abort+0x238>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a67      	ldr	r2, [pc, #412]	@ (8004e6c <HAL_DMA_Abort+0x23c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a65      	ldr	r2, [pc, #404]	@ (8004e70 <HAL_DMA_Abort+0x240>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a64      	ldr	r2, [pc, #400]	@ (8004e74 <HAL_DMA_Abort+0x244>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a62      	ldr	r2, [pc, #392]	@ (8004e78 <HAL_DMA_Abort+0x248>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a61      	ldr	r2, [pc, #388]	@ (8004e7c <HAL_DMA_Abort+0x24c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_Abort+0xd6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5f      	ldr	r2, [pc, #380]	@ (8004e80 <HAL_DMA_Abort+0x250>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_DMA_Abort+0xda>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_DMA_Abort+0xdc>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 021e 	bic.w	r2, r2, #30
 8004d1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e00a      	b.n	8004d4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 020e 	bic.w	r2, r2, #14
 8004d46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	@ (8004e44 <HAL_DMA_Abort+0x214>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d072      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e48 <HAL_DMA_Abort+0x218>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d06d      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a39      	ldr	r2, [pc, #228]	@ (8004e4c <HAL_DMA_Abort+0x21c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d068      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a37      	ldr	r2, [pc, #220]	@ (8004e50 <HAL_DMA_Abort+0x220>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d063      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a36      	ldr	r2, [pc, #216]	@ (8004e54 <HAL_DMA_Abort+0x224>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a34      	ldr	r2, [pc, #208]	@ (8004e58 <HAL_DMA_Abort+0x228>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d059      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a33      	ldr	r2, [pc, #204]	@ (8004e5c <HAL_DMA_Abort+0x22c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d054      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a31      	ldr	r2, [pc, #196]	@ (8004e60 <HAL_DMA_Abort+0x230>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d04f      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a30      	ldr	r2, [pc, #192]	@ (8004e64 <HAL_DMA_Abort+0x234>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d04a      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2e      	ldr	r2, [pc, #184]	@ (8004e68 <HAL_DMA_Abort+0x238>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d045      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <HAL_DMA_Abort+0x23c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d040      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e70 <HAL_DMA_Abort+0x240>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d03b      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2a      	ldr	r2, [pc, #168]	@ (8004e74 <HAL_DMA_Abort+0x244>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d036      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	@ (8004e78 <HAL_DMA_Abort+0x248>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d031      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a27      	ldr	r2, [pc, #156]	@ (8004e7c <HAL_DMA_Abort+0x24c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d02c      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a25      	ldr	r2, [pc, #148]	@ (8004e80 <HAL_DMA_Abort+0x250>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d027      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a24      	ldr	r2, [pc, #144]	@ (8004e84 <HAL_DMA_Abort+0x254>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <HAL_DMA_Abort+0x258>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a21      	ldr	r2, [pc, #132]	@ (8004e8c <HAL_DMA_Abort+0x25c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1f      	ldr	r2, [pc, #124]	@ (8004e90 <HAL_DMA_Abort+0x260>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e94 <HAL_DMA_Abort+0x264>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <HAL_DMA_Abort+0x268>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e9c <HAL_DMA_Abort+0x26c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_DMA_Abort+0x20e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a19      	ldr	r2, [pc, #100]	@ (8004ea0 <HAL_DMA_Abort+0x270>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d132      	bne.n	8004ea4 <HAL_DMA_Abort+0x274>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e031      	b.n	8004ea6 <HAL_DMA_Abort+0x276>
 8004e42:	bf00      	nop
 8004e44:	40020010 	.word	0x40020010
 8004e48:	40020028 	.word	0x40020028
 8004e4c:	40020040 	.word	0x40020040
 8004e50:	40020058 	.word	0x40020058
 8004e54:	40020070 	.word	0x40020070
 8004e58:	40020088 	.word	0x40020088
 8004e5c:	400200a0 	.word	0x400200a0
 8004e60:	400200b8 	.word	0x400200b8
 8004e64:	40020410 	.word	0x40020410
 8004e68:	40020428 	.word	0x40020428
 8004e6c:	40020440 	.word	0x40020440
 8004e70:	40020458 	.word	0x40020458
 8004e74:	40020470 	.word	0x40020470
 8004e78:	40020488 	.word	0x40020488
 8004e7c:	400204a0 	.word	0x400204a0
 8004e80:	400204b8 	.word	0x400204b8
 8004e84:	58025408 	.word	0x58025408
 8004e88:	5802541c 	.word	0x5802541c
 8004e8c:	58025430 	.word	0x58025430
 8004e90:	58025444 	.word	0x58025444
 8004e94:	58025458 	.word	0x58025458
 8004e98:	5802546c 	.word	0x5802546c
 8004e9c:	58025480 	.word	0x58025480
 8004ea0:	58025494 	.word	0x58025494
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8005074 <HAL_DMA_Abort+0x444>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d04a      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8005078 <HAL_DMA_Abort+0x448>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d045      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800507c <HAL_DMA_Abort+0x44c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d040      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a68      	ldr	r2, [pc, #416]	@ (8005080 <HAL_DMA_Abort+0x450>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d03b      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a67      	ldr	r2, [pc, #412]	@ (8005084 <HAL_DMA_Abort+0x454>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d036      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	@ (8005088 <HAL_DMA_Abort+0x458>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a64      	ldr	r2, [pc, #400]	@ (800508c <HAL_DMA_Abort+0x45c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d02c      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a62      	ldr	r2, [pc, #392]	@ (8005090 <HAL_DMA_Abort+0x460>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d027      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a61      	ldr	r2, [pc, #388]	@ (8005094 <HAL_DMA_Abort+0x464>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5f      	ldr	r2, [pc, #380]	@ (8005098 <HAL_DMA_Abort+0x468>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5e      	ldr	r2, [pc, #376]	@ (800509c <HAL_DMA_Abort+0x46c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5c      	ldr	r2, [pc, #368]	@ (80050a0 <HAL_DMA_Abort+0x470>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5b      	ldr	r2, [pc, #364]	@ (80050a4 <HAL_DMA_Abort+0x474>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a59      	ldr	r2, [pc, #356]	@ (80050a8 <HAL_DMA_Abort+0x478>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <HAL_DMA_Abort+0x47c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_DMA_Abort+0x32a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a56      	ldr	r2, [pc, #344]	@ (80050b0 <HAL_DMA_Abort+0x480>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <HAL_DMA_Abort+0x33c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e007      	b.n	8004f7c <HAL_DMA_Abort+0x34c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f7c:	e013      	b.n	8004fa6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f7e:	f7fd fca3 	bl	80028c8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b05      	cmp	r3, #5
 8004f8a:	d90c      	bls.n	8004fa6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2203      	movs	r2, #3
 8004f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e12d      	b.n	8005202 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8005074 <HAL_DMA_Abort+0x444>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d04a      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005078 <HAL_DMA_Abort+0x448>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d045      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	@ (800507c <HAL_DMA_Abort+0x44c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d040      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005080 <HAL_DMA_Abort+0x450>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d03b      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a29      	ldr	r2, [pc, #164]	@ (8005084 <HAL_DMA_Abort+0x454>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d036      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a27      	ldr	r2, [pc, #156]	@ (8005088 <HAL_DMA_Abort+0x458>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d031      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a26      	ldr	r2, [pc, #152]	@ (800508c <HAL_DMA_Abort+0x45c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d02c      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a24      	ldr	r2, [pc, #144]	@ (8005090 <HAL_DMA_Abort+0x460>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d027      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a23      	ldr	r2, [pc, #140]	@ (8005094 <HAL_DMA_Abort+0x464>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <HAL_DMA_Abort+0x468>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <HAL_DMA_Abort+0x46c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <HAL_DMA_Abort+0x470>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	@ (80050a4 <HAL_DMA_Abort+0x474>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <HAL_DMA_Abort+0x478>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	@ (80050ac <HAL_DMA_Abort+0x47c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_Abort+0x422>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	@ (80050b0 <HAL_DMA_Abort+0x480>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_DMA_Abort+0x426>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_DMA_Abort+0x428>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02b      	beq.n	80050b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	223f      	movs	r2, #63	@ 0x3f
 800506c:	409a      	lsls	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	e02a      	b.n	80050ca <HAL_DMA_Abort+0x49a>
 8005074:	40020010 	.word	0x40020010
 8005078:	40020028 	.word	0x40020028
 800507c:	40020040 	.word	0x40020040
 8005080:	40020058 	.word	0x40020058
 8005084:	40020070 	.word	0x40020070
 8005088:	40020088 	.word	0x40020088
 800508c:	400200a0 	.word	0x400200a0
 8005090:	400200b8 	.word	0x400200b8
 8005094:	40020410 	.word	0x40020410
 8005098:	40020428 	.word	0x40020428
 800509c:	40020440 	.word	0x40020440
 80050a0:	40020458 	.word	0x40020458
 80050a4:	40020470 	.word	0x40020470
 80050a8:	40020488 	.word	0x40020488
 80050ac:	400204a0 	.word	0x400204a0
 80050b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a4f      	ldr	r2, [pc, #316]	@ (800520c <HAL_DMA_Abort+0x5dc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d072      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005210 <HAL_DMA_Abort+0x5e0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d06d      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005214 <HAL_DMA_Abort+0x5e4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d068      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <HAL_DMA_Abort+0x5e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d063      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a49      	ldr	r2, [pc, #292]	@ (800521c <HAL_DMA_Abort+0x5ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d05e      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a47      	ldr	r2, [pc, #284]	@ (8005220 <HAL_DMA_Abort+0x5f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d059      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a46      	ldr	r2, [pc, #280]	@ (8005224 <HAL_DMA_Abort+0x5f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d054      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a44      	ldr	r2, [pc, #272]	@ (8005228 <HAL_DMA_Abort+0x5f8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d04f      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a43      	ldr	r2, [pc, #268]	@ (800522c <HAL_DMA_Abort+0x5fc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a41      	ldr	r2, [pc, #260]	@ (8005230 <HAL_DMA_Abort+0x600>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a40      	ldr	r2, [pc, #256]	@ (8005234 <HAL_DMA_Abort+0x604>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a3e      	ldr	r2, [pc, #248]	@ (8005238 <HAL_DMA_Abort+0x608>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3d      	ldr	r2, [pc, #244]	@ (800523c <HAL_DMA_Abort+0x60c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3b      	ldr	r2, [pc, #236]	@ (8005240 <HAL_DMA_Abort+0x610>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3a      	ldr	r2, [pc, #232]	@ (8005244 <HAL_DMA_Abort+0x614>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a38      	ldr	r2, [pc, #224]	@ (8005248 <HAL_DMA_Abort+0x618>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a37      	ldr	r2, [pc, #220]	@ (800524c <HAL_DMA_Abort+0x61c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	@ (8005250 <HAL_DMA_Abort+0x620>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a34      	ldr	r2, [pc, #208]	@ (8005254 <HAL_DMA_Abort+0x624>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a32      	ldr	r2, [pc, #200]	@ (8005258 <HAL_DMA_Abort+0x628>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a31      	ldr	r2, [pc, #196]	@ (800525c <HAL_DMA_Abort+0x62c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005260 <HAL_DMA_Abort+0x630>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005264 <HAL_DMA_Abort+0x634>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_Abort+0x58a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <HAL_DMA_Abort+0x638>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_DMA_Abort+0x58e>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <HAL_DMA_Abort+0x590>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	58025408 	.word	0x58025408
 8005250:	5802541c 	.word	0x5802541c
 8005254:	58025430 	.word	0x58025430
 8005258:	58025444 	.word	0x58025444
 800525c:	58025458 	.word	0x58025458
 8005260:	5802546c 	.word	0x5802546c
 8005264:	58025480 	.word	0x58025480
 8005268:	58025494 	.word	0x58025494

0800526c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e237      	b.n	80056ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d004      	beq.n	8005294 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2280      	movs	r2, #128	@ 0x80
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e22c      	b.n	80056ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a5c      	ldr	r2, [pc, #368]	@ (800540c <HAL_DMA_Abort_IT+0x1a0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d04a      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005410 <HAL_DMA_Abort_IT+0x1a4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d045      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a59      	ldr	r2, [pc, #356]	@ (8005414 <HAL_DMA_Abort_IT+0x1a8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d040      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a58      	ldr	r2, [pc, #352]	@ (8005418 <HAL_DMA_Abort_IT+0x1ac>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d03b      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a56      	ldr	r2, [pc, #344]	@ (800541c <HAL_DMA_Abort_IT+0x1b0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d036      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a55      	ldr	r2, [pc, #340]	@ (8005420 <HAL_DMA_Abort_IT+0x1b4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d031      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a53      	ldr	r2, [pc, #332]	@ (8005424 <HAL_DMA_Abort_IT+0x1b8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02c      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a52      	ldr	r2, [pc, #328]	@ (8005428 <HAL_DMA_Abort_IT+0x1bc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d027      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a50      	ldr	r2, [pc, #320]	@ (800542c <HAL_DMA_Abort_IT+0x1c0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d022      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005430 <HAL_DMA_Abort_IT+0x1c4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005434 <HAL_DMA_Abort_IT+0x1c8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a4c      	ldr	r2, [pc, #304]	@ (8005438 <HAL_DMA_Abort_IT+0x1cc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a4a      	ldr	r2, [pc, #296]	@ (800543c <HAL_DMA_Abort_IT+0x1d0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a49      	ldr	r2, [pc, #292]	@ (8005440 <HAL_DMA_Abort_IT+0x1d4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a47      	ldr	r2, [pc, #284]	@ (8005444 <HAL_DMA_Abort_IT+0x1d8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_DMA_Abort_IT+0xc8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a46      	ldr	r2, [pc, #280]	@ (8005448 <HAL_DMA_Abort_IT+0x1dc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d101      	bne.n	8005338 <HAL_DMA_Abort_IT+0xcc>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_DMA_Abort_IT+0xce>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8086 	beq.w	800544c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2204      	movs	r2, #4
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2f      	ldr	r2, [pc, #188]	@ (800540c <HAL_DMA_Abort_IT+0x1a0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04a      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2e      	ldr	r2, [pc, #184]	@ (8005410 <HAL_DMA_Abort_IT+0x1a4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d045      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <HAL_DMA_Abort_IT+0x1a8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d040      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2b      	ldr	r2, [pc, #172]	@ (8005418 <HAL_DMA_Abort_IT+0x1ac>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d03b      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a29      	ldr	r2, [pc, #164]	@ (800541c <HAL_DMA_Abort_IT+0x1b0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a28      	ldr	r2, [pc, #160]	@ (8005420 <HAL_DMA_Abort_IT+0x1b4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d031      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a26      	ldr	r2, [pc, #152]	@ (8005424 <HAL_DMA_Abort_IT+0x1b8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02c      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a25      	ldr	r2, [pc, #148]	@ (8005428 <HAL_DMA_Abort_IT+0x1bc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d027      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a23      	ldr	r2, [pc, #140]	@ (800542c <HAL_DMA_Abort_IT+0x1c0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a22      	ldr	r2, [pc, #136]	@ (8005430 <HAL_DMA_Abort_IT+0x1c4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01d      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a20      	ldr	r2, [pc, #128]	@ (8005434 <HAL_DMA_Abort_IT+0x1c8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005438 <HAL_DMA_Abort_IT+0x1cc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	@ (800543c <HAL_DMA_Abort_IT+0x1d0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005440 <HAL_DMA_Abort_IT+0x1d4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <HAL_DMA_Abort_IT+0x1d8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x17c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <HAL_DMA_Abort_IT+0x1dc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d108      	bne.n	80053fa <HAL_DMA_Abort_IT+0x18e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e178      	b.n	80056ec <HAL_DMA_Abort_IT+0x480>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e16f      	b.n	80056ec <HAL_DMA_Abort_IT+0x480>
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 020e 	bic.w	r2, r2, #14
 800545a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a6c      	ldr	r2, [pc, #432]	@ (8005614 <HAL_DMA_Abort_IT+0x3a8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04a      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6b      	ldr	r2, [pc, #428]	@ (8005618 <HAL_DMA_Abort_IT+0x3ac>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d045      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a69      	ldr	r2, [pc, #420]	@ (800561c <HAL_DMA_Abort_IT+0x3b0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d040      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a68      	ldr	r2, [pc, #416]	@ (8005620 <HAL_DMA_Abort_IT+0x3b4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d03b      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a66      	ldr	r2, [pc, #408]	@ (8005624 <HAL_DMA_Abort_IT+0x3b8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d036      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a65      	ldr	r2, [pc, #404]	@ (8005628 <HAL_DMA_Abort_IT+0x3bc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d031      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a63      	ldr	r2, [pc, #396]	@ (800562c <HAL_DMA_Abort_IT+0x3c0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02c      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a62      	ldr	r2, [pc, #392]	@ (8005630 <HAL_DMA_Abort_IT+0x3c4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d027      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a60      	ldr	r2, [pc, #384]	@ (8005634 <HAL_DMA_Abort_IT+0x3c8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005638 <HAL_DMA_Abort_IT+0x3cc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5d      	ldr	r2, [pc, #372]	@ (800563c <HAL_DMA_Abort_IT+0x3d0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005640 <HAL_DMA_Abort_IT+0x3d4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005644 <HAL_DMA_Abort_IT+0x3d8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a59      	ldr	r2, [pc, #356]	@ (8005648 <HAL_DMA_Abort_IT+0x3dc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a57      	ldr	r2, [pc, #348]	@ (800564c <HAL_DMA_Abort_IT+0x3e0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_DMA_Abort_IT+0x290>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a56      	ldr	r2, [pc, #344]	@ (8005650 <HAL_DMA_Abort_IT+0x3e4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d108      	bne.n	800550e <HAL_DMA_Abort_IT+0x2a2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e007      	b.n	800551e <HAL_DMA_Abort_IT+0x2b2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3c      	ldr	r2, [pc, #240]	@ (8005614 <HAL_DMA_Abort_IT+0x3a8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d072      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3a      	ldr	r2, [pc, #232]	@ (8005618 <HAL_DMA_Abort_IT+0x3ac>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d06d      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a39      	ldr	r2, [pc, #228]	@ (800561c <HAL_DMA_Abort_IT+0x3b0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d068      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a37      	ldr	r2, [pc, #220]	@ (8005620 <HAL_DMA_Abort_IT+0x3b4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d063      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a36      	ldr	r2, [pc, #216]	@ (8005624 <HAL_DMA_Abort_IT+0x3b8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d05e      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a34      	ldr	r2, [pc, #208]	@ (8005628 <HAL_DMA_Abort_IT+0x3bc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d059      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a33      	ldr	r2, [pc, #204]	@ (800562c <HAL_DMA_Abort_IT+0x3c0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d054      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a31      	ldr	r2, [pc, #196]	@ (8005630 <HAL_DMA_Abort_IT+0x3c4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04f      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a30      	ldr	r2, [pc, #192]	@ (8005634 <HAL_DMA_Abort_IT+0x3c8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <HAL_DMA_Abort_IT+0x3cc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2d      	ldr	r2, [pc, #180]	@ (800563c <HAL_DMA_Abort_IT+0x3d0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2b      	ldr	r2, [pc, #172]	@ (8005640 <HAL_DMA_Abort_IT+0x3d4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2a      	ldr	r2, [pc, #168]	@ (8005644 <HAL_DMA_Abort_IT+0x3d8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a28      	ldr	r2, [pc, #160]	@ (8005648 <HAL_DMA_Abort_IT+0x3dc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a27      	ldr	r2, [pc, #156]	@ (800564c <HAL_DMA_Abort_IT+0x3e0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a25      	ldr	r2, [pc, #148]	@ (8005650 <HAL_DMA_Abort_IT+0x3e4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a24      	ldr	r2, [pc, #144]	@ (8005654 <HAL_DMA_Abort_IT+0x3e8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a22      	ldr	r2, [pc, #136]	@ (8005658 <HAL_DMA_Abort_IT+0x3ec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a21      	ldr	r2, [pc, #132]	@ (800565c <HAL_DMA_Abort_IT+0x3f0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005660 <HAL_DMA_Abort_IT+0x3f4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005664 <HAL_DMA_Abort_IT+0x3f8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <HAL_DMA_Abort_IT+0x3fc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1b      	ldr	r2, [pc, #108]	@ (800566c <HAL_DMA_Abort_IT+0x400>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Abort_IT+0x3a2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_DMA_Abort_IT+0x404>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d132      	bne.n	8005674 <HAL_DMA_Abort_IT+0x408>
 800560e:	2301      	movs	r3, #1
 8005610:	e031      	b.n	8005676 <HAL_DMA_Abort_IT+0x40a>
 8005612:	bf00      	nop
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	58025408 	.word	0x58025408
 8005658:	5802541c 	.word	0x5802541c
 800565c:	58025430 	.word	0x58025430
 8005660:	58025444 	.word	0x58025444
 8005664:	58025458 	.word	0x58025458
 8005668:	5802546c 	.word	0x5802546c
 800566c:	58025480 	.word	0x58025480
 8005670:	58025494 	.word	0x58025494
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d028      	beq.n	80056cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005688:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop

080056f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005704:	4b67      	ldr	r3, [pc, #412]	@ (80058a4 <HAL_DMA_IRQHandler+0x1ac>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a67      	ldr	r2, [pc, #412]	@ (80058a8 <HAL_DMA_IRQHandler+0x1b0>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	0a9b      	lsrs	r3, r3, #10
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5f      	ldr	r2, [pc, #380]	@ (80058ac <HAL_DMA_IRQHandler+0x1b4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d04a      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5d      	ldr	r2, [pc, #372]	@ (80058b0 <HAL_DMA_IRQHandler+0x1b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d045      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a5c      	ldr	r2, [pc, #368]	@ (80058b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d040      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5a      	ldr	r2, [pc, #360]	@ (80058b8 <HAL_DMA_IRQHandler+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d03b      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a59      	ldr	r2, [pc, #356]	@ (80058bc <HAL_DMA_IRQHandler+0x1c4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d036      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a57      	ldr	r2, [pc, #348]	@ (80058c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d031      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a56      	ldr	r2, [pc, #344]	@ (80058c4 <HAL_DMA_IRQHandler+0x1cc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d02c      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a54      	ldr	r2, [pc, #336]	@ (80058c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d027      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a53      	ldr	r2, [pc, #332]	@ (80058cc <HAL_DMA_IRQHandler+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a51      	ldr	r2, [pc, #324]	@ (80058d0 <HAL_DMA_IRQHandler+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a50      	ldr	r2, [pc, #320]	@ (80058d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a4e      	ldr	r2, [pc, #312]	@ (80058d8 <HAL_DMA_IRQHandler+0x1e0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a4d      	ldr	r2, [pc, #308]	@ (80058dc <HAL_DMA_IRQHandler+0x1e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a4b      	ldr	r2, [pc, #300]	@ (80058e0 <HAL_DMA_IRQHandler+0x1e8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4a      	ldr	r2, [pc, #296]	@ (80058e4 <HAL_DMA_IRQHandler+0x1ec>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_DMA_IRQHandler+0xd2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a48      	ldr	r2, [pc, #288]	@ (80058e8 <HAL_DMA_IRQHandler+0x1f0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_DMA_IRQHandler+0xd6>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_DMA_IRQHandler+0xd8>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 842b 	beq.w	800602c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2208      	movs	r2, #8
 80057e0:	409a      	lsls	r2, r3
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80a2 	beq.w	8005930 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2e      	ldr	r2, [pc, #184]	@ (80058ac <HAL_DMA_IRQHandler+0x1b4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04a      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2d      	ldr	r2, [pc, #180]	@ (80058b0 <HAL_DMA_IRQHandler+0x1b8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2b      	ldr	r2, [pc, #172]	@ (80058b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d040      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a2a      	ldr	r2, [pc, #168]	@ (80058b8 <HAL_DMA_IRQHandler+0x1c0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d03b      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a28      	ldr	r2, [pc, #160]	@ (80058bc <HAL_DMA_IRQHandler+0x1c4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d036      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a27      	ldr	r2, [pc, #156]	@ (80058c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d031      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a25      	ldr	r2, [pc, #148]	@ (80058c4 <HAL_DMA_IRQHandler+0x1cc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02c      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a24      	ldr	r2, [pc, #144]	@ (80058c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a22      	ldr	r2, [pc, #136]	@ (80058cc <HAL_DMA_IRQHandler+0x1d4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <HAL_DMA_IRQHandler+0x1d8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1f      	ldr	r2, [pc, #124]	@ (80058d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1e      	ldr	r2, [pc, #120]	@ (80058d8 <HAL_DMA_IRQHandler+0x1e0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <HAL_DMA_IRQHandler+0x1e4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1b      	ldr	r2, [pc, #108]	@ (80058e0 <HAL_DMA_IRQHandler+0x1e8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	@ (80058e4 <HAL_DMA_IRQHandler+0x1ec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_IRQHandler+0x194>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_DMA_IRQHandler+0x1f0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d12f      	bne.n	80058ec <HAL_DMA_IRQHandler+0x1f4>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e02e      	b.n	8005900 <HAL_DMA_IRQHandler+0x208>
 80058a2:	bf00      	nop
 80058a4:	24000000 	.word	0x24000000
 80058a8:	1b4e81b5 	.word	0x1b4e81b5
 80058ac:	40020010 	.word	0x40020010
 80058b0:	40020028 	.word	0x40020028
 80058b4:	40020040 	.word	0x40020040
 80058b8:	40020058 	.word	0x40020058
 80058bc:	40020070 	.word	0x40020070
 80058c0:	40020088 	.word	0x40020088
 80058c4:	400200a0 	.word	0x400200a0
 80058c8:	400200b8 	.word	0x400200b8
 80058cc:	40020410 	.word	0x40020410
 80058d0:	40020428 	.word	0x40020428
 80058d4:	40020440 	.word	0x40020440
 80058d8:	40020458 	.word	0x40020458
 80058dc:	40020470 	.word	0x40020470
 80058e0:	40020488 	.word	0x40020488
 80058e4:	400204a0 	.word	0x400204a0
 80058e8:	400204b8 	.word	0x400204b8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0204 	bic.w	r2, r2, #4
 8005912:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	2208      	movs	r2, #8
 800591e:	409a      	lsls	r2, r3
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	f043 0201 	orr.w	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	fa22 f303 	lsr.w	r3, r2, r3
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d06e      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a69      	ldr	r2, [pc, #420]	@ (8005af0 <HAL_DMA_IRQHandler+0x3f8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a67      	ldr	r2, [pc, #412]	@ (8005af4 <HAL_DMA_IRQHandler+0x3fc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a66      	ldr	r2, [pc, #408]	@ (8005af8 <HAL_DMA_IRQHandler+0x400>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a64      	ldr	r2, [pc, #400]	@ (8005afc <HAL_DMA_IRQHandler+0x404>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a63      	ldr	r2, [pc, #396]	@ (8005b00 <HAL_DMA_IRQHandler+0x408>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a61      	ldr	r2, [pc, #388]	@ (8005b04 <HAL_DMA_IRQHandler+0x40c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a60      	ldr	r2, [pc, #384]	@ (8005b08 <HAL_DMA_IRQHandler+0x410>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5e      	ldr	r2, [pc, #376]	@ (8005b0c <HAL_DMA_IRQHandler+0x414>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b10 <HAL_DMA_IRQHandler+0x418>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a5b      	ldr	r2, [pc, #364]	@ (8005b14 <HAL_DMA_IRQHandler+0x41c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a5a      	ldr	r2, [pc, #360]	@ (8005b18 <HAL_DMA_IRQHandler+0x420>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a58      	ldr	r2, [pc, #352]	@ (8005b1c <HAL_DMA_IRQHandler+0x424>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a57      	ldr	r2, [pc, #348]	@ (8005b20 <HAL_DMA_IRQHandler+0x428>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a55      	ldr	r2, [pc, #340]	@ (8005b24 <HAL_DMA_IRQHandler+0x42c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a54      	ldr	r2, [pc, #336]	@ (8005b28 <HAL_DMA_IRQHandler+0x430>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x2ee>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a52      	ldr	r2, [pc, #328]	@ (8005b2c <HAL_DMA_IRQHandler+0x434>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10a      	bne.n	80059fc <HAL_DMA_IRQHandler+0x304>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e003      	b.n	8005a04 <HAL_DMA_IRQHandler+0x30c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	f043 0202 	orr.w	r2, r3, #2
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 808f 	beq.w	8005b58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <HAL_DMA_IRQHandler+0x3f8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d04a      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	@ (8005af4 <HAL_DMA_IRQHandler+0x3fc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d045      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a29      	ldr	r2, [pc, #164]	@ (8005af8 <HAL_DMA_IRQHandler+0x400>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d040      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	@ (8005afc <HAL_DMA_IRQHandler+0x404>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d03b      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a26      	ldr	r2, [pc, #152]	@ (8005b00 <HAL_DMA_IRQHandler+0x408>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d036      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a24      	ldr	r2, [pc, #144]	@ (8005b04 <HAL_DMA_IRQHandler+0x40c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d031      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a23      	ldr	r2, [pc, #140]	@ (8005b08 <HAL_DMA_IRQHandler+0x410>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d02c      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a21      	ldr	r2, [pc, #132]	@ (8005b0c <HAL_DMA_IRQHandler+0x414>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d027      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a20      	ldr	r2, [pc, #128]	@ (8005b10 <HAL_DMA_IRQHandler+0x418>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d022      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1e      	ldr	r2, [pc, #120]	@ (8005b14 <HAL_DMA_IRQHandler+0x41c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b18 <HAL_DMA_IRQHandler+0x420>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d018      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1b      	ldr	r2, [pc, #108]	@ (8005b1c <HAL_DMA_IRQHandler+0x424>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <HAL_DMA_IRQHandler+0x428>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <HAL_DMA_IRQHandler+0x42c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <HAL_DMA_IRQHandler+0x430>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_IRQHandler+0x3e2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a15      	ldr	r2, [pc, #84]	@ (8005b2c <HAL_DMA_IRQHandler+0x434>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d12a      	bne.n	8005b30 <HAL_DMA_IRQHandler+0x438>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e023      	b.n	8005b38 <HAL_DMA_IRQHandler+0x440>
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2204      	movs	r2, #4
 8005b46:	409a      	lsls	r2, r3
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b50:	f043 0204 	orr.w	r2, r3, #4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2210      	movs	r2, #16
 8005b62:	409a      	lsls	r2, r3
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80a6 	beq.w	8005cba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a85      	ldr	r2, [pc, #532]	@ (8005d88 <HAL_DMA_IRQHandler+0x690>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d04a      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a83      	ldr	r2, [pc, #524]	@ (8005d8c <HAL_DMA_IRQHandler+0x694>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d045      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a82      	ldr	r2, [pc, #520]	@ (8005d90 <HAL_DMA_IRQHandler+0x698>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d040      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a80      	ldr	r2, [pc, #512]	@ (8005d94 <HAL_DMA_IRQHandler+0x69c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d03b      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7f      	ldr	r2, [pc, #508]	@ (8005d98 <HAL_DMA_IRQHandler+0x6a0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d036      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7d      	ldr	r2, [pc, #500]	@ (8005d9c <HAL_DMA_IRQHandler+0x6a4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d031      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7c      	ldr	r2, [pc, #496]	@ (8005da0 <HAL_DMA_IRQHandler+0x6a8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d02c      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8005da4 <HAL_DMA_IRQHandler+0x6ac>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d027      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a79      	ldr	r2, [pc, #484]	@ (8005da8 <HAL_DMA_IRQHandler+0x6b0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d022      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a77      	ldr	r2, [pc, #476]	@ (8005dac <HAL_DMA_IRQHandler+0x6b4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01d      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a76      	ldr	r2, [pc, #472]	@ (8005db0 <HAL_DMA_IRQHandler+0x6b8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d018      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a74      	ldr	r2, [pc, #464]	@ (8005db4 <HAL_DMA_IRQHandler+0x6bc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a73      	ldr	r2, [pc, #460]	@ (8005db8 <HAL_DMA_IRQHandler+0x6c0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00e      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a71      	ldr	r2, [pc, #452]	@ (8005dbc <HAL_DMA_IRQHandler+0x6c4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a70      	ldr	r2, [pc, #448]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x516>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10a      	bne.n	8005c24 <HAL_DMA_IRQHandler+0x52c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e009      	b.n	8005c38 <HAL_DMA_IRQHandler+0x540>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d03e      	beq.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2210      	movs	r2, #16
 8005c46:	409a      	lsls	r2, r3
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d024      	beq.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
 8005c78:	e01f      	b.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01b      	beq.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	e016      	b.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0208 	bic.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8110 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d88 <HAL_DMA_IRQHandler+0x690>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2b      	ldr	r2, [pc, #172]	@ (8005d8c <HAL_DMA_IRQHandler+0x694>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d045      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a29      	ldr	r2, [pc, #164]	@ (8005d90 <HAL_DMA_IRQHandler+0x698>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d040      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a28      	ldr	r2, [pc, #160]	@ (8005d94 <HAL_DMA_IRQHandler+0x69c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a26      	ldr	r2, [pc, #152]	@ (8005d98 <HAL_DMA_IRQHandler+0x6a0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a25      	ldr	r2, [pc, #148]	@ (8005d9c <HAL_DMA_IRQHandler+0x6a4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a23      	ldr	r2, [pc, #140]	@ (8005da0 <HAL_DMA_IRQHandler+0x6a8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a22      	ldr	r2, [pc, #136]	@ (8005da4 <HAL_DMA_IRQHandler+0x6ac>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d027      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a20      	ldr	r2, [pc, #128]	@ (8005da8 <HAL_DMA_IRQHandler+0x6b0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dac <HAL_DMA_IRQHandler+0x6b4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	@ (8005db0 <HAL_DMA_IRQHandler+0x6b8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <HAL_DMA_IRQHandler+0x6bc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005db8 <HAL_DMA_IRQHandler+0x6c0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a19      	ldr	r2, [pc, #100]	@ (8005dbc <HAL_DMA_IRQHandler+0x6c4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x678>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d12b      	bne.n	8005dc8 <HAL_DMA_IRQHandler+0x6d0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	2300      	moveq	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	e02a      	b.n	8005ddc <HAL_DMA_IRQHandler+0x6e4>
 8005d86:	bf00      	nop
 8005d88:	40020010 	.word	0x40020010
 8005d8c:	40020028 	.word	0x40020028
 8005d90:	40020040 	.word	0x40020040
 8005d94:	40020058 	.word	0x40020058
 8005d98:	40020070 	.word	0x40020070
 8005d9c:	40020088 	.word	0x40020088
 8005da0:	400200a0 	.word	0x400200a0
 8005da4:	400200b8 	.word	0x400200b8
 8005da8:	40020410 	.word	0x40020410
 8005dac:	40020428 	.word	0x40020428
 8005db0:	40020440 	.word	0x40020440
 8005db4:	40020458 	.word	0x40020458
 8005db8:	40020470 	.word	0x40020470
 8005dbc:	40020488 	.word	0x40020488
 8005dc0:	400204a0 	.word	0x400204a0
 8005dc4:	400204b8 	.word	0x400204b8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8087 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2220      	movs	r2, #32
 8005dec:	409a      	lsls	r2, r3
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d139      	bne.n	8005e72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0216 	bic.w	r2, r2, #22
 8005e0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_DMA_IRQHandler+0x736>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0208 	bic.w	r2, r2, #8
 8005e3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	223f      	movs	r2, #63	@ 0x3f
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 834a 	beq.w	80064fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
          }
          return;
 8005e70:	e344      	b.n	80064fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d018      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d108      	bne.n	8005ea0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02c      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
 8005e9e:	e027      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d023      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
 8005eb0:	e01e      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10f      	bne.n	8005ee0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0210 	bic.w	r2, r2, #16
 8005ece:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8306 	beq.w	8006506 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8088 	beq.w	8006018 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a7a      	ldr	r2, [pc, #488]	@ (8006100 <HAL_DMA_IRQHandler+0xa08>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d04a      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a79      	ldr	r2, [pc, #484]	@ (8006104 <HAL_DMA_IRQHandler+0xa0c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d045      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a77      	ldr	r2, [pc, #476]	@ (8006108 <HAL_DMA_IRQHandler+0xa10>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d040      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a76      	ldr	r2, [pc, #472]	@ (800610c <HAL_DMA_IRQHandler+0xa14>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d03b      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a74      	ldr	r2, [pc, #464]	@ (8006110 <HAL_DMA_IRQHandler+0xa18>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d036      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a73      	ldr	r2, [pc, #460]	@ (8006114 <HAL_DMA_IRQHandler+0xa1c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d031      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a71      	ldr	r2, [pc, #452]	@ (8006118 <HAL_DMA_IRQHandler+0xa20>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02c      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a70      	ldr	r2, [pc, #448]	@ (800611c <HAL_DMA_IRQHandler+0xa24>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d027      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	@ (8006120 <HAL_DMA_IRQHandler+0xa28>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006124 <HAL_DMA_IRQHandler+0xa2c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a6b      	ldr	r2, [pc, #428]	@ (8006128 <HAL_DMA_IRQHandler+0xa30>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6a      	ldr	r2, [pc, #424]	@ (800612c <HAL_DMA_IRQHandler+0xa34>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a68      	ldr	r2, [pc, #416]	@ (8006130 <HAL_DMA_IRQHandler+0xa38>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a67      	ldr	r2, [pc, #412]	@ (8006134 <HAL_DMA_IRQHandler+0xa3c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a65      	ldr	r2, [pc, #404]	@ (8006138 <HAL_DMA_IRQHandler+0xa40>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x8b8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a64      	ldr	r2, [pc, #400]	@ (800613c <HAL_DMA_IRQHandler+0xa44>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <HAL_DMA_IRQHandler+0x8ca>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e007      	b.n	8005fd2 <HAL_DMA_IRQHandler+0x8da>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d307      	bcc.n	8005fee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f2      	bne.n	8005fd2 <HAL_DMA_IRQHandler+0x8da>
 8005fec:	e000      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005fee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2203      	movs	r2, #3
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006006:	e003      	b.n	8006010 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8272 	beq.w	8006506 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
 800602a:	e26c      	b.n	8006506 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a43      	ldr	r2, [pc, #268]	@ (8006140 <HAL_DMA_IRQHandler+0xa48>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a42      	ldr	r2, [pc, #264]	@ (8006144 <HAL_DMA_IRQHandler+0xa4c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d01d      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a40      	ldr	r2, [pc, #256]	@ (8006148 <HAL_DMA_IRQHandler+0xa50>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a3f      	ldr	r2, [pc, #252]	@ (800614c <HAL_DMA_IRQHandler+0xa54>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3d      	ldr	r2, [pc, #244]	@ (8006150 <HAL_DMA_IRQHandler+0xa58>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a3c      	ldr	r2, [pc, #240]	@ (8006154 <HAL_DMA_IRQHandler+0xa5c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a3a      	ldr	r2, [pc, #232]	@ (8006158 <HAL_DMA_IRQHandler+0xa60>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_DMA_IRQHandler+0x984>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a39      	ldr	r2, [pc, #228]	@ (800615c <HAL_DMA_IRQHandler+0xa64>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d101      	bne.n	8006080 <HAL_DMA_IRQHandler+0x988>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <HAL_DMA_IRQHandler+0x98a>
 8006080:	2300      	movs	r3, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 823f 	beq.w	8006506 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2204      	movs	r2, #4
 800609a:	409a      	lsls	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80cd 	beq.w	8006240 <HAL_DMA_IRQHandler+0xb48>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80c7 	beq.w	8006240 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2204      	movs	r2, #4
 80060bc:	409a      	lsls	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d049      	beq.n	8006160 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8210 	beq.w	8006500 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e8:	e20a      	b.n	8006500 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8206 	beq.w	8006500 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060fc:	e200      	b.n	8006500 <HAL_DMA_IRQHandler+0xe08>
 80060fe:	bf00      	nop
 8006100:	40020010 	.word	0x40020010
 8006104:	40020028 	.word	0x40020028
 8006108:	40020040 	.word	0x40020040
 800610c:	40020058 	.word	0x40020058
 8006110:	40020070 	.word	0x40020070
 8006114:	40020088 	.word	0x40020088
 8006118:	400200a0 	.word	0x400200a0
 800611c:	400200b8 	.word	0x400200b8
 8006120:	40020410 	.word	0x40020410
 8006124:	40020428 	.word	0x40020428
 8006128:	40020440 	.word	0x40020440
 800612c:	40020458 	.word	0x40020458
 8006130:	40020470 	.word	0x40020470
 8006134:	40020488 	.word	0x40020488
 8006138:	400204a0 	.word	0x400204a0
 800613c:	400204b8 	.word	0x400204b8
 8006140:	58025408 	.word	0x58025408
 8006144:	5802541c 	.word	0x5802541c
 8006148:	58025430 	.word	0x58025430
 800614c:	58025444 	.word	0x58025444
 8006150:	58025458 	.word	0x58025458
 8006154:	5802546c 	.word	0x5802546c
 8006158:	58025480 	.word	0x58025480
 800615c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d160      	bne.n	800622c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7f      	ldr	r2, [pc, #508]	@ (800636c <HAL_DMA_IRQHandler+0xc74>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7d      	ldr	r2, [pc, #500]	@ (8006370 <HAL_DMA_IRQHandler+0xc78>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a7c      	ldr	r2, [pc, #496]	@ (8006374 <HAL_DMA_IRQHandler+0xc7c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7a      	ldr	r2, [pc, #488]	@ (8006378 <HAL_DMA_IRQHandler+0xc80>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a79      	ldr	r2, [pc, #484]	@ (800637c <HAL_DMA_IRQHandler+0xc84>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a77      	ldr	r2, [pc, #476]	@ (8006380 <HAL_DMA_IRQHandler+0xc88>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a76      	ldr	r2, [pc, #472]	@ (8006384 <HAL_DMA_IRQHandler+0xc8c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a74      	ldr	r2, [pc, #464]	@ (8006388 <HAL_DMA_IRQHandler+0xc90>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a73      	ldr	r2, [pc, #460]	@ (800638c <HAL_DMA_IRQHandler+0xc94>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a71      	ldr	r2, [pc, #452]	@ (8006390 <HAL_DMA_IRQHandler+0xc98>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a70      	ldr	r2, [pc, #448]	@ (8006394 <HAL_DMA_IRQHandler+0xc9c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006398 <HAL_DMA_IRQHandler+0xca0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6d      	ldr	r2, [pc, #436]	@ (800639c <HAL_DMA_IRQHandler+0xca4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a6b      	ldr	r2, [pc, #428]	@ (80063a0 <HAL_DMA_IRQHandler+0xca8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6a      	ldr	r2, [pc, #424]	@ (80063a4 <HAL_DMA_IRQHandler+0xcac>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMA_IRQHandler+0xb12>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a68      	ldr	r2, [pc, #416]	@ (80063a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <HAL_DMA_IRQHandler+0xb24>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0208 	bic.w	r2, r2, #8
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e007      	b.n	800622c <HAL_DMA_IRQHandler+0xb34>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8165 	beq.w	8006500 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800623e:	e15f      	b.n	8006500 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2202      	movs	r2, #2
 800624a:	409a      	lsls	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80c5 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xce8>
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80bf 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2202      	movs	r2, #2
 800626c:	409a      	lsls	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d018      	beq.n	80062ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 813a 	beq.w	8006504 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006298:	e134      	b.n	8006504 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8130 	beq.w	8006504 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ac:	e12a      	b.n	8006504 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8089 	bne.w	80063cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2b      	ldr	r2, [pc, #172]	@ (800636c <HAL_DMA_IRQHandler+0xc74>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d04a      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a29      	ldr	r2, [pc, #164]	@ (8006370 <HAL_DMA_IRQHandler+0xc78>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d045      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a28      	ldr	r2, [pc, #160]	@ (8006374 <HAL_DMA_IRQHandler+0xc7c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d040      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a26      	ldr	r2, [pc, #152]	@ (8006378 <HAL_DMA_IRQHandler+0xc80>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d03b      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_DMA_IRQHandler+0xc84>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d036      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a23      	ldr	r2, [pc, #140]	@ (8006380 <HAL_DMA_IRQHandler+0xc88>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_DMA_IRQHandler+0xc8c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d02c      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <HAL_DMA_IRQHandler+0xc90>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d027      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1f      	ldr	r2, [pc, #124]	@ (800638c <HAL_DMA_IRQHandler+0xc94>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1d      	ldr	r2, [pc, #116]	@ (8006390 <HAL_DMA_IRQHandler+0xc98>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1c      	ldr	r2, [pc, #112]	@ (8006394 <HAL_DMA_IRQHandler+0xc9c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1a      	ldr	r2, [pc, #104]	@ (8006398 <HAL_DMA_IRQHandler+0xca0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a19      	ldr	r2, [pc, #100]	@ (800639c <HAL_DMA_IRQHandler+0xca4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <HAL_DMA_IRQHandler+0xca8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a16      	ldr	r2, [pc, #88]	@ (80063a4 <HAL_DMA_IRQHandler+0xcac>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_DMA_IRQHandler+0xc62>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <HAL_DMA_IRQHandler+0xcb0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d128      	bne.n	80063ac <HAL_DMA_IRQHandler+0xcb4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0214 	bic.w	r2, r2, #20
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	e027      	b.n	80063bc <HAL_DMA_IRQHandler+0xcc4>
 800636c:	40020010 	.word	0x40020010
 8006370:	40020028 	.word	0x40020028
 8006374:	40020040 	.word	0x40020040
 8006378:	40020058 	.word	0x40020058
 800637c:	40020070 	.word	0x40020070
 8006380:	40020088 	.word	0x40020088
 8006384:	400200a0 	.word	0x400200a0
 8006388:	400200b8 	.word	0x400200b8
 800638c:	40020410 	.word	0x40020410
 8006390:	40020428 	.word	0x40020428
 8006394:	40020440 	.word	0x40020440
 8006398:	40020458 	.word	0x40020458
 800639c:	40020470 	.word	0x40020470
 80063a0:	40020488 	.word	0x40020488
 80063a4:	400204a0 	.word	0x400204a0
 80063a8:	400204b8 	.word	0x400204b8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 020a 	bic.w	r2, r2, #10
 80063ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8097 	beq.w	8006504 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063de:	e091      	b.n	8006504 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2208      	movs	r2, #8
 80063ea:	409a      	lsls	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8088 	beq.w	8006506 <HAL_DMA_IRQHandler+0xe0e>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8082 	beq.w	8006506 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a41      	ldr	r2, [pc, #260]	@ (800650c <HAL_DMA_IRQHandler+0xe14>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d04a      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a3f      	ldr	r2, [pc, #252]	@ (8006510 <HAL_DMA_IRQHandler+0xe18>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d045      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a3e      	ldr	r2, [pc, #248]	@ (8006514 <HAL_DMA_IRQHandler+0xe1c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d040      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a3c      	ldr	r2, [pc, #240]	@ (8006518 <HAL_DMA_IRQHandler+0xe20>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d03b      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a3b      	ldr	r2, [pc, #236]	@ (800651c <HAL_DMA_IRQHandler+0xe24>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d036      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a39      	ldr	r2, [pc, #228]	@ (8006520 <HAL_DMA_IRQHandler+0xe28>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d031      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a38      	ldr	r2, [pc, #224]	@ (8006524 <HAL_DMA_IRQHandler+0xe2c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d02c      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a36      	ldr	r2, [pc, #216]	@ (8006528 <HAL_DMA_IRQHandler+0xe30>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d027      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a35      	ldr	r2, [pc, #212]	@ (800652c <HAL_DMA_IRQHandler+0xe34>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a33      	ldr	r2, [pc, #204]	@ (8006530 <HAL_DMA_IRQHandler+0xe38>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a32      	ldr	r2, [pc, #200]	@ (8006534 <HAL_DMA_IRQHandler+0xe3c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a30      	ldr	r2, [pc, #192]	@ (8006538 <HAL_DMA_IRQHandler+0xe40>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2f      	ldr	r2, [pc, #188]	@ (800653c <HAL_DMA_IRQHandler+0xe44>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2d      	ldr	r2, [pc, #180]	@ (8006540 <HAL_DMA_IRQHandler+0xe48>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a2c      	ldr	r2, [pc, #176]	@ (8006544 <HAL_DMA_IRQHandler+0xe4c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xdaa>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2a      	ldr	r2, [pc, #168]	@ (8006548 <HAL_DMA_IRQHandler+0xe50>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d108      	bne.n	80064b4 <HAL_DMA_IRQHandler+0xdbc>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 021c 	bic.w	r2, r2, #28
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e007      	b.n	80064c4 <HAL_DMA_IRQHandler+0xdcc>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 020e 	bic.w	r2, r2, #14
 80064c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2201      	movs	r2, #1
 80064ce:	409a      	lsls	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
 80064fa:	e004      	b.n	8006506 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064fc:	bf00      	nop
 80064fe:	e002      	b.n	8006506 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006504:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006506:	3728      	adds	r7, #40	@ 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40020010 	.word	0x40020010
 8006510:	40020028 	.word	0x40020028
 8006514:	40020040 	.word	0x40020040
 8006518:	40020058 	.word	0x40020058
 800651c:	40020070 	.word	0x40020070
 8006520:	40020088 	.word	0x40020088
 8006524:	400200a0 	.word	0x400200a0
 8006528:	400200b8 	.word	0x400200b8
 800652c:	40020410 	.word	0x40020410
 8006530:	40020428 	.word	0x40020428
 8006534:	40020440 	.word	0x40020440
 8006538:	40020458 	.word	0x40020458
 800653c:	40020470 	.word	0x40020470
 8006540:	40020488 	.word	0x40020488
 8006544:	400204a0 	.word	0x400204a0
 8006548:	400204b8 	.word	0x400204b8

0800654c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a7f      	ldr	r2, [pc, #508]	@ (8006780 <DMA_SetConfig+0x21c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d072      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7d      	ldr	r2, [pc, #500]	@ (8006784 <DMA_SetConfig+0x220>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d06d      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a7c      	ldr	r2, [pc, #496]	@ (8006788 <DMA_SetConfig+0x224>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d068      	beq.n	800666e <DMA_SetConfig+0x10a>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a7a      	ldr	r2, [pc, #488]	@ (800678c <DMA_SetConfig+0x228>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d063      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a79      	ldr	r2, [pc, #484]	@ (8006790 <DMA_SetConfig+0x22c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d05e      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a77      	ldr	r2, [pc, #476]	@ (8006794 <DMA_SetConfig+0x230>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d059      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a76      	ldr	r2, [pc, #472]	@ (8006798 <DMA_SetConfig+0x234>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d054      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a74      	ldr	r2, [pc, #464]	@ (800679c <DMA_SetConfig+0x238>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d04f      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a73      	ldr	r2, [pc, #460]	@ (80067a0 <DMA_SetConfig+0x23c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d04a      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a71      	ldr	r2, [pc, #452]	@ (80067a4 <DMA_SetConfig+0x240>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d045      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a70      	ldr	r2, [pc, #448]	@ (80067a8 <DMA_SetConfig+0x244>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d040      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a6e      	ldr	r2, [pc, #440]	@ (80067ac <DMA_SetConfig+0x248>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d03b      	beq.n	800666e <DMA_SetConfig+0x10a>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a6d      	ldr	r2, [pc, #436]	@ (80067b0 <DMA_SetConfig+0x24c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d036      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a6b      	ldr	r2, [pc, #428]	@ (80067b4 <DMA_SetConfig+0x250>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d031      	beq.n	800666e <DMA_SetConfig+0x10a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a6a      	ldr	r2, [pc, #424]	@ (80067b8 <DMA_SetConfig+0x254>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d02c      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a68      	ldr	r2, [pc, #416]	@ (80067bc <DMA_SetConfig+0x258>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d027      	beq.n	800666e <DMA_SetConfig+0x10a>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a67      	ldr	r2, [pc, #412]	@ (80067c0 <DMA_SetConfig+0x25c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d022      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a65      	ldr	r2, [pc, #404]	@ (80067c4 <DMA_SetConfig+0x260>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01d      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a64      	ldr	r2, [pc, #400]	@ (80067c8 <DMA_SetConfig+0x264>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d018      	beq.n	800666e <DMA_SetConfig+0x10a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a62      	ldr	r2, [pc, #392]	@ (80067cc <DMA_SetConfig+0x268>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a61      	ldr	r2, [pc, #388]	@ (80067d0 <DMA_SetConfig+0x26c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00e      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a5f      	ldr	r2, [pc, #380]	@ (80067d4 <DMA_SetConfig+0x270>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d009      	beq.n	800666e <DMA_SetConfig+0x10a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a5e      	ldr	r2, [pc, #376]	@ (80067d8 <DMA_SetConfig+0x274>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d004      	beq.n	800666e <DMA_SetConfig+0x10a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5c      	ldr	r2, [pc, #368]	@ (80067dc <DMA_SetConfig+0x278>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <DMA_SetConfig+0x10e>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <DMA_SetConfig+0x110>
 8006672:	2300      	movs	r3, #0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00d      	beq.n	8006694 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006680:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006692:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <DMA_SetConfig+0x21c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04a      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a38      	ldr	r2, [pc, #224]	@ (8006784 <DMA_SetConfig+0x220>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d045      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a36      	ldr	r2, [pc, #216]	@ (8006788 <DMA_SetConfig+0x224>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d040      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a35      	ldr	r2, [pc, #212]	@ (800678c <DMA_SetConfig+0x228>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d03b      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <DMA_SetConfig+0x22c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d036      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a32      	ldr	r2, [pc, #200]	@ (8006794 <DMA_SetConfig+0x230>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d031      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <DMA_SetConfig+0x234>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d02c      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <DMA_SetConfig+0x238>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d027      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	@ (80067a0 <DMA_SetConfig+0x23c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	@ (80067a4 <DMA_SetConfig+0x240>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2a      	ldr	r2, [pc, #168]	@ (80067a8 <DMA_SetConfig+0x244>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a29      	ldr	r2, [pc, #164]	@ (80067ac <DMA_SetConfig+0x248>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a27      	ldr	r2, [pc, #156]	@ (80067b0 <DMA_SetConfig+0x24c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a26      	ldr	r2, [pc, #152]	@ (80067b4 <DMA_SetConfig+0x250>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a24      	ldr	r2, [pc, #144]	@ (80067b8 <DMA_SetConfig+0x254>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <DMA_SetConfig+0x1d0>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a23      	ldr	r2, [pc, #140]	@ (80067bc <DMA_SetConfig+0x258>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <DMA_SetConfig+0x1d4>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <DMA_SetConfig+0x1d6>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d059      	beq.n	80067f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	223f      	movs	r2, #63	@ 0x3f
 8006748:	409a      	lsls	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800675c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b40      	cmp	r3, #64	@ 0x40
 800676c:	d138      	bne.n	80067e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800677e:	e086      	b.n	800688e <DMA_SetConfig+0x32a>
 8006780:	40020010 	.word	0x40020010
 8006784:	40020028 	.word	0x40020028
 8006788:	40020040 	.word	0x40020040
 800678c:	40020058 	.word	0x40020058
 8006790:	40020070 	.word	0x40020070
 8006794:	40020088 	.word	0x40020088
 8006798:	400200a0 	.word	0x400200a0
 800679c:	400200b8 	.word	0x400200b8
 80067a0:	40020410 	.word	0x40020410
 80067a4:	40020428 	.word	0x40020428
 80067a8:	40020440 	.word	0x40020440
 80067ac:	40020458 	.word	0x40020458
 80067b0:	40020470 	.word	0x40020470
 80067b4:	40020488 	.word	0x40020488
 80067b8:	400204a0 	.word	0x400204a0
 80067bc:	400204b8 	.word	0x400204b8
 80067c0:	58025408 	.word	0x58025408
 80067c4:	5802541c 	.word	0x5802541c
 80067c8:	58025430 	.word	0x58025430
 80067cc:	58025444 	.word	0x58025444
 80067d0:	58025458 	.word	0x58025458
 80067d4:	5802546c 	.word	0x5802546c
 80067d8:	58025480 	.word	0x58025480
 80067dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]
}
 80067f0:	e04d      	b.n	800688e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a29      	ldr	r2, [pc, #164]	@ (800689c <DMA_SetConfig+0x338>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <DMA_SetConfig+0x2de>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a27      	ldr	r2, [pc, #156]	@ (80068a0 <DMA_SetConfig+0x33c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01d      	beq.n	8006842 <DMA_SetConfig+0x2de>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a26      	ldr	r2, [pc, #152]	@ (80068a4 <DMA_SetConfig+0x340>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <DMA_SetConfig+0x2de>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a24      	ldr	r2, [pc, #144]	@ (80068a8 <DMA_SetConfig+0x344>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <DMA_SetConfig+0x2de>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a23      	ldr	r2, [pc, #140]	@ (80068ac <DMA_SetConfig+0x348>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <DMA_SetConfig+0x2de>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <DMA_SetConfig+0x34c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <DMA_SetConfig+0x2de>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a20      	ldr	r2, [pc, #128]	@ (80068b4 <DMA_SetConfig+0x350>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <DMA_SetConfig+0x2de>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1e      	ldr	r2, [pc, #120]	@ (80068b8 <DMA_SetConfig+0x354>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <DMA_SetConfig+0x2e2>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <DMA_SetConfig+0x2e4>
 8006846:	2300      	movs	r3, #0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d020      	beq.n	800688e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2201      	movs	r2, #1
 8006856:	409a      	lsls	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	d108      	bne.n	800687e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	60da      	str	r2, [r3, #12]
}
 800687c:	e007      	b.n	800688e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	60da      	str	r2, [r3, #12]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	58025408 	.word	0x58025408
 80068a0:	5802541c 	.word	0x5802541c
 80068a4:	58025430 	.word	0x58025430
 80068a8:	58025444 	.word	0x58025444
 80068ac:	58025458 	.word	0x58025458
 80068b0:	5802546c 	.word	0x5802546c
 80068b4:	58025480 	.word	0x58025480
 80068b8:	58025494 	.word	0x58025494

080068bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a42      	ldr	r2, [pc, #264]	@ (80069d4 <DMA_CalcBaseAndBitshift+0x118>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04a      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a41      	ldr	r2, [pc, #260]	@ (80069d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d045      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3f      	ldr	r2, [pc, #252]	@ (80069dc <DMA_CalcBaseAndBitshift+0x120>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d040      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3e      	ldr	r2, [pc, #248]	@ (80069e0 <DMA_CalcBaseAndBitshift+0x124>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d03b      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3c      	ldr	r2, [pc, #240]	@ (80069e4 <DMA_CalcBaseAndBitshift+0x128>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d036      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a3b      	ldr	r2, [pc, #236]	@ (80069e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d031      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a39      	ldr	r2, [pc, #228]	@ (80069ec <DMA_CalcBaseAndBitshift+0x130>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02c      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a38      	ldr	r2, [pc, #224]	@ (80069f0 <DMA_CalcBaseAndBitshift+0x134>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d027      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a36      	ldr	r2, [pc, #216]	@ (80069f4 <DMA_CalcBaseAndBitshift+0x138>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d022      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a35      	ldr	r2, [pc, #212]	@ (80069f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01d      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <DMA_CalcBaseAndBitshift+0x140>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a32      	ldr	r2, [pc, #200]	@ (8006a00 <DMA_CalcBaseAndBitshift+0x144>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a30      	ldr	r2, [pc, #192]	@ (8006a04 <DMA_CalcBaseAndBitshift+0x148>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a08 <DMA_CalcBaseAndBitshift+0x14c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2d      	ldr	r2, [pc, #180]	@ (8006a0c <DMA_CalcBaseAndBitshift+0x150>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <DMA_CalcBaseAndBitshift+0xa8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <DMA_CalcBaseAndBitshift+0x154>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d101      	bne.n	8006968 <DMA_CalcBaseAndBitshift+0xac>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <DMA_CalcBaseAndBitshift+0xae>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d024      	beq.n	80069b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	3b10      	subs	r3, #16
 8006976:	4a27      	ldr	r2, [pc, #156]	@ (8006a14 <DMA_CalcBaseAndBitshift+0x158>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	4a24      	ldr	r2, [pc, #144]	@ (8006a18 <DMA_CalcBaseAndBitshift+0x15c>)
 8006988:	5cd3      	ldrb	r3, [r2, r3]
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b03      	cmp	r3, #3
 8006994:	d908      	bls.n	80069a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a1c <DMA_CalcBaseAndBitshift+0x160>)
 800699e:	4013      	ands	r3, r2
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80069a6:	e00d      	b.n	80069c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <DMA_CalcBaseAndBitshift+0x160>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069b6:	e005      	b.n	80069c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40020010 	.word	0x40020010
 80069d8:	40020028 	.word	0x40020028
 80069dc:	40020040 	.word	0x40020040
 80069e0:	40020058 	.word	0x40020058
 80069e4:	40020070 	.word	0x40020070
 80069e8:	40020088 	.word	0x40020088
 80069ec:	400200a0 	.word	0x400200a0
 80069f0:	400200b8 	.word	0x400200b8
 80069f4:	40020410 	.word	0x40020410
 80069f8:	40020428 	.word	0x40020428
 80069fc:	40020440 	.word	0x40020440
 8006a00:	40020458 	.word	0x40020458
 8006a04:	40020470 	.word	0x40020470
 8006a08:	40020488 	.word	0x40020488
 8006a0c:	400204a0 	.word	0x400204a0
 8006a10:	400204b8 	.word	0x400204b8
 8006a14:	aaaaaaab 	.word	0xaaaaaaab
 8006a18:	0801f044 	.word	0x0801f044
 8006a1c:	fffffc00 	.word	0xfffffc00

08006a20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d120      	bne.n	8006a76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d858      	bhi.n	8006aee <DMA_CheckFifoParam+0xce>
 8006a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <DMA_CheckFifoParam+0x24>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a67 	.word	0x08006a67
 8006a4c:	08006a55 	.word	0x08006a55
 8006a50:	08006aef 	.word	0x08006aef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d048      	beq.n	8006af2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a64:	e045      	b.n	8006af2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a6e:	d142      	bne.n	8006af6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a74:	e03f      	b.n	8006af6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a7e:	d123      	bne.n	8006ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d838      	bhi.n	8006afa <DMA_CheckFifoParam+0xda>
 8006a88:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <DMA_CheckFifoParam+0x70>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aa7 	.word	0x08006aa7
 8006a98:	08006aa1 	.word	0x08006aa1
 8006a9c:	08006ab9 	.word	0x08006ab9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
        break;
 8006aa4:	e030      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d025      	beq.n	8006afe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ab6:	e022      	b.n	8006afe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ac0:	d11f      	bne.n	8006b02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ac6:	e01c      	b.n	8006b02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d902      	bls.n	8006ad6 <DMA_CheckFifoParam+0xb6>
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d003      	beq.n	8006adc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ad4:	e018      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8006ada:	e015      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
    break;
 8006aec:	e00b      	b.n	8006b06 <DMA_CheckFifoParam+0xe6>
        break;
 8006aee:	bf00      	nop
 8006af0:	e00a      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        break;
 8006af2:	bf00      	nop
 8006af4:	e008      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        break;
 8006af6:	bf00      	nop
 8006af8:	e006      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        break;
 8006afa:	bf00      	nop
 8006afc:	e004      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        break;
 8006afe:	bf00      	nop
 8006b00:	e002      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
        break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <DMA_CheckFifoParam+0xe8>
    break;
 8006b06:	bf00      	nop
    }
  }

  return status;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a38      	ldr	r2, [pc, #224]	@ (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a36      	ldr	r2, [pc, #216]	@ (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a35      	ldr	r2, [pc, #212]	@ (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a33      	ldr	r2, [pc, #204]	@ (8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a32      	ldr	r2, [pc, #200]	@ (8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a30      	ldr	r2, [pc, #192]	@ (8006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2f      	ldr	r2, [pc, #188]	@ (8006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2d      	ldr	r2, [pc, #180]	@ (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d101      	bne.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	3b08      	subs	r3, #8
 8006b88:	4a28      	ldr	r2, [pc, #160]	@ (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	091b      	lsrs	r3, r3, #4
 8006b90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4b26      	ldr	r3, [pc, #152]	@ (8006c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a24      	ldr	r2, [pc, #144]	@ (8006c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ba4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2201      	movs	r2, #1
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006bb4:	e024      	b.n	8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3b10      	subs	r3, #16
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d806      	bhi.n	8006bde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d902      	bls.n	8006bde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4b18      	ldr	r3, [pc, #96]	@ (8006c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	461a      	mov	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bf0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	58025408 	.word	0x58025408
 8006c10:	5802541c 	.word	0x5802541c
 8006c14:	58025430 	.word	0x58025430
 8006c18:	58025444 	.word	0x58025444
 8006c1c:	58025458 	.word	0x58025458
 8006c20:	5802546c 	.word	0x5802546c
 8006c24:	58025480 	.word	0x58025480
 8006c28:	58025494 	.word	0x58025494
 8006c2c:	cccccccd 	.word	0xcccccccd
 8006c30:	16009600 	.word	0x16009600
 8006c34:	58025880 	.word	0x58025880
 8006c38:	aaaaaaab 	.word	0xaaaaaaab
 8006c3c:	400204b8 	.word	0x400204b8
 8006c40:	4002040f 	.word	0x4002040f
 8006c44:	10008200 	.word	0x10008200
 8006c48:	40020880 	.word	0x40020880

08006c4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d04a      	beq.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d847      	bhi.n	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a25      	ldr	r2, [pc, #148]	@ (8006d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a24      	ldr	r2, [pc, #144]	@ (8006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a21      	ldr	r2, [pc, #132]	@ (8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1f      	ldr	r2, [pc, #124]	@ (8006d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d101      	bne.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4b17      	ldr	r3, [pc, #92]	@ (8006d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a15      	ldr	r2, [pc, #84]	@ (8006d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006cd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006cd6:	e009      	b.n	8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4b14      	ldr	r3, [pc, #80]	@ (8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a11      	ldr	r2, [pc, #68]	@ (8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	58025408 	.word	0x58025408
 8006d08:	5802541c 	.word	0x5802541c
 8006d0c:	58025430 	.word	0x58025430
 8006d10:	58025444 	.word	0x58025444
 8006d14:	58025458 	.word	0x58025458
 8006d18:	5802546c 	.word	0x5802546c
 8006d1c:	58025480 	.word	0x58025480
 8006d20:	58025494 	.word	0x58025494
 8006d24:	1600963f 	.word	0x1600963f
 8006d28:	58025940 	.word	0x58025940
 8006d2c:	1000823f 	.word	0x1000823f
 8006d30:	40020940 	.word	0x40020940

08006d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	@ 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d42:	4b89      	ldr	r3, [pc, #548]	@ (8006f68 <HAL_GPIO_Init+0x234>)
 8006d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d46:	e194      	b.n	8007072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	4013      	ands	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8186 	beq.w	800706c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d005      	beq.n	8006d78 <HAL_GPIO_Init+0x44>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d130      	bne.n	8006dda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	2203      	movs	r2, #3
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dae:	2201      	movs	r2, #1
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	f003 0201 	and.w	r2, r3, #1
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d017      	beq.n	8006e16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	2203      	movs	r2, #3
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d123      	bne.n	8006e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	08da      	lsrs	r2, r3, #3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3208      	adds	r2, #8
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	220f      	movs	r2, #15
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	08da      	lsrs	r2, r3, #3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3208      	adds	r2, #8
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	2203      	movs	r2, #3
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 0203 	and.w	r2, r3, #3
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80e0 	beq.w	800706c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eac:	4b2f      	ldr	r3, [pc, #188]	@ (8006f6c <HAL_GPIO_Init+0x238>)
 8006eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8006f6c <HAL_GPIO_Init+0x238>)
 8006eb4:	f043 0302 	orr.w	r3, r3, #2
 8006eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f6c <HAL_GPIO_Init+0x238>)
 8006ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006eca:	4a29      	ldr	r2, [pc, #164]	@ (8006f70 <HAL_GPIO_Init+0x23c>)
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	220f      	movs	r2, #15
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	4013      	ands	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a20      	ldr	r2, [pc, #128]	@ (8006f74 <HAL_GPIO_Init+0x240>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d052      	beq.n	8006f9c <HAL_GPIO_Init+0x268>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f78 <HAL_GPIO_Init+0x244>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d031      	beq.n	8006f62 <HAL_GPIO_Init+0x22e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1e      	ldr	r2, [pc, #120]	@ (8006f7c <HAL_GPIO_Init+0x248>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d02b      	beq.n	8006f5e <HAL_GPIO_Init+0x22a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1d      	ldr	r2, [pc, #116]	@ (8006f80 <HAL_GPIO_Init+0x24c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d025      	beq.n	8006f5a <HAL_GPIO_Init+0x226>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1c      	ldr	r2, [pc, #112]	@ (8006f84 <HAL_GPIO_Init+0x250>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d01f      	beq.n	8006f56 <HAL_GPIO_Init+0x222>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1b      	ldr	r2, [pc, #108]	@ (8006f88 <HAL_GPIO_Init+0x254>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d019      	beq.n	8006f52 <HAL_GPIO_Init+0x21e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1a      	ldr	r2, [pc, #104]	@ (8006f8c <HAL_GPIO_Init+0x258>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_GPIO_Init+0x21a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a19      	ldr	r2, [pc, #100]	@ (8006f90 <HAL_GPIO_Init+0x25c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00d      	beq.n	8006f4a <HAL_GPIO_Init+0x216>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a18      	ldr	r2, [pc, #96]	@ (8006f94 <HAL_GPIO_Init+0x260>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <HAL_GPIO_Init+0x212>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a17      	ldr	r2, [pc, #92]	@ (8006f98 <HAL_GPIO_Init+0x264>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <HAL_GPIO_Init+0x20e>
 8006f3e:	2309      	movs	r3, #9
 8006f40:	e02d      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f42:	230a      	movs	r3, #10
 8006f44:	e02b      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f46:	2308      	movs	r3, #8
 8006f48:	e029      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f4a:	2307      	movs	r3, #7
 8006f4c:	e027      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f4e:	2306      	movs	r3, #6
 8006f50:	e025      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f52:	2305      	movs	r3, #5
 8006f54:	e023      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f56:	2304      	movs	r3, #4
 8006f58:	e021      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e01f      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e01d      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e01b      	b.n	8006f9e <HAL_GPIO_Init+0x26a>
 8006f66:	bf00      	nop
 8006f68:	58000080 	.word	0x58000080
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	58000400 	.word	0x58000400
 8006f74:	58020000 	.word	0x58020000
 8006f78:	58020400 	.word	0x58020400
 8006f7c:	58020800 	.word	0x58020800
 8006f80:	58020c00 	.word	0x58020c00
 8006f84:	58021000 	.word	0x58021000
 8006f88:	58021400 	.word	0x58021400
 8006f8c:	58021800 	.word	0x58021800
 8006f90:	58021c00 	.word	0x58021c00
 8006f94:	58022000 	.word	0x58022000
 8006f98:	58022400 	.word	0x58022400
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	f002 0203 	and.w	r2, r2, #3
 8006fa4:	0092      	lsls	r2, r2, #2
 8006fa6:	4093      	lsls	r3, r2
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fae:	4938      	ldr	r1, [pc, #224]	@ (8007090 <HAL_GPIO_Init+0x35c>)
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007010:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	43db      	mvns	r3, r3
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	4013      	ands	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f ae63 	bne.w	8006d48 <HAL_GPIO_Init+0x14>
  }
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	3724      	adds	r7, #36	@ 0x24
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	58000400 	.word	0x58000400

08007094 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800709c:	4a08      	ldr	r2, [pc, #32]	@ (80070c0 <HAL_HSEM_FastTake+0x2c>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3320      	adds	r3, #32
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	4a07      	ldr	r2, [pc, #28]	@ (80070c4 <HAL_HSEM_FastTake+0x30>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e000      	b.n	80070b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	58026400 	.word	0x58026400
 80070c4:	80000300 	.word	0x80000300

080070c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80070d2:	4906      	ldr	r1, [pc, #24]	@ (80070ec <HAL_HSEM_Release+0x24>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	58026400 	.word	0x58026400

080070f0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_HSEM_ActivateNotification+0x20>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4904      	ldr	r1, [pc, #16]	@ (8007110 <HAL_HSEM_ActivateNotification+0x20>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4313      	orrs	r3, r2
 8007102:	600b      	str	r3, [r1, #0]
#endif
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	58026500 	.word	0x58026500

08007114 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e041      	b.n	80071aa <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800712e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007138:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6852      	ldr	r2, [r2, #4]
 8007142:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6892      	ldr	r2, [r2, #8]
 800714c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800714e:	f7fb fbbb 	bl	80028c8 <HAL_GetTick>
 8007152:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007154:	e00f      	b.n	8007176 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007156:	f7fb fbb7 	bl	80028c8 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b31      	cmp	r3, #49	@ 0x31
 8007162:	d908      	bls.n	8007176 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e019      	b.n	80071aa <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e8      	bne.n	8007156 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d005      	beq.n	800719e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68d2      	ldr	r2, [r2, #12]
 800719a:	611a      	str	r2, [r3, #16]
 800719c:	e004      	b.n	80071a8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80071a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80071c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80071dc:	4b29      	ldr	r3, [pc, #164]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d00a      	beq.n	80071fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071e8:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d001      	beq.n	80071fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e040      	b.n	800727c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e03e      	b.n	800727c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071fe:	4b21      	ldr	r3, [pc, #132]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007206:	491f      	ldr	r1, [pc, #124]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4313      	orrs	r3, r2
 800720c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800720e:	f7fb fb5b 	bl	80028c8 <HAL_GetTick>
 8007212:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007214:	e009      	b.n	800722a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007216:	f7fb fb57 	bl	80028c8 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007224:	d901      	bls.n	800722a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e028      	b.n	800727c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800722a:	4b16      	ldr	r3, [pc, #88]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007236:	d1ee      	bne.n	8007216 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b1e      	cmp	r3, #30
 800723c:	d008      	beq.n	8007250 <HAL_PWREx_ConfigSupply+0x7c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b2e      	cmp	r3, #46	@ 0x2e
 8007242:	d005      	beq.n	8007250 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b1d      	cmp	r3, #29
 8007248:	d002      	beq.n	8007250 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b2d      	cmp	r3, #45	@ 0x2d
 800724e:	d114      	bne.n	800727a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007250:	f7fb fb3a 	bl	80028c8 <HAL_GetTick>
 8007254:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007256:	e009      	b.n	800726c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007258:	f7fb fb36 	bl	80028c8 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007266:	d901      	bls.n	800726c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e007      	b.n	800727c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <HAL_PWREx_ConfigSupply+0xb0>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007278:	d1ee      	bne.n	8007258 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	58024800 	.word	0x58024800

08007288 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08c      	sub	sp, #48	@ 0x30
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f000 bc48 	b.w	8007b2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8088 	beq.w	80073ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072aa:	4b99      	ldr	r3, [pc, #612]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072b4:	4b96      	ldr	r3, [pc, #600]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d007      	beq.n	80072d0 <HAL_RCC_OscConfig+0x48>
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	2b18      	cmp	r3, #24
 80072c4:	d111      	bne.n	80072ea <HAL_RCC_OscConfig+0x62>
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d10c      	bne.n	80072ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d0:	4b8f      	ldr	r3, [pc, #572]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d06d      	beq.n	80073b8 <HAL_RCC_OscConfig+0x130>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d169      	bne.n	80073b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f000 bc21 	b.w	8007b2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f2:	d106      	bne.n	8007302 <HAL_RCC_OscConfig+0x7a>
 80072f4:	4b86      	ldr	r3, [pc, #536]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a85      	ldr	r2, [pc, #532]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80072fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	e02e      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10c      	bne.n	8007324 <HAL_RCC_OscConfig+0x9c>
 800730a:	4b81      	ldr	r3, [pc, #516]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a80      	ldr	r2, [pc, #512]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b7e      	ldr	r3, [pc, #504]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7d      	ldr	r2, [pc, #500]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800731c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e01d      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800732c:	d10c      	bne.n	8007348 <HAL_RCC_OscConfig+0xc0>
 800732e:	4b78      	ldr	r3, [pc, #480]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a77      	ldr	r2, [pc, #476]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4b75      	ldr	r3, [pc, #468]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a74      	ldr	r2, [pc, #464]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e00b      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007348:	4b71      	ldr	r3, [pc, #452]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a70      	ldr	r2, [pc, #448]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800734e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	4b6e      	ldr	r3, [pc, #440]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6d      	ldr	r2, [pc, #436]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800735a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800735e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d013      	beq.n	8007390 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fb faae 	bl	80028c8 <HAL_GetTick>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007370:	f7fb faaa 	bl	80028c8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b64      	cmp	r3, #100	@ 0x64
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e3d4      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007382:	4b63      	ldr	r3, [pc, #396]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0xe8>
 800738e:	e014      	b.n	80073ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fb fa9a 	bl	80028c8 <HAL_GetTick>
 8007394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007398:	f7fb fa96 	bl	80028c8 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	@ 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e3c0      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073aa:	4b59      	ldr	r3, [pc, #356]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x110>
 80073b6:	e000      	b.n	80073ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80ca 	beq.w	800755c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c8:	4b51      	ldr	r3, [pc, #324]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_RCC_OscConfig+0x166>
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	2b18      	cmp	r3, #24
 80073e2:	d156      	bne.n	8007492 <HAL_RCC_OscConfig+0x20a>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d151      	bne.n	8007492 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ee:	4b48      	ldr	r3, [pc, #288]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <HAL_RCC_OscConfig+0x17e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e392      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007406:	4b42      	ldr	r3, [pc, #264]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f023 0219 	bic.w	r2, r3, #25
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	493f      	ldr	r1, [pc, #252]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fb fa56 	bl	80028c8 <HAL_GetTick>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007420:	f7fb fa52 	bl	80028c8 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e37c      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007432:	4b37      	ldr	r3, [pc, #220]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743e:	f7fb fa4f 	bl	80028e0 <HAL_GetREVID>
 8007442:	4603      	mov	r3, r0
 8007444:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007448:	4293      	cmp	r3, r2
 800744a:	d817      	bhi.n	800747c <HAL_RCC_OscConfig+0x1f4>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b40      	cmp	r3, #64	@ 0x40
 8007452:	d108      	bne.n	8007466 <HAL_RCC_OscConfig+0x1de>
 8007454:	4b2e      	ldr	r3, [pc, #184]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800745c:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007462:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007464:	e07a      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007466:	4b2a      	ldr	r3, [pc, #168]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	031b      	lsls	r3, r3, #12
 8007474:	4926      	ldr	r1, [pc, #152]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 8007476:	4313      	orrs	r3, r2
 8007478:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800747a:	e06f      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747c:	4b24      	ldr	r3, [pc, #144]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	061b      	lsls	r3, r3, #24
 800748a:	4921      	ldr	r1, [pc, #132]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800748c:	4313      	orrs	r3, r2
 800748e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007490:	e064      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d047      	beq.n	800752a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800749a:	4b1d      	ldr	r3, [pc, #116]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f023 0219 	bic.w	r2, r3, #25
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	491a      	ldr	r1, [pc, #104]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fb fa0c 	bl	80028c8 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074b4:	f7fb fa08 	bl	80028c8 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e332      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d2:	f7fb fa05 	bl	80028e0 <HAL_GetREVID>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80074dc:	4293      	cmp	r3, r2
 80074de:	d819      	bhi.n	8007514 <HAL_RCC_OscConfig+0x28c>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	d108      	bne.n	80074fa <HAL_RCC_OscConfig+0x272>
 80074e8:	4b09      	ldr	r3, [pc, #36]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80074f0:	4a07      	ldr	r2, [pc, #28]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80074f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f6:	6053      	str	r3, [r2, #4]
 80074f8:	e030      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
 80074fa:	4b05      	ldr	r3, [pc, #20]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	031b      	lsls	r3, r3, #12
 8007508:	4901      	ldr	r1, [pc, #4]	@ (8007510 <HAL_RCC_OscConfig+0x288>)
 800750a:	4313      	orrs	r3, r2
 800750c:	604b      	str	r3, [r1, #4]
 800750e:	e025      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
 8007510:	58024400 	.word	0x58024400
 8007514:	4b9a      	ldr	r3, [pc, #616]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	061b      	lsls	r3, r3, #24
 8007522:	4997      	ldr	r1, [pc, #604]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007524:	4313      	orrs	r3, r2
 8007526:	604b      	str	r3, [r1, #4]
 8007528:	e018      	b.n	800755c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800752a:	4b95      	ldr	r3, [pc, #596]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a94      	ldr	r2, [pc, #592]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fb f9c7 	bl	80028c8 <HAL_GetTick>
 800753a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753e:	f7fb f9c3 	bl	80028c8 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e2ed      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007550:	4b8b      	ldr	r3, [pc, #556]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80a9 	beq.w	80076bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800756a:	4b85      	ldr	r3, [pc, #532]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007572:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007574:	4b82      	ldr	r3, [pc, #520]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d007      	beq.n	8007590 <HAL_RCC_OscConfig+0x308>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b18      	cmp	r3, #24
 8007584:	d13a      	bne.n	80075fc <HAL_RCC_OscConfig+0x374>
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	2b01      	cmp	r3, #1
 800758e:	d135      	bne.n	80075fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007590:	4b7b      	ldr	r3, [pc, #492]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <HAL_RCC_OscConfig+0x320>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	2b80      	cmp	r3, #128	@ 0x80
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e2c1      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075a8:	f7fb f99a 	bl	80028e0 <HAL_GetREVID>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d817      	bhi.n	80075e6 <HAL_RCC_OscConfig+0x35e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d108      	bne.n	80075d0 <HAL_RCC_OscConfig+0x348>
 80075be:	4b70      	ldr	r3, [pc, #448]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80075c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ce:	e075      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075d0:	4b6b      	ldr	r3, [pc, #428]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	069b      	lsls	r3, r3, #26
 80075de:	4968      	ldr	r1, [pc, #416]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075e4:	e06a      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075e6:	4b66      	ldr	r3, [pc, #408]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	4962      	ldr	r1, [pc, #392]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075fa:	e05f      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d042      	beq.n	800768a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007604:	4b5e      	ldr	r3, [pc, #376]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5d      	ldr	r2, [pc, #372]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800760a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fb f95a 	bl	80028c8 <HAL_GetTick>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007618:	f7fb f956 	bl	80028c8 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e280      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800762a:	4b55      	ldr	r3, [pc, #340]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007636:	f7fb f953 	bl	80028e0 <HAL_GetREVID>
 800763a:	4603      	mov	r3, r0
 800763c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007640:	4293      	cmp	r3, r2
 8007642:	d817      	bhi.n	8007674 <HAL_RCC_OscConfig+0x3ec>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	2b20      	cmp	r3, #32
 800764a:	d108      	bne.n	800765e <HAL_RCC_OscConfig+0x3d6>
 800764c:	4b4c      	ldr	r3, [pc, #304]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007654:	4a4a      	ldr	r2, [pc, #296]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007656:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800765a:	6053      	str	r3, [r2, #4]
 800765c:	e02e      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
 800765e:	4b48      	ldr	r3, [pc, #288]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	069b      	lsls	r3, r3, #26
 800766c:	4944      	ldr	r1, [pc, #272]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]
 8007672:	e023      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
 8007674:	4b42      	ldr	r3, [pc, #264]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	061b      	lsls	r3, r3, #24
 8007682:	493f      	ldr	r1, [pc, #252]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007684:	4313      	orrs	r3, r2
 8007686:	60cb      	str	r3, [r1, #12]
 8007688:	e018      	b.n	80076bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800768a:	4b3d      	ldr	r3, [pc, #244]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a3c      	ldr	r2, [pc, #240]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007696:	f7fb f917 	bl	80028c8 <HAL_GetTick>
 800769a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800769c:	e008      	b.n	80076b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800769e:	f7fb f913 	bl	80028c8 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e23d      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076b0:	4b33      	ldr	r3, [pc, #204]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d036      	beq.n	8007736 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d019      	beq.n	8007704 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80076d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076dc:	f7fb f8f4 	bl	80028c8 <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e4:	f7fb f8f0 	bl	80028c8 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e21a      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076f6:	4b22      	ldr	r3, [pc, #136]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 80076f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f0      	beq.n	80076e4 <HAL_RCC_OscConfig+0x45c>
 8007702:	e018      	b.n	8007736 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007704:	4b1e      	ldr	r3, [pc, #120]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007710:	f7fb f8da 	bl	80028c8 <HAL_GetTick>
 8007714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007718:	f7fb f8d6 	bl	80028c8 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e200      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800772a:	4b15      	ldr	r3, [pc, #84]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800772c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d039      	beq.n	80077b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01c      	beq.n	8007784 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a0c      	ldr	r2, [pc, #48]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007754:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007756:	f7fb f8b7 	bl	80028c8 <HAL_GetTick>
 800775a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800775c:	e008      	b.n	8007770 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800775e:	f7fb f8b3 	bl	80028c8 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e1dd      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007770:	4b03      	ldr	r3, [pc, #12]	@ (8007780 <HAL_RCC_OscConfig+0x4f8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <HAL_RCC_OscConfig+0x4d6>
 800777c:	e01b      	b.n	80077b6 <HAL_RCC_OscConfig+0x52e>
 800777e:	bf00      	nop
 8007780:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007784:	4b9b      	ldr	r3, [pc, #620]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a9a      	ldr	r2, [pc, #616]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800778a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800778e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007790:	f7fb f89a 	bl	80028c8 <HAL_GetTick>
 8007794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007798:	f7fb f896 	bl	80028c8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e1c0      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077aa:	4b92      	ldr	r3, [pc, #584]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f0      	bne.n	8007798 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 8081 	beq.w	80078c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077c4:	4b8c      	ldr	r3, [pc, #560]	@ (80079f8 <HAL_RCC_OscConfig+0x770>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a8b      	ldr	r2, [pc, #556]	@ (80079f8 <HAL_RCC_OscConfig+0x770>)
 80077ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077d0:	f7fb f87a 	bl	80028c8 <HAL_GetTick>
 80077d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d8:	f7fb f876 	bl	80028c8 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	@ 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e1a0      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ea:	4b83      	ldr	r3, [pc, #524]	@ (80079f8 <HAL_RCC_OscConfig+0x770>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f0      	beq.n	80077d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d106      	bne.n	800780c <HAL_RCC_OscConfig+0x584>
 80077fe:	4b7d      	ldr	r3, [pc, #500]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007802:	4a7c      	ldr	r2, [pc, #496]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	6713      	str	r3, [r2, #112]	@ 0x70
 800780a:	e02d      	b.n	8007868 <HAL_RCC_OscConfig+0x5e0>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10c      	bne.n	800782e <HAL_RCC_OscConfig+0x5a6>
 8007814:	4b77      	ldr	r3, [pc, #476]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007818:	4a76      	ldr	r2, [pc, #472]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007820:	4b74      	ldr	r3, [pc, #464]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007824:	4a73      	ldr	r2, [pc, #460]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007826:	f023 0304 	bic.w	r3, r3, #4
 800782a:	6713      	str	r3, [r2, #112]	@ 0x70
 800782c:	e01c      	b.n	8007868 <HAL_RCC_OscConfig+0x5e0>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b05      	cmp	r3, #5
 8007834:	d10c      	bne.n	8007850 <HAL_RCC_OscConfig+0x5c8>
 8007836:	4b6f      	ldr	r3, [pc, #444]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783a:	4a6e      	ldr	r2, [pc, #440]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	6713      	str	r3, [r2, #112]	@ 0x70
 8007842:	4b6c      	ldr	r3, [pc, #432]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007846:	4a6b      	ldr	r2, [pc, #428]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	6713      	str	r3, [r2, #112]	@ 0x70
 800784e:	e00b      	b.n	8007868 <HAL_RCC_OscConfig+0x5e0>
 8007850:	4b68      	ldr	r3, [pc, #416]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007854:	4a67      	ldr	r2, [pc, #412]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	6713      	str	r3, [r2, #112]	@ 0x70
 800785c:	4b65      	ldr	r3, [pc, #404]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007860:	4a64      	ldr	r2, [pc, #400]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007862:	f023 0304 	bic.w	r3, r3, #4
 8007866:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d015      	beq.n	800789c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007870:	f7fb f82a 	bl	80028c8 <HAL_GetTick>
 8007874:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007876:	e00a      	b.n	800788e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007878:	f7fb f826 	bl	80028c8 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e14e      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800788e:	4b59      	ldr	r3, [pc, #356]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0ee      	beq.n	8007878 <HAL_RCC_OscConfig+0x5f0>
 800789a:	e014      	b.n	80078c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fb f814 	bl	80028c8 <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078a2:	e00a      	b.n	80078ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a4:	f7fb f810 	bl	80028c8 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e138      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078ba:	4b4e      	ldr	r3, [pc, #312]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1ee      	bne.n	80078a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 812d 	beq.w	8007b2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078d0:	4b48      	ldr	r3, [pc, #288]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078d8:	2b18      	cmp	r3, #24
 80078da:	f000 80bd 	beq.w	8007a58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	f040 809e 	bne.w	8007a24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e8:	4b42      	ldr	r3, [pc, #264]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a41      	ldr	r2, [pc, #260]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80078ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fa ffe8 	bl	80028c8 <HAL_GetTick>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fa ffe4 	bl	80028c8 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e10e      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800790e:	4b39      	ldr	r3, [pc, #228]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800791a:	4b36      	ldr	r3, [pc, #216]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800791c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800791e:	4b37      	ldr	r3, [pc, #220]	@ (80079fc <HAL_RCC_OscConfig+0x774>)
 8007920:	4013      	ands	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800792a:	0112      	lsls	r2, r2, #4
 800792c:	430a      	orrs	r2, r1
 800792e:	4931      	ldr	r1, [pc, #196]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007930:	4313      	orrs	r3, r2
 8007932:	628b      	str	r3, [r1, #40]	@ 0x28
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	3b01      	subs	r3, #1
 800793a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007942:	3b01      	subs	r3, #1
 8007944:	025b      	lsls	r3, r3, #9
 8007946:	b29b      	uxth	r3, r3
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794e:	3b01      	subs	r3, #1
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795c:	3b01      	subs	r3, #1
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007964:	4923      	ldr	r1, [pc, #140]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800796a:	4b22      	ldr	r3, [pc, #136]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	4a21      	ldr	r2, [pc, #132]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007976:	4b1f      	ldr	r3, [pc, #124]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800797a:	4b21      	ldr	r3, [pc, #132]	@ (8007a00 <HAL_RCC_OscConfig+0x778>)
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007982:	00d2      	lsls	r2, r2, #3
 8007984:	491b      	ldr	r1, [pc, #108]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800798a:	4b1a      	ldr	r3, [pc, #104]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	f023 020c 	bic.w	r2, r3, #12
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	4917      	ldr	r1, [pc, #92]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 8007998:	4313      	orrs	r3, r2
 800799a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800799c:	4b15      	ldr	r3, [pc, #84]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	f023 0202 	bic.w	r2, r3, #2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a8:	4912      	ldr	r1, [pc, #72]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079ae:	4b11      	ldr	r3, [pc, #68]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	4a10      	ldr	r2, [pc, #64]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ba:	4b0e      	ldr	r3, [pc, #56]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	4a0d      	ldr	r2, [pc, #52]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079c6:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	4a0a      	ldr	r2, [pc, #40]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80079d2:	4b08      	ldr	r3, [pc, #32]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	4a07      	ldr	r2, [pc, #28]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079de:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a04      	ldr	r2, [pc, #16]	@ (80079f4 <HAL_RCC_OscConfig+0x76c>)
 80079e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ea:	f7fa ff6d 	bl	80028c8 <HAL_GetTick>
 80079ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079f0:	e011      	b.n	8007a16 <HAL_RCC_OscConfig+0x78e>
 80079f2:	bf00      	nop
 80079f4:	58024400 	.word	0x58024400
 80079f8:	58024800 	.word	0x58024800
 80079fc:	fffffc0c 	.word	0xfffffc0c
 8007a00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a04:	f7fa ff60 	bl	80028c8 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e08a      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a16:	4b47      	ldr	r3, [pc, #284]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0x77c>
 8007a22:	e082      	b.n	8007b2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a24:	4b43      	ldr	r3, [pc, #268]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a42      	ldr	r2, [pc, #264]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fa ff4a 	bl	80028c8 <HAL_GetTick>
 8007a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a38:	f7fa ff46 	bl	80028c8 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e070      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f0      	bne.n	8007a38 <HAL_RCC_OscConfig+0x7b0>
 8007a56:	e068      	b.n	8007b2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a58:	4b36      	ldr	r3, [pc, #216]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a5e:	4b35      	ldr	r3, [pc, #212]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d031      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f003 0203 	and.w	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d12a      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	091b      	lsrs	r3, r3, #4
 8007a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d122      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d11a      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d111      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d108      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e02b      	b.n	8007b2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007ad4:	4b17      	ldr	r3, [pc, #92]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad8:	08db      	lsrs	r3, r3, #3
 8007ada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ade:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d01f      	beq.n	8007b2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007aea:	4b12      	ldr	r3, [pc, #72]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	4a11      	ldr	r2, [pc, #68]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007af6:	f7fa fee7 	bl	80028c8 <HAL_GetTick>
 8007afa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007afc:	bf00      	nop
 8007afe:	f7fa fee3 	bl	80028c8 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d0f9      	beq.n	8007afe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <HAL_RCC_OscConfig+0x8b0>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b16:	00d2      	lsls	r2, r2, #3
 8007b18:	4906      	ldr	r1, [pc, #24]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007b1e:	4b05      	ldr	r3, [pc, #20]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	4a04      	ldr	r2, [pc, #16]	@ (8007b34 <HAL_RCC_OscConfig+0x8ac>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	@ 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	58024400 	.word	0x58024400
 8007b38:	ffff0007 	.word	0xffff0007

08007b3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e19c      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b50:	4b8a      	ldr	r3, [pc, #552]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d910      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5e:	4b87      	ldr	r3, [pc, #540]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f023 020f 	bic.w	r2, r3, #15
 8007b66:	4985      	ldr	r1, [pc, #532]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b83      	ldr	r3, [pc, #524]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e184      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d010      	beq.n	8007bae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	4b7b      	ldr	r3, [pc, #492]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d908      	bls.n	8007bae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b9c:	4b78      	ldr	r3, [pc, #480]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	4975      	ldr	r1, [pc, #468]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	4b70      	ldr	r3, [pc, #448]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d908      	bls.n	8007bdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007bca:	4b6d      	ldr	r3, [pc, #436]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	496a      	ldr	r1, [pc, #424]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	4b64      	ldr	r3, [pc, #400]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d908      	bls.n	8007c0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007bf8:	4b61      	ldr	r3, [pc, #388]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	495e      	ldr	r1, [pc, #376]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d010      	beq.n	8007c38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69da      	ldr	r2, [r3, #28]
 8007c1a:	4b59      	ldr	r3, [pc, #356]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d908      	bls.n	8007c38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c26:	4b56      	ldr	r3, [pc, #344]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	4953      	ldr	r1, [pc, #332]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	4b4d      	ldr	r3, [pc, #308]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d908      	bls.n	8007c66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c54:	4b4a      	ldr	r3, [pc, #296]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f023 020f 	bic.w	r2, r3, #15
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4947      	ldr	r1, [pc, #284]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d055      	beq.n	8007d1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c72:	4b43      	ldr	r3, [pc, #268]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	4940      	ldr	r1, [pc, #256]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d121      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0f6      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ca4:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d115      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0ea      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d107      	bne.n	8007ccc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cbc:	4b30      	ldr	r3, [pc, #192]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0de      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0d6      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cdc:	4b28      	ldr	r3, [pc, #160]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f023 0207 	bic.w	r2, r3, #7
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4925      	ldr	r1, [pc, #148]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7fa fdeb 	bl	80028c8 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf6:	f7fa fde7 	bl	80028c8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e0be      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d1eb      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d208      	bcs.n	8007d4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3a:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f023 020f 	bic.w	r2, r3, #15
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	490e      	ldr	r1, [pc, #56]	@ (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d214      	bcs.n	8007d84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5a:	4b08      	ldr	r3, [pc, #32]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 020f 	bic.w	r2, r3, #15
 8007d62:	4906      	ldr	r1, [pc, #24]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6a:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d005      	beq.n	8007d84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e086      	b.n	8007e8a <HAL_RCC_ClockConfig+0x34e>
 8007d7c:	52002000 	.word	0x52002000
 8007d80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	4b3f      	ldr	r3, [pc, #252]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d208      	bcs.n	8007db2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007da0:	4b3c      	ldr	r3, [pc, #240]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	4939      	ldr	r1, [pc, #228]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	4b34      	ldr	r3, [pc, #208]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d208      	bcs.n	8007de0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dce:	4b31      	ldr	r3, [pc, #196]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	492e      	ldr	r1, [pc, #184]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	4b28      	ldr	r3, [pc, #160]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d208      	bcs.n	8007e0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dfc:	4b25      	ldr	r3, [pc, #148]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	4922      	ldr	r1, [pc, #136]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d010      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69da      	ldr	r2, [r3, #28]
 8007e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d208      	bcs.n	8007e3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4917      	ldr	r1, [pc, #92]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e3c:	f000 f834 	bl	8007ea8 <HAL_RCC_GetSysClockFreq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	f003 030f 	and.w	r3, r3, #15
 8007e4c:	4912      	ldr	r1, [pc, #72]	@ (8007e98 <HAL_RCC_ClockConfig+0x35c>)
 8007e4e:	5ccb      	ldrb	r3, [r1, r3]
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <HAL_RCC_ClockConfig+0x358>)
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	4a0d      	ldr	r2, [pc, #52]	@ (8007e98 <HAL_RCC_ClockConfig+0x35c>)
 8007e64:	5cd3      	ldrb	r3, [r2, r3]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e70:	4a0a      	ldr	r2, [pc, #40]	@ (8007e9c <HAL_RCC_ClockConfig+0x360>)
 8007e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e74:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea0 <HAL_RCC_ClockConfig+0x364>)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <HAL_RCC_ClockConfig+0x368>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fa f98c 	bl	800219c <HAL_InitTick>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
 8007e98:	0801f010 	.word	0x0801f010
 8007e9c:	24000004 	.word	0x24000004
 8007ea0:	24000000 	.word	0x24000000
 8007ea4:	2400002c 	.word	0x2400002c

08007ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	@ 0x24
 8007eac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eae:	4bb3      	ldr	r3, [pc, #716]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb6:	2b18      	cmp	r3, #24
 8007eb8:	f200 8155 	bhi.w	8008166 <HAL_RCC_GetSysClockFreq+0x2be>
 8007ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08008167 	.word	0x08008167
 8007ecc:	08008167 	.word	0x08008167
 8007ed0:	08008167 	.word	0x08008167
 8007ed4:	08008167 	.word	0x08008167
 8007ed8:	08008167 	.word	0x08008167
 8007edc:	08008167 	.word	0x08008167
 8007ee0:	08008167 	.word	0x08008167
 8007ee4:	08007f4f 	.word	0x08007f4f
 8007ee8:	08008167 	.word	0x08008167
 8007eec:	08008167 	.word	0x08008167
 8007ef0:	08008167 	.word	0x08008167
 8007ef4:	08008167 	.word	0x08008167
 8007ef8:	08008167 	.word	0x08008167
 8007efc:	08008167 	.word	0x08008167
 8007f00:	08008167 	.word	0x08008167
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08008167 	.word	0x08008167
 8007f0c:	08008167 	.word	0x08008167
 8007f10:	08008167 	.word	0x08008167
 8007f14:	08008167 	.word	0x08008167
 8007f18:	08008167 	.word	0x08008167
 8007f1c:	08008167 	.word	0x08008167
 8007f20:	08008167 	.word	0x08008167
 8007f24:	08007f5b 	.word	0x08007f5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f28:	4b94      	ldr	r3, [pc, #592]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f34:	4b91      	ldr	r3, [pc, #580]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	4a90      	ldr	r2, [pc, #576]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
 8007f44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f46:	e111      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f48:	4b8d      	ldr	r3, [pc, #564]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f4a:	61bb      	str	r3, [r7, #24]
      break;
 8007f4c:	e10e      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f50:	61bb      	str	r3, [r7, #24]
      break;
 8007f52:	e10b      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f54:	4b8c      	ldr	r3, [pc, #560]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f56:	61bb      	str	r3, [r7, #24]
      break;
 8007f58:	e108      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f5a:	4b88      	ldr	r3, [pc, #544]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f64:	4b85      	ldr	r3, [pc, #532]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f70:	4b82      	ldr	r3, [pc, #520]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f7a:	4b80      	ldr	r3, [pc, #512]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	08db      	lsrs	r3, r3, #3
 8007f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80e1 	beq.w	8008160 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	f000 8083 	beq.w	80080ac <HAL_RCC_GetSysClockFreq+0x204>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	f200 80a1 	bhi.w	80080f0 <HAL_RCC_GetSysClockFreq+0x248>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCC_GetSysClockFreq+0x114>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d056      	beq.n	8008068 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007fba:	e099      	b.n	80080f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d02d      	beq.n	8008024 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	08db      	lsrs	r3, r3, #3
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	4a6b      	ldr	r2, [pc, #428]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff2:	4b62      	ldr	r3, [pc, #392]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008002:	ed97 6a02 	vldr	s12, [r7, #8]
 8008006:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800818c <HAL_RCC_GetSysClockFreq+0x2e4>
 800800a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008022:	e087      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008190 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008036:	4b51      	ldr	r3, [pc, #324]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a02 	vldr	s12, [r7, #8]
 800804a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800818c <HAL_RCC_GetSysClockFreq+0x2e4>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008066:	e065      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008072:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807a:	4b40      	ldr	r3, [pc, #256]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800807c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808a:	ed97 6a02 	vldr	s12, [r7, #8]
 800808e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800818c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800809e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080aa:	e043      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008198 <HAL_RCC_GetSysClockFreq+0x2f0>
 80080ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080be:	4b2f      	ldr	r3, [pc, #188]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80080d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800818c <HAL_RCC_GetSysClockFreq+0x2e4>
 80080d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080ee:	e021      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b1e      	ldr	r3, [pc, #120]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a02 	vldr	s12, [r7, #8]
 8008116:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800818c <HAL_RCC_GetSysClockFreq+0x2e4>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008132:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008134:	4b11      	ldr	r3, [pc, #68]	@ (800817c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008138:	0a5b      	lsrs	r3, r3, #9
 800813a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800813e:	3301      	adds	r3, #1
 8008140:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800814c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008158:	ee17 3a90 	vmov	r3, s15
 800815c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800815e:	e005      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
      break;
 8008164:	e002      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008166:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008168:	61bb      	str	r3, [r7, #24]
      break;
 800816a:	bf00      	nop
  }

  return sysclockfreq;
 800816c:	69bb      	ldr	r3, [r7, #24]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3724      	adds	r7, #36	@ 0x24
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	58024400 	.word	0x58024400
 8008180:	03d09000 	.word	0x03d09000
 8008184:	003d0900 	.word	0x003d0900
 8008188:	017d7840 	.word	0x017d7840
 800818c:	46000000 	.word	0x46000000
 8008190:	4c742400 	.word	0x4c742400
 8008194:	4a742400 	.word	0x4a742400
 8008198:	4bbebc20 	.word	0x4bbebc20

0800819c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081a2:	f7ff fe81 	bl	8007ea8 <HAL_RCC_GetSysClockFreq>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <HAL_RCC_GetHCLKFreq+0x50>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	490f      	ldr	r1, [pc, #60]	@ (80081f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80081b4:	5ccb      	ldrb	r3, [r1, r3]
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081c0:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <HAL_RCC_GetHCLKFreq+0x50>)
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f003 030f 	and.w	r3, r3, #15
 80081c8:	4a09      	ldr	r2, [pc, #36]	@ (80081f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80081ca:	5cd3      	ldrb	r3, [r2, r3]
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	fa22 f303 	lsr.w	r3, r2, r3
 80081d6:	4a07      	ldr	r2, [pc, #28]	@ (80081f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80081d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081da:	4a07      	ldr	r2, [pc, #28]	@ (80081f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80081e2:	681b      	ldr	r3, [r3, #0]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	58024400 	.word	0x58024400
 80081f0:	0801f010 	.word	0x0801f010
 80081f4:	24000004 	.word	0x24000004
 80081f8:	24000000 	.word	0x24000000

080081fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008200:	f7ff ffcc 	bl	800819c <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	091b      	lsrs	r3, r3, #4
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4904      	ldr	r1, [pc, #16]	@ (8008224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800821c:	4618      	mov	r0, r3
 800821e:	bd80      	pop	{r7, pc}
 8008220:	58024400 	.word	0x58024400
 8008224:	0801f010 	.word	0x0801f010

08008228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800822c:	f7ff ffb6 	bl	800819c <HAL_RCC_GetHCLKFreq>
 8008230:	4602      	mov	r2, r0
 8008232:	4b06      	ldr	r3, [pc, #24]	@ (800824c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	4904      	ldr	r1, [pc, #16]	@ (8008250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800823e:	5ccb      	ldrb	r3, [r1, r3]
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008248:	4618      	mov	r0, r3
 800824a:	bd80      	pop	{r7, pc}
 800824c:	58024400 	.word	0x58024400
 8008250:	0801f010 	.word	0x0801f010

08008254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	223f      	movs	r2, #63	@ 0x3f
 8008262:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008264:	4b1a      	ldr	r3, [pc, #104]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f003 0207 	and.w	r2, r3, #7
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008270:	4b17      	ldr	r3, [pc, #92]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800827c:	4b14      	ldr	r3, [pc, #80]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008288:	4b11      	ldr	r3, [pc, #68]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008294:	4b0e      	ldr	r3, [pc, #56]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80082a0:	4b0b      	ldr	r3, [pc, #44]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80082ac:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <HAL_RCC_GetClockConfig+0x7c>)
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082b8:	4b06      	ldr	r3, [pc, #24]	@ (80082d4 <HAL_RCC_GetClockConfig+0x80>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 020f 	and.w	r2, r3, #15
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	58024400 	.word	0x58024400
 80082d4:	52002000 	.word	0x52002000

080082d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082dc:	b0ca      	sub	sp, #296	@ 0x128
 80082de:	af00      	add	r7, sp, #0
 80082e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082e4:	2300      	movs	r3, #0
 80082e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082ea:	2300      	movs	r3, #0
 80082ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80082fc:	2500      	movs	r5, #0
 80082fe:	ea54 0305 	orrs.w	r3, r4, r5
 8008302:	d049      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800830a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800830e:	d02f      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008314:	d828      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800831a:	d01a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800831c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008320:	d822      	bhi.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800832a:	d007      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800832c:	e01c      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800832e:	4bb8      	ldr	r3, [pc, #736]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008332:	4ab7      	ldr	r2, [pc, #732]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800833a:	e01a      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008340:	3308      	adds	r3, #8
 8008342:	2102      	movs	r1, #2
 8008344:	4618      	mov	r0, r3
 8008346:	f002 fb61 	bl	800aa0c <RCCEx_PLL2_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008350:	e00f      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	3328      	adds	r3, #40	@ 0x28
 8008358:	2102      	movs	r1, #2
 800835a:	4618      	mov	r0, r3
 800835c:	f002 fc08 	bl	800ab70 <RCCEx_PLL3_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800836e:	e000      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800837a:	4ba5      	ldr	r3, [pc, #660]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800837c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008388:	4aa1      	ldr	r2, [pc, #644]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800838a:	430b      	orrs	r3, r1
 800838c:	6513      	str	r3, [r2, #80]	@ 0x50
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80083a4:	f04f 0900 	mov.w	r9, #0
 80083a8:	ea58 0309 	orrs.w	r3, r8, r9
 80083ac:	d047      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d82a      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80083b8:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d5 	.word	0x080083d5
 80083c4:	080083e3 	.word	0x080083e3
 80083c8:	080083f9 	.word	0x080083f9
 80083cc:	08008417 	.word	0x08008417
 80083d0:	08008417 	.word	0x08008417
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d4:	4b8e      	ldr	r3, [pc, #568]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	4a8d      	ldr	r2, [pc, #564]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083e0:	e01a      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	3308      	adds	r3, #8
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f002 fb0e 	bl	800aa0c <RCCEx_PLL2_Config>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083f6:	e00f      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fc:	3328      	adds	r3, #40	@ 0x28
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f002 fbb5 	bl	800ab70 <RCCEx_PLL3_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800840c:	e004      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008414:	e000      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008420:	4b7b      	ldr	r3, [pc, #492]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008424:	f023 0107 	bic.w	r1, r3, #7
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	4a78      	ldr	r2, [pc, #480]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008430:	430b      	orrs	r3, r1
 8008432:	6513      	str	r3, [r2, #80]	@ 0x50
 8008434:	e003      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800843a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800844a:	f04f 0b00 	mov.w	fp, #0
 800844e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008452:	d04c      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800845a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800845e:	d030      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008464:	d829      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008466:	2bc0      	cmp	r3, #192	@ 0xc0
 8008468:	d02d      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800846a:	2bc0      	cmp	r3, #192	@ 0xc0
 800846c:	d825      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800846e:	2b80      	cmp	r3, #128	@ 0x80
 8008470:	d018      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008472:	2b80      	cmp	r3, #128	@ 0x80
 8008474:	d821      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800847a:	2b40      	cmp	r3, #64	@ 0x40
 800847c:	d007      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800847e:	e01c      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008480:	4b63      	ldr	r3, [pc, #396]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	4a62      	ldr	r2, [pc, #392]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800848a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800848c:	e01c      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	3308      	adds	r3, #8
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f002 fab8 	bl	800aa0c <RCCEx_PLL2_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80084a2:	e011      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a8:	3328      	adds	r3, #40	@ 0x28
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 fb5f 	bl	800ab70 <RCCEx_PLL3_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80084c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80084d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084de:	4a4c      	ldr	r2, [pc, #304]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80084e4:	e003      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80084fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80084fe:	2300      	movs	r3, #0
 8008500:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008504:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008508:	460b      	mov	r3, r1
 800850a:	4313      	orrs	r3, r2
 800850c:	d053      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800851a:	d035      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800851c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008520:	d82e      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008522:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008526:	d031      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008528:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800852c:	d828      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800852e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008532:	d01a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008534:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008538:	d822      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800853e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008542:	d007      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008544:	e01c      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008546:	4b32      	ldr	r3, [pc, #200]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	4a31      	ldr	r2, [pc, #196]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800854c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008552:	e01c      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008558:	3308      	adds	r3, #8
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f002 fa55 	bl	800aa0c <RCCEx_PLL2_Config>
 8008562:	4603      	mov	r3, r0
 8008564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008568:	e011      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	3328      	adds	r3, #40	@ 0x28
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f002 fafc 	bl	800ab70 <RCCEx_PLL3_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800857e:	e006      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008586:	e002      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008588:	bf00      	nop
 800858a:	e000      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800858c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008596:	4b1e      	ldr	r3, [pc, #120]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80085a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085a8:	430b      	orrs	r3, r1
 80085aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80085ac:	e003      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80085c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80085cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80085d0:	460b      	mov	r3, r1
 80085d2:	4313      	orrs	r3, r2
 80085d4:	d056      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80085de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e2:	d038      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80085e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e8:	d831      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085ee:	d034      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80085f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085f4:	d82b      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085fa:	d01d      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80085fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008600:	d825      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d006      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800860a:	d00a      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800860c:	e01f      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800860e:	bf00      	nop
 8008610:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008614:	4ba2      	ldr	r3, [pc, #648]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	4aa1      	ldr	r2, [pc, #644]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800861a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008620:	e01c      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008626:	3308      	adds	r3, #8
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f002 f9ee 	bl	800aa0c <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008636:	e011      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863c:	3328      	adds	r3, #40	@ 0x28
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f002 fa95 	bl	800ab70 <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800864c:	e006      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008654:	e002      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008656:	bf00      	nop
 8008658:	e000      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800865a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800865c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008664:	4b8e      	ldr	r3, [pc, #568]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008668:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800866c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008674:	4a8a      	ldr	r2, [pc, #552]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008676:	430b      	orrs	r3, r1
 8008678:	6593      	str	r3, [r2, #88]	@ 0x58
 800867a:	e003      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008690:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800869a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	d03a      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086aa:	2b30      	cmp	r3, #48	@ 0x30
 80086ac:	d01f      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80086ae:	2b30      	cmp	r3, #48	@ 0x30
 80086b0:	d819      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d00c      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d815      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d019      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d111      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c2:	4b77      	ldr	r3, [pc, #476]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	4a76      	ldr	r2, [pc, #472]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80086ce:	e011      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	3308      	adds	r3, #8
 80086d6:	2102      	movs	r1, #2
 80086d8:	4618      	mov	r0, r3
 80086da:	f002 f997 	bl	800aa0c <RCCEx_PLL2_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80086e4:	e006      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ec:	e002      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80086ee:	bf00      	nop
 80086f0:	e000      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80086f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086fc:	4b68      	ldr	r3, [pc, #416]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008700:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870a:	4a65      	ldr	r2, [pc, #404]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800870c:	430b      	orrs	r3, r1
 800870e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008710:	e003      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008726:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800872a:	2300      	movs	r3, #0
 800872c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008730:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008734:	460b      	mov	r3, r1
 8008736:	4313      	orrs	r3, r2
 8008738:	d051      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008744:	d035      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800874a:	d82e      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800874c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008750:	d031      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008752:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008756:	d828      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800875c:	d01a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008762:	d822      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876c:	d007      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800876e:	e01c      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008770:	4b4b      	ldr	r3, [pc, #300]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008774:	4a4a      	ldr	r2, [pc, #296]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800877a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800877c:	e01c      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	3308      	adds	r3, #8
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 f940 	bl	800aa0c <RCCEx_PLL2_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008792:	e011      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	3328      	adds	r3, #40	@ 0x28
 800879a:	2100      	movs	r1, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f002 f9e7 	bl	800ab70 <RCCEx_PLL3_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087a8:	e006      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087b0:	e002      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80087b2:	bf00      	nop
 80087b4:	e000      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80087b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10a      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80087c0:	4b37      	ldr	r3, [pc, #220]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ce:	4a34      	ldr	r2, [pc, #208]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087d0:	430b      	orrs	r3, r1
 80087d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80087d4:	e003      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80087ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ee:	2300      	movs	r3, #0
 80087f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80087f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80087f8:	460b      	mov	r3, r1
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d056      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008808:	d033      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800880a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800880e:	d82c      	bhi.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008814:	d02f      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800881a:	d826      	bhi.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800881c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008820:	d02b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008826:	d820      	bhi.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800882c:	d012      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800882e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008832:	d81a      	bhi.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d022      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800883c:	d115      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	3308      	adds	r3, #8
 8008844:	2101      	movs	r1, #1
 8008846:	4618      	mov	r0, r3
 8008848:	f002 f8e0 	bl	800aa0c <RCCEx_PLL2_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008852:	e015      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008858:	3328      	adds	r3, #40	@ 0x28
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f002 f987 	bl	800ab70 <RCCEx_PLL3_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008868:	e00a      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008870:	e006      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008872:	bf00      	nop
 8008874:	e004      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008876:	bf00      	nop
 8008878:	e002      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800887a:	bf00      	nop
 800887c:	e000      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800887e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10d      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800888a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008896:	4a02      	ldr	r2, [pc, #8]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008898:	430b      	orrs	r3, r1
 800889a:	6513      	str	r3, [r2, #80]	@ 0x50
 800889c:	e006      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800889e:	bf00      	nop
 80088a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80088b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088bc:	2300      	movs	r3, #0
 80088be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d055      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80088cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80088d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088d8:	d033      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80088da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088de:	d82c      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e4:	d02f      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ea:	d826      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088f0:	d02b      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80088f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088f6:	d820      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088fc:	d012      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008902:	d81a      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d022      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800890c:	d115      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008912:	3308      	adds	r3, #8
 8008914:	2101      	movs	r1, #1
 8008916:	4618      	mov	r0, r3
 8008918:	f002 f878 	bl	800aa0c <RCCEx_PLL2_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008922:	e015      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	3328      	adds	r3, #40	@ 0x28
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f002 f91f 	bl	800ab70 <RCCEx_PLL3_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008938:	e00a      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008940:	e006      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008942:	bf00      	nop
 8008944:	e004      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008946:	bf00      	nop
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800894a:	bf00      	nop
 800894c:	e000      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800894e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008958:	4ba3      	ldr	r3, [pc, #652]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800895c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008968:	4a9f      	ldr	r2, [pc, #636]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800896a:	430b      	orrs	r3, r1
 800896c:	6593      	str	r3, [r2, #88]	@ 0x58
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800898e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d037      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a2:	d00e      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80089a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a8:	d816      	bhi.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d018      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089b2:	d111      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4b8c      	ldr	r3, [pc, #560]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	4a8b      	ldr	r2, [pc, #556]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80089c0:	e00f      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	3308      	adds	r3, #8
 80089c8:	2101      	movs	r1, #1
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 f81e 	bl	800aa0c <RCCEx_PLL2_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80089d6:	e004      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089de:	e000      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80089e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089ea:	4b7f      	ldr	r3, [pc, #508]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f8:	4a7b      	ldr	r2, [pc, #492]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80089fe:	e003      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4313      	orrs	r3, r2
 8008a26:	d039      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d81c      	bhi.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008a32:	a201      	add	r2, pc, #4	@ (adr r2, 8008a38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a75 	.word	0x08008a75
 8008a3c:	08008a49 	.word	0x08008a49
 8008a40:	08008a57 	.word	0x08008a57
 8008a44:	08008a75 	.word	0x08008a75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a48:	4b67      	ldr	r3, [pc, #412]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	4a66      	ldr	r2, [pc, #408]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a54:	e00f      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 ffd4 	bl	800aa0c <RCCEx_PLL2_Config>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a6a:	e004      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a72:	e000      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a82:	f023 0103 	bic.w	r1, r3, #3
 8008a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a8c:	4a56      	ldr	r2, [pc, #344]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a92:	e003      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f000 809f 	beq.w	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008abe:	4b4b      	ldr	r3, [pc, #300]	@ (8008bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8008bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008aca:	f7f9 fefd 	bl	80028c8 <HAL_GetTick>
 8008ace:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ad2:	e00b      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ad4:	f7f9 fef8 	bl	80028c8 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b64      	cmp	r3, #100	@ 0x64
 8008ae2:	d903      	bls.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aea:	e005      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aec:	4b3f      	ldr	r3, [pc, #252]	@ (8008bec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0ed      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d179      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b00:	4b39      	ldr	r3, [pc, #228]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b0c:	4053      	eors	r3, r2
 8008b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d015      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b16:	4b34      	ldr	r3, [pc, #208]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b22:	4b31      	ldr	r3, [pc, #196]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b26:	4a30      	ldr	r2, [pc, #192]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b32:	4a2d      	ldr	r2, [pc, #180]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008b40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b4e:	d118      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7f9 feba 	bl	80028c8 <HAL_GetTick>
 8008b54:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b58:	e00d      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5a:	f7f9 feb5 	bl	80028c8 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008b64:	1ad2      	subs	r2, r2, r3
 8008b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d903      	bls.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008b74:	e005      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b76:	4b1c      	ldr	r3, [pc, #112]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0eb      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d129      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b9a:	d10e      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008b9c:	4b12      	ldr	r3, [pc, #72]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bac:	091a      	lsrs	r2, r3, #4
 8008bae:	4b10      	ldr	r3, [pc, #64]	@ (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6113      	str	r3, [r2, #16]
 8008bb8:	e005      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008bba:	4b0b      	ldr	r3, [pc, #44]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008bc4:	6113      	str	r3, [r2, #16]
 8008bc6:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bc8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bd6:	4a04      	ldr	r2, [pc, #16]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bdc:	e00e      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008be6:	e009      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008be8:	58024400 	.word	0x58024400
 8008bec:	58024800 	.word	0x58024800
 8008bf0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f002 0301 	and.w	r3, r2, #1
 8008c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f000 8089 	beq.w	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c24:	2b28      	cmp	r3, #40	@ 0x28
 8008c26:	d86b      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008c28:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008d09 	.word	0x08008d09
 8008c34:	08008d01 	.word	0x08008d01
 8008c38:	08008d01 	.word	0x08008d01
 8008c3c:	08008d01 	.word	0x08008d01
 8008c40:	08008d01 	.word	0x08008d01
 8008c44:	08008d01 	.word	0x08008d01
 8008c48:	08008d01 	.word	0x08008d01
 8008c4c:	08008d01 	.word	0x08008d01
 8008c50:	08008cd5 	.word	0x08008cd5
 8008c54:	08008d01 	.word	0x08008d01
 8008c58:	08008d01 	.word	0x08008d01
 8008c5c:	08008d01 	.word	0x08008d01
 8008c60:	08008d01 	.word	0x08008d01
 8008c64:	08008d01 	.word	0x08008d01
 8008c68:	08008d01 	.word	0x08008d01
 8008c6c:	08008d01 	.word	0x08008d01
 8008c70:	08008ceb 	.word	0x08008ceb
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008d01 	.word	0x08008d01
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008d01 	.word	0x08008d01
 8008c90:	08008d09 	.word	0x08008d09
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008d09 	.word	0x08008d09
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d01 	.word	0x08008d01
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d09 	.word	0x08008d09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd8:	3308      	adds	r3, #8
 8008cda:	2101      	movs	r1, #1
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 fe95 	bl	800aa0c <RCCEx_PLL2_Config>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ce8:	e00f      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cee:	3328      	adds	r3, #40	@ 0x28
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 ff3c 	bl	800ab70 <RCCEx_PLL3_Config>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008cfe:	e004      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d06:	e000      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d12:	4bbf      	ldr	r3, [pc, #764]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d20:	4abb      	ldr	r2, [pc, #748]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d22:	430b      	orrs	r3, r1
 8008d24:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d26:	e003      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f002 0302 	and.w	r3, r2, #2
 8008d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	d041      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d824      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008d8f 	.word	0x08008d8f
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008dad 	.word	0x08008dad
 8008d74:	08008dad 	.word	0x08008dad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	2101      	movs	r1, #1
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fe43 	bl	800aa0c <RCCEx_PLL2_Config>
 8008d86:	4603      	mov	r3, r0
 8008d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d8c:	e00f      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	3328      	adds	r3, #40	@ 0x28
 8008d94:	2101      	movs	r1, #1
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 feea 	bl	800ab70 <RCCEx_PLL3_Config>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008da2:	e004      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008daa:	e000      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008db6:	4b96      	ldr	r3, [pc, #600]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	f023 0107 	bic.w	r1, r3, #7
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dc4:	4a92      	ldr	r2, [pc, #584]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dca:	e003      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f002 0304 	and.w	r3, r2, #4
 8008de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008de4:	2300      	movs	r3, #0
 8008de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008dea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4313      	orrs	r3, r2
 8008df2:	d044      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	d825      	bhi.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008e00:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e55 	.word	0x08008e55
 8008e0c:	08008e21 	.word	0x08008e21
 8008e10:	08008e37 	.word	0x08008e37
 8008e14:	08008e55 	.word	0x08008e55
 8008e18:	08008e55 	.word	0x08008e55
 8008e1c:	08008e55 	.word	0x08008e55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e24:	3308      	adds	r3, #8
 8008e26:	2101      	movs	r1, #1
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fdef 	bl	800aa0c <RCCEx_PLL2_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e34:	e00f      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	3328      	adds	r3, #40	@ 0x28
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 fe96 	bl	800ab70 <RCCEx_PLL3_Config>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e4a:	e004      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e52:	e000      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10b      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e62:	f023 0107 	bic.w	r1, r3, #7
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e6e:	4a68      	ldr	r2, [pc, #416]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e70:	430b      	orrs	r3, r1
 8008e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e74:	e003      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f002 0320 	and.w	r3, r2, #32
 8008e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	d055      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eaa:	d033      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eb0:	d82c      	bhi.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb6:	d02f      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ebc:	d826      	bhi.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ec2:	d02b      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008ec4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ec8:	d820      	bhi.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ece:	d012      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed4:	d81a      	bhi.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d022      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ede:	d115      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 fd8f 	bl	800aa0c <RCCEx_PLL2_Config>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ef4:	e015      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	3328      	adds	r3, #40	@ 0x28
 8008efc:	2102      	movs	r1, #2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fe36 	bl	800ab70 <RCCEx_PLL3_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f0a:	e00a      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f12:	e006      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f14:	bf00      	nop
 8008f16:	e004      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f18:	bf00      	nop
 8008f1a:	e002      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f1c:	bf00      	nop
 8008f1e:	e000      	b.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f2a:	4b39      	ldr	r3, [pc, #228]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3a:	4a35      	ldr	r2, [pc, #212]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f40:	e003      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4313      	orrs	r3, r2
 8008f68:	d058      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f76:	d033      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008f78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f7c:	d82c      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f82:	d02f      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f88:	d826      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f8e:	d02b      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f94:	d820      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f9a:	d012      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa0:	d81a      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d022      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008faa:	d115      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f001 fd29 	bl	800aa0c <RCCEx_PLL2_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e015      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc6:	3328      	adds	r3, #40	@ 0x28
 8008fc8:	2102      	movs	r1, #2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fdd0 	bl	800ab70 <RCCEx_PLL3_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008fd6:	e00a      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fde:	e006      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fe0:	bf00      	nop
 8008fe2:	e004      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fe4:	bf00      	nop
 8008fe6:	e002      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10e      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ff6:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009006:	4a02      	ldr	r2, [pc, #8]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009008:	430b      	orrs	r3, r1
 800900a:	6593      	str	r3, [r2, #88]	@ 0x58
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800900e:	bf00      	nop
 8009010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800901c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009032:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009036:	460b      	mov	r3, r1
 8009038:	4313      	orrs	r3, r2
 800903a:	d055      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009044:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009048:	d033      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800904a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800904e:	d82c      	bhi.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009054:	d02f      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800905a:	d826      	bhi.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800905c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009060:	d02b      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009062:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009066:	d820      	bhi.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800906c:	d012      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800906e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009072:	d81a      	bhi.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d022      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800907c:	d115      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800907e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009082:	3308      	adds	r3, #8
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f001 fcc0 	bl	800aa0c <RCCEx_PLL2_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009092:	e015      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009098:	3328      	adds	r3, #40	@ 0x28
 800909a:	2102      	movs	r1, #2
 800909c:	4618      	mov	r0, r3
 800909e:	f001 fd67 	bl	800ab70 <RCCEx_PLL3_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090a8:	e00a      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090b0:	e006      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80090b2:	bf00      	nop
 80090b4:	e004      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80090b6:	bf00      	nop
 80090b8:	e002      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80090be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10b      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090c8:	4ba1      	ldr	r3, [pc, #644]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090d8:	4a9d      	ldr	r2, [pc, #628]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090da:	430b      	orrs	r3, r1
 80090dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80090de:	e003      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80090e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f002 0308 	and.w	r3, r2, #8
 80090f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090f8:	2300      	movs	r3, #0
 80090fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009102:	460b      	mov	r3, r1
 8009104:	4313      	orrs	r3, r2
 8009106:	d01e      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009114:	d10c      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911a:	3328      	adds	r3, #40	@ 0x28
 800911c:	2102      	movs	r1, #2
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fd26 	bl	800ab70 <RCCEx_PLL3_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009130:	4b87      	ldr	r3, [pc, #540]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009134:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009140:	4a83      	ldr	r2, [pc, #524]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009142:	430b      	orrs	r3, r1
 8009144:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f002 0310 	and.w	r3, r2, #16
 8009152:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009156:	2300      	movs	r3, #0
 8009158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800915c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009160:	460b      	mov	r3, r1
 8009162:	4313      	orrs	r3, r2
 8009164:	d01e      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800916e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009172:	d10c      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009178:	3328      	adds	r3, #40	@ 0x28
 800917a:	2102      	movs	r1, #2
 800917c:	4618      	mov	r0, r3
 800917e:	f001 fcf7 	bl	800ab70 <RCCEx_PLL3_Config>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800918e:	4b70      	ldr	r3, [pc, #448]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800919e:	4a6c      	ldr	r2, [pc, #432]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80091b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091b4:	2300      	movs	r3, #0
 80091b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80091be:	460b      	mov	r3, r1
 80091c0:	4313      	orrs	r3, r2
 80091c2:	d03e      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80091cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091d0:	d022      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80091d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091d6:	d81b      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091e0:	d00b      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80091e2:	e015      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	3308      	adds	r3, #8
 80091ea:	2100      	movs	r1, #0
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 fc0d 	bl	800aa0c <RCCEx_PLL2_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091f8:	e00f      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fe:	3328      	adds	r3, #40	@ 0x28
 8009200:	2102      	movs	r1, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fcb4 	bl	800ab70 <RCCEx_PLL3_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800920e:	e004      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009216:	e000      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009222:	4b4b      	ldr	r3, [pc, #300]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009226:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009232:	4a47      	ldr	r2, [pc, #284]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009234:	430b      	orrs	r3, r1
 8009236:	6593      	str	r3, [r2, #88]	@ 0x58
 8009238:	e003      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800924e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009250:	2300      	movs	r3, #0
 8009252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009254:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d03b      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800926a:	d01f      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800926c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009270:	d818      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009276:	d003      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800927c:	d007      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800927e:	e011      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009280:	4b33      	ldr	r3, [pc, #204]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	4a32      	ldr	r2, [pc, #200]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800928a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800928c:	e00f      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800928e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009292:	3328      	adds	r3, #40	@ 0x28
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f001 fc6a 	bl	800ab70 <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80092a2:	e004      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80092ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092b6:	4b26      	ldr	r3, [pc, #152]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c6:	4a22      	ldr	r2, [pc, #136]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80092cc:	e003      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80092e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80092e4:	2300      	movs	r3, #0
 80092e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80092e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80092ec:	460b      	mov	r3, r1
 80092ee:	4313      	orrs	r3, r2
 80092f0:	d034      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80092f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80092fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009300:	d007      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009302:	e011      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009304:	4b12      	ldr	r3, [pc, #72]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a11      	ldr	r2, [pc, #68]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800930a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800930e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009310:	e00e      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	3308      	adds	r3, #8
 8009318:	2102      	movs	r1, #2
 800931a:	4618      	mov	r0, r3
 800931c:	f001 fb76 	bl	800aa0c <RCCEx_PLL2_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009326:	e003      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10d      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009338:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800933a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800933c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009346:	4a02      	ldr	r2, [pc, #8]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009348:	430b      	orrs	r3, r1
 800934a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800934c:	e006      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800934e:	bf00      	nop
 8009350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800935c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009368:	66bb      	str	r3, [r7, #104]	@ 0x68
 800936a:	2300      	movs	r3, #0
 800936c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800936e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d00c      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	3328      	adds	r3, #40	@ 0x28
 800937e:	2102      	movs	r1, #2
 8009380:	4618      	mov	r0, r3
 8009382:	f001 fbf5 	bl	800ab70 <RCCEx_PLL3_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800939e:	663b      	str	r3, [r7, #96]	@ 0x60
 80093a0:	2300      	movs	r3, #0
 80093a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80093a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80093a8:	460b      	mov	r3, r1
 80093aa:	4313      	orrs	r3, r2
 80093ac:	d038      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093ba:	d018      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80093bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093c0:	d811      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80093c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c6:	d014      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80093c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093cc:	d80b      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d011      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80093d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d6:	d106      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d8:	4bc3      	ldr	r3, [pc, #780]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	4ac2      	ldr	r2, [pc, #776]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80093e4:	e008      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ec:	e004      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009400:	4bb9      	ldr	r3, [pc, #740]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009404:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009410:	4ab5      	ldr	r2, [pc, #724]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009412:	430b      	orrs	r3, r1
 8009414:	6553      	str	r3, [r2, #84]	@ 0x54
 8009416:	e003      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800942c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800942e:	2300      	movs	r3, #0
 8009430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009432:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009436:	460b      	mov	r3, r1
 8009438:	4313      	orrs	r3, r2
 800943a:	d009      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800943c:	4baa      	ldr	r3, [pc, #680]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800943e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009440:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800944a:	4aa7      	ldr	r2, [pc, #668]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800944c:	430b      	orrs	r3, r1
 800944e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800945c:	653b      	str	r3, [r7, #80]	@ 0x50
 800945e:	2300      	movs	r3, #0
 8009460:	657b      	str	r3, [r7, #84]	@ 0x54
 8009462:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009466:	460b      	mov	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	d00a      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800946c:	4b9e      	ldr	r3, [pc, #632]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800947c:	4a9a      	ldr	r2, [pc, #616]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800948e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009490:	2300      	movs	r3, #0
 8009492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009494:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009498:	460b      	mov	r3, r1
 800949a:	4313      	orrs	r3, r2
 800949c:	d009      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800949e:	4b92      	ldr	r3, [pc, #584]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80094a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094ac:	4a8e      	ldr	r2, [pc, #568]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ae:	430b      	orrs	r3, r1
 80094b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80094be:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c0:	2300      	movs	r3, #0
 80094c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80094c8:	460b      	mov	r3, r1
 80094ca:	4313      	orrs	r3, r2
 80094cc:	d00e      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094ce:	4b86      	ldr	r3, [pc, #536]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	4a85      	ldr	r2, [pc, #532]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094d8:	6113      	str	r3, [r2, #16]
 80094da:	4b83      	ldr	r3, [pc, #524]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094dc:	6919      	ldr	r1, [r3, #16]
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80094e6:	4a80      	ldr	r2, [pc, #512]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80094f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009502:	460b      	mov	r3, r1
 8009504:	4313      	orrs	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009508:	4b77      	ldr	r3, [pc, #476]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800950a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800950c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	4a74      	ldr	r2, [pc, #464]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009518:	430b      	orrs	r3, r1
 800951a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009528:	633b      	str	r3, [r7, #48]	@ 0x30
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	d00a      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009538:	4b6b      	ldr	r3, [pc, #428]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800953a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009548:	4a67      	ldr	r2, [pc, #412]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800954a:	430b      	orrs	r3, r1
 800954c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800954e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	2100      	movs	r1, #0
 8009558:	62b9      	str	r1, [r7, #40]	@ 0x28
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009560:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009564:	460b      	mov	r3, r1
 8009566:	4313      	orrs	r3, r2
 8009568:	d011      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	3308      	adds	r3, #8
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fa4a 	bl	800aa0c <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800957e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	2100      	movs	r1, #0
 8009598:	6239      	str	r1, [r7, #32]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80095a4:	460b      	mov	r3, r1
 80095a6:	4313      	orrs	r3, r2
 80095a8:	d011      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	3308      	adds	r3, #8
 80095b0:	2101      	movs	r1, #1
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 fa2a 	bl	800aa0c <RCCEx_PLL2_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	2100      	movs	r1, #0
 80095d8:	61b9      	str	r1, [r7, #24]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80095e4:	460b      	mov	r3, r1
 80095e6:	4313      	orrs	r3, r2
 80095e8:	d011      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ee:	3308      	adds	r3, #8
 80095f0:	2102      	movs	r1, #2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 fa0a 	bl	800aa0c <RCCEx_PLL2_Config>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80095fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800960a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	2100      	movs	r1, #0
 8009618:	6139      	str	r1, [r7, #16]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009624:	460b      	mov	r3, r1
 8009626:	4313      	orrs	r3, r2
 8009628:	d011      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962e:	3328      	adds	r3, #40	@ 0x28
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fa9c 	bl	800ab70 <RCCEx_PLL3_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800963e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800964a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	2100      	movs	r1, #0
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	f003 0310 	and.w	r3, r3, #16
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009664:	460b      	mov	r3, r1
 8009666:	4313      	orrs	r3, r2
 8009668:	d011      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	3328      	adds	r3, #40	@ 0x28
 8009670:	2101      	movs	r1, #1
 8009672:	4618      	mov	r0, r3
 8009674:	f001 fa7c 	bl	800ab70 <RCCEx_PLL3_Config>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800967e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800968a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	2100      	movs	r1, #0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	607b      	str	r3, [r7, #4]
 80096a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80096a4:	460b      	mov	r3, r1
 80096a6:	4313      	orrs	r3, r2
 80096a8:	d011      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ae:	3328      	adds	r3, #40	@ 0x28
 80096b0:	2102      	movs	r1, #2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f001 fa5c 	bl	800ab70 <RCCEx_PLL3_Config>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80096be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80096ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
}
 80096dc:	4618      	mov	r0, r3
 80096de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80096e2:	46bd      	mov	sp, r7
 80096e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e8:	58024400 	.word	0x58024400

080096ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b090      	sub	sp, #64	@ 0x40
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80096f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80096fe:	430b      	orrs	r3, r1
 8009700:	f040 8094 	bne.w	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009704:	4b9e      	ldr	r3, [pc, #632]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2b04      	cmp	r3, #4
 8009712:	f200 8087 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009716:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971c:	08009731 	.word	0x08009731
 8009720:	08009759 	.word	0x08009759
 8009724:	08009781 	.word	0x08009781
 8009728:	0800981d 	.word	0x0800981d
 800972c:	080097a9 	.word	0x080097a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009730:	4b93      	ldr	r3, [pc, #588]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800973c:	d108      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800973e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009742:	4618      	mov	r0, r3
 8009744:	f001 f810 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974c:	f000 bd45 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009754:	f000 bd41 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009758:	4b89      	ldr	r3, [pc, #548]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009764:	d108      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fd54 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009774:	f000 bd31 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977c:	f000 bd2d 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009780:	4b7f      	ldr	r3, [pc, #508]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800978c:	d108      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fe94 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979c:	f000 bd1d 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a4:	f000 bd19 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097a8:	4b75      	ldr	r3, [pc, #468]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b2:	4b73      	ldr	r3, [pc, #460]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d10c      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80097be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097c4:	4b6e      	ldr	r3, [pc, #440]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	08db      	lsrs	r3, r3, #3
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	4a6d      	ldr	r2, [pc, #436]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d6:	e01f      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097d8:	4b69      	ldr	r3, [pc, #420]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e4:	d106      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80097e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ec:	d102      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097ee:	4b66      	ldr	r3, [pc, #408]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097f2:	e011      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097f4:	4b62      	ldr	r3, [pc, #392]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009800:	d106      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009808:	d102      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800980a:	4b60      	ldr	r3, [pc, #384]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800980e:	e003      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009814:	f000 bce1 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009818:	f000 bcdf 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800981c:	4b5c      	ldr	r3, [pc, #368]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800981e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009820:	f000 bcdb 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009828:	f000 bcd7 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800982c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009830:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009834:	430b      	orrs	r3, r1
 8009836:	f040 80ad 	bne.w	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800983a:	4b51      	ldr	r3, [pc, #324]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800983c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800983e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009842:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800984a:	d056      	beq.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009852:	f200 8090 	bhi.w	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	2bc0      	cmp	r3, #192	@ 0xc0
 800985a:	f000 8088 	beq.w	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	2bc0      	cmp	r3, #192	@ 0xc0
 8009862:	f200 8088 	bhi.w	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009868:	2b80      	cmp	r3, #128	@ 0x80
 800986a:	d032      	beq.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	2b80      	cmp	r3, #128	@ 0x80
 8009870:	f200 8081 	bhi.w	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b40      	cmp	r3, #64	@ 0x40
 800987e:	d014      	beq.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009880:	e079      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009882:	4b3f      	ldr	r3, [pc, #252]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800988a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800988e:	d108      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009894:	4618      	mov	r0, r3
 8009896:	f000 ff67 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800989a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989e:	f000 bc9c 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a6:	f000 bc98 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098aa:	4b35      	ldr	r3, [pc, #212]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b6:	d108      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b8:	f107 0318 	add.w	r3, r7, #24
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fcab 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c6:	f000 bc88 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ce:	f000 bc84 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098de:	d108      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fdeb 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ee:	f000 bc74 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f6:	f000 bc70 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098fa:	4b21      	ldr	r3, [pc, #132]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009904:	4b1e      	ldr	r3, [pc, #120]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b04      	cmp	r3, #4
 800990e:	d10c      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009916:	4b1a      	ldr	r3, [pc, #104]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	08db      	lsrs	r3, r3, #3
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	4a18      	ldr	r2, [pc, #96]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009922:	fa22 f303 	lsr.w	r3, r2, r3
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009928:	e01f      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800992a:	4b15      	ldr	r3, [pc, #84]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009936:	d106      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800993e:	d102      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009940:	4b11      	ldr	r3, [pc, #68]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009944:	e011      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009946:	4b0e      	ldr	r3, [pc, #56]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800994e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009952:	d106      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995a:	d102      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800995c:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009960:	e003      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009966:	f000 bc38 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800996a:	f000 bc36 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800996e:	4b08      	ldr	r3, [pc, #32]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009972:	f000 bc32 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997a:	f000 bc2e 	b.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800997e:	bf00      	nop
 8009980:	58024400 	.word	0x58024400
 8009984:	03d09000 	.word	0x03d09000
 8009988:	003d0900 	.word	0x003d0900
 800998c:	017d7840 	.word	0x017d7840
 8009990:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009998:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800999c:	430b      	orrs	r3, r1
 800999e:	f040 809c 	bne.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80099a2:	4b9e      	ldr	r3, [pc, #632]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80099aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b2:	d054      	beq.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099ba:	f200 808b 	bhi.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099c4:	f000 8083 	beq.w	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099ce:	f200 8081 	bhi.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099d8:	d02f      	beq.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099e0:	d878      	bhi.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ee:	d012      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80099f0:	e070      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099f2:	4b8a      	ldr	r3, [pc, #552]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099fe:	d107      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 feaf 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0e:	e3e4      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a14:	e3e1      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a16:	4b81      	ldr	r3, [pc, #516]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a22:	d107      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a24:	f107 0318 	add.w	r3, r7, #24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fbf5 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a32:	e3d2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a38:	e3cf      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a3a:	4b78      	ldr	r3, [pc, #480]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a46:	d107      	bne.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a48:	f107 030c 	add.w	r3, r7, #12
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fd37 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a56:	e3c0      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5c:	e3bd      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a68:	4b6c      	ldr	r3, [pc, #432]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d10c      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a7a:	4b68      	ldr	r3, [pc, #416]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	08db      	lsrs	r3, r3, #3
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	4a66      	ldr	r2, [pc, #408]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a8c:	e01e      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a8e:	4b63      	ldr	r3, [pc, #396]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a9a:	d106      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aa2:	d102      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aa8:	e010      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ab6:	d106      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abe:	d102      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ac0:	4b59      	ldr	r3, [pc, #356]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ac4:	e002      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009aca:	e386      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009acc:	e385      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ace:	4b57      	ldr	r3, [pc, #348]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad2:	e382      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e37f      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ade:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	f040 80a7 	bne.w	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009af0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009af8:	d055      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b00:	f200 8096 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b0a:	f000 8084 	beq.w	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b14:	f200 808c 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b1e:	d030      	beq.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b26:	f200 8083 	bhi.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d004      	beq.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b36:	d012      	beq.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009b38:	e07a      	b.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b3a:	4b38      	ldr	r3, [pc, #224]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b46:	d107      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fe0b 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b56:	e340      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5c:	e33d      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b6a:	d107      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6c:	f107 0318 	add.w	r3, r7, #24
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fb51 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7a:	e32e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b80:	e32b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b82:	4b26      	ldr	r3, [pc, #152]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b8e:	d107      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b90:	f107 030c 	add.w	r3, r7, #12
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 fc93 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b9e:	e31c      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba4:	e319      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d10c      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bc2:	4b16      	ldr	r3, [pc, #88]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	08db      	lsrs	r3, r3, #3
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	4a14      	ldr	r2, [pc, #80]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009bce:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd4:	e01e      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bd6:	4b11      	ldr	r3, [pc, #68]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009be2:	d106      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bea:	d102      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bec:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bf0:	e010      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bfe:	d106      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c06:	d102      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c08:	4b07      	ldr	r3, [pc, #28]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c0c:	e002      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009c12:	e2e2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c14:	e2e1      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c16:	4b05      	ldr	r3, [pc, #20]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c1a:	e2de      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	03d09000 	.word	0x03d09000
 8009c24:	003d0900 	.word	0x003d0900
 8009c28:	017d7840 	.word	0x017d7840
 8009c2c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c34:	e2d1      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c3a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	f040 809c 	bne.w	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009c44:	4b93      	ldr	r3, [pc, #588]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c48:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009c4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c54:	d054      	beq.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c5c:	f200 808b 	bhi.w	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c66:	f000 8083 	beq.w	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c70:	f200 8081 	bhi.w	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c7a:	d02f      	beq.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c82:	d878      	bhi.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c90:	d012      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009c92:	e070      	b.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c94:	4b7f      	ldr	r3, [pc, #508]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fd5e 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cb0:	e293      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb6:	e290      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cb8:	4b76      	ldr	r3, [pc, #472]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc6:	f107 0318 	add.w	r3, r7, #24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 faa4 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd4:	e281      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cda:	e27e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cdc:	4b6d      	ldr	r3, [pc, #436]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ce8:	d107      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cea:	f107 030c 	add.w	r3, r7, #12
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fbe6 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf8:	e26f      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cfe:	e26c      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d00:	4b64      	ldr	r3, [pc, #400]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d0a:	4b62      	ldr	r3, [pc, #392]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d10c      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d1c:	4b5d      	ldr	r3, [pc, #372]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	08db      	lsrs	r3, r3, #3
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	4a5c      	ldr	r2, [pc, #368]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009d28:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d2e:	e01e      	b.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d30:	4b58      	ldr	r3, [pc, #352]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d3c:	d106      	bne.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d44:	d102      	bne.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d46:	4b55      	ldr	r3, [pc, #340]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d4a:	e010      	b.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d4c:	4b51      	ldr	r3, [pc, #324]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d58:	d106      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d60:	d102      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d62:	4b4f      	ldr	r3, [pc, #316]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d66:	e002      	b.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d6c:	e235      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d6e:	e234      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d70:	4b4c      	ldr	r3, [pc, #304]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d74:	e231      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d7a:	e22e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d80:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009d84:	430b      	orrs	r3, r1
 8009d86:	f040 808f 	bne.w	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009d8a:	4b42      	ldr	r3, [pc, #264]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d8e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d9a:	d06b      	beq.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009da2:	d874      	bhi.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009daa:	d056      	beq.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009db2:	d86c      	bhi.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009dba:	d03b      	beq.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009dc2:	d864      	bhi.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dca:	d021      	beq.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dd2:	d85c      	bhi.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d004      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de0:	d004      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009de2:	e054      	b.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009de4:	f7fe fa0a 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 8009de8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dea:	e1f6      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dec:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df8:	d107      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dfa:	f107 0318 	add.w	r3, r7, #24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fa0a 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e08:	e1e7      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0e:	e1e4      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e10:	4b20      	ldr	r3, [pc, #128]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e1c:	d107      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1e:	f107 030c 	add.w	r3, r7, #12
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fb4c 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2c:	e1d5      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e32:	e1d2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e34:	4b17      	ldr	r3, [pc, #92]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d109      	bne.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e40:	4b14      	ldr	r3, [pc, #80]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	08db      	lsrs	r3, r3, #3
 8009e46:	f003 0303 	and.w	r3, r3, #3
 8009e4a:	4a13      	ldr	r2, [pc, #76]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e52:	e1c2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e58:	e1bf      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e66:	d102      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009e68:	4b0c      	ldr	r3, [pc, #48]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e6c:	e1b5      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e72:	e1b2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e74:	4b07      	ldr	r3, [pc, #28]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e80:	d102      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009e82:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e86:	e1a8      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8c:	e1a5      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e92:	e1a2      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e94:	58024400 	.word	0x58024400
 8009e98:	03d09000 	.word	0x03d09000
 8009e9c:	003d0900 	.word	0x003d0900
 8009ea0:	017d7840 	.word	0x017d7840
 8009ea4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	d173      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009eb4:	4b9c      	ldr	r3, [pc, #624]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ebc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ec4:	d02f      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ecc:	d863      	bhi.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eda:	d012      	beq.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009edc:	e05b      	b.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ede:	4b92      	ldr	r3, [pc, #584]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eea:	d107      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eec:	f107 0318 	add.w	r3, r7, #24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 f991 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009efa:	e16e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f00:	e16b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f02:	4b89      	ldr	r3, [pc, #548]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f0e:	d107      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f10:	f107 030c 	add.w	r3, r7, #12
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fad3 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f1e:	e15c      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f24:	e159      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f26:	4b80      	ldr	r3, [pc, #512]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f30:	4b7d      	ldr	r3, [pc, #500]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d10c      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f42:	4b79      	ldr	r3, [pc, #484]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	08db      	lsrs	r3, r3, #3
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	4a77      	ldr	r2, [pc, #476]	@ (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f54:	e01e      	b.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f56:	4b74      	ldr	r3, [pc, #464]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f62:	d106      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f6a:	d102      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f6c:	4b70      	ldr	r3, [pc, #448]	@ (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f70:	e010      	b.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f72:	4b6d      	ldr	r3, [pc, #436]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f7e:	d106      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f86:	d102      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f88:	4b6a      	ldr	r3, [pc, #424]	@ (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f8c:	e002      	b.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f92:	e122      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f94:	e121      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9a:	e11e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fa0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	d133      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009fa8:	4b5f      	ldr	r3, [pc, #380]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fb0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d004      	beq.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fbe:	d012      	beq.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009fc0:	e023      	b.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fc2:	4b59      	ldr	r3, [pc, #356]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fce:	d107      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fbc7 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fde:	e0fc      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe4:	e0f9      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fe6:	4b50      	ldr	r3, [pc, #320]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ff4:	f107 0318 	add.w	r3, r7, #24
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f90d 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a002:	e0ea      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e0e7      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00e:	e0e4      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a014:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a018:	430b      	orrs	r3, r1
 800a01a:	f040 808d 	bne.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a01e:	4b42      	ldr	r3, [pc, #264]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a022:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a026:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a02e:	d06b      	beq.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a036:	d874      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03e:	d056      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a046:	d86c      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a04e:	d03b      	beq.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a056:	d864      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05e:	d021      	beq.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a066:	d85c      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a074:	d004      	beq.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a076:	e054      	b.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a078:	f000 f8b8 	bl	800a1ec <HAL_RCCEx_GetD3PCLK1Freq>
 800a07c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a07e:	e0ac      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a080:	4b29      	ldr	r3, [pc, #164]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a08c:	d107      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08e:	f107 0318 	add.w	r3, r7, #24
 800a092:	4618      	mov	r0, r3
 800a094:	f000 f8c0 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a09c:	e09d      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a2:	e09a      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0a4:	4b20      	ldr	r3, [pc, #128]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0b0:	d107      	bne.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0b2:	f107 030c 	add.w	r3, r7, #12
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fa02 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c0:	e08b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c6:	e088      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0c8:	4b17      	ldr	r3, [pc, #92]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d109      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0d4:	4b14      	ldr	r3, [pc, #80]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	08db      	lsrs	r3, r3, #3
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	4a13      	ldr	r2, [pc, #76]	@ (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e6:	e078      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ec:	e075      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0fa:	d102      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a100:	e06b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a106:	e068      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a108:	4b07      	ldr	r3, [pc, #28]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a114:	d102      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a116:	4b07      	ldr	r3, [pc, #28]	@ (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a11a:	e05e      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a120:	e05b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a126:	e058      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a128:	58024400 	.word	0x58024400
 800a12c:	03d09000 	.word	0x03d09000
 800a130:	003d0900 	.word	0x003d0900
 800a134:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a140:	430b      	orrs	r3, r1
 800a142:	d148      	bne.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a144:	4b27      	ldr	r3, [pc, #156]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a14c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a154:	d02a      	beq.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a15c:	d838      	bhi.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a16a:	d00d      	beq.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a16c:	e030      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a16e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a17a:	d102      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a17c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a180:	e02b      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a186:	e028      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a188:	4b16      	ldr	r3, [pc, #88]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a194:	d107      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fae4 	bl	800a768 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a4:	e019      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1aa:	e016      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1b8:	d107      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ba:	f107 0318 	add.w	r3, r7, #24
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f82a 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c8:	e007      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ce:	e004      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d4:	e001      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3740      	adds	r7, #64	@ 0x40
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	017d7840 	.word	0x017d7840

0800a1ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a1f0:	f7fd ffd4 	bl	800819c <HAL_RCC_GetHCLKFreq>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	4b06      	ldr	r3, [pc, #24]	@ (800a210 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	091b      	lsrs	r3, r3, #4
 800a1fc:	f003 0307 	and.w	r3, r3, #7
 800a200:	4904      	ldr	r1, [pc, #16]	@ (800a214 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a202:	5ccb      	ldrb	r3, [r1, r3]
 800a204:	f003 031f 	and.w	r3, r3, #31
 800a208:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	58024400 	.word	0x58024400
 800a214:	0801f010 	.word	0x0801f010

0800a218 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	@ 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a220:	4ba1      	ldr	r3, [pc, #644]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a224:	f003 0303 	and.w	r3, r3, #3
 800a228:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a22a:	4b9f      	ldr	r3, [pc, #636]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	0b1b      	lsrs	r3, r3, #12
 800a230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a234:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a236:	4b9c      	ldr	r3, [pc, #624]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23a:	091b      	lsrs	r3, r3, #4
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a242:	4b99      	ldr	r3, [pc, #612]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a246:	08db      	lsrs	r3, r3, #3
 800a248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	fb02 f303 	mul.w	r3, r2, r3
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8111 	beq.w	800a488 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	f000 8083 	beq.w	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	2b02      	cmp	r3, #2
 800a272:	f200 80a1 	bhi.w	800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d056      	beq.n	800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a282:	e099      	b.n	800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a284:	4b88      	ldr	r3, [pc, #544]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0320 	and.w	r3, r3, #32
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02d      	beq.n	800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a290:	4b85      	ldr	r3, [pc, #532]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	08db      	lsrs	r3, r3, #3
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	4a84      	ldr	r2, [pc, #528]	@ (800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a29c:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2ea:	e087      	b.n	800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a312:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a32e:	e065      	b.n	800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a342:	4b59      	ldr	r3, [pc, #356]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a352:	ed97 6a03 	vldr	s12, [r7, #12]
 800a356:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a372:	e043      	b.n	800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a386:	4b48      	ldr	r3, [pc, #288]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a396:	ed97 6a03 	vldr	s12, [r7, #12]
 800a39a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3b6:	e021      	b.n	800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	ee07 3a90 	vmov	s15, r3
 800a3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ca:	4b37      	ldr	r3, [pc, #220]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a3fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a400:	0a5b      	lsrs	r3, r3, #9
 800a402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a412:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a416:	edd7 6a07 	vldr	s13, [r7, #28]
 800a41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a422:	ee17 2a90 	vmov	r2, s15
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a42a:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	0c1b      	lsrs	r3, r3, #16
 800a430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a434:	ee07 3a90 	vmov	s15, r3
 800a438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a440:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a444:	edd7 6a07 	vldr	s13, [r7, #28]
 800a448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a44c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a450:	ee17 2a90 	vmov	r2, s15
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a458:	4b13      	ldr	r3, [pc, #76]	@ (800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45c:	0e1b      	lsrs	r3, r3, #24
 800a45e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a472:	edd7 6a07 	vldr	s13, [r7, #28]
 800a476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a47e:	ee17 2a90 	vmov	r2, s15
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a486:	e008      	b.n	800a49a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]
}
 800a49a:	bf00      	nop
 800a49c:	3724      	adds	r7, #36	@ 0x24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	03d09000 	.word	0x03d09000
 800a4b0:	46000000 	.word	0x46000000
 800a4b4:	4c742400 	.word	0x4c742400
 800a4b8:	4a742400 	.word	0x4a742400
 800a4bc:	4bbebc20 	.word	0x4bbebc20

0800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b089      	sub	sp, #36	@ 0x24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4c8:	4ba1      	ldr	r3, [pc, #644]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a4d2:	4b9f      	ldr	r3, [pc, #636]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d6:	0d1b      	lsrs	r3, r3, #20
 800a4d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4de:	4b9c      	ldr	r3, [pc, #624]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a4ea:	4b99      	ldr	r3, [pc, #612]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ee:	08db      	lsrs	r3, r3, #3
 800a4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 8111 	beq.w	800a730 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2b02      	cmp	r3, #2
 800a512:	f000 8083 	beq.w	800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	f200 80a1 	bhi.w	800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d056      	beq.n	800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a52a:	e099      	b.n	800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a52c:	4b88      	ldr	r3, [pc, #544]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0320 	and.w	r3, r3, #32
 800a534:	2b00      	cmp	r3, #0
 800a536:	d02d      	beq.n	800a594 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a538:	4b85      	ldr	r3, [pc, #532]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	08db      	lsrs	r3, r3, #3
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	4a84      	ldr	r2, [pc, #528]	@ (800a754 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a544:	fa22 f303 	lsr.w	r3, r2, r3
 800a548:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a562:	4b7b      	ldr	r3, [pc, #492]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a572:	ed97 6a03 	vldr	s12, [r7, #12]
 800a576:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a592:	e087      	b.n	800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a75c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a6:	4b6a      	ldr	r3, [pc, #424]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5d6:	e065      	b.n	800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b59      	ldr	r3, [pc, #356]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61a:	e043      	b.n	800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	ee07 3a90 	vmov	s15, r3
 800a622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a626:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62e:	4b48      	ldr	r3, [pc, #288]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a642:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a65e:	e021      	b.n	800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a672:	4b37      	ldr	r3, [pc, #220]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a682:	ed97 6a03 	vldr	s12, [r7, #12]
 800a686:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a758 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a6a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a8:	0a5b      	lsrs	r3, r3, #9
 800a6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ca:	ee17 2a90 	vmov	r2, s15
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a6d2:	4b1f      	ldr	r3, [pc, #124]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d6:	0c1b      	lsrs	r3, r3, #16
 800a6d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f8:	ee17 2a90 	vmov	r2, s15
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a700:	4b13      	ldr	r3, [pc, #76]	@ (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a704:	0e1b      	lsrs	r3, r3, #24
 800a706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a726:	ee17 2a90 	vmov	r2, s15
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a72e:	e008      	b.n	800a742 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	609a      	str	r2, [r3, #8]
}
 800a742:	bf00      	nop
 800a744:	3724      	adds	r7, #36	@ 0x24
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400
 800a754:	03d09000 	.word	0x03d09000
 800a758:	46000000 	.word	0x46000000
 800a75c:	4c742400 	.word	0x4c742400
 800a760:	4a742400 	.word	0x4a742400
 800a764:	4bbebc20 	.word	0x4bbebc20

0800a768 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a768:	b480      	push	{r7}
 800a76a:	b089      	sub	sp, #36	@ 0x24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a770:	4ba0      	ldr	r3, [pc, #640]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	f003 0303 	and.w	r3, r3, #3
 800a778:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a77a:	4b9e      	ldr	r3, [pc, #632]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77e:	091b      	lsrs	r3, r3, #4
 800a780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a784:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a786:	4b9b      	ldr	r3, [pc, #620]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a790:	4b98      	ldr	r3, [pc, #608]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	fb02 f303 	mul.w	r3, r2, r3
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 8111 	beq.w	800a9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	f000 8083 	beq.w	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	f200 80a1 	bhi.w	800a906 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d056      	beq.n	800a87e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a7d0:	e099      	b.n	800a906 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7d2:	4b88      	ldr	r3, [pc, #544]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d02d      	beq.n	800a83a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7de:	4b85      	ldr	r3, [pc, #532]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	08db      	lsrs	r3, r3, #3
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	4a83      	ldr	r2, [pc, #524]	@ (800a9f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	ee07 3a90 	vmov	s15, r3
 800a800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a808:	4b7a      	ldr	r3, [pc, #488]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a818:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a9fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a834:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a838:	e087      	b.n	800a94a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aa00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84c:	4b69      	ldr	r3, [pc, #420]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a860:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a9fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a87c:	e065      	b.n	800a94a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aa04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a88c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a890:	4b58      	ldr	r3, [pc, #352]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a9fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c0:	e043      	b.n	800a94a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aa08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a8d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d4:	4b47      	ldr	r3, [pc, #284]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a9fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a904:	e021      	b.n	800a94a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a910:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aa00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a918:	4b36      	ldr	r3, [pc, #216]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a928:	ed97 6a03 	vldr	s12, [r7, #12]
 800a92c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a9fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a948:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a94a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a94e:	0a5b      	lsrs	r3, r3, #9
 800a950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a954:	ee07 3a90 	vmov	s15, r3
 800a958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a960:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a964:	edd7 6a07 	vldr	s13, [r7, #28]
 800a968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a970:	ee17 2a90 	vmov	r2, s15
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a978:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a97c:	0c1b      	lsrs	r3, r3, #16
 800a97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a98e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a992:	edd7 6a07 	vldr	s13, [r7, #28]
 800a996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a99e:	ee17 2a90 	vmov	r2, s15
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9aa:	0e1b      	lsrs	r3, r3, #24
 800a9ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9b0:	ee07 3a90 	vmov	s15, r3
 800a9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9cc:	ee17 2a90 	vmov	r2, s15
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	609a      	str	r2, [r3, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	3724      	adds	r7, #36	@ 0x24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	03d09000 	.word	0x03d09000
 800a9fc:	46000000 	.word	0x46000000
 800aa00:	4c742400 	.word	0x4c742400
 800aa04:	4a742400 	.word	0x4a742400
 800aa08:	4bbebc20 	.word	0x4bbebc20

0800aa0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa1a:	4b53      	ldr	r3, [pc, #332]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d101      	bne.n	800aa2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e099      	b.n	800ab5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa2a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a4e      	ldr	r2, [pc, #312]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa36:	f7f7 ff47 	bl	80028c8 <HAL_GetTick>
 800aa3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa3c:	e008      	b.n	800aa50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aa3e:	f7f7 ff43 	bl	80028c8 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d901      	bls.n	800aa50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e086      	b.n	800ab5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa50:	4b45      	ldr	r3, [pc, #276]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f0      	bne.n	800aa3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa5c:	4b42      	ldr	r3, [pc, #264]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	031b      	lsls	r3, r3, #12
 800aa6a:	493f      	ldr	r1, [pc, #252]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	025b      	lsls	r3, r3, #9
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	431a      	orrs	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa92:	431a      	orrs	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	061b      	lsls	r3, r3, #24
 800aa9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aaa0:	4931      	ldr	r1, [pc, #196]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aaa6:	4b30      	ldr	r3, [pc, #192]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aaa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	492d      	ldr	r1, [pc, #180]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aab8:	4b2b      	ldr	r3, [pc, #172]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabc:	f023 0220 	bic.w	r2, r3, #32
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	4928      	ldr	r1, [pc, #160]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aaca:	4b27      	ldr	r3, [pc, #156]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aace:	4a26      	ldr	r2, [pc, #152]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aad0:	f023 0310 	bic.w	r3, r3, #16
 800aad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aad6:	4b24      	ldr	r3, [pc, #144]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aada:	4b24      	ldr	r3, [pc, #144]	@ (800ab6c <RCCEx_PLL2_Config+0x160>)
 800aadc:	4013      	ands	r3, r2
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	69d2      	ldr	r2, [r2, #28]
 800aae2:	00d2      	lsls	r2, r2, #3
 800aae4:	4920      	ldr	r1, [pc, #128]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aaea:	4b1f      	ldr	r3, [pc, #124]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4a1e      	ldr	r2, [pc, #120]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aaf0:	f043 0310 	orr.w	r3, r3, #16
 800aaf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aafc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800aafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab00:	4a19      	ldr	r2, [pc, #100]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab08:	e00f      	b.n	800ab2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d106      	bne.n	800ab1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab10:	4b15      	ldr	r3, [pc, #84]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab14:	4a14      	ldr	r2, [pc, #80]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab1c:	e005      	b.n	800ab2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab1e:	4b12      	ldr	r3, [pc, #72]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab22:	4a11      	ldr	r2, [pc, #68]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a0e      	ldr	r2, [pc, #56]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab36:	f7f7 fec7 	bl	80028c8 <HAL_GetTick>
 800ab3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab3c:	e008      	b.n	800ab50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ab3e:	f7f7 fec3 	bl	80028c8 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d901      	bls.n	800ab50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e006      	b.n	800ab5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab50:	4b05      	ldr	r3, [pc, #20]	@ (800ab68 <RCCEx_PLL2_Config+0x15c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0f0      	beq.n	800ab3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	58024400 	.word	0x58024400
 800ab6c:	ffff0007 	.word	0xffff0007

0800ab70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab7e:	4b53      	ldr	r3, [pc, #332]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ab80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d101      	bne.n	800ab8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e099      	b.n	800acc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab8e:	4b4f      	ldr	r3, [pc, #316]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a4e      	ldr	r2, [pc, #312]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ab94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab9a:	f7f7 fe95 	bl	80028c8 <HAL_GetTick>
 800ab9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aba0:	e008      	b.n	800abb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aba2:	f7f7 fe91 	bl	80028c8 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d901      	bls.n	800abb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e086      	b.n	800acc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abb4:	4b45      	ldr	r3, [pc, #276]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800abc0:	4b42      	ldr	r3, [pc, #264]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	051b      	lsls	r3, r3, #20
 800abce:	493f      	ldr	r1, [pc, #252]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	628b      	str	r3, [r1, #40]	@ 0x28
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	025b      	lsls	r3, r3, #9
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	3b01      	subs	r3, #1
 800abf0:	041b      	lsls	r3, r3, #16
 800abf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	061b      	lsls	r3, r3, #24
 800ac00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac04:	4931      	ldr	r1, [pc, #196]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac0a:	4b30      	ldr	r3, [pc, #192]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	492d      	ldr	r1, [pc, #180]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac1c:	4b2b      	ldr	r3, [pc, #172]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	4928      	ldr	r1, [pc, #160]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac2e:	4b27      	ldr	r3, [pc, #156]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac32:	4a26      	ldr	r2, [pc, #152]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac3a:	4b24      	ldr	r3, [pc, #144]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac3e:	4b24      	ldr	r3, [pc, #144]	@ (800acd0 <RCCEx_PLL3_Config+0x160>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	69d2      	ldr	r2, [r2, #28]
 800ac46:	00d2      	lsls	r2, r2, #3
 800ac48:	4920      	ldr	r1, [pc, #128]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac4e:	4b1f      	ldr	r3, [pc, #124]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac52:	4a1e      	ldr	r2, [pc, #120]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac60:	4b1a      	ldr	r3, [pc, #104]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac64:	4a19      	ldr	r2, [pc, #100]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ac6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ac6c:	e00f      	b.n	800ac8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d106      	bne.n	800ac82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac74:	4b15      	ldr	r3, [pc, #84]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac78:	4a14      	ldr	r2, [pc, #80]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ac80:	e005      	b.n	800ac8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac82:	4b12      	ldr	r3, [pc, #72]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac86:	4a11      	ldr	r2, [pc, #68]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a0e      	ldr	r2, [pc, #56]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800ac94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac9a:	f7f7 fe15 	bl	80028c8 <HAL_GetTick>
 800ac9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aca0:	e008      	b.n	800acb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aca2:	f7f7 fe11 	bl	80028c8 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e006      	b.n	800acc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acb4:	4b05      	ldr	r3, [pc, #20]	@ (800accc <RCCEx_PLL3_Config+0x15c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f0      	beq.n	800aca2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	58024400 	.word	0x58024400
 800acd0:	ffff0007 	.word	0xffff0007

0800acd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e049      	b.n	800ad7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7f7 fc1c 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f000 fad6 	bl	800b2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d001      	beq.n	800ad9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e054      	b.n	800ae46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f042 0201 	orr.w	r2, r2, #1
 800adb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a26      	ldr	r2, [pc, #152]	@ (800ae54 <HAL_TIM_Base_Start_IT+0xd0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a22      	ldr	r2, [pc, #136]	@ (800ae58 <HAL_TIM_Base_Start_IT+0xd4>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a21      	ldr	r2, [pc, #132]	@ (800ae5c <HAL_TIM_Base_Start_IT+0xd8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1f      	ldr	r2, [pc, #124]	@ (800ae60 <HAL_TIM_Base_Start_IT+0xdc>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1e      	ldr	r2, [pc, #120]	@ (800ae64 <HAL_TIM_Base_Start_IT+0xe0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ae68 <HAL_TIM_Base_Start_IT+0xe4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1b      	ldr	r2, [pc, #108]	@ (800ae6c <HAL_TIM_Base_Start_IT+0xe8>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d115      	bne.n	800ae30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	4b19      	ldr	r3, [pc, #100]	@ (800ae70 <HAL_TIM_Base_Start_IT+0xec>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d015      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae1c:	d011      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f042 0201 	orr.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae2e:	e008      	b.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0201 	orr.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	e000      	b.n	800ae44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40000400 	.word	0x40000400
 800ae5c:	40000800 	.word	0x40000800
 800ae60:	40000c00 	.word	0x40000c00
 800ae64:	40010400 	.word	0x40010400
 800ae68:	40001800 	.word	0x40001800
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	00010007 	.word	0x00010007

0800ae74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d020      	beq.n	800aed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01b      	beq.n	800aed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f06f 0202 	mvn.w	r2, #2
 800aea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f9e2 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800aec4:	e005      	b.n	800aed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f9d4 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f9e5 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d020      	beq.n	800af24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01b      	beq.n	800af24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f06f 0204 	mvn.w	r2, #4
 800aef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f9bc 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800af10:	e005      	b.n	800af1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f9ae 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f9bf 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f003 0308 	and.w	r3, r3, #8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d020      	beq.n	800af70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f003 0308 	and.w	r3, r3, #8
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01b      	beq.n	800af70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f06f 0208 	mvn.w	r2, #8
 800af40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2204      	movs	r2, #4
 800af46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f996 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800af5c:	e005      	b.n	800af6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f988 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f999 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f003 0310 	and.w	r3, r3, #16
 800af76:	2b00      	cmp	r3, #0
 800af78:	d020      	beq.n	800afbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f003 0310 	and.w	r3, r3, #16
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01b      	beq.n	800afbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f06f 0210 	mvn.w	r2, #16
 800af8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2208      	movs	r2, #8
 800af92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f970 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800afa8:	e005      	b.n	800afb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f962 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f973 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00c      	beq.n	800afe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d007      	beq.n	800afe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0201 	mvn.w	r2, #1
 800afd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7f6 ff34 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00c      	beq.n	800b00e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fb37 	bl	800b67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00c      	beq.n	800b032 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b02a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fb2f 	bl	800b690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00c      	beq.n	800b056 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b04e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f92d 	bl	800b2b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f003 0320 	and.w	r3, r3, #32
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00c      	beq.n	800b07a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d007      	beq.n	800b07a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f06f 0220 	mvn.w	r2, #32
 800b072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 faf7 	bl	800b668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e0dc      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x1d6>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b264 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a64      	ldr	r2, [pc, #400]	@ (800b268 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	f000 80a9 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0dc:	4a62      	ldr	r2, [pc, #392]	@ (800b268 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	f200 80ae 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e4:	4a61      	ldr	r2, [pc, #388]	@ (800b26c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	f000 80a1 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0ec:	4a5f      	ldr	r2, [pc, #380]	@ (800b26c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	f200 80a6 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0f4:	4a5e      	ldr	r2, [pc, #376]	@ (800b270 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	f000 8099 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0fc:	4a5c      	ldr	r2, [pc, #368]	@ (800b270 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	f200 809e 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b104:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b108:	f000 8091 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b10c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b110:	f200 8096 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b118:	f000 8089 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b11c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b120:	f200 808e 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b128:	d03e      	beq.n	800b1a8 <HAL_TIM_ConfigClockSource+0x124>
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b12e:	f200 8087 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b136:	f000 8086 	beq.w	800b246 <HAL_TIM_ConfigClockSource+0x1c2>
 800b13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b13e:	d87f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b140:	2b70      	cmp	r3, #112	@ 0x70
 800b142:	d01a      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0xf6>
 800b144:	2b70      	cmp	r3, #112	@ 0x70
 800b146:	d87b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b148:	2b60      	cmp	r3, #96	@ 0x60
 800b14a:	d050      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x16a>
 800b14c:	2b60      	cmp	r3, #96	@ 0x60
 800b14e:	d877      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b150:	2b50      	cmp	r3, #80	@ 0x50
 800b152:	d03c      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x14a>
 800b154:	2b50      	cmp	r3, #80	@ 0x50
 800b156:	d873      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b158:	2b40      	cmp	r3, #64	@ 0x40
 800b15a:	d058      	beq.n	800b20e <HAL_TIM_ConfigClockSource+0x18a>
 800b15c:	2b40      	cmp	r3, #64	@ 0x40
 800b15e:	d86f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b160:	2b30      	cmp	r3, #48	@ 0x30
 800b162:	d064      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b164:	2b30      	cmp	r3, #48	@ 0x30
 800b166:	d86b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d060      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d867      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d05c      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b174:	2b10      	cmp	r3, #16
 800b176:	d05a      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b178:	e062      	b.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b18a:	f000 f9bf 	bl	800b50c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b19c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      break;
 800b1a6:	e04f      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1b8:	f000 f9a8 	bl	800b50c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1ca:	609a      	str	r2, [r3, #8]
      break;
 800b1cc:	e03c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f000 f918 	bl	800b410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2150      	movs	r1, #80	@ 0x50
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 f972 	bl	800b4d0 <TIM_ITRx_SetConfig>
      break;
 800b1ec:	e02c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f000 f937 	bl	800b46e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2160      	movs	r1, #96	@ 0x60
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f962 	bl	800b4d0 <TIM_ITRx_SetConfig>
      break;
 800b20c:	e01c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b21a:	461a      	mov	r2, r3
 800b21c:	f000 f8f8 	bl	800b410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	@ 0x40
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f952 	bl	800b4d0 <TIM_ITRx_SetConfig>
      break;
 800b22c:	e00c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f000 f949 	bl	800b4d0 <TIM_ITRx_SetConfig>
      break;
 800b23e:	e003      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
      break;
 800b244:	e000      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	ffceff88 	.word	0xffceff88
 800b268:	00100040 	.word	0x00100040
 800b26c:	00100030 	.word	0x00100030
 800b270:	00100020 	.word	0x00100020

0800b274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a46      	ldr	r2, [pc, #280]	@ (800b3f0 <TIM_Base_SetConfig+0x12c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e2:	d00f      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a43      	ldr	r2, [pc, #268]	@ (800b3f4 <TIM_Base_SetConfig+0x130>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00b      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a42      	ldr	r2, [pc, #264]	@ (800b3f8 <TIM_Base_SetConfig+0x134>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d007      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a41      	ldr	r2, [pc, #260]	@ (800b3fc <TIM_Base_SetConfig+0x138>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d003      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a40      	ldr	r2, [pc, #256]	@ (800b400 <TIM_Base_SetConfig+0x13c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d108      	bne.n	800b316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b30a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a35      	ldr	r2, [pc, #212]	@ (800b3f0 <TIM_Base_SetConfig+0x12c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d01f      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b324:	d01b      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a32      	ldr	r2, [pc, #200]	@ (800b3f4 <TIM_Base_SetConfig+0x130>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d017      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a31      	ldr	r2, [pc, #196]	@ (800b3f8 <TIM_Base_SetConfig+0x134>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d013      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a30      	ldr	r2, [pc, #192]	@ (800b3fc <TIM_Base_SetConfig+0x138>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d00f      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a2f      	ldr	r2, [pc, #188]	@ (800b400 <TIM_Base_SetConfig+0x13c>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00b      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a2e      	ldr	r2, [pc, #184]	@ (800b404 <TIM_Base_SetConfig+0x140>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d007      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a2d      	ldr	r2, [pc, #180]	@ (800b408 <TIM_Base_SetConfig+0x144>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d003      	beq.n	800b35e <TIM_Base_SetConfig+0x9a>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a2c      	ldr	r2, [pc, #176]	@ (800b40c <TIM_Base_SetConfig+0x148>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d108      	bne.n	800b370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a16      	ldr	r2, [pc, #88]	@ (800b3f0 <TIM_Base_SetConfig+0x12c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00f      	beq.n	800b3bc <TIM_Base_SetConfig+0xf8>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a18      	ldr	r2, [pc, #96]	@ (800b400 <TIM_Base_SetConfig+0x13c>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_Base_SetConfig+0xf8>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a17      	ldr	r2, [pc, #92]	@ (800b404 <TIM_Base_SetConfig+0x140>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_Base_SetConfig+0xf8>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a16      	ldr	r2, [pc, #88]	@ (800b408 <TIM_Base_SetConfig+0x144>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_Base_SetConfig+0xf8>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a15      	ldr	r2, [pc, #84]	@ (800b40c <TIM_Base_SetConfig+0x148>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d103      	bne.n	800b3c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	691a      	ldr	r2, [r3, #16]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d105      	bne.n	800b3e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f023 0201 	bic.w	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	611a      	str	r2, [r3, #16]
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40000400 	.word	0x40000400
 800b3f8:	40000800 	.word	0x40000800
 800b3fc:	40000c00 	.word	0x40000c00
 800b400:	40010400 	.word	0x40010400
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0201 	bic.w	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b43a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	011b      	lsls	r3, r3, #4
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f023 030a 	bic.w	r3, r3, #10
 800b44c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	621a      	str	r2, [r3, #32]
}
 800b462:	bf00      	nop
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b46e:	b480      	push	{r7}
 800b470:	b087      	sub	sp, #28
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	f023 0210 	bic.w	r2, r3, #16
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	031b      	lsls	r3, r3, #12
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b4aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	011b      	lsls	r3, r3, #4
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4b09      	ldr	r3, [pc, #36]	@ (800b508 <TIM_ITRx_SetConfig+0x38>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	f043 0307 	orr.w	r3, r3, #7
 800b4f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	609a      	str	r2, [r3, #8]
}
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	ffcfff8f 	.word	0xffcfff8f

0800b50c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	021a      	lsls	r2, r3, #8
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	431a      	orrs	r2, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4313      	orrs	r3, r2
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	4313      	orrs	r3, r2
 800b538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	609a      	str	r2, [r3, #8]
}
 800b540:	bf00      	nop
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d101      	bne.n	800b564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b560:	2302      	movs	r3, #2
 800b562:	e06d      	b.n	800b640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a30      	ldr	r2, [pc, #192]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d004      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a2f      	ldr	r2, [pc, #188]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d108      	bne.n	800b5aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b59e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a20      	ldr	r2, [pc, #128]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d022      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5d6:	d01d      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d018      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d013      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00e      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a15      	ldr	r2, [pc, #84]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d009      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a16      	ldr	r2, [pc, #88]	@ (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d004      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a15      	ldr	r2, [pc, #84]	@ (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d10c      	bne.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4313      	orrs	r3, r2
 800b624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	40010000 	.word	0x40010000
 800b650:	40010400 	.word	0x40010400
 800b654:	40000400 	.word	0x40000400
 800b658:	40000800 	.word	0x40000800
 800b65c:	40000c00 	.word	0x40000c00
 800b660:	40001800 	.word	0x40001800
 800b664:	40014000 	.word	0x40014000

0800b668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e042      	b.n	800b73c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7f6 ffab 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2224      	movs	r2, #36	@ 0x24
 800b6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 0201 	bic.w	r2, r2, #1
 800b6e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 faea 	bl	800ccc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fd7f 	bl	800c1f8 <UART_SetConfig>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d101      	bne.n	800b704 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e01b      	b.n	800b73c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689a      	ldr	r2, [r3, #8]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0201 	orr.w	r2, r2, #1
 800b732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 fb69 	bl	800ce0c <UART_CheckIdleState>
 800b73a:	4603      	mov	r3, r0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08a      	sub	sp, #40	@ 0x28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	4613      	mov	r3, r2
 800b750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b758:	2b20      	cmp	r3, #32
 800b75a:	d167      	bne.n	800b82c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <HAL_UART_Transmit_DMA+0x24>
 800b762:	88fb      	ldrh	r3, [r7, #6]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e060      	b.n	800b82e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	88fa      	ldrh	r2, [r7, #6]
 800b77e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2221      	movs	r2, #33	@ 0x21
 800b78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d028      	beq.n	800b7ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b79e:	4a26      	ldr	r2, [pc, #152]	@ (800b838 <HAL_UART_Transmit_DMA+0xf4>)
 800b7a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7a6:	4a25      	ldr	r2, [pc, #148]	@ (800b83c <HAL_UART_Transmit_DMA+0xf8>)
 800b7a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ae:	4a24      	ldr	r2, [pc, #144]	@ (800b840 <HAL_UART_Transmit_DMA+0xfc>)
 800b7b0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3328      	adds	r3, #40	@ 0x28
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	f7f8 ffc5 	bl	800475c <HAL_DMA_Start_IT>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d009      	beq.n	800b7ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2210      	movs	r2, #16
 800b7dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e020      	b.n	800b82e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2240      	movs	r2, #64	@ 0x40
 800b7f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b80a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3308      	adds	r3, #8
 800b812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b814:	623a      	str	r2, [r7, #32]
 800b816:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	69f9      	ldr	r1, [r7, #28]
 800b81a:	6a3a      	ldr	r2, [r7, #32]
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	61bb      	str	r3, [r7, #24]
   return(result);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e5      	bne.n	800b7f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	e000      	b.n	800b82e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b82c:	2302      	movs	r3, #2
  }
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3728      	adds	r7, #40	@ 0x28
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	0800d2d9 	.word	0x0800d2d9
 800b83c:	0800d36f 	.word	0x0800d36f
 800b840:	0800d4f1 	.word	0x0800d4f1

0800b844 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08a      	sub	sp, #40	@ 0x28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4613      	mov	r3, r2
 800b850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b858:	2b20      	cmp	r3, #32
 800b85a:	d137      	bne.n	800b8cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <HAL_UART_Receive_DMA+0x24>
 800b862:	88fb      	ldrh	r3, [r7, #6]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e030      	b.n	800b8ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a18      	ldr	r2, [pc, #96]	@ (800b8d8 <HAL_UART_Receive_DMA+0x94>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d01f      	beq.n	800b8bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d018      	beq.n	800b8bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b89e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a8:	623b      	str	r3, [r7, #32]
 800b8aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	6a3a      	ldr	r2, [r7, #32]
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e6      	bne.n	800b88a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b8bc:	88fb      	ldrh	r3, [r7, #6]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f001 fbba 	bl	800d03c <UART_Start_Receive_DMA>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	e000      	b.n	800b8ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b8cc:	2302      	movs	r3, #2
  }
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3728      	adds	r7, #40	@ 0x28
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	58000c00 	.word	0x58000c00

0800b8dc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b090      	sub	sp, #64	@ 0x40
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8fe:	2b80      	cmp	r3, #128	@ 0x80
 800b900:	d139      	bne.n	800b976 <HAL_UART_DMAStop+0x9a>
 800b902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b904:	2b21      	cmp	r3, #33	@ 0x21
 800b906:	d136      	bne.n	800b976 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3308      	adds	r3, #8
 800b90e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	61fb      	str	r3, [r7, #28]
   return(result);
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3308      	adds	r3, #8
 800b926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b92a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b930:	e841 2300 	strex	r3, r2, [r1]
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e5      	bne.n	800b908 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b940:	2b00      	cmp	r3, #0
 800b942:	d015      	beq.n	800b970 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b948:	4618      	mov	r0, r3
 800b94a:	f7f9 f971 	bl	8004c30 <HAL_DMA_Abort>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00d      	beq.n	800b970 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fa fdf7 	bl	800654c <HAL_DMA_GetError>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b20      	cmp	r3, #32
 800b962:	d105      	bne.n	800b970 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2210      	movs	r2, #16
 800b968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e047      	b.n	800ba00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f001 fc09 	bl	800d188 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b980:	2b40      	cmp	r3, #64	@ 0x40
 800b982:	d13c      	bne.n	800b9fe <HAL_UART_DMAStop+0x122>
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	2b22      	cmp	r3, #34	@ 0x22
 800b988:	d139      	bne.n	800b9fe <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	e853 3f00 	ldrex	r3, [r3]
 800b998:	60bb      	str	r3, [r7, #8]
   return(result);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9aa:	61ba      	str	r2, [r7, #24]
 800b9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6979      	ldr	r1, [r7, #20]
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e5      	bne.n	800b98a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d017      	beq.n	800b9f8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f9 f92e 	bl	8004c30 <HAL_DMA_Abort>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00e      	beq.n	800b9f8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fa fdb3 	bl	800654c <HAL_DMA_GetError>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b20      	cmp	r3, #32
 800b9ea:	d105      	bne.n	800b9f8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2210      	movs	r2, #16
 800b9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e003      	b.n	800ba00 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 fc07 	bl	800d20c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3740      	adds	r7, #64	@ 0x40
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b0ba      	sub	sp, #232	@ 0xe8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ba32:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba36:	4013      	ands	r3, r2
 800ba38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d11b      	bne.n	800ba7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba48:	f003 0320 	and.w	r3, r3, #32
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d015      	beq.n	800ba7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba54:	f003 0320 	and.w	r3, r3, #32
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d105      	bne.n	800ba68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 8377 	beq.w	800c160 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
      }
      return;
 800ba7a:	e371      	b.n	800c160 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 8123 	beq.w	800bccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba8a:	4b8d      	ldr	r3, [pc, #564]	@ (800bcc0 <HAL_UART_IRQHandler+0x2b8>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba96:	4b8b      	ldr	r3, [pc, #556]	@ (800bcc4 <HAL_UART_IRQHandler+0x2bc>)
 800ba98:	4013      	ands	r3, r2
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 8116 	beq.w	800bccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800baa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d011      	beq.n	800bad0 <HAL_UART_IRQHandler+0xc8>
 800baac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00b      	beq.n	800bad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2201      	movs	r2, #1
 800babe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bac6:	f043 0201 	orr.w	r2, r3, #1
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d011      	beq.n	800bb00 <HAL_UART_IRQHandler+0xf8>
 800badc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2202      	movs	r2, #2
 800baee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baf6:	f043 0204 	orr.w	r2, r3, #4
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d011      	beq.n	800bb30 <HAL_UART_IRQHandler+0x128>
 800bb0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00b      	beq.n	800bb30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2204      	movs	r2, #4
 800bb1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb26:	f043 0202 	orr.w	r2, r3, #2
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb34:	f003 0308 	and.w	r3, r3, #8
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d017      	beq.n	800bb6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d105      	bne.n	800bb54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb4c:	4b5c      	ldr	r3, [pc, #368]	@ (800bcc0 <HAL_UART_IRQHandler+0x2b8>)
 800bb4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2208      	movs	r2, #8
 800bb5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb62:	f043 0208 	orr.w	r2, r3, #8
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d012      	beq.n	800bb9e <HAL_UART_IRQHandler+0x196>
 800bb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00c      	beq.n	800bb9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb94:	f043 0220 	orr.w	r2, r3, #32
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 82dd 	beq.w	800c164 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d013      	beq.n	800bbde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbba:	f003 0320 	and.w	r3, r3, #32
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d105      	bne.n	800bbce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d007      	beq.n	800bbde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf2:	2b40      	cmp	r3, #64	@ 0x40
 800bbf4:	d005      	beq.n	800bc02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d054      	beq.n	800bcac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 fb02 	bl	800d20c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc12:	2b40      	cmp	r3, #64	@ 0x40
 800bc14:	d146      	bne.n	800bca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc24:	e853 3f00 	ldrex	r3, [r3]
 800bc28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1d9      	bne.n	800bc16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d017      	beq.n	800bc9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc72:	4a15      	ldr	r2, [pc, #84]	@ (800bcc8 <HAL_UART_IRQHandler+0x2c0>)
 800bc74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f9 faf5 	bl	800526c <HAL_DMA_Abort_IT>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d019      	beq.n	800bcbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bc96:	4610      	mov	r0, r2
 800bc98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc9a:	e00f      	b.n	800bcbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fa95 	bl	800c1cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca2:	e00b      	b.n	800bcbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fa91 	bl	800c1cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcaa:	e007      	b.n	800bcbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fa8d 	bl	800c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bcba:	e253      	b.n	800c164 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcbc:	bf00      	nop
    return;
 800bcbe:	e251      	b.n	800c164 <HAL_UART_IRQHandler+0x75c>
 800bcc0:	10000001 	.word	0x10000001
 800bcc4:	04000120 	.word	0x04000120
 800bcc8:	0800d571 	.word	0x0800d571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	f040 81e7 	bne.w	800c0a4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcda:	f003 0310 	and.w	r3, r3, #16
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 81e0 	beq.w	800c0a4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bce8:	f003 0310 	and.w	r3, r3, #16
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 81d9 	beq.w	800c0a4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd04:	2b40      	cmp	r3, #64	@ 0x40
 800bd06:	f040 8151 	bne.w	800bfac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a96      	ldr	r2, [pc, #600]	@ (800bf6c <HAL_UART_IRQHandler+0x564>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d068      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a93      	ldr	r2, [pc, #588]	@ (800bf70 <HAL_UART_IRQHandler+0x568>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d061      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a91      	ldr	r2, [pc, #580]	@ (800bf74 <HAL_UART_IRQHandler+0x56c>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d05a      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a8e      	ldr	r2, [pc, #568]	@ (800bf78 <HAL_UART_IRQHandler+0x570>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d053      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a8c      	ldr	r2, [pc, #560]	@ (800bf7c <HAL_UART_IRQHandler+0x574>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d04c      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a89      	ldr	r2, [pc, #548]	@ (800bf80 <HAL_UART_IRQHandler+0x578>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d045      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a87      	ldr	r2, [pc, #540]	@ (800bf84 <HAL_UART_IRQHandler+0x57c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d03e      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a84      	ldr	r2, [pc, #528]	@ (800bf88 <HAL_UART_IRQHandler+0x580>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d037      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a82      	ldr	r2, [pc, #520]	@ (800bf8c <HAL_UART_IRQHandler+0x584>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d030      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a7f      	ldr	r2, [pc, #508]	@ (800bf90 <HAL_UART_IRQHandler+0x588>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d029      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a7d      	ldr	r2, [pc, #500]	@ (800bf94 <HAL_UART_IRQHandler+0x58c>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d022      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a7a      	ldr	r2, [pc, #488]	@ (800bf98 <HAL_UART_IRQHandler+0x590>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d01b      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a78      	ldr	r2, [pc, #480]	@ (800bf9c <HAL_UART_IRQHandler+0x594>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d014      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a75      	ldr	r2, [pc, #468]	@ (800bfa0 <HAL_UART_IRQHandler+0x598>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00d      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a73      	ldr	r2, [pc, #460]	@ (800bfa4 <HAL_UART_IRQHandler+0x59c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d006      	beq.n	800bdea <HAL_UART_IRQHandler+0x3e2>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a70      	ldr	r2, [pc, #448]	@ (800bfa8 <HAL_UART_IRQHandler+0x5a0>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d106      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x3f0>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	e005      	b.n	800be04 <HAL_UART_IRQHandler+0x3fc>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	b29b      	uxth	r3, r3
 800be04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 81ab 	beq.w	800c168 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be1c:	429a      	cmp	r2, r3
 800be1e:	f080 81a3 	bcs.w	800c168 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be38:	f000 8087 	beq.w	800bf4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800be72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800be7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1da      	bne.n	800be3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3308      	adds	r3, #8
 800be8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800be96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be98:	f023 0301 	bic.w	r3, r3, #1
 800be9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3308      	adds	r3, #8
 800bea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800beaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800beae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800beb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1e1      	bne.n	800be86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3308      	adds	r3, #8
 800bec8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3308      	adds	r3, #8
 800bee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800beec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e3      	bne.n	800bec2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2220      	movs	r2, #32
 800befe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf18:	f023 0310 	bic.w	r3, r3, #16
 800bf1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e4      	bne.n	800bf08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f8 fe73 	bl	8004c30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f93b 	bl	800c1e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf6a:	e0fd      	b.n	800c168 <HAL_UART_IRQHandler+0x760>
 800bf6c:	40020010 	.word	0x40020010
 800bf70:	40020028 	.word	0x40020028
 800bf74:	40020040 	.word	0x40020040
 800bf78:	40020058 	.word	0x40020058
 800bf7c:	40020070 	.word	0x40020070
 800bf80:	40020088 	.word	0x40020088
 800bf84:	400200a0 	.word	0x400200a0
 800bf88:	400200b8 	.word	0x400200b8
 800bf8c:	40020410 	.word	0x40020410
 800bf90:	40020428 	.word	0x40020428
 800bf94:	40020440 	.word	0x40020440
 800bf98:	40020458 	.word	0x40020458
 800bf9c:	40020470 	.word	0x40020470
 800bfa0:	40020488 	.word	0x40020488
 800bfa4:	400204a0 	.word	0x400204a0
 800bfa8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 80cf 	beq.w	800c16c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bfce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 80ca 	beq.w	800c16c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	461a      	mov	r2, r3
 800bff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bffa:	647b      	str	r3, [r7, #68]	@ 0x44
 800bffc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c002:	e841 2300 	strex	r3, r2, [r1]
 800c006:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1e4      	bne.n	800bfd8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	623b      	str	r3, [r7, #32]
   return(result);
 800c01e:	6a3a      	ldr	r2, [r7, #32]
 800c020:	4b55      	ldr	r3, [pc, #340]	@ (800c178 <HAL_UART_IRQHandler+0x770>)
 800c022:	4013      	ands	r3, r2
 800c024:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3308      	adds	r3, #8
 800c02e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c032:	633a      	str	r2, [r7, #48]	@ 0x30
 800c034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e3      	bne.n	800c00e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2220      	movs	r2, #32
 800c04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	e853 3f00 	ldrex	r3, [r3]
 800c066:	60fb      	str	r3, [r7, #12]
   return(result);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 0310 	bic.w	r3, r3, #16
 800c06e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c07c:	61fb      	str	r3, [r7, #28]
 800c07e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	69b9      	ldr	r1, [r7, #24]
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	617b      	str	r3, [r7, #20]
   return(result);
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e4      	bne.n	800c05a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c09a:	4619      	mov	r1, r3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f89f 	bl	800c1e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0a2:	e063      	b.n	800c16c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00e      	beq.n	800c0ce <HAL_UART_IRQHandler+0x6c6>
 800c0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d008      	beq.n	800c0ce <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c0c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 fa93 	bl	800d5f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0cc:	e051      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d014      	beq.n	800c104 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d105      	bne.n	800c0f2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d008      	beq.n	800c104 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d03a      	beq.n	800c170 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
    }
    return;
 800c102:	e035      	b.n	800c170 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <HAL_UART_IRQHandler+0x71c>
 800c110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 fa3d 	bl	800d59c <UART_EndTransmit_IT>
    return;
 800c122:	e026      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <HAL_UART_IRQHandler+0x73c>
 800c130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c134:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 fa6c 	bl	800d61a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c142:	e016      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d010      	beq.n	800c172 <HAL_UART_IRQHandler+0x76a>
 800c150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c154:	2b00      	cmp	r3, #0
 800c156:	da0c      	bge.n	800c172 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 fa54 	bl	800d606 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c15e:	e008      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
      return;
 800c160:	bf00      	nop
 800c162:	e006      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
    return;
 800c164:	bf00      	nop
 800c166:	e004      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
      return;
 800c168:	bf00      	nop
 800c16a:	e002      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
      return;
 800c16c:	bf00      	nop
 800c16e:	e000      	b.n	800c172 <HAL_UART_IRQHandler+0x76a>
    return;
 800c170:	bf00      	nop
  }
}
 800c172:	37e8      	adds	r7, #232	@ 0xe8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	effffffe 	.word	0xeffffffe

0800c17c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1fc:	b092      	sub	sp, #72	@ 0x48
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	431a      	orrs	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	431a      	orrs	r2, r3
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4bbe      	ldr	r3, [pc, #760]	@ (800c520 <UART_SetConfig+0x328>)
 800c228:	4013      	ands	r3, r2
 800c22a:	697a      	ldr	r2, [r7, #20]
 800c22c:	6812      	ldr	r2, [r2, #0]
 800c22e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c230:	430b      	orrs	r3, r1
 800c232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4ab3      	ldr	r2, [pc, #716]	@ (800c524 <UART_SetConfig+0x32c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d004      	beq.n	800c264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c260:	4313      	orrs	r3, r2
 800c262:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	4baf      	ldr	r3, [pc, #700]	@ (800c528 <UART_SetConfig+0x330>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c274:	430b      	orrs	r3, r1
 800c276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27e:	f023 010f 	bic.w	r1, r3, #15
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4aa6      	ldr	r2, [pc, #664]	@ (800c52c <UART_SetConfig+0x334>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d177      	bne.n	800c388 <UART_SetConfig+0x190>
 800c298:	4ba5      	ldr	r3, [pc, #660]	@ (800c530 <UART_SetConfig+0x338>)
 800c29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2a0:	2b28      	cmp	r3, #40	@ 0x28
 800c2a2:	d86d      	bhi.n	800c380 <UART_SetConfig+0x188>
 800c2a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ac <UART_SetConfig+0xb4>)
 800c2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2aa:	bf00      	nop
 800c2ac:	0800c351 	.word	0x0800c351
 800c2b0:	0800c381 	.word	0x0800c381
 800c2b4:	0800c381 	.word	0x0800c381
 800c2b8:	0800c381 	.word	0x0800c381
 800c2bc:	0800c381 	.word	0x0800c381
 800c2c0:	0800c381 	.word	0x0800c381
 800c2c4:	0800c381 	.word	0x0800c381
 800c2c8:	0800c381 	.word	0x0800c381
 800c2cc:	0800c359 	.word	0x0800c359
 800c2d0:	0800c381 	.word	0x0800c381
 800c2d4:	0800c381 	.word	0x0800c381
 800c2d8:	0800c381 	.word	0x0800c381
 800c2dc:	0800c381 	.word	0x0800c381
 800c2e0:	0800c381 	.word	0x0800c381
 800c2e4:	0800c381 	.word	0x0800c381
 800c2e8:	0800c381 	.word	0x0800c381
 800c2ec:	0800c361 	.word	0x0800c361
 800c2f0:	0800c381 	.word	0x0800c381
 800c2f4:	0800c381 	.word	0x0800c381
 800c2f8:	0800c381 	.word	0x0800c381
 800c2fc:	0800c381 	.word	0x0800c381
 800c300:	0800c381 	.word	0x0800c381
 800c304:	0800c381 	.word	0x0800c381
 800c308:	0800c381 	.word	0x0800c381
 800c30c:	0800c369 	.word	0x0800c369
 800c310:	0800c381 	.word	0x0800c381
 800c314:	0800c381 	.word	0x0800c381
 800c318:	0800c381 	.word	0x0800c381
 800c31c:	0800c381 	.word	0x0800c381
 800c320:	0800c381 	.word	0x0800c381
 800c324:	0800c381 	.word	0x0800c381
 800c328:	0800c381 	.word	0x0800c381
 800c32c:	0800c371 	.word	0x0800c371
 800c330:	0800c381 	.word	0x0800c381
 800c334:	0800c381 	.word	0x0800c381
 800c338:	0800c381 	.word	0x0800c381
 800c33c:	0800c381 	.word	0x0800c381
 800c340:	0800c381 	.word	0x0800c381
 800c344:	0800c381 	.word	0x0800c381
 800c348:	0800c381 	.word	0x0800c381
 800c34c:	0800c379 	.word	0x0800c379
 800c350:	2301      	movs	r3, #1
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e222      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c358:	2304      	movs	r3, #4
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35e:	e21e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c360:	2308      	movs	r3, #8
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c366:	e21a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c368:	2310      	movs	r3, #16
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36e:	e216      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c370:	2320      	movs	r3, #32
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c376:	e212      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c378:	2340      	movs	r3, #64	@ 0x40
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37e:	e20e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c380:	2380      	movs	r3, #128	@ 0x80
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c386:	e20a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a69      	ldr	r2, [pc, #420]	@ (800c534 <UART_SetConfig+0x33c>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d130      	bne.n	800c3f4 <UART_SetConfig+0x1fc>
 800c392:	4b67      	ldr	r3, [pc, #412]	@ (800c530 <UART_SetConfig+0x338>)
 800c394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b05      	cmp	r3, #5
 800c39c:	d826      	bhi.n	800c3ec <UART_SetConfig+0x1f4>
 800c39e:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a4 <UART_SetConfig+0x1ac>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3bd 	.word	0x0800c3bd
 800c3a8:	0800c3c5 	.word	0x0800c3c5
 800c3ac:	0800c3cd 	.word	0x0800c3cd
 800c3b0:	0800c3d5 	.word	0x0800c3d5
 800c3b4:	0800c3dd 	.word	0x0800c3dd
 800c3b8:	0800c3e5 	.word	0x0800c3e5
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e1ec      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3c4:	2304      	movs	r3, #4
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e1e8      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3cc:	2308      	movs	r3, #8
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e1e4      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3d4:	2310      	movs	r3, #16
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e1e0      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3dc:	2320      	movs	r3, #32
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e1dc      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3e4:	2340      	movs	r3, #64	@ 0x40
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ea:	e1d8      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3ec:	2380      	movs	r3, #128	@ 0x80
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f2:	e1d4      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a4f      	ldr	r2, [pc, #316]	@ (800c538 <UART_SetConfig+0x340>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d130      	bne.n	800c460 <UART_SetConfig+0x268>
 800c3fe:	4b4c      	ldr	r3, [pc, #304]	@ (800c530 <UART_SetConfig+0x338>)
 800c400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c402:	f003 0307 	and.w	r3, r3, #7
 800c406:	2b05      	cmp	r3, #5
 800c408:	d826      	bhi.n	800c458 <UART_SetConfig+0x260>
 800c40a:	a201      	add	r2, pc, #4	@ (adr r2, 800c410 <UART_SetConfig+0x218>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c429 	.word	0x0800c429
 800c414:	0800c431 	.word	0x0800c431
 800c418:	0800c439 	.word	0x0800c439
 800c41c:	0800c441 	.word	0x0800c441
 800c420:	0800c449 	.word	0x0800c449
 800c424:	0800c451 	.word	0x0800c451
 800c428:	2300      	movs	r3, #0
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e1b6      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c430:	2304      	movs	r3, #4
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c436:	e1b2      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c438:	2308      	movs	r3, #8
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43e:	e1ae      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c440:	2310      	movs	r3, #16
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c446:	e1aa      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c448:	2320      	movs	r3, #32
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44e:	e1a6      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c450:	2340      	movs	r3, #64	@ 0x40
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c456:	e1a2      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c458:	2380      	movs	r3, #128	@ 0x80
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45e:	e19e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a35      	ldr	r2, [pc, #212]	@ (800c53c <UART_SetConfig+0x344>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d130      	bne.n	800c4cc <UART_SetConfig+0x2d4>
 800c46a:	4b31      	ldr	r3, [pc, #196]	@ (800c530 <UART_SetConfig+0x338>)
 800c46c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c46e:	f003 0307 	and.w	r3, r3, #7
 800c472:	2b05      	cmp	r3, #5
 800c474:	d826      	bhi.n	800c4c4 <UART_SetConfig+0x2cc>
 800c476:	a201      	add	r2, pc, #4	@ (adr r2, 800c47c <UART_SetConfig+0x284>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c495 	.word	0x0800c495
 800c480:	0800c49d 	.word	0x0800c49d
 800c484:	0800c4a5 	.word	0x0800c4a5
 800c488:	0800c4ad 	.word	0x0800c4ad
 800c48c:	0800c4b5 	.word	0x0800c4b5
 800c490:	0800c4bd 	.word	0x0800c4bd
 800c494:	2300      	movs	r3, #0
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e180      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c49c:	2304      	movs	r3, #4
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e17c      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e178      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e174      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4b4:	2320      	movs	r3, #32
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e170      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4bc:	2340      	movs	r3, #64	@ 0x40
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c2:	e16c      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4c4:	2380      	movs	r3, #128	@ 0x80
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ca:	e168      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c540 <UART_SetConfig+0x348>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d142      	bne.n	800c55c <UART_SetConfig+0x364>
 800c4d6:	4b16      	ldr	r3, [pc, #88]	@ (800c530 <UART_SetConfig+0x338>)
 800c4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4da:	f003 0307 	and.w	r3, r3, #7
 800c4de:	2b05      	cmp	r3, #5
 800c4e0:	d838      	bhi.n	800c554 <UART_SetConfig+0x35c>
 800c4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <UART_SetConfig+0x2f0>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c501 	.word	0x0800c501
 800c4ec:	0800c509 	.word	0x0800c509
 800c4f0:	0800c511 	.word	0x0800c511
 800c4f4:	0800c519 	.word	0x0800c519
 800c4f8:	0800c545 	.word	0x0800c545
 800c4fc:	0800c54d 	.word	0x0800c54d
 800c500:	2300      	movs	r3, #0
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c506:	e14a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c508:	2304      	movs	r3, #4
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50e:	e146      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c510:	2308      	movs	r3, #8
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c516:	e142      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c518:	2310      	movs	r3, #16
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51e:	e13e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c520:	cfff69f3 	.word	0xcfff69f3
 800c524:	58000c00 	.word	0x58000c00
 800c528:	11fff4ff 	.word	0x11fff4ff
 800c52c:	40011000 	.word	0x40011000
 800c530:	58024400 	.word	0x58024400
 800c534:	40004400 	.word	0x40004400
 800c538:	40004800 	.word	0x40004800
 800c53c:	40004c00 	.word	0x40004c00
 800c540:	40005000 	.word	0x40005000
 800c544:	2320      	movs	r3, #32
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e128      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c54c:	2340      	movs	r3, #64	@ 0x40
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e124      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c554:	2380      	movs	r3, #128	@ 0x80
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55a:	e120      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4acb      	ldr	r2, [pc, #812]	@ (800c890 <UART_SetConfig+0x698>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d176      	bne.n	800c654 <UART_SetConfig+0x45c>
 800c566:	4bcb      	ldr	r3, [pc, #812]	@ (800c894 <UART_SetConfig+0x69c>)
 800c568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c56a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c56e:	2b28      	cmp	r3, #40	@ 0x28
 800c570:	d86c      	bhi.n	800c64c <UART_SetConfig+0x454>
 800c572:	a201      	add	r2, pc, #4	@ (adr r2, 800c578 <UART_SetConfig+0x380>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c61d 	.word	0x0800c61d
 800c57c:	0800c64d 	.word	0x0800c64d
 800c580:	0800c64d 	.word	0x0800c64d
 800c584:	0800c64d 	.word	0x0800c64d
 800c588:	0800c64d 	.word	0x0800c64d
 800c58c:	0800c64d 	.word	0x0800c64d
 800c590:	0800c64d 	.word	0x0800c64d
 800c594:	0800c64d 	.word	0x0800c64d
 800c598:	0800c625 	.word	0x0800c625
 800c59c:	0800c64d 	.word	0x0800c64d
 800c5a0:	0800c64d 	.word	0x0800c64d
 800c5a4:	0800c64d 	.word	0x0800c64d
 800c5a8:	0800c64d 	.word	0x0800c64d
 800c5ac:	0800c64d 	.word	0x0800c64d
 800c5b0:	0800c64d 	.word	0x0800c64d
 800c5b4:	0800c64d 	.word	0x0800c64d
 800c5b8:	0800c62d 	.word	0x0800c62d
 800c5bc:	0800c64d 	.word	0x0800c64d
 800c5c0:	0800c64d 	.word	0x0800c64d
 800c5c4:	0800c64d 	.word	0x0800c64d
 800c5c8:	0800c64d 	.word	0x0800c64d
 800c5cc:	0800c64d 	.word	0x0800c64d
 800c5d0:	0800c64d 	.word	0x0800c64d
 800c5d4:	0800c64d 	.word	0x0800c64d
 800c5d8:	0800c635 	.word	0x0800c635
 800c5dc:	0800c64d 	.word	0x0800c64d
 800c5e0:	0800c64d 	.word	0x0800c64d
 800c5e4:	0800c64d 	.word	0x0800c64d
 800c5e8:	0800c64d 	.word	0x0800c64d
 800c5ec:	0800c64d 	.word	0x0800c64d
 800c5f0:	0800c64d 	.word	0x0800c64d
 800c5f4:	0800c64d 	.word	0x0800c64d
 800c5f8:	0800c63d 	.word	0x0800c63d
 800c5fc:	0800c64d 	.word	0x0800c64d
 800c600:	0800c64d 	.word	0x0800c64d
 800c604:	0800c64d 	.word	0x0800c64d
 800c608:	0800c64d 	.word	0x0800c64d
 800c60c:	0800c64d 	.word	0x0800c64d
 800c610:	0800c64d 	.word	0x0800c64d
 800c614:	0800c64d 	.word	0x0800c64d
 800c618:	0800c645 	.word	0x0800c645
 800c61c:	2301      	movs	r3, #1
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c622:	e0bc      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c624:	2304      	movs	r3, #4
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c62a:	e0b8      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c62c:	2308      	movs	r3, #8
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c632:	e0b4      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c634:	2310      	movs	r3, #16
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c63a:	e0b0      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c63c:	2320      	movs	r3, #32
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c642:	e0ac      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c644:	2340      	movs	r3, #64	@ 0x40
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64a:	e0a8      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c64c:	2380      	movs	r3, #128	@ 0x80
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c652:	e0a4      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a8f      	ldr	r2, [pc, #572]	@ (800c898 <UART_SetConfig+0x6a0>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d130      	bne.n	800c6c0 <UART_SetConfig+0x4c8>
 800c65e:	4b8d      	ldr	r3, [pc, #564]	@ (800c894 <UART_SetConfig+0x69c>)
 800c660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c662:	f003 0307 	and.w	r3, r3, #7
 800c666:	2b05      	cmp	r3, #5
 800c668:	d826      	bhi.n	800c6b8 <UART_SetConfig+0x4c0>
 800c66a:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <UART_SetConfig+0x478>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c689 	.word	0x0800c689
 800c674:	0800c691 	.word	0x0800c691
 800c678:	0800c699 	.word	0x0800c699
 800c67c:	0800c6a1 	.word	0x0800c6a1
 800c680:	0800c6a9 	.word	0x0800c6a9
 800c684:	0800c6b1 	.word	0x0800c6b1
 800c688:	2300      	movs	r3, #0
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68e:	e086      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c690:	2304      	movs	r3, #4
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c696:	e082      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c698:	2308      	movs	r3, #8
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69e:	e07e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6a0:	2310      	movs	r3, #16
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a6:	e07a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6a8:	2320      	movs	r3, #32
 800c6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ae:	e076      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6b0:	2340      	movs	r3, #64	@ 0x40
 800c6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b6:	e072      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6b8:	2380      	movs	r3, #128	@ 0x80
 800c6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6be:	e06e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a75      	ldr	r2, [pc, #468]	@ (800c89c <UART_SetConfig+0x6a4>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d130      	bne.n	800c72c <UART_SetConfig+0x534>
 800c6ca:	4b72      	ldr	r3, [pc, #456]	@ (800c894 <UART_SetConfig+0x69c>)
 800c6cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b05      	cmp	r3, #5
 800c6d4:	d826      	bhi.n	800c724 <UART_SetConfig+0x52c>
 800c6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6dc <UART_SetConfig+0x4e4>)
 800c6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6dc:	0800c6f5 	.word	0x0800c6f5
 800c6e0:	0800c6fd 	.word	0x0800c6fd
 800c6e4:	0800c705 	.word	0x0800c705
 800c6e8:	0800c70d 	.word	0x0800c70d
 800c6ec:	0800c715 	.word	0x0800c715
 800c6f0:	0800c71d 	.word	0x0800c71d
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fa:	e050      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c6fc:	2304      	movs	r3, #4
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c702:	e04c      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c704:	2308      	movs	r3, #8
 800c706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70a:	e048      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c70c:	2310      	movs	r3, #16
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c712:	e044      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c714:	2320      	movs	r3, #32
 800c716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71a:	e040      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c71c:	2340      	movs	r3, #64	@ 0x40
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c722:	e03c      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c724:	2380      	movs	r3, #128	@ 0x80
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72a:	e038      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a5b      	ldr	r2, [pc, #364]	@ (800c8a0 <UART_SetConfig+0x6a8>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d130      	bne.n	800c798 <UART_SetConfig+0x5a0>
 800c736:	4b57      	ldr	r3, [pc, #348]	@ (800c894 <UART_SetConfig+0x69c>)
 800c738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	2b05      	cmp	r3, #5
 800c740:	d826      	bhi.n	800c790 <UART_SetConfig+0x598>
 800c742:	a201      	add	r2, pc, #4	@ (adr r2, 800c748 <UART_SetConfig+0x550>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c761 	.word	0x0800c761
 800c74c:	0800c769 	.word	0x0800c769
 800c750:	0800c771 	.word	0x0800c771
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c781 	.word	0x0800c781
 800c75c:	0800c789 	.word	0x0800c789
 800c760:	2302      	movs	r3, #2
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c766:	e01a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c768:	2304      	movs	r3, #4
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76e:	e016      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c770:	2308      	movs	r3, #8
 800c772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c776:	e012      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c778:	2310      	movs	r3, #16
 800c77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77e:	e00e      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c780:	2320      	movs	r3, #32
 800c782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c786:	e00a      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c788:	2340      	movs	r3, #64	@ 0x40
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78e:	e006      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c790:	2380      	movs	r3, #128	@ 0x80
 800c792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c796:	e002      	b.n	800c79e <UART_SetConfig+0x5a6>
 800c798:	2380      	movs	r3, #128	@ 0x80
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a3f      	ldr	r2, [pc, #252]	@ (800c8a0 <UART_SetConfig+0x6a8>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	f040 80f8 	bne.w	800c99a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7ae:	2b20      	cmp	r3, #32
 800c7b0:	dc46      	bgt.n	800c840 <UART_SetConfig+0x648>
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	f2c0 8082 	blt.w	800c8bc <UART_SetConfig+0x6c4>
 800c7b8:	3b02      	subs	r3, #2
 800c7ba:	2b1e      	cmp	r3, #30
 800c7bc:	d87e      	bhi.n	800c8bc <UART_SetConfig+0x6c4>
 800c7be:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c4 <UART_SetConfig+0x5cc>)
 800c7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c4:	0800c847 	.word	0x0800c847
 800c7c8:	0800c8bd 	.word	0x0800c8bd
 800c7cc:	0800c84f 	.word	0x0800c84f
 800c7d0:	0800c8bd 	.word	0x0800c8bd
 800c7d4:	0800c8bd 	.word	0x0800c8bd
 800c7d8:	0800c8bd 	.word	0x0800c8bd
 800c7dc:	0800c85f 	.word	0x0800c85f
 800c7e0:	0800c8bd 	.word	0x0800c8bd
 800c7e4:	0800c8bd 	.word	0x0800c8bd
 800c7e8:	0800c8bd 	.word	0x0800c8bd
 800c7ec:	0800c8bd 	.word	0x0800c8bd
 800c7f0:	0800c8bd 	.word	0x0800c8bd
 800c7f4:	0800c8bd 	.word	0x0800c8bd
 800c7f8:	0800c8bd 	.word	0x0800c8bd
 800c7fc:	0800c86f 	.word	0x0800c86f
 800c800:	0800c8bd 	.word	0x0800c8bd
 800c804:	0800c8bd 	.word	0x0800c8bd
 800c808:	0800c8bd 	.word	0x0800c8bd
 800c80c:	0800c8bd 	.word	0x0800c8bd
 800c810:	0800c8bd 	.word	0x0800c8bd
 800c814:	0800c8bd 	.word	0x0800c8bd
 800c818:	0800c8bd 	.word	0x0800c8bd
 800c81c:	0800c8bd 	.word	0x0800c8bd
 800c820:	0800c8bd 	.word	0x0800c8bd
 800c824:	0800c8bd 	.word	0x0800c8bd
 800c828:	0800c8bd 	.word	0x0800c8bd
 800c82c:	0800c8bd 	.word	0x0800c8bd
 800c830:	0800c8bd 	.word	0x0800c8bd
 800c834:	0800c8bd 	.word	0x0800c8bd
 800c838:	0800c8bd 	.word	0x0800c8bd
 800c83c:	0800c8af 	.word	0x0800c8af
 800c840:	2b40      	cmp	r3, #64	@ 0x40
 800c842:	d037      	beq.n	800c8b4 <UART_SetConfig+0x6bc>
 800c844:	e03a      	b.n	800c8bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c846:	f7fd fcd1 	bl	800a1ec <HAL_RCCEx_GetD3PCLK1Freq>
 800c84a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c84c:	e03c      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c84e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fce0 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c85c:	e034      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	4618      	mov	r0, r3
 800c864:	f7fd fe2c 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86c:	e02c      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86e:	4b09      	ldr	r3, [pc, #36]	@ (800c894 <UART_SetConfig+0x69c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 0320 	and.w	r3, r3, #32
 800c876:	2b00      	cmp	r3, #0
 800c878:	d016      	beq.n	800c8a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c87a:	4b06      	ldr	r3, [pc, #24]	@ (800c894 <UART_SetConfig+0x69c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	08db      	lsrs	r3, r3, #3
 800c880:	f003 0303 	and.w	r3, r3, #3
 800c884:	4a07      	ldr	r2, [pc, #28]	@ (800c8a4 <UART_SetConfig+0x6ac>)
 800c886:	fa22 f303 	lsr.w	r3, r2, r3
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c88c:	e01c      	b.n	800c8c8 <UART_SetConfig+0x6d0>
 800c88e:	bf00      	nop
 800c890:	40011400 	.word	0x40011400
 800c894:	58024400 	.word	0x58024400
 800c898:	40007800 	.word	0x40007800
 800c89c:	40007c00 	.word	0x40007c00
 800c8a0:	58000c00 	.word	0x58000c00
 800c8a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c8a8:	4b9d      	ldr	r3, [pc, #628]	@ (800cb20 <UART_SetConfig+0x928>)
 800c8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ac:	e00c      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8ae:	4b9d      	ldr	r3, [pc, #628]	@ (800cb24 <UART_SetConfig+0x92c>)
 800c8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8b2:	e009      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ba:	e005      	b.n	800c8c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 81de 	beq.w	800cc8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d4:	4a94      	ldr	r2, [pc, #592]	@ (800cb28 <UART_SetConfig+0x930>)
 800c8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	4413      	add	r3, r2
 800c8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d305      	bcc.n	800c900 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d903      	bls.n	800c908 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c906:	e1c1      	b.n	800cc8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c90a:	2200      	movs	r2, #0
 800c90c:	60bb      	str	r3, [r7, #8]
 800c90e:	60fa      	str	r2, [r7, #12]
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c914:	4a84      	ldr	r2, [pc, #528]	@ (800cb28 <UART_SetConfig+0x930>)
 800c916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	2200      	movs	r2, #0
 800c91e:	603b      	str	r3, [r7, #0]
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c92a:	f7f3 fd91 	bl	8000450 <__aeabi_uldivmod>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4610      	mov	r0, r2
 800c934:	4619      	mov	r1, r3
 800c936:	f04f 0200 	mov.w	r2, #0
 800c93a:	f04f 0300 	mov.w	r3, #0
 800c93e:	020b      	lsls	r3, r1, #8
 800c940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c944:	0202      	lsls	r2, r0, #8
 800c946:	6979      	ldr	r1, [r7, #20]
 800c948:	6849      	ldr	r1, [r1, #4]
 800c94a:	0849      	lsrs	r1, r1, #1
 800c94c:	2000      	movs	r0, #0
 800c94e:	460c      	mov	r4, r1
 800c950:	4605      	mov	r5, r0
 800c952:	eb12 0804 	adds.w	r8, r2, r4
 800c956:	eb43 0905 	adc.w	r9, r3, r5
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	469a      	mov	sl, r3
 800c962:	4693      	mov	fp, r2
 800c964:	4652      	mov	r2, sl
 800c966:	465b      	mov	r3, fp
 800c968:	4640      	mov	r0, r8
 800c96a:	4649      	mov	r1, r9
 800c96c:	f7f3 fd70 	bl	8000450 <__aeabi_uldivmod>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4613      	mov	r3, r2
 800c976:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c97e:	d308      	bcc.n	800c992 <UART_SetConfig+0x79a>
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c986:	d204      	bcs.n	800c992 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c98e:	60da      	str	r2, [r3, #12]
 800c990:	e17c      	b.n	800cc8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c998:	e178      	b.n	800cc8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	69db      	ldr	r3, [r3, #28]
 800c99e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9a2:	f040 80c5 	bne.w	800cb30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c9a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9aa:	2b20      	cmp	r3, #32
 800c9ac:	dc48      	bgt.n	800ca40 <UART_SetConfig+0x848>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	db7b      	blt.n	800caaa <UART_SetConfig+0x8b2>
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	d879      	bhi.n	800caaa <UART_SetConfig+0x8b2>
 800c9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9bc <UART_SetConfig+0x7c4>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800ca47 	.word	0x0800ca47
 800c9c0:	0800ca4f 	.word	0x0800ca4f
 800c9c4:	0800caab 	.word	0x0800caab
 800c9c8:	0800caab 	.word	0x0800caab
 800c9cc:	0800ca57 	.word	0x0800ca57
 800c9d0:	0800caab 	.word	0x0800caab
 800c9d4:	0800caab 	.word	0x0800caab
 800c9d8:	0800caab 	.word	0x0800caab
 800c9dc:	0800ca67 	.word	0x0800ca67
 800c9e0:	0800caab 	.word	0x0800caab
 800c9e4:	0800caab 	.word	0x0800caab
 800c9e8:	0800caab 	.word	0x0800caab
 800c9ec:	0800caab 	.word	0x0800caab
 800c9f0:	0800caab 	.word	0x0800caab
 800c9f4:	0800caab 	.word	0x0800caab
 800c9f8:	0800caab 	.word	0x0800caab
 800c9fc:	0800ca77 	.word	0x0800ca77
 800ca00:	0800caab 	.word	0x0800caab
 800ca04:	0800caab 	.word	0x0800caab
 800ca08:	0800caab 	.word	0x0800caab
 800ca0c:	0800caab 	.word	0x0800caab
 800ca10:	0800caab 	.word	0x0800caab
 800ca14:	0800caab 	.word	0x0800caab
 800ca18:	0800caab 	.word	0x0800caab
 800ca1c:	0800caab 	.word	0x0800caab
 800ca20:	0800caab 	.word	0x0800caab
 800ca24:	0800caab 	.word	0x0800caab
 800ca28:	0800caab 	.word	0x0800caab
 800ca2c:	0800caab 	.word	0x0800caab
 800ca30:	0800caab 	.word	0x0800caab
 800ca34:	0800caab 	.word	0x0800caab
 800ca38:	0800caab 	.word	0x0800caab
 800ca3c:	0800ca9d 	.word	0x0800ca9d
 800ca40:	2b40      	cmp	r3, #64	@ 0x40
 800ca42:	d02e      	beq.n	800caa2 <UART_SetConfig+0x8aa>
 800ca44:	e031      	b.n	800caaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca46:	f7fb fbd9 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800ca4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca4c:	e033      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca4e:	f7fb fbeb 	bl	8008228 <HAL_RCC_GetPCLK2Freq>
 800ca52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca54:	e02f      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fd fbdc 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca64:	e027      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca66:	f107 0318 	add.w	r3, r7, #24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fd fd28 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca74:	e01f      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca76:	4b2d      	ldr	r3, [pc, #180]	@ (800cb2c <UART_SetConfig+0x934>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d009      	beq.n	800ca96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca82:	4b2a      	ldr	r3, [pc, #168]	@ (800cb2c <UART_SetConfig+0x934>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	08db      	lsrs	r3, r3, #3
 800ca88:	f003 0303 	and.w	r3, r3, #3
 800ca8c:	4a24      	ldr	r2, [pc, #144]	@ (800cb20 <UART_SetConfig+0x928>)
 800ca8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca94:	e00f      	b.n	800cab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca96:	4b22      	ldr	r3, [pc, #136]	@ (800cb20 <UART_SetConfig+0x928>)
 800ca98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca9a:	e00c      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca9c:	4b21      	ldr	r3, [pc, #132]	@ (800cb24 <UART_SetConfig+0x92c>)
 800ca9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa0:	e009      	b.n	800cab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa8:	e005      	b.n	800cab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 80e7 	beq.w	800cc8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac2:	4a19      	ldr	r2, [pc, #100]	@ (800cb28 <UART_SetConfig+0x930>)
 800cac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cac8:	461a      	mov	r2, r3
 800caca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cacc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad0:	005a      	lsls	r2, r3, #1
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	085b      	lsrs	r3, r3, #1
 800cad8:	441a      	add	r2, r3
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae6:	2b0f      	cmp	r3, #15
 800cae8:	d916      	bls.n	800cb18 <UART_SetConfig+0x920>
 800caea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caf0:	d212      	bcs.n	800cb18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800caf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f023 030f 	bic.w	r3, r3, #15
 800cafa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	f003 0307 	and.w	r3, r3, #7
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cb14:	60da      	str	r2, [r3, #12]
 800cb16:	e0b9      	b.n	800cc8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb1e:	e0b5      	b.n	800cc8c <UART_SetConfig+0xa94>
 800cb20:	03d09000 	.word	0x03d09000
 800cb24:	003d0900 	.word	0x003d0900
 800cb28:	0801f04c 	.word	0x0801f04c
 800cb2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb34:	2b20      	cmp	r3, #32
 800cb36:	dc49      	bgt.n	800cbcc <UART_SetConfig+0x9d4>
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	db7c      	blt.n	800cc36 <UART_SetConfig+0xa3e>
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d87a      	bhi.n	800cc36 <UART_SetConfig+0xa3e>
 800cb40:	a201      	add	r2, pc, #4	@ (adr r2, 800cb48 <UART_SetConfig+0x950>)
 800cb42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb46:	bf00      	nop
 800cb48:	0800cbd3 	.word	0x0800cbd3
 800cb4c:	0800cbdb 	.word	0x0800cbdb
 800cb50:	0800cc37 	.word	0x0800cc37
 800cb54:	0800cc37 	.word	0x0800cc37
 800cb58:	0800cbe3 	.word	0x0800cbe3
 800cb5c:	0800cc37 	.word	0x0800cc37
 800cb60:	0800cc37 	.word	0x0800cc37
 800cb64:	0800cc37 	.word	0x0800cc37
 800cb68:	0800cbf3 	.word	0x0800cbf3
 800cb6c:	0800cc37 	.word	0x0800cc37
 800cb70:	0800cc37 	.word	0x0800cc37
 800cb74:	0800cc37 	.word	0x0800cc37
 800cb78:	0800cc37 	.word	0x0800cc37
 800cb7c:	0800cc37 	.word	0x0800cc37
 800cb80:	0800cc37 	.word	0x0800cc37
 800cb84:	0800cc37 	.word	0x0800cc37
 800cb88:	0800cc03 	.word	0x0800cc03
 800cb8c:	0800cc37 	.word	0x0800cc37
 800cb90:	0800cc37 	.word	0x0800cc37
 800cb94:	0800cc37 	.word	0x0800cc37
 800cb98:	0800cc37 	.word	0x0800cc37
 800cb9c:	0800cc37 	.word	0x0800cc37
 800cba0:	0800cc37 	.word	0x0800cc37
 800cba4:	0800cc37 	.word	0x0800cc37
 800cba8:	0800cc37 	.word	0x0800cc37
 800cbac:	0800cc37 	.word	0x0800cc37
 800cbb0:	0800cc37 	.word	0x0800cc37
 800cbb4:	0800cc37 	.word	0x0800cc37
 800cbb8:	0800cc37 	.word	0x0800cc37
 800cbbc:	0800cc37 	.word	0x0800cc37
 800cbc0:	0800cc37 	.word	0x0800cc37
 800cbc4:	0800cc37 	.word	0x0800cc37
 800cbc8:	0800cc29 	.word	0x0800cc29
 800cbcc:	2b40      	cmp	r3, #64	@ 0x40
 800cbce:	d02e      	beq.n	800cc2e <UART_SetConfig+0xa36>
 800cbd0:	e031      	b.n	800cc36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbd2:	f7fb fb13 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800cbd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbd8:	e033      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbda:	f7fb fb25 	bl	8008228 <HAL_RCC_GetPCLK2Freq>
 800cbde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbe0:	e02f      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fd fb16 	bl	800a218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbf0:	e027      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf2:	f107 0318 	add.w	r3, r7, #24
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fd fc62 	bl	800a4c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc00:	e01f      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc02:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb8 <UART_SetConfig+0xac0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc0e:	4b2a      	ldr	r3, [pc, #168]	@ (800ccb8 <UART_SetConfig+0xac0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	08db      	lsrs	r3, r3, #3
 800cc14:	f003 0303 	and.w	r3, r3, #3
 800cc18:	4a28      	ldr	r2, [pc, #160]	@ (800ccbc <UART_SetConfig+0xac4>)
 800cc1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc20:	e00f      	b.n	800cc42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cc22:	4b26      	ldr	r3, [pc, #152]	@ (800ccbc <UART_SetConfig+0xac4>)
 800cc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc26:	e00c      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc28:	4b25      	ldr	r3, [pc, #148]	@ (800ccc0 <UART_SetConfig+0xac8>)
 800cc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc2c:	e009      	b.n	800cc42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc34:	e005      	b.n	800cc42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc40:	bf00      	nop
    }

    if (pclk != 0U)
 800cc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d021      	beq.n	800cc8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc4c:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc4 <UART_SetConfig+0xacc>)
 800cc4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc52:	461a      	mov	r2, r3
 800cc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc56:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	441a      	add	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d909      	bls.n	800cc86 <UART_SetConfig+0xa8e>
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc78:	d205      	bcs.n	800cc86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60da      	str	r2, [r3, #12]
 800cc84:	e002      	b.n	800cc8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2200      	movs	r2, #0
 800cca6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cca8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3748      	adds	r7, #72	@ 0x48
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccb6:	bf00      	nop
 800ccb8:	58024400 	.word	0x58024400
 800ccbc:	03d09000 	.word	0x03d09000
 800ccc0:	003d0900 	.word	0x003d0900
 800ccc4:	0801f04c 	.word	0x0801f04c

0800ccc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00a      	beq.n	800ccf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	430a      	orrs	r2, r1
 800cd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd18:	f003 0302 	and.w	r3, r3, #2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00a      	beq.n	800cd36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	430a      	orrs	r2, r1
 800cd34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3a:	f003 0304 	and.w	r3, r3, #4
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00a      	beq.n	800cd58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5c:	f003 0310 	and.w	r3, r3, #16
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00a      	beq.n	800cd7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7e:	f003 0320 	and.w	r3, r3, #32
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01a      	beq.n	800cdde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdc6:	d10a      	bne.n	800cdde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	430a      	orrs	r2, r1
 800cddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	430a      	orrs	r2, r1
 800cdfe:	605a      	str	r2, [r3, #4]
  }
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b098      	sub	sp, #96	@ 0x60
 800ce10:	af02      	add	r7, sp, #8
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce1c:	f7f5 fd54 	bl	80028c8 <HAL_GetTick>
 800ce20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0308 	and.w	r3, r3, #8
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d12f      	bne.n	800ce90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f88e 	bl	800cf60 <UART_WaitOnFlagUntilTimeout>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d022      	beq.n	800ce90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce52:	e853 3f00 	ldrex	r3, [r3]
 800ce56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce68:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce70:	e841 2300 	strex	r3, r2, [r1]
 800ce74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1e6      	bne.n	800ce4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e063      	b.n	800cf58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0304 	and.w	r3, r3, #4
 800ce9a:	2b04      	cmp	r3, #4
 800ce9c:	d149      	bne.n	800cf32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea6:	2200      	movs	r2, #0
 800cea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f857 	bl	800cf60 <UART_WaitOnFlagUntilTimeout>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d03c      	beq.n	800cf32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	623b      	str	r3, [r7, #32]
   return(result);
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ced6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ced8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cedc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cede:	e841 2300 	strex	r3, r2, [r1]
 800cee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1e6      	bne.n	800ceb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3308      	adds	r3, #8
 800cef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	e853 3f00 	ldrex	r3, [r3]
 800cef8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f023 0301 	bic.w	r3, r3, #1
 800cf00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3308      	adds	r3, #8
 800cf08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf0a:	61fa      	str	r2, [r7, #28]
 800cf0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0e:	69b9      	ldr	r1, [r7, #24]
 800cf10:	69fa      	ldr	r2, [r7, #28]
 800cf12:	e841 2300 	strex	r3, r2, [r1]
 800cf16:	617b      	str	r3, [r7, #20]
   return(result);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1e5      	bne.n	800ceea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e012      	b.n	800cf58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2220      	movs	r2, #32
 800cf3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3758      	adds	r7, #88	@ 0x58
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf70:	e04f      	b.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf78:	d04b      	beq.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf7a:	f7f5 fca5 	bl	80028c8 <HAL_GetTick>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d302      	bcc.n	800cf90 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e04e      	b.n	800d032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 0304 	and.w	r3, r3, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d037      	beq.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b80      	cmp	r3, #128	@ 0x80
 800cfa6:	d034      	beq.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b40      	cmp	r3, #64	@ 0x40
 800cfac:	d031      	beq.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	69db      	ldr	r3, [r3, #28]
 800cfb4:	f003 0308 	and.w	r3, r3, #8
 800cfb8:	2b08      	cmp	r3, #8
 800cfba:	d110      	bne.n	800cfde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 f921 	bl	800d20c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2208      	movs	r2, #8
 800cfce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e029      	b.n	800d032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfec:	d111      	bne.n	800d012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 f907 	bl	800d20c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2220      	movs	r2, #32
 800d002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e00f      	b.n	800d032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69da      	ldr	r2, [r3, #28]
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	4013      	ands	r3, r2
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	429a      	cmp	r2, r3
 800d020:	bf0c      	ite	eq
 800d022:	2301      	moveq	r3, #1
 800d024:	2300      	movne	r3, #0
 800d026:	b2db      	uxtb	r3, r3
 800d028:	461a      	mov	r2, r3
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d0a0      	beq.n	800cf72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b096      	sub	sp, #88	@ 0x58
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	4613      	mov	r3, r2
 800d048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	88fa      	ldrh	r2, [r7, #6]
 800d054:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2222      	movs	r2, #34	@ 0x22
 800d064:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d02d      	beq.n	800d0ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d078:	4a40      	ldr	r2, [pc, #256]	@ (800d17c <UART_Start_Receive_DMA+0x140>)
 800d07a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d082:	4a3f      	ldr	r2, [pc, #252]	@ (800d180 <UART_Start_Receive_DMA+0x144>)
 800d084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d08c:	4a3d      	ldr	r2, [pc, #244]	@ (800d184 <UART_Start_Receive_DMA+0x148>)
 800d08e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d096:	2200      	movs	r2, #0
 800d098:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	3324      	adds	r3, #36	@ 0x24
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	88fb      	ldrh	r3, [r7, #6]
 800d0b0:	f7f7 fb54 	bl	800475c <HAL_DMA_Start_IT>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d009      	beq.n	800d0ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2210      	movs	r2, #16
 800d0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e051      	b.n	800d172 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d018      	beq.n	800d108 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d0fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0fc:	e841 2300 	strex	r3, r2, [r1]
 800d100:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1e6      	bne.n	800d0d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3308      	adds	r3, #8
 800d10e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d112:	e853 3f00 	ldrex	r3, [r3]
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3308      	adds	r3, #8
 800d126:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d128:	637a      	str	r2, [r7, #52]	@ 0x34
 800d12a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d12e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d130:	e841 2300 	strex	r3, r2, [r1]
 800d134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e5      	bne.n	800d108 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3308      	adds	r3, #8
 800d142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	e853 3f00 	ldrex	r3, [r3]
 800d14a:	613b      	str	r3, [r7, #16]
   return(result);
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3308      	adds	r3, #8
 800d15a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d15c:	623a      	str	r2, [r7, #32]
 800d15e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d160:	69f9      	ldr	r1, [r7, #28]
 800d162:	6a3a      	ldr	r2, [r7, #32]
 800d164:	e841 2300 	strex	r3, r2, [r1]
 800d168:	61bb      	str	r3, [r7, #24]
   return(result);
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1e5      	bne.n	800d13c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3758      	adds	r7, #88	@ 0x58
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	0800d38b 	.word	0x0800d38b
 800d180:	0800d4b3 	.word	0x0800d4b3
 800d184:	0800d4f1 	.word	0x0800d4f1

0800d188 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d188:	b480      	push	{r7}
 800d18a:	b08f      	sub	sp, #60	@ 0x3c
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	e853 3f00 	ldrex	r3, [r3]
 800d19c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1b6:	e841 2300 	strex	r3, r2, [r1]
 800d1ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e6      	bne.n	800d190 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	e853 3f00 	ldrex	r3, [r3]
 800d1d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d1d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3308      	adds	r3, #8
 800d1e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1e2:	61ba      	str	r2, [r7, #24]
 800d1e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e6:	6979      	ldr	r1, [r7, #20]
 800d1e8:	69ba      	ldr	r2, [r7, #24]
 800d1ea:	e841 2300 	strex	r3, r2, [r1]
 800d1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e5      	bne.n	800d1c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2220      	movs	r2, #32
 800d1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d1fe:	bf00      	nop
 800d200:	373c      	adds	r7, #60	@ 0x3c
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
	...

0800d20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b095      	sub	sp, #84	@ 0x54
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d21c:	e853 3f00 	ldrex	r3, [r3]
 800d220:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d232:	643b      	str	r3, [r7, #64]	@ 0x40
 800d234:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d23a:	e841 2300 	strex	r3, r2, [r1]
 800d23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1e6      	bne.n	800d214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3308      	adds	r3, #8
 800d24c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	e853 3f00 	ldrex	r3, [r3]
 800d254:	61fb      	str	r3, [r7, #28]
   return(result);
 800d256:	69fa      	ldr	r2, [r7, #28]
 800d258:	4b1e      	ldr	r3, [pc, #120]	@ (800d2d4 <UART_EndRxTransfer+0xc8>)
 800d25a:	4013      	ands	r3, r2
 800d25c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3308      	adds	r3, #8
 800d264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d26c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d26e:	e841 2300 	strex	r3, r2, [r1]
 800d272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1e5      	bne.n	800d246 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d118      	bne.n	800d2b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	e853 3f00 	ldrex	r3, [r3]
 800d28e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f023 0310 	bic.w	r3, r3, #16
 800d296:	647b      	str	r3, [r7, #68]	@ 0x44
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	461a      	mov	r2, r3
 800d29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2a0:	61bb      	str	r3, [r7, #24]
 800d2a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a4:	6979      	ldr	r1, [r7, #20]
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	e841 2300 	strex	r3, r2, [r1]
 800d2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e6      	bne.n	800d282 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2220      	movs	r2, #32
 800d2b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d2c8:	bf00      	nop
 800d2ca:	3754      	adds	r7, #84	@ 0x54
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	effffffe 	.word	0xeffffffe

0800d2d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b090      	sub	sp, #64	@ 0x40
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	69db      	ldr	r3, [r3, #28]
 800d2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2ee:	d037      	beq.n	800d360 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d302:	e853 3f00 	ldrex	r3, [r3]
 800d306:	623b      	str	r3, [r7, #32]
   return(result);
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d30e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3308      	adds	r3, #8
 800d316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d318:	633a      	str	r2, [r7, #48]	@ 0x30
 800d31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d31e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d320:	e841 2300 	strex	r3, r2, [r1]
 800d324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1e5      	bne.n	800d2f8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	e853 3f00 	ldrex	r3, [r3]
 800d338:	60fb      	str	r3, [r7, #12]
   return(result);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d340:	637b      	str	r3, [r7, #52]	@ 0x34
 800d342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d34a:	61fb      	str	r3, [r7, #28]
 800d34c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34e:	69b9      	ldr	r1, [r7, #24]
 800d350:	69fa      	ldr	r2, [r7, #28]
 800d352:	e841 2300 	strex	r3, r2, [r1]
 800d356:	617b      	str	r3, [r7, #20]
   return(result);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e6      	bne.n	800d32c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d35e:	e002      	b.n	800d366 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d362:	f7fe ff0b 	bl	800c17c <HAL_UART_TxCpltCallback>
}
 800d366:	bf00      	nop
 800d368:	3740      	adds	r7, #64	@ 0x40
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d37a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7fe ff07 	bl	800c190 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d382:	bf00      	nop
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b09c      	sub	sp, #112	@ 0x70
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d396:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	69db      	ldr	r3, [r3, #28]
 800d39c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3a0:	d071      	beq.n	800d486 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3b2:	e853 3f00 	ldrex	r3, [r3]
 800d3b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d3b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d3ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3d0:	e841 2300 	strex	r3, r2, [r1]
 800d3d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e6      	bne.n	800d3aa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	e853 3f00 	ldrex	r3, [r3]
 800d3ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ee:	f023 0301 	bic.w	r3, r3, #1
 800d3f2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d3fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800d3fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d404:	e841 2300 	strex	r3, r2, [r1]
 800d408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1e5      	bne.n	800d3dc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41a:	e853 3f00 	ldrex	r3, [r3]
 800d41e:	623b      	str	r3, [r7, #32]
   return(result);
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d426:	663b      	str	r3, [r7, #96]	@ 0x60
 800d428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3308      	adds	r3, #8
 800d42e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d430:	633a      	str	r2, [r7, #48]	@ 0x30
 800d432:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d438:	e841 2300 	strex	r3, r2, [r1]
 800d43c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e5      	bne.n	800d410 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d446:	2220      	movs	r2, #32
 800d448:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d450:	2b01      	cmp	r3, #1
 800d452:	d118      	bne.n	800d486 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	e853 3f00 	ldrex	r3, [r3]
 800d460:	60fb      	str	r3, [r7, #12]
   return(result);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f023 0310 	bic.w	r3, r3, #16
 800d468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d46a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	461a      	mov	r2, r3
 800d470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d472:	61fb      	str	r3, [r7, #28]
 800d474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d476:	69b9      	ldr	r1, [r7, #24]
 800d478:	69fa      	ldr	r2, [r7, #28]
 800d47a:	e841 2300 	strex	r3, r2, [r1]
 800d47e:	617b      	str	r3, [r7, #20]
   return(result);
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d1e6      	bne.n	800d454 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d488:	2200      	movs	r2, #0
 800d48a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d490:	2b01      	cmp	r3, #1
 800d492:	d107      	bne.n	800d4a4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d49a:	4619      	mov	r1, r3
 800d49c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d49e:	f7fe fe9f 	bl	800c1e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4a2:	e002      	b.n	800d4aa <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d4a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d4a6:	f7fe fe7d 	bl	800c1a4 <HAL_UART_RxCpltCallback>
}
 800d4aa:	bf00      	nop
 800d4ac:	3770      	adds	r7, #112	@ 0x70
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d109      	bne.n	800d4e2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4d4:	085b      	lsrs	r3, r3, #1
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f7fe fe80 	bl	800c1e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4e0:	e002      	b.n	800d4e8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f7fe fe68 	bl	800c1b8 <HAL_UART_RxHalfCpltCallback>
}
 800d4e8:	bf00      	nop
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d504:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d518:	2b80      	cmp	r3, #128	@ 0x80
 800d51a:	d109      	bne.n	800d530 <UART_DMAError+0x40>
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2b21      	cmp	r3, #33	@ 0x21
 800d520:	d106      	bne.n	800d530 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2200      	movs	r2, #0
 800d526:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d52a:	6978      	ldr	r0, [r7, #20]
 800d52c:	f7ff fe2c 	bl	800d188 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d53a:	2b40      	cmp	r3, #64	@ 0x40
 800d53c:	d109      	bne.n	800d552 <UART_DMAError+0x62>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b22      	cmp	r3, #34	@ 0x22
 800d542:	d106      	bne.n	800d552 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	2200      	movs	r2, #0
 800d548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d54c:	6978      	ldr	r0, [r7, #20]
 800d54e:	f7ff fe5d 	bl	800d20c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d558:	f043 0210 	orr.w	r2, r3, #16
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d562:	6978      	ldr	r0, [r7, #20]
 800d564:	f7fe fe32 	bl	800c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d568:	bf00      	nop
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d57c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2200      	movs	r2, #0
 800d582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7fe fe1c 	bl	800c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d594:	bf00      	nop
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	61bb      	str	r3, [r7, #24]
 800d5c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c6:	6979      	ldr	r1, [r7, #20]
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	e841 2300 	strex	r3, r2, [r1]
 800d5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1e6      	bne.n	800d5a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2220      	movs	r2, #32
 800d5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7fe fdc9 	bl	800c17c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ea:	bf00      	nop
 800d5ec:	3720      	adds	r7, #32
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d5fa:	bf00      	nop
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d606:	b480      	push	{r7}
 800d608:	b083      	sub	sp, #12
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d60e:	bf00      	nop
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d622:	bf00      	nop
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d62e:	b480      	push	{r7}
 800d630:	b085      	sub	sp, #20
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d101      	bne.n	800d644 <HAL_UARTEx_DisableFifoMode+0x16>
 800d640:	2302      	movs	r3, #2
 800d642:	e027      	b.n	800d694 <HAL_UARTEx_DisableFifoMode+0x66>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2224      	movs	r2, #36	@ 0x24
 800d650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0201 	bic.w	r2, r2, #1
 800d66a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d672:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2220      	movs	r2, #32
 800d686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d101      	bne.n	800d6b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e02d      	b.n	800d714 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2224      	movs	r2, #36	@ 0x24
 800d6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0201 	bic.w	r2, r2, #1
 800d6de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f84f 	bl	800d798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2220      	movs	r2, #32
 800d706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d101      	bne.n	800d734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d730:	2302      	movs	r3, #2
 800d732:	e02d      	b.n	800d790 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2224      	movs	r2, #36	@ 0x24
 800d740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f022 0201 	bic.w	r2, r2, #1
 800d75a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f811 	bl	800d798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2220      	movs	r2, #32
 800d782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d108      	bne.n	800d7ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7b8:	e031      	b.n	800d81e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7ba:	2310      	movs	r3, #16
 800d7bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7be:	2310      	movs	r3, #16
 800d7c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	0e5b      	lsrs	r3, r3, #25
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	f003 0307 	and.w	r3, r3, #7
 800d7d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	0f5b      	lsrs	r3, r3, #29
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	f003 0307 	and.w	r3, r3, #7
 800d7e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7e2:	7bbb      	ldrb	r3, [r7, #14]
 800d7e4:	7b3a      	ldrb	r2, [r7, #12]
 800d7e6:	4911      	ldr	r1, [pc, #68]	@ (800d82c <UARTEx_SetNbDataToProcess+0x94>)
 800d7e8:	5c8a      	ldrb	r2, [r1, r2]
 800d7ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7ee:	7b3a      	ldrb	r2, [r7, #12]
 800d7f0:	490f      	ldr	r1, [pc, #60]	@ (800d830 <UARTEx_SetNbDataToProcess+0x98>)
 800d7f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	7b7a      	ldrb	r2, [r7, #13]
 800d804:	4909      	ldr	r1, [pc, #36]	@ (800d82c <UARTEx_SetNbDataToProcess+0x94>)
 800d806:	5c8a      	ldrb	r2, [r1, r2]
 800d808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d80c:	7b7a      	ldrb	r2, [r7, #13]
 800d80e:	4908      	ldr	r1, [pc, #32]	@ (800d830 <UARTEx_SetNbDataToProcess+0x98>)
 800d810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d812:	fb93 f3f2 	sdiv	r3, r3, r2
 800d816:	b29a      	uxth	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	0801f064 	.word	0x0801f064
 800d830:	0801f06c 	.word	0x0801f06c

0800d834 <__NVIC_SetPriority>:
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d844:	2b00      	cmp	r3, #0
 800d846:	db0a      	blt.n	800d85e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	490c      	ldr	r1, [pc, #48]	@ (800d880 <__NVIC_SetPriority+0x4c>)
 800d84e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d852:	0112      	lsls	r2, r2, #4
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	440b      	add	r3, r1
 800d858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d85c:	e00a      	b.n	800d874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	b2da      	uxtb	r2, r3
 800d862:	4908      	ldr	r1, [pc, #32]	@ (800d884 <__NVIC_SetPriority+0x50>)
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	f003 030f 	and.w	r3, r3, #15
 800d86a:	3b04      	subs	r3, #4
 800d86c:	0112      	lsls	r2, r2, #4
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	440b      	add	r3, r1
 800d872:	761a      	strb	r2, [r3, #24]
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	e000e100 	.word	0xe000e100
 800d884:	e000ed00 	.word	0xe000ed00

0800d888 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d88c:	4b05      	ldr	r3, [pc, #20]	@ (800d8a4 <SysTick_Handler+0x1c>)
 800d88e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d890:	f002 f980 	bl	800fb94 <xTaskGetSchedulerState>
 800d894:	4603      	mov	r3, r0
 800d896:	2b01      	cmp	r3, #1
 800d898:	d001      	beq.n	800d89e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d89a:	f000 fd9d 	bl	800e3d8 <xPortSysTickHandler>
  }
}
 800d89e:	bf00      	nop
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	e000e010 	.word	0xe000e010

0800d8a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	f06f 0004 	mvn.w	r0, #4
 800d8b2:	f7ff ffbf 	bl	800d834 <__NVIC_SetPriority>
#endif
}
 800d8b6:	bf00      	nop
 800d8b8:	bd80      	pop	{r7, pc}
	...

0800d8bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8c2:	f3ef 8305 	mrs	r3, IPSR
 800d8c6:	603b      	str	r3, [r7, #0]
  return(result);
 800d8c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d8ce:	f06f 0305 	mvn.w	r3, #5
 800d8d2:	607b      	str	r3, [r7, #4]
 800d8d4:	e00c      	b.n	800d8f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d8d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d900 <osKernelInitialize+0x44>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d105      	bne.n	800d8ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d8de:	4b08      	ldr	r3, [pc, #32]	@ (800d900 <osKernelInitialize+0x44>)
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	607b      	str	r3, [r7, #4]
 800d8e8:	e002      	b.n	800d8f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d8ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d8ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8f0:	687b      	ldr	r3, [r7, #4]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	24009c14 	.word	0x24009c14

0800d904 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d90a:	f3ef 8305 	mrs	r3, IPSR
 800d90e:	603b      	str	r3, [r7, #0]
  return(result);
 800d910:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d916:	f06f 0305 	mvn.w	r3, #5
 800d91a:	607b      	str	r3, [r7, #4]
 800d91c:	e010      	b.n	800d940 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d91e:	4b0b      	ldr	r3, [pc, #44]	@ (800d94c <osKernelStart+0x48>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d109      	bne.n	800d93a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d926:	f7ff ffbf 	bl	800d8a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d92a:	4b08      	ldr	r3, [pc, #32]	@ (800d94c <osKernelStart+0x48>)
 800d92c:	2202      	movs	r2, #2
 800d92e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d930:	f001 fcba 	bl	800f2a8 <vTaskStartScheduler>
      stat = osOK;
 800d934:	2300      	movs	r3, #0
 800d936:	607b      	str	r3, [r7, #4]
 800d938:	e002      	b.n	800d940 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d93a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d93e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d940:	687b      	ldr	r3, [r7, #4]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	24009c14 	.word	0x24009c14

0800d950 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d950:	b580      	push	{r7, lr}
 800d952:	b08e      	sub	sp, #56	@ 0x38
 800d954:	af04      	add	r7, sp, #16
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d960:	f3ef 8305 	mrs	r3, IPSR
 800d964:	617b      	str	r3, [r7, #20]
  return(result);
 800d966:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d17e      	bne.n	800da6a <osThreadNew+0x11a>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d07b      	beq.n	800da6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d972:	2380      	movs	r3, #128	@ 0x80
 800d974:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d976:	2318      	movs	r3, #24
 800d978:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d97a:	2300      	movs	r3, #0
 800d97c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d97e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d982:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d045      	beq.n	800da16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <osThreadNew+0x48>
        name = attr->name;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d008      	beq.n	800d9be <osThreadNew+0x6e>
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	2b38      	cmp	r3, #56	@ 0x38
 800d9b0:	d805      	bhi.n	800d9be <osThreadNew+0x6e>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <osThreadNew+0x72>
        return (NULL);
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e054      	b.n	800da6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	695b      	ldr	r3, [r3, #20]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d003      	beq.n	800d9d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	089b      	lsrs	r3, r3, #2
 800d9d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00e      	beq.n	800d9f8 <osThreadNew+0xa8>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	2b5b      	cmp	r3, #91	@ 0x5b
 800d9e0:	d90a      	bls.n	800d9f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d006      	beq.n	800d9f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <osThreadNew+0xa8>
        mem = 1;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	61bb      	str	r3, [r7, #24]
 800d9f6:	e010      	b.n	800da1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10c      	bne.n	800da1a <osThreadNew+0xca>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d108      	bne.n	800da1a <osThreadNew+0xca>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <osThreadNew+0xca>
          mem = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	61bb      	str	r3, [r7, #24]
 800da14:	e001      	b.n	800da1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d110      	bne.n	800da42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da28:	9202      	str	r2, [sp, #8]
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6a3a      	ldr	r2, [r7, #32]
 800da34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f001 fa5a 	bl	800eef0 <xTaskCreateStatic>
 800da3c:	4603      	mov	r3, r0
 800da3e:	613b      	str	r3, [r7, #16]
 800da40:	e013      	b.n	800da6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d110      	bne.n	800da6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	f107 0310 	add.w	r3, r7, #16
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f001 faa8 	bl	800efb0 <xTaskCreate>
 800da60:	4603      	mov	r3, r0
 800da62:	2b01      	cmp	r3, #1
 800da64:	d001      	beq.n	800da6a <osThreadNew+0x11a>
            hTask = NULL;
 800da66:	2300      	movs	r3, #0
 800da68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da6a:	693b      	ldr	r3, [r7, #16]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3728      	adds	r7, #40	@ 0x28
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7c:	f3ef 8305 	mrs	r3, IPSR
 800da80:	60bb      	str	r3, [r7, #8]
  return(result);
 800da82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <osDelay+0x1c>
    stat = osErrorISR;
 800da88:	f06f 0305 	mvn.w	r3, #5
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	e007      	b.n	800daa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da90:	2300      	movs	r3, #0
 800da92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f001 fbce 	bl	800f23c <vTaskDelay>
    }
  }

  return (stat);
 800daa0:	68fb      	ldr	r3, [r7, #12]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4a07      	ldr	r2, [pc, #28]	@ (800dad8 <vApplicationGetIdleTaskMemory+0x2c>)
 800dabc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	4a06      	ldr	r2, [pc, #24]	@ (800dadc <vApplicationGetIdleTaskMemory+0x30>)
 800dac2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2280      	movs	r2, #128	@ 0x80
 800dac8:	601a      	str	r2, [r3, #0]
}
 800daca:	bf00      	nop
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	24009c18 	.word	0x24009c18
 800dadc:	24009c74 	.word	0x24009c74

0800dae0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4a07      	ldr	r2, [pc, #28]	@ (800db0c <vApplicationGetTimerTaskMemory+0x2c>)
 800daf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	4a06      	ldr	r2, [pc, #24]	@ (800db10 <vApplicationGetTimerTaskMemory+0x30>)
 800daf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dafe:	601a      	str	r2, [r3, #0]
}
 800db00:	bf00      	nop
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	24009e74 	.word	0x24009e74
 800db10:	24009ed0 	.word	0x24009ed0

0800db14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08a      	sub	sp, #40	@ 0x28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db20:	f001 fc2a 	bl	800f378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db24:	4b5c      	ldr	r3, [pc, #368]	@ (800dc98 <pvPortMalloc+0x184>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db2c:	f000 f924 	bl	800dd78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db30:	4b5a      	ldr	r3, [pc, #360]	@ (800dc9c <pvPortMalloc+0x188>)
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4013      	ands	r3, r2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f040 8095 	bne.w	800dc68 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d01e      	beq.n	800db82 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800db44:	2208      	movs	r2, #8
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4413      	add	r3, r2
 800db4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f003 0307 	and.w	r3, r3, #7
 800db52:	2b00      	cmp	r3, #0
 800db54:	d015      	beq.n	800db82 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f023 0307 	bic.w	r3, r3, #7
 800db5c:	3308      	adds	r3, #8
 800db5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00b      	beq.n	800db82 <pvPortMalloc+0x6e>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	617b      	str	r3, [r7, #20]
}
 800db7c:	bf00      	nop
 800db7e:	bf00      	nop
 800db80:	e7fd      	b.n	800db7e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d06f      	beq.n	800dc68 <pvPortMalloc+0x154>
 800db88:	4b45      	ldr	r3, [pc, #276]	@ (800dca0 <pvPortMalloc+0x18c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d86a      	bhi.n	800dc68 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db92:	4b44      	ldr	r3, [pc, #272]	@ (800dca4 <pvPortMalloc+0x190>)
 800db94:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db96:	4b43      	ldr	r3, [pc, #268]	@ (800dca4 <pvPortMalloc+0x190>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db9c:	e004      	b.n	800dba8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d903      	bls.n	800dbba <pvPortMalloc+0xa6>
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1f1      	bne.n	800db9e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbba:	4b37      	ldr	r3, [pc, #220]	@ (800dc98 <pvPortMalloc+0x184>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d051      	beq.n	800dc68 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2208      	movs	r2, #8
 800dbca:	4413      	add	r3, r2
 800dbcc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd8:	685a      	ldr	r2, [r3, #4]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	1ad2      	subs	r2, r2, r3
 800dbde:	2308      	movs	r3, #8
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d920      	bls.n	800dc28 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4413      	add	r3, r2
 800dbec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	f003 0307 	and.w	r3, r3, #7
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00b      	beq.n	800dc10 <pvPortMalloc+0xfc>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	613b      	str	r3, [r7, #16]
}
 800dc0a:	bf00      	nop
 800dc0c:	bf00      	nop
 800dc0e:	e7fd      	b.n	800dc0c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	1ad2      	subs	r2, r2, r3
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc22:	69b8      	ldr	r0, [r7, #24]
 800dc24:	f000 f90a 	bl	800de3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc28:	4b1d      	ldr	r3, [pc, #116]	@ (800dca0 <pvPortMalloc+0x18c>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	4a1b      	ldr	r2, [pc, #108]	@ (800dca0 <pvPortMalloc+0x18c>)
 800dc34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc36:	4b1a      	ldr	r3, [pc, #104]	@ (800dca0 <pvPortMalloc+0x18c>)
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dca8 <pvPortMalloc+0x194>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d203      	bcs.n	800dc4a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc42:	4b17      	ldr	r3, [pc, #92]	@ (800dca0 <pvPortMalloc+0x18c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a18      	ldr	r2, [pc, #96]	@ (800dca8 <pvPortMalloc+0x194>)
 800dc48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	4b13      	ldr	r3, [pc, #76]	@ (800dc9c <pvPortMalloc+0x188>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	431a      	orrs	r2, r3
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc5e:	4b13      	ldr	r3, [pc, #76]	@ (800dcac <pvPortMalloc+0x198>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	3301      	adds	r3, #1
 800dc64:	4a11      	ldr	r2, [pc, #68]	@ (800dcac <pvPortMalloc+0x198>)
 800dc66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc68:	f001 fb94 	bl	800f394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	f003 0307 	and.w	r3, r3, #7
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00b      	beq.n	800dc8e <pvPortMalloc+0x17a>
	__asm volatile
 800dc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	60fb      	str	r3, [r7, #12]
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	e7fd      	b.n	800dc8a <pvPortMalloc+0x176>
	return pvReturn;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3728      	adds	r7, #40	@ 0x28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	2400ded8 	.word	0x2400ded8
 800dc9c:	2400deec 	.word	0x2400deec
 800dca0:	2400dedc 	.word	0x2400dedc
 800dca4:	2400ded0 	.word	0x2400ded0
 800dca8:	2400dee0 	.word	0x2400dee0
 800dcac:	2400dee4 	.word	0x2400dee4

0800dcb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d04f      	beq.n	800dd62 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dcc2:	2308      	movs	r3, #8
 800dcc4:	425b      	negs	r3, r3
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	4413      	add	r3, r2
 800dcca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	685a      	ldr	r2, [r3, #4]
 800dcd4:	4b25      	ldr	r3, [pc, #148]	@ (800dd6c <vPortFree+0xbc>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4013      	ands	r3, r2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10b      	bne.n	800dcf6 <vPortFree+0x46>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	60fb      	str	r3, [r7, #12]
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	e7fd      	b.n	800dcf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <vPortFree+0x66>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	60bb      	str	r3, [r7, #8]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	4b14      	ldr	r3, [pc, #80]	@ (800dd6c <vPortFree+0xbc>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4013      	ands	r3, r2
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d01e      	beq.n	800dd62 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d11a      	bne.n	800dd62 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	4b0e      	ldr	r3, [pc, #56]	@ (800dd6c <vPortFree+0xbc>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	43db      	mvns	r3, r3
 800dd36:	401a      	ands	r2, r3
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd3c:	f001 fb1c 	bl	800f378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	685a      	ldr	r2, [r3, #4]
 800dd44:	4b0a      	ldr	r3, [pc, #40]	@ (800dd70 <vPortFree+0xc0>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4413      	add	r3, r2
 800dd4a:	4a09      	ldr	r2, [pc, #36]	@ (800dd70 <vPortFree+0xc0>)
 800dd4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd4e:	6938      	ldr	r0, [r7, #16]
 800dd50:	f000 f874 	bl	800de3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd54:	4b07      	ldr	r3, [pc, #28]	@ (800dd74 <vPortFree+0xc4>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	4a06      	ldr	r2, [pc, #24]	@ (800dd74 <vPortFree+0xc4>)
 800dd5c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd5e:	f001 fb19 	bl	800f394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd62:	bf00      	nop
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	2400deec 	.word	0x2400deec
 800dd70:	2400dedc 	.word	0x2400dedc
 800dd74:	2400dee8 	.word	0x2400dee8

0800dd78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd7e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800dd82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd84:	4b27      	ldr	r3, [pc, #156]	@ (800de24 <prvHeapInit+0xac>)
 800dd86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f003 0307 	and.w	r3, r3, #7
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00c      	beq.n	800ddac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3307      	adds	r3, #7
 800dd96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f023 0307 	bic.w	r3, r3, #7
 800dd9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	4a1f      	ldr	r2, [pc, #124]	@ (800de24 <prvHeapInit+0xac>)
 800dda8:	4413      	add	r3, r2
 800ddaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddb0:	4a1d      	ldr	r2, [pc, #116]	@ (800de28 <prvHeapInit+0xb0>)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ddb6:	4b1c      	ldr	r3, [pc, #112]	@ (800de28 <prvHeapInit+0xb0>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ddc4:	2208      	movs	r2, #8
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	1a9b      	subs	r3, r3, r2
 800ddca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f023 0307 	bic.w	r3, r3, #7
 800ddd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4a15      	ldr	r2, [pc, #84]	@ (800de2c <prvHeapInit+0xb4>)
 800ddd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ddda:	4b14      	ldr	r3, [pc, #80]	@ (800de2c <prvHeapInit+0xb4>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2200      	movs	r2, #0
 800dde0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <prvHeapInit+0xb4>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	1ad2      	subs	r2, r2, r3
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	@ (800de2c <prvHeapInit+0xb4>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	4a0a      	ldr	r2, [pc, #40]	@ (800de30 <prvHeapInit+0xb8>)
 800de06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	4a09      	ldr	r2, [pc, #36]	@ (800de34 <prvHeapInit+0xbc>)
 800de0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de10:	4b09      	ldr	r3, [pc, #36]	@ (800de38 <prvHeapInit+0xc0>)
 800de12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800de16:	601a      	str	r2, [r3, #0]
}
 800de18:	bf00      	nop
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	2400a2d0 	.word	0x2400a2d0
 800de28:	2400ded0 	.word	0x2400ded0
 800de2c:	2400ded8 	.word	0x2400ded8
 800de30:	2400dee0 	.word	0x2400dee0
 800de34:	2400dedc 	.word	0x2400dedc
 800de38:	2400deec 	.word	0x2400deec

0800de3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de44:	4b28      	ldr	r3, [pc, #160]	@ (800dee8 <prvInsertBlockIntoFreeList+0xac>)
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e002      	b.n	800de50 <prvInsertBlockIntoFreeList+0x14>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	429a      	cmp	r2, r3
 800de58:	d8f7      	bhi.n	800de4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	4413      	add	r3, r2
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d108      	bne.n	800de7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	441a      	add	r2, r3
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	441a      	add	r2, r3
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d118      	bne.n	800dec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	4b15      	ldr	r3, [pc, #84]	@ (800deec <prvInsertBlockIntoFreeList+0xb0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d00d      	beq.n	800deba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	441a      	add	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	e008      	b.n	800decc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800deba:	4b0c      	ldr	r3, [pc, #48]	@ (800deec <prvInsertBlockIntoFreeList+0xb0>)
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	e003      	b.n	800decc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d002      	beq.n	800deda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800deda:	bf00      	nop
 800dedc:	3714      	adds	r7, #20
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	2400ded0 	.word	0x2400ded0
 800deec:	2400ded8 	.word	0x2400ded8

0800def0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f103 0208 	add.w	r2, r3, #8
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f103 0208 	add.w	r2, r3, #8
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f103 0208 	add.w	r2, r3, #8
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df3e:	bf00      	nop
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df4a:	b480      	push	{r7}
 800df4c:	b085      	sub	sp, #20
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	689a      	ldr	r2, [r3, #8]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	683a      	ldr	r2, [r7, #0]
 800df6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	683a      	ldr	r2, [r7, #0]
 800df74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	601a      	str	r2, [r3, #0]
}
 800df86:	bf00      	nop
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df92:	b480      	push	{r7}
 800df94:	b085      	sub	sp, #20
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfa8:	d103      	bne.n	800dfb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	e00c      	b.n	800dfcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	3308      	adds	r3, #8
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	e002      	b.n	800dfc0 <vListInsert+0x2e>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d2f6      	bcs.n	800dfba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	601a      	str	r2, [r3, #0]
}
 800dff8:	bf00      	nop
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	6892      	ldr	r2, [r2, #8]
 800e01a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	6852      	ldr	r2, [r2, #4]
 800e024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d103      	bne.n	800e038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	1e5a      	subs	r2, r3, #1
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3b04      	subs	r3, #4
 800e068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3b04      	subs	r3, #4
 800e076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	f023 0201 	bic.w	r2, r3, #1
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	3b04      	subs	r3, #4
 800e086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e088:	4a0c      	ldr	r2, [pc, #48]	@ (800e0bc <pxPortInitialiseStack+0x64>)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3b14      	subs	r3, #20
 800e092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3b04      	subs	r3, #4
 800e09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f06f 0202 	mvn.w	r2, #2
 800e0a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3b20      	subs	r3, #32
 800e0ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	0800e0c1 	.word	0x0800e0c1

0800e0c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0ca:	4b13      	ldr	r3, [pc, #76]	@ (800e118 <prvTaskExitError+0x58>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0d2:	d00b      	beq.n	800e0ec <prvTaskExitError+0x2c>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	60fb      	str	r3, [r7, #12]
}
 800e0e6:	bf00      	nop
 800e0e8:	bf00      	nop
 800e0ea:	e7fd      	b.n	800e0e8 <prvTaskExitError+0x28>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	60bb      	str	r3, [r7, #8]
}
 800e0fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e100:	bf00      	nop
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0fc      	beq.n	800e102 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e108:	bf00      	nop
 800e10a:	bf00      	nop
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	24000034 	.word	0x24000034
 800e11c:	00000000 	.word	0x00000000

0800e120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e120:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <pxCurrentTCBConst2>)
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	6808      	ldr	r0, [r1, #0]
 800e126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12a:	f380 8809 	msr	PSP, r0
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f380 8811 	msr	BASEPRI, r0
 800e13a:	4770      	bx	lr
 800e13c:	f3af 8000 	nop.w

0800e140 <pxCurrentTCBConst2>:
 800e140:	2400df38 	.word	0x2400df38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e144:	bf00      	nop
 800e146:	bf00      	nop

0800e148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e148:	4808      	ldr	r0, [pc, #32]	@ (800e16c <prvPortStartFirstTask+0x24>)
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	6800      	ldr	r0, [r0, #0]
 800e14e:	f380 8808 	msr	MSP, r0
 800e152:	f04f 0000 	mov.w	r0, #0
 800e156:	f380 8814 	msr	CONTROL, r0
 800e15a:	b662      	cpsie	i
 800e15c:	b661      	cpsie	f
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	df00      	svc	0
 800e168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e16a:	bf00      	nop
 800e16c:	e000ed08 	.word	0xe000ed08

0800e170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e176:	4b47      	ldr	r3, [pc, #284]	@ (800e294 <xPortStartScheduler+0x124>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a47      	ldr	r2, [pc, #284]	@ (800e298 <xPortStartScheduler+0x128>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d10b      	bne.n	800e198 <xPortStartScheduler+0x28>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	613b      	str	r3, [r7, #16]
}
 800e192:	bf00      	nop
 800e194:	bf00      	nop
 800e196:	e7fd      	b.n	800e194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e198:	4b3e      	ldr	r3, [pc, #248]	@ (800e294 <xPortStartScheduler+0x124>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a3f      	ldr	r2, [pc, #252]	@ (800e29c <xPortStartScheduler+0x12c>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d10b      	bne.n	800e1ba <xPortStartScheduler+0x4a>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	60fb      	str	r3, [r7, #12]
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop
 800e1b8:	e7fd      	b.n	800e1b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1ba:	4b39      	ldr	r3, [pc, #228]	@ (800e2a0 <xPortStartScheduler+0x130>)
 800e1bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	22ff      	movs	r2, #255	@ 0xff
 800e1ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	4b31      	ldr	r3, [pc, #196]	@ (800e2a4 <xPortStartScheduler+0x134>)
 800e1e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1e2:	4b31      	ldr	r3, [pc, #196]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e1e4:	2207      	movs	r2, #7
 800e1e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1e8:	e009      	b.n	800e1fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	4a2d      	ldr	r2, [pc, #180]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e1f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1f4:	78fb      	ldrb	r3, [r7, #3]
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1fe:	78fb      	ldrb	r3, [r7, #3]
 800e200:	b2db      	uxtb	r3, r3
 800e202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e206:	2b80      	cmp	r3, #128	@ 0x80
 800e208:	d0ef      	beq.n	800e1ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e20a:	4b27      	ldr	r3, [pc, #156]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f1c3 0307 	rsb	r3, r3, #7
 800e212:	2b04      	cmp	r3, #4
 800e214:	d00b      	beq.n	800e22e <xPortStartScheduler+0xbe>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60bb      	str	r3, [r7, #8]
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e22e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	021b      	lsls	r3, r3, #8
 800e234:	4a1c      	ldr	r2, [pc, #112]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e238:	4b1b      	ldr	r3, [pc, #108]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e240:	4a19      	ldr	r2, [pc, #100]	@ (800e2a8 <xPortStartScheduler+0x138>)
 800e242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	b2da      	uxtb	r2, r3
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e24c:	4b17      	ldr	r3, [pc, #92]	@ (800e2ac <xPortStartScheduler+0x13c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a16      	ldr	r2, [pc, #88]	@ (800e2ac <xPortStartScheduler+0x13c>)
 800e252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e258:	4b14      	ldr	r3, [pc, #80]	@ (800e2ac <xPortStartScheduler+0x13c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a13      	ldr	r2, [pc, #76]	@ (800e2ac <xPortStartScheduler+0x13c>)
 800e25e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e264:	f000 f8da 	bl	800e41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e268:	4b11      	ldr	r3, [pc, #68]	@ (800e2b0 <xPortStartScheduler+0x140>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e26e:	f000 f8f9 	bl	800e464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e272:	4b10      	ldr	r3, [pc, #64]	@ (800e2b4 <xPortStartScheduler+0x144>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a0f      	ldr	r2, [pc, #60]	@ (800e2b4 <xPortStartScheduler+0x144>)
 800e278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e27c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e27e:	f7ff ff63 	bl	800e148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e282:	f001 f9ef 	bl	800f664 <vTaskSwitchContext>
	prvTaskExitError();
 800e286:	f7ff ff1b 	bl	800e0c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	e000ed00 	.word	0xe000ed00
 800e298:	410fc271 	.word	0x410fc271
 800e29c:	410fc270 	.word	0x410fc270
 800e2a0:	e000e400 	.word	0xe000e400
 800e2a4:	2400def0 	.word	0x2400def0
 800e2a8:	2400def4 	.word	0x2400def4
 800e2ac:	e000ed20 	.word	0xe000ed20
 800e2b0:	24000034 	.word	0x24000034
 800e2b4:	e000ef34 	.word	0xe000ef34

0800e2b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	607b      	str	r3, [r7, #4]
}
 800e2d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2d2:	4b10      	ldr	r3, [pc, #64]	@ (800e314 <vPortEnterCritical+0x5c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	4a0e      	ldr	r2, [pc, #56]	@ (800e314 <vPortEnterCritical+0x5c>)
 800e2da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e314 <vPortEnterCritical+0x5c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d110      	bne.n	800e306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e318 <vPortEnterCritical+0x60>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00b      	beq.n	800e306 <vPortEnterCritical+0x4e>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	603b      	str	r3, [r7, #0]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <vPortEnterCritical+0x4a>
	}
}
 800e306:	bf00      	nop
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	24000034 	.word	0x24000034
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e322:	4b12      	ldr	r3, [pc, #72]	@ (800e36c <vPortExitCritical+0x50>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10b      	bne.n	800e342 <vPortExitCritical+0x26>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	607b      	str	r3, [r7, #4]
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	e7fd      	b.n	800e33e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e342:	4b0a      	ldr	r3, [pc, #40]	@ (800e36c <vPortExitCritical+0x50>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3b01      	subs	r3, #1
 800e348:	4a08      	ldr	r2, [pc, #32]	@ (800e36c <vPortExitCritical+0x50>)
 800e34a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e34c:	4b07      	ldr	r3, [pc, #28]	@ (800e36c <vPortExitCritical+0x50>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <vPortExitCritical+0x44>
 800e354:	2300      	movs	r3, #0
 800e356:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e35e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	24000034 	.word	0x24000034

0800e370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e370:	f3ef 8009 	mrs	r0, PSP
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	4b15      	ldr	r3, [pc, #84]	@ (800e3d0 <pxCurrentTCBConst>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	f01e 0f10 	tst.w	lr, #16
 800e380:	bf08      	it	eq
 800e382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e394:	f380 8811 	msr	BASEPRI, r0
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f001 f960 	bl	800f664 <vTaskSwitchContext>
 800e3a4:	f04f 0000 	mov.w	r0, #0
 800e3a8:	f380 8811 	msr	BASEPRI, r0
 800e3ac:	bc09      	pop	{r0, r3}
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	6808      	ldr	r0, [r1, #0]
 800e3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b6:	f01e 0f10 	tst.w	lr, #16
 800e3ba:	bf08      	it	eq
 800e3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3c0:	f380 8809 	msr	PSP, r0
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <pxCurrentTCBConst>:
 800e3d0:	2400df38 	.word	0x2400df38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop

0800e3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	607b      	str	r3, [r7, #4]
}
 800e3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3f2:	f001 f87d 	bl	800f4f0 <xTaskIncrementTick>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3fc:	4b06      	ldr	r3, [pc, #24]	@ (800e418 <xPortSysTickHandler+0x40>)
 800e3fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f383 8811 	msr	BASEPRI, r3
}
 800e40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e420:	4b0b      	ldr	r3, [pc, #44]	@ (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e426:	4b0b      	ldr	r3, [pc, #44]	@ (800e454 <vPortSetupTimerInterrupt+0x38>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	@ (800e458 <vPortSetupTimerInterrupt+0x3c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a0a      	ldr	r2, [pc, #40]	@ (800e45c <vPortSetupTimerInterrupt+0x40>)
 800e432:	fba2 2303 	umull	r2, r3, r2, r3
 800e436:	099b      	lsrs	r3, r3, #6
 800e438:	4a09      	ldr	r2, [pc, #36]	@ (800e460 <vPortSetupTimerInterrupt+0x44>)
 800e43a:	3b01      	subs	r3, #1
 800e43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e43e:	4b04      	ldr	r3, [pc, #16]	@ (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e440:	2207      	movs	r2, #7
 800e442:	601a      	str	r2, [r3, #0]
}
 800e444:	bf00      	nop
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	e000e010 	.word	0xe000e010
 800e454:	e000e018 	.word	0xe000e018
 800e458:	24000000 	.word	0x24000000
 800e45c:	10624dd3 	.word	0x10624dd3
 800e460:	e000e014 	.word	0xe000e014

0800e464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e474 <vPortEnableVFP+0x10>
 800e468:	6801      	ldr	r1, [r0, #0]
 800e46a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e46e:	6001      	str	r1, [r0, #0]
 800e470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e472:	bf00      	nop
 800e474:	e000ed88 	.word	0xe000ed88

0800e478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e47e:	f3ef 8305 	mrs	r3, IPSR
 800e482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b0f      	cmp	r3, #15
 800e488:	d915      	bls.n	800e4b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e48a:	4a18      	ldr	r2, [pc, #96]	@ (800e4ec <vPortValidateInterruptPriority+0x74>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e494:	4b16      	ldr	r3, [pc, #88]	@ (800e4f0 <vPortValidateInterruptPriority+0x78>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	7afa      	ldrb	r2, [r7, #11]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d20b      	bcs.n	800e4b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	607b      	str	r3, [r7, #4]
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	e7fd      	b.n	800e4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f4 <vPortValidateInterruptPriority+0x7c>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e4be:	4b0e      	ldr	r3, [pc, #56]	@ (800e4f8 <vPortValidateInterruptPriority+0x80>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d90b      	bls.n	800e4de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	603b      	str	r3, [r7, #0]
}
 800e4d8:	bf00      	nop
 800e4da:	bf00      	nop
 800e4dc:	e7fd      	b.n	800e4da <vPortValidateInterruptPriority+0x62>
	}
 800e4de:	bf00      	nop
 800e4e0:	3714      	adds	r7, #20
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	e000e3f0 	.word	0xe000e3f0
 800e4f0:	2400def0 	.word	0x2400def0
 800e4f4:	e000ed0c 	.word	0xe000ed0c
 800e4f8:	2400def4 	.word	0x2400def4

0800e4fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10b      	bne.n	800e528 <xQueueGenericReset+0x2c>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	60bb      	str	r3, [r7, #8]
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	e7fd      	b.n	800e524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e528:	f7ff fec6 	bl	800e2b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e534:	68f9      	ldr	r1, [r7, #12]
 800e536:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e538:	fb01 f303 	mul.w	r3, r1, r3
 800e53c:	441a      	add	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e558:	3b01      	subs	r3, #1
 800e55a:	68f9      	ldr	r1, [r7, #12]
 800e55c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e55e:	fb01 f303 	mul.w	r3, r1, r3
 800e562:	441a      	add	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	22ff      	movs	r2, #255	@ 0xff
 800e56c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	22ff      	movs	r2, #255	@ 0xff
 800e574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d114      	bne.n	800e5a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01a      	beq.n	800e5bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3310      	adds	r3, #16
 800e58a:	4618      	mov	r0, r3
 800e58c:	f001 f91a 	bl	800f7c4 <xTaskRemoveFromEventList>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d012      	beq.n	800e5bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e596:	4b0d      	ldr	r3, [pc, #52]	@ (800e5cc <xQueueGenericReset+0xd0>)
 800e598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	e009      	b.n	800e5bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3310      	adds	r3, #16
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7ff fc9f 	bl	800def0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3324      	adds	r3, #36	@ 0x24
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff fc9a 	bl	800def0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e5bc:	f7ff feae 	bl	800e31c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e5c0:	2301      	movs	r3, #1
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed04 	.word	0xe000ed04

0800e5d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08e      	sub	sp, #56	@ 0x38
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10b      	bne.n	800e5fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e5f6:	bf00      	nop
 800e5f8:	bf00      	nop
 800e5fa:	e7fd      	b.n	800e5f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10b      	bne.n	800e61a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e614:	bf00      	nop
 800e616:	bf00      	nop
 800e618:	e7fd      	b.n	800e616 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <xQueueGenericCreateStatic+0x56>
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <xQueueGenericCreateStatic+0x5a>
 800e626:	2301      	movs	r3, #1
 800e628:	e000      	b.n	800e62c <xQueueGenericCreateStatic+0x5c>
 800e62a:	2300      	movs	r3, #0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10b      	bne.n	800e648 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	623b      	str	r3, [r7, #32]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d102      	bne.n	800e654 <xQueueGenericCreateStatic+0x84>
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <xQueueGenericCreateStatic+0x88>
 800e654:	2301      	movs	r3, #1
 800e656:	e000      	b.n	800e65a <xQueueGenericCreateStatic+0x8a>
 800e658:	2300      	movs	r3, #0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10b      	bne.n	800e676 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	61fb      	str	r3, [r7, #28]
}
 800e670:	bf00      	nop
 800e672:	bf00      	nop
 800e674:	e7fd      	b.n	800e672 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e676:	2350      	movs	r3, #80	@ 0x50
 800e678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b50      	cmp	r3, #80	@ 0x50
 800e67e:	d00b      	beq.n	800e698 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	61bb      	str	r3, [r7, #24]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e698:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00d      	beq.n	800e6c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e6ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	68b9      	ldr	r1, [r7, #8]
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f000 f805 	bl	800e6ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3730      	adds	r7, #48	@ 0x30
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	60f8      	str	r0, [r7, #12]
 800e6d2:	60b9      	str	r1, [r7, #8]
 800e6d4:	607a      	str	r2, [r7, #4]
 800e6d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d103      	bne.n	800e6e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	69ba      	ldr	r2, [r7, #24]
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	e002      	b.n	800e6ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	69b8      	ldr	r0, [r7, #24]
 800e6fc:	f7ff fefe 	bl	800e4fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	78fa      	ldrb	r2, [r7, #3]
 800e704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e708:	bf00      	nop
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08e      	sub	sp, #56	@ 0x38
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
 800e71c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e71e:	2300      	movs	r3, #0
 800e720:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10b      	bne.n	800e744 <xQueueGenericSend+0x34>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	e7fd      	b.n	800e740 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d103      	bne.n	800e752 <xQueueGenericSend+0x42>
 800e74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <xQueueGenericSend+0x46>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <xQueueGenericSend+0x48>
 800e756:	2300      	movs	r3, #0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10b      	bne.n	800e774 <xQueueGenericSend+0x64>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
 800e772:	e7fd      	b.n	800e770 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b02      	cmp	r3, #2
 800e778:	d103      	bne.n	800e782 <xQueueGenericSend+0x72>
 800e77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <xQueueGenericSend+0x76>
 800e782:	2301      	movs	r3, #1
 800e784:	e000      	b.n	800e788 <xQueueGenericSend+0x78>
 800e786:	2300      	movs	r3, #0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <xQueueGenericSend+0x94>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	623b      	str	r3, [r7, #32]
}
 800e79e:	bf00      	nop
 800e7a0:	bf00      	nop
 800e7a2:	e7fd      	b.n	800e7a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7a4:	f001 f9f6 	bl	800fb94 <xTaskGetSchedulerState>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d102      	bne.n	800e7b4 <xQueueGenericSend+0xa4>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d101      	bne.n	800e7b8 <xQueueGenericSend+0xa8>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e000      	b.n	800e7ba <xQueueGenericSend+0xaa>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10b      	bne.n	800e7d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	61fb      	str	r3, [r7, #28]
}
 800e7d0:	bf00      	nop
 800e7d2:	bf00      	nop
 800e7d4:	e7fd      	b.n	800e7d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7d6:	f7ff fd6f 	bl	800e2b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d302      	bcc.n	800e7ec <xQueueGenericSend+0xdc>
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d129      	bne.n	800e840 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	68b9      	ldr	r1, [r7, #8]
 800e7f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7f2:	f000 fa0f 	bl	800ec14 <prvCopyDataToQueue>
 800e7f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d010      	beq.n	800e822 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e802:	3324      	adds	r3, #36	@ 0x24
 800e804:	4618      	mov	r0, r3
 800e806:	f000 ffdd 	bl	800f7c4 <xTaskRemoveFromEventList>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d013      	beq.n	800e838 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e810:	4b3f      	ldr	r3, [pc, #252]	@ (800e910 <xQueueGenericSend+0x200>)
 800e812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	e00a      	b.n	800e838 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d007      	beq.n	800e838 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e828:	4b39      	ldr	r3, [pc, #228]	@ (800e910 <xQueueGenericSend+0x200>)
 800e82a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e82e:	601a      	str	r2, [r3, #0]
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e838:	f7ff fd70 	bl	800e31c <vPortExitCritical>
				return pdPASS;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e063      	b.n	800e908 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d103      	bne.n	800e84e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e846:	f7ff fd69 	bl	800e31c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e05c      	b.n	800e908 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e854:	f107 0314 	add.w	r3, r7, #20
 800e858:	4618      	mov	r0, r3
 800e85a:	f001 f83f 	bl	800f8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e85e:	2301      	movs	r3, #1
 800e860:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e862:	f7ff fd5b 	bl	800e31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e866:	f000 fd87 	bl	800f378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e86a:	f7ff fd25 	bl	800e2b8 <vPortEnterCritical>
 800e86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e874:	b25b      	sxtb	r3, r3
 800e876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e87a:	d103      	bne.n	800e884 <xQueueGenericSend+0x174>
 800e87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e886:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e88a:	b25b      	sxtb	r3, r3
 800e88c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e890:	d103      	bne.n	800e89a <xQueueGenericSend+0x18a>
 800e892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e894:	2200      	movs	r2, #0
 800e896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e89a:	f7ff fd3f 	bl	800e31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e89e:	1d3a      	adds	r2, r7, #4
 800e8a0:	f107 0314 	add.w	r3, r7, #20
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f001 f82e 	bl	800f908 <xTaskCheckForTimeOut>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d124      	bne.n	800e8fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e8b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8b4:	f000 faa6 	bl	800ee04 <prvIsQueueFull>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d018      	beq.n	800e8f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c0:	3310      	adds	r3, #16
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 ff2a 	bl	800f720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e8cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8ce:	f000 fa31 	bl	800ed34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e8d2:	f000 fd5f 	bl	800f394 <xTaskResumeAll>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f47f af7c 	bne.w	800e7d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e8de:	4b0c      	ldr	r3, [pc, #48]	@ (800e910 <xQueueGenericSend+0x200>)
 800e8e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	e772      	b.n	800e7d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e8f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8f2:	f000 fa1f 	bl	800ed34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8f6:	f000 fd4d 	bl	800f394 <xTaskResumeAll>
 800e8fa:	e76c      	b.n	800e7d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8fe:	f000 fa19 	bl	800ed34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e902:	f000 fd47 	bl	800f394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3738      	adds	r7, #56	@ 0x38
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	e000ed04 	.word	0xe000ed04

0800e914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b090      	sub	sp, #64	@ 0x40
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10b      	bne.n	800e944 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e93e:	bf00      	nop
 800e940:	bf00      	nop
 800e942:	e7fd      	b.n	800e940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d103      	bne.n	800e952 <xQueueGenericSendFromISR+0x3e>
 800e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <xQueueGenericSendFromISR+0x42>
 800e952:	2301      	movs	r3, #1
 800e954:	e000      	b.n	800e958 <xQueueGenericSendFromISR+0x44>
 800e956:	2300      	movs	r3, #0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10b      	bne.n	800e974 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b02      	cmp	r3, #2
 800e978:	d103      	bne.n	800e982 <xQueueGenericSendFromISR+0x6e>
 800e97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d101      	bne.n	800e986 <xQueueGenericSendFromISR+0x72>
 800e982:	2301      	movs	r3, #1
 800e984:	e000      	b.n	800e988 <xQueueGenericSendFromISR+0x74>
 800e986:	2300      	movs	r3, #0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10b      	bne.n	800e9a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	623b      	str	r3, [r7, #32]
}
 800e99e:	bf00      	nop
 800e9a0:	bf00      	nop
 800e9a2:	e7fd      	b.n	800e9a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9a4:	f7ff fd68 	bl	800e478 <vPortValidateInterruptPriority>
	__asm volatile
 800e9a8:	f3ef 8211 	mrs	r2, BASEPRI
 800e9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	61fa      	str	r2, [r7, #28]
 800e9be:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e9c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d302      	bcc.n	800e9d6 <xQueueGenericSendFromISR+0xc2>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	d12f      	bne.n	800ea36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	68b9      	ldr	r1, [r7, #8]
 800e9ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e9ec:	f000 f912 	bl	800ec14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e9f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9f8:	d112      	bne.n	800ea20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d016      	beq.n	800ea30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea04:	3324      	adds	r3, #36	@ 0x24
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 fedc 	bl	800f7c4 <xTaskRemoveFromEventList>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00e      	beq.n	800ea30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00b      	beq.n	800ea30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	e007      	b.n	800ea30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ea24:	3301      	adds	r3, #1
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	b25a      	sxtb	r2, r3
 800ea2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ea30:	2301      	movs	r3, #1
 800ea32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ea34:	e001      	b.n	800ea3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea36:	2300      	movs	r3, #0
 800ea38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea3c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	f383 8811 	msr	BASEPRI, r3
}
 800ea44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3740      	adds	r7, #64	@ 0x40
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b08c      	sub	sp, #48	@ 0x30
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10b      	bne.n	800ea82 <xQueueReceive+0x32>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	623b      	str	r3, [r7, #32]
}
 800ea7c:	bf00      	nop
 800ea7e:	bf00      	nop
 800ea80:	e7fd      	b.n	800ea7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d103      	bne.n	800ea90 <xQueueReceive+0x40>
 800ea88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <xQueueReceive+0x44>
 800ea90:	2301      	movs	r3, #1
 800ea92:	e000      	b.n	800ea96 <xQueueReceive+0x46>
 800ea94:	2300      	movs	r3, #0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10b      	bne.n	800eab2 <xQueueReceive+0x62>
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	61fb      	str	r3, [r7, #28]
}
 800eaac:	bf00      	nop
 800eaae:	bf00      	nop
 800eab0:	e7fd      	b.n	800eaae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eab2:	f001 f86f 	bl	800fb94 <xTaskGetSchedulerState>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d102      	bne.n	800eac2 <xQueueReceive+0x72>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <xQueueReceive+0x76>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <xQueueReceive+0x78>
 800eac6:	2300      	movs	r3, #0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10b      	bne.n	800eae4 <xQueueReceive+0x94>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	61bb      	str	r3, [r7, #24]
}
 800eade:	bf00      	nop
 800eae0:	bf00      	nop
 800eae2:	e7fd      	b.n	800eae0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eae4:	f7ff fbe8 	bl	800e2b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d01f      	beq.n	800eb34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eaf4:	68b9      	ldr	r1, [r7, #8]
 800eaf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaf8:	f000 f8f6 	bl	800ece8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	1e5a      	subs	r2, r3, #1
 800eb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00f      	beq.n	800eb2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0e:	3310      	adds	r3, #16
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 fe57 	bl	800f7c4 <xTaskRemoveFromEventList>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d007      	beq.n	800eb2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb1c:	4b3c      	ldr	r3, [pc, #240]	@ (800ec10 <xQueueReceive+0x1c0>)
 800eb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb2c:	f7ff fbf6 	bl	800e31c <vPortExitCritical>
				return pdPASS;
 800eb30:	2301      	movs	r3, #1
 800eb32:	e069      	b.n	800ec08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d103      	bne.n	800eb42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb3a:	f7ff fbef 	bl	800e31c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e062      	b.n	800ec08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d106      	bne.n	800eb56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb48:	f107 0310 	add.w	r3, r7, #16
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f000 fec5 	bl	800f8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb52:	2301      	movs	r3, #1
 800eb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb56:	f7ff fbe1 	bl	800e31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb5a:	f000 fc0d 	bl	800f378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb5e:	f7ff fbab 	bl	800e2b8 <vPortEnterCritical>
 800eb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb68:	b25b      	sxtb	r3, r3
 800eb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb6e:	d103      	bne.n	800eb78 <xQueueReceive+0x128>
 800eb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb7e:	b25b      	sxtb	r3, r3
 800eb80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb84:	d103      	bne.n	800eb8e <xQueueReceive+0x13e>
 800eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb8e:	f7ff fbc5 	bl	800e31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb92:	1d3a      	adds	r2, r7, #4
 800eb94:	f107 0310 	add.w	r3, r7, #16
 800eb98:	4611      	mov	r1, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 feb4 	bl	800f908 <xTaskCheckForTimeOut>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d123      	bne.n	800ebee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eba8:	f000 f916 	bl	800edd8 <prvIsQueueEmpty>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d017      	beq.n	800ebe2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb4:	3324      	adds	r3, #36	@ 0x24
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 fdb0 	bl	800f720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebc2:	f000 f8b7 	bl	800ed34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebc6:	f000 fbe5 	bl	800f394 <xTaskResumeAll>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d189      	bne.n	800eae4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ebd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ec10 <xQueueReceive+0x1c0>)
 800ebd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	e780      	b.n	800eae4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ebe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebe4:	f000 f8a6 	bl	800ed34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebe8:	f000 fbd4 	bl	800f394 <xTaskResumeAll>
 800ebec:	e77a      	b.n	800eae4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ebee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebf0:	f000 f8a0 	bl	800ed34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebf4:	f000 fbce 	bl	800f394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebfa:	f000 f8ed 	bl	800edd8 <prvIsQueueEmpty>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f43f af6f 	beq.w	800eae4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3730      	adds	r7, #48	@ 0x30
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	e000ed04 	.word	0xe000ed04

0800ec14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10d      	bne.n	800ec4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d14d      	bne.n	800ecd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 ffc6 	bl	800fbd0 <xTaskPriorityDisinherit>
 800ec44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	609a      	str	r2, [r3, #8]
 800ec4c:	e043      	b.n	800ecd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d119      	bne.n	800ec88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6858      	ldr	r0, [r3, #4]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	68b9      	ldr	r1, [r7, #8]
 800ec60:	f00f fb2b 	bl	801e2ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec6c:	441a      	add	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d32b      	bcc.n	800ecd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	605a      	str	r2, [r3, #4]
 800ec86:	e026      	b.n	800ecd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	68d8      	ldr	r0, [r3, #12]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec90:	461a      	mov	r2, r3
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	f00f fb11 	bl	801e2ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68da      	ldr	r2, [r3, #12]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca0:	425b      	negs	r3, r3
 800eca2:	441a      	add	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	68da      	ldr	r2, [r3, #12]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d207      	bcs.n	800ecc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	689a      	ldr	r2, [r3, #8]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecbc:	425b      	negs	r3, r3
 800ecbe:	441a      	add	r2, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d105      	bne.n	800ecd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d002      	beq.n	800ecd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ecde:	697b      	ldr	r3, [r7, #20]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d018      	beq.n	800ed2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68da      	ldr	r2, [r3, #12]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed02:	441a      	add	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	68da      	ldr	r2, [r3, #12]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d303      	bcc.n	800ed1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	68d9      	ldr	r1, [r3, #12]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed24:	461a      	mov	r2, r3
 800ed26:	6838      	ldr	r0, [r7, #0]
 800ed28:	f00f fac7 	bl	801e2ba <memcpy>
	}
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed3c:	f7ff fabc 	bl	800e2b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed48:	e011      	b.n	800ed6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d012      	beq.n	800ed78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3324      	adds	r3, #36	@ 0x24
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 fd34 	bl	800f7c4 <xTaskRemoveFromEventList>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed62:	f000 fe35 	bl	800f9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	dce9      	bgt.n	800ed4a <prvUnlockQueue+0x16>
 800ed76:	e000      	b.n	800ed7a <prvUnlockQueue+0x46>
					break;
 800ed78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	22ff      	movs	r2, #255	@ 0xff
 800ed7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ed82:	f7ff facb 	bl	800e31c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed86:	f7ff fa97 	bl	800e2b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed92:	e011      	b.n	800edb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d012      	beq.n	800edc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3310      	adds	r3, #16
 800eda0:	4618      	mov	r0, r3
 800eda2:	f000 fd0f 	bl	800f7c4 <xTaskRemoveFromEventList>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800edac:	f000 fe10 	bl	800f9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
 800edb2:	3b01      	subs	r3, #1
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dce9      	bgt.n	800ed94 <prvUnlockQueue+0x60>
 800edc0:	e000      	b.n	800edc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800edc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	22ff      	movs	r2, #255	@ 0xff
 800edc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800edcc:	f7ff faa6 	bl	800e31c <vPortExitCritical>
}
 800edd0:	bf00      	nop
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ede0:	f7ff fa6a 	bl	800e2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d102      	bne.n	800edf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800edec:	2301      	movs	r3, #1
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e001      	b.n	800edf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800edf2:	2300      	movs	r3, #0
 800edf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800edf6:	f7ff fa91 	bl	800e31c <vPortExitCritical>

	return xReturn;
 800edfa:	68fb      	ldr	r3, [r7, #12]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee0c:	f7ff fa54 	bl	800e2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d102      	bne.n	800ee22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	e001      	b.n	800ee26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee22:	2300      	movs	r3, #0
 800ee24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee26:	f7ff fa79 	bl	800e31c <vPortExitCritical>

	return xReturn;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee3e:	2300      	movs	r3, #0
 800ee40:	60fb      	str	r3, [r7, #12]
 800ee42:	e014      	b.n	800ee6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee44:	4a0f      	ldr	r2, [pc, #60]	@ (800ee84 <vQueueAddToRegistry+0x50>)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10b      	bne.n	800ee68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee50:	490c      	ldr	r1, [pc, #48]	@ (800ee84 <vQueueAddToRegistry+0x50>)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	683a      	ldr	r2, [r7, #0]
 800ee56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ee84 <vQueueAddToRegistry+0x50>)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	4413      	add	r3, r2
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ee66:	e006      	b.n	800ee76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b07      	cmp	r3, #7
 800ee72:	d9e7      	bls.n	800ee44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee74:	bf00      	nop
 800ee76:	bf00      	nop
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	2400def8 	.word	0x2400def8

0800ee88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee98:	f7ff fa0e 	bl	800e2b8 <vPortEnterCritical>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eea2:	b25b      	sxtb	r3, r3
 800eea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eea8:	d103      	bne.n	800eeb2 <vQueueWaitForMessageRestricted+0x2a>
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eeb8:	b25b      	sxtb	r3, r3
 800eeba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eebe:	d103      	bne.n	800eec8 <vQueueWaitForMessageRestricted+0x40>
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eec8:	f7ff fa28 	bl	800e31c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d106      	bne.n	800eee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	3324      	adds	r3, #36	@ 0x24
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fc45 	bl	800f76c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eee2:	6978      	ldr	r0, [r7, #20]
 800eee4:	f7ff ff26 	bl	800ed34 <prvUnlockQueue>
	}
 800eee8:	bf00      	nop
 800eeea:	3718      	adds	r7, #24
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08e      	sub	sp, #56	@ 0x38
 800eef4:	af04      	add	r7, sp, #16
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
 800eefc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eefe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10b      	bne.n	800ef1c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	623b      	str	r3, [r7, #32]
}
 800ef16:	bf00      	nop
 800ef18:	bf00      	nop
 800ef1a:	e7fd      	b.n	800ef18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10b      	bne.n	800ef3a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ef22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	61fb      	str	r3, [r7, #28]
}
 800ef34:	bf00      	nop
 800ef36:	bf00      	nop
 800ef38:	e7fd      	b.n	800ef36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ef3a:	235c      	movs	r3, #92	@ 0x5c
 800ef3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef42:	d00b      	beq.n	800ef5c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	61bb      	str	r3, [r7, #24]
}
 800ef56:	bf00      	nop
 800ef58:	bf00      	nop
 800ef5a:	e7fd      	b.n	800ef58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ef5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d01e      	beq.n	800efa2 <xTaskCreateStatic+0xb2>
 800ef64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d01b      	beq.n	800efa2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ef74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef76:	2202      	movs	r2, #2
 800ef78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9303      	str	r3, [sp, #12]
 800ef80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef82:	9302      	str	r3, [sp, #8]
 800ef84:	f107 0314 	add.w	r3, r7, #20
 800ef88:	9301      	str	r3, [sp, #4]
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	68b9      	ldr	r1, [r7, #8]
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 f850 	bl	800f03a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef9c:	f000 f8de 	bl	800f15c <prvAddNewTaskToReadyList>
 800efa0:	e001      	b.n	800efa6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800efa6:	697b      	ldr	r3, [r7, #20]
	}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3728      	adds	r7, #40	@ 0x28
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08c      	sub	sp, #48	@ 0x30
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	4613      	mov	r3, r2
 800efbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800efc0:	88fb      	ldrh	r3, [r7, #6]
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe fda5 	bl	800db14 <pvPortMalloc>
 800efca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00e      	beq.n	800eff0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800efd2:	205c      	movs	r0, #92	@ 0x5c
 800efd4:	f7fe fd9e 	bl	800db14 <pvPortMalloc>
 800efd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d003      	beq.n	800efe8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	631a      	str	r2, [r3, #48]	@ 0x30
 800efe6:	e005      	b.n	800eff4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800efe8:	6978      	ldr	r0, [r7, #20]
 800efea:	f7fe fe61 	bl	800dcb0 <vPortFree>
 800efee:	e001      	b.n	800eff4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eff0:	2300      	movs	r3, #0
 800eff2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d017      	beq.n	800f02a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f002:	88fa      	ldrh	r2, [r7, #6]
 800f004:	2300      	movs	r3, #0
 800f006:	9303      	str	r3, [sp, #12]
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	9302      	str	r3, [sp, #8]
 800f00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f00e:	9301      	str	r3, [sp, #4]
 800f010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	68b9      	ldr	r1, [r7, #8]
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 f80e 	bl	800f03a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f01e:	69f8      	ldr	r0, [r7, #28]
 800f020:	f000 f89c 	bl	800f15c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f024:	2301      	movs	r3, #1
 800f026:	61bb      	str	r3, [r7, #24]
 800f028:	e002      	b.n	800f030 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f02a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f02e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f030:	69bb      	ldr	r3, [r7, #24]
	}
 800f032:	4618      	mov	r0, r3
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b088      	sub	sp, #32
 800f03e:	af00      	add	r7, sp, #0
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f04a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	461a      	mov	r2, r3
 800f052:	21a5      	movs	r1, #165	@ 0xa5
 800f054:	f00f f868 	bl	801e128 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f062:	440b      	add	r3, r1
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	4413      	add	r3, r2
 800f068:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	f023 0307 	bic.w	r3, r3, #7
 800f070:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	f003 0307 	and.w	r3, r3, #7
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00b      	beq.n	800f094 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	617b      	str	r3, [r7, #20]
}
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
 800f092:	e7fd      	b.n	800f090 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d01f      	beq.n	800f0da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f09a:	2300      	movs	r3, #0
 800f09c:	61fb      	str	r3, [r7, #28]
 800f09e:	e012      	b.n	800f0c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	7819      	ldrb	r1, [r3, #0]
 800f0a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	3334      	adds	r3, #52	@ 0x34
 800f0b0:	460a      	mov	r2, r1
 800f0b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d006      	beq.n	800f0ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	61fb      	str	r3, [r7, #28]
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	2b0f      	cmp	r3, #15
 800f0ca:	d9e9      	bls.n	800f0a0 <prvInitialiseNewTask+0x66>
 800f0cc:	e000      	b.n	800f0d0 <prvInitialiseNewTask+0x96>
			{
				break;
 800f0ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f0d8:	e003      	b.n	800f0e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	2b37      	cmp	r3, #55	@ 0x37
 800f0e6:	d901      	bls.n	800f0ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f0e8:	2337      	movs	r3, #55	@ 0x37
 800f0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f100:	3304      	adds	r3, #4
 800f102:	4618      	mov	r0, r3
 800f104:	f7fe ff14 	bl	800df30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10a:	3318      	adds	r3, #24
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe ff0f 	bl	800df30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f126:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	2200      	movs	r2, #0
 800f12c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	68f9      	ldr	r1, [r7, #12]
 800f13a:	69b8      	ldr	r0, [r7, #24]
 800f13c:	f7fe ff8c 	bl	800e058 <pxPortInitialiseStack>
 800f140:	4602      	mov	r2, r0
 800f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f152:	bf00      	nop
 800f154:	3720      	adds	r7, #32
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
	...

0800f15c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f164:	f7ff f8a8 	bl	800e2b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f168:	4b2d      	ldr	r3, [pc, #180]	@ (800f220 <prvAddNewTaskToReadyList+0xc4>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3301      	adds	r3, #1
 800f16e:	4a2c      	ldr	r2, [pc, #176]	@ (800f220 <prvAddNewTaskToReadyList+0xc4>)
 800f170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f172:	4b2c      	ldr	r3, [pc, #176]	@ (800f224 <prvAddNewTaskToReadyList+0xc8>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d109      	bne.n	800f18e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f17a:	4a2a      	ldr	r2, [pc, #168]	@ (800f224 <prvAddNewTaskToReadyList+0xc8>)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f180:	4b27      	ldr	r3, [pc, #156]	@ (800f220 <prvAddNewTaskToReadyList+0xc4>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d110      	bne.n	800f1aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f188:	f000 fc46 	bl	800fa18 <prvInitialiseTaskLists>
 800f18c:	e00d      	b.n	800f1aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f18e:	4b26      	ldr	r3, [pc, #152]	@ (800f228 <prvAddNewTaskToReadyList+0xcc>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d109      	bne.n	800f1aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f196:	4b23      	ldr	r3, [pc, #140]	@ (800f224 <prvAddNewTaskToReadyList+0xc8>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d802      	bhi.n	800f1aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800f224 <prvAddNewTaskToReadyList+0xc8>)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f1aa:	4b20      	ldr	r3, [pc, #128]	@ (800f22c <prvAddNewTaskToReadyList+0xd0>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	4a1e      	ldr	r2, [pc, #120]	@ (800f22c <prvAddNewTaskToReadyList+0xd0>)
 800f1b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f22c <prvAddNewTaskToReadyList+0xd0>)
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f230 <prvAddNewTaskToReadyList+0xd4>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d903      	bls.n	800f1d0 <prvAddNewTaskToReadyList+0x74>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	4a18      	ldr	r2, [pc, #96]	@ (800f230 <prvAddNewTaskToReadyList+0xd4>)
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4a15      	ldr	r2, [pc, #84]	@ (800f234 <prvAddNewTaskToReadyList+0xd8>)
 800f1de:	441a      	add	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7fe feaf 	bl	800df4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f1ec:	f7ff f896 	bl	800e31c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f1f0:	4b0d      	ldr	r3, [pc, #52]	@ (800f228 <prvAddNewTaskToReadyList+0xcc>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00e      	beq.n	800f216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f224 <prvAddNewTaskToReadyList+0xc8>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f202:	429a      	cmp	r2, r3
 800f204:	d207      	bcs.n	800f216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f206:	4b0c      	ldr	r3, [pc, #48]	@ (800f238 <prvAddNewTaskToReadyList+0xdc>)
 800f208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	2400e40c 	.word	0x2400e40c
 800f224:	2400df38 	.word	0x2400df38
 800f228:	2400e418 	.word	0x2400e418
 800f22c:	2400e428 	.word	0x2400e428
 800f230:	2400e414 	.word	0x2400e414
 800f234:	2400df3c 	.word	0x2400df3c
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f244:	2300      	movs	r3, #0
 800f246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d018      	beq.n	800f280 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f24e:	4b14      	ldr	r3, [pc, #80]	@ (800f2a0 <vTaskDelay+0x64>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00b      	beq.n	800f26e <vTaskDelay+0x32>
	__asm volatile
 800f256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	60bb      	str	r3, [r7, #8]
}
 800f268:	bf00      	nop
 800f26a:	bf00      	nop
 800f26c:	e7fd      	b.n	800f26a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f26e:	f000 f883 	bl	800f378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f272:	2100      	movs	r1, #0
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fd1b 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f27a:	f000 f88b 	bl	800f394 <xTaskResumeAll>
 800f27e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d107      	bne.n	800f296 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f286:	4b07      	ldr	r3, [pc, #28]	@ (800f2a4 <vTaskDelay+0x68>)
 800f288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	2400e434 	.word	0x2400e434
 800f2a4:	e000ed04 	.word	0xe000ed04

0800f2a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08a      	sub	sp, #40	@ 0x28
 800f2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f2b6:	463a      	mov	r2, r7
 800f2b8:	1d39      	adds	r1, r7, #4
 800f2ba:	f107 0308 	add.w	r3, r7, #8
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fe fbf4 	bl	800daac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	9202      	str	r2, [sp, #8]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	460a      	mov	r2, r1
 800f2d6:	4922      	ldr	r1, [pc, #136]	@ (800f360 <vTaskStartScheduler+0xb8>)
 800f2d8:	4822      	ldr	r0, [pc, #136]	@ (800f364 <vTaskStartScheduler+0xbc>)
 800f2da:	f7ff fe09 	bl	800eef0 <xTaskCreateStatic>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	4a21      	ldr	r2, [pc, #132]	@ (800f368 <vTaskStartScheduler+0xc0>)
 800f2e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f2e4:	4b20      	ldr	r3, [pc, #128]	@ (800f368 <vTaskStartScheduler+0xc0>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e001      	b.n	800f2f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d102      	bne.n	800f302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f2fc:	f000 fd2c 	bl	800fd58 <xTimerCreateTimerTask>
 800f300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d116      	bne.n	800f336 <vTaskStartScheduler+0x8e>
	__asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	613b      	str	r3, [r7, #16]
}
 800f31a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f31c:	4b13      	ldr	r3, [pc, #76]	@ (800f36c <vTaskStartScheduler+0xc4>)
 800f31e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f322:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f324:	4b12      	ldr	r3, [pc, #72]	@ (800f370 <vTaskStartScheduler+0xc8>)
 800f326:	2201      	movs	r2, #1
 800f328:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f32a:	4b12      	ldr	r3, [pc, #72]	@ (800f374 <vTaskStartScheduler+0xcc>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f330:	f7fe ff1e 	bl	800e170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f334:	e00f      	b.n	800f356 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f33c:	d10b      	bne.n	800f356 <vTaskStartScheduler+0xae>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	60fb      	str	r3, [r7, #12]
}
 800f350:	bf00      	nop
 800f352:	bf00      	nop
 800f354:	e7fd      	b.n	800f352 <vTaskStartScheduler+0xaa>
}
 800f356:	bf00      	nop
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	0801efdc 	.word	0x0801efdc
 800f364:	0800f9e9 	.word	0x0800f9e9
 800f368:	2400e430 	.word	0x2400e430
 800f36c:	2400e42c 	.word	0x2400e42c
 800f370:	2400e418 	.word	0x2400e418
 800f374:	2400e410 	.word	0x2400e410

0800f378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f378:	b480      	push	{r7}
 800f37a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f37c:	4b04      	ldr	r3, [pc, #16]	@ (800f390 <vTaskSuspendAll+0x18>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3301      	adds	r3, #1
 800f382:	4a03      	ldr	r2, [pc, #12]	@ (800f390 <vTaskSuspendAll+0x18>)
 800f384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f386:	bf00      	nop
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	2400e434 	.word	0x2400e434

0800f394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f39a:	2300      	movs	r3, #0
 800f39c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f3a2:	4b42      	ldr	r3, [pc, #264]	@ (800f4ac <xTaskResumeAll+0x118>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d10b      	bne.n	800f3c2 <xTaskResumeAll+0x2e>
	__asm volatile
 800f3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ae:	f383 8811 	msr	BASEPRI, r3
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	f3bf 8f4f 	dsb	sy
 800f3ba:	603b      	str	r3, [r7, #0]
}
 800f3bc:	bf00      	nop
 800f3be:	bf00      	nop
 800f3c0:	e7fd      	b.n	800f3be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f3c2:	f7fe ff79 	bl	800e2b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f3c6:	4b39      	ldr	r3, [pc, #228]	@ (800f4ac <xTaskResumeAll+0x118>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	4a37      	ldr	r2, [pc, #220]	@ (800f4ac <xTaskResumeAll+0x118>)
 800f3ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3d0:	4b36      	ldr	r3, [pc, #216]	@ (800f4ac <xTaskResumeAll+0x118>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d162      	bne.n	800f49e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f3d8:	4b35      	ldr	r3, [pc, #212]	@ (800f4b0 <xTaskResumeAll+0x11c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d05e      	beq.n	800f49e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3e0:	e02f      	b.n	800f442 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e2:	4b34      	ldr	r3, [pc, #208]	@ (800f4b4 <xTaskResumeAll+0x120>)
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3318      	adds	r3, #24
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe fe08 	bl	800e004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fe fe03 	bl	800e004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f402:	4b2d      	ldr	r3, [pc, #180]	@ (800f4b8 <xTaskResumeAll+0x124>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d903      	bls.n	800f412 <xTaskResumeAll+0x7e>
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f40e:	4a2a      	ldr	r2, [pc, #168]	@ (800f4b8 <xTaskResumeAll+0x124>)
 800f410:	6013      	str	r3, [r2, #0]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f416:	4613      	mov	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4a27      	ldr	r2, [pc, #156]	@ (800f4bc <xTaskResumeAll+0x128>)
 800f420:	441a      	add	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3304      	adds	r3, #4
 800f426:	4619      	mov	r1, r3
 800f428:	4610      	mov	r0, r2
 800f42a:	f7fe fd8e 	bl	800df4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f432:	4b23      	ldr	r3, [pc, #140]	@ (800f4c0 <xTaskResumeAll+0x12c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f438:	429a      	cmp	r2, r3
 800f43a:	d302      	bcc.n	800f442 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f43c:	4b21      	ldr	r3, [pc, #132]	@ (800f4c4 <xTaskResumeAll+0x130>)
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f442:	4b1c      	ldr	r3, [pc, #112]	@ (800f4b4 <xTaskResumeAll+0x120>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1cb      	bne.n	800f3e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f450:	f000 fb80 	bl	800fb54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f454:	4b1c      	ldr	r3, [pc, #112]	@ (800f4c8 <xTaskResumeAll+0x134>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d010      	beq.n	800f482 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f460:	f000 f846 	bl	800f4f0 <xTaskIncrementTick>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d002      	beq.n	800f470 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f46a:	4b16      	ldr	r3, [pc, #88]	@ (800f4c4 <xTaskResumeAll+0x130>)
 800f46c:	2201      	movs	r2, #1
 800f46e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3b01      	subs	r3, #1
 800f474:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1f1      	bne.n	800f460 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f47c:	4b12      	ldr	r3, [pc, #72]	@ (800f4c8 <xTaskResumeAll+0x134>)
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f482:	4b10      	ldr	r3, [pc, #64]	@ (800f4c4 <xTaskResumeAll+0x130>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d009      	beq.n	800f49e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f48a:	2301      	movs	r3, #1
 800f48c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f48e:	4b0f      	ldr	r3, [pc, #60]	@ (800f4cc <xTaskResumeAll+0x138>)
 800f490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	f3bf 8f4f 	dsb	sy
 800f49a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f49e:	f7fe ff3d 	bl	800e31c <vPortExitCritical>

	return xAlreadyYielded;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	2400e434 	.word	0x2400e434
 800f4b0:	2400e40c 	.word	0x2400e40c
 800f4b4:	2400e3cc 	.word	0x2400e3cc
 800f4b8:	2400e414 	.word	0x2400e414
 800f4bc:	2400df3c 	.word	0x2400df3c
 800f4c0:	2400df38 	.word	0x2400df38
 800f4c4:	2400e420 	.word	0x2400e420
 800f4c8:	2400e41c 	.word	0x2400e41c
 800f4cc:	e000ed04 	.word	0xe000ed04

0800f4d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f4d6:	4b05      	ldr	r3, [pc, #20]	@ (800f4ec <xTaskGetTickCount+0x1c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f4dc:	687b      	ldr	r3, [r7, #4]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	2400e410 	.word	0x2400e410

0800f4f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4fa:	4b4f      	ldr	r3, [pc, #316]	@ (800f638 <xTaskIncrementTick+0x148>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f040 8090 	bne.w	800f624 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f504:	4b4d      	ldr	r3, [pc, #308]	@ (800f63c <xTaskIncrementTick+0x14c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	3301      	adds	r3, #1
 800f50a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f50c:	4a4b      	ldr	r2, [pc, #300]	@ (800f63c <xTaskIncrementTick+0x14c>)
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d121      	bne.n	800f55c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f518:	4b49      	ldr	r3, [pc, #292]	@ (800f640 <xTaskIncrementTick+0x150>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00b      	beq.n	800f53a <xTaskIncrementTick+0x4a>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	603b      	str	r3, [r7, #0]
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	e7fd      	b.n	800f536 <xTaskIncrementTick+0x46>
 800f53a:	4b41      	ldr	r3, [pc, #260]	@ (800f640 <xTaskIncrementTick+0x150>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	4b40      	ldr	r3, [pc, #256]	@ (800f644 <xTaskIncrementTick+0x154>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a3e      	ldr	r2, [pc, #248]	@ (800f640 <xTaskIncrementTick+0x150>)
 800f546:	6013      	str	r3, [r2, #0]
 800f548:	4a3e      	ldr	r2, [pc, #248]	@ (800f644 <xTaskIncrementTick+0x154>)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6013      	str	r3, [r2, #0]
 800f54e:	4b3e      	ldr	r3, [pc, #248]	@ (800f648 <xTaskIncrementTick+0x158>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	3301      	adds	r3, #1
 800f554:	4a3c      	ldr	r2, [pc, #240]	@ (800f648 <xTaskIncrementTick+0x158>)
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	f000 fafc 	bl	800fb54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f55c:	4b3b      	ldr	r3, [pc, #236]	@ (800f64c <xTaskIncrementTick+0x15c>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	429a      	cmp	r2, r3
 800f564:	d349      	bcc.n	800f5fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f566:	4b36      	ldr	r3, [pc, #216]	@ (800f640 <xTaskIncrementTick+0x150>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d104      	bne.n	800f57a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f570:	4b36      	ldr	r3, [pc, #216]	@ (800f64c <xTaskIncrementTick+0x15c>)
 800f572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f576:	601a      	str	r2, [r3, #0]
					break;
 800f578:	e03f      	b.n	800f5fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f57a:	4b31      	ldr	r3, [pc, #196]	@ (800f640 <xTaskIncrementTick+0x150>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d203      	bcs.n	800f59a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f592:	4a2e      	ldr	r2, [pc, #184]	@ (800f64c <xTaskIncrementTick+0x15c>)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f598:	e02f      	b.n	800f5fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	3304      	adds	r3, #4
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe fd30 	bl	800e004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d004      	beq.n	800f5b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	3318      	adds	r3, #24
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fe fd27 	bl	800e004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ba:	4b25      	ldr	r3, [pc, #148]	@ (800f650 <xTaskIncrementTick+0x160>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d903      	bls.n	800f5ca <xTaskIncrementTick+0xda>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c6:	4a22      	ldr	r2, [pc, #136]	@ (800f650 <xTaskIncrementTick+0x160>)
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	4413      	add	r3, r2
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4a1f      	ldr	r2, [pc, #124]	@ (800f654 <xTaskIncrementTick+0x164>)
 800f5d8:	441a      	add	r2, r3
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4619      	mov	r1, r3
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	f7fe fcb2 	bl	800df4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f658 <xTaskIncrementTick+0x168>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d3b8      	bcc.n	800f566 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5f8:	e7b5      	b.n	800f566 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f5fa:	4b17      	ldr	r3, [pc, #92]	@ (800f658 <xTaskIncrementTick+0x168>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f600:	4914      	ldr	r1, [pc, #80]	@ (800f654 <xTaskIncrementTick+0x164>)
 800f602:	4613      	mov	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	440b      	add	r3, r1
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d901      	bls.n	800f616 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f612:	2301      	movs	r3, #1
 800f614:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f616:	4b11      	ldr	r3, [pc, #68]	@ (800f65c <xTaskIncrementTick+0x16c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d007      	beq.n	800f62e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f61e:	2301      	movs	r3, #1
 800f620:	617b      	str	r3, [r7, #20]
 800f622:	e004      	b.n	800f62e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f624:	4b0e      	ldr	r3, [pc, #56]	@ (800f660 <xTaskIncrementTick+0x170>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	4a0d      	ldr	r2, [pc, #52]	@ (800f660 <xTaskIncrementTick+0x170>)
 800f62c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f62e:	697b      	ldr	r3, [r7, #20]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	2400e434 	.word	0x2400e434
 800f63c:	2400e410 	.word	0x2400e410
 800f640:	2400e3c4 	.word	0x2400e3c4
 800f644:	2400e3c8 	.word	0x2400e3c8
 800f648:	2400e424 	.word	0x2400e424
 800f64c:	2400e42c 	.word	0x2400e42c
 800f650:	2400e414 	.word	0x2400e414
 800f654:	2400df3c 	.word	0x2400df3c
 800f658:	2400df38 	.word	0x2400df38
 800f65c:	2400e420 	.word	0x2400e420
 800f660:	2400e41c 	.word	0x2400e41c

0800f664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f66a:	4b28      	ldr	r3, [pc, #160]	@ (800f70c <vTaskSwitchContext+0xa8>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d003      	beq.n	800f67a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f672:	4b27      	ldr	r3, [pc, #156]	@ (800f710 <vTaskSwitchContext+0xac>)
 800f674:	2201      	movs	r2, #1
 800f676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f678:	e042      	b.n	800f700 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800f67a:	4b25      	ldr	r3, [pc, #148]	@ (800f710 <vTaskSwitchContext+0xac>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f680:	4b24      	ldr	r3, [pc, #144]	@ (800f714 <vTaskSwitchContext+0xb0>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	60fb      	str	r3, [r7, #12]
 800f686:	e011      	b.n	800f6ac <vTaskSwitchContext+0x48>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d10b      	bne.n	800f6a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	607b      	str	r3, [r7, #4]
}
 800f6a0:	bf00      	nop
 800f6a2:	bf00      	nop
 800f6a4:	e7fd      	b.n	800f6a2 <vTaskSwitchContext+0x3e>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	60fb      	str	r3, [r7, #12]
 800f6ac:	491a      	ldr	r1, [pc, #104]	@ (800f718 <vTaskSwitchContext+0xb4>)
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	009b      	lsls	r3, r3, #2
 800f6b4:	4413      	add	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	440b      	add	r3, r1
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d0e3      	beq.n	800f688 <vTaskSwitchContext+0x24>
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	4a13      	ldr	r2, [pc, #76]	@ (800f718 <vTaskSwitchContext+0xb4>)
 800f6cc:	4413      	add	r3, r2
 800f6ce:	60bb      	str	r3, [r7, #8]
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	605a      	str	r2, [r3, #4]
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d104      	bne.n	800f6f0 <vTaskSwitchContext+0x8c>
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	685a      	ldr	r2, [r3, #4]
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	605a      	str	r2, [r3, #4]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	4a09      	ldr	r2, [pc, #36]	@ (800f71c <vTaskSwitchContext+0xb8>)
 800f6f8:	6013      	str	r3, [r2, #0]
 800f6fa:	4a06      	ldr	r2, [pc, #24]	@ (800f714 <vTaskSwitchContext+0xb0>)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6013      	str	r3, [r2, #0]
}
 800f700:	bf00      	nop
 800f702:	3714      	adds	r7, #20
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	2400e434 	.word	0x2400e434
 800f710:	2400e420 	.word	0x2400e420
 800f714:	2400e414 	.word	0x2400e414
 800f718:	2400df3c 	.word	0x2400df3c
 800f71c:	2400df38 	.word	0x2400df38

0800f720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10b      	bne.n	800f748 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	60fb      	str	r3, [r7, #12]
}
 800f742:	bf00      	nop
 800f744:	bf00      	nop
 800f746:	e7fd      	b.n	800f744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f748:	4b07      	ldr	r3, [pc, #28]	@ (800f768 <vTaskPlaceOnEventList+0x48>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3318      	adds	r3, #24
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe fc1e 	bl	800df92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f756:	2101      	movs	r1, #1
 800f758:	6838      	ldr	r0, [r7, #0]
 800f75a:	f000 faa9 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
}
 800f75e:	bf00      	nop
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	2400df38 	.word	0x2400df38

0800f76c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10b      	bne.n	800f796 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	617b      	str	r3, [r7, #20]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f796:	4b0a      	ldr	r3, [pc, #40]	@ (800f7c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	3318      	adds	r3, #24
 800f79c:	4619      	mov	r1, r3
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7fe fbd3 	bl	800df4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f7aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	68b8      	ldr	r0, [r7, #8]
 800f7b4:	f000 fa7c 	bl	800fcb0 <prvAddCurrentTaskToDelayedList>
	}
 800f7b8:	bf00      	nop
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	2400df38 	.word	0x2400df38

0800f7c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10b      	bne.n	800f7f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	60fb      	str	r3, [r7, #12]
}
 800f7ec:	bf00      	nop
 800f7ee:	bf00      	nop
 800f7f0:	e7fd      	b.n	800f7ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	3318      	adds	r3, #24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fc04 	bl	800e004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7fc:	4b1d      	ldr	r3, [pc, #116]	@ (800f874 <xTaskRemoveFromEventList+0xb0>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d11d      	bne.n	800f840 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	3304      	adds	r3, #4
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe fbfb 	bl	800e004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f812:	4b19      	ldr	r3, [pc, #100]	@ (800f878 <xTaskRemoveFromEventList+0xb4>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d903      	bls.n	800f822 <xTaskRemoveFromEventList+0x5e>
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f81e:	4a16      	ldr	r2, [pc, #88]	@ (800f878 <xTaskRemoveFromEventList+0xb4>)
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4a13      	ldr	r2, [pc, #76]	@ (800f87c <xTaskRemoveFromEventList+0xb8>)
 800f830:	441a      	add	r2, r3
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	3304      	adds	r3, #4
 800f836:	4619      	mov	r1, r3
 800f838:	4610      	mov	r0, r2
 800f83a:	f7fe fb86 	bl	800df4a <vListInsertEnd>
 800f83e:	e005      	b.n	800f84c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	3318      	adds	r3, #24
 800f844:	4619      	mov	r1, r3
 800f846:	480e      	ldr	r0, [pc, #56]	@ (800f880 <xTaskRemoveFromEventList+0xbc>)
 800f848:	f7fe fb7f 	bl	800df4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f850:	4b0c      	ldr	r3, [pc, #48]	@ (800f884 <xTaskRemoveFromEventList+0xc0>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f856:	429a      	cmp	r2, r3
 800f858:	d905      	bls.n	800f866 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f85a:	2301      	movs	r3, #1
 800f85c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f85e:	4b0a      	ldr	r3, [pc, #40]	@ (800f888 <xTaskRemoveFromEventList+0xc4>)
 800f860:	2201      	movs	r2, #1
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	e001      	b.n	800f86a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f866:	2300      	movs	r3, #0
 800f868:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f86a:	697b      	ldr	r3, [r7, #20]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	2400e434 	.word	0x2400e434
 800f878:	2400e414 	.word	0x2400e414
 800f87c:	2400df3c 	.word	0x2400df3c
 800f880:	2400e3cc 	.word	0x2400e3cc
 800f884:	2400df38 	.word	0x2400df38
 800f888:	2400e420 	.word	0x2400e420

0800f88c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10b      	bne.n	800f8b2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	60fb      	str	r3, [r7, #12]
}
 800f8ac:	bf00      	nop
 800f8ae:	bf00      	nop
 800f8b0:	e7fd      	b.n	800f8ae <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800f8b2:	f7fe fd01 	bl	800e2b8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8b6:	4b07      	ldr	r3, [pc, #28]	@ (800f8d4 <vTaskSetTimeOutState+0x48>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f8be:	4b06      	ldr	r3, [pc, #24]	@ (800f8d8 <vTaskSetTimeOutState+0x4c>)
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f8c6:	f7fe fd29 	bl	800e31c <vPortExitCritical>
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	2400e424 	.word	0x2400e424
 800f8d8:	2400e410 	.word	0x2400e410

0800f8dc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8e4:	4b06      	ldr	r3, [pc, #24]	@ (800f900 <vTaskInternalSetTimeOutState+0x24>)
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f8ec:	4b05      	ldr	r3, [pc, #20]	@ (800f904 <vTaskInternalSetTimeOutState+0x28>)
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	605a      	str	r2, [r3, #4]
}
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr
 800f900:	2400e424 	.word	0x2400e424
 800f904:	2400e410 	.word	0x2400e410

0800f908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10b      	bne.n	800f930 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	613b      	str	r3, [r7, #16]
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	e7fd      	b.n	800f92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10b      	bne.n	800f94e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60fb      	str	r3, [r7, #12]
}
 800f948:	bf00      	nop
 800f94a:	bf00      	nop
 800f94c:	e7fd      	b.n	800f94a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f94e:	f7fe fcb3 	bl	800e2b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f952:	4b1d      	ldr	r3, [pc, #116]	@ (800f9c8 <xTaskCheckForTimeOut+0xc0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	69ba      	ldr	r2, [r7, #24]
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f96a:	d102      	bne.n	800f972 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	61fb      	str	r3, [r7, #28]
 800f970:	e023      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	4b15      	ldr	r3, [pc, #84]	@ (800f9cc <xTaskCheckForTimeOut+0xc4>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d007      	beq.n	800f98e <xTaskCheckForTimeOut+0x86>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	429a      	cmp	r2, r3
 800f986:	d302      	bcc.n	800f98e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f988:	2301      	movs	r3, #1
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	e015      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	429a      	cmp	r2, r3
 800f996:	d20b      	bcs.n	800f9b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	1ad2      	subs	r2, r2, r3
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff ff99 	bl	800f8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	61fb      	str	r3, [r7, #28]
 800f9ae:	e004      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f9ba:	f7fe fcaf 	bl	800e31c <vPortExitCritical>

	return xReturn;
 800f9be:	69fb      	ldr	r3, [r7, #28]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3720      	adds	r7, #32
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	2400e410 	.word	0x2400e410
 800f9cc:	2400e424 	.word	0x2400e424

0800f9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f9d4:	4b03      	ldr	r3, [pc, #12]	@ (800f9e4 <vTaskMissedYield+0x14>)
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	601a      	str	r2, [r3, #0]
}
 800f9da:	bf00      	nop
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	2400e420 	.word	0x2400e420

0800f9e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f9f0:	f000 f852 	bl	800fa98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f9f4:	4b06      	ldr	r3, [pc, #24]	@ (800fa10 <prvIdleTask+0x28>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d9f9      	bls.n	800f9f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f9fc:	4b05      	ldr	r3, [pc, #20]	@ (800fa14 <prvIdleTask+0x2c>)
 800f9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa02:	601a      	str	r2, [r3, #0]
 800fa04:	f3bf 8f4f 	dsb	sy
 800fa08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa0c:	e7f0      	b.n	800f9f0 <prvIdleTask+0x8>
 800fa0e:	bf00      	nop
 800fa10:	2400df3c 	.word	0x2400df3c
 800fa14:	e000ed04 	.word	0xe000ed04

0800fa18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa1e:	2300      	movs	r3, #0
 800fa20:	607b      	str	r3, [r7, #4]
 800fa22:	e00c      	b.n	800fa3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a12      	ldr	r2, [pc, #72]	@ (800fa78 <prvInitialiseTaskLists+0x60>)
 800fa30:	4413      	add	r3, r2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe fa5c 	bl	800def0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	607b      	str	r3, [r7, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2b37      	cmp	r3, #55	@ 0x37
 800fa42:	d9ef      	bls.n	800fa24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa44:	480d      	ldr	r0, [pc, #52]	@ (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa46:	f7fe fa53 	bl	800def0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa4a:	480d      	ldr	r0, [pc, #52]	@ (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa4c:	f7fe fa50 	bl	800def0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa50:	480c      	ldr	r0, [pc, #48]	@ (800fa84 <prvInitialiseTaskLists+0x6c>)
 800fa52:	f7fe fa4d 	bl	800def0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa56:	480c      	ldr	r0, [pc, #48]	@ (800fa88 <prvInitialiseTaskLists+0x70>)
 800fa58:	f7fe fa4a 	bl	800def0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa5c:	480b      	ldr	r0, [pc, #44]	@ (800fa8c <prvInitialiseTaskLists+0x74>)
 800fa5e:	f7fe fa47 	bl	800def0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa62:	4b0b      	ldr	r3, [pc, #44]	@ (800fa90 <prvInitialiseTaskLists+0x78>)
 800fa64:	4a05      	ldr	r2, [pc, #20]	@ (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fa68:	4b0a      	ldr	r3, [pc, #40]	@ (800fa94 <prvInitialiseTaskLists+0x7c>)
 800fa6a:	4a05      	ldr	r2, [pc, #20]	@ (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa6c:	601a      	str	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	2400df3c 	.word	0x2400df3c
 800fa7c:	2400e39c 	.word	0x2400e39c
 800fa80:	2400e3b0 	.word	0x2400e3b0
 800fa84:	2400e3cc 	.word	0x2400e3cc
 800fa88:	2400e3e0 	.word	0x2400e3e0
 800fa8c:	2400e3f8 	.word	0x2400e3f8
 800fa90:	2400e3c4 	.word	0x2400e3c4
 800fa94:	2400e3c8 	.word	0x2400e3c8

0800fa98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fa9e:	e019      	b.n	800fad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800faa0:	f7fe fc0a 	bl	800e2b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faa4:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <prvCheckTasksWaitingTermination+0x50>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3304      	adds	r3, #4
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe faa7 	bl	800e004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fab6:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	3b01      	subs	r3, #1
 800fabc:	4a0b      	ldr	r2, [pc, #44]	@ (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fabe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fac0:	4b0b      	ldr	r3, [pc, #44]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	4a0a      	ldr	r2, [pc, #40]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800faca:	f7fe fc27 	bl	800e31c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f810 	bl	800faf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fad4:	4b06      	ldr	r3, [pc, #24]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e1      	bne.n	800faa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fadc:	bf00      	nop
 800fade:	bf00      	nop
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	2400e3e0 	.word	0x2400e3e0
 800faec:	2400e40c 	.word	0x2400e40c
 800faf0:	2400e3f4 	.word	0x2400e3f4

0800faf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d108      	bne.n	800fb18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe f8d0 	bl	800dcb0 <vPortFree>
				vPortFree( pxTCB );
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7fe f8cd 	bl	800dcb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb16:	e019      	b.n	800fb4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d103      	bne.n	800fb2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fe f8c4 	bl	800dcb0 <vPortFree>
	}
 800fb28:	e010      	b.n	800fb4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800fb30:	2b02      	cmp	r3, #2
 800fb32:	d00b      	beq.n	800fb4c <prvDeleteTCB+0x58>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	60fb      	str	r3, [r7, #12]
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	e7fd      	b.n	800fb48 <prvDeleteTCB+0x54>
	}
 800fb4c:	bf00      	nop
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb8c <prvResetNextTaskUnblockTime+0x38>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d104      	bne.n	800fb6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb64:	4b0a      	ldr	r3, [pc, #40]	@ (800fb90 <prvResetNextTaskUnblockTime+0x3c>)
 800fb66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fb6c:	e008      	b.n	800fb80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb6e:	4b07      	ldr	r3, [pc, #28]	@ (800fb8c <prvResetNextTaskUnblockTime+0x38>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	4a04      	ldr	r2, [pc, #16]	@ (800fb90 <prvResetNextTaskUnblockTime+0x3c>)
 800fb7e:	6013      	str	r3, [r2, #0]
}
 800fb80:	bf00      	nop
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr
 800fb8c:	2400e3c4 	.word	0x2400e3c4
 800fb90:	2400e42c 	.word	0x2400e42c

0800fb94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc8 <xTaskGetSchedulerState+0x34>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d102      	bne.n	800fba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fba2:	2301      	movs	r3, #1
 800fba4:	607b      	str	r3, [r7, #4]
 800fba6:	e008      	b.n	800fbba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fba8:	4b08      	ldr	r3, [pc, #32]	@ (800fbcc <xTaskGetSchedulerState+0x38>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	607b      	str	r3, [r7, #4]
 800fbb4:	e001      	b.n	800fbba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbba:	687b      	ldr	r3, [r7, #4]
	}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr
 800fbc8:	2400e418 	.word	0x2400e418
 800fbcc:	2400e434 	.word	0x2400e434

0800fbd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d058      	beq.n	800fc98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fbe6:	4b2f      	ldr	r3, [pc, #188]	@ (800fca4 <xTaskPriorityDisinherit+0xd4>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	693a      	ldr	r2, [r7, #16]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d00b      	beq.n	800fc08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	60fb      	str	r3, [r7, #12]
}
 800fc02:	bf00      	nop
 800fc04:	bf00      	nop
 800fc06:	e7fd      	b.n	800fc04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d10b      	bne.n	800fc28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc14:	f383 8811 	msr	BASEPRI, r3
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	60bb      	str	r3, [r7, #8]
}
 800fc22:	bf00      	nop
 800fc24:	bf00      	nop
 800fc26:	e7fd      	b.n	800fc24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc2c:	1e5a      	subs	r2, r3, #1
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d02c      	beq.n	800fc98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d128      	bne.n	800fc98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	3304      	adds	r3, #4
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fe f9da 	bl	800e004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc68:	4b0f      	ldr	r3, [pc, #60]	@ (800fca8 <xTaskPriorityDisinherit+0xd8>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d903      	bls.n	800fc78 <xTaskPriorityDisinherit+0xa8>
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc74:	4a0c      	ldr	r2, [pc, #48]	@ (800fca8 <xTaskPriorityDisinherit+0xd8>)
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	4413      	add	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4a09      	ldr	r2, [pc, #36]	@ (800fcac <xTaskPriorityDisinherit+0xdc>)
 800fc86:	441a      	add	r2, r3
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	f7fe f95b 	bl	800df4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fc94:	2301      	movs	r3, #1
 800fc96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc98:	697b      	ldr	r3, [r7, #20]
	}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	2400df38 	.word	0x2400df38
 800fca8:	2400e414 	.word	0x2400e414
 800fcac:	2400df3c 	.word	0x2400df3c

0800fcb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcba:	4b21      	ldr	r3, [pc, #132]	@ (800fd40 <prvAddCurrentTaskToDelayedList+0x90>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcc0:	4b20      	ldr	r3, [pc, #128]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe f99c 	bl	800e004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcd2:	d10a      	bne.n	800fcea <prvAddCurrentTaskToDelayedList+0x3a>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d007      	beq.n	800fcea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcda:	4b1a      	ldr	r3, [pc, #104]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	3304      	adds	r3, #4
 800fce0:	4619      	mov	r1, r3
 800fce2:	4819      	ldr	r0, [pc, #100]	@ (800fd48 <prvAddCurrentTaskToDelayedList+0x98>)
 800fce4:	f7fe f931 	bl	800df4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fce8:	e026      	b.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	4413      	add	r3, r2
 800fcf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fcf2:	4b14      	ldr	r3, [pc, #80]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68ba      	ldr	r2, [r7, #8]
 800fcf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d209      	bcs.n	800fd16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd02:	4b12      	ldr	r3, [pc, #72]	@ (800fd4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	4b0f      	ldr	r3, [pc, #60]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4610      	mov	r0, r2
 800fd10:	f7fe f93f 	bl	800df92 <vListInsert>
}
 800fd14:	e010      	b.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd16:	4b0e      	ldr	r3, [pc, #56]	@ (800fd50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	4619      	mov	r1, r3
 800fd22:	4610      	mov	r0, r2
 800fd24:	f7fe f935 	bl	800df92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd28:	4b0a      	ldr	r3, [pc, #40]	@ (800fd54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d202      	bcs.n	800fd38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd32:	4a08      	ldr	r2, [pc, #32]	@ (800fd54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	6013      	str	r3, [r2, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	2400e410 	.word	0x2400e410
 800fd44:	2400df38 	.word	0x2400df38
 800fd48:	2400e3f8 	.word	0x2400e3f8
 800fd4c:	2400e3c8 	.word	0x2400e3c8
 800fd50:	2400e3c4 	.word	0x2400e3c4
 800fd54:	2400e42c 	.word	0x2400e42c

0800fd58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b08a      	sub	sp, #40	@ 0x28
 800fd5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd62:	f000 fb13 	bl	801038c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd66:	4b1d      	ldr	r3, [pc, #116]	@ (800fddc <xTimerCreateTimerTask+0x84>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d021      	beq.n	800fdb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd76:	1d3a      	adds	r2, r7, #4
 800fd78:	f107 0108 	add.w	r1, r7, #8
 800fd7c:	f107 030c 	add.w	r3, r7, #12
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd fead 	bl	800dae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd86:	6879      	ldr	r1, [r7, #4]
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	9202      	str	r2, [sp, #8]
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	2302      	movs	r3, #2
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	2300      	movs	r3, #0
 800fd96:	460a      	mov	r2, r1
 800fd98:	4911      	ldr	r1, [pc, #68]	@ (800fde0 <xTimerCreateTimerTask+0x88>)
 800fd9a:	4812      	ldr	r0, [pc, #72]	@ (800fde4 <xTimerCreateTimerTask+0x8c>)
 800fd9c:	f7ff f8a8 	bl	800eef0 <xTaskCreateStatic>
 800fda0:	4603      	mov	r3, r0
 800fda2:	4a11      	ldr	r2, [pc, #68]	@ (800fde8 <xTimerCreateTimerTask+0x90>)
 800fda4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fda6:	4b10      	ldr	r3, [pc, #64]	@ (800fde8 <xTimerCreateTimerTask+0x90>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10b      	bne.n	800fdd0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	613b      	str	r3, [r7, #16]
}
 800fdca:	bf00      	nop
 800fdcc:	bf00      	nop
 800fdce:	e7fd      	b.n	800fdcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fdd0:	697b      	ldr	r3, [r7, #20]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3718      	adds	r7, #24
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	2400e468 	.word	0x2400e468
 800fde0:	0801efe4 	.word	0x0801efe4
 800fde4:	0800ff25 	.word	0x0800ff25
 800fde8:	2400e46c 	.word	0x2400e46c

0800fdec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08a      	sub	sp, #40	@ 0x28
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10b      	bne.n	800fe1c <xTimerGenericCommand+0x30>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	623b      	str	r3, [r7, #32]
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	e7fd      	b.n	800fe18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe1c:	4b19      	ldr	r3, [pc, #100]	@ (800fe84 <xTimerGenericCommand+0x98>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d02a      	beq.n	800fe7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2b05      	cmp	r3, #5
 800fe34:	dc18      	bgt.n	800fe68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe36:	f7ff fead 	bl	800fb94 <xTaskGetSchedulerState>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d109      	bne.n	800fe54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe40:	4b10      	ldr	r3, [pc, #64]	@ (800fe84 <xTimerGenericCommand+0x98>)
 800fe42:	6818      	ldr	r0, [r3, #0]
 800fe44:	f107 0110 	add.w	r1, r7, #16
 800fe48:	2300      	movs	r3, #0
 800fe4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe4c:	f7fe fc60 	bl	800e710 <xQueueGenericSend>
 800fe50:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe52:	e012      	b.n	800fe7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe54:	4b0b      	ldr	r3, [pc, #44]	@ (800fe84 <xTimerGenericCommand+0x98>)
 800fe56:	6818      	ldr	r0, [r3, #0]
 800fe58:	f107 0110 	add.w	r1, r7, #16
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f7fe fc56 	bl	800e710 <xQueueGenericSend>
 800fe64:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe66:	e008      	b.n	800fe7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe68:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <xTimerGenericCommand+0x98>)
 800fe6a:	6818      	ldr	r0, [r3, #0]
 800fe6c:	f107 0110 	add.w	r1, r7, #16
 800fe70:	2300      	movs	r3, #0
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	f7fe fd4e 	bl	800e914 <xQueueGenericSendFromISR>
 800fe78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3728      	adds	r7, #40	@ 0x28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	2400e468 	.word	0x2400e468

0800fe88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	af02      	add	r7, sp, #8
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe92:	4b23      	ldr	r3, [pc, #140]	@ (800ff20 <prvProcessExpiredTimer+0x98>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe f8af 	bl	800e004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800feac:	f003 0304 	and.w	r3, r3, #4
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d023      	beq.n	800fefc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	699a      	ldr	r2, [r3, #24]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	18d1      	adds	r1, r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	683a      	ldr	r2, [r7, #0]
 800fec0:	6978      	ldr	r0, [r7, #20]
 800fec2:	f000 f8d5 	bl	8010070 <prvInsertTimerInActiveList>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d020      	beq.n	800ff0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fecc:	2300      	movs	r3, #0
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	2300      	movs	r3, #0
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	2100      	movs	r1, #0
 800fed6:	6978      	ldr	r0, [r7, #20]
 800fed8:	f7ff ff88 	bl	800fdec <xTimerGenericCommand>
 800fedc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d114      	bne.n	800ff0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	60fb      	str	r3, [r7, #12]
}
 800fef6:	bf00      	nop
 800fef8:	bf00      	nop
 800fefa:	e7fd      	b.n	800fef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff02:	f023 0301 	bic.w	r3, r3, #1
 800ff06:	b2da      	uxtb	r2, r3
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	6978      	ldr	r0, [r7, #20]
 800ff14:	4798      	blx	r3
}
 800ff16:	bf00      	nop
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	2400e460 	.word	0x2400e460

0800ff24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff2c:	f107 0308 	add.w	r3, r7, #8
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 f859 	bl	800ffe8 <prvGetNextExpireTime>
 800ff36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f000 f805 	bl	800ff4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff42:	f000 f8d7 	bl	80100f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff46:	bf00      	nop
 800ff48:	e7f0      	b.n	800ff2c <prvTimerTask+0x8>
	...

0800ff4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff56:	f7ff fa0f 	bl	800f378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff5a:	f107 0308 	add.w	r3, r7, #8
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f000 f866 	bl	8010030 <prvSampleTimeNow>
 800ff64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d130      	bne.n	800ffce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d10a      	bne.n	800ff88 <prvProcessTimerOrBlockTask+0x3c>
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d806      	bhi.n	800ff88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff7a:	f7ff fa0b 	bl	800f394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff7e:	68f9      	ldr	r1, [r7, #12]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff ff81 	bl	800fe88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff86:	e024      	b.n	800ffd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d008      	beq.n	800ffa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff8e:	4b13      	ldr	r3, [pc, #76]	@ (800ffdc <prvProcessTimerOrBlockTask+0x90>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d101      	bne.n	800ff9c <prvProcessTimerOrBlockTask+0x50>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e000      	b.n	800ff9e <prvProcessTimerOrBlockTask+0x52>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ffa0:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe0 <prvProcessTimerOrBlockTask+0x94>)
 800ffa2:	6818      	ldr	r0, [r3, #0]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	4619      	mov	r1, r3
 800ffae:	f7fe ff6b 	bl	800ee88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffb2:	f7ff f9ef 	bl	800f394 <xTaskResumeAll>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ffbc:	4b09      	ldr	r3, [pc, #36]	@ (800ffe4 <prvProcessTimerOrBlockTask+0x98>)
 800ffbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	f3bf 8f6f 	isb	sy
}
 800ffcc:	e001      	b.n	800ffd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ffce:	f7ff f9e1 	bl	800f394 <xTaskResumeAll>
}
 800ffd2:	bf00      	nop
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	2400e464 	.word	0x2400e464
 800ffe0:	2400e468 	.word	0x2400e468
 800ffe4:	e000ed04 	.word	0xe000ed04

0800ffe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fff0:	4b0e      	ldr	r3, [pc, #56]	@ (801002c <prvGetNextExpireTime+0x44>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d101      	bne.n	800fffe <prvGetNextExpireTime+0x16>
 800fffa:	2201      	movs	r2, #1
 800fffc:	e000      	b.n	8010000 <prvGetNextExpireTime+0x18>
 800fffe:	2200      	movs	r2, #0
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d105      	bne.n	8010018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801000c:	4b07      	ldr	r3, [pc, #28]	@ (801002c <prvGetNextExpireTime+0x44>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	60fb      	str	r3, [r7, #12]
 8010016:	e001      	b.n	801001c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801001c:	68fb      	ldr	r3, [r7, #12]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	2400e460 	.word	0x2400e460

08010030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010038:	f7ff fa4a 	bl	800f4d0 <xTaskGetTickCount>
 801003c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801003e:	4b0b      	ldr	r3, [pc, #44]	@ (801006c <prvSampleTimeNow+0x3c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	429a      	cmp	r2, r3
 8010046:	d205      	bcs.n	8010054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010048:	f000 f93a 	bl	80102c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	e002      	b.n	801005a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801005a:	4a04      	ldr	r2, [pc, #16]	@ (801006c <prvSampleTimeNow+0x3c>)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010060:	68fb      	ldr	r3, [r7, #12]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	2400e470 	.word	0x2400e470

08010070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	429a      	cmp	r2, r3
 8010094:	d812      	bhi.n	80100bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	1ad2      	subs	r2, r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d302      	bcc.n	80100aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80100a4:	2301      	movs	r3, #1
 80100a6:	617b      	str	r3, [r7, #20]
 80100a8:	e01b      	b.n	80100e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80100aa:	4b10      	ldr	r3, [pc, #64]	@ (80100ec <prvInsertTimerInActiveList+0x7c>)
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	3304      	adds	r3, #4
 80100b2:	4619      	mov	r1, r3
 80100b4:	4610      	mov	r0, r2
 80100b6:	f7fd ff6c 	bl	800df92 <vListInsert>
 80100ba:	e012      	b.n	80100e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d206      	bcs.n	80100d2 <prvInsertTimerInActiveList+0x62>
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d302      	bcc.n	80100d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80100cc:	2301      	movs	r3, #1
 80100ce:	617b      	str	r3, [r7, #20]
 80100d0:	e007      	b.n	80100e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100d2:	4b07      	ldr	r3, [pc, #28]	@ (80100f0 <prvInsertTimerInActiveList+0x80>)
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	3304      	adds	r3, #4
 80100da:	4619      	mov	r1, r3
 80100dc:	4610      	mov	r0, r2
 80100de:	f7fd ff58 	bl	800df92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80100e2:	697b      	ldr	r3, [r7, #20]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	2400e464 	.word	0x2400e464
 80100f0:	2400e460 	.word	0x2400e460

080100f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b08e      	sub	sp, #56	@ 0x38
 80100f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100fa:	e0ce      	b.n	801029a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	da19      	bge.n	8010136 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010102:	1d3b      	adds	r3, r7, #4
 8010104:	3304      	adds	r3, #4
 8010106:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10b      	bne.n	8010126 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801010e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010112:	f383 8811 	msr	BASEPRI, r3
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	f3bf 8f4f 	dsb	sy
 801011e:	61fb      	str	r3, [r7, #28]
}
 8010120:	bf00      	nop
 8010122:	bf00      	nop
 8010124:	e7fd      	b.n	8010122 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801012c:	6850      	ldr	r0, [r2, #4]
 801012e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010130:	6892      	ldr	r2, [r2, #8]
 8010132:	4611      	mov	r1, r2
 8010134:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	f2c0 80ae 	blt.w	801029a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d004      	beq.n	8010154 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801014a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014c:	3304      	adds	r3, #4
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd ff58 	bl	800e004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010154:	463b      	mov	r3, r7
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff ff6a 	bl	8010030 <prvSampleTimeNow>
 801015c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b09      	cmp	r3, #9
 8010162:	f200 8097 	bhi.w	8010294 <prvProcessReceivedCommands+0x1a0>
 8010166:	a201      	add	r2, pc, #4	@ (adr r2, 801016c <prvProcessReceivedCommands+0x78>)
 8010168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016c:	08010195 	.word	0x08010195
 8010170:	08010195 	.word	0x08010195
 8010174:	08010195 	.word	0x08010195
 8010178:	0801020b 	.word	0x0801020b
 801017c:	0801021f 	.word	0x0801021f
 8010180:	0801026b 	.word	0x0801026b
 8010184:	08010195 	.word	0x08010195
 8010188:	08010195 	.word	0x08010195
 801018c:	0801020b 	.word	0x0801020b
 8010190:	0801021f 	.word	0x0801021f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801019a:	f043 0301 	orr.w	r3, r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	18d1      	adds	r1, r2, r3
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101b4:	f7ff ff5c 	bl	8010070 <prvInsertTimerInActiveList>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d06c      	beq.n	8010298 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d061      	beq.n	8010298 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	441a      	add	r2, r3
 80101dc:	2300      	movs	r3, #0
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	2300      	movs	r3, #0
 80101e2:	2100      	movs	r1, #0
 80101e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101e6:	f7ff fe01 	bl	800fdec <xTimerGenericCommand>
 80101ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d152      	bne.n	8010298 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80101f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	61bb      	str	r3, [r7, #24]
}
 8010204:	bf00      	nop
 8010206:	bf00      	nop
 8010208:	e7fd      	b.n	8010206 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801020a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010210:	f023 0301 	bic.w	r3, r3, #1
 8010214:	b2da      	uxtb	r2, r3
 8010216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010218:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801021c:	e03d      	b.n	801029a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801021e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010224:	f043 0301 	orr.w	r3, r3, #1
 8010228:	b2da      	uxtb	r2, r3
 801022a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801022c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010234:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10b      	bne.n	8010256 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	617b      	str	r3, [r7, #20]
}
 8010250:	bf00      	nop
 8010252:	bf00      	nop
 8010254:	e7fd      	b.n	8010252 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010258:	699a      	ldr	r2, [r3, #24]
 801025a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801025c:	18d1      	adds	r1, r2, r3
 801025e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010264:	f7ff ff04 	bl	8010070 <prvInsertTimerInActiveList>
					break;
 8010268:	e017      	b.n	801029a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801026a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d103      	bne.n	8010280 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801027a:	f7fd fd19 	bl	800dcb0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801027e:	e00c      	b.n	801029a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010286:	f023 0301 	bic.w	r3, r3, #1
 801028a:	b2da      	uxtb	r2, r3
 801028c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010292:	e002      	b.n	801029a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010294:	bf00      	nop
 8010296:	e000      	b.n	801029a <prvProcessReceivedCommands+0x1a6>
					break;
 8010298:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801029a:	4b08      	ldr	r3, [pc, #32]	@ (80102bc <prvProcessReceivedCommands+0x1c8>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	1d39      	adds	r1, r7, #4
 80102a0:	2200      	movs	r2, #0
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fbd4 	bl	800ea50 <xQueueReceive>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f47f af26 	bne.w	80100fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80102b0:	bf00      	nop
 80102b2:	bf00      	nop
 80102b4:	3730      	adds	r7, #48	@ 0x30
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	2400e468 	.word	0x2400e468

080102c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102c6:	e049      	b.n	801035c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102c8:	4b2e      	ldr	r3, [pc, #184]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3304      	adds	r3, #4
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fd fe8f 	bl	800e004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a1b      	ldr	r3, [r3, #32]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102f4:	f003 0304 	and.w	r3, r3, #4
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d02f      	beq.n	801035c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	699b      	ldr	r3, [r3, #24]
 8010300:	693a      	ldr	r2, [r7, #16]
 8010302:	4413      	add	r3, r2
 8010304:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	429a      	cmp	r2, r3
 801030c:	d90e      	bls.n	801032c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	68ba      	ldr	r2, [r7, #8]
 8010312:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801031a:	4b1a      	ldr	r3, [pc, #104]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3304      	adds	r3, #4
 8010322:	4619      	mov	r1, r3
 8010324:	4610      	mov	r0, r2
 8010326:	f7fd fe34 	bl	800df92 <vListInsert>
 801032a:	e017      	b.n	801035c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801032c:	2300      	movs	r3, #0
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	2300      	movs	r3, #0
 8010332:	693a      	ldr	r2, [r7, #16]
 8010334:	2100      	movs	r1, #0
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff fd58 	bl	800fdec <xTimerGenericCommand>
 801033c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10b      	bne.n	801035c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	603b      	str	r3, [r7, #0]
}
 8010356:	bf00      	nop
 8010358:	bf00      	nop
 801035a:	e7fd      	b.n	8010358 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801035c:	4b09      	ldr	r3, [pc, #36]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d1b0      	bne.n	80102c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010366:	4b07      	ldr	r3, [pc, #28]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801036c:	4b06      	ldr	r3, [pc, #24]	@ (8010388 <prvSwitchTimerLists+0xc8>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a04      	ldr	r2, [pc, #16]	@ (8010384 <prvSwitchTimerLists+0xc4>)
 8010372:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010374:	4a04      	ldr	r2, [pc, #16]	@ (8010388 <prvSwitchTimerLists+0xc8>)
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	6013      	str	r3, [r2, #0]
}
 801037a:	bf00      	nop
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	2400e460 	.word	0x2400e460
 8010388:	2400e464 	.word	0x2400e464

0801038c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010392:	f7fd ff91 	bl	800e2b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010396:	4b15      	ldr	r3, [pc, #84]	@ (80103ec <prvCheckForValidListAndQueue+0x60>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d120      	bne.n	80103e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801039e:	4814      	ldr	r0, [pc, #80]	@ (80103f0 <prvCheckForValidListAndQueue+0x64>)
 80103a0:	f7fd fda6 	bl	800def0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80103a4:	4813      	ldr	r0, [pc, #76]	@ (80103f4 <prvCheckForValidListAndQueue+0x68>)
 80103a6:	f7fd fda3 	bl	800def0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80103aa:	4b13      	ldr	r3, [pc, #76]	@ (80103f8 <prvCheckForValidListAndQueue+0x6c>)
 80103ac:	4a10      	ldr	r2, [pc, #64]	@ (80103f0 <prvCheckForValidListAndQueue+0x64>)
 80103ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80103b0:	4b12      	ldr	r3, [pc, #72]	@ (80103fc <prvCheckForValidListAndQueue+0x70>)
 80103b2:	4a10      	ldr	r2, [pc, #64]	@ (80103f4 <prvCheckForValidListAndQueue+0x68>)
 80103b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80103b6:	2300      	movs	r3, #0
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	4b11      	ldr	r3, [pc, #68]	@ (8010400 <prvCheckForValidListAndQueue+0x74>)
 80103bc:	4a11      	ldr	r2, [pc, #68]	@ (8010404 <prvCheckForValidListAndQueue+0x78>)
 80103be:	2110      	movs	r1, #16
 80103c0:	200a      	movs	r0, #10
 80103c2:	f7fe f905 	bl	800e5d0 <xQueueGenericCreateStatic>
 80103c6:	4603      	mov	r3, r0
 80103c8:	4a08      	ldr	r2, [pc, #32]	@ (80103ec <prvCheckForValidListAndQueue+0x60>)
 80103ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103cc:	4b07      	ldr	r3, [pc, #28]	@ (80103ec <prvCheckForValidListAndQueue+0x60>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d005      	beq.n	80103e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80103d4:	4b05      	ldr	r3, [pc, #20]	@ (80103ec <prvCheckForValidListAndQueue+0x60>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	490b      	ldr	r1, [pc, #44]	@ (8010408 <prvCheckForValidListAndQueue+0x7c>)
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe fd2a 	bl	800ee34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80103e0:	f7fd ff9c 	bl	800e31c <vPortExitCritical>
}
 80103e4:	bf00      	nop
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	2400e468 	.word	0x2400e468
 80103f0:	2400e438 	.word	0x2400e438
 80103f4:	2400e44c 	.word	0x2400e44c
 80103f8:	2400e460 	.word	0x2400e460
 80103fc:	2400e464 	.word	0x2400e464
 8010400:	2400e514 	.word	0x2400e514
 8010404:	2400e474 	.word	0x2400e474
 8010408:	0801efec 	.word	0x0801efec

0801040c <rcl_get_zero_initialized_init_options>:
 801040c:	2000      	movs	r0, #0
 801040e:	4770      	bx	lr

08010410 <rcl_init_options_init>:
 8010410:	b084      	sub	sp, #16
 8010412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010414:	b097      	sub	sp, #92	@ 0x5c
 8010416:	ae1d      	add	r6, sp, #116	@ 0x74
 8010418:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801041c:	2800      	cmp	r0, #0
 801041e:	d058      	beq.n	80104d2 <rcl_init_options_init+0xc2>
 8010420:	6803      	ldr	r3, [r0, #0]
 8010422:	4605      	mov	r5, r0
 8010424:	b133      	cbz	r3, 8010434 <rcl_init_options_init+0x24>
 8010426:	2464      	movs	r4, #100	@ 0x64
 8010428:	4620      	mov	r0, r4
 801042a:	b017      	add	sp, #92	@ 0x5c
 801042c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010430:	b004      	add	sp, #16
 8010432:	4770      	bx	lr
 8010434:	4630      	mov	r0, r6
 8010436:	f001 f953 	bl	80116e0 <rcutils_allocator_is_valid>
 801043a:	2800      	cmp	r0, #0
 801043c:	d049      	beq.n	80104d2 <rcl_init_options_init+0xc2>
 801043e:	46b4      	mov	ip, r6
 8010440:	ac11      	add	r4, sp, #68	@ 0x44
 8010442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010448:	f8dc 3000 	ldr.w	r3, [ip]
 801044c:	2050      	movs	r0, #80	@ 0x50
 801044e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010454:	4798      	blx	r3
 8010456:	4604      	mov	r4, r0
 8010458:	6028      	str	r0, [r5, #0]
 801045a:	2800      	cmp	r0, #0
 801045c:	d03b      	beq.n	80104d6 <rcl_init_options_init+0xc6>
 801045e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010462:	4686      	mov	lr, r0
 8010464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801046c:	f8dc 3000 	ldr.w	r3, [ip]
 8010470:	a802      	add	r0, sp, #8
 8010472:	f8ce 3000 	str.w	r3, [lr]
 8010476:	f001 f9bf 	bl	80117f8 <rmw_get_zero_initialized_init_options>
 801047a:	f10d 0e08 	add.w	lr, sp, #8
 801047e:	f104 0c18 	add.w	ip, r4, #24
 8010482:	682f      	ldr	r7, [r5, #0]
 8010484:	ac20      	add	r4, sp, #128	@ 0x80
 8010486:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801048a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801048e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010496:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801049a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801049e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80104a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80104a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80104aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80104ae:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80104b2:	f107 0018 	add.w	r0, r7, #24
 80104b6:	f001 f9cd 	bl	8011854 <rmw_init_options_init>
 80104ba:	4604      	mov	r4, r0
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0b3      	beq.n	8010428 <rcl_init_options_init+0x18>
 80104c0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80104c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80104c4:	6828      	ldr	r0, [r5, #0]
 80104c6:	4798      	blx	r3
 80104c8:	4620      	mov	r0, r4
 80104ca:	f007 fc17 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 80104ce:	4604      	mov	r4, r0
 80104d0:	e7aa      	b.n	8010428 <rcl_init_options_init+0x18>
 80104d2:	240b      	movs	r4, #11
 80104d4:	e7a8      	b.n	8010428 <rcl_init_options_init+0x18>
 80104d6:	240a      	movs	r4, #10
 80104d8:	e7a6      	b.n	8010428 <rcl_init_options_init+0x18>
 80104da:	bf00      	nop

080104dc <rcl_init_options_fini>:
 80104dc:	b530      	push	{r4, r5, lr}
 80104de:	b087      	sub	sp, #28
 80104e0:	b1f0      	cbz	r0, 8010520 <rcl_init_options_fini+0x44>
 80104e2:	6803      	ldr	r3, [r0, #0]
 80104e4:	4604      	mov	r4, r0
 80104e6:	b1db      	cbz	r3, 8010520 <rcl_init_options_fini+0x44>
 80104e8:	469c      	mov	ip, r3
 80104ea:	f10d 0e04 	add.w	lr, sp, #4
 80104ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80104f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80104f6:	f8dc 3000 	ldr.w	r3, [ip]
 80104fa:	a801      	add	r0, sp, #4
 80104fc:	f8ce 3000 	str.w	r3, [lr]
 8010500:	f001 f8ee 	bl	80116e0 <rcutils_allocator_is_valid>
 8010504:	b160      	cbz	r0, 8010520 <rcl_init_options_fini+0x44>
 8010506:	6820      	ldr	r0, [r4, #0]
 8010508:	3018      	adds	r0, #24
 801050a:	f001 fa5d 	bl	80119c8 <rmw_init_options_fini>
 801050e:	4605      	mov	r5, r0
 8010510:	b950      	cbnz	r0, 8010528 <rcl_init_options_fini+0x4c>
 8010512:	6820      	ldr	r0, [r4, #0]
 8010514:	9b02      	ldr	r3, [sp, #8]
 8010516:	9905      	ldr	r1, [sp, #20]
 8010518:	4798      	blx	r3
 801051a:	4628      	mov	r0, r5
 801051c:	b007      	add	sp, #28
 801051e:	bd30      	pop	{r4, r5, pc}
 8010520:	250b      	movs	r5, #11
 8010522:	4628      	mov	r0, r5
 8010524:	b007      	add	sp, #28
 8010526:	bd30      	pop	{r4, r5, pc}
 8010528:	f007 fbe8 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 801052c:	4605      	mov	r5, r0
 801052e:	e7f8      	b.n	8010522 <rcl_init_options_fini+0x46>

08010530 <rcl_init_options_copy>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	b094      	sub	sp, #80	@ 0x50
 8010536:	2800      	cmp	r0, #0
 8010538:	d05b      	beq.n	80105f2 <rcl_init_options_copy+0xc2>
 801053a:	4604      	mov	r4, r0
 801053c:	6800      	ldr	r0, [r0, #0]
 801053e:	2800      	cmp	r0, #0
 8010540:	d057      	beq.n	80105f2 <rcl_init_options_copy+0xc2>
 8010542:	460e      	mov	r6, r1
 8010544:	f001 f8cc 	bl	80116e0 <rcutils_allocator_is_valid>
 8010548:	2e00      	cmp	r6, #0
 801054a:	d052      	beq.n	80105f2 <rcl_init_options_copy+0xc2>
 801054c:	f080 0001 	eor.w	r0, r0, #1
 8010550:	b2c0      	uxtb	r0, r0
 8010552:	2800      	cmp	r0, #0
 8010554:	d14d      	bne.n	80105f2 <rcl_init_options_copy+0xc2>
 8010556:	6833      	ldr	r3, [r6, #0]
 8010558:	b123      	cbz	r3, 8010564 <rcl_init_options_copy+0x34>
 801055a:	2464      	movs	r4, #100	@ 0x64
 801055c:	4620      	mov	r0, r4
 801055e:	b014      	add	sp, #80	@ 0x50
 8010560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010564:	6827      	ldr	r7, [r4, #0]
 8010566:	ad0f      	add	r5, sp, #60	@ 0x3c
 8010568:	46bc      	mov	ip, r7
 801056a:	f8d7 8000 	ldr.w	r8, [r7]
 801056e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010574:	f8dc 3000 	ldr.w	r3, [ip]
 8010578:	2050      	movs	r0, #80	@ 0x50
 801057a:	4619      	mov	r1, r3
 801057c:	602b      	str	r3, [r5, #0]
 801057e:	47c0      	blx	r8
 8010580:	4605      	mov	r5, r0
 8010582:	6030      	str	r0, [r6, #0]
 8010584:	b3d0      	cbz	r0, 80105fc <rcl_init_options_copy+0xcc>
 8010586:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801058a:	4686      	mov	lr, r0
 801058c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010590:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010594:	f8dc 3000 	ldr.w	r3, [ip]
 8010598:	4668      	mov	r0, sp
 801059a:	f8ce 3000 	str.w	r3, [lr]
 801059e:	f001 f92b 	bl	80117f8 <rmw_get_zero_initialized_init_options>
 80105a2:	46ee      	mov	lr, sp
 80105a4:	f105 0c18 	add.w	ip, r5, #24
 80105a8:	6824      	ldr	r4, [r4, #0]
 80105aa:	6835      	ldr	r5, [r6, #0]
 80105ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80105c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80105cc:	f104 0018 	add.w	r0, r4, #24
 80105d0:	f105 0118 	add.w	r1, r5, #24
 80105d4:	f001 f9a6 	bl	8011924 <rmw_init_options_copy>
 80105d8:	4604      	mov	r4, r0
 80105da:	2800      	cmp	r0, #0
 80105dc:	d0be      	beq.n	801055c <rcl_init_options_copy+0x2c>
 80105de:	f001 f88d 	bl	80116fc <rcutils_get_error_string>
 80105e2:	f001 f8a1 	bl	8011728 <rcutils_reset_error>
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7ff ff78 	bl	80104dc <rcl_init_options_fini>
 80105ec:	b140      	cbz	r0, 8010600 <rcl_init_options_copy+0xd0>
 80105ee:	4604      	mov	r4, r0
 80105f0:	e7b4      	b.n	801055c <rcl_init_options_copy+0x2c>
 80105f2:	240b      	movs	r4, #11
 80105f4:	4620      	mov	r0, r4
 80105f6:	b014      	add	sp, #80	@ 0x50
 80105f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105fc:	240a      	movs	r4, #10
 80105fe:	e7ad      	b.n	801055c <rcl_init_options_copy+0x2c>
 8010600:	4620      	mov	r0, r4
 8010602:	b014      	add	sp, #80	@ 0x50
 8010604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010608:	f007 bb78 	b.w	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>

0801060c <rcl_init_options_set_domain_id>:
 801060c:	b120      	cbz	r0, 8010618 <rcl_init_options_set_domain_id+0xc>
 801060e:	6803      	ldr	r3, [r0, #0]
 8010610:	b113      	cbz	r3, 8010618 <rcl_init_options_set_domain_id+0xc>
 8010612:	2000      	movs	r0, #0
 8010614:	6259      	str	r1, [r3, #36]	@ 0x24
 8010616:	4770      	bx	lr
 8010618:	200b      	movs	r0, #11
 801061a:	4770      	bx	lr

0801061c <rcl_get_zero_initialized_publisher>:
 801061c:	4b01      	ldr	r3, [pc, #4]	@ (8010624 <rcl_get_zero_initialized_publisher+0x8>)
 801061e:	6818      	ldr	r0, [r3, #0]
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	0801f074 	.word	0x0801f074

08010628 <rcl_publisher_init>:
 8010628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062c:	b088      	sub	sp, #32
 801062e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010630:	2e00      	cmp	r6, #0
 8010632:	d06b      	beq.n	801070c <rcl_publisher_init+0xe4>
 8010634:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8010638:	4605      	mov	r5, r0
 801063a:	460f      	mov	r7, r1
 801063c:	4690      	mov	r8, r2
 801063e:	4650      	mov	r0, sl
 8010640:	4699      	mov	r9, r3
 8010642:	f001 f84d 	bl	80116e0 <rcutils_allocator_is_valid>
 8010646:	f080 0401 	eor.w	r4, r0, #1
 801064a:	b2e4      	uxtb	r4, r4
 801064c:	2c00      	cmp	r4, #0
 801064e:	d15d      	bne.n	801070c <rcl_publisher_init+0xe4>
 8010650:	2d00      	cmp	r5, #0
 8010652:	d05b      	beq.n	801070c <rcl_publisher_init+0xe4>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b123      	cbz	r3, 8010662 <rcl_publisher_init+0x3a>
 8010658:	2464      	movs	r4, #100	@ 0x64
 801065a:	4620      	mov	r0, r4
 801065c:	b008      	add	sp, #32
 801065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010662:	4638      	mov	r0, r7
 8010664:	f007 fe48 	bl	80182f8 <rcl_node_is_valid>
 8010668:	2800      	cmp	r0, #0
 801066a:	d054      	beq.n	8010716 <rcl_publisher_init+0xee>
 801066c:	f1b8 0f00 	cmp.w	r8, #0
 8010670:	d04c      	beq.n	801070c <rcl_publisher_init+0xe4>
 8010672:	fab9 f389 	clz	r3, r9
 8010676:	095b      	lsrs	r3, r3, #5
 8010678:	f1b9 0f00 	cmp.w	r9, #0
 801067c:	d046      	beq.n	801070c <rcl_publisher_init+0xe4>
 801067e:	aa07      	add	r2, sp, #28
 8010680:	9307      	str	r3, [sp, #28]
 8010682:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010686:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801068a:	9205      	str	r2, [sp, #20]
 801068c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010690:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010694:	4649      	mov	r1, r9
 8010696:	4638      	mov	r0, r7
 8010698:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801069c:	f007 fe84 	bl	80183a8 <rcl_node_resolve_name>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d14f      	bne.n	8010744 <rcl_publisher_init+0x11c>
 80106a4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80106a6:	20c8      	movs	r0, #200	@ 0xc8
 80106a8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80106aa:	4798      	blx	r3
 80106ac:	6028      	str	r0, [r5, #0]
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d050      	beq.n	8010754 <rcl_publisher_init+0x12c>
 80106b2:	4638      	mov	r0, r7
 80106b4:	f007 fe42 	bl	801833c <rcl_node_get_rmw_handle>
 80106b8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80106bc:	4641      	mov	r1, r8
 80106be:	9a07      	ldr	r2, [sp, #28]
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	4633      	mov	r3, r6
 80106c4:	682c      	ldr	r4, [r5, #0]
 80106c6:	f001 fca5 	bl	8012014 <rmw_create_publisher>
 80106ca:	682b      	ldr	r3, [r5, #0]
 80106cc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80106d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80106d4:	b370      	cbz	r0, 8010734 <rcl_publisher_init+0x10c>
 80106d6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80106da:	f001 fd7f 	bl	80121dc <rmw_publisher_get_actual_qos>
 80106de:	682b      	ldr	r3, [r5, #0]
 80106e0:	4604      	mov	r4, r0
 80106e2:	b9d0      	cbnz	r0, 801071a <rcl_publisher_init+0xf2>
 80106e4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80106e8:	4631      	mov	r1, r6
 80106ea:	4618      	mov	r0, r3
 80106ec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80106f0:	2270      	movs	r2, #112	@ 0x70
 80106f2:	f00d fde2 	bl	801e2ba <memcpy>
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80106fc:	9807      	ldr	r0, [sp, #28]
 80106fe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010700:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010702:	4798      	blx	r3
 8010704:	4620      	mov	r0, r4
 8010706:	b008      	add	sp, #32
 8010708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070c:	240b      	movs	r4, #11
 801070e:	4620      	mov	r0, r4
 8010710:	b008      	add	sp, #32
 8010712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010716:	24c8      	movs	r4, #200	@ 0xc8
 8010718:	e79f      	b.n	801065a <rcl_publisher_init+0x32>
 801071a:	b1cb      	cbz	r3, 8010750 <rcl_publisher_init+0x128>
 801071c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010720:	b142      	cbz	r2, 8010734 <rcl_publisher_init+0x10c>
 8010722:	4638      	mov	r0, r7
 8010724:	f007 fe0a 	bl	801833c <rcl_node_get_rmw_handle>
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 801072e:	f001 fd69 	bl	8012204 <rmw_destroy_publisher>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	4618      	mov	r0, r3
 8010736:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8010738:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801073a:	2401      	movs	r4, #1
 801073c:	4790      	blx	r2
 801073e:	2300      	movs	r3, #0
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	e7db      	b.n	80106fc <rcl_publisher_init+0xd4>
 8010744:	2867      	cmp	r0, #103	@ 0x67
 8010746:	d007      	beq.n	8010758 <rcl_publisher_init+0x130>
 8010748:	2869      	cmp	r0, #105	@ 0x69
 801074a:	d005      	beq.n	8010758 <rcl_publisher_init+0x130>
 801074c:	280a      	cmp	r0, #10
 801074e:	d001      	beq.n	8010754 <rcl_publisher_init+0x12c>
 8010750:	2401      	movs	r4, #1
 8010752:	e7d3      	b.n	80106fc <rcl_publisher_init+0xd4>
 8010754:	240a      	movs	r4, #10
 8010756:	e7d1      	b.n	80106fc <rcl_publisher_init+0xd4>
 8010758:	2467      	movs	r4, #103	@ 0x67
 801075a:	e7cf      	b.n	80106fc <rcl_publisher_init+0xd4>

0801075c <rcl_publisher_get_default_options>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4d14      	ldr	r5, [pc, #80]	@ (80107b0 <rcl_publisher_get_default_options+0x54>)
 8010760:	b088      	sub	sp, #32
 8010762:	4604      	mov	r4, r0
 8010764:	2250      	movs	r2, #80	@ 0x50
 8010766:	4913      	ldr	r1, [pc, #76]	@ (80107b4 <rcl_publisher_get_default_options+0x58>)
 8010768:	4628      	mov	r0, r5
 801076a:	f00d fda6 	bl	801e2ba <memcpy>
 801076e:	a802      	add	r0, sp, #8
 8010770:	f000 ffa8 	bl	80116c4 <rcutils_get_default_allocator>
 8010774:	f10d 0c08 	add.w	ip, sp, #8
 8010778:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801077c:	466e      	mov	r6, sp
 801077e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010782:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010786:	f8dc 3000 	ldr.w	r3, [ip]
 801078a:	4630      	mov	r0, r6
 801078c:	f8ce 3000 	str.w	r3, [lr]
 8010790:	f001 f842 	bl	8011818 <rmw_get_default_publisher_options>
 8010794:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010798:	2270      	movs	r2, #112	@ 0x70
 801079a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801079e:	e883 0003 	stmia.w	r3, {r0, r1}
 80107a2:	4629      	mov	r1, r5
 80107a4:	4620      	mov	r0, r4
 80107a6:	f00d fd88 	bl	801e2ba <memcpy>
 80107aa:	4620      	mov	r0, r4
 80107ac:	b008      	add	sp, #32
 80107ae:	bd70      	pop	{r4, r5, r6, pc}
 80107b0:	2400e568 	.word	0x2400e568
 80107b4:	0801f078 	.word	0x0801f078

080107b8 <rcl_publish>:
 80107b8:	b1f8      	cbz	r0, 80107fa <rcl_publish+0x42>
 80107ba:	6803      	ldr	r3, [r0, #0]
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	4604      	mov	r4, r0
 80107c0:	b1b3      	cbz	r3, 80107f0 <rcl_publish+0x38>
 80107c2:	4616      	mov	r6, r2
 80107c4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80107c8:	b192      	cbz	r2, 80107f0 <rcl_publish+0x38>
 80107ca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80107ce:	460d      	mov	r5, r1
 80107d0:	f007 fab2 	bl	8017d38 <rcl_context_is_valid>
 80107d4:	b160      	cbz	r0, 80107f0 <rcl_publish+0x38>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80107dc:	b140      	cbz	r0, 80107f0 <rcl_publish+0x38>
 80107de:	b155      	cbz	r5, 80107f6 <rcl_publish+0x3e>
 80107e0:	4632      	mov	r2, r6
 80107e2:	4629      	mov	r1, r5
 80107e4:	f001 fbb6 	bl	8011f54 <rmw_publish>
 80107e8:	3800      	subs	r0, #0
 80107ea:	bf18      	it	ne
 80107ec:	2001      	movne	r0, #1
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80107f4:	bd70      	pop	{r4, r5, r6, pc}
 80107f6:	200b      	movs	r0, #11
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80107fe:	4770      	bx	lr

08010800 <rcl_publisher_is_valid>:
 8010800:	b1a0      	cbz	r0, 801082c <rcl_publisher_is_valid+0x2c>
 8010802:	6803      	ldr	r3, [r0, #0]
 8010804:	b510      	push	{r4, lr}
 8010806:	4604      	mov	r4, r0
 8010808:	b173      	cbz	r3, 8010828 <rcl_publisher_is_valid+0x28>
 801080a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801080e:	b15a      	cbz	r2, 8010828 <rcl_publisher_is_valid+0x28>
 8010810:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8010814:	f007 fa90 	bl	8017d38 <rcl_context_is_valid>
 8010818:	b130      	cbz	r0, 8010828 <rcl_publisher_is_valid+0x28>
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010820:	3800      	subs	r0, #0
 8010822:	bf18      	it	ne
 8010824:	2001      	movne	r0, #1
 8010826:	bd10      	pop	{r4, pc}
 8010828:	2000      	movs	r0, #0
 801082a:	bd10      	pop	{r4, pc}
 801082c:	2000      	movs	r0, #0
 801082e:	4770      	bx	lr

08010830 <rcl_publisher_is_valid_except_context>:
 8010830:	b130      	cbz	r0, 8010840 <rcl_publisher_is_valid_except_context+0x10>
 8010832:	6800      	ldr	r0, [r0, #0]
 8010834:	b120      	cbz	r0, 8010840 <rcl_publisher_is_valid_except_context+0x10>
 8010836:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801083a:	3800      	subs	r0, #0
 801083c:	bf18      	it	ne
 801083e:	2001      	movne	r0, #1
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop

08010844 <_rclc_check_for_new_data>:
 8010844:	2800      	cmp	r0, #0
 8010846:	d046      	beq.n	80108d6 <_rclc_check_for_new_data+0x92>
 8010848:	4603      	mov	r3, r0
 801084a:	b530      	push	{r4, r5, lr}
 801084c:	7802      	ldrb	r2, [r0, #0]
 801084e:	b085      	sub	sp, #20
 8010850:	2a0a      	cmp	r2, #10
 8010852:	d842      	bhi.n	80108da <_rclc_check_for_new_data+0x96>
 8010854:	e8df f002 	tbb	[pc, r2]
 8010858:	14181212 	.word	0x14181212
 801085c:	06060614 	.word	0x06060614
 8010860:	2e1a      	.short	0x2e1a
 8010862:	16          	.byte	0x16
 8010863:	00          	.byte	0x00
 8010864:	6a0a      	ldr	r2, [r1, #32]
 8010866:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010868:	2000      	movs	r0, #0
 801086a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801086e:	1a12      	subs	r2, r2, r0
 8010870:	bf18      	it	ne
 8010872:	2201      	movne	r2, #1
 8010874:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010878:	b005      	add	sp, #20
 801087a:	bd30      	pop	{r4, r5, pc}
 801087c:	680a      	ldr	r2, [r1, #0]
 801087e:	e7f2      	b.n	8010866 <_rclc_check_for_new_data+0x22>
 8010880:	698a      	ldr	r2, [r1, #24]
 8010882:	e7f0      	b.n	8010866 <_rclc_check_for_new_data+0x22>
 8010884:	688a      	ldr	r2, [r1, #8]
 8010886:	e7ee      	b.n	8010866 <_rclc_check_for_new_data+0x22>
 8010888:	690a      	ldr	r2, [r1, #16]
 801088a:	e7ec      	b.n	8010866 <_rclc_check_for_new_data+0x22>
 801088c:	685c      	ldr	r4, [r3, #4]
 801088e:	4608      	mov	r0, r1
 8010890:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010898:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 801089c:	f104 0110 	add.w	r1, r4, #16
 80108a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80108a4:	9500      	str	r5, [sp, #0]
 80108a6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80108aa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80108ae:	f009 fbd7 	bl	801a060 <rcl_action_client_wait_set_get_entities_ready>
 80108b2:	e7e1      	b.n	8010878 <_rclc_check_for_new_data+0x34>
 80108b4:	685c      	ldr	r4, [r3, #4]
 80108b6:	4608      	mov	r0, r1
 80108b8:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 80108bc:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 80108c0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80108c4:	e9cd 2100 	strd	r2, r1, [sp]
 80108c8:	f104 0220 	add.w	r2, r4, #32
 80108cc:	f104 0110 	add.w	r1, r4, #16
 80108d0:	f009 fde0 	bl	801a494 <rcl_action_server_wait_set_get_entities_ready>
 80108d4:	e7d0      	b.n	8010878 <_rclc_check_for_new_data+0x34>
 80108d6:	200b      	movs	r0, #11
 80108d8:	4770      	bx	lr
 80108da:	2001      	movs	r0, #1
 80108dc:	e7cc      	b.n	8010878 <_rclc_check_for_new_data+0x34>
 80108de:	bf00      	nop

080108e0 <_rclc_take_new_data>:
 80108e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e2:	b09b      	sub	sp, #108	@ 0x6c
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f000 8088 	beq.w	80109fa <_rclc_take_new_data+0x11a>
 80108ea:	7803      	ldrb	r3, [r0, #0]
 80108ec:	4604      	mov	r4, r0
 80108ee:	2b0a      	cmp	r3, #10
 80108f0:	f200 8167 	bhi.w	8010bc2 <_rclc_take_new_data+0x2e2>
 80108f4:	e8df f003 	tbb	[pc, r3]
 80108f8:	44152d2d 	.word	0x44152d2d
 80108fc:	19191944 	.word	0x19191944
 8010900:	065a      	.short	0x065a
 8010902:	15          	.byte	0x15
 8010903:	00          	.byte	0x00
 8010904:	6840      	ldr	r0, [r0, #4]
 8010906:	f890 3020 	ldrb.w	r3, [r0, #32]
 801090a:	2b00      	cmp	r3, #0
 801090c:	f040 80b2 	bne.w	8010a74 <_rclc_take_new_data+0x194>
 8010910:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8010914:	2b00      	cmp	r3, #0
 8010916:	f040 80e4 	bne.w	8010ae2 <_rclc_take_new_data+0x202>
 801091a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801091e:	2b00      	cmp	r3, #0
 8010920:	d16f      	bne.n	8010a02 <_rclc_take_new_data+0x122>
 8010922:	2500      	movs	r5, #0
 8010924:	4628      	mov	r0, r5
 8010926:	b01b      	add	sp, #108	@ 0x6c
 8010928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801092c:	6a0b      	ldr	r3, [r1, #32]
 801092e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d0f5      	beq.n	8010922 <_rclc_take_new_data+0x42>
 8010936:	6882      	ldr	r2, [r0, #8]
 8010938:	f100 0110 	add.w	r1, r0, #16
 801093c:	6840      	ldr	r0, [r0, #4]
 801093e:	f007 ff0d 	bl	801875c <rcl_take_request>
 8010942:	4605      	mov	r5, r0
 8010944:	2800      	cmp	r0, #0
 8010946:	d0ec      	beq.n	8010922 <_rclc_take_new_data+0x42>
 8010948:	f240 2359 	movw	r3, #601	@ 0x259
 801094c:	4298      	cmp	r0, r3
 801094e:	d013      	beq.n	8010978 <_rclc_take_new_data+0x98>
 8010950:	e029      	b.n	80109a6 <_rclc_take_new_data+0xc6>
 8010952:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010954:	680b      	ldr	r3, [r1, #0]
 8010956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0e1      	beq.n	8010922 <_rclc_take_new_data+0x42>
 801095e:	2300      	movs	r3, #0
 8010960:	aa0a      	add	r2, sp, #40	@ 0x28
 8010962:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8010966:	f007 ff5b 	bl	8018820 <rcl_take>
 801096a:	4605      	mov	r5, r0
 801096c:	2800      	cmp	r0, #0
 801096e:	d0d9      	beq.n	8010924 <_rclc_take_new_data+0x44>
 8010970:	f240 1391 	movw	r3, #401	@ 0x191
 8010974:	4298      	cmp	r0, r3
 8010976:	d116      	bne.n	80109a6 <_rclc_take_new_data+0xc6>
 8010978:	2300      	movs	r3, #0
 801097a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801097e:	e7d1      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010980:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010982:	698b      	ldr	r3, [r1, #24]
 8010984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d0ca      	beq.n	8010922 <_rclc_take_new_data+0x42>
 801098c:	6882      	ldr	r2, [r0, #8]
 801098e:	f100 0110 	add.w	r1, r0, #16
 8010992:	6840      	ldr	r0, [r0, #4]
 8010994:	f007 f960 	bl	8017c58 <rcl_take_response>
 8010998:	4605      	mov	r5, r0
 801099a:	2800      	cmp	r0, #0
 801099c:	d0c1      	beq.n	8010922 <_rclc_take_new_data+0x42>
 801099e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80109a2:	4298      	cmp	r0, r3
 80109a4:	d0be      	beq.n	8010924 <_rclc_take_new_data+0x44>
 80109a6:	f000 febf 	bl	8011728 <rcutils_reset_error>
 80109aa:	e7bb      	b.n	8010924 <_rclc_take_new_data+0x44>
 80109ac:	6840      	ldr	r0, [r0, #4]
 80109ae:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d17d      	bne.n	8010ab2 <_rclc_take_new_data+0x1d2>
 80109b6:	69c3      	ldr	r3, [r0, #28]
 80109b8:	b11b      	cbz	r3, 80109c2 <_rclc_take_new_data+0xe2>
 80109ba:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d144      	bne.n	8010a4c <_rclc_take_new_data+0x16c>
 80109c2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f040 80ac 	bne.w	8010b24 <_rclc_take_new_data+0x244>
 80109cc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d0a6      	beq.n	8010922 <_rclc_take_new_data+0x42>
 80109d4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80109d6:	a90a      	add	r1, sp, #40	@ 0x28
 80109d8:	3010      	adds	r0, #16
 80109da:	f009 fa19 	bl	8019e10 <rcl_action_take_result_response>
 80109de:	4605      	mov	r5, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d1e0      	bne.n	80109a6 <_rclc_take_new_data+0xc6>
 80109e4:	6860      	ldr	r0, [r4, #4]
 80109e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80109ea:	f009 fe83 	bl	801a6f4 <rclc_action_find_handle_by_result_request_sequence_number>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d098      	beq.n	8010924 <_rclc_take_new_data+0x44>
 80109f2:	2301      	movs	r3, #1
 80109f4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80109f8:	e794      	b.n	8010924 <_rclc_take_new_data+0x44>
 80109fa:	250b      	movs	r5, #11
 80109fc:	4628      	mov	r0, r5
 80109fe:	b01b      	add	sp, #108	@ 0x6c
 8010a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a02:	ae04      	add	r6, sp, #16
 8010a04:	3010      	adds	r0, #16
 8010a06:	aa0a      	add	r2, sp, #40	@ 0x28
 8010a08:	4631      	mov	r1, r6
 8010a0a:	f009 fc77 	bl	801a2fc <rcl_action_take_cancel_request>
 8010a0e:	4605      	mov	r5, r0
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d1c8      	bne.n	80109a6 <_rclc_take_new_data+0xc6>
 8010a14:	a90a      	add	r1, sp, #40	@ 0x28
 8010a16:	6860      	ldr	r0, [r4, #4]
 8010a18:	f009 fe2c 	bl	801a674 <rclc_action_find_goal_handle_by_uuid>
 8010a1c:	4607      	mov	r7, r0
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f000 80bb 	beq.w	8010b9a <_rclc_take_new_data+0x2ba>
 8010a24:	2101      	movs	r1, #1
 8010a26:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010a2a:	f009 fdad 	bl	801a588 <rcl_action_transition_goal_state>
 8010a2e:	2803      	cmp	r0, #3
 8010a30:	4684      	mov	ip, r0
 8010a32:	f040 80a7 	bne.w	8010b84 <_rclc_take_new_data+0x2a4>
 8010a36:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010a3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a3e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010a42:	e884 0003 	stmia.w	r4, {r0, r1}
 8010a46:	f887 c008 	strb.w	ip, [r7, #8]
 8010a4a:	e76b      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010a4c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010a4e:	3010      	adds	r0, #16
 8010a50:	f009 fa5e 	bl	8019f10 <rcl_action_take_feedback>
 8010a54:	4605      	mov	r5, r0
 8010a56:	2800      	cmp	r0, #0
 8010a58:	d1a5      	bne.n	80109a6 <_rclc_take_new_data+0xc6>
 8010a5a:	6860      	ldr	r0, [r4, #4]
 8010a5c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010a5e:	f009 fe09 	bl	801a674 <rclc_action_find_goal_handle_by_uuid>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2800      	cmp	r0, #0
 8010a66:	f000 80a3 	beq.w	8010bb0 <_rclc_take_new_data+0x2d0>
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	6860      	ldr	r0, [r4, #4]
 8010a6e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8010a72:	e7a6      	b.n	80109c2 <_rclc_take_new_data+0xe2>
 8010a74:	f009 fdd8 	bl	801a628 <rclc_action_take_goal_handle>
 8010a78:	4606      	mov	r6, r0
 8010a7a:	6860      	ldr	r0, [r4, #4]
 8010a7c:	2e00      	cmp	r6, #0
 8010a7e:	f43f af47 	beq.w	8010910 <_rclc_take_new_data+0x30>
 8010a82:	6070      	str	r0, [r6, #4]
 8010a84:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8010a88:	69f2      	ldr	r2, [r6, #28]
 8010a8a:	3010      	adds	r0, #16
 8010a8c:	f009 fb7e 	bl	801a18c <rcl_action_take_goal_request>
 8010a90:	4605      	mov	r5, r0
 8010a92:	2800      	cmp	r0, #0
 8010a94:	f040 808e 	bne.w	8010bb4 <_rclc_take_new_data+0x2d4>
 8010a98:	69f7      	ldr	r7, [r6, #28]
 8010a9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010a9c:	7235      	strb	r5, [r6, #8]
 8010a9e:	f8c6 0009 	str.w	r0, [r6, #9]
 8010aa2:	f8c6 100d 	str.w	r1, [r6, #13]
 8010aa6:	6860      	ldr	r0, [r4, #4]
 8010aa8:	f8c6 2011 	str.w	r2, [r6, #17]
 8010aac:	f8c6 3015 	str.w	r3, [r6, #21]
 8010ab0:	e72e      	b.n	8010910 <_rclc_take_new_data+0x30>
 8010ab2:	aa04      	add	r2, sp, #16
 8010ab4:	a90a      	add	r1, sp, #40	@ 0x28
 8010ab6:	3010      	adds	r0, #16
 8010ab8:	f009 f932 	bl	8019d20 <rcl_action_take_goal_response>
 8010abc:	4605      	mov	r5, r0
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f47f af71 	bne.w	80109a6 <_rclc_take_new_data+0xc6>
 8010ac4:	6860      	ldr	r0, [r4, #4]
 8010ac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010aca:	f009 fe01 	bl	801a6d0 <rclc_action_find_handle_by_goal_request_sequence_number>
 8010ace:	b130      	cbz	r0, 8010ade <_rclc_take_new_data+0x1fe>
 8010ad0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010ada:	f880 2020 	strb.w	r2, [r0, #32]
 8010ade:	6860      	ldr	r0, [r4, #4]
 8010ae0:	e769      	b.n	80109b6 <_rclc_take_new_data+0xd6>
 8010ae2:	3010      	adds	r0, #16
 8010ae4:	aa04      	add	r2, sp, #16
 8010ae6:	a90a      	add	r1, sp, #40	@ 0x28
 8010ae8:	f009 fbc8 	bl	801a27c <rcl_action_take_result_request>
 8010aec:	4605      	mov	r5, r0
 8010aee:	2800      	cmp	r0, #0
 8010af0:	f47f af59 	bne.w	80109a6 <_rclc_take_new_data+0xc6>
 8010af4:	a904      	add	r1, sp, #16
 8010af6:	6860      	ldr	r0, [r4, #4]
 8010af8:	f009 fdbc 	bl	801a674 <rclc_action_find_goal_handle_by_uuid>
 8010afc:	4607      	mov	r7, r0
 8010afe:	b160      	cbz	r0, 8010b1a <_rclc_take_new_data+0x23a>
 8010b00:	ad0a      	add	r5, sp, #40	@ 0x28
 8010b02:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8010b06:	f04f 0c02 	mov.w	ip, #2
 8010b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010b0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b12:	e886 0003 	stmia.w	r6, {r0, r1}
 8010b16:	f887 c008 	strb.w	ip, [r7, #8]
 8010b1a:	6860      	ldr	r0, [r4, #4]
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8010b22:	e6fa      	b.n	801091a <_rclc_take_new_data+0x3a>
 8010b24:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010b28:	a90a      	add	r1, sp, #40	@ 0x28
 8010b2a:	3010      	adds	r0, #16
 8010b2c:	f009 f9b0 	bl	8019e90 <rcl_action_take_cancel_response>
 8010b30:	4605      	mov	r5, r0
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f47f af37 	bne.w	80109a6 <_rclc_take_new_data+0xc6>
 8010b38:	6860      	ldr	r0, [r4, #4]
 8010b3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b3e:	f009 fdeb 	bl	801a718 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8010b42:	4606      	mov	r6, r0
 8010b44:	6860      	ldr	r0, [r4, #4]
 8010b46:	2e00      	cmp	r6, #0
 8010b48:	f43f af40 	beq.w	80109cc <_rclc_take_new_data+0xec>
 8010b4c:	2701      	movs	r7, #1
 8010b4e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010b50:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f43f af3a 	beq.w	80109cc <_rclc_take_new_data+0xec>
 8010b58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010b5a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8010b5e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010b62:	f009 fd87 	bl	801a674 <rclc_action_find_goal_handle_by_uuid>
 8010b66:	b138      	cbz	r0, 8010b78 <_rclc_take_new_data+0x298>
 8010b68:	6860      	ldr	r0, [r4, #4]
 8010b6a:	3501      	adds	r5, #1
 8010b6c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8010b70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010b72:	42ab      	cmp	r3, r5
 8010b74:	d8f0      	bhi.n	8010b58 <_rclc_take_new_data+0x278>
 8010b76:	e729      	b.n	80109cc <_rclc_take_new_data+0xec>
 8010b78:	6860      	ldr	r0, [r4, #4]
 8010b7a:	3501      	adds	r5, #1
 8010b7c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010b7e:	42ab      	cmp	r3, r5
 8010b80:	d8ea      	bhi.n	8010b58 <_rclc_take_new_data+0x278>
 8010b82:	e723      	b.n	80109cc <_rclc_take_new_data+0xec>
 8010b84:	ab06      	add	r3, sp, #24
 8010b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b88:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010b8c:	2103      	movs	r1, #3
 8010b8e:	6860      	ldr	r0, [r4, #4]
 8010b90:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010b94:	f009 fe34 	bl	801a800 <rclc_action_server_goal_cancel_reject>
 8010b98:	e6c4      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010b9a:	ab06      	add	r3, sp, #24
 8010b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010ba2:	2102      	movs	r1, #2
 8010ba4:	6860      	ldr	r0, [r4, #4]
 8010ba6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010baa:	f009 fe29 	bl	801a800 <rclc_action_server_goal_cancel_reject>
 8010bae:	e6b9      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010bb0:	6860      	ldr	r0, [r4, #4]
 8010bb2:	e706      	b.n	80109c2 <_rclc_take_new_data+0xe2>
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	6860      	ldr	r0, [r4, #4]
 8010bb8:	f009 fd46 	bl	801a648 <rclc_action_remove_used_goal_handle>
 8010bbc:	f000 fdb4 	bl	8011728 <rcutils_reset_error>
 8010bc0:	e6b0      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010bc2:	2501      	movs	r5, #1
 8010bc4:	e6ae      	b.n	8010924 <_rclc_take_new_data+0x44>
 8010bc6:	bf00      	nop

08010bc8 <_rclc_execute.part.0>:
 8010bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bca:	7803      	ldrb	r3, [r0, #0]
 8010bcc:	b085      	sub	sp, #20
 8010bce:	4604      	mov	r4, r0
 8010bd0:	2b0a      	cmp	r3, #10
 8010bd2:	f200 8139 	bhi.w	8010e48 <_rclc_execute.part.0+0x280>
 8010bd6:	e8df f003 	tbb	[pc, r3]
 8010bda:	4268      	.short	0x4268
 8010bdc:	06a75b4d 	.word	0x06a75b4d
 8010be0:	721d0606 	.word	0x721d0606
 8010be4:	62          	.byte	0x62
 8010be5:	00          	.byte	0x00
 8010be6:	2b06      	cmp	r3, #6
 8010be8:	f000 8126 	beq.w	8010e38 <_rclc_execute.part.0+0x270>
 8010bec:	2b07      	cmp	r3, #7
 8010bee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010bf0:	f040 811c 	bne.w	8010e2c <_rclc_execute.part.0+0x264>
 8010bf4:	f104 0510 	add.w	r5, r4, #16
 8010bf8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010bfc:	6880      	ldr	r0, [r0, #8]
 8010bfe:	4798      	blx	r3
 8010c00:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010c02:	4629      	mov	r1, r5
 8010c04:	6860      	ldr	r0, [r4, #4]
 8010c06:	f007 fde9 	bl	80187dc <rcl_send_response>
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	b378      	cbz	r0, 8010c6e <_rclc_execute.part.0+0xa6>
 8010c0e:	f000 fd8b 	bl	8011728 <rcutils_reset_error>
 8010c12:	e02c      	b.n	8010c6e <_rclc_execute.part.0+0xa6>
 8010c14:	6840      	ldr	r0, [r0, #4]
 8010c16:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 808e 	beq.w	8010d3c <_rclc_execute.part.0+0x174>
 8010c20:	2600      	movs	r6, #0
 8010c22:	2701      	movs	r7, #1
 8010c24:	e004      	b.n	8010c30 <_rclc_execute.part.0+0x68>
 8010c26:	f009 fcd9 	bl	801a5dc <rclc_action_send_result_request>
 8010c2a:	b998      	cbnz	r0, 8010c54 <_rclc_execute.part.0+0x8c>
 8010c2c:	722f      	strb	r7, [r5, #8]
 8010c2e:	6860      	ldr	r0, [r4, #4]
 8010c30:	f009 fd84 	bl	801a73c <rclc_action_find_first_handle_with_goal_response>
 8010c34:	4605      	mov	r5, r0
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d07f      	beq.n	8010d3a <_rclc_execute.part.0+0x172>
 8010c3a:	6863      	ldr	r3, [r4, #4]
 8010c3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8010c44:	f885 6020 	strb.w	r6, [r5, #32]
 8010c48:	4798      	blx	r3
 8010c4a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010c4e:	4628      	mov	r0, r5
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1e8      	bne.n	8010c26 <_rclc_execute.part.0+0x5e>
 8010c54:	6860      	ldr	r0, [r4, #4]
 8010c56:	4629      	mov	r1, r5
 8010c58:	f009 fcf6 	bl	801a648 <rclc_action_remove_used_goal_handle>
 8010c5c:	e7e7      	b.n	8010c2e <_rclc_execute.part.0+0x66>
 8010c5e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8010c62:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8010c66:	b100      	cbz	r0, 8010c6a <_rclc_execute.part.0+0xa2>
 8010c68:	68a0      	ldr	r0, [r4, #8]
 8010c6a:	2400      	movs	r4, #0
 8010c6c:	4798      	blx	r3
 8010c6e:	4620      	mov	r0, r4
 8010c70:	b005      	add	sp, #20
 8010c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c74:	6840      	ldr	r0, [r0, #4]
 8010c76:	f008 f909 	bl	8018e8c <rcl_timer_call>
 8010c7a:	f240 3321 	movw	r3, #801	@ 0x321
 8010c7e:	4604      	mov	r4, r0
 8010c80:	4298      	cmp	r0, r3
 8010c82:	d001      	beq.n	8010c88 <_rclc_execute.part.0+0xc0>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d1c2      	bne.n	8010c0e <_rclc_execute.part.0+0x46>
 8010c88:	2400      	movs	r4, #0
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	b005      	add	sp, #20
 8010c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c90:	2400      	movs	r4, #0
 8010c92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c94:	6880      	ldr	r0, [r0, #8]
 8010c96:	4798      	blx	r3
 8010c98:	4620      	mov	r0, r4
 8010c9a:	b005      	add	sp, #20
 8010c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c9e:	2400      	movs	r4, #0
 8010ca0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010ca2:	4798      	blx	r3
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	b005      	add	sp, #20
 8010ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010caa:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8010cae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cb0:	b100      	cbz	r0, 8010cb4 <_rclc_execute.part.0+0xec>
 8010cb2:	68a0      	ldr	r0, [r4, #8]
 8010cb4:	2400      	movs	r4, #0
 8010cb6:	4798      	blx	r3
 8010cb8:	4620      	mov	r0, r4
 8010cba:	b005      	add	sp, #20
 8010cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cbe:	6840      	ldr	r0, [r0, #4]
 8010cc0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010cc4:	bb3b      	cbnz	r3, 8010d16 <_rclc_execute.part.0+0x14e>
 8010cc6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d07d      	beq.n	8010dca <_rclc_execute.part.0+0x202>
 8010cce:	f640 0634 	movw	r6, #2100	@ 0x834
 8010cd2:	2701      	movs	r7, #1
 8010cd4:	e007      	b.n	8010ce6 <_rclc_execute.part.0+0x11e>
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f009 fd48 	bl	801a76c <rclc_action_server_response_goal_request>
 8010cdc:	4629      	mov	r1, r5
 8010cde:	6860      	ldr	r0, [r4, #4]
 8010ce0:	f009 fcb2 	bl	801a648 <rclc_action_remove_used_goal_handle>
 8010ce4:	6860      	ldr	r0, [r4, #4]
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	f009 fcda 	bl	801a6a0 <rclc_action_find_first_handle_by_status>
 8010cec:	4605      	mov	r5, r0
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	d068      	beq.n	8010dc4 <_rclc_execute.part.0+0x1fc>
 8010cf2:	6863      	ldr	r3, [r4, #4]
 8010cf4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	4798      	blx	r3
 8010cfa:	42b0      	cmp	r0, r6
 8010cfc:	f04f 0100 	mov.w	r1, #0
 8010d00:	d1e9      	bne.n	8010cd6 <_rclc_execute.part.0+0x10e>
 8010d02:	2101      	movs	r1, #1
 8010d04:	4628      	mov	r0, r5
 8010d06:	f009 fd31 	bl	801a76c <rclc_action_server_response_goal_request>
 8010d0a:	722f      	strb	r7, [r5, #8]
 8010d0c:	e7ea      	b.n	8010ce4 <_rclc_execute.part.0+0x11c>
 8010d0e:	6848      	ldr	r0, [r1, #4]
 8010d10:	f009 fc9a 	bl	801a648 <rclc_action_remove_used_goal_handle>
 8010d14:	6860      	ldr	r0, [r4, #4]
 8010d16:	f009 fccf 	bl	801a6b8 <rclc_action_find_first_terminated_handle>
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d1f6      	bne.n	8010d0e <_rclc_execute.part.0+0x146>
 8010d20:	6860      	ldr	r0, [r4, #4]
 8010d22:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010d26:	e7ce      	b.n	8010cc6 <_rclc_execute.part.0+0xfe>
 8010d28:	2400      	movs	r4, #0
 8010d2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d2c:	f100 0110 	add.w	r1, r0, #16
 8010d30:	6880      	ldr	r0, [r0, #8]
 8010d32:	4798      	blx	r3
 8010d34:	4620      	mov	r0, r4
 8010d36:	b005      	add	sp, #20
 8010d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d3a:	6860      	ldr	r0, [r4, #4]
 8010d3c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d40:	b18b      	cbz	r3, 8010d66 <_rclc_execute.part.0+0x19e>
 8010d42:	68c5      	ldr	r5, [r0, #12]
 8010d44:	b32d      	cbz	r5, 8010d92 <_rclc_execute.part.0+0x1ca>
 8010d46:	2600      	movs	r6, #0
 8010d48:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010d4c:	b143      	cbz	r3, 8010d60 <_rclc_execute.part.0+0x198>
 8010d4e:	69c3      	ldr	r3, [r0, #28]
 8010d50:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010d54:	b123      	cbz	r3, 8010d60 <_rclc_execute.part.0+0x198>
 8010d56:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010d58:	4628      	mov	r0, r5
 8010d5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010d5c:	4798      	blx	r3
 8010d5e:	6860      	ldr	r0, [r4, #4]
 8010d60:	682d      	ldr	r5, [r5, #0]
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	d1f0      	bne.n	8010d48 <_rclc_execute.part.0+0x180>
 8010d66:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010d6a:	b193      	cbz	r3, 8010d92 <_rclc_execute.part.0+0x1ca>
 8010d6c:	68c5      	ldr	r5, [r0, #12]
 8010d6e:	b185      	cbz	r5, 8010d92 <_rclc_execute.part.0+0x1ca>
 8010d70:	2600      	movs	r6, #0
 8010d72:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8010d76:	b14b      	cbz	r3, 8010d8c <_rclc_execute.part.0+0x1c4>
 8010d78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010d7a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010d7e:	b12b      	cbz	r3, 8010d8c <_rclc_execute.part.0+0x1c4>
 8010d80:	4628      	mov	r0, r5
 8010d82:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010d86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010d88:	4798      	blx	r3
 8010d8a:	6860      	ldr	r0, [r4, #4]
 8010d8c:	682d      	ldr	r5, [r5, #0]
 8010d8e:	2d00      	cmp	r5, #0
 8010d90:	d1ef      	bne.n	8010d72 <_rclc_execute.part.0+0x1aa>
 8010d92:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f43f af76 	beq.w	8010c88 <_rclc_execute.part.0+0xc0>
 8010d9c:	2700      	movs	r7, #0
 8010d9e:	e00b      	b.n	8010db8 <_rclc_execute.part.0+0x1f0>
 8010da0:	6863      	ldr	r3, [r4, #4]
 8010da2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010da4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010da6:	6a1e      	ldr	r6, [r3, #32]
 8010da8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010dac:	47b0      	blx	r6
 8010dae:	6860      	ldr	r0, [r4, #4]
 8010db0:	4629      	mov	r1, r5
 8010db2:	f009 fc49 	bl	801a648 <rclc_action_remove_used_goal_handle>
 8010db6:	6860      	ldr	r0, [r4, #4]
 8010db8:	f009 fccc 	bl	801a754 <rclc_action_find_first_handle_with_result_response>
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	d1ee      	bne.n	8010da0 <_rclc_execute.part.0+0x1d8>
 8010dc2:	e761      	b.n	8010c88 <_rclc_execute.part.0+0xc0>
 8010dc4:	6860      	ldr	r0, [r4, #4]
 8010dc6:	f880 5020 	strb.w	r5, [r0, #32]
 8010dca:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f43f af5a 	beq.w	8010c88 <_rclc_execute.part.0+0xc0>
 8010dd4:	68c5      	ldr	r5, [r0, #12]
 8010dd6:	b1b5      	cbz	r5, 8010e06 <_rclc_execute.part.0+0x23e>
 8010dd8:	2602      	movs	r6, #2
 8010dda:	e001      	b.n	8010de0 <_rclc_execute.part.0+0x218>
 8010ddc:	682d      	ldr	r5, [r5, #0]
 8010dde:	b195      	cbz	r5, 8010e06 <_rclc_execute.part.0+0x23e>
 8010de0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8010de4:	2b03      	cmp	r3, #3
 8010de6:	d1f9      	bne.n	8010ddc <_rclc_execute.part.0+0x214>
 8010de8:	69c3      	ldr	r3, [r0, #28]
 8010dea:	4628      	mov	r0, r5
 8010dec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010dee:	4798      	blx	r3
 8010df0:	4603      	mov	r3, r0
 8010df2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8010df6:	4628      	mov	r0, r5
 8010df8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010dfc:	b143      	cbz	r3, 8010e10 <_rclc_execute.part.0+0x248>
 8010dfe:	f009 fcd3 	bl	801a7a8 <rclc_action_server_goal_cancel_accept>
 8010e02:	6860      	ldr	r0, [r4, #4]
 8010e04:	e7ea      	b.n	8010ddc <_rclc_execute.part.0+0x214>
 8010e06:	2300      	movs	r3, #0
 8010e08:	461c      	mov	r4, r3
 8010e0a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010e0e:	e72e      	b.n	8010c6e <_rclc_execute.part.0+0xa6>
 8010e10:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010e12:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8010e16:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010e1a:	2101      	movs	r1, #1
 8010e1c:	6860      	ldr	r0, [r4, #4]
 8010e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e22:	f009 fced 	bl	801a800 <rclc_action_server_goal_cancel_reject>
 8010e26:	722e      	strb	r6, [r5, #8]
 8010e28:	6860      	ldr	r0, [r4, #4]
 8010e2a:	e7d7      	b.n	8010ddc <_rclc_execute.part.0+0x214>
 8010e2c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010e2e:	f104 0510 	add.w	r5, r4, #16
 8010e32:	6880      	ldr	r0, [r0, #8]
 8010e34:	4798      	blx	r3
 8010e36:	e6e3      	b.n	8010c00 <_rclc_execute.part.0+0x38>
 8010e38:	f100 0510 	add.w	r5, r0, #16
 8010e3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e3e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010e40:	4629      	mov	r1, r5
 8010e42:	6880      	ldr	r0, [r0, #8]
 8010e44:	4798      	blx	r3
 8010e46:	e6db      	b.n	8010c00 <_rclc_execute.part.0+0x38>
 8010e48:	2401      	movs	r4, #1
 8010e4a:	e710      	b.n	8010c6e <_rclc_execute.part.0+0xa6>

08010e4c <rclc_executor_trigger_any>:
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d03d      	beq.n	8010ecc <rclc_executor_trigger_any+0x80>
 8010e50:	2900      	cmp	r1, #0
 8010e52:	d03c      	beq.n	8010ece <rclc_executor_trigger_any+0x82>
 8010e54:	4603      	mov	r3, r0
 8010e56:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d035      	beq.n	8010ecc <rclc_executor_trigger_any+0x80>
 8010e60:	b430      	push	{r4, r5}
 8010e62:	f893 c000 	ldrb.w	ip, [r3]
 8010e66:	f1bc 0f08 	cmp.w	ip, #8
 8010e6a:	d11d      	bne.n	8010ea8 <rclc_executor_trigger_any+0x5c>
 8010e6c:	685c      	ldr	r4, [r3, #4]
 8010e6e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010e70:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8010e74:	d105      	bne.n	8010e82 <rclc_executor_trigger_any+0x36>
 8010e76:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010e7a:	b910      	cbnz	r0, 8010e82 <rclc_executor_trigger_any+0x36>
 8010e7c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010e80:	b128      	cbz	r0, 8010e8e <rclc_executor_trigger_any+0x42>
 8010e82:	bc30      	pop	{r4, r5}
 8010e84:	4770      	bx	lr
 8010e86:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d1f9      	bne.n	8010e82 <rclc_executor_trigger_any+0x36>
 8010e8e:	3201      	adds	r2, #1
 8010e90:	3340      	adds	r3, #64	@ 0x40
 8010e92:	4291      	cmp	r1, r2
 8010e94:	d017      	beq.n	8010ec6 <rclc_executor_trigger_any+0x7a>
 8010e96:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d0f1      	beq.n	8010e82 <rclc_executor_trigger_any+0x36>
 8010e9e:	f893 c000 	ldrb.w	ip, [r3]
 8010ea2:	f1bc 0f08 	cmp.w	ip, #8
 8010ea6:	d0e1      	beq.n	8010e6c <rclc_executor_trigger_any+0x20>
 8010ea8:	f1bc 0f09 	cmp.w	ip, #9
 8010eac:	d1eb      	bne.n	8010e86 <rclc_executor_trigger_any+0x3a>
 8010eae:	685c      	ldr	r4, [r3, #4]
 8010eb0:	6a25      	ldr	r5, [r4, #32]
 8010eb2:	2d00      	cmp	r5, #0
 8010eb4:	d1e5      	bne.n	8010e82 <rclc_executor_trigger_any+0x36>
 8010eb6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d1e1      	bne.n	8010e82 <rclc_executor_trigger_any+0x36>
 8010ebe:	3201      	adds	r2, #1
 8010ec0:	3340      	adds	r3, #64	@ 0x40
 8010ec2:	4291      	cmp	r1, r2
 8010ec4:	d1e7      	bne.n	8010e96 <rclc_executor_trigger_any+0x4a>
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	bc30      	pop	{r4, r5}
 8010eca:	4770      	bx	lr
 8010ecc:	4770      	bx	lr
 8010ece:	4608      	mov	r0, r1
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop

08010ed4 <rclc_executor_get_zero_initialized_executor>:
 8010ed4:	b510      	push	{r4, lr}
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	2288      	movs	r2, #136	@ 0x88
 8010eda:	4902      	ldr	r1, [pc, #8]	@ (8010ee4 <rclc_executor_get_zero_initialized_executor+0x10>)
 8010edc:	f00d f9ed 	bl	801e2ba <memcpy>
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	bd10      	pop	{r4, pc}
 8010ee4:	0801f0c8 	.word	0x0801f0c8

08010ee8 <rclc_executor_init>:
 8010ee8:	2900      	cmp	r1, #0
 8010eea:	d06a      	beq.n	8010fc2 <rclc_executor_init+0xda>
 8010eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	b0b0      	sub	sp, #192	@ 0xc0
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d05c      	beq.n	8010fb2 <rclc_executor_init+0xca>
 8010ef8:	4616      	mov	r6, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	4688      	mov	r8, r1
 8010efe:	461f      	mov	r7, r3
 8010f00:	f000 fbee 	bl	80116e0 <rcutils_allocator_is_valid>
 8010f04:	2e00      	cmp	r6, #0
 8010f06:	d054      	beq.n	8010fb2 <rclc_executor_init+0xca>
 8010f08:	f080 0401 	eor.w	r4, r0, #1
 8010f0c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8010f10:	d14f      	bne.n	8010fb2 <rclc_executor_init+0xca>
 8010f12:	2288      	movs	r2, #136	@ 0x88
 8010f14:	4930      	ldr	r1, [pc, #192]	@ (8010fd8 <rclc_executor_init+0xf0>)
 8010f16:	a80e      	add	r0, sp, #56	@ 0x38
 8010f18:	f00d f9cf 	bl	801e2ba <memcpy>
 8010f1c:	a90e      	add	r1, sp, #56	@ 0x38
 8010f1e:	2288      	movs	r2, #136	@ 0x88
 8010f20:	4628      	mov	r0, r5
 8010f22:	f00d f9ca 	bl	801e2ba <memcpy>
 8010f26:	4668      	mov	r0, sp
 8010f28:	f8c5 8000 	str.w	r8, [r5]
 8010f2c:	60ae      	str	r6, [r5, #8]
 8010f2e:	f008 f923 	bl	8019178 <rcl_get_zero_initialized_wait_set>
 8010f32:	46ec      	mov	ip, sp
 8010f34:	f105 0e14 	add.w	lr, r5, #20
 8010f38:	f8d7 8000 	ldr.w	r8, [r7]
 8010f3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f50:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8010fd0 <rclc_executor_init+0xe8>
 8010f54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f58:	f8dc 3000 	ldr.w	r3, [ip]
 8010f5c:	01b0      	lsls	r0, r6, #6
 8010f5e:	6939      	ldr	r1, [r7, #16]
 8010f60:	f8ce 3000 	str.w	r3, [lr]
 8010f64:	612f      	str	r7, [r5, #16]
 8010f66:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010f6a:	47c0      	blx	r8
 8010f6c:	6068      	str	r0, [r5, #4]
 8010f6e:	b908      	cbnz	r0, 8010f74 <rclc_executor_init+0x8c>
 8010f70:	e029      	b.n	8010fc6 <rclc_executor_init+0xde>
 8010f72:	6868      	ldr	r0, [r5, #4]
 8010f74:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010f78:	3401      	adds	r4, #1
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	f000 fa74 	bl	8011468 <rclc_executor_handle_init>
 8010f80:	42a6      	cmp	r6, r4
 8010f82:	d8f6      	bhi.n	8010f72 <rclc_executor_init+0x8a>
 8010f84:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010f88:	f000 fa62 	bl	8011450 <rclc_executor_handle_counters_zero_init>
 8010f8c:	4a13      	ldr	r2, [pc, #76]	@ (8010fdc <rclc_executor_init+0xf4>)
 8010f8e:	2300      	movs	r3, #0
 8010f90:	6868      	ldr	r0, [r5, #4]
 8010f92:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8010f96:	b168      	cbz	r0, 8010fb4 <rclc_executor_init+0xcc>
 8010f98:	68ab      	ldr	r3, [r5, #8]
 8010f9a:	b173      	cbz	r3, 8010fba <rclc_executor_init+0xd2>
 8010f9c:	692a      	ldr	r2, [r5, #16]
 8010f9e:	fab2 f382 	clz	r3, r2
 8010fa2:	095b      	lsrs	r3, r3, #5
 8010fa4:	b14a      	cbz	r2, 8010fba <rclc_executor_init+0xd2>
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8010fac:	b030      	add	sp, #192	@ 0xc0
 8010fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fb2:	200b      	movs	r0, #11
 8010fb4:	b030      	add	sp, #192	@ 0xc0
 8010fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fba:	2000      	movs	r0, #0
 8010fbc:	b030      	add	sp, #192	@ 0xc0
 8010fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc2:	200b      	movs	r0, #11
 8010fc4:	4770      	bx	lr
 8010fc6:	200a      	movs	r0, #10
 8010fc8:	e7f4      	b.n	8010fb4 <rclc_executor_init+0xcc>
 8010fca:	bf00      	nop
 8010fcc:	f3af 8000 	nop.w
 8010fd0:	3b9aca00 	.word	0x3b9aca00
 8010fd4:	00000000 	.word	0x00000000
 8010fd8:	0801f0c8 	.word	0x0801f0c8
 8010fdc:	08010e4d 	.word	0x08010e4d

08010fe0 <rclc_executor_add_timer>:
 8010fe0:	b351      	cbz	r1, 8011038 <rclc_executor_add_timer+0x58>
 8010fe2:	fab0 f280 	clz	r2, r0
 8010fe6:	b570      	push	{r4, r5, r6, lr}
 8010fe8:	0952      	lsrs	r2, r2, #5
 8010fea:	4604      	mov	r4, r0
 8010fec:	b1e0      	cbz	r0, 8011028 <rclc_executor_add_timer+0x48>
 8010fee:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 8010ff2:	4283      	cmp	r3, r0
 8010ff4:	d301      	bcc.n	8010ffa <rclc_executor_add_timer+0x1a>
 8010ff6:	2001      	movs	r0, #1
 8010ff8:	bd70      	pop	{r4, r5, r6, pc}
 8010ffa:	6860      	ldr	r0, [r4, #4]
 8010ffc:	019d      	lsls	r5, r3, #6
 8010ffe:	1c5e      	adds	r6, r3, #1
 8011000:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 8011004:	6059      	str	r1, [r3, #4]
 8011006:	2102      	movs	r1, #2
 8011008:	5341      	strh	r1, [r0, r5]
 801100a:	2101      	movs	r1, #1
 801100c:	f104 0514 	add.w	r5, r4, #20
 8011010:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011012:	8719      	strh	r1, [r3, #56]	@ 0x38
 8011014:	4628      	mov	r0, r5
 8011016:	60e6      	str	r6, [r4, #12]
 8011018:	f008 f8c2 	bl	80191a0 <rcl_wait_set_is_valid>
 801101c:	b930      	cbnz	r0, 801102c <rclc_executor_add_timer+0x4c>
 801101e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011020:	2000      	movs	r0, #0
 8011022:	3301      	adds	r3, #1
 8011024:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	200b      	movs	r0, #11
 801102a:	bd70      	pop	{r4, r5, r6, pc}
 801102c:	4628      	mov	r0, r5
 801102e:	f008 f8bd 	bl	80191ac <rcl_wait_set_fini>
 8011032:	2800      	cmp	r0, #0
 8011034:	d0f3      	beq.n	801101e <rclc_executor_add_timer+0x3e>
 8011036:	bd70      	pop	{r4, r5, r6, pc}
 8011038:	200b      	movs	r0, #11
 801103a:	4770      	bx	lr

0801103c <rclc_executor_prepare>:
 801103c:	2800      	cmp	r0, #0
 801103e:	d044      	beq.n	80110ca <rclc_executor_prepare+0x8e>
 8011040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011042:	f100 0514 	add.w	r5, r0, #20
 8011046:	b09b      	sub	sp, #108	@ 0x6c
 8011048:	4604      	mov	r4, r0
 801104a:	4628      	mov	r0, r5
 801104c:	f008 f8a8 	bl	80191a0 <rcl_wait_set_is_valid>
 8011050:	b110      	cbz	r0, 8011058 <rclc_executor_prepare+0x1c>
 8011052:	2000      	movs	r0, #0
 8011054:	b01b      	add	sp, #108	@ 0x6c
 8011056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011058:	4628      	mov	r0, r5
 801105a:	f008 f8a7 	bl	80191ac <rcl_wait_set_fini>
 801105e:	2800      	cmp	r0, #0
 8011060:	d130      	bne.n	80110c4 <rclc_executor_prepare+0x88>
 8011062:	a80c      	add	r0, sp, #48	@ 0x30
 8011064:	ae04      	add	r6, sp, #16
 8011066:	f008 f887 	bl	8019178 <rcl_get_zero_initialized_wait_set>
 801106a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801106e:	46ae      	mov	lr, r5
 8011070:	6927      	ldr	r7, [r4, #16]
 8011072:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011076:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801107a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801107e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011082:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011086:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801108a:	f8dc 3000 	ldr.w	r3, [ip]
 801108e:	f8ce 3000 	str.w	r3, [lr]
 8011092:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011094:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	4628      	mov	r0, r5
 801109a:	6822      	ldr	r2, [r4, #0]
 801109c:	6033      	str	r3, [r6, #0]
 801109e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80110a0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80110a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80110a6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80110aa:	e9cd 2100 	strd	r2, r1, [sp]
 80110ae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80110b0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80110b2:	f008 fb7b 	bl	80197ac <rcl_wait_set_init>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d0cc      	beq.n	8011054 <rclc_executor_prepare+0x18>
 80110ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 80110bc:	f000 fb34 	bl	8011728 <rcutils_reset_error>
 80110c0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80110c2:	e7c7      	b.n	8011054 <rclc_executor_prepare+0x18>
 80110c4:	f000 fb30 	bl	8011728 <rcutils_reset_error>
 80110c8:	e7cb      	b.n	8011062 <rclc_executor_prepare+0x26>
 80110ca:	200b      	movs	r0, #11
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop

080110d0 <rclc_executor_spin_some.part.0>:
 80110d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	4605      	mov	r5, r0
 80110d6:	4691      	mov	r9, r2
 80110d8:	4698      	mov	r8, r3
 80110da:	f7ff ffaf 	bl	801103c <rclc_executor_prepare>
 80110de:	f105 0614 	add.w	r6, r5, #20
 80110e2:	4630      	mov	r0, r6
 80110e4:	f008 f92e 	bl	8019344 <rcl_wait_set_clear>
 80110e8:	4607      	mov	r7, r0
 80110ea:	2800      	cmp	r0, #0
 80110ec:	f040 80a8 	bne.w	8011240 <rclc_executor_spin_some.part.0+0x170>
 80110f0:	68ab      	ldr	r3, [r5, #8]
 80110f2:	b30b      	cbz	r3, 8011138 <rclc_executor_spin_some.part.0+0x68>
 80110f4:	4604      	mov	r4, r0
 80110f6:	6869      	ldr	r1, [r5, #4]
 80110f8:	01a2      	lsls	r2, r4, #6
 80110fa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80110fe:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8011102:	b1cb      	cbz	r3, 8011138 <rclc_executor_spin_some.part.0+0x68>
 8011104:	5c8b      	ldrb	r3, [r1, r2]
 8011106:	2b0a      	cmp	r3, #10
 8011108:	f200 80de 	bhi.w	80112c8 <rclc_executor_spin_some.part.0+0x1f8>
 801110c:	e8df f003 	tbb	[pc, r3]
 8011110:	8da99d9d 	.word	0x8da99d9d
 8011114:	0606068d 	.word	0x0606068d
 8011118:	c1ce      	.short	0xc1ce
 801111a:	b5          	.byte	0xb5
 801111b:	00          	.byte	0x00
 801111c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011120:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011124:	4630      	mov	r0, r6
 8011126:	f008 fc5d 	bl	80199e4 <rcl_wait_set_add_service>
 801112a:	2800      	cmp	r0, #0
 801112c:	f040 8087 	bne.w	801123e <rclc_executor_spin_some.part.0+0x16e>
 8011130:	3401      	adds	r4, #1
 8011132:	68ab      	ldr	r3, [r5, #8]
 8011134:	429c      	cmp	r4, r3
 8011136:	d3de      	bcc.n	80110f6 <rclc_executor_spin_some.part.0+0x26>
 8011138:	4643      	mov	r3, r8
 801113a:	464a      	mov	r2, r9
 801113c:	4630      	mov	r0, r6
 801113e:	f008 fc7f 	bl	8019a40 <rcl_wait>
 8011142:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8011146:	2b00      	cmp	r3, #0
 8011148:	f000 80c6 	beq.w	80112d8 <rclc_executor_spin_some.part.0+0x208>
 801114c:	2b01      	cmp	r3, #1
 801114e:	f040 80bb 	bne.w	80112c8 <rclc_executor_spin_some.part.0+0x1f8>
 8011152:	68ab      	ldr	r3, [r5, #8]
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 8159 	beq.w	801140c <rclc_executor_spin_some.part.0+0x33c>
 801115a:	2400      	movs	r4, #0
 801115c:	f240 1991 	movw	r9, #401	@ 0x191
 8011160:	46a0      	mov	r8, r4
 8011162:	e00a      	b.n	801117a <rclc_executor_spin_some.part.0+0xaa>
 8011164:	f7ff fb6e 	bl	8010844 <_rclc_check_for_new_data>
 8011168:	4604      	mov	r4, r0
 801116a:	b110      	cbz	r0, 8011172 <rclc_executor_spin_some.part.0+0xa2>
 801116c:	4548      	cmp	r0, r9
 801116e:	f040 80b1 	bne.w	80112d4 <rclc_executor_spin_some.part.0+0x204>
 8011172:	68ab      	ldr	r3, [r5, #8]
 8011174:	4598      	cmp	r8, r3
 8011176:	f080 8126 	bcs.w	80113c6 <rclc_executor_spin_some.part.0+0x2f6>
 801117a:	686a      	ldr	r2, [r5, #4]
 801117c:	4631      	mov	r1, r6
 801117e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011182:	f108 0801 	add.w	r8, r8, #1
 8011186:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801118a:	f1bc 0f00 	cmp.w	ip, #0
 801118e:	d1e9      	bne.n	8011164 <rclc_executor_spin_some.part.0+0x94>
 8011190:	4619      	mov	r1, r3
 8011192:	4610      	mov	r0, r2
 8011194:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8011198:	4798      	blx	r3
 801119a:	2800      	cmp	r0, #0
 801119c:	f000 809a 	beq.w	80112d4 <rclc_executor_spin_some.part.0+0x204>
 80111a0:	68ab      	ldr	r3, [r5, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 8096 	beq.w	80112d4 <rclc_executor_spin_some.part.0+0x204>
 80111a8:	f04f 0800 	mov.w	r8, #0
 80111ac:	f240 1991 	movw	r9, #401	@ 0x191
 80111b0:	e009      	b.n	80111c6 <rclc_executor_spin_some.part.0+0xf6>
 80111b2:	f7ff fb95 	bl	80108e0 <_rclc_take_new_data>
 80111b6:	4604      	mov	r4, r0
 80111b8:	b110      	cbz	r0, 80111c0 <rclc_executor_spin_some.part.0+0xf0>
 80111ba:	4548      	cmp	r0, r9
 80111bc:	f040 808a 	bne.w	80112d4 <rclc_executor_spin_some.part.0+0x204>
 80111c0:	68ab      	ldr	r3, [r5, #8]
 80111c2:	4598      	cmp	r8, r3
 80111c4:	d209      	bcs.n	80111da <rclc_executor_spin_some.part.0+0x10a>
 80111c6:	6868      	ldr	r0, [r5, #4]
 80111c8:	4631      	mov	r1, r6
 80111ca:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80111ce:	f108 0801 	add.w	r8, r8, #1
 80111d2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	d1eb      	bne.n	80111b2 <rclc_executor_spin_some.part.0+0xe2>
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d07a      	beq.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 80111de:	2600      	movs	r6, #0
 80111e0:	e00e      	b.n	8011200 <rclc_executor_spin_some.part.0+0x130>
 80111e2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80111e6:	2a08      	cmp	r2, #8
 80111e8:	f000 80fc 	beq.w	80113e4 <rclc_executor_spin_some.part.0+0x314>
 80111ec:	2a09      	cmp	r2, #9
 80111ee:	f000 80ee 	beq.w	80113ce <rclc_executor_spin_some.part.0+0x2fe>
 80111f2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80111f6:	b98a      	cbnz	r2, 801121c <rclc_executor_spin_some.part.0+0x14c>
 80111f8:	3601      	adds	r6, #1
 80111fa:	429e      	cmp	r6, r3
 80111fc:	d267      	bcs.n	80112ce <rclc_executor_spin_some.part.0+0x1fe>
 80111fe:	2400      	movs	r4, #0
 8011200:	686a      	ldr	r2, [r5, #4]
 8011202:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8011206:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801120a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801120e:	2900      	cmp	r1, #0
 8011210:	d060      	beq.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 8011212:	7841      	ldrb	r1, [r0, #1]
 8011214:	2900      	cmp	r1, #0
 8011216:	d0e4      	beq.n	80111e2 <rclc_executor_spin_some.part.0+0x112>
 8011218:	2901      	cmp	r1, #1
 801121a:	d1ed      	bne.n	80111f8 <rclc_executor_spin_some.part.0+0x128>
 801121c:	f7ff fcd4 	bl	8010bc8 <_rclc_execute.part.0>
 8011220:	2800      	cmp	r0, #0
 8011222:	f040 80b5 	bne.w	8011390 <rclc_executor_spin_some.part.0+0x2c0>
 8011226:	68ab      	ldr	r3, [r5, #8]
 8011228:	e7e6      	b.n	80111f8 <rclc_executor_spin_some.part.0+0x128>
 801122a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801122e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011232:	4630      	mov	r0, r6
 8011234:	f008 fbaa 	bl	801998c <rcl_wait_set_add_client>
 8011238:	2800      	cmp	r0, #0
 801123a:	f43f af79 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 801123e:	4607      	mov	r7, r0
 8011240:	f000 fa72 	bl	8011728 <rcutils_reset_error>
 8011244:	4638      	mov	r0, r7
 8011246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801124e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011252:	4630      	mov	r0, r6
 8011254:	f008 f84a 	bl	80192ec <rcl_wait_set_add_subscription>
 8011258:	2800      	cmp	r0, #0
 801125a:	f43f af69 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 801125e:	4607      	mov	r7, r0
 8011260:	e7ee      	b.n	8011240 <rclc_executor_spin_some.part.0+0x170>
 8011262:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011266:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801126a:	4630      	mov	r0, r6
 801126c:	f008 fb5e 	bl	801992c <rcl_wait_set_add_timer>
 8011270:	2800      	cmp	r0, #0
 8011272:	f43f af5d 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 8011276:	4607      	mov	r7, r0
 8011278:	e7e2      	b.n	8011240 <rclc_executor_spin_some.part.0+0x170>
 801127a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801127e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011282:	4630      	mov	r0, r6
 8011284:	f008 fb26 	bl	80198d4 <rcl_wait_set_add_guard_condition>
 8011288:	2800      	cmp	r0, #0
 801128a:	f43f af51 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 801128e:	4607      	mov	r7, r0
 8011290:	e7d6      	b.n	8011240 <rclc_executor_spin_some.part.0+0x170>
 8011292:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011296:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801129a:	4630      	mov	r0, r6
 801129c:	3110      	adds	r1, #16
 801129e:	f009 f8a5 	bl	801a3ec <rcl_action_wait_set_add_action_server>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	f43f af44 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 80112a8:	4607      	mov	r7, r0
 80112aa:	e7c9      	b.n	8011240 <rclc_executor_spin_some.part.0+0x170>
 80112ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80112b0:	2300      	movs	r3, #0
 80112b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80112b6:	4630      	mov	r0, r6
 80112b8:	3110      	adds	r1, #16
 80112ba:	f008 fe6d 	bl	8019f98 <rcl_action_wait_set_add_action_client>
 80112be:	2800      	cmp	r0, #0
 80112c0:	f43f af36 	beq.w	8011130 <rclc_executor_spin_some.part.0+0x60>
 80112c4:	4607      	mov	r7, r0
 80112c6:	e7bb      	b.n	8011240 <rclc_executor_spin_some.part.0+0x170>
 80112c8:	2701      	movs	r7, #1
 80112ca:	f000 fa2d 	bl	8011728 <rcutils_reset_error>
 80112ce:	4638      	mov	r0, r7
 80112d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d4:	4627      	mov	r7, r4
 80112d6:	e7fa      	b.n	80112ce <rclc_executor_spin_some.part.0+0x1fe>
 80112d8:	68ab      	ldr	r3, [r5, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 8093 	beq.w	8011406 <rclc_executor_spin_some.part.0+0x336>
 80112e0:	2400      	movs	r4, #0
 80112e2:	f240 1991 	movw	r9, #401	@ 0x191
 80112e6:	46a0      	mov	r8, r4
 80112e8:	e008      	b.n	80112fc <rclc_executor_spin_some.part.0+0x22c>
 80112ea:	f7ff faab 	bl	8010844 <_rclc_check_for_new_data>
 80112ee:	4604      	mov	r4, r0
 80112f0:	b108      	cbz	r0, 80112f6 <rclc_executor_spin_some.part.0+0x226>
 80112f2:	4548      	cmp	r0, r9
 80112f4:	d1ee      	bne.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 80112f6:	68ab      	ldr	r3, [r5, #8]
 80112f8:	4598      	cmp	r8, r3
 80112fa:	d266      	bcs.n	80113ca <rclc_executor_spin_some.part.0+0x2fa>
 80112fc:	686a      	ldr	r2, [r5, #4]
 80112fe:	4631      	mov	r1, r6
 8011300:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011304:	f108 0801 	add.w	r8, r8, #1
 8011308:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801130c:	f1bc 0f00 	cmp.w	ip, #0
 8011310:	d1eb      	bne.n	80112ea <rclc_executor_spin_some.part.0+0x21a>
 8011312:	4619      	mov	r1, r3
 8011314:	4610      	mov	r0, r2
 8011316:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801131a:	4798      	blx	r3
 801131c:	2800      	cmp	r0, #0
 801131e:	d0d9      	beq.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 8011320:	68ab      	ldr	r3, [r5, #8]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d0d6      	beq.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 8011326:	f04f 0a00 	mov.w	sl, #0
 801132a:	f240 1891 	movw	r8, #401	@ 0x191
 801132e:	f240 2959 	movw	r9, #601	@ 0x259
 8011332:	e00e      	b.n	8011352 <rclc_executor_spin_some.part.0+0x282>
 8011334:	f813 300b 	ldrb.w	r3, [r3, fp]
 8011338:	2b08      	cmp	r3, #8
 801133a:	d034      	beq.n	80113a6 <rclc_executor_spin_some.part.0+0x2d6>
 801133c:	2b09      	cmp	r3, #9
 801133e:	d029      	beq.n	8011394 <rclc_executor_spin_some.part.0+0x2c4>
 8011340:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8011344:	bb03      	cbnz	r3, 8011388 <rclc_executor_spin_some.part.0+0x2b8>
 8011346:	f10a 0a01 	add.w	sl, sl, #1
 801134a:	68ab      	ldr	r3, [r5, #8]
 801134c:	459a      	cmp	sl, r3
 801134e:	d2be      	bcs.n	80112ce <rclc_executor_spin_some.part.0+0x1fe>
 8011350:	2400      	movs	r4, #0
 8011352:	6868      	ldr	r0, [r5, #4]
 8011354:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8011358:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801135c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011360:	2b00      	cmp	r3, #0
 8011362:	d0b7      	beq.n	80112d4 <rclc_executor_spin_some.part.0+0x204>
 8011364:	4631      	mov	r1, r6
 8011366:	f7ff fabb 	bl	80108e0 <_rclc_take_new_data>
 801136a:	2800      	cmp	r0, #0
 801136c:	bf18      	it	ne
 801136e:	4540      	cmpne	r0, r8
 8011370:	d001      	beq.n	8011376 <rclc_executor_spin_some.part.0+0x2a6>
 8011372:	4548      	cmp	r0, r9
 8011374:	d10c      	bne.n	8011390 <rclc_executor_spin_some.part.0+0x2c0>
 8011376:	686b      	ldr	r3, [r5, #4]
 8011378:	eb13 000b 	adds.w	r0, r3, fp
 801137c:	d021      	beq.n	80113c2 <rclc_executor_spin_some.part.0+0x2f2>
 801137e:	7842      	ldrb	r2, [r0, #1]
 8011380:	2a00      	cmp	r2, #0
 8011382:	d0d7      	beq.n	8011334 <rclc_executor_spin_some.part.0+0x264>
 8011384:	2a01      	cmp	r2, #1
 8011386:	d1de      	bne.n	8011346 <rclc_executor_spin_some.part.0+0x276>
 8011388:	f7ff fc1e 	bl	8010bc8 <_rclc_execute.part.0>
 801138c:	2800      	cmp	r0, #0
 801138e:	d0da      	beq.n	8011346 <rclc_executor_spin_some.part.0+0x276>
 8011390:	4607      	mov	r7, r0
 8011392:	e79c      	b.n	80112ce <rclc_executor_spin_some.part.0+0x1fe>
 8011394:	6843      	ldr	r3, [r0, #4]
 8011396:	6a1a      	ldr	r2, [r3, #32]
 8011398:	2a00      	cmp	r2, #0
 801139a:	d1f5      	bne.n	8011388 <rclc_executor_spin_some.part.0+0x2b8>
 801139c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d0d0      	beq.n	8011346 <rclc_executor_spin_some.part.0+0x276>
 80113a4:	e7f0      	b.n	8011388 <rclc_executor_spin_some.part.0+0x2b8>
 80113a6:	6843      	ldr	r3, [r0, #4]
 80113a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80113aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80113ae:	d1eb      	bne.n	8011388 <rclc_executor_spin_some.part.0+0x2b8>
 80113b0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80113b4:	2a00      	cmp	r2, #0
 80113b6:	d1e7      	bne.n	8011388 <rclc_executor_spin_some.part.0+0x2b8>
 80113b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d0c2      	beq.n	8011346 <rclc_executor_spin_some.part.0+0x276>
 80113c0:	e7e2      	b.n	8011388 <rclc_executor_spin_some.part.0+0x2b8>
 80113c2:	270b      	movs	r7, #11
 80113c4:	e783      	b.n	80112ce <rclc_executor_spin_some.part.0+0x1fe>
 80113c6:	686a      	ldr	r2, [r5, #4]
 80113c8:	e6e2      	b.n	8011190 <rclc_executor_spin_some.part.0+0xc0>
 80113ca:	686a      	ldr	r2, [r5, #4]
 80113cc:	e7a1      	b.n	8011312 <rclc_executor_spin_some.part.0+0x242>
 80113ce:	6842      	ldr	r2, [r0, #4]
 80113d0:	6a11      	ldr	r1, [r2, #32]
 80113d2:	2900      	cmp	r1, #0
 80113d4:	f47f af22 	bne.w	801121c <rclc_executor_spin_some.part.0+0x14c>
 80113d8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80113dc:	2a00      	cmp	r2, #0
 80113de:	f43f af0b 	beq.w	80111f8 <rclc_executor_spin_some.part.0+0x128>
 80113e2:	e71b      	b.n	801121c <rclc_executor_spin_some.part.0+0x14c>
 80113e4:	6842      	ldr	r2, [r0, #4]
 80113e6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80113e8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80113ec:	f47f af16 	bne.w	801121c <rclc_executor_spin_some.part.0+0x14c>
 80113f0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80113f4:	2900      	cmp	r1, #0
 80113f6:	f47f af11 	bne.w	801121c <rclc_executor_spin_some.part.0+0x14c>
 80113fa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80113fe:	2a00      	cmp	r2, #0
 8011400:	f43f aefa 	beq.w	80111f8 <rclc_executor_spin_some.part.0+0x128>
 8011404:	e70a      	b.n	801121c <rclc_executor_spin_some.part.0+0x14c>
 8011406:	686a      	ldr	r2, [r5, #4]
 8011408:	461c      	mov	r4, r3
 801140a:	e782      	b.n	8011312 <rclc_executor_spin_some.part.0+0x242>
 801140c:	686a      	ldr	r2, [r5, #4]
 801140e:	461c      	mov	r4, r3
 8011410:	e6be      	b.n	8011190 <rclc_executor_spin_some.part.0+0xc0>
 8011412:	bf00      	nop

08011414 <rclc_executor_spin>:
 8011414:	b1d0      	cbz	r0, 801144c <rclc_executor_spin+0x38>
 8011416:	b510      	push	{r4, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	b082      	sub	sp, #8
 801141c:	e004      	b.n	8011428 <rclc_executor_spin+0x14>
 801141e:	f7ff fe57 	bl	80110d0 <rclc_executor_spin_some.part.0>
 8011422:	f030 0302 	bics.w	r3, r0, #2
 8011426:	d10f      	bne.n	8011448 <rclc_executor_spin+0x34>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 801142e:	e9cd 2300 	strd	r2, r3, [sp]
 8011432:	f006 fc81 	bl	8017d38 <rcl_context_is_valid>
 8011436:	4601      	mov	r1, r0
 8011438:	4620      	mov	r0, r4
 801143a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801143e:	2900      	cmp	r1, #0
 8011440:	d1ed      	bne.n	801141e <rclc_executor_spin+0xa>
 8011442:	f000 f971 	bl	8011728 <rcutils_reset_error>
 8011446:	2001      	movs	r0, #1
 8011448:	b002      	add	sp, #8
 801144a:	bd10      	pop	{r4, pc}
 801144c:	200b      	movs	r0, #11
 801144e:	4770      	bx	lr

08011450 <rclc_executor_handle_counters_zero_init>:
 8011450:	b130      	cbz	r0, 8011460 <rclc_executor_handle_counters_zero_init+0x10>
 8011452:	2220      	movs	r2, #32
 8011454:	2100      	movs	r1, #0
 8011456:	b508      	push	{r3, lr}
 8011458:	f00c fe66 	bl	801e128 <memset>
 801145c:	2000      	movs	r0, #0
 801145e:	bd08      	pop	{r3, pc}
 8011460:	200b      	movs	r0, #11
 8011462:	4770      	bx	lr
 8011464:	0000      	movs	r0, r0
	...

08011468 <rclc_executor_handle_init>:
 8011468:	4603      	mov	r3, r0
 801146a:	b178      	cbz	r0, 801148c <rclc_executor_handle_init+0x24>
 801146c:	2200      	movs	r2, #0
 801146e:	f04f 0c0b 	mov.w	ip, #11
 8011472:	6341      	str	r1, [r0, #52]	@ 0x34
 8011474:	4610      	mov	r0, r2
 8011476:	f8a3 c000 	strh.w	ip, [r3]
 801147a:	631a      	str	r2, [r3, #48]	@ 0x30
 801147c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801147e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8011490 <rclc_executor_handle_init+0x28>
 8011482:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8011486:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801148a:	4770      	bx	lr
 801148c:	200b      	movs	r0, #11
 801148e:	4770      	bx	lr
	...

08011498 <rclc_support_init_with_options>:
 8011498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801149c:	b083      	sub	sp, #12
 801149e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	bf18      	it	ne
 80114a4:	2f00      	cmpne	r7, #0
 80114a6:	d027      	beq.n	80114f8 <rclc_support_init_with_options+0x60>
 80114a8:	4604      	mov	r4, r0
 80114aa:	b328      	cbz	r0, 80114f8 <rclc_support_init_with_options+0x60>
 80114ac:	46e9      	mov	r9, sp
 80114ae:	461d      	mov	r5, r3
 80114b0:	460e      	mov	r6, r1
 80114b2:	4690      	mov	r8, r2
 80114b4:	4648      	mov	r0, r9
 80114b6:	f006 fc35 	bl	8017d24 <rcl_get_zero_initialized_context>
 80114ba:	462a      	mov	r2, r5
 80114bc:	4623      	mov	r3, r4
 80114be:	e899 0003 	ldmia.w	r9, {r0, r1}
 80114c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80114c6:	4641      	mov	r1, r8
 80114c8:	4630      	mov	r0, r6
 80114ca:	f006 fc9b 	bl	8017e04 <rcl_init>
 80114ce:	4605      	mov	r5, r0
 80114d0:	b960      	cbnz	r0, 80114ec <rclc_support_init_with_options+0x54>
 80114d2:	463a      	mov	r2, r7
 80114d4:	f104 010c 	add.w	r1, r4, #12
 80114d8:	2003      	movs	r0, #3
 80114da:	60a7      	str	r7, [r4, #8]
 80114dc:	f007 fa20 	bl	8018920 <rcl_clock_init>
 80114e0:	4605      	mov	r5, r0
 80114e2:	b918      	cbnz	r0, 80114ec <rclc_support_init_with_options+0x54>
 80114e4:	4628      	mov	r0, r5
 80114e6:	b003      	add	sp, #12
 80114e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ec:	f000 f91c 	bl	8011728 <rcutils_reset_error>
 80114f0:	4628      	mov	r0, r5
 80114f2:	b003      	add	sp, #12
 80114f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114f8:	250b      	movs	r5, #11
 80114fa:	4628      	mov	r0, r5
 80114fc:	b003      	add	sp, #12
 80114fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011502:	bf00      	nop

08011504 <rclc_node_init_default>:
 8011504:	2b00      	cmp	r3, #0
 8011506:	bf18      	it	ne
 8011508:	2a00      	cmpne	r2, #0
 801150a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801150e:	4616      	mov	r6, r2
 8011510:	bf0c      	ite	eq
 8011512:	2201      	moveq	r2, #1
 8011514:	2200      	movne	r2, #0
 8011516:	b0a1      	sub	sp, #132	@ 0x84
 8011518:	2900      	cmp	r1, #0
 801151a:	bf08      	it	eq
 801151c:	f042 0201 	orreq.w	r2, r2, #1
 8011520:	bb22      	cbnz	r2, 801156c <rclc_node_init_default+0x68>
 8011522:	4604      	mov	r4, r0
 8011524:	b310      	cbz	r0, 801156c <rclc_node_init_default+0x68>
 8011526:	f10d 0810 	add.w	r8, sp, #16
 801152a:	461f      	mov	r7, r3
 801152c:	460d      	mov	r5, r1
 801152e:	f10d 0918 	add.w	r9, sp, #24
 8011532:	4640      	mov	r0, r8
 8011534:	f006 fd8e 	bl	8018054 <rcl_get_zero_initialized_node>
 8011538:	e898 0003 	ldmia.w	r8, {r0, r1}
 801153c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011540:	4648      	mov	r0, r9
 8011542:	f006 ff01 	bl	8018348 <rcl_node_get_default_options>
 8011546:	4640      	mov	r0, r8
 8011548:	f006 fd84 	bl	8018054 <rcl_get_zero_initialized_node>
 801154c:	f8cd 9000 	str.w	r9, [sp]
 8011550:	463b      	mov	r3, r7
 8011552:	4632      	mov	r2, r6
 8011554:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011558:	e884 0003 	stmia.w	r4, {r0, r1}
 801155c:	4629      	mov	r1, r5
 801155e:	4620      	mov	r0, r4
 8011560:	f006 fd82 	bl	8018068 <rcl_node_init>
 8011564:	b930      	cbnz	r0, 8011574 <rclc_node_init_default+0x70>
 8011566:	b021      	add	sp, #132	@ 0x84
 8011568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801156c:	200b      	movs	r0, #11
 801156e:	b021      	add	sp, #132	@ 0x84
 8011570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011574:	9003      	str	r0, [sp, #12]
 8011576:	f000 f8d7 	bl	8011728 <rcutils_reset_error>
 801157a:	f000 f8d5 	bl	8011728 <rcutils_reset_error>
 801157e:	9803      	ldr	r0, [sp, #12]
 8011580:	b021      	add	sp, #132	@ 0x84
 8011582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011586:	bf00      	nop

08011588 <rclc_publisher_init_best_effort>:
 8011588:	2b00      	cmp	r3, #0
 801158a:	bf18      	it	ne
 801158c:	2a00      	cmpne	r2, #0
 801158e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011592:	4616      	mov	r6, r2
 8011594:	bf0c      	ite	eq
 8011596:	2201      	moveq	r2, #1
 8011598:	2200      	movne	r2, #0
 801159a:	b0a0      	sub	sp, #128	@ 0x80
 801159c:	2900      	cmp	r1, #0
 801159e:	bf08      	it	eq
 80115a0:	f042 0201 	orreq.w	r2, r2, #1
 80115a4:	bb1a      	cbnz	r2, 80115ee <rclc_publisher_init_best_effort+0x66>
 80115a6:	4604      	mov	r4, r0
 80115a8:	b308      	cbz	r0, 80115ee <rclc_publisher_init_best_effort+0x66>
 80115aa:	f10d 0810 	add.w	r8, sp, #16
 80115ae:	461f      	mov	r7, r3
 80115b0:	460d      	mov	r5, r1
 80115b2:	f7ff f833 	bl	801061c <rcl_get_zero_initialized_publisher>
 80115b6:	6020      	str	r0, [r4, #0]
 80115b8:	4640      	mov	r0, r8
 80115ba:	f7ff f8cf 	bl	801075c <rcl_publisher_get_default_options>
 80115be:	2250      	movs	r2, #80	@ 0x50
 80115c0:	490d      	ldr	r1, [pc, #52]	@ (80115f8 <rclc_publisher_init_best_effort+0x70>)
 80115c2:	4640      	mov	r0, r8
 80115c4:	f00c fe79 	bl	801e2ba <memcpy>
 80115c8:	463b      	mov	r3, r7
 80115ca:	4632      	mov	r2, r6
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f8cd 8000 	str.w	r8, [sp]
 80115d4:	f7ff f828 	bl	8010628 <rcl_publisher_init>
 80115d8:	b910      	cbnz	r0, 80115e0 <rclc_publisher_init_best_effort+0x58>
 80115da:	b020      	add	sp, #128	@ 0x80
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	9003      	str	r0, [sp, #12]
 80115e2:	f000 f8a1 	bl	8011728 <rcutils_reset_error>
 80115e6:	9803      	ldr	r0, [sp, #12]
 80115e8:	b020      	add	sp, #128	@ 0x80
 80115ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ee:	200b      	movs	r0, #11
 80115f0:	b020      	add	sp, #128	@ 0x80
 80115f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f6:	bf00      	nop
 80115f8:	0801f150 	.word	0x0801f150

080115fc <rclc_timer_init_default>:
 80115fc:	b361      	cbz	r1, 8011658 <rclc_timer_init_default+0x5c>
 80115fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011602:	4606      	mov	r6, r0
 8011604:	b08a      	sub	sp, #40	@ 0x28
 8011606:	b318      	cbz	r0, 8011650 <rclc_timer_init_default+0x54>
 8011608:	460d      	mov	r5, r1
 801160a:	4690      	mov	r8, r2
 801160c:	461f      	mov	r7, r3
 801160e:	f007 fb7f 	bl	8018d10 <rcl_get_zero_initialized_timer>
 8011612:	68ac      	ldr	r4, [r5, #8]
 8011614:	f10d 0c0c 	add.w	ip, sp, #12
 8011618:	6030      	str	r0, [r6, #0]
 801161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801161c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	462a      	mov	r2, r5
 8011624:	f105 010c 	add.w	r1, r5, #12
 8011628:	4630      	mov	r0, r6
 801162a:	f8cc 3000 	str.w	r3, [ip]
 801162e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011630:	e9cd 8700 	strd	r8, r7, [sp]
 8011634:	9302      	str	r3, [sp, #8]
 8011636:	f007 fb73 	bl	8018d20 <rcl_timer_init>
 801163a:	b910      	cbnz	r0, 8011642 <rclc_timer_init_default+0x46>
 801163c:	b00a      	add	sp, #40	@ 0x28
 801163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011642:	9009      	str	r0, [sp, #36]	@ 0x24
 8011644:	f000 f870 	bl	8011728 <rcutils_reset_error>
 8011648:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801164a:	b00a      	add	sp, #40	@ 0x28
 801164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011650:	200b      	movs	r0, #11
 8011652:	b00a      	add	sp, #40	@ 0x28
 8011654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011658:	200b      	movs	r0, #11
 801165a:	4770      	bx	lr

0801165c <__default_zero_allocate>:
 801165c:	f00c b87a 	b.w	801d754 <calloc>

08011660 <__default_reallocate>:
 8011660:	f00c ba18 	b.w	801da94 <realloc>

08011664 <__default_deallocate>:
 8011664:	f00c b8f4 	b.w	801d850 <free>

08011668 <__default_allocate>:
 8011668:	f00c b8ea 	b.w	801d840 <malloc>

0801166c <rcutils_get_zero_initialized_allocator>:
 801166c:	b510      	push	{r4, lr}
 801166e:	4c05      	ldr	r4, [pc, #20]	@ (8011684 <rcutils_get_zero_initialized_allocator+0x18>)
 8011670:	4686      	mov	lr, r0
 8011672:	4684      	mov	ip, r0
 8011674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	4670      	mov	r0, lr
 801167e:	f8cc 3000 	str.w	r3, [ip]
 8011682:	bd10      	pop	{r4, pc}
 8011684:	0801f1a0 	.word	0x0801f1a0

08011688 <rcutils_set_default_allocator>:
 8011688:	b1a8      	cbz	r0, 80116b6 <rcutils_set_default_allocator+0x2e>
 801168a:	6802      	ldr	r2, [r0, #0]
 801168c:	b1a2      	cbz	r2, 80116b8 <rcutils_set_default_allocator+0x30>
 801168e:	6841      	ldr	r1, [r0, #4]
 8011690:	b1a1      	cbz	r1, 80116bc <rcutils_set_default_allocator+0x34>
 8011692:	b410      	push	{r4}
 8011694:	68c4      	ldr	r4, [r0, #12]
 8011696:	b164      	cbz	r4, 80116b2 <rcutils_set_default_allocator+0x2a>
 8011698:	6880      	ldr	r0, [r0, #8]
 801169a:	b138      	cbz	r0, 80116ac <rcutils_set_default_allocator+0x24>
 801169c:	4b08      	ldr	r3, [pc, #32]	@ (80116c0 <rcutils_set_default_allocator+0x38>)
 801169e:	601a      	str	r2, [r3, #0]
 80116a0:	2200      	movs	r2, #0
 80116a2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80116a6:	2001      	movs	r0, #1
 80116a8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80116ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	4620      	mov	r0, r4
 80116b4:	e7fa      	b.n	80116ac <rcutils_set_default_allocator+0x24>
 80116b6:	4770      	bx	lr
 80116b8:	4610      	mov	r0, r2
 80116ba:	4770      	bx	lr
 80116bc:	4608      	mov	r0, r1
 80116be:	4770      	bx	lr
 80116c0:	24000038 	.word	0x24000038

080116c4 <rcutils_get_default_allocator>:
 80116c4:	b510      	push	{r4, lr}
 80116c6:	4c05      	ldr	r4, [pc, #20]	@ (80116dc <rcutils_get_default_allocator+0x18>)
 80116c8:	4686      	mov	lr, r0
 80116ca:	4684      	mov	ip, r0
 80116cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	4670      	mov	r0, lr
 80116d6:	f8cc 3000 	str.w	r3, [ip]
 80116da:	bd10      	pop	{r4, pc}
 80116dc:	24000038 	.word	0x24000038

080116e0 <rcutils_allocator_is_valid>:
 80116e0:	b158      	cbz	r0, 80116fa <rcutils_allocator_is_valid+0x1a>
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	b143      	cbz	r3, 80116f8 <rcutils_allocator_is_valid+0x18>
 80116e6:	6843      	ldr	r3, [r0, #4]
 80116e8:	b133      	cbz	r3, 80116f8 <rcutils_allocator_is_valid+0x18>
 80116ea:	68c3      	ldr	r3, [r0, #12]
 80116ec:	b123      	cbz	r3, 80116f8 <rcutils_allocator_is_valid+0x18>
 80116ee:	6880      	ldr	r0, [r0, #8]
 80116f0:	3800      	subs	r0, #0
 80116f2:	bf18      	it	ne
 80116f4:	2001      	movne	r0, #1
 80116f6:	4770      	bx	lr
 80116f8:	4618      	mov	r0, r3
 80116fa:	4770      	bx	lr

080116fc <rcutils_get_error_string>:
 80116fc:	4b06      	ldr	r3, [pc, #24]	@ (8011718 <rcutils_get_error_string+0x1c>)
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	b13b      	cbz	r3, 8011712 <rcutils_get_error_string+0x16>
 8011702:	4b06      	ldr	r3, [pc, #24]	@ (801171c <rcutils_get_error_string+0x20>)
 8011704:	781a      	ldrb	r2, [r3, #0]
 8011706:	b90a      	cbnz	r2, 801170c <rcutils_get_error_string+0x10>
 8011708:	2201      	movs	r2, #1
 801170a:	701a      	strb	r2, [r3, #0]
 801170c:	4b04      	ldr	r3, [pc, #16]	@ (8011720 <rcutils_get_error_string+0x24>)
 801170e:	7818      	ldrb	r0, [r3, #0]
 8011710:	4770      	bx	lr
 8011712:	4b04      	ldr	r3, [pc, #16]	@ (8011724 <rcutils_get_error_string+0x28>)
 8011714:	7818      	ldrb	r0, [r3, #0]
 8011716:	4770      	bx	lr
 8011718:	2400e5d8 	.word	0x2400e5d8
 801171c:	2400e5f1 	.word	0x2400e5f1
 8011720:	2400e5f0 	.word	0x2400e5f0
 8011724:	0801f1b4 	.word	0x0801f1b4

08011728 <rcutils_reset_error>:
 8011728:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8011748 <rcutils_reset_error+0x20>
 801172c:	2300      	movs	r3, #0
 801172e:	4a08      	ldr	r2, [pc, #32]	@ (8011750 <rcutils_reset_error+0x28>)
 8011730:	4808      	ldr	r0, [pc, #32]	@ (8011754 <rcutils_reset_error+0x2c>)
 8011732:	8013      	strh	r3, [r2, #0]
 8011734:	4908      	ldr	r1, [pc, #32]	@ (8011758 <rcutils_reset_error+0x30>)
 8011736:	7003      	strb	r3, [r0, #0]
 8011738:	700b      	strb	r3, [r1, #0]
 801173a:	ed82 7b02 	vstr	d7, [r2, #8]
 801173e:	4a07      	ldr	r2, [pc, #28]	@ (801175c <rcutils_reset_error+0x34>)
 8011740:	7013      	strb	r3, [r2, #0]
 8011742:	4770      	bx	lr
 8011744:	f3af 8000 	nop.w
	...
 8011750:	2400e5e0 	.word	0x2400e5e0
 8011754:	2400e5f1 	.word	0x2400e5f1
 8011758:	2400e5f0 	.word	0x2400e5f0
 801175c:	2400e5d8 	.word	0x2400e5d8

08011760 <rcutils_system_time_now>:
 8011760:	b300      	cbz	r0, 80117a4 <rcutils_system_time_now+0x44>
 8011762:	b570      	push	{r4, r5, r6, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	4604      	mov	r4, r0
 8011768:	2001      	movs	r0, #1
 801176a:	4669      	mov	r1, sp
 801176c:	f7f0 fc80 	bl	8002070 <clock_gettime>
 8011770:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011774:	2900      	cmp	r1, #0
 8011776:	db12      	blt.n	801179e <rcutils_system_time_now+0x3e>
 8011778:	ea53 0201 	orrs.w	r2, r3, r1
 801177c:	9d02      	ldr	r5, [sp, #8]
 801177e:	d101      	bne.n	8011784 <rcutils_system_time_now+0x24>
 8011780:	2d00      	cmp	r5, #0
 8011782:	db0c      	blt.n	801179e <rcutils_system_time_now+0x3e>
 8011784:	4e08      	ldr	r6, [pc, #32]	@ (80117a8 <rcutils_system_time_now+0x48>)
 8011786:	2000      	movs	r0, #0
 8011788:	fba3 3206 	umull	r3, r2, r3, r6
 801178c:	195b      	adds	r3, r3, r5
 801178e:	fb06 2201 	mla	r2, r6, r1, r2
 8011792:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8011796:	e9c4 3200 	strd	r3, r2, [r4]
 801179a:	b004      	add	sp, #16
 801179c:	bd70      	pop	{r4, r5, r6, pc}
 801179e:	2002      	movs	r0, #2
 80117a0:	b004      	add	sp, #16
 80117a2:	bd70      	pop	{r4, r5, r6, pc}
 80117a4:	200b      	movs	r0, #11
 80117a6:	4770      	bx	lr
 80117a8:	3b9aca00 	.word	0x3b9aca00

080117ac <rcutils_steady_time_now>:
 80117ac:	b300      	cbz	r0, 80117f0 <rcutils_steady_time_now+0x44>
 80117ae:	b570      	push	{r4, r5, r6, lr}
 80117b0:	b084      	sub	sp, #16
 80117b2:	4604      	mov	r4, r0
 80117b4:	2000      	movs	r0, #0
 80117b6:	4669      	mov	r1, sp
 80117b8:	f7f0 fc5a 	bl	8002070 <clock_gettime>
 80117bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80117c0:	2900      	cmp	r1, #0
 80117c2:	db12      	blt.n	80117ea <rcutils_steady_time_now+0x3e>
 80117c4:	ea53 0201 	orrs.w	r2, r3, r1
 80117c8:	9d02      	ldr	r5, [sp, #8]
 80117ca:	d101      	bne.n	80117d0 <rcutils_steady_time_now+0x24>
 80117cc:	2d00      	cmp	r5, #0
 80117ce:	db0c      	blt.n	80117ea <rcutils_steady_time_now+0x3e>
 80117d0:	4e08      	ldr	r6, [pc, #32]	@ (80117f4 <rcutils_steady_time_now+0x48>)
 80117d2:	2000      	movs	r0, #0
 80117d4:	fba3 3206 	umull	r3, r2, r3, r6
 80117d8:	195b      	adds	r3, r3, r5
 80117da:	fb06 2201 	mla	r2, r6, r1, r2
 80117de:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80117e2:	e9c4 3200 	strd	r3, r2, [r4]
 80117e6:	b004      	add	sp, #16
 80117e8:	bd70      	pop	{r4, r5, r6, pc}
 80117ea:	2002      	movs	r0, #2
 80117ec:	b004      	add	sp, #16
 80117ee:	bd70      	pop	{r4, r5, r6, pc}
 80117f0:	200b      	movs	r0, #11
 80117f2:	4770      	bx	lr
 80117f4:	3b9aca00 	.word	0x3b9aca00

080117f8 <rmw_get_zero_initialized_init_options>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	4604      	mov	r4, r0
 80117fc:	2238      	movs	r2, #56	@ 0x38
 80117fe:	2100      	movs	r1, #0
 8011800:	f00c fc92 	bl	801e128 <memset>
 8011804:	f104 0010 	add.w	r0, r4, #16
 8011808:	f000 f80a 	bl	8011820 <rmw_get_default_security_options>
 801180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011810:	4620      	mov	r0, r4
 8011812:	60e3      	str	r3, [r4, #12]
 8011814:	bd10      	pop	{r4, pc}
 8011816:	bf00      	nop

08011818 <rmw_get_default_publisher_options>:
 8011818:	2200      	movs	r2, #0
 801181a:	6002      	str	r2, [r0, #0]
 801181c:	7102      	strb	r2, [r0, #4]
 801181e:	4770      	bx	lr

08011820 <rmw_get_default_security_options>:
 8011820:	2200      	movs	r2, #0
 8011822:	7002      	strb	r2, [r0, #0]
 8011824:	6042      	str	r2, [r0, #4]
 8011826:	4770      	bx	lr

08011828 <rmw_uros_set_custom_transport>:
 8011828:	b470      	push	{r4, r5, r6}
 801182a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801182e:	b162      	cbz	r2, 801184a <rmw_uros_set_custom_transport+0x22>
 8011830:	b15b      	cbz	r3, 801184a <rmw_uros_set_custom_transport+0x22>
 8011832:	b155      	cbz	r5, 801184a <rmw_uros_set_custom_transport+0x22>
 8011834:	b14e      	cbz	r6, 801184a <rmw_uros_set_custom_transport+0x22>
 8011836:	4c06      	ldr	r4, [pc, #24]	@ (8011850 <rmw_uros_set_custom_transport+0x28>)
 8011838:	7020      	strb	r0, [r4, #0]
 801183a:	2000      	movs	r0, #0
 801183c:	6166      	str	r6, [r4, #20]
 801183e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011842:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011846:	bc70      	pop	{r4, r5, r6}
 8011848:	4770      	bx	lr
 801184a:	200b      	movs	r0, #11
 801184c:	bc70      	pop	{r4, r5, r6}
 801184e:	4770      	bx	lr
 8011850:	2400e5f4 	.word	0x2400e5f4

08011854 <rmw_init_options_init>:
 8011854:	b084      	sub	sp, #16
 8011856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011858:	b083      	sub	sp, #12
 801185a:	ad09      	add	r5, sp, #36	@ 0x24
 801185c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011860:	b130      	cbz	r0, 8011870 <rmw_init_options_init+0x1c>
 8011862:	4604      	mov	r4, r0
 8011864:	4628      	mov	r0, r5
 8011866:	f7ff ff3b 	bl	80116e0 <rcutils_allocator_is_valid>
 801186a:	b108      	cbz	r0, 8011870 <rmw_init_options_init+0x1c>
 801186c:	68a6      	ldr	r6, [r4, #8]
 801186e:	b12e      	cbz	r6, 801187c <rmw_init_options_init+0x28>
 8011870:	200b      	movs	r0, #11
 8011872:	b003      	add	sp, #12
 8011874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011878:	b004      	add	sp, #16
 801187a:	4770      	bx	lr
 801187c:	2200      	movs	r2, #0
 801187e:	2300      	movs	r3, #0
 8011880:	f104 0c20 	add.w	ip, r4, #32
 8011884:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011920 <rmw_init_options_init+0xcc>
 8011888:	466f      	mov	r7, sp
 801188a:	e9c4 2300 	strd	r2, r3, [r4]
 801188e:	4b20      	ldr	r3, [pc, #128]	@ (8011910 <rmw_init_options_init+0xbc>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	60a3      	str	r3, [r4, #8]
 8011894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801189a:	682b      	ldr	r3, [r5, #0]
 801189c:	4638      	mov	r0, r7
 801189e:	f8cc 3000 	str.w	r3, [ip]
 80118a2:	f8c4 e01c 	str.w	lr, [r4, #28]
 80118a6:	60e6      	str	r6, [r4, #12]
 80118a8:	f7ff ffba 	bl	8011820 <rmw_get_default_security_options>
 80118ac:	f104 0310 	add.w	r3, r4, #16
 80118b0:	2203      	movs	r2, #3
 80118b2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80118b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80118ba:	4816      	ldr	r0, [pc, #88]	@ (8011914 <rmw_init_options_init+0xc0>)
 80118bc:	4916      	ldr	r1, [pc, #88]	@ (8011918 <rmw_init_options_init+0xc4>)
 80118be:	7626      	strb	r6, [r4, #24]
 80118c0:	f000 fed2 	bl	8012668 <rmw_uxrce_init_init_options_impl_memory>
 80118c4:	4813      	ldr	r0, [pc, #76]	@ (8011914 <rmw_init_options_init+0xc0>)
 80118c6:	f009 fe09 	bl	801b4dc <get_memory>
 80118ca:	b1f0      	cbz	r0, 801190a <rmw_init_options_init+0xb6>
 80118cc:	4a13      	ldr	r2, [pc, #76]	@ (801191c <rmw_init_options_init+0xc8>)
 80118ce:	6883      	ldr	r3, [r0, #8]
 80118d0:	6851      	ldr	r1, [r2, #4]
 80118d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80118d4:	7810      	ldrb	r0, [r2, #0]
 80118d6:	6159      	str	r1, [r3, #20]
 80118d8:	68d1      	ldr	r1, [r2, #12]
 80118da:	7418      	strb	r0, [r3, #16]
 80118dc:	61d9      	str	r1, [r3, #28]
 80118de:	6911      	ldr	r1, [r2, #16]
 80118e0:	6219      	str	r1, [r3, #32]
 80118e2:	6951      	ldr	r1, [r2, #20]
 80118e4:	6892      	ldr	r2, [r2, #8]
 80118e6:	6259      	str	r1, [r3, #36]	@ 0x24
 80118e8:	619a      	str	r2, [r3, #24]
 80118ea:	f005 f82d 	bl	8016948 <uxr_nanos>
 80118ee:	f00c f865 	bl	801d9bc <srand>
 80118f2:	f00c f891 	bl	801da18 <rand>
 80118f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118f8:	6298      	str	r0, [r3, #40]	@ 0x28
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d0f9      	beq.n	80118f2 <rmw_init_options_init+0x9e>
 80118fe:	2000      	movs	r0, #0
 8011900:	b003      	add	sp, #12
 8011902:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011906:	b004      	add	sp, #16
 8011908:	4770      	bx	lr
 801190a:	2001      	movs	r0, #1
 801190c:	e7b1      	b.n	8011872 <rmw_init_options_init+0x1e>
 801190e:	bf00      	nop
 8011910:	0801fc14 	.word	0x0801fc14
 8011914:	24012f0c 	.word	0x24012f0c
 8011918:	2400e7a8 	.word	0x2400e7a8
 801191c:	2400e5f4 	.word	0x2400e5f4
 8011920:	0801f1b8 	.word	0x0801f1b8

08011924 <rmw_init_options_copy>:
 8011924:	2800      	cmp	r0, #0
 8011926:	d047      	beq.n	80119b8 <rmw_init_options_copy+0x94>
 8011928:	b570      	push	{r4, r5, r6, lr}
 801192a:	460d      	mov	r5, r1
 801192c:	b149      	cbz	r1, 8011942 <rmw_init_options_copy+0x1e>
 801192e:	4604      	mov	r4, r0
 8011930:	6880      	ldr	r0, [r0, #8]
 8011932:	b120      	cbz	r0, 801193e <rmw_init_options_copy+0x1a>
 8011934:	4b22      	ldr	r3, [pc, #136]	@ (80119c0 <rmw_init_options_copy+0x9c>)
 8011936:	6819      	ldr	r1, [r3, #0]
 8011938:	f7ee fcd2 	bl	80002e0 <strcmp>
 801193c:	bba8      	cbnz	r0, 80119aa <rmw_init_options_copy+0x86>
 801193e:	68ab      	ldr	r3, [r5, #8]
 8011940:	b11b      	cbz	r3, 801194a <rmw_init_options_copy+0x26>
 8011942:	f04f 0c0b 	mov.w	ip, #11
 8011946:	4660      	mov	r0, ip
 8011948:	bd70      	pop	{r4, r5, r6, pc}
 801194a:	4623      	mov	r3, r4
 801194c:	462a      	mov	r2, r5
 801194e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8011952:	f8d3 e000 	ldr.w	lr, [r3]
 8011956:	3310      	adds	r3, #16
 8011958:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801195c:	3210      	adds	r2, #16
 801195e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8011962:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011966:	42b3      	cmp	r3, r6
 8011968:	f842 ec10 	str.w	lr, [r2, #-16]
 801196c:	f842 cc0c 	str.w	ip, [r2, #-12]
 8011970:	f842 0c08 	str.w	r0, [r2, #-8]
 8011974:	f842 1c04 	str.w	r1, [r2, #-4]
 8011978:	d1eb      	bne.n	8011952 <rmw_init_options_copy+0x2e>
 801197a:	6819      	ldr	r1, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	4811      	ldr	r0, [pc, #68]	@ (80119c4 <rmw_init_options_copy+0xa0>)
 8011980:	6011      	str	r1, [r2, #0]
 8011982:	6053      	str	r3, [r2, #4]
 8011984:	f009 fdaa 	bl	801b4dc <get_memory>
 8011988:	b198      	cbz	r0, 80119b2 <rmw_init_options_copy+0x8e>
 801198a:	6883      	ldr	r3, [r0, #8]
 801198c:	f04f 0c00 	mov.w	ip, #0
 8011990:	636b      	str	r3, [r5, #52]	@ 0x34
 8011992:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8011994:	f103 0410 	add.w	r4, r3, #16
 8011998:	3510      	adds	r5, #16
 801199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801199c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801199e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80119a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80119a6:	4660      	mov	r0, ip
 80119a8:	bd70      	pop	{r4, r5, r6, pc}
 80119aa:	f04f 0c0c 	mov.w	ip, #12
 80119ae:	4660      	mov	r0, ip
 80119b0:	bd70      	pop	{r4, r5, r6, pc}
 80119b2:	f04f 0c01 	mov.w	ip, #1
 80119b6:	e7c6      	b.n	8011946 <rmw_init_options_copy+0x22>
 80119b8:	f04f 0c0b 	mov.w	ip, #11
 80119bc:	4660      	mov	r0, ip
 80119be:	4770      	bx	lr
 80119c0:	0801fc14 	.word	0x0801fc14
 80119c4:	24012f0c 	.word	0x24012f0c

080119c8 <rmw_init_options_fini>:
 80119c8:	b510      	push	{r4, lr}
 80119ca:	b08e      	sub	sp, #56	@ 0x38
 80119cc:	b388      	cbz	r0, 8011a32 <rmw_init_options_fini+0x6a>
 80119ce:	4604      	mov	r4, r0
 80119d0:	3020      	adds	r0, #32
 80119d2:	f7ff fe85 	bl	80116e0 <rcutils_allocator_is_valid>
 80119d6:	b360      	cbz	r0, 8011a32 <rmw_init_options_fini+0x6a>
 80119d8:	68a0      	ldr	r0, [r4, #8]
 80119da:	b120      	cbz	r0, 80119e6 <rmw_init_options_fini+0x1e>
 80119dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011a48 <rmw_init_options_fini+0x80>)
 80119de:	6819      	ldr	r1, [r3, #0]
 80119e0:	f7ee fc7e 	bl	80002e0 <strcmp>
 80119e4:	bb68      	cbnz	r0, 8011a42 <rmw_init_options_fini+0x7a>
 80119e6:	4b19      	ldr	r3, [pc, #100]	@ (8011a4c <rmw_init_options_fini+0x84>)
 80119e8:	6819      	ldr	r1, [r3, #0]
 80119ea:	b331      	cbz	r1, 8011a3a <rmw_init_options_fini+0x72>
 80119ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80119ee:	e001      	b.n	80119f4 <rmw_init_options_fini+0x2c>
 80119f0:	6849      	ldr	r1, [r1, #4]
 80119f2:	b311      	cbz	r1, 8011a3a <rmw_init_options_fini+0x72>
 80119f4:	688b      	ldr	r3, [r1, #8]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d1fa      	bne.n	80119f0 <rmw_init_options_fini+0x28>
 80119fa:	4814      	ldr	r0, [pc, #80]	@ (8011a4c <rmw_init_options_fini+0x84>)
 80119fc:	f009 fd7e 	bl	801b4fc <put_memory>
 8011a00:	4668      	mov	r0, sp
 8011a02:	f7ff fef9 	bl	80117f8 <rmw_get_zero_initialized_init_options>
 8011a06:	46ee      	mov	lr, sp
 8011a08:	46a4      	mov	ip, r4
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a24:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011a28:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	b00e      	add	sp, #56	@ 0x38
 8011a30:	bd10      	pop	{r4, pc}
 8011a32:	240b      	movs	r4, #11
 8011a34:	4620      	mov	r0, r4
 8011a36:	b00e      	add	sp, #56	@ 0x38
 8011a38:	bd10      	pop	{r4, pc}
 8011a3a:	2401      	movs	r4, #1
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	b00e      	add	sp, #56	@ 0x38
 8011a40:	bd10      	pop	{r4, pc}
 8011a42:	240c      	movs	r4, #12
 8011a44:	e7f2      	b.n	8011a2c <rmw_init_options_fini+0x64>
 8011a46:	bf00      	nop
 8011a48:	0801fc14 	.word	0x0801fc14
 8011a4c:	24012f0c 	.word	0x24012f0c

08011a50 <rmw_init>:
 8011a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a54:	b083      	sub	sp, #12
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f000 80d3 	beq.w	8011c02 <rmw_init+0x1b2>
 8011a5c:	460e      	mov	r6, r1
 8011a5e:	2900      	cmp	r1, #0
 8011a60:	f000 80cf 	beq.w	8011c02 <rmw_init+0x1b2>
 8011a64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011a66:	4605      	mov	r5, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	f000 80ca 	beq.w	8011c02 <rmw_init+0x1b2>
 8011a6e:	4b78      	ldr	r3, [pc, #480]	@ (8011c50 <rmw_init+0x200>)
 8011a70:	6880      	ldr	r0, [r0, #8]
 8011a72:	681f      	ldr	r7, [r3, #0]
 8011a74:	b128      	cbz	r0, 8011a82 <rmw_init+0x32>
 8011a76:	4639      	mov	r1, r7
 8011a78:	f7ee fc32 	bl	80002e0 <strcmp>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f040 80ca 	bne.w	8011c16 <rmw_init+0x1c6>
 8011a82:	4c74      	ldr	r4, [pc, #464]	@ (8011c54 <rmw_init+0x204>)
 8011a84:	f04f 0800 	mov.w	r8, #0
 8011a88:	4973      	ldr	r1, [pc, #460]	@ (8011c58 <rmw_init+0x208>)
 8011a8a:	4874      	ldr	r0, [pc, #464]	@ (8011c5c <rmw_init+0x20c>)
 8011a8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a90:	60b7      	str	r7, [r6, #8]
 8011a92:	e9c6 2300 	strd	r2, r3, [r6]
 8011a96:	68eb      	ldr	r3, [r5, #12]
 8011a98:	2201      	movs	r2, #1
 8011a9a:	64b3      	str	r3, [r6, #72]	@ 0x48
 8011a9c:	f000 fd84 	bl	80125a8 <rmw_uxrce_init_session_memory>
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	2204      	movs	r2, #4
 8011aa4:	496e      	ldr	r1, [pc, #440]	@ (8011c60 <rmw_init+0x210>)
 8011aa6:	f000 fdbf 	bl	8012628 <rmw_uxrce_init_static_input_buffer_memory>
 8011aaa:	486c      	ldr	r0, [pc, #432]	@ (8011c5c <rmw_init+0x20c>)
 8011aac:	f884 800d 	strb.w	r8, [r4, #13]
 8011ab0:	f009 fd14 	bl	801b4dc <get_memory>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	f000 80a9 	beq.w	8011c0c <rmw_init+0x1bc>
 8011aba:	6884      	ldr	r4, [r0, #8]
 8011abc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8011abe:	f104 0910 	add.w	r9, r4, #16
 8011ac2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8011ac4:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011ac8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011acc:	9101      	str	r1, [sp, #4]
 8011ace:	4661      	mov	r1, ip
 8011ad0:	6a00      	ldr	r0, [r0, #32]
 8011ad2:	9000      	str	r0, [sp, #0]
 8011ad4:	4648      	mov	r0, r9
 8011ad6:	f002 fec5 	bl	8014864 <uxr_set_custom_transport_callbacks>
 8011ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ade:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8011ae2:	4960      	ldr	r1, [pc, #384]	@ (8011c64 <rmw_init+0x214>)
 8011ae4:	4860      	ldr	r0, [pc, #384]	@ (8011c68 <rmw_init+0x218>)
 8011ae6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8011aea:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011aee:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011af2:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8011af6:	2201      	movs	r2, #1
 8011af8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011afc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011b00:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011b04:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8011b08:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8011b0a:	f000 fd2d 	bl	8012568 <rmw_uxrce_init_node_memory>
 8011b0e:	2205      	movs	r2, #5
 8011b10:	4956      	ldr	r1, [pc, #344]	@ (8011c6c <rmw_init+0x21c>)
 8011b12:	4857      	ldr	r0, [pc, #348]	@ (8011c70 <rmw_init+0x220>)
 8011b14:	f000 fd08 	bl	8012528 <rmw_uxrce_init_subscription_memory>
 8011b18:	220a      	movs	r2, #10
 8011b1a:	4956      	ldr	r1, [pc, #344]	@ (8011c74 <rmw_init+0x224>)
 8011b1c:	4856      	ldr	r0, [pc, #344]	@ (8011c78 <rmw_init+0x228>)
 8011b1e:	f000 fce3 	bl	80124e8 <rmw_uxrce_init_publisher_memory>
 8011b22:	2201      	movs	r2, #1
 8011b24:	4955      	ldr	r1, [pc, #340]	@ (8011c7c <rmw_init+0x22c>)
 8011b26:	4856      	ldr	r0, [pc, #344]	@ (8011c80 <rmw_init+0x230>)
 8011b28:	f000 fc9e 	bl	8012468 <rmw_uxrce_init_service_memory>
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	4955      	ldr	r1, [pc, #340]	@ (8011c84 <rmw_init+0x234>)
 8011b30:	4855      	ldr	r0, [pc, #340]	@ (8011c88 <rmw_init+0x238>)
 8011b32:	f000 fcb9 	bl	80124a8 <rmw_uxrce_init_client_memory>
 8011b36:	220f      	movs	r2, #15
 8011b38:	4954      	ldr	r1, [pc, #336]	@ (8011c8c <rmw_init+0x23c>)
 8011b3a:	4855      	ldr	r0, [pc, #340]	@ (8011c90 <rmw_init+0x240>)
 8011b3c:	f000 fd54 	bl	80125e8 <rmw_uxrce_init_topic_memory>
 8011b40:	2203      	movs	r2, #3
 8011b42:	4954      	ldr	r1, [pc, #336]	@ (8011c94 <rmw_init+0x244>)
 8011b44:	4854      	ldr	r0, [pc, #336]	@ (8011c98 <rmw_init+0x248>)
 8011b46:	f000 fd8f 	bl	8012668 <rmw_uxrce_init_init_options_impl_memory>
 8011b4a:	2204      	movs	r2, #4
 8011b4c:	4953      	ldr	r1, [pc, #332]	@ (8011c9c <rmw_init+0x24c>)
 8011b4e:	4854      	ldr	r0, [pc, #336]	@ (8011ca0 <rmw_init+0x250>)
 8011b50:	f000 fdaa 	bl	80126a8 <rmw_uxrce_init_wait_set_memory>
 8011b54:	4953      	ldr	r1, [pc, #332]	@ (8011ca4 <rmw_init+0x254>)
 8011b56:	4854      	ldr	r0, [pc, #336]	@ (8011ca8 <rmw_init+0x258>)
 8011b58:	2204      	movs	r2, #4
 8011b5a:	f000 fdc5 	bl	80126e8 <rmw_uxrce_init_guard_condition_memory>
 8011b5e:	4642      	mov	r2, r8
 8011b60:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8011b62:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8011b64:	f000 fc48 	bl	80123f8 <rmw_uxrce_transport_init>
 8011b68:	4607      	mov	r7, r0
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d158      	bne.n	8011c20 <rmw_init+0x1d0>
 8011b6e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8011b70:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8011b74:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f003 f868 	bl	8014c50 <uxr_init_session>
 8011b80:	4622      	mov	r2, r4
 8011b82:	494a      	ldr	r1, [pc, #296]	@ (8011cac <rmw_init+0x25c>)
 8011b84:	4628      	mov	r0, r5
 8011b86:	f003 f887 	bl	8014c98 <uxr_set_topic_callback>
 8011b8a:	463a      	mov	r2, r7
 8011b8c:	4948      	ldr	r1, [pc, #288]	@ (8011cb0 <rmw_init+0x260>)
 8011b8e:	4628      	mov	r0, r5
 8011b90:	f003 f87e 	bl	8014c90 <uxr_set_status_callback>
 8011b94:	463a      	mov	r2, r7
 8011b96:	4947      	ldr	r1, [pc, #284]	@ (8011cb4 <rmw_init+0x264>)
 8011b98:	4628      	mov	r0, r5
 8011b9a:	f003 f881 	bl	8014ca0 <uxr_set_request_callback>
 8011b9e:	463a      	mov	r2, r7
 8011ba0:	4945      	ldr	r1, [pc, #276]	@ (8011cb8 <rmw_init+0x268>)
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f003 f880 	bl	8014ca8 <uxr_set_reply_callback>
 8011ba8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011bac:	2304      	movs	r3, #4
 8011bae:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8011bb2:	0092      	lsls	r2, r2, #2
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	f003 f8b7 	bl	8014d28 <uxr_create_input_reliable_stream>
 8011bba:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011bbe:	2304      	movs	r3, #4
 8011bc0:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8011bc4:	0092      	lsls	r2, r2, #2
 8011bc6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8011bca:	4628      	mov	r0, r5
 8011bcc:	f003 f882 	bl	8014cd4 <uxr_create_output_reliable_stream>
 8011bd0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f003 f8a1 	bl	8014d1c <uxr_create_input_best_effort_stream>
 8011bda:	f241 3194 	movw	r1, #5012	@ 0x1394
 8011bde:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8011be2:	4628      	mov	r0, r5
 8011be4:	4421      	add	r1, r4
 8011be6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011bea:	f003 f861 	bl	8014cb0 <uxr_create_output_best_effort_stream>
 8011bee:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f003 fe40 	bl	8015878 <uxr_create_session>
 8011bf8:	b1f8      	cbz	r0, 8011c3a <rmw_init+0x1ea>
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	b003      	add	sp, #12
 8011bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c02:	270b      	movs	r7, #11
 8011c04:	4638      	mov	r0, r7
 8011c06:	b003      	add	sp, #12
 8011c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c0c:	2701      	movs	r7, #1
 8011c0e:	4638      	mov	r0, r7
 8011c10:	b003      	add	sp, #12
 8011c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c16:	270c      	movs	r7, #12
 8011c18:	4638      	mov	r0, r7
 8011c1a:	b003      	add	sp, #12
 8011c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c20:	4648      	mov	r0, r9
 8011c22:	f002 fe5d 	bl	80148e0 <uxr_close_custom_transport>
 8011c26:	4621      	mov	r1, r4
 8011c28:	480c      	ldr	r0, [pc, #48]	@ (8011c5c <rmw_init+0x20c>)
 8011c2a:	f009 fc67 	bl	801b4fc <put_memory>
 8011c2e:	4638      	mov	r0, r7
 8011c30:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8011c34:	b003      	add	sp, #12
 8011c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c3a:	4648      	mov	r0, r9
 8011c3c:	f002 fe50 	bl	80148e0 <uxr_close_custom_transport>
 8011c40:	4621      	mov	r1, r4
 8011c42:	4806      	ldr	r0, [pc, #24]	@ (8011c5c <rmw_init+0x20c>)
 8011c44:	f009 fc5a 	bl	801b4fc <put_memory>
 8011c48:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8011c4a:	2701      	movs	r7, #1
 8011c4c:	e7d5      	b.n	8011bfa <rmw_init+0x1aa>
 8011c4e:	bf00      	nop
 8011c50:	0801fc14 	.word	0x0801fc14
 8011c54:	24012f5c 	.word	0x24012f5c
 8011c58:	2400f208 	.word	0x2400f208
 8011c5c:	24012f4c 	.word	0x24012f4c
 8011c60:	240107b0 	.word	0x240107b0
 8011c64:	2400e82c 	.word	0x2400e82c
 8011c68:	24012f1c 	.word	0x24012f1c
 8011c6c:	240128b0 	.word	0x240128b0
 8011c70:	24012f6c 	.word	0x24012f6c
 8011c74:	2400e8d0 	.word	0x2400e8d0
 8011c78:	24012f2c 	.word	0x24012f2c
 8011c7c:	2400f140 	.word	0x2400f140
 8011c80:	24012f3c 	.word	0x24012f3c
 8011c84:	2400e660 	.word	0x2400e660
 8011c88:	2400e64c 	.word	0x2400e64c
 8011c8c:	24012ce8 	.word	0x24012ce8
 8011c90:	24012f7c 	.word	0x24012f7c
 8011c94:	2400e7a8 	.word	0x2400e7a8
 8011c98:	24012f0c 	.word	0x24012f0c
 8011c9c:	24012e8c 	.word	0x24012e8c
 8011ca0:	24012f8c 	.word	0x24012f8c
 8011ca4:	2400e728 	.word	0x2400e728
 8011ca8:	24012efc 	.word	0x24012efc
 8011cac:	0801b315 	.word	0x0801b315
 8011cb0:	0801b30d 	.word	0x0801b30d
 8011cb4:	0801b3ad 	.word	0x0801b3ad
 8011cb8:	0801b449 	.word	0x0801b449

08011cbc <rmw_context_fini>:
 8011cbc:	4b17      	ldr	r3, [pc, #92]	@ (8011d1c <rmw_context_fini+0x60>)
 8011cbe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	681c      	ldr	r4, [r3, #0]
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	b334      	cbz	r4, 8011d16 <rmw_context_fini+0x5a>
 8011cc8:	2600      	movs	r6, #0
 8011cca:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011cce:	6902      	ldr	r2, [r0, #16]
 8011cd0:	428a      	cmp	r2, r1
 8011cd2:	d018      	beq.n	8011d06 <rmw_context_fini+0x4a>
 8011cd4:	2c00      	cmp	r4, #0
 8011cd6:	d1f8      	bne.n	8011cca <rmw_context_fini+0xe>
 8011cd8:	b189      	cbz	r1, 8011cfe <rmw_context_fini+0x42>
 8011cda:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8011cde:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011ce2:	789b      	ldrb	r3, [r3, #2]
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	bf14      	ite	ne
 8011ce8:	210a      	movne	r1, #10
 8011cea:	2100      	moveq	r1, #0
 8011cec:	f003 fd9c 	bl	8015828 <uxr_delete_session_retries>
 8011cf0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011cf2:	f000 fd19 	bl	8012728 <rmw_uxrce_fini_session_memory>
 8011cf6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011cf8:	3010      	adds	r0, #16
 8011cfa:	f002 fdf1 	bl	80148e0 <uxr_close_custom_transport>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4630      	mov	r0, r6
 8011d02:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	3018      	adds	r0, #24
 8011d08:	f000 f89c 	bl	8011e44 <rmw_destroy_node>
 8011d0c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011d0e:	4606      	mov	r6, r0
 8011d10:	2c00      	cmp	r4, #0
 8011d12:	d1da      	bne.n	8011cca <rmw_context_fini+0xe>
 8011d14:	e7e0      	b.n	8011cd8 <rmw_context_fini+0x1c>
 8011d16:	4626      	mov	r6, r4
 8011d18:	e7de      	b.n	8011cd8 <rmw_context_fini+0x1c>
 8011d1a:	bf00      	nop
 8011d1c:	24012f1c 	.word	0x24012f1c

08011d20 <create_node>:
 8011d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d24:	b083      	sub	sp, #12
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d064      	beq.n	8011df4 <create_node+0xd4>
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	4838      	ldr	r0, [pc, #224]	@ (8011e10 <create_node+0xf0>)
 8011d2e:	460f      	mov	r7, r1
 8011d30:	4690      	mov	r8, r2
 8011d32:	461d      	mov	r5, r3
 8011d34:	f009 fbd2 	bl	801b4dc <get_memory>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d05b      	beq.n	8011df4 <create_node+0xd4>
 8011d3c:	6884      	ldr	r4, [r0, #8]
 8011d3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011d40:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011d44:	f104 0518 	add.w	r5, r4, #24
 8011d48:	6123      	str	r3, [r4, #16]
 8011d4a:	f009 fc2f 	bl	801b5ac <rmw_get_implementation_identifier>
 8011d4e:	f8c4 9020 	str.w	r9, [r4, #32]
 8011d52:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8011d56:	4630      	mov	r0, r6
 8011d58:	f7ee facc 	bl	80002f4 <strlen>
 8011d5c:	1c42      	adds	r2, r0, #1
 8011d5e:	2a3c      	cmp	r2, #60	@ 0x3c
 8011d60:	d840      	bhi.n	8011de4 <create_node+0xc4>
 8011d62:	4648      	mov	r0, r9
 8011d64:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011d68:	4631      	mov	r1, r6
 8011d6a:	f00c faa6 	bl	801e2ba <memcpy>
 8011d6e:	4638      	mov	r0, r7
 8011d70:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8011d74:	f7ee fabe 	bl	80002f4 <strlen>
 8011d78:	1c42      	adds	r2, r0, #1
 8011d7a:	2a3c      	cmp	r2, #60	@ 0x3c
 8011d7c:	d832      	bhi.n	8011de4 <create_node+0xc4>
 8011d7e:	4639      	mov	r1, r7
 8011d80:	4648      	mov	r0, r9
 8011d82:	f00c fa9a 	bl	801e2ba <memcpy>
 8011d86:	6923      	ldr	r3, [r4, #16]
 8011d88:	2101      	movs	r1, #1
 8011d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011d8e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8011d92:	1842      	adds	r2, r0, r1
 8011d94:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011d98:	f002 fda6 	bl	80148e8 <uxr_object_id>
 8011d9c:	6160      	str	r0, [r4, #20]
 8011d9e:	783b      	ldrb	r3, [r7, #0]
 8011da0:	2b2f      	cmp	r3, #47	@ 0x2f
 8011da2:	d12c      	bne.n	8011dfe <create_node+0xde>
 8011da4:	787b      	ldrb	r3, [r7, #1]
 8011da6:	bb53      	cbnz	r3, 8011dfe <create_node+0xde>
 8011da8:	4633      	mov	r3, r6
 8011daa:	4a1a      	ldr	r2, [pc, #104]	@ (8011e14 <create_node+0xf4>)
 8011dac:	213c      	movs	r1, #60	@ 0x3c
 8011dae:	481a      	ldr	r0, [pc, #104]	@ (8011e18 <create_node+0xf8>)
 8011db0:	f00c f84c 	bl	801de4c <sniprintf>
 8011db4:	6920      	ldr	r0, [r4, #16]
 8011db6:	2106      	movs	r1, #6
 8011db8:	fa1f f388 	uxth.w	r3, r8
 8011dbc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011dc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011dc4:	9101      	str	r1, [sp, #4]
 8011dc6:	4914      	ldr	r1, [pc, #80]	@ (8011e18 <create_node+0xf8>)
 8011dc8:	9100      	str	r1, [sp, #0]
 8011dca:	6811      	ldr	r1, [r2, #0]
 8011dcc:	6962      	ldr	r2, [r4, #20]
 8011dce:	f002 fbbf 	bl	8014550 <uxr_buffer_create_participant_bin>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	6920      	ldr	r0, [r4, #16]
 8011dd6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011dda:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011dde:	f000 fe25 	bl	8012a2c <run_xrce_session>
 8011de2:	b918      	cbnz	r0, 8011dec <create_node+0xcc>
 8011de4:	4628      	mov	r0, r5
 8011de6:	2500      	movs	r5, #0
 8011de8:	f000 fca4 	bl	8012734 <rmw_uxrce_fini_node_memory>
 8011dec:	4628      	mov	r0, r5
 8011dee:	b003      	add	sp, #12
 8011df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011df4:	2500      	movs	r5, #0
 8011df6:	4628      	mov	r0, r5
 8011df8:	b003      	add	sp, #12
 8011dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dfe:	463b      	mov	r3, r7
 8011e00:	4a06      	ldr	r2, [pc, #24]	@ (8011e1c <create_node+0xfc>)
 8011e02:	213c      	movs	r1, #60	@ 0x3c
 8011e04:	9600      	str	r6, [sp, #0]
 8011e06:	4804      	ldr	r0, [pc, #16]	@ (8011e18 <create_node+0xf8>)
 8011e08:	f00c f820 	bl	801de4c <sniprintf>
 8011e0c:	e7d2      	b.n	8011db4 <create_node+0x94>
 8011e0e:	bf00      	nop
 8011e10:	24012f1c 	.word	0x24012f1c
 8011e14:	0801f1f8 	.word	0x0801f1f8
 8011e18:	2400e610 	.word	0x2400e610
 8011e1c:	0801f1bc 	.word	0x0801f1bc

08011e20 <rmw_create_node>:
 8011e20:	468c      	mov	ip, r1
 8011e22:	4611      	mov	r1, r2
 8011e24:	f1bc 0f00 	cmp.w	ip, #0
 8011e28:	d00a      	beq.n	8011e40 <rmw_create_node+0x20>
 8011e2a:	f89c 3000 	ldrb.w	r3, [ip]
 8011e2e:	b13b      	cbz	r3, 8011e40 <rmw_create_node+0x20>
 8011e30:	b132      	cbz	r2, 8011e40 <rmw_create_node+0x20>
 8011e32:	7813      	ldrb	r3, [r2, #0]
 8011e34:	b123      	cbz	r3, 8011e40 <rmw_create_node+0x20>
 8011e36:	4603      	mov	r3, r0
 8011e38:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011e3a:	4660      	mov	r0, ip
 8011e3c:	f7ff bf70 	b.w	8011d20 <create_node>
 8011e40:	2000      	movs	r0, #0
 8011e42:	4770      	bx	lr

08011e44 <rmw_destroy_node>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	b328      	cbz	r0, 8011e94 <rmw_destroy_node+0x50>
 8011e48:	4607      	mov	r7, r0
 8011e4a:	6800      	ldr	r0, [r0, #0]
 8011e4c:	b120      	cbz	r0, 8011e58 <rmw_destroy_node+0x14>
 8011e4e:	4b37      	ldr	r3, [pc, #220]	@ (8011f2c <rmw_destroy_node+0xe8>)
 8011e50:	6819      	ldr	r1, [r3, #0]
 8011e52:	f7ee fa45 	bl	80002e0 <strcmp>
 8011e56:	b9e8      	cbnz	r0, 8011e94 <rmw_destroy_node+0x50>
 8011e58:	687d      	ldr	r5, [r7, #4]
 8011e5a:	b1dd      	cbz	r5, 8011e94 <rmw_destroy_node+0x50>
 8011e5c:	4b34      	ldr	r3, [pc, #208]	@ (8011f30 <rmw_destroy_node+0xec>)
 8011e5e:	681c      	ldr	r4, [r3, #0]
 8011e60:	2c00      	cmp	r4, #0
 8011e62:	d060      	beq.n	8011f26 <rmw_destroy_node+0xe2>
 8011e64:	2600      	movs	r6, #0
 8011e66:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011e6a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8011e6e:	429d      	cmp	r5, r3
 8011e70:	d013      	beq.n	8011e9a <rmw_destroy_node+0x56>
 8011e72:	2c00      	cmp	r4, #0
 8011e74:	d1f7      	bne.n	8011e66 <rmw_destroy_node+0x22>
 8011e76:	4b2f      	ldr	r3, [pc, #188]	@ (8011f34 <rmw_destroy_node+0xf0>)
 8011e78:	681c      	ldr	r4, [r3, #0]
 8011e7a:	b1c4      	cbz	r4, 8011eae <rmw_destroy_node+0x6a>
 8011e7c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011e80:	6a0b      	ldr	r3, [r1, #32]
 8011e82:	429d      	cmp	r5, r3
 8011e84:	d1f9      	bne.n	8011e7a <rmw_destroy_node+0x36>
 8011e86:	317c      	adds	r1, #124	@ 0x7c
 8011e88:	4638      	mov	r0, r7
 8011e8a:	f000 fa53 	bl	8012334 <rmw_destroy_subscription>
 8011e8e:	2801      	cmp	r0, #1
 8011e90:	4606      	mov	r6, r0
 8011e92:	d1f2      	bne.n	8011e7a <rmw_destroy_node+0x36>
 8011e94:	2601      	movs	r6, #1
 8011e96:	4630      	mov	r0, r6
 8011e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e9a:	3184      	adds	r1, #132	@ 0x84
 8011e9c:	4638      	mov	r0, r7
 8011e9e:	f000 f9b1 	bl	8012204 <rmw_destroy_publisher>
 8011ea2:	2801      	cmp	r0, #1
 8011ea4:	4606      	mov	r6, r0
 8011ea6:	d0f5      	beq.n	8011e94 <rmw_destroy_node+0x50>
 8011ea8:	2c00      	cmp	r4, #0
 8011eaa:	d1dc      	bne.n	8011e66 <rmw_destroy_node+0x22>
 8011eac:	e7e3      	b.n	8011e76 <rmw_destroy_node+0x32>
 8011eae:	4b22      	ldr	r3, [pc, #136]	@ (8011f38 <rmw_destroy_node+0xf4>)
 8011eb0:	681c      	ldr	r4, [r3, #0]
 8011eb2:	b16c      	cbz	r4, 8011ed0 <rmw_destroy_node+0x8c>
 8011eb4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011eb8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011eba:	429d      	cmp	r5, r3
 8011ebc:	d1f9      	bne.n	8011eb2 <rmw_destroy_node+0x6e>
 8011ebe:	317c      	adds	r1, #124	@ 0x7c
 8011ec0:	4638      	mov	r0, r7
 8011ec2:	f000 f9f3 	bl	80122ac <rmw_destroy_service>
 8011ec6:	2801      	cmp	r0, #1
 8011ec8:	4606      	mov	r6, r0
 8011eca:	d0e3      	beq.n	8011e94 <rmw_destroy_node+0x50>
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	d1f1      	bne.n	8011eb4 <rmw_destroy_node+0x70>
 8011ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8011f3c <rmw_destroy_node+0xf8>)
 8011ed2:	681c      	ldr	r4, [r3, #0]
 8011ed4:	b16c      	cbz	r4, 8011ef2 <rmw_destroy_node+0xae>
 8011ed6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011eda:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011edc:	429d      	cmp	r5, r3
 8011ede:	d1f9      	bne.n	8011ed4 <rmw_destroy_node+0x90>
 8011ee0:	317c      	adds	r1, #124	@ 0x7c
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	f009 fb1e 	bl	801b524 <rmw_destroy_client>
 8011ee8:	2801      	cmp	r0, #1
 8011eea:	4606      	mov	r6, r0
 8011eec:	d0d2      	beq.n	8011e94 <rmw_destroy_node+0x50>
 8011eee:	2c00      	cmp	r4, #0
 8011ef0:	d1f1      	bne.n	8011ed6 <rmw_destroy_node+0x92>
 8011ef2:	6928      	ldr	r0, [r5, #16]
 8011ef4:	696a      	ldr	r2, [r5, #20]
 8011ef6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011efa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011efe:	6819      	ldr	r1, [r3, #0]
 8011f00:	f002 fada 	bl	80144b8 <uxr_buffer_delete_entity>
 8011f04:	4602      	mov	r2, r0
 8011f06:	6928      	ldr	r0, [r5, #16]
 8011f08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011f0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011f10:	f000 fd8c 	bl	8012a2c <run_xrce_session>
 8011f14:	4603      	mov	r3, r0
 8011f16:	4638      	mov	r0, r7
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	bf08      	it	eq
 8011f1c:	2602      	moveq	r6, #2
 8011f1e:	f000 fc09 	bl	8012734 <rmw_uxrce_fini_node_memory>
 8011f22:	4630      	mov	r0, r6
 8011f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f26:	4626      	mov	r6, r4
 8011f28:	e7a5      	b.n	8011e76 <rmw_destroy_node+0x32>
 8011f2a:	bf00      	nop
 8011f2c:	0801fc14 	.word	0x0801fc14
 8011f30:	24012f2c 	.word	0x24012f2c
 8011f34:	24012f6c 	.word	0x24012f6c
 8011f38:	24012f3c 	.word	0x24012f3c
 8011f3c:	2400e64c 	.word	0x2400e64c

08011f40 <rmw_node_get_graph_guard_condition>:
 8011f40:	6843      	ldr	r3, [r0, #4]
 8011f42:	6918      	ldr	r0, [r3, #16]
 8011f44:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop

08011f4c <flush_session>:
 8011f4c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8011f4e:	f003 bacb 	b.w	80154e8 <uxr_run_session_until_confirm_delivery>
 8011f52:	bf00      	nop

08011f54 <rmw_publish>:
 8011f54:	2800      	cmp	r0, #0
 8011f56:	d053      	beq.n	8012000 <rmw_publish+0xac>
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	b08e      	sub	sp, #56	@ 0x38
 8011f5e:	2900      	cmp	r1, #0
 8011f60:	d04b      	beq.n	8011ffa <rmw_publish+0xa6>
 8011f62:	4604      	mov	r4, r0
 8011f64:	6800      	ldr	r0, [r0, #0]
 8011f66:	f000 fddb 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d045      	beq.n	8011ffa <rmw_publish+0xa6>
 8011f6e:	6866      	ldr	r6, [r4, #4]
 8011f70:	2e00      	cmp	r6, #0
 8011f72:	d042      	beq.n	8011ffa <rmw_publish+0xa6>
 8011f74:	69b4      	ldr	r4, [r6, #24]
 8011f76:	4628      	mov	r0, r5
 8011f78:	6923      	ldr	r3, [r4, #16]
 8011f7a:	4798      	blx	r3
 8011f7c:	69f3      	ldr	r3, [r6, #28]
 8011f7e:	9005      	str	r0, [sp, #20]
 8011f80:	b113      	cbz	r3, 8011f88 <rmw_publish+0x34>
 8011f82:	a805      	add	r0, sp, #20
 8011f84:	4798      	blx	r3
 8011f86:	9805      	ldr	r0, [sp, #20]
 8011f88:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	9000      	str	r0, [sp, #0]
 8011f90:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011f94:	6972      	ldr	r2, [r6, #20]
 8011f96:	ab06      	add	r3, sp, #24
 8011f98:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011f9a:	f004 fd75 	bl	8016a88 <uxr_prepare_output_stream>
 8011f9e:	b1d8      	cbz	r0, 8011fd8 <rmw_publish+0x84>
 8011fa0:	68a3      	ldr	r3, [r4, #8]
 8011fa2:	a906      	add	r1, sp, #24
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	4798      	blx	r3
 8011fa8:	6a33      	ldr	r3, [r6, #32]
 8011faa:	4604      	mov	r4, r0
 8011fac:	b10b      	cbz	r3, 8011fb2 <rmw_publish+0x5e>
 8011fae:	a806      	add	r0, sp, #24
 8011fb0:	4798      	blx	r3
 8011fb2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011fbc:	d022      	beq.n	8012004 <rmw_publish+0xb0>
 8011fbe:	6918      	ldr	r0, [r3, #16]
 8011fc0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8011fc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011fc6:	f003 fa8f 	bl	80154e8 <uxr_run_session_until_confirm_delivery>
 8011fca:	4020      	ands	r0, r4
 8011fcc:	b2c4      	uxtb	r4, r0
 8011fce:	f084 0001 	eor.w	r0, r4, #1
 8011fd2:	b2c0      	uxtb	r0, r0
 8011fd4:	b00e      	add	sp, #56	@ 0x38
 8011fd6:	bd70      	pop	{r4, r5, r6, pc}
 8011fd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011fdc:	6918      	ldr	r0, [r3, #16]
 8011fde:	9b05      	ldr	r3, [sp, #20]
 8011fe0:	9602      	str	r6, [sp, #8]
 8011fe2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011fe6:	9300      	str	r3, [sp, #0]
 8011fe8:	4b09      	ldr	r3, [pc, #36]	@ (8012010 <rmw_publish+0xbc>)
 8011fea:	9301      	str	r3, [sp, #4]
 8011fec:	ab06      	add	r3, sp, #24
 8011fee:	6972      	ldr	r2, [r6, #20]
 8011ff0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011ff2:	f004 fd79 	bl	8016ae8 <uxr_prepare_output_stream_fragmented>
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d1d2      	bne.n	8011fa0 <rmw_publish+0x4c>
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	b00e      	add	sp, #56	@ 0x38
 8011ffe:	bd70      	pop	{r4, r5, r6, pc}
 8012000:	2001      	movs	r0, #1
 8012002:	4770      	bx	lr
 8012004:	6918      	ldr	r0, [r3, #16]
 8012006:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801200a:	f002 feb3 	bl	8014d74 <uxr_flash_output_streams>
 801200e:	e7de      	b.n	8011fce <rmw_publish+0x7a>
 8012010:	08011f4d 	.word	0x08011f4d

08012014 <rmw_create_publisher>:
 8012014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	b087      	sub	sp, #28
 801201a:	2800      	cmp	r0, #0
 801201c:	f000 80d2 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 8012020:	460e      	mov	r6, r1
 8012022:	2900      	cmp	r1, #0
 8012024:	f000 80ce 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 8012028:	4604      	mov	r4, r0
 801202a:	6800      	ldr	r0, [r0, #0]
 801202c:	4615      	mov	r5, r2
 801202e:	461f      	mov	r7, r3
 8012030:	f000 fd76 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8012034:	f080 0001 	eor.w	r0, r0, #1
 8012038:	b2c0      	uxtb	r0, r0
 801203a:	2800      	cmp	r0, #0
 801203c:	f040 80c2 	bne.w	80121c4 <rmw_create_publisher+0x1b0>
 8012040:	2d00      	cmp	r5, #0
 8012042:	f000 80bf 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 8012046:	782b      	ldrb	r3, [r5, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	f000 80bb 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 801204e:	2f00      	cmp	r7, #0
 8012050:	f000 80b8 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 8012054:	485e      	ldr	r0, [pc, #376]	@ (80121d0 <rmw_create_publisher+0x1bc>)
 8012056:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801205a:	f009 fa3f 	bl	801b4dc <get_memory>
 801205e:	2800      	cmp	r0, #0
 8012060:	f000 80b0 	beq.w	80121c4 <rmw_create_publisher+0x1b0>
 8012064:	6884      	ldr	r4, [r0, #8]
 8012066:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801206a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801206e:	f009 fa9d 	bl	801b5ac <rmw_get_implementation_identifier>
 8012072:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8012076:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801207a:	4628      	mov	r0, r5
 801207c:	f7ee f93a 	bl	80002f4 <strlen>
 8012080:	3001      	adds	r0, #1
 8012082:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8012086:	283c      	cmp	r0, #60	@ 0x3c
 8012088:	f200 808f 	bhi.w	80121aa <rmw_create_publisher+0x196>
 801208c:	462b      	mov	r3, r5
 801208e:	4a51      	ldr	r2, [pc, #324]	@ (80121d4 <rmw_create_publisher+0x1c0>)
 8012090:	213c      	movs	r1, #60	@ 0x3c
 8012092:	4650      	mov	r0, sl
 8012094:	f00b feda 	bl	801de4c <sniprintf>
 8012098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801209c:	4639      	mov	r1, r7
 801209e:	2250      	movs	r2, #80	@ 0x50
 80120a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80120a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80120a6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80120aa:	f00c f906 	bl	801e2ba <memcpy>
 80120ae:	7a3b      	ldrb	r3, [r7, #8]
 80120b0:	4630      	mov	r0, r6
 80120b2:	4949      	ldr	r1, [pc, #292]	@ (80121d8 <rmw_create_publisher+0x1c4>)
 80120b4:	2b02      	cmp	r3, #2
 80120b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120ba:	bf0c      	ite	eq
 80120bc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80120c0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80120c4:	67a3      	str	r3, [r4, #120]	@ 0x78
 80120c6:	2300      	movs	r3, #0
 80120c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80120cc:	f000 fd36 	bl	8012b3c <get_message_typesupport_handle>
 80120d0:	2800      	cmp	r0, #0
 80120d2:	d06a      	beq.n	80121aa <rmw_create_publisher+0x196>
 80120d4:	6842      	ldr	r2, [r0, #4]
 80120d6:	61a2      	str	r2, [r4, #24]
 80120d8:	2a00      	cmp	r2, #0
 80120da:	d066      	beq.n	80121aa <rmw_create_publisher+0x196>
 80120dc:	4629      	mov	r1, r5
 80120de:	463b      	mov	r3, r7
 80120e0:	4648      	mov	r0, r9
 80120e2:	f009 fa69 	bl	801b5b8 <create_topic>
 80120e6:	6260      	str	r0, [r4, #36]	@ 0x24
 80120e8:	2800      	cmp	r0, #0
 80120ea:	d062      	beq.n	80121b2 <rmw_create_publisher+0x19e>
 80120ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120f0:	2103      	movs	r1, #3
 80120f2:	2506      	movs	r5, #6
 80120f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80120f8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80120fc:	1c42      	adds	r2, r0, #1
 80120fe:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8012102:	f002 fbf1 	bl	80148e8 <uxr_object_id>
 8012106:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801210a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801210e:	6120      	str	r0, [r4, #16]
 8012110:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8012114:	6910      	ldr	r0, [r2, #16]
 8012116:	9500      	str	r5, [sp, #0]
 8012118:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801211c:	6819      	ldr	r1, [r3, #0]
 801211e:	6922      	ldr	r2, [r4, #16]
 8012120:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012124:	f002 fa7c 	bl	8014620 <uxr_buffer_create_publisher_bin>
 8012128:	4602      	mov	r2, r0
 801212a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801212e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012132:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012136:	f000 fc79 	bl	8012a2c <run_xrce_session>
 801213a:	b3b0      	cbz	r0, 80121aa <rmw_create_publisher+0x196>
 801213c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012140:	2105      	movs	r1, #5
 8012142:	f10d 0a10 	add.w	sl, sp, #16
 8012146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801214a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801214e:	1c42      	adds	r2, r0, #1
 8012150:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8012154:	f002 fbc8 	bl	80148e8 <uxr_object_id>
 8012158:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801215c:	4639      	mov	r1, r7
 801215e:	6160      	str	r0, [r4, #20]
 8012160:	691e      	ldr	r6, [r3, #16]
 8012162:	4650      	mov	r0, sl
 8012164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012168:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801216c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8012170:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8012174:	f000 fc76 	bl	8012a64 <convert_qos_profile>
 8012178:	9503      	str	r5, [sp, #12]
 801217a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801217e:	9001      	str	r0, [sp, #4]
 8012180:	4630      	mov	r0, r6
 8012182:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012186:	f8db 3010 	ldr.w	r3, [fp, #16]
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012192:	f002 fa75 	bl	8014680 <uxr_buffer_create_datawriter_bin>
 8012196:	4602      	mov	r2, r0
 8012198:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801219c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80121a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80121a4:	f000 fc42 	bl	8012a2c <run_xrce_session>
 80121a8:	b970      	cbnz	r0, 80121c8 <rmw_create_publisher+0x1b4>
 80121aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80121ac:	b108      	cbz	r0, 80121b2 <rmw_create_publisher+0x19e>
 80121ae:	f000 fb31 	bl	8012814 <rmw_uxrce_fini_topic_memory>
 80121b2:	4640      	mov	r0, r8
 80121b4:	f04f 0800 	mov.w	r8, #0
 80121b8:	f000 fad4 	bl	8012764 <rmw_uxrce_fini_publisher_memory>
 80121bc:	4640      	mov	r0, r8
 80121be:	b007      	add	sp, #28
 80121c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c4:	f04f 0800 	mov.w	r8, #0
 80121c8:	4640      	mov	r0, r8
 80121ca:	b007      	add	sp, #28
 80121cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d0:	24012f2c 	.word	0x24012f2c
 80121d4:	0801f1f8 	.word	0x0801f1f8
 80121d8:	0801f1c4 	.word	0x0801f1c4

080121dc <rmw_publisher_get_actual_qos>:
 80121dc:	b178      	cbz	r0, 80121fe <rmw_publisher_get_actual_qos+0x22>
 80121de:	b510      	push	{r4, lr}
 80121e0:	fab1 f481 	clz	r4, r1
 80121e4:	0964      	lsrs	r4, r4, #5
 80121e6:	b141      	cbz	r1, 80121fa <rmw_publisher_get_actual_qos+0x1e>
 80121e8:	6843      	ldr	r3, [r0, #4]
 80121ea:	2250      	movs	r2, #80	@ 0x50
 80121ec:	4608      	mov	r0, r1
 80121ee:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80121f2:	f00c f862 	bl	801e2ba <memcpy>
 80121f6:	4620      	mov	r0, r4
 80121f8:	bd10      	pop	{r4, pc}
 80121fa:	200b      	movs	r0, #11
 80121fc:	bd10      	pop	{r4, pc}
 80121fe:	200b      	movs	r0, #11
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop

08012204 <rmw_destroy_publisher>:
 8012204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012208:	b128      	cbz	r0, 8012216 <rmw_destroy_publisher+0x12>
 801220a:	4604      	mov	r4, r0
 801220c:	6800      	ldr	r0, [r0, #0]
 801220e:	460d      	mov	r5, r1
 8012210:	f000 fc86 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8012214:	b918      	cbnz	r0, 801221e <rmw_destroy_publisher+0x1a>
 8012216:	2401      	movs	r4, #1
 8012218:	4620      	mov	r0, r4
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	6863      	ldr	r3, [r4, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d0f8      	beq.n	8012216 <rmw_destroy_publisher+0x12>
 8012224:	fab5 f485 	clz	r4, r5
 8012228:	0964      	lsrs	r4, r4, #5
 801222a:	2d00      	cmp	r5, #0
 801222c:	d0f3      	beq.n	8012216 <rmw_destroy_publisher+0x12>
 801222e:	6828      	ldr	r0, [r5, #0]
 8012230:	f000 fc76 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8012234:	2800      	cmp	r0, #0
 8012236:	d0ee      	beq.n	8012216 <rmw_destroy_publisher+0x12>
 8012238:	686e      	ldr	r6, [r5, #4]
 801223a:	2e00      	cmp	r6, #0
 801223c:	d0eb      	beq.n	8012216 <rmw_destroy_publisher+0x12>
 801223e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8012240:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8012244:	f009 fa08 	bl	801b658 <destroy_topic>
 8012248:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801224c:	6972      	ldr	r2, [r6, #20]
 801224e:	6918      	ldr	r0, [r3, #16]
 8012250:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012254:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012258:	6819      	ldr	r1, [r3, #0]
 801225a:	f002 f92d 	bl	80144b8 <uxr_buffer_delete_entity>
 801225e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8012262:	4680      	mov	r8, r0
 8012264:	6932      	ldr	r2, [r6, #16]
 8012266:	6918      	ldr	r0, [r3, #16]
 8012268:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801226c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012270:	6819      	ldr	r1, [r3, #0]
 8012272:	f002 f921 	bl	80144b8 <uxr_buffer_delete_entity>
 8012276:	4606      	mov	r6, r0
 8012278:	6938      	ldr	r0, [r7, #16]
 801227a:	4642      	mov	r2, r8
 801227c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012280:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012284:	f000 fbd2 	bl	8012a2c <run_xrce_session>
 8012288:	693f      	ldr	r7, [r7, #16]
 801228a:	4632      	mov	r2, r6
 801228c:	4606      	mov	r6, r0
 801228e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012292:	4638      	mov	r0, r7
 8012294:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8012298:	f000 fbc8 	bl	8012a2c <run_xrce_session>
 801229c:	b126      	cbz	r6, 80122a8 <rmw_destroy_publisher+0xa4>
 801229e:	b118      	cbz	r0, 80122a8 <rmw_destroy_publisher+0xa4>
 80122a0:	4628      	mov	r0, r5
 80122a2:	f000 fa5f 	bl	8012764 <rmw_uxrce_fini_publisher_memory>
 80122a6:	e7b7      	b.n	8012218 <rmw_destroy_publisher+0x14>
 80122a8:	2402      	movs	r4, #2
 80122aa:	e7f9      	b.n	80122a0 <rmw_destroy_publisher+0x9c>

080122ac <rmw_destroy_service>:
 80122ac:	b570      	push	{r4, r5, r6, lr}
 80122ae:	b128      	cbz	r0, 80122bc <rmw_destroy_service+0x10>
 80122b0:	4604      	mov	r4, r0
 80122b2:	6800      	ldr	r0, [r0, #0]
 80122b4:	460d      	mov	r5, r1
 80122b6:	f000 fc33 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 80122ba:	b910      	cbnz	r0, 80122c2 <rmw_destroy_service+0x16>
 80122bc:	2401      	movs	r4, #1
 80122be:	4620      	mov	r0, r4
 80122c0:	bd70      	pop	{r4, r5, r6, pc}
 80122c2:	6863      	ldr	r3, [r4, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d0f9      	beq.n	80122bc <rmw_destroy_service+0x10>
 80122c8:	2d00      	cmp	r5, #0
 80122ca:	d0f7      	beq.n	80122bc <rmw_destroy_service+0x10>
 80122cc:	6828      	ldr	r0, [r5, #0]
 80122ce:	f000 fc27 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d0f2      	beq.n	80122bc <rmw_destroy_service+0x10>
 80122d6:	686e      	ldr	r6, [r5, #4]
 80122d8:	2e00      	cmp	r6, #0
 80122da:	d0ef      	beq.n	80122bc <rmw_destroy_service+0x10>
 80122dc:	6864      	ldr	r4, [r4, #4]
 80122de:	6932      	ldr	r2, [r6, #16]
 80122e0:	6920      	ldr	r0, [r4, #16]
 80122e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80122e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80122ea:	6819      	ldr	r1, [r3, #0]
 80122ec:	f002 fb2c 	bl	8014948 <uxr_buffer_cancel_data>
 80122f0:	4602      	mov	r2, r0
 80122f2:	6920      	ldr	r0, [r4, #16]
 80122f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80122f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80122fc:	f000 fb96 	bl	8012a2c <run_xrce_session>
 8012300:	6920      	ldr	r0, [r4, #16]
 8012302:	6932      	ldr	r2, [r6, #16]
 8012304:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012308:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801230c:	6819      	ldr	r1, [r3, #0]
 801230e:	f002 f8d3 	bl	80144b8 <uxr_buffer_delete_entity>
 8012312:	4602      	mov	r2, r0
 8012314:	6920      	ldr	r0, [r4, #16]
 8012316:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801231a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801231e:	f000 fb85 	bl	8012a2c <run_xrce_session>
 8012322:	4603      	mov	r3, r0
 8012324:	4628      	mov	r0, r5
 8012326:	2b00      	cmp	r3, #0
 8012328:	bf14      	ite	ne
 801232a:	2400      	movne	r4, #0
 801232c:	2402      	moveq	r4, #2
 801232e:	f000 fa45 	bl	80127bc <rmw_uxrce_fini_service_memory>
 8012332:	e7c4      	b.n	80122be <rmw_destroy_service+0x12>

08012334 <rmw_destroy_subscription>:
 8012334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012338:	b128      	cbz	r0, 8012346 <rmw_destroy_subscription+0x12>
 801233a:	4604      	mov	r4, r0
 801233c:	6800      	ldr	r0, [r0, #0]
 801233e:	460d      	mov	r5, r1
 8012340:	f000 fbee 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8012344:	b918      	cbnz	r0, 801234e <rmw_destroy_subscription+0x1a>
 8012346:	2401      	movs	r4, #1
 8012348:	4620      	mov	r0, r4
 801234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234e:	6863      	ldr	r3, [r4, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d0f8      	beq.n	8012346 <rmw_destroy_subscription+0x12>
 8012354:	fab5 f485 	clz	r4, r5
 8012358:	0964      	lsrs	r4, r4, #5
 801235a:	2d00      	cmp	r5, #0
 801235c:	d0f3      	beq.n	8012346 <rmw_destroy_subscription+0x12>
 801235e:	6828      	ldr	r0, [r5, #0]
 8012360:	f000 fbde 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 8012364:	2800      	cmp	r0, #0
 8012366:	d0ee      	beq.n	8012346 <rmw_destroy_subscription+0x12>
 8012368:	686e      	ldr	r6, [r5, #4]
 801236a:	2e00      	cmp	r6, #0
 801236c:	d0eb      	beq.n	8012346 <rmw_destroy_subscription+0x12>
 801236e:	6a37      	ldr	r7, [r6, #32]
 8012370:	6972      	ldr	r2, [r6, #20]
 8012372:	6938      	ldr	r0, [r7, #16]
 8012374:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801237c:	6819      	ldr	r1, [r3, #0]
 801237e:	f002 fae3 	bl	8014948 <uxr_buffer_cancel_data>
 8012382:	4602      	mov	r2, r0
 8012384:	6938      	ldr	r0, [r7, #16]
 8012386:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801238a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801238e:	f000 fb4d 	bl	8012a2c <run_xrce_session>
 8012392:	69f0      	ldr	r0, [r6, #28]
 8012394:	f009 f960 	bl	801b658 <destroy_topic>
 8012398:	6a33      	ldr	r3, [r6, #32]
 801239a:	6972      	ldr	r2, [r6, #20]
 801239c:	6918      	ldr	r0, [r3, #16]
 801239e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123a6:	6819      	ldr	r1, [r3, #0]
 80123a8:	f002 f886 	bl	80144b8 <uxr_buffer_delete_entity>
 80123ac:	6a33      	ldr	r3, [r6, #32]
 80123ae:	4680      	mov	r8, r0
 80123b0:	6932      	ldr	r2, [r6, #16]
 80123b2:	6918      	ldr	r0, [r3, #16]
 80123b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123bc:	6819      	ldr	r1, [r3, #0]
 80123be:	f002 f87b 	bl	80144b8 <uxr_buffer_delete_entity>
 80123c2:	4606      	mov	r6, r0
 80123c4:	6938      	ldr	r0, [r7, #16]
 80123c6:	4642      	mov	r2, r8
 80123c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80123cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80123d0:	f000 fb2c 	bl	8012a2c <run_xrce_session>
 80123d4:	693f      	ldr	r7, [r7, #16]
 80123d6:	4632      	mov	r2, r6
 80123d8:	4606      	mov	r6, r0
 80123da:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80123de:	4638      	mov	r0, r7
 80123e0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80123e4:	f000 fb22 	bl	8012a2c <run_xrce_session>
 80123e8:	b126      	cbz	r6, 80123f4 <rmw_destroy_subscription+0xc0>
 80123ea:	b118      	cbz	r0, 80123f4 <rmw_destroy_subscription+0xc0>
 80123ec:	4628      	mov	r0, r5
 80123ee:	f000 f9cf 	bl	8012790 <rmw_uxrce_fini_subscription_memory>
 80123f2:	e7a9      	b.n	8012348 <rmw_destroy_subscription+0x14>
 80123f4:	2402      	movs	r4, #2
 80123f6:	e7f9      	b.n	80123ec <rmw_destroy_subscription+0xb8>

080123f8 <rmw_uxrce_transport_init>:
 80123f8:	b508      	push	{r3, lr}
 80123fa:	b108      	cbz	r0, 8012400 <rmw_uxrce_transport_init+0x8>
 80123fc:	f100 0210 	add.w	r2, r0, #16
 8012400:	b139      	cbz	r1, 8012412 <rmw_uxrce_transport_init+0x1a>
 8012402:	6949      	ldr	r1, [r1, #20]
 8012404:	4610      	mov	r0, r2
 8012406:	f002 fa37 	bl	8014878 <uxr_init_custom_transport>
 801240a:	f080 0001 	eor.w	r0, r0, #1
 801240e:	b2c0      	uxtb	r0, r0
 8012410:	bd08      	pop	{r3, pc}
 8012412:	4b04      	ldr	r3, [pc, #16]	@ (8012424 <rmw_uxrce_transport_init+0x2c>)
 8012414:	4610      	mov	r0, r2
 8012416:	6859      	ldr	r1, [r3, #4]
 8012418:	f002 fa2e 	bl	8014878 <uxr_init_custom_transport>
 801241c:	f080 0001 	eor.w	r0, r0, #1
 8012420:	b2c0      	uxtb	r0, r0
 8012422:	bd08      	pop	{r3, pc}
 8012424:	2400e5f4 	.word	0x2400e5f4

08012428 <rmw_uros_epoch_nanos>:
 8012428:	4b05      	ldr	r3, [pc, #20]	@ (8012440 <rmw_uros_epoch_nanos+0x18>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	b123      	cbz	r3, 8012438 <rmw_uros_epoch_nanos+0x10>
 801242e:	6898      	ldr	r0, [r3, #8]
 8012430:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012434:	f002 bc94 	b.w	8014d60 <uxr_epoch_nanos>
 8012438:	2000      	movs	r0, #0
 801243a:	2100      	movs	r1, #0
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop
 8012440:	24012f4c 	.word	0x24012f4c

08012444 <rmw_uros_sync_session>:
 8012444:	b508      	push	{r3, lr}
 8012446:	4b07      	ldr	r3, [pc, #28]	@ (8012464 <rmw_uros_sync_session+0x20>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	b14b      	cbz	r3, 8012460 <rmw_uros_sync_session+0x1c>
 801244c:	4601      	mov	r1, r0
 801244e:	6898      	ldr	r0, [r3, #8]
 8012450:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012454:	f003 f8c4 	bl	80155e0 <uxr_sync_session>
 8012458:	f080 0001 	eor.w	r0, r0, #1
 801245c:	b2c0      	uxtb	r0, r0
 801245e:	bd08      	pop	{r3, pc}
 8012460:	2001      	movs	r0, #1
 8012462:	bd08      	pop	{r3, pc}
 8012464:	24012f4c 	.word	0x24012f4c

08012468 <rmw_uxrce_init_service_memory>:
 8012468:	b1e2      	cbz	r2, 80124a4 <rmw_uxrce_init_service_memory+0x3c>
 801246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801246e:	7b05      	ldrb	r5, [r0, #12]
 8012470:	4606      	mov	r6, r0
 8012472:	b9ad      	cbnz	r5, 80124a0 <rmw_uxrce_init_service_memory+0x38>
 8012474:	23c8      	movs	r3, #200	@ 0xc8
 8012476:	4617      	mov	r7, r2
 8012478:	460c      	mov	r4, r1
 801247a:	46a8      	mov	r8, r5
 801247c:	6083      	str	r3, [r0, #8]
 801247e:	f240 1301 	movw	r3, #257	@ 0x101
 8012482:	e9c0 5500 	strd	r5, r5, [r0]
 8012486:	8183      	strh	r3, [r0, #12]
 8012488:	3501      	adds	r5, #1
 801248a:	4621      	mov	r1, r4
 801248c:	4630      	mov	r0, r6
 801248e:	f009 f835 	bl	801b4fc <put_memory>
 8012492:	42af      	cmp	r7, r5
 8012494:	60a4      	str	r4, [r4, #8]
 8012496:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801249a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801249e:	d1f3      	bne.n	8012488 <rmw_uxrce_init_service_memory+0x20>
 80124a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop

080124a8 <rmw_uxrce_init_client_memory>:
 80124a8:	b1e2      	cbz	r2, 80124e4 <rmw_uxrce_init_client_memory+0x3c>
 80124aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ae:	7b05      	ldrb	r5, [r0, #12]
 80124b0:	4606      	mov	r6, r0
 80124b2:	b9ad      	cbnz	r5, 80124e0 <rmw_uxrce_init_client_memory+0x38>
 80124b4:	23c8      	movs	r3, #200	@ 0xc8
 80124b6:	4617      	mov	r7, r2
 80124b8:	460c      	mov	r4, r1
 80124ba:	46a8      	mov	r8, r5
 80124bc:	6083      	str	r3, [r0, #8]
 80124be:	f240 1301 	movw	r3, #257	@ 0x101
 80124c2:	e9c0 5500 	strd	r5, r5, [r0]
 80124c6:	8183      	strh	r3, [r0, #12]
 80124c8:	3501      	adds	r5, #1
 80124ca:	4621      	mov	r1, r4
 80124cc:	4630      	mov	r0, r6
 80124ce:	f009 f815 	bl	801b4fc <put_memory>
 80124d2:	42af      	cmp	r7, r5
 80124d4:	60a4      	str	r4, [r4, #8]
 80124d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80124da:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80124de:	d1f3      	bne.n	80124c8 <rmw_uxrce_init_client_memory+0x20>
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <rmw_uxrce_init_publisher_memory>:
 80124e8:	b1e2      	cbz	r2, 8012524 <rmw_uxrce_init_publisher_memory+0x3c>
 80124ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ee:	7b05      	ldrb	r5, [r0, #12]
 80124f0:	4606      	mov	r6, r0
 80124f2:	b9ad      	cbnz	r5, 8012520 <rmw_uxrce_init_publisher_memory+0x38>
 80124f4:	23d8      	movs	r3, #216	@ 0xd8
 80124f6:	4617      	mov	r7, r2
 80124f8:	460c      	mov	r4, r1
 80124fa:	46a8      	mov	r8, r5
 80124fc:	6083      	str	r3, [r0, #8]
 80124fe:	f240 1301 	movw	r3, #257	@ 0x101
 8012502:	e9c0 5500 	strd	r5, r5, [r0]
 8012506:	8183      	strh	r3, [r0, #12]
 8012508:	3501      	adds	r5, #1
 801250a:	4621      	mov	r1, r4
 801250c:	4630      	mov	r0, r6
 801250e:	f008 fff5 	bl	801b4fc <put_memory>
 8012512:	42af      	cmp	r7, r5
 8012514:	60a4      	str	r4, [r4, #8]
 8012516:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801251a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801251e:	d1f3      	bne.n	8012508 <rmw_uxrce_init_publisher_memory+0x20>
 8012520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop

08012528 <rmw_uxrce_init_subscription_memory>:
 8012528:	b1e2      	cbz	r2, 8012564 <rmw_uxrce_init_subscription_memory+0x3c>
 801252a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801252e:	7b05      	ldrb	r5, [r0, #12]
 8012530:	4606      	mov	r6, r0
 8012532:	b9ad      	cbnz	r5, 8012560 <rmw_uxrce_init_subscription_memory+0x38>
 8012534:	23d8      	movs	r3, #216	@ 0xd8
 8012536:	4617      	mov	r7, r2
 8012538:	460c      	mov	r4, r1
 801253a:	46a8      	mov	r8, r5
 801253c:	6083      	str	r3, [r0, #8]
 801253e:	f240 1301 	movw	r3, #257	@ 0x101
 8012542:	e9c0 5500 	strd	r5, r5, [r0]
 8012546:	8183      	strh	r3, [r0, #12]
 8012548:	3501      	adds	r5, #1
 801254a:	4621      	mov	r1, r4
 801254c:	4630      	mov	r0, r6
 801254e:	f008 ffd5 	bl	801b4fc <put_memory>
 8012552:	42af      	cmp	r7, r5
 8012554:	60a4      	str	r4, [r4, #8]
 8012556:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801255a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801255e:	d1f3      	bne.n	8012548 <rmw_uxrce_init_subscription_memory+0x20>
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop

08012568 <rmw_uxrce_init_node_memory>:
 8012568:	b1e2      	cbz	r2, 80125a4 <rmw_uxrce_init_node_memory+0x3c>
 801256a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801256e:	7b05      	ldrb	r5, [r0, #12]
 8012570:	4606      	mov	r6, r0
 8012572:	b9ad      	cbnz	r5, 80125a0 <rmw_uxrce_init_node_memory+0x38>
 8012574:	23a4      	movs	r3, #164	@ 0xa4
 8012576:	4617      	mov	r7, r2
 8012578:	460c      	mov	r4, r1
 801257a:	46a8      	mov	r8, r5
 801257c:	6083      	str	r3, [r0, #8]
 801257e:	f240 1301 	movw	r3, #257	@ 0x101
 8012582:	e9c0 5500 	strd	r5, r5, [r0]
 8012586:	8183      	strh	r3, [r0, #12]
 8012588:	3501      	adds	r5, #1
 801258a:	4621      	mov	r1, r4
 801258c:	4630      	mov	r0, r6
 801258e:	f008 ffb5 	bl	801b4fc <put_memory>
 8012592:	42af      	cmp	r7, r5
 8012594:	60a4      	str	r4, [r4, #8]
 8012596:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801259a:	f804 8c98 	strb.w	r8, [r4, #-152]
 801259e:	d1f3      	bne.n	8012588 <rmw_uxrce_init_node_memory+0x20>
 80125a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop

080125a8 <rmw_uxrce_init_session_memory>:
 80125a8:	b1ea      	cbz	r2, 80125e6 <rmw_uxrce_init_session_memory+0x3e>
 80125aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125ae:	7b05      	ldrb	r5, [r0, #12]
 80125b0:	4606      	mov	r6, r0
 80125b2:	b9b5      	cbnz	r5, 80125e2 <rmw_uxrce_init_session_memory+0x3a>
 80125b4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80125b8:	f240 1301 	movw	r3, #257	@ 0x101
 80125bc:	4617      	mov	r7, r2
 80125be:	460c      	mov	r4, r1
 80125c0:	46a9      	mov	r9, r5
 80125c2:	f8c0 8008 	str.w	r8, [r0, #8]
 80125c6:	8183      	strh	r3, [r0, #12]
 80125c8:	e9c0 5500 	strd	r5, r5, [r0]
 80125cc:	3501      	adds	r5, #1
 80125ce:	4621      	mov	r1, r4
 80125d0:	4630      	mov	r0, r6
 80125d2:	f008 ff93 	bl	801b4fc <put_memory>
 80125d6:	42af      	cmp	r7, r5
 80125d8:	60a4      	str	r4, [r4, #8]
 80125da:	f884 900c 	strb.w	r9, [r4, #12]
 80125de:	4444      	add	r4, r8
 80125e0:	d1f4      	bne.n	80125cc <rmw_uxrce_init_session_memory+0x24>
 80125e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e6:	4770      	bx	lr

080125e8 <rmw_uxrce_init_topic_memory>:
 80125e8:	b1e2      	cbz	r2, 8012624 <rmw_uxrce_init_topic_memory+0x3c>
 80125ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	7b05      	ldrb	r5, [r0, #12]
 80125f0:	4606      	mov	r6, r0
 80125f2:	b9ad      	cbnz	r5, 8012620 <rmw_uxrce_init_topic_memory+0x38>
 80125f4:	231c      	movs	r3, #28
 80125f6:	4617      	mov	r7, r2
 80125f8:	460c      	mov	r4, r1
 80125fa:	46a8      	mov	r8, r5
 80125fc:	6083      	str	r3, [r0, #8]
 80125fe:	f240 1301 	movw	r3, #257	@ 0x101
 8012602:	e9c0 5500 	strd	r5, r5, [r0]
 8012606:	8183      	strh	r3, [r0, #12]
 8012608:	3501      	adds	r5, #1
 801260a:	4621      	mov	r1, r4
 801260c:	4630      	mov	r0, r6
 801260e:	f008 ff75 	bl	801b4fc <put_memory>
 8012612:	42af      	cmp	r7, r5
 8012614:	60a4      	str	r4, [r4, #8]
 8012616:	f104 041c 	add.w	r4, r4, #28
 801261a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801261e:	d1f3      	bne.n	8012608 <rmw_uxrce_init_topic_memory+0x20>
 8012620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop

08012628 <rmw_uxrce_init_static_input_buffer_memory>:
 8012628:	b1ea      	cbz	r2, 8012666 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262e:	7b05      	ldrb	r5, [r0, #12]
 8012630:	4606      	mov	r6, r0
 8012632:	b9b5      	cbnz	r5, 8012662 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8012634:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8012638:	4617      	mov	r7, r2
 801263a:	460c      	mov	r4, r1
 801263c:	46a8      	mov	r8, r5
 801263e:	6083      	str	r3, [r0, #8]
 8012640:	f240 1301 	movw	r3, #257	@ 0x101
 8012644:	e9c0 5500 	strd	r5, r5, [r0]
 8012648:	8183      	strh	r3, [r0, #12]
 801264a:	3501      	adds	r5, #1
 801264c:	4621      	mov	r1, r4
 801264e:	4630      	mov	r0, r6
 8012650:	f008 ff54 	bl	801b4fc <put_memory>
 8012654:	42af      	cmp	r7, r5
 8012656:	60a4      	str	r4, [r4, #8]
 8012658:	f884 800c 	strb.w	r8, [r4, #12]
 801265c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8012660:	d1f3      	bne.n	801264a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8012662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012666:	4770      	bx	lr

08012668 <rmw_uxrce_init_init_options_impl_memory>:
 8012668:	b1e2      	cbz	r2, 80126a4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801266a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266e:	7b05      	ldrb	r5, [r0, #12]
 8012670:	4606      	mov	r6, r0
 8012672:	b9ad      	cbnz	r5, 80126a0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8012674:	232c      	movs	r3, #44	@ 0x2c
 8012676:	4617      	mov	r7, r2
 8012678:	460c      	mov	r4, r1
 801267a:	46a8      	mov	r8, r5
 801267c:	6083      	str	r3, [r0, #8]
 801267e:	f240 1301 	movw	r3, #257	@ 0x101
 8012682:	e9c0 5500 	strd	r5, r5, [r0]
 8012686:	8183      	strh	r3, [r0, #12]
 8012688:	3501      	adds	r5, #1
 801268a:	4621      	mov	r1, r4
 801268c:	4630      	mov	r0, r6
 801268e:	f008 ff35 	bl	801b4fc <put_memory>
 8012692:	42af      	cmp	r7, r5
 8012694:	60a4      	str	r4, [r4, #8]
 8012696:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801269a:	f804 8c20 	strb.w	r8, [r4, #-32]
 801269e:	d1f3      	bne.n	8012688 <rmw_uxrce_init_init_options_impl_memory+0x20>
 80126a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop

080126a8 <rmw_uxrce_init_wait_set_memory>:
 80126a8:	b1e2      	cbz	r2, 80126e4 <rmw_uxrce_init_wait_set_memory+0x3c>
 80126aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ae:	7b05      	ldrb	r5, [r0, #12]
 80126b0:	4606      	mov	r6, r0
 80126b2:	b9ad      	cbnz	r5, 80126e0 <rmw_uxrce_init_wait_set_memory+0x38>
 80126b4:	231c      	movs	r3, #28
 80126b6:	4617      	mov	r7, r2
 80126b8:	460c      	mov	r4, r1
 80126ba:	46a8      	mov	r8, r5
 80126bc:	6083      	str	r3, [r0, #8]
 80126be:	f240 1301 	movw	r3, #257	@ 0x101
 80126c2:	e9c0 5500 	strd	r5, r5, [r0]
 80126c6:	8183      	strh	r3, [r0, #12]
 80126c8:	3501      	adds	r5, #1
 80126ca:	4621      	mov	r1, r4
 80126cc:	4630      	mov	r0, r6
 80126ce:	f008 ff15 	bl	801b4fc <put_memory>
 80126d2:	42af      	cmp	r7, r5
 80126d4:	60a4      	str	r4, [r4, #8]
 80126d6:	f104 041c 	add.w	r4, r4, #28
 80126da:	f804 8c10 	strb.w	r8, [r4, #-16]
 80126de:	d1f3      	bne.n	80126c8 <rmw_uxrce_init_wait_set_memory+0x20>
 80126e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop

080126e8 <rmw_uxrce_init_guard_condition_memory>:
 80126e8:	b1e2      	cbz	r2, 8012724 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80126ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	7b05      	ldrb	r5, [r0, #12]
 80126f0:	4606      	mov	r6, r0
 80126f2:	b9ad      	cbnz	r5, 8012720 <rmw_uxrce_init_guard_condition_memory+0x38>
 80126f4:	2320      	movs	r3, #32
 80126f6:	4617      	mov	r7, r2
 80126f8:	460c      	mov	r4, r1
 80126fa:	46a8      	mov	r8, r5
 80126fc:	6083      	str	r3, [r0, #8]
 80126fe:	f240 1301 	movw	r3, #257	@ 0x101
 8012702:	e9c0 5500 	strd	r5, r5, [r0]
 8012706:	8183      	strh	r3, [r0, #12]
 8012708:	3501      	adds	r5, #1
 801270a:	4621      	mov	r1, r4
 801270c:	4630      	mov	r0, r6
 801270e:	f008 fef5 	bl	801b4fc <put_memory>
 8012712:	42af      	cmp	r7, r5
 8012714:	60a4      	str	r4, [r4, #8]
 8012716:	f104 0420 	add.w	r4, r4, #32
 801271a:	f804 8c14 	strb.w	r8, [r4, #-20]
 801271e:	d1f3      	bne.n	8012708 <rmw_uxrce_init_guard_condition_memory+0x20>
 8012720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop

08012728 <rmw_uxrce_fini_session_memory>:
 8012728:	4601      	mov	r1, r0
 801272a:	4801      	ldr	r0, [pc, #4]	@ (8012730 <rmw_uxrce_fini_session_memory+0x8>)
 801272c:	f008 bee6 	b.w	801b4fc <put_memory>
 8012730:	24012f4c 	.word	0x24012f4c

08012734 <rmw_uxrce_fini_node_memory>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	4604      	mov	r4, r0
 8012738:	6800      	ldr	r0, [r0, #0]
 801273a:	b128      	cbz	r0, 8012748 <rmw_uxrce_fini_node_memory+0x14>
 801273c:	4b07      	ldr	r3, [pc, #28]	@ (801275c <rmw_uxrce_fini_node_memory+0x28>)
 801273e:	6819      	ldr	r1, [r3, #0]
 8012740:	f7ed fdce 	bl	80002e0 <strcmp>
 8012744:	b940      	cbnz	r0, 8012758 <rmw_uxrce_fini_node_memory+0x24>
 8012746:	6020      	str	r0, [r4, #0]
 8012748:	6861      	ldr	r1, [r4, #4]
 801274a:	b129      	cbz	r1, 8012758 <rmw_uxrce_fini_node_memory+0x24>
 801274c:	2500      	movs	r5, #0
 801274e:	4804      	ldr	r0, [pc, #16]	@ (8012760 <rmw_uxrce_fini_node_memory+0x2c>)
 8012750:	610d      	str	r5, [r1, #16]
 8012752:	f008 fed3 	bl	801b4fc <put_memory>
 8012756:	6065      	str	r5, [r4, #4]
 8012758:	bd38      	pop	{r3, r4, r5, pc}
 801275a:	bf00      	nop
 801275c:	0801fc14 	.word	0x0801fc14
 8012760:	24012f1c 	.word	0x24012f1c

08012764 <rmw_uxrce_fini_publisher_memory>:
 8012764:	b510      	push	{r4, lr}
 8012766:	4604      	mov	r4, r0
 8012768:	6800      	ldr	r0, [r0, #0]
 801276a:	b128      	cbz	r0, 8012778 <rmw_uxrce_fini_publisher_memory+0x14>
 801276c:	4b06      	ldr	r3, [pc, #24]	@ (8012788 <rmw_uxrce_fini_publisher_memory+0x24>)
 801276e:	6819      	ldr	r1, [r3, #0]
 8012770:	f7ed fdb6 	bl	80002e0 <strcmp>
 8012774:	b938      	cbnz	r0, 8012786 <rmw_uxrce_fini_publisher_memory+0x22>
 8012776:	6020      	str	r0, [r4, #0]
 8012778:	6861      	ldr	r1, [r4, #4]
 801277a:	b121      	cbz	r1, 8012786 <rmw_uxrce_fini_publisher_memory+0x22>
 801277c:	4803      	ldr	r0, [pc, #12]	@ (801278c <rmw_uxrce_fini_publisher_memory+0x28>)
 801277e:	f008 febd 	bl	801b4fc <put_memory>
 8012782:	2300      	movs	r3, #0
 8012784:	6063      	str	r3, [r4, #4]
 8012786:	bd10      	pop	{r4, pc}
 8012788:	0801fc14 	.word	0x0801fc14
 801278c:	24012f2c 	.word	0x24012f2c

08012790 <rmw_uxrce_fini_subscription_memory>:
 8012790:	b510      	push	{r4, lr}
 8012792:	4604      	mov	r4, r0
 8012794:	6800      	ldr	r0, [r0, #0]
 8012796:	b128      	cbz	r0, 80127a4 <rmw_uxrce_fini_subscription_memory+0x14>
 8012798:	4b06      	ldr	r3, [pc, #24]	@ (80127b4 <rmw_uxrce_fini_subscription_memory+0x24>)
 801279a:	6819      	ldr	r1, [r3, #0]
 801279c:	f7ed fda0 	bl	80002e0 <strcmp>
 80127a0:	b938      	cbnz	r0, 80127b2 <rmw_uxrce_fini_subscription_memory+0x22>
 80127a2:	6020      	str	r0, [r4, #0]
 80127a4:	6861      	ldr	r1, [r4, #4]
 80127a6:	b121      	cbz	r1, 80127b2 <rmw_uxrce_fini_subscription_memory+0x22>
 80127a8:	4803      	ldr	r0, [pc, #12]	@ (80127b8 <rmw_uxrce_fini_subscription_memory+0x28>)
 80127aa:	f008 fea7 	bl	801b4fc <put_memory>
 80127ae:	2300      	movs	r3, #0
 80127b0:	6063      	str	r3, [r4, #4]
 80127b2:	bd10      	pop	{r4, pc}
 80127b4:	0801fc14 	.word	0x0801fc14
 80127b8:	24012f6c 	.word	0x24012f6c

080127bc <rmw_uxrce_fini_service_memory>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	4604      	mov	r4, r0
 80127c0:	6800      	ldr	r0, [r0, #0]
 80127c2:	b128      	cbz	r0, 80127d0 <rmw_uxrce_fini_service_memory+0x14>
 80127c4:	4b06      	ldr	r3, [pc, #24]	@ (80127e0 <rmw_uxrce_fini_service_memory+0x24>)
 80127c6:	6819      	ldr	r1, [r3, #0]
 80127c8:	f7ed fd8a 	bl	80002e0 <strcmp>
 80127cc:	b938      	cbnz	r0, 80127de <rmw_uxrce_fini_service_memory+0x22>
 80127ce:	6020      	str	r0, [r4, #0]
 80127d0:	6861      	ldr	r1, [r4, #4]
 80127d2:	b121      	cbz	r1, 80127de <rmw_uxrce_fini_service_memory+0x22>
 80127d4:	4803      	ldr	r0, [pc, #12]	@ (80127e4 <rmw_uxrce_fini_service_memory+0x28>)
 80127d6:	f008 fe91 	bl	801b4fc <put_memory>
 80127da:	2300      	movs	r3, #0
 80127dc:	6063      	str	r3, [r4, #4]
 80127de:	bd10      	pop	{r4, pc}
 80127e0:	0801fc14 	.word	0x0801fc14
 80127e4:	24012f3c 	.word	0x24012f3c

080127e8 <rmw_uxrce_fini_client_memory>:
 80127e8:	b510      	push	{r4, lr}
 80127ea:	4604      	mov	r4, r0
 80127ec:	6800      	ldr	r0, [r0, #0]
 80127ee:	b128      	cbz	r0, 80127fc <rmw_uxrce_fini_client_memory+0x14>
 80127f0:	4b06      	ldr	r3, [pc, #24]	@ (801280c <rmw_uxrce_fini_client_memory+0x24>)
 80127f2:	6819      	ldr	r1, [r3, #0]
 80127f4:	f7ed fd74 	bl	80002e0 <strcmp>
 80127f8:	b938      	cbnz	r0, 801280a <rmw_uxrce_fini_client_memory+0x22>
 80127fa:	6020      	str	r0, [r4, #0]
 80127fc:	6861      	ldr	r1, [r4, #4]
 80127fe:	b121      	cbz	r1, 801280a <rmw_uxrce_fini_client_memory+0x22>
 8012800:	4803      	ldr	r0, [pc, #12]	@ (8012810 <rmw_uxrce_fini_client_memory+0x28>)
 8012802:	f008 fe7b 	bl	801b4fc <put_memory>
 8012806:	2300      	movs	r3, #0
 8012808:	6063      	str	r3, [r4, #4]
 801280a:	bd10      	pop	{r4, pc}
 801280c:	0801fc14 	.word	0x0801fc14
 8012810:	2400e64c 	.word	0x2400e64c

08012814 <rmw_uxrce_fini_topic_memory>:
 8012814:	b510      	push	{r4, lr}
 8012816:	4604      	mov	r4, r0
 8012818:	4803      	ldr	r0, [pc, #12]	@ (8012828 <rmw_uxrce_fini_topic_memory+0x14>)
 801281a:	4621      	mov	r1, r4
 801281c:	f008 fe6e 	bl	801b4fc <put_memory>
 8012820:	2300      	movs	r3, #0
 8012822:	61a3      	str	r3, [r4, #24]
 8012824:	bd10      	pop	{r4, pc}
 8012826:	bf00      	nop
 8012828:	24012f7c 	.word	0x24012f7c

0801282c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801282c:	b082      	sub	sp, #8
 801282e:	492b      	ldr	r1, [pc, #172]	@ (80128dc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8012830:	b530      	push	{r4, r5, lr}
 8012832:	680d      	ldr	r5, [r1, #0]
 8012834:	ac03      	add	r4, sp, #12
 8012836:	e884 000c 	stmia.w	r4, {r2, r3}
 801283a:	461c      	mov	r4, r3
 801283c:	2d00      	cmp	r5, #0
 801283e:	d04b      	beq.n	80128d8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8012840:	462b      	mov	r3, r5
 8012842:	2100      	movs	r1, #0
 8012844:	689a      	ldr	r2, [r3, #8]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801284c:	4290      	cmp	r0, r2
 801284e:	bf08      	it	eq
 8012850:	3101      	addeq	r1, #1
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1f6      	bne.n	8012844 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8012856:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801285a:	2b02      	cmp	r3, #2
 801285c:	d029      	beq.n	80128b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801285e:	d820      	bhi.n	80128a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8012860:	428c      	cmp	r4, r1
 8012862:	d828      	bhi.n	80128b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8012864:	fab4 f284 	clz	r2, r4
 8012868:	0952      	lsrs	r2, r2, #5
 801286a:	b324      	cbz	r4, 80128b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801286c:	b1dd      	cbz	r5, 80128a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801286e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012872:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8012876:	e001      	b.n	801287c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8012878:	686d      	ldr	r5, [r5, #4]
 801287a:	b1ad      	cbz	r5, 80128a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801287c:	68ab      	ldr	r3, [r5, #8]
 801287e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8012882:	4288      	cmp	r0, r1
 8012884:	d1f8      	bne.n	8012878 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8012886:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801288a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801288e:	4561      	cmp	r1, ip
 8012890:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012894:	eb73 0e04 	sbcs.w	lr, r3, r4
 8012898:	daee      	bge.n	8012878 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801289a:	468c      	mov	ip, r1
 801289c:	461c      	mov	r4, r3
 801289e:	462a      	mov	r2, r5
 80128a0:	e7ea      	b.n	8012878 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d0dc      	beq.n	8012860 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 80128a6:	2200      	movs	r2, #0
 80128a8:	4610      	mov	r0, r2
 80128aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128ae:	b002      	add	sp, #8
 80128b0:	4770      	bx	lr
 80128b2:	428c      	cmp	r4, r1
 80128b4:	d905      	bls.n	80128c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80128b6:	4809      	ldr	r0, [pc, #36]	@ (80128dc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80128b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128bc:	b002      	add	sp, #8
 80128be:	f008 be0d 	b.w	801b4dc <get_memory>
 80128c2:	fab4 f284 	clz	r2, r4
 80128c6:	0952      	lsrs	r2, r2, #5
 80128c8:	2c00      	cmp	r4, #0
 80128ca:	d1ed      	bne.n	80128a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80128cc:	4803      	ldr	r0, [pc, #12]	@ (80128dc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80128ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128d2:	b002      	add	sp, #8
 80128d4:	f008 be02 	b.w	801b4dc <get_memory>
 80128d8:	4629      	mov	r1, r5
 80128da:	e7bc      	b.n	8012856 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80128dc:	24012f5c 	.word	0x24012f5c

080128e0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80128e0:	4b12      	ldr	r3, [pc, #72]	@ (801292c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	b530      	push	{r4, r5, lr}
 80128e6:	b1f3      	cbz	r3, 8012926 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80128e8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80128ec:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80128f0:	2400      	movs	r4, #0
 80128f2:	e001      	b.n	80128f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	b1a3      	cbz	r3, 8012922 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80128f8:	689a      	ldr	r2, [r3, #8]
 80128fa:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80128fe:	4288      	cmp	r0, r1
 8012900:	d1f8      	bne.n	80128f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8012902:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8012906:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801290a:	4571      	cmp	r1, lr
 801290c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012910:	eb72 050c 	sbcs.w	r5, r2, ip
 8012914:	daee      	bge.n	80128f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8012916:	461c      	mov	r4, r3
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	468e      	mov	lr, r1
 801291c:	4694      	mov	ip, r2
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1ea      	bne.n	80128f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8012922:	4620      	mov	r0, r4
 8012924:	bd30      	pop	{r4, r5, pc}
 8012926:	461c      	mov	r4, r3
 8012928:	4620      	mov	r0, r4
 801292a:	bd30      	pop	{r4, r5, pc}
 801292c:	24012f5c 	.word	0x24012f5c

08012930 <rmw_uxrce_clean_expired_static_input_buffer>:
 8012930:	4b3d      	ldr	r3, [pc, #244]	@ (8012a28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012936:	681f      	ldr	r7, [r3, #0]
 8012938:	ed2d 8b06 	vpush	{d8-d10}
 801293c:	b08d      	sub	sp, #52	@ 0x34
 801293e:	f7ff fd73 	bl	8012428 <rmw_uros_epoch_nanos>
 8012942:	2f00      	cmp	r7, #0
 8012944:	d05d      	beq.n	8012a02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012946:	46b8      	mov	r8, r7
 8012948:	4681      	mov	r9, r0
 801294a:	468a      	mov	sl, r1
 801294c:	ac04      	add	r4, sp, #16
 801294e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012952:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012956:	2b04      	cmp	r3, #4
 8012958:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8012a10 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801295c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8012a18 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8012960:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8012a20 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8012964:	d03f      	beq.n	80129e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8012966:	2b05      	cmp	r3, #5
 8012968:	d044      	beq.n	80129f4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801296a:	2b03      	cmp	r3, #3
 801296c:	d03b      	beq.n	80129e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801296e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012972:	ed8d ab06 	vstr	d10, [sp, #24]
 8012976:	ab08      	add	r3, sp, #32
 8012978:	ed8d 8b08 	vstr	d8, [sp, #32]
 801297c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8012980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012982:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801298a:	f008 fae1 	bl	801af50 <rmw_time_equal>
 801298e:	b118      	cbz	r0, 8012998 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8012990:	ed8d 9b04 	vstr	d9, [sp, #16]
 8012994:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012998:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801299c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80129a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80129a4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80129a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80129ac:	f008 fb26 	bl	801affc <rmw_time_total_nsec>
 80129b0:	1830      	adds	r0, r6, r0
 80129b2:	eb47 0101 	adc.w	r1, r7, r1
 80129b6:	4548      	cmp	r0, r9
 80129b8:	eb71 030a 	sbcs.w	r3, r1, sl
 80129bc:	db05      	blt.n	80129ca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80129be:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80129c2:	4591      	cmp	r9, r2
 80129c4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80129c8:	da03      	bge.n	80129d2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80129ca:	4641      	mov	r1, r8
 80129cc:	4816      	ldr	r0, [pc, #88]	@ (8012a28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80129ce:	f008 fd95 	bl	801b4fc <put_memory>
 80129d2:	f1bb 0f00 	cmp.w	fp, #0
 80129d6:	d014      	beq.n	8012a02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80129d8:	46d8      	mov	r8, fp
 80129da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80129de:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80129e2:	2b04      	cmp	r3, #4
 80129e4:	d1bf      	bne.n	8012966 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80129e6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80129ea:	3340      	adds	r3, #64	@ 0x40
 80129ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80129f2:	e7c0      	b.n	8012976 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80129f4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80129f8:	3348      	adds	r3, #72	@ 0x48
 80129fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012a00:	e7b9      	b.n	8012976 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8012a02:	b00d      	add	sp, #52	@ 0x34
 8012a04:	ecbd 8b06 	vpop	{d8-d10}
 8012a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a0c:	f3af 8000 	nop.w
	...
 8012a18:	00000001 	.word	0x00000001
 8012a1c:	00000000 	.word	0x00000000
 8012a20:	0000001e 	.word	0x0000001e
 8012a24:	00000000 	.word	0x00000000
 8012a28:	24012f5c 	.word	0x24012f5c

08012a2c <run_xrce_session>:
 8012a2c:	b510      	push	{r4, lr}
 8012a2e:	788c      	ldrb	r4, [r1, #2]
 8012a30:	b086      	sub	sp, #24
 8012a32:	2c01      	cmp	r4, #1
 8012a34:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012a38:	d00c      	beq.n	8012a54 <run_xrce_session+0x28>
 8012a3a:	2401      	movs	r4, #1
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f10d 020e 	add.w	r2, sp, #14
 8012a42:	f10d 0317 	add.w	r3, sp, #23
 8012a46:	9400      	str	r4, [sp, #0]
 8012a48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a4c:	f002 fd70 	bl	8015530 <uxr_run_session_until_all_status>
 8012a50:	b006      	add	sp, #24
 8012a52:	bd10      	pop	{r4, pc}
 8012a54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a58:	f002 f98c 	bl	8014d74 <uxr_flash_output_streams>
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	b006      	add	sp, #24
 8012a60:	bd10      	pop	{r4, pc}
 8012a62:	bf00      	nop

08012a64 <convert_qos_profile>:
 8012a64:	7a4a      	ldrb	r2, [r1, #9]
 8012a66:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012a6a:	2a02      	cmp	r2, #2
 8012a6c:	bf18      	it	ne
 8012a6e:	2200      	movne	r2, #0
 8012a70:	7002      	strb	r2, [r0, #0]
 8012a72:	f1ac 0202 	sub.w	r2, ip, #2
 8012a76:	fab2 f282 	clz	r2, r2
 8012a7a:	0952      	lsrs	r2, r2, #5
 8012a7c:	7042      	strb	r2, [r0, #1]
 8012a7e:	780a      	ldrb	r2, [r1, #0]
 8012a80:	8889      	ldrh	r1, [r1, #4]
 8012a82:	f1a2 0202 	sub.w	r2, r2, #2
 8012a86:	8081      	strh	r1, [r0, #4]
 8012a88:	fab2 f282 	clz	r2, r2
 8012a8c:	0952      	lsrs	r2, r2, #5
 8012a8e:	7082      	strb	r2, [r0, #2]
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop

08012a94 <generate_type_name>:
 8012a94:	2300      	movs	r3, #0
 8012a96:	b530      	push	{r4, r5, lr}
 8012a98:	700b      	strb	r3, [r1, #0]
 8012a9a:	b087      	sub	sp, #28
 8012a9c:	6803      	ldr	r3, [r0, #0]
 8012a9e:	4614      	mov	r4, r2
 8012aa0:	b1bb      	cbz	r3, 8012ad2 <generate_type_name+0x3e>
 8012aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8012adc <generate_type_name+0x48>)
 8012aa4:	4615      	mov	r5, r2
 8012aa6:	9500      	str	r5, [sp, #0]
 8012aa8:	9203      	str	r2, [sp, #12]
 8012aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8012ae0 <generate_type_name+0x4c>)
 8012aac:	6842      	ldr	r2, [r0, #4]
 8012aae:	4608      	mov	r0, r1
 8012ab0:	490c      	ldr	r1, [pc, #48]	@ (8012ae4 <generate_type_name+0x50>)
 8012ab2:	9204      	str	r2, [sp, #16]
 8012ab4:	9105      	str	r1, [sp, #20]
 8012ab6:	9102      	str	r1, [sp, #8]
 8012ab8:	4621      	mov	r1, r4
 8012aba:	4a0b      	ldr	r2, [pc, #44]	@ (8012ae8 <generate_type_name+0x54>)
 8012abc:	9501      	str	r5, [sp, #4]
 8012abe:	f00b f9c5 	bl	801de4c <sniprintf>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	bfa8      	it	ge
 8012ac6:	4284      	cmpge	r4, r0
 8012ac8:	bfcc      	ite	gt
 8012aca:	2001      	movgt	r0, #1
 8012acc:	2000      	movle	r0, #0
 8012ace:	b007      	add	sp, #28
 8012ad0:	bd30      	pop	{r4, r5, pc}
 8012ad2:	4b06      	ldr	r3, [pc, #24]	@ (8012aec <generate_type_name+0x58>)
 8012ad4:	4a01      	ldr	r2, [pc, #4]	@ (8012adc <generate_type_name+0x48>)
 8012ad6:	461d      	mov	r5, r3
 8012ad8:	e7e5      	b.n	8012aa6 <generate_type_name+0x12>
 8012ada:	bf00      	nop
 8012adc:	0801f1e8 	.word	0x0801f1e8
 8012ae0:	0801f200 	.word	0x0801f200
 8012ae4:	0801f1fc 	.word	0x0801f1fc
 8012ae8:	0801f1ec 	.word	0x0801f1ec
 8012aec:	0801fd00 	.word	0x0801fd00

08012af0 <generate_topic_name>:
 8012af0:	b530      	push	{r4, r5, lr}
 8012af2:	4614      	mov	r4, r2
 8012af4:	b083      	sub	sp, #12
 8012af6:	4605      	mov	r5, r0
 8012af8:	4b07      	ldr	r3, [pc, #28]	@ (8012b18 <generate_topic_name+0x28>)
 8012afa:	4a08      	ldr	r2, [pc, #32]	@ (8012b1c <generate_topic_name+0x2c>)
 8012afc:	4608      	mov	r0, r1
 8012afe:	9500      	str	r5, [sp, #0]
 8012b00:	4621      	mov	r1, r4
 8012b02:	f00b f9a3 	bl	801de4c <sniprintf>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	bfa8      	it	ge
 8012b0a:	4284      	cmpge	r4, r0
 8012b0c:	bfcc      	ite	gt
 8012b0e:	2001      	movgt	r0, #1
 8012b10:	2000      	movle	r0, #0
 8012b12:	b003      	add	sp, #12
 8012b14:	bd30      	pop	{r4, r5, pc}
 8012b16:	bf00      	nop
 8012b18:	0801f20c 	.word	0x0801f20c
 8012b1c:	0801f204 	.word	0x0801f204

08012b20 <is_uxrce_rmw_identifier_valid>:
 8012b20:	b510      	push	{r4, lr}
 8012b22:	4604      	mov	r4, r0
 8012b24:	b140      	cbz	r0, 8012b38 <is_uxrce_rmw_identifier_valid+0x18>
 8012b26:	f008 fd41 	bl	801b5ac <rmw_get_implementation_identifier>
 8012b2a:	4601      	mov	r1, r0
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f7ed fbd7 	bl	80002e0 <strcmp>
 8012b32:	fab0 f080 	clz	r0, r0
 8012b36:	0940      	lsrs	r0, r0, #5
 8012b38:	bd10      	pop	{r4, pc}
 8012b3a:	bf00      	nop

08012b3c <get_message_typesupport_handle>:
 8012b3c:	6883      	ldr	r3, [r0, #8]
 8012b3e:	4718      	bx	r3

08012b40 <get_message_typesupport_handle_function>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	4604      	mov	r4, r0
 8012b44:	6800      	ldr	r0, [r0, #0]
 8012b46:	f7ed fbcb 	bl	80002e0 <strcmp>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	bf0c      	ite	eq
 8012b4e:	4620      	moveq	r0, r4
 8012b50:	2000      	movne	r0, #0
 8012b52:	bd10      	pop	{r4, pc}

08012b54 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8012b54:	4b04      	ldr	r3, [pc, #16]	@ (8012b68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8012b56:	681a      	ldr	r2, [r3, #0]
 8012b58:	b10a      	cbz	r2, 8012b5e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 8012b5a:	4803      	ldr	r0, [pc, #12]	@ (8012b68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8012b5c:	4770      	bx	lr
 8012b5e:	4a03      	ldr	r2, [pc, #12]	@ (8012b6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 8012b60:	4801      	ldr	r0, [pc, #4]	@ (8012b68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8012b62:	6812      	ldr	r2, [r2, #0]
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	4770      	bx	lr
 8012b68:	24000054 	.word	0x24000054
 8012b6c:	2400023c 	.word	0x2400023c

08012b70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8012b70:	4a02      	ldr	r2, [pc, #8]	@ (8012b7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 8012b72:	4b03      	ldr	r3, [pc, #12]	@ (8012b80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 8012b74:	6812      	ldr	r2, [r2, #0]
 8012b76:	601a      	str	r2, [r3, #0]
 8012b78:	4770      	bx	lr
 8012b7a:	bf00      	nop
 8012b7c:	2400023c 	.word	0x2400023c
 8012b80:	24000054 	.word	0x24000054

08012b84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 8012b84:	4b04      	ldr	r3, [pc, #16]	@ (8012b98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	b10a      	cbz	r2, 8012b8e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 8012b8a:	4803      	ldr	r0, [pc, #12]	@ (8012b98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012b8c:	4770      	bx	lr
 8012b8e:	4a03      	ldr	r2, [pc, #12]	@ (8012b9c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 8012b90:	4801      	ldr	r0, [pc, #4]	@ (8012b98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012b92:	6812      	ldr	r2, [r2, #0]
 8012b94:	601a      	str	r2, [r3, #0]
 8012b96:	4770      	bx	lr
 8012b98:	24000068 	.word	0x24000068
 8012b9c:	2400023c 	.word	0x2400023c

08012ba0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 8012ba0:	4a02      	ldr	r2, [pc, #8]	@ (8012bac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xc>)
 8012ba2:	4b03      	ldr	r3, [pc, #12]	@ (8012bb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x10>)
 8012ba4:	6812      	ldr	r2, [r2, #0]
 8012ba6:	601a      	str	r2, [r3, #0]
 8012ba8:	4770      	bx	lr
 8012baa:	bf00      	nop
 8012bac:	2400023c 	.word	0x2400023c
 8012bb0:	24000068 	.word	0x24000068

08012bb4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 8012bb4:	6840      	ldr	r0, [r0, #4]
 8012bb6:	4770      	bx	lr

08012bb8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8012bb8:	6800      	ldr	r0, [r0, #0]
 8012bba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012bbe:	4770      	bx	lr

08012bc0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8012bc0:	6803      	ldr	r3, [r0, #0]
 8012bc2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bca:	e9c2 0100 	strd	r0, r1, [r2]
 8012bce:	4770      	bx	lr

08012bd0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8012bd0:	6803      	ldr	r3, [r0, #0]
 8012bd2:	ed92 7b00 	vldr	d7, [r2]
 8012bd6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012bda:	ed81 7b00 	vstr	d7, [r1]
 8012bde:	4770      	bx	lr

08012be0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 8012be0:	f009 b8dc 	b.w	801bd9c <std_msgs__msg__Float64MultiArray__init>

08012be4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 8012be4:	f009 b8fe 	b.w	801bde4 <std_msgs__msg__Float64MultiArray__fini>

08012be8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 8012be8:	b510      	push	{r4, lr}
 8012bea:	4604      	mov	r4, r0
 8012bec:	b082      	sub	sp, #8
 8012bee:	9101      	str	r1, [sp, #4]
 8012bf0:	f009 f892 	bl	801bd18 <rosidl_runtime_c__double__Sequence__fini>
 8012bf4:	9901      	ldr	r1, [sp, #4]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	b002      	add	sp, #8
 8012bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfe:	f009 b873 	b.w	801bce8 <rosidl_runtime_c__double__Sequence__init>
 8012c02:	bf00      	nop

08012c04 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 8012c04:	6800      	ldr	r0, [r0, #0]
 8012c06:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012c0a:	4770      	bx	lr

08012c0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8012c0c:	b508      	push	{r3, lr}
 8012c0e:	f000 f857 	bl	8012cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8012c12:	4b06      	ldr	r3, [pc, #24]	@ (8012c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8012c14:	4906      	ldr	r1, [pc, #24]	@ (8012c30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	60c8      	str	r0, [r1, #12]
 8012c1a:	b10a      	cbz	r2, 8012c20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 8012c1c:	4803      	ldr	r0, [pc, #12]	@ (8012c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8012c1e:	bd08      	pop	{r3, pc}
 8012c20:	4a04      	ldr	r2, [pc, #16]	@ (8012c34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 8012c22:	4802      	ldr	r0, [pc, #8]	@ (8012c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8012c24:	6812      	ldr	r2, [r2, #0]
 8012c26:	601a      	str	r2, [r3, #0]
 8012c28:	bd08      	pop	{r3, pc}
 8012c2a:	bf00      	nop
 8012c2c:	240000ec 	.word	0x240000ec
 8012c30:	24000074 	.word	0x24000074
 8012c34:	24000240 	.word	0x24000240

08012c38 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8012c38:	6840      	ldr	r0, [r0, #4]
 8012c3a:	4770      	bx	lr

08012c3c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8012c3c:	6800      	ldr	r0, [r0, #0]
 8012c3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012c42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8012c46:	4770      	bx	lr

08012c48 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8012c48:	6803      	ldr	r3, [r0, #0]
 8012c4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012c4e:	4694      	mov	ip, r2
 8012c50:	b500      	push	{lr}
 8012c52:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8012c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c5e:	f8de 3000 	ldr.w	r3, [lr]
 8012c62:	f8cc 3000 	str.w	r3, [ip]
 8012c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c6a:	bf00      	nop

08012c6c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8012c6c:	6803      	ldr	r3, [r0, #0]
 8012c6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012c72:	b500      	push	{lr}
 8012c74:	4696      	mov	lr, r2
 8012c76:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8012c7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012c7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012c82:	f8de 3000 	ldr.w	r3, [lr]
 8012c86:	f8cc 3000 	str.w	r3, [ip]
 8012c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c8e:	bf00      	nop

08012c90 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8012c90:	f009 b93c 	b.w	801bf0c <std_msgs__msg__MultiArrayLayout__init>

08012c94 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8012c94:	f009 b94c 	b.w	801bf30 <std_msgs__msg__MultiArrayLayout__fini>

08012c98 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8012c98:	b510      	push	{r4, lr}
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	b082      	sub	sp, #8
 8012c9e:	9101      	str	r1, [sp, #4]
 8012ca0:	f009 f90c 	bl	801bebc <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8012ca4:	9901      	ldr	r1, [sp, #4]
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	b002      	add	sp, #8
 8012caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cae:	f009 b901 	b.w	801beb4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8012cb2:	bf00      	nop

08012cb4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8012cb4:	6800      	ldr	r0, [r0, #0]
 8012cb6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012cba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8012cbe:	4770      	bx	lr

08012cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8012cc0:	b508      	push	{r3, lr}
 8012cc2:	f009 f943 	bl	801bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8012cc6:	4b06      	ldr	r3, [pc, #24]	@ (8012ce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8012cc8:	4906      	ldr	r1, [pc, #24]	@ (8012ce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	60c8      	str	r0, [r1, #12]
 8012cce:	b10a      	cbz	r2, 8012cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8012cd0:	4803      	ldr	r0, [pc, #12]	@ (8012ce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8012cd2:	bd08      	pop	{r3, pc}
 8012cd4:	4a04      	ldr	r2, [pc, #16]	@ (8012ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 8012cd6:	4802      	ldr	r0, [pc, #8]	@ (8012ce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8012cd8:	6812      	ldr	r2, [r2, #0]
 8012cda:	601a      	str	r2, [r3, #0]
 8012cdc:	bd08      	pop	{r3, pc}
 8012cde:	bf00      	nop
 8012ce0:	24000170 	.word	0x24000170
 8012ce4:	240000f8 	.word	0x240000f8
 8012ce8:	24000240 	.word	0x24000240

08012cec <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_init_function>:
 8012cec:	f009 b924 	b.w	801bf38 <std_msgs__msg__UInt16__init>

08012cf0 <std_msgs__msg__UInt16__rosidl_typesupport_introspection_c__UInt16_fini_function>:
 8012cf0:	f009 b926 	b.w	801bf40 <std_msgs__msg__UInt16__fini>

08012cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 8012cf4:	4b04      	ldr	r3, [pc, #16]	@ (8012d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	b10a      	cbz	r2, 8012cfe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0xa>
 8012cfa:	4803      	ldr	r0, [pc, #12]	@ (8012d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012cfc:	4770      	bx	lr
 8012cfe:	4a03      	ldr	r2, [pc, #12]	@ (8012d0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x18>)
 8012d00:	4801      	ldr	r0, [pc, #4]	@ (8012d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x14>)
 8012d02:	6812      	ldr	r2, [r2, #0]
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	4770      	bx	lr
 8012d08:	240001b8 	.word	0x240001b8
 8012d0c:	24000240 	.word	0x24000240

08012d10 <_Float64MultiArray__max_serialized_size>:
 8012d10:	b500      	push	{lr}
 8012d12:	b083      	sub	sp, #12
 8012d14:	2301      	movs	r3, #1
 8012d16:	2100      	movs	r1, #0
 8012d18:	f10d 0007 	add.w	r0, sp, #7
 8012d1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012d20:	f000 f91c 	bl	8012f5c <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8012d24:	b003      	add	sp, #12
 8012d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d2a:	bf00      	nop

08012d2c <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	4604      	mov	r4, r0
 8012d30:	b160      	cbz	r0, 8012d4c <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 8012d32:	460d      	mov	r5, r1
 8012d34:	f000 f8b6 	bl	8012ea4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8012d38:	6966      	ldr	r6, [r4, #20]
 8012d3a:	2104      	movs	r1, #4
 8012d3c:	182c      	adds	r4, r5, r0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f001 fac6 	bl	80142d0 <ucdr_alignment>
 8012d44:	1d03      	adds	r3, r0, #4
 8012d46:	441c      	add	r4, r3
 8012d48:	b90e      	cbnz	r6, 8012d4e <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 8012d4a:	1b60      	subs	r0, r4, r5
 8012d4c:	bd70      	pop	{r4, r5, r6, pc}
 8012d4e:	4620      	mov	r0, r4
 8012d50:	2108      	movs	r1, #8
 8012d52:	f001 fabd 	bl	80142d0 <ucdr_alignment>
 8012d56:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012d5a:	181c      	adds	r4, r3, r0
 8012d5c:	1b60      	subs	r0, r4, r5
 8012d5e:	e7f5      	b.n	8012d4c <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08012d60 <_Float64MultiArray__cdr_deserialize>:
 8012d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d62:	460c      	mov	r4, r1
 8012d64:	b083      	sub	sp, #12
 8012d66:	b1d9      	cbz	r1, 8012da0 <_Float64MultiArray__cdr_deserialize+0x40>
 8012d68:	4606      	mov	r6, r0
 8012d6a:	f000 f901 	bl	8012f70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	4621      	mov	r1, r4
 8012d72:	4630      	mov	r0, r6
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	4798      	blx	r3
 8012d7a:	69a7      	ldr	r7, [r4, #24]
 8012d7c:	ab01      	add	r3, sp, #4
 8012d7e:	6921      	ldr	r1, [r4, #16]
 8012d80:	463a      	mov	r2, r7
 8012d82:	4630      	mov	r0, r6
 8012d84:	f001 fb7e 	bl	8014484 <ucdr_deserialize_sequence_double>
 8012d88:	9b01      	ldr	r3, [sp, #4]
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	b920      	cbnz	r0, 8012d98 <_Float64MultiArray__cdr_deserialize+0x38>
 8012d8e:	429f      	cmp	r7, r3
 8012d90:	d30a      	bcc.n	8012da8 <_Float64MultiArray__cdr_deserialize+0x48>
 8012d92:	4628      	mov	r0, r5
 8012d94:	b003      	add	sp, #12
 8012d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d98:	4628      	mov	r0, r5
 8012d9a:	6163      	str	r3, [r4, #20]
 8012d9c:	b003      	add	sp, #12
 8012d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da0:	460d      	mov	r5, r1
 8012da2:	4628      	mov	r0, r5
 8012da4:	b003      	add	sp, #12
 8012da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da8:	2301      	movs	r3, #1
 8012daa:	4630      	mov	r0, r6
 8012dac:	75b5      	strb	r5, [r6, #22]
 8012dae:	2108      	movs	r1, #8
 8012db0:	7573      	strb	r3, [r6, #21]
 8012db2:	6165      	str	r5, [r4, #20]
 8012db4:	f001 faa4 	bl	8014300 <ucdr_align_to>
 8012db8:	9901      	ldr	r1, [sp, #4]
 8012dba:	4630      	mov	r0, r6
 8012dbc:	00c9      	lsls	r1, r1, #3
 8012dbe:	f001 fad7 	bl	8014370 <ucdr_advance_buffer>
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	b003      	add	sp, #12
 8012dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012dc8 <_Float64MultiArray__cdr_serialize>:
 8012dc8:	b188      	cbz	r0, 8012dee <_Float64MultiArray__cdr_serialize+0x26>
 8012dca:	b538      	push	{r3, r4, r5, lr}
 8012dcc:	4604      	mov	r4, r0
 8012dce:	460d      	mov	r5, r1
 8012dd0:	f000 f8ce 	bl	8012f70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	4620      	mov	r0, r4
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	689b      	ldr	r3, [r3, #8]
 8012dde:	4798      	blx	r3
 8012de0:	4628      	mov	r0, r5
 8012de2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8012de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dea:	f001 bb39 	b.w	8014460 <ucdr_serialize_sequence_double>
 8012dee:	4770      	bx	lr

08012df0 <_Float64MultiArray__get_serialized_size>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4604      	mov	r4, r0
 8012df4:	b150      	cbz	r0, 8012e0c <_Float64MultiArray__get_serialized_size+0x1c>
 8012df6:	2100      	movs	r1, #0
 8012df8:	f000 f854 	bl	8012ea4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8012dfc:	6965      	ldr	r5, [r4, #20]
 8012dfe:	4604      	mov	r4, r0
 8012e00:	2104      	movs	r1, #4
 8012e02:	f001 fa65 	bl	80142d0 <ucdr_alignment>
 8012e06:	4404      	add	r4, r0
 8012e08:	3404      	adds	r4, #4
 8012e0a:	b90d      	cbnz	r5, 8012e10 <_Float64MultiArray__get_serialized_size+0x20>
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	4620      	mov	r0, r4
 8012e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012e16:	2108      	movs	r1, #8
 8012e18:	f001 fa5a 	bl	80142d0 <ucdr_alignment>
 8012e1c:	4404      	add	r4, r0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	bf00      	nop

08012e24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8012e24:	4800      	ldr	r0, [pc, #0]	@ (8012e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 8012e26:	4770      	bx	lr
 8012e28:	240001c4 	.word	0x240001c4

08012e2c <_MultiArrayLayout__max_serialized_size>:
 8012e2c:	2104      	movs	r1, #4
 8012e2e:	2000      	movs	r0, #0
 8012e30:	b508      	push	{r3, lr}
 8012e32:	f001 fa4d 	bl	80142d0 <ucdr_alignment>
 8012e36:	3004      	adds	r0, #4
 8012e38:	bd08      	pop	{r3, pc}
 8012e3a:	bf00      	nop

08012e3c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8012e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e40:	4689      	mov	r9, r1
 8012e42:	4607      	mov	r7, r0
 8012e44:	2104      	movs	r1, #4
 8012e46:	4648      	mov	r0, r9
 8012e48:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8012e4c:	f001 fa40 	bl	80142d0 <ucdr_alignment>
 8012e50:	f109 0304 	add.w	r3, r9, #4
 8012e54:	18c6      	adds	r6, r0, r3
 8012e56:	f1b8 0f00 	cmp.w	r8, #0
 8012e5a:	d018      	beq.n	8012e8e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8012e5c:	2500      	movs	r5, #0
 8012e5e:	f009 f913 	bl	801c088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8012e68:	6843      	ldr	r3, [r0, #4]
 8012e6a:	4631      	mov	r1, r6
 8012e6c:	3501      	adds	r5, #1
 8012e6e:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8012e72:	695b      	ldr	r3, [r3, #20]
 8012e74:	4798      	blx	r3
 8012e76:	4604      	mov	r4, r0
 8012e78:	4630      	mov	r0, r6
 8012e7a:	2c04      	cmp	r4, #4
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	bf28      	it	cs
 8012e80:	2104      	movcs	r1, #4
 8012e82:	f001 fa25 	bl	80142d0 <ucdr_alignment>
 8012e86:	45a8      	cmp	r8, r5
 8012e88:	4404      	add	r4, r0
 8012e8a:	4426      	add	r6, r4
 8012e8c:	d1e7      	bne.n	8012e5e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8012e8e:	f1c9 0904 	rsb	r9, r9, #4
 8012e92:	4630      	mov	r0, r6
 8012e94:	2104      	movs	r1, #4
 8012e96:	444e      	add	r6, r9
 8012e98:	f001 fa1a 	bl	80142d0 <ucdr_alignment>
 8012e9c:	4430      	add	r0, r6
 8012e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ea2:	bf00      	nop

08012ea4 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8012ea4:	b108      	cbz	r0, 8012eaa <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8012ea6:	f7ff bfc9 	b.w	8012e3c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8012eaa:	4770      	bx	lr

08012eac <_MultiArrayLayout__get_serialized_size>:
 8012eac:	b110      	cbz	r0, 8012eb4 <_MultiArrayLayout__get_serialized_size+0x8>
 8012eae:	2100      	movs	r1, #0
 8012eb0:	f7ff bfc4 	b.w	8012e3c <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8012eb4:	4770      	bx	lr
 8012eb6:	bf00      	nop

08012eb8 <_MultiArrayLayout__cdr_deserialize>:
 8012eb8:	b349      	cbz	r1, 8012f0e <_MultiArrayLayout__cdr_deserialize+0x56>
 8012eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ebc:	b083      	sub	sp, #12
 8012ebe:	460e      	mov	r6, r1
 8012ec0:	4607      	mov	r7, r0
 8012ec2:	a901      	add	r1, sp, #4
 8012ec4:	f000 fbfa 	bl	80136bc <ucdr_deserialize_uint32_t>
 8012ec8:	9b01      	ldr	r3, [sp, #4]
 8012eca:	68b2      	ldr	r2, [r6, #8]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d31b      	bcc.n	8012f08 <_MultiArrayLayout__cdr_deserialize+0x50>
 8012ed0:	6073      	str	r3, [r6, #4]
 8012ed2:	b18b      	cbz	r3, 8012ef8 <_MultiArrayLayout__cdr_deserialize+0x40>
 8012ed4:	2400      	movs	r4, #0
 8012ed6:	4625      	mov	r5, r4
 8012ed8:	e002      	b.n	8012ee0 <_MultiArrayLayout__cdr_deserialize+0x28>
 8012eda:	9b01      	ldr	r3, [sp, #4]
 8012edc:	429d      	cmp	r5, r3
 8012ede:	d20b      	bcs.n	8012ef8 <_MultiArrayLayout__cdr_deserialize+0x40>
 8012ee0:	f009 f8d2 	bl	801c088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8012ee4:	6831      	ldr	r1, [r6, #0]
 8012ee6:	6843      	ldr	r3, [r0, #4]
 8012ee8:	4638      	mov	r0, r7
 8012eea:	4421      	add	r1, r4
 8012eec:	3501      	adds	r5, #1
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	3414      	adds	r4, #20
 8012ef2:	4798      	blx	r3
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d1f0      	bne.n	8012eda <_MultiArrayLayout__cdr_deserialize+0x22>
 8012ef8:	f106 010c 	add.w	r1, r6, #12
 8012efc:	4638      	mov	r0, r7
 8012efe:	b003      	add	sp, #12
 8012f00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f04:	f000 bbda 	b.w	80136bc <ucdr_deserialize_uint32_t>
 8012f08:	2000      	movs	r0, #0
 8012f0a:	b003      	add	sp, #12
 8012f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f0e:	2000      	movs	r0, #0
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop

08012f14 <_MultiArrayLayout__cdr_serialize>:
 8012f14:	b308      	cbz	r0, 8012f5a <_MultiArrayLayout__cdr_serialize+0x46>
 8012f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f18:	6847      	ldr	r7, [r0, #4]
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	460e      	mov	r6, r1
 8012f1e:	4608      	mov	r0, r1
 8012f20:	4639      	mov	r1, r7
 8012f22:	f000 fa9b 	bl	801345c <ucdr_serialize_uint32_t>
 8012f26:	b190      	cbz	r0, 8012f4e <_MultiArrayLayout__cdr_serialize+0x3a>
 8012f28:	b18f      	cbz	r7, 8012f4e <_MultiArrayLayout__cdr_serialize+0x3a>
 8012f2a:	2400      	movs	r4, #0
 8012f2c:	e001      	b.n	8012f32 <_MultiArrayLayout__cdr_serialize+0x1e>
 8012f2e:	42a7      	cmp	r7, r4
 8012f30:	d00d      	beq.n	8012f4e <_MultiArrayLayout__cdr_serialize+0x3a>
 8012f32:	f009 f8a9 	bl	801c088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8012f36:	682a      	ldr	r2, [r5, #0]
 8012f38:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8012f3c:	6843      	ldr	r3, [r0, #4]
 8012f3e:	4631      	mov	r1, r6
 8012f40:	3401      	adds	r4, #1
 8012f42:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	4798      	blx	r3
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d1ef      	bne.n	8012f2e <_MultiArrayLayout__cdr_serialize+0x1a>
 8012f4e:	68e9      	ldr	r1, [r5, #12]
 8012f50:	4630      	mov	r0, r6
 8012f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f56:	f000 ba81 	b.w	801345c <ucdr_serialize_uint32_t>
 8012f5a:	4770      	bx	lr

08012f5c <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8012f5c:	b508      	push	{r3, lr}
 8012f5e:	2200      	movs	r2, #0
 8012f60:	4603      	mov	r3, r0
 8012f62:	4608      	mov	r0, r1
 8012f64:	2104      	movs	r1, #4
 8012f66:	701a      	strb	r2, [r3, #0]
 8012f68:	f001 f9b2 	bl	80142d0 <ucdr_alignment>
 8012f6c:	3004      	adds	r0, #4
 8012f6e:	bd08      	pop	{r3, pc}

08012f70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8012f70:	4800      	ldr	r0, [pc, #0]	@ (8012f74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8012f72:	4770      	bx	lr
 8012f74:	240001ec 	.word	0x240001ec

08012f78 <_UInt16__max_serialized_size>:
 8012f78:	2102      	movs	r1, #2
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	b508      	push	{r3, lr}
 8012f7e:	f001 f9a7 	bl	80142d0 <ucdr_alignment>
 8012f82:	3002      	adds	r0, #2
 8012f84:	bd08      	pop	{r3, pc}
 8012f86:	bf00      	nop

08012f88 <_UInt16__cdr_deserialize>:
 8012f88:	b109      	cbz	r1, 8012f8e <_UInt16__cdr_deserialize+0x6>
 8012f8a:	f000 b97d 	b.w	8013288 <ucdr_deserialize_uint16_t>
 8012f8e:	4608      	mov	r0, r1
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop

08012f94 <get_serialized_size_std_msgs__msg__UInt16>:
 8012f94:	b138      	cbz	r0, 8012fa6 <get_serialized_size_std_msgs__msg__UInt16+0x12>
 8012f96:	b508      	push	{r3, lr}
 8012f98:	460b      	mov	r3, r1
 8012f9a:	2102      	movs	r1, #2
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f001 f997 	bl	80142d0 <ucdr_alignment>
 8012fa2:	3002      	adds	r0, #2
 8012fa4:	bd08      	pop	{r3, pc}
 8012fa6:	4770      	bx	lr

08012fa8 <_UInt16__cdr_serialize>:
 8012fa8:	460a      	mov	r2, r1
 8012faa:	b118      	cbz	r0, 8012fb4 <_UInt16__cdr_serialize+0xc>
 8012fac:	8801      	ldrh	r1, [r0, #0]
 8012fae:	4610      	mov	r0, r2
 8012fb0:	f000 b86a 	b.w	8013088 <ucdr_serialize_uint16_t>
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop

08012fb8 <_UInt16__get_serialized_size>:
 8012fb8:	b130      	cbz	r0, 8012fc8 <_UInt16__get_serialized_size+0x10>
 8012fba:	2102      	movs	r1, #2
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	b508      	push	{r3, lr}
 8012fc0:	f001 f986 	bl	80142d0 <ucdr_alignment>
 8012fc4:	3002      	adds	r0, #2
 8012fc6:	bd08      	pop	{r3, pc}
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop

08012fcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16>:
 8012fcc:	4800      	ldr	r0, [pc, #0]	@ (8012fd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16+0x4>)
 8012fce:	4770      	bx	lr
 8012fd0:	24000214 	.word	0x24000214

08012fd4 <ucdr_serialize_bool>:
 8012fd4:	b538      	push	{r3, r4, r5, lr}
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	2101      	movs	r1, #1
 8012fda:	4604      	mov	r4, r0
 8012fdc:	f001 f92c 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8012fe0:	b148      	cbz	r0, 8012ff6 <ucdr_serialize_bool+0x22>
 8012fe2:	68a3      	ldr	r3, [r4, #8]
 8012fe4:	2101      	movs	r1, #1
 8012fe6:	701d      	strb	r5, [r3, #0]
 8012fe8:	68a2      	ldr	r2, [r4, #8]
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	440a      	add	r2, r1
 8012fee:	7561      	strb	r1, [r4, #21]
 8012ff0:	440b      	add	r3, r1
 8012ff2:	60a2      	str	r2, [r4, #8]
 8012ff4:	6123      	str	r3, [r4, #16]
 8012ff6:	7da0      	ldrb	r0, [r4, #22]
 8012ff8:	f080 0001 	eor.w	r0, r0, #1
 8012ffc:	bd38      	pop	{r3, r4, r5, pc}
 8012ffe:	bf00      	nop

08013000 <ucdr_deserialize_bool>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	460d      	mov	r5, r1
 8013004:	2101      	movs	r1, #1
 8013006:	4604      	mov	r4, r0
 8013008:	f001 f916 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801300c:	b160      	cbz	r0, 8013028 <ucdr_deserialize_bool+0x28>
 801300e:	68a2      	ldr	r2, [r4, #8]
 8013010:	2101      	movs	r1, #1
 8013012:	6923      	ldr	r3, [r4, #16]
 8013014:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013018:	440b      	add	r3, r1
 801301a:	3800      	subs	r0, #0
 801301c:	bf18      	it	ne
 801301e:	2001      	movne	r0, #1
 8013020:	7028      	strb	r0, [r5, #0]
 8013022:	60a2      	str	r2, [r4, #8]
 8013024:	6123      	str	r3, [r4, #16]
 8013026:	7561      	strb	r1, [r4, #21]
 8013028:	7da0      	ldrb	r0, [r4, #22]
 801302a:	f080 0001 	eor.w	r0, r0, #1
 801302e:	bd38      	pop	{r3, r4, r5, pc}

08013030 <ucdr_serialize_uint8_t>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	460d      	mov	r5, r1
 8013034:	2101      	movs	r1, #1
 8013036:	4604      	mov	r4, r0
 8013038:	f001 f8fe 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801303c:	b148      	cbz	r0, 8013052 <ucdr_serialize_uint8_t+0x22>
 801303e:	68a3      	ldr	r3, [r4, #8]
 8013040:	2101      	movs	r1, #1
 8013042:	701d      	strb	r5, [r3, #0]
 8013044:	68a2      	ldr	r2, [r4, #8]
 8013046:	6923      	ldr	r3, [r4, #16]
 8013048:	440a      	add	r2, r1
 801304a:	7561      	strb	r1, [r4, #21]
 801304c:	440b      	add	r3, r1
 801304e:	60a2      	str	r2, [r4, #8]
 8013050:	6123      	str	r3, [r4, #16]
 8013052:	7da0      	ldrb	r0, [r4, #22]
 8013054:	f080 0001 	eor.w	r0, r0, #1
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop

0801305c <ucdr_deserialize_uint8_t>:
 801305c:	b538      	push	{r3, r4, r5, lr}
 801305e:	460d      	mov	r5, r1
 8013060:	2101      	movs	r1, #1
 8013062:	4604      	mov	r4, r0
 8013064:	f001 f8e8 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013068:	b150      	cbz	r0, 8013080 <ucdr_deserialize_uint8_t+0x24>
 801306a:	68a3      	ldr	r3, [r4, #8]
 801306c:	2101      	movs	r1, #1
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	702b      	strb	r3, [r5, #0]
 8013072:	68a2      	ldr	r2, [r4, #8]
 8013074:	6923      	ldr	r3, [r4, #16]
 8013076:	440a      	add	r2, r1
 8013078:	7561      	strb	r1, [r4, #21]
 801307a:	440b      	add	r3, r1
 801307c:	60a2      	str	r2, [r4, #8]
 801307e:	6123      	str	r3, [r4, #16]
 8013080:	7da0      	ldrb	r0, [r4, #22]
 8013082:	f080 0001 	eor.w	r0, r0, #1
 8013086:	bd38      	pop	{r3, r4, r5, pc}

08013088 <ucdr_serialize_uint16_t>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	460b      	mov	r3, r1
 801308e:	b082      	sub	sp, #8
 8013090:	4604      	mov	r4, r0
 8013092:	2102      	movs	r1, #2
 8013094:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013098:	f001 f922 	bl	80142e0 <ucdr_buffer_alignment>
 801309c:	4601      	mov	r1, r0
 801309e:	4620      	mov	r0, r4
 80130a0:	7d67      	ldrb	r7, [r4, #21]
 80130a2:	f001 f965 	bl	8014370 <ucdr_advance_buffer>
 80130a6:	2102      	movs	r1, #2
 80130a8:	4620      	mov	r0, r4
 80130aa:	f001 f8b9 	bl	8014220 <ucdr_check_buffer_available_for>
 80130ae:	bb78      	cbnz	r0, 8013110 <ucdr_serialize_uint16_t+0x88>
 80130b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80130b4:	42ab      	cmp	r3, r5
 80130b6:	d926      	bls.n	8013106 <ucdr_serialize_uint16_t+0x7e>
 80130b8:	1b5e      	subs	r6, r3, r5
 80130ba:	60a3      	str	r3, [r4, #8]
 80130bc:	6923      	ldr	r3, [r4, #16]
 80130be:	4620      	mov	r0, r4
 80130c0:	f1c6 0802 	rsb	r8, r6, #2
 80130c4:	4433      	add	r3, r6
 80130c6:	4641      	mov	r1, r8
 80130c8:	6123      	str	r3, [r4, #16]
 80130ca:	f001 f8b5 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d03b      	beq.n	801314a <ucdr_serialize_uint16_t+0xc2>
 80130d2:	7d23      	ldrb	r3, [r4, #20]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d04a      	beq.n	801316e <ucdr_serialize_uint16_t+0xe6>
 80130d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80130dc:	702b      	strb	r3, [r5, #0]
 80130de:	2e00      	cmp	r6, #0
 80130e0:	d040      	beq.n	8013164 <ucdr_serialize_uint16_t+0xdc>
 80130e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80130e6:	706b      	strb	r3, [r5, #1]
 80130e8:	6923      	ldr	r3, [r4, #16]
 80130ea:	2102      	movs	r1, #2
 80130ec:	68a2      	ldr	r2, [r4, #8]
 80130ee:	3302      	adds	r3, #2
 80130f0:	7da0      	ldrb	r0, [r4, #22]
 80130f2:	4442      	add	r2, r8
 80130f4:	7561      	strb	r1, [r4, #21]
 80130f6:	1b9e      	subs	r6, r3, r6
 80130f8:	f080 0001 	eor.w	r0, r0, #1
 80130fc:	60a2      	str	r2, [r4, #8]
 80130fe:	6126      	str	r6, [r4, #16]
 8013100:	b002      	add	sp, #8
 8013102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013106:	2102      	movs	r1, #2
 8013108:	4620      	mov	r0, r4
 801310a:	f001 f895 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801310e:	b190      	cbz	r0, 8013136 <ucdr_serialize_uint16_t+0xae>
 8013110:	7d23      	ldrb	r3, [r4, #20]
 8013112:	2b01      	cmp	r3, #1
 8013114:	68a3      	ldr	r3, [r4, #8]
 8013116:	d014      	beq.n	8013142 <ucdr_serialize_uint16_t+0xba>
 8013118:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801311c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013120:	7019      	strb	r1, [r3, #0]
 8013122:	68a3      	ldr	r3, [r4, #8]
 8013124:	705a      	strb	r2, [r3, #1]
 8013126:	2102      	movs	r1, #2
 8013128:	68a2      	ldr	r2, [r4, #8]
 801312a:	6923      	ldr	r3, [r4, #16]
 801312c:	440a      	add	r2, r1
 801312e:	7561      	strb	r1, [r4, #21]
 8013130:	440b      	add	r3, r1
 8013132:	60a2      	str	r2, [r4, #8]
 8013134:	6123      	str	r3, [r4, #16]
 8013136:	7da0      	ldrb	r0, [r4, #22]
 8013138:	f080 0001 	eor.w	r0, r0, #1
 801313c:	b002      	add	sp, #8
 801313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013142:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013146:	801a      	strh	r2, [r3, #0]
 8013148:	e7ed      	b.n	8013126 <ucdr_serialize_uint16_t+0x9e>
 801314a:	68a2      	ldr	r2, [r4, #8]
 801314c:	6923      	ldr	r3, [r4, #16]
 801314e:	7da0      	ldrb	r0, [r4, #22]
 8013150:	1b92      	subs	r2, r2, r6
 8013152:	1b9b      	subs	r3, r3, r6
 8013154:	7567      	strb	r7, [r4, #21]
 8013156:	f080 0001 	eor.w	r0, r0, #1
 801315a:	60a2      	str	r2, [r4, #8]
 801315c:	6123      	str	r3, [r4, #16]
 801315e:	b002      	add	sp, #8
 8013160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013164:	68a3      	ldr	r3, [r4, #8]
 8013166:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801316a:	701a      	strb	r2, [r3, #0]
 801316c:	e7bc      	b.n	80130e8 <ucdr_serialize_uint16_t+0x60>
 801316e:	4628      	mov	r0, r5
 8013170:	f10d 0506 	add.w	r5, sp, #6
 8013174:	4632      	mov	r2, r6
 8013176:	4629      	mov	r1, r5
 8013178:	f00b f89f 	bl	801e2ba <memcpy>
 801317c:	4642      	mov	r2, r8
 801317e:	19a9      	adds	r1, r5, r6
 8013180:	68a0      	ldr	r0, [r4, #8]
 8013182:	f00b f89a 	bl	801e2ba <memcpy>
 8013186:	e7af      	b.n	80130e8 <ucdr_serialize_uint16_t+0x60>

08013188 <ucdr_serialize_endian_uint16_t>:
 8013188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801318c:	4604      	mov	r4, r0
 801318e:	b083      	sub	sp, #12
 8013190:	460d      	mov	r5, r1
 8013192:	2102      	movs	r1, #2
 8013194:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013198:	f001 f8a2 	bl	80142e0 <ucdr_buffer_alignment>
 801319c:	4601      	mov	r1, r0
 801319e:	4620      	mov	r0, r4
 80131a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80131a4:	f001 f8e4 	bl	8014370 <ucdr_advance_buffer>
 80131a8:	2102      	movs	r1, #2
 80131aa:	4620      	mov	r0, r4
 80131ac:	f001 f838 	bl	8014220 <ucdr_check_buffer_available_for>
 80131b0:	bb70      	cbnz	r0, 8013210 <ucdr_serialize_endian_uint16_t+0x88>
 80131b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80131b6:	42be      	cmp	r6, r7
 80131b8:	d925      	bls.n	8013206 <ucdr_serialize_endian_uint16_t+0x7e>
 80131ba:	6923      	ldr	r3, [r4, #16]
 80131bc:	4620      	mov	r0, r4
 80131be:	60a6      	str	r6, [r4, #8]
 80131c0:	1bf6      	subs	r6, r6, r7
 80131c2:	4433      	add	r3, r6
 80131c4:	f1c6 0902 	rsb	r9, r6, #2
 80131c8:	6123      	str	r3, [r4, #16]
 80131ca:	4649      	mov	r1, r9
 80131cc:	f001 f834 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d039      	beq.n	8013248 <ucdr_serialize_endian_uint16_t+0xc0>
 80131d4:	2d01      	cmp	r5, #1
 80131d6:	d04a      	beq.n	801326e <ucdr_serialize_endian_uint16_t+0xe6>
 80131d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80131dc:	703b      	strb	r3, [r7, #0]
 80131de:	2e00      	cmp	r6, #0
 80131e0:	d040      	beq.n	8013264 <ucdr_serialize_endian_uint16_t+0xdc>
 80131e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80131e6:	707b      	strb	r3, [r7, #1]
 80131e8:	6923      	ldr	r3, [r4, #16]
 80131ea:	2102      	movs	r1, #2
 80131ec:	68a2      	ldr	r2, [r4, #8]
 80131ee:	7da0      	ldrb	r0, [r4, #22]
 80131f0:	3302      	adds	r3, #2
 80131f2:	444a      	add	r2, r9
 80131f4:	7561      	strb	r1, [r4, #21]
 80131f6:	1b9b      	subs	r3, r3, r6
 80131f8:	f080 0001 	eor.w	r0, r0, #1
 80131fc:	60a2      	str	r2, [r4, #8]
 80131fe:	6123      	str	r3, [r4, #16]
 8013200:	b003      	add	sp, #12
 8013202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013206:	2102      	movs	r1, #2
 8013208:	4620      	mov	r0, r4
 801320a:	f001 f815 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801320e:	b188      	cbz	r0, 8013234 <ucdr_serialize_endian_uint16_t+0xac>
 8013210:	2d01      	cmp	r5, #1
 8013212:	68a3      	ldr	r3, [r4, #8]
 8013214:	d014      	beq.n	8013240 <ucdr_serialize_endian_uint16_t+0xb8>
 8013216:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801321a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801321e:	7019      	strb	r1, [r3, #0]
 8013220:	68a3      	ldr	r3, [r4, #8]
 8013222:	705a      	strb	r2, [r3, #1]
 8013224:	2102      	movs	r1, #2
 8013226:	68a2      	ldr	r2, [r4, #8]
 8013228:	6923      	ldr	r3, [r4, #16]
 801322a:	440a      	add	r2, r1
 801322c:	7561      	strb	r1, [r4, #21]
 801322e:	440b      	add	r3, r1
 8013230:	60a2      	str	r2, [r4, #8]
 8013232:	6123      	str	r3, [r4, #16]
 8013234:	7da0      	ldrb	r0, [r4, #22]
 8013236:	f080 0001 	eor.w	r0, r0, #1
 801323a:	b003      	add	sp, #12
 801323c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013240:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013244:	801a      	strh	r2, [r3, #0]
 8013246:	e7ed      	b.n	8013224 <ucdr_serialize_endian_uint16_t+0x9c>
 8013248:	68a2      	ldr	r2, [r4, #8]
 801324a:	6923      	ldr	r3, [r4, #16]
 801324c:	7da0      	ldrb	r0, [r4, #22]
 801324e:	1b92      	subs	r2, r2, r6
 8013250:	1b9b      	subs	r3, r3, r6
 8013252:	f884 8015 	strb.w	r8, [r4, #21]
 8013256:	f080 0001 	eor.w	r0, r0, #1
 801325a:	60a2      	str	r2, [r4, #8]
 801325c:	6123      	str	r3, [r4, #16]
 801325e:	b003      	add	sp, #12
 8013260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013264:	68a3      	ldr	r3, [r4, #8]
 8013266:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801326a:	701a      	strb	r2, [r3, #0]
 801326c:	e7bc      	b.n	80131e8 <ucdr_serialize_endian_uint16_t+0x60>
 801326e:	f10d 0506 	add.w	r5, sp, #6
 8013272:	4632      	mov	r2, r6
 8013274:	4638      	mov	r0, r7
 8013276:	4629      	mov	r1, r5
 8013278:	f00b f81f 	bl	801e2ba <memcpy>
 801327c:	464a      	mov	r2, r9
 801327e:	19a9      	adds	r1, r5, r6
 8013280:	68a0      	ldr	r0, [r4, #8]
 8013282:	f00b f81a 	bl	801e2ba <memcpy>
 8013286:	e7af      	b.n	80131e8 <ucdr_serialize_endian_uint16_t+0x60>

08013288 <ucdr_deserialize_uint16_t>:
 8013288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801328c:	4604      	mov	r4, r0
 801328e:	460d      	mov	r5, r1
 8013290:	2102      	movs	r1, #2
 8013292:	f001 f825 	bl	80142e0 <ucdr_buffer_alignment>
 8013296:	4601      	mov	r1, r0
 8013298:	4620      	mov	r0, r4
 801329a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801329e:	f001 f867 	bl	8014370 <ucdr_advance_buffer>
 80132a2:	2102      	movs	r1, #2
 80132a4:	4620      	mov	r0, r4
 80132a6:	f000 ffbb 	bl	8014220 <ucdr_check_buffer_available_for>
 80132aa:	bb60      	cbnz	r0, 8013306 <ucdr_deserialize_uint16_t+0x7e>
 80132ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80132b0:	42be      	cmp	r6, r7
 80132b2:	d923      	bls.n	80132fc <ucdr_deserialize_uint16_t+0x74>
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	4620      	mov	r0, r4
 80132b8:	60a6      	str	r6, [r4, #8]
 80132ba:	1bf6      	subs	r6, r6, r7
 80132bc:	4433      	add	r3, r6
 80132be:	f1c6 0902 	rsb	r9, r6, #2
 80132c2:	6123      	str	r3, [r4, #16]
 80132c4:	4649      	mov	r1, r9
 80132c6:	f000 ffb7 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d034      	beq.n	8013338 <ucdr_deserialize_uint16_t+0xb0>
 80132ce:	7d23      	ldrb	r3, [r4, #20]
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d042      	beq.n	801335a <ucdr_deserialize_uint16_t+0xd2>
 80132d4:	787b      	ldrb	r3, [r7, #1]
 80132d6:	702b      	strb	r3, [r5, #0]
 80132d8:	2e00      	cmp	r6, #0
 80132da:	d03a      	beq.n	8013352 <ucdr_deserialize_uint16_t+0xca>
 80132dc:	783b      	ldrb	r3, [r7, #0]
 80132de:	706b      	strb	r3, [r5, #1]
 80132e0:	6923      	ldr	r3, [r4, #16]
 80132e2:	2102      	movs	r1, #2
 80132e4:	68a2      	ldr	r2, [r4, #8]
 80132e6:	3302      	adds	r3, #2
 80132e8:	7da0      	ldrb	r0, [r4, #22]
 80132ea:	444a      	add	r2, r9
 80132ec:	7561      	strb	r1, [r4, #21]
 80132ee:	1b9b      	subs	r3, r3, r6
 80132f0:	f080 0001 	eor.w	r0, r0, #1
 80132f4:	60a2      	str	r2, [r4, #8]
 80132f6:	6123      	str	r3, [r4, #16]
 80132f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132fc:	2102      	movs	r1, #2
 80132fe:	4620      	mov	r0, r4
 8013300:	f000 ff9a 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013304:	b180      	cbz	r0, 8013328 <ucdr_deserialize_uint16_t+0xa0>
 8013306:	7d23      	ldrb	r3, [r4, #20]
 8013308:	2b01      	cmp	r3, #1
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	d011      	beq.n	8013332 <ucdr_deserialize_uint16_t+0xaa>
 801330e:	785b      	ldrb	r3, [r3, #1]
 8013310:	702b      	strb	r3, [r5, #0]
 8013312:	68a3      	ldr	r3, [r4, #8]
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	706b      	strb	r3, [r5, #1]
 8013318:	2102      	movs	r1, #2
 801331a:	68a2      	ldr	r2, [r4, #8]
 801331c:	6923      	ldr	r3, [r4, #16]
 801331e:	440a      	add	r2, r1
 8013320:	7561      	strb	r1, [r4, #21]
 8013322:	440b      	add	r3, r1
 8013324:	60a2      	str	r2, [r4, #8]
 8013326:	6123      	str	r3, [r4, #16]
 8013328:	7da0      	ldrb	r0, [r4, #22]
 801332a:	f080 0001 	eor.w	r0, r0, #1
 801332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013332:	881b      	ldrh	r3, [r3, #0]
 8013334:	802b      	strh	r3, [r5, #0]
 8013336:	e7ef      	b.n	8013318 <ucdr_deserialize_uint16_t+0x90>
 8013338:	68a2      	ldr	r2, [r4, #8]
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	1b92      	subs	r2, r2, r6
 801333e:	7da0      	ldrb	r0, [r4, #22]
 8013340:	1b9b      	subs	r3, r3, r6
 8013342:	f884 8015 	strb.w	r8, [r4, #21]
 8013346:	f080 0001 	eor.w	r0, r0, #1
 801334a:	60a2      	str	r2, [r4, #8]
 801334c:	6123      	str	r3, [r4, #16]
 801334e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013352:	68a3      	ldr	r3, [r4, #8]
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	706b      	strb	r3, [r5, #1]
 8013358:	e7c2      	b.n	80132e0 <ucdr_deserialize_uint16_t+0x58>
 801335a:	4639      	mov	r1, r7
 801335c:	4632      	mov	r2, r6
 801335e:	4628      	mov	r0, r5
 8013360:	f00a ffab 	bl	801e2ba <memcpy>
 8013364:	464a      	mov	r2, r9
 8013366:	19a8      	adds	r0, r5, r6
 8013368:	68a1      	ldr	r1, [r4, #8]
 801336a:	f00a ffa6 	bl	801e2ba <memcpy>
 801336e:	e7b7      	b.n	80132e0 <ucdr_deserialize_uint16_t+0x58>

08013370 <ucdr_deserialize_endian_uint16_t>:
 8013370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013374:	4604      	mov	r4, r0
 8013376:	460e      	mov	r6, r1
 8013378:	2102      	movs	r1, #2
 801337a:	4615      	mov	r5, r2
 801337c:	f000 ffb0 	bl	80142e0 <ucdr_buffer_alignment>
 8013380:	4601      	mov	r1, r0
 8013382:	4620      	mov	r0, r4
 8013384:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013388:	f000 fff2 	bl	8014370 <ucdr_advance_buffer>
 801338c:	2102      	movs	r1, #2
 801338e:	4620      	mov	r0, r4
 8013390:	f000 ff46 	bl	8014220 <ucdr_check_buffer_available_for>
 8013394:	bb70      	cbnz	r0, 80133f4 <ucdr_deserialize_endian_uint16_t+0x84>
 8013396:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801339a:	454f      	cmp	r7, r9
 801339c:	d925      	bls.n	80133ea <ucdr_deserialize_endian_uint16_t+0x7a>
 801339e:	6923      	ldr	r3, [r4, #16]
 80133a0:	4620      	mov	r0, r4
 80133a2:	60a7      	str	r7, [r4, #8]
 80133a4:	eba7 0709 	sub.w	r7, r7, r9
 80133a8:	443b      	add	r3, r7
 80133aa:	f1c7 0a02 	rsb	sl, r7, #2
 80133ae:	6123      	str	r3, [r4, #16]
 80133b0:	4651      	mov	r1, sl
 80133b2:	f000 ff41 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d034      	beq.n	8013424 <ucdr_deserialize_endian_uint16_t+0xb4>
 80133ba:	2e01      	cmp	r6, #1
 80133bc:	d043      	beq.n	8013446 <ucdr_deserialize_endian_uint16_t+0xd6>
 80133be:	f899 3001 	ldrb.w	r3, [r9, #1]
 80133c2:	702b      	strb	r3, [r5, #0]
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	d03a      	beq.n	801343e <ucdr_deserialize_endian_uint16_t+0xce>
 80133c8:	f899 3000 	ldrb.w	r3, [r9]
 80133cc:	706b      	strb	r3, [r5, #1]
 80133ce:	6923      	ldr	r3, [r4, #16]
 80133d0:	2102      	movs	r1, #2
 80133d2:	68a2      	ldr	r2, [r4, #8]
 80133d4:	3302      	adds	r3, #2
 80133d6:	7da0      	ldrb	r0, [r4, #22]
 80133d8:	4452      	add	r2, sl
 80133da:	7561      	strb	r1, [r4, #21]
 80133dc:	1bdb      	subs	r3, r3, r7
 80133de:	f080 0001 	eor.w	r0, r0, #1
 80133e2:	60a2      	str	r2, [r4, #8]
 80133e4:	6123      	str	r3, [r4, #16]
 80133e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ea:	2102      	movs	r1, #2
 80133ec:	4620      	mov	r0, r4
 80133ee:	f000 ff23 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80133f2:	b178      	cbz	r0, 8013414 <ucdr_deserialize_endian_uint16_t+0xa4>
 80133f4:	2e01      	cmp	r6, #1
 80133f6:	68a3      	ldr	r3, [r4, #8]
 80133f8:	d011      	beq.n	801341e <ucdr_deserialize_endian_uint16_t+0xae>
 80133fa:	785b      	ldrb	r3, [r3, #1]
 80133fc:	702b      	strb	r3, [r5, #0]
 80133fe:	68a3      	ldr	r3, [r4, #8]
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	706b      	strb	r3, [r5, #1]
 8013404:	2102      	movs	r1, #2
 8013406:	68a2      	ldr	r2, [r4, #8]
 8013408:	6923      	ldr	r3, [r4, #16]
 801340a:	440a      	add	r2, r1
 801340c:	7561      	strb	r1, [r4, #21]
 801340e:	440b      	add	r3, r1
 8013410:	60a2      	str	r2, [r4, #8]
 8013412:	6123      	str	r3, [r4, #16]
 8013414:	7da0      	ldrb	r0, [r4, #22]
 8013416:	f080 0001 	eor.w	r0, r0, #1
 801341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	802b      	strh	r3, [r5, #0]
 8013422:	e7ef      	b.n	8013404 <ucdr_deserialize_endian_uint16_t+0x94>
 8013424:	68a2      	ldr	r2, [r4, #8]
 8013426:	6923      	ldr	r3, [r4, #16]
 8013428:	1bd2      	subs	r2, r2, r7
 801342a:	7da0      	ldrb	r0, [r4, #22]
 801342c:	1bdb      	subs	r3, r3, r7
 801342e:	f884 8015 	strb.w	r8, [r4, #21]
 8013432:	f080 0001 	eor.w	r0, r0, #1
 8013436:	60a2      	str	r2, [r4, #8]
 8013438:	6123      	str	r3, [r4, #16]
 801343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343e:	68a3      	ldr	r3, [r4, #8]
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	706b      	strb	r3, [r5, #1]
 8013444:	e7c3      	b.n	80133ce <ucdr_deserialize_endian_uint16_t+0x5e>
 8013446:	4649      	mov	r1, r9
 8013448:	463a      	mov	r2, r7
 801344a:	4628      	mov	r0, r5
 801344c:	f00a ff35 	bl	801e2ba <memcpy>
 8013450:	4652      	mov	r2, sl
 8013452:	19e8      	adds	r0, r5, r7
 8013454:	68a1      	ldr	r1, [r4, #8]
 8013456:	f00a ff30 	bl	801e2ba <memcpy>
 801345a:	e7b8      	b.n	80133ce <ucdr_deserialize_endian_uint16_t+0x5e>

0801345c <ucdr_serialize_uint32_t>:
 801345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	4604      	mov	r4, r0
 8013464:	9101      	str	r1, [sp, #4]
 8013466:	2104      	movs	r1, #4
 8013468:	f000 ff3a 	bl	80142e0 <ucdr_buffer_alignment>
 801346c:	4601      	mov	r1, r0
 801346e:	4620      	mov	r0, r4
 8013470:	7d67      	ldrb	r7, [r4, #21]
 8013472:	f000 ff7d 	bl	8014370 <ucdr_advance_buffer>
 8013476:	2104      	movs	r1, #4
 8013478:	4620      	mov	r0, r4
 801347a:	f000 fed1 	bl	8014220 <ucdr_check_buffer_available_for>
 801347e:	2800      	cmp	r0, #0
 8013480:	d139      	bne.n	80134f6 <ucdr_serialize_uint32_t+0x9a>
 8013482:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013486:	42ab      	cmp	r3, r5
 8013488:	d930      	bls.n	80134ec <ucdr_serialize_uint32_t+0x90>
 801348a:	1b5e      	subs	r6, r3, r5
 801348c:	60a3      	str	r3, [r4, #8]
 801348e:	6923      	ldr	r3, [r4, #16]
 8013490:	4620      	mov	r0, r4
 8013492:	f1c6 0804 	rsb	r8, r6, #4
 8013496:	4433      	add	r3, r6
 8013498:	4641      	mov	r1, r8
 801349a:	6123      	str	r3, [r4, #16]
 801349c:	f000 fecc 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d04c      	beq.n	801353e <ucdr_serialize_uint32_t+0xe2>
 80134a4:	7d23      	ldrb	r3, [r4, #20]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d063      	beq.n	8013572 <ucdr_serialize_uint32_t+0x116>
 80134aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134ae:	702b      	strb	r3, [r5, #0]
 80134b0:	2e00      	cmp	r6, #0
 80134b2:	d051      	beq.n	8013558 <ucdr_serialize_uint32_t+0xfc>
 80134b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134b8:	2e01      	cmp	r6, #1
 80134ba:	706b      	strb	r3, [r5, #1]
 80134bc:	d050      	beq.n	8013560 <ucdr_serialize_uint32_t+0x104>
 80134be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80134c2:	2e02      	cmp	r6, #2
 80134c4:	70ab      	strb	r3, [r5, #2]
 80134c6:	d04f      	beq.n	8013568 <ucdr_serialize_uint32_t+0x10c>
 80134c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80134cc:	70eb      	strb	r3, [r5, #3]
 80134ce:	6923      	ldr	r3, [r4, #16]
 80134d0:	2104      	movs	r1, #4
 80134d2:	68a2      	ldr	r2, [r4, #8]
 80134d4:	3304      	adds	r3, #4
 80134d6:	7da0      	ldrb	r0, [r4, #22]
 80134d8:	4442      	add	r2, r8
 80134da:	7561      	strb	r1, [r4, #21]
 80134dc:	1b9e      	subs	r6, r3, r6
 80134de:	f080 0001 	eor.w	r0, r0, #1
 80134e2:	60a2      	str	r2, [r4, #8]
 80134e4:	6126      	str	r6, [r4, #16]
 80134e6:	b002      	add	sp, #8
 80134e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ec:	2104      	movs	r1, #4
 80134ee:	4620      	mov	r0, r4
 80134f0:	f000 fea2 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80134f4:	b1d0      	cbz	r0, 801352c <ucdr_serialize_uint32_t+0xd0>
 80134f6:	7d23      	ldrb	r3, [r4, #20]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	68a3      	ldr	r3, [r4, #8]
 80134fc:	d01c      	beq.n	8013538 <ucdr_serialize_uint32_t+0xdc>
 80134fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013502:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013506:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801350a:	7018      	strb	r0, [r3, #0]
 801350c:	68a3      	ldr	r3, [r4, #8]
 801350e:	705a      	strb	r2, [r3, #1]
 8013510:	68a3      	ldr	r3, [r4, #8]
 8013512:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013516:	7099      	strb	r1, [r3, #2]
 8013518:	68a3      	ldr	r3, [r4, #8]
 801351a:	70da      	strb	r2, [r3, #3]
 801351c:	2104      	movs	r1, #4
 801351e:	68a2      	ldr	r2, [r4, #8]
 8013520:	6923      	ldr	r3, [r4, #16]
 8013522:	440a      	add	r2, r1
 8013524:	7561      	strb	r1, [r4, #21]
 8013526:	440b      	add	r3, r1
 8013528:	60a2      	str	r2, [r4, #8]
 801352a:	6123      	str	r3, [r4, #16]
 801352c:	7da0      	ldrb	r0, [r4, #22]
 801352e:	f080 0001 	eor.w	r0, r0, #1
 8013532:	b002      	add	sp, #8
 8013534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013538:	9a01      	ldr	r2, [sp, #4]
 801353a:	601a      	str	r2, [r3, #0]
 801353c:	e7ee      	b.n	801351c <ucdr_serialize_uint32_t+0xc0>
 801353e:	68a2      	ldr	r2, [r4, #8]
 8013540:	6923      	ldr	r3, [r4, #16]
 8013542:	7da0      	ldrb	r0, [r4, #22]
 8013544:	1b92      	subs	r2, r2, r6
 8013546:	1b9b      	subs	r3, r3, r6
 8013548:	7567      	strb	r7, [r4, #21]
 801354a:	f080 0001 	eor.w	r0, r0, #1
 801354e:	60a2      	str	r2, [r4, #8]
 8013550:	6123      	str	r3, [r4, #16]
 8013552:	b002      	add	sp, #8
 8013554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801355e:	701a      	strb	r2, [r3, #0]
 8013560:	68a3      	ldr	r3, [r4, #8]
 8013562:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013566:	701a      	strb	r2, [r3, #0]
 8013568:	68a3      	ldr	r3, [r4, #8]
 801356a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801356e:	701a      	strb	r2, [r3, #0]
 8013570:	e7ad      	b.n	80134ce <ucdr_serialize_uint32_t+0x72>
 8013572:	4628      	mov	r0, r5
 8013574:	ad01      	add	r5, sp, #4
 8013576:	4632      	mov	r2, r6
 8013578:	4629      	mov	r1, r5
 801357a:	f00a fe9e 	bl	801e2ba <memcpy>
 801357e:	4642      	mov	r2, r8
 8013580:	19a9      	adds	r1, r5, r6
 8013582:	68a0      	ldr	r0, [r4, #8]
 8013584:	f00a fe99 	bl	801e2ba <memcpy>
 8013588:	e7a1      	b.n	80134ce <ucdr_serialize_uint32_t+0x72>
 801358a:	bf00      	nop

0801358c <ucdr_serialize_endian_uint32_t>:
 801358c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	b083      	sub	sp, #12
 8013594:	460d      	mov	r5, r1
 8013596:	2104      	movs	r1, #4
 8013598:	9201      	str	r2, [sp, #4]
 801359a:	f000 fea1 	bl	80142e0 <ucdr_buffer_alignment>
 801359e:	4601      	mov	r1, r0
 80135a0:	4620      	mov	r0, r4
 80135a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80135a6:	f000 fee3 	bl	8014370 <ucdr_advance_buffer>
 80135aa:	2104      	movs	r1, #4
 80135ac:	4620      	mov	r0, r4
 80135ae:	f000 fe37 	bl	8014220 <ucdr_check_buffer_available_for>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d138      	bne.n	8013628 <ucdr_serialize_endian_uint32_t+0x9c>
 80135b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80135ba:	42b7      	cmp	r7, r6
 80135bc:	d92f      	bls.n	801361e <ucdr_serialize_endian_uint32_t+0x92>
 80135be:	6923      	ldr	r3, [r4, #16]
 80135c0:	4620      	mov	r0, r4
 80135c2:	60a7      	str	r7, [r4, #8]
 80135c4:	1bbf      	subs	r7, r7, r6
 80135c6:	443b      	add	r3, r7
 80135c8:	f1c7 0904 	rsb	r9, r7, #4
 80135cc:	6123      	str	r3, [r4, #16]
 80135ce:	4649      	mov	r1, r9
 80135d0:	f000 fe32 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d04a      	beq.n	801366e <ucdr_serialize_endian_uint32_t+0xe2>
 80135d8:	2d01      	cmp	r5, #1
 80135da:	d063      	beq.n	80136a4 <ucdr_serialize_endian_uint32_t+0x118>
 80135dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80135e0:	7033      	strb	r3, [r6, #0]
 80135e2:	2f00      	cmp	r7, #0
 80135e4:	d051      	beq.n	801368a <ucdr_serialize_endian_uint32_t+0xfe>
 80135e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80135ea:	2f01      	cmp	r7, #1
 80135ec:	7073      	strb	r3, [r6, #1]
 80135ee:	d050      	beq.n	8013692 <ucdr_serialize_endian_uint32_t+0x106>
 80135f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135f4:	2f02      	cmp	r7, #2
 80135f6:	70b3      	strb	r3, [r6, #2]
 80135f8:	d04f      	beq.n	801369a <ucdr_serialize_endian_uint32_t+0x10e>
 80135fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135fe:	70f3      	strb	r3, [r6, #3]
 8013600:	6923      	ldr	r3, [r4, #16]
 8013602:	2104      	movs	r1, #4
 8013604:	68a2      	ldr	r2, [r4, #8]
 8013606:	7da0      	ldrb	r0, [r4, #22]
 8013608:	3304      	adds	r3, #4
 801360a:	444a      	add	r2, r9
 801360c:	7561      	strb	r1, [r4, #21]
 801360e:	1bdb      	subs	r3, r3, r7
 8013610:	f080 0001 	eor.w	r0, r0, #1
 8013614:	60a2      	str	r2, [r4, #8]
 8013616:	6123      	str	r3, [r4, #16]
 8013618:	b003      	add	sp, #12
 801361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801361e:	2104      	movs	r1, #4
 8013620:	4620      	mov	r0, r4
 8013622:	f000 fe09 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013626:	b1c8      	cbz	r0, 801365c <ucdr_serialize_endian_uint32_t+0xd0>
 8013628:	2d01      	cmp	r5, #1
 801362a:	68a3      	ldr	r3, [r4, #8]
 801362c:	d01c      	beq.n	8013668 <ucdr_serialize_endian_uint32_t+0xdc>
 801362e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013632:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013636:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801363a:	7018      	strb	r0, [r3, #0]
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	705a      	strb	r2, [r3, #1]
 8013640:	68a3      	ldr	r3, [r4, #8]
 8013642:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013646:	7099      	strb	r1, [r3, #2]
 8013648:	68a3      	ldr	r3, [r4, #8]
 801364a:	70da      	strb	r2, [r3, #3]
 801364c:	2104      	movs	r1, #4
 801364e:	68a2      	ldr	r2, [r4, #8]
 8013650:	6923      	ldr	r3, [r4, #16]
 8013652:	440a      	add	r2, r1
 8013654:	7561      	strb	r1, [r4, #21]
 8013656:	440b      	add	r3, r1
 8013658:	60a2      	str	r2, [r4, #8]
 801365a:	6123      	str	r3, [r4, #16]
 801365c:	7da0      	ldrb	r0, [r4, #22]
 801365e:	f080 0001 	eor.w	r0, r0, #1
 8013662:	b003      	add	sp, #12
 8013664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013668:	9a01      	ldr	r2, [sp, #4]
 801366a:	601a      	str	r2, [r3, #0]
 801366c:	e7ee      	b.n	801364c <ucdr_serialize_endian_uint32_t+0xc0>
 801366e:	68a2      	ldr	r2, [r4, #8]
 8013670:	6923      	ldr	r3, [r4, #16]
 8013672:	7da0      	ldrb	r0, [r4, #22]
 8013674:	1bd2      	subs	r2, r2, r7
 8013676:	1bdb      	subs	r3, r3, r7
 8013678:	f884 8015 	strb.w	r8, [r4, #21]
 801367c:	f080 0001 	eor.w	r0, r0, #1
 8013680:	60a2      	str	r2, [r4, #8]
 8013682:	6123      	str	r3, [r4, #16]
 8013684:	b003      	add	sp, #12
 8013686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801368a:	68a3      	ldr	r3, [r4, #8]
 801368c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013690:	701a      	strb	r2, [r3, #0]
 8013692:	68a3      	ldr	r3, [r4, #8]
 8013694:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013698:	701a      	strb	r2, [r3, #0]
 801369a:	68a3      	ldr	r3, [r4, #8]
 801369c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136a0:	701a      	strb	r2, [r3, #0]
 80136a2:	e7ad      	b.n	8013600 <ucdr_serialize_endian_uint32_t+0x74>
 80136a4:	ad01      	add	r5, sp, #4
 80136a6:	463a      	mov	r2, r7
 80136a8:	4630      	mov	r0, r6
 80136aa:	4629      	mov	r1, r5
 80136ac:	f00a fe05 	bl	801e2ba <memcpy>
 80136b0:	464a      	mov	r2, r9
 80136b2:	19e9      	adds	r1, r5, r7
 80136b4:	68a0      	ldr	r0, [r4, #8]
 80136b6:	f00a fe00 	bl	801e2ba <memcpy>
 80136ba:	e7a1      	b.n	8013600 <ucdr_serialize_endian_uint32_t+0x74>

080136bc <ucdr_deserialize_uint32_t>:
 80136bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c0:	4604      	mov	r4, r0
 80136c2:	460d      	mov	r5, r1
 80136c4:	2104      	movs	r1, #4
 80136c6:	f000 fe0b 	bl	80142e0 <ucdr_buffer_alignment>
 80136ca:	4601      	mov	r1, r0
 80136cc:	4620      	mov	r0, r4
 80136ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80136d2:	f000 fe4d 	bl	8014370 <ucdr_advance_buffer>
 80136d6:	2104      	movs	r1, #4
 80136d8:	4620      	mov	r0, r4
 80136da:	f000 fda1 	bl	8014220 <ucdr_check_buffer_available_for>
 80136de:	2800      	cmp	r0, #0
 80136e0:	d138      	bne.n	8013754 <ucdr_deserialize_uint32_t+0x98>
 80136e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80136e6:	42b7      	cmp	r7, r6
 80136e8:	d92f      	bls.n	801374a <ucdr_deserialize_uint32_t+0x8e>
 80136ea:	6923      	ldr	r3, [r4, #16]
 80136ec:	4620      	mov	r0, r4
 80136ee:	60a7      	str	r7, [r4, #8]
 80136f0:	1bbf      	subs	r7, r7, r6
 80136f2:	443b      	add	r3, r7
 80136f4:	f1c7 0904 	rsb	r9, r7, #4
 80136f8:	6123      	str	r3, [r4, #16]
 80136fa:	4649      	mov	r1, r9
 80136fc:	f000 fd9c 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013700:	2800      	cmp	r0, #0
 8013702:	d046      	beq.n	8013792 <ucdr_deserialize_uint32_t+0xd6>
 8013704:	7d23      	ldrb	r3, [r4, #20]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d05c      	beq.n	80137c4 <ucdr_deserialize_uint32_t+0x108>
 801370a:	78f3      	ldrb	r3, [r6, #3]
 801370c:	702b      	strb	r3, [r5, #0]
 801370e:	2f00      	cmp	r7, #0
 8013710:	d04c      	beq.n	80137ac <ucdr_deserialize_uint32_t+0xf0>
 8013712:	78b3      	ldrb	r3, [r6, #2]
 8013714:	2f01      	cmp	r7, #1
 8013716:	706b      	strb	r3, [r5, #1]
 8013718:	f105 0302 	add.w	r3, r5, #2
 801371c:	d04a      	beq.n	80137b4 <ucdr_deserialize_uint32_t+0xf8>
 801371e:	7873      	ldrb	r3, [r6, #1]
 8013720:	2f02      	cmp	r7, #2
 8013722:	70ab      	strb	r3, [r5, #2]
 8013724:	f105 0303 	add.w	r3, r5, #3
 8013728:	d048      	beq.n	80137bc <ucdr_deserialize_uint32_t+0x100>
 801372a:	7833      	ldrb	r3, [r6, #0]
 801372c:	70eb      	strb	r3, [r5, #3]
 801372e:	6923      	ldr	r3, [r4, #16]
 8013730:	2104      	movs	r1, #4
 8013732:	68a2      	ldr	r2, [r4, #8]
 8013734:	3304      	adds	r3, #4
 8013736:	7da0      	ldrb	r0, [r4, #22]
 8013738:	444a      	add	r2, r9
 801373a:	7561      	strb	r1, [r4, #21]
 801373c:	1bdb      	subs	r3, r3, r7
 801373e:	f080 0001 	eor.w	r0, r0, #1
 8013742:	60a2      	str	r2, [r4, #8]
 8013744:	6123      	str	r3, [r4, #16]
 8013746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801374a:	2104      	movs	r1, #4
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fd73 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013752:	b1b0      	cbz	r0, 8013782 <ucdr_deserialize_uint32_t+0xc6>
 8013754:	7d23      	ldrb	r3, [r4, #20]
 8013756:	2b01      	cmp	r3, #1
 8013758:	68a3      	ldr	r3, [r4, #8]
 801375a:	d017      	beq.n	801378c <ucdr_deserialize_uint32_t+0xd0>
 801375c:	78db      	ldrb	r3, [r3, #3]
 801375e:	702b      	strb	r3, [r5, #0]
 8013760:	68a3      	ldr	r3, [r4, #8]
 8013762:	789b      	ldrb	r3, [r3, #2]
 8013764:	706b      	strb	r3, [r5, #1]
 8013766:	68a3      	ldr	r3, [r4, #8]
 8013768:	785b      	ldrb	r3, [r3, #1]
 801376a:	70ab      	strb	r3, [r5, #2]
 801376c:	68a3      	ldr	r3, [r4, #8]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	70eb      	strb	r3, [r5, #3]
 8013772:	2104      	movs	r1, #4
 8013774:	68a2      	ldr	r2, [r4, #8]
 8013776:	6923      	ldr	r3, [r4, #16]
 8013778:	440a      	add	r2, r1
 801377a:	7561      	strb	r1, [r4, #21]
 801377c:	440b      	add	r3, r1
 801377e:	60a2      	str	r2, [r4, #8]
 8013780:	6123      	str	r3, [r4, #16]
 8013782:	7da0      	ldrb	r0, [r4, #22]
 8013784:	f080 0001 	eor.w	r0, r0, #1
 8013788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	602b      	str	r3, [r5, #0]
 8013790:	e7ef      	b.n	8013772 <ucdr_deserialize_uint32_t+0xb6>
 8013792:	68a2      	ldr	r2, [r4, #8]
 8013794:	6923      	ldr	r3, [r4, #16]
 8013796:	1bd2      	subs	r2, r2, r7
 8013798:	7da0      	ldrb	r0, [r4, #22]
 801379a:	1bdb      	subs	r3, r3, r7
 801379c:	f884 8015 	strb.w	r8, [r4, #21]
 80137a0:	f080 0001 	eor.w	r0, r0, #1
 80137a4:	60a2      	str	r2, [r4, #8]
 80137a6:	6123      	str	r3, [r4, #16]
 80137a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ac:	68a3      	ldr	r3, [r4, #8]
 80137ae:	789b      	ldrb	r3, [r3, #2]
 80137b0:	706b      	strb	r3, [r5, #1]
 80137b2:	1cab      	adds	r3, r5, #2
 80137b4:	68a2      	ldr	r2, [r4, #8]
 80137b6:	7852      	ldrb	r2, [r2, #1]
 80137b8:	f803 2b01 	strb.w	r2, [r3], #1
 80137bc:	68a2      	ldr	r2, [r4, #8]
 80137be:	7812      	ldrb	r2, [r2, #0]
 80137c0:	701a      	strb	r2, [r3, #0]
 80137c2:	e7b4      	b.n	801372e <ucdr_deserialize_uint32_t+0x72>
 80137c4:	4631      	mov	r1, r6
 80137c6:	463a      	mov	r2, r7
 80137c8:	4628      	mov	r0, r5
 80137ca:	f00a fd76 	bl	801e2ba <memcpy>
 80137ce:	464a      	mov	r2, r9
 80137d0:	19e8      	adds	r0, r5, r7
 80137d2:	68a1      	ldr	r1, [r4, #8]
 80137d4:	f00a fd71 	bl	801e2ba <memcpy>
 80137d8:	e7a9      	b.n	801372e <ucdr_deserialize_uint32_t+0x72>
 80137da:	bf00      	nop

080137dc <ucdr_deserialize_endian_uint32_t>:
 80137dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e0:	4604      	mov	r4, r0
 80137e2:	460e      	mov	r6, r1
 80137e4:	2104      	movs	r1, #4
 80137e6:	4615      	mov	r5, r2
 80137e8:	f000 fd7a 	bl	80142e0 <ucdr_buffer_alignment>
 80137ec:	4601      	mov	r1, r0
 80137ee:	4620      	mov	r0, r4
 80137f0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80137f4:	f000 fdbc 	bl	8014370 <ucdr_advance_buffer>
 80137f8:	2104      	movs	r1, #4
 80137fa:	4620      	mov	r0, r4
 80137fc:	f000 fd10 	bl	8014220 <ucdr_check_buffer_available_for>
 8013800:	2800      	cmp	r0, #0
 8013802:	d13c      	bne.n	801387e <ucdr_deserialize_endian_uint32_t+0xa2>
 8013804:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013808:	42bb      	cmp	r3, r7
 801380a:	d933      	bls.n	8013874 <ucdr_deserialize_endian_uint32_t+0x98>
 801380c:	eba3 0907 	sub.w	r9, r3, r7
 8013810:	60a3      	str	r3, [r4, #8]
 8013812:	6923      	ldr	r3, [r4, #16]
 8013814:	4620      	mov	r0, r4
 8013816:	f1c9 0a04 	rsb	sl, r9, #4
 801381a:	444b      	add	r3, r9
 801381c:	4651      	mov	r1, sl
 801381e:	6123      	str	r3, [r4, #16]
 8013820:	f000 fd0a 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013824:	2800      	cmp	r0, #0
 8013826:	d048      	beq.n	80138ba <ucdr_deserialize_endian_uint32_t+0xde>
 8013828:	2e01      	cmp	r6, #1
 801382a:	d061      	beq.n	80138f0 <ucdr_deserialize_endian_uint32_t+0x114>
 801382c:	78fb      	ldrb	r3, [r7, #3]
 801382e:	702b      	strb	r3, [r5, #0]
 8013830:	f1b9 0f00 	cmp.w	r9, #0
 8013834:	d050      	beq.n	80138d8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013836:	78bb      	ldrb	r3, [r7, #2]
 8013838:	f1b9 0f01 	cmp.w	r9, #1
 801383c:	706b      	strb	r3, [r5, #1]
 801383e:	f105 0302 	add.w	r3, r5, #2
 8013842:	d04d      	beq.n	80138e0 <ucdr_deserialize_endian_uint32_t+0x104>
 8013844:	787b      	ldrb	r3, [r7, #1]
 8013846:	f1b9 0f02 	cmp.w	r9, #2
 801384a:	70ab      	strb	r3, [r5, #2]
 801384c:	f105 0303 	add.w	r3, r5, #3
 8013850:	d04a      	beq.n	80138e8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8013852:	783b      	ldrb	r3, [r7, #0]
 8013854:	70eb      	strb	r3, [r5, #3]
 8013856:	6923      	ldr	r3, [r4, #16]
 8013858:	2104      	movs	r1, #4
 801385a:	68a2      	ldr	r2, [r4, #8]
 801385c:	3304      	adds	r3, #4
 801385e:	7da0      	ldrb	r0, [r4, #22]
 8013860:	4452      	add	r2, sl
 8013862:	7561      	strb	r1, [r4, #21]
 8013864:	eba3 0309 	sub.w	r3, r3, r9
 8013868:	f080 0001 	eor.w	r0, r0, #1
 801386c:	60a2      	str	r2, [r4, #8]
 801386e:	6123      	str	r3, [r4, #16]
 8013870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013874:	2104      	movs	r1, #4
 8013876:	4620      	mov	r0, r4
 8013878:	f000 fcde 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801387c:	b1a8      	cbz	r0, 80138aa <ucdr_deserialize_endian_uint32_t+0xce>
 801387e:	2e01      	cmp	r6, #1
 8013880:	68a3      	ldr	r3, [r4, #8]
 8013882:	d017      	beq.n	80138b4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013884:	78db      	ldrb	r3, [r3, #3]
 8013886:	702b      	strb	r3, [r5, #0]
 8013888:	68a3      	ldr	r3, [r4, #8]
 801388a:	789b      	ldrb	r3, [r3, #2]
 801388c:	706b      	strb	r3, [r5, #1]
 801388e:	68a3      	ldr	r3, [r4, #8]
 8013890:	785b      	ldrb	r3, [r3, #1]
 8013892:	70ab      	strb	r3, [r5, #2]
 8013894:	68a3      	ldr	r3, [r4, #8]
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	70eb      	strb	r3, [r5, #3]
 801389a:	2104      	movs	r1, #4
 801389c:	68a2      	ldr	r2, [r4, #8]
 801389e:	6923      	ldr	r3, [r4, #16]
 80138a0:	440a      	add	r2, r1
 80138a2:	7561      	strb	r1, [r4, #21]
 80138a4:	440b      	add	r3, r1
 80138a6:	60a2      	str	r2, [r4, #8]
 80138a8:	6123      	str	r3, [r4, #16]
 80138aa:	7da0      	ldrb	r0, [r4, #22]
 80138ac:	f080 0001 	eor.w	r0, r0, #1
 80138b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	602b      	str	r3, [r5, #0]
 80138b8:	e7ef      	b.n	801389a <ucdr_deserialize_endian_uint32_t+0xbe>
 80138ba:	68a2      	ldr	r2, [r4, #8]
 80138bc:	6923      	ldr	r3, [r4, #16]
 80138be:	eba2 0209 	sub.w	r2, r2, r9
 80138c2:	7da0      	ldrb	r0, [r4, #22]
 80138c4:	eba3 0309 	sub.w	r3, r3, r9
 80138c8:	f884 8015 	strb.w	r8, [r4, #21]
 80138cc:	f080 0001 	eor.w	r0, r0, #1
 80138d0:	60a2      	str	r2, [r4, #8]
 80138d2:	6123      	str	r3, [r4, #16]
 80138d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d8:	68a3      	ldr	r3, [r4, #8]
 80138da:	789b      	ldrb	r3, [r3, #2]
 80138dc:	706b      	strb	r3, [r5, #1]
 80138de:	1cab      	adds	r3, r5, #2
 80138e0:	68a2      	ldr	r2, [r4, #8]
 80138e2:	7852      	ldrb	r2, [r2, #1]
 80138e4:	f803 2b01 	strb.w	r2, [r3], #1
 80138e8:	68a2      	ldr	r2, [r4, #8]
 80138ea:	7812      	ldrb	r2, [r2, #0]
 80138ec:	701a      	strb	r2, [r3, #0]
 80138ee:	e7b2      	b.n	8013856 <ucdr_deserialize_endian_uint32_t+0x7a>
 80138f0:	4639      	mov	r1, r7
 80138f2:	464a      	mov	r2, r9
 80138f4:	4628      	mov	r0, r5
 80138f6:	f00a fce0 	bl	801e2ba <memcpy>
 80138fa:	4652      	mov	r2, sl
 80138fc:	eb05 0009 	add.w	r0, r5, r9
 8013900:	68a1      	ldr	r1, [r4, #8]
 8013902:	f00a fcda 	bl	801e2ba <memcpy>
 8013906:	e7a6      	b.n	8013856 <ucdr_deserialize_endian_uint32_t+0x7a>

08013908 <ucdr_serialize_uint64_t>:
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	4604      	mov	r4, r0
 801390e:	b082      	sub	sp, #8
 8013910:	2108      	movs	r1, #8
 8013912:	e9cd 2300 	strd	r2, r3, [sp]
 8013916:	f000 fce3 	bl	80142e0 <ucdr_buffer_alignment>
 801391a:	4601      	mov	r1, r0
 801391c:	4620      	mov	r0, r4
 801391e:	7d67      	ldrb	r7, [r4, #21]
 8013920:	f000 fd26 	bl	8014370 <ucdr_advance_buffer>
 8013924:	2108      	movs	r1, #8
 8013926:	4620      	mov	r0, r4
 8013928:	f000 fc7a 	bl	8014220 <ucdr_check_buffer_available_for>
 801392c:	2800      	cmp	r0, #0
 801392e:	d14e      	bne.n	80139ce <ucdr_serialize_uint64_t+0xc6>
 8013930:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013934:	42ab      	cmp	r3, r5
 8013936:	d945      	bls.n	80139c4 <ucdr_serialize_uint64_t+0xbc>
 8013938:	1b5e      	subs	r6, r3, r5
 801393a:	60a3      	str	r3, [r4, #8]
 801393c:	6923      	ldr	r3, [r4, #16]
 801393e:	4620      	mov	r0, r4
 8013940:	f1c6 0808 	rsb	r8, r6, #8
 8013944:	4433      	add	r3, r6
 8013946:	4641      	mov	r1, r8
 8013948:	6123      	str	r3, [r4, #16]
 801394a:	f000 fc75 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801394e:	2800      	cmp	r0, #0
 8013950:	d074      	beq.n	8013a3c <ucdr_serialize_uint64_t+0x134>
 8013952:	7d23      	ldrb	r3, [r4, #20]
 8013954:	2b01      	cmp	r3, #1
 8013956:	f000 809b 	beq.w	8013a90 <ucdr_serialize_uint64_t+0x188>
 801395a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801395e:	702b      	strb	r3, [r5, #0]
 8013960:	2e00      	cmp	r6, #0
 8013962:	d078      	beq.n	8013a56 <ucdr_serialize_uint64_t+0x14e>
 8013964:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013968:	2e01      	cmp	r6, #1
 801396a:	706b      	strb	r3, [r5, #1]
 801396c:	d077      	beq.n	8013a5e <ucdr_serialize_uint64_t+0x156>
 801396e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013972:	2e02      	cmp	r6, #2
 8013974:	70ab      	strb	r3, [r5, #2]
 8013976:	d076      	beq.n	8013a66 <ucdr_serialize_uint64_t+0x15e>
 8013978:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801397c:	2e03      	cmp	r6, #3
 801397e:	70eb      	strb	r3, [r5, #3]
 8013980:	d075      	beq.n	8013a6e <ucdr_serialize_uint64_t+0x166>
 8013982:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013986:	2e04      	cmp	r6, #4
 8013988:	712b      	strb	r3, [r5, #4]
 801398a:	d074      	beq.n	8013a76 <ucdr_serialize_uint64_t+0x16e>
 801398c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013990:	2e05      	cmp	r6, #5
 8013992:	716b      	strb	r3, [r5, #5]
 8013994:	d073      	beq.n	8013a7e <ucdr_serialize_uint64_t+0x176>
 8013996:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801399a:	2e06      	cmp	r6, #6
 801399c:	71ab      	strb	r3, [r5, #6]
 801399e:	d072      	beq.n	8013a86 <ucdr_serialize_uint64_t+0x17e>
 80139a0:	f89d 3000 	ldrb.w	r3, [sp]
 80139a4:	71eb      	strb	r3, [r5, #7]
 80139a6:	6923      	ldr	r3, [r4, #16]
 80139a8:	2108      	movs	r1, #8
 80139aa:	68a2      	ldr	r2, [r4, #8]
 80139ac:	3308      	adds	r3, #8
 80139ae:	7da0      	ldrb	r0, [r4, #22]
 80139b0:	4442      	add	r2, r8
 80139b2:	7561      	strb	r1, [r4, #21]
 80139b4:	1b9e      	subs	r6, r3, r6
 80139b6:	f080 0001 	eor.w	r0, r0, #1
 80139ba:	60a2      	str	r2, [r4, #8]
 80139bc:	6126      	str	r6, [r4, #16]
 80139be:	b002      	add	sp, #8
 80139c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c4:	2108      	movs	r1, #8
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 fc36 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80139cc:	b350      	cbz	r0, 8013a24 <ucdr_serialize_uint64_t+0x11c>
 80139ce:	7d23      	ldrb	r3, [r4, #20]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d02d      	beq.n	8013a30 <ucdr_serialize_uint64_t+0x128>
 80139d4:	68a3      	ldr	r3, [r4, #8]
 80139d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80139da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139de:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80139e2:	7018      	strb	r0, [r3, #0]
 80139e4:	68a3      	ldr	r3, [r4, #8]
 80139e6:	705a      	strb	r2, [r3, #1]
 80139e8:	68a3      	ldr	r3, [r4, #8]
 80139ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80139f2:	7099      	strb	r1, [r3, #2]
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	70da      	strb	r2, [r3, #3]
 80139f8:	68a3      	ldr	r3, [r4, #8]
 80139fa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80139fe:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013a02:	7118      	strb	r0, [r3, #4]
 8013a04:	68a3      	ldr	r3, [r4, #8]
 8013a06:	715a      	strb	r2, [r3, #5]
 8013a08:	68a3      	ldr	r3, [r4, #8]
 8013a0a:	f89d 2000 	ldrb.w	r2, [sp]
 8013a0e:	7199      	strb	r1, [r3, #6]
 8013a10:	68a3      	ldr	r3, [r4, #8]
 8013a12:	71da      	strb	r2, [r3, #7]
 8013a14:	2108      	movs	r1, #8
 8013a16:	68a2      	ldr	r2, [r4, #8]
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	440a      	add	r2, r1
 8013a1c:	7561      	strb	r1, [r4, #21]
 8013a1e:	440b      	add	r3, r1
 8013a20:	60a2      	str	r2, [r4, #8]
 8013a22:	6123      	str	r3, [r4, #16]
 8013a24:	7da0      	ldrb	r0, [r4, #22]
 8013a26:	f080 0001 	eor.w	r0, r0, #1
 8013a2a:	b002      	add	sp, #8
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a30:	466b      	mov	r3, sp
 8013a32:	68a2      	ldr	r2, [r4, #8]
 8013a34:	cb03      	ldmia	r3!, {r0, r1}
 8013a36:	6010      	str	r0, [r2, #0]
 8013a38:	6051      	str	r1, [r2, #4]
 8013a3a:	e7eb      	b.n	8013a14 <ucdr_serialize_uint64_t+0x10c>
 8013a3c:	68a2      	ldr	r2, [r4, #8]
 8013a3e:	6923      	ldr	r3, [r4, #16]
 8013a40:	7da0      	ldrb	r0, [r4, #22]
 8013a42:	1b92      	subs	r2, r2, r6
 8013a44:	1b9b      	subs	r3, r3, r6
 8013a46:	7567      	strb	r7, [r4, #21]
 8013a48:	f080 0001 	eor.w	r0, r0, #1
 8013a4c:	60a2      	str	r2, [r4, #8]
 8013a4e:	6123      	str	r3, [r4, #16]
 8013a50:	b002      	add	sp, #8
 8013a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a56:	68a3      	ldr	r3, [r4, #8]
 8013a58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	68a3      	ldr	r3, [r4, #8]
 8013a60:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013a64:	701a      	strb	r2, [r3, #0]
 8013a66:	68a3      	ldr	r3, [r4, #8]
 8013a68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a6c:	701a      	strb	r2, [r3, #0]
 8013a6e:	68a3      	ldr	r3, [r4, #8]
 8013a70:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013a74:	701a      	strb	r2, [r3, #0]
 8013a76:	68a3      	ldr	r3, [r4, #8]
 8013a78:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	68a3      	ldr	r3, [r4, #8]
 8013a80:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013a84:	701a      	strb	r2, [r3, #0]
 8013a86:	68a3      	ldr	r3, [r4, #8]
 8013a88:	f89d 2000 	ldrb.w	r2, [sp]
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	e78a      	b.n	80139a6 <ucdr_serialize_uint64_t+0x9e>
 8013a90:	4628      	mov	r0, r5
 8013a92:	466d      	mov	r5, sp
 8013a94:	4632      	mov	r2, r6
 8013a96:	4629      	mov	r1, r5
 8013a98:	f00a fc0f 	bl	801e2ba <memcpy>
 8013a9c:	4642      	mov	r2, r8
 8013a9e:	19a9      	adds	r1, r5, r6
 8013aa0:	68a0      	ldr	r0, [r4, #8]
 8013aa2:	f00a fc0a 	bl	801e2ba <memcpy>
 8013aa6:	e77e      	b.n	80139a6 <ucdr_serialize_uint64_t+0x9e>

08013aa8 <ucdr_serialize_int16_t>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	460b      	mov	r3, r1
 8013aae:	b082      	sub	sp, #8
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	2102      	movs	r1, #2
 8013ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ab8:	f000 fc12 	bl	80142e0 <ucdr_buffer_alignment>
 8013abc:	4601      	mov	r1, r0
 8013abe:	4620      	mov	r0, r4
 8013ac0:	7d67      	ldrb	r7, [r4, #21]
 8013ac2:	f000 fc55 	bl	8014370 <ucdr_advance_buffer>
 8013ac6:	2102      	movs	r1, #2
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 fba9 	bl	8014220 <ucdr_check_buffer_available_for>
 8013ace:	bb78      	cbnz	r0, 8013b30 <ucdr_serialize_int16_t+0x88>
 8013ad0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013ad4:	42ab      	cmp	r3, r5
 8013ad6:	d926      	bls.n	8013b26 <ucdr_serialize_int16_t+0x7e>
 8013ad8:	1b5e      	subs	r6, r3, r5
 8013ada:	60a3      	str	r3, [r4, #8]
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f1c6 0802 	rsb	r8, r6, #2
 8013ae4:	4433      	add	r3, r6
 8013ae6:	4641      	mov	r1, r8
 8013ae8:	6123      	str	r3, [r4, #16]
 8013aea:	f000 fba5 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d03b      	beq.n	8013b6a <ucdr_serialize_int16_t+0xc2>
 8013af2:	7d23      	ldrb	r3, [r4, #20]
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	d04a      	beq.n	8013b8e <ucdr_serialize_int16_t+0xe6>
 8013af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013afc:	702b      	strb	r3, [r5, #0]
 8013afe:	2e00      	cmp	r6, #0
 8013b00:	d040      	beq.n	8013b84 <ucdr_serialize_int16_t+0xdc>
 8013b02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013b06:	706b      	strb	r3, [r5, #1]
 8013b08:	6923      	ldr	r3, [r4, #16]
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	68a2      	ldr	r2, [r4, #8]
 8013b0e:	3302      	adds	r3, #2
 8013b10:	7da0      	ldrb	r0, [r4, #22]
 8013b12:	4442      	add	r2, r8
 8013b14:	7561      	strb	r1, [r4, #21]
 8013b16:	1b9e      	subs	r6, r3, r6
 8013b18:	f080 0001 	eor.w	r0, r0, #1
 8013b1c:	60a2      	str	r2, [r4, #8]
 8013b1e:	6126      	str	r6, [r4, #16]
 8013b20:	b002      	add	sp, #8
 8013b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b26:	2102      	movs	r1, #2
 8013b28:	4620      	mov	r0, r4
 8013b2a:	f000 fb85 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013b2e:	b190      	cbz	r0, 8013b56 <ucdr_serialize_int16_t+0xae>
 8013b30:	7d23      	ldrb	r3, [r4, #20]
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	68a3      	ldr	r3, [r4, #8]
 8013b36:	d014      	beq.n	8013b62 <ucdr_serialize_int16_t+0xba>
 8013b38:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013b3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b40:	7019      	strb	r1, [r3, #0]
 8013b42:	68a3      	ldr	r3, [r4, #8]
 8013b44:	705a      	strb	r2, [r3, #1]
 8013b46:	2102      	movs	r1, #2
 8013b48:	68a2      	ldr	r2, [r4, #8]
 8013b4a:	6923      	ldr	r3, [r4, #16]
 8013b4c:	440a      	add	r2, r1
 8013b4e:	7561      	strb	r1, [r4, #21]
 8013b50:	440b      	add	r3, r1
 8013b52:	60a2      	str	r2, [r4, #8]
 8013b54:	6123      	str	r3, [r4, #16]
 8013b56:	7da0      	ldrb	r0, [r4, #22]
 8013b58:	f080 0001 	eor.w	r0, r0, #1
 8013b5c:	b002      	add	sp, #8
 8013b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013b66:	801a      	strh	r2, [r3, #0]
 8013b68:	e7ed      	b.n	8013b46 <ucdr_serialize_int16_t+0x9e>
 8013b6a:	68a2      	ldr	r2, [r4, #8]
 8013b6c:	6923      	ldr	r3, [r4, #16]
 8013b6e:	7da0      	ldrb	r0, [r4, #22]
 8013b70:	1b92      	subs	r2, r2, r6
 8013b72:	1b9b      	subs	r3, r3, r6
 8013b74:	7567      	strb	r7, [r4, #21]
 8013b76:	f080 0001 	eor.w	r0, r0, #1
 8013b7a:	60a2      	str	r2, [r4, #8]
 8013b7c:	6123      	str	r3, [r4, #16]
 8013b7e:	b002      	add	sp, #8
 8013b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b84:	68a3      	ldr	r3, [r4, #8]
 8013b86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b8a:	701a      	strb	r2, [r3, #0]
 8013b8c:	e7bc      	b.n	8013b08 <ucdr_serialize_int16_t+0x60>
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f10d 0506 	add.w	r5, sp, #6
 8013b94:	4632      	mov	r2, r6
 8013b96:	4629      	mov	r1, r5
 8013b98:	f00a fb8f 	bl	801e2ba <memcpy>
 8013b9c:	4642      	mov	r2, r8
 8013b9e:	19a9      	adds	r1, r5, r6
 8013ba0:	68a0      	ldr	r0, [r4, #8]
 8013ba2:	f00a fb8a 	bl	801e2ba <memcpy>
 8013ba6:	e7af      	b.n	8013b08 <ucdr_serialize_int16_t+0x60>

08013ba8 <ucdr_deserialize_int16_t>:
 8013ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bac:	4604      	mov	r4, r0
 8013bae:	460d      	mov	r5, r1
 8013bb0:	2102      	movs	r1, #2
 8013bb2:	f000 fb95 	bl	80142e0 <ucdr_buffer_alignment>
 8013bb6:	4601      	mov	r1, r0
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013bbe:	f000 fbd7 	bl	8014370 <ucdr_advance_buffer>
 8013bc2:	2102      	movs	r1, #2
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f000 fb2b 	bl	8014220 <ucdr_check_buffer_available_for>
 8013bca:	bb60      	cbnz	r0, 8013c26 <ucdr_deserialize_int16_t+0x7e>
 8013bcc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013bd0:	42be      	cmp	r6, r7
 8013bd2:	d923      	bls.n	8013c1c <ucdr_deserialize_int16_t+0x74>
 8013bd4:	6923      	ldr	r3, [r4, #16]
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	60a6      	str	r6, [r4, #8]
 8013bda:	1bf6      	subs	r6, r6, r7
 8013bdc:	4433      	add	r3, r6
 8013bde:	f1c6 0902 	rsb	r9, r6, #2
 8013be2:	6123      	str	r3, [r4, #16]
 8013be4:	4649      	mov	r1, r9
 8013be6:	f000 fb27 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d034      	beq.n	8013c58 <ucdr_deserialize_int16_t+0xb0>
 8013bee:	7d23      	ldrb	r3, [r4, #20]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d042      	beq.n	8013c7a <ucdr_deserialize_int16_t+0xd2>
 8013bf4:	787b      	ldrb	r3, [r7, #1]
 8013bf6:	702b      	strb	r3, [r5, #0]
 8013bf8:	2e00      	cmp	r6, #0
 8013bfa:	d03a      	beq.n	8013c72 <ucdr_deserialize_int16_t+0xca>
 8013bfc:	783b      	ldrb	r3, [r7, #0]
 8013bfe:	706b      	strb	r3, [r5, #1]
 8013c00:	6923      	ldr	r3, [r4, #16]
 8013c02:	2102      	movs	r1, #2
 8013c04:	68a2      	ldr	r2, [r4, #8]
 8013c06:	3302      	adds	r3, #2
 8013c08:	7da0      	ldrb	r0, [r4, #22]
 8013c0a:	444a      	add	r2, r9
 8013c0c:	7561      	strb	r1, [r4, #21]
 8013c0e:	1b9b      	subs	r3, r3, r6
 8013c10:	f080 0001 	eor.w	r0, r0, #1
 8013c14:	60a2      	str	r2, [r4, #8]
 8013c16:	6123      	str	r3, [r4, #16]
 8013c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c1c:	2102      	movs	r1, #2
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f000 fb0a 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013c24:	b180      	cbz	r0, 8013c48 <ucdr_deserialize_int16_t+0xa0>
 8013c26:	7d23      	ldrb	r3, [r4, #20]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	68a3      	ldr	r3, [r4, #8]
 8013c2c:	d011      	beq.n	8013c52 <ucdr_deserialize_int16_t+0xaa>
 8013c2e:	785b      	ldrb	r3, [r3, #1]
 8013c30:	702b      	strb	r3, [r5, #0]
 8013c32:	68a3      	ldr	r3, [r4, #8]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	706b      	strb	r3, [r5, #1]
 8013c38:	2102      	movs	r1, #2
 8013c3a:	68a2      	ldr	r2, [r4, #8]
 8013c3c:	6923      	ldr	r3, [r4, #16]
 8013c3e:	440a      	add	r2, r1
 8013c40:	7561      	strb	r1, [r4, #21]
 8013c42:	440b      	add	r3, r1
 8013c44:	60a2      	str	r2, [r4, #8]
 8013c46:	6123      	str	r3, [r4, #16]
 8013c48:	7da0      	ldrb	r0, [r4, #22]
 8013c4a:	f080 0001 	eor.w	r0, r0, #1
 8013c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	802b      	strh	r3, [r5, #0]
 8013c56:	e7ef      	b.n	8013c38 <ucdr_deserialize_int16_t+0x90>
 8013c58:	68a2      	ldr	r2, [r4, #8]
 8013c5a:	6923      	ldr	r3, [r4, #16]
 8013c5c:	1b92      	subs	r2, r2, r6
 8013c5e:	7da0      	ldrb	r0, [r4, #22]
 8013c60:	1b9b      	subs	r3, r3, r6
 8013c62:	f884 8015 	strb.w	r8, [r4, #21]
 8013c66:	f080 0001 	eor.w	r0, r0, #1
 8013c6a:	60a2      	str	r2, [r4, #8]
 8013c6c:	6123      	str	r3, [r4, #16]
 8013c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c72:	68a3      	ldr	r3, [r4, #8]
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	706b      	strb	r3, [r5, #1]
 8013c78:	e7c2      	b.n	8013c00 <ucdr_deserialize_int16_t+0x58>
 8013c7a:	4639      	mov	r1, r7
 8013c7c:	4632      	mov	r2, r6
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f00a fb1b 	bl	801e2ba <memcpy>
 8013c84:	464a      	mov	r2, r9
 8013c86:	19a8      	adds	r0, r5, r6
 8013c88:	68a1      	ldr	r1, [r4, #8]
 8013c8a:	f00a fb16 	bl	801e2ba <memcpy>
 8013c8e:	e7b7      	b.n	8013c00 <ucdr_deserialize_int16_t+0x58>

08013c90 <ucdr_serialize_int32_t>:
 8013c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c94:	b082      	sub	sp, #8
 8013c96:	4604      	mov	r4, r0
 8013c98:	9101      	str	r1, [sp, #4]
 8013c9a:	2104      	movs	r1, #4
 8013c9c:	f000 fb20 	bl	80142e0 <ucdr_buffer_alignment>
 8013ca0:	4601      	mov	r1, r0
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	7d67      	ldrb	r7, [r4, #21]
 8013ca6:	f000 fb63 	bl	8014370 <ucdr_advance_buffer>
 8013caa:	2104      	movs	r1, #4
 8013cac:	4620      	mov	r0, r4
 8013cae:	f000 fab7 	bl	8014220 <ucdr_check_buffer_available_for>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d139      	bne.n	8013d2a <ucdr_serialize_int32_t+0x9a>
 8013cb6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013cba:	42ab      	cmp	r3, r5
 8013cbc:	d930      	bls.n	8013d20 <ucdr_serialize_int32_t+0x90>
 8013cbe:	1b5e      	subs	r6, r3, r5
 8013cc0:	60a3      	str	r3, [r4, #8]
 8013cc2:	6923      	ldr	r3, [r4, #16]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f1c6 0804 	rsb	r8, r6, #4
 8013cca:	4433      	add	r3, r6
 8013ccc:	4641      	mov	r1, r8
 8013cce:	6123      	str	r3, [r4, #16]
 8013cd0:	f000 fab2 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d04c      	beq.n	8013d72 <ucdr_serialize_int32_t+0xe2>
 8013cd8:	7d23      	ldrb	r3, [r4, #20]
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d063      	beq.n	8013da6 <ucdr_serialize_int32_t+0x116>
 8013cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ce2:	702b      	strb	r3, [r5, #0]
 8013ce4:	2e00      	cmp	r6, #0
 8013ce6:	d051      	beq.n	8013d8c <ucdr_serialize_int32_t+0xfc>
 8013ce8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013cec:	2e01      	cmp	r6, #1
 8013cee:	706b      	strb	r3, [r5, #1]
 8013cf0:	d050      	beq.n	8013d94 <ucdr_serialize_int32_t+0x104>
 8013cf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013cf6:	2e02      	cmp	r6, #2
 8013cf8:	70ab      	strb	r3, [r5, #2]
 8013cfa:	d04f      	beq.n	8013d9c <ucdr_serialize_int32_t+0x10c>
 8013cfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013d00:	70eb      	strb	r3, [r5, #3]
 8013d02:	6923      	ldr	r3, [r4, #16]
 8013d04:	2104      	movs	r1, #4
 8013d06:	68a2      	ldr	r2, [r4, #8]
 8013d08:	3304      	adds	r3, #4
 8013d0a:	7da0      	ldrb	r0, [r4, #22]
 8013d0c:	4442      	add	r2, r8
 8013d0e:	7561      	strb	r1, [r4, #21]
 8013d10:	1b9e      	subs	r6, r3, r6
 8013d12:	f080 0001 	eor.w	r0, r0, #1
 8013d16:	60a2      	str	r2, [r4, #8]
 8013d18:	6126      	str	r6, [r4, #16]
 8013d1a:	b002      	add	sp, #8
 8013d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d20:	2104      	movs	r1, #4
 8013d22:	4620      	mov	r0, r4
 8013d24:	f000 fa88 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013d28:	b1d0      	cbz	r0, 8013d60 <ucdr_serialize_int32_t+0xd0>
 8013d2a:	7d23      	ldrb	r3, [r4, #20]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	68a3      	ldr	r3, [r4, #8]
 8013d30:	d01c      	beq.n	8013d6c <ucdr_serialize_int32_t+0xdc>
 8013d32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d3a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013d3e:	7018      	strb	r0, [r3, #0]
 8013d40:	68a3      	ldr	r3, [r4, #8]
 8013d42:	705a      	strb	r2, [r3, #1]
 8013d44:	68a3      	ldr	r3, [r4, #8]
 8013d46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d4a:	7099      	strb	r1, [r3, #2]
 8013d4c:	68a3      	ldr	r3, [r4, #8]
 8013d4e:	70da      	strb	r2, [r3, #3]
 8013d50:	2104      	movs	r1, #4
 8013d52:	68a2      	ldr	r2, [r4, #8]
 8013d54:	6923      	ldr	r3, [r4, #16]
 8013d56:	440a      	add	r2, r1
 8013d58:	7561      	strb	r1, [r4, #21]
 8013d5a:	440b      	add	r3, r1
 8013d5c:	60a2      	str	r2, [r4, #8]
 8013d5e:	6123      	str	r3, [r4, #16]
 8013d60:	7da0      	ldrb	r0, [r4, #22]
 8013d62:	f080 0001 	eor.w	r0, r0, #1
 8013d66:	b002      	add	sp, #8
 8013d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d6c:	9a01      	ldr	r2, [sp, #4]
 8013d6e:	601a      	str	r2, [r3, #0]
 8013d70:	e7ee      	b.n	8013d50 <ucdr_serialize_int32_t+0xc0>
 8013d72:	68a2      	ldr	r2, [r4, #8]
 8013d74:	6923      	ldr	r3, [r4, #16]
 8013d76:	7da0      	ldrb	r0, [r4, #22]
 8013d78:	1b92      	subs	r2, r2, r6
 8013d7a:	1b9b      	subs	r3, r3, r6
 8013d7c:	7567      	strb	r7, [r4, #21]
 8013d7e:	f080 0001 	eor.w	r0, r0, #1
 8013d82:	60a2      	str	r2, [r4, #8]
 8013d84:	6123      	str	r3, [r4, #16]
 8013d86:	b002      	add	sp, #8
 8013d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d8c:	68a3      	ldr	r3, [r4, #8]
 8013d8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d92:	701a      	strb	r2, [r3, #0]
 8013d94:	68a3      	ldr	r3, [r4, #8]
 8013d96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013d9a:	701a      	strb	r2, [r3, #0]
 8013d9c:	68a3      	ldr	r3, [r4, #8]
 8013d9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013da2:	701a      	strb	r2, [r3, #0]
 8013da4:	e7ad      	b.n	8013d02 <ucdr_serialize_int32_t+0x72>
 8013da6:	4628      	mov	r0, r5
 8013da8:	ad01      	add	r5, sp, #4
 8013daa:	4632      	mov	r2, r6
 8013dac:	4629      	mov	r1, r5
 8013dae:	f00a fa84 	bl	801e2ba <memcpy>
 8013db2:	4642      	mov	r2, r8
 8013db4:	19a9      	adds	r1, r5, r6
 8013db6:	68a0      	ldr	r0, [r4, #8]
 8013db8:	f00a fa7f 	bl	801e2ba <memcpy>
 8013dbc:	e7a1      	b.n	8013d02 <ucdr_serialize_int32_t+0x72>
 8013dbe:	bf00      	nop

08013dc0 <ucdr_deserialize_int32_t>:
 8013dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dc4:	4604      	mov	r4, r0
 8013dc6:	460d      	mov	r5, r1
 8013dc8:	2104      	movs	r1, #4
 8013dca:	f000 fa89 	bl	80142e0 <ucdr_buffer_alignment>
 8013dce:	4601      	mov	r1, r0
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013dd6:	f000 facb 	bl	8014370 <ucdr_advance_buffer>
 8013dda:	2104      	movs	r1, #4
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f000 fa1f 	bl	8014220 <ucdr_check_buffer_available_for>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d138      	bne.n	8013e58 <ucdr_deserialize_int32_t+0x98>
 8013de6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013dea:	42b7      	cmp	r7, r6
 8013dec:	d92f      	bls.n	8013e4e <ucdr_deserialize_int32_t+0x8e>
 8013dee:	6923      	ldr	r3, [r4, #16]
 8013df0:	4620      	mov	r0, r4
 8013df2:	60a7      	str	r7, [r4, #8]
 8013df4:	1bbf      	subs	r7, r7, r6
 8013df6:	443b      	add	r3, r7
 8013df8:	f1c7 0904 	rsb	r9, r7, #4
 8013dfc:	6123      	str	r3, [r4, #16]
 8013dfe:	4649      	mov	r1, r9
 8013e00:	f000 fa1a 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	d046      	beq.n	8013e96 <ucdr_deserialize_int32_t+0xd6>
 8013e08:	7d23      	ldrb	r3, [r4, #20]
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d05c      	beq.n	8013ec8 <ucdr_deserialize_int32_t+0x108>
 8013e0e:	78f3      	ldrb	r3, [r6, #3]
 8013e10:	702b      	strb	r3, [r5, #0]
 8013e12:	2f00      	cmp	r7, #0
 8013e14:	d04c      	beq.n	8013eb0 <ucdr_deserialize_int32_t+0xf0>
 8013e16:	78b3      	ldrb	r3, [r6, #2]
 8013e18:	2f01      	cmp	r7, #1
 8013e1a:	706b      	strb	r3, [r5, #1]
 8013e1c:	f105 0302 	add.w	r3, r5, #2
 8013e20:	d04a      	beq.n	8013eb8 <ucdr_deserialize_int32_t+0xf8>
 8013e22:	7873      	ldrb	r3, [r6, #1]
 8013e24:	2f02      	cmp	r7, #2
 8013e26:	70ab      	strb	r3, [r5, #2]
 8013e28:	f105 0303 	add.w	r3, r5, #3
 8013e2c:	d048      	beq.n	8013ec0 <ucdr_deserialize_int32_t+0x100>
 8013e2e:	7833      	ldrb	r3, [r6, #0]
 8013e30:	70eb      	strb	r3, [r5, #3]
 8013e32:	6923      	ldr	r3, [r4, #16]
 8013e34:	2104      	movs	r1, #4
 8013e36:	68a2      	ldr	r2, [r4, #8]
 8013e38:	3304      	adds	r3, #4
 8013e3a:	7da0      	ldrb	r0, [r4, #22]
 8013e3c:	444a      	add	r2, r9
 8013e3e:	7561      	strb	r1, [r4, #21]
 8013e40:	1bdb      	subs	r3, r3, r7
 8013e42:	f080 0001 	eor.w	r0, r0, #1
 8013e46:	60a2      	str	r2, [r4, #8]
 8013e48:	6123      	str	r3, [r4, #16]
 8013e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e4e:	2104      	movs	r1, #4
 8013e50:	4620      	mov	r0, r4
 8013e52:	f000 f9f1 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013e56:	b1b0      	cbz	r0, 8013e86 <ucdr_deserialize_int32_t+0xc6>
 8013e58:	7d23      	ldrb	r3, [r4, #20]
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	68a3      	ldr	r3, [r4, #8]
 8013e5e:	d017      	beq.n	8013e90 <ucdr_deserialize_int32_t+0xd0>
 8013e60:	78db      	ldrb	r3, [r3, #3]
 8013e62:	702b      	strb	r3, [r5, #0]
 8013e64:	68a3      	ldr	r3, [r4, #8]
 8013e66:	789b      	ldrb	r3, [r3, #2]
 8013e68:	706b      	strb	r3, [r5, #1]
 8013e6a:	68a3      	ldr	r3, [r4, #8]
 8013e6c:	785b      	ldrb	r3, [r3, #1]
 8013e6e:	70ab      	strb	r3, [r5, #2]
 8013e70:	68a3      	ldr	r3, [r4, #8]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	70eb      	strb	r3, [r5, #3]
 8013e76:	2104      	movs	r1, #4
 8013e78:	68a2      	ldr	r2, [r4, #8]
 8013e7a:	6923      	ldr	r3, [r4, #16]
 8013e7c:	440a      	add	r2, r1
 8013e7e:	7561      	strb	r1, [r4, #21]
 8013e80:	440b      	add	r3, r1
 8013e82:	60a2      	str	r2, [r4, #8]
 8013e84:	6123      	str	r3, [r4, #16]
 8013e86:	7da0      	ldrb	r0, [r4, #22]
 8013e88:	f080 0001 	eor.w	r0, r0, #1
 8013e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	602b      	str	r3, [r5, #0]
 8013e94:	e7ef      	b.n	8013e76 <ucdr_deserialize_int32_t+0xb6>
 8013e96:	68a2      	ldr	r2, [r4, #8]
 8013e98:	6923      	ldr	r3, [r4, #16]
 8013e9a:	1bd2      	subs	r2, r2, r7
 8013e9c:	7da0      	ldrb	r0, [r4, #22]
 8013e9e:	1bdb      	subs	r3, r3, r7
 8013ea0:	f884 8015 	strb.w	r8, [r4, #21]
 8013ea4:	f080 0001 	eor.w	r0, r0, #1
 8013ea8:	60a2      	str	r2, [r4, #8]
 8013eaa:	6123      	str	r3, [r4, #16]
 8013eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb0:	68a3      	ldr	r3, [r4, #8]
 8013eb2:	789b      	ldrb	r3, [r3, #2]
 8013eb4:	706b      	strb	r3, [r5, #1]
 8013eb6:	1cab      	adds	r3, r5, #2
 8013eb8:	68a2      	ldr	r2, [r4, #8]
 8013eba:	7852      	ldrb	r2, [r2, #1]
 8013ebc:	f803 2b01 	strb.w	r2, [r3], #1
 8013ec0:	68a2      	ldr	r2, [r4, #8]
 8013ec2:	7812      	ldrb	r2, [r2, #0]
 8013ec4:	701a      	strb	r2, [r3, #0]
 8013ec6:	e7b4      	b.n	8013e32 <ucdr_deserialize_int32_t+0x72>
 8013ec8:	4631      	mov	r1, r6
 8013eca:	463a      	mov	r2, r7
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f00a f9f4 	bl	801e2ba <memcpy>
 8013ed2:	464a      	mov	r2, r9
 8013ed4:	19e8      	adds	r0, r5, r7
 8013ed6:	68a1      	ldr	r1, [r4, #8]
 8013ed8:	f00a f9ef 	bl	801e2ba <memcpy>
 8013edc:	e7a9      	b.n	8013e32 <ucdr_deserialize_int32_t+0x72>
 8013ede:	bf00      	nop

08013ee0 <ucdr_serialize_endian_double>:
 8013ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	460e      	mov	r6, r1
 8013eea:	2108      	movs	r1, #8
 8013eec:	ed8d 0b00 	vstr	d0, [sp]
 8013ef0:	f000 f9f6 	bl	80142e0 <ucdr_buffer_alignment>
 8013ef4:	4601      	mov	r1, r0
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013efc:	f000 fa38 	bl	8014370 <ucdr_advance_buffer>
 8013f00:	2108      	movs	r1, #8
 8013f02:	4620      	mov	r0, r4
 8013f04:	f000 f98c 	bl	8014220 <ucdr_check_buffer_available_for>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d14d      	bne.n	8013fa8 <ucdr_serialize_endian_double+0xc8>
 8013f0c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8013f10:	42bd      	cmp	r5, r7
 8013f12:	d944      	bls.n	8013f9e <ucdr_serialize_endian_double+0xbe>
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	4620      	mov	r0, r4
 8013f18:	60a5      	str	r5, [r4, #8]
 8013f1a:	1bed      	subs	r5, r5, r7
 8013f1c:	442b      	add	r3, r5
 8013f1e:	f1c5 0908 	rsb	r9, r5, #8
 8013f22:	6123      	str	r3, [r4, #16]
 8013f24:	4649      	mov	r1, r9
 8013f26:	f000 f987 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	d072      	beq.n	8014014 <ucdr_serialize_endian_double+0x134>
 8013f2e:	2e01      	cmp	r6, #1
 8013f30:	f000 809b 	beq.w	801406a <ucdr_serialize_endian_double+0x18a>
 8013f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f38:	703b      	strb	r3, [r7, #0]
 8013f3a:	2d00      	cmp	r5, #0
 8013f3c:	d078      	beq.n	8014030 <ucdr_serialize_endian_double+0x150>
 8013f3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f42:	2d01      	cmp	r5, #1
 8013f44:	707b      	strb	r3, [r7, #1]
 8013f46:	d077      	beq.n	8014038 <ucdr_serialize_endian_double+0x158>
 8013f48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013f4c:	2d02      	cmp	r5, #2
 8013f4e:	70bb      	strb	r3, [r7, #2]
 8013f50:	d076      	beq.n	8014040 <ucdr_serialize_endian_double+0x160>
 8013f52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013f56:	2d03      	cmp	r5, #3
 8013f58:	70fb      	strb	r3, [r7, #3]
 8013f5a:	d075      	beq.n	8014048 <ucdr_serialize_endian_double+0x168>
 8013f5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013f60:	2d04      	cmp	r5, #4
 8013f62:	713b      	strb	r3, [r7, #4]
 8013f64:	d074      	beq.n	8014050 <ucdr_serialize_endian_double+0x170>
 8013f66:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013f6a:	2d05      	cmp	r5, #5
 8013f6c:	717b      	strb	r3, [r7, #5]
 8013f6e:	d073      	beq.n	8014058 <ucdr_serialize_endian_double+0x178>
 8013f70:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013f74:	2d06      	cmp	r5, #6
 8013f76:	71bb      	strb	r3, [r7, #6]
 8013f78:	d072      	beq.n	8014060 <ucdr_serialize_endian_double+0x180>
 8013f7a:	f89d 3000 	ldrb.w	r3, [sp]
 8013f7e:	71fb      	strb	r3, [r7, #7]
 8013f80:	6923      	ldr	r3, [r4, #16]
 8013f82:	2108      	movs	r1, #8
 8013f84:	68a2      	ldr	r2, [r4, #8]
 8013f86:	3308      	adds	r3, #8
 8013f88:	7da0      	ldrb	r0, [r4, #22]
 8013f8a:	444a      	add	r2, r9
 8013f8c:	7561      	strb	r1, [r4, #21]
 8013f8e:	1b5d      	subs	r5, r3, r5
 8013f90:	f080 0001 	eor.w	r0, r0, #1
 8013f94:	60a2      	str	r2, [r4, #8]
 8013f96:	6125      	str	r5, [r4, #16]
 8013f98:	b003      	add	sp, #12
 8013f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f9e:	2108      	movs	r1, #8
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 f949 	bl	8014238 <ucdr_check_final_buffer_behavior>
 8013fa6:	b348      	cbz	r0, 8013ffc <ucdr_serialize_endian_double+0x11c>
 8013fa8:	2e01      	cmp	r6, #1
 8013faa:	d02d      	beq.n	8014008 <ucdr_serialize_endian_double+0x128>
 8013fac:	68a3      	ldr	r3, [r4, #8]
 8013fae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013fb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fb6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013fba:	7018      	strb	r0, [r3, #0]
 8013fbc:	68a3      	ldr	r3, [r4, #8]
 8013fbe:	705a      	strb	r2, [r3, #1]
 8013fc0:	68a3      	ldr	r3, [r4, #8]
 8013fc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013fc6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013fca:	7099      	strb	r1, [r3, #2]
 8013fcc:	68a3      	ldr	r3, [r4, #8]
 8013fce:	70da      	strb	r2, [r3, #3]
 8013fd0:	68a3      	ldr	r3, [r4, #8]
 8013fd2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013fd6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013fda:	7118      	strb	r0, [r3, #4]
 8013fdc:	68a3      	ldr	r3, [r4, #8]
 8013fde:	715a      	strb	r2, [r3, #5]
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	f89d 2000 	ldrb.w	r2, [sp]
 8013fe6:	7199      	strb	r1, [r3, #6]
 8013fe8:	68a3      	ldr	r3, [r4, #8]
 8013fea:	71da      	strb	r2, [r3, #7]
 8013fec:	2108      	movs	r1, #8
 8013fee:	68a2      	ldr	r2, [r4, #8]
 8013ff0:	6923      	ldr	r3, [r4, #16]
 8013ff2:	440a      	add	r2, r1
 8013ff4:	7561      	strb	r1, [r4, #21]
 8013ff6:	440b      	add	r3, r1
 8013ff8:	60a2      	str	r2, [r4, #8]
 8013ffa:	6123      	str	r3, [r4, #16]
 8013ffc:	7da0      	ldrb	r0, [r4, #22]
 8013ffe:	f080 0001 	eor.w	r0, r0, #1
 8014002:	b003      	add	sp, #12
 8014004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014008:	466b      	mov	r3, sp
 801400a:	68a2      	ldr	r2, [r4, #8]
 801400c:	cb03      	ldmia	r3!, {r0, r1}
 801400e:	6010      	str	r0, [r2, #0]
 8014010:	6051      	str	r1, [r2, #4]
 8014012:	e7eb      	b.n	8013fec <ucdr_serialize_endian_double+0x10c>
 8014014:	68a2      	ldr	r2, [r4, #8]
 8014016:	6923      	ldr	r3, [r4, #16]
 8014018:	7da0      	ldrb	r0, [r4, #22]
 801401a:	1b52      	subs	r2, r2, r5
 801401c:	1b5b      	subs	r3, r3, r5
 801401e:	f884 8015 	strb.w	r8, [r4, #21]
 8014022:	f080 0001 	eor.w	r0, r0, #1
 8014026:	60a2      	str	r2, [r4, #8]
 8014028:	6123      	str	r3, [r4, #16]
 801402a:	b003      	add	sp, #12
 801402c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014030:	68a3      	ldr	r3, [r4, #8]
 8014032:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014036:	701a      	strb	r2, [r3, #0]
 8014038:	68a3      	ldr	r3, [r4, #8]
 801403a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801403e:	701a      	strb	r2, [r3, #0]
 8014040:	68a3      	ldr	r3, [r4, #8]
 8014042:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014046:	701a      	strb	r2, [r3, #0]
 8014048:	68a3      	ldr	r3, [r4, #8]
 801404a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801404e:	701a      	strb	r2, [r3, #0]
 8014050:	68a3      	ldr	r3, [r4, #8]
 8014052:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014056:	701a      	strb	r2, [r3, #0]
 8014058:	68a3      	ldr	r3, [r4, #8]
 801405a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801405e:	701a      	strb	r2, [r3, #0]
 8014060:	68a3      	ldr	r3, [r4, #8]
 8014062:	f89d 2000 	ldrb.w	r2, [sp]
 8014066:	701a      	strb	r2, [r3, #0]
 8014068:	e78a      	b.n	8013f80 <ucdr_serialize_endian_double+0xa0>
 801406a:	466e      	mov	r6, sp
 801406c:	462a      	mov	r2, r5
 801406e:	4638      	mov	r0, r7
 8014070:	4631      	mov	r1, r6
 8014072:	f00a f922 	bl	801e2ba <memcpy>
 8014076:	464a      	mov	r2, r9
 8014078:	1971      	adds	r1, r6, r5
 801407a:	68a0      	ldr	r0, [r4, #8]
 801407c:	f00a f91d 	bl	801e2ba <memcpy>
 8014080:	e77e      	b.n	8013f80 <ucdr_serialize_endian_double+0xa0>
 8014082:	bf00      	nop

08014084 <ucdr_deserialize_endian_double>:
 8014084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014088:	4604      	mov	r4, r0
 801408a:	460f      	mov	r7, r1
 801408c:	2108      	movs	r1, #8
 801408e:	4615      	mov	r5, r2
 8014090:	f000 f926 	bl	80142e0 <ucdr_buffer_alignment>
 8014094:	4601      	mov	r1, r0
 8014096:	4620      	mov	r0, r4
 8014098:	f894 8015 	ldrb.w	r8, [r4, #21]
 801409c:	f000 f968 	bl	8014370 <ucdr_advance_buffer>
 80140a0:	2108      	movs	r1, #8
 80140a2:	4620      	mov	r0, r4
 80140a4:	f000 f8bc 	bl	8014220 <ucdr_check_buffer_available_for>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d159      	bne.n	8014160 <ucdr_deserialize_endian_double+0xdc>
 80140ac:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 80140b0:	454e      	cmp	r6, r9
 80140b2:	d950      	bls.n	8014156 <ucdr_deserialize_endian_double+0xd2>
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	4620      	mov	r0, r4
 80140b8:	60a6      	str	r6, [r4, #8]
 80140ba:	eba6 0609 	sub.w	r6, r6, r9
 80140be:	4433      	add	r3, r6
 80140c0:	f1c6 0a08 	rsb	sl, r6, #8
 80140c4:	6123      	str	r3, [r4, #16]
 80140c6:	4651      	mov	r1, sl
 80140c8:	f000 f8b6 	bl	8014238 <ucdr_check_final_buffer_behavior>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d073      	beq.n	80141b8 <ucdr_deserialize_endian_double+0x134>
 80140d0:	2f01      	cmp	r7, #1
 80140d2:	f000 809a 	beq.w	801420a <ucdr_deserialize_endian_double+0x186>
 80140d6:	f899 3007 	ldrb.w	r3, [r9, #7]
 80140da:	702b      	strb	r3, [r5, #0]
 80140dc:	2e00      	cmp	r6, #0
 80140de:	d078      	beq.n	80141d2 <ucdr_deserialize_endian_double+0x14e>
 80140e0:	f899 3006 	ldrb.w	r3, [r9, #6]
 80140e4:	2e01      	cmp	r6, #1
 80140e6:	706b      	strb	r3, [r5, #1]
 80140e8:	f105 0302 	add.w	r3, r5, #2
 80140ec:	d075      	beq.n	80141da <ucdr_deserialize_endian_double+0x156>
 80140ee:	f899 3005 	ldrb.w	r3, [r9, #5]
 80140f2:	2e02      	cmp	r6, #2
 80140f4:	70ab      	strb	r3, [r5, #2]
 80140f6:	f105 0303 	add.w	r3, r5, #3
 80140fa:	d072      	beq.n	80141e2 <ucdr_deserialize_endian_double+0x15e>
 80140fc:	f899 3004 	ldrb.w	r3, [r9, #4]
 8014100:	2e03      	cmp	r6, #3
 8014102:	70eb      	strb	r3, [r5, #3]
 8014104:	f105 0304 	add.w	r3, r5, #4
 8014108:	d06f      	beq.n	80141ea <ucdr_deserialize_endian_double+0x166>
 801410a:	f899 3003 	ldrb.w	r3, [r9, #3]
 801410e:	2e04      	cmp	r6, #4
 8014110:	712b      	strb	r3, [r5, #4]
 8014112:	f105 0305 	add.w	r3, r5, #5
 8014116:	d06c      	beq.n	80141f2 <ucdr_deserialize_endian_double+0x16e>
 8014118:	f899 3002 	ldrb.w	r3, [r9, #2]
 801411c:	2e05      	cmp	r6, #5
 801411e:	716b      	strb	r3, [r5, #5]
 8014120:	f105 0306 	add.w	r3, r5, #6
 8014124:	d069      	beq.n	80141fa <ucdr_deserialize_endian_double+0x176>
 8014126:	f899 3001 	ldrb.w	r3, [r9, #1]
 801412a:	2e06      	cmp	r6, #6
 801412c:	71ab      	strb	r3, [r5, #6]
 801412e:	f105 0307 	add.w	r3, r5, #7
 8014132:	d066      	beq.n	8014202 <ucdr_deserialize_endian_double+0x17e>
 8014134:	f899 3000 	ldrb.w	r3, [r9]
 8014138:	71eb      	strb	r3, [r5, #7]
 801413a:	6923      	ldr	r3, [r4, #16]
 801413c:	2108      	movs	r1, #8
 801413e:	68a2      	ldr	r2, [r4, #8]
 8014140:	3308      	adds	r3, #8
 8014142:	7da0      	ldrb	r0, [r4, #22]
 8014144:	4452      	add	r2, sl
 8014146:	7561      	strb	r1, [r4, #21]
 8014148:	1b9e      	subs	r6, r3, r6
 801414a:	f080 0001 	eor.w	r0, r0, #1
 801414e:	60a2      	str	r2, [r4, #8]
 8014150:	6126      	str	r6, [r4, #16]
 8014152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014156:	2108      	movs	r1, #8
 8014158:	4620      	mov	r0, r4
 801415a:	f000 f86d 	bl	8014238 <ucdr_check_final_buffer_behavior>
 801415e:	b308      	cbz	r0, 80141a4 <ucdr_deserialize_endian_double+0x120>
 8014160:	2f01      	cmp	r7, #1
 8014162:	68a3      	ldr	r3, [r4, #8]
 8014164:	d023      	beq.n	80141ae <ucdr_deserialize_endian_double+0x12a>
 8014166:	79db      	ldrb	r3, [r3, #7]
 8014168:	702b      	strb	r3, [r5, #0]
 801416a:	68a3      	ldr	r3, [r4, #8]
 801416c:	799b      	ldrb	r3, [r3, #6]
 801416e:	706b      	strb	r3, [r5, #1]
 8014170:	68a3      	ldr	r3, [r4, #8]
 8014172:	795b      	ldrb	r3, [r3, #5]
 8014174:	70ab      	strb	r3, [r5, #2]
 8014176:	68a3      	ldr	r3, [r4, #8]
 8014178:	791b      	ldrb	r3, [r3, #4]
 801417a:	70eb      	strb	r3, [r5, #3]
 801417c:	68a3      	ldr	r3, [r4, #8]
 801417e:	78db      	ldrb	r3, [r3, #3]
 8014180:	712b      	strb	r3, [r5, #4]
 8014182:	68a3      	ldr	r3, [r4, #8]
 8014184:	789b      	ldrb	r3, [r3, #2]
 8014186:	716b      	strb	r3, [r5, #5]
 8014188:	68a3      	ldr	r3, [r4, #8]
 801418a:	785b      	ldrb	r3, [r3, #1]
 801418c:	71ab      	strb	r3, [r5, #6]
 801418e:	68a3      	ldr	r3, [r4, #8]
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	71eb      	strb	r3, [r5, #7]
 8014194:	2108      	movs	r1, #8
 8014196:	68a2      	ldr	r2, [r4, #8]
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	440a      	add	r2, r1
 801419c:	7561      	strb	r1, [r4, #21]
 801419e:	440b      	add	r3, r1
 80141a0:	60a2      	str	r2, [r4, #8]
 80141a2:	6123      	str	r3, [r4, #16]
 80141a4:	7da0      	ldrb	r0, [r4, #22]
 80141a6:	f080 0001 	eor.w	r0, r0, #1
 80141aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	602a      	str	r2, [r5, #0]
 80141b4:	606b      	str	r3, [r5, #4]
 80141b6:	e7ed      	b.n	8014194 <ucdr_deserialize_endian_double+0x110>
 80141b8:	68a2      	ldr	r2, [r4, #8]
 80141ba:	6923      	ldr	r3, [r4, #16]
 80141bc:	1b92      	subs	r2, r2, r6
 80141be:	7da0      	ldrb	r0, [r4, #22]
 80141c0:	1b9b      	subs	r3, r3, r6
 80141c2:	f884 8015 	strb.w	r8, [r4, #21]
 80141c6:	f080 0001 	eor.w	r0, r0, #1
 80141ca:	60a2      	str	r2, [r4, #8]
 80141cc:	6123      	str	r3, [r4, #16]
 80141ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d2:	68a3      	ldr	r3, [r4, #8]
 80141d4:	799b      	ldrb	r3, [r3, #6]
 80141d6:	706b      	strb	r3, [r5, #1]
 80141d8:	1cab      	adds	r3, r5, #2
 80141da:	68a2      	ldr	r2, [r4, #8]
 80141dc:	7952      	ldrb	r2, [r2, #5]
 80141de:	f803 2b01 	strb.w	r2, [r3], #1
 80141e2:	68a2      	ldr	r2, [r4, #8]
 80141e4:	7912      	ldrb	r2, [r2, #4]
 80141e6:	f803 2b01 	strb.w	r2, [r3], #1
 80141ea:	68a2      	ldr	r2, [r4, #8]
 80141ec:	78d2      	ldrb	r2, [r2, #3]
 80141ee:	f803 2b01 	strb.w	r2, [r3], #1
 80141f2:	68a2      	ldr	r2, [r4, #8]
 80141f4:	7892      	ldrb	r2, [r2, #2]
 80141f6:	f803 2b01 	strb.w	r2, [r3], #1
 80141fa:	68a2      	ldr	r2, [r4, #8]
 80141fc:	7852      	ldrb	r2, [r2, #1]
 80141fe:	f803 2b01 	strb.w	r2, [r3], #1
 8014202:	68a2      	ldr	r2, [r4, #8]
 8014204:	7812      	ldrb	r2, [r2, #0]
 8014206:	701a      	strb	r2, [r3, #0]
 8014208:	e797      	b.n	801413a <ucdr_deserialize_endian_double+0xb6>
 801420a:	4649      	mov	r1, r9
 801420c:	4632      	mov	r2, r6
 801420e:	4628      	mov	r0, r5
 8014210:	f00a f853 	bl	801e2ba <memcpy>
 8014214:	4652      	mov	r2, sl
 8014216:	19a8      	adds	r0, r5, r6
 8014218:	68a1      	ldr	r1, [r4, #8]
 801421a:	f00a f84e 	bl	801e2ba <memcpy>
 801421e:	e78c      	b.n	801413a <ucdr_deserialize_endian_double+0xb6>

08014220 <ucdr_check_buffer_available_for>:
 8014220:	7d83      	ldrb	r3, [r0, #22]
 8014222:	b93b      	cbnz	r3, 8014234 <ucdr_check_buffer_available_for+0x14>
 8014224:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8014228:	4419      	add	r1, r3
 801422a:	4288      	cmp	r0, r1
 801422c:	bf34      	ite	cc
 801422e:	2000      	movcc	r0, #0
 8014230:	2001      	movcs	r0, #1
 8014232:	4770      	bx	lr
 8014234:	2000      	movs	r0, #0
 8014236:	4770      	bx	lr

08014238 <ucdr_check_final_buffer_behavior>:
 8014238:	7d83      	ldrb	r3, [r0, #22]
 801423a:	b943      	cbnz	r3, 801424e <ucdr_check_final_buffer_behavior+0x16>
 801423c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014240:	b510      	push	{r4, lr}
 8014242:	4291      	cmp	r1, r2
 8014244:	4604      	mov	r4, r0
 8014246:	d205      	bcs.n	8014254 <ucdr_check_final_buffer_behavior+0x1c>
 8014248:	2301      	movs	r3, #1
 801424a:	4618      	mov	r0, r3
 801424c:	bd10      	pop	{r4, pc}
 801424e:	2300      	movs	r3, #0
 8014250:	4618      	mov	r0, r3
 8014252:	4770      	bx	lr
 8014254:	6982      	ldr	r2, [r0, #24]
 8014256:	b13a      	cbz	r2, 8014268 <ucdr_check_final_buffer_behavior+0x30>
 8014258:	69c1      	ldr	r1, [r0, #28]
 801425a:	4790      	blx	r2
 801425c:	f080 0301 	eor.w	r3, r0, #1
 8014260:	75a0      	strb	r0, [r4, #22]
 8014262:	b2db      	uxtb	r3, r3
 8014264:	4618      	mov	r0, r3
 8014266:	bd10      	pop	{r4, pc}
 8014268:	2001      	movs	r0, #1
 801426a:	75a0      	strb	r0, [r4, #22]
 801426c:	e7fa      	b.n	8014264 <ucdr_check_final_buffer_behavior+0x2c>
 801426e:	bf00      	nop

08014270 <ucdr_set_on_full_buffer_callback>:
 8014270:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop

08014278 <ucdr_init_buffer_origin_offset_endian>:
 8014278:	b410      	push	{r4}
 801427a:	9c01      	ldr	r4, [sp, #4]
 801427c:	440a      	add	r2, r1
 801427e:	6001      	str	r1, [r0, #0]
 8014280:	6042      	str	r2, [r0, #4]
 8014282:	190a      	adds	r2, r1, r4
 8014284:	441c      	add	r4, r3
 8014286:	6082      	str	r2, [r0, #8]
 8014288:	2200      	movs	r2, #0
 801428a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801428e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014292:	7542      	strb	r2, [r0, #21]
 8014294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014298:	7582      	strb	r2, [r0, #22]
 801429a:	7503      	strb	r3, [r0, #20]
 801429c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop

080142a4 <ucdr_init_buffer_origin_offset>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	9c04      	ldr	r4, [sp, #16]
 80142aa:	9400      	str	r4, [sp, #0]
 80142ac:	2401      	movs	r4, #1
 80142ae:	9401      	str	r4, [sp, #4]
 80142b0:	f7ff ffe2 	bl	8014278 <ucdr_init_buffer_origin_offset_endian>
 80142b4:	b002      	add	sp, #8
 80142b6:	bd10      	pop	{r4, pc}

080142b8 <ucdr_init_buffer_origin>:
 80142b8:	b510      	push	{r4, lr}
 80142ba:	2400      	movs	r4, #0
 80142bc:	b082      	sub	sp, #8
 80142be:	9400      	str	r4, [sp, #0]
 80142c0:	f7ff fff0 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 80142c4:	b002      	add	sp, #8
 80142c6:	bd10      	pop	{r4, pc}

080142c8 <ucdr_init_buffer>:
 80142c8:	2300      	movs	r3, #0
 80142ca:	f7ff bff5 	b.w	80142b8 <ucdr_init_buffer_origin>
 80142ce:	bf00      	nop

080142d0 <ucdr_alignment>:
 80142d0:	fbb0 f2f1 	udiv	r2, r0, r1
 80142d4:	fb02 0011 	mls	r0, r2, r1, r0
 80142d8:	1e4b      	subs	r3, r1, #1
 80142da:	1a08      	subs	r0, r1, r0
 80142dc:	4018      	ands	r0, r3
 80142de:	4770      	bx	lr

080142e0 <ucdr_buffer_alignment>:
 80142e0:	7d43      	ldrb	r3, [r0, #21]
 80142e2:	428b      	cmp	r3, r1
 80142e4:	d209      	bcs.n	80142fa <ucdr_buffer_alignment+0x1a>
 80142e6:	6903      	ldr	r3, [r0, #16]
 80142e8:	1e4a      	subs	r2, r1, #1
 80142ea:	fbb3 f0f1 	udiv	r0, r3, r1
 80142ee:	fb01 3010 	mls	r0, r1, r0, r3
 80142f2:	1a09      	subs	r1, r1, r0
 80142f4:	ea01 0002 	and.w	r0, r1, r2
 80142f8:	4770      	bx	lr
 80142fa:	2000      	movs	r0, #0
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop

08014300 <ucdr_align_to>:
 8014300:	b538      	push	{r3, r4, r5, lr}
 8014302:	4604      	mov	r4, r0
 8014304:	460d      	mov	r5, r1
 8014306:	f7ff ffeb 	bl	80142e0 <ucdr_buffer_alignment>
 801430a:	68a3      	ldr	r3, [r4, #8]
 801430c:	7565      	strb	r5, [r4, #21]
 801430e:	181a      	adds	r2, r3, r0
 8014310:	6923      	ldr	r3, [r4, #16]
 8014312:	4418      	add	r0, r3
 8014314:	6863      	ldr	r3, [r4, #4]
 8014316:	4293      	cmp	r3, r2
 8014318:	6120      	str	r0, [r4, #16]
 801431a:	bf28      	it	cs
 801431c:	4613      	movcs	r3, r2
 801431e:	60a3      	str	r3, [r4, #8]
 8014320:	bd38      	pop	{r3, r4, r5, pc}
 8014322:	bf00      	nop

08014324 <ucdr_buffer_length>:
 8014324:	6882      	ldr	r2, [r0, #8]
 8014326:	6800      	ldr	r0, [r0, #0]
 8014328:	1a10      	subs	r0, r2, r0
 801432a:	4770      	bx	lr

0801432c <ucdr_buffer_remaining>:
 801432c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8014330:	1a10      	subs	r0, r2, r0
 8014332:	4770      	bx	lr

08014334 <ucdr_check_final_buffer_behavior_array>:
 8014334:	b538      	push	{r3, r4, r5, lr}
 8014336:	7d83      	ldrb	r3, [r0, #22]
 8014338:	b9a3      	cbnz	r3, 8014364 <ucdr_check_final_buffer_behavior_array+0x30>
 801433a:	4604      	mov	r4, r0
 801433c:	460d      	mov	r5, r1
 801433e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014342:	429a      	cmp	r2, r3
 8014344:	d300      	bcc.n	8014348 <ucdr_check_final_buffer_behavior_array+0x14>
 8014346:	b931      	cbnz	r1, 8014356 <ucdr_check_final_buffer_behavior_array+0x22>
 8014348:	4620      	mov	r0, r4
 801434a:	f7ff ffef 	bl	801432c <ucdr_buffer_remaining>
 801434e:	42a8      	cmp	r0, r5
 8014350:	bf28      	it	cs
 8014352:	4628      	movcs	r0, r5
 8014354:	bd38      	pop	{r3, r4, r5, pc}
 8014356:	6983      	ldr	r3, [r0, #24]
 8014358:	b133      	cbz	r3, 8014368 <ucdr_check_final_buffer_behavior_array+0x34>
 801435a:	69c1      	ldr	r1, [r0, #28]
 801435c:	4798      	blx	r3
 801435e:	75a0      	strb	r0, [r4, #22]
 8014360:	2800      	cmp	r0, #0
 8014362:	d0f1      	beq.n	8014348 <ucdr_check_final_buffer_behavior_array+0x14>
 8014364:	2000      	movs	r0, #0
 8014366:	bd38      	pop	{r3, r4, r5, pc}
 8014368:	2301      	movs	r3, #1
 801436a:	7583      	strb	r3, [r0, #22]
 801436c:	e7fa      	b.n	8014364 <ucdr_check_final_buffer_behavior_array+0x30>
 801436e:	bf00      	nop

08014370 <ucdr_advance_buffer>:
 8014370:	b538      	push	{r3, r4, r5, lr}
 8014372:	4604      	mov	r4, r0
 8014374:	460d      	mov	r5, r1
 8014376:	f7ff ff53 	bl	8014220 <ucdr_check_buffer_available_for>
 801437a:	b178      	cbz	r0, 801439c <ucdr_advance_buffer+0x2c>
 801437c:	6923      	ldr	r3, [r4, #16]
 801437e:	68a2      	ldr	r2, [r4, #8]
 8014380:	442b      	add	r3, r5
 8014382:	442a      	add	r2, r5
 8014384:	6123      	str	r3, [r4, #16]
 8014386:	2301      	movs	r3, #1
 8014388:	60a2      	str	r2, [r4, #8]
 801438a:	7563      	strb	r3, [r4, #21]
 801438c:	bd38      	pop	{r3, r4, r5, pc}
 801438e:	68a2      	ldr	r2, [r4, #8]
 8014390:	1a2d      	subs	r5, r5, r0
 8014392:	6923      	ldr	r3, [r4, #16]
 8014394:	4402      	add	r2, r0
 8014396:	4418      	add	r0, r3
 8014398:	60a2      	str	r2, [r4, #8]
 801439a:	6120      	str	r0, [r4, #16]
 801439c:	4629      	mov	r1, r5
 801439e:	2201      	movs	r2, #1
 80143a0:	4620      	mov	r0, r4
 80143a2:	f7ff ffc7 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d1f1      	bne.n	801438e <ucdr_advance_buffer+0x1e>
 80143aa:	2301      	movs	r3, #1
 80143ac:	7563      	strb	r3, [r4, #21]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}

080143b0 <ucdr_serialize_sequence_char>:
 80143b0:	b570      	push	{r4, r5, r6, lr}
 80143b2:	4615      	mov	r5, r2
 80143b4:	460e      	mov	r6, r1
 80143b6:	7d01      	ldrb	r1, [r0, #20]
 80143b8:	4604      	mov	r4, r0
 80143ba:	f7ff f8e7 	bl	801358c <ucdr_serialize_endian_uint32_t>
 80143be:	b90d      	cbnz	r5, 80143c4 <ucdr_serialize_sequence_char+0x14>
 80143c0:	2001      	movs	r0, #1
 80143c2:	bd70      	pop	{r4, r5, r6, pc}
 80143c4:	462b      	mov	r3, r5
 80143c6:	4632      	mov	r2, r6
 80143c8:	7d21      	ldrb	r1, [r4, #20]
 80143ca:	4620      	mov	r0, r4
 80143cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143d0:	f007 be5e 	b.w	801c090 <ucdr_serialize_endian_array_char>

080143d4 <ucdr_deserialize_sequence_char>:
 80143d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143d8:	461d      	mov	r5, r3
 80143da:	4616      	mov	r6, r2
 80143dc:	460f      	mov	r7, r1
 80143de:	461a      	mov	r2, r3
 80143e0:	7d01      	ldrb	r1, [r0, #20]
 80143e2:	4604      	mov	r4, r0
 80143e4:	f7ff f9fa 	bl	80137dc <ucdr_deserialize_endian_uint32_t>
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	429e      	cmp	r6, r3
 80143ec:	d201      	bcs.n	80143f2 <ucdr_deserialize_sequence_char+0x1e>
 80143ee:	2201      	movs	r2, #1
 80143f0:	75a2      	strb	r2, [r4, #22]
 80143f2:	b913      	cbnz	r3, 80143fa <ucdr_deserialize_sequence_char+0x26>
 80143f4:	2001      	movs	r0, #1
 80143f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143fa:	463a      	mov	r2, r7
 80143fc:	7d21      	ldrb	r1, [r4, #20]
 80143fe:	4620      	mov	r0, r4
 8014400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014404:	f007 be76 	b.w	801c0f4 <ucdr_deserialize_endian_array_char>

08014408 <ucdr_serialize_sequence_uint8_t>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	4615      	mov	r5, r2
 801440c:	460e      	mov	r6, r1
 801440e:	7d01      	ldrb	r1, [r0, #20]
 8014410:	4604      	mov	r4, r0
 8014412:	f7ff f8bb 	bl	801358c <ucdr_serialize_endian_uint32_t>
 8014416:	b90d      	cbnz	r5, 801441c <ucdr_serialize_sequence_uint8_t+0x14>
 8014418:	2001      	movs	r0, #1
 801441a:	bd70      	pop	{r4, r5, r6, pc}
 801441c:	462b      	mov	r3, r5
 801441e:	4632      	mov	r2, r6
 8014420:	7d21      	ldrb	r1, [r4, #20]
 8014422:	4620      	mov	r0, r4
 8014424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014428:	f007 beca 	b.w	801c1c0 <ucdr_serialize_endian_array_uint8_t>

0801442c <ucdr_deserialize_sequence_uint8_t>:
 801442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014430:	461d      	mov	r5, r3
 8014432:	4616      	mov	r6, r2
 8014434:	460f      	mov	r7, r1
 8014436:	461a      	mov	r2, r3
 8014438:	7d01      	ldrb	r1, [r0, #20]
 801443a:	4604      	mov	r4, r0
 801443c:	f7ff f9ce 	bl	80137dc <ucdr_deserialize_endian_uint32_t>
 8014440:	682b      	ldr	r3, [r5, #0]
 8014442:	429e      	cmp	r6, r3
 8014444:	d201      	bcs.n	801444a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8014446:	2201      	movs	r2, #1
 8014448:	75a2      	strb	r2, [r4, #22]
 801444a:	b913      	cbnz	r3, 8014452 <ucdr_deserialize_sequence_uint8_t+0x26>
 801444c:	2001      	movs	r0, #1
 801444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014452:	463a      	mov	r2, r7
 8014454:	7d21      	ldrb	r1, [r4, #20]
 8014456:	4620      	mov	r0, r4
 8014458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445c:	f007 bf16 	b.w	801c28c <ucdr_deserialize_endian_array_uint8_t>

08014460 <ucdr_serialize_sequence_double>:
 8014460:	b570      	push	{r4, r5, r6, lr}
 8014462:	4615      	mov	r5, r2
 8014464:	460e      	mov	r6, r1
 8014466:	7d01      	ldrb	r1, [r0, #20]
 8014468:	4604      	mov	r4, r0
 801446a:	f7ff f88f 	bl	801358c <ucdr_serialize_endian_uint32_t>
 801446e:	b90d      	cbnz	r5, 8014474 <ucdr_serialize_sequence_double+0x14>
 8014470:	2001      	movs	r0, #1
 8014472:	bd70      	pop	{r4, r5, r6, pc}
 8014474:	462b      	mov	r3, r5
 8014476:	4632      	mov	r2, r6
 8014478:	7d21      	ldrb	r1, [r4, #20]
 801447a:	4620      	mov	r0, r4
 801447c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014480:	f007 bf38 	b.w	801c2f4 <ucdr_serialize_endian_array_double>

08014484 <ucdr_deserialize_sequence_double>:
 8014484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014488:	461d      	mov	r5, r3
 801448a:	4616      	mov	r6, r2
 801448c:	460f      	mov	r7, r1
 801448e:	461a      	mov	r2, r3
 8014490:	7d01      	ldrb	r1, [r0, #20]
 8014492:	4604      	mov	r4, r0
 8014494:	f7ff f9a2 	bl	80137dc <ucdr_deserialize_endian_uint32_t>
 8014498:	682b      	ldr	r3, [r5, #0]
 801449a:	429e      	cmp	r6, r3
 801449c:	d201      	bcs.n	80144a2 <ucdr_deserialize_sequence_double+0x1e>
 801449e:	2201      	movs	r2, #1
 80144a0:	75a2      	strb	r2, [r4, #22]
 80144a2:	b913      	cbnz	r3, 80144aa <ucdr_deserialize_sequence_double+0x26>
 80144a4:	2001      	movs	r0, #1
 80144a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144aa:	463a      	mov	r2, r7
 80144ac:	7d21      	ldrb	r1, [r4, #20]
 80144ae:	4620      	mov	r0, r4
 80144b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144b4:	f007 bf72 	b.w	801c39c <ucdr_deserialize_endian_array_double>

080144b8 <uxr_buffer_delete_entity>:
 80144b8:	b510      	push	{r4, lr}
 80144ba:	2300      	movs	r3, #0
 80144bc:	b08e      	sub	sp, #56	@ 0x38
 80144be:	4604      	mov	r4, r0
 80144c0:	9103      	str	r1, [sp, #12]
 80144c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80144c6:	2303      	movs	r3, #3
 80144c8:	2204      	movs	r2, #4
 80144ca:	9300      	str	r3, [sp, #0]
 80144cc:	ab06      	add	r3, sp, #24
 80144ce:	f001 fab1 	bl	8015a34 <uxr_prepare_stream_to_write_submessage>
 80144d2:	b918      	cbnz	r0, 80144dc <uxr_buffer_delete_entity+0x24>
 80144d4:	4604      	mov	r4, r0
 80144d6:	4620      	mov	r0, r4
 80144d8:	b00e      	add	sp, #56	@ 0x38
 80144da:	bd10      	pop	{r4, pc}
 80144dc:	9902      	ldr	r1, [sp, #8]
 80144de:	aa05      	add	r2, sp, #20
 80144e0:	4620      	mov	r0, r4
 80144e2:	f001 fbe3 	bl	8015cac <uxr_init_base_object_request>
 80144e6:	4604      	mov	r4, r0
 80144e8:	a905      	add	r1, sp, #20
 80144ea:	a806      	add	r0, sp, #24
 80144ec:	f003 f9c8 	bl	8017880 <uxr_serialize_DELETE_Payload>
 80144f0:	4620      	mov	r0, r4
 80144f2:	b00e      	add	sp, #56	@ 0x38
 80144f4:	bd10      	pop	{r4, pc}
 80144f6:	bf00      	nop

080144f8 <uxr_common_create_entity>:
 80144f8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80144fc:	b510      	push	{r4, lr}
 80144fe:	f1bc 0f01 	cmp.w	ip, #1
 8014502:	b08c      	sub	sp, #48	@ 0x30
 8014504:	4604      	mov	r4, r0
 8014506:	9202      	str	r2, [sp, #8]
 8014508:	bf0c      	ite	eq
 801450a:	f003 0201 	andeq.w	r2, r3, #1
 801450e:	2200      	movne	r2, #0
 8014510:	330e      	adds	r3, #14
 8014512:	9103      	str	r1, [sp, #12]
 8014514:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8014518:	441a      	add	r2, r3
 801451a:	ab04      	add	r3, sp, #16
 801451c:	9101      	str	r1, [sp, #4]
 801451e:	2101      	movs	r1, #1
 8014520:	b292      	uxth	r2, r2
 8014522:	9100      	str	r1, [sp, #0]
 8014524:	9903      	ldr	r1, [sp, #12]
 8014526:	f001 fa85 	bl	8015a34 <uxr_prepare_stream_to_write_submessage>
 801452a:	b918      	cbnz	r0, 8014534 <uxr_common_create_entity+0x3c>
 801452c:	4604      	mov	r4, r0
 801452e:	4620      	mov	r0, r4
 8014530:	b00c      	add	sp, #48	@ 0x30
 8014532:	bd10      	pop	{r4, pc}
 8014534:	9902      	ldr	r1, [sp, #8]
 8014536:	4620      	mov	r0, r4
 8014538:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801453a:	f001 fbb7 	bl	8015cac <uxr_init_base_object_request>
 801453e:	4604      	mov	r4, r0
 8014540:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014542:	a804      	add	r0, sp, #16
 8014544:	f003 f8f6 	bl	8017734 <uxr_serialize_CREATE_Payload>
 8014548:	4620      	mov	r0, r4
 801454a:	b00c      	add	sp, #48	@ 0x30
 801454c:	bd10      	pop	{r4, pc}
 801454e:	bf00      	nop

08014550 <uxr_buffer_create_participant_bin>:
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014556:	4605      	mov	r5, r0
 8014558:	ac11      	add	r4, sp, #68	@ 0x44
 801455a:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801455e:	2303      	movs	r3, #3
 8014560:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014564:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014568:	7223      	strb	r3, [r4, #8]
 801456a:	2300      	movs	r3, #0
 801456c:	2201      	movs	r2, #1
 801456e:	f88d 3014 	strb.w	r3, [sp, #20]
 8014572:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014574:	7122      	strb	r2, [r4, #4]
 8014576:	b1cb      	cbz	r3, 80145ac <uxr_buffer_create_participant_bin+0x5c>
 8014578:	f88d 201c 	strb.w	r2, [sp, #28]
 801457c:	9308      	str	r3, [sp, #32]
 801457e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014582:	a915      	add	r1, sp, #84	@ 0x54
 8014584:	a809      	add	r0, sp, #36	@ 0x24
 8014586:	f7ff fe9f 	bl	80142c8 <ucdr_init_buffer>
 801458a:	a905      	add	r1, sp, #20
 801458c:	a809      	add	r0, sp, #36	@ 0x24
 801458e:	f002 fda7 	bl	80170e0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014594:	9600      	str	r6, [sp, #0]
 8014596:	4628      	mov	r0, r5
 8014598:	9401      	str	r4, [sp, #4]
 801459a:	60e3      	str	r3, [r4, #12]
 801459c:	b29b      	uxth	r3, r3
 801459e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80145a2:	f7ff ffa9 	bl	80144f8 <uxr_common_create_entity>
 80145a6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80145aa:	bd70      	pop	{r4, r5, r6, pc}
 80145ac:	f88d 301c 	strb.w	r3, [sp, #28]
 80145b0:	e7e5      	b.n	801457e <uxr_buffer_create_participant_bin+0x2e>
 80145b2:	bf00      	nop

080145b4 <uxr_buffer_create_topic_bin>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80145ba:	4605      	mov	r5, r0
 80145bc:	4618      	mov	r0, r3
 80145be:	9105      	str	r1, [sp, #20]
 80145c0:	a997      	add	r1, sp, #604	@ 0x25c
 80145c2:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80145c6:	ac13      	add	r4, sp, #76	@ 0x4c
 80145c8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80145cc:	2302      	movs	r3, #2
 80145ce:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80145d2:	f000 f9ab 	bl	801492c <uxr_object_id_to_raw>
 80145d6:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80145d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80145dc:	a917      	add	r1, sp, #92	@ 0x5c
 80145de:	a80b      	add	r0, sp, #44	@ 0x2c
 80145e0:	9306      	str	r3, [sp, #24]
 80145e2:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80145e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80145e6:	2303      	movs	r3, #3
 80145e8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80145ec:	2301      	movs	r3, #1
 80145ee:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80145f2:	2300      	movs	r3, #0
 80145f4:	f88d 301c 	strb.w	r3, [sp, #28]
 80145f8:	f7ff fe66 	bl	80142c8 <ucdr_init_buffer>
 80145fc:	a906      	add	r1, sp, #24
 80145fe:	a80b      	add	r0, sp, #44	@ 0x2c
 8014600:	f002 fd90 	bl	8017124 <uxr_serialize_OBJK_Topic_Binary>
 8014604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014606:	4628      	mov	r0, r5
 8014608:	9600      	str	r6, [sp, #0]
 801460a:	9316      	str	r3, [sp, #88]	@ 0x58
 801460c:	b29b      	uxth	r3, r3
 801460e:	9401      	str	r4, [sp, #4]
 8014610:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014614:	f7ff ff70 	bl	80144f8 <uxr_common_create_entity>
 8014618:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801461c:	bd70      	pop	{r4, r5, r6, pc}
 801461e:	bf00      	nop

08014620 <uxr_buffer_create_publisher_bin>:
 8014620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014622:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8014626:	2603      	movs	r6, #3
 8014628:	4605      	mov	r5, r0
 801462a:	4618      	mov	r0, r3
 801462c:	9105      	str	r1, [sp, #20]
 801462e:	a992      	add	r1, sp, #584	@ 0x248
 8014630:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8014634:	ac0e      	add	r4, sp, #56	@ 0x38
 8014636:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801463a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801463e:	f000 f975 	bl	801492c <uxr_object_id_to_raw>
 8014642:	2300      	movs	r3, #0
 8014644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014648:	a912      	add	r1, sp, #72	@ 0x48
 801464a:	a806      	add	r0, sp, #24
 801464c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014650:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014654:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8014658:	f7ff fe36 	bl	80142c8 <ucdr_init_buffer>
 801465c:	a993      	add	r1, sp, #588	@ 0x24c
 801465e:	a806      	add	r0, sp, #24
 8014660:	f002 fe14 	bl	801728c <uxr_serialize_OBJK_Publisher_Binary>
 8014664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014666:	4628      	mov	r0, r5
 8014668:	9700      	str	r7, [sp, #0]
 801466a:	9311      	str	r3, [sp, #68]	@ 0x44
 801466c:	b29b      	uxth	r3, r3
 801466e:	9401      	str	r4, [sp, #4]
 8014670:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014674:	f7ff ff40 	bl	80144f8 <uxr_common_create_entity>
 8014678:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801467e:	bf00      	nop

08014680 <uxr_buffer_create_datawriter_bin>:
 8014680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014684:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014688:	4606      	mov	r6, r0
 801468a:	4618      	mov	r0, r3
 801468c:	2703      	movs	r7, #3
 801468e:	ac1d      	add	r4, sp, #116	@ 0x74
 8014690:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8014694:	9105      	str	r1, [sp, #20]
 8014696:	a9a1      	add	r1, sp, #644	@ 0x284
 8014698:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801469c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80146a0:	2305      	movs	r3, #5
 80146a2:	7123      	strb	r3, [r4, #4]
 80146a4:	f000 f942 	bl	801492c <uxr_object_id_to_raw>
 80146a8:	a90e      	add	r1, sp, #56	@ 0x38
 80146aa:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80146ac:	7227      	strb	r7, [r4, #8]
 80146ae:	f000 f93d 	bl	801492c <uxr_object_id_to_raw>
 80146b2:	2300      	movs	r3, #0
 80146b4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80146b8:	3d00      	subs	r5, #0
 80146ba:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80146be:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80146c2:	bf18      	it	ne
 80146c4:	2501      	movne	r5, #1
 80146c6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80146ca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80146ce:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80146d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80146d6:	2301      	movs	r3, #1
 80146d8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80146dc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80146e0:	bb8a      	cbnz	r2, 8014746 <uxr_buffer_create_datawriter_bin+0xc6>
 80146e2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80146e6:	f04f 0c13 	mov.w	ip, #19
 80146ea:	250b      	movs	r5, #11
 80146ec:	2221      	movs	r2, #33	@ 0x21
 80146ee:	2111      	movs	r1, #17
 80146f0:	2009      	movs	r0, #9
 80146f2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80146f6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80146fa:	b923      	cbnz	r3, 8014706 <uxr_buffer_create_datawriter_bin+0x86>
 80146fc:	4672      	mov	r2, lr
 80146fe:	4661      	mov	r1, ip
 8014700:	4628      	mov	r0, r5
 8014702:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8014706:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801470a:	2b01      	cmp	r3, #1
 801470c:	d025      	beq.n	801475a <uxr_buffer_create_datawriter_bin+0xda>
 801470e:	2b03      	cmp	r3, #3
 8014710:	d029      	beq.n	8014766 <uxr_buffer_create_datawriter_bin+0xe6>
 8014712:	b32b      	cbz	r3, 8014760 <uxr_buffer_create_datawriter_bin+0xe0>
 8014714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014718:	a921      	add	r1, sp, #132	@ 0x84
 801471a:	a806      	add	r0, sp, #24
 801471c:	f7ff fdd4 	bl	80142c8 <ucdr_init_buffer>
 8014720:	a90e      	add	r1, sp, #56	@ 0x38
 8014722:	a806      	add	r0, sp, #24
 8014724:	f002 fe28 	bl	8017378 <uxr_serialize_OBJK_DataWriter_Binary>
 8014728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801472a:	f8cd 8000 	str.w	r8, [sp]
 801472e:	4630      	mov	r0, r6
 8014730:	9401      	str	r4, [sp, #4]
 8014732:	60e3      	str	r3, [r4, #12]
 8014734:	b29b      	uxth	r3, r3
 8014736:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801473a:	f7ff fedd 	bl	80144f8 <uxr_common_create_entity>
 801473e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014746:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801474a:	f04f 0c12 	mov.w	ip, #18
 801474e:	250a      	movs	r5, #10
 8014750:	2220      	movs	r2, #32
 8014752:	2110      	movs	r1, #16
 8014754:	2008      	movs	r0, #8
 8014756:	2702      	movs	r7, #2
 8014758:	e7cd      	b.n	80146f6 <uxr_buffer_create_datawriter_bin+0x76>
 801475a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801475e:	e7d9      	b.n	8014714 <uxr_buffer_create_datawriter_bin+0x94>
 8014760:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8014764:	e7d6      	b.n	8014714 <uxr_buffer_create_datawriter_bin+0x94>
 8014766:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801476a:	e7d3      	b.n	8014714 <uxr_buffer_create_datawriter_bin+0x94>

0801476c <get_custom_error>:
 801476c:	4b01      	ldr	r3, [pc, #4]	@ (8014774 <get_custom_error+0x8>)
 801476e:	7818      	ldrb	r0, [r3, #0]
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	24012f9c 	.word	0x24012f9c

08014778 <recv_custom_msg>:
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	4693      	mov	fp, r2
 801477e:	b089      	sub	sp, #36	@ 0x24
 8014780:	2200      	movs	r2, #0
 8014782:	4604      	mov	r4, r0
 8014784:	468a      	mov	sl, r1
 8014786:	9305      	str	r3, [sp, #20]
 8014788:	f88d 201e 	strb.w	r2, [sp, #30]
 801478c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014790:	b322      	cbz	r2, 80147dc <recv_custom_msg+0x64>
 8014792:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014796:	f10d 081f 	add.w	r8, sp, #31
 801479a:	af05      	add	r7, sp, #20
 801479c:	f10d 061e 	add.w	r6, sp, #30
 80147a0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80147a4:	e002      	b.n	80147ac <recv_custom_msg+0x34>
 80147a6:	9b05      	ldr	r3, [sp, #20]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	dd0f      	ble.n	80147cc <recv_custom_msg+0x54>
 80147ac:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80147b0:	4623      	mov	r3, r4
 80147b2:	4622      	mov	r2, r4
 80147b4:	4648      	mov	r0, r9
 80147b6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80147ba:	e9cd 5600 	strd	r5, r6, [sp]
 80147be:	f001 fc8b 	bl	80160d8 <uxr_read_framed_msg>
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d0ef      	beq.n	80147a6 <recv_custom_msg+0x2e>
 80147c6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80147ca:	b1b3      	cbz	r3, 80147fa <recv_custom_msg+0x82>
 80147cc:	4b0f      	ldr	r3, [pc, #60]	@ (801480c <recv_custom_msg+0x94>)
 80147ce:	2000      	movs	r0, #0
 80147d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80147d4:	701a      	strb	r2, [r3, #0]
 80147d6:	b009      	add	sp, #36	@ 0x24
 80147d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147dc:	f10d 021f 	add.w	r2, sp, #31
 80147e0:	4601      	mov	r1, r0
 80147e2:	9200      	str	r2, [sp, #0]
 80147e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147e8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80147ec:	47a8      	blx	r5
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d0ec      	beq.n	80147cc <recv_custom_msg+0x54>
 80147f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1e8      	bne.n	80147cc <recv_custom_msg+0x54>
 80147fa:	f8cb 0000 	str.w	r0, [fp]
 80147fe:	2001      	movs	r0, #1
 8014800:	f8ca 4000 	str.w	r4, [sl]
 8014804:	b009      	add	sp, #36	@ 0x24
 8014806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801480a:	bf00      	nop
 801480c:	24012f9c 	.word	0x24012f9c

08014810 <send_custom_msg>:
 8014810:	b530      	push	{r4, r5, lr}
 8014812:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014816:	b087      	sub	sp, #28
 8014818:	4614      	mov	r4, r2
 801481a:	b995      	cbnz	r5, 8014842 <send_custom_msg+0x32>
 801481c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8014820:	f10d 0317 	add.w	r3, sp, #23
 8014824:	47a8      	blx	r5
 8014826:	1e03      	subs	r3, r0, #0
 8014828:	bf18      	it	ne
 801482a:	2301      	movne	r3, #1
 801482c:	42a0      	cmp	r0, r4
 801482e:	bf18      	it	ne
 8014830:	2300      	movne	r3, #0
 8014832:	b91b      	cbnz	r3, 801483c <send_custom_msg+0x2c>
 8014834:	4a0a      	ldr	r2, [pc, #40]	@ (8014860 <send_custom_msg+0x50>)
 8014836:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801483a:	7011      	strb	r1, [r2, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	b007      	add	sp, #28
 8014840:	bd30      	pop	{r4, r5, pc}
 8014842:	460b      	mov	r3, r1
 8014844:	2200      	movs	r2, #0
 8014846:	f10d 0117 	add.w	r1, sp, #23
 801484a:	9400      	str	r4, [sp, #0]
 801484c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014850:	4602      	mov	r2, r0
 8014852:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014856:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801485a:	f001 fa5f 	bl	8015d1c <uxr_write_framed_msg>
 801485e:	e7e2      	b.n	8014826 <send_custom_msg+0x16>
 8014860:	24012f9c 	.word	0x24012f9c

08014864 <uxr_set_custom_transport_callbacks>:
 8014864:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014868:	9901      	ldr	r1, [sp, #4]
 801486a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801486e:	9b00      	ldr	r3, [sp, #0]
 8014870:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop

08014878 <uxr_init_custom_transport>:
 8014878:	b538      	push	{r3, r4, r5, lr}
 801487a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801487e:	b303      	cbz	r3, 80148c2 <uxr_init_custom_transport+0x4a>
 8014880:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014884:	4604      	mov	r4, r0
 8014886:	b1e2      	cbz	r2, 80148c2 <uxr_init_custom_transport+0x4a>
 8014888:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801488c:	b1ca      	cbz	r2, 80148c2 <uxr_init_custom_transport+0x4a>
 801488e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014892:	b1b2      	cbz	r2, 80148c2 <uxr_init_custom_transport+0x4a>
 8014894:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014898:	4798      	blx	r3
 801489a:	4605      	mov	r5, r0
 801489c:	b188      	cbz	r0, 80148c2 <uxr_init_custom_transport+0x4a>
 801489e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80148a2:	b98b      	cbnz	r3, 80148c8 <uxr_init_custom_transport+0x50>
 80148a4:	4b0b      	ldr	r3, [pc, #44]	@ (80148d4 <uxr_init_custom_transport+0x5c>)
 80148a6:	4628      	mov	r0, r5
 80148a8:	490b      	ldr	r1, [pc, #44]	@ (80148d8 <uxr_init_custom_transport+0x60>)
 80148aa:	4a0c      	ldr	r2, [pc, #48]	@ (80148dc <uxr_init_custom_transport+0x64>)
 80148ac:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80148b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80148b4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80148b8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80148bc:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80148c0:	bd38      	pop	{r3, r4, r5, pc}
 80148c2:	2500      	movs	r5, #0
 80148c4:	4628      	mov	r0, r5
 80148c6:	bd38      	pop	{r3, r4, r5, pc}
 80148c8:	2100      	movs	r1, #0
 80148ca:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80148ce:	f001 fa1f 	bl	8015d10 <uxr_init_framing_io>
 80148d2:	e7e7      	b.n	80148a4 <uxr_init_custom_transport+0x2c>
 80148d4:	08014779 	.word	0x08014779
 80148d8:	08014811 	.word	0x08014811
 80148dc:	0801476d 	.word	0x0801476d

080148e0 <uxr_close_custom_transport>:
 80148e0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80148e4:	4718      	bx	r3
 80148e6:	bf00      	nop

080148e8 <uxr_object_id>:
 80148e8:	b082      	sub	sp, #8
 80148ea:	2300      	movs	r3, #0
 80148ec:	f88d 1006 	strb.w	r1, [sp, #6]
 80148f0:	f360 030f 	bfi	r3, r0, #0, #16
 80148f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80148f8:	f362 431f 	bfi	r3, r2, #16, #16
 80148fc:	4618      	mov	r0, r3
 80148fe:	b002      	add	sp, #8
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop

08014904 <uxr_object_id_from_raw>:
 8014904:	7843      	ldrb	r3, [r0, #1]
 8014906:	b082      	sub	sp, #8
 8014908:	7801      	ldrb	r1, [r0, #0]
 801490a:	2000      	movs	r0, #0
 801490c:	091a      	lsrs	r2, r3, #4
 801490e:	f003 030f 	and.w	r3, r3, #15
 8014912:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8014916:	f88d 3006 	strb.w	r3, [sp, #6]
 801491a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801491e:	f362 000f 	bfi	r0, r2, #0, #16
 8014922:	f363 401f 	bfi	r0, r3, #16, #16
 8014926:	b002      	add	sp, #8
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop

0801492c <uxr_object_id_to_raw>:
 801492c:	4602      	mov	r2, r0
 801492e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8014932:	b082      	sub	sp, #8
 8014934:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8014938:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801493c:	f881 c000 	strb.w	ip, [r1]
 8014940:	7048      	strb	r0, [r1, #1]
 8014942:	b002      	add	sp, #8
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop

08014948 <uxr_buffer_cancel_data>:
 8014948:	b510      	push	{r4, lr}
 801494a:	2300      	movs	r3, #0
 801494c:	b094      	sub	sp, #80	@ 0x50
 801494e:	4604      	mov	r4, r0
 8014950:	9205      	str	r2, [sp, #20]
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014958:	f88d 301e 	strb.w	r3, [sp, #30]
 801495c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014960:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014964:	2308      	movs	r3, #8
 8014966:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801496a:	2201      	movs	r2, #1
 801496c:	9300      	str	r3, [sp, #0]
 801496e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014970:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014974:	2210      	movs	r2, #16
 8014976:	f001 f85d 	bl	8015a34 <uxr_prepare_stream_to_write_submessage>
 801497a:	b918      	cbnz	r0, 8014984 <uxr_buffer_cancel_data+0x3c>
 801497c:	4604      	mov	r4, r0
 801497e:	4620      	mov	r0, r4
 8014980:	b014      	add	sp, #80	@ 0x50
 8014982:	bd10      	pop	{r4, pc}
 8014984:	9905      	ldr	r1, [sp, #20]
 8014986:	aa06      	add	r2, sp, #24
 8014988:	4620      	mov	r0, r4
 801498a:	f001 f98f 	bl	8015cac <uxr_init_base_object_request>
 801498e:	4604      	mov	r4, r0
 8014990:	a906      	add	r1, sp, #24
 8014992:	a80c      	add	r0, sp, #48	@ 0x30
 8014994:	f003 f81e 	bl	80179d4 <uxr_serialize_READ_DATA_Payload>
 8014998:	4620      	mov	r0, r4
 801499a:	b014      	add	sp, #80	@ 0x50
 801499c:	bd10      	pop	{r4, pc}
 801499e:	bf00      	nop

080149a0 <read_submessage_format>:
 80149a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149a4:	b095      	sub	sp, #84	@ 0x54
 80149a6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80149aa:	b113      	cbz	r3, 80149b2 <read_submessage_format+0x12>
 80149ac:	b015      	add	sp, #84	@ 0x54
 80149ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149b2:	4606      	mov	r6, r0
 80149b4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80149b6:	460c      	mov	r4, r1
 80149b8:	4615      	mov	r5, r2
 80149ba:	9004      	str	r0, [sp, #16]
 80149bc:	4699      	mov	r9, r3
 80149be:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80149c0:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80149c4:	9005      	str	r0, [sp, #20]
 80149c6:	a80c      	add	r0, sp, #48	@ 0x30
 80149c8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80149cc:	1a52      	subs	r2, r2, r1
 80149ce:	f7ff fc7b 	bl	80142c8 <ucdr_init_buffer>
 80149d2:	a80c      	add	r0, sp, #48	@ 0x30
 80149d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80149d8:	f7ff fc4a 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 80149dc:	69e2      	ldr	r2, [r4, #28]
 80149de:	b19a      	cbz	r2, 8014a08 <read_submessage_format+0x68>
 80149e0:	f1b8 0f07 	cmp.w	r8, #7
 80149e4:	f882 9014 	strb.w	r9, [r2, #20]
 80149e8:	d040      	beq.n	8014a6c <read_submessage_format+0xcc>
 80149ea:	f1b8 0f08 	cmp.w	r8, #8
 80149ee:	d02e      	beq.n	8014a4e <read_submessage_format+0xae>
 80149f0:	f1b8 0f06 	cmp.w	r8, #6
 80149f4:	d011      	beq.n	8014a1a <read_submessage_format+0x7a>
 80149f6:	2301      	movs	r3, #1
 80149f8:	7513      	strb	r3, [r2, #20]
 80149fa:	4629      	mov	r1, r5
 80149fc:	4620      	mov	r0, r4
 80149fe:	f7ff fcb7 	bl	8014370 <ucdr_advance_buffer>
 8014a02:	b015      	add	sp, #84	@ 0x54
 8014a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a08:	f1b8 0f07 	cmp.w	r8, #7
 8014a0c:	d02e      	beq.n	8014a6c <read_submessage_format+0xcc>
 8014a0e:	f1b8 0f08 	cmp.w	r8, #8
 8014a12:	d01c      	beq.n	8014a4e <read_submessage_format+0xae>
 8014a14:	f1b8 0f06 	cmp.w	r8, #6
 8014a18:	d1ef      	bne.n	80149fa <read_submessage_format+0x5a>
 8014a1a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8014a1e:	f1b8 0f00 	cmp.w	r8, #0
 8014a22:	d011      	beq.n	8014a48 <read_submessage_format+0xa8>
 8014a24:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a26:	9501      	str	r5, [sp, #4]
 8014a28:	463a      	mov	r2, r7
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	9300      	str	r3, [sp, #0]
 8014a2e:	2306      	movs	r3, #6
 8014a30:	f88d 3016 	strb.w	r3, [sp, #22]
 8014a34:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8014a38:	9302      	str	r3, [sp, #8]
 8014a3a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014a3e:	47c0      	blx	r8
 8014a40:	2301      	movs	r3, #1
 8014a42:	69e2      	ldr	r2, [r4, #28]
 8014a44:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014a48:	2a00      	cmp	r2, #0
 8014a4a:	d1d4      	bne.n	80149f6 <read_submessage_format+0x56>
 8014a4c:	e7d5      	b.n	80149fa <read_submessage_format+0x5a>
 8014a4e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d0f8      	beq.n	8014a48 <read_submessage_format+0xa8>
 8014a56:	a80c      	add	r0, sp, #48	@ 0x30
 8014a58:	a906      	add	r1, sp, #24
 8014a5a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014a5e:	f003 f893 	bl	8017b88 <uxr_deserialize_SampleIdentity>
 8014a62:	b9a0      	cbnz	r0, 8014a8e <read_submessage_format+0xee>
 8014a64:	69e2      	ldr	r2, [r4, #28]
 8014a66:	2a00      	cmp	r2, #0
 8014a68:	d1c5      	bne.n	80149f6 <read_submessage_format+0x56>
 8014a6a:	e7c6      	b.n	80149fa <read_submessage_format+0x5a>
 8014a6c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8014a70:	b13b      	cbz	r3, 8014a82 <read_submessage_format+0xe2>
 8014a72:	a906      	add	r1, sp, #24
 8014a74:	a80c      	add	r0, sp, #48	@ 0x30
 8014a76:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014a7a:	f002 fd4b 	bl	8017514 <uxr_deserialize_BaseObjectRequest>
 8014a7e:	bb60      	cbnz	r0, 8014ada <read_submessage_format+0x13a>
 8014a80:	69e2      	ldr	r2, [r4, #28]
 8014a82:	68a3      	ldr	r3, [r4, #8]
 8014a84:	442b      	add	r3, r5
 8014a86:	60a3      	str	r3, [r4, #8]
 8014a88:	2a00      	cmp	r2, #0
 8014a8a:	d1b4      	bne.n	80149f6 <read_submessage_format+0x56>
 8014a8c:	e7b5      	b.n	80149fa <read_submessage_format+0x5a>
 8014a8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014a90:	a80c      	add	r0, sp, #48	@ 0x30
 8014a92:	eba8 0803 	sub.w	r8, r8, r3
 8014a96:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014a9a:	44a8      	add	r8, r5
 8014a9c:	1a52      	subs	r2, r2, r1
 8014a9e:	f7ff fc13 	bl	80142c8 <ucdr_init_buffer>
 8014aa2:	a80c      	add	r0, sp, #48	@ 0x30
 8014aa4:	fa1f f888 	uxth.w	r8, r8
 8014aa8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014aac:	f7ff fbe0 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 8014ab0:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ab2:	2108      	movs	r1, #8
 8014ab4:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	463a      	mov	r2, r7
 8014abc:	f88d 1016 	strb.w	r1, [sp, #22]
 8014ac0:	ab06      	add	r3, sp, #24
 8014ac2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8014ac6:	4630      	mov	r0, r6
 8014ac8:	9102      	str	r1, [sp, #8]
 8014aca:	9905      	ldr	r1, [sp, #20]
 8014acc:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8014ad0:	47b8      	blx	r7
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014ad8:	e7c4      	b.n	8014a64 <read_submessage_format+0xc4>
 8014ada:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014ade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ae0:	a80c      	add	r0, sp, #48	@ 0x30
 8014ae2:	1a52      	subs	r2, r2, r1
 8014ae4:	eba8 0803 	sub.w	r8, r8, r3
 8014ae8:	f7ff fbee 	bl	80142c8 <ucdr_init_buffer>
 8014aec:	a80c      	add	r0, sp, #48	@ 0x30
 8014aee:	44a8      	add	r8, r5
 8014af0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014af4:	f7ff fbbc 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 8014af8:	ab0c      	add	r3, sp, #48	@ 0x30
 8014afa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014afe:	fa1f f888 	uxth.w	r8, r8
 8014b02:	9300      	str	r3, [sp, #0]
 8014b04:	463a      	mov	r2, r7
 8014b06:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014b10:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014b14:	2107      	movs	r1, #7
 8014b16:	f88d 1016 	strb.w	r1, [sp, #22]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8014b20:	9102      	str	r1, [sp, #8]
 8014b22:	9905      	ldr	r1, [sp, #20]
 8014b24:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8014b28:	47b8      	blx	r7
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8014b30:	e7a6      	b.n	8014a80 <read_submessage_format+0xe0>
 8014b32:	bf00      	nop

08014b34 <on_get_fragmentation_info>:
 8014b34:	b500      	push	{lr}
 8014b36:	b08b      	sub	sp, #44	@ 0x2c
 8014b38:	4601      	mov	r1, r0
 8014b3a:	2204      	movs	r2, #4
 8014b3c:	a802      	add	r0, sp, #8
 8014b3e:	f7ff fbc3 	bl	80142c8 <ucdr_init_buffer>
 8014b42:	f10d 0305 	add.w	r3, sp, #5
 8014b46:	f10d 0206 	add.w	r2, sp, #6
 8014b4a:	a901      	add	r1, sp, #4
 8014b4c:	a802      	add	r0, sp, #8
 8014b4e:	f001 feb3 	bl	80168b8 <uxr_read_submessage_header>
 8014b52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014b56:	2b0d      	cmp	r3, #13
 8014b58:	d003      	beq.n	8014b62 <on_get_fragmentation_info+0x2e>
 8014b5a:	2000      	movs	r0, #0
 8014b5c:	b00b      	add	sp, #44	@ 0x2c
 8014b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014b66:	f013 0f02 	tst.w	r3, #2
 8014b6a:	bf14      	ite	ne
 8014b6c:	2002      	movne	r0, #2
 8014b6e:	2001      	moveq	r0, #1
 8014b70:	b00b      	add	sp, #44	@ 0x2c
 8014b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b76:	bf00      	nop

08014b78 <read_submessage_get_info>:
 8014b78:	b570      	push	{r4, r5, r6, lr}
 8014b7a:	2500      	movs	r5, #0
 8014b7c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8014b80:	460e      	mov	r6, r1
 8014b82:	4604      	mov	r4, r0
 8014b84:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8014b88:	4629      	mov	r1, r5
 8014b8a:	a810      	add	r0, sp, #64	@ 0x40
 8014b8c:	9503      	str	r5, [sp, #12]
 8014b8e:	9504      	str	r5, [sp, #16]
 8014b90:	f009 faca 	bl	801e128 <memset>
 8014b94:	a903      	add	r1, sp, #12
 8014b96:	4630      	mov	r0, r6
 8014b98:	f002 fe5c 	bl	8017854 <uxr_deserialize_GET_INFO_Payload>
 8014b9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014ba6:	f001 f879 	bl	8015c9c <uxr_session_header_offset>
 8014baa:	462b      	mov	r3, r5
 8014bac:	220c      	movs	r2, #12
 8014bae:	a905      	add	r1, sp, #20
 8014bb0:	9000      	str	r0, [sp, #0]
 8014bb2:	a808      	add	r0, sp, #32
 8014bb4:	f7ff fb76 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 8014bb8:	a910      	add	r1, sp, #64	@ 0x40
 8014bba:	a808      	add	r0, sp, #32
 8014bbc:	f002 febe 	bl	801793c <uxr_serialize_INFO_Payload>
 8014bc0:	9b08      	ldr	r3, [sp, #32]
 8014bc2:	462a      	mov	r2, r5
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f001 f814 	bl	8015bf4 <uxr_stamp_session_header>
 8014bcc:	a808      	add	r0, sp, #32
 8014bce:	f7ff fba9 	bl	8014324 <ucdr_buffer_length>
 8014bd2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	a905      	add	r1, sp, #20
 8014bd8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014bdc:	47a0      	blx	r4
 8014bde:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8014be2:	bd70      	pop	{r4, r5, r6, pc}

08014be4 <write_submessage_acknack.isra.0>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	b092      	sub	sp, #72	@ 0x48
 8014be8:	4605      	mov	r5, r0
 8014bea:	460e      	mov	r6, r1
 8014bec:	4614      	mov	r4, r2
 8014bee:	f001 f855 	bl	8015c9c <uxr_session_header_offset>
 8014bf2:	a905      	add	r1, sp, #20
 8014bf4:	9000      	str	r0, [sp, #0]
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	a80a      	add	r0, sp, #40	@ 0x28
 8014bfa:	2211      	movs	r2, #17
 8014bfc:	f7ff fb52 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 8014c00:	2218      	movs	r2, #24
 8014c02:	2300      	movs	r3, #0
 8014c04:	210a      	movs	r1, #10
 8014c06:	fb02 5404 	mla	r4, r2, r4, r5
 8014c0a:	a80a      	add	r0, sp, #40	@ 0x28
 8014c0c:	2205      	movs	r2, #5
 8014c0e:	3450      	adds	r4, #80	@ 0x50
 8014c10:	f001 fe38 	bl	8016884 <uxr_buffer_submessage_header>
 8014c14:	a903      	add	r1, sp, #12
 8014c16:	4620      	mov	r0, r4
 8014c18:	f007 fdc8 	bl	801c7ac <uxr_compute_acknack>
 8014c1c:	ba40      	rev16	r0, r0
 8014c1e:	a903      	add	r1, sp, #12
 8014c20:	f88d 6010 	strb.w	r6, [sp, #16]
 8014c24:	f8ad 000e 	strh.w	r0, [sp, #14]
 8014c28:	a80a      	add	r0, sp, #40	@ 0x28
 8014c2a:	f002 fef9 	bl	8017a20 <uxr_serialize_ACKNACK_Payload>
 8014c2e:	2200      	movs	r2, #0
 8014c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c32:	4628      	mov	r0, r5
 8014c34:	4611      	mov	r1, r2
 8014c36:	f000 ffdd 	bl	8015bf4 <uxr_stamp_session_header>
 8014c3a:	a80a      	add	r0, sp, #40	@ 0x28
 8014c3c:	f7ff fb72 	bl	8014324 <ucdr_buffer_length>
 8014c40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8014c42:	4602      	mov	r2, r0
 8014c44:	a905      	add	r1, sp, #20
 8014c46:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014c4a:	47a0      	blx	r4
 8014c4c:	b012      	add	sp, #72	@ 0x48
 8014c4e:	bd70      	pop	{r4, r5, r6, pc}

08014c50 <uxr_init_session>:
 8014c50:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8014c88 <uxr_init_session+0x38>
 8014c54:	2300      	movs	r3, #0
 8014c56:	b510      	push	{r4, lr}
 8014c58:	4604      	mov	r4, r0
 8014c5a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8014c5e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8014c62:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8014c66:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8014c6a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8014c6e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8014c72:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8014c76:	2181      	movs	r1, #129	@ 0x81
 8014c78:	f000 ff20 	bl	8015abc <uxr_init_session_info>
 8014c7c:	f104 0008 	add.w	r0, r4, #8
 8014c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c84:	f001 bd1a 	b.w	80166bc <uxr_init_stream_storage>
	...

08014c90 <uxr_set_status_callback>:
 8014c90:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop

08014c98 <uxr_set_topic_callback>:
 8014c98:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop

08014ca0 <uxr_set_request_callback>:
 8014ca0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8014ca4:	4770      	bx	lr
 8014ca6:	bf00      	nop

08014ca8 <uxr_set_reply_callback>:
 8014ca8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop

08014cb0 <uxr_create_output_best_effort_stream>:
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	b084      	sub	sp, #16
 8014cb6:	e9cd 2100 	strd	r2, r1, [sp]
 8014cba:	f000 ffef 	bl	8015c9c <uxr_session_header_offset>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	f104 0008 	add.w	r0, r4, #8
 8014cc4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8014cc8:	b004      	add	sp, #16
 8014cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cce:	f001 bd3b 	b.w	8016748 <uxr_add_output_best_effort_buffer>
 8014cd2:	bf00      	nop

08014cd4 <uxr_create_output_reliable_stream>:
 8014cd4:	b530      	push	{r4, r5, lr}
 8014cd6:	b089      	sub	sp, #36	@ 0x24
 8014cd8:	4604      	mov	r4, r0
 8014cda:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014cde:	9303      	str	r3, [sp, #12]
 8014ce0:	f000 ffdc 	bl	8015c9c <uxr_session_header_offset>
 8014ce4:	4605      	mov	r5, r0
 8014ce6:	9905      	ldr	r1, [sp, #20]
 8014ce8:	f104 0008 	add.w	r0, r4, #8
 8014cec:	9500      	str	r5, [sp, #0]
 8014cee:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014cf2:	f001 fd3d 	bl	8016770 <uxr_add_output_reliable_buffer>
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	fa5f fc80 	uxtb.w	ip, r0
 8014cfc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8014d00:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014d04:	0e03      	lsrs	r3, r0, #24
 8014d06:	f36c 0207 	bfi	r2, ip, #0, #8
 8014d0a:	f364 220f 	bfi	r2, r4, #8, #8
 8014d0e:	f361 4217 	bfi	r2, r1, #16, #8
 8014d12:	f363 621f 	bfi	r2, r3, #24, #8
 8014d16:	4610      	mov	r0, r2
 8014d18:	b009      	add	sp, #36	@ 0x24
 8014d1a:	bd30      	pop	{r4, r5, pc}

08014d1c <uxr_create_input_best_effort_stream>:
 8014d1c:	b082      	sub	sp, #8
 8014d1e:	3008      	adds	r0, #8
 8014d20:	b002      	add	sp, #8
 8014d22:	f001 bd3f 	b.w	80167a4 <uxr_add_input_best_effort_buffer>
 8014d26:	bf00      	nop

08014d28 <uxr_create_input_reliable_stream>:
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	4c0c      	ldr	r4, [pc, #48]	@ (8014d5c <uxr_create_input_reliable_stream+0x34>)
 8014d2c:	b084      	sub	sp, #16
 8014d2e:	3008      	adds	r0, #8
 8014d30:	9400      	str	r4, [sp, #0]
 8014d32:	f001 fd4d 	bl	80167d0 <uxr_add_input_reliable_buffer>
 8014d36:	2200      	movs	r2, #0
 8014d38:	fa5f fe80 	uxtb.w	lr, r0
 8014d3c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8014d40:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014d44:	0e03      	lsrs	r3, r0, #24
 8014d46:	f36e 0207 	bfi	r2, lr, #0, #8
 8014d4a:	f36c 220f 	bfi	r2, ip, #8, #8
 8014d4e:	f361 4217 	bfi	r2, r1, #16, #8
 8014d52:	f363 621f 	bfi	r2, r3, #24, #8
 8014d56:	4610      	mov	r0, r2
 8014d58:	b004      	add	sp, #16
 8014d5a:	bd10      	pop	{r4, pc}
 8014d5c:	08014b35 	.word	0x08014b35

08014d60 <uxr_epoch_nanos>:
 8014d60:	b510      	push	{r4, lr}
 8014d62:	4604      	mov	r4, r0
 8014d64:	f001 fdf0 	bl	8016948 <uxr_nanos>
 8014d68:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8014d6c:	1ac0      	subs	r0, r0, r3
 8014d6e:	eb61 0102 	sbc.w	r1, r1, r2
 8014d72:	bd10      	pop	{r4, pc}

08014d74 <uxr_flash_output_streams>:
 8014d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d78:	7e03      	ldrb	r3, [r0, #24]
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	b1fb      	cbz	r3, 8014dc0 <uxr_flash_output_streams+0x4c>
 8014d80:	f04f 0900 	mov.w	r9, #0
 8014d84:	f10d 0802 	add.w	r8, sp, #2
 8014d88:	af03      	add	r7, sp, #12
 8014d8a:	ae02      	add	r6, sp, #8
 8014d8c:	4648      	mov	r0, r9
 8014d8e:	2201      	movs	r2, #1
 8014d90:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8014d94:	4611      	mov	r1, r2
 8014d96:	3508      	adds	r5, #8
 8014d98:	f001 fc36 	bl	8016608 <uxr_stream_id>
 8014d9c:	4684      	mov	ip, r0
 8014d9e:	4643      	mov	r3, r8
 8014da0:	463a      	mov	r2, r7
 8014da2:	4631      	mov	r1, r6
 8014da4:	4628      	mov	r0, r5
 8014da6:	f8cd c004 	str.w	ip, [sp, #4]
 8014daa:	f007 fd89 	bl	801c8c0 <uxr_prepare_best_effort_buffer_to_send>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d13d      	bne.n	8014e2e <uxr_flash_output_streams+0xba>
 8014db2:	f109 0901 	add.w	r9, r9, #1
 8014db6:	7e23      	ldrb	r3, [r4, #24]
 8014db8:	fa5f f089 	uxtb.w	r0, r9
 8014dbc:	4283      	cmp	r3, r0
 8014dbe:	d8e6      	bhi.n	8014d8e <uxr_flash_output_streams+0x1a>
 8014dc0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014dc4:	b383      	cbz	r3, 8014e28 <uxr_flash_output_streams+0xb4>
 8014dc6:	f04f 0900 	mov.w	r9, #0
 8014dca:	f10d 0802 	add.w	r8, sp, #2
 8014dce:	af03      	add	r7, sp, #12
 8014dd0:	ae02      	add	r6, sp, #8
 8014dd2:	4648      	mov	r0, r9
 8014dd4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014dd8:	2201      	movs	r2, #1
 8014dda:	2102      	movs	r1, #2
 8014ddc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014de0:	f001 fc12 	bl	8016608 <uxr_stream_id>
 8014de4:	9001      	str	r0, [sp, #4]
 8014de6:	3520      	adds	r5, #32
 8014de8:	e00c      	b.n	8014e04 <uxr_flash_output_streams+0x90>
 8014dea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014dee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014df2:	9b02      	ldr	r3, [sp, #8]
 8014df4:	f000 fefe 	bl	8015bf4 <uxr_stamp_session_header>
 8014df8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014dfa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014dfe:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8014e02:	47d0      	blx	sl
 8014e04:	4643      	mov	r3, r8
 8014e06:	463a      	mov	r2, r7
 8014e08:	4631      	mov	r1, r6
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	f007 ff7c 	bl	801cd08 <uxr_prepare_next_reliable_buffer_to_send>
 8014e10:	4603      	mov	r3, r0
 8014e12:	4620      	mov	r0, r4
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1e8      	bne.n	8014dea <uxr_flash_output_streams+0x76>
 8014e18:	f109 0901 	add.w	r9, r9, #1
 8014e1c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014e20:	fa5f f089 	uxtb.w	r0, r9
 8014e24:	4283      	cmp	r3, r0
 8014e26:	d8d5      	bhi.n	8014dd4 <uxr_flash_output_streams+0x60>
 8014e28:	b004      	add	sp, #16
 8014e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e2e:	9b02      	ldr	r3, [sp, #8]
 8014e30:	4620      	mov	r0, r4
 8014e32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014e36:	f109 0901 	add.w	r9, r9, #1
 8014e3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014e3e:	f000 fed9 	bl	8015bf4 <uxr_stamp_session_header>
 8014e42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014e44:	9a03      	ldr	r2, [sp, #12]
 8014e46:	685d      	ldr	r5, [r3, #4]
 8014e48:	6818      	ldr	r0, [r3, #0]
 8014e4a:	9902      	ldr	r1, [sp, #8]
 8014e4c:	47a8      	blx	r5
 8014e4e:	7e23      	ldrb	r3, [r4, #24]
 8014e50:	fa5f f089 	uxtb.w	r0, r9
 8014e54:	4283      	cmp	r3, r0
 8014e56:	d89a      	bhi.n	8014d8e <uxr_flash_output_streams+0x1a>
 8014e58:	e7b2      	b.n	8014dc0 <uxr_flash_output_streams+0x4c>
 8014e5a:	bf00      	nop

08014e5c <read_submessage_info>:
 8014e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e60:	460d      	mov	r5, r1
 8014e62:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8014e66:	4606      	mov	r6, r0
 8014e68:	4669      	mov	r1, sp
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	f002 fc04 	bl	8017678 <uxr_deserialize_BaseObjectReply>
 8014e70:	4604      	mov	r4, r0
 8014e72:	a902      	add	r1, sp, #8
 8014e74:	4628      	mov	r0, r5
 8014e76:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8014e7a:	f7fe f8c1 	bl	8013000 <ucdr_deserialize_bool>
 8014e7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014e82:	4004      	ands	r4, r0
 8014e84:	b2e4      	uxtb	r4, r4
 8014e86:	b95b      	cbnz	r3, 8014ea0 <read_submessage_info+0x44>
 8014e88:	a987      	add	r1, sp, #540	@ 0x21c
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	f7fe f8b8 	bl	8013000 <ucdr_deserialize_bool>
 8014e90:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8014e94:	4680      	mov	r8, r0
 8014e96:	b94b      	cbnz	r3, 8014eac <read_submessage_info+0x50>
 8014e98:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8014e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea0:	a903      	add	r1, sp, #12
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	f002 fa94 	bl	80173d0 <uxr_deserialize_ObjectVariant>
 8014ea8:	4004      	ands	r4, r0
 8014eaa:	e7ed      	b.n	8014e88 <read_submessage_info+0x2c>
 8014eac:	a988      	add	r1, sp, #544	@ 0x220
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f7fe f8d4 	bl	801305c <ucdr_deserialize_uint8_t>
 8014eb4:	ea14 0f08 	tst.w	r4, r8
 8014eb8:	d0ee      	beq.n	8014e98 <read_submessage_info+0x3c>
 8014eba:	2800      	cmp	r0, #0
 8014ebc:	d0ec      	beq.n	8014e98 <read_submessage_info+0x3c>
 8014ebe:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8014ec2:	2b0d      	cmp	r3, #13
 8014ec4:	d1e8      	bne.n	8014e98 <read_submessage_info+0x3c>
 8014ec6:	a98a      	add	r1, sp, #552	@ 0x228
 8014ec8:	4628      	mov	r0, r5
 8014eca:	f7fe fe6d 	bl	8013ba8 <ucdr_deserialize_int16_t>
 8014ece:	b138      	cbz	r0, 8014ee0 <read_submessage_info+0x84>
 8014ed0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	dd06      	ble.n	8014ee6 <read_submessage_info+0x8a>
 8014ed8:	2f00      	cmp	r7, #0
 8014eda:	bf14      	ite	ne
 8014edc:	2001      	movne	r0, #1
 8014ede:	2002      	moveq	r0, #2
 8014ee0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8014ee4:	e7d8      	b.n	8014e98 <read_submessage_info+0x3c>
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	e7fa      	b.n	8014ee0 <read_submessage_info+0x84>
 8014eea:	bf00      	nop

08014eec <read_submessage_list>:
 8014eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	b097      	sub	sp, #92	@ 0x5c
 8014ef4:	460d      	mov	r5, r1
 8014ef6:	4ec1      	ldr	r6, [pc, #772]	@ (80151fc <read_submessage_list+0x310>)
 8014ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8014efa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8014efe:	aa0c      	add	r2, sp, #48	@ 0x30
 8014f00:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8014f04:	4628      	mov	r0, r5
 8014f06:	f001 fcd7 	bl	80168b8 <uxr_read_submessage_header>
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	f000 8142 	beq.w	8015194 <read_submessage_list+0x2a8>
 8014f10:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8014f14:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8014f18:	3b02      	subs	r3, #2
 8014f1a:	2b0d      	cmp	r3, #13
 8014f1c:	d8ed      	bhi.n	8014efa <read_submessage_list+0xe>
 8014f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8014f24 <read_submessage_list+0x38>)
 8014f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f24:	0801518b 	.word	0x0801518b
 8014f28:	08014efb 	.word	0x08014efb
 8014f2c:	0801517b 	.word	0x0801517b
 8014f30:	08015119 	.word	0x08015119
 8014f34:	0801510f 	.word	0x0801510f
 8014f38:	08014efb 	.word	0x08014efb
 8014f3c:	08014efb 	.word	0x08014efb
 8014f40:	08015065 	.word	0x08015065
 8014f44:	08014ff7 	.word	0x08014ff7
 8014f48:	08014fb7 	.word	0x08014fb7
 8014f4c:	08014efb 	.word	0x08014efb
 8014f50:	08014efb 	.word	0x08014efb
 8014f54:	08014efb 	.word	0x08014efb
 8014f58:	08014f5d 	.word	0x08014f5d
 8014f5c:	a910      	add	r1, sp, #64	@ 0x40
 8014f5e:	4628      	mov	r0, r5
 8014f60:	f002 fdc0 	bl	8017ae4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014f64:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8014f68:	f1b8 0f00 	cmp.w	r8, #0
 8014f6c:	f000 811a 	beq.w	80151a4 <read_submessage_list+0x2b8>
 8014f70:	f001 fcea 	bl	8016948 <uxr_nanos>
 8014f74:	4602      	mov	r2, r0
 8014f76:	460b      	mov	r3, r1
 8014f78:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014f80:	9006      	str	r0, [sp, #24]
 8014f82:	468c      	mov	ip, r1
 8014f84:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8014f86:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014f8a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014f8c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014f90:	468c      	mov	ip, r1
 8014f92:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014f94:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014f98:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014f9c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8014fa0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8014fa4:	e9cd 0100 	strd	r0, r1, [sp]
 8014fa8:	4620      	mov	r0, r4
 8014faa:	47c0      	blx	r8
 8014fac:	f04f 0301 	mov.w	r3, #1
 8014fb0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8014fb4:	e7a1      	b.n	8014efa <read_submessage_list+0xe>
 8014fb6:	a910      	add	r1, sp, #64	@ 0x40
 8014fb8:	4628      	mov	r0, r5
 8014fba:	f002 fd71 	bl	8017aa0 <uxr_deserialize_HEARTBEAT_Payload>
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8014fc4:	f001 fb4e 	bl	8016664 <uxr_stream_id_from_raw>
 8014fc8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014fcc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014fce:	f104 0008 	add.w	r0, r4, #8
 8014fd2:	4641      	mov	r1, r8
 8014fd4:	f001 fc34 	bl	8016840 <uxr_get_input_reliable_stream>
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	d08e      	beq.n	8014efa <read_submessage_list+0xe>
 8014fdc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8014fe0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8014fe4:	f007 fbd6 	bl	801c794 <uxr_process_heartbeat>
 8014fe8:	4642      	mov	r2, r8
 8014fea:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f7ff fdf8 	bl	8014be4 <write_submessage_acknack.isra.0>
 8014ff4:	e781      	b.n	8014efa <read_submessage_list+0xe>
 8014ff6:	a910      	add	r1, sp, #64	@ 0x40
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	f002 fd29 	bl	8017a50 <uxr_deserialize_ACKNACK_Payload>
 8014ffe:	2100      	movs	r1, #0
 8015000:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015004:	f001 fb2e 	bl	8016664 <uxr_stream_id_from_raw>
 8015008:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801500c:	900d      	str	r0, [sp, #52]	@ 0x34
 801500e:	f104 0008 	add.w	r0, r4, #8
 8015012:	f001 fbff 	bl	8016814 <uxr_get_output_reliable_stream>
 8015016:	4680      	mov	r8, r0
 8015018:	2800      	cmp	r0, #0
 801501a:	f43f af6e 	beq.w	8014efa <read_submessage_list+0xe>
 801501e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8015022:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8015026:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801502a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801502e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8015032:	b289      	uxth	r1, r1
 8015034:	f007 ff10 	bl	801ce58 <uxr_process_acknack>
 8015038:	4640      	mov	r0, r8
 801503a:	f007 fed1 	bl	801cde0 <uxr_begin_output_nack_buffer_it>
 801503e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015042:	e005      	b.n	8015050 <read_submessage_list+0x164>
 8015044:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015046:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801504a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801504e:	47c8      	blx	r9
 8015050:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8015054:	aa0f      	add	r2, sp, #60	@ 0x3c
 8015056:	4651      	mov	r1, sl
 8015058:	4640      	mov	r0, r8
 801505a:	f007 fec3 	bl	801cde4 <uxr_next_reliable_nack_buffer_to_send>
 801505e:	2800      	cmp	r0, #0
 8015060:	d1f0      	bne.n	8015044 <read_submessage_list+0x158>
 8015062:	e74a      	b.n	8014efa <read_submessage_list+0xe>
 8015064:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8015068:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801506c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8015070:	4628      	mov	r0, r5
 8015072:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8015076:	4651      	mov	r1, sl
 8015078:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801507c:	f1a8 0804 	sub.w	r8, r8, #4
 8015080:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8015084:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8015088:	fa1f f888 	uxth.w	r8, r8
 801508c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015090:	f009 090e 	and.w	r9, r9, #14
 8015094:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8015098:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801509c:	f002 fa3a 	bl	8017514 <uxr_deserialize_BaseObjectRequest>
 80150a0:	4650      	mov	r0, sl
 80150a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80150a4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80150a8:	f000 fe20 	bl	8015cec <uxr_parse_base_object_request>
 80150ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80150ae:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80150b2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80150b6:	9110      	str	r1, [sp, #64]	@ 0x40
 80150b8:	f1bb 0f00 	cmp.w	fp, #0
 80150bc:	d006      	beq.n	80150cc <read_submessage_list+0x1e0>
 80150be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80150c2:	4652      	mov	r2, sl
 80150c4:	4620      	mov	r0, r4
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	2300      	movs	r3, #0
 80150ca:	47d8      	blx	fp
 80150cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80150ce:	b182      	cbz	r2, 80150f2 <read_submessage_list+0x206>
 80150d0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80150d2:	f04f 0c00 	mov.w	ip, #0
 80150d6:	3902      	subs	r1, #2
 80150d8:	e003      	b.n	80150e2 <read_submessage_list+0x1f6>
 80150da:	f10c 0c01 	add.w	ip, ip, #1
 80150de:	4594      	cmp	ip, r2
 80150e0:	d007      	beq.n	80150f2 <read_submessage_list+0x206>
 80150e2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80150e6:	4553      	cmp	r3, sl
 80150e8:	d1f7      	bne.n	80150da <read_submessage_list+0x1ee>
 80150ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80150ec:	2200      	movs	r2, #0
 80150ee:	f803 200c 	strb.w	r2, [r3, ip]
 80150f2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80150f6:	464b      	mov	r3, r9
 80150f8:	4642      	mov	r2, r8
 80150fa:	4620      	mov	r0, r4
 80150fc:	9102      	str	r1, [sp, #8]
 80150fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015100:	9101      	str	r1, [sp, #4]
 8015102:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015104:	9100      	str	r1, [sp, #0]
 8015106:	4629      	mov	r1, r5
 8015108:	f7ff fc4a 	bl	80149a0 <read_submessage_format>
 801510c:	e6f5      	b.n	8014efa <read_submessage_list+0xe>
 801510e:	4629      	mov	r1, r5
 8015110:	4620      	mov	r0, r4
 8015112:	f7ff fea3 	bl	8014e5c <read_submessage_info>
 8015116:	e6f0      	b.n	8014efa <read_submessage_list+0xe>
 8015118:	2a00      	cmp	r2, #0
 801511a:	d03e      	beq.n	801519a <read_submessage_list+0x2ae>
 801511c:	a910      	add	r1, sp, #64	@ 0x40
 801511e:	4628      	mov	r0, r5
 8015120:	f002 fbee 	bl	8017900 <uxr_deserialize_STATUS_Payload>
 8015124:	a90e      	add	r1, sp, #56	@ 0x38
 8015126:	aa0d      	add	r2, sp, #52	@ 0x34
 8015128:	a810      	add	r0, sp, #64	@ 0x40
 801512a:	f000 fddf 	bl	8015cec <uxr_parse_base_object_request>
 801512e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015130:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8015134:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8015138:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801513c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801513e:	f1ba 0f00 	cmp.w	sl, #0
 8015142:	d006      	beq.n	8015152 <read_submessage_list+0x266>
 8015144:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015148:	4642      	mov	r2, r8
 801514a:	4620      	mov	r0, r4
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	464b      	mov	r3, r9
 8015150:	47d0      	blx	sl
 8015152:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015154:	2a00      	cmp	r2, #0
 8015156:	f43f aed0 	beq.w	8014efa <read_submessage_list+0xe>
 801515a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801515c:	2100      	movs	r1, #0
 801515e:	3802      	subs	r0, #2
 8015160:	e003      	b.n	801516a <read_submessage_list+0x27e>
 8015162:	3101      	adds	r1, #1
 8015164:	4291      	cmp	r1, r2
 8015166:	f43f aec8 	beq.w	8014efa <read_submessage_list+0xe>
 801516a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801516e:	4543      	cmp	r3, r8
 8015170:	d1f7      	bne.n	8015162 <read_submessage_list+0x276>
 8015172:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015174:	f803 9001 	strb.w	r9, [r3, r1]
 8015178:	e6bf      	b.n	8014efa <read_submessage_list+0xe>
 801517a:	2a00      	cmp	r2, #0
 801517c:	f47f aebd 	bne.w	8014efa <read_submessage_list+0xe>
 8015180:	4629      	mov	r1, r5
 8015182:	4620      	mov	r0, r4
 8015184:	f000 fcf6 	bl	8015b74 <uxr_read_create_session_status>
 8015188:	e6b7      	b.n	8014efa <read_submessage_list+0xe>
 801518a:	4629      	mov	r1, r5
 801518c:	4620      	mov	r0, r4
 801518e:	f7ff fcf3 	bl	8014b78 <read_submessage_get_info>
 8015192:	e6b2      	b.n	8014efa <read_submessage_list+0xe>
 8015194:	b017      	add	sp, #92	@ 0x5c
 8015196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519a:	4629      	mov	r1, r5
 801519c:	4620      	mov	r0, r4
 801519e:	f000 fcf7 	bl	8015b90 <uxr_read_delete_session_status>
 80151a2:	e6aa      	b.n	8014efa <read_submessage_list+0xe>
 80151a4:	f001 fbd0 	bl	8016948 <uxr_nanos>
 80151a8:	4642      	mov	r2, r8
 80151aa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80151ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80151ae:	fbc7 3206 	smlal	r3, r2, r7, r6
 80151b2:	1818      	adds	r0, r3, r0
 80151b4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80151b6:	eb42 0101 	adc.w	r1, r2, r1
 80151ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80151bc:	4642      	mov	r2, r8
 80151be:	fbc7 3206 	smlal	r3, r2, r7, r6
 80151c2:	469c      	mov	ip, r3
 80151c4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80151c8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80151cc:	4643      	mov	r3, r8
 80151ce:	eb1c 0c07 	adds.w	ip, ip, r7
 80151d2:	eb42 0203 	adc.w	r2, r2, r3
 80151d6:	ebb0 030c 	subs.w	r3, r0, ip
 80151da:	eb61 0202 	sbc.w	r2, r1, r2
 80151de:	2a00      	cmp	r2, #0
 80151e0:	db08      	blt.n	80151f4 <read_submessage_list+0x308>
 80151e2:	085b      	lsrs	r3, r3, #1
 80151e4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80151e8:	1052      	asrs	r2, r2, #1
 80151ea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80151ee:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80151f2:	e6db      	b.n	8014fac <read_submessage_list+0xc0>
 80151f4:	3301      	adds	r3, #1
 80151f6:	f142 0200 	adc.w	r2, r2, #0
 80151fa:	e7f2      	b.n	80151e2 <read_submessage_list+0x2f6>
 80151fc:	3b9aca00 	.word	0x3b9aca00

08015200 <listen_message_reliably>:
 8015200:	1e0b      	subs	r3, r1, #0
 8015202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015206:	bfb8      	it	lt
 8015208:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801520c:	b09d      	sub	sp, #116	@ 0x74
 801520e:	4680      	mov	r8, r0
 8015210:	9305      	str	r3, [sp, #20]
 8015212:	f001 fb7d 	bl	8016910 <uxr_millis>
 8015216:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801521a:	4681      	mov	r9, r0
 801521c:	2a00      	cmp	r2, #0
 801521e:	f000 809a 	beq.w	8015356 <listen_message_reliably+0x156>
 8015222:	2600      	movs	r6, #0
 8015224:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015228:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801522c:	460f      	mov	r7, r1
 801522e:	4630      	mov	r0, r6
 8015230:	9303      	str	r3, [sp, #12]
 8015232:	e00e      	b.n	8015252 <listen_message_reliably+0x52>
 8015234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015236:	3601      	adds	r6, #1
 8015238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801523a:	455a      	cmp	r2, fp
 801523c:	9903      	ldr	r1, [sp, #12]
 801523e:	b2f0      	uxtb	r0, r6
 8015240:	eb73 0101 	sbcs.w	r1, r3, r1
 8015244:	da01      	bge.n	801524a <listen_message_reliably+0x4a>
 8015246:	4693      	mov	fp, r2
 8015248:	9303      	str	r3, [sp, #12]
 801524a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801524e:	4283      	cmp	r3, r0
 8015250:	d95f      	bls.n	8015312 <listen_message_reliably+0x112>
 8015252:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8015256:	2102      	movs	r1, #2
 8015258:	2201      	movs	r2, #1
 801525a:	00e4      	lsls	r4, r4, #3
 801525c:	f001 f9d4 	bl	8016608 <uxr_stream_id>
 8015260:	4601      	mov	r1, r0
 8015262:	f104 0520 	add.w	r5, r4, #32
 8015266:	463b      	mov	r3, r7
 8015268:	464a      	mov	r2, r9
 801526a:	9109      	str	r1, [sp, #36]	@ 0x24
 801526c:	4445      	add	r5, r8
 801526e:	4628      	mov	r0, r5
 8015270:	f007 fd8a 	bl	801cd88 <uxr_update_output_stream_heartbeat_timestamp>
 8015274:	eb08 0304 	add.w	r3, r8, r4
 8015278:	2800      	cmp	r0, #0
 801527a:	d0db      	beq.n	8015234 <listen_message_reliably+0x34>
 801527c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8015280:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8015284:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015288:	4640      	mov	r0, r8
 801528a:	3501      	adds	r5, #1
 801528c:	4444      	add	r4, r8
 801528e:	9304      	str	r3, [sp, #16]
 8015290:	f000 fd04 	bl	8015c9c <uxr_session_header_offset>
 8015294:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015298:	2300      	movs	r3, #0
 801529a:	2211      	movs	r2, #17
 801529c:	a90c      	add	r1, sp, #48	@ 0x30
 801529e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80152a2:	9000      	str	r0, [sp, #0]
 80152a4:	4650      	mov	r0, sl
 80152a6:	3601      	adds	r6, #1
 80152a8:	f7fe fffc 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 80152ac:	2300      	movs	r3, #0
 80152ae:	2205      	movs	r2, #5
 80152b0:	210b      	movs	r1, #11
 80152b2:	4650      	mov	r0, sl
 80152b4:	f001 fae6 	bl	8016884 <uxr_buffer_submessage_header>
 80152b8:	2101      	movs	r1, #1
 80152ba:	8968      	ldrh	r0, [r5, #10]
 80152bc:	f007 fe28 	bl	801cf10 <uxr_seq_num_add>
 80152c0:	892b      	ldrh	r3, [r5, #8]
 80152c2:	4602      	mov	r2, r0
 80152c4:	a90a      	add	r1, sp, #40	@ 0x28
 80152c6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80152ca:	4650      	mov	r0, sl
 80152cc:	9b04      	ldr	r3, [sp, #16]
 80152ce:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80152d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80152d6:	f002 fbcf 	bl	8017a78 <uxr_serialize_HEARTBEAT_Payload>
 80152da:	2200      	movs	r2, #0
 80152dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80152de:	4640      	mov	r0, r8
 80152e0:	4611      	mov	r1, r2
 80152e2:	f000 fc87 	bl	8015bf4 <uxr_stamp_session_header>
 80152e6:	4650      	mov	r0, sl
 80152e8:	f7ff f81c 	bl	8014324 <ucdr_buffer_length>
 80152ec:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80152f0:	4602      	mov	r2, r0
 80152f2:	a90c      	add	r1, sp, #48	@ 0x30
 80152f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80152f8:	47a8      	blx	r5
 80152fa:	9903      	ldr	r1, [sp, #12]
 80152fc:	b2f0      	uxtb	r0, r6
 80152fe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8015302:	455a      	cmp	r2, fp
 8015304:	eb73 0101 	sbcs.w	r1, r3, r1
 8015308:	db9d      	blt.n	8015246 <listen_message_reliably+0x46>
 801530a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801530e:	4283      	cmp	r3, r0
 8015310:	d89f      	bhi.n	8015252 <listen_message_reliably+0x52>
 8015312:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015316:	9a03      	ldr	r2, [sp, #12]
 8015318:	429a      	cmp	r2, r3
 801531a:	bf08      	it	eq
 801531c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8015320:	d019      	beq.n	8015356 <listen_message_reliably+0x156>
 8015322:	ebab 0309 	sub.w	r3, fp, r9
 8015326:	2b00      	cmp	r3, #0
 8015328:	9d05      	ldr	r5, [sp, #20]
 801532a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801532e:	aa08      	add	r2, sp, #32
 8015330:	bf08      	it	eq
 8015332:	2301      	moveq	r3, #1
 8015334:	a907      	add	r1, sp, #28
 8015336:	6884      	ldr	r4, [r0, #8]
 8015338:	429d      	cmp	r5, r3
 801533a:	6800      	ldr	r0, [r0, #0]
 801533c:	bfa8      	it	ge
 801533e:	461d      	movge	r5, r3
 8015340:	462b      	mov	r3, r5
 8015342:	47a0      	blx	r4
 8015344:	b948      	cbnz	r0, 801535a <listen_message_reliably+0x15a>
 8015346:	9b05      	ldr	r3, [sp, #20]
 8015348:	1b5b      	subs	r3, r3, r5
 801534a:	2b00      	cmp	r3, #0
 801534c:	9305      	str	r3, [sp, #20]
 801534e:	f73f af60 	bgt.w	8015212 <listen_message_reliably+0x12>
 8015352:	4604      	mov	r4, r0
 8015354:	e012      	b.n	801537c <listen_message_reliably+0x17c>
 8015356:	9b05      	ldr	r3, [sp, #20]
 8015358:	e7e5      	b.n	8015326 <listen_message_reliably+0x126>
 801535a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801535e:	4604      	mov	r4, r0
 8015360:	2500      	movs	r5, #0
 8015362:	a80c      	add	r0, sp, #48	@ 0x30
 8015364:	f7fe ffb0 	bl	80142c8 <ucdr_init_buffer>
 8015368:	f10d 031a 	add.w	r3, sp, #26
 801536c:	aa06      	add	r2, sp, #24
 801536e:	a90c      	add	r1, sp, #48	@ 0x30
 8015370:	4640      	mov	r0, r8
 8015372:	f88d 5018 	strb.w	r5, [sp, #24]
 8015376:	f000 fc51 	bl	8015c1c <uxr_read_session_header>
 801537a:	b918      	cbnz	r0, 8015384 <listen_message_reliably+0x184>
 801537c:	4620      	mov	r0, r4
 801537e:	b01d      	add	sp, #116	@ 0x74
 8015380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015384:	4629      	mov	r1, r5
 8015386:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801538a:	f001 f96b 	bl	8016664 <uxr_stream_id_from_raw>
 801538e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8015392:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8015396:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801539a:	2e01      	cmp	r6, #1
 801539c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80153a0:	d04b      	beq.n	801543a <listen_message_reliably+0x23a>
 80153a2:	2e02      	cmp	r6, #2
 80153a4:	d00f      	beq.n	80153c6 <listen_message_reliably+0x1c6>
 80153a6:	2e00      	cmp	r6, #0
 80153a8:	d1e8      	bne.n	801537c <listen_message_reliably+0x17c>
 80153aa:	4631      	mov	r1, r6
 80153ac:	4630      	mov	r0, r6
 80153ae:	f001 f959 	bl	8016664 <uxr_stream_id_from_raw>
 80153b2:	4602      	mov	r2, r0
 80153b4:	a90c      	add	r1, sp, #48	@ 0x30
 80153b6:	4640      	mov	r0, r8
 80153b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80153ba:	f7ff fd97 	bl	8014eec <read_submessage_list>
 80153be:	4620      	mov	r0, r4
 80153c0:	b01d      	add	sp, #116	@ 0x74
 80153c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c6:	4629      	mov	r1, r5
 80153c8:	f108 0008 	add.w	r0, r8, #8
 80153cc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80153d0:	f001 fa36 	bl	8016840 <uxr_get_input_reliable_stream>
 80153d4:	4607      	mov	r7, r0
 80153d6:	b338      	cbz	r0, 8015428 <listen_message_reliably+0x228>
 80153d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80153da:	a80c      	add	r0, sp, #48	@ 0x30
 80153dc:	9203      	str	r2, [sp, #12]
 80153de:	f7fe ffa5 	bl	801432c <ucdr_buffer_remaining>
 80153e2:	4603      	mov	r3, r0
 80153e4:	f10d 0019 	add.w	r0, sp, #25
 80153e8:	9a03      	ldr	r2, [sp, #12]
 80153ea:	4651      	mov	r1, sl
 80153ec:	9000      	str	r0, [sp, #0]
 80153ee:	4638      	mov	r0, r7
 80153f0:	f007 f8d4 	bl	801c59c <uxr_receive_reliable_message>
 80153f4:	b1c0      	cbz	r0, 8015428 <listen_message_reliably+0x228>
 80153f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80153fa:	b393      	cbz	r3, 8015462 <listen_message_reliably+0x262>
 80153fc:	ae14      	add	r6, sp, #80	@ 0x50
 80153fe:	f04f 0a02 	mov.w	sl, #2
 8015402:	e00a      	b.n	801541a <listen_message_reliably+0x21a>
 8015404:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8015408:	4631      	mov	r1, r6
 801540a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801540e:	4640      	mov	r0, r8
 8015410:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8015414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015416:	f7ff fd69 	bl	8014eec <read_submessage_list>
 801541a:	2204      	movs	r2, #4
 801541c:	4631      	mov	r1, r6
 801541e:	4638      	mov	r0, r7
 8015420:	f007 f93e 	bl	801c6a0 <uxr_next_input_reliable_buffer_available>
 8015424:	2800      	cmp	r0, #0
 8015426:	d1ed      	bne.n	8015404 <listen_message_reliably+0x204>
 8015428:	4640      	mov	r0, r8
 801542a:	462a      	mov	r2, r5
 801542c:	4649      	mov	r1, r9
 801542e:	f7ff fbd9 	bl	8014be4 <write_submessage_acknack.isra.0>
 8015432:	4620      	mov	r0, r4
 8015434:	b01d      	add	sp, #116	@ 0x74
 8015436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543a:	4629      	mov	r1, r5
 801543c:	f108 0008 	add.w	r0, r8, #8
 8015440:	f001 f9f4 	bl	801682c <uxr_get_input_best_effort_stream>
 8015444:	2800      	cmp	r0, #0
 8015446:	d099      	beq.n	801537c <listen_message_reliably+0x17c>
 8015448:	4651      	mov	r1, sl
 801544a:	f007 f81d 	bl	801c488 <uxr_receive_best_effort_message>
 801544e:	2800      	cmp	r0, #0
 8015450:	d094      	beq.n	801537c <listen_message_reliably+0x17c>
 8015452:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8015456:	a90c      	add	r1, sp, #48	@ 0x30
 8015458:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801545a:	4640      	mov	r0, r8
 801545c:	f7ff fd46 	bl	8014eec <read_submessage_list>
 8015460:	e78c      	b.n	801537c <listen_message_reliably+0x17c>
 8015462:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8015466:	a90c      	add	r1, sp, #48	@ 0x30
 8015468:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801546a:	4640      	mov	r0, r8
 801546c:	f7ff fd3e 	bl	8014eec <read_submessage_list>
 8015470:	e7c4      	b.n	80153fc <listen_message_reliably+0x1fc>
 8015472:	bf00      	nop

08015474 <uxr_run_session_timeout>:
 8015474:	b570      	push	{r4, r5, r6, lr}
 8015476:	4604      	mov	r4, r0
 8015478:	460d      	mov	r5, r1
 801547a:	f001 fa49 	bl	8016910 <uxr_millis>
 801547e:	4606      	mov	r6, r0
 8015480:	4620      	mov	r0, r4
 8015482:	f7ff fc77 	bl	8014d74 <uxr_flash_output_streams>
 8015486:	4629      	mov	r1, r5
 8015488:	4620      	mov	r0, r4
 801548a:	f7ff feb9 	bl	8015200 <listen_message_reliably>
 801548e:	f001 fa3f 	bl	8016910 <uxr_millis>
 8015492:	1b83      	subs	r3, r0, r6
 8015494:	1ae9      	subs	r1, r5, r3
 8015496:	2900      	cmp	r1, #0
 8015498:	dcf6      	bgt.n	8015488 <uxr_run_session_timeout+0x14>
 801549a:	f104 0008 	add.w	r0, r4, #8
 801549e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154a2:	f001 b9d9 	b.w	8016858 <uxr_output_streams_confirmed>
 80154a6:	bf00      	nop

080154a8 <uxr_run_session_until_data>:
 80154a8:	b570      	push	{r4, r5, r6, lr}
 80154aa:	4604      	mov	r4, r0
 80154ac:	460d      	mov	r5, r1
 80154ae:	f001 fa2f 	bl	8016910 <uxr_millis>
 80154b2:	4606      	mov	r6, r0
 80154b4:	4620      	mov	r0, r4
 80154b6:	f7ff fc5d 	bl	8014d74 <uxr_flash_output_streams>
 80154ba:	2300      	movs	r3, #0
 80154bc:	4629      	mov	r1, r5
 80154be:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80154c2:	e005      	b.n	80154d0 <uxr_run_session_until_data+0x28>
 80154c4:	f001 fa24 	bl	8016910 <uxr_millis>
 80154c8:	1b83      	subs	r3, r0, r6
 80154ca:	1ae9      	subs	r1, r5, r3
 80154cc:	2900      	cmp	r1, #0
 80154ce:	dd07      	ble.n	80154e0 <uxr_run_session_until_data+0x38>
 80154d0:	4620      	mov	r0, r4
 80154d2:	f7ff fe95 	bl	8015200 <listen_message_reliably>
 80154d6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80154da:	2800      	cmp	r0, #0
 80154dc:	d0f2      	beq.n	80154c4 <uxr_run_session_until_data+0x1c>
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80154e4:	bd70      	pop	{r4, r5, r6, pc}
 80154e6:	bf00      	nop

080154e8 <uxr_run_session_until_confirm_delivery>:
 80154e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ec:	4606      	mov	r6, r0
 80154ee:	460d      	mov	r5, r1
 80154f0:	f001 fa0e 	bl	8016910 <uxr_millis>
 80154f4:	4607      	mov	r7, r0
 80154f6:	4630      	mov	r0, r6
 80154f8:	f106 0808 	add.w	r8, r6, #8
 80154fc:	f7ff fc3a 	bl	8014d74 <uxr_flash_output_streams>
 8015500:	2d00      	cmp	r5, #0
 8015502:	db10      	blt.n	8015526 <uxr_run_session_until_confirm_delivery+0x3e>
 8015504:	462c      	mov	r4, r5
 8015506:	e006      	b.n	8015516 <uxr_run_session_until_confirm_delivery+0x2e>
 8015508:	f7ff fe7a 	bl	8015200 <listen_message_reliably>
 801550c:	f001 fa00 	bl	8016910 <uxr_millis>
 8015510:	1bc3      	subs	r3, r0, r7
 8015512:	1aec      	subs	r4, r5, r3
 8015514:	d407      	bmi.n	8015526 <uxr_run_session_until_confirm_delivery+0x3e>
 8015516:	4640      	mov	r0, r8
 8015518:	f001 f99e 	bl	8016858 <uxr_output_streams_confirmed>
 801551c:	4603      	mov	r3, r0
 801551e:	4621      	mov	r1, r4
 8015520:	4630      	mov	r0, r6
 8015522:	2b00      	cmp	r3, #0
 8015524:	d0f0      	beq.n	8015508 <uxr_run_session_until_confirm_delivery+0x20>
 8015526:	4640      	mov	r0, r8
 8015528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801552c:	f001 b994 	b.w	8016858 <uxr_output_streams_confirmed>

08015530 <uxr_run_session_until_all_status>:
 8015530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015534:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8015538:	4606      	mov	r6, r0
 801553a:	4688      	mov	r8, r1
 801553c:	4692      	mov	sl, r2
 801553e:	461f      	mov	r7, r3
 8015540:	f7ff fc18 	bl	8014d74 <uxr_flash_output_streams>
 8015544:	f1bb 0f00 	cmp.w	fp, #0
 8015548:	d004      	beq.n	8015554 <uxr_run_session_until_all_status+0x24>
 801554a:	465a      	mov	r2, fp
 801554c:	21ff      	movs	r1, #255	@ 0xff
 801554e:	4638      	mov	r0, r7
 8015550:	f008 fdea 	bl	801e128 <memset>
 8015554:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8015558:	1e7d      	subs	r5, r7, #1
 801555a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801555e:	f001 f9d7 	bl	8016910 <uxr_millis>
 8015562:	4641      	mov	r1, r8
 8015564:	4681      	mov	r9, r0
 8015566:	4630      	mov	r0, r6
 8015568:	f7ff fe4a 	bl	8015200 <listen_message_reliably>
 801556c:	f001 f9d0 	bl	8016910 <uxr_millis>
 8015570:	eba0 0009 	sub.w	r0, r0, r9
 8015574:	eba8 0100 	sub.w	r1, r8, r0
 8015578:	f1bb 0f00 	cmp.w	fp, #0
 801557c:	d029      	beq.n	80155d2 <uxr_run_session_until_all_status+0xa2>
 801557e:	46ae      	mov	lr, r5
 8015580:	f04f 0c00 	mov.w	ip, #0
 8015584:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8015588:	2cff      	cmp	r4, #255	@ 0xff
 801558a:	d015      	beq.n	80155b8 <uxr_run_session_until_all_status+0x88>
 801558c:	f10c 0c01 	add.w	ip, ip, #1
 8015590:	45e3      	cmp	fp, ip
 8015592:	d8f7      	bhi.n	8015584 <uxr_run_session_until_all_status+0x54>
 8015594:	2300      	movs	r3, #0
 8015596:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8015598:	e000      	b.n	801559c <uxr_run_session_until_all_status+0x6c>
 801559a:	b158      	cbz	r0, 80155b4 <uxr_run_session_until_all_status+0x84>
 801559c:	462b      	mov	r3, r5
 801559e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80155a2:	3302      	adds	r3, #2
 80155a4:	2801      	cmp	r0, #1
 80155a6:	eba3 0307 	sub.w	r3, r3, r7
 80155aa:	bf8c      	ite	hi
 80155ac:	2000      	movhi	r0, #0
 80155ae:	2001      	movls	r0, #1
 80155b0:	459b      	cmp	fp, r3
 80155b2:	d8f2      	bhi.n	801559a <uxr_run_session_until_all_status+0x6a>
 80155b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80155bc:	f10c 0c01 	add.w	ip, ip, #1
 80155c0:	45dc      	cmp	ip, fp
 80155c2:	d201      	bcs.n	80155c8 <uxr_run_session_until_all_status+0x98>
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d0dd      	beq.n	8015584 <uxr_run_session_until_all_status+0x54>
 80155c8:	2900      	cmp	r1, #0
 80155ca:	dde3      	ble.n	8015594 <uxr_run_session_until_all_status+0x64>
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1ca      	bne.n	8015566 <uxr_run_session_until_all_status+0x36>
 80155d0:	e7e0      	b.n	8015594 <uxr_run_session_until_all_status+0x64>
 80155d2:	2001      	movs	r0, #1
 80155d4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80155d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155dc:	0000      	movs	r0, r0
	...

080155e0 <uxr_sync_session>:
 80155e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155e2:	b093      	sub	sp, #76	@ 0x4c
 80155e4:	4604      	mov	r4, r0
 80155e6:	460d      	mov	r5, r1
 80155e8:	f000 fb58 	bl	8015c9c <uxr_session_header_offset>
 80155ec:	2214      	movs	r2, #20
 80155ee:	2300      	movs	r3, #0
 80155f0:	9000      	str	r0, [sp, #0]
 80155f2:	a80a      	add	r0, sp, #40	@ 0x28
 80155f4:	eb0d 0102 	add.w	r1, sp, r2
 80155f8:	f7fe fe54 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 80155fc:	2300      	movs	r3, #0
 80155fe:	2208      	movs	r2, #8
 8015600:	210e      	movs	r1, #14
 8015602:	a80a      	add	r0, sp, #40	@ 0x28
 8015604:	f001 f93e 	bl	8016884 <uxr_buffer_submessage_header>
 8015608:	f001 f99e 	bl	8016948 <uxr_nanos>
 801560c:	460e      	mov	r6, r1
 801560e:	4607      	mov	r7, r0
 8015610:	a31b      	add	r3, pc, #108	@ (adr r3, 8015680 <uxr_sync_session+0xa0>)
 8015612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015616:	f7ea fecb 	bl	80003b0 <__aeabi_ldivmod>
 801561a:	4631      	mov	r1, r6
 801561c:	9003      	str	r0, [sp, #12]
 801561e:	4638      	mov	r0, r7
 8015620:	a317      	add	r3, pc, #92	@ (adr r3, 8015680 <uxr_sync_session+0xa0>)
 8015622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015626:	f7ea fec3 	bl	80003b0 <__aeabi_ldivmod>
 801562a:	a903      	add	r1, sp, #12
 801562c:	a80a      	add	r0, sp, #40	@ 0x28
 801562e:	9204      	str	r2, [sp, #16]
 8015630:	f002 fa4a 	bl	8017ac8 <uxr_serialize_TIMESTAMP_Payload>
 8015634:	2200      	movs	r2, #0
 8015636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015638:	4620      	mov	r0, r4
 801563a:	4611      	mov	r1, r2
 801563c:	f000 fada 	bl	8015bf4 <uxr_stamp_session_header>
 8015640:	a80a      	add	r0, sp, #40	@ 0x28
 8015642:	f7fe fe6f 	bl	8014324 <ucdr_buffer_length>
 8015646:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015648:	4602      	mov	r2, r0
 801564a:	a905      	add	r1, sp, #20
 801564c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8015650:	47b0      	blx	r6
 8015652:	f001 f95d 	bl	8016910 <uxr_millis>
 8015656:	2300      	movs	r3, #0
 8015658:	4606      	mov	r6, r0
 801565a:	4629      	mov	r1, r5
 801565c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8015660:	e000      	b.n	8015664 <uxr_sync_session+0x84>
 8015662:	b950      	cbnz	r0, 801567a <uxr_sync_session+0x9a>
 8015664:	4620      	mov	r0, r4
 8015666:	f7ff fdcb 	bl	8015200 <listen_message_reliably>
 801566a:	f001 f951 	bl	8016910 <uxr_millis>
 801566e:	1b83      	subs	r3, r0, r6
 8015670:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8015674:	1ae9      	subs	r1, r5, r3
 8015676:	2900      	cmp	r1, #0
 8015678:	dcf3      	bgt.n	8015662 <uxr_sync_session+0x82>
 801567a:	b013      	add	sp, #76	@ 0x4c
 801567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801567e:	bf00      	nop
 8015680:	3b9aca00 	.word	0x3b9aca00
 8015684:	00000000 	.word	0x00000000

08015688 <wait_session_status>:
 8015688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801568c:	4604      	mov	r4, r0
 801568e:	b09d      	sub	sp, #116	@ 0x74
 8015690:	20ff      	movs	r0, #255	@ 0xff
 8015692:	9303      	str	r3, [sp, #12]
 8015694:	7160      	strb	r0, [r4, #5]
 8015696:	2b00      	cmp	r3, #0
 8015698:	f000 80b6 	beq.w	8015808 <wait_session_status+0x180>
 801569c:	4689      	mov	r9, r1
 801569e:	4692      	mov	sl, r2
 80156a0:	f04f 0b00 	mov.w	fp, #0
 80156a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80156a6:	4652      	mov	r2, sl
 80156a8:	4649      	mov	r1, r9
 80156aa:	e9d3 0500 	ldrd	r0, r5, [r3]
 80156ae:	47a8      	blx	r5
 80156b0:	f001 f92e 	bl	8016910 <uxr_millis>
 80156b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80156b8:	4605      	mov	r5, r0
 80156ba:	e009      	b.n	80156d0 <wait_session_status+0x48>
 80156bc:	f001 f928 	bl	8016910 <uxr_millis>
 80156c0:	1b40      	subs	r0, r0, r5
 80156c2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	dd40      	ble.n	801574c <wait_session_status+0xc4>
 80156ca:	7960      	ldrb	r0, [r4, #5]
 80156cc:	28ff      	cmp	r0, #255	@ 0xff
 80156ce:	d145      	bne.n	801575c <wait_session_status+0xd4>
 80156d0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80156d2:	a908      	add	r1, sp, #32
 80156d4:	6896      	ldr	r6, [r2, #8]
 80156d6:	6810      	ldr	r0, [r2, #0]
 80156d8:	aa09      	add	r2, sp, #36	@ 0x24
 80156da:	47b0      	blx	r6
 80156dc:	2800      	cmp	r0, #0
 80156de:	d0ed      	beq.n	80156bc <wait_session_status+0x34>
 80156e0:	a80c      	add	r0, sp, #48	@ 0x30
 80156e2:	2600      	movs	r6, #0
 80156e4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80156e8:	f7fe fdee 	bl	80142c8 <ucdr_init_buffer>
 80156ec:	f10d 031e 	add.w	r3, sp, #30
 80156f0:	aa07      	add	r2, sp, #28
 80156f2:	a90c      	add	r1, sp, #48	@ 0x30
 80156f4:	4620      	mov	r0, r4
 80156f6:	f88d 601c 	strb.w	r6, [sp, #28]
 80156fa:	f000 fa8f 	bl	8015c1c <uxr_read_session_header>
 80156fe:	2800      	cmp	r0, #0
 8015700:	d0dc      	beq.n	80156bc <wait_session_status+0x34>
 8015702:	4631      	mov	r1, r6
 8015704:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8015708:	f000 ffac 	bl	8016664 <uxr_stream_id_from_raw>
 801570c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015710:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015714:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015718:	2f01      	cmp	r7, #1
 801571a:	9302      	str	r3, [sp, #8]
 801571c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8015720:	d05c      	beq.n	80157dc <wait_session_status+0x154>
 8015722:	2f02      	cmp	r7, #2
 8015724:	d020      	beq.n	8015768 <wait_session_status+0xe0>
 8015726:	2f00      	cmp	r7, #0
 8015728:	d1c8      	bne.n	80156bc <wait_session_status+0x34>
 801572a:	4639      	mov	r1, r7
 801572c:	4638      	mov	r0, r7
 801572e:	f000 ff99 	bl	8016664 <uxr_stream_id_from_raw>
 8015732:	a90c      	add	r1, sp, #48	@ 0x30
 8015734:	4602      	mov	r2, r0
 8015736:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015738:	4620      	mov	r0, r4
 801573a:	f7ff fbd7 	bl	8014eec <read_submessage_list>
 801573e:	f001 f8e7 	bl	8016910 <uxr_millis>
 8015742:	1b40      	subs	r0, r0, r5
 8015744:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8015748:	2b00      	cmp	r3, #0
 801574a:	dcbe      	bgt.n	80156ca <wait_session_status+0x42>
 801574c:	f10b 0b01 	add.w	fp, fp, #1
 8015750:	9b03      	ldr	r3, [sp, #12]
 8015752:	7960      	ldrb	r0, [r4, #5]
 8015754:	455b      	cmp	r3, fp
 8015756:	d001      	beq.n	801575c <wait_session_status+0xd4>
 8015758:	28ff      	cmp	r0, #255	@ 0xff
 801575a:	d0a3      	beq.n	80156a4 <wait_session_status+0x1c>
 801575c:	38ff      	subs	r0, #255	@ 0xff
 801575e:	bf18      	it	ne
 8015760:	2001      	movne	r0, #1
 8015762:	b01d      	add	sp, #116	@ 0x74
 8015764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015768:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801576c:	4631      	mov	r1, r6
 801576e:	f104 0008 	add.w	r0, r4, #8
 8015772:	9304      	str	r3, [sp, #16]
 8015774:	f001 f864 	bl	8016840 <uxr_get_input_reliable_stream>
 8015778:	4680      	mov	r8, r0
 801577a:	b348      	cbz	r0, 80157d0 <wait_session_status+0x148>
 801577c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801577e:	a80c      	add	r0, sp, #48	@ 0x30
 8015780:	9205      	str	r2, [sp, #20]
 8015782:	f7fe fdd3 	bl	801432c <ucdr_buffer_remaining>
 8015786:	4603      	mov	r3, r0
 8015788:	f10d 001d 	add.w	r0, sp, #29
 801578c:	9a05      	ldr	r2, [sp, #20]
 801578e:	9000      	str	r0, [sp, #0]
 8015790:	4640      	mov	r0, r8
 8015792:	9902      	ldr	r1, [sp, #8]
 8015794:	f006 ff02 	bl	801c59c <uxr_receive_reliable_message>
 8015798:	b1d0      	cbz	r0, 80157d0 <wait_session_status+0x148>
 801579a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d03a      	beq.n	8015818 <wait_session_status+0x190>
 80157a2:	9f04      	ldr	r7, [sp, #16]
 80157a4:	e00a      	b.n	80157bc <wait_session_status+0x134>
 80157a6:	f04f 0302 	mov.w	r3, #2
 80157aa:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80157ae:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80157b2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80157b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80157b8:	f7ff fb98 	bl	8014eec <read_submessage_list>
 80157bc:	a914      	add	r1, sp, #80	@ 0x50
 80157be:	2204      	movs	r2, #4
 80157c0:	4640      	mov	r0, r8
 80157c2:	f006 ff6d 	bl	801c6a0 <uxr_next_input_reliable_buffer_available>
 80157c6:	4603      	mov	r3, r0
 80157c8:	a914      	add	r1, sp, #80	@ 0x50
 80157ca:	4620      	mov	r0, r4
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d1ea      	bne.n	80157a6 <wait_session_status+0x11e>
 80157d0:	4632      	mov	r2, r6
 80157d2:	9904      	ldr	r1, [sp, #16]
 80157d4:	4620      	mov	r0, r4
 80157d6:	f7ff fa05 	bl	8014be4 <write_submessage_acknack.isra.0>
 80157da:	e76f      	b.n	80156bc <wait_session_status+0x34>
 80157dc:	4631      	mov	r1, r6
 80157de:	f104 0008 	add.w	r0, r4, #8
 80157e2:	f001 f823 	bl	801682c <uxr_get_input_best_effort_stream>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	f43f af68 	beq.w	80156bc <wait_session_status+0x34>
 80157ec:	9902      	ldr	r1, [sp, #8]
 80157ee:	f006 fe4b 	bl	801c488 <uxr_receive_best_effort_message>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	f43f af62 	beq.w	80156bc <wait_session_status+0x34>
 80157f8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80157fc:	a90c      	add	r1, sp, #48	@ 0x30
 80157fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015800:	4620      	mov	r0, r4
 8015802:	f7ff fb73 	bl	8014eec <read_submessage_list>
 8015806:	e759      	b.n	80156bc <wait_session_status+0x34>
 8015808:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801580a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801580e:	47a0      	blx	r4
 8015810:	2001      	movs	r0, #1
 8015812:	b01d      	add	sp, #116	@ 0x74
 8015814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015818:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801581c:	a90c      	add	r1, sp, #48	@ 0x30
 801581e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015820:	4620      	mov	r0, r4
 8015822:	f7ff fb63 	bl	8014eec <read_submessage_list>
 8015826:	e7bc      	b.n	80157a2 <wait_session_status+0x11a>

08015828 <uxr_delete_session_retries>:
 8015828:	b530      	push	{r4, r5, lr}
 801582a:	b08f      	sub	sp, #60	@ 0x3c
 801582c:	4604      	mov	r4, r0
 801582e:	460d      	mov	r5, r1
 8015830:	f000 fa34 	bl	8015c9c <uxr_session_header_offset>
 8015834:	2300      	movs	r3, #0
 8015836:	2210      	movs	r2, #16
 8015838:	a902      	add	r1, sp, #8
 801583a:	9000      	str	r0, [sp, #0]
 801583c:	a806      	add	r0, sp, #24
 801583e:	f7fe fd31 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 8015842:	a906      	add	r1, sp, #24
 8015844:	4620      	mov	r0, r4
 8015846:	f000 f979 	bl	8015b3c <uxr_buffer_delete_session>
 801584a:	2200      	movs	r2, #0
 801584c:	9b06      	ldr	r3, [sp, #24]
 801584e:	4620      	mov	r0, r4
 8015850:	4611      	mov	r1, r2
 8015852:	f000 f9cf 	bl	8015bf4 <uxr_stamp_session_header>
 8015856:	a806      	add	r0, sp, #24
 8015858:	f7fe fd64 	bl	8014324 <ucdr_buffer_length>
 801585c:	462b      	mov	r3, r5
 801585e:	4602      	mov	r2, r0
 8015860:	a902      	add	r1, sp, #8
 8015862:	4620      	mov	r0, r4
 8015864:	f7ff ff10 	bl	8015688 <wait_session_status>
 8015868:	b118      	cbz	r0, 8015872 <uxr_delete_session_retries+0x4a>
 801586a:	7960      	ldrb	r0, [r4, #5]
 801586c:	fab0 f080 	clz	r0, r0
 8015870:	0940      	lsrs	r0, r0, #5
 8015872:	b00f      	add	sp, #60	@ 0x3c
 8015874:	bd30      	pop	{r4, r5, pc}
 8015876:	bf00      	nop

08015878 <uxr_create_session>:
 8015878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587c:	f100 0b08 	add.w	fp, r0, #8
 8015880:	4604      	mov	r4, r0
 8015882:	b0ab      	sub	sp, #172	@ 0xac
 8015884:	4658      	mov	r0, fp
 8015886:	465e      	mov	r6, fp
 8015888:	f000 ff22 	bl	80166d0 <uxr_reset_stream_storage>
 801588c:	4620      	mov	r0, r4
 801588e:	f000 fa05 	bl	8015c9c <uxr_session_header_offset>
 8015892:	2300      	movs	r3, #0
 8015894:	221c      	movs	r2, #28
 8015896:	a90b      	add	r1, sp, #44	@ 0x2c
 8015898:	9000      	str	r0, [sp, #0]
 801589a:	a812      	add	r0, sp, #72	@ 0x48
 801589c:	f7fe fd02 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 80158a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80158a2:	a912      	add	r1, sp, #72	@ 0x48
 80158a4:	4620      	mov	r0, r4
 80158a6:	8a1a      	ldrh	r2, [r3, #16]
 80158a8:	3a04      	subs	r2, #4
 80158aa:	b292      	uxth	r2, r2
 80158ac:	f000 f91c 	bl	8015ae8 <uxr_buffer_create_session>
 80158b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80158b2:	4620      	mov	r0, r4
 80158b4:	f000 f98a 	bl	8015bcc <uxr_stamp_create_session_header>
 80158b8:	a812      	add	r0, sp, #72	@ 0x48
 80158ba:	f7fe fd33 	bl	8014324 <ucdr_buffer_length>
 80158be:	23ff      	movs	r3, #255	@ 0xff
 80158c0:	4681      	mov	r9, r0
 80158c2:	7163      	strb	r3, [r4, #5]
 80158c4:	230a      	movs	r3, #10
 80158c6:	9303      	str	r3, [sp, #12]
 80158c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80158ca:	464a      	mov	r2, r9
 80158cc:	a90b      	add	r1, sp, #44	@ 0x2c
 80158ce:	e9d3 0500 	ldrd	r0, r5, [r3]
 80158d2:	47a8      	blx	r5
 80158d4:	f001 f81c 	bl	8016910 <uxr_millis>
 80158d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80158dc:	4605      	mov	r5, r0
 80158de:	e009      	b.n	80158f4 <uxr_create_session+0x7c>
 80158e0:	f001 f816 	bl	8016910 <uxr_millis>
 80158e4:	1b40      	subs	r0, r0, r5
 80158e6:	7962      	ldrb	r2, [r4, #5]
 80158e8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	dd38      	ble.n	8015962 <uxr_create_session+0xea>
 80158f0:	2aff      	cmp	r2, #255	@ 0xff
 80158f2:	d13c      	bne.n	801596e <uxr_create_session+0xf6>
 80158f4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80158f6:	a907      	add	r1, sp, #28
 80158f8:	6897      	ldr	r7, [r2, #8]
 80158fa:	6810      	ldr	r0, [r2, #0]
 80158fc:	aa08      	add	r2, sp, #32
 80158fe:	47b8      	blx	r7
 8015900:	2800      	cmp	r0, #0
 8015902:	d0ed      	beq.n	80158e0 <uxr_create_session+0x68>
 8015904:	a81a      	add	r0, sp, #104	@ 0x68
 8015906:	2700      	movs	r7, #0
 8015908:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801590c:	f7fe fcdc 	bl	80142c8 <ucdr_init_buffer>
 8015910:	f10d 031a 	add.w	r3, sp, #26
 8015914:	aa06      	add	r2, sp, #24
 8015916:	a91a      	add	r1, sp, #104	@ 0x68
 8015918:	4620      	mov	r0, r4
 801591a:	f88d 7018 	strb.w	r7, [sp, #24]
 801591e:	f000 f97d 	bl	8015c1c <uxr_read_session_header>
 8015922:	2800      	cmp	r0, #0
 8015924:	d0dc      	beq.n	80158e0 <uxr_create_session+0x68>
 8015926:	4639      	mov	r1, r7
 8015928:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801592c:	f000 fe9a 	bl	8016664 <uxr_stream_id_from_raw>
 8015930:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015934:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8015938:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801593c:	2f01      	cmp	r7, #1
 801593e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8015942:	d053      	beq.n	80159ec <uxr_create_session+0x174>
 8015944:	2f02      	cmp	r7, #2
 8015946:	d018      	beq.n	801597a <uxr_create_session+0x102>
 8015948:	2f00      	cmp	r7, #0
 801594a:	d1c9      	bne.n	80158e0 <uxr_create_session+0x68>
 801594c:	4639      	mov	r1, r7
 801594e:	4638      	mov	r0, r7
 8015950:	f000 fe88 	bl	8016664 <uxr_stream_id_from_raw>
 8015954:	a91a      	add	r1, sp, #104	@ 0x68
 8015956:	4602      	mov	r2, r0
 8015958:	900a      	str	r0, [sp, #40]	@ 0x28
 801595a:	4620      	mov	r0, r4
 801595c:	f7ff fac6 	bl	8014eec <read_submessage_list>
 8015960:	e7be      	b.n	80158e0 <uxr_create_session+0x68>
 8015962:	9b03      	ldr	r3, [sp, #12]
 8015964:	3b01      	subs	r3, #1
 8015966:	9303      	str	r3, [sp, #12]
 8015968:	d001      	beq.n	801596e <uxr_create_session+0xf6>
 801596a:	2aff      	cmp	r2, #255	@ 0xff
 801596c:	d0ac      	beq.n	80158c8 <uxr_create_session+0x50>
 801596e:	2a00      	cmp	r2, #0
 8015970:	d051      	beq.n	8015a16 <uxr_create_session+0x19e>
 8015972:	2000      	movs	r0, #0
 8015974:	b02b      	add	sp, #172	@ 0xac
 8015976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801597e:	4641      	mov	r1, r8
 8015980:	4630      	mov	r0, r6
 8015982:	9304      	str	r3, [sp, #16]
 8015984:	f000 ff5c 	bl	8016840 <uxr_get_input_reliable_stream>
 8015988:	4682      	mov	sl, r0
 801598a:	b348      	cbz	r0, 80159e0 <uxr_create_session+0x168>
 801598c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801598e:	a81a      	add	r0, sp, #104	@ 0x68
 8015990:	9205      	str	r2, [sp, #20]
 8015992:	f7fe fccb 	bl	801432c <ucdr_buffer_remaining>
 8015996:	4603      	mov	r3, r0
 8015998:	f10d 0019 	add.w	r0, sp, #25
 801599c:	9a05      	ldr	r2, [sp, #20]
 801599e:	4659      	mov	r1, fp
 80159a0:	9000      	str	r0, [sp, #0]
 80159a2:	4650      	mov	r0, sl
 80159a4:	f006 fdfa 	bl	801c59c <uxr_receive_reliable_message>
 80159a8:	b1d0      	cbz	r0, 80159e0 <uxr_create_session+0x168>
 80159aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d038      	beq.n	8015a24 <uxr_create_session+0x1ac>
 80159b2:	9f04      	ldr	r7, [sp, #16]
 80159b4:	e00a      	b.n	80159cc <uxr_create_session+0x154>
 80159b6:	f04f 0302 	mov.w	r3, #2
 80159ba:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 80159be:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 80159c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80159c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80159c8:	f7ff fa90 	bl	8014eec <read_submessage_list>
 80159cc:	a922      	add	r1, sp, #136	@ 0x88
 80159ce:	2204      	movs	r2, #4
 80159d0:	4650      	mov	r0, sl
 80159d2:	f006 fe65 	bl	801c6a0 <uxr_next_input_reliable_buffer_available>
 80159d6:	4603      	mov	r3, r0
 80159d8:	a922      	add	r1, sp, #136	@ 0x88
 80159da:	4620      	mov	r0, r4
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1ea      	bne.n	80159b6 <uxr_create_session+0x13e>
 80159e0:	4642      	mov	r2, r8
 80159e2:	9904      	ldr	r1, [sp, #16]
 80159e4:	4620      	mov	r0, r4
 80159e6:	f7ff f8fd 	bl	8014be4 <write_submessage_acknack.isra.0>
 80159ea:	e779      	b.n	80158e0 <uxr_create_session+0x68>
 80159ec:	4641      	mov	r1, r8
 80159ee:	4630      	mov	r0, r6
 80159f0:	f000 ff1c 	bl	801682c <uxr_get_input_best_effort_stream>
 80159f4:	2800      	cmp	r0, #0
 80159f6:	f43f af73 	beq.w	80158e0 <uxr_create_session+0x68>
 80159fa:	4659      	mov	r1, fp
 80159fc:	f006 fd44 	bl	801c488 <uxr_receive_best_effort_message>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	f43f af6d 	beq.w	80158e0 <uxr_create_session+0x68>
 8015a06:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8015a0a:	a91a      	add	r1, sp, #104	@ 0x68
 8015a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f7ff fa6c 	bl	8014eec <read_submessage_list>
 8015a14:	e764      	b.n	80158e0 <uxr_create_session+0x68>
 8015a16:	4630      	mov	r0, r6
 8015a18:	f000 fe5a 	bl	80166d0 <uxr_reset_stream_storage>
 8015a1c:	2001      	movs	r0, #1
 8015a1e:	b02b      	add	sp, #172	@ 0xac
 8015a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a24:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8015a28:	a91a      	add	r1, sp, #104	@ 0x68
 8015a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f7ff fa5d 	bl	8014eec <read_submessage_list>
 8015a32:	e7be      	b.n	80159b2 <uxr_create_session+0x13a>

08015a34 <uxr_prepare_stream_to_write_submessage>:
 8015a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a38:	b082      	sub	sp, #8
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	4615      	mov	r5, r2
 8015a40:	461e      	mov	r6, r3
 8015a42:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8015a46:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8015a4a:	f105 0904 	add.w	r9, r5, #4
 8015a4e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8015a52:	9101      	str	r1, [sp, #4]
 8015a54:	f000 ff56 	bl	8016904 <uxr_submessage_padding>
 8015a58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015a5c:	4481      	add	r9, r0
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d01d      	beq.n	8015a9e <uxr_prepare_stream_to_write_submessage+0x6a>
 8015a62:	2b02      	cmp	r3, #2
 8015a64:	d116      	bne.n	8015a94 <uxr_prepare_stream_to_write_submessage+0x60>
 8015a66:	f104 0008 	add.w	r0, r4, #8
 8015a6a:	4651      	mov	r1, sl
 8015a6c:	f000 fed2 	bl	8016814 <uxr_get_output_reliable_stream>
 8015a70:	4604      	mov	r4, r0
 8015a72:	b158      	cbz	r0, 8015a8c <uxr_prepare_stream_to_write_submessage+0x58>
 8015a74:	4649      	mov	r1, r9
 8015a76:	4632      	mov	r2, r6
 8015a78:	f006 ffd8 	bl	801ca2c <uxr_prepare_reliable_buffer_to_write>
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	b12c      	cbz	r4, 8015a8c <uxr_prepare_stream_to_write_submessage+0x58>
 8015a80:	4643      	mov	r3, r8
 8015a82:	b2aa      	uxth	r2, r5
 8015a84:	4639      	mov	r1, r7
 8015a86:	4630      	mov	r0, r6
 8015a88:	f000 fefc 	bl	8016884 <uxr_buffer_submessage_header>
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	b002      	add	sp, #8
 8015a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a94:	2400      	movs	r4, #0
 8015a96:	4620      	mov	r0, r4
 8015a98:	b002      	add	sp, #8
 8015a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a9e:	f104 0008 	add.w	r0, r4, #8
 8015aa2:	4651      	mov	r1, sl
 8015aa4:	f000 feae 	bl	8016804 <uxr_get_output_best_effort_stream>
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d0ee      	beq.n	8015a8c <uxr_prepare_stream_to_write_submessage+0x58>
 8015aae:	4649      	mov	r1, r9
 8015ab0:	4632      	mov	r2, r6
 8015ab2:	f006 fee5 	bl	801c880 <uxr_prepare_best_effort_buffer_to_write>
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	e7e1      	b.n	8015a7e <uxr_prepare_stream_to_write_submessage+0x4a>
 8015aba:	bf00      	nop

08015abc <uxr_init_session_info>:
 8015abc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8015ac0:	23ff      	movs	r3, #255	@ 0xff
 8015ac2:	7102      	strb	r2, [r0, #4]
 8015ac4:	f880 c001 	strb.w	ip, [r0, #1]
 8015ac8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015acc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015ad0:	7001      	strb	r1, [r0, #0]
 8015ad2:	f880 c002 	strb.w	ip, [r0, #2]
 8015ad6:	7143      	strb	r3, [r0, #5]
 8015ad8:	70c2      	strb	r2, [r0, #3]
 8015ada:	b500      	push	{lr}
 8015adc:	f04f 0e09 	mov.w	lr, #9
 8015ae0:	f8a0 e006 	strh.w	lr, [r0, #6]
 8015ae4:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae8 <uxr_buffer_create_session>:
 8015ae8:	b530      	push	{r4, r5, lr}
 8015aea:	2300      	movs	r3, #0
 8015aec:	b089      	sub	sp, #36	@ 0x24
 8015aee:	4d12      	ldr	r5, [pc, #72]	@ (8015b38 <uxr_buffer_create_session+0x50>)
 8015af0:	460c      	mov	r4, r1
 8015af2:	9307      	str	r3, [sp, #28]
 8015af4:	4619      	mov	r1, r3
 8015af6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015afa:	2201      	movs	r2, #1
 8015afc:	9301      	str	r3, [sp, #4]
 8015afe:	80c2      	strh	r2, [r0, #6]
 8015b00:	f88d 2004 	strb.w	r2, [sp, #4]
 8015b04:	682a      	ldr	r2, [r5, #0]
 8015b06:	9303      	str	r3, [sp, #12]
 8015b08:	9200      	str	r2, [sp, #0]
 8015b0a:	88aa      	ldrh	r2, [r5, #4]
 8015b0c:	9306      	str	r3, [sp, #24]
 8015b0e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015b12:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8015b16:	9202      	str	r2, [sp, #8]
 8015b18:	7802      	ldrb	r2, [r0, #0]
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	f88d 200c 	strb.w	r2, [sp, #12]
 8015b20:	2210      	movs	r2, #16
 8015b22:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8015b26:	f000 fead 	bl	8016884 <uxr_buffer_submessage_header>
 8015b2a:	4669      	mov	r1, sp
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f001 fdff 	bl	8017730 <uxr_serialize_CREATE_CLIENT_Payload>
 8015b32:	b009      	add	sp, #36	@ 0x24
 8015b34:	bd30      	pop	{r4, r5, pc}
 8015b36:	bf00      	nop
 8015b38:	0801eff4 	.word	0x0801eff4

08015b3c <uxr_buffer_delete_session>:
 8015b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8015b70 <uxr_buffer_delete_session+0x34>)
 8015b3e:	2302      	movs	r3, #2
 8015b40:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8015b44:	b510      	push	{r4, lr}
 8015b46:	460c      	mov	r4, r1
 8015b48:	b082      	sub	sp, #8
 8015b4a:	8911      	ldrh	r1, [r2, #8]
 8015b4c:	2204      	movs	r2, #4
 8015b4e:	80c3      	strh	r3, [r0, #6]
 8015b50:	2300      	movs	r3, #0
 8015b52:	f8ad 1006 	strh.w	r1, [sp, #6]
 8015b56:	4620      	mov	r0, r4
 8015b58:	2103      	movs	r1, #3
 8015b5a:	f8ad c004 	strh.w	ip, [sp, #4]
 8015b5e:	f000 fe91 	bl	8016884 <uxr_buffer_submessage_header>
 8015b62:	a901      	add	r1, sp, #4
 8015b64:	4620      	mov	r0, r4
 8015b66:	f001 fe8b 	bl	8017880 <uxr_serialize_DELETE_Payload>
 8015b6a:	b002      	add	sp, #8
 8015b6c:	bd10      	pop	{r4, pc}
 8015b6e:	bf00      	nop
 8015b70:	0801eff4 	.word	0x0801eff4

08015b74 <uxr_read_create_session_status>:
 8015b74:	b510      	push	{r4, lr}
 8015b76:	460b      	mov	r3, r1
 8015b78:	b088      	sub	sp, #32
 8015b7a:	4604      	mov	r4, r0
 8015b7c:	a901      	add	r1, sp, #4
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f001 fe8e 	bl	80178a0 <uxr_deserialize_STATUS_AGENT_Payload>
 8015b84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015b88:	7163      	strb	r3, [r4, #5]
 8015b8a:	b008      	add	sp, #32
 8015b8c:	bd10      	pop	{r4, pc}
 8015b8e:	bf00      	nop

08015b90 <uxr_read_delete_session_status>:
 8015b90:	b510      	push	{r4, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	4604      	mov	r4, r0
 8015b96:	4608      	mov	r0, r1
 8015b98:	a902      	add	r1, sp, #8
 8015b9a:	f001 feb1 	bl	8017900 <uxr_deserialize_STATUS_Payload>
 8015b9e:	88e3      	ldrh	r3, [r4, #6]
 8015ba0:	2b02      	cmp	r3, #2
 8015ba2:	d001      	beq.n	8015ba8 <uxr_read_delete_session_status+0x18>
 8015ba4:	b004      	add	sp, #16
 8015ba6:	bd10      	pop	{r4, pc}
 8015ba8:	f10d 000a 	add.w	r0, sp, #10
 8015bac:	f7fe feaa 	bl	8014904 <uxr_object_id_from_raw>
 8015bb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8015bb4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8015bb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	2b02      	cmp	r3, #2
 8015bc0:	d1f0      	bne.n	8015ba4 <uxr_read_delete_session_status+0x14>
 8015bc2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015bc6:	7163      	strb	r3, [r4, #5]
 8015bc8:	e7ec      	b.n	8015ba4 <uxr_read_delete_session_status+0x14>
 8015bca:	bf00      	nop

08015bcc <uxr_stamp_create_session_header>:
 8015bcc:	b510      	push	{r4, lr}
 8015bce:	2208      	movs	r2, #8
 8015bd0:	b08a      	sub	sp, #40	@ 0x28
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	eb0d 0002 	add.w	r0, sp, r2
 8015bd8:	f7fe fb76 	bl	80142c8 <ucdr_init_buffer>
 8015bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015be0:	2300      	movs	r3, #0
 8015be2:	a802      	add	r0, sp, #8
 8015be4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8015be8:	9400      	str	r4, [sp, #0]
 8015bea:	461a      	mov	r2, r3
 8015bec:	f001 f846 	bl	8016c7c <uxr_serialize_message_header>
 8015bf0:	b00a      	add	sp, #40	@ 0x28
 8015bf2:	bd10      	pop	{r4, pc}

08015bf4 <uxr_stamp_session_header>:
 8015bf4:	b530      	push	{r4, r5, lr}
 8015bf6:	b08d      	sub	sp, #52	@ 0x34
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	460d      	mov	r5, r1
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	a804      	add	r0, sp, #16
 8015c00:	9203      	str	r2, [sp, #12]
 8015c02:	2208      	movs	r2, #8
 8015c04:	f7fe fb60 	bl	80142c8 <ucdr_init_buffer>
 8015c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c0c:	9b03      	ldr	r3, [sp, #12]
 8015c0e:	462a      	mov	r2, r5
 8015c10:	a804      	add	r0, sp, #16
 8015c12:	9400      	str	r4, [sp, #0]
 8015c14:	f001 f832 	bl	8016c7c <uxr_serialize_message_header>
 8015c18:	b00d      	add	sp, #52	@ 0x34
 8015c1a:	bd30      	pop	{r4, r5, pc}

08015c1c <uxr_read_session_header>:
 8015c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c20:	4607      	mov	r7, r0
 8015c22:	b084      	sub	sp, #16
 8015c24:	4608      	mov	r0, r1
 8015c26:	460c      	mov	r4, r1
 8015c28:	4615      	mov	r5, r2
 8015c2a:	461e      	mov	r6, r3
 8015c2c:	f7fe fb7e 	bl	801432c <ucdr_buffer_remaining>
 8015c30:	2808      	cmp	r0, #8
 8015c32:	d803      	bhi.n	8015c3c <uxr_read_session_header+0x20>
 8015c34:	2000      	movs	r0, #0
 8015c36:	b004      	add	sp, #16
 8015c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c3c:	f10d 080c 	add.w	r8, sp, #12
 8015c40:	4633      	mov	r3, r6
 8015c42:	462a      	mov	r2, r5
 8015c44:	4620      	mov	r0, r4
 8015c46:	f10d 010b 	add.w	r1, sp, #11
 8015c4a:	f8cd 8000 	str.w	r8, [sp]
 8015c4e:	f001 f833 	bl	8016cb8 <uxr_deserialize_message_header>
 8015c52:	783a      	ldrb	r2, [r7, #0]
 8015c54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8015c58:	4293      	cmp	r3, r2
 8015c5a:	d1eb      	bne.n	8015c34 <uxr_read_session_header+0x18>
 8015c5c:	061b      	lsls	r3, r3, #24
 8015c5e:	d41b      	bmi.n	8015c98 <uxr_read_session_header+0x7c>
 8015c60:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015c64:	787b      	ldrb	r3, [r7, #1]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d003      	beq.n	8015c72 <uxr_read_session_header+0x56>
 8015c6a:	2001      	movs	r0, #1
 8015c6c:	f080 0001 	eor.w	r0, r0, #1
 8015c70:	e7e1      	b.n	8015c36 <uxr_read_session_header+0x1a>
 8015c72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8015c76:	1cb8      	adds	r0, r7, #2
 8015c78:	78bb      	ldrb	r3, [r7, #2]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d1f5      	bne.n	8015c6a <uxr_read_session_header+0x4e>
 8015c7e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8015c82:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d1ef      	bne.n	8015c6a <uxr_read_session_header+0x4e>
 8015c8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015c8e:	7843      	ldrb	r3, [r0, #1]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d1ea      	bne.n	8015c6a <uxr_read_session_header+0x4e>
 8015c94:	2000      	movs	r0, #0
 8015c96:	e7e9      	b.n	8015c6c <uxr_read_session_header+0x50>
 8015c98:	2001      	movs	r0, #1
 8015c9a:	e7cc      	b.n	8015c36 <uxr_read_session_header+0x1a>

08015c9c <uxr_session_header_offset>:
 8015c9c:	f990 3000 	ldrsb.w	r3, [r0]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	bfac      	ite	ge
 8015ca4:	2008      	movge	r0, #8
 8015ca6:	2004      	movlt	r0, #4
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <uxr_init_base_object_request>:
 8015cac:	b510      	push	{r4, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8015cb4:	9101      	str	r1, [sp, #4]
 8015cb6:	88c3      	ldrh	r3, [r0, #6]
 8015cb8:	f1a3 010a 	sub.w	r1, r3, #10
 8015cbc:	b289      	uxth	r1, r1
 8015cbe:	42a1      	cmp	r1, r4
 8015cc0:	d80f      	bhi.n	8015ce2 <uxr_init_base_object_request+0x36>
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	b29c      	uxth	r4, r3
 8015cc6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	80c4      	strh	r4, [r0, #6]
 8015cce:	1c91      	adds	r1, r2, #2
 8015cd0:	9801      	ldr	r0, [sp, #4]
 8015cd2:	f882 c000 	strb.w	ip, [r2]
 8015cd6:	7053      	strb	r3, [r2, #1]
 8015cd8:	f7fe fe28 	bl	801492c <uxr_object_id_to_raw>
 8015cdc:	4620      	mov	r0, r4
 8015cde:	b002      	add	sp, #8
 8015ce0:	bd10      	pop	{r4, pc}
 8015ce2:	230a      	movs	r3, #10
 8015ce4:	f04f 0c00 	mov.w	ip, #0
 8015ce8:	461c      	mov	r4, r3
 8015cea:	e7ef      	b.n	8015ccc <uxr_init_base_object_request+0x20>

08015cec <uxr_parse_base_object_request>:
 8015cec:	b570      	push	{r4, r5, r6, lr}
 8015cee:	4604      	mov	r4, r0
 8015cf0:	3002      	adds	r0, #2
 8015cf2:	460d      	mov	r5, r1
 8015cf4:	4616      	mov	r6, r2
 8015cf6:	f7fe fe05 	bl	8014904 <uxr_object_id_from_raw>
 8015cfa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8015cfe:	8028      	strh	r0, [r5, #0]
 8015d00:	806b      	strh	r3, [r5, #2]
 8015d02:	7822      	ldrb	r2, [r4, #0]
 8015d04:	7863      	ldrb	r3, [r4, #1]
 8015d06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015d0a:	8033      	strh	r3, [r6, #0]
 8015d0c:	bd70      	pop	{r4, r5, r6, pc}
 8015d0e:	bf00      	nop

08015d10 <uxr_init_framing_io>:
 8015d10:	2300      	movs	r3, #0
 8015d12:	7041      	strb	r1, [r0, #1]
 8015d14:	7003      	strb	r3, [r0, #0]
 8015d16:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop

08015d1c <uxr_write_framed_msg>:
 8015d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d20:	4617      	mov	r7, r2
 8015d22:	7842      	ldrb	r2, [r0, #1]
 8015d24:	460e      	mov	r6, r1
 8015d26:	b083      	sub	sp, #12
 8015d28:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015d2c:	469b      	mov	fp, r3
 8015d2e:	237e      	movs	r3, #126	@ 0x7e
 8015d30:	4604      	mov	r4, r0
 8015d32:	2901      	cmp	r1, #1
 8015d34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8015d38:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015d3c:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015d40:	f240 8115 	bls.w	8015f6e <uxr_write_framed_msg+0x252>
 8015d44:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015d48:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	2901      	cmp	r1, #1
 8015d50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d54:	d952      	bls.n	8015dfc <uxr_write_framed_msg+0xe0>
 8015d56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d58:	2103      	movs	r1, #3
 8015d5a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015d5e:	b2dd      	uxtb	r5, r3
 8015d60:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015d64:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015d68:	2a01      	cmp	r2, #1
 8015d6a:	d95c      	bls.n	8015e26 <uxr_write_framed_msg+0x10a>
 8015d6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d6e:	1862      	adds	r2, r4, r1
 8015d70:	3101      	adds	r1, #1
 8015d72:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015d76:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8015d7a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015d7e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8015d82:	2a01      	cmp	r2, #1
 8015d84:	d961      	bls.n	8015e4a <uxr_write_framed_msg+0x12e>
 8015d86:	1c4a      	adds	r2, r1, #1
 8015d88:	4421      	add	r1, r4
 8015d8a:	b2d2      	uxtb	r2, r2
 8015d8c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015d90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d06a      	beq.n	8015e6e <uxr_write_framed_msg+0x152>
 8015d98:	f04f 0800 	mov.w	r8, #0
 8015d9c:	46c1      	mov	r9, r8
 8015d9e:	e016      	b.n	8015dce <uxr_write_framed_msg+0xb2>
 8015da0:	2a29      	cmp	r2, #41	@ 0x29
 8015da2:	d868      	bhi.n	8015e76 <uxr_write_framed_msg+0x15a>
 8015da4:	18a0      	adds	r0, r4, r2
 8015da6:	3201      	adds	r2, #1
 8015da8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015dac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015db0:	ea88 0101 	eor.w	r1, r8, r1
 8015db4:	4b7d      	ldr	r3, [pc, #500]	@ (8015fac <uxr_write_framed_msg+0x290>)
 8015db6:	f109 0901 	add.w	r9, r9, #1
 8015dba:	b2c9      	uxtb	r1, r1
 8015dbc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015dc0:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dc6:	454b      	cmp	r3, r9
 8015dc8:	d969      	bls.n	8015e9e <uxr_write_framed_msg+0x182>
 8015dca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015dce:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015dd2:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015dd6:	2801      	cmp	r0, #1
 8015dd8:	d8e2      	bhi.n	8015da0 <uxr_write_framed_msg+0x84>
 8015dda:	1c50      	adds	r0, r2, #1
 8015ddc:	b2c0      	uxtb	r0, r0
 8015dde:	2829      	cmp	r0, #41	@ 0x29
 8015de0:	d849      	bhi.n	8015e76 <uxr_write_framed_msg+0x15a>
 8015de2:	18a0      	adds	r0, r4, r2
 8015de4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015de8:	3202      	adds	r2, #2
 8015dea:	f081 0520 	eor.w	r5, r1, #32
 8015dee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015df2:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015df6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015dfa:	e7d9      	b.n	8015db0 <uxr_write_framed_msg+0x94>
 8015dfc:	2104      	movs	r1, #4
 8015dfe:	f04f 0c03 	mov.w	ip, #3
 8015e02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e04:	4422      	add	r2, r4
 8015e06:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015e0a:	44a4      	add	ip, r4
 8015e0c:	b2dd      	uxtb	r5, r3
 8015e0e:	f080 0020 	eor.w	r0, r0, #32
 8015e12:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8015e16:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015e1a:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015e1e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015e22:	2a01      	cmp	r2, #1
 8015e24:	d8a2      	bhi.n	8015d6c <uxr_write_framed_msg+0x50>
 8015e26:	1862      	adds	r2, r4, r1
 8015e28:	207d      	movs	r0, #125	@ 0x7d
 8015e2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e2c:	f085 0520 	eor.w	r5, r5, #32
 8015e30:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8015e34:	3102      	adds	r1, #2
 8015e36:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015e3a:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8015e3e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015e42:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8015e46:	2a01      	cmp	r2, #1
 8015e48:	d89d      	bhi.n	8015d86 <uxr_write_framed_msg+0x6a>
 8015e4a:	1c4d      	adds	r5, r1, #1
 8015e4c:	1c8a      	adds	r2, r1, #2
 8015e4e:	f080 0020 	eor.w	r0, r0, #32
 8015e52:	4421      	add	r1, r4
 8015e54:	fa54 f585 	uxtab	r5, r4, r5
 8015e58:	b2d2      	uxtb	r2, r2
 8015e5a:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015e5e:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8015e62:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8015e66:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d194      	bne.n	8015d98 <uxr_write_framed_msg+0x7c>
 8015e6e:	4619      	mov	r1, r3
 8015e70:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015e74:	e019      	b.n	8015eaa <uxr_write_framed_msg+0x18e>
 8015e76:	2500      	movs	r5, #0
 8015e78:	e000      	b.n	8015e7c <uxr_write_framed_msg+0x160>
 8015e7a:	b160      	cbz	r0, 8015e96 <uxr_write_framed_msg+0x17a>
 8015e7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015e80:	1b52      	subs	r2, r2, r5
 8015e82:	4653      	mov	r3, sl
 8015e84:	4638      	mov	r0, r7
 8015e86:	4421      	add	r1, r4
 8015e88:	47b0      	blx	r6
 8015e8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015e8e:	4405      	add	r5, r0
 8015e90:	4295      	cmp	r5, r2
 8015e92:	d3f2      	bcc.n	8015e7a <uxr_write_framed_msg+0x15e>
 8015e94:	d066      	beq.n	8015f64 <uxr_write_framed_msg+0x248>
 8015e96:	2000      	movs	r0, #0
 8015e98:	b003      	add	sp, #12
 8015e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9e:	fa5f f188 	uxtb.w	r1, r8
 8015ea2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015ea6:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015eaa:	f04f 0900 	mov.w	r9, #0
 8015eae:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8015eb2:	46c8      	mov	r8, r9
 8015eb4:	e013      	b.n	8015ede <uxr_write_framed_msg+0x1c2>
 8015eb6:	2a29      	cmp	r2, #41	@ 0x29
 8015eb8:	d824      	bhi.n	8015f04 <uxr_write_framed_msg+0x1e8>
 8015eba:	18a3      	adds	r3, r4, r2
 8015ebc:	3201      	adds	r2, #1
 8015ebe:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8015ec2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ec6:	f109 0901 	add.w	r9, r9, #1
 8015eca:	f1b9 0f02 	cmp.w	r9, #2
 8015ece:	d02d      	beq.n	8015f2c <uxr_write_framed_msg+0x210>
 8015ed0:	f109 0308 	add.w	r3, r9, #8
 8015ed4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015ed8:	446b      	add	r3, sp
 8015eda:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015ede:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8015ee2:	2b01      	cmp	r3, #1
 8015ee4:	d8e7      	bhi.n	8015eb6 <uxr_write_framed_msg+0x19a>
 8015ee6:	1c53      	adds	r3, r2, #1
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	2b29      	cmp	r3, #41	@ 0x29
 8015eec:	d80a      	bhi.n	8015f04 <uxr_write_framed_msg+0x1e8>
 8015eee:	18a3      	adds	r3, r4, r2
 8015ef0:	f081 0120 	eor.w	r1, r1, #32
 8015ef4:	3202      	adds	r2, #2
 8015ef6:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015efa:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8015efe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f02:	e7e0      	b.n	8015ec6 <uxr_write_framed_msg+0x1aa>
 8015f04:	2500      	movs	r5, #0
 8015f06:	e001      	b.n	8015f0c <uxr_write_framed_msg+0x1f0>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	d0c4      	beq.n	8015e96 <uxr_write_framed_msg+0x17a>
 8015f0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015f10:	1b52      	subs	r2, r2, r5
 8015f12:	4653      	mov	r3, sl
 8015f14:	4638      	mov	r0, r7
 8015f16:	4421      	add	r1, r4
 8015f18:	47b0      	blx	r6
 8015f1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f1e:	4405      	add	r5, r0
 8015f20:	4295      	cmp	r5, r2
 8015f22:	d3f1      	bcc.n	8015f08 <uxr_write_framed_msg+0x1ec>
 8015f24:	d1b7      	bne.n	8015e96 <uxr_write_framed_msg+0x17a>
 8015f26:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8015f2a:	e7d1      	b.n	8015ed0 <uxr_write_framed_msg+0x1b4>
 8015f2c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f30:	b19a      	cbz	r2, 8015f5a <uxr_write_framed_msg+0x23e>
 8015f32:	2500      	movs	r5, #0
 8015f34:	e001      	b.n	8015f3a <uxr_write_framed_msg+0x21e>
 8015f36:	2800      	cmp	r0, #0
 8015f38:	d0ad      	beq.n	8015e96 <uxr_write_framed_msg+0x17a>
 8015f3a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015f3e:	1b52      	subs	r2, r2, r5
 8015f40:	4653      	mov	r3, sl
 8015f42:	4638      	mov	r0, r7
 8015f44:	4421      	add	r1, r4
 8015f46:	47b0      	blx	r6
 8015f48:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f4c:	4405      	add	r5, r0
 8015f4e:	4295      	cmp	r5, r2
 8015f50:	d3f1      	bcc.n	8015f36 <uxr_write_framed_msg+0x21a>
 8015f52:	d1a0      	bne.n	8015e96 <uxr_write_framed_msg+0x17a>
 8015f54:	2300      	movs	r3, #0
 8015f56:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015f5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f5c:	b298      	uxth	r0, r3
 8015f5e:	b003      	add	sp, #12
 8015f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f64:	f04f 0300 	mov.w	r3, #0
 8015f68:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015f6c:	e72a      	b.n	8015dc4 <uxr_write_framed_msg+0xa8>
 8015f6e:	217d      	movs	r1, #125	@ 0x7d
 8015f70:	f082 0220 	eor.w	r2, r2, #32
 8015f74:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015f78:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015f7c:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015f80:	2203      	movs	r2, #3
 8015f82:	2901      	cmp	r1, #1
 8015f84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f88:	d803      	bhi.n	8015f92 <uxr_write_framed_msg+0x276>
 8015f8a:	2105      	movs	r1, #5
 8015f8c:	f04f 0c04 	mov.w	ip, #4
 8015f90:	e737      	b.n	8015e02 <uxr_write_framed_msg+0xe6>
 8015f92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f94:	2104      	movs	r1, #4
 8015f96:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015f9a:	b2dd      	uxtb	r5, r3
 8015f9c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015fa0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015fa4:	2a01      	cmp	r2, #1
 8015fa6:	f63f aee1 	bhi.w	8015d6c <uxr_write_framed_msg+0x50>
 8015faa:	e73c      	b.n	8015e26 <uxr_write_framed_msg+0x10a>
 8015fac:	0801f4b8 	.word	0x0801f4b8

08015fb0 <uxr_framing_read_transport>:
 8015fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb4:	4604      	mov	r4, r0
 8015fb6:	b085      	sub	sp, #20
 8015fb8:	4692      	mov	sl, r2
 8015fba:	4689      	mov	r9, r1
 8015fbc:	461d      	mov	r5, r3
 8015fbe:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015fc0:	f000 fca6 	bl	8016910 <uxr_millis>
 8015fc4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015fc8:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015fcc:	4680      	mov	r8, r0
 8015fce:	42ba      	cmp	r2, r7
 8015fd0:	d05f      	beq.n	8016092 <uxr_framing_read_transport+0xe2>
 8015fd2:	d817      	bhi.n	8016004 <uxr_framing_read_transport+0x54>
 8015fd4:	3f01      	subs	r7, #1
 8015fd6:	1aba      	subs	r2, r7, r2
 8015fd8:	2700      	movs	r7, #0
 8015fda:	b2d2      	uxtb	r2, r2
 8015fdc:	42b2      	cmp	r2, r6
 8015fde:	d81a      	bhi.n	8016016 <uxr_framing_read_transport+0x66>
 8015fe0:	19d3      	adds	r3, r2, r7
 8015fe2:	42b3      	cmp	r3, r6
 8015fe4:	d852      	bhi.n	801608c <uxr_framing_read_transport+0xdc>
 8015fe6:	b9d2      	cbnz	r2, 801601e <uxr_framing_read_transport+0x6e>
 8015fe8:	2600      	movs	r6, #0
 8015fea:	f000 fc91 	bl	8016910 <uxr_millis>
 8015fee:	682b      	ldr	r3, [r5, #0]
 8015ff0:	eba0 0008 	sub.w	r0, r0, r8
 8015ff4:	1a1b      	subs	r3, r3, r0
 8015ff6:	4630      	mov	r0, r6
 8015ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ffc:	602b      	str	r3, [r5, #0]
 8015ffe:	b005      	add	sp, #20
 8016000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016004:	2f00      	cmp	r7, #0
 8016006:	d060      	beq.n	80160ca <uxr_framing_read_transport+0x11a>
 8016008:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801600c:	3f01      	subs	r7, #1
 801600e:	b2d2      	uxtb	r2, r2
 8016010:	b2ff      	uxtb	r7, r7
 8016012:	42b2      	cmp	r2, r6
 8016014:	d9e4      	bls.n	8015fe0 <uxr_framing_read_transport+0x30>
 8016016:	b2f2      	uxtb	r2, r6
 8016018:	2700      	movs	r7, #0
 801601a:	2a00      	cmp	r2, #0
 801601c:	d0e4      	beq.n	8015fe8 <uxr_framing_read_transport+0x38>
 801601e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016020:	4650      	mov	r0, sl
 8016022:	9203      	str	r2, [sp, #12]
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801602a:	682b      	ldr	r3, [r5, #0]
 801602c:	3102      	adds	r1, #2
 801602e:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 80160d4 <uxr_framing_read_transport+0x124>
 8016032:	4421      	add	r1, r4
 8016034:	47c8      	blx	r9
 8016036:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801603a:	4606      	mov	r6, r0
 801603c:	4403      	add	r3, r0
 801603e:	0859      	lsrs	r1, r3, #1
 8016040:	fbab 2101 	umull	r2, r1, fp, r1
 8016044:	222a      	movs	r2, #42	@ 0x2a
 8016046:	0889      	lsrs	r1, r1, #2
 8016048:	fb02 3111 	mls	r1, r2, r1, r3
 801604c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016050:	2800      	cmp	r0, #0
 8016052:	d0c9      	beq.n	8015fe8 <uxr_framing_read_transport+0x38>
 8016054:	9a03      	ldr	r2, [sp, #12]
 8016056:	4290      	cmp	r0, r2
 8016058:	d1c7      	bne.n	8015fea <uxr_framing_read_transport+0x3a>
 801605a:	2f00      	cmp	r7, #0
 801605c:	d0c5      	beq.n	8015fea <uxr_framing_read_transport+0x3a>
 801605e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016060:	3102      	adds	r1, #2
 8016062:	463a      	mov	r2, r7
 8016064:	4650      	mov	r0, sl
 8016066:	4421      	add	r1, r4
 8016068:	9300      	str	r3, [sp, #0]
 801606a:	2300      	movs	r3, #0
 801606c:	47c8      	blx	r9
 801606e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016072:	4406      	add	r6, r0
 8016074:	1813      	adds	r3, r2, r0
 8016076:	085a      	lsrs	r2, r3, #1
 8016078:	fbab 1b02 	umull	r1, fp, fp, r2
 801607c:	222a      	movs	r2, #42	@ 0x2a
 801607e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8016082:	fb02 331b 	mls	r3, r2, fp, r3
 8016086:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801608a:	e7ae      	b.n	8015fea <uxr_framing_read_transport+0x3a>
 801608c:	1ab6      	subs	r6, r6, r2
 801608e:	b2f7      	uxtb	r7, r6
 8016090:	e7a9      	b.n	8015fe6 <uxr_framing_read_transport+0x36>
 8016092:	2300      	movs	r3, #0
 8016094:	2e28      	cmp	r6, #40	@ 0x28
 8016096:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8016098:	d9bd      	bls.n	8016016 <uxr_framing_read_transport+0x66>
 801609a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801609c:	2229      	movs	r2, #41	@ 0x29
 801609e:	1ca1      	adds	r1, r4, #2
 80160a0:	4650      	mov	r0, sl
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	682b      	ldr	r3, [r5, #0]
 80160a6:	47c8      	blx	r9
 80160a8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80160ac:	4606      	mov	r6, r0
 80160ae:	212a      	movs	r1, #42	@ 0x2a
 80160b0:	4403      	add	r3, r0
 80160b2:	4808      	ldr	r0, [pc, #32]	@ (80160d4 <uxr_framing_read_transport+0x124>)
 80160b4:	085a      	lsrs	r2, r3, #1
 80160b6:	fba0 0202 	umull	r0, r2, r0, r2
 80160ba:	0892      	lsrs	r2, r2, #2
 80160bc:	fb01 3312 	mls	r3, r1, r2, r3
 80160c0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80160c4:	2e00      	cmp	r6, #0
 80160c6:	d08f      	beq.n	8015fe8 <uxr_framing_read_transport+0x38>
 80160c8:	e78f      	b.n	8015fea <uxr_framing_read_transport+0x3a>
 80160ca:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 80160ce:	b2d2      	uxtb	r2, r2
 80160d0:	e784      	b.n	8015fdc <uxr_framing_read_transport+0x2c>
 80160d2:	bf00      	nop
 80160d4:	30c30c31 	.word	0x30c30c31

080160d8 <uxr_read_framed_msg>:
 80160d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160dc:	461e      	mov	r6, r3
 80160de:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80160e2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80160e6:	b083      	sub	sp, #12
 80160e8:	4604      	mov	r4, r0
 80160ea:	4688      	mov	r8, r1
 80160ec:	429d      	cmp	r5, r3
 80160ee:	4691      	mov	r9, r2
 80160f0:	f000 818c 	beq.w	801640c <uxr_read_framed_msg+0x334>
 80160f4:	7823      	ldrb	r3, [r4, #0]
 80160f6:	4dc3      	ldr	r5, [pc, #780]	@ (8016404 <uxr_read_framed_msg+0x32c>)
 80160f8:	4fc3      	ldr	r7, [pc, #780]	@ (8016408 <uxr_read_framed_msg+0x330>)
 80160fa:	2b07      	cmp	r3, #7
 80160fc:	d8fd      	bhi.n	80160fa <uxr_read_framed_msg+0x22>
 80160fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016102:	011c      	.short	0x011c
 8016104:	00d900fb 	.word	0x00d900fb
 8016108:	008f00ba 	.word	0x008f00ba
 801610c:	00320051 	.word	0x00320051
 8016110:	0008      	.short	0x0008
 8016112:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016116:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801611a:	4299      	cmp	r1, r3
 801611c:	f000 814d 	beq.w	80163ba <uxr_read_framed_msg+0x2e2>
 8016120:	18e2      	adds	r2, r4, r3
 8016122:	7892      	ldrb	r2, [r2, #2]
 8016124:	2a7d      	cmp	r2, #125	@ 0x7d
 8016126:	f000 81b8 	beq.w	801649a <uxr_read_framed_msg+0x3c2>
 801612a:	3301      	adds	r3, #1
 801612c:	212a      	movs	r1, #42	@ 0x2a
 801612e:	2a7e      	cmp	r2, #126	@ 0x7e
 8016130:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016134:	fba5 c000 	umull	ip, r0, r5, r0
 8016138:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801613c:	fb01 3310 	mls	r3, r1, r0, r3
 8016140:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016144:	f000 8257 	beq.w	80165f6 <uxr_read_framed_msg+0x51e>
 8016148:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801614a:	2000      	movs	r0, #0
 801614c:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801614e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016152:	7020      	strb	r0, [r4, #0]
 8016154:	b29b      	uxth	r3, r3
 8016156:	4299      	cmp	r1, r3
 8016158:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801615a:	f000 8178 	beq.w	801644e <uxr_read_framed_msg+0x376>
 801615e:	2000      	movs	r0, #0
 8016160:	b003      	add	sp, #12
 8016162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016166:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801616a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801616e:	4298      	cmp	r0, r3
 8016170:	f000 8132 	beq.w	80163d8 <uxr_read_framed_msg+0x300>
 8016174:	18e2      	adds	r2, r4, r3
 8016176:	7891      	ldrb	r1, [r2, #2]
 8016178:	297d      	cmp	r1, #125	@ 0x7d
 801617a:	f000 8170 	beq.w	801645e <uxr_read_framed_msg+0x386>
 801617e:	3301      	adds	r3, #1
 8016180:	202a      	movs	r0, #42	@ 0x2a
 8016182:	297e      	cmp	r1, #126	@ 0x7e
 8016184:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016188:	fba5 c202 	umull	ip, r2, r5, r2
 801618c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016190:	fb00 3312 	mls	r3, r0, r2, r3
 8016194:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016198:	f000 821d 	beq.w	80165d6 <uxr_read_framed_msg+0x4fe>
 801619c:	2307      	movs	r3, #7
 801619e:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80161a0:	7023      	strb	r3, [r4, #0]
 80161a2:	e7aa      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80161a4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80161a6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80161aa:	459e      	cmp	lr, r3
 80161ac:	d827      	bhi.n	80161fe <uxr_read_framed_msg+0x126>
 80161ae:	e032      	b.n	8016216 <uxr_read_framed_msg+0x13e>
 80161b0:	fba5 b101 	umull	fp, r1, r5, r1
 80161b4:	f89c c002 	ldrb.w	ip, [ip, #2]
 80161b8:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80161bc:	0889      	lsrs	r1, r1, #2
 80161be:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80161c2:	fb0b 0111 	mls	r1, fp, r1, r0
 80161c6:	f000 80d4 	beq.w	8016372 <uxr_read_framed_msg+0x29a>
 80161ca:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80161ce:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 80161d2:	f000 80cb 	beq.w	801636c <uxr_read_framed_msg+0x294>
 80161d6:	f806 c003 	strb.w	ip, [r6, r3]
 80161da:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80161dc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80161de:	ea80 010c 	eor.w	r1, r0, ip
 80161e2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80161e6:	3301      	adds	r3, #1
 80161e8:	b2c9      	uxtb	r1, r1
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80161f0:	4573      	cmp	r3, lr
 80161f2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80161f4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80161f8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80161fa:	f080 811d 	bcs.w	8016438 <uxr_read_framed_msg+0x360>
 80161fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016202:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016206:	1c50      	adds	r0, r2, #1
 8016208:	eb04 0c02 	add.w	ip, r4, r2
 801620c:	4592      	cmp	sl, r2
 801620e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8016212:	d1cd      	bne.n	80161b0 <uxr_read_framed_msg+0xd8>
 8016214:	459e      	cmp	lr, r3
 8016216:	f040 8114 	bne.w	8016442 <uxr_read_framed_msg+0x36a>
 801621a:	2306      	movs	r3, #6
 801621c:	7023      	strb	r3, [r4, #0]
 801621e:	e76c      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016220:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016224:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016228:	4298      	cmp	r0, r3
 801622a:	f000 80c6 	beq.w	80163ba <uxr_read_framed_msg+0x2e2>
 801622e:	18e2      	adds	r2, r4, r3
 8016230:	7891      	ldrb	r1, [r2, #2]
 8016232:	297d      	cmp	r1, #125	@ 0x7d
 8016234:	f000 8193 	beq.w	801655e <uxr_read_framed_msg+0x486>
 8016238:	3301      	adds	r3, #1
 801623a:	202a      	movs	r0, #42	@ 0x2a
 801623c:	297e      	cmp	r1, #126	@ 0x7e
 801623e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016242:	fba5 c202 	umull	ip, r2, r5, r2
 8016246:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801624a:	fb00 3312 	mls	r3, r0, r2, r3
 801624e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016252:	f000 81d0 	beq.w	80165f6 <uxr_read_framed_msg+0x51e>
 8016256:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016258:	2000      	movs	r0, #0
 801625a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801625e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016260:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016262:	b29b      	uxth	r3, r3
 8016264:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016266:	428b      	cmp	r3, r1
 8016268:	8623      	strh	r3, [r4, #48]	@ 0x30
 801626a:	f240 80e2 	bls.w	8016432 <uxr_read_framed_msg+0x35a>
 801626e:	7020      	strb	r0, [r4, #0]
 8016270:	b003      	add	sp, #12
 8016272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016276:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801627a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801627e:	4298      	cmp	r0, r3
 8016280:	f000 80aa 	beq.w	80163d8 <uxr_read_framed_msg+0x300>
 8016284:	18e2      	adds	r2, r4, r3
 8016286:	7891      	ldrb	r1, [r2, #2]
 8016288:	297d      	cmp	r1, #125	@ 0x7d
 801628a:	f000 8186 	beq.w	801659a <uxr_read_framed_msg+0x4c2>
 801628e:	3301      	adds	r3, #1
 8016290:	202a      	movs	r0, #42	@ 0x2a
 8016292:	297e      	cmp	r1, #126	@ 0x7e
 8016294:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016298:	fba5 c202 	umull	ip, r2, r5, r2
 801629c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80162a0:	fb00 3312 	mls	r3, r0, r2, r3
 80162a4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162a8:	f000 8195 	beq.w	80165d6 <uxr_read_framed_msg+0x4fe>
 80162ac:	2304      	movs	r3, #4
 80162ae:	8621      	strh	r1, [r4, #48]	@ 0x30
 80162b0:	7023      	strb	r3, [r4, #0]
 80162b2:	e722      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80162b4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80162b8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80162bc:	4290      	cmp	r0, r2
 80162be:	f000 80b4 	beq.w	801642a <uxr_read_framed_msg+0x352>
 80162c2:	18a3      	adds	r3, r4, r2
 80162c4:	7899      	ldrb	r1, [r3, #2]
 80162c6:	297d      	cmp	r1, #125	@ 0x7d
 80162c8:	f000 8107 	beq.w	80164da <uxr_read_framed_msg+0x402>
 80162cc:	3201      	adds	r2, #1
 80162ce:	232a      	movs	r3, #42	@ 0x2a
 80162d0:	297e      	cmp	r1, #126	@ 0x7e
 80162d2:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80162d6:	fba5 c000 	umull	ip, r0, r5, r0
 80162da:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80162de:	fb03 2210 	mls	r2, r3, r0, r2
 80162e2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80162e6:	f000 818a 	beq.w	80165fe <uxr_read_framed_msg+0x526>
 80162ea:	7863      	ldrb	r3, [r4, #1]
 80162ec:	428b      	cmp	r3, r1
 80162ee:	bf0c      	ite	eq
 80162f0:	2303      	moveq	r3, #3
 80162f2:	2300      	movne	r3, #0
 80162f4:	7023      	strb	r3, [r4, #0]
 80162f6:	e700      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80162f8:	2300      	movs	r3, #0
 80162fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80162fe:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016302:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016306:	4299      	cmp	r1, r3
 8016308:	d06a      	beq.n	80163e0 <uxr_read_framed_msg+0x308>
 801630a:	18e2      	adds	r2, r4, r3
 801630c:	7890      	ldrb	r0, [r2, #2]
 801630e:	287d      	cmp	r0, #125	@ 0x7d
 8016310:	f000 8100 	beq.w	8016514 <uxr_read_framed_msg+0x43c>
 8016314:	3301      	adds	r3, #1
 8016316:	212a      	movs	r1, #42	@ 0x2a
 8016318:	287e      	cmp	r0, #126	@ 0x7e
 801631a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801631e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016322:	fba5 c202 	umull	ip, r2, r5, r2
 8016326:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801632a:	fb01 3312 	mls	r3, r1, r2, r3
 801632e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016332:	d055      	beq.n	80163e0 <uxr_read_framed_msg+0x308>
 8016334:	2302      	movs	r3, #2
 8016336:	7023      	strb	r3, [r4, #0]
 8016338:	e6df      	b.n	80160fa <uxr_read_framed_msg+0x22>
 801633a:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801633e:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016342:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016346:	1c5a      	adds	r2, r3, #1
 8016348:	459c      	cmp	ip, r3
 801634a:	eb04 0103 	add.w	r1, r4, r3
 801634e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8016352:	f43f af04 	beq.w	801615e <uxr_read_framed_msg+0x86>
 8016356:	fba5 0303 	umull	r0, r3, r5, r3
 801635a:	7889      	ldrb	r1, [r1, #2]
 801635c:	089b      	lsrs	r3, r3, #2
 801635e:	297e      	cmp	r1, #126	@ 0x7e
 8016360:	fb0e 2313 	mls	r3, lr, r3, r2
 8016364:	b2db      	uxtb	r3, r3
 8016366:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801636a:	d1ec      	bne.n	8016346 <uxr_read_framed_msg+0x26e>
 801636c:	2301      	movs	r3, #1
 801636e:	7023      	strb	r3, [r4, #0]
 8016370:	e6c3      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016372:	1c50      	adds	r0, r2, #1
 8016374:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8016378:	3202      	adds	r2, #2
 801637a:	0841      	lsrs	r1, r0, #1
 801637c:	fba5 c101 	umull	ip, r1, r5, r1
 8016380:	0889      	lsrs	r1, r1, #2
 8016382:	fb0b 0111 	mls	r1, fp, r1, r0
 8016386:	1860      	adds	r0, r4, r1
 8016388:	b2c9      	uxtb	r1, r1
 801638a:	458a      	cmp	sl, r1
 801638c:	f43f af42 	beq.w	8016214 <uxr_read_framed_msg+0x13c>
 8016390:	0851      	lsrs	r1, r2, #1
 8016392:	7880      	ldrb	r0, [r0, #2]
 8016394:	fba5 a101 	umull	sl, r1, r5, r1
 8016398:	287e      	cmp	r0, #126	@ 0x7e
 801639a:	f080 0c20 	eor.w	ip, r0, #32
 801639e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80163a2:	fb0b 2211 	mls	r2, fp, r1, r2
 80163a6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80163aa:	f47f af14 	bne.w	80161d6 <uxr_read_framed_msg+0xfe>
 80163ae:	459e      	cmp	lr, r3
 80163b0:	f43f af33 	beq.w	801621a <uxr_read_framed_msg+0x142>
 80163b4:	2301      	movs	r3, #1
 80163b6:	7023      	strb	r3, [r4, #0]
 80163b8:	e69f      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80163ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163bc:	9300      	str	r3, [sp, #0]
 80163be:	2301      	movs	r3, #1
 80163c0:	9301      	str	r3, [sp, #4]
 80163c2:	464a      	mov	r2, r9
 80163c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163c6:	4641      	mov	r1, r8
 80163c8:	4620      	mov	r0, r4
 80163ca:	f7ff fdf1 	bl	8015fb0 <uxr_framing_read_transport>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	f43f aec5 	beq.w	801615e <uxr_read_framed_msg+0x86>
 80163d4:	7823      	ldrb	r3, [r4, #0]
 80163d6:	e690      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80163d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	2302      	movs	r3, #2
 80163de:	e7ef      	b.n	80163c0 <uxr_read_framed_msg+0x2e8>
 80163e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163e2:	464a      	mov	r2, r9
 80163e4:	4641      	mov	r1, r8
 80163e6:	4620      	mov	r0, r4
 80163e8:	9300      	str	r3, [sp, #0]
 80163ea:	2304      	movs	r3, #4
 80163ec:	9301      	str	r3, [sp, #4]
 80163ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163f0:	f7ff fdde 	bl	8015fb0 <uxr_framing_read_transport>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d1ed      	bne.n	80163d4 <uxr_read_framed_msg+0x2fc>
 80163f8:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80163fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80163fe:	d0e9      	beq.n	80163d4 <uxr_read_framed_msg+0x2fc>
 8016400:	e6ad      	b.n	801615e <uxr_read_framed_msg+0x86>
 8016402:	bf00      	nop
 8016404:	30c30c31 	.word	0x30c30c31
 8016408:	0801f4b8 	.word	0x0801f4b8
 801640c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	2305      	movs	r3, #5
 8016412:	9301      	str	r3, [sp, #4]
 8016414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016416:	f7ff fdcb 	bl	8015fb0 <uxr_framing_read_transport>
 801641a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801641e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016422:	429a      	cmp	r2, r3
 8016424:	f43f ae9b 	beq.w	801615e <uxr_read_framed_msg+0x86>
 8016428:	e664      	b.n	80160f4 <uxr_read_framed_msg+0x1c>
 801642a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	2303      	movs	r3, #3
 8016430:	e7c6      	b.n	80163c0 <uxr_read_framed_msg+0x2e8>
 8016432:	2305      	movs	r3, #5
 8016434:	7023      	strb	r3, [r4, #0]
 8016436:	e660      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016438:	f43f aeef 	beq.w	801621a <uxr_read_framed_msg+0x142>
 801643c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016440:	d094      	beq.n	801636c <uxr_read_framed_msg+0x294>
 8016442:	ebae 0303 	sub.w	r3, lr, r3
 8016446:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016448:	3302      	adds	r3, #2
 801644a:	9200      	str	r2, [sp, #0]
 801644c:	e7b8      	b.n	80163c0 <uxr_read_framed_msg+0x2e8>
 801644e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016452:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016454:	7013      	strb	r3, [r2, #0]
 8016456:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016458:	b003      	add	sp, #12
 801645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801645e:	1c59      	adds	r1, r3, #1
 8016460:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016464:	084a      	lsrs	r2, r1, #1
 8016466:	fba5 e202 	umull	lr, r2, r5, r2
 801646a:	0892      	lsrs	r2, r2, #2
 801646c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016470:	b2d1      	uxtb	r1, r2
 8016472:	4288      	cmp	r0, r1
 8016474:	d0b0      	beq.n	80163d8 <uxr_read_framed_msg+0x300>
 8016476:	3302      	adds	r3, #2
 8016478:	4422      	add	r2, r4
 801647a:	7891      	ldrb	r1, [r2, #2]
 801647c:	085a      	lsrs	r2, r3, #1
 801647e:	fba5 0202 	umull	r0, r2, r5, r2
 8016482:	297e      	cmp	r1, #126	@ 0x7e
 8016484:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016488:	fb0c 3312 	mls	r3, ip, r2, r3
 801648c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016490:	f000 80a1 	beq.w	80165d6 <uxr_read_framed_msg+0x4fe>
 8016494:	f081 0120 	eor.w	r1, r1, #32
 8016498:	e680      	b.n	801619c <uxr_read_framed_msg+0xc4>
 801649a:	f103 0c01 	add.w	ip, r3, #1
 801649e:	202a      	movs	r0, #42	@ 0x2a
 80164a0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80164a4:	fba5 e202 	umull	lr, r2, r5, r2
 80164a8:	0892      	lsrs	r2, r2, #2
 80164aa:	fb00 c212 	mls	r2, r0, r2, ip
 80164ae:	fa5f fc82 	uxtb.w	ip, r2
 80164b2:	4561      	cmp	r1, ip
 80164b4:	d081      	beq.n	80163ba <uxr_read_framed_msg+0x2e2>
 80164b6:	3302      	adds	r3, #2
 80164b8:	4422      	add	r2, r4
 80164ba:	0859      	lsrs	r1, r3, #1
 80164bc:	7892      	ldrb	r2, [r2, #2]
 80164be:	fba5 c101 	umull	ip, r1, r5, r1
 80164c2:	2a7e      	cmp	r2, #126	@ 0x7e
 80164c4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80164c8:	fb00 3311 	mls	r3, r0, r1, r3
 80164cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80164d0:	f000 8091 	beq.w	80165f6 <uxr_read_framed_msg+0x51e>
 80164d4:	f082 0220 	eor.w	r2, r2, #32
 80164d8:	e636      	b.n	8016148 <uxr_read_framed_msg+0x70>
 80164da:	1c51      	adds	r1, r2, #1
 80164dc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80164e0:	084b      	lsrs	r3, r1, #1
 80164e2:	fba5 e303 	umull	lr, r3, r5, r3
 80164e6:	089b      	lsrs	r3, r3, #2
 80164e8:	fb0c 1313 	mls	r3, ip, r3, r1
 80164ec:	b2d9      	uxtb	r1, r3
 80164ee:	4288      	cmp	r0, r1
 80164f0:	d09b      	beq.n	801642a <uxr_read_framed_msg+0x352>
 80164f2:	3202      	adds	r2, #2
 80164f4:	4423      	add	r3, r4
 80164f6:	0850      	lsrs	r0, r2, #1
 80164f8:	789b      	ldrb	r3, [r3, #2]
 80164fa:	fba5 1000 	umull	r1, r0, r5, r0
 80164fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8016500:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016504:	fb0c 2210 	mls	r2, ip, r0, r2
 8016508:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801650c:	d077      	beq.n	80165fe <uxr_read_framed_msg+0x526>
 801650e:	f083 0120 	eor.w	r1, r3, #32
 8016512:	e6ea      	b.n	80162ea <uxr_read_framed_msg+0x212>
 8016514:	f103 0c01 	add.w	ip, r3, #1
 8016518:	202a      	movs	r0, #42	@ 0x2a
 801651a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801651e:	fba5 e202 	umull	lr, r2, r5, r2
 8016522:	0892      	lsrs	r2, r2, #2
 8016524:	fb00 c212 	mls	r2, r0, r2, ip
 8016528:	fa5f fc82 	uxtb.w	ip, r2
 801652c:	4561      	cmp	r1, ip
 801652e:	f43f af57 	beq.w	80163e0 <uxr_read_framed_msg+0x308>
 8016532:	3302      	adds	r3, #2
 8016534:	4422      	add	r2, r4
 8016536:	7891      	ldrb	r1, [r2, #2]
 8016538:	085a      	lsrs	r2, r3, #1
 801653a:	fba5 c202 	umull	ip, r2, r5, r2
 801653e:	297e      	cmp	r1, #126	@ 0x7e
 8016540:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016544:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016548:	fb00 3312 	mls	r3, r0, r2, r3
 801654c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016550:	f43f af46 	beq.w	80163e0 <uxr_read_framed_msg+0x308>
 8016554:	f081 0120 	eor.w	r1, r1, #32
 8016558:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801655c:	e6ea      	b.n	8016334 <uxr_read_framed_msg+0x25c>
 801655e:	1c59      	adds	r1, r3, #1
 8016560:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016564:	084a      	lsrs	r2, r1, #1
 8016566:	fba5 e202 	umull	lr, r2, r5, r2
 801656a:	0892      	lsrs	r2, r2, #2
 801656c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016570:	b2d1      	uxtb	r1, r2
 8016572:	4288      	cmp	r0, r1
 8016574:	f43f af21 	beq.w	80163ba <uxr_read_framed_msg+0x2e2>
 8016578:	3302      	adds	r3, #2
 801657a:	4422      	add	r2, r4
 801657c:	7891      	ldrb	r1, [r2, #2]
 801657e:	085a      	lsrs	r2, r3, #1
 8016580:	fba5 0202 	umull	r0, r2, r5, r2
 8016584:	297e      	cmp	r1, #126	@ 0x7e
 8016586:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801658a:	fb0c 3312 	mls	r3, ip, r2, r3
 801658e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016592:	d030      	beq.n	80165f6 <uxr_read_framed_msg+0x51e>
 8016594:	f081 0120 	eor.w	r1, r1, #32
 8016598:	e65d      	b.n	8016256 <uxr_read_framed_msg+0x17e>
 801659a:	1c59      	adds	r1, r3, #1
 801659c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80165a0:	084a      	lsrs	r2, r1, #1
 80165a2:	fba5 e202 	umull	lr, r2, r5, r2
 80165a6:	0892      	lsrs	r2, r2, #2
 80165a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80165ac:	b2d1      	uxtb	r1, r2
 80165ae:	4288      	cmp	r0, r1
 80165b0:	f43f af12 	beq.w	80163d8 <uxr_read_framed_msg+0x300>
 80165b4:	3302      	adds	r3, #2
 80165b6:	4422      	add	r2, r4
 80165b8:	7891      	ldrb	r1, [r2, #2]
 80165ba:	085a      	lsrs	r2, r3, #1
 80165bc:	fba5 0202 	umull	r0, r2, r5, r2
 80165c0:	297e      	cmp	r1, #126	@ 0x7e
 80165c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80165c6:	fb0c 3312 	mls	r3, ip, r2, r3
 80165ca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80165ce:	d002      	beq.n	80165d6 <uxr_read_framed_msg+0x4fe>
 80165d0:	f081 0120 	eor.w	r1, r1, #32
 80165d4:	e66a      	b.n	80162ac <uxr_read_framed_msg+0x1d4>
 80165d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165d8:	9300      	str	r3, [sp, #0]
 80165da:	2302      	movs	r3, #2
 80165dc:	9301      	str	r3, [sp, #4]
 80165de:	464a      	mov	r2, r9
 80165e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165e2:	4641      	mov	r1, r8
 80165e4:	4620      	mov	r0, r4
 80165e6:	f7ff fce3 	bl	8015fb0 <uxr_framing_read_transport>
 80165ea:	2800      	cmp	r0, #0
 80165ec:	f47f aef2 	bne.w	80163d4 <uxr_read_framed_msg+0x2fc>
 80165f0:	2301      	movs	r3, #1
 80165f2:	7023      	strb	r3, [r4, #0]
 80165f4:	e581      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80165f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165f8:	9300      	str	r3, [sp, #0]
 80165fa:	2301      	movs	r3, #1
 80165fc:	e7ee      	b.n	80165dc <uxr_read_framed_msg+0x504>
 80165fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	2303      	movs	r3, #3
 8016604:	e7ea      	b.n	80165dc <uxr_read_framed_msg+0x504>
 8016606:	bf00      	nop

08016608 <uxr_stream_id>:
 8016608:	2901      	cmp	r1, #1
 801660a:	4684      	mov	ip, r0
 801660c:	b500      	push	{lr}
 801660e:	b083      	sub	sp, #12
 8016610:	d01f      	beq.n	8016652 <uxr_stream_id+0x4a>
 8016612:	2902      	cmp	r1, #2
 8016614:	f04f 0e00 	mov.w	lr, #0
 8016618:	d020      	beq.n	801665c <uxr_stream_id+0x54>
 801661a:	2300      	movs	r3, #0
 801661c:	2000      	movs	r0, #0
 801661e:	f36e 0307 	bfi	r3, lr, #0, #8
 8016622:	f36c 230f 	bfi	r3, ip, #8, #8
 8016626:	f361 4317 	bfi	r3, r1, #16, #8
 801662a:	f362 631f 	bfi	r3, r2, #24, #8
 801662e:	fa5f fc83 	uxtb.w	ip, r3
 8016632:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016636:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801663a:	0e1b      	lsrs	r3, r3, #24
 801663c:	f36c 0007 	bfi	r0, ip, #0, #8
 8016640:	f361 200f 	bfi	r0, r1, #8, #8
 8016644:	f362 4017 	bfi	r0, r2, #16, #8
 8016648:	f363 601f 	bfi	r0, r3, #24, #8
 801664c:	b003      	add	sp, #12
 801664e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016652:	f100 0e01 	add.w	lr, r0, #1
 8016656:	fa5f fe8e 	uxtb.w	lr, lr
 801665a:	e7de      	b.n	801661a <uxr_stream_id+0x12>
 801665c:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8016660:	e7db      	b.n	801661a <uxr_stream_id+0x12>
 8016662:	bf00      	nop

08016664 <uxr_stream_id_from_raw>:
 8016664:	b082      	sub	sp, #8
 8016666:	b130      	cbz	r0, 8016676 <uxr_stream_id_from_raw+0x12>
 8016668:	0603      	lsls	r3, r0, #24
 801666a:	d421      	bmi.n	80166b0 <uxr_stream_id_from_raw+0x4c>
 801666c:	1e42      	subs	r2, r0, #1
 801666e:	f04f 0c01 	mov.w	ip, #1
 8016672:	b2d2      	uxtb	r2, r2
 8016674:	e001      	b.n	801667a <uxr_stream_id_from_raw+0x16>
 8016676:	4684      	mov	ip, r0
 8016678:	4602      	mov	r2, r0
 801667a:	2300      	movs	r3, #0
 801667c:	f360 0307 	bfi	r3, r0, #0, #8
 8016680:	2000      	movs	r0, #0
 8016682:	f362 230f 	bfi	r3, r2, #8, #8
 8016686:	f36c 4317 	bfi	r3, ip, #16, #8
 801668a:	f361 631f 	bfi	r3, r1, #24, #8
 801668e:	fa5f fc83 	uxtb.w	ip, r3
 8016692:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016696:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801669a:	0e1b      	lsrs	r3, r3, #24
 801669c:	f36c 0007 	bfi	r0, ip, #0, #8
 80166a0:	f361 200f 	bfi	r0, r1, #8, #8
 80166a4:	f362 4017 	bfi	r0, r2, #16, #8
 80166a8:	f363 601f 	bfi	r0, r3, #24, #8
 80166ac:	b002      	add	sp, #8
 80166ae:	4770      	bx	lr
 80166b0:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80166b4:	f04f 0c02 	mov.w	ip, #2
 80166b8:	e7df      	b.n	801667a <uxr_stream_id_from_raw+0x16>
 80166ba:	bf00      	nop

080166bc <uxr_init_stream_storage>:
 80166bc:	2300      	movs	r3, #0
 80166be:	7403      	strb	r3, [r0, #16]
 80166c0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80166c4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80166c8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80166cc:	4770      	bx	lr
 80166ce:	bf00      	nop

080166d0 <uxr_reset_stream_storage>:
 80166d0:	b570      	push	{r4, r5, r6, lr}
 80166d2:	7c03      	ldrb	r3, [r0, #16]
 80166d4:	4604      	mov	r4, r0
 80166d6:	b14b      	cbz	r3, 80166ec <uxr_reset_stream_storage+0x1c>
 80166d8:	4606      	mov	r6, r0
 80166da:	2500      	movs	r5, #0
 80166dc:	4630      	mov	r0, r6
 80166de:	3501      	adds	r5, #1
 80166e0:	f006 f8c8 	bl	801c874 <uxr_reset_output_best_effort_stream>
 80166e4:	7c23      	ldrb	r3, [r4, #16]
 80166e6:	3610      	adds	r6, #16
 80166e8:	42ab      	cmp	r3, r5
 80166ea:	d8f7      	bhi.n	80166dc <uxr_reset_stream_storage+0xc>
 80166ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80166f0:	b15b      	cbz	r3, 801670a <uxr_reset_stream_storage+0x3a>
 80166f2:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80166f6:	2500      	movs	r5, #0
 80166f8:	4630      	mov	r0, r6
 80166fa:	3501      	adds	r5, #1
 80166fc:	f005 fec0 	bl	801c480 <uxr_reset_input_best_effort_stream>
 8016700:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016704:	3602      	adds	r6, #2
 8016706:	42ab      	cmp	r3, r5
 8016708:	d8f6      	bhi.n	80166f8 <uxr_reset_stream_storage+0x28>
 801670a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801670e:	b15b      	cbz	r3, 8016728 <uxr_reset_stream_storage+0x58>
 8016710:	f104 0618 	add.w	r6, r4, #24
 8016714:	2500      	movs	r5, #0
 8016716:	4630      	mov	r0, r6
 8016718:	3501      	adds	r5, #1
 801671a:	f006 f959 	bl	801c9d0 <uxr_reset_output_reliable_stream>
 801671e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8016722:	3628      	adds	r6, #40	@ 0x28
 8016724:	42ab      	cmp	r3, r5
 8016726:	d8f6      	bhi.n	8016716 <uxr_reset_stream_storage+0x46>
 8016728:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801672c:	b15b      	cbz	r3, 8016746 <uxr_reset_stream_storage+0x76>
 801672e:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8016732:	2500      	movs	r5, #0
 8016734:	4630      	mov	r0, r6
 8016736:	3501      	adds	r5, #1
 8016738:	f005 ff0e 	bl	801c558 <uxr_reset_input_reliable_stream>
 801673c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8016740:	3618      	adds	r6, #24
 8016742:	42ab      	cmp	r3, r5
 8016744:	d8f6      	bhi.n	8016734 <uxr_reset_stream_storage+0x64>
 8016746:	bd70      	pop	{r4, r5, r6, pc}

08016748 <uxr_add_output_best_effort_buffer>:
 8016748:	b510      	push	{r4, lr}
 801674a:	7c04      	ldrb	r4, [r0, #16]
 801674c:	b082      	sub	sp, #8
 801674e:	f104 0c01 	add.w	ip, r4, #1
 8016752:	f880 c010 	strb.w	ip, [r0, #16]
 8016756:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801675a:	f006 f881 	bl	801c860 <uxr_init_output_best_effort_stream>
 801675e:	2201      	movs	r2, #1
 8016760:	4620      	mov	r0, r4
 8016762:	4611      	mov	r1, r2
 8016764:	b002      	add	sp, #8
 8016766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801676a:	f7ff bf4d 	b.w	8016608 <uxr_stream_id>
 801676e:	bf00      	nop

08016770 <uxr_add_output_reliable_buffer>:
 8016770:	b510      	push	{r4, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	4684      	mov	ip, r0
 8016776:	2028      	movs	r0, #40	@ 0x28
 8016778:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801677c:	9400      	str	r4, [sp, #0]
 801677e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8016782:	fb00 c004 	mla	r0, r0, r4, ip
 8016786:	f104 0e01 	add.w	lr, r4, #1
 801678a:	3018      	adds	r0, #24
 801678c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8016790:	f006 f8e6 	bl	801c960 <uxr_init_output_reliable_stream>
 8016794:	2201      	movs	r2, #1
 8016796:	2102      	movs	r1, #2
 8016798:	4620      	mov	r0, r4
 801679a:	b004      	add	sp, #16
 801679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a0:	f7ff bf32 	b.w	8016608 <uxr_stream_id>

080167a4 <uxr_add_input_best_effort_buffer>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80167aa:	b082      	sub	sp, #8
 80167ac:	1c62      	adds	r2, r4, #1
 80167ae:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80167b2:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80167b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80167ba:	f005 fe5d 	bl	801c478 <uxr_init_input_best_effort_stream>
 80167be:	2200      	movs	r2, #0
 80167c0:	2101      	movs	r1, #1
 80167c2:	4620      	mov	r0, r4
 80167c4:	b002      	add	sp, #8
 80167c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ca:	f7ff bf1d 	b.w	8016608 <uxr_stream_id>
 80167ce:	bf00      	nop

080167d0 <uxr_add_input_reliable_buffer>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	b084      	sub	sp, #16
 80167d4:	4684      	mov	ip, r0
 80167d6:	2018      	movs	r0, #24
 80167d8:	9c06      	ldr	r4, [sp, #24]
 80167da:	9400      	str	r4, [sp, #0]
 80167dc:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80167e0:	fb00 c004 	mla	r0, r0, r4, ip
 80167e4:	f104 0e01 	add.w	lr, r4, #1
 80167e8:	3048      	adds	r0, #72	@ 0x48
 80167ea:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80167ee:	f005 fe8d 	bl	801c50c <uxr_init_input_reliable_stream>
 80167f2:	2200      	movs	r2, #0
 80167f4:	2102      	movs	r1, #2
 80167f6:	4620      	mov	r0, r4
 80167f8:	b004      	add	sp, #16
 80167fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167fe:	f7ff bf03 	b.w	8016608 <uxr_stream_id>
 8016802:	bf00      	nop

08016804 <uxr_get_output_best_effort_stream>:
 8016804:	7c03      	ldrb	r3, [r0, #16]
 8016806:	428b      	cmp	r3, r1
 8016808:	bf8c      	ite	hi
 801680a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801680e:	2000      	movls	r0, #0
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop

08016814 <uxr_get_output_reliable_stream>:
 8016814:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8016818:	428b      	cmp	r3, r1
 801681a:	d904      	bls.n	8016826 <uxr_get_output_reliable_stream+0x12>
 801681c:	2328      	movs	r3, #40	@ 0x28
 801681e:	fb03 0001 	mla	r0, r3, r1, r0
 8016822:	3018      	adds	r0, #24
 8016824:	4770      	bx	lr
 8016826:	2000      	movs	r0, #0
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop

0801682c <uxr_get_input_best_effort_stream>:
 801682c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8016830:	428b      	cmp	r3, r1
 8016832:	d903      	bls.n	801683c <uxr_get_input_best_effort_stream+0x10>
 8016834:	3121      	adds	r1, #33	@ 0x21
 8016836:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801683a:	4770      	bx	lr
 801683c:	2000      	movs	r0, #0
 801683e:	4770      	bx	lr

08016840 <uxr_get_input_reliable_stream>:
 8016840:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8016844:	428b      	cmp	r3, r1
 8016846:	d904      	bls.n	8016852 <uxr_get_input_reliable_stream+0x12>
 8016848:	2318      	movs	r3, #24
 801684a:	fb03 0001 	mla	r0, r3, r1, r0
 801684e:	3048      	adds	r0, #72	@ 0x48
 8016850:	4770      	bx	lr
 8016852:	2000      	movs	r0, #0
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop

08016858 <uxr_output_streams_confirmed>:
 8016858:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801685c:	b183      	cbz	r3, 8016880 <uxr_output_streams_confirmed+0x28>
 801685e:	b570      	push	{r4, r5, r6, lr}
 8016860:	4606      	mov	r6, r0
 8016862:	f100 0518 	add.w	r5, r0, #24
 8016866:	2400      	movs	r4, #0
 8016868:	e000      	b.n	801686c <uxr_output_streams_confirmed+0x14>
 801686a:	b140      	cbz	r0, 801687e <uxr_output_streams_confirmed+0x26>
 801686c:	4628      	mov	r0, r5
 801686e:	3401      	adds	r4, #1
 8016870:	f006 fb22 	bl	801ceb8 <uxr_is_output_up_to_date>
 8016874:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8016878:	3528      	adds	r5, #40	@ 0x28
 801687a:	42a3      	cmp	r3, r4
 801687c:	d8f5      	bhi.n	801686a <uxr_output_streams_confirmed+0x12>
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	2001      	movs	r0, #1
 8016882:	4770      	bx	lr

08016884 <uxr_buffer_submessage_header>:
 8016884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016886:	460e      	mov	r6, r1
 8016888:	2104      	movs	r1, #4
 801688a:	4604      	mov	r4, r0
 801688c:	4615      	mov	r5, r2
 801688e:	461f      	mov	r7, r3
 8016890:	f7fd fd36 	bl	8014300 <ucdr_align_to>
 8016894:	2301      	movs	r3, #1
 8016896:	4631      	mov	r1, r6
 8016898:	4620      	mov	r0, r4
 801689a:	ea47 0203 	orr.w	r2, r7, r3
 801689e:	7523      	strb	r3, [r4, #20]
 80168a0:	462b      	mov	r3, r5
 80168a2:	f000 fa29 	bl	8016cf8 <uxr_serialize_submessage_header>
 80168a6:	4620      	mov	r0, r4
 80168a8:	f7fd fd40 	bl	801432c <ucdr_buffer_remaining>
 80168ac:	42a8      	cmp	r0, r5
 80168ae:	bf34      	ite	cc
 80168b0:	2000      	movcc	r0, #0
 80168b2:	2001      	movcs	r0, #1
 80168b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168b6:	bf00      	nop

080168b8 <uxr_read_submessage_header>:
 80168b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168bc:	4604      	mov	r4, r0
 80168be:	460d      	mov	r5, r1
 80168c0:	2104      	movs	r1, #4
 80168c2:	4616      	mov	r6, r2
 80168c4:	4698      	mov	r8, r3
 80168c6:	f7fd fd1b 	bl	8014300 <ucdr_align_to>
 80168ca:	4620      	mov	r0, r4
 80168cc:	f7fd fd2e 	bl	801432c <ucdr_buffer_remaining>
 80168d0:	2803      	cmp	r0, #3
 80168d2:	bf8c      	ite	hi
 80168d4:	2701      	movhi	r7, #1
 80168d6:	2700      	movls	r7, #0
 80168d8:	d802      	bhi.n	80168e0 <uxr_read_submessage_header+0x28>
 80168da:	4638      	mov	r0, r7
 80168dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168e0:	4633      	mov	r3, r6
 80168e2:	4642      	mov	r2, r8
 80168e4:	4620      	mov	r0, r4
 80168e6:	4629      	mov	r1, r5
 80168e8:	f000 fa1a 	bl	8016d20 <uxr_deserialize_submessage_header>
 80168ec:	f898 3000 	ldrb.w	r3, [r8]
 80168f0:	4638      	mov	r0, r7
 80168f2:	f003 0201 	and.w	r2, r3, #1
 80168f6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80168fa:	f888 3000 	strb.w	r3, [r8]
 80168fe:	7522      	strb	r2, [r4, #20]
 8016900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016904 <uxr_submessage_padding>:
 8016904:	f010 0003 	ands.w	r0, r0, #3
 8016908:	bf18      	it	ne
 801690a:	f1c0 0004 	rsbne	r0, r0, #4
 801690e:	4770      	bx	lr

08016910 <uxr_millis>:
 8016910:	b510      	push	{r4, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	2001      	movs	r0, #1
 8016916:	4669      	mov	r1, sp
 8016918:	f7eb fbaa 	bl	8002070 <clock_gettime>
 801691c:	4908      	ldr	r1, [pc, #32]	@ (8016940 <uxr_millis+0x30>)
 801691e:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8016922:	fba0 0301 	umull	r0, r3, r0, r1
 8016926:	1900      	adds	r0, r0, r4
 8016928:	fb01 3102 	mla	r1, r1, r2, r3
 801692c:	4a05      	ldr	r2, [pc, #20]	@ (8016944 <uxr_millis+0x34>)
 801692e:	f04f 0300 	mov.w	r3, #0
 8016932:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8016936:	f7e9 fd3b 	bl	80003b0 <__aeabi_ldivmod>
 801693a:	b004      	add	sp, #16
 801693c:	bd10      	pop	{r4, pc}
 801693e:	bf00      	nop
 8016940:	3b9aca00 	.word	0x3b9aca00
 8016944:	000f4240 	.word	0x000f4240

08016948 <uxr_nanos>:
 8016948:	b510      	push	{r4, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	2001      	movs	r0, #1
 801694e:	4669      	mov	r1, sp
 8016950:	f7eb fb8e 	bl	8002070 <clock_gettime>
 8016954:	4a06      	ldr	r2, [pc, #24]	@ (8016970 <uxr_nanos+0x28>)
 8016956:	9800      	ldr	r0, [sp, #0]
 8016958:	9902      	ldr	r1, [sp, #8]
 801695a:	fba0 0302 	umull	r0, r3, r0, r2
 801695e:	9c01      	ldr	r4, [sp, #4]
 8016960:	1840      	adds	r0, r0, r1
 8016962:	fb02 3304 	mla	r3, r2, r4, r3
 8016966:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801696a:	b004      	add	sp, #16
 801696c:	bd10      	pop	{r4, pc}
 801696e:	bf00      	nop
 8016970:	3b9aca00 	.word	0x3b9aca00

08016974 <on_full_output_buffer_fragmented>:
 8016974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016978:	460c      	mov	r4, r1
 801697a:	b08a      	sub	sp, #40	@ 0x28
 801697c:	4606      	mov	r6, r0
 801697e:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8016982:	f104 0008 	add.w	r0, r4, #8
 8016986:	f7ff ff45 	bl	8016814 <uxr_get_output_reliable_stream>
 801698a:	4605      	mov	r5, r0
 801698c:	f006 fa9e 	bl	801cecc <get_available_free_slots>
 8016990:	b968      	cbnz	r0, 80169ae <on_full_output_buffer_fragmented+0x3a>
 8016992:	4620      	mov	r0, r4
 8016994:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8016998:	4798      	blx	r3
 801699a:	b918      	cbnz	r0, 80169a4 <on_full_output_buffer_fragmented+0x30>
 801699c:	2001      	movs	r0, #1
 801699e:	b00a      	add	sp, #40	@ 0x28
 80169a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169a4:	4628      	mov	r0, r5
 80169a6:	f006 fa91 	bl	801cecc <get_available_free_slots>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d0f6      	beq.n	801699c <on_full_output_buffer_fragmented+0x28>
 80169ae:	8929      	ldrh	r1, [r5, #8]
 80169b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80169b4:	89eb      	ldrh	r3, [r5, #14]
 80169b6:	7b28      	ldrb	r0, [r5, #12]
 80169b8:	686f      	ldr	r7, [r5, #4]
 80169ba:	1a12      	subs	r2, r2, r0
 80169bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80169c0:	fbb7 f7f1 	udiv	r7, r7, r1
 80169c4:	fb01 3110 	mls	r1, r1, r0, r3
 80169c8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80169cc:	b289      	uxth	r1, r1
 80169ce:	fb07 f101 	mul.w	r1, r7, r1
 80169d2:	3f04      	subs	r7, #4
 80169d4:	443a      	add	r2, r7
 80169d6:	3104      	adds	r1, #4
 80169d8:	fa1f f882 	uxth.w	r8, r2
 80169dc:	463a      	mov	r2, r7
 80169de:	eba3 0308 	sub.w	r3, r3, r8
 80169e2:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80169e6:	682b      	ldr	r3, [r5, #0]
 80169e8:	4419      	add	r1, r3
 80169ea:	2300      	movs	r3, #0
 80169ec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80169f0:	9000      	str	r0, [sp, #0]
 80169f2:	a802      	add	r0, sp, #8
 80169f4:	f7fd fc56 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 80169f8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80169fc:	f102 0308 	add.w	r3, r2, #8
 8016a00:	42bb      	cmp	r3, r7
 8016a02:	d927      	bls.n	8016a54 <on_full_output_buffer_fragmented+0xe0>
 8016a04:	4642      	mov	r2, r8
 8016a06:	2300      	movs	r3, #0
 8016a08:	210d      	movs	r1, #13
 8016a0a:	a802      	add	r0, sp, #8
 8016a0c:	f7ff ff3a 	bl	8016884 <uxr_buffer_submessage_header>
 8016a10:	8929      	ldrh	r1, [r5, #8]
 8016a12:	89eb      	ldrh	r3, [r5, #14]
 8016a14:	686a      	ldr	r2, [r5, #4]
 8016a16:	fbb3 f0f1 	udiv	r0, r3, r1
 8016a1a:	fbb2 f2f1 	udiv	r2, r2, r1
 8016a1e:	fb01 3310 	mls	r3, r1, r0, r3
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	fb02 f303 	mul.w	r3, r2, r3
 8016a28:	682a      	ldr	r2, [r5, #0]
 8016a2a:	50d7      	str	r7, [r2, r3]
 8016a2c:	2101      	movs	r1, #1
 8016a2e:	89e8      	ldrh	r0, [r5, #14]
 8016a30:	f006 fa6e 	bl	801cf10 <uxr_seq_num_add>
 8016a34:	9904      	ldr	r1, [sp, #16]
 8016a36:	9a03      	ldr	r2, [sp, #12]
 8016a38:	81e8      	strh	r0, [r5, #14]
 8016a3a:	4630      	mov	r0, r6
 8016a3c:	1a52      	subs	r2, r2, r1
 8016a3e:	f7fd fc43 	bl	80142c8 <ucdr_init_buffer>
 8016a42:	4630      	mov	r0, r6
 8016a44:	4622      	mov	r2, r4
 8016a46:	490f      	ldr	r1, [pc, #60]	@ (8016a84 <on_full_output_buffer_fragmented+0x110>)
 8016a48:	f7fd fc12 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	b00a      	add	sp, #40	@ 0x28
 8016a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a54:	b292      	uxth	r2, r2
 8016a56:	2302      	movs	r3, #2
 8016a58:	210d      	movs	r1, #13
 8016a5a:	a802      	add	r0, sp, #8
 8016a5c:	f7ff ff12 	bl	8016884 <uxr_buffer_submessage_header>
 8016a60:	8928      	ldrh	r0, [r5, #8]
 8016a62:	89eb      	ldrh	r3, [r5, #14]
 8016a64:	6869      	ldr	r1, [r5, #4]
 8016a66:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8016a6a:	fbb3 f7f0 	udiv	r7, r3, r0
 8016a6e:	fbb1 f1f0 	udiv	r1, r1, r0
 8016a72:	fb00 3317 	mls	r3, r0, r7, r3
 8016a76:	3208      	adds	r2, #8
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	fb01 f303 	mul.w	r3, r1, r3
 8016a7e:	6829      	ldr	r1, [r5, #0]
 8016a80:	50ca      	str	r2, [r1, r3]
 8016a82:	e7d3      	b.n	8016a2c <on_full_output_buffer_fragmented+0xb8>
 8016a84:	08016975 	.word	0x08016975

08016a88 <uxr_prepare_output_stream>:
 8016a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a8a:	b087      	sub	sp, #28
 8016a8c:	2707      	movs	r7, #7
 8016a8e:	2500      	movs	r5, #0
 8016a90:	461c      	mov	r4, r3
 8016a92:	4606      	mov	r6, r0
 8016a94:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016a98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016a9a:	e9cd 7500 	strd	r7, r5, [sp]
 8016a9e:	3204      	adds	r2, #4
 8016aa0:	f7fe ffc8 	bl	8015a34 <uxr_prepare_stream_to_write_submessage>
 8016aa4:	f080 0201 	eor.w	r2, r0, #1
 8016aa8:	b2d2      	uxtb	r2, r2
 8016aaa:	75a2      	strb	r2, [r4, #22]
 8016aac:	b112      	cbz	r2, 8016ab4 <uxr_prepare_output_stream+0x2c>
 8016aae:	4628      	mov	r0, r5
 8016ab0:	b007      	add	sp, #28
 8016ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab4:	aa05      	add	r2, sp, #20
 8016ab6:	9902      	ldr	r1, [sp, #8]
 8016ab8:	4630      	mov	r0, r6
 8016aba:	f7ff f8f7 	bl	8015cac <uxr_init_base_object_request>
 8016abe:	a905      	add	r1, sp, #20
 8016ac0:	4605      	mov	r5, r0
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f000 ff9c 	bl	8017a00 <uxr_serialize_WRITE_DATA_Payload_Data>
 8016ac8:	69a6      	ldr	r6, [r4, #24]
 8016aca:	69e7      	ldr	r7, [r4, #28]
 8016acc:	4620      	mov	r0, r4
 8016ace:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8016ad2:	1a52      	subs	r2, r2, r1
 8016ad4:	f7fd fbf8 	bl	80142c8 <ucdr_init_buffer>
 8016ad8:	4620      	mov	r0, r4
 8016ada:	463a      	mov	r2, r7
 8016adc:	4631      	mov	r1, r6
 8016ade:	f7fd fbc7 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	b007      	add	sp, #28
 8016ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ae8 <uxr_prepare_output_stream_fragmented>:
 8016ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	b091      	sub	sp, #68	@ 0x44
 8016aee:	4605      	mov	r5, r0
 8016af0:	3008      	adds	r0, #8
 8016af2:	461e      	mov	r6, r3
 8016af4:	9105      	str	r1, [sp, #20]
 8016af6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016afa:	9204      	str	r2, [sp, #16]
 8016afc:	f7ff fe8a 	bl	8016814 <uxr_get_output_reliable_stream>
 8016b00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016b04:	2b01      	cmp	r3, #1
 8016b06:	f000 8093 	beq.w	8016c30 <uxr_prepare_output_stream_fragmented+0x148>
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	f000 808f 	beq.w	8016c30 <uxr_prepare_output_stream_fragmented+0x148>
 8016b12:	f006 f9db 	bl	801cecc <get_available_free_slots>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	f000 8085 	beq.w	8016c26 <uxr_prepare_output_stream_fragmented+0x13e>
 8016b1c:	8923      	ldrh	r3, [r4, #8]
 8016b1e:	89e7      	ldrh	r7, [r4, #14]
 8016b20:	6862      	ldr	r2, [r4, #4]
 8016b22:	fbb7 f9f3 	udiv	r9, r7, r3
 8016b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8016b2a:	fb03 7919 	mls	r9, r3, r9, r7
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	f1a2 0b04 	sub.w	fp, r2, #4
 8016b34:	9203      	str	r2, [sp, #12]
 8016b36:	fa1f f989 	uxth.w	r9, r9
 8016b3a:	fb02 f909 	mul.w	r9, r2, r9
 8016b3e:	f109 0904 	add.w	r9, r9, #4
 8016b42:	4499      	add	r9, r3
 8016b44:	7b23      	ldrb	r3, [r4, #12]
 8016b46:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8016b4a:	4543      	cmp	r3, r8
 8016b4c:	d37c      	bcc.n	8016c48 <uxr_prepare_output_stream_fragmented+0x160>
 8016b4e:	f1ab 0a04 	sub.w	sl, fp, #4
 8016b52:	465a      	mov	r2, fp
 8016b54:	4649      	mov	r1, r9
 8016b56:	a808      	add	r0, sp, #32
 8016b58:	ebaa 0a03 	sub.w	sl, sl, r3
 8016b5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016b5e:	f8cd 8000 	str.w	r8, [sp]
 8016b62:	3308      	adds	r3, #8
 8016b64:	fa1f fa8a 	uxth.w	sl, sl
 8016b68:	9302      	str	r3, [sp, #8]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f7fd fb9a 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 8016b70:	9b02      	ldr	r3, [sp, #8]
 8016b72:	4652      	mov	r2, sl
 8016b74:	210d      	movs	r1, #13
 8016b76:	455b      	cmp	r3, fp
 8016b78:	bf34      	ite	cc
 8016b7a:	2302      	movcc	r3, #2
 8016b7c:	2300      	movcs	r3, #0
 8016b7e:	a808      	add	r0, sp, #32
 8016b80:	f7ff fe80 	bl	8016884 <uxr_buffer_submessage_header>
 8016b84:	8921      	ldrh	r1, [r4, #8]
 8016b86:	6863      	ldr	r3, [r4, #4]
 8016b88:	4638      	mov	r0, r7
 8016b8a:	fbb7 f2f1 	udiv	r2, r7, r1
 8016b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b92:	fb01 7212 	mls	r2, r1, r2, r7
 8016b96:	2101      	movs	r1, #1
 8016b98:	b292      	uxth	r2, r2
 8016b9a:	fb02 f303 	mul.w	r3, r2, r3
 8016b9e:	6822      	ldr	r2, [r4, #0]
 8016ba0:	f842 b003 	str.w	fp, [r2, r3]
 8016ba4:	f006 f9b4 	bl	801cf10 <uxr_seq_num_add>
 8016ba8:	9b03      	ldr	r3, [sp, #12]
 8016baa:	f108 0104 	add.w	r1, r8, #4
 8016bae:	4607      	mov	r7, r0
 8016bb0:	f1a3 0208 	sub.w	r2, r3, #8
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	4449      	add	r1, r9
 8016bb8:	eba2 0208 	sub.w	r2, r2, r8
 8016bbc:	f7fd fb84 	bl	80142c8 <ucdr_init_buffer>
 8016bc0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016bc2:	2107      	movs	r1, #7
 8016bc4:	81e7      	strh	r7, [r4, #14]
 8016bc6:	1d1a      	adds	r2, r3, #4
 8016bc8:	2300      	movs	r3, #0
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8016bd0:	bf28      	it	cs
 8016bd2:	461a      	movcs	r2, r3
 8016bd4:	b292      	uxth	r2, r2
 8016bd6:	f7ff fe55 	bl	8016884 <uxr_buffer_submessage_header>
 8016bda:	aa07      	add	r2, sp, #28
 8016bdc:	9904      	ldr	r1, [sp, #16]
 8016bde:	4628      	mov	r0, r5
 8016be0:	f7ff f864 	bl	8015cac <uxr_init_base_object_request>
 8016be4:	4604      	mov	r4, r0
 8016be6:	b320      	cbz	r0, 8016c32 <uxr_prepare_output_stream_fragmented+0x14a>
 8016be8:	a907      	add	r1, sp, #28
 8016bea:	4630      	mov	r0, r6
 8016bec:	f000 ff08 	bl	8017a00 <uxr_serialize_WRITE_DATA_Payload_Data>
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8016bf6:	1a52      	subs	r2, r2, r1
 8016bf8:	f7fd fb66 	bl	80142c8 <ucdr_init_buffer>
 8016bfc:	9b05      	ldr	r3, [sp, #20]
 8016bfe:	9a02      	ldr	r2, [sp, #8]
 8016c00:	4630      	mov	r0, r6
 8016c02:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8016c06:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016c08:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8016c0c:	462a      	mov	r2, r5
 8016c0e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8016c12:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016c14:	4918      	ldr	r1, [pc, #96]	@ (8016c78 <uxr_prepare_output_stream_fragmented+0x190>)
 8016c16:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8016c1a:	f7fd fb29 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 8016c1e:	4620      	mov	r0, r4
 8016c20:	b011      	add	sp, #68	@ 0x44
 8016c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c26:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8016c28:	4628      	mov	r0, r5
 8016c2a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016c2c:	4798      	blx	r3
 8016c2e:	b920      	cbnz	r0, 8016c3a <uxr_prepare_output_stream_fragmented+0x152>
 8016c30:	2400      	movs	r4, #0
 8016c32:	4620      	mov	r0, r4
 8016c34:	b011      	add	sp, #68	@ 0x44
 8016c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	f006 f946 	bl	801cecc <get_available_free_slots>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	f47f af6b 	bne.w	8016b1c <uxr_prepare_output_stream_fragmented+0x34>
 8016c46:	e7f3      	b.n	8016c30 <uxr_prepare_output_stream_fragmented+0x148>
 8016c48:	4638      	mov	r0, r7
 8016c4a:	2101      	movs	r1, #1
 8016c4c:	f006 f960 	bl	801cf10 <uxr_seq_num_add>
 8016c50:	8922      	ldrh	r2, [r4, #8]
 8016c52:	6863      	ldr	r3, [r4, #4]
 8016c54:	4607      	mov	r7, r0
 8016c56:	fbb3 f9f2 	udiv	r9, r3, r2
 8016c5a:	fbb0 f3f2 	udiv	r3, r0, r2
 8016c5e:	fb02 0313 	mls	r3, r2, r3, r0
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	fb03 f909 	mul.w	r9, r3, r9
 8016c68:	6823      	ldr	r3, [r4, #0]
 8016c6a:	f109 0904 	add.w	r9, r9, #4
 8016c6e:	4499      	add	r9, r3
 8016c70:	7b23      	ldrb	r3, [r4, #12]
 8016c72:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8016c76:	e76a      	b.n	8016b4e <uxr_prepare_output_stream_fragmented+0x66>
 8016c78:	08016975 	.word	0x08016975

08016c7c <uxr_serialize_message_header>:
 8016c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c7e:	4616      	mov	r6, r2
 8016c80:	b083      	sub	sp, #12
 8016c82:	4604      	mov	r4, r0
 8016c84:	460d      	mov	r5, r1
 8016c86:	9301      	str	r3, [sp, #4]
 8016c88:	9f08      	ldr	r7, [sp, #32]
 8016c8a:	f7fc f9d1 	bl	8013030 <ucdr_serialize_uint8_t>
 8016c8e:	4631      	mov	r1, r6
 8016c90:	4620      	mov	r0, r4
 8016c92:	f7fc f9cd 	bl	8013030 <ucdr_serialize_uint8_t>
 8016c96:	9a01      	ldr	r2, [sp, #4]
 8016c98:	2101      	movs	r1, #1
 8016c9a:	4620      	mov	r0, r4
 8016c9c:	f7fc fa74 	bl	8013188 <ucdr_serialize_endian_uint16_t>
 8016ca0:	062b      	lsls	r3, r5, #24
 8016ca2:	d501      	bpl.n	8016ca8 <uxr_serialize_message_header+0x2c>
 8016ca4:	b003      	add	sp, #12
 8016ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ca8:	2204      	movs	r2, #4
 8016caa:	4639      	mov	r1, r7
 8016cac:	4620      	mov	r0, r4
 8016cae:	b003      	add	sp, #12
 8016cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016cb4:	f005 ba52 	b.w	801c15c <ucdr_serialize_array_uint8_t>

08016cb8 <uxr_deserialize_message_header>:
 8016cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cba:	4616      	mov	r6, r2
 8016cbc:	b083      	sub	sp, #12
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	460d      	mov	r5, r1
 8016cc2:	9301      	str	r3, [sp, #4]
 8016cc4:	9f08      	ldr	r7, [sp, #32]
 8016cc6:	f7fc f9c9 	bl	801305c <ucdr_deserialize_uint8_t>
 8016cca:	4631      	mov	r1, r6
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f7fc f9c5 	bl	801305c <ucdr_deserialize_uint8_t>
 8016cd2:	9a01      	ldr	r2, [sp, #4]
 8016cd4:	2101      	movs	r1, #1
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f7fc fb4a 	bl	8013370 <ucdr_deserialize_endian_uint16_t>
 8016cdc:	f995 3000 	ldrsb.w	r3, [r5]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	da01      	bge.n	8016ce8 <uxr_deserialize_message_header+0x30>
 8016ce4:	b003      	add	sp, #12
 8016ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce8:	2204      	movs	r2, #4
 8016cea:	4639      	mov	r1, r7
 8016cec:	4620      	mov	r0, r4
 8016cee:	b003      	add	sp, #12
 8016cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016cf4:	f005 ba96 	b.w	801c224 <ucdr_deserialize_array_uint8_t>

08016cf8 <uxr_serialize_submessage_header>:
 8016cf8:	b530      	push	{r4, r5, lr}
 8016cfa:	4615      	mov	r5, r2
 8016cfc:	b083      	sub	sp, #12
 8016cfe:	4604      	mov	r4, r0
 8016d00:	9301      	str	r3, [sp, #4]
 8016d02:	f7fc f995 	bl	8013030 <ucdr_serialize_uint8_t>
 8016d06:	4629      	mov	r1, r5
 8016d08:	4620      	mov	r0, r4
 8016d0a:	f7fc f991 	bl	8013030 <ucdr_serialize_uint8_t>
 8016d0e:	9a01      	ldr	r2, [sp, #4]
 8016d10:	2101      	movs	r1, #1
 8016d12:	4620      	mov	r0, r4
 8016d14:	b003      	add	sp, #12
 8016d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d1a:	f7fc ba35 	b.w	8013188 <ucdr_serialize_endian_uint16_t>
 8016d1e:	bf00      	nop

08016d20 <uxr_deserialize_submessage_header>:
 8016d20:	b530      	push	{r4, r5, lr}
 8016d22:	4615      	mov	r5, r2
 8016d24:	b083      	sub	sp, #12
 8016d26:	4604      	mov	r4, r0
 8016d28:	9301      	str	r3, [sp, #4]
 8016d2a:	f7fc f997 	bl	801305c <ucdr_deserialize_uint8_t>
 8016d2e:	4629      	mov	r1, r5
 8016d30:	4620      	mov	r0, r4
 8016d32:	f7fc f993 	bl	801305c <ucdr_deserialize_uint8_t>
 8016d36:	9a01      	ldr	r2, [sp, #4]
 8016d38:	2101      	movs	r1, #1
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	b003      	add	sp, #12
 8016d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d42:	f7fc bb15 	b.w	8013370 <ucdr_deserialize_endian_uint16_t>
 8016d46:	bf00      	nop

08016d48 <uxr_serialize_CLIENT_Representation>:
 8016d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d4c:	2204      	movs	r2, #4
 8016d4e:	460e      	mov	r6, r1
 8016d50:	4605      	mov	r5, r0
 8016d52:	f005 fa03 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016d56:	4607      	mov	r7, r0
 8016d58:	2202      	movs	r2, #2
 8016d5a:	1d31      	adds	r1, r6, #4
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f005 f9fd 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016d62:	4038      	ands	r0, r7
 8016d64:	2202      	movs	r2, #2
 8016d66:	1db1      	adds	r1, r6, #6
 8016d68:	b2c7      	uxtb	r7, r0
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f005 f9f6 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016d70:	2204      	movs	r2, #4
 8016d72:	4007      	ands	r7, r0
 8016d74:	f106 0108 	add.w	r1, r6, #8
 8016d78:	4628      	mov	r0, r5
 8016d7a:	f005 f9ef 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016d7e:	4007      	ands	r7, r0
 8016d80:	7b31      	ldrb	r1, [r6, #12]
 8016d82:	4628      	mov	r0, r5
 8016d84:	f7fc f954 	bl	8013030 <ucdr_serialize_uint8_t>
 8016d88:	7b71      	ldrb	r1, [r6, #13]
 8016d8a:	4007      	ands	r7, r0
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	f7fc f921 	bl	8012fd4 <ucdr_serialize_bool>
 8016d92:	7b73      	ldrb	r3, [r6, #13]
 8016d94:	ea07 0800 	and.w	r8, r7, r0
 8016d98:	b93b      	cbnz	r3, 8016daa <uxr_serialize_CLIENT_Representation+0x62>
 8016d9a:	8bb1      	ldrh	r1, [r6, #28]
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f7fc f973 	bl	8013088 <ucdr_serialize_uint16_t>
 8016da2:	ea08 0000 	and.w	r0, r8, r0
 8016da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016daa:	6931      	ldr	r1, [r6, #16]
 8016dac:	4628      	mov	r0, r5
 8016dae:	f7fc fb55 	bl	801345c <ucdr_serialize_uint32_t>
 8016db2:	6933      	ldr	r3, [r6, #16]
 8016db4:	b1e3      	cbz	r3, 8016df0 <uxr_serialize_CLIENT_Representation+0xa8>
 8016db6:	b1c0      	cbz	r0, 8016dea <uxr_serialize_CLIENT_Representation+0xa2>
 8016db8:	4637      	mov	r7, r6
 8016dba:	f04f 0900 	mov.w	r9, #0
 8016dbe:	e000      	b.n	8016dc2 <uxr_serialize_CLIENT_Representation+0x7a>
 8016dc0:	b19c      	cbz	r4, 8016dea <uxr_serialize_CLIENT_Representation+0xa2>
 8016dc2:	6979      	ldr	r1, [r7, #20]
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	f005 fb3f 	bl	801c448 <ucdr_serialize_string>
 8016dca:	69b9      	ldr	r1, [r7, #24]
 8016dcc:	4604      	mov	r4, r0
 8016dce:	4628      	mov	r0, r5
 8016dd0:	f005 fb3a 	bl	801c448 <ucdr_serialize_string>
 8016dd4:	f109 0901 	add.w	r9, r9, #1
 8016dd8:	6933      	ldr	r3, [r6, #16]
 8016dda:	4004      	ands	r4, r0
 8016ddc:	3708      	adds	r7, #8
 8016dde:	4599      	cmp	r9, r3
 8016de0:	b2e4      	uxtb	r4, r4
 8016de2:	d3ed      	bcc.n	8016dc0 <uxr_serialize_CLIENT_Representation+0x78>
 8016de4:	ea08 0804 	and.w	r8, r8, r4
 8016de8:	e7d7      	b.n	8016d9a <uxr_serialize_CLIENT_Representation+0x52>
 8016dea:	f04f 0800 	mov.w	r8, #0
 8016dee:	e7d4      	b.n	8016d9a <uxr_serialize_CLIENT_Representation+0x52>
 8016df0:	ea08 0800 	and.w	r8, r8, r0
 8016df4:	e7d1      	b.n	8016d9a <uxr_serialize_CLIENT_Representation+0x52>
 8016df6:	bf00      	nop

08016df8 <uxr_deserialize_CLIENT_Representation>:
 8016df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dfc:	2204      	movs	r2, #4
 8016dfe:	460c      	mov	r4, r1
 8016e00:	4605      	mov	r5, r0
 8016e02:	f005 fa0f 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8016e06:	4607      	mov	r7, r0
 8016e08:	2202      	movs	r2, #2
 8016e0a:	1d21      	adds	r1, r4, #4
 8016e0c:	4628      	mov	r0, r5
 8016e0e:	f005 fa09 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8016e12:	4038      	ands	r0, r7
 8016e14:	2202      	movs	r2, #2
 8016e16:	1da1      	adds	r1, r4, #6
 8016e18:	b2c6      	uxtb	r6, r0
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	f005 fa02 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8016e20:	2204      	movs	r2, #4
 8016e22:	4006      	ands	r6, r0
 8016e24:	f104 0108 	add.w	r1, r4, #8
 8016e28:	4628      	mov	r0, r5
 8016e2a:	f005 f9fb 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8016e2e:	4006      	ands	r6, r0
 8016e30:	f104 010c 	add.w	r1, r4, #12
 8016e34:	4628      	mov	r0, r5
 8016e36:	f7fc f911 	bl	801305c <ucdr_deserialize_uint8_t>
 8016e3a:	f104 010d 	add.w	r1, r4, #13
 8016e3e:	ea06 0700 	and.w	r7, r6, r0
 8016e42:	4628      	mov	r0, r5
 8016e44:	f7fc f8dc 	bl	8013000 <ucdr_deserialize_bool>
 8016e48:	7b63      	ldrb	r3, [r4, #13]
 8016e4a:	4007      	ands	r7, r0
 8016e4c:	b93b      	cbnz	r3, 8016e5e <uxr_deserialize_CLIENT_Representation+0x66>
 8016e4e:	f104 011c 	add.w	r1, r4, #28
 8016e52:	4628      	mov	r0, r5
 8016e54:	f7fc fa18 	bl	8013288 <ucdr_deserialize_uint16_t>
 8016e58:	4038      	ands	r0, r7
 8016e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e5e:	f104 0110 	add.w	r1, r4, #16
 8016e62:	4628      	mov	r0, r5
 8016e64:	f7fc fc2a 	bl	80136bc <ucdr_deserialize_uint32_t>
 8016e68:	6923      	ldr	r3, [r4, #16]
 8016e6a:	2b01      	cmp	r3, #1
 8016e6c:	d903      	bls.n	8016e76 <uxr_deserialize_CLIENT_Representation+0x7e>
 8016e6e:	2301      	movs	r3, #1
 8016e70:	2700      	movs	r7, #0
 8016e72:	75ab      	strb	r3, [r5, #22]
 8016e74:	e7eb      	b.n	8016e4e <uxr_deserialize_CLIENT_Representation+0x56>
 8016e76:	b30b      	cbz	r3, 8016ebc <uxr_deserialize_CLIENT_Representation+0xc4>
 8016e78:	b1f0      	cbz	r0, 8016eb8 <uxr_deserialize_CLIENT_Representation+0xc0>
 8016e7a:	46a0      	mov	r8, r4
 8016e7c:	f04f 0900 	mov.w	r9, #0
 8016e80:	e000      	b.n	8016e84 <uxr_deserialize_CLIENT_Representation+0x8c>
 8016e82:	b1ce      	cbz	r6, 8016eb8 <uxr_deserialize_CLIENT_Representation+0xc0>
 8016e84:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016e88:	f108 0808 	add.w	r8, r8, #8
 8016e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016e90:	4628      	mov	r0, r5
 8016e92:	f005 fae9 	bl	801c468 <ucdr_deserialize_string>
 8016e96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016e9a:	4606      	mov	r6, r0
 8016e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	f109 0901 	add.w	r9, r9, #1
 8016ea6:	f005 fadf 	bl	801c468 <ucdr_deserialize_string>
 8016eaa:	6923      	ldr	r3, [r4, #16]
 8016eac:	4006      	ands	r6, r0
 8016eae:	4599      	cmp	r9, r3
 8016eb0:	b2f6      	uxtb	r6, r6
 8016eb2:	d3e6      	bcc.n	8016e82 <uxr_deserialize_CLIENT_Representation+0x8a>
 8016eb4:	4037      	ands	r7, r6
 8016eb6:	e7ca      	b.n	8016e4e <uxr_deserialize_CLIENT_Representation+0x56>
 8016eb8:	2700      	movs	r7, #0
 8016eba:	e7c8      	b.n	8016e4e <uxr_deserialize_CLIENT_Representation+0x56>
 8016ebc:	4007      	ands	r7, r0
 8016ebe:	e7c6      	b.n	8016e4e <uxr_deserialize_CLIENT_Representation+0x56>

08016ec0 <uxr_serialize_AGENT_Representation>:
 8016ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ec4:	2204      	movs	r2, #4
 8016ec6:	460f      	mov	r7, r1
 8016ec8:	4605      	mov	r5, r0
 8016eca:	f005 f947 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016ece:	4604      	mov	r4, r0
 8016ed0:	2202      	movs	r2, #2
 8016ed2:	1d39      	adds	r1, r7, #4
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	f005 f941 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016eda:	4020      	ands	r0, r4
 8016edc:	2202      	movs	r2, #2
 8016ede:	1db9      	adds	r1, r7, #6
 8016ee0:	b2c4      	uxtb	r4, r0
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	f005 f93a 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016ee8:	7a39      	ldrb	r1, [r7, #8]
 8016eea:	4004      	ands	r4, r0
 8016eec:	4628      	mov	r0, r5
 8016eee:	f7fc f871 	bl	8012fd4 <ucdr_serialize_bool>
 8016ef2:	7a3b      	ldrb	r3, [r7, #8]
 8016ef4:	ea00 0804 	and.w	r8, r0, r4
 8016ef8:	b913      	cbnz	r3, 8016f00 <uxr_serialize_AGENT_Representation+0x40>
 8016efa:	4640      	mov	r0, r8
 8016efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f00:	68f9      	ldr	r1, [r7, #12]
 8016f02:	4628      	mov	r0, r5
 8016f04:	f7fc faaa 	bl	801345c <ucdr_serialize_uint32_t>
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	b303      	cbz	r3, 8016f4e <uxr_serialize_AGENT_Representation+0x8e>
 8016f0c:	b1d0      	cbz	r0, 8016f44 <uxr_serialize_AGENT_Representation+0x84>
 8016f0e:	463e      	mov	r6, r7
 8016f10:	f04f 0900 	mov.w	r9, #0
 8016f14:	e000      	b.n	8016f18 <uxr_serialize_AGENT_Representation+0x58>
 8016f16:	b1ac      	cbz	r4, 8016f44 <uxr_serialize_AGENT_Representation+0x84>
 8016f18:	6931      	ldr	r1, [r6, #16]
 8016f1a:	4628      	mov	r0, r5
 8016f1c:	f005 fa94 	bl	801c448 <ucdr_serialize_string>
 8016f20:	6971      	ldr	r1, [r6, #20]
 8016f22:	4604      	mov	r4, r0
 8016f24:	4628      	mov	r0, r5
 8016f26:	f005 fa8f 	bl	801c448 <ucdr_serialize_string>
 8016f2a:	f109 0901 	add.w	r9, r9, #1
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	4004      	ands	r4, r0
 8016f32:	3608      	adds	r6, #8
 8016f34:	4599      	cmp	r9, r3
 8016f36:	b2e4      	uxtb	r4, r4
 8016f38:	d3ed      	bcc.n	8016f16 <uxr_serialize_AGENT_Representation+0x56>
 8016f3a:	ea08 0804 	and.w	r8, r8, r4
 8016f3e:	4640      	mov	r0, r8
 8016f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f44:	f04f 0800 	mov.w	r8, #0
 8016f48:	4640      	mov	r0, r8
 8016f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f4e:	ea08 0800 	and.w	r8, r8, r0
 8016f52:	e7d2      	b.n	8016efa <uxr_serialize_AGENT_Representation+0x3a>

08016f54 <uxr_serialize_DATAWRITER_Representation>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	460d      	mov	r5, r1
 8016f58:	7809      	ldrb	r1, [r1, #0]
 8016f5a:	4606      	mov	r6, r0
 8016f5c:	f7fc f868 	bl	8013030 <ucdr_serialize_uint8_t>
 8016f60:	4604      	mov	r4, r0
 8016f62:	b130      	cbz	r0, 8016f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016f64:	782b      	ldrb	r3, [r5, #0]
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d00c      	beq.n	8016f84 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016f6a:	2b03      	cmp	r3, #3
 8016f6c:	d010      	beq.n	8016f90 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d008      	beq.n	8016f84 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016f72:	2202      	movs	r2, #2
 8016f74:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016f78:	4630      	mov	r0, r6
 8016f7a:	f005 f8ef 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8016f7e:	4020      	ands	r0, r4
 8016f80:	b2c0      	uxtb	r0, r0
 8016f82:	bd70      	pop	{r4, r5, r6, pc}
 8016f84:	6869      	ldr	r1, [r5, #4]
 8016f86:	4630      	mov	r0, r6
 8016f88:	f005 fa5e 	bl	801c448 <ucdr_serialize_string>
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	e7f0      	b.n	8016f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016f90:	4629      	mov	r1, r5
 8016f92:	4630      	mov	r0, r6
 8016f94:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016f98:	3104      	adds	r1, #4
 8016f9a:	f7fd fa35 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	e7e7      	b.n	8016f72 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016fa2:	bf00      	nop

08016fa4 <uxr_serialize_ObjectVariant.part.0>:
 8016fa4:	b570      	push	{r4, r5, r6, lr}
 8016fa6:	780b      	ldrb	r3, [r1, #0]
 8016fa8:	460c      	mov	r4, r1
 8016faa:	4605      	mov	r5, r0
 8016fac:	3b01      	subs	r3, #1
 8016fae:	2b0d      	cmp	r3, #13
 8016fb0:	d854      	bhi.n	801705c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016fb2:	e8df f003 	tbb	[pc, r3]
 8016fb6:	0730      	.short	0x0730
 8016fb8:	07071b1b 	.word	0x07071b1b
 8016fbc:	0c530707 	.word	0x0c530707
 8016fc0:	494e0c0c 	.word	0x494e0c0c
 8016fc4:	3104      	adds	r1, #4
 8016fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fca:	f7ff bfc3 	b.w	8016f54 <uxr_serialize_DATAWRITER_Representation>
 8016fce:	7909      	ldrb	r1, [r1, #4]
 8016fd0:	f7fc f82e 	bl	8013030 <ucdr_serialize_uint8_t>
 8016fd4:	b1e8      	cbz	r0, 8017012 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8016fd6:	7923      	ldrb	r3, [r4, #4]
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d001      	beq.n	8016fe0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016fdc:	2b02      	cmp	r3, #2
 8016fde:	d13d      	bne.n	801705c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016fe0:	68a1      	ldr	r1, [r4, #8]
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fe8:	f005 ba2e 	b.w	801c448 <ucdr_serialize_string>
 8016fec:	7909      	ldrb	r1, [r1, #4]
 8016fee:	f7fc f81f 	bl	8013030 <ucdr_serialize_uint8_t>
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	b120      	cbz	r0, 8017000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016ff6:	7923      	ldrb	r3, [r4, #4]
 8016ff8:	2b02      	cmp	r3, #2
 8016ffa:	d039      	beq.n	8017070 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016ffc:	2b03      	cmp	r3, #3
 8016ffe:	d02f      	beq.n	8017060 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8017000:	2202      	movs	r2, #2
 8017002:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8017006:	4628      	mov	r0, r5
 8017008:	f005 f8a8 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801700c:	4030      	ands	r0, r6
 801700e:	b2c0      	uxtb	r0, r0
 8017010:	bd70      	pop	{r4, r5, r6, pc}
 8017012:	2000      	movs	r0, #0
 8017014:	bd70      	pop	{r4, r5, r6, pc}
 8017016:	7909      	ldrb	r1, [r1, #4]
 8017018:	f7fc f80a 	bl	8013030 <ucdr_serialize_uint8_t>
 801701c:	4606      	mov	r6, r0
 801701e:	b158      	cbz	r0, 8017038 <uxr_serialize_ObjectVariant.part.0+0x94>
 8017020:	7923      	ldrb	r3, [r4, #4]
 8017022:	2b02      	cmp	r3, #2
 8017024:	d003      	beq.n	801702e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8017026:	2b03      	cmp	r3, #3
 8017028:	d028      	beq.n	801707c <uxr_serialize_ObjectVariant.part.0+0xd8>
 801702a:	2b01      	cmp	r3, #1
 801702c:	d104      	bne.n	8017038 <uxr_serialize_ObjectVariant.part.0+0x94>
 801702e:	68a1      	ldr	r1, [r4, #8]
 8017030:	4628      	mov	r0, r5
 8017032:	f005 fa09 	bl	801c448 <ucdr_serialize_string>
 8017036:	4606      	mov	r6, r0
 8017038:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801703c:	4628      	mov	r0, r5
 801703e:	f7fc fd33 	bl	8013aa8 <ucdr_serialize_int16_t>
 8017042:	4030      	ands	r0, r6
 8017044:	b2c0      	uxtb	r0, r0
 8017046:	bd70      	pop	{r4, r5, r6, pc}
 8017048:	3104      	adds	r1, #4
 801704a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801704e:	f7ff be7b 	b.w	8016d48 <uxr_serialize_CLIENT_Representation>
 8017052:	3104      	adds	r1, #4
 8017054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017058:	f7ff bf32 	b.w	8016ec0 <uxr_serialize_AGENT_Representation>
 801705c:	2001      	movs	r0, #1
 801705e:	bd70      	pop	{r4, r5, r6, pc}
 8017060:	68a2      	ldr	r2, [r4, #8]
 8017062:	f104 010c 	add.w	r1, r4, #12
 8017066:	4628      	mov	r0, r5
 8017068:	f7fd f9ce 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 801706c:	4606      	mov	r6, r0
 801706e:	e7c7      	b.n	8017000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017070:	68a1      	ldr	r1, [r4, #8]
 8017072:	4628      	mov	r0, r5
 8017074:	f005 f9e8 	bl	801c448 <ucdr_serialize_string>
 8017078:	4606      	mov	r6, r0
 801707a:	e7c1      	b.n	8017000 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801707c:	68a2      	ldr	r2, [r4, #8]
 801707e:	f104 010c 	add.w	r1, r4, #12
 8017082:	4628      	mov	r0, r5
 8017084:	f7fd f9c0 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 8017088:	4606      	mov	r6, r0
 801708a:	e7d5      	b.n	8017038 <uxr_serialize_ObjectVariant.part.0+0x94>

0801708c <uxr_deserialize_DATAWRITER_Representation>:
 801708c:	b570      	push	{r4, r5, r6, lr}
 801708e:	4606      	mov	r6, r0
 8017090:	460d      	mov	r5, r1
 8017092:	f7fb ffe3 	bl	801305c <ucdr_deserialize_uint8_t>
 8017096:	4604      	mov	r4, r0
 8017098:	b130      	cbz	r0, 80170a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801709a:	782b      	ldrb	r3, [r5, #0]
 801709c:	2b02      	cmp	r3, #2
 801709e:	d00c      	beq.n	80170ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80170a0:	2b03      	cmp	r3, #3
 80170a2:	d012      	beq.n	80170ca <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80170a4:	2b01      	cmp	r3, #1
 80170a6:	d008      	beq.n	80170ba <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80170a8:	2202      	movs	r2, #2
 80170aa:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80170ae:	4630      	mov	r0, r6
 80170b0:	f005 f8b8 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80170b4:	4020      	ands	r0, r4
 80170b6:	b2c0      	uxtb	r0, r0
 80170b8:	bd70      	pop	{r4, r5, r6, pc}
 80170ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170be:	6869      	ldr	r1, [r5, #4]
 80170c0:	4630      	mov	r0, r6
 80170c2:	f005 f9d1 	bl	801c468 <ucdr_deserialize_string>
 80170c6:	4604      	mov	r4, r0
 80170c8:	e7ee      	b.n	80170a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80170ca:	1d2b      	adds	r3, r5, #4
 80170cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170d0:	f105 0108 	add.w	r1, r5, #8
 80170d4:	4630      	mov	r0, r6
 80170d6:	f7fd f9a9 	bl	801442c <ucdr_deserialize_sequence_uint8_t>
 80170da:	4604      	mov	r4, r0
 80170dc:	e7e4      	b.n	80170a8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80170de:	bf00      	nop

080170e0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	460d      	mov	r5, r1
 80170e4:	7809      	ldrb	r1, [r1, #0]
 80170e6:	4606      	mov	r6, r0
 80170e8:	f7fb ff74 	bl	8012fd4 <ucdr_serialize_bool>
 80170ec:	782b      	ldrb	r3, [r5, #0]
 80170ee:	4604      	mov	r4, r0
 80170f0:	b94b      	cbnz	r3, 8017106 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80170f2:	7a29      	ldrb	r1, [r5, #8]
 80170f4:	4630      	mov	r0, r6
 80170f6:	f7fb ff6d 	bl	8012fd4 <ucdr_serialize_bool>
 80170fa:	7a2b      	ldrb	r3, [r5, #8]
 80170fc:	4004      	ands	r4, r0
 80170fe:	b2e4      	uxtb	r4, r4
 8017100:	b943      	cbnz	r3, 8017114 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017102:	4620      	mov	r0, r4
 8017104:	bd70      	pop	{r4, r5, r6, pc}
 8017106:	6869      	ldr	r1, [r5, #4]
 8017108:	4630      	mov	r0, r6
 801710a:	f005 f99d 	bl	801c448 <ucdr_serialize_string>
 801710e:	4004      	ands	r4, r0
 8017110:	b2e4      	uxtb	r4, r4
 8017112:	e7ee      	b.n	80170f2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017114:	68e9      	ldr	r1, [r5, #12]
 8017116:	4630      	mov	r0, r6
 8017118:	f005 f996 	bl	801c448 <ucdr_serialize_string>
 801711c:	4004      	ands	r4, r0
 801711e:	4620      	mov	r0, r4
 8017120:	bd70      	pop	{r4, r5, r6, pc}
 8017122:	bf00      	nop

08017124 <uxr_serialize_OBJK_Topic_Binary>:
 8017124:	b570      	push	{r4, r5, r6, lr}
 8017126:	460d      	mov	r5, r1
 8017128:	4606      	mov	r6, r0
 801712a:	6809      	ldr	r1, [r1, #0]
 801712c:	f005 f98c 	bl	801c448 <ucdr_serialize_string>
 8017130:	4604      	mov	r4, r0
 8017132:	7929      	ldrb	r1, [r5, #4]
 8017134:	4630      	mov	r0, r6
 8017136:	f7fb ff4d 	bl	8012fd4 <ucdr_serialize_bool>
 801713a:	792b      	ldrb	r3, [r5, #4]
 801713c:	4004      	ands	r4, r0
 801713e:	b2e4      	uxtb	r4, r4
 8017140:	b943      	cbnz	r3, 8017154 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8017142:	7b29      	ldrb	r1, [r5, #12]
 8017144:	4630      	mov	r0, r6
 8017146:	f7fb ff45 	bl	8012fd4 <ucdr_serialize_bool>
 801714a:	7b2b      	ldrb	r3, [r5, #12]
 801714c:	4004      	ands	r4, r0
 801714e:	b93b      	cbnz	r3, 8017160 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8017150:	4620      	mov	r0, r4
 8017152:	bd70      	pop	{r4, r5, r6, pc}
 8017154:	68a9      	ldr	r1, [r5, #8]
 8017156:	4630      	mov	r0, r6
 8017158:	f005 f976 	bl	801c448 <ucdr_serialize_string>
 801715c:	4004      	ands	r4, r0
 801715e:	e7f0      	b.n	8017142 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8017160:	6929      	ldr	r1, [r5, #16]
 8017162:	4630      	mov	r0, r6
 8017164:	f005 f970 	bl	801c448 <ucdr_serialize_string>
 8017168:	4004      	ands	r4, r0
 801716a:	b2e4      	uxtb	r4, r4
 801716c:	4620      	mov	r0, r4
 801716e:	bd70      	pop	{r4, r5, r6, pc}

08017170 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8017170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017174:	460c      	mov	r4, r1
 8017176:	7809      	ldrb	r1, [r1, #0]
 8017178:	4606      	mov	r6, r0
 801717a:	f7fb ff2b 	bl	8012fd4 <ucdr_serialize_bool>
 801717e:	7823      	ldrb	r3, [r4, #0]
 8017180:	4605      	mov	r5, r0
 8017182:	b96b      	cbnz	r3, 80171a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8017184:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017188:	4630      	mov	r0, r6
 801718a:	f7fb ff23 	bl	8012fd4 <ucdr_serialize_bool>
 801718e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017192:	4005      	ands	r5, r0
 8017194:	b2ed      	uxtb	r5, r5
 8017196:	2b00      	cmp	r3, #0
 8017198:	d169      	bne.n	801726e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801719a:	4628      	mov	r0, r5
 801719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171a0:	6861      	ldr	r1, [r4, #4]
 80171a2:	4630      	mov	r0, r6
 80171a4:	f7fc f95a 	bl	801345c <ucdr_serialize_uint32_t>
 80171a8:	6863      	ldr	r3, [r4, #4]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d06b      	beq.n	8017286 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d067      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80171b2:	68a1      	ldr	r1, [r4, #8]
 80171b4:	4630      	mov	r0, r6
 80171b6:	f005 f947 	bl	801c448 <ucdr_serialize_string>
 80171ba:	6863      	ldr	r3, [r4, #4]
 80171bc:	2b01      	cmp	r3, #1
 80171be:	d953      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d05e      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80171c4:	68e1      	ldr	r1, [r4, #12]
 80171c6:	4630      	mov	r0, r6
 80171c8:	f005 f93e 	bl	801c448 <ucdr_serialize_string>
 80171cc:	6863      	ldr	r3, [r4, #4]
 80171ce:	2b02      	cmp	r3, #2
 80171d0:	d94a      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d055      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80171d6:	6921      	ldr	r1, [r4, #16]
 80171d8:	4630      	mov	r0, r6
 80171da:	f005 f935 	bl	801c448 <ucdr_serialize_string>
 80171de:	6863      	ldr	r3, [r4, #4]
 80171e0:	2b03      	cmp	r3, #3
 80171e2:	d941      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80171e4:	2800      	cmp	r0, #0
 80171e6:	d04c      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80171e8:	6961      	ldr	r1, [r4, #20]
 80171ea:	4630      	mov	r0, r6
 80171ec:	f005 f92c 	bl	801c448 <ucdr_serialize_string>
 80171f0:	6863      	ldr	r3, [r4, #4]
 80171f2:	2b04      	cmp	r3, #4
 80171f4:	d938      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d043      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80171fa:	69a1      	ldr	r1, [r4, #24]
 80171fc:	4630      	mov	r0, r6
 80171fe:	f005 f923 	bl	801c448 <ucdr_serialize_string>
 8017202:	6863      	ldr	r3, [r4, #4]
 8017204:	2b05      	cmp	r3, #5
 8017206:	d92f      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017208:	2800      	cmp	r0, #0
 801720a:	d03a      	beq.n	8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801720c:	69e1      	ldr	r1, [r4, #28]
 801720e:	4630      	mov	r0, r6
 8017210:	f005 f91a 	bl	801c448 <ucdr_serialize_string>
 8017214:	6863      	ldr	r3, [r4, #4]
 8017216:	2b06      	cmp	r3, #6
 8017218:	d926      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801721a:	b390      	cbz	r0, 8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801721c:	6a21      	ldr	r1, [r4, #32]
 801721e:	4630      	mov	r0, r6
 8017220:	f005 f912 	bl	801c448 <ucdr_serialize_string>
 8017224:	6863      	ldr	r3, [r4, #4]
 8017226:	2b07      	cmp	r3, #7
 8017228:	d91e      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801722a:	b350      	cbz	r0, 8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801722c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801722e:	4630      	mov	r0, r6
 8017230:	f005 f90a 	bl	801c448 <ucdr_serialize_string>
 8017234:	6863      	ldr	r3, [r4, #4]
 8017236:	2b08      	cmp	r3, #8
 8017238:	d916      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801723a:	b310      	cbz	r0, 8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801723c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801723e:	4630      	mov	r0, r6
 8017240:	f005 f902 	bl	801c448 <ucdr_serialize_string>
 8017244:	6863      	ldr	r3, [r4, #4]
 8017246:	2b09      	cmp	r3, #9
 8017248:	d90e      	bls.n	8017268 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801724a:	b1d0      	cbz	r0, 8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801724c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8017250:	2709      	movs	r7, #9
 8017252:	e000      	b.n	8017256 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8017254:	b1a8      	cbz	r0, 8017282 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017256:	f858 1b04 	ldr.w	r1, [r8], #4
 801725a:	4630      	mov	r0, r6
 801725c:	f005 f8f4 	bl	801c448 <ucdr_serialize_string>
 8017260:	3701      	adds	r7, #1
 8017262:	6862      	ldr	r2, [r4, #4]
 8017264:	4297      	cmp	r7, r2
 8017266:	d3f5      	bcc.n	8017254 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8017268:	4005      	ands	r5, r0
 801726a:	b2ed      	uxtb	r5, r5
 801726c:	e78a      	b.n	8017184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801726e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017270:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017274:	4630      	mov	r0, r6
 8017276:	f7fd f8c7 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 801727a:	4005      	ands	r5, r0
 801727c:	4628      	mov	r0, r5
 801727e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017282:	2500      	movs	r5, #0
 8017284:	e77e      	b.n	8017184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017286:	4028      	ands	r0, r5
 8017288:	b2c5      	uxtb	r5, r0
 801728a:	e77b      	b.n	8017184 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801728c <uxr_serialize_OBJK_Publisher_Binary>:
 801728c:	b570      	push	{r4, r5, r6, lr}
 801728e:	460d      	mov	r5, r1
 8017290:	7809      	ldrb	r1, [r1, #0]
 8017292:	4606      	mov	r6, r0
 8017294:	f7fb fe9e 	bl	8012fd4 <ucdr_serialize_bool>
 8017298:	782b      	ldrb	r3, [r5, #0]
 801729a:	4604      	mov	r4, r0
 801729c:	b94b      	cbnz	r3, 80172b2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801729e:	7a29      	ldrb	r1, [r5, #8]
 80172a0:	4630      	mov	r0, r6
 80172a2:	f7fb fe97 	bl	8012fd4 <ucdr_serialize_bool>
 80172a6:	7a2b      	ldrb	r3, [r5, #8]
 80172a8:	4004      	ands	r4, r0
 80172aa:	b2e4      	uxtb	r4, r4
 80172ac:	b943      	cbnz	r3, 80172c0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80172ae:	4620      	mov	r0, r4
 80172b0:	bd70      	pop	{r4, r5, r6, pc}
 80172b2:	6869      	ldr	r1, [r5, #4]
 80172b4:	4630      	mov	r0, r6
 80172b6:	f005 f8c7 	bl	801c448 <ucdr_serialize_string>
 80172ba:	4004      	ands	r4, r0
 80172bc:	b2e4      	uxtb	r4, r4
 80172be:	e7ee      	b.n	801729e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80172c0:	f105 010c 	add.w	r1, r5, #12
 80172c4:	4630      	mov	r0, r6
 80172c6:	f7ff ff53 	bl	8017170 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80172ca:	4004      	ands	r4, r0
 80172cc:	4620      	mov	r0, r4
 80172ce:	bd70      	pop	{r4, r5, r6, pc}

080172d0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80172d0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80172d4:	4688      	mov	r8, r1
 80172d6:	4681      	mov	r9, r0
 80172d8:	8809      	ldrh	r1, [r1, #0]
 80172da:	f7fb fed5 	bl	8013088 <ucdr_serialize_uint16_t>
 80172de:	4606      	mov	r6, r0
 80172e0:	f898 1002 	ldrb.w	r1, [r8, #2]
 80172e4:	4648      	mov	r0, r9
 80172e6:	f7fb fe75 	bl	8012fd4 <ucdr_serialize_bool>
 80172ea:	f898 3002 	ldrb.w	r3, [r8, #2]
 80172ee:	4006      	ands	r6, r0
 80172f0:	b2f5      	uxtb	r5, r6
 80172f2:	b9eb      	cbnz	r3, 8017330 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80172f4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80172f8:	4648      	mov	r0, r9
 80172fa:	f7fb fe6b 	bl	8012fd4 <ucdr_serialize_bool>
 80172fe:	f898 3006 	ldrb.w	r3, [r8, #6]
 8017302:	4005      	ands	r5, r0
 8017304:	bb7b      	cbnz	r3, 8017366 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8017306:	f898 100c 	ldrb.w	r1, [r8, #12]
 801730a:	4648      	mov	r0, r9
 801730c:	f7fb fe62 	bl	8012fd4 <ucdr_serialize_bool>
 8017310:	f898 300c 	ldrb.w	r3, [r8, #12]
 8017314:	4005      	ands	r5, r0
 8017316:	b9f3      	cbnz	r3, 8017356 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8017318:	f898 1014 	ldrb.w	r1, [r8, #20]
 801731c:	4648      	mov	r0, r9
 801731e:	f7fb fe59 	bl	8012fd4 <ucdr_serialize_bool>
 8017322:	f898 3014 	ldrb.w	r3, [r8, #20]
 8017326:	4005      	ands	r5, r0
 8017328:	b94b      	cbnz	r3, 801733e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801732a:	4628      	mov	r0, r5
 801732c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8017330:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8017334:	4648      	mov	r0, r9
 8017336:	f7fb fea7 	bl	8013088 <ucdr_serialize_uint16_t>
 801733a:	4005      	ands	r5, r0
 801733c:	e7da      	b.n	80172f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801733e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8017342:	f108 011c 	add.w	r1, r8, #28
 8017346:	4648      	mov	r0, r9
 8017348:	f7fd f85e 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 801734c:	4028      	ands	r0, r5
 801734e:	b2c5      	uxtb	r5, r0
 8017350:	4628      	mov	r0, r5
 8017352:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8017356:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801735a:	4648      	mov	r0, r9
 801735c:	f7fc f87e 	bl	801345c <ucdr_serialize_uint32_t>
 8017360:	4028      	ands	r0, r5
 8017362:	b2c5      	uxtb	r5, r0
 8017364:	e7d8      	b.n	8017318 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8017366:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801736a:	4648      	mov	r0, r9
 801736c:	f7fc f876 	bl	801345c <ucdr_serialize_uint32_t>
 8017370:	4028      	ands	r0, r5
 8017372:	b2c5      	uxtb	r5, r0
 8017374:	e7c7      	b.n	8017306 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8017376:	bf00      	nop

08017378 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801737a:	2202      	movs	r2, #2
 801737c:	460d      	mov	r5, r1
 801737e:	4606      	mov	r6, r0
 8017380:	f004 feec 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017384:	4604      	mov	r4, r0
 8017386:	78a9      	ldrb	r1, [r5, #2]
 8017388:	4630      	mov	r0, r6
 801738a:	f7fb fe23 	bl	8012fd4 <ucdr_serialize_bool>
 801738e:	78ab      	ldrb	r3, [r5, #2]
 8017390:	4004      	ands	r4, r0
 8017392:	b2e4      	uxtb	r4, r4
 8017394:	b90b      	cbnz	r3, 801739a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017396:	4620      	mov	r0, r4
 8017398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801739a:	f105 0108 	add.w	r1, r5, #8
 801739e:	4630      	mov	r0, r6
 80173a0:	f7ff ff96 	bl	80172d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80173a4:	4607      	mov	r7, r0
 80173a6:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80173aa:	4630      	mov	r0, r6
 80173ac:	f7fb fe12 	bl	8012fd4 <ucdr_serialize_bool>
 80173b0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80173b4:	4038      	ands	r0, r7
 80173b6:	b2c7      	uxtb	r7, r0
 80173b8:	b913      	cbnz	r3, 80173c0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80173ba:	403c      	ands	r4, r7
 80173bc:	4620      	mov	r0, r4
 80173be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173c0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80173c4:	4630      	mov	r0, r6
 80173c6:	f7fc fa9f 	bl	8013908 <ucdr_serialize_uint64_t>
 80173ca:	4007      	ands	r7, r0
 80173cc:	e7f5      	b.n	80173ba <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80173ce:	bf00      	nop

080173d0 <uxr_deserialize_ObjectVariant>:
 80173d0:	b570      	push	{r4, r5, r6, lr}
 80173d2:	4605      	mov	r5, r0
 80173d4:	460e      	mov	r6, r1
 80173d6:	f7fb fe41 	bl	801305c <ucdr_deserialize_uint8_t>
 80173da:	b168      	cbz	r0, 80173f8 <uxr_deserialize_ObjectVariant+0x28>
 80173dc:	7833      	ldrb	r3, [r6, #0]
 80173de:	4604      	mov	r4, r0
 80173e0:	3b01      	subs	r3, #1
 80173e2:	2b0d      	cmp	r3, #13
 80173e4:	d809      	bhi.n	80173fa <uxr_deserialize_ObjectVariant+0x2a>
 80173e6:	e8df f003 	tbb	[pc, r3]
 80173ea:	0a41      	.short	0x0a41
 80173ec:	0a0a2323 	.word	0x0a0a2323
 80173f0:	10080a0a 	.word	0x10080a0a
 80173f4:	565c1010 	.word	0x565c1010
 80173f8:	2400      	movs	r4, #0
 80173fa:	4620      	mov	r0, r4
 80173fc:	bd70      	pop	{r4, r5, r6, pc}
 80173fe:	1d31      	adds	r1, r6, #4
 8017400:	4628      	mov	r0, r5
 8017402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017406:	f7ff be41 	b.w	801708c <uxr_deserialize_DATAWRITER_Representation>
 801740a:	1d31      	adds	r1, r6, #4
 801740c:	4628      	mov	r0, r5
 801740e:	f7fb fe25 	bl	801305c <ucdr_deserialize_uint8_t>
 8017412:	2800      	cmp	r0, #0
 8017414:	d0f0      	beq.n	80173f8 <uxr_deserialize_ObjectVariant+0x28>
 8017416:	7933      	ldrb	r3, [r6, #4]
 8017418:	2b01      	cmp	r3, #1
 801741a:	d001      	beq.n	8017420 <uxr_deserialize_ObjectVariant+0x50>
 801741c:	2b02      	cmp	r3, #2
 801741e:	d1ec      	bne.n	80173fa <uxr_deserialize_ObjectVariant+0x2a>
 8017420:	68b1      	ldr	r1, [r6, #8]
 8017422:	4628      	mov	r0, r5
 8017424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801742c:	f005 b81c 	b.w	801c468 <ucdr_deserialize_string>
 8017430:	1d31      	adds	r1, r6, #4
 8017432:	4628      	mov	r0, r5
 8017434:	f7fb fe12 	bl	801305c <ucdr_deserialize_uint8_t>
 8017438:	4604      	mov	r4, r0
 801743a:	b170      	cbz	r0, 801745a <uxr_deserialize_ObjectVariant+0x8a>
 801743c:	7933      	ldrb	r3, [r6, #4]
 801743e:	2b02      	cmp	r3, #2
 8017440:	d04c      	beq.n	80174dc <uxr_deserialize_ObjectVariant+0x10c>
 8017442:	2b03      	cmp	r3, #3
 8017444:	d109      	bne.n	801745a <uxr_deserialize_ObjectVariant+0x8a>
 8017446:	f106 0308 	add.w	r3, r6, #8
 801744a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801744e:	f106 010c 	add.w	r1, r6, #12
 8017452:	4628      	mov	r0, r5
 8017454:	f7fc ffea 	bl	801442c <ucdr_deserialize_sequence_uint8_t>
 8017458:	4604      	mov	r4, r0
 801745a:	2202      	movs	r2, #2
 801745c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017460:	4628      	mov	r0, r5
 8017462:	f004 fedf 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017466:	4020      	ands	r0, r4
 8017468:	b2c4      	uxtb	r4, r0
 801746a:	e7c6      	b.n	80173fa <uxr_deserialize_ObjectVariant+0x2a>
 801746c:	1d31      	adds	r1, r6, #4
 801746e:	4628      	mov	r0, r5
 8017470:	f7fb fdf4 	bl	801305c <ucdr_deserialize_uint8_t>
 8017474:	4604      	mov	r4, r0
 8017476:	b130      	cbz	r0, 8017486 <uxr_deserialize_ObjectVariant+0xb6>
 8017478:	7933      	ldrb	r3, [r6, #4]
 801747a:	2b02      	cmp	r3, #2
 801747c:	d036      	beq.n	80174ec <uxr_deserialize_ObjectVariant+0x11c>
 801747e:	2b03      	cmp	r3, #3
 8017480:	d03c      	beq.n	80174fc <uxr_deserialize_ObjectVariant+0x12c>
 8017482:	2b01      	cmp	r3, #1
 8017484:	d032      	beq.n	80174ec <uxr_deserialize_ObjectVariant+0x11c>
 8017486:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801748a:	4628      	mov	r0, r5
 801748c:	f7fc fb8c 	bl	8013ba8 <ucdr_deserialize_int16_t>
 8017490:	4020      	ands	r0, r4
 8017492:	b2c4      	uxtb	r4, r0
 8017494:	e7b1      	b.n	80173fa <uxr_deserialize_ObjectVariant+0x2a>
 8017496:	1d31      	adds	r1, r6, #4
 8017498:	4628      	mov	r0, r5
 801749a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801749e:	f7ff bcab 	b.w	8016df8 <uxr_deserialize_CLIENT_Representation>
 80174a2:	2204      	movs	r2, #4
 80174a4:	4628      	mov	r0, r5
 80174a6:	18b1      	adds	r1, r6, r2
 80174a8:	f004 febc 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80174ac:	4604      	mov	r4, r0
 80174ae:	2202      	movs	r2, #2
 80174b0:	f106 0108 	add.w	r1, r6, #8
 80174b4:	4628      	mov	r0, r5
 80174b6:	f004 feb5 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80174ba:	4004      	ands	r4, r0
 80174bc:	2202      	movs	r2, #2
 80174be:	f106 010a 	add.w	r1, r6, #10
 80174c2:	4628      	mov	r0, r5
 80174c4:	b2e4      	uxtb	r4, r4
 80174c6:	f004 fead 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80174ca:	4603      	mov	r3, r0
 80174cc:	f106 010c 	add.w	r1, r6, #12
 80174d0:	4628      	mov	r0, r5
 80174d2:	401c      	ands	r4, r3
 80174d4:	f7fb fd94 	bl	8013000 <ucdr_deserialize_bool>
 80174d8:	4004      	ands	r4, r0
 80174da:	e78e      	b.n	80173fa <uxr_deserialize_ObjectVariant+0x2a>
 80174dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174e0:	68b1      	ldr	r1, [r6, #8]
 80174e2:	4628      	mov	r0, r5
 80174e4:	f004 ffc0 	bl	801c468 <ucdr_deserialize_string>
 80174e8:	4604      	mov	r4, r0
 80174ea:	e7b6      	b.n	801745a <uxr_deserialize_ObjectVariant+0x8a>
 80174ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174f0:	68b1      	ldr	r1, [r6, #8]
 80174f2:	4628      	mov	r0, r5
 80174f4:	f004 ffb8 	bl	801c468 <ucdr_deserialize_string>
 80174f8:	4604      	mov	r4, r0
 80174fa:	e7c4      	b.n	8017486 <uxr_deserialize_ObjectVariant+0xb6>
 80174fc:	f106 0308 	add.w	r3, r6, #8
 8017500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017504:	f106 010c 	add.w	r1, r6, #12
 8017508:	4628      	mov	r0, r5
 801750a:	f7fc ff8f 	bl	801442c <ucdr_deserialize_sequence_uint8_t>
 801750e:	4604      	mov	r4, r0
 8017510:	e7b9      	b.n	8017486 <uxr_deserialize_ObjectVariant+0xb6>
 8017512:	bf00      	nop

08017514 <uxr_deserialize_BaseObjectRequest>:
 8017514:	b570      	push	{r4, r5, r6, lr}
 8017516:	2202      	movs	r2, #2
 8017518:	4605      	mov	r5, r0
 801751a:	460e      	mov	r6, r1
 801751c:	f004 fe82 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017520:	2202      	movs	r2, #2
 8017522:	4604      	mov	r4, r0
 8017524:	4628      	mov	r0, r5
 8017526:	18b1      	adds	r1, r6, r2
 8017528:	f004 fe7c 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801752c:	4020      	ands	r0, r4
 801752e:	b2c0      	uxtb	r0, r0
 8017530:	bd70      	pop	{r4, r5, r6, pc}
 8017532:	bf00      	nop

08017534 <uxr_serialize_ActivityInfoVariant>:
 8017534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017538:	460e      	mov	r6, r1
 801753a:	7809      	ldrb	r1, [r1, #0]
 801753c:	4680      	mov	r8, r0
 801753e:	f7fb fd77 	bl	8013030 <ucdr_serialize_uint8_t>
 8017542:	4607      	mov	r7, r0
 8017544:	b138      	cbz	r0, 8017556 <uxr_serialize_ActivityInfoVariant+0x22>
 8017546:	7833      	ldrb	r3, [r6, #0]
 8017548:	2b06      	cmp	r3, #6
 801754a:	f000 8081 	beq.w	8017650 <uxr_serialize_ActivityInfoVariant+0x11c>
 801754e:	2b0d      	cmp	r3, #13
 8017550:	d014      	beq.n	801757c <uxr_serialize_ActivityInfoVariant+0x48>
 8017552:	2b05      	cmp	r3, #5
 8017554:	d002      	beq.n	801755c <uxr_serialize_ActivityInfoVariant+0x28>
 8017556:	4638      	mov	r0, r7
 8017558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801755c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017560:	4640      	mov	r0, r8
 8017562:	f7fc faa1 	bl	8013aa8 <ucdr_serialize_int16_t>
 8017566:	4607      	mov	r7, r0
 8017568:	4640      	mov	r0, r8
 801756a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801756e:	f7fc f9cb 	bl	8013908 <ucdr_serialize_uint64_t>
 8017572:	4038      	ands	r0, r7
 8017574:	b2c7      	uxtb	r7, r0
 8017576:	4638      	mov	r0, r7
 8017578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801757c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017580:	4640      	mov	r0, r8
 8017582:	f7fc fa91 	bl	8013aa8 <ucdr_serialize_int16_t>
 8017586:	68f1      	ldr	r1, [r6, #12]
 8017588:	4607      	mov	r7, r0
 801758a:	4640      	mov	r0, r8
 801758c:	f7fb ff66 	bl	801345c <ucdr_serialize_uint32_t>
 8017590:	68f3      	ldr	r3, [r6, #12]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d0ed      	beq.n	8017572 <uxr_serialize_ActivityInfoVariant+0x3e>
 8017596:	b318      	cbz	r0, 80175e0 <uxr_serialize_ActivityInfoVariant+0xac>
 8017598:	f106 090c 	add.w	r9, r6, #12
 801759c:	2400      	movs	r4, #0
 801759e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80175a2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80175a6:	7c29      	ldrb	r1, [r5, #16]
 80175a8:	4640      	mov	r0, r8
 80175aa:	f7fb fd41 	bl	8013030 <ucdr_serialize_uint8_t>
 80175ae:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80175b2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80175b6:	2800      	cmp	r0, #0
 80175b8:	d051      	beq.n	801765e <uxr_serialize_ActivityInfoVariant+0x12a>
 80175ba:	7c2b      	ldrb	r3, [r5, #16]
 80175bc:	00c9      	lsls	r1, r1, #3
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d854      	bhi.n	801766c <uxr_serialize_ActivityInfoVariant+0x138>
 80175c2:	e8df f003 	tbb	[pc, r3]
 80175c6:	2133      	.short	0x2133
 80175c8:	020f      	.short	0x020f
 80175ca:	4449      	add	r1, r9
 80175cc:	4640      	mov	r0, r8
 80175ce:	6889      	ldr	r1, [r1, #8]
 80175d0:	f004 ff3a 	bl	801c448 <ucdr_serialize_string>
 80175d4:	3401      	adds	r4, #1
 80175d6:	68f2      	ldr	r2, [r6, #12]
 80175d8:	4294      	cmp	r4, r2
 80175da:	d244      	bcs.n	8017666 <uxr_serialize_ActivityInfoVariant+0x132>
 80175dc:	2800      	cmp	r0, #0
 80175de:	d1de      	bne.n	801759e <uxr_serialize_ActivityInfoVariant+0x6a>
 80175e0:	2700      	movs	r7, #0
 80175e2:	e7b8      	b.n	8017556 <uxr_serialize_ActivityInfoVariant+0x22>
 80175e4:	3108      	adds	r1, #8
 80175e6:	44a2      	add	sl, r4
 80175e8:	2210      	movs	r2, #16
 80175ea:	4640      	mov	r0, r8
 80175ec:	4449      	add	r1, r9
 80175ee:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80175f2:	f004 fdb3 	bl	801c15c <ucdr_serialize_array_uint8_t>
 80175f6:	4605      	mov	r5, r0
 80175f8:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80175fc:	4640      	mov	r0, r8
 80175fe:	f7fb ff2d 	bl	801345c <ucdr_serialize_uint32_t>
 8017602:	4028      	ands	r0, r5
 8017604:	b2c0      	uxtb	r0, r0
 8017606:	e7e5      	b.n	80175d4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8017608:	3108      	adds	r1, #8
 801760a:	44a2      	add	sl, r4
 801760c:	2204      	movs	r2, #4
 801760e:	4640      	mov	r0, r8
 8017610:	4449      	add	r1, r9
 8017612:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8017616:	f004 fda1 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801761a:	4605      	mov	r5, r0
 801761c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8017620:	4640      	mov	r0, r8
 8017622:	f7fb fd31 	bl	8013088 <ucdr_serialize_uint16_t>
 8017626:	4028      	ands	r0, r5
 8017628:	b2c0      	uxtb	r0, r0
 801762a:	e7d3      	b.n	80175d4 <uxr_serialize_ActivityInfoVariant+0xa0>
 801762c:	3108      	adds	r1, #8
 801762e:	44a2      	add	sl, r4
 8017630:	2202      	movs	r2, #2
 8017632:	4640      	mov	r0, r8
 8017634:	4449      	add	r1, r9
 8017636:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801763a:	f004 fd8f 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801763e:	4605      	mov	r5, r0
 8017640:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8017644:	4640      	mov	r0, r8
 8017646:	f7fb fcf3 	bl	8013030 <ucdr_serialize_uint8_t>
 801764a:	4028      	ands	r0, r5
 801764c:	b2c0      	uxtb	r0, r0
 801764e:	e7c1      	b.n	80175d4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8017650:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017654:	4640      	mov	r0, r8
 8017656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801765a:	f7fc ba25 	b.w	8013aa8 <ucdr_serialize_int16_t>
 801765e:	3401      	adds	r4, #1
 8017660:	68f2      	ldr	r2, [r6, #12]
 8017662:	42a2      	cmp	r2, r4
 8017664:	d8bc      	bhi.n	80175e0 <uxr_serialize_ActivityInfoVariant+0xac>
 8017666:	4007      	ands	r7, r0
 8017668:	b2ff      	uxtb	r7, r7
 801766a:	e774      	b.n	8017556 <uxr_serialize_ActivityInfoVariant+0x22>
 801766c:	3401      	adds	r4, #1
 801766e:	68f3      	ldr	r3, [r6, #12]
 8017670:	3518      	adds	r5, #24
 8017672:	429c      	cmp	r4, r3
 8017674:	d397      	bcc.n	80175a6 <uxr_serialize_ActivityInfoVariant+0x72>
 8017676:	e76e      	b.n	8017556 <uxr_serialize_ActivityInfoVariant+0x22>

08017678 <uxr_deserialize_BaseObjectReply>:
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	2202      	movs	r2, #2
 801767e:	4606      	mov	r6, r0
 8017680:	460f      	mov	r7, r1
 8017682:	f004 fdcf 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017686:	2202      	movs	r2, #2
 8017688:	4605      	mov	r5, r0
 801768a:	4630      	mov	r0, r6
 801768c:	18b9      	adds	r1, r7, r2
 801768e:	f004 fdc9 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017692:	4680      	mov	r8, r0
 8017694:	1d39      	adds	r1, r7, #4
 8017696:	4630      	mov	r0, r6
 8017698:	f7fb fce0 	bl	801305c <ucdr_deserialize_uint8_t>
 801769c:	ea05 0508 	and.w	r5, r5, r8
 80176a0:	4604      	mov	r4, r0
 80176a2:	1d79      	adds	r1, r7, #5
 80176a4:	4630      	mov	r0, r6
 80176a6:	402c      	ands	r4, r5
 80176a8:	f7fb fcd8 	bl	801305c <ucdr_deserialize_uint8_t>
 80176ac:	4020      	ands	r0, r4
 80176ae:	b2c0      	uxtb	r0, r0
 80176b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176b4 <uxr_serialize_ReadSpecification>:
 80176b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b6:	460e      	mov	r6, r1
 80176b8:	4607      	mov	r7, r0
 80176ba:	7809      	ldrb	r1, [r1, #0]
 80176bc:	f7fb fcb8 	bl	8013030 <ucdr_serialize_uint8_t>
 80176c0:	4604      	mov	r4, r0
 80176c2:	7871      	ldrb	r1, [r6, #1]
 80176c4:	4638      	mov	r0, r7
 80176c6:	f7fb fcb3 	bl	8013030 <ucdr_serialize_uint8_t>
 80176ca:	4004      	ands	r4, r0
 80176cc:	78b1      	ldrb	r1, [r6, #2]
 80176ce:	4638      	mov	r0, r7
 80176d0:	f7fb fc80 	bl	8012fd4 <ucdr_serialize_bool>
 80176d4:	78b3      	ldrb	r3, [r6, #2]
 80176d6:	b2e4      	uxtb	r4, r4
 80176d8:	4004      	ands	r4, r0
 80176da:	b943      	cbnz	r3, 80176ee <uxr_serialize_ReadSpecification+0x3a>
 80176dc:	7a31      	ldrb	r1, [r6, #8]
 80176de:	4638      	mov	r0, r7
 80176e0:	f7fb fc78 	bl	8012fd4 <ucdr_serialize_bool>
 80176e4:	7a33      	ldrb	r3, [r6, #8]
 80176e6:	4004      	ands	r4, r0
 80176e8:	b93b      	cbnz	r3, 80176fa <uxr_serialize_ReadSpecification+0x46>
 80176ea:	4620      	mov	r0, r4
 80176ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176ee:	6871      	ldr	r1, [r6, #4]
 80176f0:	4638      	mov	r0, r7
 80176f2:	f004 fea9 	bl	801c448 <ucdr_serialize_string>
 80176f6:	4004      	ands	r4, r0
 80176f8:	e7f0      	b.n	80176dc <uxr_serialize_ReadSpecification+0x28>
 80176fa:	8971      	ldrh	r1, [r6, #10]
 80176fc:	4638      	mov	r0, r7
 80176fe:	f7fb fcc3 	bl	8013088 <ucdr_serialize_uint16_t>
 8017702:	4605      	mov	r5, r0
 8017704:	89b1      	ldrh	r1, [r6, #12]
 8017706:	4638      	mov	r0, r7
 8017708:	f7fb fcbe 	bl	8013088 <ucdr_serialize_uint16_t>
 801770c:	4005      	ands	r5, r0
 801770e:	89f1      	ldrh	r1, [r6, #14]
 8017710:	4638      	mov	r0, r7
 8017712:	b2ed      	uxtb	r5, r5
 8017714:	f7fb fcb8 	bl	8013088 <ucdr_serialize_uint16_t>
 8017718:	8a31      	ldrh	r1, [r6, #16]
 801771a:	4025      	ands	r5, r4
 801771c:	4604      	mov	r4, r0
 801771e:	4638      	mov	r0, r7
 8017720:	4025      	ands	r5, r4
 8017722:	f7fb fcb1 	bl	8013088 <ucdr_serialize_uint16_t>
 8017726:	ea00 0405 	and.w	r4, r0, r5
 801772a:	4620      	mov	r0, r4
 801772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801772e:	bf00      	nop

08017730 <uxr_serialize_CREATE_CLIENT_Payload>:
 8017730:	f7ff bb0a 	b.w	8016d48 <uxr_serialize_CLIENT_Representation>

08017734 <uxr_serialize_CREATE_Payload>:
 8017734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017736:	2202      	movs	r2, #2
 8017738:	4607      	mov	r7, r0
 801773a:	460e      	mov	r6, r1
 801773c:	f004 fd0e 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017740:	2202      	movs	r2, #2
 8017742:	4605      	mov	r5, r0
 8017744:	4638      	mov	r0, r7
 8017746:	18b1      	adds	r1, r6, r2
 8017748:	f004 fd08 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801774c:	7931      	ldrb	r1, [r6, #4]
 801774e:	4604      	mov	r4, r0
 8017750:	4638      	mov	r0, r7
 8017752:	f7fb fc6d 	bl	8013030 <ucdr_serialize_uint8_t>
 8017756:	b170      	cbz	r0, 8017776 <uxr_serialize_CREATE_Payload+0x42>
 8017758:	7933      	ldrb	r3, [r6, #4]
 801775a:	402c      	ands	r4, r5
 801775c:	3b01      	subs	r3, #1
 801775e:	b2e4      	uxtb	r4, r4
 8017760:	2b0d      	cmp	r3, #13
 8017762:	d809      	bhi.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 8017764:	e8df f003 	tbb	[pc, r3]
 8017768:	23230a4c 	.word	0x23230a4c
 801776c:	0a0a0a0a 	.word	0x0a0a0a0a
 8017770:	12121208 	.word	0x12121208
 8017774:	3e45      	.short	0x3e45
 8017776:	2400      	movs	r4, #0
 8017778:	4620      	mov	r0, r4
 801777a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801777c:	f106 0108 	add.w	r1, r6, #8
 8017780:	4638      	mov	r0, r7
 8017782:	f7ff fbe7 	bl	8016f54 <uxr_serialize_DATAWRITER_Representation>
 8017786:	4004      	ands	r4, r0
 8017788:	4620      	mov	r0, r4
 801778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801778c:	7a31      	ldrb	r1, [r6, #8]
 801778e:	4638      	mov	r0, r7
 8017790:	f7fb fc4e 	bl	8013030 <ucdr_serialize_uint8_t>
 8017794:	2800      	cmp	r0, #0
 8017796:	d0ee      	beq.n	8017776 <uxr_serialize_CREATE_Payload+0x42>
 8017798:	7a33      	ldrb	r3, [r6, #8]
 801779a:	2b01      	cmp	r3, #1
 801779c:	d001      	beq.n	80177a2 <uxr_serialize_CREATE_Payload+0x6e>
 801779e:	2b02      	cmp	r3, #2
 80177a0:	d1ea      	bne.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 80177a2:	68f1      	ldr	r1, [r6, #12]
 80177a4:	4638      	mov	r0, r7
 80177a6:	f004 fe4f 	bl	801c448 <ucdr_serialize_string>
 80177aa:	4004      	ands	r4, r0
 80177ac:	e7e4      	b.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 80177ae:	7a31      	ldrb	r1, [r6, #8]
 80177b0:	4638      	mov	r0, r7
 80177b2:	f7fb fc3d 	bl	8013030 <ucdr_serialize_uint8_t>
 80177b6:	4605      	mov	r5, r0
 80177b8:	b158      	cbz	r0, 80177d2 <uxr_serialize_CREATE_Payload+0x9e>
 80177ba:	7a33      	ldrb	r3, [r6, #8]
 80177bc:	2b02      	cmp	r3, #2
 80177be:	d034      	beq.n	801782a <uxr_serialize_CREATE_Payload+0xf6>
 80177c0:	2b03      	cmp	r3, #3
 80177c2:	d106      	bne.n	80177d2 <uxr_serialize_CREATE_Payload+0x9e>
 80177c4:	68f2      	ldr	r2, [r6, #12]
 80177c6:	f106 0110 	add.w	r1, r6, #16
 80177ca:	4638      	mov	r0, r7
 80177cc:	f7fc fe1c 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 80177d0:	4605      	mov	r5, r0
 80177d2:	2202      	movs	r2, #2
 80177d4:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80177d8:	4638      	mov	r0, r7
 80177da:	f004 fcbf 	bl	801c15c <ucdr_serialize_array_uint8_t>
 80177de:	4028      	ands	r0, r5
 80177e0:	4004      	ands	r4, r0
 80177e2:	e7c9      	b.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 80177e4:	f106 0108 	add.w	r1, r6, #8
 80177e8:	4638      	mov	r0, r7
 80177ea:	f7ff faad 	bl	8016d48 <uxr_serialize_CLIENT_Representation>
 80177ee:	4004      	ands	r4, r0
 80177f0:	e7c2      	b.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 80177f2:	f106 0108 	add.w	r1, r6, #8
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7ff fb62 	bl	8016ec0 <uxr_serialize_AGENT_Representation>
 80177fc:	4004      	ands	r4, r0
 80177fe:	e7bb      	b.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 8017800:	7a31      	ldrb	r1, [r6, #8]
 8017802:	4638      	mov	r0, r7
 8017804:	f7fb fc14 	bl	8013030 <ucdr_serialize_uint8_t>
 8017808:	4605      	mov	r5, r0
 801780a:	b130      	cbz	r0, 801781a <uxr_serialize_CREATE_Payload+0xe6>
 801780c:	7a33      	ldrb	r3, [r6, #8]
 801780e:	2b02      	cmp	r3, #2
 8017810:	d011      	beq.n	8017836 <uxr_serialize_CREATE_Payload+0x102>
 8017812:	2b03      	cmp	r3, #3
 8017814:	d015      	beq.n	8017842 <uxr_serialize_CREATE_Payload+0x10e>
 8017816:	2b01      	cmp	r3, #1
 8017818:	d00d      	beq.n	8017836 <uxr_serialize_CREATE_Payload+0x102>
 801781a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801781e:	4638      	mov	r0, r7
 8017820:	f7fc f942 	bl	8013aa8 <ucdr_serialize_int16_t>
 8017824:	4028      	ands	r0, r5
 8017826:	4004      	ands	r4, r0
 8017828:	e7a6      	b.n	8017778 <uxr_serialize_CREATE_Payload+0x44>
 801782a:	68f1      	ldr	r1, [r6, #12]
 801782c:	4638      	mov	r0, r7
 801782e:	f004 fe0b 	bl	801c448 <ucdr_serialize_string>
 8017832:	4605      	mov	r5, r0
 8017834:	e7cd      	b.n	80177d2 <uxr_serialize_CREATE_Payload+0x9e>
 8017836:	68f1      	ldr	r1, [r6, #12]
 8017838:	4638      	mov	r0, r7
 801783a:	f004 fe05 	bl	801c448 <ucdr_serialize_string>
 801783e:	4605      	mov	r5, r0
 8017840:	e7eb      	b.n	801781a <uxr_serialize_CREATE_Payload+0xe6>
 8017842:	68f2      	ldr	r2, [r6, #12]
 8017844:	f106 0110 	add.w	r1, r6, #16
 8017848:	4638      	mov	r0, r7
 801784a:	f7fc fddd 	bl	8014408 <ucdr_serialize_sequence_uint8_t>
 801784e:	4605      	mov	r5, r0
 8017850:	e7e3      	b.n	801781a <uxr_serialize_CREATE_Payload+0xe6>
 8017852:	bf00      	nop

08017854 <uxr_deserialize_GET_INFO_Payload>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	2202      	movs	r2, #2
 8017858:	4605      	mov	r5, r0
 801785a:	460e      	mov	r6, r1
 801785c:	f004 fce2 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017860:	2202      	movs	r2, #2
 8017862:	4604      	mov	r4, r0
 8017864:	4628      	mov	r0, r5
 8017866:	18b1      	adds	r1, r6, r2
 8017868:	f004 fcdc 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801786c:	4603      	mov	r3, r0
 801786e:	1d31      	adds	r1, r6, #4
 8017870:	4628      	mov	r0, r5
 8017872:	401c      	ands	r4, r3
 8017874:	f7fb ff22 	bl	80136bc <ucdr_deserialize_uint32_t>
 8017878:	b2e4      	uxtb	r4, r4
 801787a:	4020      	ands	r0, r4
 801787c:	bd70      	pop	{r4, r5, r6, pc}
 801787e:	bf00      	nop

08017880 <uxr_serialize_DELETE_Payload>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	2202      	movs	r2, #2
 8017884:	4605      	mov	r5, r0
 8017886:	460e      	mov	r6, r1
 8017888:	f004 fc68 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801788c:	2202      	movs	r2, #2
 801788e:	4604      	mov	r4, r0
 8017890:	4628      	mov	r0, r5
 8017892:	18b1      	adds	r1, r6, r2
 8017894:	f004 fc62 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017898:	4020      	ands	r0, r4
 801789a:	b2c0      	uxtb	r0, r0
 801789c:	bd70      	pop	{r4, r5, r6, pc}
 801789e:	bf00      	nop

080178a0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80178a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178a4:	460e      	mov	r6, r1
 80178a6:	4605      	mov	r5, r0
 80178a8:	f7fb fbd8 	bl	801305c <ucdr_deserialize_uint8_t>
 80178ac:	4604      	mov	r4, r0
 80178ae:	1c71      	adds	r1, r6, #1
 80178b0:	4628      	mov	r0, r5
 80178b2:	f7fb fbd3 	bl	801305c <ucdr_deserialize_uint8_t>
 80178b6:	2204      	movs	r2, #4
 80178b8:	4681      	mov	r9, r0
 80178ba:	4628      	mov	r0, r5
 80178bc:	18b1      	adds	r1, r6, r2
 80178be:	f004 fcb1 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80178c2:	f106 0108 	add.w	r1, r6, #8
 80178c6:	4680      	mov	r8, r0
 80178c8:	2202      	movs	r2, #2
 80178ca:	4628      	mov	r0, r5
 80178cc:	f004 fcaa 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80178d0:	ea04 0309 	and.w	r3, r4, r9
 80178d4:	4607      	mov	r7, r0
 80178d6:	2202      	movs	r2, #2
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	f106 010a 	add.w	r1, r6, #10
 80178de:	4628      	mov	r0, r5
 80178e0:	ea03 0408 	and.w	r4, r3, r8
 80178e4:	f004 fc9e 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 80178e8:	4603      	mov	r3, r0
 80178ea:	4628      	mov	r0, r5
 80178ec:	403c      	ands	r4, r7
 80178ee:	f106 010c 	add.w	r1, r6, #12
 80178f2:	461d      	mov	r5, r3
 80178f4:	f7fb fb84 	bl	8013000 <ucdr_deserialize_bool>
 80178f8:	4025      	ands	r5, r4
 80178fa:	4028      	ands	r0, r5
 80178fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017900 <uxr_deserialize_STATUS_Payload>:
 8017900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017904:	2202      	movs	r2, #2
 8017906:	4606      	mov	r6, r0
 8017908:	460f      	mov	r7, r1
 801790a:	f004 fc8b 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801790e:	2202      	movs	r2, #2
 8017910:	4605      	mov	r5, r0
 8017912:	4630      	mov	r0, r6
 8017914:	18b9      	adds	r1, r7, r2
 8017916:	f004 fc85 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801791a:	4680      	mov	r8, r0
 801791c:	1d39      	adds	r1, r7, #4
 801791e:	4630      	mov	r0, r6
 8017920:	f7fb fb9c 	bl	801305c <ucdr_deserialize_uint8_t>
 8017924:	ea05 0508 	and.w	r5, r5, r8
 8017928:	4604      	mov	r4, r0
 801792a:	1d79      	adds	r1, r7, #5
 801792c:	4630      	mov	r0, r6
 801792e:	402c      	ands	r4, r5
 8017930:	f7fb fb94 	bl	801305c <ucdr_deserialize_uint8_t>
 8017934:	4020      	ands	r0, r4
 8017936:	b2c0      	uxtb	r0, r0
 8017938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801793c <uxr_serialize_INFO_Payload>:
 801793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017940:	2202      	movs	r2, #2
 8017942:	460c      	mov	r4, r1
 8017944:	4605      	mov	r5, r0
 8017946:	f004 fc09 	bl	801c15c <ucdr_serialize_array_uint8_t>
 801794a:	2202      	movs	r2, #2
 801794c:	4680      	mov	r8, r0
 801794e:	4628      	mov	r0, r5
 8017950:	18a1      	adds	r1, r4, r2
 8017952:	f004 fc03 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017956:	4607      	mov	r7, r0
 8017958:	7921      	ldrb	r1, [r4, #4]
 801795a:	4628      	mov	r0, r5
 801795c:	f7fb fb68 	bl	8013030 <ucdr_serialize_uint8_t>
 8017960:	ea08 0807 	and.w	r8, r8, r7
 8017964:	4606      	mov	r6, r0
 8017966:	7961      	ldrb	r1, [r4, #5]
 8017968:	4628      	mov	r0, r5
 801796a:	ea06 0608 	and.w	r6, r6, r8
 801796e:	f7fb fb5f 	bl	8013030 <ucdr_serialize_uint8_t>
 8017972:	7a21      	ldrb	r1, [r4, #8]
 8017974:	4030      	ands	r0, r6
 8017976:	b2c7      	uxtb	r7, r0
 8017978:	4628      	mov	r0, r5
 801797a:	f7fb fb2b 	bl	8012fd4 <ucdr_serialize_bool>
 801797e:	7a23      	ldrb	r3, [r4, #8]
 8017980:	4606      	mov	r6, r0
 8017982:	b96b      	cbnz	r3, 80179a0 <uxr_serialize_INFO_Payload+0x64>
 8017984:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8017988:	4628      	mov	r0, r5
 801798a:	f7fb fb23 	bl	8012fd4 <ucdr_serialize_bool>
 801798e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8017992:	4030      	ands	r0, r6
 8017994:	b2c6      	uxtb	r6, r0
 8017996:	b983      	cbnz	r3, 80179ba <uxr_serialize_INFO_Payload+0x7e>
 8017998:	ea06 0007 	and.w	r0, r6, r7
 801799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a0:	7b21      	ldrb	r1, [r4, #12]
 80179a2:	4628      	mov	r0, r5
 80179a4:	f7fb fb44 	bl	8013030 <ucdr_serialize_uint8_t>
 80179a8:	b188      	cbz	r0, 80179ce <uxr_serialize_INFO_Payload+0x92>
 80179aa:	f104 010c 	add.w	r1, r4, #12
 80179ae:	4628      	mov	r0, r5
 80179b0:	f7ff faf8 	bl	8016fa4 <uxr_serialize_ObjectVariant.part.0>
 80179b4:	4030      	ands	r0, r6
 80179b6:	b2c6      	uxtb	r6, r0
 80179b8:	e7e4      	b.n	8017984 <uxr_serialize_INFO_Payload+0x48>
 80179ba:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80179be:	4628      	mov	r0, r5
 80179c0:	f7ff fdb8 	bl	8017534 <uxr_serialize_ActivityInfoVariant>
 80179c4:	4006      	ands	r6, r0
 80179c6:	ea06 0007 	and.w	r0, r6, r7
 80179ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179ce:	4606      	mov	r6, r0
 80179d0:	e7d8      	b.n	8017984 <uxr_serialize_INFO_Payload+0x48>
 80179d2:	bf00      	nop

080179d4 <uxr_serialize_READ_DATA_Payload>:
 80179d4:	b570      	push	{r4, r5, r6, lr}
 80179d6:	2202      	movs	r2, #2
 80179d8:	4605      	mov	r5, r0
 80179da:	460e      	mov	r6, r1
 80179dc:	f004 fbbe 	bl	801c15c <ucdr_serialize_array_uint8_t>
 80179e0:	2202      	movs	r2, #2
 80179e2:	4604      	mov	r4, r0
 80179e4:	4628      	mov	r0, r5
 80179e6:	18b1      	adds	r1, r6, r2
 80179e8:	f004 fbb8 	bl	801c15c <ucdr_serialize_array_uint8_t>
 80179ec:	4603      	mov	r3, r0
 80179ee:	1d31      	adds	r1, r6, #4
 80179f0:	4628      	mov	r0, r5
 80179f2:	401c      	ands	r4, r3
 80179f4:	f7ff fe5e 	bl	80176b4 <uxr_serialize_ReadSpecification>
 80179f8:	b2e4      	uxtb	r4, r4
 80179fa:	4020      	ands	r0, r4
 80179fc:	bd70      	pop	{r4, r5, r6, pc}
 80179fe:	bf00      	nop

08017a00 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8017a00:	b570      	push	{r4, r5, r6, lr}
 8017a02:	2202      	movs	r2, #2
 8017a04:	4605      	mov	r5, r0
 8017a06:	460e      	mov	r6, r1
 8017a08:	f004 fba8 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017a0c:	2202      	movs	r2, #2
 8017a0e:	4604      	mov	r4, r0
 8017a10:	4628      	mov	r0, r5
 8017a12:	18b1      	adds	r1, r6, r2
 8017a14:	f004 fba2 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017a18:	4020      	ands	r0, r4
 8017a1a:	b2c0      	uxtb	r0, r0
 8017a1c:	bd70      	pop	{r4, r5, r6, pc}
 8017a1e:	bf00      	nop

08017a20 <uxr_serialize_ACKNACK_Payload>:
 8017a20:	b570      	push	{r4, r5, r6, lr}
 8017a22:	460c      	mov	r4, r1
 8017a24:	4605      	mov	r5, r0
 8017a26:	460e      	mov	r6, r1
 8017a28:	f834 1b02 	ldrh.w	r1, [r4], #2
 8017a2c:	f7fb fb2c 	bl	8013088 <ucdr_serialize_uint16_t>
 8017a30:	2202      	movs	r2, #2
 8017a32:	4621      	mov	r1, r4
 8017a34:	4604      	mov	r4, r0
 8017a36:	4628      	mov	r0, r5
 8017a38:	f004 fb90 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	7931      	ldrb	r1, [r6, #4]
 8017a40:	4628      	mov	r0, r5
 8017a42:	401c      	ands	r4, r3
 8017a44:	f7fb faf4 	bl	8013030 <ucdr_serialize_uint8_t>
 8017a48:	b2e4      	uxtb	r4, r4
 8017a4a:	4020      	ands	r0, r4
 8017a4c:	bd70      	pop	{r4, r5, r6, pc}
 8017a4e:	bf00      	nop

08017a50 <uxr_deserialize_ACKNACK_Payload>:
 8017a50:	b570      	push	{r4, r5, r6, lr}
 8017a52:	460e      	mov	r6, r1
 8017a54:	4605      	mov	r5, r0
 8017a56:	f7fb fc17 	bl	8013288 <ucdr_deserialize_uint16_t>
 8017a5a:	2202      	movs	r2, #2
 8017a5c:	4604      	mov	r4, r0
 8017a5e:	4628      	mov	r0, r5
 8017a60:	18b1      	adds	r1, r6, r2
 8017a62:	f004 fbdf 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017a66:	4603      	mov	r3, r0
 8017a68:	1d31      	adds	r1, r6, #4
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	401c      	ands	r4, r3
 8017a6e:	f7fb faf5 	bl	801305c <ucdr_deserialize_uint8_t>
 8017a72:	b2e4      	uxtb	r4, r4
 8017a74:	4020      	ands	r0, r4
 8017a76:	bd70      	pop	{r4, r5, r6, pc}

08017a78 <uxr_serialize_HEARTBEAT_Payload>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	8809      	ldrh	r1, [r1, #0]
 8017a80:	f7fb fb02 	bl	8013088 <ucdr_serialize_uint16_t>
 8017a84:	8869      	ldrh	r1, [r5, #2]
 8017a86:	4604      	mov	r4, r0
 8017a88:	4630      	mov	r0, r6
 8017a8a:	f7fb fafd 	bl	8013088 <ucdr_serialize_uint16_t>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	7929      	ldrb	r1, [r5, #4]
 8017a92:	4630      	mov	r0, r6
 8017a94:	401c      	ands	r4, r3
 8017a96:	f7fb facb 	bl	8013030 <ucdr_serialize_uint8_t>
 8017a9a:	b2e4      	uxtb	r4, r4
 8017a9c:	4020      	ands	r0, r4
 8017a9e:	bd70      	pop	{r4, r5, r6, pc}

08017aa0 <uxr_deserialize_HEARTBEAT_Payload>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	460e      	mov	r6, r1
 8017aa4:	4605      	mov	r5, r0
 8017aa6:	f7fb fbef 	bl	8013288 <ucdr_deserialize_uint16_t>
 8017aaa:	4604      	mov	r4, r0
 8017aac:	1cb1      	adds	r1, r6, #2
 8017aae:	4628      	mov	r0, r5
 8017ab0:	f7fb fbea 	bl	8013288 <ucdr_deserialize_uint16_t>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	1d31      	adds	r1, r6, #4
 8017ab8:	4628      	mov	r0, r5
 8017aba:	401c      	ands	r4, r3
 8017abc:	f7fb face 	bl	801305c <ucdr_deserialize_uint8_t>
 8017ac0:	b2e4      	uxtb	r4, r4
 8017ac2:	4020      	ands	r0, r4
 8017ac4:	bd70      	pop	{r4, r5, r6, pc}
 8017ac6:	bf00      	nop

08017ac8 <uxr_serialize_TIMESTAMP_Payload>:
 8017ac8:	b570      	push	{r4, r5, r6, lr}
 8017aca:	460d      	mov	r5, r1
 8017acc:	4606      	mov	r6, r0
 8017ace:	6809      	ldr	r1, [r1, #0]
 8017ad0:	f7fc f8de 	bl	8013c90 <ucdr_serialize_int32_t>
 8017ad4:	4604      	mov	r4, r0
 8017ad6:	6869      	ldr	r1, [r5, #4]
 8017ad8:	4630      	mov	r0, r6
 8017ada:	f7fb fcbf 	bl	801345c <ucdr_serialize_uint32_t>
 8017ade:	4020      	ands	r0, r4
 8017ae0:	b2c0      	uxtb	r0, r0
 8017ae2:	bd70      	pop	{r4, r5, r6, pc}

08017ae4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8017ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae8:	460e      	mov	r6, r1
 8017aea:	4605      	mov	r5, r0
 8017aec:	f7fc f968 	bl	8013dc0 <ucdr_deserialize_int32_t>
 8017af0:	4607      	mov	r7, r0
 8017af2:	1d31      	adds	r1, r6, #4
 8017af4:	4628      	mov	r0, r5
 8017af6:	f7fb fde1 	bl	80136bc <ucdr_deserialize_uint32_t>
 8017afa:	4680      	mov	r8, r0
 8017afc:	f106 0108 	add.w	r1, r6, #8
 8017b00:	4628      	mov	r0, r5
 8017b02:	f7fc f95d 	bl	8013dc0 <ucdr_deserialize_int32_t>
 8017b06:	ea07 0708 	and.w	r7, r7, r8
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	f106 010c 	add.w	r1, r6, #12
 8017b10:	4628      	mov	r0, r5
 8017b12:	403c      	ands	r4, r7
 8017b14:	f7fb fdd2 	bl	80136bc <ucdr_deserialize_uint32_t>
 8017b18:	f106 0110 	add.w	r1, r6, #16
 8017b1c:	4004      	ands	r4, r0
 8017b1e:	4628      	mov	r0, r5
 8017b20:	f7fc f94e 	bl	8013dc0 <ucdr_deserialize_int32_t>
 8017b24:	4603      	mov	r3, r0
 8017b26:	b2e4      	uxtb	r4, r4
 8017b28:	4628      	mov	r0, r5
 8017b2a:	461d      	mov	r5, r3
 8017b2c:	f106 0114 	add.w	r1, r6, #20
 8017b30:	f7fb fdc4 	bl	80136bc <ucdr_deserialize_uint32_t>
 8017b34:	402c      	ands	r4, r5
 8017b36:	4020      	ands	r0, r4
 8017b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b3c <uxr_serialize_SampleIdentity>:
 8017b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b40:	4604      	mov	r4, r0
 8017b42:	460d      	mov	r5, r1
 8017b44:	220c      	movs	r2, #12
 8017b46:	f004 fb09 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017b4a:	2203      	movs	r2, #3
 8017b4c:	f105 010c 	add.w	r1, r5, #12
 8017b50:	4607      	mov	r7, r0
 8017b52:	4620      	mov	r0, r4
 8017b54:	f004 fb02 	bl	801c15c <ucdr_serialize_array_uint8_t>
 8017b58:	7be9      	ldrb	r1, [r5, #15]
 8017b5a:	4680      	mov	r8, r0
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f7fb fa67 	bl	8013030 <ucdr_serialize_uint8_t>
 8017b62:	6929      	ldr	r1, [r5, #16]
 8017b64:	4606      	mov	r6, r0
 8017b66:	4620      	mov	r0, r4
 8017b68:	f7fc f892 	bl	8013c90 <ucdr_serialize_int32_t>
 8017b6c:	ea07 0708 	and.w	r7, r7, r8
 8017b70:	4603      	mov	r3, r0
 8017b72:	4620      	mov	r0, r4
 8017b74:	403e      	ands	r6, r7
 8017b76:	6969      	ldr	r1, [r5, #20]
 8017b78:	461c      	mov	r4, r3
 8017b7a:	f7fb fc6f 	bl	801345c <ucdr_serialize_uint32_t>
 8017b7e:	4034      	ands	r4, r6
 8017b80:	4020      	ands	r0, r4
 8017b82:	b2c0      	uxtb	r0, r0
 8017b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b88 <uxr_deserialize_SampleIdentity>:
 8017b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	460d      	mov	r5, r1
 8017b90:	220c      	movs	r2, #12
 8017b92:	f004 fb47 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017b96:	2203      	movs	r2, #3
 8017b98:	f105 010c 	add.w	r1, r5, #12
 8017b9c:	4607      	mov	r7, r0
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f004 fb40 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 8017ba4:	f105 010f 	add.w	r1, r5, #15
 8017ba8:	4680      	mov	r8, r0
 8017baa:	4620      	mov	r0, r4
 8017bac:	f7fb fa56 	bl	801305c <ucdr_deserialize_uint8_t>
 8017bb0:	f105 0110 	add.w	r1, r5, #16
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f7fc f902 	bl	8013dc0 <ucdr_deserialize_int32_t>
 8017bbc:	ea07 0708 	and.w	r7, r7, r8
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	403e      	ands	r6, r7
 8017bc6:	f105 0114 	add.w	r1, r5, #20
 8017bca:	461c      	mov	r4, r3
 8017bcc:	f7fb fd76 	bl	80136bc <ucdr_deserialize_uint32_t>
 8017bd0:	4034      	ands	r4, r6
 8017bd2:	4020      	ands	r0, r4
 8017bd4:	b2c0      	uxtb	r0, r0
 8017bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bda:	bf00      	nop

08017bdc <rcl_client_get_rmw_handle>:
 8017bdc:	b118      	cbz	r0, 8017be6 <rcl_client_get_rmw_handle+0xa>
 8017bde:	6800      	ldr	r0, [r0, #0]
 8017be0:	b108      	cbz	r0, 8017be6 <rcl_client_get_rmw_handle+0xa>
 8017be2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017be6:	4770      	bx	lr

08017be8 <rcl_send_request>:
 8017be8:	b570      	push	{r4, r5, r6, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	b1f8      	cbz	r0, 8017c2e <rcl_send_request+0x46>
 8017bee:	4604      	mov	r4, r0
 8017bf0:	6800      	ldr	r0, [r0, #0]
 8017bf2:	b1e0      	cbz	r0, 8017c2e <rcl_send_request+0x46>
 8017bf4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8017bf8:	b1cb      	cbz	r3, 8017c2e <rcl_send_request+0x46>
 8017bfa:	460e      	mov	r6, r1
 8017bfc:	b1e1      	cbz	r1, 8017c38 <rcl_send_request+0x50>
 8017bfe:	4615      	mov	r5, r2
 8017c00:	b1d2      	cbz	r2, 8017c38 <rcl_send_request+0x50>
 8017c02:	2105      	movs	r1, #5
 8017c04:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8017c08:	f002 fe1a 	bl	801a840 <__atomic_load_8>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	460b      	mov	r3, r1
 8017c10:	4631      	mov	r1, r6
 8017c12:	e9c5 2300 	strd	r2, r3, [r5]
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	462a      	mov	r2, r5
 8017c1a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017c1e:	f003 fd3d 	bl	801b69c <rmw_send_request>
 8017c22:	4606      	mov	r6, r0
 8017c24:	b160      	cbz	r0, 8017c40 <rcl_send_request+0x58>
 8017c26:	2601      	movs	r6, #1
 8017c28:	4630      	mov	r0, r6
 8017c2a:	b002      	add	sp, #8
 8017c2c:	bd70      	pop	{r4, r5, r6, pc}
 8017c2e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8017c32:	4630      	mov	r0, r6
 8017c34:	b002      	add	sp, #8
 8017c36:	bd70      	pop	{r4, r5, r6, pc}
 8017c38:	260b      	movs	r6, #11
 8017c3a:	4630      	mov	r0, r6
 8017c3c:	b002      	add	sp, #8
 8017c3e:	bd70      	pop	{r4, r5, r6, pc}
 8017c40:	6820      	ldr	r0, [r4, #0]
 8017c42:	2105      	movs	r1, #5
 8017c44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017c48:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8017c4c:	9100      	str	r1, [sp, #0]
 8017c4e:	f002 fe63 	bl	801a918 <__atomic_exchange_8>
 8017c52:	4630      	mov	r0, r6
 8017c54:	b002      	add	sp, #8
 8017c56:	bd70      	pop	{r4, r5, r6, pc}

08017c58 <rcl_take_response>:
 8017c58:	b570      	push	{r4, r5, r6, lr}
 8017c5a:	468e      	mov	lr, r1
 8017c5c:	b08c      	sub	sp, #48	@ 0x30
 8017c5e:	460c      	mov	r4, r1
 8017c60:	4616      	mov	r6, r2
 8017c62:	f10d 0c18 	add.w	ip, sp, #24
 8017c66:	4605      	mov	r5, r0
 8017c68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c70:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017c74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017c78:	b35d      	cbz	r5, 8017cd2 <rcl_take_response+0x7a>
 8017c7a:	682b      	ldr	r3, [r5, #0]
 8017c7c:	b34b      	cbz	r3, 8017cd2 <rcl_take_response+0x7a>
 8017c7e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017c82:	b330      	cbz	r0, 8017cd2 <rcl_take_response+0x7a>
 8017c84:	b346      	cbz	r6, 8017cd8 <rcl_take_response+0x80>
 8017c86:	2300      	movs	r3, #0
 8017c88:	4632      	mov	r2, r6
 8017c8a:	a902      	add	r1, sp, #8
 8017c8c:	f88d 3007 	strb.w	r3, [sp, #7]
 8017c90:	f10d 0307 	add.w	r3, sp, #7
 8017c94:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017ce0 <rcl_take_response+0x88>
 8017c98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017ca0:	f003 fe04 	bl	801b8ac <rmw_take_response>
 8017ca4:	4605      	mov	r5, r0
 8017ca6:	b9c8      	cbnz	r0, 8017cdc <rcl_take_response+0x84>
 8017ca8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017cac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8017cb0:	2a00      	cmp	r2, #0
 8017cb2:	bf08      	it	eq
 8017cb4:	461d      	moveq	r5, r3
 8017cb6:	f10d 0e18 	add.w	lr, sp, #24
 8017cba:	46a4      	mov	ip, r4
 8017cbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017cc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017cc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017cc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017ccc:	4628      	mov	r0, r5
 8017cce:	b00c      	add	sp, #48	@ 0x30
 8017cd0:	bd70      	pop	{r4, r5, r6, pc}
 8017cd2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8017cd6:	e7ee      	b.n	8017cb6 <rcl_take_response+0x5e>
 8017cd8:	250b      	movs	r5, #11
 8017cda:	e7ec      	b.n	8017cb6 <rcl_take_response+0x5e>
 8017cdc:	2501      	movs	r5, #1
 8017cde:	e7ea      	b.n	8017cb6 <rcl_take_response+0x5e>
	...

08017ce8 <rcl_client_is_valid>:
 8017ce8:	b130      	cbz	r0, 8017cf8 <rcl_client_is_valid+0x10>
 8017cea:	6800      	ldr	r0, [r0, #0]
 8017cec:	b120      	cbz	r0, 8017cf8 <rcl_client_is_valid+0x10>
 8017cee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017cf2:	3800      	subs	r0, #0
 8017cf4:	bf18      	it	ne
 8017cf6:	2001      	movne	r0, #1
 8017cf8:	4770      	bx	lr
 8017cfa:	bf00      	nop

08017cfc <rcl_convert_rmw_ret_to_rcl_ret>:
 8017cfc:	280b      	cmp	r0, #11
 8017cfe:	dc0d      	bgt.n	8017d1c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8017d00:	2800      	cmp	r0, #0
 8017d02:	db09      	blt.n	8017d18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8017d04:	280b      	cmp	r0, #11
 8017d06:	d807      	bhi.n	8017d18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8017d08:	e8df f000 	tbb	[pc, r0]
 8017d0c:	07060607 	.word	0x07060607
 8017d10:	06060606 	.word	0x06060606
 8017d14:	07070606 	.word	0x07070606
 8017d18:	2001      	movs	r0, #1
 8017d1a:	4770      	bx	lr
 8017d1c:	28cb      	cmp	r0, #203	@ 0xcb
 8017d1e:	bf18      	it	ne
 8017d20:	2001      	movne	r0, #1
 8017d22:	4770      	bx	lr

08017d24 <rcl_get_zero_initialized_context>:
 8017d24:	4a03      	ldr	r2, [pc, #12]	@ (8017d34 <rcl_get_zero_initialized_context+0x10>)
 8017d26:	4603      	mov	r3, r0
 8017d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d30:	4618      	mov	r0, r3
 8017d32:	4770      	bx	lr
 8017d34:	0801f6b8 	.word	0x0801f6b8

08017d38 <rcl_context_is_valid>:
 8017d38:	b118      	cbz	r0, 8017d42 <rcl_context_is_valid+0xa>
 8017d3a:	6840      	ldr	r0, [r0, #4]
 8017d3c:	3800      	subs	r0, #0
 8017d3e:	bf18      	it	ne
 8017d40:	2001      	movne	r0, #1
 8017d42:	4770      	bx	lr

08017d44 <__cleanup_context>:
 8017d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d48:	4606      	mov	r6, r0
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	6800      	ldr	r0, [r0, #0]
 8017d4e:	6073      	str	r3, [r6, #4]
 8017d50:	2800      	cmp	r0, #0
 8017d52:	d049      	beq.n	8017de8 <__cleanup_context+0xa4>
 8017d54:	6947      	ldr	r7, [r0, #20]
 8017d56:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017d5a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8017d5e:	b137      	cbz	r7, 8017d6e <__cleanup_context+0x2a>
 8017d60:	3014      	adds	r0, #20
 8017d62:	f7f8 fbbb 	bl	80104dc <rcl_init_options_fini>
 8017d66:	4607      	mov	r7, r0
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d144      	bne.n	8017df6 <__cleanup_context+0xb2>
 8017d6c:	6830      	ldr	r0, [r6, #0]
 8017d6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d70:	b143      	cbz	r3, 8017d84 <__cleanup_context+0x40>
 8017d72:	3028      	adds	r0, #40	@ 0x28
 8017d74:	f7f9 ffa2 	bl	8011cbc <rmw_context_fini>
 8017d78:	b118      	cbz	r0, 8017d82 <__cleanup_context+0x3e>
 8017d7a:	2f00      	cmp	r7, #0
 8017d7c:	d03e      	beq.n	8017dfc <__cleanup_context+0xb8>
 8017d7e:	f7f9 fcd3 	bl	8011728 <rcutils_reset_error>
 8017d82:	6830      	ldr	r0, [r6, #0]
 8017d84:	6a03      	ldr	r3, [r0, #32]
 8017d86:	b1db      	cbz	r3, 8017dc0 <__cleanup_context+0x7c>
 8017d88:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8017d8c:	2a01      	cmp	r2, #1
 8017d8e:	f17c 0100 	sbcs.w	r1, ip, #0
 8017d92:	db11      	blt.n	8017db8 <__cleanup_context+0x74>
 8017d94:	2400      	movs	r4, #0
 8017d96:	4625      	mov	r5, r4
 8017d98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d9c:	4649      	mov	r1, r9
 8017d9e:	b1b8      	cbz	r0, 8017dd0 <__cleanup_context+0x8c>
 8017da0:	47c0      	blx	r8
 8017da2:	6833      	ldr	r3, [r6, #0]
 8017da4:	3401      	adds	r4, #1
 8017da6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8017daa:	f145 0500 	adc.w	r5, r5, #0
 8017dae:	6a1b      	ldr	r3, [r3, #32]
 8017db0:	4294      	cmp	r4, r2
 8017db2:	eb75 010c 	sbcs.w	r1, r5, ip
 8017db6:	dbef      	blt.n	8017d98 <__cleanup_context+0x54>
 8017db8:	4618      	mov	r0, r3
 8017dba:	4649      	mov	r1, r9
 8017dbc:	47c0      	blx	r8
 8017dbe:	6830      	ldr	r0, [r6, #0]
 8017dc0:	4649      	mov	r1, r9
 8017dc2:	47c0      	blx	r8
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	4638      	mov	r0, r7
 8017dc8:	e9c6 3300 	strd	r3, r3, [r6]
 8017dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dd0:	3401      	adds	r4, #1
 8017dd2:	f145 0500 	adc.w	r5, r5, #0
 8017dd6:	4294      	cmp	r4, r2
 8017dd8:	eb75 010c 	sbcs.w	r1, r5, ip
 8017ddc:	dbdc      	blt.n	8017d98 <__cleanup_context+0x54>
 8017dde:	4618      	mov	r0, r3
 8017de0:	4649      	mov	r1, r9
 8017de2:	47c0      	blx	r8
 8017de4:	6830      	ldr	r0, [r6, #0]
 8017de6:	e7eb      	b.n	8017dc0 <__cleanup_context+0x7c>
 8017de8:	4607      	mov	r7, r0
 8017dea:	2300      	movs	r3, #0
 8017dec:	4638      	mov	r0, r7
 8017dee:	e9c6 3300 	strd	r3, r3, [r6]
 8017df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017df6:	f7f9 fc97 	bl	8011728 <rcutils_reset_error>
 8017dfa:	e7b7      	b.n	8017d6c <__cleanup_context+0x28>
 8017dfc:	f7ff ff7e 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 8017e00:	4607      	mov	r7, r0
 8017e02:	e7bc      	b.n	8017d7e <__cleanup_context+0x3a>

08017e04 <rcl_init>:
 8017e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e08:	1e05      	subs	r5, r0, #0
 8017e0a:	b09e      	sub	sp, #120	@ 0x78
 8017e0c:	460e      	mov	r6, r1
 8017e0e:	4690      	mov	r8, r2
 8017e10:	461f      	mov	r7, r3
 8017e12:	f340 809f 	ble.w	8017f54 <rcl_init+0x150>
 8017e16:	2900      	cmp	r1, #0
 8017e18:	f000 809f 	beq.w	8017f5a <rcl_init+0x156>
 8017e1c:	f1a1 0e04 	sub.w	lr, r1, #4
 8017e20:	f04f 0c00 	mov.w	ip, #0
 8017e24:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8017e28:	f10c 0c01 	add.w	ip, ip, #1
 8017e2c:	2c00      	cmp	r4, #0
 8017e2e:	f000 8094 	beq.w	8017f5a <rcl_init+0x156>
 8017e32:	4565      	cmp	r5, ip
 8017e34:	d1f6      	bne.n	8017e24 <rcl_init+0x20>
 8017e36:	f1b8 0f00 	cmp.w	r8, #0
 8017e3a:	f000 808e 	beq.w	8017f5a <rcl_init+0x156>
 8017e3e:	f8d8 4000 	ldr.w	r4, [r8]
 8017e42:	2c00      	cmp	r4, #0
 8017e44:	f000 8089 	beq.w	8017f5a <rcl_init+0x156>
 8017e48:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8017e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e52:	6823      	ldr	r3, [r4, #0]
 8017e54:	a819      	add	r0, sp, #100	@ 0x64
 8017e56:	f8cc 3000 	str.w	r3, [ip]
 8017e5a:	f7f9 fc41 	bl	80116e0 <rcutils_allocator_is_valid>
 8017e5e:	f080 0001 	eor.w	r0, r0, #1
 8017e62:	b2c0      	uxtb	r0, r0
 8017e64:	2800      	cmp	r0, #0
 8017e66:	d178      	bne.n	8017f5a <rcl_init+0x156>
 8017e68:	2f00      	cmp	r7, #0
 8017e6a:	d076      	beq.n	8017f5a <rcl_init+0x156>
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d178      	bne.n	8017f64 <rcl_init+0x160>
 8017e72:	2178      	movs	r1, #120	@ 0x78
 8017e74:	2001      	movs	r0, #1
 8017e76:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017e7a:	4798      	blx	r3
 8017e7c:	4604      	mov	r4, r0
 8017e7e:	6038      	str	r0, [r7, #0]
 8017e80:	2800      	cmp	r0, #0
 8017e82:	f000 80b6 	beq.w	8017ff2 <rcl_init+0x1ee>
 8017e86:	a802      	add	r0, sp, #8
 8017e88:	f003 f84e 	bl	801af28 <rmw_get_zero_initialized_context>
 8017e8c:	a902      	add	r1, sp, #8
 8017e8e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8017e92:	2250      	movs	r2, #80	@ 0x50
 8017e94:	f006 fa11 	bl	801e2ba <memcpy>
 8017e98:	ac19      	add	r4, sp, #100	@ 0x64
 8017e9a:	f8d7 e000 	ldr.w	lr, [r7]
 8017e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ea0:	46f4      	mov	ip, lr
 8017ea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ea6:	6823      	ldr	r3, [r4, #0]
 8017ea8:	f10e 0114 	add.w	r1, lr, #20
 8017eac:	4640      	mov	r0, r8
 8017eae:	f8cc 3000 	str.w	r3, [ip]
 8017eb2:	f7f8 fb3d 	bl	8010530 <rcl_init_options_copy>
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d144      	bne.n	8017f46 <rcl_init+0x142>
 8017ebc:	f8d7 9000 	ldr.w	r9, [r7]
 8017ec0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8017ec4:	f8c9 0020 	str.w	r0, [r9, #32]
 8017ec8:	f8c9 5018 	str.w	r5, [r9, #24]
 8017ecc:	f8c9 801c 	str.w	r8, [r9, #28]
 8017ed0:	2d00      	cmp	r5, #0
 8017ed2:	d04e      	beq.n	8017f72 <rcl_init+0x16e>
 8017ed4:	2e00      	cmp	r6, #0
 8017ed6:	d04c      	beq.n	8017f72 <rcl_init+0x16e>
 8017ed8:	2104      	movs	r1, #4
 8017eda:	4628      	mov	r0, r5
 8017edc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017ee0:	4798      	blx	r3
 8017ee2:	f8c9 0020 	str.w	r0, [r9, #32]
 8017ee6:	f8d7 9000 	ldr.w	r9, [r7]
 8017eea:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8017eee:	46ca      	mov	sl, r9
 8017ef0:	b343      	cbz	r3, 8017f44 <rcl_init+0x140>
 8017ef2:	2d01      	cmp	r5, #1
 8017ef4:	f178 0300 	sbcs.w	r3, r8, #0
 8017ef8:	db3b      	blt.n	8017f72 <rcl_init+0x16e>
 8017efa:	2400      	movs	r4, #0
 8017efc:	3e04      	subs	r6, #4
 8017efe:	46a1      	mov	r9, r4
 8017f00:	e00b      	b.n	8017f1a <rcl_init+0x116>
 8017f02:	6831      	ldr	r1, [r6, #0]
 8017f04:	f006 f9d9 	bl	801e2ba <memcpy>
 8017f08:	3401      	adds	r4, #1
 8017f0a:	f149 0900 	adc.w	r9, r9, #0
 8017f0e:	45c8      	cmp	r8, r9
 8017f10:	bf08      	it	eq
 8017f12:	42a5      	cmpeq	r5, r4
 8017f14:	d02b      	beq.n	8017f6e <rcl_init+0x16a>
 8017f16:	f8d7 a000 	ldr.w	sl, [r7]
 8017f1a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8017f1e:	f7e8 f9e9 	bl	80002f4 <strlen>
 8017f22:	1c42      	adds	r2, r0, #1
 8017f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017f26:	4610      	mov	r0, r2
 8017f28:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8017f2a:	f8da a020 	ldr.w	sl, [sl, #32]
 8017f2e:	9201      	str	r2, [sp, #4]
 8017f30:	4798      	blx	r3
 8017f32:	683b      	ldr	r3, [r7, #0]
 8017f34:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8017f38:	6a1b      	ldr	r3, [r3, #32]
 8017f3a:	9a01      	ldr	r2, [sp, #4]
 8017f3c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d1de      	bne.n	8017f02 <rcl_init+0xfe>
 8017f44:	240a      	movs	r4, #10
 8017f46:	4638      	mov	r0, r7
 8017f48:	f7ff fefc 	bl	8017d44 <__cleanup_context>
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	b01e      	add	sp, #120	@ 0x78
 8017f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f54:	2900      	cmp	r1, #0
 8017f56:	f43f af6e 	beq.w	8017e36 <rcl_init+0x32>
 8017f5a:	240b      	movs	r4, #11
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	b01e      	add	sp, #120	@ 0x78
 8017f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f64:	2464      	movs	r4, #100	@ 0x64
 8017f66:	4620      	mov	r0, r4
 8017f68:	b01e      	add	sp, #120	@ 0x78
 8017f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f6e:	f8d7 9000 	ldr.w	r9, [r7]
 8017f72:	4926      	ldr	r1, [pc, #152]	@ (801800c <rcl_init+0x208>)
 8017f74:	680b      	ldr	r3, [r1, #0]
 8017f76:	3301      	adds	r3, #1
 8017f78:	d036      	beq.n	8017fe8 <rcl_init+0x1e4>
 8017f7a:	461a      	mov	r2, r3
 8017f7c:	2400      	movs	r4, #0
 8017f7e:	600b      	str	r3, [r1, #0]
 8017f80:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8017f84:	607b      	str	r3, [r7, #4]
 8017f86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017f88:	3301      	adds	r3, #1
 8017f8a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8017f8e:	d034      	beq.n	8017ffa <rcl_init+0x1f6>
 8017f90:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8017f94:	b93b      	cbnz	r3, 8017fa6 <rcl_init+0x1a2>
 8017f96:	3030      	adds	r0, #48	@ 0x30
 8017f98:	f000 f83a 	bl	8018010 <rcl_get_localhost_only>
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	d1d1      	bne.n	8017f46 <rcl_init+0x142>
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	6958      	ldr	r0, [r3, #20]
 8017fa6:	aa18      	add	r2, sp, #96	@ 0x60
 8017fa8:	a917      	add	r1, sp, #92	@ 0x5c
 8017faa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017fac:	f001 f8d2 	bl	8019154 <rcl_validate_enclave_name>
 8017fb0:	4604      	mov	r4, r0
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	d1c7      	bne.n	8017f46 <rcl_init+0x142>
 8017fb6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017fb8:	b9eb      	cbnz	r3, 8017ff6 <rcl_init+0x1f2>
 8017fba:	6839      	ldr	r1, [r7, #0]
 8017fbc:	694b      	ldr	r3, [r1, #20]
 8017fbe:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8017fc2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8017fc4:	f000 fb72 	bl	80186ac <rcl_get_security_options_from_environment>
 8017fc8:	4604      	mov	r4, r0
 8017fca:	2800      	cmp	r0, #0
 8017fcc:	d1bb      	bne.n	8017f46 <rcl_init+0x142>
 8017fce:	6839      	ldr	r1, [r7, #0]
 8017fd0:	6948      	ldr	r0, [r1, #20]
 8017fd2:	3128      	adds	r1, #40	@ 0x28
 8017fd4:	3018      	adds	r0, #24
 8017fd6:	f7f9 fd3b 	bl	8011a50 <rmw_init>
 8017fda:	4604      	mov	r4, r0
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	d0bd      	beq.n	8017f5c <rcl_init+0x158>
 8017fe0:	f7ff fe8c 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	e7ae      	b.n	8017f46 <rcl_init+0x142>
 8017fe8:	2201      	movs	r2, #1
 8017fea:	461c      	mov	r4, r3
 8017fec:	600a      	str	r2, [r1, #0]
 8017fee:	4613      	mov	r3, r2
 8017ff0:	e7c6      	b.n	8017f80 <rcl_init+0x17c>
 8017ff2:	240a      	movs	r4, #10
 8017ff4:	e7b2      	b.n	8017f5c <rcl_init+0x158>
 8017ff6:	2401      	movs	r4, #1
 8017ff8:	e7a5      	b.n	8017f46 <rcl_init+0x142>
 8017ffa:	3024      	adds	r0, #36	@ 0x24
 8017ffc:	f004 ffa8 	bl	801cf50 <rcl_get_default_domain_id>
 8018000:	4604      	mov	r4, r0
 8018002:	2800      	cmp	r0, #0
 8018004:	d19f      	bne.n	8017f46 <rcl_init+0x142>
 8018006:	683b      	ldr	r3, [r7, #0]
 8018008:	6958      	ldr	r0, [r3, #20]
 801800a:	e7c1      	b.n	8017f90 <rcl_init+0x18c>
 801800c:	24012fa0 	.word	0x24012fa0

08018010 <rcl_get_localhost_only>:
 8018010:	b510      	push	{r4, lr}
 8018012:	2300      	movs	r3, #0
 8018014:	b082      	sub	sp, #8
 8018016:	9301      	str	r3, [sp, #4]
 8018018:	b1b8      	cbz	r0, 801804a <rcl_get_localhost_only+0x3a>
 801801a:	4604      	mov	r4, r0
 801801c:	a901      	add	r1, sp, #4
 801801e:	480c      	ldr	r0, [pc, #48]	@ (8018050 <rcl_get_localhost_only+0x40>)
 8018020:	f002 fcb2 	bl	801a988 <rcutils_get_env>
 8018024:	b110      	cbz	r0, 801802c <rcl_get_localhost_only+0x1c>
 8018026:	2001      	movs	r0, #1
 8018028:	b002      	add	sp, #8
 801802a:	bd10      	pop	{r4, pc}
 801802c:	9b01      	ldr	r3, [sp, #4]
 801802e:	b113      	cbz	r3, 8018036 <rcl_get_localhost_only+0x26>
 8018030:	781a      	ldrb	r2, [r3, #0]
 8018032:	2a31      	cmp	r2, #49	@ 0x31
 8018034:	d004      	beq.n	8018040 <rcl_get_localhost_only+0x30>
 8018036:	2302      	movs	r3, #2
 8018038:	2000      	movs	r0, #0
 801803a:	7023      	strb	r3, [r4, #0]
 801803c:	b002      	add	sp, #8
 801803e:	bd10      	pop	{r4, pc}
 8018040:	785b      	ldrb	r3, [r3, #1]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d1f7      	bne.n	8018036 <rcl_get_localhost_only+0x26>
 8018046:	2301      	movs	r3, #1
 8018048:	e7f6      	b.n	8018038 <rcl_get_localhost_only+0x28>
 801804a:	200b      	movs	r0, #11
 801804c:	b002      	add	sp, #8
 801804e:	bd10      	pop	{r4, pc}
 8018050:	0801f6c0 	.word	0x0801f6c0

08018054 <rcl_get_zero_initialized_node>:
 8018054:	4a03      	ldr	r2, [pc, #12]	@ (8018064 <rcl_get_zero_initialized_node+0x10>)
 8018056:	4603      	mov	r3, r0
 8018058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801805c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018060:	4618      	mov	r0, r3
 8018062:	4770      	bx	lr
 8018064:	0801f6dc 	.word	0x0801f6dc

08018068 <rcl_node_init>:
 8018068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806c:	b0a9      	sub	sp, #164	@ 0xa4
 801806e:	4604      	mov	r4, r0
 8018070:	460e      	mov	r6, r1
 8018072:	4615      	mov	r5, r2
 8018074:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8018078:	a823      	add	r0, sp, #140	@ 0x8c
 801807a:	461f      	mov	r7, r3
 801807c:	f005 f9dc 	bl	801d438 <rcl_guard_condition_get_default_options>
 8018080:	f1b8 0f00 	cmp.w	r8, #0
 8018084:	f000 80f3 	beq.w	801826e <rcl_node_init+0x206>
 8018088:	4640      	mov	r0, r8
 801808a:	f7f9 fb29 	bl	80116e0 <rcutils_allocator_is_valid>
 801808e:	2d00      	cmp	r5, #0
 8018090:	bf18      	it	ne
 8018092:	2c00      	cmpne	r4, #0
 8018094:	f080 0001 	eor.w	r0, r0, #1
 8018098:	bf0c      	ite	eq
 801809a:	f04f 0c01 	moveq.w	ip, #1
 801809e:	f04f 0c00 	movne.w	ip, #0
 80180a2:	2e00      	cmp	r6, #0
 80180a4:	bf08      	it	eq
 80180a6:	f04c 0c01 	orreq.w	ip, ip, #1
 80180aa:	ea4c 0c00 	orr.w	ip, ip, r0
 80180ae:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 80180b2:	f040 80dc 	bne.w	801826e <rcl_node_init+0x206>
 80180b6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80180ba:	f1ba 0f00 	cmp.w	sl, #0
 80180be:	f040 80fc 	bne.w	80182ba <rcl_node_init+0x252>
 80180c2:	2f00      	cmp	r7, #0
 80180c4:	f000 80d3 	beq.w	801826e <rcl_node_init+0x206>
 80180c8:	4638      	mov	r0, r7
 80180ca:	f7ff fe35 	bl	8017d38 <rcl_context_is_valid>
 80180ce:	4683      	mov	fp, r0
 80180d0:	2800      	cmp	r0, #0
 80180d2:	f000 80d2 	beq.w	801827a <rcl_node_init+0x212>
 80180d6:	4652      	mov	r2, sl
 80180d8:	4630      	mov	r0, r6
 80180da:	a922      	add	r1, sp, #136	@ 0x88
 80180dc:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 80180e0:	f003 f8b4 	bl	801b24c <rmw_validate_node_name>
 80180e4:	4682      	mov	sl, r0
 80180e6:	2800      	cmp	r0, #0
 80180e8:	f040 80c3 	bne.w	8018272 <rcl_node_init+0x20a>
 80180ec:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80180ee:	2800      	cmp	r0, #0
 80180f0:	f040 80f1 	bne.w	80182d6 <rcl_node_init+0x26e>
 80180f4:	4628      	mov	r0, r5
 80180f6:	f7e8 f8fd 	bl	80002f4 <strlen>
 80180fa:	2800      	cmp	r0, #0
 80180fc:	f040 80c0 	bne.w	8018280 <rcl_node_init+0x218>
 8018100:	4d79      	ldr	r5, [pc, #484]	@ (80182e8 <rcl_node_init+0x280>)
 8018102:	a922      	add	r1, sp, #136	@ 0x88
 8018104:	2200      	movs	r2, #0
 8018106:	4628      	mov	r0, r5
 8018108:	f003 f882 	bl	801b210 <rmw_validate_namespace>
 801810c:	4682      	mov	sl, r0
 801810e:	2800      	cmp	r0, #0
 8018110:	f040 80af 	bne.w	8018272 <rcl_node_init+0x20a>
 8018114:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8018116:	2800      	cmp	r0, #0
 8018118:	f040 80d5 	bne.w	80182c6 <rcl_node_init+0x25e>
 801811c:	f8d8 3000 	ldr.w	r3, [r8]
 8018120:	2078      	movs	r0, #120	@ 0x78
 8018122:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8018126:	4798      	blx	r3
 8018128:	4682      	mov	sl, r0
 801812a:	6060      	str	r0, [r4, #4]
 801812c:	2800      	cmp	r0, #0
 801812e:	f000 80cf 	beq.w	80182d0 <rcl_node_init+0x268>
 8018132:	2200      	movs	r2, #0
 8018134:	2300      	movs	r3, #0
 8018136:	a808      	add	r0, sp, #32
 8018138:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801813c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8018140:	f000 f902 	bl	8018348 <rcl_node_get_default_options>
 8018144:	a908      	add	r1, sp, #32
 8018146:	4650      	mov	r0, sl
 8018148:	2268      	movs	r2, #104	@ 0x68
 801814a:	f006 f8b6 	bl	801e2ba <memcpy>
 801814e:	6861      	ldr	r1, [r4, #4]
 8018150:	4640      	mov	r0, r8
 8018152:	6027      	str	r7, [r4, #0]
 8018154:	f000 f906 	bl	8018364 <rcl_node_options_copy>
 8018158:	2800      	cmp	r0, #0
 801815a:	d158      	bne.n	801820e <rcl_node_init+0x1a6>
 801815c:	4628      	mov	r0, r5
 801815e:	f7e8 f8c9 	bl	80002f4 <strlen>
 8018162:	4428      	add	r0, r5
 8018164:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8018168:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801816c:	2b2f      	cmp	r3, #47	@ 0x2f
 801816e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018172:	9300      	str	r3, [sp, #0]
 8018174:	bf0c      	ite	eq
 8018176:	4b5d      	ldreq	r3, [pc, #372]	@ (80182ec <rcl_node_init+0x284>)
 8018178:	4b5d      	ldrne	r3, [pc, #372]	@ (80182f0 <rcl_node_init+0x288>)
 801817a:	9302      	str	r3, [sp, #8]
 801817c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018180:	9301      	str	r3, [sp, #4]
 8018182:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8018186:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801818a:	f002 fc25 	bl	801a9d8 <rcutils_format_string_limit>
 801818e:	6823      	ldr	r3, [r4, #0]
 8018190:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8018194:	4631      	mov	r1, r6
 8018196:	6818      	ldr	r0, [r3, #0]
 8018198:	462a      	mov	r2, r5
 801819a:	6866      	ldr	r6, [r4, #4]
 801819c:	3028      	adds	r0, #40	@ 0x28
 801819e:	f7f9 fe3f 	bl	8011e20 <rmw_create_node>
 80181a2:	6863      	ldr	r3, [r4, #4]
 80181a4:	66b0      	str	r0, [r6, #104]	@ 0x68
 80181a6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d032      	beq.n	8018212 <rcl_node_init+0x1aa>
 80181ac:	f7f9 fec8 	bl	8011f40 <rmw_node_get_graph_guard_condition>
 80181b0:	4682      	mov	sl, r0
 80181b2:	b360      	cbz	r0, 801820e <rcl_node_init+0x1a6>
 80181b4:	f8d8 3000 	ldr.w	r3, [r8]
 80181b8:	2008      	movs	r0, #8
 80181ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80181be:	6866      	ldr	r6, [r4, #4]
 80181c0:	4798      	blx	r3
 80181c2:	6863      	ldr	r3, [r4, #4]
 80181c4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80181c6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80181ca:	f1bb 0f00 	cmp.w	fp, #0
 80181ce:	d020      	beq.n	8018212 <rcl_node_init+0x1aa>
 80181d0:	a806      	add	r0, sp, #24
 80181d2:	ae23      	add	r6, sp, #140	@ 0x8c
 80181d4:	f005 f856 	bl	801d284 <rcl_get_zero_initialized_guard_condition>
 80181d8:	a806      	add	r0, sp, #24
 80181da:	6863      	ldr	r3, [r4, #4]
 80181dc:	46c4      	mov	ip, r8
 80181de:	c803      	ldmia	r0, {r0, r1}
 80181e0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80181e4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80181e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80181ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80181ee:	f8dc 3000 	ldr.w	r3, [ip]
 80181f2:	6033      	str	r3, [r6, #0]
 80181f4:	ab28      	add	r3, sp, #160	@ 0xa0
 80181f6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80181fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80181fe:	4651      	mov	r1, sl
 8018200:	463a      	mov	r2, r7
 8018202:	4670      	mov	r0, lr
 8018204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018206:	f005 f895 	bl	801d334 <rcl_guard_condition_init_from_rmw>
 801820a:	4682      	mov	sl, r0
 801820c:	b328      	cbz	r0, 801825a <rcl_node_init+0x1f2>
 801820e:	6863      	ldr	r3, [r4, #4]
 8018210:	b1f3      	cbz	r3, 8018250 <rcl_node_init+0x1e8>
 8018212:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018214:	b128      	cbz	r0, 8018222 <rcl_node_init+0x1ba>
 8018216:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801821a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801821e:	4798      	blx	r3
 8018220:	6863      	ldr	r3, [r4, #4]
 8018222:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8018224:	b110      	cbz	r0, 801822c <rcl_node_init+0x1c4>
 8018226:	f7f9 fe0d 	bl	8011e44 <rmw_destroy_node>
 801822a:	6863      	ldr	r3, [r4, #4]
 801822c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801822e:	b148      	cbz	r0, 8018244 <rcl_node_init+0x1dc>
 8018230:	f005 f8dc 	bl	801d3ec <rcl_guard_condition_fini>
 8018234:	6863      	ldr	r3, [r4, #4]
 8018236:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801823a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801823c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018240:	4798      	blx	r3
 8018242:	6863      	ldr	r3, [r4, #4]
 8018244:	4618      	mov	r0, r3
 8018246:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801824a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801824e:	4798      	blx	r3
 8018250:	2300      	movs	r3, #0
 8018252:	f04f 0a01 	mov.w	sl, #1
 8018256:	e9c4 3300 	strd	r3, r3, [r4]
 801825a:	f1b9 0f00 	cmp.w	r9, #0
 801825e:	d008      	beq.n	8018272 <rcl_node_init+0x20a>
 8018260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018264:	4628      	mov	r0, r5
 8018266:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801826a:	4798      	blx	r3
 801826c:	e001      	b.n	8018272 <rcl_node_init+0x20a>
 801826e:	f04f 0a0b 	mov.w	sl, #11
 8018272:	4650      	mov	r0, sl
 8018274:	b029      	add	sp, #164	@ 0xa4
 8018276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801827e:	e7f8      	b.n	8018272 <rcl_node_init+0x20a>
 8018280:	782b      	ldrb	r3, [r5, #0]
 8018282:	2b2f      	cmp	r3, #47	@ 0x2f
 8018284:	f43f af3d 	beq.w	8018102 <rcl_node_init+0x9a>
 8018288:	9503      	str	r5, [sp, #12]
 801828a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801828e:	9300      	str	r3, [sp, #0]
 8018290:	4b18      	ldr	r3, [pc, #96]	@ (80182f4 <rcl_node_init+0x28c>)
 8018292:	9302      	str	r3, [sp, #8]
 8018294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018298:	9301      	str	r3, [sp, #4]
 801829a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801829e:	f002 fb9b 	bl	801a9d8 <rcutils_format_string_limit>
 80182a2:	4605      	mov	r5, r0
 80182a4:	b1e0      	cbz	r0, 80182e0 <rcl_node_init+0x278>
 80182a6:	2200      	movs	r2, #0
 80182a8:	a922      	add	r1, sp, #136	@ 0x88
 80182aa:	9222      	str	r2, [sp, #136]	@ 0x88
 80182ac:	f002 ffb0 	bl	801b210 <rmw_validate_namespace>
 80182b0:	4682      	mov	sl, r0
 80182b2:	2800      	cmp	r0, #0
 80182b4:	d1d4      	bne.n	8018260 <rcl_node_init+0x1f8>
 80182b6:	46d9      	mov	r9, fp
 80182b8:	e72c      	b.n	8018114 <rcl_node_init+0xac>
 80182ba:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 80182be:	4650      	mov	r0, sl
 80182c0:	b029      	add	sp, #164	@ 0xa4
 80182c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80182ca:	f002 ffb3 	bl	801b234 <rmw_namespace_validation_result_string>
 80182ce:	e7c4      	b.n	801825a <rcl_node_init+0x1f2>
 80182d0:	f04f 0a0a 	mov.w	sl, #10
 80182d4:	e7c1      	b.n	801825a <rcl_node_init+0x1f2>
 80182d6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80182da:	f003 f80b 	bl	801b2f4 <rmw_node_name_validation_result_string>
 80182de:	e7c8      	b.n	8018272 <rcl_node_init+0x20a>
 80182e0:	f04f 0a0a 	mov.w	sl, #10
 80182e4:	e7c5      	b.n	8018272 <rcl_node_init+0x20a>
 80182e6:	bf00      	nop
 80182e8:	0801f1b8 	.word	0x0801f1b8
 80182ec:	0801f204 	.word	0x0801f204
 80182f0:	0801f1bc 	.word	0x0801f1bc
 80182f4:	0801f6d8 	.word	0x0801f6d8

080182f8 <rcl_node_is_valid>:
 80182f8:	b130      	cbz	r0, 8018308 <rcl_node_is_valid+0x10>
 80182fa:	6843      	ldr	r3, [r0, #4]
 80182fc:	b123      	cbz	r3, 8018308 <rcl_node_is_valid+0x10>
 80182fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018300:	b113      	cbz	r3, 8018308 <rcl_node_is_valid+0x10>
 8018302:	6800      	ldr	r0, [r0, #0]
 8018304:	f7ff bd18 	b.w	8017d38 <rcl_context_is_valid>
 8018308:	2000      	movs	r0, #0
 801830a:	4770      	bx	lr

0801830c <rcl_node_get_name>:
 801830c:	b120      	cbz	r0, 8018318 <rcl_node_get_name+0xc>
 801830e:	6840      	ldr	r0, [r0, #4]
 8018310:	b110      	cbz	r0, 8018318 <rcl_node_get_name+0xc>
 8018312:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8018314:	b100      	cbz	r0, 8018318 <rcl_node_get_name+0xc>
 8018316:	6880      	ldr	r0, [r0, #8]
 8018318:	4770      	bx	lr
 801831a:	bf00      	nop

0801831c <rcl_node_get_namespace>:
 801831c:	b120      	cbz	r0, 8018328 <rcl_node_get_namespace+0xc>
 801831e:	6840      	ldr	r0, [r0, #4]
 8018320:	b110      	cbz	r0, 8018328 <rcl_node_get_namespace+0xc>
 8018322:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8018324:	b100      	cbz	r0, 8018328 <rcl_node_get_namespace+0xc>
 8018326:	68c0      	ldr	r0, [r0, #12]
 8018328:	4770      	bx	lr
 801832a:	bf00      	nop

0801832c <rcl_node_get_options>:
 801832c:	b128      	cbz	r0, 801833a <rcl_node_get_options+0xe>
 801832e:	6840      	ldr	r0, [r0, #4]
 8018330:	b118      	cbz	r0, 801833a <rcl_node_get_options+0xe>
 8018332:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8018334:	2b00      	cmp	r3, #0
 8018336:	bf08      	it	eq
 8018338:	2000      	moveq	r0, #0
 801833a:	4770      	bx	lr

0801833c <rcl_node_get_rmw_handle>:
 801833c:	b110      	cbz	r0, 8018344 <rcl_node_get_rmw_handle+0x8>
 801833e:	6840      	ldr	r0, [r0, #4]
 8018340:	b100      	cbz	r0, 8018344 <rcl_node_get_rmw_handle+0x8>
 8018342:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop

08018348 <rcl_node_get_default_options>:
 8018348:	b510      	push	{r4, lr}
 801834a:	4604      	mov	r4, r0
 801834c:	2268      	movs	r2, #104	@ 0x68
 801834e:	2100      	movs	r1, #0
 8018350:	f005 feea 	bl	801e128 <memset>
 8018354:	4620      	mov	r0, r4
 8018356:	f7f9 f9b5 	bl	80116c4 <rcutils_get_default_allocator>
 801835a:	2301      	movs	r3, #1
 801835c:	4620      	mov	r0, r4
 801835e:	7523      	strb	r3, [r4, #20]
 8018360:	bd10      	pop	{r4, pc}
 8018362:	bf00      	nop

08018364 <rcl_node_options_copy>:
 8018364:	2800      	cmp	r0, #0
 8018366:	bf18      	it	ne
 8018368:	4288      	cmpne	r0, r1
 801836a:	d01b      	beq.n	80183a4 <rcl_node_options_copy+0x40>
 801836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801836e:	fab1 f681 	clz	r6, r1
 8018372:	460c      	mov	r4, r1
 8018374:	0976      	lsrs	r6, r6, #5
 8018376:	b199      	cbz	r1, 80183a0 <rcl_node_options_copy+0x3c>
 8018378:	4605      	mov	r5, r0
 801837a:	8a87      	ldrh	r7, [r0, #20]
 801837c:	4684      	mov	ip, r0
 801837e:	468e      	mov	lr, r1
 8018380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018382:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018386:	682b      	ldr	r3, [r5, #0]
 8018388:	2250      	movs	r2, #80	@ 0x50
 801838a:	f10c 0118 	add.w	r1, ip, #24
 801838e:	f104 0018 	add.w	r0, r4, #24
 8018392:	f8ce 3000 	str.w	r3, [lr]
 8018396:	82a7      	strh	r7, [r4, #20]
 8018398:	f005 ff8f 	bl	801e2ba <memcpy>
 801839c:	4630      	mov	r0, r6
 801839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a0:	200b      	movs	r0, #11
 80183a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a4:	200b      	movs	r0, #11
 80183a6:	4770      	bx	lr

080183a8 <rcl_node_resolve_name>:
 80183a8:	b082      	sub	sp, #8
 80183aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ae:	b091      	sub	sp, #68	@ 0x44
 80183b0:	ac1a      	add	r4, sp, #104	@ 0x68
 80183b2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80183b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80183ba:	2800      	cmp	r0, #0
 80183bc:	d03d      	beq.n	801843a <rcl_node_resolve_name+0x92>
 80183be:	460c      	mov	r4, r1
 80183c0:	4605      	mov	r5, r0
 80183c2:	f7ff ffb3 	bl	801832c <rcl_node_get_options>
 80183c6:	2800      	cmp	r0, #0
 80183c8:	d03a      	beq.n	8018440 <rcl_node_resolve_name+0x98>
 80183ca:	4628      	mov	r0, r5
 80183cc:	f7ff ff9e 	bl	801830c <rcl_node_get_name>
 80183d0:	4606      	mov	r6, r0
 80183d2:	4628      	mov	r0, r5
 80183d4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80183d6:	f7ff ffa1 	bl	801831c <rcl_node_get_namespace>
 80183da:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80183de:	4607      	mov	r7, r0
 80183e0:	46ac      	mov	ip, r5
 80183e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80183e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183ea:	f8de 3000 	ldr.w	r3, [lr]
 80183ee:	f8cc 3000 	str.w	r3, [ip]
 80183f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80183f4:	b30b      	cbz	r3, 801843a <rcl_node_resolve_name+0x92>
 80183f6:	4689      	mov	r9, r1
 80183f8:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80183fc:	f002 fc64 	bl	801acc8 <rcutils_get_zero_initialized_string_map>
 8018400:	ab10      	add	r3, sp, #64	@ 0x40
 8018402:	9008      	str	r0, [sp, #32]
 8018404:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8018408:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801840c:	2100      	movs	r1, #0
 801840e:	a808      	add	r0, sp, #32
 8018410:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018414:	f002 fcce 	bl	801adb4 <rcutils_string_map_init>
 8018418:	4683      	mov	fp, r0
 801841a:	b1a0      	cbz	r0, 8018446 <rcl_node_resolve_name+0x9e>
 801841c:	f7f9 f96e 	bl	80116fc <rcutils_get_error_string>
 8018420:	f7f9 f982 	bl	8011728 <rcutils_reset_error>
 8018424:	f1bb 0f0a 	cmp.w	fp, #10
 8018428:	bf18      	it	ne
 801842a:	f04f 0b01 	movne.w	fp, #1
 801842e:	4658      	mov	r0, fp
 8018430:	b011      	add	sp, #68	@ 0x44
 8018432:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018436:	b002      	add	sp, #8
 8018438:	4770      	bx	lr
 801843a:	f04f 0b0b 	mov.w	fp, #11
 801843e:	e7f6      	b.n	801842e <rcl_node_resolve_name+0x86>
 8018440:	f04f 0b01 	mov.w	fp, #1
 8018444:	e7f3      	b.n	801842e <rcl_node_resolve_name+0x86>
 8018446:	9009      	str	r0, [sp, #36]	@ 0x24
 8018448:	9007      	str	r0, [sp, #28]
 801844a:	a808      	add	r0, sp, #32
 801844c:	f004 ff14 	bl	801d278 <rcl_get_default_topic_name_substitutions>
 8018450:	4683      	mov	fp, r0
 8018452:	b180      	cbz	r0, 8018476 <rcl_node_resolve_name+0xce>
 8018454:	280a      	cmp	r0, #10
 8018456:	a808      	add	r0, sp, #32
 8018458:	bf18      	it	ne
 801845a:	f04f 0b01 	movne.w	fp, #1
 801845e:	f002 fce9 	bl	801ae34 <rcutils_string_map_fini>
 8018462:	4604      	mov	r4, r0
 8018464:	2800      	cmp	r0, #0
 8018466:	d15b      	bne.n	8018520 <rcl_node_resolve_name+0x178>
 8018468:	4651      	mov	r1, sl
 801846a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801846c:	47c8      	blx	r9
 801846e:	4651      	mov	r1, sl
 8018470:	4620      	mov	r0, r4
 8018472:	47c8      	blx	r9
 8018474:	e7db      	b.n	801842e <rcl_node_resolve_name+0x86>
 8018476:	ab09      	add	r3, sp, #36	@ 0x24
 8018478:	46ec      	mov	ip, sp
 801847a:	9305      	str	r3, [sp, #20]
 801847c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801847e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018482:	682b      	ldr	r3, [r5, #0]
 8018484:	463a      	mov	r2, r7
 8018486:	4631      	mov	r1, r6
 8018488:	4620      	mov	r0, r4
 801848a:	f8cc 3000 	str.w	r3, [ip]
 801848e:	ab08      	add	r3, sp, #32
 8018490:	f004 fd92 	bl	801cfb8 <rcl_expand_topic_name>
 8018494:	4683      	mov	fp, r0
 8018496:	b9d8      	cbnz	r0, 80184d0 <rcl_node_resolve_name+0x128>
 8018498:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801849a:	4602      	mov	r2, r0
 801849c:	9009      	str	r0, [sp, #36]	@ 0x24
 801849e:	a90a      	add	r1, sp, #40	@ 0x28
 80184a0:	4620      	mov	r0, r4
 80184a2:	f002 fde5 	bl	801b070 <rmw_validate_full_topic_name>
 80184a6:	bb50      	cbnz	r0, 80184fe <rcl_node_resolve_name+0x156>
 80184a8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80184aa:	2d00      	cmp	r5, #0
 80184ac:	d140      	bne.n	8018530 <rcl_node_resolve_name+0x188>
 80184ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80184b0:	a808      	add	r0, sp, #32
 80184b2:	601c      	str	r4, [r3, #0]
 80184b4:	f002 fcbe 	bl	801ae34 <rcutils_string_map_fini>
 80184b8:	4683      	mov	fp, r0
 80184ba:	2800      	cmp	r0, #0
 80184bc:	d043      	beq.n	8018546 <rcl_node_resolve_name+0x19e>
 80184be:	f7f9 f91d 	bl	80116fc <rcutils_get_error_string>
 80184c2:	46a8      	mov	r8, r5
 80184c4:	f04f 0b01 	mov.w	fp, #1
 80184c8:	462c      	mov	r4, r5
 80184ca:	f7f9 f92d 	bl	8011728 <rcutils_reset_error>
 80184ce:	e00a      	b.n	80184e6 <rcl_node_resolve_name+0x13e>
 80184d0:	2867      	cmp	r0, #103	@ 0x67
 80184d2:	bf14      	ite	ne
 80184d4:	f04f 0800 	movne.w	r8, #0
 80184d8:	f008 0801 	andeq.w	r8, r8, #1
 80184dc:	9c07      	ldr	r4, [sp, #28]
 80184de:	a808      	add	r0, sp, #32
 80184e0:	f002 fca8 	bl	801ae34 <rcutils_string_map_fini>
 80184e4:	bb50      	cbnz	r0, 801853c <rcl_node_resolve_name+0x194>
 80184e6:	4651      	mov	r1, sl
 80184e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80184ea:	47c8      	blx	r9
 80184ec:	4651      	mov	r1, sl
 80184ee:	4620      	mov	r0, r4
 80184f0:	47c8      	blx	r9
 80184f2:	f1b8 0f00 	cmp.w	r8, #0
 80184f6:	bf18      	it	ne
 80184f8:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80184fc:	e797      	b.n	801842e <rcl_node_resolve_name+0x86>
 80184fe:	f7f9 f8fd 	bl	80116fc <rcutils_get_error_string>
 8018502:	f7f9 f911 	bl	8011728 <rcutils_reset_error>
 8018506:	a808      	add	r0, sp, #32
 8018508:	f002 fc94 	bl	801ae34 <rcutils_string_map_fini>
 801850c:	b998      	cbnz	r0, 8018536 <rcl_node_resolve_name+0x18e>
 801850e:	4651      	mov	r1, sl
 8018510:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018512:	47c8      	blx	r9
 8018514:	4651      	mov	r1, sl
 8018516:	4620      	mov	r0, r4
 8018518:	f04f 0b01 	mov.w	fp, #1
 801851c:	47c8      	blx	r9
 801851e:	e786      	b.n	801842e <rcl_node_resolve_name+0x86>
 8018520:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018524:	f7f9 f8ea 	bl	80116fc <rcutils_get_error_string>
 8018528:	f7f9 f8fe 	bl	8011728 <rcutils_reset_error>
 801852c:	4644      	mov	r4, r8
 801852e:	e7da      	b.n	80184e6 <rcl_node_resolve_name+0x13e>
 8018530:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8018534:	e7d3      	b.n	80184de <rcl_node_resolve_name+0x136>
 8018536:	46d8      	mov	r8, fp
 8018538:	f04f 0b01 	mov.w	fp, #1
 801853c:	f7f9 f8de 	bl	80116fc <rcutils_get_error_string>
 8018540:	f7f9 f8f2 	bl	8011728 <rcutils_reset_error>
 8018544:	e7cf      	b.n	80184e6 <rcl_node_resolve_name+0x13e>
 8018546:	4651      	mov	r1, sl
 8018548:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801854a:	47c8      	blx	r9
 801854c:	4651      	mov	r1, sl
 801854e:	4658      	mov	r0, fp
 8018550:	47c8      	blx	r9
 8018552:	e76c      	b.n	801842e <rcl_node_resolve_name+0x86>

08018554 <exact_match_lookup>:
 8018554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018556:	f102 0708 	add.w	r7, r2, #8
 801855a:	460b      	mov	r3, r1
 801855c:	b085      	sub	sp, #20
 801855e:	4614      	mov	r4, r2
 8018560:	4606      	mov	r6, r0
 8018562:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8018566:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801856a:	4618      	mov	r0, r3
 801856c:	4919      	ldr	r1, [pc, #100]	@ (80185d4 <exact_match_lookup+0x80>)
 801856e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8018572:	f002 fa23 	bl	801a9bc <rcutils_join_path>
 8018576:	7833      	ldrb	r3, [r6, #0]
 8018578:	4605      	mov	r5, r0
 801857a:	2b2f      	cmp	r3, #47	@ 0x2f
 801857c:	d023      	beq.n	80185c6 <exact_match_lookup+0x72>
 801857e:	f104 030c 	add.w	r3, r4, #12
 8018582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018586:	e88d 0003 	stmia.w	sp, {r0, r1}
 801858a:	1c70      	adds	r0, r6, #1
 801858c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018590:	f002 fa1a 	bl	801a9c8 <rcutils_to_native_path>
 8018594:	4606      	mov	r6, r0
 8018596:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801859a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801859e:	4631      	mov	r1, r6
 80185a0:	4628      	mov	r0, r5
 80185a2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80185a6:	f002 fa09 	bl	801a9bc <rcutils_join_path>
 80185aa:	4603      	mov	r3, r0
 80185ac:	4630      	mov	r0, r6
 80185ae:	6862      	ldr	r2, [r4, #4]
 80185b0:	461e      	mov	r6, r3
 80185b2:	6921      	ldr	r1, [r4, #16]
 80185b4:	4790      	blx	r2
 80185b6:	4628      	mov	r0, r5
 80185b8:	4635      	mov	r5, r6
 80185ba:	6863      	ldr	r3, [r4, #4]
 80185bc:	6921      	ldr	r1, [r4, #16]
 80185be:	4798      	blx	r3
 80185c0:	4628      	mov	r0, r5
 80185c2:	b005      	add	sp, #20
 80185c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185c6:	7873      	ldrb	r3, [r6, #1]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d1d8      	bne.n	801857e <exact_match_lookup+0x2a>
 80185cc:	4628      	mov	r0, r5
 80185ce:	b005      	add	sp, #20
 80185d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185d2:	bf00      	nop
 80185d4:	0801f720 	.word	0x0801f720

080185d8 <rcl_get_secure_root>:
 80185d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185dc:	b085      	sub	sp, #20
 80185de:	b168      	cbz	r0, 80185fc <rcl_get_secure_root+0x24>
 80185e0:	4607      	mov	r7, r0
 80185e2:	4608      	mov	r0, r1
 80185e4:	460c      	mov	r4, r1
 80185e6:	f7f9 f87b 	bl	80116e0 <rcutils_allocator_is_valid>
 80185ea:	b138      	cbz	r0, 80185fc <rcl_get_secure_root+0x24>
 80185ec:	2300      	movs	r3, #0
 80185ee:	482d      	ldr	r0, [pc, #180]	@ (80186a4 <rcl_get_secure_root+0xcc>)
 80185f0:	a903      	add	r1, sp, #12
 80185f2:	9303      	str	r3, [sp, #12]
 80185f4:	f002 f9c8 	bl	801a988 <rcutils_get_env>
 80185f8:	4605      	mov	r5, r0
 80185fa:	b120      	cbz	r0, 8018606 <rcl_get_secure_root+0x2e>
 80185fc:	2500      	movs	r5, #0
 80185fe:	4628      	mov	r0, r5
 8018600:	b005      	add	sp, #20
 8018602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018606:	9b03      	ldr	r3, [sp, #12]
 8018608:	781a      	ldrb	r2, [r3, #0]
 801860a:	2a00      	cmp	r2, #0
 801860c:	d0f6      	beq.n	80185fc <rcl_get_secure_root+0x24>
 801860e:	f104 090c 	add.w	r9, r4, #12
 8018612:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018616:	e88d 0003 	stmia.w	sp, {r0, r1}
 801861a:	4618      	mov	r0, r3
 801861c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018620:	f002 fb14 	bl	801ac4c <rcutils_strdup>
 8018624:	4680      	mov	r8, r0
 8018626:	2800      	cmp	r0, #0
 8018628:	d0e8      	beq.n	80185fc <rcl_get_secure_root+0x24>
 801862a:	a903      	add	r1, sp, #12
 801862c:	481e      	ldr	r0, [pc, #120]	@ (80186a8 <rcl_get_secure_root+0xd0>)
 801862e:	9503      	str	r5, [sp, #12]
 8018630:	f002 f9aa 	bl	801a988 <rcutils_get_env>
 8018634:	b160      	cbz	r0, 8018650 <rcl_get_secure_root+0x78>
 8018636:	2600      	movs	r6, #0
 8018638:	4630      	mov	r0, r6
 801863a:	6863      	ldr	r3, [r4, #4]
 801863c:	6921      	ldr	r1, [r4, #16]
 801863e:	4798      	blx	r3
 8018640:	4640      	mov	r0, r8
 8018642:	6863      	ldr	r3, [r4, #4]
 8018644:	6921      	ldr	r1, [r4, #16]
 8018646:	4798      	blx	r3
 8018648:	4628      	mov	r0, r5
 801864a:	b005      	add	sp, #20
 801864c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018650:	9b03      	ldr	r3, [sp, #12]
 8018652:	781e      	ldrb	r6, [r3, #0]
 8018654:	b1f6      	cbz	r6, 8018694 <rcl_get_secure_root+0xbc>
 8018656:	e899 0003 	ldmia.w	r9, {r0, r1}
 801865a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801865e:	4618      	mov	r0, r3
 8018660:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018664:	f002 faf2 	bl	801ac4c <rcutils_strdup>
 8018668:	4606      	mov	r6, r0
 801866a:	2800      	cmp	r0, #0
 801866c:	d0e3      	beq.n	8018636 <rcl_get_secure_root+0x5e>
 801866e:	4622      	mov	r2, r4
 8018670:	4641      	mov	r1, r8
 8018672:	f7ff ff6f 	bl	8018554 <exact_match_lookup>
 8018676:	4605      	mov	r5, r0
 8018678:	2d00      	cmp	r5, #0
 801867a:	d0dd      	beq.n	8018638 <rcl_get_secure_root+0x60>
 801867c:	4628      	mov	r0, r5
 801867e:	f002 f99b 	bl	801a9b8 <rcutils_is_directory>
 8018682:	4603      	mov	r3, r0
 8018684:	2800      	cmp	r0, #0
 8018686:	d1d7      	bne.n	8018638 <rcl_get_secure_root+0x60>
 8018688:	4628      	mov	r0, r5
 801868a:	6921      	ldr	r1, [r4, #16]
 801868c:	461d      	mov	r5, r3
 801868e:	6863      	ldr	r3, [r4, #4]
 8018690:	4798      	blx	r3
 8018692:	e7d1      	b.n	8018638 <rcl_get_secure_root+0x60>
 8018694:	4622      	mov	r2, r4
 8018696:	4638      	mov	r0, r7
 8018698:	4641      	mov	r1, r8
 801869a:	f7ff ff5b 	bl	8018554 <exact_match_lookup>
 801869e:	4605      	mov	r5, r0
 80186a0:	e7ea      	b.n	8018678 <rcl_get_secure_root+0xa0>
 80186a2:	bf00      	nop
 80186a4:	0801f72c 	.word	0x0801f72c
 80186a8:	0801f744 	.word	0x0801f744

080186ac <rcl_get_security_options_from_environment>:
 80186ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b0:	b082      	sub	sp, #8
 80186b2:	2300      	movs	r3, #0
 80186b4:	4606      	mov	r6, r0
 80186b6:	460f      	mov	r7, r1
 80186b8:	4821      	ldr	r0, [pc, #132]	@ (8018740 <rcl_get_security_options_from_environment+0x94>)
 80186ba:	a901      	add	r1, sp, #4
 80186bc:	4690      	mov	r8, r2
 80186be:	9301      	str	r3, [sp, #4]
 80186c0:	f002 f962 	bl	801a988 <rcutils_get_env>
 80186c4:	b120      	cbz	r0, 80186d0 <rcl_get_security_options_from_environment+0x24>
 80186c6:	2501      	movs	r5, #1
 80186c8:	4628      	mov	r0, r5
 80186ca:	b002      	add	sp, #8
 80186cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186d0:	4604      	mov	r4, r0
 80186d2:	491c      	ldr	r1, [pc, #112]	@ (8018744 <rcl_get_security_options_from_environment+0x98>)
 80186d4:	9801      	ldr	r0, [sp, #4]
 80186d6:	f7e7 fe03 	bl	80002e0 <strcmp>
 80186da:	4605      	mov	r5, r0
 80186dc:	b9f0      	cbnz	r0, 801871c <rcl_get_security_options_from_environment+0x70>
 80186de:	9001      	str	r0, [sp, #4]
 80186e0:	f1b8 0f00 	cmp.w	r8, #0
 80186e4:	d021      	beq.n	801872a <rcl_get_security_options_from_environment+0x7e>
 80186e6:	a901      	add	r1, sp, #4
 80186e8:	4817      	ldr	r0, [pc, #92]	@ (8018748 <rcl_get_security_options_from_environment+0x9c>)
 80186ea:	f002 f94d 	bl	801a988 <rcutils_get_env>
 80186ee:	2800      	cmp	r0, #0
 80186f0:	d1e9      	bne.n	80186c6 <rcl_get_security_options_from_environment+0x1a>
 80186f2:	4916      	ldr	r1, [pc, #88]	@ (801874c <rcl_get_security_options_from_environment+0xa0>)
 80186f4:	9801      	ldr	r0, [sp, #4]
 80186f6:	f7e7 fdf3 	bl	80002e0 <strcmp>
 80186fa:	4603      	mov	r3, r0
 80186fc:	4639      	mov	r1, r7
 80186fe:	4630      	mov	r0, r6
 8018700:	fab3 f383 	clz	r3, r3
 8018704:	095b      	lsrs	r3, r3, #5
 8018706:	f888 3000 	strb.w	r3, [r8]
 801870a:	f7ff ff65 	bl	80185d8 <rcl_get_secure_root>
 801870e:	b170      	cbz	r0, 801872e <rcl_get_security_options_from_environment+0x82>
 8018710:	f8c8 0004 	str.w	r0, [r8, #4]
 8018714:	4628      	mov	r0, r5
 8018716:	b002      	add	sp, #8
 8018718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801871c:	4625      	mov	r5, r4
 801871e:	f888 4000 	strb.w	r4, [r8]
 8018722:	4628      	mov	r0, r5
 8018724:	b002      	add	sp, #8
 8018726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801872a:	250b      	movs	r5, #11
 801872c:	e7cc      	b.n	80186c8 <rcl_get_security_options_from_environment+0x1c>
 801872e:	f898 5000 	ldrb.w	r5, [r8]
 8018732:	f1a5 0501 	sub.w	r5, r5, #1
 8018736:	fab5 f585 	clz	r5, r5
 801873a:	096d      	lsrs	r5, r5, #5
 801873c:	e7c4      	b.n	80186c8 <rcl_get_security_options_from_environment+0x1c>
 801873e:	bf00      	nop
 8018740:	0801f6e4 	.word	0x0801f6e4
 8018744:	0801f6f8 	.word	0x0801f6f8
 8018748:	0801f700 	.word	0x0801f700
 801874c:	0801f718 	.word	0x0801f718

08018750 <rcl_service_get_rmw_handle>:
 8018750:	b118      	cbz	r0, 801875a <rcl_service_get_rmw_handle+0xa>
 8018752:	6800      	ldr	r0, [r0, #0]
 8018754:	b108      	cbz	r0, 801875a <rcl_service_get_rmw_handle+0xa>
 8018756:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801875a:	4770      	bx	lr

0801875c <rcl_take_request>:
 801875c:	b570      	push	{r4, r5, r6, lr}
 801875e:	468e      	mov	lr, r1
 8018760:	b08c      	sub	sp, #48	@ 0x30
 8018762:	460c      	mov	r4, r1
 8018764:	4616      	mov	r6, r2
 8018766:	f10d 0c18 	add.w	ip, sp, #24
 801876a:	4605      	mov	r5, r0
 801876c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018770:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018774:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018778:	e88c 0003 	stmia.w	ip, {r0, r1}
 801877c:	b30d      	cbz	r5, 80187c2 <rcl_take_request+0x66>
 801877e:	682b      	ldr	r3, [r5, #0]
 8018780:	b1fb      	cbz	r3, 80187c2 <rcl_take_request+0x66>
 8018782:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018786:	b1e0      	cbz	r0, 80187c2 <rcl_take_request+0x66>
 8018788:	b336      	cbz	r6, 80187d8 <rcl_take_request+0x7c>
 801878a:	2300      	movs	r3, #0
 801878c:	4632      	mov	r2, r6
 801878e:	a902      	add	r1, sp, #8
 8018790:	f88d 3007 	strb.w	r3, [sp, #7]
 8018794:	f10d 0307 	add.w	r3, sp, #7
 8018798:	f002 ffce 	bl	801b738 <rmw_take_request>
 801879c:	4605      	mov	r5, r0
 801879e:	b198      	cbz	r0, 80187c8 <rcl_take_request+0x6c>
 80187a0:	280a      	cmp	r0, #10
 80187a2:	bf18      	it	ne
 80187a4:	2501      	movne	r5, #1
 80187a6:	f10d 0e18 	add.w	lr, sp, #24
 80187aa:	46a4      	mov	ip, r4
 80187ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80187b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80187bc:	4628      	mov	r0, r5
 80187be:	b00c      	add	sp, #48	@ 0x30
 80187c0:	bd70      	pop	{r4, r5, r6, pc}
 80187c2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80187c6:	e7ee      	b.n	80187a6 <rcl_take_request+0x4a>
 80187c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80187cc:	f240 2359 	movw	r3, #601	@ 0x259
 80187d0:	2a00      	cmp	r2, #0
 80187d2:	bf08      	it	eq
 80187d4:	461d      	moveq	r5, r3
 80187d6:	e7e6      	b.n	80187a6 <rcl_take_request+0x4a>
 80187d8:	250b      	movs	r5, #11
 80187da:	e7e4      	b.n	80187a6 <rcl_take_request+0x4a>

080187dc <rcl_send_response>:
 80187dc:	b170      	cbz	r0, 80187fc <rcl_send_response+0x20>
 80187de:	6800      	ldr	r0, [r0, #0]
 80187e0:	b160      	cbz	r0, 80187fc <rcl_send_response+0x20>
 80187e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80187e6:	b148      	cbz	r0, 80187fc <rcl_send_response+0x20>
 80187e8:	b169      	cbz	r1, 8018806 <rcl_send_response+0x2a>
 80187ea:	b510      	push	{r4, lr}
 80187ec:	b14a      	cbz	r2, 8018802 <rcl_send_response+0x26>
 80187ee:	f003 f801 	bl	801b7f4 <rmw_send_response>
 80187f2:	b110      	cbz	r0, 80187fa <rcl_send_response+0x1e>
 80187f4:	2802      	cmp	r0, #2
 80187f6:	bf18      	it	ne
 80187f8:	2001      	movne	r0, #1
 80187fa:	bd10      	pop	{r4, pc}
 80187fc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8018800:	4770      	bx	lr
 8018802:	200b      	movs	r0, #11
 8018804:	bd10      	pop	{r4, pc}
 8018806:	200b      	movs	r0, #11
 8018808:	4770      	bx	lr
 801880a:	bf00      	nop

0801880c <rcl_service_is_valid>:
 801880c:	b130      	cbz	r0, 801881c <rcl_service_is_valid+0x10>
 801880e:	6800      	ldr	r0, [r0, #0]
 8018810:	b120      	cbz	r0, 801881c <rcl_service_is_valid+0x10>
 8018812:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018816:	3800      	subs	r0, #0
 8018818:	bf18      	it	ne
 801881a:	2001      	movne	r0, #1
 801881c:	4770      	bx	lr
 801881e:	bf00      	nop

08018820 <rcl_take>:
 8018820:	2800      	cmp	r0, #0
 8018822:	d049      	beq.n	80188b8 <rcl_take+0x98>
 8018824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018828:	4615      	mov	r5, r2
 801882a:	6802      	ldr	r2, [r0, #0]
 801882c:	b0a4      	sub	sp, #144	@ 0x90
 801882e:	4604      	mov	r4, r0
 8018830:	2a00      	cmp	r2, #0
 8018832:	d039      	beq.n	80188a8 <rcl_take+0x88>
 8018834:	461f      	mov	r7, r3
 8018836:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801883a:	b3ab      	cbz	r3, 80188a8 <rcl_take+0x88>
 801883c:	460e      	mov	r6, r1
 801883e:	2900      	cmp	r1, #0
 8018840:	d038      	beq.n	80188b4 <rcl_take+0x94>
 8018842:	2d00      	cmp	r5, #0
 8018844:	d03c      	beq.n	80188c0 <rcl_take+0xa0>
 8018846:	a802      	add	r0, sp, #8
 8018848:	f04f 0800 	mov.w	r8, #0
 801884c:	f002 fc08 	bl	801b060 <rmw_get_zero_initialized_message_info>
 8018850:	f10d 0c08 	add.w	ip, sp, #8
 8018854:	46ae      	mov	lr, r5
 8018856:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801885a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801885e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018862:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018866:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801886a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801886e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8018872:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8018876:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801887a:	462b      	mov	r3, r5
 801887c:	6820      	ldr	r0, [r4, #0]
 801887e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8018882:	4631      	mov	r1, r6
 8018884:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8018888:	9700      	str	r7, [sp, #0]
 801888a:	f003 f857 	bl	801b93c <rmw_take_with_info>
 801888e:	4603      	mov	r3, r0
 8018890:	b9c0      	cbnz	r0, 80188c4 <rcl_take+0xa4>
 8018892:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8018896:	f240 1291 	movw	r2, #401	@ 0x191
 801889a:	2900      	cmp	r1, #0
 801889c:	bf08      	it	eq
 801889e:	4613      	moveq	r3, r2
 80188a0:	4618      	mov	r0, r3
 80188a2:	b024      	add	sp, #144	@ 0x90
 80188a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80188ac:	4618      	mov	r0, r3
 80188ae:	b024      	add	sp, #144	@ 0x90
 80188b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188b4:	230b      	movs	r3, #11
 80188b6:	e7f3      	b.n	80188a0 <rcl_take+0x80>
 80188b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80188bc:	4618      	mov	r0, r3
 80188be:	4770      	bx	lr
 80188c0:	ad14      	add	r5, sp, #80	@ 0x50
 80188c2:	e7c0      	b.n	8018846 <rcl_take+0x26>
 80188c4:	f7ff fa1a 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 80188c8:	4603      	mov	r3, r0
 80188ca:	e7e9      	b.n	80188a0 <rcl_take+0x80>

080188cc <rcl_subscription_get_rmw_handle>:
 80188cc:	b118      	cbz	r0, 80188d6 <rcl_subscription_get_rmw_handle+0xa>
 80188ce:	6800      	ldr	r0, [r0, #0]
 80188d0:	b108      	cbz	r0, 80188d6 <rcl_subscription_get_rmw_handle+0xa>
 80188d2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80188d6:	4770      	bx	lr

080188d8 <rcl_subscription_is_valid>:
 80188d8:	b130      	cbz	r0, 80188e8 <rcl_subscription_is_valid+0x10>
 80188da:	6800      	ldr	r0, [r0, #0]
 80188dc:	b120      	cbz	r0, 80188e8 <rcl_subscription_is_valid+0x10>
 80188de:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80188e2:	3800      	subs	r0, #0
 80188e4:	bf18      	it	ne
 80188e6:	2001      	movne	r0, #1
 80188e8:	4770      	bx	lr
 80188ea:	bf00      	nop

080188ec <rcl_get_system_time>:
 80188ec:	4608      	mov	r0, r1
 80188ee:	f7f8 bf37 	b.w	8011760 <rcutils_system_time_now>
 80188f2:	bf00      	nop

080188f4 <rcl_get_steady_time>:
 80188f4:	4608      	mov	r0, r1
 80188f6:	f7f8 bf59 	b.w	80117ac <rcutils_steady_time_now>
 80188fa:	bf00      	nop

080188fc <rcl_get_ros_time>:
 80188fc:	7a03      	ldrb	r3, [r0, #8]
 80188fe:	b510      	push	{r4, lr}
 8018900:	460c      	mov	r4, r1
 8018902:	b143      	cbz	r3, 8018916 <rcl_get_ros_time+0x1a>
 8018904:	2105      	movs	r1, #5
 8018906:	f001 ff9b 	bl	801a840 <__atomic_load_8>
 801890a:	4602      	mov	r2, r0
 801890c:	460b      	mov	r3, r1
 801890e:	2000      	movs	r0, #0
 8018910:	e9c4 2300 	strd	r2, r3, [r4]
 8018914:	bd10      	pop	{r4, pc}
 8018916:	4608      	mov	r0, r1
 8018918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801891c:	f7f8 bf20 	b.w	8011760 <rcutils_system_time_now>

08018920 <rcl_clock_init>:
 8018920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018922:	4605      	mov	r5, r0
 8018924:	4610      	mov	r0, r2
 8018926:	4614      	mov	r4, r2
 8018928:	460e      	mov	r6, r1
 801892a:	f7f8 fed9 	bl	80116e0 <rcutils_allocator_is_valid>
 801892e:	b128      	cbz	r0, 801893c <rcl_clock_init+0x1c>
 8018930:	2d03      	cmp	r5, #3
 8018932:	d803      	bhi.n	801893c <rcl_clock_init+0x1c>
 8018934:	e8df f005 	tbb	[pc, r5]
 8018938:	0659301f 	.word	0x0659301f
 801893c:	f04f 0c0b 	mov.w	ip, #11
 8018940:	4660      	mov	r0, ip
 8018942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018944:	2c00      	cmp	r4, #0
 8018946:	d0f9      	beq.n	801893c <rcl_clock_init+0x1c>
 8018948:	fab6 f386 	clz	r3, r6
 801894c:	095b      	lsrs	r3, r3, #5
 801894e:	2e00      	cmp	r6, #0
 8018950:	d0f4      	beq.n	801893c <rcl_clock_init+0x1c>
 8018952:	6133      	str	r3, [r6, #16]
 8018954:	469c      	mov	ip, r3
 8018956:	f106 0514 	add.w	r5, r6, #20
 801895a:	4f32      	ldr	r7, [pc, #200]	@ (8018a24 <rcl_clock_init+0x104>)
 801895c:	f04f 0e03 	mov.w	lr, #3
 8018960:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8018964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018968:	6823      	ldr	r3, [r4, #0]
 801896a:	4660      	mov	r0, ip
 801896c:	602b      	str	r3, [r5, #0]
 801896e:	60f7      	str	r7, [r6, #12]
 8018970:	f886 e000 	strb.w	lr, [r6]
 8018974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018976:	2e00      	cmp	r6, #0
 8018978:	d0e0      	beq.n	801893c <rcl_clock_init+0x1c>
 801897a:	2300      	movs	r3, #0
 801897c:	f106 0514 	add.w	r5, r6, #20
 8018980:	7033      	strb	r3, [r6, #0]
 8018982:	469c      	mov	ip, r3
 8018984:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8018988:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801898c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801898e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	4660      	mov	r0, ip
 8018994:	602b      	str	r3, [r5, #0]
 8018996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018998:	2c00      	cmp	r4, #0
 801899a:	d0cf      	beq.n	801893c <rcl_clock_init+0x1c>
 801899c:	fab6 f586 	clz	r5, r6
 80189a0:	096d      	lsrs	r5, r5, #5
 80189a2:	2e00      	cmp	r6, #0
 80189a4:	d0ca      	beq.n	801893c <rcl_clock_init+0x1c>
 80189a6:	46a6      	mov	lr, r4
 80189a8:	7035      	strb	r5, [r6, #0]
 80189aa:	f106 0c14 	add.w	ip, r6, #20
 80189ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80189b2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80189b6:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80189ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80189be:	f8de 3000 	ldr.w	r3, [lr]
 80189c2:	2010      	movs	r0, #16
 80189c4:	f8cc 3000 	str.w	r3, [ip]
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	6921      	ldr	r1, [r4, #16]
 80189cc:	4798      	blx	r3
 80189ce:	6130      	str	r0, [r6, #16]
 80189d0:	b320      	cbz	r0, 8018a1c <rcl_clock_init+0xfc>
 80189d2:	2200      	movs	r2, #0
 80189d4:	2300      	movs	r3, #0
 80189d6:	46ac      	mov	ip, r5
 80189d8:	7205      	strb	r5, [r0, #8]
 80189da:	e9c0 2300 	strd	r2, r3, [r0]
 80189de:	4a12      	ldr	r2, [pc, #72]	@ (8018a28 <rcl_clock_init+0x108>)
 80189e0:	2301      	movs	r3, #1
 80189e2:	4660      	mov	r0, ip
 80189e4:	60f2      	str	r2, [r6, #12]
 80189e6:	7033      	strb	r3, [r6, #0]
 80189e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189ea:	2c00      	cmp	r4, #0
 80189ec:	d0a6      	beq.n	801893c <rcl_clock_init+0x1c>
 80189ee:	fab6 f386 	clz	r3, r6
 80189f2:	095b      	lsrs	r3, r3, #5
 80189f4:	2e00      	cmp	r6, #0
 80189f6:	d0a1      	beq.n	801893c <rcl_clock_init+0x1c>
 80189f8:	6133      	str	r3, [r6, #16]
 80189fa:	469c      	mov	ip, r3
 80189fc:	f106 0514 	add.w	r5, r6, #20
 8018a00:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8018a2c <rcl_clock_init+0x10c>
 8018a04:	2702      	movs	r7, #2
 8018a06:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8018a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a0e:	6823      	ldr	r3, [r4, #0]
 8018a10:	4660      	mov	r0, ip
 8018a12:	602b      	str	r3, [r5, #0]
 8018a14:	f8c6 e00c 	str.w	lr, [r6, #12]
 8018a18:	7037      	strb	r7, [r6, #0]
 8018a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a1c:	f04f 0c0a 	mov.w	ip, #10
 8018a20:	e78e      	b.n	8018940 <rcl_clock_init+0x20>
 8018a22:	bf00      	nop
 8018a24:	080188f5 	.word	0x080188f5
 8018a28:	080188fd 	.word	0x080188fd
 8018a2c:	080188ed 	.word	0x080188ed

08018a30 <rcl_clock_get_now>:
 8018a30:	b140      	cbz	r0, 8018a44 <rcl_clock_get_now+0x14>
 8018a32:	b139      	cbz	r1, 8018a44 <rcl_clock_get_now+0x14>
 8018a34:	7803      	ldrb	r3, [r0, #0]
 8018a36:	b11b      	cbz	r3, 8018a40 <rcl_clock_get_now+0x10>
 8018a38:	68c3      	ldr	r3, [r0, #12]
 8018a3a:	b10b      	cbz	r3, 8018a40 <rcl_clock_get_now+0x10>
 8018a3c:	6900      	ldr	r0, [r0, #16]
 8018a3e:	4718      	bx	r3
 8018a40:	2001      	movs	r0, #1
 8018a42:	4770      	bx	lr
 8018a44:	200b      	movs	r0, #11
 8018a46:	4770      	bx	lr

08018a48 <rcl_clock_add_jump_callback>:
 8018a48:	b082      	sub	sp, #8
 8018a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4e:	a906      	add	r1, sp, #24
 8018a50:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8018a54:	e881 000c 	stmia.w	r1, {r2, r3}
 8018a58:	b330      	cbz	r0, 8018aa8 <rcl_clock_add_jump_callback+0x60>
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	3014      	adds	r0, #20
 8018a5e:	f7f8 fe3f 	bl	80116e0 <rcutils_allocator_is_valid>
 8018a62:	b30d      	cbz	r5, 8018aa8 <rcl_clock_add_jump_callback+0x60>
 8018a64:	f080 0301 	eor.w	r3, r0, #1
 8018a68:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8018a6c:	d11c      	bne.n	8018aa8 <rcl_clock_add_jump_callback+0x60>
 8018a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018a70:	2a00      	cmp	r2, #0
 8018a72:	db19      	blt.n	8018aa8 <rcl_clock_add_jump_callback+0x60>
 8018a74:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8018a78:	2901      	cmp	r1, #1
 8018a7a:	f172 0200 	sbcs.w	r2, r2, #0
 8018a7e:	da13      	bge.n	8018aa8 <rcl_clock_add_jump_callback+0x60>
 8018a80:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8018a84:	2f00      	cmp	r7, #0
 8018a86:	d040      	beq.n	8018b0a <rcl_clock_add_jump_callback+0xc2>
 8018a88:	4602      	mov	r2, r0
 8018a8a:	e003      	b.n	8018a94 <rcl_clock_add_jump_callback+0x4c>
 8018a8c:	42bb      	cmp	r3, r7
 8018a8e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8018a92:	d010      	beq.n	8018ab6 <rcl_clock_add_jump_callback+0x6e>
 8018a94:	6811      	ldr	r1, [r2, #0]
 8018a96:	3301      	adds	r3, #1
 8018a98:	42a9      	cmp	r1, r5
 8018a9a:	d1f7      	bne.n	8018a8c <rcl_clock_add_jump_callback+0x44>
 8018a9c:	6a11      	ldr	r1, [r2, #32]
 8018a9e:	42b1      	cmp	r1, r6
 8018aa0:	d1f4      	bne.n	8018a8c <rcl_clock_add_jump_callback+0x44>
 8018aa2:	f04f 0e01 	mov.w	lr, #1
 8018aa6:	e001      	b.n	8018aac <rcl_clock_add_jump_callback+0x64>
 8018aa8:	f04f 0e0b 	mov.w	lr, #11
 8018aac:	4670      	mov	r0, lr
 8018aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ab2:	b002      	add	sp, #8
 8018ab4:	4770      	bx	lr
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018abc:	00d9      	lsls	r1, r3, #3
 8018abe:	69e3      	ldr	r3, [r4, #28]
 8018ac0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8018ac2:	4798      	blx	r3
 8018ac4:	b1f0      	cbz	r0, 8018b04 <rcl_clock_add_jump_callback+0xbc>
 8018ac6:	68a3      	ldr	r3, [r4, #8]
 8018ac8:	f10d 0c18 	add.w	ip, sp, #24
 8018acc:	6060      	str	r0, [r4, #4]
 8018ace:	f04f 0e00 	mov.w	lr, #0
 8018ad2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8018ad6:	f103 0801 	add.w	r8, r3, #1
 8018ada:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8018ade:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018ae2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018ae6:	f105 0708 	add.w	r7, r5, #8
 8018aea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018aec:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8018af0:	e887 0003 	stmia.w	r7, {r0, r1}
 8018af4:	4670      	mov	r0, lr
 8018af6:	622e      	str	r6, [r5, #32]
 8018af8:	f8c4 8008 	str.w	r8, [r4, #8]
 8018afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b00:	b002      	add	sp, #8
 8018b02:	4770      	bx	lr
 8018b04:	f04f 0e0a 	mov.w	lr, #10
 8018b08:	e7d0      	b.n	8018aac <rcl_clock_add_jump_callback+0x64>
 8018b0a:	2128      	movs	r1, #40	@ 0x28
 8018b0c:	e7d7      	b.n	8018abe <rcl_clock_add_jump_callback+0x76>
 8018b0e:	bf00      	nop

08018b10 <rcl_clock_remove_jump_callback>:
 8018b10:	2800      	cmp	r0, #0
 8018b12:	d05f      	beq.n	8018bd4 <rcl_clock_remove_jump_callback+0xc4>
 8018b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b18:	4605      	mov	r5, r0
 8018b1a:	3014      	adds	r0, #20
 8018b1c:	460f      	mov	r7, r1
 8018b1e:	4692      	mov	sl, r2
 8018b20:	f7f8 fdde 	bl	80116e0 <rcutils_allocator_is_valid>
 8018b24:	f080 0001 	eor.w	r0, r0, #1
 8018b28:	b2c0      	uxtb	r0, r0
 8018b2a:	2800      	cmp	r0, #0
 8018b2c:	d13f      	bne.n	8018bae <rcl_clock_remove_jump_callback+0x9e>
 8018b2e:	2f00      	cmp	r7, #0
 8018b30:	d03d      	beq.n	8018bae <rcl_clock_remove_jump_callback+0x9e>
 8018b32:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8018b36:	f1b8 0f00 	cmp.w	r8, #0
 8018b3a:	d00c      	beq.n	8018b56 <rcl_clock_remove_jump_callback+0x46>
 8018b3c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018b40:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8018b44:	464c      	mov	r4, r9
 8018b46:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8018b4a:	6823      	ldr	r3, [r4, #0]
 8018b4c:	42bb      	cmp	r3, r7
 8018b4e:	d005      	beq.n	8018b5c <rcl_clock_remove_jump_callback+0x4c>
 8018b50:	3428      	adds	r4, #40	@ 0x28
 8018b52:	42a6      	cmp	r6, r4
 8018b54:	d1f9      	bne.n	8018b4a <rcl_clock_remove_jump_callback+0x3a>
 8018b56:	2001      	movs	r0, #1
 8018b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b5c:	6a23      	ldr	r3, [r4, #32]
 8018b5e:	3428      	adds	r4, #40	@ 0x28
 8018b60:	42a6      	cmp	r6, r4
 8018b62:	d02f      	beq.n	8018bc4 <rcl_clock_remove_jump_callback+0xb4>
 8018b64:	4553      	cmp	r3, sl
 8018b66:	d1f0      	bne.n	8018b4a <rcl_clock_remove_jump_callback+0x3a>
 8018b68:	46a6      	mov	lr, r4
 8018b6a:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8018b6e:	3428      	adds	r4, #40	@ 0x28
 8018b70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018b7c:	42a6      	cmp	r6, r4
 8018b7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b82:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018b86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018b8a:	d1ed      	bne.n	8018b68 <rcl_clock_remove_jump_callback+0x58>
 8018b8c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8018b90:	60ac      	str	r4, [r5, #8]
 8018b92:	b17c      	cbz	r4, 8018bb4 <rcl_clock_remove_jump_callback+0xa4>
 8018b94:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8018b98:	69eb      	ldr	r3, [r5, #28]
 8018b9a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8018b9c:	4648      	mov	r0, r9
 8018b9e:	00e1      	lsls	r1, r4, #3
 8018ba0:	4798      	blx	r3
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	b1c0      	cbz	r0, 8018bd8 <rcl_clock_remove_jump_callback+0xc8>
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	606b      	str	r3, [r5, #4]
 8018baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bae:	200b      	movs	r0, #11
 8018bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bb4:	4648      	mov	r0, r9
 8018bb6:	69ab      	ldr	r3, [r5, #24]
 8018bb8:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8018bba:	4798      	blx	r3
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	606c      	str	r4, [r5, #4]
 8018bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bc4:	4553      	cmp	r3, sl
 8018bc6:	d1c6      	bne.n	8018b56 <rcl_clock_remove_jump_callback+0x46>
 8018bc8:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8018bcc:	60ac      	str	r4, [r5, #8]
 8018bce:	2c00      	cmp	r4, #0
 8018bd0:	d1e0      	bne.n	8018b94 <rcl_clock_remove_jump_callback+0x84>
 8018bd2:	e7ef      	b.n	8018bb4 <rcl_clock_remove_jump_callback+0xa4>
 8018bd4:	200b      	movs	r0, #11
 8018bd6:	4770      	bx	lr
 8018bd8:	200a      	movs	r0, #10
 8018bda:	e7e9      	b.n	8018bb0 <rcl_clock_remove_jump_callback+0xa0>

08018bdc <_rcl_timer_time_jump>:
 8018bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018be0:	4605      	mov	r5, r0
 8018be2:	b084      	sub	sp, #16
 8018be4:	4614      	mov	r4, r2
 8018be6:	b131      	cbz	r1, 8018bf6 <_rcl_timer_time_jump+0x1a>
 8018be8:	7803      	ldrb	r3, [r0, #0]
 8018bea:	3b02      	subs	r3, #2
 8018bec:	2b01      	cmp	r3, #1
 8018bee:	d93f      	bls.n	8018c70 <_rcl_timer_time_jump+0x94>
 8018bf0:	b004      	add	sp, #16
 8018bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bf6:	6813      	ldr	r3, [r2, #0]
 8018bf8:	a902      	add	r1, sp, #8
 8018bfa:	6818      	ldr	r0, [r3, #0]
 8018bfc:	f7ff ff18 	bl	8018a30 <rcl_clock_get_now>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	d1f5      	bne.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018c04:	6820      	ldr	r0, [r4, #0]
 8018c06:	2105      	movs	r1, #5
 8018c08:	3020      	adds	r0, #32
 8018c0a:	f001 fe19 	bl	801a840 <__atomic_load_8>
 8018c0e:	6823      	ldr	r3, [r4, #0]
 8018c10:	4681      	mov	r9, r0
 8018c12:	4688      	mov	r8, r1
 8018c14:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8018c18:	2105      	movs	r1, #5
 8018c1a:	f001 fe11 	bl	801a840 <__atomic_load_8>
 8018c1e:	4607      	mov	r7, r0
 8018c20:	6820      	ldr	r0, [r4, #0]
 8018c22:	460e      	mov	r6, r1
 8018c24:	2105      	movs	r1, #5
 8018c26:	3018      	adds	r0, #24
 8018c28:	f001 fe0a 	bl	801a840 <__atomic_load_8>
 8018c2c:	782b      	ldrb	r3, [r5, #0]
 8018c2e:	4682      	mov	sl, r0
 8018c30:	460d      	mov	r5, r1
 8018c32:	3b02      	subs	r3, #2
 8018c34:	9a02      	ldr	r2, [sp, #8]
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	9b03      	ldr	r3, [sp, #12]
 8018c3a:	d937      	bls.n	8018cac <_rcl_timer_time_jump+0xd0>
 8018c3c:	42ba      	cmp	r2, r7
 8018c3e:	eb73 0106 	sbcs.w	r1, r3, r6
 8018c42:	da60      	bge.n	8018d06 <_rcl_timer_time_jump+0x12a>
 8018c44:	454a      	cmp	r2, r9
 8018c46:	eb73 0108 	sbcs.w	r1, r3, r8
 8018c4a:	dad1      	bge.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018c4c:	eb1a 0202 	adds.w	r2, sl, r2
 8018c50:	6820      	ldr	r0, [r4, #0]
 8018c52:	eb43 0305 	adc.w	r3, r3, r5
 8018c56:	2505      	movs	r5, #5
 8018c58:	3028      	adds	r0, #40	@ 0x28
 8018c5a:	9500      	str	r5, [sp, #0]
 8018c5c:	f001 fe26 	bl	801a8ac <__atomic_store_8>
 8018c60:	6820      	ldr	r0, [r4, #0]
 8018c62:	9500      	str	r5, [sp, #0]
 8018c64:	3020      	adds	r0, #32
 8018c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018c6a:	f001 fe1f 	bl	801a8ac <__atomic_store_8>
 8018c6e:	e7bf      	b.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018c70:	6813      	ldr	r3, [r2, #0]
 8018c72:	a902      	add	r1, sp, #8
 8018c74:	6818      	ldr	r0, [r3, #0]
 8018c76:	f7ff fedb 	bl	8018a30 <rcl_clock_get_now>
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	d1b8      	bne.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018c82:	4313      	orrs	r3, r2
 8018c84:	d0b4      	beq.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018c86:	6820      	ldr	r0, [r4, #0]
 8018c88:	2105      	movs	r1, #5
 8018c8a:	3028      	adds	r0, #40	@ 0x28
 8018c8c:	f001 fdd8 	bl	801a840 <__atomic_load_8>
 8018c90:	9d02      	ldr	r5, [sp, #8]
 8018c92:	4602      	mov	r2, r0
 8018c94:	9b03      	ldr	r3, [sp, #12]
 8018c96:	6820      	ldr	r0, [r4, #0]
 8018c98:	1b52      	subs	r2, r2, r5
 8018c9a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8018c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8018ca2:	2105      	movs	r1, #5
 8018ca4:	9100      	str	r1, [sp, #0]
 8018ca6:	f001 fe01 	bl	801a8ac <__atomic_store_8>
 8018caa:	e7a1      	b.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018cac:	4313      	orrs	r3, r2
 8018cae:	d09f      	beq.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018cb0:	6820      	ldr	r0, [r4, #0]
 8018cb2:	f04f 0805 	mov.w	r8, #5
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	2200      	movs	r2, #0
 8018cba:	3030      	adds	r0, #48	@ 0x30
 8018cbc:	f8cd 8000 	str.w	r8, [sp]
 8018cc0:	f001 fe2a 	bl	801a918 <__atomic_exchange_8>
 8018cc4:	ea51 0300 	orrs.w	r3, r1, r0
 8018cc8:	4606      	mov	r6, r0
 8018cca:	460f      	mov	r7, r1
 8018ccc:	d090      	beq.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018cce:	9a02      	ldr	r2, [sp, #8]
 8018cd0:	9b03      	ldr	r3, [sp, #12]
 8018cd2:	1a12      	subs	r2, r2, r0
 8018cd4:	f8cd 8000 	str.w	r8, [sp]
 8018cd8:	6820      	ldr	r0, [r4, #0]
 8018cda:	eb63 0301 	sbc.w	r3, r3, r1
 8018cde:	eb12 020a 	adds.w	r2, r2, sl
 8018ce2:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8018ce6:	eb43 0305 	adc.w	r3, r3, r5
 8018cea:	f001 fddf 	bl	801a8ac <__atomic_store_8>
 8018cee:	f8cd 8000 	str.w	r8, [sp]
 8018cf2:	6820      	ldr	r0, [r4, #0]
 8018cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018cf8:	3020      	adds	r0, #32
 8018cfa:	1b92      	subs	r2, r2, r6
 8018cfc:	eb63 0307 	sbc.w	r3, r3, r7
 8018d00:	f001 fdd4 	bl	801a8ac <__atomic_store_8>
 8018d04:	e774      	b.n	8018bf0 <_rcl_timer_time_jump+0x14>
 8018d06:	6820      	ldr	r0, [r4, #0]
 8018d08:	3008      	adds	r0, #8
 8018d0a:	f004 fbb1 	bl	801d470 <rcl_trigger_guard_condition>
 8018d0e:	e76f      	b.n	8018bf0 <_rcl_timer_time_jump+0x14>

08018d10 <rcl_get_zero_initialized_timer>:
 8018d10:	4b01      	ldr	r3, [pc, #4]	@ (8018d18 <rcl_get_zero_initialized_timer+0x8>)
 8018d12:	6818      	ldr	r0, [r3, #0]
 8018d14:	4770      	bx	lr
 8018d16:	bf00      	nop
 8018d18:	0801f764 	.word	0x0801f764
 8018d1c:	00000000 	.word	0x00000000

08018d20 <rcl_timer_init>:
 8018d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d24:	b0ab      	sub	sp, #172	@ 0xac
 8018d26:	460d      	mov	r5, r1
 8018d28:	4604      	mov	r4, r0
 8018d2a:	4692      	mov	sl, r2
 8018d2c:	a837      	add	r0, sp, #220	@ 0xdc
 8018d2e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8018d30:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8018d34:	f7f8 fcd4 	bl	80116e0 <rcutils_allocator_is_valid>
 8018d38:	fab5 f385 	clz	r3, r5
 8018d3c:	095b      	lsrs	r3, r3, #5
 8018d3e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 8018d42:	2c00      	cmp	r4, #0
 8018d44:	bf08      	it	eq
 8018d46:	f043 0301 	orreq.w	r3, r3, #1
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d164      	bne.n	8018e18 <rcl_timer_init+0xf8>
 8018d4e:	f080 0001 	eor.w	r0, r0, #1
 8018d52:	b2c0      	uxtb	r0, r0
 8018d54:	2800      	cmp	r0, #0
 8018d56:	d15f      	bne.n	8018e18 <rcl_timer_init+0xf8>
 8018d58:	6823      	ldr	r3, [r4, #0]
 8018d5a:	b123      	cbz	r3, 8018d66 <rcl_timer_init+0x46>
 8018d5c:	2664      	movs	r6, #100	@ 0x64
 8018d5e:	4630      	mov	r0, r6
 8018d60:	b02b      	add	sp, #172	@ 0xac
 8018d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d66:	a908      	add	r1, sp, #32
 8018d68:	4628      	mov	r0, r5
 8018d6a:	f7ff fe61 	bl	8018a30 <rcl_clock_get_now>
 8018d6e:	4606      	mov	r6, r0
 8018d70:	2800      	cmp	r0, #0
 8018d72:	d1f4      	bne.n	8018d5e <rcl_timer_init+0x3e>
 8018d74:	f10d 0b18 	add.w	fp, sp, #24
 8018d78:	ae0b      	add	r6, sp, #44	@ 0x2c
 8018d7a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8018d7e:	4658      	mov	r0, fp
 8018d80:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8018d84:	f004 fa7e 	bl	801d284 <rcl_get_zero_initialized_guard_condition>
 8018d88:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8018d8c:	e889 0003 	stmia.w	r9, {r0, r1}
 8018d90:	4630      	mov	r0, r6
 8018d92:	f004 fb51 	bl	801d438 <rcl_guard_condition_get_default_options>
 8018d96:	ab0d      	add	r3, sp, #52	@ 0x34
 8018d98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018d9c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018da0:	4651      	mov	r1, sl
 8018da2:	4648      	mov	r0, r9
 8018da4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018da8:	f004 fa76 	bl	801d298 <rcl_guard_condition_init>
 8018dac:	4606      	mov	r6, r0
 8018dae:	2800      	cmp	r0, #0
 8018db0:	d1d5      	bne.n	8018d5e <rcl_timer_init+0x3e>
 8018db2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	2b01      	cmp	r3, #1
 8018db8:	d033      	beq.n	8018e22 <rcl_timer_init+0x102>
 8018dba:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8018dbc:	4642      	mov	r2, r8
 8018dbe:	463b      	mov	r3, r7
 8018dc0:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 8018dc4:	911a      	str	r1, [sp, #104]	@ 0x68
 8018dc6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8018dca:	f04f 0a00 	mov.w	sl, #0
 8018dce:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8018dd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018dd6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018e80 <rcl_timer_init+0x160>
 8018dda:	eb12 0008 	adds.w	r0, r2, r8
 8018dde:	eb47 0103 	adc.w	r1, r7, r3
 8018de2:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8018de6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8018dea:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8018dee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018df6:	f8de 3000 	ldr.w	r3, [lr]
 8018dfa:	2050      	movs	r0, #80	@ 0x50
 8018dfc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8018e00:	4619      	mov	r1, r3
 8018e02:	f8cc 3000 	str.w	r3, [ip]
 8018e06:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8018e08:	4798      	blx	r3
 8018e0a:	6020      	str	r0, [r4, #0]
 8018e0c:	b358      	cbz	r0, 8018e66 <rcl_timer_init+0x146>
 8018e0e:	2250      	movs	r2, #80	@ 0x50
 8018e10:	a916      	add	r1, sp, #88	@ 0x58
 8018e12:	f005 fa52 	bl	801e2ba <memcpy>
 8018e16:	e7a2      	b.n	8018d5e <rcl_timer_init+0x3e>
 8018e18:	260b      	movs	r6, #11
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	b02b      	add	sp, #172	@ 0xac
 8018e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e22:	2001      	movs	r0, #1
 8018e24:	2100      	movs	r1, #0
 8018e26:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8018e2a:	ab12      	add	r3, sp, #72	@ 0x48
 8018e2c:	4a16      	ldr	r2, [pc, #88]	@ (8018e88 <rcl_timer_init+0x168>)
 8018e2e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8018e32:	9405      	str	r4, [sp, #20]
 8018e34:	9204      	str	r2, [sp, #16]
 8018e36:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8018e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e3e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018e42:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8018e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018e48:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8018e52:	f7ff fdf9 	bl	8018a48 <rcl_clock_add_jump_callback>
 8018e56:	4603      	mov	r3, r0
 8018e58:	2800      	cmp	r0, #0
 8018e5a:	d0ae      	beq.n	8018dba <rcl_timer_init+0x9a>
 8018e5c:	4648      	mov	r0, r9
 8018e5e:	461e      	mov	r6, r3
 8018e60:	f004 fac4 	bl	801d3ec <rcl_guard_condition_fini>
 8018e64:	e77b      	b.n	8018d5e <rcl_timer_init+0x3e>
 8018e66:	4648      	mov	r0, r9
 8018e68:	260a      	movs	r6, #10
 8018e6a:	f004 fabf 	bl	801d3ec <rcl_guard_condition_fini>
 8018e6e:	4622      	mov	r2, r4
 8018e70:	4905      	ldr	r1, [pc, #20]	@ (8018e88 <rcl_timer_init+0x168>)
 8018e72:	4628      	mov	r0, r5
 8018e74:	f7ff fe4c 	bl	8018b10 <rcl_clock_remove_jump_callback>
 8018e78:	e771      	b.n	8018d5e <rcl_timer_init+0x3e>
 8018e7a:	bf00      	nop
 8018e7c:	f3af 8000 	nop.w
	...
 8018e88:	08018bdd 	.word	0x08018bdd

08018e8c <rcl_timer_call>:
 8018e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e90:	b087      	sub	sp, #28
 8018e92:	2800      	cmp	r0, #0
 8018e94:	d06c      	beq.n	8018f70 <rcl_timer_call+0xe4>
 8018e96:	6803      	ldr	r3, [r0, #0]
 8018e98:	4604      	mov	r4, r0
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d062      	beq.n	8018f64 <rcl_timer_call+0xd8>
 8018e9e:	f3bf 8f5b 	dmb	ish
 8018ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018ea6:	f3bf 8f5b 	dmb	ish
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d14f      	bne.n	8018f4e <rcl_timer_call+0xc2>
 8018eae:	6803      	ldr	r3, [r0, #0]
 8018eb0:	a904      	add	r1, sp, #16
 8018eb2:	6818      	ldr	r0, [r3, #0]
 8018eb4:	f7ff fdbc 	bl	8018a30 <rcl_clock_get_now>
 8018eb8:	4605      	mov	r5, r0
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d149      	bne.n	8018f52 <rcl_timer_call+0xc6>
 8018ebe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	db49      	blt.n	8018f5a <rcl_timer_call+0xce>
 8018ec6:	2605      	movs	r6, #5
 8018ec8:	6820      	ldr	r0, [r4, #0]
 8018eca:	9600      	str	r6, [sp, #0]
 8018ecc:	3020      	adds	r0, #32
 8018ece:	f001 fd23 	bl	801a918 <__atomic_exchange_8>
 8018ed2:	6823      	ldr	r3, [r4, #0]
 8018ed4:	4680      	mov	r8, r0
 8018ed6:	f3bf 8f5b 	dmb	ish
 8018eda:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8018ede:	f3bf 8f5b 	dmb	ish
 8018ee2:	6820      	ldr	r0, [r4, #0]
 8018ee4:	4689      	mov	r9, r1
 8018ee6:	4631      	mov	r1, r6
 8018ee8:	3028      	adds	r0, #40	@ 0x28
 8018eea:	f001 fca9 	bl	801a840 <__atomic_load_8>
 8018eee:	460f      	mov	r7, r1
 8018ef0:	4631      	mov	r1, r6
 8018ef2:	4606      	mov	r6, r0
 8018ef4:	6820      	ldr	r0, [r4, #0]
 8018ef6:	3018      	adds	r0, #24
 8018ef8:	f001 fca2 	bl	801a840 <__atomic_load_8>
 8018efc:	4602      	mov	r2, r0
 8018efe:	9804      	ldr	r0, [sp, #16]
 8018f00:	460b      	mov	r3, r1
 8018f02:	18b6      	adds	r6, r6, r2
 8018f04:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018f08:	4692      	mov	sl, r2
 8018f0a:	eb47 0701 	adc.w	r7, r7, r1
 8018f0e:	4286      	cmp	r6, r0
 8018f10:	eb77 010c 	sbcs.w	r1, r7, ip
 8018f14:	da04      	bge.n	8018f20 <rcl_timer_call+0x94>
 8018f16:	ea53 0102 	orrs.w	r1, r3, r2
 8018f1a:	d12e      	bne.n	8018f7a <rcl_timer_call+0xee>
 8018f1c:	4606      	mov	r6, r0
 8018f1e:	4667      	mov	r7, ip
 8018f20:	6820      	ldr	r0, [r4, #0]
 8018f22:	2105      	movs	r1, #5
 8018f24:	4632      	mov	r2, r6
 8018f26:	463b      	mov	r3, r7
 8018f28:	3028      	adds	r0, #40	@ 0x28
 8018f2a:	9100      	str	r1, [sp, #0]
 8018f2c:	f001 fcbe 	bl	801a8ac <__atomic_store_8>
 8018f30:	f1bb 0f00 	cmp.w	fp, #0
 8018f34:	d00d      	beq.n	8018f52 <rcl_timer_call+0xc6>
 8018f36:	9a04      	ldr	r2, [sp, #16]
 8018f38:	4620      	mov	r0, r4
 8018f3a:	9b05      	ldr	r3, [sp, #20]
 8018f3c:	ebb2 0208 	subs.w	r2, r2, r8
 8018f40:	eb63 0309 	sbc.w	r3, r3, r9
 8018f44:	47d8      	blx	fp
 8018f46:	4628      	mov	r0, r5
 8018f48:	b007      	add	sp, #28
 8018f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f4e:	f240 3521 	movw	r5, #801	@ 0x321
 8018f52:	4628      	mov	r0, r5
 8018f54:	b007      	add	sp, #28
 8018f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f5a:	2501      	movs	r5, #1
 8018f5c:	4628      	mov	r0, r5
 8018f5e:	b007      	add	sp, #28
 8018f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f64:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8018f68:	4628      	mov	r0, r5
 8018f6a:	b007      	add	sp, #28
 8018f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f70:	250b      	movs	r5, #11
 8018f72:	4628      	mov	r0, r5
 8018f74:	b007      	add	sp, #28
 8018f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f7a:	1b80      	subs	r0, r0, r6
 8018f7c:	eb6c 0107 	sbc.w	r1, ip, r7
 8018f80:	3801      	subs	r0, #1
 8018f82:	f161 0100 	sbc.w	r1, r1, #0
 8018f86:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018f8a:	f7e7 fa11 	bl	80003b0 <__aeabi_ldivmod>
 8018f8e:	9b02      	ldr	r3, [sp, #8]
 8018f90:	3001      	adds	r0, #1
 8018f92:	f141 0100 	adc.w	r1, r1, #0
 8018f96:	fb00 f303 	mul.w	r3, r0, r3
 8018f9a:	fb01 330a 	mla	r3, r1, sl, r3
 8018f9e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8018fa2:	1986      	adds	r6, r0, r6
 8018fa4:	4453      	add	r3, sl
 8018fa6:	eb43 0707 	adc.w	r7, r3, r7
 8018faa:	e7b9      	b.n	8018f20 <rcl_timer_call+0x94>

08018fac <rcl_timer_is_ready>:
 8018fac:	b570      	push	{r4, r5, r6, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	b380      	cbz	r0, 8019014 <rcl_timer_is_ready+0x68>
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	b38b      	cbz	r3, 801901c <rcl_timer_is_ready+0x70>
 8018fb8:	460d      	mov	r5, r1
 8018fba:	b359      	cbz	r1, 8019014 <rcl_timer_is_ready+0x68>
 8018fbc:	f3bf 8f5b 	dmb	ish
 8018fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018fc4:	f3bf 8f5b 	dmb	ish
 8018fc8:	b953      	cbnz	r3, 8018fe0 <rcl_timer_is_ready+0x34>
 8018fca:	6803      	ldr	r3, [r0, #0]
 8018fcc:	4669      	mov	r1, sp
 8018fce:	6818      	ldr	r0, [r3, #0]
 8018fd0:	f7ff fd2e 	bl	8018a30 <rcl_clock_get_now>
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	b148      	cbz	r0, 8018fec <rcl_timer_is_ready+0x40>
 8018fd8:	f240 3321 	movw	r3, #801	@ 0x321
 8018fdc:	4298      	cmp	r0, r3
 8018fde:	d102      	bne.n	8018fe6 <rcl_timer_is_ready+0x3a>
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	461e      	mov	r6, r3
 8018fe4:	702b      	strb	r3, [r5, #0]
 8018fe6:	4630      	mov	r0, r6
 8018fe8:	b002      	add	sp, #8
 8018fea:	bd70      	pop	{r4, r5, r6, pc}
 8018fec:	6820      	ldr	r0, [r4, #0]
 8018fee:	2105      	movs	r1, #5
 8018ff0:	3028      	adds	r0, #40	@ 0x28
 8018ff2:	f001 fc25 	bl	801a840 <__atomic_load_8>
 8018ff6:	9b00      	ldr	r3, [sp, #0]
 8018ff8:	1ac0      	subs	r0, r0, r3
 8018ffa:	9b01      	ldr	r3, [sp, #4]
 8018ffc:	eb61 0103 	sbc.w	r1, r1, r3
 8019000:	2801      	cmp	r0, #1
 8019002:	4630      	mov	r0, r6
 8019004:	f171 0300 	sbcs.w	r3, r1, #0
 8019008:	bfb4      	ite	lt
 801900a:	2301      	movlt	r3, #1
 801900c:	2300      	movge	r3, #0
 801900e:	702b      	strb	r3, [r5, #0]
 8019010:	b002      	add	sp, #8
 8019012:	bd70      	pop	{r4, r5, r6, pc}
 8019014:	260b      	movs	r6, #11
 8019016:	4630      	mov	r0, r6
 8019018:	b002      	add	sp, #8
 801901a:	bd70      	pop	{r4, r5, r6, pc}
 801901c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019020:	e7e1      	b.n	8018fe6 <rcl_timer_is_ready+0x3a>
 8019022:	bf00      	nop

08019024 <rcl_timer_get_time_until_next_call>:
 8019024:	b570      	push	{r4, r5, r6, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	b330      	cbz	r0, 8019078 <rcl_timer_get_time_until_next_call+0x54>
 801902a:	6803      	ldr	r3, [r0, #0]
 801902c:	4604      	mov	r4, r0
 801902e:	b33b      	cbz	r3, 8019080 <rcl_timer_get_time_until_next_call+0x5c>
 8019030:	460d      	mov	r5, r1
 8019032:	b309      	cbz	r1, 8019078 <rcl_timer_get_time_until_next_call+0x54>
 8019034:	f3bf 8f5b 	dmb	ish
 8019038:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801903c:	f3bf 8f5b 	dmb	ish
 8019040:	b9ab      	cbnz	r3, 801906e <rcl_timer_get_time_until_next_call+0x4a>
 8019042:	6803      	ldr	r3, [r0, #0]
 8019044:	4669      	mov	r1, sp
 8019046:	6818      	ldr	r0, [r3, #0]
 8019048:	f7ff fcf2 	bl	8018a30 <rcl_clock_get_now>
 801904c:	4606      	mov	r6, r0
 801904e:	b958      	cbnz	r0, 8019068 <rcl_timer_get_time_until_next_call+0x44>
 8019050:	6820      	ldr	r0, [r4, #0]
 8019052:	2105      	movs	r1, #5
 8019054:	3028      	adds	r0, #40	@ 0x28
 8019056:	f001 fbf3 	bl	801a840 <__atomic_load_8>
 801905a:	9b00      	ldr	r3, [sp, #0]
 801905c:	1ac0      	subs	r0, r0, r3
 801905e:	9b01      	ldr	r3, [sp, #4]
 8019060:	eb61 0103 	sbc.w	r1, r1, r3
 8019064:	6028      	str	r0, [r5, #0]
 8019066:	6069      	str	r1, [r5, #4]
 8019068:	4630      	mov	r0, r6
 801906a:	b002      	add	sp, #8
 801906c:	bd70      	pop	{r4, r5, r6, pc}
 801906e:	f240 3621 	movw	r6, #801	@ 0x321
 8019072:	4630      	mov	r0, r6
 8019074:	b002      	add	sp, #8
 8019076:	bd70      	pop	{r4, r5, r6, pc}
 8019078:	260b      	movs	r6, #11
 801907a:	4630      	mov	r0, r6
 801907c:	b002      	add	sp, #8
 801907e:	bd70      	pop	{r4, r5, r6, pc}
 8019080:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019084:	e7f0      	b.n	8019068 <rcl_timer_get_time_until_next_call+0x44>
 8019086:	bf00      	nop

08019088 <rcl_timer_get_guard_condition>:
 8019088:	b130      	cbz	r0, 8019098 <rcl_timer_get_guard_condition+0x10>
 801908a:	6800      	ldr	r0, [r0, #0]
 801908c:	b120      	cbz	r0, 8019098 <rcl_timer_get_guard_condition+0x10>
 801908e:	68c3      	ldr	r3, [r0, #12]
 8019090:	b10b      	cbz	r3, 8019096 <rcl_timer_get_guard_condition+0xe>
 8019092:	3008      	adds	r0, #8
 8019094:	4770      	bx	lr
 8019096:	4618      	mov	r0, r3
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop

0801909c <rcl_validate_enclave_name_with_size>:
 801909c:	2800      	cmp	r0, #0
 801909e:	d049      	beq.n	8019134 <rcl_validate_enclave_name_with_size+0x98>
 80190a0:	b570      	push	{r4, r5, r6, lr}
 80190a2:	4615      	mov	r5, r2
 80190a4:	b0c2      	sub	sp, #264	@ 0x108
 80190a6:	b19a      	cbz	r2, 80190d0 <rcl_validate_enclave_name_with_size+0x34>
 80190a8:	461e      	mov	r6, r3
 80190aa:	466a      	mov	r2, sp
 80190ac:	ab01      	add	r3, sp, #4
 80190ae:	460c      	mov	r4, r1
 80190b0:	f002 f85a 	bl	801b168 <rmw_validate_namespace_with_size>
 80190b4:	4684      	mov	ip, r0
 80190b6:	b9b8      	cbnz	r0, 80190e8 <rcl_validate_enclave_name_with_size+0x4c>
 80190b8:	9900      	ldr	r1, [sp, #0]
 80190ba:	b171      	cbz	r1, 80190da <rcl_validate_enclave_name_with_size+0x3e>
 80190bc:	2907      	cmp	r1, #7
 80190be:	d019      	beq.n	80190f4 <rcl_validate_enclave_name_with_size+0x58>
 80190c0:	1e4b      	subs	r3, r1, #1
 80190c2:	2b05      	cmp	r3, #5
 80190c4:	d83a      	bhi.n	801913c <rcl_validate_enclave_name_with_size+0xa0>
 80190c6:	e8df f003 	tbb	[pc, r3]
 80190ca:	2926      	.short	0x2926
 80190cc:	1d322f2c 	.word	0x1d322f2c
 80190d0:	f04f 0c0b 	mov.w	ip, #11
 80190d4:	4660      	mov	r0, ip
 80190d6:	b042      	add	sp, #264	@ 0x108
 80190d8:	bd70      	pop	{r4, r5, r6, pc}
 80190da:	2907      	cmp	r1, #7
 80190dc:	d00a      	beq.n	80190f4 <rcl_validate_enclave_name_with_size+0x58>
 80190de:	2300      	movs	r3, #0
 80190e0:	4660      	mov	r0, ip
 80190e2:	602b      	str	r3, [r5, #0]
 80190e4:	b042      	add	sp, #264	@ 0x108
 80190e6:	bd70      	pop	{r4, r5, r6, pc}
 80190e8:	f7fe fe08 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 80190ec:	4684      	mov	ip, r0
 80190ee:	4660      	mov	r0, ip
 80190f0:	b042      	add	sp, #264	@ 0x108
 80190f2:	bd70      	pop	{r4, r5, r6, pc}
 80190f4:	2cff      	cmp	r4, #255	@ 0xff
 80190f6:	d9f2      	bls.n	80190de <rcl_validate_enclave_name_with_size+0x42>
 80190f8:	6029      	str	r1, [r5, #0]
 80190fa:	2e00      	cmp	r6, #0
 80190fc:	d0ea      	beq.n	80190d4 <rcl_validate_enclave_name_with_size+0x38>
 80190fe:	23fe      	movs	r3, #254	@ 0xfe
 8019100:	6033      	str	r3, [r6, #0]
 8019102:	e7e7      	b.n	80190d4 <rcl_validate_enclave_name_with_size+0x38>
 8019104:	2306      	movs	r3, #6
 8019106:	602b      	str	r3, [r5, #0]
 8019108:	2e00      	cmp	r6, #0
 801910a:	d0e3      	beq.n	80190d4 <rcl_validate_enclave_name_with_size+0x38>
 801910c:	9b01      	ldr	r3, [sp, #4]
 801910e:	4660      	mov	r0, ip
 8019110:	6033      	str	r3, [r6, #0]
 8019112:	b042      	add	sp, #264	@ 0x108
 8019114:	bd70      	pop	{r4, r5, r6, pc}
 8019116:	2301      	movs	r3, #1
 8019118:	602b      	str	r3, [r5, #0]
 801911a:	e7f5      	b.n	8019108 <rcl_validate_enclave_name_with_size+0x6c>
 801911c:	2302      	movs	r3, #2
 801911e:	602b      	str	r3, [r5, #0]
 8019120:	e7f2      	b.n	8019108 <rcl_validate_enclave_name_with_size+0x6c>
 8019122:	2303      	movs	r3, #3
 8019124:	602b      	str	r3, [r5, #0]
 8019126:	e7ef      	b.n	8019108 <rcl_validate_enclave_name_with_size+0x6c>
 8019128:	2304      	movs	r3, #4
 801912a:	602b      	str	r3, [r5, #0]
 801912c:	e7ec      	b.n	8019108 <rcl_validate_enclave_name_with_size+0x6c>
 801912e:	2305      	movs	r3, #5
 8019130:	602b      	str	r3, [r5, #0]
 8019132:	e7e9      	b.n	8019108 <rcl_validate_enclave_name_with_size+0x6c>
 8019134:	f04f 0c0b 	mov.w	ip, #11
 8019138:	4660      	mov	r0, ip
 801913a:	4770      	bx	lr
 801913c:	460b      	mov	r3, r1
 801913e:	4a04      	ldr	r2, [pc, #16]	@ (8019150 <rcl_validate_enclave_name_with_size+0xb4>)
 8019140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019144:	a802      	add	r0, sp, #8
 8019146:	f001 fd33 	bl	801abb0 <rcutils_snprintf>
 801914a:	f04f 0c01 	mov.w	ip, #1
 801914e:	e7c1      	b.n	80190d4 <rcl_validate_enclave_name_with_size+0x38>
 8019150:	0801f768 	.word	0x0801f768

08019154 <rcl_validate_enclave_name>:
 8019154:	b168      	cbz	r0, 8019172 <rcl_validate_enclave_name+0x1e>
 8019156:	b570      	push	{r4, r5, r6, lr}
 8019158:	460d      	mov	r5, r1
 801915a:	4616      	mov	r6, r2
 801915c:	4604      	mov	r4, r0
 801915e:	f7e7 f8c9 	bl	80002f4 <strlen>
 8019162:	4633      	mov	r3, r6
 8019164:	4601      	mov	r1, r0
 8019166:	462a      	mov	r2, r5
 8019168:	4620      	mov	r0, r4
 801916a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916e:	f7ff bf95 	b.w	801909c <rcl_validate_enclave_name_with_size>
 8019172:	200b      	movs	r0, #11
 8019174:	4770      	bx	lr
 8019176:	bf00      	nop

08019178 <rcl_get_zero_initialized_wait_set>:
 8019178:	b510      	push	{r4, lr}
 801917a:	4c08      	ldr	r4, [pc, #32]	@ (801919c <rcl_get_zero_initialized_wait_set+0x24>)
 801917c:	4686      	mov	lr, r0
 801917e:	4684      	mov	ip, r0
 8019180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019182:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019188:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801918c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801918e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	4670      	mov	r0, lr
 8019196:	f8cc 3000 	str.w	r3, [ip]
 801919a:	bd10      	pop	{r4, pc}
 801919c:	0801f7c8 	.word	0x0801f7c8

080191a0 <rcl_wait_set_is_valid>:
 80191a0:	b118      	cbz	r0, 80191aa <rcl_wait_set_is_valid+0xa>
 80191a2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80191a4:	3800      	subs	r0, #0
 80191a6:	bf18      	it	ne
 80191a8:	2001      	movne	r0, #1
 80191aa:	4770      	bx	lr

080191ac <rcl_wait_set_fini>:
 80191ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b0:	b082      	sub	sp, #8
 80191b2:	2800      	cmp	r0, #0
 80191b4:	f000 8095 	beq.w	80192e2 <rcl_wait_set_fini+0x136>
 80191b8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80191ba:	4604      	mov	r4, r0
 80191bc:	2e00      	cmp	r6, #0
 80191be:	f000 808c 	beq.w	80192da <rcl_wait_set_fini+0x12e>
 80191c2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80191c4:	f002 fd7c 	bl	801bcc0 <rmw_destroy_wait_set>
 80191c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80191ca:	1e06      	subs	r6, r0, #0
 80191cc:	bf18      	it	ne
 80191ce:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80191d2:	2d00      	cmp	r5, #0
 80191d4:	f000 8081 	beq.w	80192da <rcl_wait_set_fini+0x12e>
 80191d8:	2700      	movs	r7, #0
 80191da:	6820      	ldr	r0, [r4, #0]
 80191dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80191e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80191e2:	6067      	str	r7, [r4, #4]
 80191e4:	602f      	str	r7, [r5, #0]
 80191e6:	b120      	cbz	r0, 80191f2 <rcl_wait_set_fini+0x46>
 80191e8:	9101      	str	r1, [sp, #4]
 80191ea:	47c0      	blx	r8
 80191ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80191ee:	9901      	ldr	r1, [sp, #4]
 80191f0:	6027      	str	r7, [r4, #0]
 80191f2:	68a8      	ldr	r0, [r5, #8]
 80191f4:	b120      	cbz	r0, 8019200 <rcl_wait_set_fini+0x54>
 80191f6:	47c0      	blx	r8
 80191f8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80191fa:	2300      	movs	r3, #0
 80191fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8019200:	f04f 0800 	mov.w	r8, #0
 8019204:	68a0      	ldr	r0, [r4, #8]
 8019206:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8019208:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801920a:	f8c4 800c 	str.w	r8, [r4, #12]
 801920e:	f8c5 800c 	str.w	r8, [r5, #12]
 8019212:	b128      	cbz	r0, 8019220 <rcl_wait_set_fini+0x74>
 8019214:	47b8      	blx	r7
 8019216:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019218:	f8c4 8008 	str.w	r8, [r4, #8]
 801921c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801921e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8019220:	f04f 0800 	mov.w	r8, #0
 8019224:	6968      	ldr	r0, [r5, #20]
 8019226:	f8c5 8010 	str.w	r8, [r5, #16]
 801922a:	b128      	cbz	r0, 8019238 <rcl_wait_set_fini+0x8c>
 801922c:	47b8      	blx	r7
 801922e:	f8c5 8014 	str.w	r8, [r5, #20]
 8019232:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019234:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8019236:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8019238:	f04f 0800 	mov.w	r8, #0
 801923c:	6920      	ldr	r0, [r4, #16]
 801923e:	f8c4 8014 	str.w	r8, [r4, #20]
 8019242:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8019246:	b128      	cbz	r0, 8019254 <rcl_wait_set_fini+0xa8>
 8019248:	47b8      	blx	r7
 801924a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801924c:	f8c4 8010 	str.w	r8, [r4, #16]
 8019250:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8019252:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8019254:	f04f 0800 	mov.w	r8, #0
 8019258:	69a0      	ldr	r0, [r4, #24]
 801925a:	f8c4 801c 	str.w	r8, [r4, #28]
 801925e:	f8c5 8018 	str.w	r8, [r5, #24]
 8019262:	b128      	cbz	r0, 8019270 <rcl_wait_set_fini+0xc4>
 8019264:	9101      	str	r1, [sp, #4]
 8019266:	47b8      	blx	r7
 8019268:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801926a:	9901      	ldr	r1, [sp, #4]
 801926c:	f8c4 8018 	str.w	r8, [r4, #24]
 8019270:	6a28      	ldr	r0, [r5, #32]
 8019272:	b120      	cbz	r0, 801927e <rcl_wait_set_fini+0xd2>
 8019274:	47b8      	blx	r7
 8019276:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019278:	2300      	movs	r3, #0
 801927a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801927e:	2700      	movs	r7, #0
 8019280:	6a20      	ldr	r0, [r4, #32]
 8019282:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8019286:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8019288:	6267      	str	r7, [r4, #36]	@ 0x24
 801928a:	626f      	str	r7, [r5, #36]	@ 0x24
 801928c:	b120      	cbz	r0, 8019298 <rcl_wait_set_fini+0xec>
 801928e:	9101      	str	r1, [sp, #4]
 8019290:	47c0      	blx	r8
 8019292:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019294:	9901      	ldr	r1, [sp, #4]
 8019296:	6227      	str	r7, [r4, #32]
 8019298:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801929a:	b120      	cbz	r0, 80192a6 <rcl_wait_set_fini+0xfa>
 801929c:	47c0      	blx	r8
 801929e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80192a0:	2300      	movs	r3, #0
 80192a2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80192a6:	2700      	movs	r7, #0
 80192a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80192aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80192ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80192b0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80192b2:	632f      	str	r7, [r5, #48]	@ 0x30
 80192b4:	b120      	cbz	r0, 80192c0 <rcl_wait_set_fini+0x114>
 80192b6:	9101      	str	r1, [sp, #4]
 80192b8:	47c0      	blx	r8
 80192ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80192bc:	9901      	ldr	r1, [sp, #4]
 80192be:	62a7      	str	r7, [r4, #40]	@ 0x28
 80192c0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80192c2:	b120      	cbz	r0, 80192ce <rcl_wait_set_fini+0x122>
 80192c4:	47c0      	blx	r8
 80192c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80192c8:	2300      	movs	r3, #0
 80192ca:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80192ce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80192d0:	4628      	mov	r0, r5
 80192d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80192d4:	4798      	blx	r3
 80192d6:	2300      	movs	r3, #0
 80192d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80192da:	4630      	mov	r0, r6
 80192dc:	b002      	add	sp, #8
 80192de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e2:	260b      	movs	r6, #11
 80192e4:	4630      	mov	r0, r6
 80192e6:	b002      	add	sp, #8
 80192e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192ec <rcl_wait_set_add_subscription>:
 80192ec:	b318      	cbz	r0, 8019336 <rcl_wait_set_add_subscription+0x4a>
 80192ee:	b538      	push	{r3, r4, r5, lr}
 80192f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80192f2:	4604      	mov	r4, r0
 80192f4:	b30b      	cbz	r3, 801933a <rcl_wait_set_add_subscription+0x4e>
 80192f6:	b319      	cbz	r1, 8019340 <rcl_wait_set_add_subscription+0x54>
 80192f8:	681d      	ldr	r5, [r3, #0]
 80192fa:	6840      	ldr	r0, [r0, #4]
 80192fc:	4285      	cmp	r5, r0
 80192fe:	d217      	bcs.n	8019330 <rcl_wait_set_add_subscription+0x44>
 8019300:	1c68      	adds	r0, r5, #1
 8019302:	6018      	str	r0, [r3, #0]
 8019304:	6823      	ldr	r3, [r4, #0]
 8019306:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801930a:	b102      	cbz	r2, 801930e <rcl_wait_set_add_subscription+0x22>
 801930c:	6015      	str	r5, [r2, #0]
 801930e:	4608      	mov	r0, r1
 8019310:	f7ff fadc 	bl	80188cc <rcl_subscription_get_rmw_handle>
 8019314:	b150      	cbz	r0, 801932c <rcl_wait_set_add_subscription+0x40>
 8019316:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019318:	6842      	ldr	r2, [r0, #4]
 801931a:	2000      	movs	r0, #0
 801931c:	689b      	ldr	r3, [r3, #8]
 801931e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019322:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019324:	6853      	ldr	r3, [r2, #4]
 8019326:	3301      	adds	r3, #1
 8019328:	6053      	str	r3, [r2, #4]
 801932a:	bd38      	pop	{r3, r4, r5, pc}
 801932c:	2001      	movs	r0, #1
 801932e:	bd38      	pop	{r3, r4, r5, pc}
 8019330:	f240 3086 	movw	r0, #902	@ 0x386
 8019334:	bd38      	pop	{r3, r4, r5, pc}
 8019336:	200b      	movs	r0, #11
 8019338:	4770      	bx	lr
 801933a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801933e:	bd38      	pop	{r3, r4, r5, pc}
 8019340:	200b      	movs	r0, #11
 8019342:	bd38      	pop	{r3, r4, r5, pc}

08019344 <rcl_wait_set_clear>:
 8019344:	2800      	cmp	r0, #0
 8019346:	d074      	beq.n	8019432 <rcl_wait_set_clear+0xee>
 8019348:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801934a:	b510      	push	{r4, lr}
 801934c:	4604      	mov	r4, r0
 801934e:	2b00      	cmp	r3, #0
 8019350:	d071      	beq.n	8019436 <rcl_wait_set_clear+0xf2>
 8019352:	6800      	ldr	r0, [r0, #0]
 8019354:	b138      	cbz	r0, 8019366 <rcl_wait_set_clear+0x22>
 8019356:	6862      	ldr	r2, [r4, #4]
 8019358:	2100      	movs	r1, #0
 801935a:	0092      	lsls	r2, r2, #2
 801935c:	f004 fee4 	bl	801e128 <memset>
 8019360:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019362:	2200      	movs	r2, #0
 8019364:	601a      	str	r2, [r3, #0]
 8019366:	68a0      	ldr	r0, [r4, #8]
 8019368:	b138      	cbz	r0, 801937a <rcl_wait_set_clear+0x36>
 801936a:	68e2      	ldr	r2, [r4, #12]
 801936c:	2100      	movs	r1, #0
 801936e:	0092      	lsls	r2, r2, #2
 8019370:	f004 feda 	bl	801e128 <memset>
 8019374:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019376:	2200      	movs	r2, #0
 8019378:	60da      	str	r2, [r3, #12]
 801937a:	69a0      	ldr	r0, [r4, #24]
 801937c:	b138      	cbz	r0, 801938e <rcl_wait_set_clear+0x4a>
 801937e:	69e2      	ldr	r2, [r4, #28]
 8019380:	2100      	movs	r1, #0
 8019382:	0092      	lsls	r2, r2, #2
 8019384:	f004 fed0 	bl	801e128 <memset>
 8019388:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801938a:	2200      	movs	r2, #0
 801938c:	619a      	str	r2, [r3, #24]
 801938e:	6a20      	ldr	r0, [r4, #32]
 8019390:	b138      	cbz	r0, 80193a2 <rcl_wait_set_clear+0x5e>
 8019392:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8019394:	2100      	movs	r1, #0
 8019396:	0092      	lsls	r2, r2, #2
 8019398:	f004 fec6 	bl	801e128 <memset>
 801939c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801939e:	2200      	movs	r2, #0
 80193a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80193a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80193a4:	b138      	cbz	r0, 80193b6 <rcl_wait_set_clear+0x72>
 80193a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80193a8:	2100      	movs	r1, #0
 80193aa:	0092      	lsls	r2, r2, #2
 80193ac:	f004 febc 	bl	801e128 <memset>
 80193b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80193b2:	2200      	movs	r2, #0
 80193b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80193b6:	6920      	ldr	r0, [r4, #16]
 80193b8:	b138      	cbz	r0, 80193ca <rcl_wait_set_clear+0x86>
 80193ba:	6962      	ldr	r2, [r4, #20]
 80193bc:	2100      	movs	r1, #0
 80193be:	0092      	lsls	r2, r2, #2
 80193c0:	f004 feb2 	bl	801e128 <memset>
 80193c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80193c6:	2200      	movs	r2, #0
 80193c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80193ca:	6898      	ldr	r0, [r3, #8]
 80193cc:	b138      	cbz	r0, 80193de <rcl_wait_set_clear+0x9a>
 80193ce:	685a      	ldr	r2, [r3, #4]
 80193d0:	2100      	movs	r1, #0
 80193d2:	0092      	lsls	r2, r2, #2
 80193d4:	f004 fea8 	bl	801e128 <memset>
 80193d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80193da:	2200      	movs	r2, #0
 80193dc:	605a      	str	r2, [r3, #4]
 80193de:	6958      	ldr	r0, [r3, #20]
 80193e0:	b138      	cbz	r0, 80193f2 <rcl_wait_set_clear+0xae>
 80193e2:	691a      	ldr	r2, [r3, #16]
 80193e4:	2100      	movs	r1, #0
 80193e6:	0092      	lsls	r2, r2, #2
 80193e8:	f004 fe9e 	bl	801e128 <memset>
 80193ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80193ee:	2200      	movs	r2, #0
 80193f0:	611a      	str	r2, [r3, #16]
 80193f2:	6a18      	ldr	r0, [r3, #32]
 80193f4:	b138      	cbz	r0, 8019406 <rcl_wait_set_clear+0xc2>
 80193f6:	69da      	ldr	r2, [r3, #28]
 80193f8:	2100      	movs	r1, #0
 80193fa:	0092      	lsls	r2, r2, #2
 80193fc:	f004 fe94 	bl	801e128 <memset>
 8019400:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019402:	2200      	movs	r2, #0
 8019404:	61da      	str	r2, [r3, #28]
 8019406:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019408:	b138      	cbz	r0, 801941a <rcl_wait_set_clear+0xd6>
 801940a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801940c:	2100      	movs	r1, #0
 801940e:	0092      	lsls	r2, r2, #2
 8019410:	f004 fe8a 	bl	801e128 <memset>
 8019414:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019416:	2200      	movs	r2, #0
 8019418:	629a      	str	r2, [r3, #40]	@ 0x28
 801941a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801941c:	b140      	cbz	r0, 8019430 <rcl_wait_set_clear+0xec>
 801941e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019420:	2100      	movs	r1, #0
 8019422:	0092      	lsls	r2, r2, #2
 8019424:	f004 fe80 	bl	801e128 <memset>
 8019428:	2300      	movs	r3, #0
 801942a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801942c:	4618      	mov	r0, r3
 801942e:	6353      	str	r3, [r2, #52]	@ 0x34
 8019430:	bd10      	pop	{r4, pc}
 8019432:	200b      	movs	r0, #11
 8019434:	4770      	bx	lr
 8019436:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801943a:	bd10      	pop	{r4, pc}

0801943c <rcl_wait_set_resize>:
 801943c:	2800      	cmp	r0, #0
 801943e:	f000 8180 	beq.w	8019742 <rcl_wait_set_resize+0x306>
 8019442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019446:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8019448:	b083      	sub	sp, #12
 801944a:	4605      	mov	r5, r0
 801944c:	2c00      	cmp	r4, #0
 801944e:	f000 817a 	beq.w	8019746 <rcl_wait_set_resize+0x30a>
 8019452:	f04f 0900 	mov.w	r9, #0
 8019456:	461f      	mov	r7, r3
 8019458:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801945c:	4688      	mov	r8, r1
 801945e:	4616      	mov	r6, r2
 8019460:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8019464:	f8c0 9004 	str.w	r9, [r0, #4]
 8019468:	f8c4 9000 	str.w	r9, [r4]
 801946c:	2900      	cmp	r1, #0
 801946e:	f000 80bf 	beq.w	80195f0 <rcl_wait_set_resize+0x1b4>
 8019472:	008c      	lsls	r4, r1, #2
 8019474:	4652      	mov	r2, sl
 8019476:	6800      	ldr	r0, [r0, #0]
 8019478:	4621      	mov	r1, r4
 801947a:	9301      	str	r3, [sp, #4]
 801947c:	4798      	blx	r3
 801947e:	9b01      	ldr	r3, [sp, #4]
 8019480:	6028      	str	r0, [r5, #0]
 8019482:	2800      	cmp	r0, #0
 8019484:	f000 80f6 	beq.w	8019674 <rcl_wait_set_resize+0x238>
 8019488:	4622      	mov	r2, r4
 801948a:	4649      	mov	r1, r9
 801948c:	9301      	str	r3, [sp, #4]
 801948e:	f004 fe4b 	bl	801e128 <memset>
 8019492:	f8c5 8004 	str.w	r8, [r5, #4]
 8019496:	4652      	mov	r2, sl
 8019498:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801949c:	4621      	mov	r1, r4
 801949e:	9b01      	ldr	r3, [sp, #4]
 80194a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80194a4:	f8c8 9004 	str.w	r9, [r8, #4]
 80194a8:	4798      	blx	r3
 80194aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80194ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80194b0:	689b      	ldr	r3, [r3, #8]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	f000 814a 	beq.w	801974c <rcl_wait_set_resize+0x310>
 80194b8:	4622      	mov	r2, r4
 80194ba:	4649      	mov	r1, r9
 80194bc:	4618      	mov	r0, r3
 80194be:	f004 fe33 	bl	801e128 <memset>
 80194c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194c4:	f04f 0800 	mov.w	r8, #0
 80194c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80194cc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80194d0:	f8c5 800c 	str.w	r8, [r5, #12]
 80194d4:	f8c4 800c 	str.w	r8, [r4, #12]
 80194d8:	2e00      	cmp	r6, #0
 80194da:	f040 809b 	bne.w	8019614 <rcl_wait_set_resize+0x1d8>
 80194de:	68a8      	ldr	r0, [r5, #8]
 80194e0:	b128      	cbz	r0, 80194ee <rcl_wait_set_resize+0xb2>
 80194e2:	4649      	mov	r1, r9
 80194e4:	4790      	blx	r2
 80194e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194e8:	60ae      	str	r6, [r5, #8]
 80194ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80194ee:	f04f 0800 	mov.w	r8, #0
 80194f2:	19f6      	adds	r6, r6, r7
 80194f4:	f8c4 8010 	str.w	r8, [r4, #16]
 80194f8:	f040 80a2 	bne.w	8019640 <rcl_wait_set_resize+0x204>
 80194fc:	6960      	ldr	r0, [r4, #20]
 80194fe:	b130      	cbz	r0, 801950e <rcl_wait_set_resize+0xd2>
 8019500:	4649      	mov	r1, r9
 8019502:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8019504:	4798      	blx	r3
 8019506:	6166      	str	r6, [r4, #20]
 8019508:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801950a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801950e:	2600      	movs	r6, #0
 8019510:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8019514:	616e      	str	r6, [r5, #20]
 8019516:	6426      	str	r6, [r4, #64]	@ 0x40
 8019518:	2f00      	cmp	r7, #0
 801951a:	f040 80af 	bne.w	801967c <rcl_wait_set_resize+0x240>
 801951e:	6928      	ldr	r0, [r5, #16]
 8019520:	b138      	cbz	r0, 8019532 <rcl_wait_set_resize+0xf6>
 8019522:	4649      	mov	r1, r9
 8019524:	47d0      	blx	sl
 8019526:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019528:	612f      	str	r7, [r5, #16]
 801952a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801952e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8019532:	2600      	movs	r6, #0
 8019534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019536:	61ee      	str	r6, [r5, #28]
 8019538:	61a6      	str	r6, [r4, #24]
 801953a:	2b00      	cmp	r3, #0
 801953c:	f040 8093 	bne.w	8019666 <rcl_wait_set_resize+0x22a>
 8019540:	69a8      	ldr	r0, [r5, #24]
 8019542:	b120      	cbz	r0, 801954e <rcl_wait_set_resize+0x112>
 8019544:	4649      	mov	r1, r9
 8019546:	47d0      	blx	sl
 8019548:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801954a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801954c:	61ab      	str	r3, [r5, #24]
 801954e:	6a20      	ldr	r0, [r4, #32]
 8019550:	b128      	cbz	r0, 801955e <rcl_wait_set_resize+0x122>
 8019552:	4649      	mov	r1, r9
 8019554:	47d0      	blx	sl
 8019556:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019558:	2300      	movs	r3, #0
 801955a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801955e:	2600      	movs	r6, #0
 8019560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019562:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8019564:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8019568:	626e      	str	r6, [r5, #36]	@ 0x24
 801956a:	6266      	str	r6, [r4, #36]	@ 0x24
 801956c:	2b00      	cmp	r3, #0
 801956e:	f000 8098 	beq.w	80196a2 <rcl_wait_set_resize+0x266>
 8019572:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8019576:	463a      	mov	r2, r7
 8019578:	6a28      	ldr	r0, [r5, #32]
 801957a:	4651      	mov	r1, sl
 801957c:	47c8      	blx	r9
 801957e:	6228      	str	r0, [r5, #32]
 8019580:	2800      	cmp	r0, #0
 8019582:	d077      	beq.n	8019674 <rcl_wait_set_resize+0x238>
 8019584:	4652      	mov	r2, sl
 8019586:	4631      	mov	r1, r6
 8019588:	f004 fdce 	bl	801e128 <memset>
 801958c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801958e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019590:	463a      	mov	r2, r7
 8019592:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019594:	4651      	mov	r1, sl
 8019596:	626b      	str	r3, [r5, #36]	@ 0x24
 8019598:	62a6      	str	r6, [r4, #40]	@ 0x28
 801959a:	47c8      	blx	r9
 801959c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801959e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80195a0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80195a2:	2c00      	cmp	r4, #0
 80195a4:	f000 80f2 	beq.w	801978c <rcl_wait_set_resize+0x350>
 80195a8:	4620      	mov	r0, r4
 80195aa:	4652      	mov	r2, sl
 80195ac:	4631      	mov	r1, r6
 80195ae:	f004 fdbb 	bl	801e128 <memset>
 80195b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195b4:	2600      	movs	r6, #0
 80195b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80195b8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80195ba:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80195be:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80195c0:	6326      	str	r6, [r4, #48]	@ 0x30
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	f040 8097 	bne.w	80196f6 <rcl_wait_set_resize+0x2ba>
 80195c8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80195ca:	b120      	cbz	r0, 80195d6 <rcl_wait_set_resize+0x19a>
 80195cc:	4639      	mov	r1, r7
 80195ce:	47c0      	blx	r8
 80195d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80195d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195d4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80195d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80195d8:	2800      	cmp	r0, #0
 80195da:	d04c      	beq.n	8019676 <rcl_wait_set_resize+0x23a>
 80195dc:	4639      	mov	r1, r7
 80195de:	47c0      	blx	r8
 80195e0:	2300      	movs	r3, #0
 80195e2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80195e4:	4618      	mov	r0, r3
 80195e6:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80195ea:	b003      	add	sp, #12
 80195ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f0:	6800      	ldr	r0, [r0, #0]
 80195f2:	b120      	cbz	r0, 80195fe <rcl_wait_set_resize+0x1c2>
 80195f4:	4651      	mov	r1, sl
 80195f6:	47d8      	blx	fp
 80195f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195fa:	f8c5 8000 	str.w	r8, [r5]
 80195fe:	68a0      	ldr	r0, [r4, #8]
 8019600:	2800      	cmp	r0, #0
 8019602:	f43f af5f 	beq.w	80194c4 <rcl_wait_set_resize+0x88>
 8019606:	4651      	mov	r1, sl
 8019608:	47d8      	blx	fp
 801960a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801960c:	2300      	movs	r3, #0
 801960e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8019612:	e757      	b.n	80194c4 <rcl_wait_set_resize+0x88>
 8019614:	00b4      	lsls	r4, r6, #2
 8019616:	464a      	mov	r2, r9
 8019618:	68a8      	ldr	r0, [r5, #8]
 801961a:	4621      	mov	r1, r4
 801961c:	4798      	blx	r3
 801961e:	60a8      	str	r0, [r5, #8]
 8019620:	b340      	cbz	r0, 8019674 <rcl_wait_set_resize+0x238>
 8019622:	4622      	mov	r2, r4
 8019624:	4641      	mov	r1, r8
 8019626:	f004 fd7f 	bl	801e128 <memset>
 801962a:	f04f 0800 	mov.w	r8, #0
 801962e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019630:	60ee      	str	r6, [r5, #12]
 8019632:	19f6      	adds	r6, r6, r7
 8019634:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019638:	f8c4 8010 	str.w	r8, [r4, #16]
 801963c:	f43f af5e 	beq.w	80194fc <rcl_wait_set_resize+0xc0>
 8019640:	00b6      	lsls	r6, r6, #2
 8019642:	464a      	mov	r2, r9
 8019644:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8019646:	6960      	ldr	r0, [r4, #20]
 8019648:	4631      	mov	r1, r6
 801964a:	4798      	blx	r3
 801964c:	4681      	mov	r9, r0
 801964e:	6160      	str	r0, [r4, #20]
 8019650:	2800      	cmp	r0, #0
 8019652:	f000 8084 	beq.w	801975e <rcl_wait_set_resize+0x322>
 8019656:	4632      	mov	r2, r6
 8019658:	4641      	mov	r1, r8
 801965a:	f004 fd65 	bl	801e128 <memset>
 801965e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019660:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019664:	e753      	b.n	801950e <rcl_wait_set_resize+0xd2>
 8019666:	009c      	lsls	r4, r3, #2
 8019668:	464a      	mov	r2, r9
 801966a:	69a8      	ldr	r0, [r5, #24]
 801966c:	4621      	mov	r1, r4
 801966e:	47c0      	blx	r8
 8019670:	61a8      	str	r0, [r5, #24]
 8019672:	bb40      	cbnz	r0, 80196c6 <rcl_wait_set_resize+0x28a>
 8019674:	200a      	movs	r0, #10
 8019676:	b003      	add	sp, #12
 8019678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801967c:	00bc      	lsls	r4, r7, #2
 801967e:	464a      	mov	r2, r9
 8019680:	6928      	ldr	r0, [r5, #16]
 8019682:	4621      	mov	r1, r4
 8019684:	47c0      	blx	r8
 8019686:	6128      	str	r0, [r5, #16]
 8019688:	2800      	cmp	r0, #0
 801968a:	d0f3      	beq.n	8019674 <rcl_wait_set_resize+0x238>
 801968c:	4622      	mov	r2, r4
 801968e:	4631      	mov	r1, r6
 8019690:	f004 fd4a 	bl	801e128 <memset>
 8019694:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019696:	616f      	str	r7, [r5, #20]
 8019698:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801969c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80196a0:	e747      	b.n	8019532 <rcl_wait_set_resize+0xf6>
 80196a2:	6a28      	ldr	r0, [r5, #32]
 80196a4:	b120      	cbz	r0, 80196b0 <rcl_wait_set_resize+0x274>
 80196a6:	4639      	mov	r1, r7
 80196a8:	47c0      	blx	r8
 80196aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80196ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80196ae:	622b      	str	r3, [r5, #32]
 80196b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80196b2:	2800      	cmp	r0, #0
 80196b4:	f43f af7e 	beq.w	80195b4 <rcl_wait_set_resize+0x178>
 80196b8:	4639      	mov	r1, r7
 80196ba:	47c0      	blx	r8
 80196bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80196be:	2300      	movs	r3, #0
 80196c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80196c4:	e776      	b.n	80195b4 <rcl_wait_set_resize+0x178>
 80196c6:	4622      	mov	r2, r4
 80196c8:	4631      	mov	r1, r6
 80196ca:	f004 fd2d 	bl	801e128 <memset>
 80196ce:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80196d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80196d2:	464a      	mov	r2, r9
 80196d4:	6a38      	ldr	r0, [r7, #32]
 80196d6:	4621      	mov	r1, r4
 80196d8:	61eb      	str	r3, [r5, #28]
 80196da:	61fe      	str	r6, [r7, #28]
 80196dc:	47c0      	blx	r8
 80196de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80196e0:	6238      	str	r0, [r7, #32]
 80196e2:	6a1f      	ldr	r7, [r3, #32]
 80196e4:	2f00      	cmp	r7, #0
 80196e6:	d04a      	beq.n	801977e <rcl_wait_set_resize+0x342>
 80196e8:	4622      	mov	r2, r4
 80196ea:	4631      	mov	r1, r6
 80196ec:	4638      	mov	r0, r7
 80196ee:	f004 fd1b 	bl	801e128 <memset>
 80196f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80196f4:	e733      	b.n	801955e <rcl_wait_set_resize+0x122>
 80196f6:	009c      	lsls	r4, r3, #2
 80196f8:	463a      	mov	r2, r7
 80196fa:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80196fc:	4621      	mov	r1, r4
 80196fe:	47c8      	blx	r9
 8019700:	62a8      	str	r0, [r5, #40]	@ 0x28
 8019702:	2800      	cmp	r0, #0
 8019704:	d0b6      	beq.n	8019674 <rcl_wait_set_resize+0x238>
 8019706:	4622      	mov	r2, r4
 8019708:	4631      	mov	r1, r6
 801970a:	f004 fd0d 	bl	801e128 <memset>
 801970e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8019712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019714:	463a      	mov	r2, r7
 8019716:	4621      	mov	r1, r4
 8019718:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801971c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801971e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8019722:	47c8      	blx	r9
 8019724:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019726:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801972c:	2b00      	cmp	r3, #0
 801972e:	d034      	beq.n	801979a <rcl_wait_set_resize+0x35e>
 8019730:	4622      	mov	r2, r4
 8019732:	4631      	mov	r1, r6
 8019734:	4618      	mov	r0, r3
 8019736:	f004 fcf7 	bl	801e128 <memset>
 801973a:	4630      	mov	r0, r6
 801973c:	b003      	add	sp, #12
 801973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019742:	200b      	movs	r0, #11
 8019744:	4770      	bx	lr
 8019746:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801974a:	e794      	b.n	8019676 <rcl_wait_set_resize+0x23a>
 801974c:	6828      	ldr	r0, [r5, #0]
 801974e:	4651      	mov	r1, sl
 8019750:	9301      	str	r3, [sp, #4]
 8019752:	47d8      	blx	fp
 8019754:	9b01      	ldr	r3, [sp, #4]
 8019756:	200a      	movs	r0, #10
 8019758:	e9c5 3300 	strd	r3, r3, [r5]
 801975c:	e78b      	b.n	8019676 <rcl_wait_set_resize+0x23a>
 801975e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019760:	68a8      	ldr	r0, [r5, #8]
 8019762:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019766:	4798      	blx	r3
 8019768:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801976a:	6928      	ldr	r0, [r5, #16]
 801976c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801976e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019770:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8019774:	4790      	blx	r2
 8019776:	200a      	movs	r0, #10
 8019778:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801977c:	e77b      	b.n	8019676 <rcl_wait_set_resize+0x23a>
 801977e:	69a8      	ldr	r0, [r5, #24]
 8019780:	4649      	mov	r1, r9
 8019782:	47d0      	blx	sl
 8019784:	200a      	movs	r0, #10
 8019786:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801978a:	e774      	b.n	8019676 <rcl_wait_set_resize+0x23a>
 801978c:	6a28      	ldr	r0, [r5, #32]
 801978e:	4639      	mov	r1, r7
 8019790:	47c0      	blx	r8
 8019792:	200a      	movs	r0, #10
 8019794:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8019798:	e76d      	b.n	8019676 <rcl_wait_set_resize+0x23a>
 801979a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801979c:	4639      	mov	r1, r7
 801979e:	9301      	str	r3, [sp, #4]
 80197a0:	47c0      	blx	r8
 80197a2:	9b01      	ldr	r3, [sp, #4]
 80197a4:	200a      	movs	r0, #10
 80197a6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80197aa:	e764      	b.n	8019676 <rcl_wait_set_resize+0x23a>

080197ac <rcl_wait_set_init>:
 80197ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b0:	b085      	sub	sp, #20
 80197b2:	4605      	mov	r5, r0
 80197b4:	460e      	mov	r6, r1
 80197b6:	4617      	mov	r7, r2
 80197b8:	a812      	add	r0, sp, #72	@ 0x48
 80197ba:	4698      	mov	r8, r3
 80197bc:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80197c0:	f7f7 ff8e 	bl	80116e0 <rcutils_allocator_is_valid>
 80197c4:	2d00      	cmp	r5, #0
 80197c6:	d072      	beq.n	80198ae <rcl_wait_set_init+0x102>
 80197c8:	f080 0001 	eor.w	r0, r0, #1
 80197cc:	b2c0      	uxtb	r0, r0
 80197ce:	2800      	cmp	r0, #0
 80197d0:	d16d      	bne.n	80198ae <rcl_wait_set_init+0x102>
 80197d2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80197d6:	f1ba 0f00 	cmp.w	sl, #0
 80197da:	d004      	beq.n	80197e6 <rcl_wait_set_init+0x3a>
 80197dc:	2464      	movs	r4, #100	@ 0x64
 80197de:	4620      	mov	r0, r4
 80197e0:	b005      	add	sp, #20
 80197e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197e6:	f1b9 0f00 	cmp.w	r9, #0
 80197ea:	d060      	beq.n	80198ae <rcl_wait_set_init+0x102>
 80197ec:	4648      	mov	r0, r9
 80197ee:	f7fe faa3 	bl	8017d38 <rcl_context_is_valid>
 80197f2:	2800      	cmp	r0, #0
 80197f4:	d068      	beq.n	80198c8 <rcl_wait_set_init+0x11c>
 80197f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80197f8:	205c      	movs	r0, #92	@ 0x5c
 80197fa:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80197fc:	4798      	blx	r3
 80197fe:	6328      	str	r0, [r5, #48]	@ 0x30
 8019800:	2800      	cmp	r0, #0
 8019802:	d063      	beq.n	80198cc <rcl_wait_set_init+0x120>
 8019804:	225c      	movs	r2, #92	@ 0x5c
 8019806:	4651      	mov	r1, sl
 8019808:	f004 fc8e 	bl	801e128 <memset>
 801980c:	ac12      	add	r4, sp, #72	@ 0x48
 801980e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8019812:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8019816:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801981a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801981e:	eb03 0e02 	add.w	lr, r3, r2
 8019822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019824:	f8d9 9000 	ldr.w	r9, [r9]
 8019828:	449e      	add	lr, r3
 801982a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801982c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8019830:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8019834:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8019838:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801983c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8019840:	44be      	add	lr, r7
 8019842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019846:	6823      	ldr	r3, [r4, #0]
 8019848:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801984c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8019850:	f8cc 3000 	str.w	r3, [ip]
 8019854:	f002 fa2a 	bl	801bcac <rmw_create_wait_set>
 8019858:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801985a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801985e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019860:	b350      	cbz	r0, 80198b8 <rcl_wait_set_init+0x10c>
 8019862:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8019864:	4643      	mov	r3, r8
 8019866:	463a      	mov	r2, r7
 8019868:	4631      	mov	r1, r6
 801986a:	9402      	str	r4, [sp, #8]
 801986c:	4628      	mov	r0, r5
 801986e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8019870:	9401      	str	r4, [sp, #4]
 8019872:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8019874:	9400      	str	r4, [sp, #0]
 8019876:	f7ff fde1 	bl	801943c <rcl_wait_set_resize>
 801987a:	4604      	mov	r4, r0
 801987c:	2800      	cmp	r0, #0
 801987e:	d0ae      	beq.n	80197de <rcl_wait_set_init+0x32>
 8019880:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019882:	bb2b      	cbnz	r3, 80198d0 <rcl_wait_set_init+0x124>
 8019884:	2600      	movs	r6, #0
 8019886:	4628      	mov	r0, r5
 8019888:	4633      	mov	r3, r6
 801988a:	4632      	mov	r2, r6
 801988c:	4631      	mov	r1, r6
 801988e:	9600      	str	r6, [sp, #0]
 8019890:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8019894:	f7ff fdd2 	bl	801943c <rcl_wait_set_resize>
 8019898:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801989a:	2800      	cmp	r0, #0
 801989c:	d09f      	beq.n	80197de <rcl_wait_set_init+0x32>
 801989e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80198a0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80198a2:	4798      	blx	r3
 80198a4:	4620      	mov	r0, r4
 80198a6:	632e      	str	r6, [r5, #48]	@ 0x30
 80198a8:	b005      	add	sp, #20
 80198aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ae:	240b      	movs	r4, #11
 80198b0:	4620      	mov	r0, r4
 80198b2:	b005      	add	sp, #20
 80198b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b8:	2401      	movs	r4, #1
 80198ba:	f002 fa01 	bl	801bcc0 <rmw_destroy_wait_set>
 80198be:	2800      	cmp	r0, #0
 80198c0:	bf18      	it	ne
 80198c2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80198c6:	e7dd      	b.n	8019884 <rcl_wait_set_init+0xd8>
 80198c8:	2465      	movs	r4, #101	@ 0x65
 80198ca:	e788      	b.n	80197de <rcl_wait_set_init+0x32>
 80198cc:	240a      	movs	r4, #10
 80198ce:	e786      	b.n	80197de <rcl_wait_set_init+0x32>
 80198d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80198d2:	e7f2      	b.n	80198ba <rcl_wait_set_init+0x10e>

080198d4 <rcl_wait_set_add_guard_condition>:
 80198d4:	b318      	cbz	r0, 801991e <rcl_wait_set_add_guard_condition+0x4a>
 80198d6:	b538      	push	{r3, r4, r5, lr}
 80198d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80198da:	4604      	mov	r4, r0
 80198dc:	b30b      	cbz	r3, 8019922 <rcl_wait_set_add_guard_condition+0x4e>
 80198de:	b319      	cbz	r1, 8019928 <rcl_wait_set_add_guard_condition+0x54>
 80198e0:	68dd      	ldr	r5, [r3, #12]
 80198e2:	68c0      	ldr	r0, [r0, #12]
 80198e4:	4285      	cmp	r5, r0
 80198e6:	d217      	bcs.n	8019918 <rcl_wait_set_add_guard_condition+0x44>
 80198e8:	1c68      	adds	r0, r5, #1
 80198ea:	60d8      	str	r0, [r3, #12]
 80198ec:	68a3      	ldr	r3, [r4, #8]
 80198ee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80198f2:	b102      	cbz	r2, 80198f6 <rcl_wait_set_add_guard_condition+0x22>
 80198f4:	6015      	str	r5, [r2, #0]
 80198f6:	4608      	mov	r0, r1
 80198f8:	f003 fdca 	bl	801d490 <rcl_guard_condition_get_rmw_handle>
 80198fc:	b150      	cbz	r0, 8019914 <rcl_wait_set_add_guard_condition+0x40>
 80198fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019900:	6842      	ldr	r2, [r0, #4]
 8019902:	2000      	movs	r0, #0
 8019904:	695b      	ldr	r3, [r3, #20]
 8019906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801990a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801990c:	6913      	ldr	r3, [r2, #16]
 801990e:	3301      	adds	r3, #1
 8019910:	6113      	str	r3, [r2, #16]
 8019912:	bd38      	pop	{r3, r4, r5, pc}
 8019914:	2001      	movs	r0, #1
 8019916:	bd38      	pop	{r3, r4, r5, pc}
 8019918:	f240 3086 	movw	r0, #902	@ 0x386
 801991c:	bd38      	pop	{r3, r4, r5, pc}
 801991e:	200b      	movs	r0, #11
 8019920:	4770      	bx	lr
 8019922:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019926:	bd38      	pop	{r3, r4, r5, pc}
 8019928:	200b      	movs	r0, #11
 801992a:	bd38      	pop	{r3, r4, r5, pc}

0801992c <rcl_wait_set_add_timer>:
 801992c:	b328      	cbz	r0, 801997a <rcl_wait_set_add_timer+0x4e>
 801992e:	b538      	push	{r3, r4, r5, lr}
 8019930:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019932:	4604      	mov	r4, r0
 8019934:	b31b      	cbz	r3, 801997e <rcl_wait_set_add_timer+0x52>
 8019936:	b329      	cbz	r1, 8019984 <rcl_wait_set_add_timer+0x58>
 8019938:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801993a:	6965      	ldr	r5, [r4, #20]
 801993c:	42a8      	cmp	r0, r5
 801993e:	d219      	bcs.n	8019974 <rcl_wait_set_add_timer+0x48>
 8019940:	1c45      	adds	r5, r0, #1
 8019942:	641d      	str	r5, [r3, #64]	@ 0x40
 8019944:	6923      	ldr	r3, [r4, #16]
 8019946:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801994a:	b102      	cbz	r2, 801994e <rcl_wait_set_add_timer+0x22>
 801994c:	6010      	str	r0, [r2, #0]
 801994e:	4608      	mov	r0, r1
 8019950:	f7ff fb9a 	bl	8019088 <rcl_timer_get_guard_condition>
 8019954:	b168      	cbz	r0, 8019972 <rcl_wait_set_add_timer+0x46>
 8019956:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019958:	68e3      	ldr	r3, [r4, #12]
 801995a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801995c:	3b01      	subs	r3, #1
 801995e:	441d      	add	r5, r3
 8019960:	f003 fd96 	bl	801d490 <rcl_guard_condition_get_rmw_handle>
 8019964:	b180      	cbz	r0, 8019988 <rcl_wait_set_add_timer+0x5c>
 8019966:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019968:	6842      	ldr	r2, [r0, #4]
 801996a:	2000      	movs	r0, #0
 801996c:	695b      	ldr	r3, [r3, #20]
 801996e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019972:	bd38      	pop	{r3, r4, r5, pc}
 8019974:	f240 3086 	movw	r0, #902	@ 0x386
 8019978:	bd38      	pop	{r3, r4, r5, pc}
 801997a:	200b      	movs	r0, #11
 801997c:	4770      	bx	lr
 801997e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019982:	bd38      	pop	{r3, r4, r5, pc}
 8019984:	200b      	movs	r0, #11
 8019986:	bd38      	pop	{r3, r4, r5, pc}
 8019988:	2001      	movs	r0, #1
 801998a:	bd38      	pop	{r3, r4, r5, pc}

0801998c <rcl_wait_set_add_client>:
 801998c:	b318      	cbz	r0, 80199d6 <rcl_wait_set_add_client+0x4a>
 801998e:	b538      	push	{r3, r4, r5, lr}
 8019990:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019992:	4604      	mov	r4, r0
 8019994:	b30b      	cbz	r3, 80199da <rcl_wait_set_add_client+0x4e>
 8019996:	b319      	cbz	r1, 80199e0 <rcl_wait_set_add_client+0x54>
 8019998:	699d      	ldr	r5, [r3, #24]
 801999a:	69c0      	ldr	r0, [r0, #28]
 801999c:	4285      	cmp	r5, r0
 801999e:	d217      	bcs.n	80199d0 <rcl_wait_set_add_client+0x44>
 80199a0:	1c68      	adds	r0, r5, #1
 80199a2:	6198      	str	r0, [r3, #24]
 80199a4:	69a3      	ldr	r3, [r4, #24]
 80199a6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80199aa:	b102      	cbz	r2, 80199ae <rcl_wait_set_add_client+0x22>
 80199ac:	6015      	str	r5, [r2, #0]
 80199ae:	4608      	mov	r0, r1
 80199b0:	f7fe f914 	bl	8017bdc <rcl_client_get_rmw_handle>
 80199b4:	b150      	cbz	r0, 80199cc <rcl_wait_set_add_client+0x40>
 80199b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80199b8:	6842      	ldr	r2, [r0, #4]
 80199ba:	2000      	movs	r0, #0
 80199bc:	6a1b      	ldr	r3, [r3, #32]
 80199be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80199c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80199c4:	69d3      	ldr	r3, [r2, #28]
 80199c6:	3301      	adds	r3, #1
 80199c8:	61d3      	str	r3, [r2, #28]
 80199ca:	bd38      	pop	{r3, r4, r5, pc}
 80199cc:	2001      	movs	r0, #1
 80199ce:	bd38      	pop	{r3, r4, r5, pc}
 80199d0:	f240 3086 	movw	r0, #902	@ 0x386
 80199d4:	bd38      	pop	{r3, r4, r5, pc}
 80199d6:	200b      	movs	r0, #11
 80199d8:	4770      	bx	lr
 80199da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80199de:	bd38      	pop	{r3, r4, r5, pc}
 80199e0:	200b      	movs	r0, #11
 80199e2:	bd38      	pop	{r3, r4, r5, pc}

080199e4 <rcl_wait_set_add_service>:
 80199e4:	b318      	cbz	r0, 8019a2e <rcl_wait_set_add_service+0x4a>
 80199e6:	b538      	push	{r3, r4, r5, lr}
 80199e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80199ea:	4604      	mov	r4, r0
 80199ec:	b30b      	cbz	r3, 8019a32 <rcl_wait_set_add_service+0x4e>
 80199ee:	b319      	cbz	r1, 8019a38 <rcl_wait_set_add_service+0x54>
 80199f0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80199f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80199f4:	4285      	cmp	r5, r0
 80199f6:	d217      	bcs.n	8019a28 <rcl_wait_set_add_service+0x44>
 80199f8:	1c68      	adds	r0, r5, #1
 80199fa:	6258      	str	r0, [r3, #36]	@ 0x24
 80199fc:	6a23      	ldr	r3, [r4, #32]
 80199fe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8019a02:	b102      	cbz	r2, 8019a06 <rcl_wait_set_add_service+0x22>
 8019a04:	6015      	str	r5, [r2, #0]
 8019a06:	4608      	mov	r0, r1
 8019a08:	f7fe fea2 	bl	8018750 <rcl_service_get_rmw_handle>
 8019a0c:	b150      	cbz	r0, 8019a24 <rcl_wait_set_add_service+0x40>
 8019a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a10:	6842      	ldr	r2, [r0, #4]
 8019a12:	2000      	movs	r0, #0
 8019a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019a1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019a1c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8019a1e:	3301      	adds	r3, #1
 8019a20:	6293      	str	r3, [r2, #40]	@ 0x28
 8019a22:	bd38      	pop	{r3, r4, r5, pc}
 8019a24:	2001      	movs	r0, #1
 8019a26:	bd38      	pop	{r3, r4, r5, pc}
 8019a28:	f240 3086 	movw	r0, #902	@ 0x386
 8019a2c:	bd38      	pop	{r3, r4, r5, pc}
 8019a2e:	200b      	movs	r0, #11
 8019a30:	4770      	bx	lr
 8019a32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019a36:	bd38      	pop	{r3, r4, r5, pc}
 8019a38:	200b      	movs	r0, #11
 8019a3a:	bd38      	pop	{r3, r4, r5, pc}
 8019a3c:	0000      	movs	r0, r0
	...

08019a40 <rcl_wait>:
 8019a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a44:	ed2d 8b02 	vpush	{d8}
 8019a48:	b08d      	sub	sp, #52	@ 0x34
 8019a4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f000 814f 	beq.w	8019cf2 <rcl_wait+0x2b2>
 8019a54:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8019a56:	4605      	mov	r5, r0
 8019a58:	2e00      	cmp	r6, #0
 8019a5a:	f000 811a 	beq.w	8019c92 <rcl_wait+0x252>
 8019a5e:	6843      	ldr	r3, [r0, #4]
 8019a60:	b983      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a62:	68eb      	ldr	r3, [r5, #12]
 8019a64:	b973      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a66:	696b      	ldr	r3, [r5, #20]
 8019a68:	b963      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a6a:	69eb      	ldr	r3, [r5, #28]
 8019a6c:	b953      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8019a70:	b943      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8019a74:	b933      	cbnz	r3, 8019a84 <rcl_wait+0x44>
 8019a76:	f240 3085 	movw	r0, #901	@ 0x385
 8019a7a:	b00d      	add	sp, #52	@ 0x34
 8019a7c:	ecbd 8b02 	vpop	{d8}
 8019a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a84:	9b04      	ldr	r3, [sp, #16]
 8019a86:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8019a88:	2b01      	cmp	r3, #1
 8019a8a:	9b05      	ldr	r3, [sp, #20]
 8019a8c:	f173 0300 	sbcs.w	r3, r3, #0
 8019a90:	f2c0 80f8 	blt.w	8019c84 <rcl_wait+0x244>
 8019a94:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8019a98:	2a00      	cmp	r2, #0
 8019a9a:	f000 810f 	beq.w	8019cbc <rcl_wait+0x27c>
 8019a9e:	2400      	movs	r4, #0
 8019aa0:	4613      	mov	r3, r2
 8019aa2:	f240 3921 	movw	r9, #801	@ 0x321
 8019aa6:	4632      	mov	r2, r6
 8019aa8:	46a2      	mov	sl, r4
 8019aaa:	46a3      	mov	fp, r4
 8019aac:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8019d10 <rcl_wait+0x2d0>
 8019ab0:	e014      	b.n	8019adc <rcl_wait+0x9c>
 8019ab2:	2800      	cmp	r0, #0
 8019ab4:	d1e1      	bne.n	8019a7a <rcl_wait+0x3a>
 8019ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019aba:	4542      	cmp	r2, r8
 8019abc:	eb73 0107 	sbcs.w	r1, r3, r7
 8019ac0:	da03      	bge.n	8019aca <rcl_wait+0x8a>
 8019ac2:	4690      	mov	r8, r2
 8019ac4:	461f      	mov	r7, r3
 8019ac6:	f04f 0b01 	mov.w	fp, #1
 8019aca:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8019acc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8019ace:	3401      	adds	r4, #1
 8019ad0:	f14a 0a00 	adc.w	sl, sl, #0
 8019ad4:	429c      	cmp	r4, r3
 8019ad6:	f17a 0100 	sbcs.w	r1, sl, #0
 8019ada:	d228      	bcs.n	8019b2e <rcl_wait+0xee>
 8019adc:	6928      	ldr	r0, [r5, #16]
 8019ade:	a908      	add	r1, sp, #32
 8019ae0:	00a6      	lsls	r6, r4, #2
 8019ae2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8019ae6:	2800      	cmp	r0, #0
 8019ae8:	d0f1      	beq.n	8019ace <rcl_wait+0x8e>
 8019aea:	68eb      	ldr	r3, [r5, #12]
 8019aec:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8019af0:	4423      	add	r3, r4
 8019af2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8019af6:	f1be 0f00 	cmp.w	lr, #0
 8019afa:	d006      	beq.n	8019b0a <rcl_wait+0xca>
 8019afc:	6913      	ldr	r3, [r2, #16]
 8019afe:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8019b02:	3301      	adds	r3, #1
 8019b04:	6113      	str	r3, [r2, #16]
 8019b06:	692b      	ldr	r3, [r5, #16]
 8019b08:	5998      	ldr	r0, [r3, r6]
 8019b0a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8019b0e:	f7ff fa89 	bl	8019024 <rcl_timer_get_time_until_next_call>
 8019b12:	4548      	cmp	r0, r9
 8019b14:	d1cd      	bne.n	8019ab2 <rcl_wait+0x72>
 8019b16:	692b      	ldr	r3, [r5, #16]
 8019b18:	2200      	movs	r2, #0
 8019b1a:	3401      	adds	r4, #1
 8019b1c:	519a      	str	r2, [r3, r6]
 8019b1e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8019b20:	f14a 0a00 	adc.w	sl, sl, #0
 8019b24:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8019b26:	429c      	cmp	r4, r3
 8019b28:	f17a 0100 	sbcs.w	r1, sl, #0
 8019b2c:	d3d6      	bcc.n	8019adc <rcl_wait+0x9c>
 8019b2e:	4659      	mov	r1, fp
 8019b30:	4616      	mov	r6, r2
 8019b32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019b36:	4313      	orrs	r3, r2
 8019b38:	f040 80b4 	bne.w	8019ca4 <rcl_wait+0x264>
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	2200      	movs	r2, #0
 8019b40:	460c      	mov	r4, r1
 8019b42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019b46:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8019b4a:	ab08      	add	r3, sp, #32
 8019b4c:	9302      	str	r3, [sp, #8]
 8019b4e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8019b52:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8019b54:	f106 0110 	add.w	r1, r6, #16
 8019b58:	9300      	str	r3, [sp, #0]
 8019b5a:	1d30      	adds	r0, r6, #4
 8019b5c:	f106 031c 	add.w	r3, r6, #28
 8019b60:	9201      	str	r2, [sp, #4]
 8019b62:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8019b66:	f001 ff3d 	bl	801b9e4 <rmw_wait>
 8019b6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019b6c:	4680      	mov	r8, r0
 8019b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019b70:	b1e2      	cbz	r2, 8019bac <rcl_wait+0x16c>
 8019b72:	f04f 0900 	mov.w	r9, #0
 8019b76:	464f      	mov	r7, r9
 8019b78:	692a      	ldr	r2, [r5, #16]
 8019b7a:	f10d 011f 	add.w	r1, sp, #31
 8019b7e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8019b82:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8019b86:	b160      	cbz	r0, 8019ba2 <rcl_wait+0x162>
 8019b88:	f88d 701f 	strb.w	r7, [sp, #31]
 8019b8c:	f7ff fa0e 	bl	8018fac <rcl_timer_is_ready>
 8019b90:	2800      	cmp	r0, #0
 8019b92:	f47f af72 	bne.w	8019a7a <rcl_wait+0x3a>
 8019b96:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8019b9a:	b90b      	cbnz	r3, 8019ba0 <rcl_wait+0x160>
 8019b9c:	692a      	ldr	r2, [r5, #16]
 8019b9e:	5193      	str	r3, [r2, r6]
 8019ba0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019ba2:	f109 0901 	add.w	r9, r9, #1
 8019ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019ba8:	454a      	cmp	r2, r9
 8019baa:	d8e5      	bhi.n	8019b78 <rcl_wait+0x138>
 8019bac:	f038 0002 	bics.w	r0, r8, #2
 8019bb0:	d176      	bne.n	8019ca0 <rcl_wait+0x260>
 8019bb2:	686f      	ldr	r7, [r5, #4]
 8019bb4:	b17f      	cbz	r7, 8019bd6 <rcl_wait+0x196>
 8019bb6:	4602      	mov	r2, r0
 8019bb8:	e002      	b.n	8019bc0 <rcl_wait+0x180>
 8019bba:	3201      	adds	r2, #1
 8019bbc:	42ba      	cmp	r2, r7
 8019bbe:	d00a      	beq.n	8019bd6 <rcl_wait+0x196>
 8019bc0:	6899      	ldr	r1, [r3, #8]
 8019bc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019bc6:	2900      	cmp	r1, #0
 8019bc8:	d1f7      	bne.n	8019bba <rcl_wait+0x17a>
 8019bca:	682e      	ldr	r6, [r5, #0]
 8019bcc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8019bd0:	3201      	adds	r2, #1
 8019bd2:	42ba      	cmp	r2, r7
 8019bd4:	d1f4      	bne.n	8019bc0 <rcl_wait+0x180>
 8019bd6:	68ef      	ldr	r7, [r5, #12]
 8019bd8:	b17f      	cbz	r7, 8019bfa <rcl_wait+0x1ba>
 8019bda:	2200      	movs	r2, #0
 8019bdc:	e002      	b.n	8019be4 <rcl_wait+0x1a4>
 8019bde:	3201      	adds	r2, #1
 8019be0:	42ba      	cmp	r2, r7
 8019be2:	d00a      	beq.n	8019bfa <rcl_wait+0x1ba>
 8019be4:	6959      	ldr	r1, [r3, #20]
 8019be6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019bea:	2900      	cmp	r1, #0
 8019bec:	d1f7      	bne.n	8019bde <rcl_wait+0x19e>
 8019bee:	68ae      	ldr	r6, [r5, #8]
 8019bf0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8019bf4:	3201      	adds	r2, #1
 8019bf6:	42ba      	cmp	r2, r7
 8019bf8:	d1f4      	bne.n	8019be4 <rcl_wait+0x1a4>
 8019bfa:	69ef      	ldr	r7, [r5, #28]
 8019bfc:	b17f      	cbz	r7, 8019c1e <rcl_wait+0x1de>
 8019bfe:	2200      	movs	r2, #0
 8019c00:	e002      	b.n	8019c08 <rcl_wait+0x1c8>
 8019c02:	3201      	adds	r2, #1
 8019c04:	42ba      	cmp	r2, r7
 8019c06:	d00a      	beq.n	8019c1e <rcl_wait+0x1de>
 8019c08:	6a19      	ldr	r1, [r3, #32]
 8019c0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019c0e:	2900      	cmp	r1, #0
 8019c10:	d1f7      	bne.n	8019c02 <rcl_wait+0x1c2>
 8019c12:	69ae      	ldr	r6, [r5, #24]
 8019c14:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8019c18:	3201      	adds	r2, #1
 8019c1a:	42ba      	cmp	r2, r7
 8019c1c:	d1f4      	bne.n	8019c08 <rcl_wait+0x1c8>
 8019c1e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8019c20:	b17f      	cbz	r7, 8019c42 <rcl_wait+0x202>
 8019c22:	2200      	movs	r2, #0
 8019c24:	e002      	b.n	8019c2c <rcl_wait+0x1ec>
 8019c26:	3201      	adds	r2, #1
 8019c28:	42ba      	cmp	r2, r7
 8019c2a:	d00a      	beq.n	8019c42 <rcl_wait+0x202>
 8019c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8019c2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019c32:	2900      	cmp	r1, #0
 8019c34:	d1f7      	bne.n	8019c26 <rcl_wait+0x1e6>
 8019c36:	6a2e      	ldr	r6, [r5, #32]
 8019c38:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8019c3c:	3201      	adds	r2, #1
 8019c3e:	42ba      	cmp	r2, r7
 8019c40:	d1f4      	bne.n	8019c2c <rcl_wait+0x1ec>
 8019c42:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8019c44:	b17f      	cbz	r7, 8019c66 <rcl_wait+0x226>
 8019c46:	2200      	movs	r2, #0
 8019c48:	e002      	b.n	8019c50 <rcl_wait+0x210>
 8019c4a:	3201      	adds	r2, #1
 8019c4c:	42ba      	cmp	r2, r7
 8019c4e:	d00a      	beq.n	8019c66 <rcl_wait+0x226>
 8019c50:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8019c52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019c56:	2900      	cmp	r1, #0
 8019c58:	d1f7      	bne.n	8019c4a <rcl_wait+0x20a>
 8019c5a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8019c5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8019c60:	3201      	adds	r2, #1
 8019c62:	42ba      	cmp	r2, r7
 8019c64:	d1f4      	bne.n	8019c50 <rcl_wait+0x210>
 8019c66:	f1b8 0f02 	cmp.w	r8, #2
 8019c6a:	f47f af06 	bne.w	8019a7a <rcl_wait+0x3a>
 8019c6e:	f084 0301 	eor.w	r3, r4, #1
 8019c72:	b2db      	uxtb	r3, r3
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	bf18      	it	ne
 8019c78:	2002      	movne	r0, #2
 8019c7a:	b00d      	add	sp, #52	@ 0x34
 8019c7c:	ecbd 8b02 	vpop	{d8}
 8019c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c84:	2a00      	cmp	r2, #0
 8019c86:	d03a      	beq.n	8019cfe <rcl_wait+0x2be>
 8019c88:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019c8c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8019c90:	e705      	b.n	8019a9e <rcl_wait+0x5e>
 8019c92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019c96:	b00d      	add	sp, #52	@ 0x34
 8019c98:	ecbd 8b02 	vpop	{d8}
 8019c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ca0:	2001      	movs	r0, #1
 8019ca2:	e6ea      	b.n	8019a7a <rcl_wait+0x3a>
 8019ca4:	9b04      	ldr	r3, [sp, #16]
 8019ca6:	460c      	mov	r4, r1
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	9b05      	ldr	r3, [sp, #20]
 8019cac:	f173 0300 	sbcs.w	r3, r3, #0
 8019cb0:	bfa8      	it	ge
 8019cb2:	f044 0401 	orrge.w	r4, r4, #1
 8019cb6:	b914      	cbnz	r4, 8019cbe <rcl_wait+0x27e>
 8019cb8:	4623      	mov	r3, r4
 8019cba:	e747      	b.n	8019b4c <rcl_wait+0x10c>
 8019cbc:	4611      	mov	r1, r2
 8019cbe:	2f00      	cmp	r7, #0
 8019cc0:	da02      	bge.n	8019cc8 <rcl_wait+0x288>
 8019cc2:	f04f 0800 	mov.w	r8, #0
 8019cc6:	4647      	mov	r7, r8
 8019cc8:	460c      	mov	r4, r1
 8019cca:	4640      	mov	r0, r8
 8019ccc:	4639      	mov	r1, r7
 8019cce:	a312      	add	r3, pc, #72	@ (adr r3, 8019d18 <rcl_wait+0x2d8>)
 8019cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd4:	f7e6 fb6c 	bl	80003b0 <__aeabi_ldivmod>
 8019cd8:	a30f      	add	r3, pc, #60	@ (adr r3, 8019d18 <rcl_wait+0x2d8>)
 8019cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019ce2:	4640      	mov	r0, r8
 8019ce4:	4639      	mov	r1, r7
 8019ce6:	f7e6 fb63 	bl	80003b0 <__aeabi_ldivmod>
 8019cea:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8019cee:	ab08      	add	r3, sp, #32
 8019cf0:	e72c      	b.n	8019b4c <rcl_wait+0x10c>
 8019cf2:	200b      	movs	r0, #11
 8019cf4:	b00d      	add	sp, #52	@ 0x34
 8019cf6:	ecbd 8b02 	vpop	{d8}
 8019cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cfe:	4611      	mov	r1, r2
 8019d00:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019d04:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8019d08:	e713      	b.n	8019b32 <rcl_wait+0xf2>
 8019d0a:	bf00      	nop
 8019d0c:	f3af 8000 	nop.w
 8019d10:	ffffffff 	.word	0xffffffff
 8019d14:	7fffffff 	.word	0x7fffffff
 8019d18:	3b9aca00 	.word	0x3b9aca00
 8019d1c:	00000000 	.word	0x00000000

08019d20 <rcl_action_take_goal_response>:
 8019d20:	2800      	cmp	r0, #0
 8019d22:	d039      	beq.n	8019d98 <rcl_action_take_goal_response+0x78>
 8019d24:	b570      	push	{r4, r5, r6, lr}
 8019d26:	4604      	mov	r4, r0
 8019d28:	6800      	ldr	r0, [r0, #0]
 8019d2a:	b380      	cbz	r0, 8019d8e <rcl_action_take_goal_response+0x6e>
 8019d2c:	460e      	mov	r6, r1
 8019d2e:	4615      	mov	r5, r2
 8019d30:	f7fd ffda 	bl	8017ce8 <rcl_client_is_valid>
 8019d34:	b330      	cbz	r0, 8019d84 <rcl_action_take_goal_response+0x64>
 8019d36:	6820      	ldr	r0, [r4, #0]
 8019d38:	3004      	adds	r0, #4
 8019d3a:	f7fd ffd5 	bl	8017ce8 <rcl_client_is_valid>
 8019d3e:	b308      	cbz	r0, 8019d84 <rcl_action_take_goal_response+0x64>
 8019d40:	6820      	ldr	r0, [r4, #0]
 8019d42:	3008      	adds	r0, #8
 8019d44:	f7fd ffd0 	bl	8017ce8 <rcl_client_is_valid>
 8019d48:	b1e0      	cbz	r0, 8019d84 <rcl_action_take_goal_response+0x64>
 8019d4a:	6820      	ldr	r0, [r4, #0]
 8019d4c:	300c      	adds	r0, #12
 8019d4e:	f7fe fdc3 	bl	80188d8 <rcl_subscription_is_valid>
 8019d52:	b1b8      	cbz	r0, 8019d84 <rcl_action_take_goal_response+0x64>
 8019d54:	6820      	ldr	r0, [r4, #0]
 8019d56:	3010      	adds	r0, #16
 8019d58:	f7fe fdbe 	bl	80188d8 <rcl_subscription_is_valid>
 8019d5c:	b190      	cbz	r0, 8019d84 <rcl_action_take_goal_response+0x64>
 8019d5e:	b1cd      	cbz	r5, 8019d94 <rcl_action_take_goal_response+0x74>
 8019d60:	b1c6      	cbz	r6, 8019d94 <rcl_action_take_goal_response+0x74>
 8019d62:	462a      	mov	r2, r5
 8019d64:	4631      	mov	r1, r6
 8019d66:	6820      	ldr	r0, [r4, #0]
 8019d68:	f7fd ff76 	bl	8017c58 <rcl_take_response>
 8019d6c:	b148      	cbz	r0, 8019d82 <rcl_action_take_goal_response+0x62>
 8019d6e:	280a      	cmp	r0, #10
 8019d70:	d007      	beq.n	8019d82 <rcl_action_take_goal_response+0x62>
 8019d72:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019d76:	f640 0337 	movw	r3, #2103	@ 0x837
 8019d7a:	4290      	cmp	r0, r2
 8019d7c:	bf0c      	ite	eq
 8019d7e:	4618      	moveq	r0, r3
 8019d80:	2001      	movne	r0, #1
 8019d82:	bd70      	pop	{r4, r5, r6, pc}
 8019d84:	f7f7 fcd0 	bl	8011728 <rcutils_reset_error>
 8019d88:	f640 0036 	movw	r0, #2102	@ 0x836
 8019d8c:	bd70      	pop	{r4, r5, r6, pc}
 8019d8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019d92:	bd70      	pop	{r4, r5, r6, pc}
 8019d94:	200b      	movs	r0, #11
 8019d96:	bd70      	pop	{r4, r5, r6, pc}
 8019d98:	f640 0036 	movw	r0, #2102	@ 0x836
 8019d9c:	4770      	bx	lr
 8019d9e:	bf00      	nop

08019da0 <rcl_action_send_result_request>:
 8019da0:	b390      	cbz	r0, 8019e08 <rcl_action_send_result_request+0x68>
 8019da2:	b570      	push	{r4, r5, r6, lr}
 8019da4:	4604      	mov	r4, r0
 8019da6:	6800      	ldr	r0, [r0, #0]
 8019da8:	b348      	cbz	r0, 8019dfe <rcl_action_send_result_request+0x5e>
 8019daa:	460e      	mov	r6, r1
 8019dac:	4615      	mov	r5, r2
 8019dae:	f7fd ff9b 	bl	8017ce8 <rcl_client_is_valid>
 8019db2:	b1f8      	cbz	r0, 8019df4 <rcl_action_send_result_request+0x54>
 8019db4:	6820      	ldr	r0, [r4, #0]
 8019db6:	3004      	adds	r0, #4
 8019db8:	f7fd ff96 	bl	8017ce8 <rcl_client_is_valid>
 8019dbc:	b1d0      	cbz	r0, 8019df4 <rcl_action_send_result_request+0x54>
 8019dbe:	6820      	ldr	r0, [r4, #0]
 8019dc0:	3008      	adds	r0, #8
 8019dc2:	f7fd ff91 	bl	8017ce8 <rcl_client_is_valid>
 8019dc6:	b1a8      	cbz	r0, 8019df4 <rcl_action_send_result_request+0x54>
 8019dc8:	6820      	ldr	r0, [r4, #0]
 8019dca:	300c      	adds	r0, #12
 8019dcc:	f7fe fd84 	bl	80188d8 <rcl_subscription_is_valid>
 8019dd0:	b180      	cbz	r0, 8019df4 <rcl_action_send_result_request+0x54>
 8019dd2:	6820      	ldr	r0, [r4, #0]
 8019dd4:	3010      	adds	r0, #16
 8019dd6:	f7fe fd7f 	bl	80188d8 <rcl_subscription_is_valid>
 8019dda:	b158      	cbz	r0, 8019df4 <rcl_action_send_result_request+0x54>
 8019ddc:	b195      	cbz	r5, 8019e04 <rcl_action_send_result_request+0x64>
 8019dde:	b18e      	cbz	r6, 8019e04 <rcl_action_send_result_request+0x64>
 8019de0:	6820      	ldr	r0, [r4, #0]
 8019de2:	462a      	mov	r2, r5
 8019de4:	4631      	mov	r1, r6
 8019de6:	3008      	adds	r0, #8
 8019de8:	f7fd fefe 	bl	8017be8 <rcl_send_request>
 8019dec:	3800      	subs	r0, #0
 8019dee:	bf18      	it	ne
 8019df0:	2001      	movne	r0, #1
 8019df2:	bd70      	pop	{r4, r5, r6, pc}
 8019df4:	f7f7 fc98 	bl	8011728 <rcutils_reset_error>
 8019df8:	f640 0036 	movw	r0, #2102	@ 0x836
 8019dfc:	bd70      	pop	{r4, r5, r6, pc}
 8019dfe:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e02:	bd70      	pop	{r4, r5, r6, pc}
 8019e04:	200b      	movs	r0, #11
 8019e06:	bd70      	pop	{r4, r5, r6, pc}
 8019e08:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop

08019e10 <rcl_action_take_result_response>:
 8019e10:	2800      	cmp	r0, #0
 8019e12:	d03a      	beq.n	8019e8a <rcl_action_take_result_response+0x7a>
 8019e14:	b570      	push	{r4, r5, r6, lr}
 8019e16:	4604      	mov	r4, r0
 8019e18:	6800      	ldr	r0, [r0, #0]
 8019e1a:	b388      	cbz	r0, 8019e80 <rcl_action_take_result_response+0x70>
 8019e1c:	460e      	mov	r6, r1
 8019e1e:	4615      	mov	r5, r2
 8019e20:	f7fd ff62 	bl	8017ce8 <rcl_client_is_valid>
 8019e24:	b338      	cbz	r0, 8019e76 <rcl_action_take_result_response+0x66>
 8019e26:	6820      	ldr	r0, [r4, #0]
 8019e28:	3004      	adds	r0, #4
 8019e2a:	f7fd ff5d 	bl	8017ce8 <rcl_client_is_valid>
 8019e2e:	b310      	cbz	r0, 8019e76 <rcl_action_take_result_response+0x66>
 8019e30:	6820      	ldr	r0, [r4, #0]
 8019e32:	3008      	adds	r0, #8
 8019e34:	f7fd ff58 	bl	8017ce8 <rcl_client_is_valid>
 8019e38:	b1e8      	cbz	r0, 8019e76 <rcl_action_take_result_response+0x66>
 8019e3a:	6820      	ldr	r0, [r4, #0]
 8019e3c:	300c      	adds	r0, #12
 8019e3e:	f7fe fd4b 	bl	80188d8 <rcl_subscription_is_valid>
 8019e42:	b1c0      	cbz	r0, 8019e76 <rcl_action_take_result_response+0x66>
 8019e44:	6820      	ldr	r0, [r4, #0]
 8019e46:	3010      	adds	r0, #16
 8019e48:	f7fe fd46 	bl	80188d8 <rcl_subscription_is_valid>
 8019e4c:	b198      	cbz	r0, 8019e76 <rcl_action_take_result_response+0x66>
 8019e4e:	b1d5      	cbz	r5, 8019e86 <rcl_action_take_result_response+0x76>
 8019e50:	b1ce      	cbz	r6, 8019e86 <rcl_action_take_result_response+0x76>
 8019e52:	6820      	ldr	r0, [r4, #0]
 8019e54:	462a      	mov	r2, r5
 8019e56:	4631      	mov	r1, r6
 8019e58:	3008      	adds	r0, #8
 8019e5a:	f7fd fefd 	bl	8017c58 <rcl_take_response>
 8019e5e:	b148      	cbz	r0, 8019e74 <rcl_action_take_result_response+0x64>
 8019e60:	280a      	cmp	r0, #10
 8019e62:	d007      	beq.n	8019e74 <rcl_action_take_result_response+0x64>
 8019e64:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019e68:	f640 0337 	movw	r3, #2103	@ 0x837
 8019e6c:	4290      	cmp	r0, r2
 8019e6e:	bf0c      	ite	eq
 8019e70:	4618      	moveq	r0, r3
 8019e72:	2001      	movne	r0, #1
 8019e74:	bd70      	pop	{r4, r5, r6, pc}
 8019e76:	f7f7 fc57 	bl	8011728 <rcutils_reset_error>
 8019e7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e7e:	bd70      	pop	{r4, r5, r6, pc}
 8019e80:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e84:	bd70      	pop	{r4, r5, r6, pc}
 8019e86:	200b      	movs	r0, #11
 8019e88:	bd70      	pop	{r4, r5, r6, pc}
 8019e8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8019e8e:	4770      	bx	lr

08019e90 <rcl_action_take_cancel_response>:
 8019e90:	2800      	cmp	r0, #0
 8019e92:	d03a      	beq.n	8019f0a <rcl_action_take_cancel_response+0x7a>
 8019e94:	b570      	push	{r4, r5, r6, lr}
 8019e96:	4604      	mov	r4, r0
 8019e98:	6800      	ldr	r0, [r0, #0]
 8019e9a:	b388      	cbz	r0, 8019f00 <rcl_action_take_cancel_response+0x70>
 8019e9c:	460e      	mov	r6, r1
 8019e9e:	4615      	mov	r5, r2
 8019ea0:	f7fd ff22 	bl	8017ce8 <rcl_client_is_valid>
 8019ea4:	b338      	cbz	r0, 8019ef6 <rcl_action_take_cancel_response+0x66>
 8019ea6:	6820      	ldr	r0, [r4, #0]
 8019ea8:	3004      	adds	r0, #4
 8019eaa:	f7fd ff1d 	bl	8017ce8 <rcl_client_is_valid>
 8019eae:	b310      	cbz	r0, 8019ef6 <rcl_action_take_cancel_response+0x66>
 8019eb0:	6820      	ldr	r0, [r4, #0]
 8019eb2:	3008      	adds	r0, #8
 8019eb4:	f7fd ff18 	bl	8017ce8 <rcl_client_is_valid>
 8019eb8:	b1e8      	cbz	r0, 8019ef6 <rcl_action_take_cancel_response+0x66>
 8019eba:	6820      	ldr	r0, [r4, #0]
 8019ebc:	300c      	adds	r0, #12
 8019ebe:	f7fe fd0b 	bl	80188d8 <rcl_subscription_is_valid>
 8019ec2:	b1c0      	cbz	r0, 8019ef6 <rcl_action_take_cancel_response+0x66>
 8019ec4:	6820      	ldr	r0, [r4, #0]
 8019ec6:	3010      	adds	r0, #16
 8019ec8:	f7fe fd06 	bl	80188d8 <rcl_subscription_is_valid>
 8019ecc:	b198      	cbz	r0, 8019ef6 <rcl_action_take_cancel_response+0x66>
 8019ece:	b1d5      	cbz	r5, 8019f06 <rcl_action_take_cancel_response+0x76>
 8019ed0:	b1ce      	cbz	r6, 8019f06 <rcl_action_take_cancel_response+0x76>
 8019ed2:	6820      	ldr	r0, [r4, #0]
 8019ed4:	462a      	mov	r2, r5
 8019ed6:	4631      	mov	r1, r6
 8019ed8:	3004      	adds	r0, #4
 8019eda:	f7fd febd 	bl	8017c58 <rcl_take_response>
 8019ede:	b148      	cbz	r0, 8019ef4 <rcl_action_take_cancel_response+0x64>
 8019ee0:	280a      	cmp	r0, #10
 8019ee2:	d007      	beq.n	8019ef4 <rcl_action_take_cancel_response+0x64>
 8019ee4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019ee8:	f640 0337 	movw	r3, #2103	@ 0x837
 8019eec:	4290      	cmp	r0, r2
 8019eee:	bf0c      	ite	eq
 8019ef0:	4618      	moveq	r0, r3
 8019ef2:	2001      	movne	r0, #1
 8019ef4:	bd70      	pop	{r4, r5, r6, pc}
 8019ef6:	f7f7 fc17 	bl	8011728 <rcutils_reset_error>
 8019efa:	f640 0036 	movw	r0, #2102	@ 0x836
 8019efe:	bd70      	pop	{r4, r5, r6, pc}
 8019f00:	f640 0036 	movw	r0, #2102	@ 0x836
 8019f04:	bd70      	pop	{r4, r5, r6, pc}
 8019f06:	200b      	movs	r0, #11
 8019f08:	bd70      	pop	{r4, r5, r6, pc}
 8019f0a:	f640 0036 	movw	r0, #2102	@ 0x836
 8019f0e:	4770      	bx	lr

08019f10 <rcl_action_take_feedback>:
 8019f10:	2800      	cmp	r0, #0
 8019f12:	d038      	beq.n	8019f86 <rcl_action_take_feedback+0x76>
 8019f14:	b530      	push	{r4, r5, lr}
 8019f16:	4604      	mov	r4, r0
 8019f18:	6800      	ldr	r0, [r0, #0]
 8019f1a:	b091      	sub	sp, #68	@ 0x44
 8019f1c:	b378      	cbz	r0, 8019f7e <rcl_action_take_feedback+0x6e>
 8019f1e:	460d      	mov	r5, r1
 8019f20:	f7fd fee2 	bl	8017ce8 <rcl_client_is_valid>
 8019f24:	b328      	cbz	r0, 8019f72 <rcl_action_take_feedback+0x62>
 8019f26:	6820      	ldr	r0, [r4, #0]
 8019f28:	3004      	adds	r0, #4
 8019f2a:	f7fd fedd 	bl	8017ce8 <rcl_client_is_valid>
 8019f2e:	b300      	cbz	r0, 8019f72 <rcl_action_take_feedback+0x62>
 8019f30:	6820      	ldr	r0, [r4, #0]
 8019f32:	3008      	adds	r0, #8
 8019f34:	f7fd fed8 	bl	8017ce8 <rcl_client_is_valid>
 8019f38:	b1d8      	cbz	r0, 8019f72 <rcl_action_take_feedback+0x62>
 8019f3a:	6820      	ldr	r0, [r4, #0]
 8019f3c:	300c      	adds	r0, #12
 8019f3e:	f7fe fccb 	bl	80188d8 <rcl_subscription_is_valid>
 8019f42:	b1b0      	cbz	r0, 8019f72 <rcl_action_take_feedback+0x62>
 8019f44:	6820      	ldr	r0, [r4, #0]
 8019f46:	3010      	adds	r0, #16
 8019f48:	f7fe fcc6 	bl	80188d8 <rcl_subscription_is_valid>
 8019f4c:	b188      	cbz	r0, 8019f72 <rcl_action_take_feedback+0x62>
 8019f4e:	b1ed      	cbz	r5, 8019f8c <rcl_action_take_feedback+0x7c>
 8019f50:	6820      	ldr	r0, [r4, #0]
 8019f52:	2300      	movs	r3, #0
 8019f54:	466a      	mov	r2, sp
 8019f56:	4629      	mov	r1, r5
 8019f58:	300c      	adds	r0, #12
 8019f5a:	f7fe fc61 	bl	8018820 <rcl_take>
 8019f5e:	b160      	cbz	r0, 8019f7a <rcl_action_take_feedback+0x6a>
 8019f60:	f240 1391 	movw	r3, #401	@ 0x191
 8019f64:	4298      	cmp	r0, r3
 8019f66:	d014      	beq.n	8019f92 <rcl_action_take_feedback+0x82>
 8019f68:	280a      	cmp	r0, #10
 8019f6a:	bf18      	it	ne
 8019f6c:	2001      	movne	r0, #1
 8019f6e:	b011      	add	sp, #68	@ 0x44
 8019f70:	bd30      	pop	{r4, r5, pc}
 8019f72:	f7f7 fbd9 	bl	8011728 <rcutils_reset_error>
 8019f76:	f640 0036 	movw	r0, #2102	@ 0x836
 8019f7a:	b011      	add	sp, #68	@ 0x44
 8019f7c:	bd30      	pop	{r4, r5, pc}
 8019f7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019f82:	b011      	add	sp, #68	@ 0x44
 8019f84:	bd30      	pop	{r4, r5, pc}
 8019f86:	f640 0036 	movw	r0, #2102	@ 0x836
 8019f8a:	4770      	bx	lr
 8019f8c:	200b      	movs	r0, #11
 8019f8e:	b011      	add	sp, #68	@ 0x44
 8019f90:	bd30      	pop	{r4, r5, pc}
 8019f92:	f640 0037 	movw	r0, #2103	@ 0x837
 8019f96:	e7f0      	b.n	8019f7a <rcl_action_take_feedback+0x6a>

08019f98 <rcl_action_wait_set_add_action_client>:
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	d048      	beq.n	801a02e <rcl_action_wait_set_add_action_client+0x96>
 8019f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f9e:	460c      	mov	r4, r1
 8019fa0:	2900      	cmp	r1, #0
 8019fa2:	d03c      	beq.n	801a01e <rcl_action_wait_set_add_action_client+0x86>
 8019fa4:	4605      	mov	r5, r0
 8019fa6:	6808      	ldr	r0, [r1, #0]
 8019fa8:	2800      	cmp	r0, #0
 8019faa:	d038      	beq.n	801a01e <rcl_action_wait_set_add_action_client+0x86>
 8019fac:	4617      	mov	r7, r2
 8019fae:	461e      	mov	r6, r3
 8019fb0:	f7fd fe9a 	bl	8017ce8 <rcl_client_is_valid>
 8019fb4:	b3b0      	cbz	r0, 801a024 <rcl_action_wait_set_add_action_client+0x8c>
 8019fb6:	6820      	ldr	r0, [r4, #0]
 8019fb8:	3004      	adds	r0, #4
 8019fba:	f7fd fe95 	bl	8017ce8 <rcl_client_is_valid>
 8019fbe:	b388      	cbz	r0, 801a024 <rcl_action_wait_set_add_action_client+0x8c>
 8019fc0:	6820      	ldr	r0, [r4, #0]
 8019fc2:	3008      	adds	r0, #8
 8019fc4:	f7fd fe90 	bl	8017ce8 <rcl_client_is_valid>
 8019fc8:	b360      	cbz	r0, 801a024 <rcl_action_wait_set_add_action_client+0x8c>
 8019fca:	6820      	ldr	r0, [r4, #0]
 8019fcc:	300c      	adds	r0, #12
 8019fce:	f7fe fc83 	bl	80188d8 <rcl_subscription_is_valid>
 8019fd2:	b338      	cbz	r0, 801a024 <rcl_action_wait_set_add_action_client+0x8c>
 8019fd4:	6820      	ldr	r0, [r4, #0]
 8019fd6:	3010      	adds	r0, #16
 8019fd8:	f7fe fc7e 	bl	80188d8 <rcl_subscription_is_valid>
 8019fdc:	b310      	cbz	r0, 801a024 <rcl_action_wait_set_add_action_client+0x8c>
 8019fde:	6821      	ldr	r1, [r4, #0]
 8019fe0:	4628      	mov	r0, r5
 8019fe2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8019fe6:	f7ff fcd1 	bl	801998c <rcl_wait_set_add_client>
 8019fea:	b9b8      	cbnz	r0, 801a01c <rcl_action_wait_set_add_action_client+0x84>
 8019fec:	6821      	ldr	r1, [r4, #0]
 8019fee:	4628      	mov	r0, r5
 8019ff0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8019ff4:	3104      	adds	r1, #4
 8019ff6:	f7ff fcc9 	bl	801998c <rcl_wait_set_add_client>
 8019ffa:	b978      	cbnz	r0, 801a01c <rcl_action_wait_set_add_action_client+0x84>
 8019ffc:	6821      	ldr	r1, [r4, #0]
 8019ffe:	4628      	mov	r0, r5
 801a000:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801a004:	3108      	adds	r1, #8
 801a006:	f7ff fcc1 	bl	801998c <rcl_wait_set_add_client>
 801a00a:	b938      	cbnz	r0, 801a01c <rcl_action_wait_set_add_action_client+0x84>
 801a00c:	6821      	ldr	r1, [r4, #0]
 801a00e:	4628      	mov	r0, r5
 801a010:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801a014:	310c      	adds	r1, #12
 801a016:	f7ff f969 	bl	80192ec <rcl_wait_set_add_subscription>
 801a01a:	b158      	cbz	r0, 801a034 <rcl_action_wait_set_add_action_client+0x9c>
 801a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a01e:	f640 0036 	movw	r0, #2102	@ 0x836
 801a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a024:	f7f7 fb80 	bl	8011728 <rcutils_reset_error>
 801a028:	f640 0036 	movw	r0, #2102	@ 0x836
 801a02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a02e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a032:	4770      	bx	lr
 801a034:	6821      	ldr	r1, [r4, #0]
 801a036:	4628      	mov	r0, r5
 801a038:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801a03c:	3110      	adds	r1, #16
 801a03e:	f7ff f955 	bl	80192ec <rcl_wait_set_add_subscription>
 801a042:	2800      	cmp	r0, #0
 801a044:	d1ea      	bne.n	801a01c <rcl_action_wait_set_add_action_client+0x84>
 801a046:	b11f      	cbz	r7, 801a050 <rcl_action_wait_set_add_action_client+0xb8>
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801a04e:	603b      	str	r3, [r7, #0]
 801a050:	2e00      	cmp	r6, #0
 801a052:	d0e3      	beq.n	801a01c <rcl_action_wait_set_add_action_client+0x84>
 801a054:	6823      	ldr	r3, [r4, #0]
 801a056:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801a05a:	6033      	str	r3, [r6, #0]
 801a05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a05e:	bf00      	nop

0801a060 <rcl_action_client_wait_set_get_entities_ready>:
 801a060:	2800      	cmp	r0, #0
 801a062:	d050      	beq.n	801a106 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801a064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a068:	460c      	mov	r4, r1
 801a06a:	2900      	cmp	r1, #0
 801a06c:	d03e      	beq.n	801a0ec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801a06e:	4605      	mov	r5, r0
 801a070:	6808      	ldr	r0, [r1, #0]
 801a072:	2800      	cmp	r0, #0
 801a074:	d03a      	beq.n	801a0ec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801a076:	4616      	mov	r6, r2
 801a078:	461f      	mov	r7, r3
 801a07a:	f7fd fe35 	bl	8017ce8 <rcl_client_is_valid>
 801a07e:	2800      	cmp	r0, #0
 801a080:	d038      	beq.n	801a0f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801a082:	6820      	ldr	r0, [r4, #0]
 801a084:	3004      	adds	r0, #4
 801a086:	f7fd fe2f 	bl	8017ce8 <rcl_client_is_valid>
 801a08a:	2800      	cmp	r0, #0
 801a08c:	d032      	beq.n	801a0f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801a08e:	6820      	ldr	r0, [r4, #0]
 801a090:	3008      	adds	r0, #8
 801a092:	f7fd fe29 	bl	8017ce8 <rcl_client_is_valid>
 801a096:	b368      	cbz	r0, 801a0f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801a098:	6820      	ldr	r0, [r4, #0]
 801a09a:	300c      	adds	r0, #12
 801a09c:	f7fe fc1c 	bl	80188d8 <rcl_subscription_is_valid>
 801a0a0:	b340      	cbz	r0, 801a0f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801a0a2:	6820      	ldr	r0, [r4, #0]
 801a0a4:	3010      	adds	r0, #16
 801a0a6:	f7fe fc17 	bl	80188d8 <rcl_subscription_is_valid>
 801a0aa:	b318      	cbz	r0, 801a0f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801a0ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801a0b0:	2a00      	cmp	r2, #0
 801a0b2:	bf18      	it	ne
 801a0b4:	2b00      	cmpne	r3, #0
 801a0b6:	9b08      	ldr	r3, [sp, #32]
 801a0b8:	bf0c      	ite	eq
 801a0ba:	2101      	moveq	r1, #1
 801a0bc:	2100      	movne	r1, #0
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	bf08      	it	eq
 801a0c2:	f041 0101 	orreq.w	r1, r1, #1
 801a0c6:	2f00      	cmp	r7, #0
 801a0c8:	bf08      	it	eq
 801a0ca:	f041 0101 	orreq.w	r1, r1, #1
 801a0ce:	b9b9      	cbnz	r1, 801a100 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801a0d0:	b1b6      	cbz	r6, 801a100 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801a0d2:	6823      	ldr	r3, [r4, #0]
 801a0d4:	686c      	ldr	r4, [r5, #4]
 801a0d6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801a0da:	428a      	cmp	r2, r1
 801a0dc:	4610      	mov	r0, r2
 801a0de:	bf38      	it	cc
 801a0e0:	4608      	movcc	r0, r1
 801a0e2:	4284      	cmp	r4, r0
 801a0e4:	d812      	bhi.n	801a10c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801a0e6:	2001      	movs	r0, #1
 801a0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0ec:	f640 0036 	movw	r0, #2102	@ 0x836
 801a0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0f4:	f7f7 fb18 	bl	8011728 <rcutils_reset_error>
 801a0f8:	f640 0036 	movw	r0, #2102	@ 0x836
 801a0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a100:	200b      	movs	r0, #11
 801a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a106:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a10a:	4770      	bx	lr
 801a10c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801a110:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801a114:	45f0      	cmp	r8, lr
 801a116:	4640      	mov	r0, r8
 801a118:	69ec      	ldr	r4, [r5, #28]
 801a11a:	bf38      	it	cc
 801a11c:	4670      	movcc	r0, lr
 801a11e:	4560      	cmp	r0, ip
 801a120:	bf38      	it	cc
 801a122:	4660      	movcc	r0, ip
 801a124:	4284      	cmp	r4, r0
 801a126:	d9de      	bls.n	801a0e6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801a128:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801a12c:	682d      	ldr	r5, [r5, #0]
 801a12e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801a132:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801a136:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a13a:	1a18      	subs	r0, r3, r0
 801a13c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801a140:	f103 0c0c 	add.w	ip, r3, #12
 801a144:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801a148:	fab0 f080 	clz	r0, r0
 801a14c:	eba5 050c 	sub.w	r5, r5, ip
 801a150:	0940      	lsrs	r0, r0, #5
 801a152:	fab5 f585 	clz	r5, r5
 801a156:	096d      	lsrs	r5, r5, #5
 801a158:	7035      	strb	r5, [r6, #0]
 801a15a:	f103 0510 	add.w	r5, r3, #16
 801a15e:	1b64      	subs	r4, r4, r5
 801a160:	9d08      	ldr	r5, [sp, #32]
 801a162:	fab4 f484 	clz	r4, r4
 801a166:	0964      	lsrs	r4, r4, #5
 801a168:	703c      	strb	r4, [r7, #0]
 801a16a:	1d1c      	adds	r4, r3, #4
 801a16c:	3308      	adds	r3, #8
 801a16e:	7028      	strb	r0, [r5, #0]
 801a170:	1b09      	subs	r1, r1, r4
 801a172:	2000      	movs	r0, #0
 801a174:	1ad3      	subs	r3, r2, r3
 801a176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a178:	fab1 f181 	clz	r1, r1
 801a17c:	fab3 f383 	clz	r3, r3
 801a180:	0949      	lsrs	r1, r1, #5
 801a182:	095b      	lsrs	r3, r3, #5
 801a184:	7011      	strb	r1, [r2, #0]
 801a186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a188:	7013      	strb	r3, [r2, #0]
 801a18a:	e7b1      	b.n	801a0f0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801a18c <rcl_action_take_goal_request>:
 801a18c:	2800      	cmp	r0, #0
 801a18e:	d039      	beq.n	801a204 <rcl_action_take_goal_request+0x78>
 801a190:	b570      	push	{r4, r5, r6, lr}
 801a192:	4604      	mov	r4, r0
 801a194:	6800      	ldr	r0, [r0, #0]
 801a196:	b380      	cbz	r0, 801a1fa <rcl_action_take_goal_request+0x6e>
 801a198:	460e      	mov	r6, r1
 801a19a:	4615      	mov	r5, r2
 801a19c:	f7fe fb36 	bl	801880c <rcl_service_is_valid>
 801a1a0:	b330      	cbz	r0, 801a1f0 <rcl_action_take_goal_request+0x64>
 801a1a2:	6820      	ldr	r0, [r4, #0]
 801a1a4:	3004      	adds	r0, #4
 801a1a6:	f7fe fb31 	bl	801880c <rcl_service_is_valid>
 801a1aa:	b308      	cbz	r0, 801a1f0 <rcl_action_take_goal_request+0x64>
 801a1ac:	6820      	ldr	r0, [r4, #0]
 801a1ae:	3008      	adds	r0, #8
 801a1b0:	f7fe fb2c 	bl	801880c <rcl_service_is_valid>
 801a1b4:	b1e0      	cbz	r0, 801a1f0 <rcl_action_take_goal_request+0x64>
 801a1b6:	6820      	ldr	r0, [r4, #0]
 801a1b8:	300c      	adds	r0, #12
 801a1ba:	f7f6 fb21 	bl	8010800 <rcl_publisher_is_valid>
 801a1be:	b1b8      	cbz	r0, 801a1f0 <rcl_action_take_goal_request+0x64>
 801a1c0:	6820      	ldr	r0, [r4, #0]
 801a1c2:	3010      	adds	r0, #16
 801a1c4:	f7f6 fb1c 	bl	8010800 <rcl_publisher_is_valid>
 801a1c8:	b190      	cbz	r0, 801a1f0 <rcl_action_take_goal_request+0x64>
 801a1ca:	b1cd      	cbz	r5, 801a200 <rcl_action_take_goal_request+0x74>
 801a1cc:	b1c6      	cbz	r6, 801a200 <rcl_action_take_goal_request+0x74>
 801a1ce:	462a      	mov	r2, r5
 801a1d0:	4631      	mov	r1, r6
 801a1d2:	6820      	ldr	r0, [r4, #0]
 801a1d4:	f7fe fac2 	bl	801875c <rcl_take_request>
 801a1d8:	b148      	cbz	r0, 801a1ee <rcl_action_take_goal_request+0x62>
 801a1da:	280a      	cmp	r0, #10
 801a1dc:	d007      	beq.n	801a1ee <rcl_action_take_goal_request+0x62>
 801a1de:	f240 2259 	movw	r2, #601	@ 0x259
 801a1e2:	f640 0399 	movw	r3, #2201	@ 0x899
 801a1e6:	4290      	cmp	r0, r2
 801a1e8:	bf0c      	ite	eq
 801a1ea:	4618      	moveq	r0, r3
 801a1ec:	2001      	movne	r0, #1
 801a1ee:	bd70      	pop	{r4, r5, r6, pc}
 801a1f0:	f7f7 fa9a 	bl	8011728 <rcutils_reset_error>
 801a1f4:	f640 0098 	movw	r0, #2200	@ 0x898
 801a1f8:	bd70      	pop	{r4, r5, r6, pc}
 801a1fa:	f640 0098 	movw	r0, #2200	@ 0x898
 801a1fe:	bd70      	pop	{r4, r5, r6, pc}
 801a200:	200b      	movs	r0, #11
 801a202:	bd70      	pop	{r4, r5, r6, pc}
 801a204:	f640 0098 	movw	r0, #2200	@ 0x898
 801a208:	4770      	bx	lr
 801a20a:	bf00      	nop

0801a20c <rcl_action_send_goal_response>:
 801a20c:	b390      	cbz	r0, 801a274 <rcl_action_send_goal_response+0x68>
 801a20e:	b570      	push	{r4, r5, r6, lr}
 801a210:	4604      	mov	r4, r0
 801a212:	6800      	ldr	r0, [r0, #0]
 801a214:	b348      	cbz	r0, 801a26a <rcl_action_send_goal_response+0x5e>
 801a216:	460e      	mov	r6, r1
 801a218:	4615      	mov	r5, r2
 801a21a:	f7fe faf7 	bl	801880c <rcl_service_is_valid>
 801a21e:	b1f8      	cbz	r0, 801a260 <rcl_action_send_goal_response+0x54>
 801a220:	6820      	ldr	r0, [r4, #0]
 801a222:	3004      	adds	r0, #4
 801a224:	f7fe faf2 	bl	801880c <rcl_service_is_valid>
 801a228:	b1d0      	cbz	r0, 801a260 <rcl_action_send_goal_response+0x54>
 801a22a:	6820      	ldr	r0, [r4, #0]
 801a22c:	3008      	adds	r0, #8
 801a22e:	f7fe faed 	bl	801880c <rcl_service_is_valid>
 801a232:	b1a8      	cbz	r0, 801a260 <rcl_action_send_goal_response+0x54>
 801a234:	6820      	ldr	r0, [r4, #0]
 801a236:	300c      	adds	r0, #12
 801a238:	f7f6 fae2 	bl	8010800 <rcl_publisher_is_valid>
 801a23c:	b180      	cbz	r0, 801a260 <rcl_action_send_goal_response+0x54>
 801a23e:	6820      	ldr	r0, [r4, #0]
 801a240:	3010      	adds	r0, #16
 801a242:	f7f6 fadd 	bl	8010800 <rcl_publisher_is_valid>
 801a246:	b158      	cbz	r0, 801a260 <rcl_action_send_goal_response+0x54>
 801a248:	b195      	cbz	r5, 801a270 <rcl_action_send_goal_response+0x64>
 801a24a:	b18e      	cbz	r6, 801a270 <rcl_action_send_goal_response+0x64>
 801a24c:	462a      	mov	r2, r5
 801a24e:	4631      	mov	r1, r6
 801a250:	6820      	ldr	r0, [r4, #0]
 801a252:	f7fe fac3 	bl	80187dc <rcl_send_response>
 801a256:	b110      	cbz	r0, 801a25e <rcl_action_send_goal_response+0x52>
 801a258:	2802      	cmp	r0, #2
 801a25a:	bf18      	it	ne
 801a25c:	2001      	movne	r0, #1
 801a25e:	bd70      	pop	{r4, r5, r6, pc}
 801a260:	f7f7 fa62 	bl	8011728 <rcutils_reset_error>
 801a264:	f640 0098 	movw	r0, #2200	@ 0x898
 801a268:	bd70      	pop	{r4, r5, r6, pc}
 801a26a:	f640 0098 	movw	r0, #2200	@ 0x898
 801a26e:	bd70      	pop	{r4, r5, r6, pc}
 801a270:	200b      	movs	r0, #11
 801a272:	bd70      	pop	{r4, r5, r6, pc}
 801a274:	f640 0098 	movw	r0, #2200	@ 0x898
 801a278:	4770      	bx	lr
 801a27a:	bf00      	nop

0801a27c <rcl_action_take_result_request>:
 801a27c:	2800      	cmp	r0, #0
 801a27e:	d03a      	beq.n	801a2f6 <rcl_action_take_result_request+0x7a>
 801a280:	b570      	push	{r4, r5, r6, lr}
 801a282:	4604      	mov	r4, r0
 801a284:	6800      	ldr	r0, [r0, #0]
 801a286:	b388      	cbz	r0, 801a2ec <rcl_action_take_result_request+0x70>
 801a288:	460e      	mov	r6, r1
 801a28a:	4615      	mov	r5, r2
 801a28c:	f7fe fabe 	bl	801880c <rcl_service_is_valid>
 801a290:	b338      	cbz	r0, 801a2e2 <rcl_action_take_result_request+0x66>
 801a292:	6820      	ldr	r0, [r4, #0]
 801a294:	3004      	adds	r0, #4
 801a296:	f7fe fab9 	bl	801880c <rcl_service_is_valid>
 801a29a:	b310      	cbz	r0, 801a2e2 <rcl_action_take_result_request+0x66>
 801a29c:	6820      	ldr	r0, [r4, #0]
 801a29e:	3008      	adds	r0, #8
 801a2a0:	f7fe fab4 	bl	801880c <rcl_service_is_valid>
 801a2a4:	b1e8      	cbz	r0, 801a2e2 <rcl_action_take_result_request+0x66>
 801a2a6:	6820      	ldr	r0, [r4, #0]
 801a2a8:	300c      	adds	r0, #12
 801a2aa:	f7f6 faa9 	bl	8010800 <rcl_publisher_is_valid>
 801a2ae:	b1c0      	cbz	r0, 801a2e2 <rcl_action_take_result_request+0x66>
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	3010      	adds	r0, #16
 801a2b4:	f7f6 faa4 	bl	8010800 <rcl_publisher_is_valid>
 801a2b8:	b198      	cbz	r0, 801a2e2 <rcl_action_take_result_request+0x66>
 801a2ba:	b1d5      	cbz	r5, 801a2f2 <rcl_action_take_result_request+0x76>
 801a2bc:	b1ce      	cbz	r6, 801a2f2 <rcl_action_take_result_request+0x76>
 801a2be:	6820      	ldr	r0, [r4, #0]
 801a2c0:	462a      	mov	r2, r5
 801a2c2:	4631      	mov	r1, r6
 801a2c4:	3008      	adds	r0, #8
 801a2c6:	f7fe fa49 	bl	801875c <rcl_take_request>
 801a2ca:	b148      	cbz	r0, 801a2e0 <rcl_action_take_result_request+0x64>
 801a2cc:	280a      	cmp	r0, #10
 801a2ce:	d007      	beq.n	801a2e0 <rcl_action_take_result_request+0x64>
 801a2d0:	f240 2259 	movw	r2, #601	@ 0x259
 801a2d4:	f640 0399 	movw	r3, #2201	@ 0x899
 801a2d8:	4290      	cmp	r0, r2
 801a2da:	bf0c      	ite	eq
 801a2dc:	4618      	moveq	r0, r3
 801a2de:	2001      	movne	r0, #1
 801a2e0:	bd70      	pop	{r4, r5, r6, pc}
 801a2e2:	f7f7 fa21 	bl	8011728 <rcutils_reset_error>
 801a2e6:	f640 0098 	movw	r0, #2200	@ 0x898
 801a2ea:	bd70      	pop	{r4, r5, r6, pc}
 801a2ec:	f640 0098 	movw	r0, #2200	@ 0x898
 801a2f0:	bd70      	pop	{r4, r5, r6, pc}
 801a2f2:	200b      	movs	r0, #11
 801a2f4:	bd70      	pop	{r4, r5, r6, pc}
 801a2f6:	f640 0098 	movw	r0, #2200	@ 0x898
 801a2fa:	4770      	bx	lr

0801a2fc <rcl_action_take_cancel_request>:
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	d03a      	beq.n	801a376 <rcl_action_take_cancel_request+0x7a>
 801a300:	b570      	push	{r4, r5, r6, lr}
 801a302:	4604      	mov	r4, r0
 801a304:	6800      	ldr	r0, [r0, #0]
 801a306:	b388      	cbz	r0, 801a36c <rcl_action_take_cancel_request+0x70>
 801a308:	460e      	mov	r6, r1
 801a30a:	4615      	mov	r5, r2
 801a30c:	f7fe fa7e 	bl	801880c <rcl_service_is_valid>
 801a310:	b338      	cbz	r0, 801a362 <rcl_action_take_cancel_request+0x66>
 801a312:	6820      	ldr	r0, [r4, #0]
 801a314:	3004      	adds	r0, #4
 801a316:	f7fe fa79 	bl	801880c <rcl_service_is_valid>
 801a31a:	b310      	cbz	r0, 801a362 <rcl_action_take_cancel_request+0x66>
 801a31c:	6820      	ldr	r0, [r4, #0]
 801a31e:	3008      	adds	r0, #8
 801a320:	f7fe fa74 	bl	801880c <rcl_service_is_valid>
 801a324:	b1e8      	cbz	r0, 801a362 <rcl_action_take_cancel_request+0x66>
 801a326:	6820      	ldr	r0, [r4, #0]
 801a328:	300c      	adds	r0, #12
 801a32a:	f7f6 fa69 	bl	8010800 <rcl_publisher_is_valid>
 801a32e:	b1c0      	cbz	r0, 801a362 <rcl_action_take_cancel_request+0x66>
 801a330:	6820      	ldr	r0, [r4, #0]
 801a332:	3010      	adds	r0, #16
 801a334:	f7f6 fa64 	bl	8010800 <rcl_publisher_is_valid>
 801a338:	b198      	cbz	r0, 801a362 <rcl_action_take_cancel_request+0x66>
 801a33a:	b1d5      	cbz	r5, 801a372 <rcl_action_take_cancel_request+0x76>
 801a33c:	b1ce      	cbz	r6, 801a372 <rcl_action_take_cancel_request+0x76>
 801a33e:	6820      	ldr	r0, [r4, #0]
 801a340:	462a      	mov	r2, r5
 801a342:	4631      	mov	r1, r6
 801a344:	3004      	adds	r0, #4
 801a346:	f7fe fa09 	bl	801875c <rcl_take_request>
 801a34a:	b148      	cbz	r0, 801a360 <rcl_action_take_cancel_request+0x64>
 801a34c:	280a      	cmp	r0, #10
 801a34e:	d007      	beq.n	801a360 <rcl_action_take_cancel_request+0x64>
 801a350:	f240 2259 	movw	r2, #601	@ 0x259
 801a354:	f640 0399 	movw	r3, #2201	@ 0x899
 801a358:	4290      	cmp	r0, r2
 801a35a:	bf0c      	ite	eq
 801a35c:	4618      	moveq	r0, r3
 801a35e:	2001      	movne	r0, #1
 801a360:	bd70      	pop	{r4, r5, r6, pc}
 801a362:	f7f7 f9e1 	bl	8011728 <rcutils_reset_error>
 801a366:	f640 0098 	movw	r0, #2200	@ 0x898
 801a36a:	bd70      	pop	{r4, r5, r6, pc}
 801a36c:	f640 0098 	movw	r0, #2200	@ 0x898
 801a370:	bd70      	pop	{r4, r5, r6, pc}
 801a372:	200b      	movs	r0, #11
 801a374:	bd70      	pop	{r4, r5, r6, pc}
 801a376:	f640 0098 	movw	r0, #2200	@ 0x898
 801a37a:	4770      	bx	lr

0801a37c <rcl_action_send_cancel_response>:
 801a37c:	b398      	cbz	r0, 801a3e6 <rcl_action_send_cancel_response+0x6a>
 801a37e:	b570      	push	{r4, r5, r6, lr}
 801a380:	4604      	mov	r4, r0
 801a382:	6800      	ldr	r0, [r0, #0]
 801a384:	b350      	cbz	r0, 801a3dc <rcl_action_send_cancel_response+0x60>
 801a386:	460e      	mov	r6, r1
 801a388:	4615      	mov	r5, r2
 801a38a:	f7fe fa3f 	bl	801880c <rcl_service_is_valid>
 801a38e:	b300      	cbz	r0, 801a3d2 <rcl_action_send_cancel_response+0x56>
 801a390:	6820      	ldr	r0, [r4, #0]
 801a392:	3004      	adds	r0, #4
 801a394:	f7fe fa3a 	bl	801880c <rcl_service_is_valid>
 801a398:	b1d8      	cbz	r0, 801a3d2 <rcl_action_send_cancel_response+0x56>
 801a39a:	6820      	ldr	r0, [r4, #0]
 801a39c:	3008      	adds	r0, #8
 801a39e:	f7fe fa35 	bl	801880c <rcl_service_is_valid>
 801a3a2:	b1b0      	cbz	r0, 801a3d2 <rcl_action_send_cancel_response+0x56>
 801a3a4:	6820      	ldr	r0, [r4, #0]
 801a3a6:	300c      	adds	r0, #12
 801a3a8:	f7f6 fa2a 	bl	8010800 <rcl_publisher_is_valid>
 801a3ac:	b188      	cbz	r0, 801a3d2 <rcl_action_send_cancel_response+0x56>
 801a3ae:	6820      	ldr	r0, [r4, #0]
 801a3b0:	3010      	adds	r0, #16
 801a3b2:	f7f6 fa25 	bl	8010800 <rcl_publisher_is_valid>
 801a3b6:	b160      	cbz	r0, 801a3d2 <rcl_action_send_cancel_response+0x56>
 801a3b8:	b19d      	cbz	r5, 801a3e2 <rcl_action_send_cancel_response+0x66>
 801a3ba:	b196      	cbz	r6, 801a3e2 <rcl_action_send_cancel_response+0x66>
 801a3bc:	6820      	ldr	r0, [r4, #0]
 801a3be:	462a      	mov	r2, r5
 801a3c0:	4631      	mov	r1, r6
 801a3c2:	3004      	adds	r0, #4
 801a3c4:	f7fe fa0a 	bl	80187dc <rcl_send_response>
 801a3c8:	b110      	cbz	r0, 801a3d0 <rcl_action_send_cancel_response+0x54>
 801a3ca:	2802      	cmp	r0, #2
 801a3cc:	bf18      	it	ne
 801a3ce:	2001      	movne	r0, #1
 801a3d0:	bd70      	pop	{r4, r5, r6, pc}
 801a3d2:	f7f7 f9a9 	bl	8011728 <rcutils_reset_error>
 801a3d6:	f640 0098 	movw	r0, #2200	@ 0x898
 801a3da:	bd70      	pop	{r4, r5, r6, pc}
 801a3dc:	f640 0098 	movw	r0, #2200	@ 0x898
 801a3e0:	bd70      	pop	{r4, r5, r6, pc}
 801a3e2:	200b      	movs	r0, #11
 801a3e4:	bd70      	pop	{r4, r5, r6, pc}
 801a3e6:	f640 0098 	movw	r0, #2200	@ 0x898
 801a3ea:	4770      	bx	lr

0801a3ec <rcl_action_wait_set_add_action_server>:
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d04d      	beq.n	801a48c <rcl_action_wait_set_add_action_server+0xa0>
 801a3f0:	b570      	push	{r4, r5, r6, lr}
 801a3f2:	460c      	mov	r4, r1
 801a3f4:	b159      	cbz	r1, 801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a3f6:	4605      	mov	r5, r0
 801a3f8:	6808      	ldr	r0, [r1, #0]
 801a3fa:	b140      	cbz	r0, 801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a3fc:	4616      	mov	r6, r2
 801a3fe:	f7fe fa05 	bl	801880c <rcl_service_is_valid>
 801a402:	b120      	cbz	r0, 801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a404:	6820      	ldr	r0, [r4, #0]
 801a406:	3004      	adds	r0, #4
 801a408:	f7fe fa00 	bl	801880c <rcl_service_is_valid>
 801a40c:	b910      	cbnz	r0, 801a414 <rcl_action_wait_set_add_action_server+0x28>
 801a40e:	f640 0098 	movw	r0, #2200	@ 0x898
 801a412:	bd70      	pop	{r4, r5, r6, pc}
 801a414:	6820      	ldr	r0, [r4, #0]
 801a416:	3008      	adds	r0, #8
 801a418:	f7fe f9f8 	bl	801880c <rcl_service_is_valid>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d0f6      	beq.n	801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a420:	6820      	ldr	r0, [r4, #0]
 801a422:	300c      	adds	r0, #12
 801a424:	f7f6 fa04 	bl	8010830 <rcl_publisher_is_valid_except_context>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d0f0      	beq.n	801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a42c:	6820      	ldr	r0, [r4, #0]
 801a42e:	3010      	adds	r0, #16
 801a430:	f7f6 f9fe 	bl	8010830 <rcl_publisher_is_valid_except_context>
 801a434:	2800      	cmp	r0, #0
 801a436:	d0ea      	beq.n	801a40e <rcl_action_wait_set_add_action_server+0x22>
 801a438:	6821      	ldr	r1, [r4, #0]
 801a43a:	4628      	mov	r0, r5
 801a43c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801a440:	f7ff fad0 	bl	80199e4 <rcl_wait_set_add_service>
 801a444:	2800      	cmp	r0, #0
 801a446:	d1e4      	bne.n	801a412 <rcl_action_wait_set_add_action_server+0x26>
 801a448:	6821      	ldr	r1, [r4, #0]
 801a44a:	4628      	mov	r0, r5
 801a44c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801a450:	3104      	adds	r1, #4
 801a452:	f7ff fac7 	bl	80199e4 <rcl_wait_set_add_service>
 801a456:	2800      	cmp	r0, #0
 801a458:	d1db      	bne.n	801a412 <rcl_action_wait_set_add_action_server+0x26>
 801a45a:	6821      	ldr	r1, [r4, #0]
 801a45c:	4628      	mov	r0, r5
 801a45e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801a462:	3108      	adds	r1, #8
 801a464:	f7ff fabe 	bl	80199e4 <rcl_wait_set_add_service>
 801a468:	2800      	cmp	r0, #0
 801a46a:	d1d2      	bne.n	801a412 <rcl_action_wait_set_add_action_server+0x26>
 801a46c:	6821      	ldr	r1, [r4, #0]
 801a46e:	4628      	mov	r0, r5
 801a470:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801a474:	3114      	adds	r1, #20
 801a476:	f7ff fa59 	bl	801992c <rcl_wait_set_add_timer>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	d1c9      	bne.n	801a412 <rcl_action_wait_set_add_action_server+0x26>
 801a47e:	2e00      	cmp	r6, #0
 801a480:	d0c7      	beq.n	801a412 <rcl_action_wait_set_add_action_server+0x26>
 801a482:	6823      	ldr	r3, [r4, #0]
 801a484:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801a488:	6033      	str	r3, [r6, #0]
 801a48a:	bd70      	pop	{r4, r5, r6, pc}
 801a48c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a490:	4770      	bx	lr
 801a492:	bf00      	nop

0801a494 <rcl_action_server_wait_set_get_entities_ready>:
 801a494:	2800      	cmp	r0, #0
 801a496:	d067      	beq.n	801a568 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801a498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a49c:	460c      	mov	r4, r1
 801a49e:	b161      	cbz	r1, 801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4a0:	4605      	mov	r5, r0
 801a4a2:	6808      	ldr	r0, [r1, #0]
 801a4a4:	b148      	cbz	r0, 801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4a6:	4616      	mov	r6, r2
 801a4a8:	4698      	mov	r8, r3
 801a4aa:	f7fe f9af 	bl	801880c <rcl_service_is_valid>
 801a4ae:	b120      	cbz	r0, 801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4b0:	6820      	ldr	r0, [r4, #0]
 801a4b2:	3004      	adds	r0, #4
 801a4b4:	f7fe f9aa 	bl	801880c <rcl_service_is_valid>
 801a4b8:	b918      	cbnz	r0, 801a4c2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801a4ba:	f640 0098 	movw	r0, #2200	@ 0x898
 801a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c2:	6820      	ldr	r0, [r4, #0]
 801a4c4:	3008      	adds	r0, #8
 801a4c6:	f7fe f9a1 	bl	801880c <rcl_service_is_valid>
 801a4ca:	2800      	cmp	r0, #0
 801a4cc:	d0f5      	beq.n	801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4ce:	6820      	ldr	r0, [r4, #0]
 801a4d0:	300c      	adds	r0, #12
 801a4d2:	f7f6 f9ad 	bl	8010830 <rcl_publisher_is_valid_except_context>
 801a4d6:	2800      	cmp	r0, #0
 801a4d8:	d0ef      	beq.n	801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4da:	6820      	ldr	r0, [r4, #0]
 801a4dc:	3010      	adds	r0, #16
 801a4de:	f7f6 f9a7 	bl	8010830 <rcl_publisher_is_valid_except_context>
 801a4e2:	2800      	cmp	r0, #0
 801a4e4:	d0e9      	beq.n	801a4ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801a4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a4ea:	2a00      	cmp	r2, #0
 801a4ec:	bf18      	it	ne
 801a4ee:	2b00      	cmpne	r3, #0
 801a4f0:	bf0c      	ite	eq
 801a4f2:	2101      	moveq	r1, #1
 801a4f4:	2100      	movne	r1, #0
 801a4f6:	f1b8 0f00 	cmp.w	r8, #0
 801a4fa:	bf08      	it	eq
 801a4fc:	f041 0101 	orreq.w	r1, r1, #1
 801a500:	bba9      	cbnz	r1, 801a56e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801a502:	b3a6      	cbz	r6, 801a56e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801a504:	6821      	ldr	r1, [r4, #0]
 801a506:	2000      	movs	r0, #0
 801a508:	692c      	ldr	r4, [r5, #16]
 801a50a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801a50e:	6a2f      	ldr	r7, [r5, #32]
 801a510:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a514:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801a518:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801a51c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801a520:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801a524:	1a64      	subs	r4, r4, r1
 801a526:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801a52a:	fab4 f484 	clz	r4, r4
 801a52e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801a532:	0964      	lsrs	r4, r4, #5
 801a534:	7034      	strb	r4, [r6, #0]
 801a536:	1d0c      	adds	r4, r1, #4
 801a538:	1b2c      	subs	r4, r5, r4
 801a53a:	fab4 f484 	clz	r4, r4
 801a53e:	0964      	lsrs	r4, r4, #5
 801a540:	f888 4000 	strb.w	r4, [r8]
 801a544:	f101 0408 	add.w	r4, r1, #8
 801a548:	1b1b      	subs	r3, r3, r4
 801a54a:	9c06      	ldr	r4, [sp, #24]
 801a54c:	fab3 f383 	clz	r3, r3
 801a550:	095b      	lsrs	r3, r3, #5
 801a552:	7023      	strb	r3, [r4, #0]
 801a554:	f101 0314 	add.w	r3, r1, #20
 801a558:	1ad3      	subs	r3, r2, r3
 801a55a:	9a07      	ldr	r2, [sp, #28]
 801a55c:	fab3 f383 	clz	r3, r3
 801a560:	095b      	lsrs	r3, r3, #5
 801a562:	7013      	strb	r3, [r2, #0]
 801a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a568:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a56c:	4770      	bx	lr
 801a56e:	200b      	movs	r0, #11
 801a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a574 <_execute_event_handler>:
 801a574:	2002      	movs	r0, #2
 801a576:	4770      	bx	lr

0801a578 <_cancel_goal_event_handler>:
 801a578:	2003      	movs	r0, #3
 801a57a:	4770      	bx	lr

0801a57c <_succeed_event_handler>:
 801a57c:	2004      	movs	r0, #4
 801a57e:	4770      	bx	lr

0801a580 <_abort_event_handler>:
 801a580:	2006      	movs	r0, #6
 801a582:	4770      	bx	lr

0801a584 <_canceled_event_handler>:
 801a584:	2005      	movs	r0, #5
 801a586:	4770      	bx	lr

0801a588 <rcl_action_transition_goal_state>:
 801a588:	b2c2      	uxtb	r2, r0
 801a58a:	2a06      	cmp	r2, #6
 801a58c:	d810      	bhi.n	801a5b0 <rcl_action_transition_goal_state+0x28>
 801a58e:	2904      	cmp	r1, #4
 801a590:	d80e      	bhi.n	801a5b0 <rcl_action_transition_goal_state+0x28>
 801a592:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801a596:	b410      	push	{r4}
 801a598:	1853      	adds	r3, r2, r1
 801a59a:	4c06      	ldr	r4, [pc, #24]	@ (801a5b4 <rcl_action_transition_goal_state+0x2c>)
 801a59c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a5a0:	b113      	cbz	r3, 801a5a8 <rcl_action_transition_goal_state+0x20>
 801a5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5a6:	4718      	bx	r3
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5ae:	4770      	bx	lr
 801a5b0:	2000      	movs	r0, #0
 801a5b2:	4770      	bx	lr
 801a5b4:	0801f7fc 	.word	0x0801f7fc

0801a5b8 <rcl_action_get_zero_initialized_cancel_response>:
 801a5b8:	b510      	push	{r4, lr}
 801a5ba:	4c07      	ldr	r4, [pc, #28]	@ (801a5d8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801a5bc:	4686      	mov	lr, r0
 801a5be:	4684      	mov	ip, r0
 801a5c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a5cc:	6823      	ldr	r3, [r4, #0]
 801a5ce:	4670      	mov	r0, lr
 801a5d0:	f8cc 3000 	str.w	r3, [ip]
 801a5d4:	bd10      	pop	{r4, pc}
 801a5d6:	bf00      	nop
 801a5d8:	0801f888 	.word	0x0801f888

0801a5dc <rclc_action_send_result_request>:
 801a5dc:	b1d0      	cbz	r0, 801a614 <rclc_action_send_result_request+0x38>
 801a5de:	4684      	mov	ip, r0
 801a5e0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801a5e4:	b500      	push	{lr}
 801a5e6:	b087      	sub	sp, #28
 801a5e8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801a5ec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801a5f0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801a5f4:	f10d 0e08 	add.w	lr, sp, #8
 801a5f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a5fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a600:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801a604:	a902      	add	r1, sp, #8
 801a606:	3010      	adds	r0, #16
 801a608:	f7ff fbca 	bl	8019da0 <rcl_action_send_result_request>
 801a60c:	b920      	cbnz	r0, 801a618 <rclc_action_send_result_request+0x3c>
 801a60e:	b007      	add	sp, #28
 801a610:	f85d fb04 	ldr.w	pc, [sp], #4
 801a614:	200b      	movs	r0, #11
 801a616:	4770      	bx	lr
 801a618:	9001      	str	r0, [sp, #4]
 801a61a:	f7f7 f885 	bl	8011728 <rcutils_reset_error>
 801a61e:	9801      	ldr	r0, [sp, #4]
 801a620:	b007      	add	sp, #28
 801a622:	f85d fb04 	ldr.w	pc, [sp], #4
 801a626:	bf00      	nop

0801a628 <rclc_action_take_goal_handle>:
 801a628:	b160      	cbz	r0, 801a644 <rclc_action_take_goal_handle+0x1c>
 801a62a:	6883      	ldr	r3, [r0, #8]
 801a62c:	b143      	cbz	r3, 801a640 <rclc_action_take_goal_handle+0x18>
 801a62e:	6819      	ldr	r1, [r3, #0]
 801a630:	2200      	movs	r2, #0
 801a632:	6081      	str	r1, [r0, #8]
 801a634:	721a      	strb	r2, [r3, #8]
 801a636:	68c1      	ldr	r1, [r0, #12]
 801a638:	621a      	str	r2, [r3, #32]
 801a63a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801a63c:	6019      	str	r1, [r3, #0]
 801a63e:	60c3      	str	r3, [r0, #12]
 801a640:	4618      	mov	r0, r3
 801a642:	4770      	bx	lr
 801a644:	4603      	mov	r3, r0
 801a646:	e7fb      	b.n	801a640 <rclc_action_take_goal_handle+0x18>

0801a648 <rclc_action_remove_used_goal_handle>:
 801a648:	b180      	cbz	r0, 801a66c <rclc_action_remove_used_goal_handle+0x24>
 801a64a:	b179      	cbz	r1, 801a66c <rclc_action_remove_used_goal_handle+0x24>
 801a64c:	68c3      	ldr	r3, [r0, #12]
 801a64e:	4299      	cmp	r1, r3
 801a650:	d00d      	beq.n	801a66e <rclc_action_remove_used_goal_handle+0x26>
 801a652:	b12b      	cbz	r3, 801a660 <rclc_action_remove_used_goal_handle+0x18>
 801a654:	681a      	ldr	r2, [r3, #0]
 801a656:	4291      	cmp	r1, r2
 801a658:	d003      	beq.n	801a662 <rclc_action_remove_used_goal_handle+0x1a>
 801a65a:	4613      	mov	r3, r2
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d1f9      	bne.n	801a654 <rclc_action_remove_used_goal_handle+0xc>
 801a660:	4770      	bx	lr
 801a662:	680a      	ldr	r2, [r1, #0]
 801a664:	601a      	str	r2, [r3, #0]
 801a666:	6883      	ldr	r3, [r0, #8]
 801a668:	600b      	str	r3, [r1, #0]
 801a66a:	6081      	str	r1, [r0, #8]
 801a66c:	4770      	bx	lr
 801a66e:	680b      	ldr	r3, [r1, #0]
 801a670:	60c3      	str	r3, [r0, #12]
 801a672:	e7f8      	b.n	801a666 <rclc_action_remove_used_goal_handle+0x1e>

0801a674 <rclc_action_find_goal_handle_by_uuid>:
 801a674:	b538      	push	{r3, r4, r5, lr}
 801a676:	b181      	cbz	r1, 801a69a <rclc_action_find_goal_handle_by_uuid+0x26>
 801a678:	b178      	cbz	r0, 801a69a <rclc_action_find_goal_handle_by_uuid+0x26>
 801a67a:	68c4      	ldr	r4, [r0, #12]
 801a67c:	460d      	mov	r5, r1
 801a67e:	b914      	cbnz	r4, 801a686 <rclc_action_find_goal_handle_by_uuid+0x12>
 801a680:	e009      	b.n	801a696 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a682:	6824      	ldr	r4, [r4, #0]
 801a684:	b13c      	cbz	r4, 801a696 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a686:	f104 0009 	add.w	r0, r4, #9
 801a68a:	2210      	movs	r2, #16
 801a68c:	4629      	mov	r1, r5
 801a68e:	f003 fd21 	bl	801e0d4 <memcmp>
 801a692:	2800      	cmp	r0, #0
 801a694:	d1f5      	bne.n	801a682 <rclc_action_find_goal_handle_by_uuid+0xe>
 801a696:	4620      	mov	r0, r4
 801a698:	bd38      	pop	{r3, r4, r5, pc}
 801a69a:	2400      	movs	r4, #0
 801a69c:	4620      	mov	r0, r4
 801a69e:	bd38      	pop	{r3, r4, r5, pc}

0801a6a0 <rclc_action_find_first_handle_by_status>:
 801a6a0:	b140      	cbz	r0, 801a6b4 <rclc_action_find_first_handle_by_status+0x14>
 801a6a2:	68c0      	ldr	r0, [r0, #12]
 801a6a4:	b910      	cbnz	r0, 801a6ac <rclc_action_find_first_handle_by_status+0xc>
 801a6a6:	e005      	b.n	801a6b4 <rclc_action_find_first_handle_by_status+0x14>
 801a6a8:	6800      	ldr	r0, [r0, #0]
 801a6aa:	b118      	cbz	r0, 801a6b4 <rclc_action_find_first_handle_by_status+0x14>
 801a6ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a6b0:	428b      	cmp	r3, r1
 801a6b2:	d1f9      	bne.n	801a6a8 <rclc_action_find_first_handle_by_status+0x8>
 801a6b4:	4770      	bx	lr
 801a6b6:	bf00      	nop

0801a6b8 <rclc_action_find_first_terminated_handle>:
 801a6b8:	b140      	cbz	r0, 801a6cc <rclc_action_find_first_terminated_handle+0x14>
 801a6ba:	68c0      	ldr	r0, [r0, #12]
 801a6bc:	b910      	cbnz	r0, 801a6c4 <rclc_action_find_first_terminated_handle+0xc>
 801a6be:	e005      	b.n	801a6cc <rclc_action_find_first_terminated_handle+0x14>
 801a6c0:	6800      	ldr	r0, [r0, #0]
 801a6c2:	b118      	cbz	r0, 801a6cc <rclc_action_find_first_terminated_handle+0x14>
 801a6c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a6c8:	2b03      	cmp	r3, #3
 801a6ca:	ddf9      	ble.n	801a6c0 <rclc_action_find_first_terminated_handle+0x8>
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop

0801a6d0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801a6d0:	b170      	cbz	r0, 801a6f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a6d2:	68c0      	ldr	r0, [r0, #12]
 801a6d4:	b160      	cbz	r0, 801a6f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a6d6:	b410      	push	{r4}
 801a6d8:	e001      	b.n	801a6de <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801a6da:	6800      	ldr	r0, [r0, #0]
 801a6dc:	b128      	cbz	r0, 801a6ea <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801a6de:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801a6e2:	4299      	cmp	r1, r3
 801a6e4:	bf08      	it	eq
 801a6e6:	4294      	cmpeq	r4, r2
 801a6e8:	d1f7      	bne.n	801a6da <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801a6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6ee:	4770      	bx	lr
 801a6f0:	4770      	bx	lr
 801a6f2:	bf00      	nop

0801a6f4 <rclc_action_find_handle_by_result_request_sequence_number>:
 801a6f4:	b170      	cbz	r0, 801a714 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801a6f6:	68c0      	ldr	r0, [r0, #12]
 801a6f8:	b160      	cbz	r0, 801a714 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801a6fa:	b410      	push	{r4}
 801a6fc:	e001      	b.n	801a702 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801a6fe:	6800      	ldr	r0, [r0, #0]
 801a700:	b128      	cbz	r0, 801a70e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801a702:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801a706:	4299      	cmp	r1, r3
 801a708:	bf08      	it	eq
 801a70a:	4294      	cmpeq	r4, r2
 801a70c:	d1f7      	bne.n	801a6fe <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801a70e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a712:	4770      	bx	lr
 801a714:	4770      	bx	lr
 801a716:	bf00      	nop

0801a718 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801a718:	b170      	cbz	r0, 801a738 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801a71a:	68c0      	ldr	r0, [r0, #12]
 801a71c:	b160      	cbz	r0, 801a738 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801a71e:	b410      	push	{r4}
 801a720:	e001      	b.n	801a726 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801a722:	6800      	ldr	r0, [r0, #0]
 801a724:	b128      	cbz	r0, 801a732 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801a726:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801a72a:	4299      	cmp	r1, r3
 801a72c:	bf08      	it	eq
 801a72e:	4294      	cmpeq	r4, r2
 801a730:	d1f7      	bne.n	801a722 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801a732:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a736:	4770      	bx	lr
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop

0801a73c <rclc_action_find_first_handle_with_goal_response>:
 801a73c:	b140      	cbz	r0, 801a750 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a73e:	68c0      	ldr	r0, [r0, #12]
 801a740:	b910      	cbnz	r0, 801a748 <rclc_action_find_first_handle_with_goal_response+0xc>
 801a742:	e005      	b.n	801a750 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a744:	6800      	ldr	r0, [r0, #0]
 801a746:	b118      	cbz	r0, 801a750 <rclc_action_find_first_handle_with_goal_response+0x14>
 801a748:	f890 3020 	ldrb.w	r3, [r0, #32]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d0f9      	beq.n	801a744 <rclc_action_find_first_handle_with_goal_response+0x8>
 801a750:	4770      	bx	lr
 801a752:	bf00      	nop

0801a754 <rclc_action_find_first_handle_with_result_response>:
 801a754:	b140      	cbz	r0, 801a768 <rclc_action_find_first_handle_with_result_response+0x14>
 801a756:	68c0      	ldr	r0, [r0, #12]
 801a758:	b910      	cbnz	r0, 801a760 <rclc_action_find_first_handle_with_result_response+0xc>
 801a75a:	e005      	b.n	801a768 <rclc_action_find_first_handle_with_result_response+0x14>
 801a75c:	6800      	ldr	r0, [r0, #0]
 801a75e:	b118      	cbz	r0, 801a768 <rclc_action_find_first_handle_with_result_response+0x14>
 801a760:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801a764:	2b00      	cmp	r3, #0
 801a766:	d0f9      	beq.n	801a75c <rclc_action_find_first_handle_with_result_response+0x8>
 801a768:	4770      	bx	lr
 801a76a:	bf00      	nop

0801a76c <rclc_action_server_response_goal_request>:
 801a76c:	b198      	cbz	r0, 801a796 <rclc_action_server_response_goal_request+0x2a>
 801a76e:	2200      	movs	r2, #0
 801a770:	460b      	mov	r3, r1
 801a772:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801a776:	b510      	push	{r4, lr}
 801a778:	6844      	ldr	r4, [r0, #4]
 801a77a:	b086      	sub	sp, #24
 801a77c:	f104 0010 	add.w	r0, r4, #16
 801a780:	9205      	str	r2, [sp, #20]
 801a782:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801a786:	aa03      	add	r2, sp, #12
 801a788:	f88d 300c 	strb.w	r3, [sp, #12]
 801a78c:	f7ff fd3e 	bl	801a20c <rcl_action_send_goal_response>
 801a790:	b918      	cbnz	r0, 801a79a <rclc_action_server_response_goal_request+0x2e>
 801a792:	b006      	add	sp, #24
 801a794:	bd10      	pop	{r4, pc}
 801a796:	200b      	movs	r0, #11
 801a798:	4770      	bx	lr
 801a79a:	9001      	str	r0, [sp, #4]
 801a79c:	f7f6 ffc4 	bl	8011728 <rcutils_reset_error>
 801a7a0:	9801      	ldr	r0, [sp, #4]
 801a7a2:	b006      	add	sp, #24
 801a7a4:	bd10      	pop	{r4, pc}
 801a7a6:	bf00      	nop

0801a7a8 <rclc_action_server_goal_cancel_accept>:
 801a7a8:	b310      	cbz	r0, 801a7f0 <rclc_action_server_goal_cancel_accept+0x48>
 801a7aa:	b510      	push	{r4, lr}
 801a7ac:	b090      	sub	sp, #64	@ 0x40
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	a806      	add	r0, sp, #24
 801a7b2:	f7ff ff01 	bl	801a5b8 <rcl_action_get_zero_initialized_cancel_response>
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801a7bc:	46ec      	mov	ip, sp
 801a7be:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801a7c2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801a7c6:	f88d 3018 	strb.w	r3, [sp, #24]
 801a7ca:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801a7ce:	f8cd d01c 	str.w	sp, [sp, #28]
 801a7d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7d6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801a7f8 <rclc_action_server_goal_cancel_accept+0x50>
 801a7da:	6860      	ldr	r0, [r4, #4]
 801a7dc:	aa06      	add	r2, sp, #24
 801a7de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801a7e2:	3010      	adds	r0, #16
 801a7e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801a7e8:	f7ff fdc8 	bl	801a37c <rcl_action_send_cancel_response>
 801a7ec:	b010      	add	sp, #64	@ 0x40
 801a7ee:	bd10      	pop	{r4, pc}
 801a7f0:	200b      	movs	r0, #11
 801a7f2:	4770      	bx	lr
 801a7f4:	f3af 8000 	nop.w
 801a7f8:	00000001 	.word	0x00000001
 801a7fc:	00000001 	.word	0x00000001

0801a800 <rclc_action_server_goal_cancel_reject>:
 801a800:	b082      	sub	sp, #8
 801a802:	b530      	push	{r4, r5, lr}
 801a804:	b08b      	sub	sp, #44	@ 0x2c
 801a806:	ac0e      	add	r4, sp, #56	@ 0x38
 801a808:	e884 000c 	stmia.w	r4, {r2, r3}
 801a80c:	b188      	cbz	r0, 801a832 <rclc_action_server_goal_cancel_reject+0x32>
 801a80e:	4604      	mov	r4, r0
 801a810:	a801      	add	r0, sp, #4
 801a812:	460d      	mov	r5, r1
 801a814:	f7ff fed0 	bl	801a5b8 <rcl_action_get_zero_initialized_cancel_response>
 801a818:	aa01      	add	r2, sp, #4
 801a81a:	a90e      	add	r1, sp, #56	@ 0x38
 801a81c:	f104 0010 	add.w	r0, r4, #16
 801a820:	f88d 5004 	strb.w	r5, [sp, #4]
 801a824:	f7ff fdaa 	bl	801a37c <rcl_action_send_cancel_response>
 801a828:	b00b      	add	sp, #44	@ 0x2c
 801a82a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a82e:	b002      	add	sp, #8
 801a830:	4770      	bx	lr
 801a832:	200b      	movs	r0, #11
 801a834:	b00b      	add	sp, #44	@ 0x2c
 801a836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a83a:	b002      	add	sp, #8
 801a83c:	4770      	bx	lr
 801a83e:	bf00      	nop

0801a840 <__atomic_load_8>:
 801a840:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801a844:	4a16      	ldr	r2, [pc, #88]	@ (801a8a0 <__atomic_load_8+0x60>)
 801a846:	4b17      	ldr	r3, [pc, #92]	@ (801a8a4 <__atomic_load_8+0x64>)
 801a848:	f04f 0c01 	mov.w	ip, #1
 801a84c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801a850:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801a854:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801a858:	fb02 f101 	mul.w	r1, r2, r1
 801a85c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801a860:	fba3 2301 	umull	r2, r3, r3, r1
 801a864:	091b      	lsrs	r3, r3, #4
 801a866:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a86a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801a86e:	b4d0      	push	{r4, r6, r7}
 801a870:	1ac9      	subs	r1, r1, r3
 801a872:	4c0d      	ldr	r4, [pc, #52]	@ (801a8a8 <__atomic_load_8+0x68>)
 801a874:	1862      	adds	r2, r4, r1
 801a876:	e8d2 3f4f 	ldrexb	r3, [r2]
 801a87a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801a87e:	2e00      	cmp	r6, #0
 801a880:	d1f9      	bne.n	801a876 <__atomic_load_8+0x36>
 801a882:	b2db      	uxtb	r3, r3
 801a884:	f3bf 8f5b 	dmb	ish
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d1f4      	bne.n	801a876 <__atomic_load_8+0x36>
 801a88c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801a890:	f3bf 8f5b 	dmb	ish
 801a894:	5463      	strb	r3, [r4, r1]
 801a896:	4630      	mov	r0, r6
 801a898:	4639      	mov	r1, r7
 801a89a:	bcd0      	pop	{r4, r6, r7}
 801a89c:	4770      	bx	lr
 801a89e:	bf00      	nop
 801a8a0:	27d4eb2d 	.word	0x27d4eb2d
 801a8a4:	b21642c9 	.word	0xb21642c9
 801a8a8:	24012fa4 	.word	0x24012fa4

0801a8ac <__atomic_store_8>:
 801a8ac:	b570      	push	{r4, r5, r6, lr}
 801a8ae:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801a8b2:	4916      	ldr	r1, [pc, #88]	@ (801a90c <__atomic_store_8+0x60>)
 801a8b4:	4c16      	ldr	r4, [pc, #88]	@ (801a910 <__atomic_store_8+0x64>)
 801a8b6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801a8ba:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801a8be:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801a8c2:	fb01 fe0e 	mul.w	lr, r1, lr
 801a8c6:	4913      	ldr	r1, [pc, #76]	@ (801a914 <__atomic_store_8+0x68>)
 801a8c8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801a8cc:	fba1 510e 	umull	r5, r1, r1, lr
 801a8d0:	f04f 0501 	mov.w	r5, #1
 801a8d4:	0909      	lsrs	r1, r1, #4
 801a8d6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801a8da:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801a8de:	ebae 0e01 	sub.w	lr, lr, r1
 801a8e2:	eb04 0c0e 	add.w	ip, r4, lr
 801a8e6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801a8ea:	e8cc 5f46 	strexb	r6, r5, [ip]
 801a8ee:	2e00      	cmp	r6, #0
 801a8f0:	d1f9      	bne.n	801a8e6 <__atomic_store_8+0x3a>
 801a8f2:	b2c9      	uxtb	r1, r1
 801a8f4:	f3bf 8f5b 	dmb	ish
 801a8f8:	2900      	cmp	r1, #0
 801a8fa:	d1f4      	bne.n	801a8e6 <__atomic_store_8+0x3a>
 801a8fc:	e9c0 2300 	strd	r2, r3, [r0]
 801a900:	f3bf 8f5b 	dmb	ish
 801a904:	f804 100e 	strb.w	r1, [r4, lr]
 801a908:	bd70      	pop	{r4, r5, r6, pc}
 801a90a:	bf00      	nop
 801a90c:	27d4eb2d 	.word	0x27d4eb2d
 801a910:	24012fa4 	.word	0x24012fa4
 801a914:	b21642c9 	.word	0xb21642c9

0801a918 <__atomic_exchange_8>:
 801a918:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801a91c:	4917      	ldr	r1, [pc, #92]	@ (801a97c <__atomic_exchange_8+0x64>)
 801a91e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801a922:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801a926:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801a92a:	fb01 fc0c 	mul.w	ip, r1, ip
 801a92e:	4914      	ldr	r1, [pc, #80]	@ (801a980 <__atomic_exchange_8+0x68>)
 801a930:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801a934:	b570      	push	{r4, r5, r6, lr}
 801a936:	4686      	mov	lr, r0
 801a938:	fba1 010c 	umull	r0, r1, r1, ip
 801a93c:	4d11      	ldr	r5, [pc, #68]	@ (801a984 <__atomic_exchange_8+0x6c>)
 801a93e:	f04f 0001 	mov.w	r0, #1
 801a942:	0909      	lsrs	r1, r1, #4
 801a944:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801a948:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801a94c:	ebac 0c01 	sub.w	ip, ip, r1
 801a950:	eb05 010c 	add.w	r1, r5, ip
 801a954:	e8d1 4f4f 	ldrexb	r4, [r1]
 801a958:	e8c1 0f46 	strexb	r6, r0, [r1]
 801a95c:	2e00      	cmp	r6, #0
 801a95e:	d1f9      	bne.n	801a954 <__atomic_exchange_8+0x3c>
 801a960:	b2e4      	uxtb	r4, r4
 801a962:	f3bf 8f5b 	dmb	ish
 801a966:	2c00      	cmp	r4, #0
 801a968:	d1f4      	bne.n	801a954 <__atomic_exchange_8+0x3c>
 801a96a:	e9de 0100 	ldrd	r0, r1, [lr]
 801a96e:	e9ce 2300 	strd	r2, r3, [lr]
 801a972:	f3bf 8f5b 	dmb	ish
 801a976:	f805 400c 	strb.w	r4, [r5, ip]
 801a97a:	bd70      	pop	{r4, r5, r6, pc}
 801a97c:	27d4eb2d 	.word	0x27d4eb2d
 801a980:	b21642c9 	.word	0xb21642c9
 801a984:	24012fa4 	.word	0x24012fa4

0801a988 <rcutils_get_env>:
 801a988:	b168      	cbz	r0, 801a9a6 <rcutils_get_env+0x1e>
 801a98a:	b510      	push	{r4, lr}
 801a98c:	460c      	mov	r4, r1
 801a98e:	b129      	cbz	r1, 801a99c <rcutils_get_env+0x14>
 801a990:	f002 ff0e 	bl	801d7b0 <getenv>
 801a994:	b120      	cbz	r0, 801a9a0 <rcutils_get_env+0x18>
 801a996:	6020      	str	r0, [r4, #0]
 801a998:	2000      	movs	r0, #0
 801a99a:	bd10      	pop	{r4, pc}
 801a99c:	4803      	ldr	r0, [pc, #12]	@ (801a9ac <rcutils_get_env+0x24>)
 801a99e:	bd10      	pop	{r4, pc}
 801a9a0:	4b03      	ldr	r3, [pc, #12]	@ (801a9b0 <rcutils_get_env+0x28>)
 801a9a2:	6023      	str	r3, [r4, #0]
 801a9a4:	bd10      	pop	{r4, pc}
 801a9a6:	4803      	ldr	r0, [pc, #12]	@ (801a9b4 <rcutils_get_env+0x2c>)
 801a9a8:	4770      	bx	lr
 801a9aa:	bf00      	nop
 801a9ac:	0801f8c8 	.word	0x0801f8c8
 801a9b0:	0801fd00 	.word	0x0801fd00
 801a9b4:	0801f8ac 	.word	0x0801f8ac

0801a9b8 <rcutils_is_directory>:
 801a9b8:	2000      	movs	r0, #0
 801a9ba:	4770      	bx	lr

0801a9bc <rcutils_join_path>:
 801a9bc:	b082      	sub	sp, #8
 801a9be:	2000      	movs	r0, #0
 801a9c0:	e88d 000c 	stmia.w	sp, {r2, r3}
 801a9c4:	b002      	add	sp, #8
 801a9c6:	4770      	bx	lr

0801a9c8 <rcutils_to_native_path>:
 801a9c8:	b084      	sub	sp, #16
 801a9ca:	2000      	movs	r0, #0
 801a9cc:	f10d 0c04 	add.w	ip, sp, #4
 801a9d0:	b004      	add	sp, #16
 801a9d2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801a9d6:	4770      	bx	lr

0801a9d8 <rcutils_format_string_limit>:
 801a9d8:	b40f      	push	{r0, r1, r2, r3}
 801a9da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9dc:	b083      	sub	sp, #12
 801a9de:	ac08      	add	r4, sp, #32
 801a9e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a9e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a9e6:	b326      	cbz	r6, 801aa32 <rcutils_format_string_limit+0x5a>
 801a9e8:	a808      	add	r0, sp, #32
 801a9ea:	f7f6 fe79 	bl	80116e0 <rcutils_allocator_is_valid>
 801a9ee:	b300      	cbz	r0, 801aa32 <rcutils_format_string_limit+0x5a>
 801a9f0:	2100      	movs	r1, #0
 801a9f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 801a9f4:	4632      	mov	r2, r6
 801a9f6:	4608      	mov	r0, r1
 801a9f8:	e9cd 3300 	strd	r3, r3, [sp]
 801a9fc:	f000 f906 	bl	801ac0c <rcutils_vsnprintf>
 801aa00:	1c43      	adds	r3, r0, #1
 801aa02:	4605      	mov	r5, r0
 801aa04:	d015      	beq.n	801aa32 <rcutils_format_string_limit+0x5a>
 801aa06:	1c47      	adds	r7, r0, #1
 801aa08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa0a:	429f      	cmp	r7, r3
 801aa0c:	d901      	bls.n	801aa12 <rcutils_format_string_limit+0x3a>
 801aa0e:	1e5d      	subs	r5, r3, #1
 801aa10:	461f      	mov	r7, r3
 801aa12:	9b08      	ldr	r3, [sp, #32]
 801aa14:	4638      	mov	r0, r7
 801aa16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aa18:	4798      	blx	r3
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	b148      	cbz	r0, 801aa32 <rcutils_format_string_limit+0x5a>
 801aa1e:	4632      	mov	r2, r6
 801aa20:	4639      	mov	r1, r7
 801aa22:	9b01      	ldr	r3, [sp, #4]
 801aa24:	f000 f8f2 	bl	801ac0c <rcutils_vsnprintf>
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	db09      	blt.n	801aa40 <rcutils_format_string_limit+0x68>
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	5563      	strb	r3, [r4, r5]
 801aa30:	e000      	b.n	801aa34 <rcutils_format_string_limit+0x5c>
 801aa32:	2400      	movs	r4, #0
 801aa34:	4620      	mov	r0, r4
 801aa36:	b003      	add	sp, #12
 801aa38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aa3c:	b004      	add	sp, #16
 801aa3e:	4770      	bx	lr
 801aa40:	4620      	mov	r0, r4
 801aa42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa44:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aa46:	2400      	movs	r4, #0
 801aa48:	4798      	blx	r3
 801aa4a:	e7f3      	b.n	801aa34 <rcutils_format_string_limit+0x5c>

0801aa4c <rcutils_repl_str>:
 801aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa50:	ed2d 8b02 	vpush	{d8}
 801aa54:	b087      	sub	sp, #28
 801aa56:	2600      	movs	r6, #0
 801aa58:	4680      	mov	r8, r0
 801aa5a:	468a      	mov	sl, r1
 801aa5c:	9000      	str	r0, [sp, #0]
 801aa5e:	4608      	mov	r0, r1
 801aa60:	ee08 2a10 	vmov	s16, r2
 801aa64:	4699      	mov	r9, r3
 801aa66:	2510      	movs	r5, #16
 801aa68:	f7e5 fc44 	bl	80002f4 <strlen>
 801aa6c:	4637      	mov	r7, r6
 801aa6e:	46b3      	mov	fp, r6
 801aa70:	9001      	str	r0, [sp, #4]
 801aa72:	e01e      	b.n	801aab2 <rcutils_repl_str+0x66>
 801aa74:	f10b 0b01 	add.w	fp, fp, #1
 801aa78:	9b01      	ldr	r3, [sp, #4]
 801aa7a:	455e      	cmp	r6, fp
 801aa7c:	eb04 0803 	add.w	r8, r4, r3
 801aa80:	d211      	bcs.n	801aaa6 <rcutils_repl_str+0x5a>
 801aa82:	442e      	add	r6, r5
 801aa84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801aa88:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801aa8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa90:	00b1      	lsls	r1, r6, #2
 801aa92:	4798      	blx	r3
 801aa94:	2800      	cmp	r0, #0
 801aa96:	f000 8088 	beq.w	801abaa <rcutils_repl_str+0x15e>
 801aa9a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801aa9e:	4607      	mov	r7, r0
 801aaa0:	bf28      	it	cs
 801aaa2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801aaa6:	9a00      	ldr	r2, [sp, #0]
 801aaa8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801aaac:	1aa4      	subs	r4, r4, r2
 801aaae:	f843 4c04 	str.w	r4, [r3, #-4]
 801aab2:	4651      	mov	r1, sl
 801aab4:	4640      	mov	r0, r8
 801aab6:	f003 fb5e 	bl	801e176 <strstr>
 801aaba:	4604      	mov	r4, r0
 801aabc:	4638      	mov	r0, r7
 801aabe:	2c00      	cmp	r4, #0
 801aac0:	d1d8      	bne.n	801aa74 <rcutils_repl_str+0x28>
 801aac2:	4640      	mov	r0, r8
 801aac4:	f7e5 fc16 	bl	80002f4 <strlen>
 801aac8:	9b00      	ldr	r3, [sp, #0]
 801aaca:	eba8 0803 	sub.w	r8, r8, r3
 801aace:	eb08 0400 	add.w	r4, r8, r0
 801aad2:	9402      	str	r4, [sp, #8]
 801aad4:	f1bb 0f00 	cmp.w	fp, #0
 801aad8:	d045      	beq.n	801ab66 <rcutils_repl_str+0x11a>
 801aada:	ee18 0a10 	vmov	r0, s16
 801aade:	f7e5 fc09 	bl	80002f4 <strlen>
 801aae2:	9a01      	ldr	r2, [sp, #4]
 801aae4:	4606      	mov	r6, r0
 801aae6:	f8d9 3000 	ldr.w	r3, [r9]
 801aaea:	1a82      	subs	r2, r0, r2
 801aaec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801aaf0:	fb0b 4202 	mla	r2, fp, r2, r4
 801aaf4:	1c50      	adds	r0, r2, #1
 801aaf6:	9205      	str	r2, [sp, #20]
 801aaf8:	4798      	blx	r3
 801aafa:	4682      	mov	sl, r0
 801aafc:	2800      	cmp	r0, #0
 801aafe:	d054      	beq.n	801abaa <rcutils_repl_str+0x15e>
 801ab00:	683a      	ldr	r2, [r7, #0]
 801ab02:	463d      	mov	r5, r7
 801ab04:	9900      	ldr	r1, [sp, #0]
 801ab06:	2401      	movs	r4, #1
 801ab08:	f003 fbd7 	bl	801e2ba <memcpy>
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801ab12:	eb0a 0803 	add.w	r8, sl, r3
 801ab16:	ee18 7a10 	vmov	r7, s16
 801ab1a:	f8dd a000 	ldr.w	sl, [sp]
 801ab1e:	f8cd 9000 	str.w	r9, [sp]
 801ab22:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ab26:	4632      	mov	r2, r6
 801ab28:	4639      	mov	r1, r7
 801ab2a:	4640      	mov	r0, r8
 801ab2c:	44b0      	add	r8, r6
 801ab2e:	f003 fbc4 	bl	801e2ba <memcpy>
 801ab32:	f855 2b04 	ldr.w	r2, [r5], #4
 801ab36:	45a3      	cmp	fp, r4
 801ab38:	444a      	add	r2, r9
 801ab3a:	eb0a 0102 	add.w	r1, sl, r2
 801ab3e:	d02a      	beq.n	801ab96 <rcutils_repl_str+0x14a>
 801ab40:	6828      	ldr	r0, [r5, #0]
 801ab42:	1a82      	subs	r2, r0, r2
 801ab44:	4640      	mov	r0, r8
 801ab46:	4490      	add	r8, r2
 801ab48:	f003 fbb7 	bl	801e2ba <memcpy>
 801ab4c:	1c62      	adds	r2, r4, #1
 801ab4e:	45a3      	cmp	fp, r4
 801ab50:	4614      	mov	r4, r2
 801ab52:	d8e8      	bhi.n	801ab26 <rcutils_repl_str+0xda>
 801ab54:	f8dd 9000 	ldr.w	r9, [sp]
 801ab58:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	9a05      	ldr	r2, [sp, #20]
 801ab60:	f80a 3002 	strb.w	r3, [sl, r2]
 801ab64:	e00b      	b.n	801ab7e <rcutils_repl_str+0x132>
 801ab66:	4620      	mov	r0, r4
 801ab68:	f8d9 3000 	ldr.w	r3, [r9]
 801ab6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ab70:	3001      	adds	r0, #1
 801ab72:	4798      	blx	r3
 801ab74:	4682      	mov	sl, r0
 801ab76:	b110      	cbz	r0, 801ab7e <rcutils_repl_str+0x132>
 801ab78:	9900      	ldr	r1, [sp, #0]
 801ab7a:	f003 fb96 	bl	801e2aa <strcpy>
 801ab7e:	4638      	mov	r0, r7
 801ab80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ab84:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ab88:	4798      	blx	r3
 801ab8a:	4650      	mov	r0, sl
 801ab8c:	b007      	add	sp, #28
 801ab8e:	ecbd 8b02 	vpop	{d8}
 801ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab96:	9b02      	ldr	r3, [sp, #8]
 801ab98:	4640      	mov	r0, r8
 801ab9a:	f8dd 9000 	ldr.w	r9, [sp]
 801ab9e:	1a9a      	subs	r2, r3, r2
 801aba0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801aba4:	f003 fb89 	bl	801e2ba <memcpy>
 801aba8:	e7d8      	b.n	801ab5c <rcutils_repl_str+0x110>
 801abaa:	f04f 0a00 	mov.w	sl, #0
 801abae:	e7e6      	b.n	801ab7e <rcutils_repl_str+0x132>

0801abb0 <rcutils_snprintf>:
 801abb0:	b40c      	push	{r2, r3}
 801abb2:	b530      	push	{r4, r5, lr}
 801abb4:	b083      	sub	sp, #12
 801abb6:	ab06      	add	r3, sp, #24
 801abb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801abbc:	9301      	str	r3, [sp, #4]
 801abbe:	b1e2      	cbz	r2, 801abfa <rcutils_snprintf+0x4a>
 801abc0:	fab0 f480 	clz	r4, r0
 801abc4:	fab1 f581 	clz	r5, r1
 801abc8:	ea50 0c01 	orrs.w	ip, r0, r1
 801abcc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801abd0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801abd4:	d008      	beq.n	801abe8 <rcutils_snprintf+0x38>
 801abd6:	b984      	cbnz	r4, 801abfa <rcutils_snprintf+0x4a>
 801abd8:	b97d      	cbnz	r5, 801abfa <rcutils_snprintf+0x4a>
 801abda:	f003 f9d9 	bl	801df90 <vsniprintf>
 801abde:	b003      	add	sp, #12
 801abe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abe4:	b002      	add	sp, #8
 801abe6:	4770      	bx	lr
 801abe8:	4661      	mov	r1, ip
 801abea:	4660      	mov	r0, ip
 801abec:	f003 f9d0 	bl	801df90 <vsniprintf>
 801abf0:	b003      	add	sp, #12
 801abf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abf6:	b002      	add	sp, #8
 801abf8:	4770      	bx	lr
 801abfa:	f003 fb29 	bl	801e250 <__errno>
 801abfe:	2216      	movs	r2, #22
 801ac00:	4603      	mov	r3, r0
 801ac02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac06:	601a      	str	r2, [r3, #0]
 801ac08:	e7e9      	b.n	801abde <rcutils_snprintf+0x2e>
 801ac0a:	bf00      	nop

0801ac0c <rcutils_vsnprintf>:
 801ac0c:	b570      	push	{r4, r5, r6, lr}
 801ac0e:	b1b2      	cbz	r2, 801ac3e <rcutils_vsnprintf+0x32>
 801ac10:	fab0 f480 	clz	r4, r0
 801ac14:	fab1 f581 	clz	r5, r1
 801ac18:	ea50 0c01 	orrs.w	ip, r0, r1
 801ac1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801ac20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801ac24:	d005      	beq.n	801ac32 <rcutils_vsnprintf+0x26>
 801ac26:	b954      	cbnz	r4, 801ac3e <rcutils_vsnprintf+0x32>
 801ac28:	b94d      	cbnz	r5, 801ac3e <rcutils_vsnprintf+0x32>
 801ac2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac2e:	f003 b9af 	b.w	801df90 <vsniprintf>
 801ac32:	4661      	mov	r1, ip
 801ac34:	4660      	mov	r0, ip
 801ac36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac3a:	f003 b9a9 	b.w	801df90 <vsniprintf>
 801ac3e:	f003 fb07 	bl	801e250 <__errno>
 801ac42:	2316      	movs	r3, #22
 801ac44:	6003      	str	r3, [r0, #0]
 801ac46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac4a:	bd70      	pop	{r4, r5, r6, pc}

0801ac4c <rcutils_strdup>:
 801ac4c:	b084      	sub	sp, #16
 801ac4e:	b570      	push	{r4, r5, r6, lr}
 801ac50:	b082      	sub	sp, #8
 801ac52:	4605      	mov	r5, r0
 801ac54:	ac07      	add	r4, sp, #28
 801ac56:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801ac5a:	b1b0      	cbz	r0, 801ac8a <rcutils_strdup+0x3e>
 801ac5c:	f7e5 fb4a 	bl	80002f4 <strlen>
 801ac60:	1c42      	adds	r2, r0, #1
 801ac62:	9b07      	ldr	r3, [sp, #28]
 801ac64:	4606      	mov	r6, r0
 801ac66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ac68:	4610      	mov	r0, r2
 801ac6a:	9201      	str	r2, [sp, #4]
 801ac6c:	4798      	blx	r3
 801ac6e:	4604      	mov	r4, r0
 801ac70:	b128      	cbz	r0, 801ac7e <rcutils_strdup+0x32>
 801ac72:	9a01      	ldr	r2, [sp, #4]
 801ac74:	4629      	mov	r1, r5
 801ac76:	f003 fb20 	bl	801e2ba <memcpy>
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	55a3      	strb	r3, [r4, r6]
 801ac7e:	4620      	mov	r0, r4
 801ac80:	b002      	add	sp, #8
 801ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac86:	b004      	add	sp, #16
 801ac88:	4770      	bx	lr
 801ac8a:	4604      	mov	r4, r0
 801ac8c:	e7f7      	b.n	801ac7e <rcutils_strdup+0x32>
 801ac8e:	bf00      	nop

0801ac90 <rcutils_strndup>:
 801ac90:	b082      	sub	sp, #8
 801ac92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac94:	ac06      	add	r4, sp, #24
 801ac96:	4605      	mov	r5, r0
 801ac98:	e884 000c 	stmia.w	r4, {r2, r3}
 801ac9c:	b188      	cbz	r0, 801acc2 <rcutils_strndup+0x32>
 801ac9e:	1c4f      	adds	r7, r1, #1
 801aca0:	460e      	mov	r6, r1
 801aca2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aca4:	4638      	mov	r0, r7
 801aca6:	4790      	blx	r2
 801aca8:	4604      	mov	r4, r0
 801acaa:	b128      	cbz	r0, 801acb8 <rcutils_strndup+0x28>
 801acac:	463a      	mov	r2, r7
 801acae:	4629      	mov	r1, r5
 801acb0:	f003 fb03 	bl	801e2ba <memcpy>
 801acb4:	2300      	movs	r3, #0
 801acb6:	55a3      	strb	r3, [r4, r6]
 801acb8:	4620      	mov	r0, r4
 801acba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801acbe:	b002      	add	sp, #8
 801acc0:	4770      	bx	lr
 801acc2:	4604      	mov	r4, r0
 801acc4:	e7f8      	b.n	801acb8 <rcutils_strndup+0x28>
 801acc6:	bf00      	nop

0801acc8 <rcutils_get_zero_initialized_string_map>:
 801acc8:	2000      	movs	r0, #0
 801acca:	4b01      	ldr	r3, [pc, #4]	@ (801acd0 <rcutils_get_zero_initialized_string_map+0x8>)
 801accc:	6018      	str	r0, [r3, #0]
 801acce:	4770      	bx	lr
 801acd0:	24012fbc 	.word	0x24012fbc

0801acd4 <rcutils_string_map_reserve>:
 801acd4:	2800      	cmp	r0, #0
 801acd6:	d05e      	beq.n	801ad96 <rcutils_string_map_reserve+0xc2>
 801acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acdc:	460c      	mov	r4, r1
 801acde:	6801      	ldr	r1, [r0, #0]
 801ace0:	b082      	sub	sp, #8
 801ace2:	4605      	mov	r5, r0
 801ace4:	b129      	cbz	r1, 801acf2 <rcutils_string_map_reserve+0x1e>
 801ace6:	68cb      	ldr	r3, [r1, #12]
 801ace8:	42a3      	cmp	r3, r4
 801acea:	d906      	bls.n	801acfa <rcutils_string_map_reserve+0x26>
 801acec:	461c      	mov	r4, r3
 801acee:	2900      	cmp	r1, #0
 801acf0:	d1f9      	bne.n	801ace6 <rcutils_string_map_reserve+0x12>
 801acf2:	201f      	movs	r0, #31
 801acf4:	b002      	add	sp, #8
 801acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acfa:	688b      	ldr	r3, [r1, #8]
 801acfc:	42a3      	cmp	r3, r4
 801acfe:	d046      	beq.n	801ad8e <rcutils_string_map_reserve+0xba>
 801ad00:	6a0e      	ldr	r6, [r1, #32]
 801ad02:	2c00      	cmp	r4, #0
 801ad04:	d033      	beq.n	801ad6e <rcutils_string_map_reserve+0x9a>
 801ad06:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801ad0a:	d242      	bcs.n	801ad92 <rcutils_string_map_reserve+0xbe>
 801ad0c:	00a7      	lsls	r7, r4, #2
 801ad0e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801ad12:	6808      	ldr	r0, [r1, #0]
 801ad14:	4632      	mov	r2, r6
 801ad16:	4639      	mov	r1, r7
 801ad18:	47c0      	blx	r8
 801ad1a:	2800      	cmp	r0, #0
 801ad1c:	d039      	beq.n	801ad92 <rcutils_string_map_reserve+0xbe>
 801ad1e:	682b      	ldr	r3, [r5, #0]
 801ad20:	4632      	mov	r2, r6
 801ad22:	4639      	mov	r1, r7
 801ad24:	6018      	str	r0, [r3, #0]
 801ad26:	6858      	ldr	r0, [r3, #4]
 801ad28:	47c0      	blx	r8
 801ad2a:	2800      	cmp	r0, #0
 801ad2c:	d031      	beq.n	801ad92 <rcutils_string_map_reserve+0xbe>
 801ad2e:	682d      	ldr	r5, [r5, #0]
 801ad30:	68ab      	ldr	r3, [r5, #8]
 801ad32:	6068      	str	r0, [r5, #4]
 801ad34:	42a3      	cmp	r3, r4
 801ad36:	d225      	bcs.n	801ad84 <rcutils_string_map_reserve+0xb0>
 801ad38:	682a      	ldr	r2, [r5, #0]
 801ad3a:	eb00 0c07 	add.w	ip, r0, r7
 801ad3e:	0099      	lsls	r1, r3, #2
 801ad40:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801ad44:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801ad48:	45e6      	cmp	lr, ip
 801ad4a:	d203      	bcs.n	801ad54 <rcutils_string_map_reserve+0x80>
 801ad4c:	eb02 0c07 	add.w	ip, r2, r7
 801ad50:	4566      	cmp	r6, ip
 801ad52:	d322      	bcc.n	801ad9a <rcutils_string_map_reserve+0xc6>
 801ad54:	1ae3      	subs	r3, r4, r3
 801ad56:	4670      	mov	r0, lr
 801ad58:	2100      	movs	r1, #0
 801ad5a:	009a      	lsls	r2, r3, #2
 801ad5c:	9201      	str	r2, [sp, #4]
 801ad5e:	f003 f9e3 	bl	801e128 <memset>
 801ad62:	9a01      	ldr	r2, [sp, #4]
 801ad64:	2100      	movs	r1, #0
 801ad66:	4630      	mov	r0, r6
 801ad68:	f003 f9de 	bl	801e128 <memset>
 801ad6c:	e00a      	b.n	801ad84 <rcutils_string_map_reserve+0xb0>
 801ad6e:	694f      	ldr	r7, [r1, #20]
 801ad70:	6808      	ldr	r0, [r1, #0]
 801ad72:	4631      	mov	r1, r6
 801ad74:	47b8      	blx	r7
 801ad76:	682b      	ldr	r3, [r5, #0]
 801ad78:	4631      	mov	r1, r6
 801ad7a:	6858      	ldr	r0, [r3, #4]
 801ad7c:	601c      	str	r4, [r3, #0]
 801ad7e:	47b8      	blx	r7
 801ad80:	682d      	ldr	r5, [r5, #0]
 801ad82:	606c      	str	r4, [r5, #4]
 801ad84:	2000      	movs	r0, #0
 801ad86:	60ac      	str	r4, [r5, #8]
 801ad88:	b002      	add	sp, #8
 801ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad8e:	2000      	movs	r0, #0
 801ad90:	e7b0      	b.n	801acf4 <rcutils_string_map_reserve+0x20>
 801ad92:	200a      	movs	r0, #10
 801ad94:	e7ae      	b.n	801acf4 <rcutils_string_map_reserve+0x20>
 801ad96:	200b      	movs	r0, #11
 801ad98:	4770      	bx	lr
 801ad9a:	1f0b      	subs	r3, r1, #4
 801ad9c:	4418      	add	r0, r3
 801ad9e:	4413      	add	r3, r2
 801ada0:	3a04      	subs	r2, #4
 801ada2:	4417      	add	r7, r2
 801ada4:	2200      	movs	r2, #0
 801ada6:	f843 2f04 	str.w	r2, [r3, #4]!
 801adaa:	42bb      	cmp	r3, r7
 801adac:	f840 2f04 	str.w	r2, [r0, #4]!
 801adb0:	d1f9      	bne.n	801ada6 <rcutils_string_map_reserve+0xd2>
 801adb2:	e7e7      	b.n	801ad84 <rcutils_string_map_reserve+0xb0>

0801adb4 <rcutils_string_map_init>:
 801adb4:	b082      	sub	sp, #8
 801adb6:	b570      	push	{r4, r5, r6, lr}
 801adb8:	ac04      	add	r4, sp, #16
 801adba:	e884 000c 	stmia.w	r4, {r2, r3}
 801adbe:	b380      	cbz	r0, 801ae22 <rcutils_string_map_init+0x6e>
 801adc0:	6806      	ldr	r6, [r0, #0]
 801adc2:	4604      	mov	r4, r0
 801adc4:	b12e      	cbz	r6, 801add2 <rcutils_string_map_init+0x1e>
 801adc6:	251e      	movs	r5, #30
 801adc8:	4628      	mov	r0, r5
 801adca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adce:	b002      	add	sp, #8
 801add0:	4770      	bx	lr
 801add2:	a804      	add	r0, sp, #16
 801add4:	460d      	mov	r5, r1
 801add6:	f7f6 fc83 	bl	80116e0 <rcutils_allocator_is_valid>
 801adda:	b310      	cbz	r0, 801ae22 <rcutils_string_map_init+0x6e>
 801addc:	9b04      	ldr	r3, [sp, #16]
 801adde:	2024      	movs	r0, #36	@ 0x24
 801ade0:	9908      	ldr	r1, [sp, #32]
 801ade2:	4798      	blx	r3
 801ade4:	6020      	str	r0, [r4, #0]
 801ade6:	b310      	cbz	r0, 801ae2e <rcutils_string_map_init+0x7a>
 801ade8:	f10d 0e10 	add.w	lr, sp, #16
 801adec:	f100 0c10 	add.w	ip, r0, #16
 801adf0:	e9c0 6600 	strd	r6, r6, [r0]
 801adf4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801adf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801adfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae00:	f8de 3000 	ldr.w	r3, [lr]
 801ae04:	4629      	mov	r1, r5
 801ae06:	4620      	mov	r0, r4
 801ae08:	f8cc 3000 	str.w	r3, [ip]
 801ae0c:	f7ff ff62 	bl	801acd4 <rcutils_string_map_reserve>
 801ae10:	4605      	mov	r5, r0
 801ae12:	2800      	cmp	r0, #0
 801ae14:	d0d8      	beq.n	801adc8 <rcutils_string_map_init+0x14>
 801ae16:	9b05      	ldr	r3, [sp, #20]
 801ae18:	9908      	ldr	r1, [sp, #32]
 801ae1a:	6820      	ldr	r0, [r4, #0]
 801ae1c:	4798      	blx	r3
 801ae1e:	6026      	str	r6, [r4, #0]
 801ae20:	e7d2      	b.n	801adc8 <rcutils_string_map_init+0x14>
 801ae22:	250b      	movs	r5, #11
 801ae24:	4628      	mov	r0, r5
 801ae26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae2a:	b002      	add	sp, #8
 801ae2c:	4770      	bx	lr
 801ae2e:	250a      	movs	r5, #10
 801ae30:	e7ca      	b.n	801adc8 <rcutils_string_map_init+0x14>
 801ae32:	bf00      	nop

0801ae34 <rcutils_string_map_fini>:
 801ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae38:	b082      	sub	sp, #8
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	d03a      	beq.n	801aeb4 <rcutils_string_map_fini+0x80>
 801ae3e:	6804      	ldr	r4, [r0, #0]
 801ae40:	4606      	mov	r6, r0
 801ae42:	2c00      	cmp	r4, #0
 801ae44:	d032      	beq.n	801aeac <rcutils_string_map_fini+0x78>
 801ae46:	68a3      	ldr	r3, [r4, #8]
 801ae48:	b32b      	cbz	r3, 801ae96 <rcutils_string_map_fini+0x62>
 801ae4a:	2500      	movs	r5, #0
 801ae4c:	6822      	ldr	r2, [r4, #0]
 801ae4e:	462f      	mov	r7, r5
 801ae50:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801ae54:	b1e0      	cbz	r0, 801ae90 <rcutils_string_map_fini+0x5c>
 801ae56:	6a21      	ldr	r1, [r4, #32]
 801ae58:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801ae5c:	9101      	str	r1, [sp, #4]
 801ae5e:	47c0      	blx	r8
 801ae60:	9901      	ldr	r1, [sp, #4]
 801ae62:	e9d4 3200 	ldrd	r3, r2, [r4]
 801ae66:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801ae6a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801ae6e:	47c0      	blx	r8
 801ae70:	68e3      	ldr	r3, [r4, #12]
 801ae72:	6862      	ldr	r2, [r4, #4]
 801ae74:	3b01      	subs	r3, #1
 801ae76:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801ae7a:	3501      	adds	r5, #1
 801ae7c:	60e3      	str	r3, [r4, #12]
 801ae7e:	6834      	ldr	r4, [r6, #0]
 801ae80:	68a3      	ldr	r3, [r4, #8]
 801ae82:	429d      	cmp	r5, r3
 801ae84:	d207      	bcs.n	801ae96 <rcutils_string_map_fini+0x62>
 801ae86:	6822      	ldr	r2, [r4, #0]
 801ae88:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	d1e2      	bne.n	801ae56 <rcutils_string_map_fini+0x22>
 801ae90:	3501      	adds	r5, #1
 801ae92:	429d      	cmp	r5, r3
 801ae94:	d3dc      	bcc.n	801ae50 <rcutils_string_map_fini+0x1c>
 801ae96:	2100      	movs	r1, #0
 801ae98:	4630      	mov	r0, r6
 801ae9a:	f7ff ff1b 	bl	801acd4 <rcutils_string_map_reserve>
 801ae9e:	4604      	mov	r4, r0
 801aea0:	b920      	cbnz	r0, 801aeac <rcutils_string_map_fini+0x78>
 801aea2:	6830      	ldr	r0, [r6, #0]
 801aea4:	6943      	ldr	r3, [r0, #20]
 801aea6:	6a01      	ldr	r1, [r0, #32]
 801aea8:	4798      	blx	r3
 801aeaa:	6034      	str	r4, [r6, #0]
 801aeac:	4620      	mov	r0, r4
 801aeae:	b002      	add	sp, #8
 801aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeb4:	240b      	movs	r4, #11
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	b002      	add	sp, #8
 801aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aebe:	bf00      	nop

0801aec0 <rcutils_string_map_getn>:
 801aec0:	b378      	cbz	r0, 801af22 <rcutils_string_map_getn+0x62>
 801aec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec6:	f8d0 b000 	ldr.w	fp, [r0]
 801aeca:	f1bb 0f00 	cmp.w	fp, #0
 801aece:	d01f      	beq.n	801af10 <rcutils_string_map_getn+0x50>
 801aed0:	fab1 f481 	clz	r4, r1
 801aed4:	4688      	mov	r8, r1
 801aed6:	0964      	lsrs	r4, r4, #5
 801aed8:	b1d1      	cbz	r1, 801af10 <rcutils_string_map_getn+0x50>
 801aeda:	f8db 7008 	ldr.w	r7, [fp, #8]
 801aede:	f8db 6000 	ldr.w	r6, [fp]
 801aee2:	b1af      	cbz	r7, 801af10 <rcutils_string_map_getn+0x50>
 801aee4:	4691      	mov	r9, r2
 801aee6:	3e04      	subs	r6, #4
 801aee8:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801aeec:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801aef0:	3401      	adds	r4, #1
 801aef2:	4628      	mov	r0, r5
 801aef4:	b155      	cbz	r5, 801af0c <rcutils_string_map_getn+0x4c>
 801aef6:	f7e5 f9fd 	bl	80002f4 <strlen>
 801aefa:	4602      	mov	r2, r0
 801aefc:	4629      	mov	r1, r5
 801aefe:	4640      	mov	r0, r8
 801af00:	454a      	cmp	r2, r9
 801af02:	bf38      	it	cc
 801af04:	464a      	movcc	r2, r9
 801af06:	f003 f924 	bl	801e152 <strncmp>
 801af0a:	b120      	cbz	r0, 801af16 <rcutils_string_map_getn+0x56>
 801af0c:	42a7      	cmp	r7, r4
 801af0e:	d1eb      	bne.n	801aee8 <rcutils_string_map_getn+0x28>
 801af10:	2000      	movs	r0, #0
 801af12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af16:	f8db 3004 	ldr.w	r3, [fp, #4]
 801af1a:	f853 000a 	ldr.w	r0, [r3, sl]
 801af1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af22:	4770      	bx	lr
 801af24:	0000      	movs	r0, r0
	...

0801af28 <rmw_get_zero_initialized_context>:
 801af28:	b510      	push	{r4, lr}
 801af2a:	4604      	mov	r4, r0
 801af2c:	3010      	adds	r0, #16
 801af2e:	f7f6 fc63 	bl	80117f8 <rmw_get_zero_initialized_init_options>
 801af32:	2300      	movs	r3, #0
 801af34:	4620      	mov	r0, r4
 801af36:	60a3      	str	r3, [r4, #8]
 801af38:	64a3      	str	r3, [r4, #72]	@ 0x48
 801af3a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801af3c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801af48 <rmw_get_zero_initialized_context+0x20>
 801af40:	ed84 7b00 	vstr	d7, [r4]
 801af44:	bd10      	pop	{r4, pc}
 801af46:	bf00      	nop
	...

0801af50 <rmw_time_equal>:
 801af50:	b4f0      	push	{r4, r5, r6, r7}
 801af52:	b084      	sub	sp, #16
 801af54:	ac04      	add	r4, sp, #16
 801af56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801af5a:	4603      	mov	r3, r0
 801af5c:	4925      	ldr	r1, [pc, #148]	@ (801aff4 <rmw_time_equal+0xa4>)
 801af5e:	9d01      	ldr	r5, [sp, #4]
 801af60:	4610      	mov	r0, r2
 801af62:	4299      	cmp	r1, r3
 801af64:	f04f 0202 	mov.w	r2, #2
 801af68:	9e03      	ldr	r6, [sp, #12]
 801af6a:	41aa      	sbcs	r2, r5
 801af6c:	d330      	bcc.n	801afd0 <rmw_time_equal+0x80>
 801af6e:	4c22      	ldr	r4, [pc, #136]	@ (801aff8 <rmw_time_equal+0xa8>)
 801af70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801af74:	fba3 3204 	umull	r3, r2, r3, r4
 801af78:	fb04 2205 	mla	r2, r4, r5, r2
 801af7c:	43dd      	mvns	r5, r3
 801af7e:	1a8c      	subs	r4, r1, r2
 801af80:	4285      	cmp	r5, r0
 801af82:	41b4      	sbcs	r4, r6
 801af84:	d332      	bcc.n	801afec <rmw_time_equal+0x9c>
 801af86:	eb10 0c03 	adds.w	ip, r0, r3
 801af8a:	eb42 0106 	adc.w	r1, r2, r6
 801af8e:	4819      	ldr	r0, [pc, #100]	@ (801aff4 <rmw_time_equal+0xa4>)
 801af90:	2202      	movs	r2, #2
 801af92:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801af94:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801af96:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801af9a:	4298      	cmp	r0, r3
 801af9c:	41b2      	sbcs	r2, r6
 801af9e:	d31c      	bcc.n	801afda <rmw_time_equal+0x8a>
 801afa0:	4c15      	ldr	r4, [pc, #84]	@ (801aff8 <rmw_time_equal+0xa8>)
 801afa2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801afa6:	fba3 3204 	umull	r3, r2, r3, r4
 801afaa:	fb04 2206 	mla	r2, r4, r6, r2
 801afae:	43de      	mvns	r6, r3
 801afb0:	1a84      	subs	r4, r0, r2
 801afb2:	42ae      	cmp	r6, r5
 801afb4:	41bc      	sbcs	r4, r7
 801afb6:	d315      	bcc.n	801afe4 <rmw_time_equal+0x94>
 801afb8:	195b      	adds	r3, r3, r5
 801afba:	eb42 0207 	adc.w	r2, r2, r7
 801afbe:	428a      	cmp	r2, r1
 801afc0:	bf08      	it	eq
 801afc2:	4563      	cmpeq	r3, ip
 801afc4:	bf0c      	ite	eq
 801afc6:	2001      	moveq	r0, #1
 801afc8:	2000      	movne	r0, #0
 801afca:	b004      	add	sp, #16
 801afcc:	bcf0      	pop	{r4, r5, r6, r7}
 801afce:	4770      	bx	lr
 801afd0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801afd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801afd8:	e7d9      	b.n	801af8e <rmw_time_equal+0x3e>
 801afda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801afde:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801afe2:	e7ec      	b.n	801afbe <rmw_time_equal+0x6e>
 801afe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801afe8:	4602      	mov	r2, r0
 801afea:	e7e8      	b.n	801afbe <rmw_time_equal+0x6e>
 801afec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801aff0:	e7cd      	b.n	801af8e <rmw_time_equal+0x3e>
 801aff2:	bf00      	nop
 801aff4:	25c17d04 	.word	0x25c17d04
 801aff8:	3b9aca00 	.word	0x3b9aca00

0801affc <rmw_time_total_nsec>:
 801affc:	b470      	push	{r4, r5, r6}
 801affe:	b085      	sub	sp, #20
 801b000:	ac04      	add	r4, sp, #16
 801b002:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b006:	4603      	mov	r3, r0
 801b008:	4913      	ldr	r1, [pc, #76]	@ (801b058 <rmw_time_total_nsec+0x5c>)
 801b00a:	9d01      	ldr	r5, [sp, #4]
 801b00c:	4610      	mov	r0, r2
 801b00e:	4299      	cmp	r1, r3
 801b010:	f04f 0202 	mov.w	r2, #2
 801b014:	9e03      	ldr	r6, [sp, #12]
 801b016:	41aa      	sbcs	r2, r5
 801b018:	d311      	bcc.n	801b03e <rmw_time_total_nsec+0x42>
 801b01a:	4c10      	ldr	r4, [pc, #64]	@ (801b05c <rmw_time_total_nsec+0x60>)
 801b01c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b020:	fba3 3204 	umull	r3, r2, r3, r4
 801b024:	fb04 2205 	mla	r2, r4, r5, r2
 801b028:	43dd      	mvns	r5, r3
 801b02a:	1a8c      	subs	r4, r1, r2
 801b02c:	4285      	cmp	r5, r0
 801b02e:	41b4      	sbcs	r4, r6
 801b030:	d30c      	bcc.n	801b04c <rmw_time_total_nsec+0x50>
 801b032:	1818      	adds	r0, r3, r0
 801b034:	eb42 0106 	adc.w	r1, r2, r6
 801b038:	b005      	add	sp, #20
 801b03a:	bc70      	pop	{r4, r5, r6}
 801b03c:	4770      	bx	lr
 801b03e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b042:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b046:	b005      	add	sp, #20
 801b048:	bc70      	pop	{r4, r5, r6}
 801b04a:	4770      	bx	lr
 801b04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b050:	b005      	add	sp, #20
 801b052:	bc70      	pop	{r4, r5, r6}
 801b054:	4770      	bx	lr
 801b056:	bf00      	nop
 801b058:	25c17d04 	.word	0x25c17d04
 801b05c:	3b9aca00 	.word	0x3b9aca00

0801b060 <rmw_get_zero_initialized_message_info>:
 801b060:	b510      	push	{r4, lr}
 801b062:	4604      	mov	r4, r0
 801b064:	2240      	movs	r2, #64	@ 0x40
 801b066:	2100      	movs	r1, #0
 801b068:	f003 f85e 	bl	801e128 <memset>
 801b06c:	4620      	mov	r0, r4
 801b06e:	bd10      	pop	{r4, pc}

0801b070 <rmw_validate_full_topic_name>:
 801b070:	2800      	cmp	r0, #0
 801b072:	d05d      	beq.n	801b130 <rmw_validate_full_topic_name+0xc0>
 801b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b078:	460d      	mov	r5, r1
 801b07a:	2900      	cmp	r1, #0
 801b07c:	d05a      	beq.n	801b134 <rmw_validate_full_topic_name+0xc4>
 801b07e:	4604      	mov	r4, r0
 801b080:	4616      	mov	r6, r2
 801b082:	f7e5 f937 	bl	80002f4 <strlen>
 801b086:	b150      	cbz	r0, 801b09e <rmw_validate_full_topic_name+0x2e>
 801b088:	7823      	ldrb	r3, [r4, #0]
 801b08a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b08c:	d00e      	beq.n	801b0ac <rmw_validate_full_topic_name+0x3c>
 801b08e:	2302      	movs	r3, #2
 801b090:	602b      	str	r3, [r5, #0]
 801b092:	b146      	cbz	r6, 801b0a6 <rmw_validate_full_topic_name+0x36>
 801b094:	2300      	movs	r3, #0
 801b096:	4618      	mov	r0, r3
 801b098:	6033      	str	r3, [r6, #0]
 801b09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b09e:	2301      	movs	r3, #1
 801b0a0:	602b      	str	r3, [r5, #0]
 801b0a2:	2e00      	cmp	r6, #0
 801b0a4:	d1f6      	bne.n	801b094 <rmw_validate_full_topic_name+0x24>
 801b0a6:	2000      	movs	r0, #0
 801b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ac:	1e43      	subs	r3, r0, #1
 801b0ae:	5ce2      	ldrb	r2, [r4, r3]
 801b0b0:	2a2f      	cmp	r2, #47	@ 0x2f
 801b0b2:	d041      	beq.n	801b138 <rmw_validate_full_topic_name+0xc8>
 801b0b4:	1e62      	subs	r2, r4, #1
 801b0b6:	f1c4 0e01 	rsb	lr, r4, #1
 801b0ba:	eb02 0800 	add.w	r8, r2, r0
 801b0be:	eb0e 0702 	add.w	r7, lr, r2
 801b0c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801b0c6:	f023 0120 	bic.w	r1, r3, #32
 801b0ca:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801b0ce:	3941      	subs	r1, #65	@ 0x41
 801b0d0:	2919      	cmp	r1, #25
 801b0d2:	d90f      	bls.n	801b0f4 <rmw_validate_full_topic_name+0x84>
 801b0d4:	f1bc 0f0a 	cmp.w	ip, #10
 801b0d8:	d90c      	bls.n	801b0f4 <rmw_validate_full_topic_name+0x84>
 801b0da:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801b0de:	fab3 f383 	clz	r3, r3
 801b0e2:	095b      	lsrs	r3, r3, #5
 801b0e4:	b933      	cbnz	r3, 801b0f4 <rmw_validate_full_topic_name+0x84>
 801b0e6:	2204      	movs	r2, #4
 801b0e8:	602a      	str	r2, [r5, #0]
 801b0ea:	2e00      	cmp	r6, #0
 801b0ec:	d0db      	beq.n	801b0a6 <rmw_validate_full_topic_name+0x36>
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	6037      	str	r7, [r6, #0]
 801b0f2:	e7d2      	b.n	801b09a <rmw_validate_full_topic_name+0x2a>
 801b0f4:	4542      	cmp	r2, r8
 801b0f6:	d1e2      	bne.n	801b0be <rmw_validate_full_topic_name+0x4e>
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	4f1a      	ldr	r7, [pc, #104]	@ (801b164 <rmw_validate_full_topic_name+0xf4>)
 801b0fc:	e004      	b.n	801b108 <rmw_validate_full_topic_name+0x98>
 801b0fe:	4298      	cmp	r0, r3
 801b100:	f104 0401 	add.w	r4, r4, #1
 801b104:	4613      	mov	r3, r2
 801b106:	d91c      	bls.n	801b142 <rmw_validate_full_topic_name+0xd2>
 801b108:	4298      	cmp	r0, r3
 801b10a:	f103 0201 	add.w	r2, r3, #1
 801b10e:	d0f6      	beq.n	801b0fe <rmw_validate_full_topic_name+0x8e>
 801b110:	7821      	ldrb	r1, [r4, #0]
 801b112:	292f      	cmp	r1, #47	@ 0x2f
 801b114:	d1f3      	bne.n	801b0fe <rmw_validate_full_topic_name+0x8e>
 801b116:	7861      	ldrb	r1, [r4, #1]
 801b118:	292f      	cmp	r1, #47	@ 0x2f
 801b11a:	d01e      	beq.n	801b15a <rmw_validate_full_topic_name+0xea>
 801b11c:	5dc9      	ldrb	r1, [r1, r7]
 801b11e:	0749      	lsls	r1, r1, #29
 801b120:	d5ed      	bpl.n	801b0fe <rmw_validate_full_topic_name+0x8e>
 801b122:	2206      	movs	r2, #6
 801b124:	602a      	str	r2, [r5, #0]
 801b126:	2e00      	cmp	r6, #0
 801b128:	d0bd      	beq.n	801b0a6 <rmw_validate_full_topic_name+0x36>
 801b12a:	2000      	movs	r0, #0
 801b12c:	6033      	str	r3, [r6, #0]
 801b12e:	e7b4      	b.n	801b09a <rmw_validate_full_topic_name+0x2a>
 801b130:	200b      	movs	r0, #11
 801b132:	4770      	bx	lr
 801b134:	200b      	movs	r0, #11
 801b136:	e7b0      	b.n	801b09a <rmw_validate_full_topic_name+0x2a>
 801b138:	2203      	movs	r2, #3
 801b13a:	602a      	str	r2, [r5, #0]
 801b13c:	2e00      	cmp	r6, #0
 801b13e:	d1f4      	bne.n	801b12a <rmw_validate_full_topic_name+0xba>
 801b140:	e7b1      	b.n	801b0a6 <rmw_validate_full_topic_name+0x36>
 801b142:	28f7      	cmp	r0, #247	@ 0xf7
 801b144:	d803      	bhi.n	801b14e <rmw_validate_full_topic_name+0xde>
 801b146:	2300      	movs	r3, #0
 801b148:	4618      	mov	r0, r3
 801b14a:	602b      	str	r3, [r5, #0]
 801b14c:	e7a5      	b.n	801b09a <rmw_validate_full_topic_name+0x2a>
 801b14e:	2307      	movs	r3, #7
 801b150:	602b      	str	r3, [r5, #0]
 801b152:	2e00      	cmp	r6, #0
 801b154:	d0a7      	beq.n	801b0a6 <rmw_validate_full_topic_name+0x36>
 801b156:	23f6      	movs	r3, #246	@ 0xf6
 801b158:	e7e7      	b.n	801b12a <rmw_validate_full_topic_name+0xba>
 801b15a:	2205      	movs	r2, #5
 801b15c:	602a      	str	r2, [r5, #0]
 801b15e:	2e00      	cmp	r6, #0
 801b160:	d1e3      	bne.n	801b12a <rmw_validate_full_topic_name+0xba>
 801b162:	e7a0      	b.n	801b0a6 <rmw_validate_full_topic_name+0x36>
 801b164:	0801fe16 	.word	0x0801fe16

0801b168 <rmw_validate_namespace_with_size>:
 801b168:	2800      	cmp	r0, #0
 801b16a:	d043      	beq.n	801b1f4 <rmw_validate_namespace_with_size+0x8c>
 801b16c:	b570      	push	{r4, r5, r6, lr}
 801b16e:	4614      	mov	r4, r2
 801b170:	b0c2      	sub	sp, #264	@ 0x108
 801b172:	b32a      	cbz	r2, 801b1c0 <rmw_validate_namespace_with_size+0x58>
 801b174:	2901      	cmp	r1, #1
 801b176:	460d      	mov	r5, r1
 801b178:	461e      	mov	r6, r3
 801b17a:	d102      	bne.n	801b182 <rmw_validate_namespace_with_size+0x1a>
 801b17c:	7803      	ldrb	r3, [r0, #0]
 801b17e:	2b2f      	cmp	r3, #47	@ 0x2f
 801b180:	d012      	beq.n	801b1a8 <rmw_validate_namespace_with_size+0x40>
 801b182:	aa01      	add	r2, sp, #4
 801b184:	4669      	mov	r1, sp
 801b186:	f7ff ff73 	bl	801b070 <rmw_validate_full_topic_name>
 801b18a:	b980      	cbnz	r0, 801b1ae <rmw_validate_namespace_with_size+0x46>
 801b18c:	9a00      	ldr	r2, [sp, #0]
 801b18e:	b14a      	cbz	r2, 801b1a4 <rmw_validate_namespace_with_size+0x3c>
 801b190:	2a07      	cmp	r2, #7
 801b192:	d007      	beq.n	801b1a4 <rmw_validate_namespace_with_size+0x3c>
 801b194:	1e53      	subs	r3, r2, #1
 801b196:	2b05      	cmp	r3, #5
 801b198:	d82e      	bhi.n	801b1f8 <rmw_validate_namespace_with_size+0x90>
 801b19a:	e8df f003 	tbb	[pc, r3]
 801b19e:	1f1c      	.short	0x1f1c
 801b1a0:	14282522 	.word	0x14282522
 801b1a4:	2df5      	cmp	r5, #245	@ 0xf5
 801b1a6:	d804      	bhi.n	801b1b2 <rmw_validate_namespace_with_size+0x4a>
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	6023      	str	r3, [r4, #0]
 801b1ae:	b042      	add	sp, #264	@ 0x108
 801b1b0:	bd70      	pop	{r4, r5, r6, pc}
 801b1b2:	2307      	movs	r3, #7
 801b1b4:	6023      	str	r3, [r4, #0]
 801b1b6:	2e00      	cmp	r6, #0
 801b1b8:	d0f9      	beq.n	801b1ae <rmw_validate_namespace_with_size+0x46>
 801b1ba:	23f4      	movs	r3, #244	@ 0xf4
 801b1bc:	6033      	str	r3, [r6, #0]
 801b1be:	e7f6      	b.n	801b1ae <rmw_validate_namespace_with_size+0x46>
 801b1c0:	200b      	movs	r0, #11
 801b1c2:	b042      	add	sp, #264	@ 0x108
 801b1c4:	bd70      	pop	{r4, r5, r6, pc}
 801b1c6:	2306      	movs	r3, #6
 801b1c8:	6023      	str	r3, [r4, #0]
 801b1ca:	2e00      	cmp	r6, #0
 801b1cc:	d0ef      	beq.n	801b1ae <rmw_validate_namespace_with_size+0x46>
 801b1ce:	9b01      	ldr	r3, [sp, #4]
 801b1d0:	6033      	str	r3, [r6, #0]
 801b1d2:	b042      	add	sp, #264	@ 0x108
 801b1d4:	bd70      	pop	{r4, r5, r6, pc}
 801b1d6:	2301      	movs	r3, #1
 801b1d8:	6023      	str	r3, [r4, #0]
 801b1da:	e7f6      	b.n	801b1ca <rmw_validate_namespace_with_size+0x62>
 801b1dc:	2302      	movs	r3, #2
 801b1de:	6023      	str	r3, [r4, #0]
 801b1e0:	e7f3      	b.n	801b1ca <rmw_validate_namespace_with_size+0x62>
 801b1e2:	2303      	movs	r3, #3
 801b1e4:	6023      	str	r3, [r4, #0]
 801b1e6:	e7f0      	b.n	801b1ca <rmw_validate_namespace_with_size+0x62>
 801b1e8:	2304      	movs	r3, #4
 801b1ea:	6023      	str	r3, [r4, #0]
 801b1ec:	e7ed      	b.n	801b1ca <rmw_validate_namespace_with_size+0x62>
 801b1ee:	2305      	movs	r3, #5
 801b1f0:	6023      	str	r3, [r4, #0]
 801b1f2:	e7ea      	b.n	801b1ca <rmw_validate_namespace_with_size+0x62>
 801b1f4:	200b      	movs	r0, #11
 801b1f6:	4770      	bx	lr
 801b1f8:	4613      	mov	r3, r2
 801b1fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b1fe:	4a03      	ldr	r2, [pc, #12]	@ (801b20c <rmw_validate_namespace_with_size+0xa4>)
 801b200:	a802      	add	r0, sp, #8
 801b202:	f7ff fcd5 	bl	801abb0 <rcutils_snprintf>
 801b206:	2001      	movs	r0, #1
 801b208:	e7d1      	b.n	801b1ae <rmw_validate_namespace_with_size+0x46>
 801b20a:	bf00      	nop
 801b20c:	0801f8e4 	.word	0x0801f8e4

0801b210 <rmw_validate_namespace>:
 801b210:	b168      	cbz	r0, 801b22e <rmw_validate_namespace+0x1e>
 801b212:	b570      	push	{r4, r5, r6, lr}
 801b214:	460d      	mov	r5, r1
 801b216:	4616      	mov	r6, r2
 801b218:	4604      	mov	r4, r0
 801b21a:	f7e5 f86b 	bl	80002f4 <strlen>
 801b21e:	4633      	mov	r3, r6
 801b220:	4601      	mov	r1, r0
 801b222:	462a      	mov	r2, r5
 801b224:	4620      	mov	r0, r4
 801b226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b22a:	f7ff bf9d 	b.w	801b168 <rmw_validate_namespace_with_size>
 801b22e:	200b      	movs	r0, #11
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop

0801b234 <rmw_namespace_validation_result_string>:
 801b234:	2807      	cmp	r0, #7
 801b236:	d803      	bhi.n	801b240 <rmw_namespace_validation_result_string+0xc>
 801b238:	4b02      	ldr	r3, [pc, #8]	@ (801b244 <rmw_namespace_validation_result_string+0x10>)
 801b23a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b23e:	4770      	bx	lr
 801b240:	4801      	ldr	r0, [pc, #4]	@ (801b248 <rmw_namespace_validation_result_string+0x14>)
 801b242:	4770      	bx	lr
 801b244:	0801fadc 	.word	0x0801fadc
 801b248:	0801f934 	.word	0x0801f934

0801b24c <rmw_validate_node_name>:
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d042      	beq.n	801b2d6 <rmw_validate_node_name+0x8a>
 801b250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b254:	460d      	mov	r5, r1
 801b256:	2900      	cmp	r1, #0
 801b258:	d03f      	beq.n	801b2da <rmw_validate_node_name+0x8e>
 801b25a:	4604      	mov	r4, r0
 801b25c:	4616      	mov	r6, r2
 801b25e:	f7e5 f849 	bl	80002f4 <strlen>
 801b262:	b310      	cbz	r0, 801b2aa <rmw_validate_node_name+0x5e>
 801b264:	1e63      	subs	r3, r4, #1
 801b266:	f1c4 0101 	rsb	r1, r4, #1
 801b26a:	eb03 0800 	add.w	r8, r3, r0
 801b26e:	18cf      	adds	r7, r1, r3
 801b270:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801b274:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801b278:	f02e 0c20 	bic.w	ip, lr, #32
 801b27c:	2a09      	cmp	r2, #9
 801b27e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801b282:	d905      	bls.n	801b290 <rmw_validate_node_name+0x44>
 801b284:	f1bc 0f19 	cmp.w	ip, #25
 801b288:	d902      	bls.n	801b290 <rmw_validate_node_name+0x44>
 801b28a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801b28e:	d114      	bne.n	801b2ba <rmw_validate_node_name+0x6e>
 801b290:	4598      	cmp	r8, r3
 801b292:	d1ec      	bne.n	801b26e <rmw_validate_node_name+0x22>
 801b294:	7822      	ldrb	r2, [r4, #0]
 801b296:	4b16      	ldr	r3, [pc, #88]	@ (801b2f0 <rmw_validate_node_name+0xa4>)
 801b298:	5cd3      	ldrb	r3, [r2, r3]
 801b29a:	f013 0304 	ands.w	r3, r3, #4
 801b29e:	d113      	bne.n	801b2c8 <rmw_validate_node_name+0x7c>
 801b2a0:	28ff      	cmp	r0, #255	@ 0xff
 801b2a2:	d81c      	bhi.n	801b2de <rmw_validate_node_name+0x92>
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	602b      	str	r3, [r5, #0]
 801b2a8:	e00c      	b.n	801b2c4 <rmw_validate_node_name+0x78>
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	602b      	str	r3, [r5, #0]
 801b2ae:	b17e      	cbz	r6, 801b2d0 <rmw_validate_node_name+0x84>
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	6033      	str	r3, [r6, #0]
 801b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2ba:	2302      	movs	r3, #2
 801b2bc:	602b      	str	r3, [r5, #0]
 801b2be:	b13e      	cbz	r6, 801b2d0 <rmw_validate_node_name+0x84>
 801b2c0:	2000      	movs	r0, #0
 801b2c2:	6037      	str	r7, [r6, #0]
 801b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2c8:	2303      	movs	r3, #3
 801b2ca:	602b      	str	r3, [r5, #0]
 801b2cc:	2e00      	cmp	r6, #0
 801b2ce:	d1ef      	bne.n	801b2b0 <rmw_validate_node_name+0x64>
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2d6:	200b      	movs	r0, #11
 801b2d8:	4770      	bx	lr
 801b2da:	200b      	movs	r0, #11
 801b2dc:	e7f2      	b.n	801b2c4 <rmw_validate_node_name+0x78>
 801b2de:	2204      	movs	r2, #4
 801b2e0:	602a      	str	r2, [r5, #0]
 801b2e2:	2e00      	cmp	r6, #0
 801b2e4:	d0f4      	beq.n	801b2d0 <rmw_validate_node_name+0x84>
 801b2e6:	22fe      	movs	r2, #254	@ 0xfe
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	6032      	str	r2, [r6, #0]
 801b2ec:	e7ea      	b.n	801b2c4 <rmw_validate_node_name+0x78>
 801b2ee:	bf00      	nop
 801b2f0:	0801fe16 	.word	0x0801fe16

0801b2f4 <rmw_node_name_validation_result_string>:
 801b2f4:	2804      	cmp	r0, #4
 801b2f6:	d803      	bhi.n	801b300 <rmw_node_name_validation_result_string+0xc>
 801b2f8:	4b02      	ldr	r3, [pc, #8]	@ (801b304 <rmw_node_name_validation_result_string+0x10>)
 801b2fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b2fe:	4770      	bx	lr
 801b300:	4801      	ldr	r0, [pc, #4]	@ (801b308 <rmw_node_name_validation_result_string+0x14>)
 801b302:	4770      	bx	lr
 801b304:	0801fbe8 	.word	0x0801fbe8
 801b308:	0801fafc 	.word	0x0801fafc

0801b30c <on_status>:
 801b30c:	b082      	sub	sp, #8
 801b30e:	b002      	add	sp, #8
 801b310:	4770      	bx	lr
 801b312:	bf00      	nop

0801b314 <on_topic>:
 801b314:	4a23      	ldr	r2, [pc, #140]	@ (801b3a4 <on_topic+0x90>)
 801b316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b31a:	6812      	ldr	r2, [r2, #0]
 801b31c:	b094      	sub	sp, #80	@ 0x50
 801b31e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b320:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801b324:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b326:	9312      	str	r3, [sp, #72]	@ 0x48
 801b328:	b3c2      	cbz	r2, 801b39c <on_topic+0x88>
 801b32a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b32e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b332:	e001      	b.n	801b338 <on_topic+0x24>
 801b334:	6852      	ldr	r2, [r2, #4]
 801b336:	b38a      	cbz	r2, 801b39c <on_topic+0x88>
 801b338:	6894      	ldr	r4, [r2, #8]
 801b33a:	8aa3      	ldrh	r3, [r4, #20]
 801b33c:	428b      	cmp	r3, r1
 801b33e:	d1f9      	bne.n	801b334 <on_topic+0x20>
 801b340:	7da3      	ldrb	r3, [r4, #22]
 801b342:	4283      	cmp	r3, r0
 801b344:	d1f6      	bne.n	801b334 <on_topic+0x20>
 801b346:	2248      	movs	r2, #72	@ 0x48
 801b348:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b34c:	4668      	mov	r0, sp
 801b34e:	f002 ffb4 	bl	801e2ba <memcpy>
 801b352:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b356:	4620      	mov	r0, r4
 801b358:	cb0c      	ldmia	r3, {r2, r3}
 801b35a:	f7f7 fa67 	bl	801282c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b35e:	4607      	mov	r7, r0
 801b360:	b1e0      	cbz	r0, 801b39c <on_topic+0x88>
 801b362:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b366:	462a      	mov	r2, r5
 801b368:	4630      	mov	r0, r6
 801b36a:	f108 0110 	add.w	r1, r8, #16
 801b36e:	f000 ff59 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801b372:	b930      	cbnz	r0, 801b382 <on_topic+0x6e>
 801b374:	4639      	mov	r1, r7
 801b376:	480c      	ldr	r0, [pc, #48]	@ (801b3a8 <on_topic+0x94>)
 801b378:	b014      	add	sp, #80	@ 0x50
 801b37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b37e:	f000 b8bd 	b.w	801b4fc <put_memory>
 801b382:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b386:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801b38a:	f7f7 f84d 	bl	8012428 <rmw_uros_epoch_nanos>
 801b38e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b392:	2305      	movs	r3, #5
 801b394:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b398:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b39c:	b014      	add	sp, #80	@ 0x50
 801b39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3a2:	bf00      	nop
 801b3a4:	24012f6c 	.word	0x24012f6c
 801b3a8:	24012f5c 	.word	0x24012f5c

0801b3ac <on_request>:
 801b3ac:	4824      	ldr	r0, [pc, #144]	@ (801b440 <on_request+0x94>)
 801b3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3b2:	6800      	ldr	r0, [r0, #0]
 801b3b4:	b094      	sub	sp, #80	@ 0x50
 801b3b6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b3b8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801b3bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	d03b      	beq.n	801b43a <on_request+0x8e>
 801b3c2:	461d      	mov	r5, r3
 801b3c4:	e001      	b.n	801b3ca <on_request+0x1e>
 801b3c6:	6840      	ldr	r0, [r0, #4]
 801b3c8:	b3b8      	cbz	r0, 801b43a <on_request+0x8e>
 801b3ca:	6884      	ldr	r4, [r0, #8]
 801b3cc:	8b21      	ldrh	r1, [r4, #24]
 801b3ce:	4291      	cmp	r1, r2
 801b3d0:	d1f9      	bne.n	801b3c6 <on_request+0x1a>
 801b3d2:	2248      	movs	r2, #72	@ 0x48
 801b3d4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b3d8:	4668      	mov	r0, sp
 801b3da:	f002 ff6e 	bl	801e2ba <memcpy>
 801b3de:	f104 0320 	add.w	r3, r4, #32
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	cb0c      	ldmia	r3, {r2, r3}
 801b3e6:	f7f7 fa21 	bl	801282c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b3ea:	4680      	mov	r8, r0
 801b3ec:	b328      	cbz	r0, 801b43a <on_request+0x8e>
 801b3ee:	4630      	mov	r0, r6
 801b3f0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b3f4:	463a      	mov	r2, r7
 801b3f6:	f106 0110 	add.w	r1, r6, #16
 801b3fa:	f000 ff13 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801b3fe:	b930      	cbnz	r0, 801b40e <on_request+0x62>
 801b400:	4641      	mov	r1, r8
 801b402:	4810      	ldr	r0, [pc, #64]	@ (801b444 <on_request+0x98>)
 801b404:	b014      	add	sp, #80	@ 0x50
 801b406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b40a:	f000 b877 	b.w	801b4fc <put_memory>
 801b40e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b410:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801b414:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801b418:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801b41c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b420:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b424:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b428:	f7f6 fffe 	bl	8012428 <rmw_uros_epoch_nanos>
 801b42c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801b430:	2303      	movs	r3, #3
 801b432:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b436:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801b43a:	b014      	add	sp, #80	@ 0x50
 801b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b440:	24012f3c 	.word	0x24012f3c
 801b444:	24012f5c 	.word	0x24012f5c

0801b448 <on_reply>:
 801b448:	4822      	ldr	r0, [pc, #136]	@ (801b4d4 <on_reply+0x8c>)
 801b44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b44e:	6800      	ldr	r0, [r0, #0]
 801b450:	b094      	sub	sp, #80	@ 0x50
 801b452:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801b454:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801b458:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b45a:	b3b8      	cbz	r0, 801b4cc <on_reply+0x84>
 801b45c:	461d      	mov	r5, r3
 801b45e:	e001      	b.n	801b464 <on_reply+0x1c>
 801b460:	6840      	ldr	r0, [r0, #4]
 801b462:	b398      	cbz	r0, 801b4cc <on_reply+0x84>
 801b464:	6884      	ldr	r4, [r0, #8]
 801b466:	8b21      	ldrh	r1, [r4, #24]
 801b468:	4291      	cmp	r1, r2
 801b46a:	d1f9      	bne.n	801b460 <on_reply+0x18>
 801b46c:	2248      	movs	r2, #72	@ 0x48
 801b46e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b472:	4668      	mov	r0, sp
 801b474:	f002 ff21 	bl	801e2ba <memcpy>
 801b478:	f104 0320 	add.w	r3, r4, #32
 801b47c:	4620      	mov	r0, r4
 801b47e:	cb0c      	ldmia	r3, {r2, r3}
 801b480:	f7f7 f9d4 	bl	801282c <rmw_uxrce_get_static_input_buffer_for_entity>
 801b484:	4680      	mov	r8, r0
 801b486:	b308      	cbz	r0, 801b4cc <on_reply+0x84>
 801b488:	4630      	mov	r0, r6
 801b48a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b48e:	463a      	mov	r2, r7
 801b490:	f106 0110 	add.w	r1, r6, #16
 801b494:	f000 fec6 	bl	801c224 <ucdr_deserialize_array_uint8_t>
 801b498:	b930      	cbnz	r0, 801b4a8 <on_reply+0x60>
 801b49a:	4641      	mov	r1, r8
 801b49c:	480e      	ldr	r0, [pc, #56]	@ (801b4d8 <on_reply+0x90>)
 801b49e:	b014      	add	sp, #80	@ 0x50
 801b4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4a4:	f000 b82a 	b.w	801b4fc <put_memory>
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801b4ae:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801b4b2:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801b4b6:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801b4ba:	f7f6 ffb5 	bl	8012428 <rmw_uros_epoch_nanos>
 801b4be:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801b4c2:	2304      	movs	r3, #4
 801b4c4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b4c8:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801b4cc:	b014      	add	sp, #80	@ 0x50
 801b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4d2:	bf00      	nop
 801b4d4:	2400e64c 	.word	0x2400e64c
 801b4d8:	24012f5c 	.word	0x24012f5c

0801b4dc <get_memory>:
 801b4dc:	4603      	mov	r3, r0
 801b4de:	6840      	ldr	r0, [r0, #4]
 801b4e0:	b158      	cbz	r0, 801b4fa <get_memory+0x1e>
 801b4e2:	6842      	ldr	r2, [r0, #4]
 801b4e4:	605a      	str	r2, [r3, #4]
 801b4e6:	b10a      	cbz	r2, 801b4ec <get_memory+0x10>
 801b4e8:	2100      	movs	r1, #0
 801b4ea:	6011      	str	r1, [r2, #0]
 801b4ec:	681a      	ldr	r2, [r3, #0]
 801b4ee:	6042      	str	r2, [r0, #4]
 801b4f0:	b102      	cbz	r2, 801b4f4 <get_memory+0x18>
 801b4f2:	6010      	str	r0, [r2, #0]
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	6002      	str	r2, [r0, #0]
 801b4f8:	6018      	str	r0, [r3, #0]
 801b4fa:	4770      	bx	lr

0801b4fc <put_memory>:
 801b4fc:	680b      	ldr	r3, [r1, #0]
 801b4fe:	b10b      	cbz	r3, 801b504 <put_memory+0x8>
 801b500:	684a      	ldr	r2, [r1, #4]
 801b502:	605a      	str	r2, [r3, #4]
 801b504:	684a      	ldr	r2, [r1, #4]
 801b506:	b102      	cbz	r2, 801b50a <put_memory+0xe>
 801b508:	6013      	str	r3, [r2, #0]
 801b50a:	6803      	ldr	r3, [r0, #0]
 801b50c:	428b      	cmp	r3, r1
 801b50e:	6843      	ldr	r3, [r0, #4]
 801b510:	bf08      	it	eq
 801b512:	6002      	streq	r2, [r0, #0]
 801b514:	604b      	str	r3, [r1, #4]
 801b516:	b103      	cbz	r3, 801b51a <put_memory+0x1e>
 801b518:	6019      	str	r1, [r3, #0]
 801b51a:	2300      	movs	r3, #0
 801b51c:	600b      	str	r3, [r1, #0]
 801b51e:	6041      	str	r1, [r0, #4]
 801b520:	4770      	bx	lr
 801b522:	bf00      	nop

0801b524 <rmw_destroy_client>:
 801b524:	b570      	push	{r4, r5, r6, lr}
 801b526:	b128      	cbz	r0, 801b534 <rmw_destroy_client+0x10>
 801b528:	4604      	mov	r4, r0
 801b52a:	6800      	ldr	r0, [r0, #0]
 801b52c:	460d      	mov	r5, r1
 801b52e:	f7f7 faf7 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 801b532:	b910      	cbnz	r0, 801b53a <rmw_destroy_client+0x16>
 801b534:	2401      	movs	r4, #1
 801b536:	4620      	mov	r0, r4
 801b538:	bd70      	pop	{r4, r5, r6, pc}
 801b53a:	6863      	ldr	r3, [r4, #4]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d0f9      	beq.n	801b534 <rmw_destroy_client+0x10>
 801b540:	2d00      	cmp	r5, #0
 801b542:	d0f7      	beq.n	801b534 <rmw_destroy_client+0x10>
 801b544:	6828      	ldr	r0, [r5, #0]
 801b546:	f7f7 faeb 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 801b54a:	2800      	cmp	r0, #0
 801b54c:	d0f2      	beq.n	801b534 <rmw_destroy_client+0x10>
 801b54e:	686e      	ldr	r6, [r5, #4]
 801b550:	2e00      	cmp	r6, #0
 801b552:	d0ef      	beq.n	801b534 <rmw_destroy_client+0x10>
 801b554:	6864      	ldr	r4, [r4, #4]
 801b556:	6932      	ldr	r2, [r6, #16]
 801b558:	6920      	ldr	r0, [r4, #16]
 801b55a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b55e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b562:	6819      	ldr	r1, [r3, #0]
 801b564:	f7f9 f9f0 	bl	8014948 <uxr_buffer_cancel_data>
 801b568:	4602      	mov	r2, r0
 801b56a:	6920      	ldr	r0, [r4, #16]
 801b56c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b570:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b574:	f7f7 fa5a 	bl	8012a2c <run_xrce_session>
 801b578:	6920      	ldr	r0, [r4, #16]
 801b57a:	6932      	ldr	r2, [r6, #16]
 801b57c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b580:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b584:	6819      	ldr	r1, [r3, #0]
 801b586:	f7f8 ff97 	bl	80144b8 <uxr_buffer_delete_entity>
 801b58a:	4602      	mov	r2, r0
 801b58c:	6920      	ldr	r0, [r4, #16]
 801b58e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b592:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b596:	f7f7 fa49 	bl	8012a2c <run_xrce_session>
 801b59a:	4603      	mov	r3, r0
 801b59c:	4628      	mov	r0, r5
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	bf14      	ite	ne
 801b5a2:	2400      	movne	r4, #0
 801b5a4:	2402      	moveq	r4, #2
 801b5a6:	f7f7 f91f 	bl	80127e8 <rmw_uxrce_fini_client_memory>
 801b5aa:	e7c4      	b.n	801b536 <rmw_destroy_client+0x12>

0801b5ac <rmw_get_implementation_identifier>:
 801b5ac:	4b01      	ldr	r3, [pc, #4]	@ (801b5b4 <rmw_get_implementation_identifier+0x8>)
 801b5ae:	6818      	ldr	r0, [r3, #0]
 801b5b0:	4770      	bx	lr
 801b5b2:	bf00      	nop
 801b5b4:	0801fc14 	.word	0x0801fc14

0801b5b8 <create_topic>:
 801b5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5bc:	4605      	mov	r5, r0
 801b5be:	b084      	sub	sp, #16
 801b5c0:	4822      	ldr	r0, [pc, #136]	@ (801b64c <create_topic+0x94>)
 801b5c2:	460f      	mov	r7, r1
 801b5c4:	4616      	mov	r6, r2
 801b5c6:	f7ff ff89 	bl	801b4dc <get_memory>
 801b5ca:	4604      	mov	r4, r0
 801b5cc:	2800      	cmp	r0, #0
 801b5ce:	d039      	beq.n	801b644 <create_topic+0x8c>
 801b5d0:	692b      	ldr	r3, [r5, #16]
 801b5d2:	2102      	movs	r1, #2
 801b5d4:	6884      	ldr	r4, [r0, #8]
 801b5d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b5da:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801b654 <create_topic+0x9c>
 801b5de:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801b5e2:	1c42      	adds	r2, r0, #1
 801b5e4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801b5e8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801b5ec:	f7f9 f97c 	bl	80148e8 <uxr_object_id>
 801b5f0:	223c      	movs	r2, #60	@ 0x3c
 801b5f2:	6120      	str	r0, [r4, #16]
 801b5f4:	4641      	mov	r1, r8
 801b5f6:	4638      	mov	r0, r7
 801b5f8:	f7f7 fa7a 	bl	8012af0 <generate_topic_name>
 801b5fc:	b1f0      	cbz	r0, 801b63c <create_topic+0x84>
 801b5fe:	4f14      	ldr	r7, [pc, #80]	@ (801b650 <create_topic+0x98>)
 801b600:	4630      	mov	r0, r6
 801b602:	2264      	movs	r2, #100	@ 0x64
 801b604:	4639      	mov	r1, r7
 801b606:	f7f7 fa45 	bl	8012a94 <generate_type_name>
 801b60a:	b1b8      	cbz	r0, 801b63c <create_topic+0x84>
 801b60c:	6928      	ldr	r0, [r5, #16]
 801b60e:	2106      	movs	r1, #6
 801b610:	696b      	ldr	r3, [r5, #20]
 801b612:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801b616:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b61a:	f8cd 8000 	str.w	r8, [sp]
 801b61e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801b622:	6811      	ldr	r1, [r2, #0]
 801b624:	6922      	ldr	r2, [r4, #16]
 801b626:	f7f8 ffc5 	bl	80145b4 <uxr_buffer_create_topic_bin>
 801b62a:	4602      	mov	r2, r0
 801b62c:	6928      	ldr	r0, [r5, #16]
 801b62e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801b632:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801b636:	f7f7 f9f9 	bl	8012a2c <run_xrce_session>
 801b63a:	b918      	cbnz	r0, 801b644 <create_topic+0x8c>
 801b63c:	4620      	mov	r0, r4
 801b63e:	2400      	movs	r4, #0
 801b640:	f7f7 f8e8 	bl	8012814 <rmw_uxrce_fini_topic_memory>
 801b644:	4620      	mov	r0, r4
 801b646:	b004      	add	sp, #16
 801b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b64c:	24012f7c 	.word	0x24012f7c
 801b650:	24012ffc 	.word	0x24012ffc
 801b654:	24012fc0 	.word	0x24012fc0

0801b658 <destroy_topic>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	6985      	ldr	r5, [r0, #24]
 801b65c:	b1dd      	cbz	r5, 801b696 <destroy_topic+0x3e>
 801b65e:	4604      	mov	r4, r0
 801b660:	6928      	ldr	r0, [r5, #16]
 801b662:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b666:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b66a:	6922      	ldr	r2, [r4, #16]
 801b66c:	6819      	ldr	r1, [r3, #0]
 801b66e:	f7f8 ff23 	bl	80144b8 <uxr_buffer_delete_entity>
 801b672:	4602      	mov	r2, r0
 801b674:	6928      	ldr	r0, [r5, #16]
 801b676:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b67a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b67e:	f7f7 f9d5 	bl	8012a2c <run_xrce_session>
 801b682:	4603      	mov	r3, r0
 801b684:	4620      	mov	r0, r4
 801b686:	2b00      	cmp	r3, #0
 801b688:	bf14      	ite	ne
 801b68a:	2400      	movne	r4, #0
 801b68c:	2402      	moveq	r4, #2
 801b68e:	f7f7 f8c1 	bl	8012814 <rmw_uxrce_fini_topic_memory>
 801b692:	4620      	mov	r0, r4
 801b694:	bd38      	pop	{r3, r4, r5, pc}
 801b696:	2401      	movs	r4, #1
 801b698:	4620      	mov	r0, r4
 801b69a:	bd38      	pop	{r3, r4, r5, pc}

0801b69c <rmw_send_request>:
 801b69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	6800      	ldr	r0, [r0, #0]
 801b6a4:	b08b      	sub	sp, #44	@ 0x2c
 801b6a6:	460e      	mov	r6, r1
 801b6a8:	4615      	mov	r5, r2
 801b6aa:	b128      	cbz	r0, 801b6b8 <rmw_send_request+0x1c>
 801b6ac:	4b21      	ldr	r3, [pc, #132]	@ (801b734 <rmw_send_request+0x98>)
 801b6ae:	6819      	ldr	r1, [r3, #0]
 801b6b0:	f7e4 fe16 	bl	80002e0 <strcmp>
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	d139      	bne.n	801b72c <rmw_send_request+0x90>
 801b6b8:	6864      	ldr	r4, [r4, #4]
 801b6ba:	2700      	movs	r7, #0
 801b6bc:	6963      	ldr	r3, [r4, #20]
 801b6be:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801b6c2:	689b      	ldr	r3, [r3, #8]
 801b6c4:	4798      	blx	r3
 801b6c6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801b6ca:	4630      	mov	r0, r6
 801b6cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b6d0:	4798      	blx	r3
 801b6d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b6d6:	9000      	str	r0, [sp, #0]
 801b6d8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801b6dc:	6922      	ldr	r2, [r4, #16]
 801b6de:	ab02      	add	r3, sp, #8
 801b6e0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801b6e2:	f7fb f9d1 	bl	8016a88 <uxr_prepare_output_stream>
 801b6e6:	e9c5 0700 	strd	r0, r7, [r5]
 801b6ea:	b198      	cbz	r0, 801b714 <rmw_send_request+0x78>
 801b6ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b6f0:	a902      	add	r1, sp, #8
 801b6f2:	4630      	mov	r0, r6
 801b6f4:	4798      	blx	r3
 801b6f6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801b6fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801b6fe:	2b01      	cmp	r3, #1
 801b700:	d00c      	beq.n	801b71c <rmw_send_request+0x80>
 801b702:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801b704:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b708:	f7f9 feee 	bl	80154e8 <uxr_run_session_until_confirm_delivery>
 801b70c:	4638      	mov	r0, r7
 801b70e:	b00b      	add	sp, #44	@ 0x2c
 801b710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b714:	2001      	movs	r0, #1
 801b716:	b00b      	add	sp, #44	@ 0x2c
 801b718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b71c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b720:	f7f9 fb28 	bl	8014d74 <uxr_flash_output_streams>
 801b724:	4638      	mov	r0, r7
 801b726:	b00b      	add	sp, #44	@ 0x2c
 801b728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b72c:	200c      	movs	r0, #12
 801b72e:	b00b      	add	sp, #44	@ 0x2c
 801b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b734:	0801fc14 	.word	0x0801fc14

0801b738 <rmw_take_request>:
 801b738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b73c:	4605      	mov	r5, r0
 801b73e:	6800      	ldr	r0, [r0, #0]
 801b740:	b089      	sub	sp, #36	@ 0x24
 801b742:	460c      	mov	r4, r1
 801b744:	4690      	mov	r8, r2
 801b746:	461e      	mov	r6, r3
 801b748:	b128      	cbz	r0, 801b756 <rmw_take_request+0x1e>
 801b74a:	4b28      	ldr	r3, [pc, #160]	@ (801b7ec <rmw_take_request+0xb4>)
 801b74c:	6819      	ldr	r1, [r3, #0]
 801b74e:	f7e4 fdc7 	bl	80002e0 <strcmp>
 801b752:	2800      	cmp	r0, #0
 801b754:	d146      	bne.n	801b7e4 <rmw_take_request+0xac>
 801b756:	b10e      	cbz	r6, 801b75c <rmw_take_request+0x24>
 801b758:	2300      	movs	r3, #0
 801b75a:	7033      	strb	r3, [r6, #0]
 801b75c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801b760:	f7f7 f8e6 	bl	8012930 <rmw_uxrce_clean_expired_static_input_buffer>
 801b764:	4648      	mov	r0, r9
 801b766:	f7f7 f8bb 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b76a:	4607      	mov	r7, r0
 801b76c:	b3b0      	cbz	r0, 801b7dc <rmw_take_request+0xa4>
 801b76e:	6885      	ldr	r5, [r0, #8]
 801b770:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801b774:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801b778:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801b77c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801b780:	7423      	strb	r3, [r4, #16]
 801b782:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801b786:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801b78a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801b78e:	74e3      	strb	r3, [r4, #19]
 801b790:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801b794:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801b798:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801b79c:	6161      	str	r1, [r4, #20]
 801b79e:	61a2      	str	r2, [r4, #24]
 801b7a0:	61e3      	str	r3, [r4, #28]
 801b7a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801b7a6:	689b      	ldr	r3, [r3, #8]
 801b7a8:	4798      	blx	r3
 801b7aa:	6844      	ldr	r4, [r0, #4]
 801b7ac:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801b7b0:	f105 0110 	add.w	r1, r5, #16
 801b7b4:	4668      	mov	r0, sp
 801b7b6:	f7f8 fd87 	bl	80142c8 <ucdr_init_buffer>
 801b7ba:	4641      	mov	r1, r8
 801b7bc:	68e3      	ldr	r3, [r4, #12]
 801b7be:	4668      	mov	r0, sp
 801b7c0:	4798      	blx	r3
 801b7c2:	4639      	mov	r1, r7
 801b7c4:	4604      	mov	r4, r0
 801b7c6:	480a      	ldr	r0, [pc, #40]	@ (801b7f0 <rmw_take_request+0xb8>)
 801b7c8:	f7ff fe98 	bl	801b4fc <put_memory>
 801b7cc:	b106      	cbz	r6, 801b7d0 <rmw_take_request+0x98>
 801b7ce:	7034      	strb	r4, [r6, #0]
 801b7d0:	f084 0001 	eor.w	r0, r4, #1
 801b7d4:	b2c0      	uxtb	r0, r0
 801b7d6:	b009      	add	sp, #36	@ 0x24
 801b7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7dc:	2001      	movs	r0, #1
 801b7de:	b009      	add	sp, #36	@ 0x24
 801b7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7e4:	200c      	movs	r0, #12
 801b7e6:	b009      	add	sp, #36	@ 0x24
 801b7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7ec:	0801fc14 	.word	0x0801fc14
 801b7f0:	24012f5c 	.word	0x24012f5c

0801b7f4 <rmw_send_response>:
 801b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7f6:	4605      	mov	r5, r0
 801b7f8:	6800      	ldr	r0, [r0, #0]
 801b7fa:	b091      	sub	sp, #68	@ 0x44
 801b7fc:	460c      	mov	r4, r1
 801b7fe:	4616      	mov	r6, r2
 801b800:	b128      	cbz	r0, 801b80e <rmw_send_response+0x1a>
 801b802:	4b29      	ldr	r3, [pc, #164]	@ (801b8a8 <rmw_send_response+0xb4>)
 801b804:	6819      	ldr	r1, [r3, #0]
 801b806:	f7e4 fd6b 	bl	80002e0 <strcmp>
 801b80a:	2800      	cmp	r0, #0
 801b80c:	d141      	bne.n	801b892 <rmw_send_response+0x9e>
 801b80e:	686d      	ldr	r5, [r5, #4]
 801b810:	68a1      	ldr	r1, [r4, #8]
 801b812:	6860      	ldr	r0, [r4, #4]
 801b814:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801b816:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801b81a:	9307      	str	r3, [sp, #28]
 801b81c:	4623      	mov	r3, r4
 801b81e:	9206      	str	r2, [sp, #24]
 801b820:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b824:	789b      	ldrb	r3, [r3, #2]
 801b826:	f88d 2017 	strb.w	r2, [sp, #23]
 801b82a:	f88d 3016 	strb.w	r3, [sp, #22]
 801b82e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801b832:	68e2      	ldr	r2, [r4, #12]
 801b834:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b838:	ab02      	add	r3, sp, #8
 801b83a:	696c      	ldr	r4, [r5, #20]
 801b83c:	c307      	stmia	r3!, {r0, r1, r2}
 801b83e:	68e3      	ldr	r3, [r4, #12]
 801b840:	4798      	blx	r3
 801b842:	6844      	ldr	r4, [r0, #4]
 801b844:	4630      	mov	r0, r6
 801b846:	6923      	ldr	r3, [r4, #16]
 801b848:	4798      	blx	r3
 801b84a:	f100 0318 	add.w	r3, r0, #24
 801b84e:	6938      	ldr	r0, [r7, #16]
 801b850:	9300      	str	r3, [sp, #0]
 801b852:	ab08      	add	r3, sp, #32
 801b854:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b858:	692a      	ldr	r2, [r5, #16]
 801b85a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801b85c:	f7fb f914 	bl	8016a88 <uxr_prepare_output_stream>
 801b860:	b910      	cbnz	r0, 801b868 <rmw_send_response+0x74>
 801b862:	2001      	movs	r0, #1
 801b864:	b011      	add	sp, #68	@ 0x44
 801b866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b868:	a902      	add	r1, sp, #8
 801b86a:	a808      	add	r0, sp, #32
 801b86c:	f7fc f966 	bl	8017b3c <uxr_serialize_SampleIdentity>
 801b870:	68a3      	ldr	r3, [r4, #8]
 801b872:	a908      	add	r1, sp, #32
 801b874:	4630      	mov	r0, r6
 801b876:	4798      	blx	r3
 801b878:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801b87c:	6938      	ldr	r0, [r7, #16]
 801b87e:	2b01      	cmp	r3, #1
 801b880:	d00a      	beq.n	801b898 <rmw_send_response+0xa4>
 801b882:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801b884:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b888:	f7f9 fe2e 	bl	80154e8 <uxr_run_session_until_confirm_delivery>
 801b88c:	2000      	movs	r0, #0
 801b88e:	b011      	add	sp, #68	@ 0x44
 801b890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b892:	200c      	movs	r0, #12
 801b894:	b011      	add	sp, #68	@ 0x44
 801b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b898:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b89c:	f7f9 fa6a 	bl	8014d74 <uxr_flash_output_streams>
 801b8a0:	2000      	movs	r0, #0
 801b8a2:	b011      	add	sp, #68	@ 0x44
 801b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8a6:	bf00      	nop
 801b8a8:	0801fc14 	.word	0x0801fc14

0801b8ac <rmw_take_response>:
 801b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8b0:	4604      	mov	r4, r0
 801b8b2:	6800      	ldr	r0, [r0, #0]
 801b8b4:	b088      	sub	sp, #32
 801b8b6:	460f      	mov	r7, r1
 801b8b8:	4690      	mov	r8, r2
 801b8ba:	461d      	mov	r5, r3
 801b8bc:	b120      	cbz	r0, 801b8c8 <rmw_take_response+0x1c>
 801b8be:	4b1d      	ldr	r3, [pc, #116]	@ (801b934 <rmw_take_response+0x88>)
 801b8c0:	6819      	ldr	r1, [r3, #0]
 801b8c2:	f7e4 fd0d 	bl	80002e0 <strcmp>
 801b8c6:	bb68      	cbnz	r0, 801b924 <rmw_take_response+0x78>
 801b8c8:	b10d      	cbz	r5, 801b8ce <rmw_take_response+0x22>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	702b      	strb	r3, [r5, #0]
 801b8ce:	6864      	ldr	r4, [r4, #4]
 801b8d0:	f7f7 f82e 	bl	8012930 <rmw_uxrce_clean_expired_static_input_buffer>
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	f7f7 f803 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b8da:	4606      	mov	r6, r0
 801b8dc:	b330      	cbz	r0, 801b92c <rmw_take_response+0x80>
 801b8de:	6963      	ldr	r3, [r4, #20]
 801b8e0:	6884      	ldr	r4, [r0, #8]
 801b8e2:	68db      	ldr	r3, [r3, #12]
 801b8e4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801b8e8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801b8ec:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801b8f0:	4798      	blx	r3
 801b8f2:	6847      	ldr	r7, [r0, #4]
 801b8f4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801b8f8:	f104 0110 	add.w	r1, r4, #16
 801b8fc:	4668      	mov	r0, sp
 801b8fe:	f7f8 fce3 	bl	80142c8 <ucdr_init_buffer>
 801b902:	4641      	mov	r1, r8
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	4668      	mov	r0, sp
 801b908:	4798      	blx	r3
 801b90a:	4631      	mov	r1, r6
 801b90c:	4604      	mov	r4, r0
 801b90e:	480a      	ldr	r0, [pc, #40]	@ (801b938 <rmw_take_response+0x8c>)
 801b910:	f7ff fdf4 	bl	801b4fc <put_memory>
 801b914:	b105      	cbz	r5, 801b918 <rmw_take_response+0x6c>
 801b916:	702c      	strb	r4, [r5, #0]
 801b918:	f084 0001 	eor.w	r0, r4, #1
 801b91c:	b2c0      	uxtb	r0, r0
 801b91e:	b008      	add	sp, #32
 801b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b924:	200c      	movs	r0, #12
 801b926:	b008      	add	sp, #32
 801b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b92c:	2001      	movs	r0, #1
 801b92e:	b008      	add	sp, #32
 801b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b934:	0801fc14 	.word	0x0801fc14
 801b938:	24012f5c 	.word	0x24012f5c

0801b93c <rmw_take_with_info>:
 801b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b93e:	4604      	mov	r4, r0
 801b940:	6800      	ldr	r0, [r0, #0]
 801b942:	b089      	sub	sp, #36	@ 0x24
 801b944:	460f      	mov	r7, r1
 801b946:	4615      	mov	r5, r2
 801b948:	b128      	cbz	r0, 801b956 <rmw_take_with_info+0x1a>
 801b94a:	4b24      	ldr	r3, [pc, #144]	@ (801b9dc <rmw_take_with_info+0xa0>)
 801b94c:	6819      	ldr	r1, [r3, #0]
 801b94e:	f7e4 fcc7 	bl	80002e0 <strcmp>
 801b952:	2800      	cmp	r0, #0
 801b954:	d13e      	bne.n	801b9d4 <rmw_take_with_info+0x98>
 801b956:	b305      	cbz	r5, 801b99a <rmw_take_with_info+0x5e>
 801b958:	2300      	movs	r3, #0
 801b95a:	6864      	ldr	r4, [r4, #4]
 801b95c:	702b      	strb	r3, [r5, #0]
 801b95e:	f7f6 ffe7 	bl	8012930 <rmw_uxrce_clean_expired_static_input_buffer>
 801b962:	4620      	mov	r0, r4
 801b964:	f7f6 ffbc 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b968:	4606      	mov	r6, r0
 801b96a:	b1f0      	cbz	r0, 801b9aa <rmw_take_with_info+0x6e>
 801b96c:	6881      	ldr	r1, [r0, #8]
 801b96e:	4668      	mov	r0, sp
 801b970:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801b974:	3110      	adds	r1, #16
 801b976:	f7f8 fca7 	bl	80142c8 <ucdr_init_buffer>
 801b97a:	69a3      	ldr	r3, [r4, #24]
 801b97c:	4639      	mov	r1, r7
 801b97e:	4668      	mov	r0, sp
 801b980:	68db      	ldr	r3, [r3, #12]
 801b982:	4798      	blx	r3
 801b984:	4604      	mov	r4, r0
 801b986:	4631      	mov	r1, r6
 801b988:	4815      	ldr	r0, [pc, #84]	@ (801b9e0 <rmw_take_with_info+0xa4>)
 801b98a:	f7ff fdb7 	bl	801b4fc <put_memory>
 801b98e:	702c      	strb	r4, [r5, #0]
 801b990:	f084 0001 	eor.w	r0, r4, #1
 801b994:	b2c0      	uxtb	r0, r0
 801b996:	b009      	add	sp, #36	@ 0x24
 801b998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b99a:	6864      	ldr	r4, [r4, #4]
 801b99c:	f7f6 ffc8 	bl	8012930 <rmw_uxrce_clean_expired_static_input_buffer>
 801b9a0:	4620      	mov	r0, r4
 801b9a2:	f7f6 ff9d 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b9a6:	4605      	mov	r5, r0
 801b9a8:	b910      	cbnz	r0, 801b9b0 <rmw_take_with_info+0x74>
 801b9aa:	2001      	movs	r0, #1
 801b9ac:	b009      	add	sp, #36	@ 0x24
 801b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9b0:	68a9      	ldr	r1, [r5, #8]
 801b9b2:	4668      	mov	r0, sp
 801b9b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801b9b8:	3110      	adds	r1, #16
 801b9ba:	f7f8 fc85 	bl	80142c8 <ucdr_init_buffer>
 801b9be:	69a3      	ldr	r3, [r4, #24]
 801b9c0:	4639      	mov	r1, r7
 801b9c2:	4668      	mov	r0, sp
 801b9c4:	68db      	ldr	r3, [r3, #12]
 801b9c6:	4798      	blx	r3
 801b9c8:	4629      	mov	r1, r5
 801b9ca:	4604      	mov	r4, r0
 801b9cc:	4804      	ldr	r0, [pc, #16]	@ (801b9e0 <rmw_take_with_info+0xa4>)
 801b9ce:	f7ff fd95 	bl	801b4fc <put_memory>
 801b9d2:	e7dd      	b.n	801b990 <rmw_take_with_info+0x54>
 801b9d4:	200c      	movs	r0, #12
 801b9d6:	b009      	add	sp, #36	@ 0x24
 801b9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9da:	bf00      	nop
 801b9dc:	0801fc14 	.word	0x0801fc14
 801b9e0:	24012f5c 	.word	0x24012f5c

0801b9e4 <rmw_wait>:
 801b9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b9e8:	4698      	mov	r8, r3
 801b9ea:	ea40 0301 	orr.w	r3, r0, r1
 801b9ee:	b089      	sub	sp, #36	@ 0x24
 801b9f0:	ea48 0303 	orr.w	r3, r8, r3
 801b9f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b9f6:	4313      	orrs	r3, r2
 801b9f8:	f000 8106 	beq.w	801bc08 <rmw_wait+0x224>
 801b9fc:	4605      	mov	r5, r0
 801b9fe:	460e      	mov	r6, r1
 801ba00:	4691      	mov	r9, r2
 801ba02:	b16c      	cbz	r4, 801ba20 <rmw_wait+0x3c>
 801ba04:	4ba6      	ldr	r3, [pc, #664]	@ (801bca0 <rmw_wait+0x2bc>)
 801ba06:	af04      	add	r7, sp, #16
 801ba08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ba0a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801ba0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801ba12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ba16:	f7ff fa9b 	bl	801af50 <rmw_time_equal>
 801ba1a:	2800      	cmp	r0, #0
 801ba1c:	f000 810b 	beq.w	801bc36 <rmw_wait+0x252>
 801ba20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ba24:	f7f6 ff84 	bl	8012930 <rmw_uxrce_clean_expired_static_input_buffer>
 801ba28:	4b9e      	ldr	r3, [pc, #632]	@ (801bca4 <rmw_wait+0x2c0>)
 801ba2a:	681c      	ldr	r4, [r3, #0]
 801ba2c:	b14c      	cbz	r4, 801ba42 <rmw_wait+0x5e>
 801ba2e:	4623      	mov	r3, r4
 801ba30:	2100      	movs	r1, #0
 801ba32:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801ba36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ba3a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d1f7      	bne.n	801ba32 <rmw_wait+0x4e>
 801ba42:	f1b9 0f00 	cmp.w	r9, #0
 801ba46:	d011      	beq.n	801ba6c <rmw_wait+0x88>
 801ba48:	f8d9 1000 	ldr.w	r1, [r9]
 801ba4c:	b171      	cbz	r1, 801ba6c <rmw_wait+0x88>
 801ba4e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801ba52:	2300      	movs	r3, #0
 801ba54:	2001      	movs	r0, #1
 801ba56:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ba5a:	3301      	adds	r3, #1
 801ba5c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ba5e:	4299      	cmp	r1, r3
 801ba60:	6912      	ldr	r2, [r2, #16]
 801ba62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ba66:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ba6a:	d1f4      	bne.n	801ba56 <rmw_wait+0x72>
 801ba6c:	f1b8 0f00 	cmp.w	r8, #0
 801ba70:	d011      	beq.n	801ba96 <rmw_wait+0xb2>
 801ba72:	f8d8 1000 	ldr.w	r1, [r8]
 801ba76:	b171      	cbz	r1, 801ba96 <rmw_wait+0xb2>
 801ba78:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	2001      	movs	r0, #1
 801ba80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ba84:	3301      	adds	r3, #1
 801ba86:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ba88:	4299      	cmp	r1, r3
 801ba8a:	6912      	ldr	r2, [r2, #16]
 801ba8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ba90:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ba94:	d1f4      	bne.n	801ba80 <rmw_wait+0x9c>
 801ba96:	b185      	cbz	r5, 801baba <rmw_wait+0xd6>
 801ba98:	6829      	ldr	r1, [r5, #0]
 801ba9a:	b171      	cbz	r1, 801baba <rmw_wait+0xd6>
 801ba9c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801baa0:	2300      	movs	r3, #0
 801baa2:	2001      	movs	r0, #1
 801baa4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801baa8:	3301      	adds	r3, #1
 801baaa:	6a12      	ldr	r2, [r2, #32]
 801baac:	4299      	cmp	r1, r3
 801baae:	6912      	ldr	r2, [r2, #16]
 801bab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bab4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bab8:	d1f4      	bne.n	801baa4 <rmw_wait+0xc0>
 801baba:	b344      	cbz	r4, 801bb0e <rmw_wait+0x12a>
 801babc:	4622      	mov	r2, r4
 801babe:	2300      	movs	r3, #0
 801bac0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801bac4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801bac8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801bacc:	440b      	add	r3, r1
 801bace:	b2db      	uxtb	r3, r3
 801bad0:	2a00      	cmp	r2, #0
 801bad2:	d1f5      	bne.n	801bac0 <rmw_wait+0xdc>
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d05f      	beq.n	801bb98 <rmw_wait+0x1b4>
 801bad8:	1c7a      	adds	r2, r7, #1
 801bada:	d00d      	beq.n	801baf8 <rmw_wait+0x114>
 801badc:	ee07 7a90 	vmov	s15, r7
 801bae0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bae4:	ee07 3a90 	vmov	s15, r3
 801bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801baec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baf0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801baf4:	ee17 7a90 	vmov	r7, s15
 801baf8:	68a0      	ldr	r0, [r4, #8]
 801bafa:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801bafe:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	f040 808d 	bne.w	801bc22 <rmw_wait+0x23e>
 801bb08:	6864      	ldr	r4, [r4, #4]
 801bb0a:	2c00      	cmp	r4, #0
 801bb0c:	d1f4      	bne.n	801baf8 <rmw_wait+0x114>
 801bb0e:	f1b9 0f00 	cmp.w	r9, #0
 801bb12:	f000 80a1 	beq.w	801bc58 <rmw_wait+0x274>
 801bb16:	f8d9 7000 	ldr.w	r7, [r9]
 801bb1a:	2f00      	cmp	r7, #0
 801bb1c:	f000 80a4 	beq.w	801bc68 <rmw_wait+0x284>
 801bb20:	2400      	movs	r4, #0
 801bb22:	4627      	mov	r7, r4
 801bb24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801bb28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bb2c:	f7f6 fed8 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bb30:	2800      	cmp	r0, #0
 801bb32:	d03b      	beq.n	801bbac <rmw_wait+0x1c8>
 801bb34:	3401      	adds	r4, #1
 801bb36:	f8d9 3000 	ldr.w	r3, [r9]
 801bb3a:	2701      	movs	r7, #1
 801bb3c:	42a3      	cmp	r3, r4
 801bb3e:	d8f1      	bhi.n	801bb24 <rmw_wait+0x140>
 801bb40:	2701      	movs	r7, #1
 801bb42:	f1b8 0f00 	cmp.w	r8, #0
 801bb46:	d010      	beq.n	801bb6a <rmw_wait+0x186>
 801bb48:	f8d8 3000 	ldr.w	r3, [r8]
 801bb4c:	b16b      	cbz	r3, 801bb6a <rmw_wait+0x186>
 801bb4e:	2400      	movs	r4, #0
 801bb50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bb54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bb58:	f7f6 fec2 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bb5c:	b370      	cbz	r0, 801bbbc <rmw_wait+0x1d8>
 801bb5e:	3401      	adds	r4, #1
 801bb60:	f8d8 3000 	ldr.w	r3, [r8]
 801bb64:	2701      	movs	r7, #1
 801bb66:	42a3      	cmp	r3, r4
 801bb68:	d8f2      	bhi.n	801bb50 <rmw_wait+0x16c>
 801bb6a:	2d00      	cmp	r5, #0
 801bb6c:	d035      	beq.n	801bbda <rmw_wait+0x1f6>
 801bb6e:	682b      	ldr	r3, [r5, #0]
 801bb70:	b39b      	cbz	r3, 801bbda <rmw_wait+0x1f6>
 801bb72:	2400      	movs	r4, #0
 801bb74:	686b      	ldr	r3, [r5, #4]
 801bb76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bb7a:	f7f6 feb1 	bl	80128e0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bb7e:	b328      	cbz	r0, 801bbcc <rmw_wait+0x1e8>
 801bb80:	3401      	adds	r4, #1
 801bb82:	682b      	ldr	r3, [r5, #0]
 801bb84:	2701      	movs	r7, #1
 801bb86:	42a3      	cmp	r3, r4
 801bb88:	d8f4      	bhi.n	801bb74 <rmw_wait+0x190>
 801bb8a:	2e00      	cmp	r6, #0
 801bb8c:	d03c      	beq.n	801bc08 <rmw_wait+0x224>
 801bb8e:	6834      	ldr	r4, [r6, #0]
 801bb90:	2c00      	cmp	r4, #0
 801bb92:	d039      	beq.n	801bc08 <rmw_wait+0x224>
 801bb94:	2701      	movs	r7, #1
 801bb96:	e023      	b.n	801bbe0 <rmw_wait+0x1fc>
 801bb98:	68a0      	ldr	r0, [r4, #8]
 801bb9a:	2100      	movs	r1, #0
 801bb9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bba0:	f7f9 fc68 	bl	8015474 <uxr_run_session_timeout>
 801bba4:	6864      	ldr	r4, [r4, #4]
 801bba6:	2c00      	cmp	r4, #0
 801bba8:	d1f6      	bne.n	801bb98 <rmw_wait+0x1b4>
 801bbaa:	e7b0      	b.n	801bb0e <rmw_wait+0x12a>
 801bbac:	e9d9 3200 	ldrd	r3, r2, [r9]
 801bbb0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bbb4:	3401      	adds	r4, #1
 801bbb6:	42a3      	cmp	r3, r4
 801bbb8:	d8b4      	bhi.n	801bb24 <rmw_wait+0x140>
 801bbba:	e7c2      	b.n	801bb42 <rmw_wait+0x15e>
 801bbbc:	e9d8 3200 	ldrd	r3, r2, [r8]
 801bbc0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bbc4:	3401      	adds	r4, #1
 801bbc6:	429c      	cmp	r4, r3
 801bbc8:	d3c2      	bcc.n	801bb50 <rmw_wait+0x16c>
 801bbca:	e7ce      	b.n	801bb6a <rmw_wait+0x186>
 801bbcc:	e9d5 3200 	ldrd	r3, r2, [r5]
 801bbd0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bbd4:	3401      	adds	r4, #1
 801bbd6:	42a3      	cmp	r3, r4
 801bbd8:	d8cc      	bhi.n	801bb74 <rmw_wait+0x190>
 801bbda:	b1a6      	cbz	r6, 801bc06 <rmw_wait+0x222>
 801bbdc:	6834      	ldr	r4, [r6, #0]
 801bbde:	b194      	cbz	r4, 801bc06 <rmw_wait+0x222>
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	461d      	mov	r5, r3
 801bbe4:	e004      	b.n	801bbf0 <rmw_wait+0x20c>
 801bbe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801bbea:	3301      	adds	r3, #1
 801bbec:	42a3      	cmp	r3, r4
 801bbee:	d00a      	beq.n	801bc06 <rmw_wait+0x222>
 801bbf0:	6870      	ldr	r0, [r6, #4]
 801bbf2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801bbf6:	7c0a      	ldrb	r2, [r1, #16]
 801bbf8:	2a00      	cmp	r2, #0
 801bbfa:	d0f4      	beq.n	801bbe6 <rmw_wait+0x202>
 801bbfc:	3301      	adds	r3, #1
 801bbfe:	4617      	mov	r7, r2
 801bc00:	740d      	strb	r5, [r1, #16]
 801bc02:	42a3      	cmp	r3, r4
 801bc04:	d1f4      	bne.n	801bbf0 <rmw_wait+0x20c>
 801bc06:	b147      	cbz	r7, 801bc1a <rmw_wait+0x236>
 801bc08:	2000      	movs	r0, #0
 801bc0a:	b009      	add	sp, #36	@ 0x24
 801bc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc10:	b11e      	cbz	r6, 801bc1a <rmw_wait+0x236>
 801bc12:	6834      	ldr	r4, [r6, #0]
 801bc14:	462f      	mov	r7, r5
 801bc16:	2c00      	cmp	r4, #0
 801bc18:	d1e2      	bne.n	801bbe0 <rmw_wait+0x1fc>
 801bc1a:	2002      	movs	r0, #2
 801bc1c:	b009      	add	sp, #36	@ 0x24
 801bc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc22:	4639      	mov	r1, r7
 801bc24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bc28:	f7f9 fc3e 	bl	80154a8 <uxr_run_session_until_data>
 801bc2c:	6864      	ldr	r4, [r4, #4]
 801bc2e:	2c00      	cmp	r4, #0
 801bc30:	f47f af62 	bne.w	801baf8 <rmw_wait+0x114>
 801bc34:	e76b      	b.n	801bb0e <rmw_wait+0x12a>
 801bc36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bc3a:	f7ff f9df 	bl	801affc <rmw_time_total_nsec>
 801bc3e:	2300      	movs	r3, #0
 801bc40:	4a19      	ldr	r2, [pc, #100]	@ (801bca8 <rmw_wait+0x2c4>)
 801bc42:	f7e4 fc05 	bl	8000450 <__aeabi_uldivmod>
 801bc46:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801bc4a:	4607      	mov	r7, r0
 801bc4c:	f171 0300 	sbcs.w	r3, r1, #0
 801bc50:	bfa8      	it	ge
 801bc52:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801bc56:	e6e5      	b.n	801ba24 <rmw_wait+0x40>
 801bc58:	f1b8 0f00 	cmp.w	r8, #0
 801bc5c:	d00f      	beq.n	801bc7e <rmw_wait+0x29a>
 801bc5e:	f8d8 3000 	ldr.w	r3, [r8]
 801bc62:	b193      	cbz	r3, 801bc8a <rmw_wait+0x2a6>
 801bc64:	464f      	mov	r7, r9
 801bc66:	e772      	b.n	801bb4e <rmw_wait+0x16a>
 801bc68:	f1b8 0f00 	cmp.w	r8, #0
 801bc6c:	d007      	beq.n	801bc7e <rmw_wait+0x29a>
 801bc6e:	f8d8 3000 	ldr.w	r3, [r8]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	f47f af6b 	bne.w	801bb4e <rmw_wait+0x16a>
 801bc78:	b155      	cbz	r5, 801bc90 <rmw_wait+0x2ac>
 801bc7a:	461f      	mov	r7, r3
 801bc7c:	e777      	b.n	801bb6e <rmw_wait+0x18a>
 801bc7e:	2d00      	cmp	r5, #0
 801bc80:	d0c6      	beq.n	801bc10 <rmw_wait+0x22c>
 801bc82:	682b      	ldr	r3, [r5, #0]
 801bc84:	b143      	cbz	r3, 801bc98 <rmw_wait+0x2b4>
 801bc86:	4647      	mov	r7, r8
 801bc88:	e773      	b.n	801bb72 <rmw_wait+0x18e>
 801bc8a:	b10d      	cbz	r5, 801bc90 <rmw_wait+0x2ac>
 801bc8c:	464f      	mov	r7, r9
 801bc8e:	e76e      	b.n	801bb6e <rmw_wait+0x18a>
 801bc90:	462f      	mov	r7, r5
 801bc92:	2e00      	cmp	r6, #0
 801bc94:	d1a2      	bne.n	801bbdc <rmw_wait+0x1f8>
 801bc96:	e7c0      	b.n	801bc1a <rmw_wait+0x236>
 801bc98:	4647      	mov	r7, r8
 801bc9a:	2e00      	cmp	r6, #0
 801bc9c:	d19e      	bne.n	801bbdc <rmw_wait+0x1f8>
 801bc9e:	e7bc      	b.n	801bc1a <rmw_wait+0x236>
 801bca0:	0801f000 	.word	0x0801f000
 801bca4:	24012f4c 	.word	0x24012f4c
 801bca8:	000f4240 	.word	0x000f4240

0801bcac <rmw_create_wait_set>:
 801bcac:	b508      	push	{r3, lr}
 801bcae:	4803      	ldr	r0, [pc, #12]	@ (801bcbc <rmw_create_wait_set+0x10>)
 801bcb0:	f7ff fc14 	bl	801b4dc <get_memory>
 801bcb4:	b108      	cbz	r0, 801bcba <rmw_create_wait_set+0xe>
 801bcb6:	6880      	ldr	r0, [r0, #8]
 801bcb8:	3010      	adds	r0, #16
 801bcba:	bd08      	pop	{r3, pc}
 801bcbc:	24012f8c 	.word	0x24012f8c

0801bcc0 <rmw_destroy_wait_set>:
 801bcc0:	b508      	push	{r3, lr}
 801bcc2:	4b08      	ldr	r3, [pc, #32]	@ (801bce4 <rmw_destroy_wait_set+0x24>)
 801bcc4:	6819      	ldr	r1, [r3, #0]
 801bcc6:	b911      	cbnz	r1, 801bcce <rmw_destroy_wait_set+0xe>
 801bcc8:	e00a      	b.n	801bce0 <rmw_destroy_wait_set+0x20>
 801bcca:	6849      	ldr	r1, [r1, #4]
 801bccc:	b141      	cbz	r1, 801bce0 <rmw_destroy_wait_set+0x20>
 801bcce:	688b      	ldr	r3, [r1, #8]
 801bcd0:	3310      	adds	r3, #16
 801bcd2:	4298      	cmp	r0, r3
 801bcd4:	d1f9      	bne.n	801bcca <rmw_destroy_wait_set+0xa>
 801bcd6:	4803      	ldr	r0, [pc, #12]	@ (801bce4 <rmw_destroy_wait_set+0x24>)
 801bcd8:	f7ff fc10 	bl	801b4fc <put_memory>
 801bcdc:	2000      	movs	r0, #0
 801bcde:	bd08      	pop	{r3, pc}
 801bce0:	2001      	movs	r0, #1
 801bce2:	bd08      	pop	{r3, pc}
 801bce4:	24012f8c 	.word	0x24012f8c

0801bce8 <rosidl_runtime_c__double__Sequence__init>:
 801bce8:	b530      	push	{r4, r5, lr}
 801bcea:	4604      	mov	r4, r0
 801bcec:	b087      	sub	sp, #28
 801bcee:	b130      	cbz	r0, 801bcfe <rosidl_runtime_c__double__Sequence__init+0x16>
 801bcf0:	460d      	mov	r5, r1
 801bcf2:	b931      	cbnz	r1, 801bd02 <rosidl_runtime_c__double__Sequence__init+0x1a>
 801bcf4:	460b      	mov	r3, r1
 801bcf6:	2001      	movs	r0, #1
 801bcf8:	60a5      	str	r5, [r4, #8]
 801bcfa:	e9c4 3500 	strd	r3, r5, [r4]
 801bcfe:	b007      	add	sp, #28
 801bd00:	bd30      	pop	{r4, r5, pc}
 801bd02:	a801      	add	r0, sp, #4
 801bd04:	f7f5 fcde 	bl	80116c4 <rcutils_get_default_allocator>
 801bd08:	9b01      	ldr	r3, [sp, #4]
 801bd0a:	9905      	ldr	r1, [sp, #20]
 801bd0c:	00e8      	lsls	r0, r5, #3
 801bd0e:	4798      	blx	r3
 801bd10:	4603      	mov	r3, r0
 801bd12:	2800      	cmp	r0, #0
 801bd14:	d1ef      	bne.n	801bcf6 <rosidl_runtime_c__double__Sequence__init+0xe>
 801bd16:	e7f2      	b.n	801bcfe <rosidl_runtime_c__double__Sequence__init+0x16>

0801bd18 <rosidl_runtime_c__double__Sequence__fini>:
 801bd18:	b188      	cbz	r0, 801bd3e <rosidl_runtime_c__double__Sequence__fini+0x26>
 801bd1a:	6803      	ldr	r3, [r0, #0]
 801bd1c:	b510      	push	{r4, lr}
 801bd1e:	4604      	mov	r4, r0
 801bd20:	b086      	sub	sp, #24
 801bd22:	b153      	cbz	r3, 801bd3a <rosidl_runtime_c__double__Sequence__fini+0x22>
 801bd24:	a801      	add	r0, sp, #4
 801bd26:	f7f5 fccd 	bl	80116c4 <rcutils_get_default_allocator>
 801bd2a:	9b02      	ldr	r3, [sp, #8]
 801bd2c:	9905      	ldr	r1, [sp, #20]
 801bd2e:	6820      	ldr	r0, [r4, #0]
 801bd30:	4798      	blx	r3
 801bd32:	2300      	movs	r3, #0
 801bd34:	e9c4 3300 	strd	r3, r3, [r4]
 801bd38:	60a3      	str	r3, [r4, #8]
 801bd3a:	b006      	add	sp, #24
 801bd3c:	bd10      	pop	{r4, pc}
 801bd3e:	4770      	bx	lr

0801bd40 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd44:	6805      	ldr	r5, [r0, #0]
 801bd46:	4604      	mov	r4, r0
 801bd48:	460e      	mov	r6, r1
 801bd4a:	4628      	mov	r0, r5
 801bd4c:	f7e4 fac8 	bl	80002e0 <strcmp>
 801bd50:	b1c8      	cbz	r0, 801bd86 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801bd52:	4b11      	ldr	r3, [pc, #68]	@ (801bd98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	429d      	cmp	r5, r3
 801bd58:	d112      	bne.n	801bd80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801bd5a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801bd5e:	f8d8 4000 	ldr.w	r4, [r8]
 801bd62:	b16c      	cbz	r4, 801bd80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801bd64:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bd68:	2700      	movs	r7, #0
 801bd6a:	3d04      	subs	r5, #4
 801bd6c:	4631      	mov	r1, r6
 801bd6e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801bd72:	f7e4 fab5 	bl	80002e0 <strcmp>
 801bd76:	00bb      	lsls	r3, r7, #2
 801bd78:	b140      	cbz	r0, 801bd8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801bd7a:	3701      	adds	r7, #1
 801bd7c:	42bc      	cmp	r4, r7
 801bd7e:	d1f5      	bne.n	801bd6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801bd80:	2000      	movs	r0, #0
 801bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd86:	4620      	mov	r0, r4
 801bd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bd90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd94:	58d3      	ldr	r3, [r2, r3]
 801bd96:	4718      	bx	r3
 801bd98:	2400023c 	.word	0x2400023c

0801bd9c <std_msgs__msg__Float64MultiArray__init>:
 801bd9c:	b570      	push	{r4, r5, r6, lr}
 801bd9e:	4605      	mov	r5, r0
 801bda0:	b1b0      	cbz	r0, 801bdd0 <std_msgs__msg__Float64MultiArray__init+0x34>
 801bda2:	f000 f8b3 	bl	801bf0c <std_msgs__msg__MultiArrayLayout__init>
 801bda6:	4604      	mov	r4, r0
 801bda8:	b148      	cbz	r0, 801bdbe <std_msgs__msg__Float64MultiArray__init+0x22>
 801bdaa:	f105 0610 	add.w	r6, r5, #16
 801bdae:	2100      	movs	r1, #0
 801bdb0:	4630      	mov	r0, r6
 801bdb2:	f7ff ff99 	bl	801bce8 <rosidl_runtime_c__double__Sequence__init>
 801bdb6:	4604      	mov	r4, r0
 801bdb8:	b168      	cbz	r0, 801bdd6 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801bdba:	4620      	mov	r0, r4
 801bdbc:	bd70      	pop	{r4, r5, r6, pc}
 801bdbe:	4628      	mov	r0, r5
 801bdc0:	f000 f8b6 	bl	801bf30 <std_msgs__msg__MultiArrayLayout__fini>
 801bdc4:	f105 0010 	add.w	r0, r5, #16
 801bdc8:	f7ff ffa6 	bl	801bd18 <rosidl_runtime_c__double__Sequence__fini>
 801bdcc:	4620      	mov	r0, r4
 801bdce:	bd70      	pop	{r4, r5, r6, pc}
 801bdd0:	4604      	mov	r4, r0
 801bdd2:	4620      	mov	r0, r4
 801bdd4:	bd70      	pop	{r4, r5, r6, pc}
 801bdd6:	4628      	mov	r0, r5
 801bdd8:	f000 f8aa 	bl	801bf30 <std_msgs__msg__MultiArrayLayout__fini>
 801bddc:	4630      	mov	r0, r6
 801bdde:	f7ff ff9b 	bl	801bd18 <rosidl_runtime_c__double__Sequence__fini>
 801bde2:	e7ea      	b.n	801bdba <std_msgs__msg__Float64MultiArray__init+0x1e>

0801bde4 <std_msgs__msg__Float64MultiArray__fini>:
 801bde4:	b148      	cbz	r0, 801bdfa <std_msgs__msg__Float64MultiArray__fini+0x16>
 801bde6:	b510      	push	{r4, lr}
 801bde8:	4604      	mov	r4, r0
 801bdea:	f000 f8a1 	bl	801bf30 <std_msgs__msg__MultiArrayLayout__fini>
 801bdee:	f104 0010 	add.w	r0, r4, #16
 801bdf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdf6:	f7ff bf8f 	b.w	801bd18 <rosidl_runtime_c__double__Sequence__fini>
 801bdfa:	4770      	bx	lr

0801bdfc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be00:	b086      	sub	sp, #24
 801be02:	4689      	mov	r9, r1
 801be04:	4682      	mov	sl, r0
 801be06:	a801      	add	r0, sp, #4
 801be08:	f7f5 fc5c 	bl	80116c4 <rcutils_get_default_allocator>
 801be0c:	f1b9 0f00 	cmp.w	r9, #0
 801be10:	d02e      	beq.n	801be70 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 801be12:	2114      	movs	r1, #20
 801be14:	4648      	mov	r0, r9
 801be16:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 801be1a:	4642      	mov	r2, r8
 801be1c:	4798      	blx	r3
 801be1e:	4607      	mov	r7, r0
 801be20:	b380      	cbz	r0, 801be84 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 801be22:	4606      	mov	r6, r0
 801be24:	2400      	movs	r4, #0
 801be26:	e003      	b.n	801be30 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 801be28:	3401      	adds	r4, #1
 801be2a:	3614      	adds	r6, #20
 801be2c:	45a1      	cmp	r9, r4
 801be2e:	d020      	beq.n	801be72 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 801be30:	4630      	mov	r0, r6
 801be32:	f001 fc31 	bl	801d698 <rosidl_runtime_c__String__init>
 801be36:	4605      	mov	r5, r0
 801be38:	2800      	cmp	r0, #0
 801be3a:	d1f5      	bne.n	801be28 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801be3c:	4630      	mov	r0, r6
 801be3e:	f001 fc41 	bl	801d6c4 <rosidl_runtime_c__String__fini>
 801be42:	45a1      	cmp	r9, r4
 801be44:	d915      	bls.n	801be72 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 801be46:	b15c      	cbz	r4, 801be60 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 801be48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801be4c:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801be50:	3c14      	subs	r4, #20
 801be52:	4620      	mov	r0, r4
 801be54:	f001 fc36 	bl	801d6c4 <rosidl_runtime_c__String__fini>
 801be58:	42a7      	cmp	r7, r4
 801be5a:	f1a4 0414 	sub.w	r4, r4, #20
 801be5e:	d1f8      	bne.n	801be52 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 801be60:	4638      	mov	r0, r7
 801be62:	9b02      	ldr	r3, [sp, #8]
 801be64:	4641      	mov	r1, r8
 801be66:	4798      	blx	r3
 801be68:	4628      	mov	r0, r5
 801be6a:	b006      	add	sp, #24
 801be6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be70:	464f      	mov	r7, r9
 801be72:	2501      	movs	r5, #1
 801be74:	f8ca 9008 	str.w	r9, [sl, #8]
 801be78:	e9ca 7900 	strd	r7, r9, [sl]
 801be7c:	4628      	mov	r0, r5
 801be7e:	b006      	add	sp, #24
 801be80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be84:	4605      	mov	r5, r0
 801be86:	e7f9      	b.n	801be7c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

0801be88 <std_msgs__msg__MultiArrayDimension__init>:
 801be88:	b538      	push	{r3, r4, r5, lr}
 801be8a:	4604      	mov	r4, r0
 801be8c:	b128      	cbz	r0, 801be9a <std_msgs__msg__MultiArrayDimension__init+0x12>
 801be8e:	f001 fc03 	bl	801d698 <rosidl_runtime_c__String__init>
 801be92:	4605      	mov	r5, r0
 801be94:	b120      	cbz	r0, 801bea0 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801be96:	4628      	mov	r0, r5
 801be98:	bd38      	pop	{r3, r4, r5, pc}
 801be9a:	4605      	mov	r5, r0
 801be9c:	4628      	mov	r0, r5
 801be9e:	bd38      	pop	{r3, r4, r5, pc}
 801bea0:	4620      	mov	r0, r4
 801bea2:	f001 fc0f 	bl	801d6c4 <rosidl_runtime_c__String__fini>
 801bea6:	4628      	mov	r0, r5
 801bea8:	bd38      	pop	{r3, r4, r5, pc}
 801beaa:	bf00      	nop

0801beac <std_msgs__msg__MultiArrayDimension__fini>:
 801beac:	b108      	cbz	r0, 801beb2 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801beae:	f001 bc09 	b.w	801d6c4 <rosidl_runtime_c__String__fini>
 801beb2:	4770      	bx	lr

0801beb4 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 801beb4:	b108      	cbz	r0, 801beba <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801beb6:	f7ff bfa1 	b.w	801bdfc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801beba:	4770      	bx	lr

0801bebc <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801bebc:	b320      	cbz	r0, 801bf08 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801bebe:	b530      	push	{r4, r5, lr}
 801bec0:	b087      	sub	sp, #28
 801bec2:	4605      	mov	r5, r0
 801bec4:	a801      	add	r0, sp, #4
 801bec6:	f7f5 fbfd 	bl	80116c4 <rcutils_get_default_allocator>
 801beca:	682a      	ldr	r2, [r5, #0]
 801becc:	b1b2      	cbz	r2, 801befc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801bece:	68a9      	ldr	r1, [r5, #8]
 801bed0:	b161      	cbz	r1, 801beec <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801bed2:	2400      	movs	r4, #0
 801bed4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801bed8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 801bedc:	d010      	beq.n	801bf00 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801bede:	f001 fbf1 	bl	801d6c4 <rosidl_runtime_c__String__fini>
 801bee2:	3401      	adds	r4, #1
 801bee4:	68a9      	ldr	r1, [r5, #8]
 801bee6:	682a      	ldr	r2, [r5, #0]
 801bee8:	428c      	cmp	r4, r1
 801beea:	d3f3      	bcc.n	801bed4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801beec:	9b02      	ldr	r3, [sp, #8]
 801beee:	4610      	mov	r0, r2
 801bef0:	9905      	ldr	r1, [sp, #20]
 801bef2:	4798      	blx	r3
 801bef4:	2300      	movs	r3, #0
 801bef6:	e9c5 3300 	strd	r3, r3, [r5]
 801befa:	60ab      	str	r3, [r5, #8]
 801befc:	b007      	add	sp, #28
 801befe:	bd30      	pop	{r4, r5, pc}
 801bf00:	3401      	adds	r4, #1
 801bf02:	428c      	cmp	r4, r1
 801bf04:	d3e6      	bcc.n	801bed4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801bf06:	e7f1      	b.n	801beec <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801bf08:	4770      	bx	lr
 801bf0a:	bf00      	nop

0801bf0c <std_msgs__msg__MultiArrayLayout__init>:
 801bf0c:	b538      	push	{r3, r4, r5, lr}
 801bf0e:	4604      	mov	r4, r0
 801bf10:	b130      	cbz	r0, 801bf20 <std_msgs__msg__MultiArrayLayout__init+0x14>
 801bf12:	2100      	movs	r1, #0
 801bf14:	f7ff ffce 	bl	801beb4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801bf18:	4605      	mov	r5, r0
 801bf1a:	b120      	cbz	r0, 801bf26 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 801bf1c:	4628      	mov	r0, r5
 801bf1e:	bd38      	pop	{r3, r4, r5, pc}
 801bf20:	4605      	mov	r5, r0
 801bf22:	4628      	mov	r0, r5
 801bf24:	bd38      	pop	{r3, r4, r5, pc}
 801bf26:	4620      	mov	r0, r4
 801bf28:	f7ff ffc8 	bl	801bebc <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801bf2c:	4628      	mov	r0, r5
 801bf2e:	bd38      	pop	{r3, r4, r5, pc}

0801bf30 <std_msgs__msg__MultiArrayLayout__fini>:
 801bf30:	b108      	cbz	r0, 801bf36 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 801bf32:	f7ff bfc3 	b.w	801bebc <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801bf36:	4770      	bx	lr

0801bf38 <std_msgs__msg__UInt16__init>:
 801bf38:	3800      	subs	r0, #0
 801bf3a:	bf18      	it	ne
 801bf3c:	2001      	movne	r0, #1
 801bf3e:	4770      	bx	lr

0801bf40 <std_msgs__msg__UInt16__fini>:
 801bf40:	4770      	bx	lr
 801bf42:	bf00      	nop

0801bf44 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 801bf44:	f7ff bfa0 	b.w	801be88 <std_msgs__msg__MultiArrayDimension__init>

0801bf48 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801bf48:	f7ff bfb0 	b.w	801beac <std_msgs__msg__MultiArrayDimension__fini>

0801bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801bf4c:	4b04      	ldr	r3, [pc, #16]	@ (801bf60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801bf4e:	681a      	ldr	r2, [r3, #0]
 801bf50:	b10a      	cbz	r2, 801bf56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 801bf52:	4803      	ldr	r0, [pc, #12]	@ (801bf60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801bf54:	4770      	bx	lr
 801bf56:	4a03      	ldr	r2, [pc, #12]	@ (801bf64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801bf58:	4801      	ldr	r0, [pc, #4]	@ (801bf60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801bf5a:	6812      	ldr	r2, [r2, #0]
 801bf5c:	601a      	str	r2, [r3, #0]
 801bf5e:	4770      	bx	lr
 801bf60:	240002f8 	.word	0x240002f8
 801bf64:	24000240 	.word	0x24000240

0801bf68 <_MultiArrayDimension__cdr_serialize>:
 801bf68:	b1d0      	cbz	r0, 801bfa0 <_MultiArrayDimension__cdr_serialize+0x38>
 801bf6a:	b570      	push	{r4, r5, r6, lr}
 801bf6c:	6806      	ldr	r6, [r0, #0]
 801bf6e:	4604      	mov	r4, r0
 801bf70:	460d      	mov	r5, r1
 801bf72:	b196      	cbz	r6, 801bf9a <_MultiArrayDimension__cdr_serialize+0x32>
 801bf74:	4630      	mov	r0, r6
 801bf76:	f7e4 f9bd 	bl	80002f4 <strlen>
 801bf7a:	1c42      	adds	r2, r0, #1
 801bf7c:	4631      	mov	r1, r6
 801bf7e:	6060      	str	r0, [r4, #4]
 801bf80:	4628      	mov	r0, r5
 801bf82:	f7f8 fa15 	bl	80143b0 <ucdr_serialize_sequence_char>
 801bf86:	68e1      	ldr	r1, [r4, #12]
 801bf88:	4628      	mov	r0, r5
 801bf8a:	f7f7 fa67 	bl	801345c <ucdr_serialize_uint32_t>
 801bf8e:	6921      	ldr	r1, [r4, #16]
 801bf90:	4628      	mov	r0, r5
 801bf92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf96:	f7f7 ba61 	b.w	801345c <ucdr_serialize_uint32_t>
 801bf9a:	4632      	mov	r2, r6
 801bf9c:	4630      	mov	r0, r6
 801bf9e:	e7ed      	b.n	801bf7c <_MultiArrayDimension__cdr_serialize+0x14>
 801bfa0:	4770      	bx	lr
 801bfa2:	bf00      	nop

0801bfa4 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801bfa4:	b570      	push	{r4, r5, r6, lr}
 801bfa6:	4604      	mov	r4, r0
 801bfa8:	b1b0      	cbz	r0, 801bfd8 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801bfaa:	460d      	mov	r5, r1
 801bfac:	2104      	movs	r1, #4
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f7f8 f98e 	bl	80142d0 <ucdr_alignment>
 801bfb4:	6866      	ldr	r6, [r4, #4]
 801bfb6:	1d6b      	adds	r3, r5, #5
 801bfb8:	2104      	movs	r1, #4
 801bfba:	f1c5 0504 	rsb	r5, r5, #4
 801bfbe:	4433      	add	r3, r6
 801bfc0:	181e      	adds	r6, r3, r0
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	f7f8 f984 	bl	80142d0 <ucdr_alignment>
 801bfc8:	2104      	movs	r1, #4
 801bfca:	1844      	adds	r4, r0, r1
 801bfcc:	4434      	add	r4, r6
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f7f8 f97e 	bl	80142d0 <ucdr_alignment>
 801bfd4:	4428      	add	r0, r5
 801bfd6:	4420      	add	r0, r4
 801bfd8:	bd70      	pop	{r4, r5, r6, pc}
 801bfda:	bf00      	nop

0801bfdc <_MultiArrayDimension__cdr_deserialize>:
 801bfdc:	b570      	push	{r4, r5, r6, lr}
 801bfde:	460c      	mov	r4, r1
 801bfe0:	b082      	sub	sp, #8
 801bfe2:	b1d9      	cbz	r1, 801c01c <_MultiArrayDimension__cdr_deserialize+0x40>
 801bfe4:	688e      	ldr	r6, [r1, #8]
 801bfe6:	ab01      	add	r3, sp, #4
 801bfe8:	6809      	ldr	r1, [r1, #0]
 801bfea:	4605      	mov	r5, r0
 801bfec:	4632      	mov	r2, r6
 801bfee:	f7f8 f9f1 	bl	80143d4 <ucdr_deserialize_sequence_char>
 801bff2:	9b01      	ldr	r3, [sp, #4]
 801bff4:	b970      	cbnz	r0, 801c014 <_MultiArrayDimension__cdr_deserialize+0x38>
 801bff6:	429e      	cmp	r6, r3
 801bff8:	d313      	bcc.n	801c022 <_MultiArrayDimension__cdr_deserialize+0x46>
 801bffa:	f104 010c 	add.w	r1, r4, #12
 801bffe:	4628      	mov	r0, r5
 801c000:	f7f7 fb5c 	bl	80136bc <ucdr_deserialize_uint32_t>
 801c004:	f104 0110 	add.w	r1, r4, #16
 801c008:	4628      	mov	r0, r5
 801c00a:	b002      	add	sp, #8
 801c00c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c010:	f7f7 bb54 	b.w	80136bc <ucdr_deserialize_uint32_t>
 801c014:	b103      	cbz	r3, 801c018 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801c016:	3b01      	subs	r3, #1
 801c018:	6063      	str	r3, [r4, #4]
 801c01a:	e7ee      	b.n	801bffa <_MultiArrayDimension__cdr_deserialize+0x1e>
 801c01c:	4608      	mov	r0, r1
 801c01e:	b002      	add	sp, #8
 801c020:	bd70      	pop	{r4, r5, r6, pc}
 801c022:	2101      	movs	r1, #1
 801c024:	75a8      	strb	r0, [r5, #22]
 801c026:	7569      	strb	r1, [r5, #21]
 801c028:	6060      	str	r0, [r4, #4]
 801c02a:	4628      	mov	r0, r5
 801c02c:	f7f8 f968 	bl	8014300 <ucdr_align_to>
 801c030:	9901      	ldr	r1, [sp, #4]
 801c032:	4628      	mov	r0, r5
 801c034:	f7f8 f99c 	bl	8014370 <ucdr_advance_buffer>
 801c038:	e7df      	b.n	801bffa <_MultiArrayDimension__cdr_deserialize+0x1e>
 801c03a:	bf00      	nop

0801c03c <_MultiArrayDimension__max_serialized_size>:
 801c03c:	b510      	push	{r4, lr}
 801c03e:	2104      	movs	r1, #4
 801c040:	2000      	movs	r0, #0
 801c042:	f7f8 f945 	bl	80142d0 <ucdr_alignment>
 801c046:	2104      	movs	r1, #4
 801c048:	1844      	adds	r4, r0, r1
 801c04a:	4620      	mov	r0, r4
 801c04c:	f7f8 f940 	bl	80142d0 <ucdr_alignment>
 801c050:	3004      	adds	r0, #4
 801c052:	4420      	add	r0, r4
 801c054:	bd10      	pop	{r4, pc}
 801c056:	bf00      	nop

0801c058 <_MultiArrayDimension__get_serialized_size>:
 801c058:	b510      	push	{r4, lr}
 801c05a:	4604      	mov	r4, r0
 801c05c:	b190      	cbz	r0, 801c084 <_MultiArrayDimension__get_serialized_size+0x2c>
 801c05e:	2104      	movs	r1, #4
 801c060:	2000      	movs	r0, #0
 801c062:	f7f8 f935 	bl	80142d0 <ucdr_alignment>
 801c066:	6863      	ldr	r3, [r4, #4]
 801c068:	2104      	movs	r1, #4
 801c06a:	3305      	adds	r3, #5
 801c06c:	181c      	adds	r4, r3, r0
 801c06e:	4620      	mov	r0, r4
 801c070:	f7f8 f92e 	bl	80142d0 <ucdr_alignment>
 801c074:	2104      	movs	r1, #4
 801c076:	4408      	add	r0, r1
 801c078:	4404      	add	r4, r0
 801c07a:	4620      	mov	r0, r4
 801c07c:	f7f8 f928 	bl	80142d0 <ucdr_alignment>
 801c080:	3004      	adds	r0, #4
 801c082:	4420      	add	r0, r4
 801c084:	bd10      	pop	{r4, pc}
 801c086:	bf00      	nop

0801c088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801c088:	4800      	ldr	r0, [pc, #0]	@ (801c08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801c08a:	4770      	bx	lr
 801c08c:	24000304 	.word	0x24000304

0801c090 <ucdr_serialize_endian_array_char>:
 801c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c094:	4619      	mov	r1, r3
 801c096:	461f      	mov	r7, r3
 801c098:	4605      	mov	r5, r0
 801c09a:	4690      	mov	r8, r2
 801c09c:	f7f8 f8c0 	bl	8014220 <ucdr_check_buffer_available_for>
 801c0a0:	b9e0      	cbnz	r0, 801c0dc <ucdr_serialize_endian_array_char+0x4c>
 801c0a2:	463e      	mov	r6, r7
 801c0a4:	e00b      	b.n	801c0be <ucdr_serialize_endian_array_char+0x2e>
 801c0a6:	4441      	add	r1, r8
 801c0a8:	68a8      	ldr	r0, [r5, #8]
 801c0aa:	4622      	mov	r2, r4
 801c0ac:	1b36      	subs	r6, r6, r4
 801c0ae:	f002 f904 	bl	801e2ba <memcpy>
 801c0b2:	68ab      	ldr	r3, [r5, #8]
 801c0b4:	6928      	ldr	r0, [r5, #16]
 801c0b6:	4423      	add	r3, r4
 801c0b8:	4420      	add	r0, r4
 801c0ba:	60ab      	str	r3, [r5, #8]
 801c0bc:	6128      	str	r0, [r5, #16]
 801c0be:	4631      	mov	r1, r6
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	4628      	mov	r0, r5
 801c0c4:	f7f8 f936 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c0c8:	1bb9      	subs	r1, r7, r6
 801c0ca:	4604      	mov	r4, r0
 801c0cc:	2800      	cmp	r0, #0
 801c0ce:	d1ea      	bne.n	801c0a6 <ucdr_serialize_endian_array_char+0x16>
 801c0d0:	2301      	movs	r3, #1
 801c0d2:	7da8      	ldrb	r0, [r5, #22]
 801c0d4:	756b      	strb	r3, [r5, #21]
 801c0d6:	4058      	eors	r0, r3
 801c0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0dc:	463a      	mov	r2, r7
 801c0de:	4641      	mov	r1, r8
 801c0e0:	68a8      	ldr	r0, [r5, #8]
 801c0e2:	f002 f8ea 	bl	801e2ba <memcpy>
 801c0e6:	68aa      	ldr	r2, [r5, #8]
 801c0e8:	692b      	ldr	r3, [r5, #16]
 801c0ea:	443a      	add	r2, r7
 801c0ec:	443b      	add	r3, r7
 801c0ee:	60aa      	str	r2, [r5, #8]
 801c0f0:	612b      	str	r3, [r5, #16]
 801c0f2:	e7ed      	b.n	801c0d0 <ucdr_serialize_endian_array_char+0x40>

0801c0f4 <ucdr_deserialize_endian_array_char>:
 801c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0f8:	4619      	mov	r1, r3
 801c0fa:	461f      	mov	r7, r3
 801c0fc:	4605      	mov	r5, r0
 801c0fe:	4690      	mov	r8, r2
 801c100:	f7f8 f88e 	bl	8014220 <ucdr_check_buffer_available_for>
 801c104:	b9e8      	cbnz	r0, 801c142 <ucdr_deserialize_endian_array_char+0x4e>
 801c106:	463e      	mov	r6, r7
 801c108:	e00c      	b.n	801c124 <ucdr_deserialize_endian_array_char+0x30>
 801c10a:	eb08 0003 	add.w	r0, r8, r3
 801c10e:	68a9      	ldr	r1, [r5, #8]
 801c110:	4622      	mov	r2, r4
 801c112:	1b36      	subs	r6, r6, r4
 801c114:	f002 f8d1 	bl	801e2ba <memcpy>
 801c118:	68ab      	ldr	r3, [r5, #8]
 801c11a:	6928      	ldr	r0, [r5, #16]
 801c11c:	4423      	add	r3, r4
 801c11e:	4420      	add	r0, r4
 801c120:	60ab      	str	r3, [r5, #8]
 801c122:	6128      	str	r0, [r5, #16]
 801c124:	4631      	mov	r1, r6
 801c126:	2201      	movs	r2, #1
 801c128:	4628      	mov	r0, r5
 801c12a:	f7f8 f903 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c12e:	1bbb      	subs	r3, r7, r6
 801c130:	4604      	mov	r4, r0
 801c132:	2800      	cmp	r0, #0
 801c134:	d1e9      	bne.n	801c10a <ucdr_deserialize_endian_array_char+0x16>
 801c136:	2301      	movs	r3, #1
 801c138:	7da8      	ldrb	r0, [r5, #22]
 801c13a:	756b      	strb	r3, [r5, #21]
 801c13c:	4058      	eors	r0, r3
 801c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c142:	463a      	mov	r2, r7
 801c144:	68a9      	ldr	r1, [r5, #8]
 801c146:	4640      	mov	r0, r8
 801c148:	f002 f8b7 	bl	801e2ba <memcpy>
 801c14c:	68aa      	ldr	r2, [r5, #8]
 801c14e:	692b      	ldr	r3, [r5, #16]
 801c150:	443a      	add	r2, r7
 801c152:	443b      	add	r3, r7
 801c154:	60aa      	str	r2, [r5, #8]
 801c156:	612b      	str	r3, [r5, #16]
 801c158:	e7ed      	b.n	801c136 <ucdr_deserialize_endian_array_char+0x42>
 801c15a:	bf00      	nop

0801c15c <ucdr_serialize_array_uint8_t>:
 801c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c160:	4688      	mov	r8, r1
 801c162:	4611      	mov	r1, r2
 801c164:	4617      	mov	r7, r2
 801c166:	4605      	mov	r5, r0
 801c168:	f7f8 f85a 	bl	8014220 <ucdr_check_buffer_available_for>
 801c16c:	b9e0      	cbnz	r0, 801c1a8 <ucdr_serialize_array_uint8_t+0x4c>
 801c16e:	463e      	mov	r6, r7
 801c170:	e00b      	b.n	801c18a <ucdr_serialize_array_uint8_t+0x2e>
 801c172:	4441      	add	r1, r8
 801c174:	68a8      	ldr	r0, [r5, #8]
 801c176:	4622      	mov	r2, r4
 801c178:	1b36      	subs	r6, r6, r4
 801c17a:	f002 f89e 	bl	801e2ba <memcpy>
 801c17e:	68ab      	ldr	r3, [r5, #8]
 801c180:	6928      	ldr	r0, [r5, #16]
 801c182:	4423      	add	r3, r4
 801c184:	4420      	add	r0, r4
 801c186:	60ab      	str	r3, [r5, #8]
 801c188:	6128      	str	r0, [r5, #16]
 801c18a:	4631      	mov	r1, r6
 801c18c:	2201      	movs	r2, #1
 801c18e:	4628      	mov	r0, r5
 801c190:	f7f8 f8d0 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c194:	1bb9      	subs	r1, r7, r6
 801c196:	4604      	mov	r4, r0
 801c198:	2800      	cmp	r0, #0
 801c19a:	d1ea      	bne.n	801c172 <ucdr_serialize_array_uint8_t+0x16>
 801c19c:	2301      	movs	r3, #1
 801c19e:	7da8      	ldrb	r0, [r5, #22]
 801c1a0:	756b      	strb	r3, [r5, #21]
 801c1a2:	4058      	eors	r0, r3
 801c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1a8:	463a      	mov	r2, r7
 801c1aa:	4641      	mov	r1, r8
 801c1ac:	68a8      	ldr	r0, [r5, #8]
 801c1ae:	f002 f884 	bl	801e2ba <memcpy>
 801c1b2:	68aa      	ldr	r2, [r5, #8]
 801c1b4:	692b      	ldr	r3, [r5, #16]
 801c1b6:	443a      	add	r2, r7
 801c1b8:	443b      	add	r3, r7
 801c1ba:	60aa      	str	r2, [r5, #8]
 801c1bc:	612b      	str	r3, [r5, #16]
 801c1be:	e7ed      	b.n	801c19c <ucdr_serialize_array_uint8_t+0x40>

0801c1c0 <ucdr_serialize_endian_array_uint8_t>:
 801c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	461f      	mov	r7, r3
 801c1c8:	4605      	mov	r5, r0
 801c1ca:	4690      	mov	r8, r2
 801c1cc:	f7f8 f828 	bl	8014220 <ucdr_check_buffer_available_for>
 801c1d0:	b9e0      	cbnz	r0, 801c20c <ucdr_serialize_endian_array_uint8_t+0x4c>
 801c1d2:	463e      	mov	r6, r7
 801c1d4:	e00b      	b.n	801c1ee <ucdr_serialize_endian_array_uint8_t+0x2e>
 801c1d6:	4441      	add	r1, r8
 801c1d8:	68a8      	ldr	r0, [r5, #8]
 801c1da:	4622      	mov	r2, r4
 801c1dc:	1b36      	subs	r6, r6, r4
 801c1de:	f002 f86c 	bl	801e2ba <memcpy>
 801c1e2:	68ab      	ldr	r3, [r5, #8]
 801c1e4:	6928      	ldr	r0, [r5, #16]
 801c1e6:	4423      	add	r3, r4
 801c1e8:	4420      	add	r0, r4
 801c1ea:	60ab      	str	r3, [r5, #8]
 801c1ec:	6128      	str	r0, [r5, #16]
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	2201      	movs	r2, #1
 801c1f2:	4628      	mov	r0, r5
 801c1f4:	f7f8 f89e 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c1f8:	1bb9      	subs	r1, r7, r6
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	d1ea      	bne.n	801c1d6 <ucdr_serialize_endian_array_uint8_t+0x16>
 801c200:	2301      	movs	r3, #1
 801c202:	7da8      	ldrb	r0, [r5, #22]
 801c204:	756b      	strb	r3, [r5, #21]
 801c206:	4058      	eors	r0, r3
 801c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c20c:	463a      	mov	r2, r7
 801c20e:	4641      	mov	r1, r8
 801c210:	68a8      	ldr	r0, [r5, #8]
 801c212:	f002 f852 	bl	801e2ba <memcpy>
 801c216:	68aa      	ldr	r2, [r5, #8]
 801c218:	692b      	ldr	r3, [r5, #16]
 801c21a:	443a      	add	r2, r7
 801c21c:	443b      	add	r3, r7
 801c21e:	60aa      	str	r2, [r5, #8]
 801c220:	612b      	str	r3, [r5, #16]
 801c222:	e7ed      	b.n	801c200 <ucdr_serialize_endian_array_uint8_t+0x40>

0801c224 <ucdr_deserialize_array_uint8_t>:
 801c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c228:	4688      	mov	r8, r1
 801c22a:	4611      	mov	r1, r2
 801c22c:	4617      	mov	r7, r2
 801c22e:	4605      	mov	r5, r0
 801c230:	f7f7 fff6 	bl	8014220 <ucdr_check_buffer_available_for>
 801c234:	b9e8      	cbnz	r0, 801c272 <ucdr_deserialize_array_uint8_t+0x4e>
 801c236:	463e      	mov	r6, r7
 801c238:	e00c      	b.n	801c254 <ucdr_deserialize_array_uint8_t+0x30>
 801c23a:	eb08 0003 	add.w	r0, r8, r3
 801c23e:	68a9      	ldr	r1, [r5, #8]
 801c240:	4622      	mov	r2, r4
 801c242:	1b36      	subs	r6, r6, r4
 801c244:	f002 f839 	bl	801e2ba <memcpy>
 801c248:	68ab      	ldr	r3, [r5, #8]
 801c24a:	6928      	ldr	r0, [r5, #16]
 801c24c:	4423      	add	r3, r4
 801c24e:	4420      	add	r0, r4
 801c250:	60ab      	str	r3, [r5, #8]
 801c252:	6128      	str	r0, [r5, #16]
 801c254:	4631      	mov	r1, r6
 801c256:	2201      	movs	r2, #1
 801c258:	4628      	mov	r0, r5
 801c25a:	f7f8 f86b 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c25e:	1bbb      	subs	r3, r7, r6
 801c260:	4604      	mov	r4, r0
 801c262:	2800      	cmp	r0, #0
 801c264:	d1e9      	bne.n	801c23a <ucdr_deserialize_array_uint8_t+0x16>
 801c266:	2301      	movs	r3, #1
 801c268:	7da8      	ldrb	r0, [r5, #22]
 801c26a:	756b      	strb	r3, [r5, #21]
 801c26c:	4058      	eors	r0, r3
 801c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c272:	463a      	mov	r2, r7
 801c274:	68a9      	ldr	r1, [r5, #8]
 801c276:	4640      	mov	r0, r8
 801c278:	f002 f81f 	bl	801e2ba <memcpy>
 801c27c:	68aa      	ldr	r2, [r5, #8]
 801c27e:	692b      	ldr	r3, [r5, #16]
 801c280:	443a      	add	r2, r7
 801c282:	443b      	add	r3, r7
 801c284:	60aa      	str	r2, [r5, #8]
 801c286:	612b      	str	r3, [r5, #16]
 801c288:	e7ed      	b.n	801c266 <ucdr_deserialize_array_uint8_t+0x42>
 801c28a:	bf00      	nop

0801c28c <ucdr_deserialize_endian_array_uint8_t>:
 801c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c290:	4619      	mov	r1, r3
 801c292:	461f      	mov	r7, r3
 801c294:	4605      	mov	r5, r0
 801c296:	4690      	mov	r8, r2
 801c298:	f7f7 ffc2 	bl	8014220 <ucdr_check_buffer_available_for>
 801c29c:	b9e8      	cbnz	r0, 801c2da <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801c29e:	463e      	mov	r6, r7
 801c2a0:	e00c      	b.n	801c2bc <ucdr_deserialize_endian_array_uint8_t+0x30>
 801c2a2:	eb08 0003 	add.w	r0, r8, r3
 801c2a6:	68a9      	ldr	r1, [r5, #8]
 801c2a8:	4622      	mov	r2, r4
 801c2aa:	1b36      	subs	r6, r6, r4
 801c2ac:	f002 f805 	bl	801e2ba <memcpy>
 801c2b0:	68ab      	ldr	r3, [r5, #8]
 801c2b2:	6928      	ldr	r0, [r5, #16]
 801c2b4:	4423      	add	r3, r4
 801c2b6:	4420      	add	r0, r4
 801c2b8:	60ab      	str	r3, [r5, #8]
 801c2ba:	6128      	str	r0, [r5, #16]
 801c2bc:	4631      	mov	r1, r6
 801c2be:	2201      	movs	r2, #1
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	f7f8 f837 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c2c6:	1bbb      	subs	r3, r7, r6
 801c2c8:	4604      	mov	r4, r0
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	d1e9      	bne.n	801c2a2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801c2ce:	2301      	movs	r3, #1
 801c2d0:	7da8      	ldrb	r0, [r5, #22]
 801c2d2:	756b      	strb	r3, [r5, #21]
 801c2d4:	4058      	eors	r0, r3
 801c2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2da:	463a      	mov	r2, r7
 801c2dc:	68a9      	ldr	r1, [r5, #8]
 801c2de:	4640      	mov	r0, r8
 801c2e0:	f001 ffeb 	bl	801e2ba <memcpy>
 801c2e4:	68aa      	ldr	r2, [r5, #8]
 801c2e6:	692b      	ldr	r3, [r5, #16]
 801c2e8:	443a      	add	r2, r7
 801c2ea:	443b      	add	r3, r7
 801c2ec:	60aa      	str	r2, [r5, #8]
 801c2ee:	612b      	str	r3, [r5, #16]
 801c2f0:	e7ed      	b.n	801c2ce <ucdr_deserialize_endian_array_uint8_t+0x42>
 801c2f2:	bf00      	nop

0801c2f4 <ucdr_serialize_endian_array_double>:
 801c2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f8:	4604      	mov	r4, r0
 801c2fa:	4688      	mov	r8, r1
 801c2fc:	2108      	movs	r1, #8
 801c2fe:	4616      	mov	r6, r2
 801c300:	461f      	mov	r7, r3
 801c302:	f7f7 ffed 	bl	80142e0 <ucdr_buffer_alignment>
 801c306:	4601      	mov	r1, r0
 801c308:	4620      	mov	r0, r4
 801c30a:	7d65      	ldrb	r5, [r4, #21]
 801c30c:	f7f8 f830 	bl	8014370 <ucdr_advance_buffer>
 801c310:	f1b8 0f01 	cmp.w	r8, #1
 801c314:	7565      	strb	r5, [r4, #21]
 801c316:	d00f      	beq.n	801c338 <ucdr_serialize_endian_array_double+0x44>
 801c318:	b14f      	cbz	r7, 801c32e <ucdr_serialize_endian_array_double+0x3a>
 801c31a:	2500      	movs	r5, #0
 801c31c:	3501      	adds	r5, #1
 801c31e:	4641      	mov	r1, r8
 801c320:	4620      	mov	r0, r4
 801c322:	ecb6 0b02 	vldmia	r6!, {d0}
 801c326:	f7f7 fddb 	bl	8013ee0 <ucdr_serialize_endian_double>
 801c32a:	42af      	cmp	r7, r5
 801c32c:	d1f6      	bne.n	801c31c <ucdr_serialize_endian_array_double+0x28>
 801c32e:	7da0      	ldrb	r0, [r4, #22]
 801c330:	f080 0001 	eor.w	r0, r0, #1
 801c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c338:	00ff      	lsls	r7, r7, #3
 801c33a:	4620      	mov	r0, r4
 801c33c:	4639      	mov	r1, r7
 801c33e:	f7f7 ff6f 	bl	8014220 <ucdr_check_buffer_available_for>
 801c342:	b9f8      	cbnz	r0, 801c384 <ucdr_serialize_endian_array_double+0x90>
 801c344:	46b8      	mov	r8, r7
 801c346:	e00c      	b.n	801c362 <ucdr_serialize_endian_array_double+0x6e>
 801c348:	462a      	mov	r2, r5
 801c34a:	4431      	add	r1, r6
 801c34c:	68a0      	ldr	r0, [r4, #8]
 801c34e:	eba8 0805 	sub.w	r8, r8, r5
 801c352:	f001 ffb2 	bl	801e2ba <memcpy>
 801c356:	68a2      	ldr	r2, [r4, #8]
 801c358:	6923      	ldr	r3, [r4, #16]
 801c35a:	442a      	add	r2, r5
 801c35c:	442b      	add	r3, r5
 801c35e:	60a2      	str	r2, [r4, #8]
 801c360:	6123      	str	r3, [r4, #16]
 801c362:	4641      	mov	r1, r8
 801c364:	2208      	movs	r2, #8
 801c366:	4620      	mov	r0, r4
 801c368:	f7f7 ffe4 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c36c:	eba7 0108 	sub.w	r1, r7, r8
 801c370:	4605      	mov	r5, r0
 801c372:	2800      	cmp	r0, #0
 801c374:	d1e8      	bne.n	801c348 <ucdr_serialize_endian_array_double+0x54>
 801c376:	2308      	movs	r3, #8
 801c378:	7da0      	ldrb	r0, [r4, #22]
 801c37a:	7563      	strb	r3, [r4, #21]
 801c37c:	f080 0001 	eor.w	r0, r0, #1
 801c380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c384:	463a      	mov	r2, r7
 801c386:	4631      	mov	r1, r6
 801c388:	68a0      	ldr	r0, [r4, #8]
 801c38a:	f001 ff96 	bl	801e2ba <memcpy>
 801c38e:	68a2      	ldr	r2, [r4, #8]
 801c390:	6923      	ldr	r3, [r4, #16]
 801c392:	443a      	add	r2, r7
 801c394:	441f      	add	r7, r3
 801c396:	60a2      	str	r2, [r4, #8]
 801c398:	6127      	str	r7, [r4, #16]
 801c39a:	e7ec      	b.n	801c376 <ucdr_serialize_endian_array_double+0x82>

0801c39c <ucdr_deserialize_endian_array_double>:
 801c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3a0:	4605      	mov	r5, r0
 801c3a2:	4688      	mov	r8, r1
 801c3a4:	2108      	movs	r1, #8
 801c3a6:	4614      	mov	r4, r2
 801c3a8:	461f      	mov	r7, r3
 801c3aa:	f7f7 ff99 	bl	80142e0 <ucdr_buffer_alignment>
 801c3ae:	4601      	mov	r1, r0
 801c3b0:	4628      	mov	r0, r5
 801c3b2:	7d6e      	ldrb	r6, [r5, #21]
 801c3b4:	f7f7 ffdc 	bl	8014370 <ucdr_advance_buffer>
 801c3b8:	f1b8 0f01 	cmp.w	r8, #1
 801c3bc:	756e      	strb	r6, [r5, #21]
 801c3be:	d010      	beq.n	801c3e2 <ucdr_deserialize_endian_array_double+0x46>
 801c3c0:	b157      	cbz	r7, 801c3d8 <ucdr_deserialize_endian_array_double+0x3c>
 801c3c2:	2600      	movs	r6, #0
 801c3c4:	3601      	adds	r6, #1
 801c3c6:	4622      	mov	r2, r4
 801c3c8:	4641      	mov	r1, r8
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	f7f7 fe5a 	bl	8014084 <ucdr_deserialize_endian_double>
 801c3d0:	42b7      	cmp	r7, r6
 801c3d2:	f104 0408 	add.w	r4, r4, #8
 801c3d6:	d1f5      	bne.n	801c3c4 <ucdr_deserialize_endian_array_double+0x28>
 801c3d8:	7da8      	ldrb	r0, [r5, #22]
 801c3da:	f080 0001 	eor.w	r0, r0, #1
 801c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3e2:	00ff      	lsls	r7, r7, #3
 801c3e4:	4628      	mov	r0, r5
 801c3e6:	4639      	mov	r1, r7
 801c3e8:	f7f7 ff1a 	bl	8014220 <ucdr_check_buffer_available_for>
 801c3ec:	b9f8      	cbnz	r0, 801c42e <ucdr_deserialize_endian_array_double+0x92>
 801c3ee:	46b8      	mov	r8, r7
 801c3f0:	e00c      	b.n	801c40c <ucdr_deserialize_endian_array_double+0x70>
 801c3f2:	18e0      	adds	r0, r4, r3
 801c3f4:	4632      	mov	r2, r6
 801c3f6:	68a9      	ldr	r1, [r5, #8]
 801c3f8:	eba8 0806 	sub.w	r8, r8, r6
 801c3fc:	f001 ff5d 	bl	801e2ba <memcpy>
 801c400:	68aa      	ldr	r2, [r5, #8]
 801c402:	692b      	ldr	r3, [r5, #16]
 801c404:	4432      	add	r2, r6
 801c406:	4433      	add	r3, r6
 801c408:	60aa      	str	r2, [r5, #8]
 801c40a:	612b      	str	r3, [r5, #16]
 801c40c:	4641      	mov	r1, r8
 801c40e:	2208      	movs	r2, #8
 801c410:	4628      	mov	r0, r5
 801c412:	f7f7 ff8f 	bl	8014334 <ucdr_check_final_buffer_behavior_array>
 801c416:	eba7 0308 	sub.w	r3, r7, r8
 801c41a:	4606      	mov	r6, r0
 801c41c:	2800      	cmp	r0, #0
 801c41e:	d1e8      	bne.n	801c3f2 <ucdr_deserialize_endian_array_double+0x56>
 801c420:	2308      	movs	r3, #8
 801c422:	7da8      	ldrb	r0, [r5, #22]
 801c424:	756b      	strb	r3, [r5, #21]
 801c426:	f080 0001 	eor.w	r0, r0, #1
 801c42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c42e:	463a      	mov	r2, r7
 801c430:	68a9      	ldr	r1, [r5, #8]
 801c432:	4620      	mov	r0, r4
 801c434:	f001 ff41 	bl	801e2ba <memcpy>
 801c438:	68aa      	ldr	r2, [r5, #8]
 801c43a:	692b      	ldr	r3, [r5, #16]
 801c43c:	443a      	add	r2, r7
 801c43e:	441f      	add	r7, r3
 801c440:	60aa      	str	r2, [r5, #8]
 801c442:	612f      	str	r7, [r5, #16]
 801c444:	e7ec      	b.n	801c420 <ucdr_deserialize_endian_array_double+0x84>
 801c446:	bf00      	nop

0801c448 <ucdr_serialize_string>:
 801c448:	b510      	push	{r4, lr}
 801c44a:	b082      	sub	sp, #8
 801c44c:	4604      	mov	r4, r0
 801c44e:	4608      	mov	r0, r1
 801c450:	9101      	str	r1, [sp, #4]
 801c452:	f7e3 ff4f 	bl	80002f4 <strlen>
 801c456:	4602      	mov	r2, r0
 801c458:	9901      	ldr	r1, [sp, #4]
 801c45a:	4620      	mov	r0, r4
 801c45c:	3201      	adds	r2, #1
 801c45e:	b002      	add	sp, #8
 801c460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c464:	f7f7 bfa4 	b.w	80143b0 <ucdr_serialize_sequence_char>

0801c468 <ucdr_deserialize_string>:
 801c468:	b500      	push	{lr}
 801c46a:	b083      	sub	sp, #12
 801c46c:	ab01      	add	r3, sp, #4
 801c46e:	f7f7 ffb1 	bl	80143d4 <ucdr_deserialize_sequence_char>
 801c472:	b003      	add	sp, #12
 801c474:	f85d fb04 	ldr.w	pc, [sp], #4

0801c478 <uxr_init_input_best_effort_stream>:
 801c478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c47c:	8003      	strh	r3, [r0, #0]
 801c47e:	4770      	bx	lr

0801c480 <uxr_reset_input_best_effort_stream>:
 801c480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c484:	8003      	strh	r3, [r0, #0]
 801c486:	4770      	bx	lr

0801c488 <uxr_receive_best_effort_message>:
 801c488:	b538      	push	{r3, r4, r5, lr}
 801c48a:	4604      	mov	r4, r0
 801c48c:	8800      	ldrh	r0, [r0, #0]
 801c48e:	460d      	mov	r5, r1
 801c490:	f000 fd46 	bl	801cf20 <uxr_seq_num_cmp>
 801c494:	4603      	mov	r3, r0
 801c496:	0fc0      	lsrs	r0, r0, #31
 801c498:	2b00      	cmp	r3, #0
 801c49a:	bfb8      	it	lt
 801c49c:	8025      	strhlt	r5, [r4, #0]
 801c49e:	bd38      	pop	{r3, r4, r5, pc}

0801c4a0 <on_full_input_buffer>:
 801c4a0:	b570      	push	{r4, r5, r6, lr}
 801c4a2:	460c      	mov	r4, r1
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	8908      	ldrh	r0, [r1, #8]
 801c4a8:	682b      	ldr	r3, [r5, #0]
 801c4aa:	7d26      	ldrb	r6, [r4, #20]
 801c4ac:	e9d1 1200 	ldrd	r1, r2, [r1]
 801c4b0:	fbb2 f2f0 	udiv	r2, r2, r0
 801c4b4:	eba3 0c01 	sub.w	ip, r3, r1
 801c4b8:	fbbc fcf2 	udiv	ip, ip, r2
 801c4bc:	f10c 0c01 	add.w	ip, ip, #1
 801c4c0:	fa1f f38c 	uxth.w	r3, ip
 801c4c4:	fbb3 fcf0 	udiv	ip, r3, r0
 801c4c8:	fb00 331c 	mls	r3, r0, ip, r3
 801c4cc:	b29b      	uxth	r3, r3
 801c4ce:	fb02 f303 	mul.w	r3, r2, r3
 801c4d2:	1d18      	adds	r0, r3, #4
 801c4d4:	4408      	add	r0, r1
 801c4d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c4da:	b116      	cbz	r6, 801c4e2 <on_full_input_buffer+0x42>
 801c4dc:	2600      	movs	r6, #0
 801c4de:	f840 6c04 	str.w	r6, [r0, #-4]
 801c4e2:	2a03      	cmp	r2, #3
 801c4e4:	d801      	bhi.n	801c4ea <on_full_input_buffer+0x4a>
 801c4e6:	2001      	movs	r0, #1
 801c4e8:	bd70      	pop	{r4, r5, r6, pc}
 801c4ea:	3308      	adds	r3, #8
 801c4ec:	4628      	mov	r0, r5
 801c4ee:	3a04      	subs	r2, #4
 801c4f0:	4419      	add	r1, r3
 801c4f2:	692b      	ldr	r3, [r5, #16]
 801c4f4:	f7f7 fee0 	bl	80142b8 <ucdr_init_buffer_origin>
 801c4f8:	4628      	mov	r0, r5
 801c4fa:	4622      	mov	r2, r4
 801c4fc:	4902      	ldr	r1, [pc, #8]	@ (801c508 <on_full_input_buffer+0x68>)
 801c4fe:	f7f7 feb7 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 801c502:	2000      	movs	r0, #0
 801c504:	bd70      	pop	{r4, r5, r6, pc}
 801c506:	bf00      	nop
 801c508:	0801c4a1 	.word	0x0801c4a1

0801c50c <uxr_init_input_reliable_stream>:
 801c50c:	b510      	push	{r4, lr}
 801c50e:	e9c0 1200 	strd	r1, r2, [r0]
 801c512:	2400      	movs	r4, #0
 801c514:	9a02      	ldr	r2, [sp, #8]
 801c516:	8103      	strh	r3, [r0, #8]
 801c518:	6102      	str	r2, [r0, #16]
 801c51a:	7504      	strb	r4, [r0, #20]
 801c51c:	b1c3      	cbz	r3, 801c550 <uxr_init_input_reliable_stream+0x44>
 801c51e:	600c      	str	r4, [r1, #0]
 801c520:	8901      	ldrh	r1, [r0, #8]
 801c522:	2901      	cmp	r1, #1
 801c524:	d914      	bls.n	801c550 <uxr_init_input_reliable_stream+0x44>
 801c526:	f04f 0c01 	mov.w	ip, #1
 801c52a:	6843      	ldr	r3, [r0, #4]
 801c52c:	f10c 0e01 	add.w	lr, ip, #1
 801c530:	fbbc f2f1 	udiv	r2, ip, r1
 801c534:	fbb3 f3f1 	udiv	r3, r3, r1
 801c538:	fb01 c212 	mls	r2, r1, r2, ip
 801c53c:	fa1f fc8e 	uxth.w	ip, lr
 801c540:	b292      	uxth	r2, r2
 801c542:	fb02 f303 	mul.w	r3, r2, r3
 801c546:	6802      	ldr	r2, [r0, #0]
 801c548:	50d4      	str	r4, [r2, r3]
 801c54a:	8901      	ldrh	r1, [r0, #8]
 801c54c:	4561      	cmp	r1, ip
 801c54e:	d8ec      	bhi.n	801c52a <uxr_init_input_reliable_stream+0x1e>
 801c550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c554:	60c3      	str	r3, [r0, #12]
 801c556:	bd10      	pop	{r4, pc}

0801c558 <uxr_reset_input_reliable_stream>:
 801c558:	8901      	ldrh	r1, [r0, #8]
 801c55a:	b1d9      	cbz	r1, 801c594 <uxr_reset_input_reliable_stream+0x3c>
 801c55c:	b510      	push	{r4, lr}
 801c55e:	f04f 0e00 	mov.w	lr, #0
 801c562:	46f4      	mov	ip, lr
 801c564:	4674      	mov	r4, lr
 801c566:	6843      	ldr	r3, [r0, #4]
 801c568:	f10e 0e01 	add.w	lr, lr, #1
 801c56c:	fbbc f2f1 	udiv	r2, ip, r1
 801c570:	fbb3 f3f1 	udiv	r3, r3, r1
 801c574:	fb01 c212 	mls	r2, r1, r2, ip
 801c578:	fa1f fc8e 	uxth.w	ip, lr
 801c57c:	b292      	uxth	r2, r2
 801c57e:	fb02 f303 	mul.w	r3, r2, r3
 801c582:	6802      	ldr	r2, [r0, #0]
 801c584:	50d4      	str	r4, [r2, r3]
 801c586:	8901      	ldrh	r1, [r0, #8]
 801c588:	4561      	cmp	r1, ip
 801c58a:	d8ec      	bhi.n	801c566 <uxr_reset_input_reliable_stream+0xe>
 801c58c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c590:	60c3      	str	r3, [r0, #12]
 801c592:	bd10      	pop	{r4, pc}
 801c594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c598:	60c3      	str	r3, [r0, #12]
 801c59a:	4770      	bx	lr

0801c59c <uxr_receive_reliable_message>:
 801c59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5a0:	4604      	mov	r4, r0
 801c5a2:	460d      	mov	r5, r1
 801c5a4:	8901      	ldrh	r1, [r0, #8]
 801c5a6:	4617      	mov	r7, r2
 801c5a8:	8980      	ldrh	r0, [r0, #12]
 801c5aa:	4698      	mov	r8, r3
 801c5ac:	f000 fcb0 	bl	801cf10 <uxr_seq_num_add>
 801c5b0:	4629      	mov	r1, r5
 801c5b2:	4606      	mov	r6, r0
 801c5b4:	89a0      	ldrh	r0, [r4, #12]
 801c5b6:	f000 fcb3 	bl	801cf20 <uxr_seq_num_cmp>
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	db0a      	blt.n	801c5d4 <uxr_receive_reliable_message+0x38>
 801c5be:	2600      	movs	r6, #0
 801c5c0:	4629      	mov	r1, r5
 801c5c2:	89e0      	ldrh	r0, [r4, #14]
 801c5c4:	f000 fcac 	bl	801cf20 <uxr_seq_num_cmp>
 801c5c8:	2800      	cmp	r0, #0
 801c5ca:	da00      	bge.n	801c5ce <uxr_receive_reliable_message+0x32>
 801c5cc:	81e5      	strh	r5, [r4, #14]
 801c5ce:	4630      	mov	r0, r6
 801c5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	4629      	mov	r1, r5
 801c5d8:	f000 fca2 	bl	801cf20 <uxr_seq_num_cmp>
 801c5dc:	2800      	cmp	r0, #0
 801c5de:	dbee      	blt.n	801c5be <uxr_receive_reliable_message+0x22>
 801c5e0:	6923      	ldr	r3, [r4, #16]
 801c5e2:	4638      	mov	r0, r7
 801c5e4:	4798      	blx	r3
 801c5e6:	4681      	mov	r9, r0
 801c5e8:	2101      	movs	r1, #1
 801c5ea:	89a0      	ldrh	r0, [r4, #12]
 801c5ec:	f000 fc90 	bl	801cf10 <uxr_seq_num_add>
 801c5f0:	f1b9 0f00 	cmp.w	r9, #0
 801c5f4:	bf08      	it	eq
 801c5f6:	4285      	cmpeq	r5, r0
 801c5f8:	bf0c      	ite	eq
 801c5fa:	2601      	moveq	r6, #1
 801c5fc:	2600      	movne	r6, #0
 801c5fe:	d104      	bne.n	801c60a <uxr_receive_reliable_message+0x6e>
 801c600:	2300      	movs	r3, #0
 801c602:	9a08      	ldr	r2, [sp, #32]
 801c604:	81a0      	strh	r0, [r4, #12]
 801c606:	7013      	strb	r3, [r2, #0]
 801c608:	e7da      	b.n	801c5c0 <uxr_receive_reliable_message+0x24>
 801c60a:	8922      	ldrh	r2, [r4, #8]
 801c60c:	6863      	ldr	r3, [r4, #4]
 801c60e:	fbb5 f0f2 	udiv	r0, r5, r2
 801c612:	fbb3 f3f2 	udiv	r3, r3, r2
 801c616:	fb02 5010 	mls	r0, r2, r0, r5
 801c61a:	b280      	uxth	r0, r0
 801c61c:	fb03 f000 	mul.w	r0, r3, r0
 801c620:	6823      	ldr	r3, [r4, #0]
 801c622:	3004      	adds	r0, #4
 801c624:	4418      	add	r0, r3
 801c626:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d1c7      	bne.n	801c5be <uxr_receive_reliable_message+0x22>
 801c62e:	4639      	mov	r1, r7
 801c630:	4642      	mov	r2, r8
 801c632:	f001 fe42 	bl	801e2ba <memcpy>
 801c636:	8921      	ldrh	r1, [r4, #8]
 801c638:	6863      	ldr	r3, [r4, #4]
 801c63a:	fbb5 f2f1 	udiv	r2, r5, r1
 801c63e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c642:	fb01 5212 	mls	r2, r1, r2, r5
 801c646:	b292      	uxth	r2, r2
 801c648:	fb02 f303 	mul.w	r3, r2, r3
 801c64c:	6822      	ldr	r2, [r4, #0]
 801c64e:	f842 8003 	str.w	r8, [r2, r3]
 801c652:	2301      	movs	r3, #1
 801c654:	9a08      	ldr	r2, [sp, #32]
 801c656:	7013      	strb	r3, [r2, #0]
 801c658:	f1b9 0f00 	cmp.w	r9, #0
 801c65c:	d0af      	beq.n	801c5be <uxr_receive_reliable_message+0x22>
 801c65e:	89a6      	ldrh	r6, [r4, #12]
 801c660:	2101      	movs	r1, #1
 801c662:	4630      	mov	r0, r6
 801c664:	f000 fc54 	bl	801cf10 <uxr_seq_num_add>
 801c668:	8921      	ldrh	r1, [r4, #8]
 801c66a:	6863      	ldr	r3, [r4, #4]
 801c66c:	4606      	mov	r6, r0
 801c66e:	fbb0 f2f1 	udiv	r2, r0, r1
 801c672:	fbb3 f3f1 	udiv	r3, r3, r1
 801c676:	fb01 0212 	mls	r2, r1, r2, r0
 801c67a:	6820      	ldr	r0, [r4, #0]
 801c67c:	b292      	uxth	r2, r2
 801c67e:	fb02 f303 	mul.w	r3, r2, r3
 801c682:	3304      	adds	r3, #4
 801c684:	4418      	add	r0, r3
 801c686:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d097      	beq.n	801c5be <uxr_receive_reliable_message+0x22>
 801c68e:	6923      	ldr	r3, [r4, #16]
 801c690:	4798      	blx	r3
 801c692:	2802      	cmp	r0, #2
 801c694:	d002      	beq.n	801c69c <uxr_receive_reliable_message+0x100>
 801c696:	2801      	cmp	r0, #1
 801c698:	d0e2      	beq.n	801c660 <uxr_receive_reliable_message+0xc4>
 801c69a:	e790      	b.n	801c5be <uxr_receive_reliable_message+0x22>
 801c69c:	2601      	movs	r6, #1
 801c69e:	e78f      	b.n	801c5c0 <uxr_receive_reliable_message+0x24>

0801c6a0 <uxr_next_input_reliable_buffer_available>:
 801c6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6a4:	4604      	mov	r4, r0
 801c6a6:	460f      	mov	r7, r1
 801c6a8:	8980      	ldrh	r0, [r0, #12]
 801c6aa:	2101      	movs	r1, #1
 801c6ac:	4690      	mov	r8, r2
 801c6ae:	f000 fc2f 	bl	801cf10 <uxr_seq_num_add>
 801c6b2:	8922      	ldrh	r2, [r4, #8]
 801c6b4:	6866      	ldr	r6, [r4, #4]
 801c6b6:	fbb0 f3f2 	udiv	r3, r0, r2
 801c6ba:	fbb6 f6f2 	udiv	r6, r6, r2
 801c6be:	fb02 0313 	mls	r3, r2, r3, r0
 801c6c2:	b29b      	uxth	r3, r3
 801c6c4:	fb03 f606 	mul.w	r6, r3, r6
 801c6c8:	6823      	ldr	r3, [r4, #0]
 801c6ca:	3604      	adds	r6, #4
 801c6cc:	441e      	add	r6, r3
 801c6ce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c6d2:	f1b9 0f00 	cmp.w	r9, #0
 801c6d6:	d023      	beq.n	801c720 <uxr_next_input_reliable_buffer_available+0x80>
 801c6d8:	4605      	mov	r5, r0
 801c6da:	6923      	ldr	r3, [r4, #16]
 801c6dc:	4630      	mov	r0, r6
 801c6de:	4798      	blx	r3
 801c6e0:	4682      	mov	sl, r0
 801c6e2:	b300      	cbz	r0, 801c726 <uxr_next_input_reliable_buffer_available+0x86>
 801c6e4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c6e8:	2101      	movs	r1, #1
 801c6ea:	4650      	mov	r0, sl
 801c6ec:	f000 fc10 	bl	801cf10 <uxr_seq_num_add>
 801c6f0:	8921      	ldrh	r1, [r4, #8]
 801c6f2:	4682      	mov	sl, r0
 801c6f4:	6863      	ldr	r3, [r4, #4]
 801c6f6:	6820      	ldr	r0, [r4, #0]
 801c6f8:	fbba f2f1 	udiv	r2, sl, r1
 801c6fc:	fbb3 f3f1 	udiv	r3, r3, r1
 801c700:	fb01 a212 	mls	r2, r1, r2, sl
 801c704:	b292      	uxth	r2, r2
 801c706:	fb02 f303 	mul.w	r3, r2, r3
 801c70a:	3304      	adds	r3, #4
 801c70c:	4418      	add	r0, r3
 801c70e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c712:	b12b      	cbz	r3, 801c720 <uxr_next_input_reliable_buffer_available+0x80>
 801c714:	6923      	ldr	r3, [r4, #16]
 801c716:	4798      	blx	r3
 801c718:	2802      	cmp	r0, #2
 801c71a:	d01b      	beq.n	801c754 <uxr_next_input_reliable_buffer_available+0xb4>
 801c71c:	2801      	cmp	r0, #1
 801c71e:	d0e3      	beq.n	801c6e8 <uxr_next_input_reliable_buffer_available+0x48>
 801c720:	2000      	movs	r0, #0
 801c722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c726:	464a      	mov	r2, r9
 801c728:	4631      	mov	r1, r6
 801c72a:	4638      	mov	r0, r7
 801c72c:	f7f7 fdcc 	bl	80142c8 <ucdr_init_buffer>
 801c730:	8921      	ldrh	r1, [r4, #8]
 801c732:	6863      	ldr	r3, [r4, #4]
 801c734:	2001      	movs	r0, #1
 801c736:	fbb5 f2f1 	udiv	r2, r5, r1
 801c73a:	fbb3 f3f1 	udiv	r3, r3, r1
 801c73e:	fb01 5212 	mls	r2, r1, r2, r5
 801c742:	b292      	uxth	r2, r2
 801c744:	fb02 f303 	mul.w	r3, r2, r3
 801c748:	6822      	ldr	r2, [r4, #0]
 801c74a:	f842 a003 	str.w	sl, [r2, r3]
 801c74e:	81a5      	strh	r5, [r4, #12]
 801c750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c754:	8920      	ldrh	r0, [r4, #8]
 801c756:	eb06 0108 	add.w	r1, r6, r8
 801c75a:	6863      	ldr	r3, [r4, #4]
 801c75c:	eba9 0208 	sub.w	r2, r9, r8
 801c760:	fbb5 f6f0 	udiv	r6, r5, r0
 801c764:	fbb3 f3f0 	udiv	r3, r3, r0
 801c768:	fb00 5516 	mls	r5, r0, r6, r5
 801c76c:	2000      	movs	r0, #0
 801c76e:	b2ad      	uxth	r5, r5
 801c770:	fb03 f505 	mul.w	r5, r3, r5
 801c774:	6823      	ldr	r3, [r4, #0]
 801c776:	5158      	str	r0, [r3, r5]
 801c778:	4638      	mov	r0, r7
 801c77a:	f7f7 fda5 	bl	80142c8 <ucdr_init_buffer>
 801c77e:	4638      	mov	r0, r7
 801c780:	4622      	mov	r2, r4
 801c782:	4903      	ldr	r1, [pc, #12]	@ (801c790 <uxr_next_input_reliable_buffer_available+0xf0>)
 801c784:	f7f7 fd74 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 801c788:	2001      	movs	r0, #1
 801c78a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801c78e:	e7c8      	b.n	801c722 <uxr_next_input_reliable_buffer_available+0x82>
 801c790:	0801c4a1 	.word	0x0801c4a1

0801c794 <uxr_process_heartbeat>:
 801c794:	b538      	push	{r3, r4, r5, lr}
 801c796:	4611      	mov	r1, r2
 801c798:	4604      	mov	r4, r0
 801c79a:	89c0      	ldrh	r0, [r0, #14]
 801c79c:	4615      	mov	r5, r2
 801c79e:	f000 fbbf 	bl	801cf20 <uxr_seq_num_cmp>
 801c7a2:	2800      	cmp	r0, #0
 801c7a4:	bfb8      	it	lt
 801c7a6:	81e5      	strhlt	r5, [r4, #14]
 801c7a8:	bd38      	pop	{r3, r4, r5, pc}
 801c7aa:	bf00      	nop

0801c7ac <uxr_compute_acknack>:
 801c7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7b0:	8903      	ldrh	r3, [r0, #8]
 801c7b2:	4604      	mov	r4, r0
 801c7b4:	460f      	mov	r7, r1
 801c7b6:	8985      	ldrh	r5, [r0, #12]
 801c7b8:	b1db      	cbz	r3, 801c7f2 <uxr_compute_acknack+0x46>
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	2601      	movs	r6, #1
 801c7be:	e004      	b.n	801c7ca <uxr_compute_acknack+0x1e>
 801c7c0:	4566      	cmp	r6, ip
 801c7c2:	f106 0601 	add.w	r6, r6, #1
 801c7c6:	d214      	bcs.n	801c7f2 <uxr_compute_acknack+0x46>
 801c7c8:	89a0      	ldrh	r0, [r4, #12]
 801c7ca:	b2b1      	uxth	r1, r6
 801c7cc:	f000 fba0 	bl	801cf10 <uxr_seq_num_add>
 801c7d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c7d4:	fbb0 f2fc 	udiv	r2, r0, ip
 801c7d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c7dc:	fb0c 0212 	mls	r2, ip, r2, r0
 801c7e0:	fbb3 f3fc 	udiv	r3, r3, ip
 801c7e4:	b292      	uxth	r2, r2
 801c7e6:	fb02 f303 	mul.w	r3, r2, r3
 801c7ea:	58cb      	ldr	r3, [r1, r3]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d1e7      	bne.n	801c7c0 <uxr_compute_acknack+0x14>
 801c7f0:	4605      	mov	r5, r0
 801c7f2:	803d      	strh	r5, [r7, #0]
 801c7f4:	2101      	movs	r1, #1
 801c7f6:	89e6      	ldrh	r6, [r4, #14]
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f000 fb8d 	bl	801cf18 <uxr_seq_num_sub>
 801c7fe:	4601      	mov	r1, r0
 801c800:	4630      	mov	r0, r6
 801c802:	f000 fb89 	bl	801cf18 <uxr_seq_num_sub>
 801c806:	4606      	mov	r6, r0
 801c808:	b328      	cbz	r0, 801c856 <uxr_compute_acknack+0xaa>
 801c80a:	f04f 0900 	mov.w	r9, #0
 801c80e:	f04f 0801 	mov.w	r8, #1
 801c812:	464d      	mov	r5, r9
 801c814:	fa1f f189 	uxth.w	r1, r9
 801c818:	8838      	ldrh	r0, [r7, #0]
 801c81a:	f000 fb79 	bl	801cf10 <uxr_seq_num_add>
 801c81e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c822:	6861      	ldr	r1, [r4, #4]
 801c824:	fa08 fe09 	lsl.w	lr, r8, r9
 801c828:	6822      	ldr	r2, [r4, #0]
 801c82a:	f109 0901 	add.w	r9, r9, #1
 801c82e:	ea4e 0e05 	orr.w	lr, lr, r5
 801c832:	fbb0 f3fc 	udiv	r3, r0, ip
 801c836:	fbb1 f1fc 	udiv	r1, r1, ip
 801c83a:	fb03 001c 	mls	r0, r3, ip, r0
 801c83e:	b283      	uxth	r3, r0
 801c840:	fb01 f303 	mul.w	r3, r1, r3
 801c844:	58d3      	ldr	r3, [r2, r3]
 801c846:	b90b      	cbnz	r3, 801c84c <uxr_compute_acknack+0xa0>
 801c848:	fa1f f58e 	uxth.w	r5, lr
 801c84c:	454e      	cmp	r6, r9
 801c84e:	d1e1      	bne.n	801c814 <uxr_compute_acknack+0x68>
 801c850:	4628      	mov	r0, r5
 801c852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c856:	4605      	mov	r5, r0
 801c858:	4628      	mov	r0, r5
 801c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c85e:	bf00      	nop

0801c860 <uxr_init_output_best_effort_stream>:
 801c860:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c864:	6001      	str	r1, [r0, #0]
 801c866:	7303      	strb	r3, [r0, #12]
 801c868:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c86c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c870:	4770      	bx	lr
 801c872:	bf00      	nop

0801c874 <uxr_reset_output_best_effort_stream>:
 801c874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c878:	7b03      	ldrb	r3, [r0, #12]
 801c87a:	81c2      	strh	r2, [r0, #14]
 801c87c:	6043      	str	r3, [r0, #4]
 801c87e:	4770      	bx	lr

0801c880 <uxr_prepare_best_effort_buffer_to_write>:
 801c880:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c882:	4604      	mov	r4, r0
 801c884:	b083      	sub	sp, #12
 801c886:	6840      	ldr	r0, [r0, #4]
 801c888:	460d      	mov	r5, r1
 801c88a:	4616      	mov	r6, r2
 801c88c:	f7fa f83a 	bl	8016904 <uxr_submessage_padding>
 801c890:	6863      	ldr	r3, [r4, #4]
 801c892:	4418      	add	r0, r3
 801c894:	68a3      	ldr	r3, [r4, #8]
 801c896:	1942      	adds	r2, r0, r5
 801c898:	4293      	cmp	r3, r2
 801c89a:	bf2c      	ite	cs
 801c89c:	2701      	movcs	r7, #1
 801c89e:	2700      	movcc	r7, #0
 801c8a0:	d202      	bcs.n	801c8a8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c8a2:	4638      	mov	r0, r7
 801c8a4:	b003      	add	sp, #12
 801c8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8a8:	9000      	str	r0, [sp, #0]
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	4630      	mov	r0, r6
 801c8ae:	6821      	ldr	r1, [r4, #0]
 801c8b0:	f7f7 fcf8 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 801c8b4:	6861      	ldr	r1, [r4, #4]
 801c8b6:	4638      	mov	r0, r7
 801c8b8:	4429      	add	r1, r5
 801c8ba:	6061      	str	r1, [r4, #4]
 801c8bc:	b003      	add	sp, #12
 801c8be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c8c0 <uxr_prepare_best_effort_buffer_to_send>:
 801c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	461d      	mov	r5, r3
 801c8c8:	6840      	ldr	r0, [r0, #4]
 801c8ca:	7b23      	ldrb	r3, [r4, #12]
 801c8cc:	4298      	cmp	r0, r3
 801c8ce:	bf8c      	ite	hi
 801c8d0:	2601      	movhi	r6, #1
 801c8d2:	2600      	movls	r6, #0
 801c8d4:	d802      	bhi.n	801c8dc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c8d6:	4630      	mov	r0, r6
 801c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8dc:	4688      	mov	r8, r1
 801c8de:	89e0      	ldrh	r0, [r4, #14]
 801c8e0:	2101      	movs	r1, #1
 801c8e2:	4617      	mov	r7, r2
 801c8e4:	f000 fb14 	bl	801cf10 <uxr_seq_num_add>
 801c8e8:	6823      	ldr	r3, [r4, #0]
 801c8ea:	81e0      	strh	r0, [r4, #14]
 801c8ec:	8028      	strh	r0, [r5, #0]
 801c8ee:	4630      	mov	r0, r6
 801c8f0:	f8c8 3000 	str.w	r3, [r8]
 801c8f4:	6863      	ldr	r3, [r4, #4]
 801c8f6:	603b      	str	r3, [r7, #0]
 801c8f8:	7b23      	ldrb	r3, [r4, #12]
 801c8fa:	6063      	str	r3, [r4, #4]
 801c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c900 <on_full_output_buffer>:
 801c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c902:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801c906:	460c      	mov	r4, r1
 801c908:	6803      	ldr	r3, [r0, #0]
 801c90a:	4605      	mov	r5, r0
 801c90c:	7b26      	ldrb	r6, [r4, #12]
 801c90e:	e9d1 1200 	ldrd	r1, r2, [r1]
 801c912:	fbb2 f2fc 	udiv	r2, r2, ip
 801c916:	eba3 0e01 	sub.w	lr, r3, r1
 801c91a:	6903      	ldr	r3, [r0, #16]
 801c91c:	fbbe fef2 	udiv	lr, lr, r2
 801c920:	f10e 0e01 	add.w	lr, lr, #1
 801c924:	fa1f fe8e 	uxth.w	lr, lr
 801c928:	fbbe f7fc 	udiv	r7, lr, ip
 801c92c:	fb0c ec17 	mls	ip, ip, r7, lr
 801c930:	fa1f fc8c 	uxth.w	ip, ip
 801c934:	fb02 fc0c 	mul.w	ip, r2, ip
 801c938:	f851 200c 	ldr.w	r2, [r1, ip]
 801c93c:	44b4      	add	ip, r6
 801c93e:	1b92      	subs	r2, r2, r6
 801c940:	f10c 0c08 	add.w	ip, ip, #8
 801c944:	3a04      	subs	r2, #4
 801c946:	4461      	add	r1, ip
 801c948:	f7f7 fcb6 	bl	80142b8 <ucdr_init_buffer_origin>
 801c94c:	4628      	mov	r0, r5
 801c94e:	4622      	mov	r2, r4
 801c950:	4902      	ldr	r1, [pc, #8]	@ (801c95c <on_full_output_buffer+0x5c>)
 801c952:	f7f7 fc8d 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 801c956:	2000      	movs	r0, #0
 801c958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c95a:	bf00      	nop
 801c95c:	0801c901 	.word	0x0801c901

0801c960 <uxr_init_output_reliable_stream>:
 801c960:	b530      	push	{r4, r5, lr}
 801c962:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801c966:	8103      	strh	r3, [r0, #8]
 801c968:	7304      	strb	r4, [r0, #12]
 801c96a:	e9c0 1200 	strd	r1, r2, [r0]
 801c96e:	b1e3      	cbz	r3, 801c9aa <uxr_init_output_reliable_stream+0x4a>
 801c970:	600c      	str	r4, [r1, #0]
 801c972:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c976:	f1bc 0f01 	cmp.w	ip, #1
 801c97a:	d916      	bls.n	801c9aa <uxr_init_output_reliable_stream+0x4a>
 801c97c:	f04f 0e01 	mov.w	lr, #1
 801c980:	6843      	ldr	r3, [r0, #4]
 801c982:	f10e 0501 	add.w	r5, lr, #1
 801c986:	7b04      	ldrb	r4, [r0, #12]
 801c988:	6801      	ldr	r1, [r0, #0]
 801c98a:	fbbe f2fc 	udiv	r2, lr, ip
 801c98e:	fbb3 f3fc 	udiv	r3, r3, ip
 801c992:	fb0c e212 	mls	r2, ip, r2, lr
 801c996:	fa1f fe85 	uxth.w	lr, r5
 801c99a:	b292      	uxth	r2, r2
 801c99c:	fb02 f303 	mul.w	r3, r2, r3
 801c9a0:	50cc      	str	r4, [r1, r3]
 801c9a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c9a6:	45f4      	cmp	ip, lr
 801c9a8:	d8ea      	bhi.n	801c980 <uxr_init_output_reliable_stream+0x20>
 801c9aa:	4b07      	ldr	r3, [pc, #28]	@ (801c9c8 <uxr_init_output_reliable_stream+0x68>)
 801c9ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c9b0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c9b4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801c9b8:	f8c0 300e 	str.w	r3, [r0, #14]
 801c9bc:	2300      	movs	r3, #0
 801c9be:	8242      	strh	r2, [r0, #18]
 801c9c0:	8403      	strh	r3, [r0, #32]
 801c9c2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801c9c6:	bd30      	pop	{r4, r5, pc}
 801c9c8:	ffff0000 	.word	0xffff0000
 801c9cc:	00000000 	.word	0x00000000

0801c9d0 <uxr_reset_output_reliable_stream>:
 801c9d0:	8901      	ldrh	r1, [r0, #8]
 801c9d2:	b510      	push	{r4, lr}
 801c9d4:	b1b1      	cbz	r1, 801ca04 <uxr_reset_output_reliable_stream+0x34>
 801c9d6:	f04f 0e00 	mov.w	lr, #0
 801c9da:	46f4      	mov	ip, lr
 801c9dc:	6843      	ldr	r3, [r0, #4]
 801c9de:	f10e 0e01 	add.w	lr, lr, #1
 801c9e2:	7b04      	ldrb	r4, [r0, #12]
 801c9e4:	fbbc f2f1 	udiv	r2, ip, r1
 801c9e8:	fbb3 f3f1 	udiv	r3, r3, r1
 801c9ec:	fb01 c212 	mls	r2, r1, r2, ip
 801c9f0:	fa1f fc8e 	uxth.w	ip, lr
 801c9f4:	b292      	uxth	r2, r2
 801c9f6:	fb02 f303 	mul.w	r3, r2, r3
 801c9fa:	6802      	ldr	r2, [r0, #0]
 801c9fc:	50d4      	str	r4, [r2, r3]
 801c9fe:	8901      	ldrh	r1, [r0, #8]
 801ca00:	4561      	cmp	r1, ip
 801ca02:	d8eb      	bhi.n	801c9dc <uxr_reset_output_reliable_stream+0xc>
 801ca04:	4b08      	ldr	r3, [pc, #32]	@ (801ca28 <uxr_reset_output_reliable_stream+0x58>)
 801ca06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ca0a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801ca20 <uxr_reset_output_reliable_stream+0x50>
 801ca0e:	f8c0 300e 	str.w	r3, [r0, #14]
 801ca12:	2300      	movs	r3, #0
 801ca14:	8242      	strh	r2, [r0, #18]
 801ca16:	8403      	strh	r3, [r0, #32]
 801ca18:	ed80 7b06 	vstr	d7, [r0, #24]
 801ca1c:	bd10      	pop	{r4, pc}
 801ca1e:	bf00      	nop
 801ca20:	ffffffff 	.word	0xffffffff
 801ca24:	7fffffff 	.word	0x7fffffff
 801ca28:	ffff0000 	.word	0xffff0000

0801ca2c <uxr_prepare_reliable_buffer_to_write>:
 801ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca30:	4604      	mov	r4, r0
 801ca32:	b091      	sub	sp, #68	@ 0x44
 801ca34:	8900      	ldrh	r0, [r0, #8]
 801ca36:	468b      	mov	fp, r1
 801ca38:	89e6      	ldrh	r6, [r4, #14]
 801ca3a:	9204      	str	r2, [sp, #16]
 801ca3c:	6865      	ldr	r5, [r4, #4]
 801ca3e:	6823      	ldr	r3, [r4, #0]
 801ca40:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ca44:	fbb6 f2f0 	udiv	r2, r6, r0
 801ca48:	fbb5 f5f0 	udiv	r5, r5, r0
 801ca4c:	fb00 6212 	mls	r2, r0, r2, r6
 801ca50:	1f2f      	subs	r7, r5, #4
 801ca52:	b292      	uxth	r2, r2
 801ca54:	fb05 3202 	mla	r2, r5, r2, r3
 801ca58:	1d11      	adds	r1, r2, #4
 801ca5a:	f8d2 8000 	ldr.w	r8, [r2]
 801ca5e:	9103      	str	r1, [sp, #12]
 801ca60:	2800      	cmp	r0, #0
 801ca62:	f000 814a 	beq.w	801ccfa <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801ca66:	f04f 0c00 	mov.w	ip, #0
 801ca6a:	46e2      	mov	sl, ip
 801ca6c:	4661      	mov	r1, ip
 801ca6e:	f10c 0c01 	add.w	ip, ip, #1
 801ca72:	fbb1 f2f0 	udiv	r2, r1, r0
 801ca76:	fb00 1212 	mls	r2, r0, r2, r1
 801ca7a:	fa1f f18c 	uxth.w	r1, ip
 801ca7e:	b292      	uxth	r2, r2
 801ca80:	fb05 f202 	mul.w	r2, r5, r2
 801ca84:	589a      	ldr	r2, [r3, r2]
 801ca86:	454a      	cmp	r2, r9
 801ca88:	d103      	bne.n	801ca92 <uxr_prepare_reliable_buffer_to_write+0x66>
 801ca8a:	f10a 0a01 	add.w	sl, sl, #1
 801ca8e:	fa1f fa8a 	uxth.w	sl, sl
 801ca92:	4281      	cmp	r1, r0
 801ca94:	d3eb      	bcc.n	801ca6e <uxr_prepare_reliable_buffer_to_write+0x42>
 801ca96:	4640      	mov	r0, r8
 801ca98:	2104      	movs	r1, #4
 801ca9a:	f8cd a014 	str.w	sl, [sp, #20]
 801ca9e:	f7f7 fc17 	bl	80142d0 <ucdr_alignment>
 801caa2:	4480      	add	r8, r0
 801caa4:	eb08 020b 	add.w	r2, r8, fp
 801caa8:	42ba      	cmp	r2, r7
 801caaa:	f240 80ca 	bls.w	801cc42 <uxr_prepare_reliable_buffer_to_write+0x216>
 801caae:	7b22      	ldrb	r2, [r4, #12]
 801cab0:	445a      	add	r2, fp
 801cab2:	42ba      	cmp	r2, r7
 801cab4:	f240 80b2 	bls.w	801cc1c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801cab8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801cabc:	b2bb      	uxth	r3, r7
 801cabe:	eba2 0209 	sub.w	r2, r2, r9
 801cac2:	441a      	add	r2, r3
 801cac4:	b292      	uxth	r2, r2
 801cac6:	fb0a f902 	mul.w	r9, sl, r2
 801caca:	9205      	str	r2, [sp, #20]
 801cacc:	45d9      	cmp	r9, fp
 801cace:	9206      	str	r2, [sp, #24]
 801cad0:	f0c0 80b3 	bcc.w	801cc3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cad4:	f108 0204 	add.w	r2, r8, #4
 801cad8:	42ba      	cmp	r2, r7
 801cada:	f080 80da 	bcs.w	801cc92 <uxr_prepare_reliable_buffer_to_write+0x266>
 801cade:	f1a3 0904 	sub.w	r9, r3, #4
 801cae2:	9b05      	ldr	r3, [sp, #20]
 801cae4:	eba9 0908 	sub.w	r9, r9, r8
 801cae8:	fa1f f989 	uxth.w	r9, r9
 801caec:	ebab 0b09 	sub.w	fp, fp, r9
 801caf0:	fbbb f2f3 	udiv	r2, fp, r3
 801caf4:	fb03 b312 	mls	r3, r3, r2, fp
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	f040 80c4 	bne.w	801cc86 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801cafe:	b293      	uxth	r3, r2
 801cb00:	4553      	cmp	r3, sl
 801cb02:	f200 809a 	bhi.w	801cc3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	f000 80f9 	beq.w	801ccfe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801cb0c:	f8cd 801c 	str.w	r8, [sp, #28]
 801cb10:	f04f 0a00 	mov.w	sl, #0
 801cb14:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cb18:	f10d 0b20 	add.w	fp, sp, #32
 801cb1c:	9505      	str	r5, [sp, #20]
 801cb1e:	461d      	mov	r5, r3
 801cb20:	e000      	b.n	801cb24 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801cb22:	46c1      	mov	r9, r8
 801cb24:	8922      	ldrh	r2, [r4, #8]
 801cb26:	4658      	mov	r0, fp
 801cb28:	6863      	ldr	r3, [r4, #4]
 801cb2a:	f10a 0a01 	add.w	sl, sl, #1
 801cb2e:	fbb6 f1f2 	udiv	r1, r6, r2
 801cb32:	fbb3 f3f2 	udiv	r3, r3, r2
 801cb36:	fb02 6111 	mls	r1, r2, r1, r6
 801cb3a:	463a      	mov	r2, r7
 801cb3c:	b289      	uxth	r1, r1
 801cb3e:	fb03 f101 	mul.w	r1, r3, r1
 801cb42:	6823      	ldr	r3, [r4, #0]
 801cb44:	3104      	adds	r1, #4
 801cb46:	4419      	add	r1, r3
 801cb48:	2300      	movs	r3, #0
 801cb4a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801cb4e:	f8cd c000 	str.w	ip, [sp]
 801cb52:	f7f7 fba7 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 801cb56:	464a      	mov	r2, r9
 801cb58:	2300      	movs	r3, #0
 801cb5a:	210d      	movs	r1, #13
 801cb5c:	4658      	mov	r0, fp
 801cb5e:	f7f9 fe91 	bl	8016884 <uxr_buffer_submessage_header>
 801cb62:	8921      	ldrh	r1, [r4, #8]
 801cb64:	6863      	ldr	r3, [r4, #4]
 801cb66:	4630      	mov	r0, r6
 801cb68:	fbb6 f2f1 	udiv	r2, r6, r1
 801cb6c:	fbb3 f3f1 	udiv	r3, r3, r1
 801cb70:	fb01 6212 	mls	r2, r1, r2, r6
 801cb74:	2101      	movs	r1, #1
 801cb76:	b292      	uxth	r2, r2
 801cb78:	fb02 f303 	mul.w	r3, r2, r3
 801cb7c:	6822      	ldr	r2, [r4, #0]
 801cb7e:	50d7      	str	r7, [r2, r3]
 801cb80:	f000 f9c6 	bl	801cf10 <uxr_seq_num_add>
 801cb84:	4606      	mov	r6, r0
 801cb86:	fa1f f38a 	uxth.w	r3, sl
 801cb8a:	429d      	cmp	r5, r3
 801cb8c:	d8c9      	bhi.n	801cb22 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801cb8e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801cb92:	9d05      	ldr	r5, [sp, #20]
 801cb94:	8920      	ldrh	r0, [r4, #8]
 801cb96:	463a      	mov	r2, r7
 801cb98:	6863      	ldr	r3, [r4, #4]
 801cb9a:	fbb6 f1f0 	udiv	r1, r6, r0
 801cb9e:	fbb3 f3f0 	udiv	r3, r3, r0
 801cba2:	fb00 6111 	mls	r1, r0, r1, r6
 801cba6:	4658      	mov	r0, fp
 801cba8:	b289      	uxth	r1, r1
 801cbaa:	fb01 f303 	mul.w	r3, r1, r3
 801cbae:	6821      	ldr	r1, [r4, #0]
 801cbb0:	3304      	adds	r3, #4
 801cbb2:	4419      	add	r1, r3
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801cbba:	9700      	str	r7, [sp, #0]
 801cbbc:	f7f7 fb72 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 801cbc0:	9f06      	ldr	r7, [sp, #24]
 801cbc2:	4658      	mov	r0, fp
 801cbc4:	2302      	movs	r3, #2
 801cbc6:	b2ba      	uxth	r2, r7
 801cbc8:	210d      	movs	r1, #13
 801cbca:	f7f9 fe5b 	bl	8016884 <uxr_buffer_submessage_header>
 801cbce:	f108 0104 	add.w	r1, r8, #4
 801cbd2:	9b03      	ldr	r3, [sp, #12]
 801cbd4:	f1a5 0208 	sub.w	r2, r5, #8
 801cbd8:	8925      	ldrh	r5, [r4, #8]
 801cbda:	440b      	add	r3, r1
 801cbdc:	eba2 0208 	sub.w	r2, r2, r8
 801cbe0:	fbb6 f0f5 	udiv	r0, r6, r5
 801cbe4:	4619      	mov	r1, r3
 801cbe6:	6863      	ldr	r3, [r4, #4]
 801cbe8:	fb05 6010 	mls	r0, r5, r0, r6
 801cbec:	fbb3 f3f5 	udiv	r3, r3, r5
 801cbf0:	b280      	uxth	r0, r0
 801cbf2:	6825      	ldr	r5, [r4, #0]
 801cbf4:	fb00 f303 	mul.w	r3, r0, r3
 801cbf8:	7b20      	ldrb	r0, [r4, #12]
 801cbfa:	3004      	adds	r0, #4
 801cbfc:	4438      	add	r0, r7
 801cbfe:	50e8      	str	r0, [r5, r3]
 801cc00:	9d04      	ldr	r5, [sp, #16]
 801cc02:	4628      	mov	r0, r5
 801cc04:	f7f7 fb60 	bl	80142c8 <ucdr_init_buffer>
 801cc08:	4628      	mov	r0, r5
 801cc0a:	4622      	mov	r2, r4
 801cc0c:	493d      	ldr	r1, [pc, #244]	@ (801cd04 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801cc0e:	f7f7 fb2f 	bl	8014270 <ucdr_set_on_full_buffer_callback>
 801cc12:	2001      	movs	r0, #1
 801cc14:	81e6      	strh	r6, [r4, #14]
 801cc16:	b011      	add	sp, #68	@ 0x44
 801cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc1c:	2101      	movs	r1, #1
 801cc1e:	89e0      	ldrh	r0, [r4, #14]
 801cc20:	f000 f976 	bl	801cf10 <uxr_seq_num_add>
 801cc24:	4605      	mov	r5, r0
 801cc26:	8921      	ldrh	r1, [r4, #8]
 801cc28:	8a60      	ldrh	r0, [r4, #18]
 801cc2a:	f000 f971 	bl	801cf10 <uxr_seq_num_add>
 801cc2e:	4601      	mov	r1, r0
 801cc30:	4628      	mov	r0, r5
 801cc32:	f000 f975 	bl	801cf20 <uxr_seq_num_cmp>
 801cc36:	2800      	cmp	r0, #0
 801cc38:	dd44      	ble.n	801ccc4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	b011      	add	sp, #68	@ 0x44
 801cc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc42:	8921      	ldrh	r1, [r4, #8]
 801cc44:	8a60      	ldrh	r0, [r4, #18]
 801cc46:	9205      	str	r2, [sp, #20]
 801cc48:	f000 f962 	bl	801cf10 <uxr_seq_num_add>
 801cc4c:	4601      	mov	r1, r0
 801cc4e:	4630      	mov	r0, r6
 801cc50:	f000 f966 	bl	801cf20 <uxr_seq_num_cmp>
 801cc54:	2800      	cmp	r0, #0
 801cc56:	9a05      	ldr	r2, [sp, #20]
 801cc58:	dcef      	bgt.n	801cc3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cc5a:	8925      	ldrh	r5, [r4, #8]
 801cc5c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801cc60:	fbb6 f4f5 	udiv	r4, r6, r5
 801cc64:	fbb3 f3f5 	udiv	r3, r3, r5
 801cc68:	fb05 6414 	mls	r4, r5, r4, r6
 801cc6c:	b2a4      	uxth	r4, r4
 801cc6e:	fb04 f303 	mul.w	r3, r4, r3
 801cc72:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801cc76:	50fa      	str	r2, [r7, r3]
 801cc78:	2300      	movs	r3, #0
 801cc7a:	f8cd 8000 	str.w	r8, [sp]
 801cc7e:	f7f7 fb11 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 801cc82:	2001      	movs	r0, #1
 801cc84:	e7da      	b.n	801cc3c <uxr_prepare_reliable_buffer_to_write+0x210>
 801cc86:	3201      	adds	r2, #1
 801cc88:	9306      	str	r3, [sp, #24]
 801cc8a:	b293      	uxth	r3, r2
 801cc8c:	4553      	cmp	r3, sl
 801cc8e:	d8d4      	bhi.n	801cc3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801cc90:	e739      	b.n	801cb06 <uxr_prepare_reliable_buffer_to_write+0xda>
 801cc92:	4630      	mov	r0, r6
 801cc94:	2101      	movs	r1, #1
 801cc96:	9307      	str	r3, [sp, #28]
 801cc98:	f000 f93a 	bl	801cf10 <uxr_seq_num_add>
 801cc9c:	4606      	mov	r6, r0
 801cc9e:	8920      	ldrh	r0, [r4, #8]
 801cca0:	6862      	ldr	r2, [r4, #4]
 801cca2:	fbb6 f1f0 	udiv	r1, r6, r0
 801cca6:	fbb2 f2f0 	udiv	r2, r2, r0
 801ccaa:	fb00 6111 	mls	r1, r0, r1, r6
 801ccae:	b289      	uxth	r1, r1
 801ccb0:	fb01 f202 	mul.w	r2, r1, r2
 801ccb4:	6821      	ldr	r1, [r4, #0]
 801ccb6:	3204      	adds	r2, #4
 801ccb8:	188b      	adds	r3, r1, r2
 801ccba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ccbe:	9303      	str	r3, [sp, #12]
 801ccc0:	9b07      	ldr	r3, [sp, #28]
 801ccc2:	e70c      	b.n	801cade <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ccc4:	8921      	ldrh	r1, [r4, #8]
 801ccc6:	6863      	ldr	r3, [r4, #4]
 801ccc8:	9804      	ldr	r0, [sp, #16]
 801ccca:	fbb5 f2f1 	udiv	r2, r5, r1
 801ccce:	fbb3 f3f1 	udiv	r3, r3, r1
 801ccd2:	fb01 5212 	mls	r2, r1, r2, r5
 801ccd6:	6821      	ldr	r1, [r4, #0]
 801ccd8:	b292      	uxth	r2, r2
 801ccda:	fb02 f303 	mul.w	r3, r2, r3
 801ccde:	7b22      	ldrb	r2, [r4, #12]
 801cce0:	3304      	adds	r3, #4
 801cce2:	445a      	add	r2, fp
 801cce4:	4419      	add	r1, r3
 801cce6:	f841 2c04 	str.w	r2, [r1, #-4]
 801ccea:	7b23      	ldrb	r3, [r4, #12]
 801ccec:	9300      	str	r3, [sp, #0]
 801ccee:	2300      	movs	r3, #0
 801ccf0:	f7f7 fad8 	bl	80142a4 <ucdr_init_buffer_origin_offset>
 801ccf4:	2001      	movs	r0, #1
 801ccf6:	81e5      	strh	r5, [r4, #14]
 801ccf8:	e7a0      	b.n	801cc3c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ccfa:	4682      	mov	sl, r0
 801ccfc:	e6cb      	b.n	801ca96 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ccfe:	f10d 0b20 	add.w	fp, sp, #32
 801cd02:	e747      	b.n	801cb94 <uxr_prepare_reliable_buffer_to_write+0x168>
 801cd04:	0801c901 	.word	0x0801c901

0801cd08 <uxr_prepare_next_reliable_buffer_to_send>:
 801cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd0a:	4604      	mov	r4, r0
 801cd0c:	461d      	mov	r5, r3
 801cd0e:	460f      	mov	r7, r1
 801cd10:	8a00      	ldrh	r0, [r0, #16]
 801cd12:	2101      	movs	r1, #1
 801cd14:	4616      	mov	r6, r2
 801cd16:	f000 f8fb 	bl	801cf10 <uxr_seq_num_add>
 801cd1a:	8028      	strh	r0, [r5, #0]
 801cd1c:	8922      	ldrh	r2, [r4, #8]
 801cd1e:	6863      	ldr	r3, [r4, #4]
 801cd20:	fbb0 f1f2 	udiv	r1, r0, r2
 801cd24:	fbb3 f3f2 	udiv	r3, r3, r2
 801cd28:	fb02 0c11 	mls	ip, r2, r1, r0
 801cd2c:	89e1      	ldrh	r1, [r4, #14]
 801cd2e:	fa1f fc8c 	uxth.w	ip, ip
 801cd32:	fb0c fc03 	mul.w	ip, ip, r3
 801cd36:	6823      	ldr	r3, [r4, #0]
 801cd38:	f10c 0c04 	add.w	ip, ip, #4
 801cd3c:	4463      	add	r3, ip
 801cd3e:	603b      	str	r3, [r7, #0]
 801cd40:	6823      	ldr	r3, [r4, #0]
 801cd42:	449c      	add	ip, r3
 801cd44:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801cd48:	6033      	str	r3, [r6, #0]
 801cd4a:	f000 f8e9 	bl	801cf20 <uxr_seq_num_cmp>
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	dd01      	ble.n	801cd56 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801cd52:	2000      	movs	r0, #0
 801cd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd56:	7b23      	ldrb	r3, [r4, #12]
 801cd58:	6832      	ldr	r2, [r6, #0]
 801cd5a:	429a      	cmp	r2, r3
 801cd5c:	d9f9      	bls.n	801cd52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cd5e:	8a61      	ldrh	r1, [r4, #18]
 801cd60:	8a20      	ldrh	r0, [r4, #16]
 801cd62:	f000 f8d9 	bl	801cf18 <uxr_seq_num_sub>
 801cd66:	8923      	ldrh	r3, [r4, #8]
 801cd68:	4283      	cmp	r3, r0
 801cd6a:	d0f2      	beq.n	801cd52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cd6c:	8828      	ldrh	r0, [r5, #0]
 801cd6e:	89e3      	ldrh	r3, [r4, #14]
 801cd70:	8220      	strh	r0, [r4, #16]
 801cd72:	4298      	cmp	r0, r3
 801cd74:	d001      	beq.n	801cd7a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801cd76:	2001      	movs	r0, #1
 801cd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd7a:	2101      	movs	r1, #1
 801cd7c:	f000 f8c8 	bl	801cf10 <uxr_seq_num_add>
 801cd80:	4603      	mov	r3, r0
 801cd82:	2001      	movs	r0, #1
 801cd84:	81e3      	strh	r3, [r4, #14]
 801cd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cd88 <uxr_update_output_stream_heartbeat_timestamp>:
 801cd88:	b570      	push	{r4, r5, r6, lr}
 801cd8a:	8a01      	ldrh	r1, [r0, #16]
 801cd8c:	4604      	mov	r4, r0
 801cd8e:	8a40      	ldrh	r0, [r0, #18]
 801cd90:	4615      	mov	r5, r2
 801cd92:	461e      	mov	r6, r3
 801cd94:	f000 f8c4 	bl	801cf20 <uxr_seq_num_cmp>
 801cd98:	2800      	cmp	r0, #0
 801cd9a:	db07      	blt.n	801cdac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801cd9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cda0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cda4:	2000      	movs	r0, #0
 801cda6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801cdaa:	bd70      	pop	{r4, r5, r6, pc}
 801cdac:	f894 0020 	ldrb.w	r0, [r4, #32]
 801cdb0:	b940      	cbnz	r0, 801cdc4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801cdb2:	2301      	movs	r3, #1
 801cdb4:	f884 3020 	strb.w	r3, [r4, #32]
 801cdb8:	3564      	adds	r5, #100	@ 0x64
 801cdba:	f146 0600 	adc.w	r6, r6, #0
 801cdbe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cdc2:	bd70      	pop	{r4, r5, r6, pc}
 801cdc4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801cdc8:	4295      	cmp	r5, r2
 801cdca:	eb76 0303 	sbcs.w	r3, r6, r3
 801cdce:	db04      	blt.n	801cdda <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801cdd0:	1c43      	adds	r3, r0, #1
 801cdd2:	2001      	movs	r0, #1
 801cdd4:	f884 3020 	strb.w	r3, [r4, #32]
 801cdd8:	e7ee      	b.n	801cdb8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801cdda:	2000      	movs	r0, #0
 801cddc:	e7ec      	b.n	801cdb8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801cdde:	bf00      	nop

0801cde0 <uxr_begin_output_nack_buffer_it>:
 801cde0:	8a40      	ldrh	r0, [r0, #18]
 801cde2:	4770      	bx	lr

0801cde4 <uxr_next_reliable_nack_buffer_to_send>:
 801cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cde8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801cdec:	b197      	cbz	r7, 801ce14 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801cdee:	4680      	mov	r8, r0
 801cdf0:	460d      	mov	r5, r1
 801cdf2:	4616      	mov	r6, r2
 801cdf4:	461c      	mov	r4, r3
 801cdf6:	8818      	ldrh	r0, [r3, #0]
 801cdf8:	2101      	movs	r1, #1
 801cdfa:	f000 f889 	bl	801cf10 <uxr_seq_num_add>
 801cdfe:	8020      	strh	r0, [r4, #0]
 801ce00:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ce04:	f000 f88c 	bl	801cf20 <uxr_seq_num_cmp>
 801ce08:	2800      	cmp	r0, #0
 801ce0a:	dd06      	ble.n	801ce1a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ce0c:	2300      	movs	r3, #0
 801ce0e:	461f      	mov	r7, r3
 801ce10:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801ce14:	4638      	mov	r0, r7
 801ce16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce1a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ce1e:	8820      	ldrh	r0, [r4, #0]
 801ce20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ce24:	fbb0 f3f2 	udiv	r3, r0, r2
 801ce28:	fbb1 fcf2 	udiv	ip, r1, r2
 801ce2c:	fb02 0313 	mls	r3, r2, r3, r0
 801ce30:	b29b      	uxth	r3, r3
 801ce32:	fb03 fc0c 	mul.w	ip, r3, ip
 801ce36:	f8d8 3000 	ldr.w	r3, [r8]
 801ce3a:	f10c 0c04 	add.w	ip, ip, #4
 801ce3e:	4463      	add	r3, ip
 801ce40:	602b      	str	r3, [r5, #0]
 801ce42:	f8d8 3000 	ldr.w	r3, [r8]
 801ce46:	4463      	add	r3, ip
 801ce48:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ce4c:	6033      	str	r3, [r6, #0]
 801ce4e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ce52:	429a      	cmp	r2, r3
 801ce54:	d0d0      	beq.n	801cdf8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ce56:	e7dd      	b.n	801ce14 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ce58 <uxr_process_acknack>:
 801ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce5a:	4604      	mov	r4, r0
 801ce5c:	460e      	mov	r6, r1
 801ce5e:	4610      	mov	r0, r2
 801ce60:	2101      	movs	r1, #1
 801ce62:	f000 f859 	bl	801cf18 <uxr_seq_num_sub>
 801ce66:	8a61      	ldrh	r1, [r4, #18]
 801ce68:	f000 f856 	bl	801cf18 <uxr_seq_num_sub>
 801ce6c:	b1c8      	cbz	r0, 801cea2 <uxr_process_acknack+0x4a>
 801ce6e:	4605      	mov	r5, r0
 801ce70:	2700      	movs	r7, #0
 801ce72:	2101      	movs	r1, #1
 801ce74:	8a60      	ldrh	r0, [r4, #18]
 801ce76:	f000 f84b 	bl	801cf10 <uxr_seq_num_add>
 801ce7a:	8923      	ldrh	r3, [r4, #8]
 801ce7c:	6862      	ldr	r2, [r4, #4]
 801ce7e:	3701      	adds	r7, #1
 801ce80:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ce84:	6821      	ldr	r1, [r4, #0]
 801ce86:	42bd      	cmp	r5, r7
 801ce88:	8260      	strh	r0, [r4, #18]
 801ce8a:	fbb0 fef3 	udiv	lr, r0, r3
 801ce8e:	fbb2 f2f3 	udiv	r2, r2, r3
 801ce92:	fb03 031e 	mls	r3, r3, lr, r0
 801ce96:	b29b      	uxth	r3, r3
 801ce98:	fb02 f303 	mul.w	r3, r2, r3
 801ce9c:	f841 c003 	str.w	ip, [r1, r3]
 801cea0:	d1e7      	bne.n	801ce72 <uxr_process_acknack+0x1a>
 801cea2:	3e00      	subs	r6, #0
 801cea4:	f04f 0300 	mov.w	r3, #0
 801cea8:	bf18      	it	ne
 801ceaa:	2601      	movne	r6, #1
 801ceac:	f884 3020 	strb.w	r3, [r4, #32]
 801ceb0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ceb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ceb6:	bf00      	nop

0801ceb8 <uxr_is_output_up_to_date>:
 801ceb8:	8a01      	ldrh	r1, [r0, #16]
 801ceba:	8a40      	ldrh	r0, [r0, #18]
 801cebc:	b508      	push	{r3, lr}
 801cebe:	f000 f82f 	bl	801cf20 <uxr_seq_num_cmp>
 801cec2:	fab0 f080 	clz	r0, r0
 801cec6:	0940      	lsrs	r0, r0, #5
 801cec8:	bd08      	pop	{r3, pc}
 801ceca:	bf00      	nop

0801cecc <get_available_free_slots>:
 801cecc:	8901      	ldrh	r1, [r0, #8]
 801cece:	b1e1      	cbz	r1, 801cf0a <get_available_free_slots+0x3e>
 801ced0:	6843      	ldr	r3, [r0, #4]
 801ced2:	f04f 0c00 	mov.w	ip, #0
 801ced6:	b530      	push	{r4, r5, lr}
 801ced8:	fbb3 fef1 	udiv	lr, r3, r1
 801cedc:	6805      	ldr	r5, [r0, #0]
 801cede:	4662      	mov	r2, ip
 801cee0:	7b04      	ldrb	r4, [r0, #12]
 801cee2:	4660      	mov	r0, ip
 801cee4:	f10c 0c01 	add.w	ip, ip, #1
 801cee8:	fbb2 f3f1 	udiv	r3, r2, r1
 801ceec:	fb01 2313 	mls	r3, r1, r3, r2
 801cef0:	fa1f f28c 	uxth.w	r2, ip
 801cef4:	b29b      	uxth	r3, r3
 801cef6:	fb0e f303 	mul.w	r3, lr, r3
 801cefa:	58eb      	ldr	r3, [r5, r3]
 801cefc:	429c      	cmp	r4, r3
 801cefe:	d101      	bne.n	801cf04 <get_available_free_slots+0x38>
 801cf00:	3001      	adds	r0, #1
 801cf02:	b280      	uxth	r0, r0
 801cf04:	428a      	cmp	r2, r1
 801cf06:	d3ed      	bcc.n	801cee4 <get_available_free_slots+0x18>
 801cf08:	bd30      	pop	{r4, r5, pc}
 801cf0a:	4608      	mov	r0, r1
 801cf0c:	4770      	bx	lr
 801cf0e:	bf00      	nop

0801cf10 <uxr_seq_num_add>:
 801cf10:	4408      	add	r0, r1
 801cf12:	b280      	uxth	r0, r0
 801cf14:	4770      	bx	lr
 801cf16:	bf00      	nop

0801cf18 <uxr_seq_num_sub>:
 801cf18:	1a40      	subs	r0, r0, r1
 801cf1a:	b280      	uxth	r0, r0
 801cf1c:	4770      	bx	lr
 801cf1e:	bf00      	nop

0801cf20 <uxr_seq_num_cmp>:
 801cf20:	4288      	cmp	r0, r1
 801cf22:	d011      	beq.n	801cf48 <uxr_seq_num_cmp+0x28>
 801cf24:	d309      	bcc.n	801cf3a <uxr_seq_num_cmp+0x1a>
 801cf26:	4288      	cmp	r0, r1
 801cf28:	d910      	bls.n	801cf4c <uxr_seq_num_cmp+0x2c>
 801cf2a:	1a40      	subs	r0, r0, r1
 801cf2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801cf30:	bfd4      	ite	le
 801cf32:	2001      	movle	r0, #1
 801cf34:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801cf38:	4770      	bx	lr
 801cf3a:	1a0b      	subs	r3, r1, r0
 801cf3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801cf40:	daf1      	bge.n	801cf26 <uxr_seq_num_cmp+0x6>
 801cf42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf46:	4770      	bx	lr
 801cf48:	2000      	movs	r0, #0
 801cf4a:	4770      	bx	lr
 801cf4c:	2001      	movs	r0, #1
 801cf4e:	4770      	bx	lr

0801cf50 <rcl_get_default_domain_id>:
 801cf50:	b530      	push	{r4, r5, lr}
 801cf52:	2300      	movs	r3, #0
 801cf54:	b083      	sub	sp, #12
 801cf56:	9300      	str	r3, [sp, #0]
 801cf58:	b1d0      	cbz	r0, 801cf90 <rcl_get_default_domain_id+0x40>
 801cf5a:	4604      	mov	r4, r0
 801cf5c:	4669      	mov	r1, sp
 801cf5e:	4815      	ldr	r0, [pc, #84]	@ (801cfb4 <rcl_get_default_domain_id+0x64>)
 801cf60:	f7fd fd12 	bl	801a988 <rcutils_get_env>
 801cf64:	4602      	mov	r2, r0
 801cf66:	b110      	cbz	r0, 801cf6e <rcl_get_default_domain_id+0x1e>
 801cf68:	2001      	movs	r0, #1
 801cf6a:	b003      	add	sp, #12
 801cf6c:	bd30      	pop	{r4, r5, pc}
 801cf6e:	9b00      	ldr	r3, [sp, #0]
 801cf70:	b18b      	cbz	r3, 801cf96 <rcl_get_default_domain_id+0x46>
 801cf72:	7818      	ldrb	r0, [r3, #0]
 801cf74:	2800      	cmp	r0, #0
 801cf76:	d0f8      	beq.n	801cf6a <rcl_get_default_domain_id+0x1a>
 801cf78:	a901      	add	r1, sp, #4
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	9201      	str	r2, [sp, #4]
 801cf7e:	f000 fe2d 	bl	801dbdc <strtoul>
 801cf82:	4605      	mov	r5, r0
 801cf84:	b150      	cbz	r0, 801cf9c <rcl_get_default_domain_id+0x4c>
 801cf86:	1c43      	adds	r3, r0, #1
 801cf88:	d00d      	beq.n	801cfa6 <rcl_get_default_domain_id+0x56>
 801cf8a:	2000      	movs	r0, #0
 801cf8c:	6025      	str	r5, [r4, #0]
 801cf8e:	e7ec      	b.n	801cf6a <rcl_get_default_domain_id+0x1a>
 801cf90:	200b      	movs	r0, #11
 801cf92:	b003      	add	sp, #12
 801cf94:	bd30      	pop	{r4, r5, pc}
 801cf96:	4618      	mov	r0, r3
 801cf98:	b003      	add	sp, #12
 801cf9a:	bd30      	pop	{r4, r5, pc}
 801cf9c:	9b01      	ldr	r3, [sp, #4]
 801cf9e:	781b      	ldrb	r3, [r3, #0]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d0f2      	beq.n	801cf8a <rcl_get_default_domain_id+0x3a>
 801cfa4:	e7e0      	b.n	801cf68 <rcl_get_default_domain_id+0x18>
 801cfa6:	f001 f953 	bl	801e250 <__errno>
 801cfaa:	6803      	ldr	r3, [r0, #0]
 801cfac:	2b22      	cmp	r3, #34	@ 0x22
 801cfae:	d1ec      	bne.n	801cf8a <rcl_get_default_domain_id+0x3a>
 801cfb0:	e7da      	b.n	801cf68 <rcl_get_default_domain_id+0x18>
 801cfb2:	bf00      	nop
 801cfb4:	0801fc78 	.word	0x0801fc78

0801cfb8 <rcl_expand_topic_name>:
 801cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfbc:	b08d      	sub	sp, #52	@ 0x34
 801cfbe:	4698      	mov	r8, r3
 801cfc0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cfc2:	9207      	str	r2, [sp, #28]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	bf18      	it	ne
 801cfc8:	f1b8 0f00 	cmpne.w	r8, #0
 801cfcc:	bf0c      	ite	eq
 801cfce:	2301      	moveq	r3, #1
 801cfd0:	2300      	movne	r3, #0
 801cfd2:	2a00      	cmp	r2, #0
 801cfd4:	bf08      	it	eq
 801cfd6:	f043 0301 	orreq.w	r3, r3, #1
 801cfda:	2900      	cmp	r1, #0
 801cfdc:	bf08      	it	eq
 801cfde:	f043 0301 	orreq.w	r3, r3, #1
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d13d      	bne.n	801d062 <rcl_expand_topic_name+0xaa>
 801cfe6:	fab0 f280 	clz	r2, r0
 801cfea:	4604      	mov	r4, r0
 801cfec:	0952      	lsrs	r2, r2, #5
 801cfee:	2800      	cmp	r0, #0
 801cff0:	d037      	beq.n	801d062 <rcl_expand_topic_name+0xaa>
 801cff2:	460f      	mov	r7, r1
 801cff4:	a90b      	add	r1, sp, #44	@ 0x2c
 801cff6:	f000 fa51 	bl	801d49c <rcl_validate_topic_name>
 801cffa:	4605      	mov	r5, r0
 801cffc:	bb68      	cbnz	r0, 801d05a <rcl_expand_topic_name+0xa2>
 801cffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d000:	2b00      	cmp	r3, #0
 801d002:	d137      	bne.n	801d074 <rcl_expand_topic_name+0xbc>
 801d004:	4602      	mov	r2, r0
 801d006:	a90b      	add	r1, sp, #44	@ 0x2c
 801d008:	4638      	mov	r0, r7
 801d00a:	f7fe f91f 	bl	801b24c <rmw_validate_node_name>
 801d00e:	bb68      	cbnz	r0, 801d06c <rcl_expand_topic_name+0xb4>
 801d010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d012:	2b00      	cmp	r3, #0
 801d014:	d133      	bne.n	801d07e <rcl_expand_topic_name+0xc6>
 801d016:	462a      	mov	r2, r5
 801d018:	a90b      	add	r1, sp, #44	@ 0x2c
 801d01a:	9807      	ldr	r0, [sp, #28]
 801d01c:	f7fe f8f8 	bl	801b210 <rmw_validate_namespace>
 801d020:	bb20      	cbnz	r0, 801d06c <rcl_expand_topic_name+0xb4>
 801d022:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d024:	2d00      	cmp	r5, #0
 801d026:	f040 80a2 	bne.w	801d16e <rcl_expand_topic_name+0x1b6>
 801d02a:	217b      	movs	r1, #123	@ 0x7b
 801d02c:	4620      	mov	r0, r4
 801d02e:	f001 f883 	bl	801e138 <strchr>
 801d032:	7823      	ldrb	r3, [r4, #0]
 801d034:	4681      	mov	r9, r0
 801d036:	bb20      	cbnz	r0, 801d082 <rcl_expand_topic_name+0xca>
 801d038:	2b2f      	cmp	r3, #47	@ 0x2f
 801d03a:	d122      	bne.n	801d082 <rcl_expand_topic_name+0xca>
 801d03c:	ab19      	add	r3, sp, #100	@ 0x64
 801d03e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d042:	ab16      	add	r3, sp, #88	@ 0x58
 801d044:	e88d 0003 	stmia.w	sp, {r0, r1}
 801d048:	4620      	mov	r0, r4
 801d04a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d04c:	f7fd fdfe 	bl	801ac4c <rcutils_strdup>
 801d050:	2800      	cmp	r0, #0
 801d052:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d054:	bf08      	it	eq
 801d056:	250a      	moveq	r5, #10
 801d058:	6018      	str	r0, [r3, #0]
 801d05a:	4628      	mov	r0, r5
 801d05c:	b00d      	add	sp, #52	@ 0x34
 801d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d062:	250b      	movs	r5, #11
 801d064:	4628      	mov	r0, r5
 801d066:	b00d      	add	sp, #52	@ 0x34
 801d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d06c:	f7fa fe46 	bl	8017cfc <rcl_convert_rmw_ret_to_rcl_ret>
 801d070:	4605      	mov	r5, r0
 801d072:	e7f2      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d074:	2567      	movs	r5, #103	@ 0x67
 801d076:	4628      	mov	r0, r5
 801d078:	b00d      	add	sp, #52	@ 0x34
 801d07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d07e:	25c9      	movs	r5, #201	@ 0xc9
 801d080:	e7eb      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d082:	2b7e      	cmp	r3, #126	@ 0x7e
 801d084:	d075      	beq.n	801d172 <rcl_expand_topic_name+0x1ba>
 801d086:	f1b9 0f00 	cmp.w	r9, #0
 801d08a:	f000 80c2 	beq.w	801d212 <rcl_expand_topic_name+0x25a>
 801d08e:	2300      	movs	r3, #0
 801d090:	46a2      	mov	sl, r4
 801d092:	461e      	mov	r6, r3
 801d094:	9508      	str	r5, [sp, #32]
 801d096:	4655      	mov	r5, sl
 801d098:	9409      	str	r4, [sp, #36]	@ 0x24
 801d09a:	46b2      	mov	sl, r6
 801d09c:	464c      	mov	r4, r9
 801d09e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d0a2:	2c00      	cmp	r4, #0
 801d0a4:	f000 80ae 	beq.w	801d204 <rcl_expand_topic_name+0x24c>
 801d0a8:	217d      	movs	r1, #125	@ 0x7d
 801d0aa:	4628      	mov	r0, r5
 801d0ac:	f001 f844 	bl	801e138 <strchr>
 801d0b0:	eba0 0904 	sub.w	r9, r0, r4
 801d0b4:	4621      	mov	r1, r4
 801d0b6:	4869      	ldr	r0, [pc, #420]	@ (801d25c <rcl_expand_topic_name+0x2a4>)
 801d0b8:	f109 0601 	add.w	r6, r9, #1
 801d0bc:	4632      	mov	r2, r6
 801d0be:	f001 f848 	bl	801e152 <strncmp>
 801d0c2:	2800      	cmp	r0, #0
 801d0c4:	d051      	beq.n	801d16a <rcl_expand_topic_name+0x1b2>
 801d0c6:	4632      	mov	r2, r6
 801d0c8:	4621      	mov	r1, r4
 801d0ca:	4865      	ldr	r0, [pc, #404]	@ (801d260 <rcl_expand_topic_name+0x2a8>)
 801d0cc:	f001 f841 	bl	801e152 <strncmp>
 801d0d0:	b128      	cbz	r0, 801d0de <rcl_expand_topic_name+0x126>
 801d0d2:	4632      	mov	r2, r6
 801d0d4:	4621      	mov	r1, r4
 801d0d6:	4863      	ldr	r0, [pc, #396]	@ (801d264 <rcl_expand_topic_name+0x2ac>)
 801d0d8:	f001 f83b 	bl	801e152 <strncmp>
 801d0dc:	bb38      	cbnz	r0, 801d12e <rcl_expand_topic_name+0x176>
 801d0de:	46d9      	mov	r9, fp
 801d0e0:	ab18      	add	r3, sp, #96	@ 0x60
 801d0e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d0e6:	ab16      	add	r3, sp, #88	@ 0x58
 801d0e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801d0ec:	4620      	mov	r0, r4
 801d0ee:	4631      	mov	r1, r6
 801d0f0:	cb0c      	ldmia	r3, {r2, r3}
 801d0f2:	f7fd fdcd 	bl	801ac90 <rcutils_strndup>
 801d0f6:	4604      	mov	r4, r0
 801d0f8:	2800      	cmp	r0, #0
 801d0fa:	f000 80a3 	beq.w	801d244 <rcl_expand_topic_name+0x28c>
 801d0fe:	464a      	mov	r2, r9
 801d100:	4628      	mov	r0, r5
 801d102:	ab16      	add	r3, sp, #88	@ 0x58
 801d104:	4621      	mov	r1, r4
 801d106:	f7fd fca1 	bl	801aa4c <rcutils_repl_str>
 801d10a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d10c:	4605      	mov	r5, r0
 801d10e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d110:	4620      	mov	r0, r4
 801d112:	4798      	blx	r3
 801d114:	4650      	mov	r0, sl
 801d116:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d11a:	4798      	blx	r3
 801d11c:	2d00      	cmp	r5, #0
 801d11e:	d06c      	beq.n	801d1fa <rcl_expand_topic_name+0x242>
 801d120:	217b      	movs	r1, #123	@ 0x7b
 801d122:	4628      	mov	r0, r5
 801d124:	f001 f808 	bl	801e138 <strchr>
 801d128:	46aa      	mov	sl, r5
 801d12a:	4604      	mov	r4, r0
 801d12c:	e7b9      	b.n	801d0a2 <rcl_expand_topic_name+0xea>
 801d12e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801d132:	1c61      	adds	r1, r4, #1
 801d134:	4640      	mov	r0, r8
 801d136:	f7fd fec3 	bl	801aec0 <rcutils_string_map_getn>
 801d13a:	4681      	mov	r9, r0
 801d13c:	2800      	cmp	r0, #0
 801d13e:	d1cf      	bne.n	801d0e0 <rcl_expand_topic_name+0x128>
 801d140:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d142:	aa18      	add	r2, sp, #96	@ 0x60
 801d144:	2569      	movs	r5, #105	@ 0x69
 801d146:	6018      	str	r0, [r3, #0]
 801d148:	ab16      	add	r3, sp, #88	@ 0x58
 801d14a:	ca07      	ldmia	r2, {r0, r1, r2}
 801d14c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801d150:	4631      	mov	r1, r6
 801d152:	4620      	mov	r0, r4
 801d154:	cb0c      	ldmia	r3, {r2, r3}
 801d156:	f7fd fd9b 	bl	801ac90 <rcutils_strndup>
 801d15a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d15c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d15e:	4798      	blx	r3
 801d160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d162:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d164:	4650      	mov	r0, sl
 801d166:	4798      	blx	r3
 801d168:	e777      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d16a:	46b9      	mov	r9, r7
 801d16c:	e7b8      	b.n	801d0e0 <rcl_expand_topic_name+0x128>
 801d16e:	25ca      	movs	r5, #202	@ 0xca
 801d170:	e773      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d172:	9e07      	ldr	r6, [sp, #28]
 801d174:	4630      	mov	r0, r6
 801d176:	f7e3 f8bd 	bl	80002f4 <strlen>
 801d17a:	4a3b      	ldr	r2, [pc, #236]	@ (801d268 <rcl_expand_topic_name+0x2b0>)
 801d17c:	4b3b      	ldr	r3, [pc, #236]	@ (801d26c <rcl_expand_topic_name+0x2b4>)
 801d17e:	9603      	str	r6, [sp, #12]
 801d180:	2801      	cmp	r0, #1
 801d182:	bf18      	it	ne
 801d184:	4613      	movne	r3, r2
 801d186:	9704      	str	r7, [sp, #16]
 801d188:	9302      	str	r3, [sp, #8]
 801d18a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d18c:	9300      	str	r3, [sp, #0]
 801d18e:	1c63      	adds	r3, r4, #1
 801d190:	9305      	str	r3, [sp, #20]
 801d192:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d196:	9301      	str	r3, [sp, #4]
 801d198:	ab16      	add	r3, sp, #88	@ 0x58
 801d19a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d19c:	f7fd fc1c 	bl	801a9d8 <rcutils_format_string_limit>
 801d1a0:	4606      	mov	r6, r0
 801d1a2:	b350      	cbz	r0, 801d1fa <rcl_expand_topic_name+0x242>
 801d1a4:	f1b9 0f00 	cmp.w	r9, #0
 801d1a8:	d005      	beq.n	801d1b6 <rcl_expand_topic_name+0x1fe>
 801d1aa:	217b      	movs	r1, #123	@ 0x7b
 801d1ac:	46b2      	mov	sl, r6
 801d1ae:	f000 ffc3 	bl	801e138 <strchr>
 801d1b2:	4681      	mov	r9, r0
 801d1b4:	e76e      	b.n	801d094 <rcl_expand_topic_name+0xdc>
 801d1b6:	7833      	ldrb	r3, [r6, #0]
 801d1b8:	2b2f      	cmp	r3, #47	@ 0x2f
 801d1ba:	d01b      	beq.n	801d1f4 <rcl_expand_topic_name+0x23c>
 801d1bc:	9c07      	ldr	r4, [sp, #28]
 801d1be:	4620      	mov	r0, r4
 801d1c0:	f7e3 f898 	bl	80002f4 <strlen>
 801d1c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d1c8:	4a29      	ldr	r2, [pc, #164]	@ (801d270 <rcl_expand_topic_name+0x2b8>)
 801d1ca:	9301      	str	r3, [sp, #4]
 801d1cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d1ce:	9604      	str	r6, [sp, #16]
 801d1d0:	9300      	str	r3, [sp, #0]
 801d1d2:	4b28      	ldr	r3, [pc, #160]	@ (801d274 <rcl_expand_topic_name+0x2bc>)
 801d1d4:	9403      	str	r4, [sp, #12]
 801d1d6:	2801      	cmp	r0, #1
 801d1d8:	bf18      	it	ne
 801d1da:	4613      	movne	r3, r2
 801d1dc:	9302      	str	r3, [sp, #8]
 801d1de:	ab16      	add	r3, sp, #88	@ 0x58
 801d1e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d1e2:	f7fd fbf9 	bl	801a9d8 <rcutils_format_string_limit>
 801d1e6:	4603      	mov	r3, r0
 801d1e8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d1ea:	4630      	mov	r0, r6
 801d1ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d1ee:	461e      	mov	r6, r3
 801d1f0:	4790      	blx	r2
 801d1f2:	b116      	cbz	r6, 801d1fa <rcl_expand_topic_name+0x242>
 801d1f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d1f6:	601e      	str	r6, [r3, #0]
 801d1f8:	e72f      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d1fe:	250a      	movs	r5, #10
 801d200:	6013      	str	r3, [r2, #0]
 801d202:	e72a      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d204:	4653      	mov	r3, sl
 801d206:	4656      	mov	r6, sl
 801d208:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d1d2      	bne.n	801d1b6 <rcl_expand_topic_name+0x1fe>
 801d210:	7823      	ldrb	r3, [r4, #0]
 801d212:	2b2f      	cmp	r3, #47	@ 0x2f
 801d214:	d01e      	beq.n	801d254 <rcl_expand_topic_name+0x29c>
 801d216:	9e07      	ldr	r6, [sp, #28]
 801d218:	4630      	mov	r0, r6
 801d21a:	f7e3 f86b 	bl	80002f4 <strlen>
 801d21e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d220:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d224:	9603      	str	r6, [sp, #12]
 801d226:	9404      	str	r4, [sp, #16]
 801d228:	e9cd 2300 	strd	r2, r3, [sp]
 801d22c:	4a10      	ldr	r2, [pc, #64]	@ (801d270 <rcl_expand_topic_name+0x2b8>)
 801d22e:	4b11      	ldr	r3, [pc, #68]	@ (801d274 <rcl_expand_topic_name+0x2bc>)
 801d230:	2801      	cmp	r0, #1
 801d232:	bf18      	it	ne
 801d234:	4613      	movne	r3, r2
 801d236:	9302      	str	r3, [sp, #8]
 801d238:	ab16      	add	r3, sp, #88	@ 0x58
 801d23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d23c:	f7fd fbcc 	bl	801a9d8 <rcutils_format_string_limit>
 801d240:	4606      	mov	r6, r0
 801d242:	e7d6      	b.n	801d1f2 <rcl_expand_topic_name+0x23a>
 801d244:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801d248:	4650      	mov	r0, sl
 801d24a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d24c:	6014      	str	r4, [r2, #0]
 801d24e:	250a      	movs	r5, #10
 801d250:	4798      	blx	r3
 801d252:	e702      	b.n	801d05a <rcl_expand_topic_name+0xa2>
 801d254:	2300      	movs	r3, #0
 801d256:	461e      	mov	r6, r3
 801d258:	e7cc      	b.n	801d1f4 <rcl_expand_topic_name+0x23c>
 801d25a:	bf00      	nop
 801d25c:	0801fc90 	.word	0x0801fc90
 801d260:	0801fc98 	.word	0x0801fc98
 801d264:	0801fca0 	.word	0x0801fca0
 801d268:	0801fc88 	.word	0x0801fc88
 801d26c:	0801f1f4 	.word	0x0801f1f4
 801d270:	0801f1bc 	.word	0x0801f1bc
 801d274:	0801f204 	.word	0x0801f204

0801d278 <rcl_get_default_topic_name_substitutions>:
 801d278:	2800      	cmp	r0, #0
 801d27a:	bf0c      	ite	eq
 801d27c:	200b      	moveq	r0, #11
 801d27e:	2000      	movne	r0, #0
 801d280:	4770      	bx	lr
 801d282:	bf00      	nop

0801d284 <rcl_get_zero_initialized_guard_condition>:
 801d284:	4a03      	ldr	r2, [pc, #12]	@ (801d294 <rcl_get_zero_initialized_guard_condition+0x10>)
 801d286:	4603      	mov	r3, r0
 801d288:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d28c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d290:	4618      	mov	r0, r3
 801d292:	4770      	bx	lr
 801d294:	0801fcac 	.word	0x0801fcac

0801d298 <rcl_guard_condition_init>:
 801d298:	b082      	sub	sp, #8
 801d29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d29c:	b087      	sub	sp, #28
 801d29e:	4604      	mov	r4, r0
 801d2a0:	460d      	mov	r5, r1
 801d2a2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801d2a6:	f10d 0c04 	add.w	ip, sp, #4
 801d2aa:	e9ce 2300 	strd	r2, r3, [lr]
 801d2ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d2b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2b6:	f8de 3000 	ldr.w	r3, [lr]
 801d2ba:	a801      	add	r0, sp, #4
 801d2bc:	f8cc 3000 	str.w	r3, [ip]
 801d2c0:	f7f4 fa0e 	bl	80116e0 <rcutils_allocator_is_valid>
 801d2c4:	b354      	cbz	r4, 801d31c <rcl_guard_condition_init+0x84>
 801d2c6:	f080 0301 	eor.w	r3, r0, #1
 801d2ca:	b2db      	uxtb	r3, r3
 801d2cc:	bb33      	cbnz	r3, 801d31c <rcl_guard_condition_init+0x84>
 801d2ce:	6866      	ldr	r6, [r4, #4]
 801d2d0:	b9ee      	cbnz	r6, 801d30e <rcl_guard_condition_init+0x76>
 801d2d2:	b31d      	cbz	r5, 801d31c <rcl_guard_condition_init+0x84>
 801d2d4:	4628      	mov	r0, r5
 801d2d6:	f7fa fd2f 	bl	8017d38 <rcl_context_is_valid>
 801d2da:	b308      	cbz	r0, 801d320 <rcl_guard_condition_init+0x88>
 801d2dc:	9b01      	ldr	r3, [sp, #4]
 801d2de:	201c      	movs	r0, #28
 801d2e0:	9905      	ldr	r1, [sp, #20]
 801d2e2:	4798      	blx	r3
 801d2e4:	4607      	mov	r7, r0
 801d2e6:	6060      	str	r0, [r4, #4]
 801d2e8:	b310      	cbz	r0, 801d330 <rcl_guard_condition_init+0x98>
 801d2ea:	6828      	ldr	r0, [r5, #0]
 801d2ec:	3028      	adds	r0, #40	@ 0x28
 801d2ee:	f000 f999 	bl	801d624 <rmw_create_guard_condition>
 801d2f2:	6038      	str	r0, [r7, #0]
 801d2f4:	6860      	ldr	r0, [r4, #4]
 801d2f6:	6807      	ldr	r7, [r0, #0]
 801d2f8:	b1a7      	cbz	r7, 801d324 <rcl_guard_condition_init+0x8c>
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	ac01      	add	r4, sp, #4
 801d2fe:	f100 0708 	add.w	r7, r0, #8
 801d302:	7103      	strb	r3, [r0, #4]
 801d304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d306:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d308:	6823      	ldr	r3, [r4, #0]
 801d30a:	603b      	str	r3, [r7, #0]
 801d30c:	e000      	b.n	801d310 <rcl_guard_condition_init+0x78>
 801d30e:	2664      	movs	r6, #100	@ 0x64
 801d310:	4630      	mov	r0, r6
 801d312:	b007      	add	sp, #28
 801d314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d318:	b002      	add	sp, #8
 801d31a:	4770      	bx	lr
 801d31c:	260b      	movs	r6, #11
 801d31e:	e7f7      	b.n	801d310 <rcl_guard_condition_init+0x78>
 801d320:	2665      	movs	r6, #101	@ 0x65
 801d322:	e7f5      	b.n	801d310 <rcl_guard_condition_init+0x78>
 801d324:	9b02      	ldr	r3, [sp, #8]
 801d326:	2601      	movs	r6, #1
 801d328:	9905      	ldr	r1, [sp, #20]
 801d32a:	4798      	blx	r3
 801d32c:	6067      	str	r7, [r4, #4]
 801d32e:	e7ef      	b.n	801d310 <rcl_guard_condition_init+0x78>
 801d330:	260a      	movs	r6, #10
 801d332:	e7ed      	b.n	801d310 <rcl_guard_condition_init+0x78>

0801d334 <rcl_guard_condition_init_from_rmw>:
 801d334:	b082      	sub	sp, #8
 801d336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d33a:	b086      	sub	sp, #24
 801d33c:	4604      	mov	r4, r0
 801d33e:	460e      	mov	r6, r1
 801d340:	4615      	mov	r5, r2
 801d342:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801d346:	f10d 0e04 	add.w	lr, sp, #4
 801d34a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801d34e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d352:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d356:	f8dc 3000 	ldr.w	r3, [ip]
 801d35a:	a801      	add	r0, sp, #4
 801d35c:	f8ce 3000 	str.w	r3, [lr]
 801d360:	f7f4 f9be 	bl	80116e0 <rcutils_allocator_is_valid>
 801d364:	f080 0301 	eor.w	r3, r0, #1
 801d368:	b2db      	uxtb	r3, r3
 801d36a:	bb3b      	cbnz	r3, 801d3bc <rcl_guard_condition_init_from_rmw+0x88>
 801d36c:	b334      	cbz	r4, 801d3bc <rcl_guard_condition_init_from_rmw+0x88>
 801d36e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801d372:	f1b8 0f00 	cmp.w	r8, #0
 801d376:	d11a      	bne.n	801d3ae <rcl_guard_condition_init_from_rmw+0x7a>
 801d378:	b305      	cbz	r5, 801d3bc <rcl_guard_condition_init_from_rmw+0x88>
 801d37a:	4628      	mov	r0, r5
 801d37c:	f7fa fcdc 	bl	8017d38 <rcl_context_is_valid>
 801d380:	b1f0      	cbz	r0, 801d3c0 <rcl_guard_condition_init_from_rmw+0x8c>
 801d382:	9b01      	ldr	r3, [sp, #4]
 801d384:	201c      	movs	r0, #28
 801d386:	9905      	ldr	r1, [sp, #20]
 801d388:	4798      	blx	r3
 801d38a:	4607      	mov	r7, r0
 801d38c:	6060      	str	r0, [r4, #4]
 801d38e:	b320      	cbz	r0, 801d3da <rcl_guard_condition_init_from_rmw+0xa6>
 801d390:	b1c6      	cbz	r6, 801d3c4 <rcl_guard_condition_init_from_rmw+0x90>
 801d392:	6006      	str	r6, [r0, #0]
 801d394:	f880 8004 	strb.w	r8, [r0, #4]
 801d398:	ac01      	add	r4, sp, #4
 801d39a:	f107 0c08 	add.w	ip, r7, #8
 801d39e:	2500      	movs	r5, #0
 801d3a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d3a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d3a6:	6823      	ldr	r3, [r4, #0]
 801d3a8:	f8cc 3000 	str.w	r3, [ip]
 801d3ac:	e000      	b.n	801d3b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801d3ae:	2564      	movs	r5, #100	@ 0x64
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	b006      	add	sp, #24
 801d3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d3b8:	b002      	add	sp, #8
 801d3ba:	4770      	bx	lr
 801d3bc:	250b      	movs	r5, #11
 801d3be:	e7f7      	b.n	801d3b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801d3c0:	2565      	movs	r5, #101	@ 0x65
 801d3c2:	e7f5      	b.n	801d3b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801d3c4:	6828      	ldr	r0, [r5, #0]
 801d3c6:	3028      	adds	r0, #40	@ 0x28
 801d3c8:	f000 f92c 	bl	801d624 <rmw_create_guard_condition>
 801d3cc:	6038      	str	r0, [r7, #0]
 801d3ce:	6867      	ldr	r7, [r4, #4]
 801d3d0:	683e      	ldr	r6, [r7, #0]
 801d3d2:	b126      	cbz	r6, 801d3de <rcl_guard_condition_init_from_rmw+0xaa>
 801d3d4:	2301      	movs	r3, #1
 801d3d6:	713b      	strb	r3, [r7, #4]
 801d3d8:	e7de      	b.n	801d398 <rcl_guard_condition_init_from_rmw+0x64>
 801d3da:	250a      	movs	r5, #10
 801d3dc:	e7e8      	b.n	801d3b0 <rcl_guard_condition_init_from_rmw+0x7c>
 801d3de:	9b02      	ldr	r3, [sp, #8]
 801d3e0:	4638      	mov	r0, r7
 801d3e2:	9905      	ldr	r1, [sp, #20]
 801d3e4:	2501      	movs	r5, #1
 801d3e6:	4798      	blx	r3
 801d3e8:	6066      	str	r6, [r4, #4]
 801d3ea:	e7e1      	b.n	801d3b0 <rcl_guard_condition_init_from_rmw+0x7c>

0801d3ec <rcl_guard_condition_fini>:
 801d3ec:	b570      	push	{r4, r5, r6, lr}
 801d3ee:	b082      	sub	sp, #8
 801d3f0:	b1f0      	cbz	r0, 801d430 <rcl_guard_condition_fini+0x44>
 801d3f2:	6843      	ldr	r3, [r0, #4]
 801d3f4:	4604      	mov	r4, r0
 801d3f6:	b163      	cbz	r3, 801d412 <rcl_guard_condition_fini+0x26>
 801d3f8:	6818      	ldr	r0, [r3, #0]
 801d3fa:	68de      	ldr	r6, [r3, #12]
 801d3fc:	6999      	ldr	r1, [r3, #24]
 801d3fe:	b160      	cbz	r0, 801d41a <rcl_guard_condition_fini+0x2e>
 801d400:	791d      	ldrb	r5, [r3, #4]
 801d402:	b965      	cbnz	r5, 801d41e <rcl_guard_condition_fini+0x32>
 801d404:	4618      	mov	r0, r3
 801d406:	47b0      	blx	r6
 801d408:	2300      	movs	r3, #0
 801d40a:	4628      	mov	r0, r5
 801d40c:	6063      	str	r3, [r4, #4]
 801d40e:	b002      	add	sp, #8
 801d410:	bd70      	pop	{r4, r5, r6, pc}
 801d412:	461d      	mov	r5, r3
 801d414:	4628      	mov	r0, r5
 801d416:	b002      	add	sp, #8
 801d418:	bd70      	pop	{r4, r5, r6, pc}
 801d41a:	4605      	mov	r5, r0
 801d41c:	e7f2      	b.n	801d404 <rcl_guard_condition_fini+0x18>
 801d41e:	9101      	str	r1, [sp, #4]
 801d420:	f000 f916 	bl	801d650 <rmw_destroy_guard_condition>
 801d424:	1e05      	subs	r5, r0, #0
 801d426:	6863      	ldr	r3, [r4, #4]
 801d428:	9901      	ldr	r1, [sp, #4]
 801d42a:	bf18      	it	ne
 801d42c:	2501      	movne	r5, #1
 801d42e:	e7e9      	b.n	801d404 <rcl_guard_condition_fini+0x18>
 801d430:	250b      	movs	r5, #11
 801d432:	4628      	mov	r0, r5
 801d434:	b002      	add	sp, #8
 801d436:	bd70      	pop	{r4, r5, r6, pc}

0801d438 <rcl_guard_condition_get_default_options>:
 801d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d43a:	b087      	sub	sp, #28
 801d43c:	4606      	mov	r6, r0
 801d43e:	4c0b      	ldr	r4, [pc, #44]	@ (801d46c <rcl_guard_condition_get_default_options+0x34>)
 801d440:	4668      	mov	r0, sp
 801d442:	f7f4 f93f 	bl	80116c4 <rcutils_get_default_allocator>
 801d446:	46ee      	mov	lr, sp
 801d448:	46a4      	mov	ip, r4
 801d44a:	4625      	mov	r5, r4
 801d44c:	4634      	mov	r4, r6
 801d44e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d458:	f8de 7000 	ldr.w	r7, [lr]
 801d45c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d45e:	4630      	mov	r0, r6
 801d460:	f8cc 7000 	str.w	r7, [ip]
 801d464:	6027      	str	r7, [r4, #0]
 801d466:	b007      	add	sp, #28
 801d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d46a:	bf00      	nop
 801d46c:	24013060 	.word	0x24013060

0801d470 <rcl_trigger_guard_condition>:
 801d470:	b148      	cbz	r0, 801d486 <rcl_trigger_guard_condition+0x16>
 801d472:	b508      	push	{r3, lr}
 801d474:	6843      	ldr	r3, [r0, #4]
 801d476:	b143      	cbz	r3, 801d48a <rcl_trigger_guard_condition+0x1a>
 801d478:	6818      	ldr	r0, [r3, #0]
 801d47a:	f000 f8fd 	bl	801d678 <rmw_trigger_guard_condition>
 801d47e:	3800      	subs	r0, #0
 801d480:	bf18      	it	ne
 801d482:	2001      	movne	r0, #1
 801d484:	bd08      	pop	{r3, pc}
 801d486:	200b      	movs	r0, #11
 801d488:	4770      	bx	lr
 801d48a:	200b      	movs	r0, #11
 801d48c:	bd08      	pop	{r3, pc}
 801d48e:	bf00      	nop

0801d490 <rcl_guard_condition_get_rmw_handle>:
 801d490:	b110      	cbz	r0, 801d498 <rcl_guard_condition_get_rmw_handle+0x8>
 801d492:	6840      	ldr	r0, [r0, #4]
 801d494:	b100      	cbz	r0, 801d498 <rcl_guard_condition_get_rmw_handle+0x8>
 801d496:	6800      	ldr	r0, [r0, #0]
 801d498:	4770      	bx	lr
 801d49a:	bf00      	nop

0801d49c <rcl_validate_topic_name>:
 801d49c:	2800      	cmp	r0, #0
 801d49e:	f000 8089 	beq.w	801d5b4 <rcl_validate_topic_name+0x118>
 801d4a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a6:	460e      	mov	r6, r1
 801d4a8:	2900      	cmp	r1, #0
 801d4aa:	f000 8085 	beq.w	801d5b8 <rcl_validate_topic_name+0x11c>
 801d4ae:	4604      	mov	r4, r0
 801d4b0:	4617      	mov	r7, r2
 801d4b2:	f7e2 ff1f 	bl	80002f4 <strlen>
 801d4b6:	b1b0      	cbz	r0, 801d4e6 <rcl_validate_topic_name+0x4a>
 801d4b8:	f894 e000 	ldrb.w	lr, [r4]
 801d4bc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801d620 <rcl_validate_topic_name+0x184>
 801d4c0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801d4c4:	f013 0304 	ands.w	r3, r3, #4
 801d4c8:	d139      	bne.n	801d53e <rcl_validate_topic_name+0xa2>
 801d4ca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801d4ce:	f814 2008 	ldrb.w	r2, [r4, r8]
 801d4d2:	2a2f      	cmp	r2, #47	@ 0x2f
 801d4d4:	d10f      	bne.n	801d4f6 <rcl_validate_topic_name+0x5a>
 801d4d6:	2202      	movs	r2, #2
 801d4d8:	6032      	str	r2, [r6, #0]
 801d4da:	b3a7      	cbz	r7, 801d546 <rcl_validate_topic_name+0xaa>
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f8c7 8000 	str.w	r8, [r7]
 801d4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4e6:	2301      	movs	r3, #1
 801d4e8:	6033      	str	r3, [r6, #0]
 801d4ea:	b367      	cbz	r7, 801d546 <rcl_validate_topic_name+0xaa>
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	603b      	str	r3, [r7, #0]
 801d4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4f6:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801d4fa:	461d      	mov	r5, r3
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801d502:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801d506:	f1b9 0f09 	cmp.w	r9, #9
 801d50a:	d91f      	bls.n	801d54c <rcl_validate_topic_name+0xb0>
 801d50c:	f022 0920 	bic.w	r9, r2, #32
 801d510:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801d514:	f1b9 0f19 	cmp.w	r9, #25
 801d518:	d918      	bls.n	801d54c <rcl_validate_topic_name+0xb0>
 801d51a:	2a5f      	cmp	r2, #95	@ 0x5f
 801d51c:	d024      	beq.n	801d568 <rcl_validate_topic_name+0xcc>
 801d51e:	2a2f      	cmp	r2, #47	@ 0x2f
 801d520:	d058      	beq.n	801d5d4 <rcl_validate_topic_name+0x138>
 801d522:	2a7e      	cmp	r2, #126	@ 0x7e
 801d524:	d04a      	beq.n	801d5bc <rcl_validate_topic_name+0x120>
 801d526:	2a7b      	cmp	r2, #123	@ 0x7b
 801d528:	d05b      	beq.n	801d5e2 <rcl_validate_topic_name+0x146>
 801d52a:	2a7d      	cmp	r2, #125	@ 0x7d
 801d52c:	d169      	bne.n	801d602 <rcl_validate_topic_name+0x166>
 801d52e:	2d00      	cmp	r5, #0
 801d530:	d15c      	bne.n	801d5ec <rcl_validate_topic_name+0x150>
 801d532:	2305      	movs	r3, #5
 801d534:	6033      	str	r3, [r6, #0]
 801d536:	b137      	cbz	r7, 801d546 <rcl_validate_topic_name+0xaa>
 801d538:	2000      	movs	r0, #0
 801d53a:	6039      	str	r1, [r7, #0]
 801d53c:	e7d9      	b.n	801d4f2 <rcl_validate_topic_name+0x56>
 801d53e:	2304      	movs	r3, #4
 801d540:	6033      	str	r3, [r6, #0]
 801d542:	2f00      	cmp	r7, #0
 801d544:	d1d2      	bne.n	801d4ec <rcl_validate_topic_name+0x50>
 801d546:	2000      	movs	r0, #0
 801d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d54c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d550:	0752      	lsls	r2, r2, #29
 801d552:	d509      	bpl.n	801d568 <rcl_validate_topic_name+0xcc>
 801d554:	2900      	cmp	r1, #0
 801d556:	bf0c      	ite	eq
 801d558:	2200      	moveq	r2, #0
 801d55a:	f005 0201 	andne.w	r2, r5, #1
 801d55e:	b11a      	cbz	r2, 801d568 <rcl_validate_topic_name+0xcc>
 801d560:	1e4d      	subs	r5, r1, #1
 801d562:	429d      	cmp	r5, r3
 801d564:	d031      	beq.n	801d5ca <rcl_validate_topic_name+0x12e>
 801d566:	4615      	mov	r5, r2
 801d568:	3101      	adds	r1, #1
 801d56a:	4288      	cmp	r0, r1
 801d56c:	d1c7      	bne.n	801d4fe <rcl_validate_topic_name+0x62>
 801d56e:	2d00      	cmp	r5, #0
 801d570:	d142      	bne.n	801d5f8 <rcl_validate_topic_name+0x15c>
 801d572:	4628      	mov	r0, r5
 801d574:	2301      	movs	r3, #1
 801d576:	e00c      	b.n	801d592 <rcl_validate_topic_name+0xf6>
 801d578:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801d57c:	d101      	bne.n	801d582 <rcl_validate_topic_name+0xe6>
 801d57e:	2801      	cmp	r0, #1
 801d580:	d047      	beq.n	801d612 <rcl_validate_topic_name+0x176>
 801d582:	1c5a      	adds	r2, r3, #1
 801d584:	428b      	cmp	r3, r1
 801d586:	f100 0001 	add.w	r0, r0, #1
 801d58a:	f104 0401 	add.w	r4, r4, #1
 801d58e:	4613      	mov	r3, r2
 801d590:	d22e      	bcs.n	801d5f0 <rcl_validate_topic_name+0x154>
 801d592:	4580      	cmp	r8, r0
 801d594:	d0f5      	beq.n	801d582 <rcl_validate_topic_name+0xe6>
 801d596:	7822      	ldrb	r2, [r4, #0]
 801d598:	2a2f      	cmp	r2, #47	@ 0x2f
 801d59a:	d1ed      	bne.n	801d578 <rcl_validate_topic_name+0xdc>
 801d59c:	7862      	ldrb	r2, [r4, #1]
 801d59e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d5a2:	0752      	lsls	r2, r2, #29
 801d5a4:	d5ed      	bpl.n	801d582 <rcl_validate_topic_name+0xe6>
 801d5a6:	2204      	movs	r2, #4
 801d5a8:	6032      	str	r2, [r6, #0]
 801d5aa:	2f00      	cmp	r7, #0
 801d5ac:	d0cb      	beq.n	801d546 <rcl_validate_topic_name+0xaa>
 801d5ae:	2000      	movs	r0, #0
 801d5b0:	603b      	str	r3, [r7, #0]
 801d5b2:	e79e      	b.n	801d4f2 <rcl_validate_topic_name+0x56>
 801d5b4:	200b      	movs	r0, #11
 801d5b6:	4770      	bx	lr
 801d5b8:	200b      	movs	r0, #11
 801d5ba:	e79a      	b.n	801d4f2 <rcl_validate_topic_name+0x56>
 801d5bc:	2900      	cmp	r1, #0
 801d5be:	d0d3      	beq.n	801d568 <rcl_validate_topic_name+0xcc>
 801d5c0:	2306      	movs	r3, #6
 801d5c2:	6033      	str	r3, [r6, #0]
 801d5c4:	2f00      	cmp	r7, #0
 801d5c6:	d1b7      	bne.n	801d538 <rcl_validate_topic_name+0x9c>
 801d5c8:	e7bd      	b.n	801d546 <rcl_validate_topic_name+0xaa>
 801d5ca:	2309      	movs	r3, #9
 801d5cc:	6033      	str	r3, [r6, #0]
 801d5ce:	2f00      	cmp	r7, #0
 801d5d0:	d1b2      	bne.n	801d538 <rcl_validate_topic_name+0x9c>
 801d5d2:	e7b8      	b.n	801d546 <rcl_validate_topic_name+0xaa>
 801d5d4:	2d00      	cmp	r5, #0
 801d5d6:	d0c7      	beq.n	801d568 <rcl_validate_topic_name+0xcc>
 801d5d8:	2308      	movs	r3, #8
 801d5da:	6033      	str	r3, [r6, #0]
 801d5dc:	2f00      	cmp	r7, #0
 801d5de:	d1ab      	bne.n	801d538 <rcl_validate_topic_name+0x9c>
 801d5e0:	e7b1      	b.n	801d546 <rcl_validate_topic_name+0xaa>
 801d5e2:	2d00      	cmp	r5, #0
 801d5e4:	d1f8      	bne.n	801d5d8 <rcl_validate_topic_name+0x13c>
 801d5e6:	460b      	mov	r3, r1
 801d5e8:	2501      	movs	r5, #1
 801d5ea:	e7bd      	b.n	801d568 <rcl_validate_topic_name+0xcc>
 801d5ec:	2500      	movs	r5, #0
 801d5ee:	e7bb      	b.n	801d568 <rcl_validate_topic_name+0xcc>
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	6033      	str	r3, [r6, #0]
 801d5f6:	e77c      	b.n	801d4f2 <rcl_validate_topic_name+0x56>
 801d5f8:	2205      	movs	r2, #5
 801d5fa:	6032      	str	r2, [r6, #0]
 801d5fc:	2f00      	cmp	r7, #0
 801d5fe:	d1d6      	bne.n	801d5ae <rcl_validate_topic_name+0x112>
 801d600:	e7a1      	b.n	801d546 <rcl_validate_topic_name+0xaa>
 801d602:	2d00      	cmp	r5, #0
 801d604:	bf14      	ite	ne
 801d606:	2308      	movne	r3, #8
 801d608:	2303      	moveq	r3, #3
 801d60a:	6033      	str	r3, [r6, #0]
 801d60c:	2f00      	cmp	r7, #0
 801d60e:	d193      	bne.n	801d538 <rcl_validate_topic_name+0x9c>
 801d610:	e799      	b.n	801d546 <rcl_validate_topic_name+0xaa>
 801d612:	2307      	movs	r3, #7
 801d614:	6033      	str	r3, [r6, #0]
 801d616:	2f00      	cmp	r7, #0
 801d618:	d095      	beq.n	801d546 <rcl_validate_topic_name+0xaa>
 801d61a:	2301      	movs	r3, #1
 801d61c:	e7c7      	b.n	801d5ae <rcl_validate_topic_name+0x112>
 801d61e:	bf00      	nop
 801d620:	0801fe16 	.word	0x0801fe16

0801d624 <rmw_create_guard_condition>:
 801d624:	b538      	push	{r3, r4, r5, lr}
 801d626:	4605      	mov	r5, r0
 801d628:	4808      	ldr	r0, [pc, #32]	@ (801d64c <rmw_create_guard_condition+0x28>)
 801d62a:	f7fd ff57 	bl	801b4dc <get_memory>
 801d62e:	4603      	mov	r3, r0
 801d630:	b148      	cbz	r0, 801d646 <rmw_create_guard_condition+0x22>
 801d632:	6884      	ldr	r4, [r0, #8]
 801d634:	2300      	movs	r3, #0
 801d636:	61e5      	str	r5, [r4, #28]
 801d638:	7423      	strb	r3, [r4, #16]
 801d63a:	f7fd ffb7 	bl	801b5ac <rmw_get_implementation_identifier>
 801d63e:	f104 0314 	add.w	r3, r4, #20
 801d642:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d646:	4618      	mov	r0, r3
 801d648:	bd38      	pop	{r3, r4, r5, pc}
 801d64a:	bf00      	nop
 801d64c:	24012efc 	.word	0x24012efc

0801d650 <rmw_destroy_guard_condition>:
 801d650:	b508      	push	{r3, lr}
 801d652:	4b08      	ldr	r3, [pc, #32]	@ (801d674 <rmw_destroy_guard_condition+0x24>)
 801d654:	6819      	ldr	r1, [r3, #0]
 801d656:	b911      	cbnz	r1, 801d65e <rmw_destroy_guard_condition+0xe>
 801d658:	e00a      	b.n	801d670 <rmw_destroy_guard_condition+0x20>
 801d65a:	6849      	ldr	r1, [r1, #4]
 801d65c:	b141      	cbz	r1, 801d670 <rmw_destroy_guard_condition+0x20>
 801d65e:	688b      	ldr	r3, [r1, #8]
 801d660:	3314      	adds	r3, #20
 801d662:	4298      	cmp	r0, r3
 801d664:	d1f9      	bne.n	801d65a <rmw_destroy_guard_condition+0xa>
 801d666:	4803      	ldr	r0, [pc, #12]	@ (801d674 <rmw_destroy_guard_condition+0x24>)
 801d668:	f7fd ff48 	bl	801b4fc <put_memory>
 801d66c:	2000      	movs	r0, #0
 801d66e:	bd08      	pop	{r3, pc}
 801d670:	2001      	movs	r0, #1
 801d672:	bd08      	pop	{r3, pc}
 801d674:	24012efc 	.word	0x24012efc

0801d678 <rmw_trigger_guard_condition>:
 801d678:	b160      	cbz	r0, 801d694 <rmw_trigger_guard_condition+0x1c>
 801d67a:	b510      	push	{r4, lr}
 801d67c:	4604      	mov	r4, r0
 801d67e:	6800      	ldr	r0, [r0, #0]
 801d680:	f7f5 fa4e 	bl	8012b20 <is_uxrce_rmw_identifier_valid>
 801d684:	b908      	cbnz	r0, 801d68a <rmw_trigger_guard_condition+0x12>
 801d686:	2001      	movs	r0, #1
 801d688:	bd10      	pop	{r4, pc}
 801d68a:	6863      	ldr	r3, [r4, #4]
 801d68c:	2201      	movs	r2, #1
 801d68e:	2000      	movs	r0, #0
 801d690:	741a      	strb	r2, [r3, #16]
 801d692:	bd10      	pop	{r4, pc}
 801d694:	2001      	movs	r0, #1
 801d696:	4770      	bx	lr

0801d698 <rosidl_runtime_c__String__init>:
 801d698:	b510      	push	{r4, lr}
 801d69a:	4604      	mov	r4, r0
 801d69c:	b086      	sub	sp, #24
 801d69e:	b170      	cbz	r0, 801d6be <rosidl_runtime_c__String__init+0x26>
 801d6a0:	a801      	add	r0, sp, #4
 801d6a2:	f7f4 f80f 	bl	80116c4 <rcutils_get_default_allocator>
 801d6a6:	9b01      	ldr	r3, [sp, #4]
 801d6a8:	9905      	ldr	r1, [sp, #20]
 801d6aa:	2001      	movs	r0, #1
 801d6ac:	4798      	blx	r3
 801d6ae:	6020      	str	r0, [r4, #0]
 801d6b0:	b128      	cbz	r0, 801d6be <rosidl_runtime_c__String__init+0x26>
 801d6b2:	2100      	movs	r1, #0
 801d6b4:	2201      	movs	r2, #1
 801d6b6:	7001      	strb	r1, [r0, #0]
 801d6b8:	4610      	mov	r0, r2
 801d6ba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801d6be:	b006      	add	sp, #24
 801d6c0:	bd10      	pop	{r4, pc}
 801d6c2:	bf00      	nop

0801d6c4 <rosidl_runtime_c__String__fini>:
 801d6c4:	b320      	cbz	r0, 801d710 <rosidl_runtime_c__String__fini+0x4c>
 801d6c6:	6803      	ldr	r3, [r0, #0]
 801d6c8:	b510      	push	{r4, lr}
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	b086      	sub	sp, #24
 801d6ce:	b173      	cbz	r3, 801d6ee <rosidl_runtime_c__String__fini+0x2a>
 801d6d0:	6883      	ldr	r3, [r0, #8]
 801d6d2:	b1f3      	cbz	r3, 801d712 <rosidl_runtime_c__String__fini+0x4e>
 801d6d4:	a801      	add	r0, sp, #4
 801d6d6:	f7f3 fff5 	bl	80116c4 <rcutils_get_default_allocator>
 801d6da:	9b02      	ldr	r3, [sp, #8]
 801d6dc:	9905      	ldr	r1, [sp, #20]
 801d6de:	6820      	ldr	r0, [r4, #0]
 801d6e0:	4798      	blx	r3
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	e9c4 3300 	strd	r3, r3, [r4]
 801d6e8:	60a3      	str	r3, [r4, #8]
 801d6ea:	b006      	add	sp, #24
 801d6ec:	bd10      	pop	{r4, pc}
 801d6ee:	6843      	ldr	r3, [r0, #4]
 801d6f0:	b9db      	cbnz	r3, 801d72a <rosidl_runtime_c__String__fini+0x66>
 801d6f2:	6883      	ldr	r3, [r0, #8]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d0f8      	beq.n	801d6ea <rosidl_runtime_c__String__fini+0x26>
 801d6f8:	4b12      	ldr	r3, [pc, #72]	@ (801d744 <rosidl_runtime_c__String__fini+0x80>)
 801d6fa:	2251      	movs	r2, #81	@ 0x51
 801d6fc:	2101      	movs	r1, #1
 801d6fe:	4812      	ldr	r0, [pc, #72]	@ (801d748 <rosidl_runtime_c__String__fini+0x84>)
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	68db      	ldr	r3, [r3, #12]
 801d704:	f000 fb82 	bl	801de0c <fwrite>
 801d708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d70c:	f000 f83e 	bl	801d78c <exit>
 801d710:	4770      	bx	lr
 801d712:	4b0c      	ldr	r3, [pc, #48]	@ (801d744 <rosidl_runtime_c__String__fini+0x80>)
 801d714:	224c      	movs	r2, #76	@ 0x4c
 801d716:	2101      	movs	r1, #1
 801d718:	480c      	ldr	r0, [pc, #48]	@ (801d74c <rosidl_runtime_c__String__fini+0x88>)
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	68db      	ldr	r3, [r3, #12]
 801d71e:	f000 fb75 	bl	801de0c <fwrite>
 801d722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d726:	f000 f831 	bl	801d78c <exit>
 801d72a:	4b06      	ldr	r3, [pc, #24]	@ (801d744 <rosidl_runtime_c__String__fini+0x80>)
 801d72c:	224e      	movs	r2, #78	@ 0x4e
 801d72e:	2101      	movs	r1, #1
 801d730:	4807      	ldr	r0, [pc, #28]	@ (801d750 <rosidl_runtime_c__String__fini+0x8c>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	68db      	ldr	r3, [r3, #12]
 801d736:	f000 fb69 	bl	801de0c <fwrite>
 801d73a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d73e:	f000 f825 	bl	801d78c <exit>
 801d742:	bf00      	nop
 801d744:	24000338 	.word	0x24000338
 801d748:	0801fd54 	.word	0x0801fd54
 801d74c:	0801fcb4 	.word	0x0801fcb4
 801d750:	0801fd04 	.word	0x0801fd04

0801d754 <calloc>:
 801d754:	4b02      	ldr	r3, [pc, #8]	@ (801d760 <calloc+0xc>)
 801d756:	460a      	mov	r2, r1
 801d758:	4601      	mov	r1, r0
 801d75a:	6818      	ldr	r0, [r3, #0]
 801d75c:	f000 b802 	b.w	801d764 <_calloc_r>
 801d760:	24000338 	.word	0x24000338

0801d764 <_calloc_r>:
 801d764:	b570      	push	{r4, r5, r6, lr}
 801d766:	fba1 5402 	umull	r5, r4, r1, r2
 801d76a:	b93c      	cbnz	r4, 801d77c <_calloc_r+0x18>
 801d76c:	4629      	mov	r1, r5
 801d76e:	f000 f899 	bl	801d8a4 <_malloc_r>
 801d772:	4606      	mov	r6, r0
 801d774:	b928      	cbnz	r0, 801d782 <_calloc_r+0x1e>
 801d776:	2600      	movs	r6, #0
 801d778:	4630      	mov	r0, r6
 801d77a:	bd70      	pop	{r4, r5, r6, pc}
 801d77c:	220c      	movs	r2, #12
 801d77e:	6002      	str	r2, [r0, #0]
 801d780:	e7f9      	b.n	801d776 <_calloc_r+0x12>
 801d782:	462a      	mov	r2, r5
 801d784:	4621      	mov	r1, r4
 801d786:	f000 fccf 	bl	801e128 <memset>
 801d78a:	e7f5      	b.n	801d778 <_calloc_r+0x14>

0801d78c <exit>:
 801d78c:	b508      	push	{r3, lr}
 801d78e:	4b06      	ldr	r3, [pc, #24]	@ (801d7a8 <exit+0x1c>)
 801d790:	4604      	mov	r4, r0
 801d792:	b113      	cbz	r3, 801d79a <exit+0xe>
 801d794:	2100      	movs	r1, #0
 801d796:	f3af 8000 	nop.w
 801d79a:	4b04      	ldr	r3, [pc, #16]	@ (801d7ac <exit+0x20>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	b103      	cbz	r3, 801d7a2 <exit+0x16>
 801d7a0:	4798      	blx	r3
 801d7a2:	4620      	mov	r0, r4
 801d7a4:	f7e4 fdcc 	bl	8002340 <_exit>
 801d7a8:	00000000 	.word	0x00000000
 801d7ac:	240131b4 	.word	0x240131b4

0801d7b0 <getenv>:
 801d7b0:	b507      	push	{r0, r1, r2, lr}
 801d7b2:	4b04      	ldr	r3, [pc, #16]	@ (801d7c4 <getenv+0x14>)
 801d7b4:	4601      	mov	r1, r0
 801d7b6:	aa01      	add	r2, sp, #4
 801d7b8:	6818      	ldr	r0, [r3, #0]
 801d7ba:	f000 f805 	bl	801d7c8 <_findenv_r>
 801d7be:	b003      	add	sp, #12
 801d7c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7c4:	24000338 	.word	0x24000338

0801d7c8 <_findenv_r>:
 801d7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7cc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d83c <_findenv_r+0x74>
 801d7d0:	4606      	mov	r6, r0
 801d7d2:	4689      	mov	r9, r1
 801d7d4:	4617      	mov	r7, r2
 801d7d6:	f000 fd9d 	bl	801e314 <__env_lock>
 801d7da:	f8da 4000 	ldr.w	r4, [sl]
 801d7de:	b134      	cbz	r4, 801d7ee <_findenv_r+0x26>
 801d7e0:	464b      	mov	r3, r9
 801d7e2:	4698      	mov	r8, r3
 801d7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7e8:	b13a      	cbz	r2, 801d7fa <_findenv_r+0x32>
 801d7ea:	2a3d      	cmp	r2, #61	@ 0x3d
 801d7ec:	d1f9      	bne.n	801d7e2 <_findenv_r+0x1a>
 801d7ee:	4630      	mov	r0, r6
 801d7f0:	f000 fd96 	bl	801e320 <__env_unlock>
 801d7f4:	2000      	movs	r0, #0
 801d7f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7fa:	eba8 0809 	sub.w	r8, r8, r9
 801d7fe:	46a3      	mov	fp, r4
 801d800:	f854 0b04 	ldr.w	r0, [r4], #4
 801d804:	2800      	cmp	r0, #0
 801d806:	d0f2      	beq.n	801d7ee <_findenv_r+0x26>
 801d808:	4642      	mov	r2, r8
 801d80a:	4649      	mov	r1, r9
 801d80c:	f000 fca1 	bl	801e152 <strncmp>
 801d810:	2800      	cmp	r0, #0
 801d812:	d1f4      	bne.n	801d7fe <_findenv_r+0x36>
 801d814:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d818:	eb03 0508 	add.w	r5, r3, r8
 801d81c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d820:	2b3d      	cmp	r3, #61	@ 0x3d
 801d822:	d1ec      	bne.n	801d7fe <_findenv_r+0x36>
 801d824:	f8da 3000 	ldr.w	r3, [sl]
 801d828:	ebab 0303 	sub.w	r3, fp, r3
 801d82c:	109b      	asrs	r3, r3, #2
 801d82e:	4630      	mov	r0, r6
 801d830:	603b      	str	r3, [r7, #0]
 801d832:	f000 fd75 	bl	801e320 <__env_unlock>
 801d836:	1c68      	adds	r0, r5, #1
 801d838:	e7dd      	b.n	801d7f6 <_findenv_r+0x2e>
 801d83a:	bf00      	nop
 801d83c:	24000028 	.word	0x24000028

0801d840 <malloc>:
 801d840:	4b02      	ldr	r3, [pc, #8]	@ (801d84c <malloc+0xc>)
 801d842:	4601      	mov	r1, r0
 801d844:	6818      	ldr	r0, [r3, #0]
 801d846:	f000 b82d 	b.w	801d8a4 <_malloc_r>
 801d84a:	bf00      	nop
 801d84c:	24000338 	.word	0x24000338

0801d850 <free>:
 801d850:	4b02      	ldr	r3, [pc, #8]	@ (801d85c <free+0xc>)
 801d852:	4601      	mov	r1, r0
 801d854:	6818      	ldr	r0, [r3, #0]
 801d856:	f000 bd69 	b.w	801e32c <_free_r>
 801d85a:	bf00      	nop
 801d85c:	24000338 	.word	0x24000338

0801d860 <sbrk_aligned>:
 801d860:	b570      	push	{r4, r5, r6, lr}
 801d862:	4e0f      	ldr	r6, [pc, #60]	@ (801d8a0 <sbrk_aligned+0x40>)
 801d864:	460c      	mov	r4, r1
 801d866:	6831      	ldr	r1, [r6, #0]
 801d868:	4605      	mov	r5, r0
 801d86a:	b911      	cbnz	r1, 801d872 <sbrk_aligned+0x12>
 801d86c:	f000 fcce 	bl	801e20c <_sbrk_r>
 801d870:	6030      	str	r0, [r6, #0]
 801d872:	4621      	mov	r1, r4
 801d874:	4628      	mov	r0, r5
 801d876:	f000 fcc9 	bl	801e20c <_sbrk_r>
 801d87a:	1c43      	adds	r3, r0, #1
 801d87c:	d103      	bne.n	801d886 <sbrk_aligned+0x26>
 801d87e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d882:	4620      	mov	r0, r4
 801d884:	bd70      	pop	{r4, r5, r6, pc}
 801d886:	1cc4      	adds	r4, r0, #3
 801d888:	f024 0403 	bic.w	r4, r4, #3
 801d88c:	42a0      	cmp	r0, r4
 801d88e:	d0f8      	beq.n	801d882 <sbrk_aligned+0x22>
 801d890:	1a21      	subs	r1, r4, r0
 801d892:	4628      	mov	r0, r5
 801d894:	f000 fcba 	bl	801e20c <_sbrk_r>
 801d898:	3001      	adds	r0, #1
 801d89a:	d1f2      	bne.n	801d882 <sbrk_aligned+0x22>
 801d89c:	e7ef      	b.n	801d87e <sbrk_aligned+0x1e>
 801d89e:	bf00      	nop
 801d8a0:	24013074 	.word	0x24013074

0801d8a4 <_malloc_r>:
 801d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8a8:	1ccd      	adds	r5, r1, #3
 801d8aa:	f025 0503 	bic.w	r5, r5, #3
 801d8ae:	3508      	adds	r5, #8
 801d8b0:	2d0c      	cmp	r5, #12
 801d8b2:	bf38      	it	cc
 801d8b4:	250c      	movcc	r5, #12
 801d8b6:	2d00      	cmp	r5, #0
 801d8b8:	4606      	mov	r6, r0
 801d8ba:	db01      	blt.n	801d8c0 <_malloc_r+0x1c>
 801d8bc:	42a9      	cmp	r1, r5
 801d8be:	d904      	bls.n	801d8ca <_malloc_r+0x26>
 801d8c0:	230c      	movs	r3, #12
 801d8c2:	6033      	str	r3, [r6, #0]
 801d8c4:	2000      	movs	r0, #0
 801d8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d9a0 <_malloc_r+0xfc>
 801d8ce:	f000 f869 	bl	801d9a4 <__malloc_lock>
 801d8d2:	f8d8 3000 	ldr.w	r3, [r8]
 801d8d6:	461c      	mov	r4, r3
 801d8d8:	bb44      	cbnz	r4, 801d92c <_malloc_r+0x88>
 801d8da:	4629      	mov	r1, r5
 801d8dc:	4630      	mov	r0, r6
 801d8de:	f7ff ffbf 	bl	801d860 <sbrk_aligned>
 801d8e2:	1c43      	adds	r3, r0, #1
 801d8e4:	4604      	mov	r4, r0
 801d8e6:	d158      	bne.n	801d99a <_malloc_r+0xf6>
 801d8e8:	f8d8 4000 	ldr.w	r4, [r8]
 801d8ec:	4627      	mov	r7, r4
 801d8ee:	2f00      	cmp	r7, #0
 801d8f0:	d143      	bne.n	801d97a <_malloc_r+0xd6>
 801d8f2:	2c00      	cmp	r4, #0
 801d8f4:	d04b      	beq.n	801d98e <_malloc_r+0xea>
 801d8f6:	6823      	ldr	r3, [r4, #0]
 801d8f8:	4639      	mov	r1, r7
 801d8fa:	4630      	mov	r0, r6
 801d8fc:	eb04 0903 	add.w	r9, r4, r3
 801d900:	f000 fc84 	bl	801e20c <_sbrk_r>
 801d904:	4581      	cmp	r9, r0
 801d906:	d142      	bne.n	801d98e <_malloc_r+0xea>
 801d908:	6821      	ldr	r1, [r4, #0]
 801d90a:	1a6d      	subs	r5, r5, r1
 801d90c:	4629      	mov	r1, r5
 801d90e:	4630      	mov	r0, r6
 801d910:	f7ff ffa6 	bl	801d860 <sbrk_aligned>
 801d914:	3001      	adds	r0, #1
 801d916:	d03a      	beq.n	801d98e <_malloc_r+0xea>
 801d918:	6823      	ldr	r3, [r4, #0]
 801d91a:	442b      	add	r3, r5
 801d91c:	6023      	str	r3, [r4, #0]
 801d91e:	f8d8 3000 	ldr.w	r3, [r8]
 801d922:	685a      	ldr	r2, [r3, #4]
 801d924:	bb62      	cbnz	r2, 801d980 <_malloc_r+0xdc>
 801d926:	f8c8 7000 	str.w	r7, [r8]
 801d92a:	e00f      	b.n	801d94c <_malloc_r+0xa8>
 801d92c:	6822      	ldr	r2, [r4, #0]
 801d92e:	1b52      	subs	r2, r2, r5
 801d930:	d420      	bmi.n	801d974 <_malloc_r+0xd0>
 801d932:	2a0b      	cmp	r2, #11
 801d934:	d917      	bls.n	801d966 <_malloc_r+0xc2>
 801d936:	1961      	adds	r1, r4, r5
 801d938:	42a3      	cmp	r3, r4
 801d93a:	6025      	str	r5, [r4, #0]
 801d93c:	bf18      	it	ne
 801d93e:	6059      	strne	r1, [r3, #4]
 801d940:	6863      	ldr	r3, [r4, #4]
 801d942:	bf08      	it	eq
 801d944:	f8c8 1000 	streq.w	r1, [r8]
 801d948:	5162      	str	r2, [r4, r5]
 801d94a:	604b      	str	r3, [r1, #4]
 801d94c:	4630      	mov	r0, r6
 801d94e:	f000 f82f 	bl	801d9b0 <__malloc_unlock>
 801d952:	f104 000b 	add.w	r0, r4, #11
 801d956:	1d23      	adds	r3, r4, #4
 801d958:	f020 0007 	bic.w	r0, r0, #7
 801d95c:	1ac2      	subs	r2, r0, r3
 801d95e:	bf1c      	itt	ne
 801d960:	1a1b      	subne	r3, r3, r0
 801d962:	50a3      	strne	r3, [r4, r2]
 801d964:	e7af      	b.n	801d8c6 <_malloc_r+0x22>
 801d966:	6862      	ldr	r2, [r4, #4]
 801d968:	42a3      	cmp	r3, r4
 801d96a:	bf0c      	ite	eq
 801d96c:	f8c8 2000 	streq.w	r2, [r8]
 801d970:	605a      	strne	r2, [r3, #4]
 801d972:	e7eb      	b.n	801d94c <_malloc_r+0xa8>
 801d974:	4623      	mov	r3, r4
 801d976:	6864      	ldr	r4, [r4, #4]
 801d978:	e7ae      	b.n	801d8d8 <_malloc_r+0x34>
 801d97a:	463c      	mov	r4, r7
 801d97c:	687f      	ldr	r7, [r7, #4]
 801d97e:	e7b6      	b.n	801d8ee <_malloc_r+0x4a>
 801d980:	461a      	mov	r2, r3
 801d982:	685b      	ldr	r3, [r3, #4]
 801d984:	42a3      	cmp	r3, r4
 801d986:	d1fb      	bne.n	801d980 <_malloc_r+0xdc>
 801d988:	2300      	movs	r3, #0
 801d98a:	6053      	str	r3, [r2, #4]
 801d98c:	e7de      	b.n	801d94c <_malloc_r+0xa8>
 801d98e:	230c      	movs	r3, #12
 801d990:	6033      	str	r3, [r6, #0]
 801d992:	4630      	mov	r0, r6
 801d994:	f000 f80c 	bl	801d9b0 <__malloc_unlock>
 801d998:	e794      	b.n	801d8c4 <_malloc_r+0x20>
 801d99a:	6005      	str	r5, [r0, #0]
 801d99c:	e7d6      	b.n	801d94c <_malloc_r+0xa8>
 801d99e:	bf00      	nop
 801d9a0:	24013078 	.word	0x24013078

0801d9a4 <__malloc_lock>:
 801d9a4:	4801      	ldr	r0, [pc, #4]	@ (801d9ac <__malloc_lock+0x8>)
 801d9a6:	f000 bc7e 	b.w	801e2a6 <__retarget_lock_acquire_recursive>
 801d9aa:	bf00      	nop
 801d9ac:	240131bd 	.word	0x240131bd

0801d9b0 <__malloc_unlock>:
 801d9b0:	4801      	ldr	r0, [pc, #4]	@ (801d9b8 <__malloc_unlock+0x8>)
 801d9b2:	f000 bc79 	b.w	801e2a8 <__retarget_lock_release_recursive>
 801d9b6:	bf00      	nop
 801d9b8:	240131bd 	.word	0x240131bd

0801d9bc <srand>:
 801d9bc:	b538      	push	{r3, r4, r5, lr}
 801d9be:	4b10      	ldr	r3, [pc, #64]	@ (801da00 <srand+0x44>)
 801d9c0:	681d      	ldr	r5, [r3, #0]
 801d9c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	b9b3      	cbnz	r3, 801d9f6 <srand+0x3a>
 801d9c8:	2018      	movs	r0, #24
 801d9ca:	f7ff ff39 	bl	801d840 <malloc>
 801d9ce:	4602      	mov	r2, r0
 801d9d0:	6328      	str	r0, [r5, #48]	@ 0x30
 801d9d2:	b920      	cbnz	r0, 801d9de <srand+0x22>
 801d9d4:	4b0b      	ldr	r3, [pc, #44]	@ (801da04 <srand+0x48>)
 801d9d6:	480c      	ldr	r0, [pc, #48]	@ (801da08 <srand+0x4c>)
 801d9d8:	2146      	movs	r1, #70	@ 0x46
 801d9da:	f000 fc7d 	bl	801e2d8 <__assert_func>
 801d9de:	490b      	ldr	r1, [pc, #44]	@ (801da0c <srand+0x50>)
 801d9e0:	4b0b      	ldr	r3, [pc, #44]	@ (801da10 <srand+0x54>)
 801d9e2:	e9c0 1300 	strd	r1, r3, [r0]
 801d9e6:	4b0b      	ldr	r3, [pc, #44]	@ (801da14 <srand+0x58>)
 801d9e8:	6083      	str	r3, [r0, #8]
 801d9ea:	230b      	movs	r3, #11
 801d9ec:	8183      	strh	r3, [r0, #12]
 801d9ee:	2100      	movs	r1, #0
 801d9f0:	2001      	movs	r0, #1
 801d9f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d9f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	611c      	str	r4, [r3, #16]
 801d9fc:	615a      	str	r2, [r3, #20]
 801d9fe:	bd38      	pop	{r3, r4, r5, pc}
 801da00:	24000338 	.word	0x24000338
 801da04:	0801fda6 	.word	0x0801fda6
 801da08:	0801fdbd 	.word	0x0801fdbd
 801da0c:	abcd330e 	.word	0xabcd330e
 801da10:	e66d1234 	.word	0xe66d1234
 801da14:	0005deec 	.word	0x0005deec

0801da18 <rand>:
 801da18:	4b16      	ldr	r3, [pc, #88]	@ (801da74 <rand+0x5c>)
 801da1a:	b510      	push	{r4, lr}
 801da1c:	681c      	ldr	r4, [r3, #0]
 801da1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801da20:	b9b3      	cbnz	r3, 801da50 <rand+0x38>
 801da22:	2018      	movs	r0, #24
 801da24:	f7ff ff0c 	bl	801d840 <malloc>
 801da28:	4602      	mov	r2, r0
 801da2a:	6320      	str	r0, [r4, #48]	@ 0x30
 801da2c:	b920      	cbnz	r0, 801da38 <rand+0x20>
 801da2e:	4b12      	ldr	r3, [pc, #72]	@ (801da78 <rand+0x60>)
 801da30:	4812      	ldr	r0, [pc, #72]	@ (801da7c <rand+0x64>)
 801da32:	2152      	movs	r1, #82	@ 0x52
 801da34:	f000 fc50 	bl	801e2d8 <__assert_func>
 801da38:	4911      	ldr	r1, [pc, #68]	@ (801da80 <rand+0x68>)
 801da3a:	4b12      	ldr	r3, [pc, #72]	@ (801da84 <rand+0x6c>)
 801da3c:	e9c0 1300 	strd	r1, r3, [r0]
 801da40:	4b11      	ldr	r3, [pc, #68]	@ (801da88 <rand+0x70>)
 801da42:	6083      	str	r3, [r0, #8]
 801da44:	230b      	movs	r3, #11
 801da46:	8183      	strh	r3, [r0, #12]
 801da48:	2100      	movs	r1, #0
 801da4a:	2001      	movs	r0, #1
 801da4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801da50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801da52:	480e      	ldr	r0, [pc, #56]	@ (801da8c <rand+0x74>)
 801da54:	690b      	ldr	r3, [r1, #16]
 801da56:	694c      	ldr	r4, [r1, #20]
 801da58:	4a0d      	ldr	r2, [pc, #52]	@ (801da90 <rand+0x78>)
 801da5a:	4358      	muls	r0, r3
 801da5c:	fb02 0004 	mla	r0, r2, r4, r0
 801da60:	fba3 3202 	umull	r3, r2, r3, r2
 801da64:	3301      	adds	r3, #1
 801da66:	eb40 0002 	adc.w	r0, r0, r2
 801da6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801da6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801da72:	bd10      	pop	{r4, pc}
 801da74:	24000338 	.word	0x24000338
 801da78:	0801fda6 	.word	0x0801fda6
 801da7c:	0801fdbd 	.word	0x0801fdbd
 801da80:	abcd330e 	.word	0xabcd330e
 801da84:	e66d1234 	.word	0xe66d1234
 801da88:	0005deec 	.word	0x0005deec
 801da8c:	5851f42d 	.word	0x5851f42d
 801da90:	4c957f2d 	.word	0x4c957f2d

0801da94 <realloc>:
 801da94:	4b02      	ldr	r3, [pc, #8]	@ (801daa0 <realloc+0xc>)
 801da96:	460a      	mov	r2, r1
 801da98:	4601      	mov	r1, r0
 801da9a:	6818      	ldr	r0, [r3, #0]
 801da9c:	f000 b802 	b.w	801daa4 <_realloc_r>
 801daa0:	24000338 	.word	0x24000338

0801daa4 <_realloc_r>:
 801daa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daa8:	4680      	mov	r8, r0
 801daaa:	4615      	mov	r5, r2
 801daac:	460c      	mov	r4, r1
 801daae:	b921      	cbnz	r1, 801daba <_realloc_r+0x16>
 801dab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dab4:	4611      	mov	r1, r2
 801dab6:	f7ff bef5 	b.w	801d8a4 <_malloc_r>
 801daba:	b92a      	cbnz	r2, 801dac8 <_realloc_r+0x24>
 801dabc:	f000 fc36 	bl	801e32c <_free_r>
 801dac0:	2400      	movs	r4, #0
 801dac2:	4620      	mov	r0, r4
 801dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dac8:	f000 fc7a 	bl	801e3c0 <_malloc_usable_size_r>
 801dacc:	4285      	cmp	r5, r0
 801dace:	4606      	mov	r6, r0
 801dad0:	d802      	bhi.n	801dad8 <_realloc_r+0x34>
 801dad2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dad6:	d8f4      	bhi.n	801dac2 <_realloc_r+0x1e>
 801dad8:	4629      	mov	r1, r5
 801dada:	4640      	mov	r0, r8
 801dadc:	f7ff fee2 	bl	801d8a4 <_malloc_r>
 801dae0:	4607      	mov	r7, r0
 801dae2:	2800      	cmp	r0, #0
 801dae4:	d0ec      	beq.n	801dac0 <_realloc_r+0x1c>
 801dae6:	42b5      	cmp	r5, r6
 801dae8:	462a      	mov	r2, r5
 801daea:	4621      	mov	r1, r4
 801daec:	bf28      	it	cs
 801daee:	4632      	movcs	r2, r6
 801daf0:	f000 fbe3 	bl	801e2ba <memcpy>
 801daf4:	4621      	mov	r1, r4
 801daf6:	4640      	mov	r0, r8
 801daf8:	f000 fc18 	bl	801e32c <_free_r>
 801dafc:	463c      	mov	r4, r7
 801dafe:	e7e0      	b.n	801dac2 <_realloc_r+0x1e>

0801db00 <_strtoul_l.constprop.0>:
 801db00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db04:	4e34      	ldr	r6, [pc, #208]	@ (801dbd8 <_strtoul_l.constprop.0+0xd8>)
 801db06:	4686      	mov	lr, r0
 801db08:	460d      	mov	r5, r1
 801db0a:	4628      	mov	r0, r5
 801db0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db10:	5d37      	ldrb	r7, [r6, r4]
 801db12:	f017 0708 	ands.w	r7, r7, #8
 801db16:	d1f8      	bne.n	801db0a <_strtoul_l.constprop.0+0xa>
 801db18:	2c2d      	cmp	r4, #45	@ 0x2d
 801db1a:	d12f      	bne.n	801db7c <_strtoul_l.constprop.0+0x7c>
 801db1c:	782c      	ldrb	r4, [r5, #0]
 801db1e:	2701      	movs	r7, #1
 801db20:	1c85      	adds	r5, r0, #2
 801db22:	f033 0010 	bics.w	r0, r3, #16
 801db26:	d109      	bne.n	801db3c <_strtoul_l.constprop.0+0x3c>
 801db28:	2c30      	cmp	r4, #48	@ 0x30
 801db2a:	d12c      	bne.n	801db86 <_strtoul_l.constprop.0+0x86>
 801db2c:	7828      	ldrb	r0, [r5, #0]
 801db2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801db32:	2858      	cmp	r0, #88	@ 0x58
 801db34:	d127      	bne.n	801db86 <_strtoul_l.constprop.0+0x86>
 801db36:	786c      	ldrb	r4, [r5, #1]
 801db38:	2310      	movs	r3, #16
 801db3a:	3502      	adds	r5, #2
 801db3c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801db40:	2600      	movs	r6, #0
 801db42:	fbb8 f8f3 	udiv	r8, r8, r3
 801db46:	fb03 f908 	mul.w	r9, r3, r8
 801db4a:	ea6f 0909 	mvn.w	r9, r9
 801db4e:	4630      	mov	r0, r6
 801db50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801db54:	f1bc 0f09 	cmp.w	ip, #9
 801db58:	d81c      	bhi.n	801db94 <_strtoul_l.constprop.0+0x94>
 801db5a:	4664      	mov	r4, ip
 801db5c:	42a3      	cmp	r3, r4
 801db5e:	dd2a      	ble.n	801dbb6 <_strtoul_l.constprop.0+0xb6>
 801db60:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801db64:	d007      	beq.n	801db76 <_strtoul_l.constprop.0+0x76>
 801db66:	4580      	cmp	r8, r0
 801db68:	d322      	bcc.n	801dbb0 <_strtoul_l.constprop.0+0xb0>
 801db6a:	d101      	bne.n	801db70 <_strtoul_l.constprop.0+0x70>
 801db6c:	45a1      	cmp	r9, r4
 801db6e:	db1f      	blt.n	801dbb0 <_strtoul_l.constprop.0+0xb0>
 801db70:	fb00 4003 	mla	r0, r0, r3, r4
 801db74:	2601      	movs	r6, #1
 801db76:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db7a:	e7e9      	b.n	801db50 <_strtoul_l.constprop.0+0x50>
 801db7c:	2c2b      	cmp	r4, #43	@ 0x2b
 801db7e:	bf04      	itt	eq
 801db80:	782c      	ldrbeq	r4, [r5, #0]
 801db82:	1c85      	addeq	r5, r0, #2
 801db84:	e7cd      	b.n	801db22 <_strtoul_l.constprop.0+0x22>
 801db86:	2b00      	cmp	r3, #0
 801db88:	d1d8      	bne.n	801db3c <_strtoul_l.constprop.0+0x3c>
 801db8a:	2c30      	cmp	r4, #48	@ 0x30
 801db8c:	bf0c      	ite	eq
 801db8e:	2308      	moveq	r3, #8
 801db90:	230a      	movne	r3, #10
 801db92:	e7d3      	b.n	801db3c <_strtoul_l.constprop.0+0x3c>
 801db94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801db98:	f1bc 0f19 	cmp.w	ip, #25
 801db9c:	d801      	bhi.n	801dba2 <_strtoul_l.constprop.0+0xa2>
 801db9e:	3c37      	subs	r4, #55	@ 0x37
 801dba0:	e7dc      	b.n	801db5c <_strtoul_l.constprop.0+0x5c>
 801dba2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801dba6:	f1bc 0f19 	cmp.w	ip, #25
 801dbaa:	d804      	bhi.n	801dbb6 <_strtoul_l.constprop.0+0xb6>
 801dbac:	3c57      	subs	r4, #87	@ 0x57
 801dbae:	e7d5      	b.n	801db5c <_strtoul_l.constprop.0+0x5c>
 801dbb0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801dbb4:	e7df      	b.n	801db76 <_strtoul_l.constprop.0+0x76>
 801dbb6:	1c73      	adds	r3, r6, #1
 801dbb8:	d106      	bne.n	801dbc8 <_strtoul_l.constprop.0+0xc8>
 801dbba:	2322      	movs	r3, #34	@ 0x22
 801dbbc:	f8ce 3000 	str.w	r3, [lr]
 801dbc0:	4630      	mov	r0, r6
 801dbc2:	b932      	cbnz	r2, 801dbd2 <_strtoul_l.constprop.0+0xd2>
 801dbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dbc8:	b107      	cbz	r7, 801dbcc <_strtoul_l.constprop.0+0xcc>
 801dbca:	4240      	negs	r0, r0
 801dbcc:	2a00      	cmp	r2, #0
 801dbce:	d0f9      	beq.n	801dbc4 <_strtoul_l.constprop.0+0xc4>
 801dbd0:	b106      	cbz	r6, 801dbd4 <_strtoul_l.constprop.0+0xd4>
 801dbd2:	1e69      	subs	r1, r5, #1
 801dbd4:	6011      	str	r1, [r2, #0]
 801dbd6:	e7f5      	b.n	801dbc4 <_strtoul_l.constprop.0+0xc4>
 801dbd8:	0801fe16 	.word	0x0801fe16

0801dbdc <strtoul>:
 801dbdc:	4613      	mov	r3, r2
 801dbde:	460a      	mov	r2, r1
 801dbe0:	4601      	mov	r1, r0
 801dbe2:	4802      	ldr	r0, [pc, #8]	@ (801dbec <strtoul+0x10>)
 801dbe4:	6800      	ldr	r0, [r0, #0]
 801dbe6:	f7ff bf8b 	b.w	801db00 <_strtoul_l.constprop.0>
 801dbea:	bf00      	nop
 801dbec:	24000338 	.word	0x24000338

0801dbf0 <std>:
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	b510      	push	{r4, lr}
 801dbf4:	4604      	mov	r4, r0
 801dbf6:	e9c0 3300 	strd	r3, r3, [r0]
 801dbfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbfe:	6083      	str	r3, [r0, #8]
 801dc00:	8181      	strh	r1, [r0, #12]
 801dc02:	6643      	str	r3, [r0, #100]	@ 0x64
 801dc04:	81c2      	strh	r2, [r0, #14]
 801dc06:	6183      	str	r3, [r0, #24]
 801dc08:	4619      	mov	r1, r3
 801dc0a:	2208      	movs	r2, #8
 801dc0c:	305c      	adds	r0, #92	@ 0x5c
 801dc0e:	f000 fa8b 	bl	801e128 <memset>
 801dc12:	4b0d      	ldr	r3, [pc, #52]	@ (801dc48 <std+0x58>)
 801dc14:	6263      	str	r3, [r4, #36]	@ 0x24
 801dc16:	4b0d      	ldr	r3, [pc, #52]	@ (801dc4c <std+0x5c>)
 801dc18:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dc1a:	4b0d      	ldr	r3, [pc, #52]	@ (801dc50 <std+0x60>)
 801dc1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dc1e:	4b0d      	ldr	r3, [pc, #52]	@ (801dc54 <std+0x64>)
 801dc20:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc22:	4b0d      	ldr	r3, [pc, #52]	@ (801dc58 <std+0x68>)
 801dc24:	6224      	str	r4, [r4, #32]
 801dc26:	429c      	cmp	r4, r3
 801dc28:	d006      	beq.n	801dc38 <std+0x48>
 801dc2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dc2e:	4294      	cmp	r4, r2
 801dc30:	d002      	beq.n	801dc38 <std+0x48>
 801dc32:	33d0      	adds	r3, #208	@ 0xd0
 801dc34:	429c      	cmp	r4, r3
 801dc36:	d105      	bne.n	801dc44 <std+0x54>
 801dc38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc40:	f000 bb30 	b.w	801e2a4 <__retarget_lock_init_recursive>
 801dc44:	bd10      	pop	{r4, pc}
 801dc46:	bf00      	nop
 801dc48:	0801deb5 	.word	0x0801deb5
 801dc4c:	0801ded7 	.word	0x0801ded7
 801dc50:	0801df0f 	.word	0x0801df0f
 801dc54:	0801df33 	.word	0x0801df33
 801dc58:	2401307c 	.word	0x2401307c

0801dc5c <stdio_exit_handler>:
 801dc5c:	4a02      	ldr	r2, [pc, #8]	@ (801dc68 <stdio_exit_handler+0xc>)
 801dc5e:	4903      	ldr	r1, [pc, #12]	@ (801dc6c <stdio_exit_handler+0x10>)
 801dc60:	4803      	ldr	r0, [pc, #12]	@ (801dc70 <stdio_exit_handler+0x14>)
 801dc62:	f000 b869 	b.w	801dd38 <_fwalk_sglue>
 801dc66:	bf00      	nop
 801dc68:	2400032c 	.word	0x2400032c
 801dc6c:	0801ed29 	.word	0x0801ed29
 801dc70:	2400033c 	.word	0x2400033c

0801dc74 <cleanup_stdio>:
 801dc74:	6841      	ldr	r1, [r0, #4]
 801dc76:	4b0c      	ldr	r3, [pc, #48]	@ (801dca8 <cleanup_stdio+0x34>)
 801dc78:	4299      	cmp	r1, r3
 801dc7a:	b510      	push	{r4, lr}
 801dc7c:	4604      	mov	r4, r0
 801dc7e:	d001      	beq.n	801dc84 <cleanup_stdio+0x10>
 801dc80:	f001 f852 	bl	801ed28 <_fflush_r>
 801dc84:	68a1      	ldr	r1, [r4, #8]
 801dc86:	4b09      	ldr	r3, [pc, #36]	@ (801dcac <cleanup_stdio+0x38>)
 801dc88:	4299      	cmp	r1, r3
 801dc8a:	d002      	beq.n	801dc92 <cleanup_stdio+0x1e>
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f001 f84b 	bl	801ed28 <_fflush_r>
 801dc92:	68e1      	ldr	r1, [r4, #12]
 801dc94:	4b06      	ldr	r3, [pc, #24]	@ (801dcb0 <cleanup_stdio+0x3c>)
 801dc96:	4299      	cmp	r1, r3
 801dc98:	d004      	beq.n	801dca4 <cleanup_stdio+0x30>
 801dc9a:	4620      	mov	r0, r4
 801dc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dca0:	f001 b842 	b.w	801ed28 <_fflush_r>
 801dca4:	bd10      	pop	{r4, pc}
 801dca6:	bf00      	nop
 801dca8:	2401307c 	.word	0x2401307c
 801dcac:	240130e4 	.word	0x240130e4
 801dcb0:	2401314c 	.word	0x2401314c

0801dcb4 <global_stdio_init.part.0>:
 801dcb4:	b510      	push	{r4, lr}
 801dcb6:	4b0b      	ldr	r3, [pc, #44]	@ (801dce4 <global_stdio_init.part.0+0x30>)
 801dcb8:	4c0b      	ldr	r4, [pc, #44]	@ (801dce8 <global_stdio_init.part.0+0x34>)
 801dcba:	4a0c      	ldr	r2, [pc, #48]	@ (801dcec <global_stdio_init.part.0+0x38>)
 801dcbc:	601a      	str	r2, [r3, #0]
 801dcbe:	4620      	mov	r0, r4
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	2104      	movs	r1, #4
 801dcc4:	f7ff ff94 	bl	801dbf0 <std>
 801dcc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dccc:	2201      	movs	r2, #1
 801dcce:	2109      	movs	r1, #9
 801dcd0:	f7ff ff8e 	bl	801dbf0 <std>
 801dcd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dcd8:	2202      	movs	r2, #2
 801dcda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcde:	2112      	movs	r1, #18
 801dce0:	f7ff bf86 	b.w	801dbf0 <std>
 801dce4:	240131b4 	.word	0x240131b4
 801dce8:	2401307c 	.word	0x2401307c
 801dcec:	0801dc5d 	.word	0x0801dc5d

0801dcf0 <__sfp_lock_acquire>:
 801dcf0:	4801      	ldr	r0, [pc, #4]	@ (801dcf8 <__sfp_lock_acquire+0x8>)
 801dcf2:	f000 bad8 	b.w	801e2a6 <__retarget_lock_acquire_recursive>
 801dcf6:	bf00      	nop
 801dcf8:	240131be 	.word	0x240131be

0801dcfc <__sfp_lock_release>:
 801dcfc:	4801      	ldr	r0, [pc, #4]	@ (801dd04 <__sfp_lock_release+0x8>)
 801dcfe:	f000 bad3 	b.w	801e2a8 <__retarget_lock_release_recursive>
 801dd02:	bf00      	nop
 801dd04:	240131be 	.word	0x240131be

0801dd08 <__sinit>:
 801dd08:	b510      	push	{r4, lr}
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	f7ff fff0 	bl	801dcf0 <__sfp_lock_acquire>
 801dd10:	6a23      	ldr	r3, [r4, #32]
 801dd12:	b11b      	cbz	r3, 801dd1c <__sinit+0x14>
 801dd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd18:	f7ff bff0 	b.w	801dcfc <__sfp_lock_release>
 801dd1c:	4b04      	ldr	r3, [pc, #16]	@ (801dd30 <__sinit+0x28>)
 801dd1e:	6223      	str	r3, [r4, #32]
 801dd20:	4b04      	ldr	r3, [pc, #16]	@ (801dd34 <__sinit+0x2c>)
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d1f5      	bne.n	801dd14 <__sinit+0xc>
 801dd28:	f7ff ffc4 	bl	801dcb4 <global_stdio_init.part.0>
 801dd2c:	e7f2      	b.n	801dd14 <__sinit+0xc>
 801dd2e:	bf00      	nop
 801dd30:	0801dc75 	.word	0x0801dc75
 801dd34:	240131b4 	.word	0x240131b4

0801dd38 <_fwalk_sglue>:
 801dd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd3c:	4607      	mov	r7, r0
 801dd3e:	4688      	mov	r8, r1
 801dd40:	4614      	mov	r4, r2
 801dd42:	2600      	movs	r6, #0
 801dd44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd48:	f1b9 0901 	subs.w	r9, r9, #1
 801dd4c:	d505      	bpl.n	801dd5a <_fwalk_sglue+0x22>
 801dd4e:	6824      	ldr	r4, [r4, #0]
 801dd50:	2c00      	cmp	r4, #0
 801dd52:	d1f7      	bne.n	801dd44 <_fwalk_sglue+0xc>
 801dd54:	4630      	mov	r0, r6
 801dd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd5a:	89ab      	ldrh	r3, [r5, #12]
 801dd5c:	2b01      	cmp	r3, #1
 801dd5e:	d907      	bls.n	801dd70 <_fwalk_sglue+0x38>
 801dd60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd64:	3301      	adds	r3, #1
 801dd66:	d003      	beq.n	801dd70 <_fwalk_sglue+0x38>
 801dd68:	4629      	mov	r1, r5
 801dd6a:	4638      	mov	r0, r7
 801dd6c:	47c0      	blx	r8
 801dd6e:	4306      	orrs	r6, r0
 801dd70:	3568      	adds	r5, #104	@ 0x68
 801dd72:	e7e9      	b.n	801dd48 <_fwalk_sglue+0x10>

0801dd74 <_fwrite_r>:
 801dd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd78:	9c08      	ldr	r4, [sp, #32]
 801dd7a:	468a      	mov	sl, r1
 801dd7c:	4690      	mov	r8, r2
 801dd7e:	fb02 f903 	mul.w	r9, r2, r3
 801dd82:	4606      	mov	r6, r0
 801dd84:	b118      	cbz	r0, 801dd8e <_fwrite_r+0x1a>
 801dd86:	6a03      	ldr	r3, [r0, #32]
 801dd88:	b90b      	cbnz	r3, 801dd8e <_fwrite_r+0x1a>
 801dd8a:	f7ff ffbd 	bl	801dd08 <__sinit>
 801dd8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd90:	07dd      	lsls	r5, r3, #31
 801dd92:	d405      	bmi.n	801dda0 <_fwrite_r+0x2c>
 801dd94:	89a3      	ldrh	r3, [r4, #12]
 801dd96:	0598      	lsls	r0, r3, #22
 801dd98:	d402      	bmi.n	801dda0 <_fwrite_r+0x2c>
 801dd9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd9c:	f000 fa83 	bl	801e2a6 <__retarget_lock_acquire_recursive>
 801dda0:	89a3      	ldrh	r3, [r4, #12]
 801dda2:	0719      	lsls	r1, r3, #28
 801dda4:	d516      	bpl.n	801ddd4 <_fwrite_r+0x60>
 801dda6:	6923      	ldr	r3, [r4, #16]
 801dda8:	b1a3      	cbz	r3, 801ddd4 <_fwrite_r+0x60>
 801ddaa:	2500      	movs	r5, #0
 801ddac:	454d      	cmp	r5, r9
 801ddae:	d01f      	beq.n	801ddf0 <_fwrite_r+0x7c>
 801ddb0:	68a7      	ldr	r7, [r4, #8]
 801ddb2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ddb6:	3f01      	subs	r7, #1
 801ddb8:	2f00      	cmp	r7, #0
 801ddba:	60a7      	str	r7, [r4, #8]
 801ddbc:	da04      	bge.n	801ddc8 <_fwrite_r+0x54>
 801ddbe:	69a3      	ldr	r3, [r4, #24]
 801ddc0:	429f      	cmp	r7, r3
 801ddc2:	db0f      	blt.n	801dde4 <_fwrite_r+0x70>
 801ddc4:	290a      	cmp	r1, #10
 801ddc6:	d00d      	beq.n	801dde4 <_fwrite_r+0x70>
 801ddc8:	6823      	ldr	r3, [r4, #0]
 801ddca:	1c5a      	adds	r2, r3, #1
 801ddcc:	6022      	str	r2, [r4, #0]
 801ddce:	7019      	strb	r1, [r3, #0]
 801ddd0:	3501      	adds	r5, #1
 801ddd2:	e7eb      	b.n	801ddac <_fwrite_r+0x38>
 801ddd4:	4621      	mov	r1, r4
 801ddd6:	4630      	mov	r0, r6
 801ddd8:	f000 f926 	bl	801e028 <__swsetup_r>
 801dddc:	2800      	cmp	r0, #0
 801ddde:	d0e4      	beq.n	801ddaa <_fwrite_r+0x36>
 801dde0:	2500      	movs	r5, #0
 801dde2:	e005      	b.n	801ddf0 <_fwrite_r+0x7c>
 801dde4:	4622      	mov	r2, r4
 801dde6:	4630      	mov	r0, r6
 801dde8:	f000 f8e0 	bl	801dfac <__swbuf_r>
 801ddec:	3001      	adds	r0, #1
 801ddee:	d1ef      	bne.n	801ddd0 <_fwrite_r+0x5c>
 801ddf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddf2:	07da      	lsls	r2, r3, #31
 801ddf4:	d405      	bmi.n	801de02 <_fwrite_r+0x8e>
 801ddf6:	89a3      	ldrh	r3, [r4, #12]
 801ddf8:	059b      	lsls	r3, r3, #22
 801ddfa:	d402      	bmi.n	801de02 <_fwrite_r+0x8e>
 801ddfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddfe:	f000 fa53 	bl	801e2a8 <__retarget_lock_release_recursive>
 801de02:	fbb5 f0f8 	udiv	r0, r5, r8
 801de06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801de0c <fwrite>:
 801de0c:	b507      	push	{r0, r1, r2, lr}
 801de0e:	9300      	str	r3, [sp, #0]
 801de10:	4613      	mov	r3, r2
 801de12:	460a      	mov	r2, r1
 801de14:	4601      	mov	r1, r0
 801de16:	4803      	ldr	r0, [pc, #12]	@ (801de24 <fwrite+0x18>)
 801de18:	6800      	ldr	r0, [r0, #0]
 801de1a:	f7ff ffab 	bl	801dd74 <_fwrite_r>
 801de1e:	b003      	add	sp, #12
 801de20:	f85d fb04 	ldr.w	pc, [sp], #4
 801de24:	24000338 	.word	0x24000338

0801de28 <iprintf>:
 801de28:	b40f      	push	{r0, r1, r2, r3}
 801de2a:	b507      	push	{r0, r1, r2, lr}
 801de2c:	4906      	ldr	r1, [pc, #24]	@ (801de48 <iprintf+0x20>)
 801de2e:	ab04      	add	r3, sp, #16
 801de30:	6808      	ldr	r0, [r1, #0]
 801de32:	f853 2b04 	ldr.w	r2, [r3], #4
 801de36:	6881      	ldr	r1, [r0, #8]
 801de38:	9301      	str	r3, [sp, #4]
 801de3a:	f000 fc4b 	bl	801e6d4 <_vfiprintf_r>
 801de3e:	b003      	add	sp, #12
 801de40:	f85d eb04 	ldr.w	lr, [sp], #4
 801de44:	b004      	add	sp, #16
 801de46:	4770      	bx	lr
 801de48:	24000338 	.word	0x24000338

0801de4c <sniprintf>:
 801de4c:	b40c      	push	{r2, r3}
 801de4e:	b530      	push	{r4, r5, lr}
 801de50:	4b17      	ldr	r3, [pc, #92]	@ (801deb0 <sniprintf+0x64>)
 801de52:	1e0c      	subs	r4, r1, #0
 801de54:	681d      	ldr	r5, [r3, #0]
 801de56:	b09d      	sub	sp, #116	@ 0x74
 801de58:	da08      	bge.n	801de6c <sniprintf+0x20>
 801de5a:	238b      	movs	r3, #139	@ 0x8b
 801de5c:	602b      	str	r3, [r5, #0]
 801de5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de62:	b01d      	add	sp, #116	@ 0x74
 801de64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de68:	b002      	add	sp, #8
 801de6a:	4770      	bx	lr
 801de6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801de70:	f8ad 3014 	strh.w	r3, [sp, #20]
 801de74:	bf14      	ite	ne
 801de76:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801de7a:	4623      	moveq	r3, r4
 801de7c:	9304      	str	r3, [sp, #16]
 801de7e:	9307      	str	r3, [sp, #28]
 801de80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801de84:	9002      	str	r0, [sp, #8]
 801de86:	9006      	str	r0, [sp, #24]
 801de88:	f8ad 3016 	strh.w	r3, [sp, #22]
 801de8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801de8e:	ab21      	add	r3, sp, #132	@ 0x84
 801de90:	a902      	add	r1, sp, #8
 801de92:	4628      	mov	r0, r5
 801de94:	9301      	str	r3, [sp, #4]
 801de96:	f000 faf7 	bl	801e488 <_svfiprintf_r>
 801de9a:	1c43      	adds	r3, r0, #1
 801de9c:	bfbc      	itt	lt
 801de9e:	238b      	movlt	r3, #139	@ 0x8b
 801dea0:	602b      	strlt	r3, [r5, #0]
 801dea2:	2c00      	cmp	r4, #0
 801dea4:	d0dd      	beq.n	801de62 <sniprintf+0x16>
 801dea6:	9b02      	ldr	r3, [sp, #8]
 801dea8:	2200      	movs	r2, #0
 801deaa:	701a      	strb	r2, [r3, #0]
 801deac:	e7d9      	b.n	801de62 <sniprintf+0x16>
 801deae:	bf00      	nop
 801deb0:	24000338 	.word	0x24000338

0801deb4 <__sread>:
 801deb4:	b510      	push	{r4, lr}
 801deb6:	460c      	mov	r4, r1
 801deb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801debc:	f000 f994 	bl	801e1e8 <_read_r>
 801dec0:	2800      	cmp	r0, #0
 801dec2:	bfab      	itete	ge
 801dec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dec6:	89a3      	ldrhlt	r3, [r4, #12]
 801dec8:	181b      	addge	r3, r3, r0
 801deca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dece:	bfac      	ite	ge
 801ded0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ded2:	81a3      	strhlt	r3, [r4, #12]
 801ded4:	bd10      	pop	{r4, pc}

0801ded6 <__swrite>:
 801ded6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deda:	461f      	mov	r7, r3
 801dedc:	898b      	ldrh	r3, [r1, #12]
 801dede:	05db      	lsls	r3, r3, #23
 801dee0:	4605      	mov	r5, r0
 801dee2:	460c      	mov	r4, r1
 801dee4:	4616      	mov	r6, r2
 801dee6:	d505      	bpl.n	801def4 <__swrite+0x1e>
 801dee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801deec:	2302      	movs	r3, #2
 801deee:	2200      	movs	r2, #0
 801def0:	f000 f968 	bl	801e1c4 <_lseek_r>
 801def4:	89a3      	ldrh	r3, [r4, #12]
 801def6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801defa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801defe:	81a3      	strh	r3, [r4, #12]
 801df00:	4632      	mov	r2, r6
 801df02:	463b      	mov	r3, r7
 801df04:	4628      	mov	r0, r5
 801df06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df0a:	f000 b98f 	b.w	801e22c <_write_r>

0801df0e <__sseek>:
 801df0e:	b510      	push	{r4, lr}
 801df10:	460c      	mov	r4, r1
 801df12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df16:	f000 f955 	bl	801e1c4 <_lseek_r>
 801df1a:	1c43      	adds	r3, r0, #1
 801df1c:	89a3      	ldrh	r3, [r4, #12]
 801df1e:	bf15      	itete	ne
 801df20:	6560      	strne	r0, [r4, #84]	@ 0x54
 801df22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801df26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801df2a:	81a3      	strheq	r3, [r4, #12]
 801df2c:	bf18      	it	ne
 801df2e:	81a3      	strhne	r3, [r4, #12]
 801df30:	bd10      	pop	{r4, pc}

0801df32 <__sclose>:
 801df32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df36:	f000 b935 	b.w	801e1a4 <_close_r>

0801df3a <_vsniprintf_r>:
 801df3a:	b530      	push	{r4, r5, lr}
 801df3c:	4614      	mov	r4, r2
 801df3e:	2c00      	cmp	r4, #0
 801df40:	b09b      	sub	sp, #108	@ 0x6c
 801df42:	4605      	mov	r5, r0
 801df44:	461a      	mov	r2, r3
 801df46:	da05      	bge.n	801df54 <_vsniprintf_r+0x1a>
 801df48:	238b      	movs	r3, #139	@ 0x8b
 801df4a:	6003      	str	r3, [r0, #0]
 801df4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df50:	b01b      	add	sp, #108	@ 0x6c
 801df52:	bd30      	pop	{r4, r5, pc}
 801df54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801df58:	f8ad 300c 	strh.w	r3, [sp, #12]
 801df5c:	bf14      	ite	ne
 801df5e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801df62:	4623      	moveq	r3, r4
 801df64:	9302      	str	r3, [sp, #8]
 801df66:	9305      	str	r3, [sp, #20]
 801df68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801df6c:	9100      	str	r1, [sp, #0]
 801df6e:	9104      	str	r1, [sp, #16]
 801df70:	f8ad 300e 	strh.w	r3, [sp, #14]
 801df74:	4669      	mov	r1, sp
 801df76:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801df78:	f000 fa86 	bl	801e488 <_svfiprintf_r>
 801df7c:	1c43      	adds	r3, r0, #1
 801df7e:	bfbc      	itt	lt
 801df80:	238b      	movlt	r3, #139	@ 0x8b
 801df82:	602b      	strlt	r3, [r5, #0]
 801df84:	2c00      	cmp	r4, #0
 801df86:	d0e3      	beq.n	801df50 <_vsniprintf_r+0x16>
 801df88:	9b00      	ldr	r3, [sp, #0]
 801df8a:	2200      	movs	r2, #0
 801df8c:	701a      	strb	r2, [r3, #0]
 801df8e:	e7df      	b.n	801df50 <_vsniprintf_r+0x16>

0801df90 <vsniprintf>:
 801df90:	b507      	push	{r0, r1, r2, lr}
 801df92:	9300      	str	r3, [sp, #0]
 801df94:	4613      	mov	r3, r2
 801df96:	460a      	mov	r2, r1
 801df98:	4601      	mov	r1, r0
 801df9a:	4803      	ldr	r0, [pc, #12]	@ (801dfa8 <vsniprintf+0x18>)
 801df9c:	6800      	ldr	r0, [r0, #0]
 801df9e:	f7ff ffcc 	bl	801df3a <_vsniprintf_r>
 801dfa2:	b003      	add	sp, #12
 801dfa4:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfa8:	24000338 	.word	0x24000338

0801dfac <__swbuf_r>:
 801dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfae:	460e      	mov	r6, r1
 801dfb0:	4614      	mov	r4, r2
 801dfb2:	4605      	mov	r5, r0
 801dfb4:	b118      	cbz	r0, 801dfbe <__swbuf_r+0x12>
 801dfb6:	6a03      	ldr	r3, [r0, #32]
 801dfb8:	b90b      	cbnz	r3, 801dfbe <__swbuf_r+0x12>
 801dfba:	f7ff fea5 	bl	801dd08 <__sinit>
 801dfbe:	69a3      	ldr	r3, [r4, #24]
 801dfc0:	60a3      	str	r3, [r4, #8]
 801dfc2:	89a3      	ldrh	r3, [r4, #12]
 801dfc4:	071a      	lsls	r2, r3, #28
 801dfc6:	d501      	bpl.n	801dfcc <__swbuf_r+0x20>
 801dfc8:	6923      	ldr	r3, [r4, #16]
 801dfca:	b943      	cbnz	r3, 801dfde <__swbuf_r+0x32>
 801dfcc:	4621      	mov	r1, r4
 801dfce:	4628      	mov	r0, r5
 801dfd0:	f000 f82a 	bl	801e028 <__swsetup_r>
 801dfd4:	b118      	cbz	r0, 801dfde <__swbuf_r+0x32>
 801dfd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801dfda:	4638      	mov	r0, r7
 801dfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfde:	6823      	ldr	r3, [r4, #0]
 801dfe0:	6922      	ldr	r2, [r4, #16]
 801dfe2:	1a98      	subs	r0, r3, r2
 801dfe4:	6963      	ldr	r3, [r4, #20]
 801dfe6:	b2f6      	uxtb	r6, r6
 801dfe8:	4283      	cmp	r3, r0
 801dfea:	4637      	mov	r7, r6
 801dfec:	dc05      	bgt.n	801dffa <__swbuf_r+0x4e>
 801dfee:	4621      	mov	r1, r4
 801dff0:	4628      	mov	r0, r5
 801dff2:	f000 fe99 	bl	801ed28 <_fflush_r>
 801dff6:	2800      	cmp	r0, #0
 801dff8:	d1ed      	bne.n	801dfd6 <__swbuf_r+0x2a>
 801dffa:	68a3      	ldr	r3, [r4, #8]
 801dffc:	3b01      	subs	r3, #1
 801dffe:	60a3      	str	r3, [r4, #8]
 801e000:	6823      	ldr	r3, [r4, #0]
 801e002:	1c5a      	adds	r2, r3, #1
 801e004:	6022      	str	r2, [r4, #0]
 801e006:	701e      	strb	r6, [r3, #0]
 801e008:	6962      	ldr	r2, [r4, #20]
 801e00a:	1c43      	adds	r3, r0, #1
 801e00c:	429a      	cmp	r2, r3
 801e00e:	d004      	beq.n	801e01a <__swbuf_r+0x6e>
 801e010:	89a3      	ldrh	r3, [r4, #12]
 801e012:	07db      	lsls	r3, r3, #31
 801e014:	d5e1      	bpl.n	801dfda <__swbuf_r+0x2e>
 801e016:	2e0a      	cmp	r6, #10
 801e018:	d1df      	bne.n	801dfda <__swbuf_r+0x2e>
 801e01a:	4621      	mov	r1, r4
 801e01c:	4628      	mov	r0, r5
 801e01e:	f000 fe83 	bl	801ed28 <_fflush_r>
 801e022:	2800      	cmp	r0, #0
 801e024:	d0d9      	beq.n	801dfda <__swbuf_r+0x2e>
 801e026:	e7d6      	b.n	801dfd6 <__swbuf_r+0x2a>

0801e028 <__swsetup_r>:
 801e028:	b538      	push	{r3, r4, r5, lr}
 801e02a:	4b29      	ldr	r3, [pc, #164]	@ (801e0d0 <__swsetup_r+0xa8>)
 801e02c:	4605      	mov	r5, r0
 801e02e:	6818      	ldr	r0, [r3, #0]
 801e030:	460c      	mov	r4, r1
 801e032:	b118      	cbz	r0, 801e03c <__swsetup_r+0x14>
 801e034:	6a03      	ldr	r3, [r0, #32]
 801e036:	b90b      	cbnz	r3, 801e03c <__swsetup_r+0x14>
 801e038:	f7ff fe66 	bl	801dd08 <__sinit>
 801e03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e040:	0719      	lsls	r1, r3, #28
 801e042:	d422      	bmi.n	801e08a <__swsetup_r+0x62>
 801e044:	06da      	lsls	r2, r3, #27
 801e046:	d407      	bmi.n	801e058 <__swsetup_r+0x30>
 801e048:	2209      	movs	r2, #9
 801e04a:	602a      	str	r2, [r5, #0]
 801e04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e050:	81a3      	strh	r3, [r4, #12]
 801e052:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e056:	e033      	b.n	801e0c0 <__swsetup_r+0x98>
 801e058:	0758      	lsls	r0, r3, #29
 801e05a:	d512      	bpl.n	801e082 <__swsetup_r+0x5a>
 801e05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e05e:	b141      	cbz	r1, 801e072 <__swsetup_r+0x4a>
 801e060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e064:	4299      	cmp	r1, r3
 801e066:	d002      	beq.n	801e06e <__swsetup_r+0x46>
 801e068:	4628      	mov	r0, r5
 801e06a:	f000 f95f 	bl	801e32c <_free_r>
 801e06e:	2300      	movs	r3, #0
 801e070:	6363      	str	r3, [r4, #52]	@ 0x34
 801e072:	89a3      	ldrh	r3, [r4, #12]
 801e074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e078:	81a3      	strh	r3, [r4, #12]
 801e07a:	2300      	movs	r3, #0
 801e07c:	6063      	str	r3, [r4, #4]
 801e07e:	6923      	ldr	r3, [r4, #16]
 801e080:	6023      	str	r3, [r4, #0]
 801e082:	89a3      	ldrh	r3, [r4, #12]
 801e084:	f043 0308 	orr.w	r3, r3, #8
 801e088:	81a3      	strh	r3, [r4, #12]
 801e08a:	6923      	ldr	r3, [r4, #16]
 801e08c:	b94b      	cbnz	r3, 801e0a2 <__swsetup_r+0x7a>
 801e08e:	89a3      	ldrh	r3, [r4, #12]
 801e090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e098:	d003      	beq.n	801e0a2 <__swsetup_r+0x7a>
 801e09a:	4621      	mov	r1, r4
 801e09c:	4628      	mov	r0, r5
 801e09e:	f000 fea3 	bl	801ede8 <__smakebuf_r>
 801e0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0a6:	f013 0201 	ands.w	r2, r3, #1
 801e0aa:	d00a      	beq.n	801e0c2 <__swsetup_r+0x9a>
 801e0ac:	2200      	movs	r2, #0
 801e0ae:	60a2      	str	r2, [r4, #8]
 801e0b0:	6962      	ldr	r2, [r4, #20]
 801e0b2:	4252      	negs	r2, r2
 801e0b4:	61a2      	str	r2, [r4, #24]
 801e0b6:	6922      	ldr	r2, [r4, #16]
 801e0b8:	b942      	cbnz	r2, 801e0cc <__swsetup_r+0xa4>
 801e0ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e0be:	d1c5      	bne.n	801e04c <__swsetup_r+0x24>
 801e0c0:	bd38      	pop	{r3, r4, r5, pc}
 801e0c2:	0799      	lsls	r1, r3, #30
 801e0c4:	bf58      	it	pl
 801e0c6:	6962      	ldrpl	r2, [r4, #20]
 801e0c8:	60a2      	str	r2, [r4, #8]
 801e0ca:	e7f4      	b.n	801e0b6 <__swsetup_r+0x8e>
 801e0cc:	2000      	movs	r0, #0
 801e0ce:	e7f7      	b.n	801e0c0 <__swsetup_r+0x98>
 801e0d0:	24000338 	.word	0x24000338

0801e0d4 <memcmp>:
 801e0d4:	b510      	push	{r4, lr}
 801e0d6:	3901      	subs	r1, #1
 801e0d8:	4402      	add	r2, r0
 801e0da:	4290      	cmp	r0, r2
 801e0dc:	d101      	bne.n	801e0e2 <memcmp+0xe>
 801e0de:	2000      	movs	r0, #0
 801e0e0:	e005      	b.n	801e0ee <memcmp+0x1a>
 801e0e2:	7803      	ldrb	r3, [r0, #0]
 801e0e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e0e8:	42a3      	cmp	r3, r4
 801e0ea:	d001      	beq.n	801e0f0 <memcmp+0x1c>
 801e0ec:	1b18      	subs	r0, r3, r4
 801e0ee:	bd10      	pop	{r4, pc}
 801e0f0:	3001      	adds	r0, #1
 801e0f2:	e7f2      	b.n	801e0da <memcmp+0x6>

0801e0f4 <memmove>:
 801e0f4:	4288      	cmp	r0, r1
 801e0f6:	b510      	push	{r4, lr}
 801e0f8:	eb01 0402 	add.w	r4, r1, r2
 801e0fc:	d902      	bls.n	801e104 <memmove+0x10>
 801e0fe:	4284      	cmp	r4, r0
 801e100:	4623      	mov	r3, r4
 801e102:	d807      	bhi.n	801e114 <memmove+0x20>
 801e104:	1e43      	subs	r3, r0, #1
 801e106:	42a1      	cmp	r1, r4
 801e108:	d008      	beq.n	801e11c <memmove+0x28>
 801e10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e112:	e7f8      	b.n	801e106 <memmove+0x12>
 801e114:	4402      	add	r2, r0
 801e116:	4601      	mov	r1, r0
 801e118:	428a      	cmp	r2, r1
 801e11a:	d100      	bne.n	801e11e <memmove+0x2a>
 801e11c:	bd10      	pop	{r4, pc}
 801e11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e126:	e7f7      	b.n	801e118 <memmove+0x24>

0801e128 <memset>:
 801e128:	4402      	add	r2, r0
 801e12a:	4603      	mov	r3, r0
 801e12c:	4293      	cmp	r3, r2
 801e12e:	d100      	bne.n	801e132 <memset+0xa>
 801e130:	4770      	bx	lr
 801e132:	f803 1b01 	strb.w	r1, [r3], #1
 801e136:	e7f9      	b.n	801e12c <memset+0x4>

0801e138 <strchr>:
 801e138:	b2c9      	uxtb	r1, r1
 801e13a:	4603      	mov	r3, r0
 801e13c:	4618      	mov	r0, r3
 801e13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e142:	b112      	cbz	r2, 801e14a <strchr+0x12>
 801e144:	428a      	cmp	r2, r1
 801e146:	d1f9      	bne.n	801e13c <strchr+0x4>
 801e148:	4770      	bx	lr
 801e14a:	2900      	cmp	r1, #0
 801e14c:	bf18      	it	ne
 801e14e:	2000      	movne	r0, #0
 801e150:	4770      	bx	lr

0801e152 <strncmp>:
 801e152:	b510      	push	{r4, lr}
 801e154:	b16a      	cbz	r2, 801e172 <strncmp+0x20>
 801e156:	3901      	subs	r1, #1
 801e158:	1884      	adds	r4, r0, r2
 801e15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e15e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e162:	429a      	cmp	r2, r3
 801e164:	d103      	bne.n	801e16e <strncmp+0x1c>
 801e166:	42a0      	cmp	r0, r4
 801e168:	d001      	beq.n	801e16e <strncmp+0x1c>
 801e16a:	2a00      	cmp	r2, #0
 801e16c:	d1f5      	bne.n	801e15a <strncmp+0x8>
 801e16e:	1ad0      	subs	r0, r2, r3
 801e170:	bd10      	pop	{r4, pc}
 801e172:	4610      	mov	r0, r2
 801e174:	e7fc      	b.n	801e170 <strncmp+0x1e>

0801e176 <strstr>:
 801e176:	780a      	ldrb	r2, [r1, #0]
 801e178:	b570      	push	{r4, r5, r6, lr}
 801e17a:	b96a      	cbnz	r2, 801e198 <strstr+0x22>
 801e17c:	bd70      	pop	{r4, r5, r6, pc}
 801e17e:	429a      	cmp	r2, r3
 801e180:	d109      	bne.n	801e196 <strstr+0x20>
 801e182:	460c      	mov	r4, r1
 801e184:	4605      	mov	r5, r0
 801e186:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d0f6      	beq.n	801e17c <strstr+0x6>
 801e18e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e192:	429e      	cmp	r6, r3
 801e194:	d0f7      	beq.n	801e186 <strstr+0x10>
 801e196:	3001      	adds	r0, #1
 801e198:	7803      	ldrb	r3, [r0, #0]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d1ef      	bne.n	801e17e <strstr+0x8>
 801e19e:	4618      	mov	r0, r3
 801e1a0:	e7ec      	b.n	801e17c <strstr+0x6>
	...

0801e1a4 <_close_r>:
 801e1a4:	b538      	push	{r3, r4, r5, lr}
 801e1a6:	4d06      	ldr	r5, [pc, #24]	@ (801e1c0 <_close_r+0x1c>)
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	4604      	mov	r4, r0
 801e1ac:	4608      	mov	r0, r1
 801e1ae:	602b      	str	r3, [r5, #0]
 801e1b0:	f7e4 f90a 	bl	80023c8 <_close>
 801e1b4:	1c43      	adds	r3, r0, #1
 801e1b6:	d102      	bne.n	801e1be <_close_r+0x1a>
 801e1b8:	682b      	ldr	r3, [r5, #0]
 801e1ba:	b103      	cbz	r3, 801e1be <_close_r+0x1a>
 801e1bc:	6023      	str	r3, [r4, #0]
 801e1be:	bd38      	pop	{r3, r4, r5, pc}
 801e1c0:	240131b8 	.word	0x240131b8

0801e1c4 <_lseek_r>:
 801e1c4:	b538      	push	{r3, r4, r5, lr}
 801e1c6:	4d07      	ldr	r5, [pc, #28]	@ (801e1e4 <_lseek_r+0x20>)
 801e1c8:	4604      	mov	r4, r0
 801e1ca:	4608      	mov	r0, r1
 801e1cc:	4611      	mov	r1, r2
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	602a      	str	r2, [r5, #0]
 801e1d2:	461a      	mov	r2, r3
 801e1d4:	f7e4 f91f 	bl	8002416 <_lseek>
 801e1d8:	1c43      	adds	r3, r0, #1
 801e1da:	d102      	bne.n	801e1e2 <_lseek_r+0x1e>
 801e1dc:	682b      	ldr	r3, [r5, #0]
 801e1de:	b103      	cbz	r3, 801e1e2 <_lseek_r+0x1e>
 801e1e0:	6023      	str	r3, [r4, #0]
 801e1e2:	bd38      	pop	{r3, r4, r5, pc}
 801e1e4:	240131b8 	.word	0x240131b8

0801e1e8 <_read_r>:
 801e1e8:	b538      	push	{r3, r4, r5, lr}
 801e1ea:	4d07      	ldr	r5, [pc, #28]	@ (801e208 <_read_r+0x20>)
 801e1ec:	4604      	mov	r4, r0
 801e1ee:	4608      	mov	r0, r1
 801e1f0:	4611      	mov	r1, r2
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	602a      	str	r2, [r5, #0]
 801e1f6:	461a      	mov	r2, r3
 801e1f8:	f7e4 f8ad 	bl	8002356 <_read>
 801e1fc:	1c43      	adds	r3, r0, #1
 801e1fe:	d102      	bne.n	801e206 <_read_r+0x1e>
 801e200:	682b      	ldr	r3, [r5, #0]
 801e202:	b103      	cbz	r3, 801e206 <_read_r+0x1e>
 801e204:	6023      	str	r3, [r4, #0]
 801e206:	bd38      	pop	{r3, r4, r5, pc}
 801e208:	240131b8 	.word	0x240131b8

0801e20c <_sbrk_r>:
 801e20c:	b538      	push	{r3, r4, r5, lr}
 801e20e:	4d06      	ldr	r5, [pc, #24]	@ (801e228 <_sbrk_r+0x1c>)
 801e210:	2300      	movs	r3, #0
 801e212:	4604      	mov	r4, r0
 801e214:	4608      	mov	r0, r1
 801e216:	602b      	str	r3, [r5, #0]
 801e218:	f7e4 f90a 	bl	8002430 <_sbrk>
 801e21c:	1c43      	adds	r3, r0, #1
 801e21e:	d102      	bne.n	801e226 <_sbrk_r+0x1a>
 801e220:	682b      	ldr	r3, [r5, #0]
 801e222:	b103      	cbz	r3, 801e226 <_sbrk_r+0x1a>
 801e224:	6023      	str	r3, [r4, #0]
 801e226:	bd38      	pop	{r3, r4, r5, pc}
 801e228:	240131b8 	.word	0x240131b8

0801e22c <_write_r>:
 801e22c:	b538      	push	{r3, r4, r5, lr}
 801e22e:	4d07      	ldr	r5, [pc, #28]	@ (801e24c <_write_r+0x20>)
 801e230:	4604      	mov	r4, r0
 801e232:	4608      	mov	r0, r1
 801e234:	4611      	mov	r1, r2
 801e236:	2200      	movs	r2, #0
 801e238:	602a      	str	r2, [r5, #0]
 801e23a:	461a      	mov	r2, r3
 801e23c:	f7e4 f8a8 	bl	8002390 <_write>
 801e240:	1c43      	adds	r3, r0, #1
 801e242:	d102      	bne.n	801e24a <_write_r+0x1e>
 801e244:	682b      	ldr	r3, [r5, #0]
 801e246:	b103      	cbz	r3, 801e24a <_write_r+0x1e>
 801e248:	6023      	str	r3, [r4, #0]
 801e24a:	bd38      	pop	{r3, r4, r5, pc}
 801e24c:	240131b8 	.word	0x240131b8

0801e250 <__errno>:
 801e250:	4b01      	ldr	r3, [pc, #4]	@ (801e258 <__errno+0x8>)
 801e252:	6818      	ldr	r0, [r3, #0]
 801e254:	4770      	bx	lr
 801e256:	bf00      	nop
 801e258:	24000338 	.word	0x24000338

0801e25c <__libc_init_array>:
 801e25c:	b570      	push	{r4, r5, r6, lr}
 801e25e:	4d0d      	ldr	r5, [pc, #52]	@ (801e294 <__libc_init_array+0x38>)
 801e260:	4c0d      	ldr	r4, [pc, #52]	@ (801e298 <__libc_init_array+0x3c>)
 801e262:	1b64      	subs	r4, r4, r5
 801e264:	10a4      	asrs	r4, r4, #2
 801e266:	2600      	movs	r6, #0
 801e268:	42a6      	cmp	r6, r4
 801e26a:	d109      	bne.n	801e280 <__libc_init_array+0x24>
 801e26c:	4d0b      	ldr	r5, [pc, #44]	@ (801e29c <__libc_init_array+0x40>)
 801e26e:	4c0c      	ldr	r4, [pc, #48]	@ (801e2a0 <__libc_init_array+0x44>)
 801e270:	f000 fe64 	bl	801ef3c <_init>
 801e274:	1b64      	subs	r4, r4, r5
 801e276:	10a4      	asrs	r4, r4, #2
 801e278:	2600      	movs	r6, #0
 801e27a:	42a6      	cmp	r6, r4
 801e27c:	d105      	bne.n	801e28a <__libc_init_array+0x2e>
 801e27e:	bd70      	pop	{r4, r5, r6, pc}
 801e280:	f855 3b04 	ldr.w	r3, [r5], #4
 801e284:	4798      	blx	r3
 801e286:	3601      	adds	r6, #1
 801e288:	e7ee      	b.n	801e268 <__libc_init_array+0xc>
 801e28a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e28e:	4798      	blx	r3
 801e290:	3601      	adds	r6, #1
 801e292:	e7f2      	b.n	801e27a <__libc_init_array+0x1e>
 801e294:	0801ff90 	.word	0x0801ff90
 801e298:	0801ff90 	.word	0x0801ff90
 801e29c:	0801ff90 	.word	0x0801ff90
 801e2a0:	0801ff9c 	.word	0x0801ff9c

0801e2a4 <__retarget_lock_init_recursive>:
 801e2a4:	4770      	bx	lr

0801e2a6 <__retarget_lock_acquire_recursive>:
 801e2a6:	4770      	bx	lr

0801e2a8 <__retarget_lock_release_recursive>:
 801e2a8:	4770      	bx	lr

0801e2aa <strcpy>:
 801e2aa:	4603      	mov	r3, r0
 801e2ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e2b0:	f803 2b01 	strb.w	r2, [r3], #1
 801e2b4:	2a00      	cmp	r2, #0
 801e2b6:	d1f9      	bne.n	801e2ac <strcpy+0x2>
 801e2b8:	4770      	bx	lr

0801e2ba <memcpy>:
 801e2ba:	440a      	add	r2, r1
 801e2bc:	4291      	cmp	r1, r2
 801e2be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e2c2:	d100      	bne.n	801e2c6 <memcpy+0xc>
 801e2c4:	4770      	bx	lr
 801e2c6:	b510      	push	{r4, lr}
 801e2c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e2cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e2d0:	4291      	cmp	r1, r2
 801e2d2:	d1f9      	bne.n	801e2c8 <memcpy+0xe>
 801e2d4:	bd10      	pop	{r4, pc}
	...

0801e2d8 <__assert_func>:
 801e2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e2da:	4614      	mov	r4, r2
 801e2dc:	461a      	mov	r2, r3
 801e2de:	4b09      	ldr	r3, [pc, #36]	@ (801e304 <__assert_func+0x2c>)
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	4605      	mov	r5, r0
 801e2e4:	68d8      	ldr	r0, [r3, #12]
 801e2e6:	b954      	cbnz	r4, 801e2fe <__assert_func+0x26>
 801e2e8:	4b07      	ldr	r3, [pc, #28]	@ (801e308 <__assert_func+0x30>)
 801e2ea:	461c      	mov	r4, r3
 801e2ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e2f0:	9100      	str	r1, [sp, #0]
 801e2f2:	462b      	mov	r3, r5
 801e2f4:	4905      	ldr	r1, [pc, #20]	@ (801e30c <__assert_func+0x34>)
 801e2f6:	f000 fd3f 	bl	801ed78 <fiprintf>
 801e2fa:	f000 fdd3 	bl	801eea4 <abort>
 801e2fe:	4b04      	ldr	r3, [pc, #16]	@ (801e310 <__assert_func+0x38>)
 801e300:	e7f4      	b.n	801e2ec <__assert_func+0x14>
 801e302:	bf00      	nop
 801e304:	24000338 	.word	0x24000338
 801e308:	0801ff51 	.word	0x0801ff51
 801e30c:	0801ff23 	.word	0x0801ff23
 801e310:	0801ff16 	.word	0x0801ff16

0801e314 <__env_lock>:
 801e314:	4801      	ldr	r0, [pc, #4]	@ (801e31c <__env_lock+0x8>)
 801e316:	f7ff bfc6 	b.w	801e2a6 <__retarget_lock_acquire_recursive>
 801e31a:	bf00      	nop
 801e31c:	240131bc 	.word	0x240131bc

0801e320 <__env_unlock>:
 801e320:	4801      	ldr	r0, [pc, #4]	@ (801e328 <__env_unlock+0x8>)
 801e322:	f7ff bfc1 	b.w	801e2a8 <__retarget_lock_release_recursive>
 801e326:	bf00      	nop
 801e328:	240131bc 	.word	0x240131bc

0801e32c <_free_r>:
 801e32c:	b538      	push	{r3, r4, r5, lr}
 801e32e:	4605      	mov	r5, r0
 801e330:	2900      	cmp	r1, #0
 801e332:	d041      	beq.n	801e3b8 <_free_r+0x8c>
 801e334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e338:	1f0c      	subs	r4, r1, #4
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	bfb8      	it	lt
 801e33e:	18e4      	addlt	r4, r4, r3
 801e340:	f7ff fb30 	bl	801d9a4 <__malloc_lock>
 801e344:	4a1d      	ldr	r2, [pc, #116]	@ (801e3bc <_free_r+0x90>)
 801e346:	6813      	ldr	r3, [r2, #0]
 801e348:	b933      	cbnz	r3, 801e358 <_free_r+0x2c>
 801e34a:	6063      	str	r3, [r4, #4]
 801e34c:	6014      	str	r4, [r2, #0]
 801e34e:	4628      	mov	r0, r5
 801e350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e354:	f7ff bb2c 	b.w	801d9b0 <__malloc_unlock>
 801e358:	42a3      	cmp	r3, r4
 801e35a:	d908      	bls.n	801e36e <_free_r+0x42>
 801e35c:	6820      	ldr	r0, [r4, #0]
 801e35e:	1821      	adds	r1, r4, r0
 801e360:	428b      	cmp	r3, r1
 801e362:	bf01      	itttt	eq
 801e364:	6819      	ldreq	r1, [r3, #0]
 801e366:	685b      	ldreq	r3, [r3, #4]
 801e368:	1809      	addeq	r1, r1, r0
 801e36a:	6021      	streq	r1, [r4, #0]
 801e36c:	e7ed      	b.n	801e34a <_free_r+0x1e>
 801e36e:	461a      	mov	r2, r3
 801e370:	685b      	ldr	r3, [r3, #4]
 801e372:	b10b      	cbz	r3, 801e378 <_free_r+0x4c>
 801e374:	42a3      	cmp	r3, r4
 801e376:	d9fa      	bls.n	801e36e <_free_r+0x42>
 801e378:	6811      	ldr	r1, [r2, #0]
 801e37a:	1850      	adds	r0, r2, r1
 801e37c:	42a0      	cmp	r0, r4
 801e37e:	d10b      	bne.n	801e398 <_free_r+0x6c>
 801e380:	6820      	ldr	r0, [r4, #0]
 801e382:	4401      	add	r1, r0
 801e384:	1850      	adds	r0, r2, r1
 801e386:	4283      	cmp	r3, r0
 801e388:	6011      	str	r1, [r2, #0]
 801e38a:	d1e0      	bne.n	801e34e <_free_r+0x22>
 801e38c:	6818      	ldr	r0, [r3, #0]
 801e38e:	685b      	ldr	r3, [r3, #4]
 801e390:	6053      	str	r3, [r2, #4]
 801e392:	4408      	add	r0, r1
 801e394:	6010      	str	r0, [r2, #0]
 801e396:	e7da      	b.n	801e34e <_free_r+0x22>
 801e398:	d902      	bls.n	801e3a0 <_free_r+0x74>
 801e39a:	230c      	movs	r3, #12
 801e39c:	602b      	str	r3, [r5, #0]
 801e39e:	e7d6      	b.n	801e34e <_free_r+0x22>
 801e3a0:	6820      	ldr	r0, [r4, #0]
 801e3a2:	1821      	adds	r1, r4, r0
 801e3a4:	428b      	cmp	r3, r1
 801e3a6:	bf04      	itt	eq
 801e3a8:	6819      	ldreq	r1, [r3, #0]
 801e3aa:	685b      	ldreq	r3, [r3, #4]
 801e3ac:	6063      	str	r3, [r4, #4]
 801e3ae:	bf04      	itt	eq
 801e3b0:	1809      	addeq	r1, r1, r0
 801e3b2:	6021      	streq	r1, [r4, #0]
 801e3b4:	6054      	str	r4, [r2, #4]
 801e3b6:	e7ca      	b.n	801e34e <_free_r+0x22>
 801e3b8:	bd38      	pop	{r3, r4, r5, pc}
 801e3ba:	bf00      	nop
 801e3bc:	24013078 	.word	0x24013078

0801e3c0 <_malloc_usable_size_r>:
 801e3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3c4:	1f18      	subs	r0, r3, #4
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	bfbc      	itt	lt
 801e3ca:	580b      	ldrlt	r3, [r1, r0]
 801e3cc:	18c0      	addlt	r0, r0, r3
 801e3ce:	4770      	bx	lr

0801e3d0 <__ssputs_r>:
 801e3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3d4:	688e      	ldr	r6, [r1, #8]
 801e3d6:	461f      	mov	r7, r3
 801e3d8:	42be      	cmp	r6, r7
 801e3da:	680b      	ldr	r3, [r1, #0]
 801e3dc:	4682      	mov	sl, r0
 801e3de:	460c      	mov	r4, r1
 801e3e0:	4690      	mov	r8, r2
 801e3e2:	d82d      	bhi.n	801e440 <__ssputs_r+0x70>
 801e3e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e3e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e3ec:	d026      	beq.n	801e43c <__ssputs_r+0x6c>
 801e3ee:	6965      	ldr	r5, [r4, #20]
 801e3f0:	6909      	ldr	r1, [r1, #16]
 801e3f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3f6:	eba3 0901 	sub.w	r9, r3, r1
 801e3fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3fe:	1c7b      	adds	r3, r7, #1
 801e400:	444b      	add	r3, r9
 801e402:	106d      	asrs	r5, r5, #1
 801e404:	429d      	cmp	r5, r3
 801e406:	bf38      	it	cc
 801e408:	461d      	movcc	r5, r3
 801e40a:	0553      	lsls	r3, r2, #21
 801e40c:	d527      	bpl.n	801e45e <__ssputs_r+0x8e>
 801e40e:	4629      	mov	r1, r5
 801e410:	f7ff fa48 	bl	801d8a4 <_malloc_r>
 801e414:	4606      	mov	r6, r0
 801e416:	b360      	cbz	r0, 801e472 <__ssputs_r+0xa2>
 801e418:	6921      	ldr	r1, [r4, #16]
 801e41a:	464a      	mov	r2, r9
 801e41c:	f7ff ff4d 	bl	801e2ba <memcpy>
 801e420:	89a3      	ldrh	r3, [r4, #12]
 801e422:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e42a:	81a3      	strh	r3, [r4, #12]
 801e42c:	6126      	str	r6, [r4, #16]
 801e42e:	6165      	str	r5, [r4, #20]
 801e430:	444e      	add	r6, r9
 801e432:	eba5 0509 	sub.w	r5, r5, r9
 801e436:	6026      	str	r6, [r4, #0]
 801e438:	60a5      	str	r5, [r4, #8]
 801e43a:	463e      	mov	r6, r7
 801e43c:	42be      	cmp	r6, r7
 801e43e:	d900      	bls.n	801e442 <__ssputs_r+0x72>
 801e440:	463e      	mov	r6, r7
 801e442:	6820      	ldr	r0, [r4, #0]
 801e444:	4632      	mov	r2, r6
 801e446:	4641      	mov	r1, r8
 801e448:	f7ff fe54 	bl	801e0f4 <memmove>
 801e44c:	68a3      	ldr	r3, [r4, #8]
 801e44e:	1b9b      	subs	r3, r3, r6
 801e450:	60a3      	str	r3, [r4, #8]
 801e452:	6823      	ldr	r3, [r4, #0]
 801e454:	4433      	add	r3, r6
 801e456:	6023      	str	r3, [r4, #0]
 801e458:	2000      	movs	r0, #0
 801e45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e45e:	462a      	mov	r2, r5
 801e460:	f7ff fb20 	bl	801daa4 <_realloc_r>
 801e464:	4606      	mov	r6, r0
 801e466:	2800      	cmp	r0, #0
 801e468:	d1e0      	bne.n	801e42c <__ssputs_r+0x5c>
 801e46a:	6921      	ldr	r1, [r4, #16]
 801e46c:	4650      	mov	r0, sl
 801e46e:	f7ff ff5d 	bl	801e32c <_free_r>
 801e472:	230c      	movs	r3, #12
 801e474:	f8ca 3000 	str.w	r3, [sl]
 801e478:	89a3      	ldrh	r3, [r4, #12]
 801e47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e47e:	81a3      	strh	r3, [r4, #12]
 801e480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e484:	e7e9      	b.n	801e45a <__ssputs_r+0x8a>
	...

0801e488 <_svfiprintf_r>:
 801e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e48c:	4698      	mov	r8, r3
 801e48e:	898b      	ldrh	r3, [r1, #12]
 801e490:	061b      	lsls	r3, r3, #24
 801e492:	b09d      	sub	sp, #116	@ 0x74
 801e494:	4607      	mov	r7, r0
 801e496:	460d      	mov	r5, r1
 801e498:	4614      	mov	r4, r2
 801e49a:	d510      	bpl.n	801e4be <_svfiprintf_r+0x36>
 801e49c:	690b      	ldr	r3, [r1, #16]
 801e49e:	b973      	cbnz	r3, 801e4be <_svfiprintf_r+0x36>
 801e4a0:	2140      	movs	r1, #64	@ 0x40
 801e4a2:	f7ff f9ff 	bl	801d8a4 <_malloc_r>
 801e4a6:	6028      	str	r0, [r5, #0]
 801e4a8:	6128      	str	r0, [r5, #16]
 801e4aa:	b930      	cbnz	r0, 801e4ba <_svfiprintf_r+0x32>
 801e4ac:	230c      	movs	r3, #12
 801e4ae:	603b      	str	r3, [r7, #0]
 801e4b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e4b4:	b01d      	add	sp, #116	@ 0x74
 801e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ba:	2340      	movs	r3, #64	@ 0x40
 801e4bc:	616b      	str	r3, [r5, #20]
 801e4be:	2300      	movs	r3, #0
 801e4c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4c2:	2320      	movs	r3, #32
 801e4c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e4c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4cc:	2330      	movs	r3, #48	@ 0x30
 801e4ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e66c <_svfiprintf_r+0x1e4>
 801e4d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e4d6:	f04f 0901 	mov.w	r9, #1
 801e4da:	4623      	mov	r3, r4
 801e4dc:	469a      	mov	sl, r3
 801e4de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4e2:	b10a      	cbz	r2, 801e4e8 <_svfiprintf_r+0x60>
 801e4e4:	2a25      	cmp	r2, #37	@ 0x25
 801e4e6:	d1f9      	bne.n	801e4dc <_svfiprintf_r+0x54>
 801e4e8:	ebba 0b04 	subs.w	fp, sl, r4
 801e4ec:	d00b      	beq.n	801e506 <_svfiprintf_r+0x7e>
 801e4ee:	465b      	mov	r3, fp
 801e4f0:	4622      	mov	r2, r4
 801e4f2:	4629      	mov	r1, r5
 801e4f4:	4638      	mov	r0, r7
 801e4f6:	f7ff ff6b 	bl	801e3d0 <__ssputs_r>
 801e4fa:	3001      	adds	r0, #1
 801e4fc:	f000 80a7 	beq.w	801e64e <_svfiprintf_r+0x1c6>
 801e500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e502:	445a      	add	r2, fp
 801e504:	9209      	str	r2, [sp, #36]	@ 0x24
 801e506:	f89a 3000 	ldrb.w	r3, [sl]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	f000 809f 	beq.w	801e64e <_svfiprintf_r+0x1c6>
 801e510:	2300      	movs	r3, #0
 801e512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e51a:	f10a 0a01 	add.w	sl, sl, #1
 801e51e:	9304      	str	r3, [sp, #16]
 801e520:	9307      	str	r3, [sp, #28]
 801e522:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e526:	931a      	str	r3, [sp, #104]	@ 0x68
 801e528:	4654      	mov	r4, sl
 801e52a:	2205      	movs	r2, #5
 801e52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e530:	484e      	ldr	r0, [pc, #312]	@ (801e66c <_svfiprintf_r+0x1e4>)
 801e532:	f7e1 feed 	bl	8000310 <memchr>
 801e536:	9a04      	ldr	r2, [sp, #16]
 801e538:	b9d8      	cbnz	r0, 801e572 <_svfiprintf_r+0xea>
 801e53a:	06d0      	lsls	r0, r2, #27
 801e53c:	bf44      	itt	mi
 801e53e:	2320      	movmi	r3, #32
 801e540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e544:	0711      	lsls	r1, r2, #28
 801e546:	bf44      	itt	mi
 801e548:	232b      	movmi	r3, #43	@ 0x2b
 801e54a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e54e:	f89a 3000 	ldrb.w	r3, [sl]
 801e552:	2b2a      	cmp	r3, #42	@ 0x2a
 801e554:	d015      	beq.n	801e582 <_svfiprintf_r+0xfa>
 801e556:	9a07      	ldr	r2, [sp, #28]
 801e558:	4654      	mov	r4, sl
 801e55a:	2000      	movs	r0, #0
 801e55c:	f04f 0c0a 	mov.w	ip, #10
 801e560:	4621      	mov	r1, r4
 801e562:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e566:	3b30      	subs	r3, #48	@ 0x30
 801e568:	2b09      	cmp	r3, #9
 801e56a:	d94b      	bls.n	801e604 <_svfiprintf_r+0x17c>
 801e56c:	b1b0      	cbz	r0, 801e59c <_svfiprintf_r+0x114>
 801e56e:	9207      	str	r2, [sp, #28]
 801e570:	e014      	b.n	801e59c <_svfiprintf_r+0x114>
 801e572:	eba0 0308 	sub.w	r3, r0, r8
 801e576:	fa09 f303 	lsl.w	r3, r9, r3
 801e57a:	4313      	orrs	r3, r2
 801e57c:	9304      	str	r3, [sp, #16]
 801e57e:	46a2      	mov	sl, r4
 801e580:	e7d2      	b.n	801e528 <_svfiprintf_r+0xa0>
 801e582:	9b03      	ldr	r3, [sp, #12]
 801e584:	1d19      	adds	r1, r3, #4
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	9103      	str	r1, [sp, #12]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	bfbb      	ittet	lt
 801e58e:	425b      	neglt	r3, r3
 801e590:	f042 0202 	orrlt.w	r2, r2, #2
 801e594:	9307      	strge	r3, [sp, #28]
 801e596:	9307      	strlt	r3, [sp, #28]
 801e598:	bfb8      	it	lt
 801e59a:	9204      	strlt	r2, [sp, #16]
 801e59c:	7823      	ldrb	r3, [r4, #0]
 801e59e:	2b2e      	cmp	r3, #46	@ 0x2e
 801e5a0:	d10a      	bne.n	801e5b8 <_svfiprintf_r+0x130>
 801e5a2:	7863      	ldrb	r3, [r4, #1]
 801e5a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5a6:	d132      	bne.n	801e60e <_svfiprintf_r+0x186>
 801e5a8:	9b03      	ldr	r3, [sp, #12]
 801e5aa:	1d1a      	adds	r2, r3, #4
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	9203      	str	r2, [sp, #12]
 801e5b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e5b4:	3402      	adds	r4, #2
 801e5b6:	9305      	str	r3, [sp, #20]
 801e5b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e67c <_svfiprintf_r+0x1f4>
 801e5bc:	7821      	ldrb	r1, [r4, #0]
 801e5be:	2203      	movs	r2, #3
 801e5c0:	4650      	mov	r0, sl
 801e5c2:	f7e1 fea5 	bl	8000310 <memchr>
 801e5c6:	b138      	cbz	r0, 801e5d8 <_svfiprintf_r+0x150>
 801e5c8:	9b04      	ldr	r3, [sp, #16]
 801e5ca:	eba0 000a 	sub.w	r0, r0, sl
 801e5ce:	2240      	movs	r2, #64	@ 0x40
 801e5d0:	4082      	lsls	r2, r0
 801e5d2:	4313      	orrs	r3, r2
 801e5d4:	3401      	adds	r4, #1
 801e5d6:	9304      	str	r3, [sp, #16]
 801e5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5dc:	4824      	ldr	r0, [pc, #144]	@ (801e670 <_svfiprintf_r+0x1e8>)
 801e5de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e5e2:	2206      	movs	r2, #6
 801e5e4:	f7e1 fe94 	bl	8000310 <memchr>
 801e5e8:	2800      	cmp	r0, #0
 801e5ea:	d036      	beq.n	801e65a <_svfiprintf_r+0x1d2>
 801e5ec:	4b21      	ldr	r3, [pc, #132]	@ (801e674 <_svfiprintf_r+0x1ec>)
 801e5ee:	bb1b      	cbnz	r3, 801e638 <_svfiprintf_r+0x1b0>
 801e5f0:	9b03      	ldr	r3, [sp, #12]
 801e5f2:	3307      	adds	r3, #7
 801e5f4:	f023 0307 	bic.w	r3, r3, #7
 801e5f8:	3308      	adds	r3, #8
 801e5fa:	9303      	str	r3, [sp, #12]
 801e5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5fe:	4433      	add	r3, r6
 801e600:	9309      	str	r3, [sp, #36]	@ 0x24
 801e602:	e76a      	b.n	801e4da <_svfiprintf_r+0x52>
 801e604:	fb0c 3202 	mla	r2, ip, r2, r3
 801e608:	460c      	mov	r4, r1
 801e60a:	2001      	movs	r0, #1
 801e60c:	e7a8      	b.n	801e560 <_svfiprintf_r+0xd8>
 801e60e:	2300      	movs	r3, #0
 801e610:	3401      	adds	r4, #1
 801e612:	9305      	str	r3, [sp, #20]
 801e614:	4619      	mov	r1, r3
 801e616:	f04f 0c0a 	mov.w	ip, #10
 801e61a:	4620      	mov	r0, r4
 801e61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e620:	3a30      	subs	r2, #48	@ 0x30
 801e622:	2a09      	cmp	r2, #9
 801e624:	d903      	bls.n	801e62e <_svfiprintf_r+0x1a6>
 801e626:	2b00      	cmp	r3, #0
 801e628:	d0c6      	beq.n	801e5b8 <_svfiprintf_r+0x130>
 801e62a:	9105      	str	r1, [sp, #20]
 801e62c:	e7c4      	b.n	801e5b8 <_svfiprintf_r+0x130>
 801e62e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e632:	4604      	mov	r4, r0
 801e634:	2301      	movs	r3, #1
 801e636:	e7f0      	b.n	801e61a <_svfiprintf_r+0x192>
 801e638:	ab03      	add	r3, sp, #12
 801e63a:	9300      	str	r3, [sp, #0]
 801e63c:	462a      	mov	r2, r5
 801e63e:	4b0e      	ldr	r3, [pc, #56]	@ (801e678 <_svfiprintf_r+0x1f0>)
 801e640:	a904      	add	r1, sp, #16
 801e642:	4638      	mov	r0, r7
 801e644:	f3af 8000 	nop.w
 801e648:	1c42      	adds	r2, r0, #1
 801e64a:	4606      	mov	r6, r0
 801e64c:	d1d6      	bne.n	801e5fc <_svfiprintf_r+0x174>
 801e64e:	89ab      	ldrh	r3, [r5, #12]
 801e650:	065b      	lsls	r3, r3, #25
 801e652:	f53f af2d 	bmi.w	801e4b0 <_svfiprintf_r+0x28>
 801e656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e658:	e72c      	b.n	801e4b4 <_svfiprintf_r+0x2c>
 801e65a:	ab03      	add	r3, sp, #12
 801e65c:	9300      	str	r3, [sp, #0]
 801e65e:	462a      	mov	r2, r5
 801e660:	4b05      	ldr	r3, [pc, #20]	@ (801e678 <_svfiprintf_r+0x1f0>)
 801e662:	a904      	add	r1, sp, #16
 801e664:	4638      	mov	r0, r7
 801e666:	f000 f9bb 	bl	801e9e0 <_printf_i>
 801e66a:	e7ed      	b.n	801e648 <_svfiprintf_r+0x1c0>
 801e66c:	0801ff52 	.word	0x0801ff52
 801e670:	0801ff5c 	.word	0x0801ff5c
 801e674:	00000000 	.word	0x00000000
 801e678:	0801e3d1 	.word	0x0801e3d1
 801e67c:	0801ff58 	.word	0x0801ff58

0801e680 <__sfputc_r>:
 801e680:	6893      	ldr	r3, [r2, #8]
 801e682:	3b01      	subs	r3, #1
 801e684:	2b00      	cmp	r3, #0
 801e686:	b410      	push	{r4}
 801e688:	6093      	str	r3, [r2, #8]
 801e68a:	da08      	bge.n	801e69e <__sfputc_r+0x1e>
 801e68c:	6994      	ldr	r4, [r2, #24]
 801e68e:	42a3      	cmp	r3, r4
 801e690:	db01      	blt.n	801e696 <__sfputc_r+0x16>
 801e692:	290a      	cmp	r1, #10
 801e694:	d103      	bne.n	801e69e <__sfputc_r+0x1e>
 801e696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e69a:	f7ff bc87 	b.w	801dfac <__swbuf_r>
 801e69e:	6813      	ldr	r3, [r2, #0]
 801e6a0:	1c58      	adds	r0, r3, #1
 801e6a2:	6010      	str	r0, [r2, #0]
 801e6a4:	7019      	strb	r1, [r3, #0]
 801e6a6:	4608      	mov	r0, r1
 801e6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6ac:	4770      	bx	lr

0801e6ae <__sfputs_r>:
 801e6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6b0:	4606      	mov	r6, r0
 801e6b2:	460f      	mov	r7, r1
 801e6b4:	4614      	mov	r4, r2
 801e6b6:	18d5      	adds	r5, r2, r3
 801e6b8:	42ac      	cmp	r4, r5
 801e6ba:	d101      	bne.n	801e6c0 <__sfputs_r+0x12>
 801e6bc:	2000      	movs	r0, #0
 801e6be:	e007      	b.n	801e6d0 <__sfputs_r+0x22>
 801e6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6c4:	463a      	mov	r2, r7
 801e6c6:	4630      	mov	r0, r6
 801e6c8:	f7ff ffda 	bl	801e680 <__sfputc_r>
 801e6cc:	1c43      	adds	r3, r0, #1
 801e6ce:	d1f3      	bne.n	801e6b8 <__sfputs_r+0xa>
 801e6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e6d4 <_vfiprintf_r>:
 801e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d8:	460d      	mov	r5, r1
 801e6da:	b09d      	sub	sp, #116	@ 0x74
 801e6dc:	4614      	mov	r4, r2
 801e6de:	4698      	mov	r8, r3
 801e6e0:	4606      	mov	r6, r0
 801e6e2:	b118      	cbz	r0, 801e6ec <_vfiprintf_r+0x18>
 801e6e4:	6a03      	ldr	r3, [r0, #32]
 801e6e6:	b90b      	cbnz	r3, 801e6ec <_vfiprintf_r+0x18>
 801e6e8:	f7ff fb0e 	bl	801dd08 <__sinit>
 801e6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e6ee:	07d9      	lsls	r1, r3, #31
 801e6f0:	d405      	bmi.n	801e6fe <_vfiprintf_r+0x2a>
 801e6f2:	89ab      	ldrh	r3, [r5, #12]
 801e6f4:	059a      	lsls	r2, r3, #22
 801e6f6:	d402      	bmi.n	801e6fe <_vfiprintf_r+0x2a>
 801e6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e6fa:	f7ff fdd4 	bl	801e2a6 <__retarget_lock_acquire_recursive>
 801e6fe:	89ab      	ldrh	r3, [r5, #12]
 801e700:	071b      	lsls	r3, r3, #28
 801e702:	d501      	bpl.n	801e708 <_vfiprintf_r+0x34>
 801e704:	692b      	ldr	r3, [r5, #16]
 801e706:	b99b      	cbnz	r3, 801e730 <_vfiprintf_r+0x5c>
 801e708:	4629      	mov	r1, r5
 801e70a:	4630      	mov	r0, r6
 801e70c:	f7ff fc8c 	bl	801e028 <__swsetup_r>
 801e710:	b170      	cbz	r0, 801e730 <_vfiprintf_r+0x5c>
 801e712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e714:	07dc      	lsls	r4, r3, #31
 801e716:	d504      	bpl.n	801e722 <_vfiprintf_r+0x4e>
 801e718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e71c:	b01d      	add	sp, #116	@ 0x74
 801e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e722:	89ab      	ldrh	r3, [r5, #12]
 801e724:	0598      	lsls	r0, r3, #22
 801e726:	d4f7      	bmi.n	801e718 <_vfiprintf_r+0x44>
 801e728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e72a:	f7ff fdbd 	bl	801e2a8 <__retarget_lock_release_recursive>
 801e72e:	e7f3      	b.n	801e718 <_vfiprintf_r+0x44>
 801e730:	2300      	movs	r3, #0
 801e732:	9309      	str	r3, [sp, #36]	@ 0x24
 801e734:	2320      	movs	r3, #32
 801e736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e73a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e73e:	2330      	movs	r3, #48	@ 0x30
 801e740:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e8f0 <_vfiprintf_r+0x21c>
 801e744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e748:	f04f 0901 	mov.w	r9, #1
 801e74c:	4623      	mov	r3, r4
 801e74e:	469a      	mov	sl, r3
 801e750:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e754:	b10a      	cbz	r2, 801e75a <_vfiprintf_r+0x86>
 801e756:	2a25      	cmp	r2, #37	@ 0x25
 801e758:	d1f9      	bne.n	801e74e <_vfiprintf_r+0x7a>
 801e75a:	ebba 0b04 	subs.w	fp, sl, r4
 801e75e:	d00b      	beq.n	801e778 <_vfiprintf_r+0xa4>
 801e760:	465b      	mov	r3, fp
 801e762:	4622      	mov	r2, r4
 801e764:	4629      	mov	r1, r5
 801e766:	4630      	mov	r0, r6
 801e768:	f7ff ffa1 	bl	801e6ae <__sfputs_r>
 801e76c:	3001      	adds	r0, #1
 801e76e:	f000 80a7 	beq.w	801e8c0 <_vfiprintf_r+0x1ec>
 801e772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e774:	445a      	add	r2, fp
 801e776:	9209      	str	r2, [sp, #36]	@ 0x24
 801e778:	f89a 3000 	ldrb.w	r3, [sl]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	f000 809f 	beq.w	801e8c0 <_vfiprintf_r+0x1ec>
 801e782:	2300      	movs	r3, #0
 801e784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e78c:	f10a 0a01 	add.w	sl, sl, #1
 801e790:	9304      	str	r3, [sp, #16]
 801e792:	9307      	str	r3, [sp, #28]
 801e794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e798:	931a      	str	r3, [sp, #104]	@ 0x68
 801e79a:	4654      	mov	r4, sl
 801e79c:	2205      	movs	r2, #5
 801e79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7a2:	4853      	ldr	r0, [pc, #332]	@ (801e8f0 <_vfiprintf_r+0x21c>)
 801e7a4:	f7e1 fdb4 	bl	8000310 <memchr>
 801e7a8:	9a04      	ldr	r2, [sp, #16]
 801e7aa:	b9d8      	cbnz	r0, 801e7e4 <_vfiprintf_r+0x110>
 801e7ac:	06d1      	lsls	r1, r2, #27
 801e7ae:	bf44      	itt	mi
 801e7b0:	2320      	movmi	r3, #32
 801e7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e7b6:	0713      	lsls	r3, r2, #28
 801e7b8:	bf44      	itt	mi
 801e7ba:	232b      	movmi	r3, #43	@ 0x2b
 801e7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e7c0:	f89a 3000 	ldrb.w	r3, [sl]
 801e7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801e7c6:	d015      	beq.n	801e7f4 <_vfiprintf_r+0x120>
 801e7c8:	9a07      	ldr	r2, [sp, #28]
 801e7ca:	4654      	mov	r4, sl
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	f04f 0c0a 	mov.w	ip, #10
 801e7d2:	4621      	mov	r1, r4
 801e7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7d8:	3b30      	subs	r3, #48	@ 0x30
 801e7da:	2b09      	cmp	r3, #9
 801e7dc:	d94b      	bls.n	801e876 <_vfiprintf_r+0x1a2>
 801e7de:	b1b0      	cbz	r0, 801e80e <_vfiprintf_r+0x13a>
 801e7e0:	9207      	str	r2, [sp, #28]
 801e7e2:	e014      	b.n	801e80e <_vfiprintf_r+0x13a>
 801e7e4:	eba0 0308 	sub.w	r3, r0, r8
 801e7e8:	fa09 f303 	lsl.w	r3, r9, r3
 801e7ec:	4313      	orrs	r3, r2
 801e7ee:	9304      	str	r3, [sp, #16]
 801e7f0:	46a2      	mov	sl, r4
 801e7f2:	e7d2      	b.n	801e79a <_vfiprintf_r+0xc6>
 801e7f4:	9b03      	ldr	r3, [sp, #12]
 801e7f6:	1d19      	adds	r1, r3, #4
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	9103      	str	r1, [sp, #12]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	bfbb      	ittet	lt
 801e800:	425b      	neglt	r3, r3
 801e802:	f042 0202 	orrlt.w	r2, r2, #2
 801e806:	9307      	strge	r3, [sp, #28]
 801e808:	9307      	strlt	r3, [sp, #28]
 801e80a:	bfb8      	it	lt
 801e80c:	9204      	strlt	r2, [sp, #16]
 801e80e:	7823      	ldrb	r3, [r4, #0]
 801e810:	2b2e      	cmp	r3, #46	@ 0x2e
 801e812:	d10a      	bne.n	801e82a <_vfiprintf_r+0x156>
 801e814:	7863      	ldrb	r3, [r4, #1]
 801e816:	2b2a      	cmp	r3, #42	@ 0x2a
 801e818:	d132      	bne.n	801e880 <_vfiprintf_r+0x1ac>
 801e81a:	9b03      	ldr	r3, [sp, #12]
 801e81c:	1d1a      	adds	r2, r3, #4
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	9203      	str	r2, [sp, #12]
 801e822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e826:	3402      	adds	r4, #2
 801e828:	9305      	str	r3, [sp, #20]
 801e82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e900 <_vfiprintf_r+0x22c>
 801e82e:	7821      	ldrb	r1, [r4, #0]
 801e830:	2203      	movs	r2, #3
 801e832:	4650      	mov	r0, sl
 801e834:	f7e1 fd6c 	bl	8000310 <memchr>
 801e838:	b138      	cbz	r0, 801e84a <_vfiprintf_r+0x176>
 801e83a:	9b04      	ldr	r3, [sp, #16]
 801e83c:	eba0 000a 	sub.w	r0, r0, sl
 801e840:	2240      	movs	r2, #64	@ 0x40
 801e842:	4082      	lsls	r2, r0
 801e844:	4313      	orrs	r3, r2
 801e846:	3401      	adds	r4, #1
 801e848:	9304      	str	r3, [sp, #16]
 801e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e84e:	4829      	ldr	r0, [pc, #164]	@ (801e8f4 <_vfiprintf_r+0x220>)
 801e850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e854:	2206      	movs	r2, #6
 801e856:	f7e1 fd5b 	bl	8000310 <memchr>
 801e85a:	2800      	cmp	r0, #0
 801e85c:	d03f      	beq.n	801e8de <_vfiprintf_r+0x20a>
 801e85e:	4b26      	ldr	r3, [pc, #152]	@ (801e8f8 <_vfiprintf_r+0x224>)
 801e860:	bb1b      	cbnz	r3, 801e8aa <_vfiprintf_r+0x1d6>
 801e862:	9b03      	ldr	r3, [sp, #12]
 801e864:	3307      	adds	r3, #7
 801e866:	f023 0307 	bic.w	r3, r3, #7
 801e86a:	3308      	adds	r3, #8
 801e86c:	9303      	str	r3, [sp, #12]
 801e86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e870:	443b      	add	r3, r7
 801e872:	9309      	str	r3, [sp, #36]	@ 0x24
 801e874:	e76a      	b.n	801e74c <_vfiprintf_r+0x78>
 801e876:	fb0c 3202 	mla	r2, ip, r2, r3
 801e87a:	460c      	mov	r4, r1
 801e87c:	2001      	movs	r0, #1
 801e87e:	e7a8      	b.n	801e7d2 <_vfiprintf_r+0xfe>
 801e880:	2300      	movs	r3, #0
 801e882:	3401      	adds	r4, #1
 801e884:	9305      	str	r3, [sp, #20]
 801e886:	4619      	mov	r1, r3
 801e888:	f04f 0c0a 	mov.w	ip, #10
 801e88c:	4620      	mov	r0, r4
 801e88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e892:	3a30      	subs	r2, #48	@ 0x30
 801e894:	2a09      	cmp	r2, #9
 801e896:	d903      	bls.n	801e8a0 <_vfiprintf_r+0x1cc>
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d0c6      	beq.n	801e82a <_vfiprintf_r+0x156>
 801e89c:	9105      	str	r1, [sp, #20]
 801e89e:	e7c4      	b.n	801e82a <_vfiprintf_r+0x156>
 801e8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8a4:	4604      	mov	r4, r0
 801e8a6:	2301      	movs	r3, #1
 801e8a8:	e7f0      	b.n	801e88c <_vfiprintf_r+0x1b8>
 801e8aa:	ab03      	add	r3, sp, #12
 801e8ac:	9300      	str	r3, [sp, #0]
 801e8ae:	462a      	mov	r2, r5
 801e8b0:	4b12      	ldr	r3, [pc, #72]	@ (801e8fc <_vfiprintf_r+0x228>)
 801e8b2:	a904      	add	r1, sp, #16
 801e8b4:	4630      	mov	r0, r6
 801e8b6:	f3af 8000 	nop.w
 801e8ba:	4607      	mov	r7, r0
 801e8bc:	1c78      	adds	r0, r7, #1
 801e8be:	d1d6      	bne.n	801e86e <_vfiprintf_r+0x19a>
 801e8c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e8c2:	07d9      	lsls	r1, r3, #31
 801e8c4:	d405      	bmi.n	801e8d2 <_vfiprintf_r+0x1fe>
 801e8c6:	89ab      	ldrh	r3, [r5, #12]
 801e8c8:	059a      	lsls	r2, r3, #22
 801e8ca:	d402      	bmi.n	801e8d2 <_vfiprintf_r+0x1fe>
 801e8cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e8ce:	f7ff fceb 	bl	801e2a8 <__retarget_lock_release_recursive>
 801e8d2:	89ab      	ldrh	r3, [r5, #12]
 801e8d4:	065b      	lsls	r3, r3, #25
 801e8d6:	f53f af1f 	bmi.w	801e718 <_vfiprintf_r+0x44>
 801e8da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e8dc:	e71e      	b.n	801e71c <_vfiprintf_r+0x48>
 801e8de:	ab03      	add	r3, sp, #12
 801e8e0:	9300      	str	r3, [sp, #0]
 801e8e2:	462a      	mov	r2, r5
 801e8e4:	4b05      	ldr	r3, [pc, #20]	@ (801e8fc <_vfiprintf_r+0x228>)
 801e8e6:	a904      	add	r1, sp, #16
 801e8e8:	4630      	mov	r0, r6
 801e8ea:	f000 f879 	bl	801e9e0 <_printf_i>
 801e8ee:	e7e4      	b.n	801e8ba <_vfiprintf_r+0x1e6>
 801e8f0:	0801ff52 	.word	0x0801ff52
 801e8f4:	0801ff5c 	.word	0x0801ff5c
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	0801e6af 	.word	0x0801e6af
 801e900:	0801ff58 	.word	0x0801ff58

0801e904 <_printf_common>:
 801e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e908:	4616      	mov	r6, r2
 801e90a:	4698      	mov	r8, r3
 801e90c:	688a      	ldr	r2, [r1, #8]
 801e90e:	690b      	ldr	r3, [r1, #16]
 801e910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e914:	4293      	cmp	r3, r2
 801e916:	bfb8      	it	lt
 801e918:	4613      	movlt	r3, r2
 801e91a:	6033      	str	r3, [r6, #0]
 801e91c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e920:	4607      	mov	r7, r0
 801e922:	460c      	mov	r4, r1
 801e924:	b10a      	cbz	r2, 801e92a <_printf_common+0x26>
 801e926:	3301      	adds	r3, #1
 801e928:	6033      	str	r3, [r6, #0]
 801e92a:	6823      	ldr	r3, [r4, #0]
 801e92c:	0699      	lsls	r1, r3, #26
 801e92e:	bf42      	ittt	mi
 801e930:	6833      	ldrmi	r3, [r6, #0]
 801e932:	3302      	addmi	r3, #2
 801e934:	6033      	strmi	r3, [r6, #0]
 801e936:	6825      	ldr	r5, [r4, #0]
 801e938:	f015 0506 	ands.w	r5, r5, #6
 801e93c:	d106      	bne.n	801e94c <_printf_common+0x48>
 801e93e:	f104 0a19 	add.w	sl, r4, #25
 801e942:	68e3      	ldr	r3, [r4, #12]
 801e944:	6832      	ldr	r2, [r6, #0]
 801e946:	1a9b      	subs	r3, r3, r2
 801e948:	42ab      	cmp	r3, r5
 801e94a:	dc26      	bgt.n	801e99a <_printf_common+0x96>
 801e94c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e950:	6822      	ldr	r2, [r4, #0]
 801e952:	3b00      	subs	r3, #0
 801e954:	bf18      	it	ne
 801e956:	2301      	movne	r3, #1
 801e958:	0692      	lsls	r2, r2, #26
 801e95a:	d42b      	bmi.n	801e9b4 <_printf_common+0xb0>
 801e95c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e960:	4641      	mov	r1, r8
 801e962:	4638      	mov	r0, r7
 801e964:	47c8      	blx	r9
 801e966:	3001      	adds	r0, #1
 801e968:	d01e      	beq.n	801e9a8 <_printf_common+0xa4>
 801e96a:	6823      	ldr	r3, [r4, #0]
 801e96c:	6922      	ldr	r2, [r4, #16]
 801e96e:	f003 0306 	and.w	r3, r3, #6
 801e972:	2b04      	cmp	r3, #4
 801e974:	bf02      	ittt	eq
 801e976:	68e5      	ldreq	r5, [r4, #12]
 801e978:	6833      	ldreq	r3, [r6, #0]
 801e97a:	1aed      	subeq	r5, r5, r3
 801e97c:	68a3      	ldr	r3, [r4, #8]
 801e97e:	bf0c      	ite	eq
 801e980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e984:	2500      	movne	r5, #0
 801e986:	4293      	cmp	r3, r2
 801e988:	bfc4      	itt	gt
 801e98a:	1a9b      	subgt	r3, r3, r2
 801e98c:	18ed      	addgt	r5, r5, r3
 801e98e:	2600      	movs	r6, #0
 801e990:	341a      	adds	r4, #26
 801e992:	42b5      	cmp	r5, r6
 801e994:	d11a      	bne.n	801e9cc <_printf_common+0xc8>
 801e996:	2000      	movs	r0, #0
 801e998:	e008      	b.n	801e9ac <_printf_common+0xa8>
 801e99a:	2301      	movs	r3, #1
 801e99c:	4652      	mov	r2, sl
 801e99e:	4641      	mov	r1, r8
 801e9a0:	4638      	mov	r0, r7
 801e9a2:	47c8      	blx	r9
 801e9a4:	3001      	adds	r0, #1
 801e9a6:	d103      	bne.n	801e9b0 <_printf_common+0xac>
 801e9a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9b0:	3501      	adds	r5, #1
 801e9b2:	e7c6      	b.n	801e942 <_printf_common+0x3e>
 801e9b4:	18e1      	adds	r1, r4, r3
 801e9b6:	1c5a      	adds	r2, r3, #1
 801e9b8:	2030      	movs	r0, #48	@ 0x30
 801e9ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e9be:	4422      	add	r2, r4
 801e9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e9c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e9c8:	3302      	adds	r3, #2
 801e9ca:	e7c7      	b.n	801e95c <_printf_common+0x58>
 801e9cc:	2301      	movs	r3, #1
 801e9ce:	4622      	mov	r2, r4
 801e9d0:	4641      	mov	r1, r8
 801e9d2:	4638      	mov	r0, r7
 801e9d4:	47c8      	blx	r9
 801e9d6:	3001      	adds	r0, #1
 801e9d8:	d0e6      	beq.n	801e9a8 <_printf_common+0xa4>
 801e9da:	3601      	adds	r6, #1
 801e9dc:	e7d9      	b.n	801e992 <_printf_common+0x8e>
	...

0801e9e0 <_printf_i>:
 801e9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e9e4:	7e0f      	ldrb	r7, [r1, #24]
 801e9e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e9e8:	2f78      	cmp	r7, #120	@ 0x78
 801e9ea:	4691      	mov	r9, r2
 801e9ec:	4680      	mov	r8, r0
 801e9ee:	460c      	mov	r4, r1
 801e9f0:	469a      	mov	sl, r3
 801e9f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e9f6:	d807      	bhi.n	801ea08 <_printf_i+0x28>
 801e9f8:	2f62      	cmp	r7, #98	@ 0x62
 801e9fa:	d80a      	bhi.n	801ea12 <_printf_i+0x32>
 801e9fc:	2f00      	cmp	r7, #0
 801e9fe:	f000 80d2 	beq.w	801eba6 <_printf_i+0x1c6>
 801ea02:	2f58      	cmp	r7, #88	@ 0x58
 801ea04:	f000 80b9 	beq.w	801eb7a <_printf_i+0x19a>
 801ea08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ea0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ea10:	e03a      	b.n	801ea88 <_printf_i+0xa8>
 801ea12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ea16:	2b15      	cmp	r3, #21
 801ea18:	d8f6      	bhi.n	801ea08 <_printf_i+0x28>
 801ea1a:	a101      	add	r1, pc, #4	@ (adr r1, 801ea20 <_printf_i+0x40>)
 801ea1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ea20:	0801ea79 	.word	0x0801ea79
 801ea24:	0801ea8d 	.word	0x0801ea8d
 801ea28:	0801ea09 	.word	0x0801ea09
 801ea2c:	0801ea09 	.word	0x0801ea09
 801ea30:	0801ea09 	.word	0x0801ea09
 801ea34:	0801ea09 	.word	0x0801ea09
 801ea38:	0801ea8d 	.word	0x0801ea8d
 801ea3c:	0801ea09 	.word	0x0801ea09
 801ea40:	0801ea09 	.word	0x0801ea09
 801ea44:	0801ea09 	.word	0x0801ea09
 801ea48:	0801ea09 	.word	0x0801ea09
 801ea4c:	0801eb8d 	.word	0x0801eb8d
 801ea50:	0801eab7 	.word	0x0801eab7
 801ea54:	0801eb47 	.word	0x0801eb47
 801ea58:	0801ea09 	.word	0x0801ea09
 801ea5c:	0801ea09 	.word	0x0801ea09
 801ea60:	0801ebaf 	.word	0x0801ebaf
 801ea64:	0801ea09 	.word	0x0801ea09
 801ea68:	0801eab7 	.word	0x0801eab7
 801ea6c:	0801ea09 	.word	0x0801ea09
 801ea70:	0801ea09 	.word	0x0801ea09
 801ea74:	0801eb4f 	.word	0x0801eb4f
 801ea78:	6833      	ldr	r3, [r6, #0]
 801ea7a:	1d1a      	adds	r2, r3, #4
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	6032      	str	r2, [r6, #0]
 801ea80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ea84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ea88:	2301      	movs	r3, #1
 801ea8a:	e09d      	b.n	801ebc8 <_printf_i+0x1e8>
 801ea8c:	6833      	ldr	r3, [r6, #0]
 801ea8e:	6820      	ldr	r0, [r4, #0]
 801ea90:	1d19      	adds	r1, r3, #4
 801ea92:	6031      	str	r1, [r6, #0]
 801ea94:	0606      	lsls	r6, r0, #24
 801ea96:	d501      	bpl.n	801ea9c <_printf_i+0xbc>
 801ea98:	681d      	ldr	r5, [r3, #0]
 801ea9a:	e003      	b.n	801eaa4 <_printf_i+0xc4>
 801ea9c:	0645      	lsls	r5, r0, #25
 801ea9e:	d5fb      	bpl.n	801ea98 <_printf_i+0xb8>
 801eaa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eaa4:	2d00      	cmp	r5, #0
 801eaa6:	da03      	bge.n	801eab0 <_printf_i+0xd0>
 801eaa8:	232d      	movs	r3, #45	@ 0x2d
 801eaaa:	426d      	negs	r5, r5
 801eaac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eab0:	4859      	ldr	r0, [pc, #356]	@ (801ec18 <_printf_i+0x238>)
 801eab2:	230a      	movs	r3, #10
 801eab4:	e011      	b.n	801eada <_printf_i+0xfa>
 801eab6:	6821      	ldr	r1, [r4, #0]
 801eab8:	6833      	ldr	r3, [r6, #0]
 801eaba:	0608      	lsls	r0, r1, #24
 801eabc:	f853 5b04 	ldr.w	r5, [r3], #4
 801eac0:	d402      	bmi.n	801eac8 <_printf_i+0xe8>
 801eac2:	0649      	lsls	r1, r1, #25
 801eac4:	bf48      	it	mi
 801eac6:	b2ad      	uxthmi	r5, r5
 801eac8:	2f6f      	cmp	r7, #111	@ 0x6f
 801eaca:	4853      	ldr	r0, [pc, #332]	@ (801ec18 <_printf_i+0x238>)
 801eacc:	6033      	str	r3, [r6, #0]
 801eace:	bf14      	ite	ne
 801ead0:	230a      	movne	r3, #10
 801ead2:	2308      	moveq	r3, #8
 801ead4:	2100      	movs	r1, #0
 801ead6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801eada:	6866      	ldr	r6, [r4, #4]
 801eadc:	60a6      	str	r6, [r4, #8]
 801eade:	2e00      	cmp	r6, #0
 801eae0:	bfa2      	ittt	ge
 801eae2:	6821      	ldrge	r1, [r4, #0]
 801eae4:	f021 0104 	bicge.w	r1, r1, #4
 801eae8:	6021      	strge	r1, [r4, #0]
 801eaea:	b90d      	cbnz	r5, 801eaf0 <_printf_i+0x110>
 801eaec:	2e00      	cmp	r6, #0
 801eaee:	d04b      	beq.n	801eb88 <_printf_i+0x1a8>
 801eaf0:	4616      	mov	r6, r2
 801eaf2:	fbb5 f1f3 	udiv	r1, r5, r3
 801eaf6:	fb03 5711 	mls	r7, r3, r1, r5
 801eafa:	5dc7      	ldrb	r7, [r0, r7]
 801eafc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801eb00:	462f      	mov	r7, r5
 801eb02:	42bb      	cmp	r3, r7
 801eb04:	460d      	mov	r5, r1
 801eb06:	d9f4      	bls.n	801eaf2 <_printf_i+0x112>
 801eb08:	2b08      	cmp	r3, #8
 801eb0a:	d10b      	bne.n	801eb24 <_printf_i+0x144>
 801eb0c:	6823      	ldr	r3, [r4, #0]
 801eb0e:	07df      	lsls	r7, r3, #31
 801eb10:	d508      	bpl.n	801eb24 <_printf_i+0x144>
 801eb12:	6923      	ldr	r3, [r4, #16]
 801eb14:	6861      	ldr	r1, [r4, #4]
 801eb16:	4299      	cmp	r1, r3
 801eb18:	bfde      	ittt	le
 801eb1a:	2330      	movle	r3, #48	@ 0x30
 801eb1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801eb20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801eb24:	1b92      	subs	r2, r2, r6
 801eb26:	6122      	str	r2, [r4, #16]
 801eb28:	f8cd a000 	str.w	sl, [sp]
 801eb2c:	464b      	mov	r3, r9
 801eb2e:	aa03      	add	r2, sp, #12
 801eb30:	4621      	mov	r1, r4
 801eb32:	4640      	mov	r0, r8
 801eb34:	f7ff fee6 	bl	801e904 <_printf_common>
 801eb38:	3001      	adds	r0, #1
 801eb3a:	d14a      	bne.n	801ebd2 <_printf_i+0x1f2>
 801eb3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eb40:	b004      	add	sp, #16
 801eb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb46:	6823      	ldr	r3, [r4, #0]
 801eb48:	f043 0320 	orr.w	r3, r3, #32
 801eb4c:	6023      	str	r3, [r4, #0]
 801eb4e:	4833      	ldr	r0, [pc, #204]	@ (801ec1c <_printf_i+0x23c>)
 801eb50:	2778      	movs	r7, #120	@ 0x78
 801eb52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801eb56:	6823      	ldr	r3, [r4, #0]
 801eb58:	6831      	ldr	r1, [r6, #0]
 801eb5a:	061f      	lsls	r7, r3, #24
 801eb5c:	f851 5b04 	ldr.w	r5, [r1], #4
 801eb60:	d402      	bmi.n	801eb68 <_printf_i+0x188>
 801eb62:	065f      	lsls	r7, r3, #25
 801eb64:	bf48      	it	mi
 801eb66:	b2ad      	uxthmi	r5, r5
 801eb68:	6031      	str	r1, [r6, #0]
 801eb6a:	07d9      	lsls	r1, r3, #31
 801eb6c:	bf44      	itt	mi
 801eb6e:	f043 0320 	orrmi.w	r3, r3, #32
 801eb72:	6023      	strmi	r3, [r4, #0]
 801eb74:	b11d      	cbz	r5, 801eb7e <_printf_i+0x19e>
 801eb76:	2310      	movs	r3, #16
 801eb78:	e7ac      	b.n	801ead4 <_printf_i+0xf4>
 801eb7a:	4827      	ldr	r0, [pc, #156]	@ (801ec18 <_printf_i+0x238>)
 801eb7c:	e7e9      	b.n	801eb52 <_printf_i+0x172>
 801eb7e:	6823      	ldr	r3, [r4, #0]
 801eb80:	f023 0320 	bic.w	r3, r3, #32
 801eb84:	6023      	str	r3, [r4, #0]
 801eb86:	e7f6      	b.n	801eb76 <_printf_i+0x196>
 801eb88:	4616      	mov	r6, r2
 801eb8a:	e7bd      	b.n	801eb08 <_printf_i+0x128>
 801eb8c:	6833      	ldr	r3, [r6, #0]
 801eb8e:	6825      	ldr	r5, [r4, #0]
 801eb90:	6961      	ldr	r1, [r4, #20]
 801eb92:	1d18      	adds	r0, r3, #4
 801eb94:	6030      	str	r0, [r6, #0]
 801eb96:	062e      	lsls	r6, r5, #24
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	d501      	bpl.n	801eba0 <_printf_i+0x1c0>
 801eb9c:	6019      	str	r1, [r3, #0]
 801eb9e:	e002      	b.n	801eba6 <_printf_i+0x1c6>
 801eba0:	0668      	lsls	r0, r5, #25
 801eba2:	d5fb      	bpl.n	801eb9c <_printf_i+0x1bc>
 801eba4:	8019      	strh	r1, [r3, #0]
 801eba6:	2300      	movs	r3, #0
 801eba8:	6123      	str	r3, [r4, #16]
 801ebaa:	4616      	mov	r6, r2
 801ebac:	e7bc      	b.n	801eb28 <_printf_i+0x148>
 801ebae:	6833      	ldr	r3, [r6, #0]
 801ebb0:	1d1a      	adds	r2, r3, #4
 801ebb2:	6032      	str	r2, [r6, #0]
 801ebb4:	681e      	ldr	r6, [r3, #0]
 801ebb6:	6862      	ldr	r2, [r4, #4]
 801ebb8:	2100      	movs	r1, #0
 801ebba:	4630      	mov	r0, r6
 801ebbc:	f7e1 fba8 	bl	8000310 <memchr>
 801ebc0:	b108      	cbz	r0, 801ebc6 <_printf_i+0x1e6>
 801ebc2:	1b80      	subs	r0, r0, r6
 801ebc4:	6060      	str	r0, [r4, #4]
 801ebc6:	6863      	ldr	r3, [r4, #4]
 801ebc8:	6123      	str	r3, [r4, #16]
 801ebca:	2300      	movs	r3, #0
 801ebcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ebd0:	e7aa      	b.n	801eb28 <_printf_i+0x148>
 801ebd2:	6923      	ldr	r3, [r4, #16]
 801ebd4:	4632      	mov	r2, r6
 801ebd6:	4649      	mov	r1, r9
 801ebd8:	4640      	mov	r0, r8
 801ebda:	47d0      	blx	sl
 801ebdc:	3001      	adds	r0, #1
 801ebde:	d0ad      	beq.n	801eb3c <_printf_i+0x15c>
 801ebe0:	6823      	ldr	r3, [r4, #0]
 801ebe2:	079b      	lsls	r3, r3, #30
 801ebe4:	d413      	bmi.n	801ec0e <_printf_i+0x22e>
 801ebe6:	68e0      	ldr	r0, [r4, #12]
 801ebe8:	9b03      	ldr	r3, [sp, #12]
 801ebea:	4298      	cmp	r0, r3
 801ebec:	bfb8      	it	lt
 801ebee:	4618      	movlt	r0, r3
 801ebf0:	e7a6      	b.n	801eb40 <_printf_i+0x160>
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	4632      	mov	r2, r6
 801ebf6:	4649      	mov	r1, r9
 801ebf8:	4640      	mov	r0, r8
 801ebfa:	47d0      	blx	sl
 801ebfc:	3001      	adds	r0, #1
 801ebfe:	d09d      	beq.n	801eb3c <_printf_i+0x15c>
 801ec00:	3501      	adds	r5, #1
 801ec02:	68e3      	ldr	r3, [r4, #12]
 801ec04:	9903      	ldr	r1, [sp, #12]
 801ec06:	1a5b      	subs	r3, r3, r1
 801ec08:	42ab      	cmp	r3, r5
 801ec0a:	dcf2      	bgt.n	801ebf2 <_printf_i+0x212>
 801ec0c:	e7eb      	b.n	801ebe6 <_printf_i+0x206>
 801ec0e:	2500      	movs	r5, #0
 801ec10:	f104 0619 	add.w	r6, r4, #25
 801ec14:	e7f5      	b.n	801ec02 <_printf_i+0x222>
 801ec16:	bf00      	nop
 801ec18:	0801ff63 	.word	0x0801ff63
 801ec1c:	0801ff74 	.word	0x0801ff74

0801ec20 <__sflush_r>:
 801ec20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec28:	0716      	lsls	r6, r2, #28
 801ec2a:	4605      	mov	r5, r0
 801ec2c:	460c      	mov	r4, r1
 801ec2e:	d454      	bmi.n	801ecda <__sflush_r+0xba>
 801ec30:	684b      	ldr	r3, [r1, #4]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	dc02      	bgt.n	801ec3c <__sflush_r+0x1c>
 801ec36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	dd48      	ble.n	801ecce <__sflush_r+0xae>
 801ec3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec3e:	2e00      	cmp	r6, #0
 801ec40:	d045      	beq.n	801ecce <__sflush_r+0xae>
 801ec42:	2300      	movs	r3, #0
 801ec44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ec48:	682f      	ldr	r7, [r5, #0]
 801ec4a:	6a21      	ldr	r1, [r4, #32]
 801ec4c:	602b      	str	r3, [r5, #0]
 801ec4e:	d030      	beq.n	801ecb2 <__sflush_r+0x92>
 801ec50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ec52:	89a3      	ldrh	r3, [r4, #12]
 801ec54:	0759      	lsls	r1, r3, #29
 801ec56:	d505      	bpl.n	801ec64 <__sflush_r+0x44>
 801ec58:	6863      	ldr	r3, [r4, #4]
 801ec5a:	1ad2      	subs	r2, r2, r3
 801ec5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ec5e:	b10b      	cbz	r3, 801ec64 <__sflush_r+0x44>
 801ec60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ec62:	1ad2      	subs	r2, r2, r3
 801ec64:	2300      	movs	r3, #0
 801ec66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec68:	6a21      	ldr	r1, [r4, #32]
 801ec6a:	4628      	mov	r0, r5
 801ec6c:	47b0      	blx	r6
 801ec6e:	1c43      	adds	r3, r0, #1
 801ec70:	89a3      	ldrh	r3, [r4, #12]
 801ec72:	d106      	bne.n	801ec82 <__sflush_r+0x62>
 801ec74:	6829      	ldr	r1, [r5, #0]
 801ec76:	291d      	cmp	r1, #29
 801ec78:	d82b      	bhi.n	801ecd2 <__sflush_r+0xb2>
 801ec7a:	4a2a      	ldr	r2, [pc, #168]	@ (801ed24 <__sflush_r+0x104>)
 801ec7c:	410a      	asrs	r2, r1
 801ec7e:	07d6      	lsls	r6, r2, #31
 801ec80:	d427      	bmi.n	801ecd2 <__sflush_r+0xb2>
 801ec82:	2200      	movs	r2, #0
 801ec84:	6062      	str	r2, [r4, #4]
 801ec86:	04d9      	lsls	r1, r3, #19
 801ec88:	6922      	ldr	r2, [r4, #16]
 801ec8a:	6022      	str	r2, [r4, #0]
 801ec8c:	d504      	bpl.n	801ec98 <__sflush_r+0x78>
 801ec8e:	1c42      	adds	r2, r0, #1
 801ec90:	d101      	bne.n	801ec96 <__sflush_r+0x76>
 801ec92:	682b      	ldr	r3, [r5, #0]
 801ec94:	b903      	cbnz	r3, 801ec98 <__sflush_r+0x78>
 801ec96:	6560      	str	r0, [r4, #84]	@ 0x54
 801ec98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec9a:	602f      	str	r7, [r5, #0]
 801ec9c:	b1b9      	cbz	r1, 801ecce <__sflush_r+0xae>
 801ec9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eca2:	4299      	cmp	r1, r3
 801eca4:	d002      	beq.n	801ecac <__sflush_r+0x8c>
 801eca6:	4628      	mov	r0, r5
 801eca8:	f7ff fb40 	bl	801e32c <_free_r>
 801ecac:	2300      	movs	r3, #0
 801ecae:	6363      	str	r3, [r4, #52]	@ 0x34
 801ecb0:	e00d      	b.n	801ecce <__sflush_r+0xae>
 801ecb2:	2301      	movs	r3, #1
 801ecb4:	4628      	mov	r0, r5
 801ecb6:	47b0      	blx	r6
 801ecb8:	4602      	mov	r2, r0
 801ecba:	1c50      	adds	r0, r2, #1
 801ecbc:	d1c9      	bne.n	801ec52 <__sflush_r+0x32>
 801ecbe:	682b      	ldr	r3, [r5, #0]
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	d0c6      	beq.n	801ec52 <__sflush_r+0x32>
 801ecc4:	2b1d      	cmp	r3, #29
 801ecc6:	d001      	beq.n	801eccc <__sflush_r+0xac>
 801ecc8:	2b16      	cmp	r3, #22
 801ecca:	d11e      	bne.n	801ed0a <__sflush_r+0xea>
 801eccc:	602f      	str	r7, [r5, #0]
 801ecce:	2000      	movs	r0, #0
 801ecd0:	e022      	b.n	801ed18 <__sflush_r+0xf8>
 801ecd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ecd6:	b21b      	sxth	r3, r3
 801ecd8:	e01b      	b.n	801ed12 <__sflush_r+0xf2>
 801ecda:	690f      	ldr	r7, [r1, #16]
 801ecdc:	2f00      	cmp	r7, #0
 801ecde:	d0f6      	beq.n	801ecce <__sflush_r+0xae>
 801ece0:	0793      	lsls	r3, r2, #30
 801ece2:	680e      	ldr	r6, [r1, #0]
 801ece4:	bf08      	it	eq
 801ece6:	694b      	ldreq	r3, [r1, #20]
 801ece8:	600f      	str	r7, [r1, #0]
 801ecea:	bf18      	it	ne
 801ecec:	2300      	movne	r3, #0
 801ecee:	eba6 0807 	sub.w	r8, r6, r7
 801ecf2:	608b      	str	r3, [r1, #8]
 801ecf4:	f1b8 0f00 	cmp.w	r8, #0
 801ecf8:	dde9      	ble.n	801ecce <__sflush_r+0xae>
 801ecfa:	6a21      	ldr	r1, [r4, #32]
 801ecfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ecfe:	4643      	mov	r3, r8
 801ed00:	463a      	mov	r2, r7
 801ed02:	4628      	mov	r0, r5
 801ed04:	47b0      	blx	r6
 801ed06:	2800      	cmp	r0, #0
 801ed08:	dc08      	bgt.n	801ed1c <__sflush_r+0xfc>
 801ed0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed12:	81a3      	strh	r3, [r4, #12]
 801ed14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ed18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed1c:	4407      	add	r7, r0
 801ed1e:	eba8 0800 	sub.w	r8, r8, r0
 801ed22:	e7e7      	b.n	801ecf4 <__sflush_r+0xd4>
 801ed24:	dfbffffe 	.word	0xdfbffffe

0801ed28 <_fflush_r>:
 801ed28:	b538      	push	{r3, r4, r5, lr}
 801ed2a:	690b      	ldr	r3, [r1, #16]
 801ed2c:	4605      	mov	r5, r0
 801ed2e:	460c      	mov	r4, r1
 801ed30:	b913      	cbnz	r3, 801ed38 <_fflush_r+0x10>
 801ed32:	2500      	movs	r5, #0
 801ed34:	4628      	mov	r0, r5
 801ed36:	bd38      	pop	{r3, r4, r5, pc}
 801ed38:	b118      	cbz	r0, 801ed42 <_fflush_r+0x1a>
 801ed3a:	6a03      	ldr	r3, [r0, #32]
 801ed3c:	b90b      	cbnz	r3, 801ed42 <_fflush_r+0x1a>
 801ed3e:	f7fe ffe3 	bl	801dd08 <__sinit>
 801ed42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d0f3      	beq.n	801ed32 <_fflush_r+0xa>
 801ed4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ed4c:	07d0      	lsls	r0, r2, #31
 801ed4e:	d404      	bmi.n	801ed5a <_fflush_r+0x32>
 801ed50:	0599      	lsls	r1, r3, #22
 801ed52:	d402      	bmi.n	801ed5a <_fflush_r+0x32>
 801ed54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed56:	f7ff faa6 	bl	801e2a6 <__retarget_lock_acquire_recursive>
 801ed5a:	4628      	mov	r0, r5
 801ed5c:	4621      	mov	r1, r4
 801ed5e:	f7ff ff5f 	bl	801ec20 <__sflush_r>
 801ed62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ed64:	07da      	lsls	r2, r3, #31
 801ed66:	4605      	mov	r5, r0
 801ed68:	d4e4      	bmi.n	801ed34 <_fflush_r+0xc>
 801ed6a:	89a3      	ldrh	r3, [r4, #12]
 801ed6c:	059b      	lsls	r3, r3, #22
 801ed6e:	d4e1      	bmi.n	801ed34 <_fflush_r+0xc>
 801ed70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed72:	f7ff fa99 	bl	801e2a8 <__retarget_lock_release_recursive>
 801ed76:	e7dd      	b.n	801ed34 <_fflush_r+0xc>

0801ed78 <fiprintf>:
 801ed78:	b40e      	push	{r1, r2, r3}
 801ed7a:	b503      	push	{r0, r1, lr}
 801ed7c:	4601      	mov	r1, r0
 801ed7e:	ab03      	add	r3, sp, #12
 801ed80:	4805      	ldr	r0, [pc, #20]	@ (801ed98 <fiprintf+0x20>)
 801ed82:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed86:	6800      	ldr	r0, [r0, #0]
 801ed88:	9301      	str	r3, [sp, #4]
 801ed8a:	f7ff fca3 	bl	801e6d4 <_vfiprintf_r>
 801ed8e:	b002      	add	sp, #8
 801ed90:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed94:	b003      	add	sp, #12
 801ed96:	4770      	bx	lr
 801ed98:	24000338 	.word	0x24000338

0801ed9c <__swhatbuf_r>:
 801ed9c:	b570      	push	{r4, r5, r6, lr}
 801ed9e:	460c      	mov	r4, r1
 801eda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eda4:	2900      	cmp	r1, #0
 801eda6:	b096      	sub	sp, #88	@ 0x58
 801eda8:	4615      	mov	r5, r2
 801edaa:	461e      	mov	r6, r3
 801edac:	da0d      	bge.n	801edca <__swhatbuf_r+0x2e>
 801edae:	89a3      	ldrh	r3, [r4, #12]
 801edb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801edb4:	f04f 0100 	mov.w	r1, #0
 801edb8:	bf14      	ite	ne
 801edba:	2340      	movne	r3, #64	@ 0x40
 801edbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801edc0:	2000      	movs	r0, #0
 801edc2:	6031      	str	r1, [r6, #0]
 801edc4:	602b      	str	r3, [r5, #0]
 801edc6:	b016      	add	sp, #88	@ 0x58
 801edc8:	bd70      	pop	{r4, r5, r6, pc}
 801edca:	466a      	mov	r2, sp
 801edcc:	f000 f848 	bl	801ee60 <_fstat_r>
 801edd0:	2800      	cmp	r0, #0
 801edd2:	dbec      	blt.n	801edae <__swhatbuf_r+0x12>
 801edd4:	9901      	ldr	r1, [sp, #4]
 801edd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801edda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801edde:	4259      	negs	r1, r3
 801ede0:	4159      	adcs	r1, r3
 801ede2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ede6:	e7eb      	b.n	801edc0 <__swhatbuf_r+0x24>

0801ede8 <__smakebuf_r>:
 801ede8:	898b      	ldrh	r3, [r1, #12]
 801edea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801edec:	079d      	lsls	r5, r3, #30
 801edee:	4606      	mov	r6, r0
 801edf0:	460c      	mov	r4, r1
 801edf2:	d507      	bpl.n	801ee04 <__smakebuf_r+0x1c>
 801edf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801edf8:	6023      	str	r3, [r4, #0]
 801edfa:	6123      	str	r3, [r4, #16]
 801edfc:	2301      	movs	r3, #1
 801edfe:	6163      	str	r3, [r4, #20]
 801ee00:	b003      	add	sp, #12
 801ee02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee04:	ab01      	add	r3, sp, #4
 801ee06:	466a      	mov	r2, sp
 801ee08:	f7ff ffc8 	bl	801ed9c <__swhatbuf_r>
 801ee0c:	9f00      	ldr	r7, [sp, #0]
 801ee0e:	4605      	mov	r5, r0
 801ee10:	4639      	mov	r1, r7
 801ee12:	4630      	mov	r0, r6
 801ee14:	f7fe fd46 	bl	801d8a4 <_malloc_r>
 801ee18:	b948      	cbnz	r0, 801ee2e <__smakebuf_r+0x46>
 801ee1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee1e:	059a      	lsls	r2, r3, #22
 801ee20:	d4ee      	bmi.n	801ee00 <__smakebuf_r+0x18>
 801ee22:	f023 0303 	bic.w	r3, r3, #3
 801ee26:	f043 0302 	orr.w	r3, r3, #2
 801ee2a:	81a3      	strh	r3, [r4, #12]
 801ee2c:	e7e2      	b.n	801edf4 <__smakebuf_r+0xc>
 801ee2e:	89a3      	ldrh	r3, [r4, #12]
 801ee30:	6020      	str	r0, [r4, #0]
 801ee32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee36:	81a3      	strh	r3, [r4, #12]
 801ee38:	9b01      	ldr	r3, [sp, #4]
 801ee3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ee3e:	b15b      	cbz	r3, 801ee58 <__smakebuf_r+0x70>
 801ee40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee44:	4630      	mov	r0, r6
 801ee46:	f000 f81d 	bl	801ee84 <_isatty_r>
 801ee4a:	b128      	cbz	r0, 801ee58 <__smakebuf_r+0x70>
 801ee4c:	89a3      	ldrh	r3, [r4, #12]
 801ee4e:	f023 0303 	bic.w	r3, r3, #3
 801ee52:	f043 0301 	orr.w	r3, r3, #1
 801ee56:	81a3      	strh	r3, [r4, #12]
 801ee58:	89a3      	ldrh	r3, [r4, #12]
 801ee5a:	431d      	orrs	r5, r3
 801ee5c:	81a5      	strh	r5, [r4, #12]
 801ee5e:	e7cf      	b.n	801ee00 <__smakebuf_r+0x18>

0801ee60 <_fstat_r>:
 801ee60:	b538      	push	{r3, r4, r5, lr}
 801ee62:	4d07      	ldr	r5, [pc, #28]	@ (801ee80 <_fstat_r+0x20>)
 801ee64:	2300      	movs	r3, #0
 801ee66:	4604      	mov	r4, r0
 801ee68:	4608      	mov	r0, r1
 801ee6a:	4611      	mov	r1, r2
 801ee6c:	602b      	str	r3, [r5, #0]
 801ee6e:	f7e3 fab7 	bl	80023e0 <_fstat>
 801ee72:	1c43      	adds	r3, r0, #1
 801ee74:	d102      	bne.n	801ee7c <_fstat_r+0x1c>
 801ee76:	682b      	ldr	r3, [r5, #0]
 801ee78:	b103      	cbz	r3, 801ee7c <_fstat_r+0x1c>
 801ee7a:	6023      	str	r3, [r4, #0]
 801ee7c:	bd38      	pop	{r3, r4, r5, pc}
 801ee7e:	bf00      	nop
 801ee80:	240131b8 	.word	0x240131b8

0801ee84 <_isatty_r>:
 801ee84:	b538      	push	{r3, r4, r5, lr}
 801ee86:	4d06      	ldr	r5, [pc, #24]	@ (801eea0 <_isatty_r+0x1c>)
 801ee88:	2300      	movs	r3, #0
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	4608      	mov	r0, r1
 801ee8e:	602b      	str	r3, [r5, #0]
 801ee90:	f7e3 fab6 	bl	8002400 <_isatty>
 801ee94:	1c43      	adds	r3, r0, #1
 801ee96:	d102      	bne.n	801ee9e <_isatty_r+0x1a>
 801ee98:	682b      	ldr	r3, [r5, #0]
 801ee9a:	b103      	cbz	r3, 801ee9e <_isatty_r+0x1a>
 801ee9c:	6023      	str	r3, [r4, #0]
 801ee9e:	bd38      	pop	{r3, r4, r5, pc}
 801eea0:	240131b8 	.word	0x240131b8

0801eea4 <abort>:
 801eea4:	b508      	push	{r3, lr}
 801eea6:	2006      	movs	r0, #6
 801eea8:	f000 f82c 	bl	801ef04 <raise>
 801eeac:	2001      	movs	r0, #1
 801eeae:	f7e3 fa47 	bl	8002340 <_exit>

0801eeb2 <_raise_r>:
 801eeb2:	291f      	cmp	r1, #31
 801eeb4:	b538      	push	{r3, r4, r5, lr}
 801eeb6:	4605      	mov	r5, r0
 801eeb8:	460c      	mov	r4, r1
 801eeba:	d904      	bls.n	801eec6 <_raise_r+0x14>
 801eebc:	2316      	movs	r3, #22
 801eebe:	6003      	str	r3, [r0, #0]
 801eec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eec4:	bd38      	pop	{r3, r4, r5, pc}
 801eec6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eec8:	b112      	cbz	r2, 801eed0 <_raise_r+0x1e>
 801eeca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eece:	b94b      	cbnz	r3, 801eee4 <_raise_r+0x32>
 801eed0:	4628      	mov	r0, r5
 801eed2:	f000 f831 	bl	801ef38 <_getpid_r>
 801eed6:	4622      	mov	r2, r4
 801eed8:	4601      	mov	r1, r0
 801eeda:	4628      	mov	r0, r5
 801eedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eee0:	f000 b818 	b.w	801ef14 <_kill_r>
 801eee4:	2b01      	cmp	r3, #1
 801eee6:	d00a      	beq.n	801eefe <_raise_r+0x4c>
 801eee8:	1c59      	adds	r1, r3, #1
 801eeea:	d103      	bne.n	801eef4 <_raise_r+0x42>
 801eeec:	2316      	movs	r3, #22
 801eeee:	6003      	str	r3, [r0, #0]
 801eef0:	2001      	movs	r0, #1
 801eef2:	e7e7      	b.n	801eec4 <_raise_r+0x12>
 801eef4:	2100      	movs	r1, #0
 801eef6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801eefa:	4620      	mov	r0, r4
 801eefc:	4798      	blx	r3
 801eefe:	2000      	movs	r0, #0
 801ef00:	e7e0      	b.n	801eec4 <_raise_r+0x12>
	...

0801ef04 <raise>:
 801ef04:	4b02      	ldr	r3, [pc, #8]	@ (801ef10 <raise+0xc>)
 801ef06:	4601      	mov	r1, r0
 801ef08:	6818      	ldr	r0, [r3, #0]
 801ef0a:	f7ff bfd2 	b.w	801eeb2 <_raise_r>
 801ef0e:	bf00      	nop
 801ef10:	24000338 	.word	0x24000338

0801ef14 <_kill_r>:
 801ef14:	b538      	push	{r3, r4, r5, lr}
 801ef16:	4d07      	ldr	r5, [pc, #28]	@ (801ef34 <_kill_r+0x20>)
 801ef18:	2300      	movs	r3, #0
 801ef1a:	4604      	mov	r4, r0
 801ef1c:	4608      	mov	r0, r1
 801ef1e:	4611      	mov	r1, r2
 801ef20:	602b      	str	r3, [r5, #0]
 801ef22:	f7e3 f9fd 	bl	8002320 <_kill>
 801ef26:	1c43      	adds	r3, r0, #1
 801ef28:	d102      	bne.n	801ef30 <_kill_r+0x1c>
 801ef2a:	682b      	ldr	r3, [r5, #0]
 801ef2c:	b103      	cbz	r3, 801ef30 <_kill_r+0x1c>
 801ef2e:	6023      	str	r3, [r4, #0]
 801ef30:	bd38      	pop	{r3, r4, r5, pc}
 801ef32:	bf00      	nop
 801ef34:	240131b8 	.word	0x240131b8

0801ef38 <_getpid_r>:
 801ef38:	f7e3 b9ea 	b.w	8002310 <_getpid>

0801ef3c <_init>:
 801ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef3e:	bf00      	nop
 801ef40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef42:	bc08      	pop	{r3}
 801ef44:	469e      	mov	lr, r3
 801ef46:	4770      	bx	lr

0801ef48 <_fini>:
 801ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef4a:	bf00      	nop
 801ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef4e:	bc08      	pop	{r3}
 801ef50:	469e      	mov	lr, r3
 801ef52:	4770      	bx	lr
