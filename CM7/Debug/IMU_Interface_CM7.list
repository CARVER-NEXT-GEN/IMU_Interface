
IMU_Interface_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c614  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0801c8b8  0801c8b8  0001d8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d7c8  0801d7c8  0001f300  2**0
                  CONTENTS
  4 .ARM          00000008  0801d7c8  0801d7c8  0001e7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d7d0  0801d7d0  0001f300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d7d0  0801d7d0  0001e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d7d8  0801d7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  24000000  0801d7dc  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012cb8  24000300  0801dadc  0001f300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24012fb8  0801dadc  0001ffb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002935b  00000000  00000000  0001f32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005517  00000000  00000000  00048689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  0004dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d0  00000000  00000000  0004f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042668  00000000  00000000  00050dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d28  00000000  00000000  00093440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a0321  00000000  00000000  000bc168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0025c489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008348  00000000  00000000  0025c500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00264848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c89c 	.word	0x0801c89c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	0801c89c 	.word	0x0801c89c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO055_READ_HSEM>:
		HAL_HSEM_Release(HSEM_ID_1,0);
	}
}

#else
void BNO055_READ_HSEM(BNO055_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8000748:	2001      	movs	r0, #1
 800074a:	f004 fecd 	bl	80054e8 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d178      	bne.n	8000846 <BNO055_READ_HSEM+0x106>
		bno->quat.x = SRAM4_BNO055->Data[1];
 8000754:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000756:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = SRAM4_BNO055->Data[2];
 8000760:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = SRAM4_BNO055->Data[3];
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800076e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = SRAM4_BNO055->Data[4];
 8000778:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

		bno->lin_acc.x = SRAM4_BNO055->Data[5];
 8000784:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = SRAM4_BNO055->Data[6];
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000792:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = SRAM4_BNO055->Data[7];
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800079e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->gyro.x = SRAM4_BNO055->Data[8];
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		bno->gyro.y = SRAM4_BNO055->Data[9];
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		bno->gyro.z = SRAM4_BNO055->Data[10];
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		bno->mag.x = SRAM4_BNO055->Data[11];
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bno->mag.y = SRAM4_BNO055->Data[12];
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		bno->mag.z = SRAM4_BNO055->Data[13];
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		bno->accel.x = SRAM4_BNO055->Data[14];
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bno->accel.y = SRAM4_BNO055->Data[15];
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bno->accel.z = SRAM4_BNO055->Data[16];
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800080a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	e9c1 2306 	strd	r2, r3, [r1, #24]

		bno->euler.roll = SRAM4_BNO055->Data[17];
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000816:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		bno->euler.pitch = SRAM4_BNO055->Data[18];
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000822:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		bno->euler.yaw = SRAM4_BNO055->Data[19];
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800082e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->State1 = 1;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_Release(HSEM_ID_1,0);
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f004 fe6b 	bl	800551c <HAL_HSEM_Release>

	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	38002000 	.word	0x38002000

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000858:	4b3d      	ldr	r3, [pc, #244]	@ (8000950 <SystemInit+0xfc>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085e:	4a3c      	ldr	r2, [pc, #240]	@ (8000950 <SystemInit+0xfc>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000868:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <SystemInit+0xfc>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	4a38      	ldr	r2, [pc, #224]	@ (8000950 <SystemInit+0xfc>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000874:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <SystemInit+0x100>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	2b06      	cmp	r3, #6
 800087e:	d807      	bhi.n	8000890 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000880:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <SystemInit+0x100>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 030f 	bic.w	r3, r3, #15
 8000888:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <SystemInit+0x100>)
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000890:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <SystemInit+0x104>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a30      	ldr	r2, [pc, #192]	@ (8000958 <SystemInit+0x104>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <SystemInit+0x104>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <SystemInit+0x104>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	492c      	ldr	r1, [pc, #176]	@ (8000958 <SystemInit+0x104>)
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <SystemInit+0x108>)
 80008aa:	4013      	ands	r3, r2
 80008ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ae:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <SystemInit+0x100>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d007      	beq.n	80008ca <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <SystemInit+0x100>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f023 030f 	bic.w	r3, r3, #15
 80008c2:	4a24      	ldr	r2, [pc, #144]	@ (8000954 <SystemInit+0x100>)
 80008c4:	f043 0307 	orr.w	r3, r3, #7
 80008c8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008ca:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <SystemInit+0x104>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <SystemInit+0x104>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <SystemInit+0x104>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <SystemInit+0x104>)
 80008de:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <SystemInit+0x10c>)
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <SystemInit+0x104>)
 80008e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <SystemInit+0x110>)
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <SystemInit+0x104>)
 80008ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000968 <SystemInit+0x114>)
 80008ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <SystemInit+0x104>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <SystemInit+0x104>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <SystemInit+0x114>)
 80008f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <SystemInit+0x104>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <SystemInit+0x104>)
 8000902:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <SystemInit+0x114>)
 8000904:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <SystemInit+0x104>)
 8000908:	2200      	movs	r2, #0
 800090a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <SystemInit+0x104>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <SystemInit+0x104>)
 8000912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <SystemInit+0x104>)
 800091a:	2200      	movs	r2, #0
 800091c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <SystemInit+0x118>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <SystemInit+0x118>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <SystemInit+0x11c>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <SystemInit+0x120>)
 8000930:	4013      	ands	r3, r2
 8000932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000936:	d202      	bcs.n	800093e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <SystemInit+0x124>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <SystemInit+0x128>)
 8000940:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000944:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	52002000 	.word	0x52002000
 8000958:	58024400 	.word	0x58024400
 800095c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000960:	02020200 	.word	0x02020200
 8000964:	01ff0000 	.word	0x01ff0000
 8000968:	01010280 	.word	0x01010280
 800096c:	580000c0 	.word	0x580000c0
 8000970:	5c001000 	.word	0x5c001000
 8000974:	ffff0000 	.word	0xffff0000
 8000978:	51008108 	.word	0x51008108
 800097c:	52004000 	.word	0x52004000

08000980 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800098c:	f00c f87c 	bl	800ca88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000990:	4b5a      	ldr	r3, [pc, #360]	@ (8000afc <pvPortMallocMicroROS+0x17c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000998:	f000 f986 	bl	8000ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800099c:	4b58      	ldr	r3, [pc, #352]	@ (8000b00 <pvPortMallocMicroROS+0x180>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f040 8090 	bne.w	8000aca <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d01e      	beq.n	80009ee <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009b0:	2208      	movs	r2, #8
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d015      	beq.n	80009ee <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	3308      	adds	r3, #8
 80009ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00b      	beq.n	80009ee <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009da:	f383 8811 	msr	BASEPRI, r3
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	e7fd      	b.n	80009ea <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d06a      	beq.n	8000aca <pvPortMallocMicroROS+0x14a>
 80009f4:	4b43      	ldr	r3, [pc, #268]	@ (8000b04 <pvPortMallocMicroROS+0x184>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d865      	bhi.n	8000aca <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80009fe:	4b42      	ldr	r3, [pc, #264]	@ (8000b08 <pvPortMallocMicroROS+0x188>)
 8000a00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a02:	4b41      	ldr	r3, [pc, #260]	@ (8000b08 <pvPortMallocMicroROS+0x188>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a08:	e004      	b.n	8000a14 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d903      	bls.n	8000a26 <pvPortMallocMicroROS+0xa6>
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f1      	bne.n	8000a0a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <pvPortMallocMicroROS+0x17c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d04c      	beq.n	8000aca <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2208      	movs	r2, #8
 8000a36:	4413      	add	r3, r2
 8000a38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1ad2      	subs	r2, r2, r3
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d920      	bls.n	8000a94 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00b      	beq.n	8000a7c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a68:	f383 8811 	msr	BASEPRI, r3
 8000a6c:	f3bf 8f6f 	isb	sy
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	613b      	str	r3, [r7, #16]
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000a8e:	69b8      	ldr	r0, [r7, #24]
 8000a90:	f000 f96c 	bl	8000d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <pvPortMallocMicroROS+0x184>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <pvPortMallocMicroROS+0x184>)
 8000aa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <pvPortMallocMicroROS+0x184>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <pvPortMallocMicroROS+0x18c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d203      	bcs.n	8000ab6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <pvPortMallocMicroROS+0x184>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <pvPortMallocMicroROS+0x18c>)
 8000ab4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <pvPortMallocMicroROS+0x180>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000aca:	f00b ffeb 	bl	800caa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00b      	beq.n	8000af0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000adc:	f383 8811 	msr	BASEPRI, r3
 8000ae0:	f3bf 8f6f 	isb	sy
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	60fb      	str	r3, [r7, #12]
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000af0:	69fb      	ldr	r3, [r7, #28]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3728      	adds	r7, #40	@ 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24003f24 	.word	0x24003f24
 8000b00:	24003f30 	.word	0x24003f30
 8000b04:	24003f28 	.word	0x24003f28
 8000b08:	24003f1c 	.word	0x24003f1c
 8000b0c:	24003f2c 	.word	0x24003f2c

08000b10 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d04a      	beq.n	8000bb8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b22:	2308      	movs	r3, #8
 8000b24:	425b      	negs	r3, r3
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4413      	add	r3, r2
 8000b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <vPortFreeMicroROS+0xb0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10b      	bne.n	8000b56 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b42:	f383 8811 	msr	BASEPRI, r3
 8000b46:	f3bf 8f6f 	isb	sy
 8000b4a:	f3bf 8f4f 	dsb	sy
 8000b4e:	60fb      	str	r3, [r7, #12]
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	e7fd      	b.n	8000b52 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b62:	f383 8811 	msr	BASEPRI, r3
 8000b66:	f3bf 8f6f 	isb	sy
 8000b6a:	f3bf 8f4f 	dsb	sy
 8000b6e:	60bb      	str	r3, [r7, #8]
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	e7fd      	b.n	8000b72 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <vPortFreeMicroROS+0xb0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d019      	beq.n	8000bb8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d115      	bne.n	8000bb8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <vPortFreeMicroROS+0xb0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000b9c:	f00b ff74 	bl	800ca88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <vPortFreeMicroROS+0xb4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <vPortFreeMicroROS+0xb4>)
 8000bac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bae:	6938      	ldr	r0, [r7, #16]
 8000bb0:	f000 f8dc 	bl	8000d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bb4:	f00b ff76 	bl	800caa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24003f30 	.word	0x24003f30
 8000bc4:	24003f28 	.word	0x24003f28

08000bc8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <getBlockSize+0x38>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

	return count;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	24003f30 	.word	0x24003f30

08000c04 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c0e:	f00b ff3b 	bl	800ca88 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f7ff feb4 	bl	8000980 <pvPortMallocMicroROS>
 8000c18:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d017      	beq.n	8000c50 <pvPortReallocMicroROS+0x4c>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d014      	beq.n	8000c50 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffce 	bl	8000bc8 <getBlockSize>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2208      	movs	r2, #8
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d201      	bcs.n	8000c40 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f01a ffe8 	bl	801bc1a <memcpy>

		vPortFreeMicroROS(pv);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ff60 	bl	8000b10 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c50:	f00b ff28 	bl	800caa4 <xTaskResumeAll>

	return newmem;
 8000c54:	68bb      	ldr	r3, [r7, #8]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c68:	f00b ff0e 	bl	800ca88 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff fe82 	bl	8000980 <pvPortMallocMicroROS>
 8000c7c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000c82:	e004      	b.n	8000c8e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	613a      	str	r2, [r7, #16]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	617a      	str	r2, [r7, #20]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f5      	bne.n	8000c84 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000c98:	f00b ff04 	bl	800caa4 <xTaskResumeAll>
  	return mem;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <prvHeapInit+0xac>)
 8000cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3307      	adds	r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f023 0307 	bic.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <prvHeapInit+0xac>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d58 <prvHeapInit+0xb0>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <prvHeapInit+0xb0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f023 0307 	bic.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <prvHeapInit+0xb4>)
 8000d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <prvHeapInit+0xb4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <prvHeapInit+0xb4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <prvHeapInit+0xb4>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <prvHeapInit+0xb8>)
 8000d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <prvHeapInit+0xbc>)
 8000d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <prvHeapInit+0xc0>)
 8000d42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2400031c 	.word	0x2400031c
 8000d58:	24003f1c 	.word	0x24003f1c
 8000d5c:	24003f24 	.word	0x24003f24
 8000d60:	24003f2c 	.word	0x24003f2c
 8000d64:	24003f28 	.word	0x24003f28
 8000d68:	24003f30 	.word	0x24003f30

08000d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <prvInsertBlockIntoFreeList+0xac>)
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e002      	b.n	8000d80 <prvInsertBlockIntoFreeList+0x14>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d8f7      	bhi.n	8000d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4413      	add	r3, r2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d108      	bne.n	8000dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	441a      	add	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	441a      	add	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d118      	bne.n	8000df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <prvInsertBlockIntoFreeList+0xb0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d00d      	beq.n	8000dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	441a      	add	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e008      	b.n	8000dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <prvInsertBlockIntoFreeList+0xb0>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e003      	b.n	8000dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d002      	beq.n	8000e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	24003f1c 	.word	0x24003f1c
 8000e1c:	24003f24 	.word	0x24003f24

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_DMA_Init+0x4c>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <MX_DMA_Init+0x4c>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <MX_DMA_Init+0x4c>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2105      	movs	r1, #5
 8000e48:	200e      	movs	r0, #14
 8000e4a:	f001 fb2d 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e4e:	200e      	movs	r0, #14
 8000e50:	f001 fb44 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	200f      	movs	r0, #15
 8000e5a:	f001 fb25 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f001 fb3c 	bl	80024dc <HAL_NVIC_EnableIRQ>

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400

08000e70 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000e7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e84:	4904      	ldr	r1, [pc, #16]	@ (8000e98 <cubemx_transport_open+0x28>)
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f008 f84a 	bl	8008f20 <HAL_UART_Receive_DMA>
    return true;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	24003f34 	.word	0x24003f34

08000e9c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eaa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f008 f883 	bl	8008fb8 <HAL_UART_DMAStop>
    return true;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ed0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed8:	2b20      	cmp	r3, #32
 8000eda:	d11b      	bne.n	8000f14 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f007 ff9b 	bl	8008e20 <HAL_UART_Transmit_DMA>
 8000eea:	4603      	mov	r3, r0
 8000eec:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000eee:	e002      	b.n	8000ef6 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f00a f945 	bl	800b180 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000ef6:	7cfb      	ldrb	r3, [r7, #19]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <cubemx_transport_write+0x4a>
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	d1f4      	bne.n	8000ef0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f06:	7cfb      	ldrb	r3, [r7, #19]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <cubemx_transport_write+0x54>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	e002      	b.n	8000f16 <cubemx_transport_write+0x5a>
 8000f10:	2300      	movs	r3, #0
 8000f12:	e000      	b.n	8000f16 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f14:	2300      	movs	r3, #0
    }
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f34:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3a:	b672      	cpsid	i
}
 8000f3c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a5a      	ldr	r2, [pc, #360]	@ (80010b0 <cubemx_transport_read+0x190>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d068      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a57      	ldr	r2, [pc, #348]	@ (80010b4 <cubemx_transport_read+0x194>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d061      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a55      	ldr	r2, [pc, #340]	@ (80010b8 <cubemx_transport_read+0x198>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d05a      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a52      	ldr	r2, [pc, #328]	@ (80010bc <cubemx_transport_read+0x19c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d053      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a50      	ldr	r2, [pc, #320]	@ (80010c0 <cubemx_transport_read+0x1a0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d04c      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <cubemx_transport_read+0x1a4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d045      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <cubemx_transport_read+0x1a8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d03e      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	@ (80010cc <cubemx_transport_read+0x1ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d037      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a46      	ldr	r2, [pc, #280]	@ (80010d0 <cubemx_transport_read+0x1b0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d030      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a43      	ldr	r2, [pc, #268]	@ (80010d4 <cubemx_transport_read+0x1b4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d029      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a41      	ldr	r2, [pc, #260]	@ (80010d8 <cubemx_transport_read+0x1b8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d022      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80010dc <cubemx_transport_read+0x1bc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01b      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a3c      	ldr	r2, [pc, #240]	@ (80010e0 <cubemx_transport_read+0x1c0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d014      	beq.n	800101e <cubemx_transport_read+0xfe>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a39      	ldr	r2, [pc, #228]	@ (80010e4 <cubemx_transport_read+0x1c4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <cubemx_transport_read+0xfe>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a37      	ldr	r2, [pc, #220]	@ (80010e8 <cubemx_transport_read+0x1c8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d006      	beq.n	800101e <cubemx_transport_read+0xfe>
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a34      	ldr	r2, [pc, #208]	@ (80010ec <cubemx_transport_read+0x1cc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d107      	bne.n	800102e <cubemx_transport_read+0x10e>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800102c:	e006      	b.n	800103c <cubemx_transport_read+0x11c>
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800103c:	4a2c      	ldr	r2, [pc, #176]	@ (80010f0 <cubemx_transport_read+0x1d0>)
 800103e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001040:	b662      	cpsie	i
}
 8001042:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	3301      	adds	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800104a:	2001      	movs	r0, #1
 800104c:	f00a f898 	bl	800b180 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <cubemx_transport_read+0x1d4>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <cubemx_transport_read+0x1d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d104      	bne.n	8001066 <cubemx_transport_read+0x146>
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	f6ff af6a 	blt.w	8000f3a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800106a:	e011      	b.n	8001090 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <cubemx_transport_read+0x1d4>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	440b      	add	r3, r1
 8001076:	4920      	ldr	r1, [pc, #128]	@ (80010f8 <cubemx_transport_read+0x1d8>)
 8001078:	5c8a      	ldrb	r2, [r1, r2]
 800107a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <cubemx_transport_read+0x1d4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001086:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <cubemx_transport_read+0x1d4>)
 8001088:	6013      	str	r3, [r2, #0]
        wrote++;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3301      	adds	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <cubemx_transport_read+0x1d4>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <cubemx_transport_read+0x1d0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d003      	beq.n	80010a4 <cubemx_transport_read+0x184>
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e3      	bcc.n	800106c <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 80010a4:	69bb      	ldr	r3, [r7, #24]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020010 	.word	0x40020010
 80010b4:	40020028 	.word	0x40020028
 80010b8:	40020040 	.word	0x40020040
 80010bc:	40020058 	.word	0x40020058
 80010c0:	40020070 	.word	0x40020070
 80010c4:	40020088 	.word	0x40020088
 80010c8:	400200a0 	.word	0x400200a0
 80010cc:	400200b8 	.word	0x400200b8
 80010d0:	40020410 	.word	0x40020410
 80010d4:	40020428 	.word	0x40020428
 80010d8:	40020440 	.word	0x40020440
 80010dc:	40020458 	.word	0x40020458
 80010e0:	40020470 	.word	0x40020470
 80010e4:	40020488 	.word	0x40020488
 80010e8:	400204a0 	.word	0x400204a0
 80010ec:	400204b8 	.word	0x400204b8
 80010f0:	24004738 	.word	0x24004738
 80010f4:	24004734 	.word	0x24004734
 80010f8:	24003f34 	.word	0x24003f34

080010fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001100:	f3bf 8f4f 	dsb	sy
}
 8001104:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <__NVIC_SystemReset+0x24>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800110e:	4904      	ldr	r1, [pc, #16]	@ (8001120 <__NVIC_SystemReset+0x24>)
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_SystemReset+0x28>)
 8001112:	4313      	orrs	r3, r2
 8001114:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001116:	f3bf 8f4f 	dsb	sy
}
 800111a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <__NVIC_SystemReset+0x20>
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	05fa0004 	.word	0x05fa0004

08001128 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <MX_FREERTOS_Init+0x18>)
 800112e:	2100      	movs	r1, #0
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_FREERTOS_Init+0x1c>)
 8001132:	f009 ff93 	bl	800b05c <osThreadNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <MX_FREERTOS_Init+0x20>)
 800113a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0801c958 	.word	0x0801c958
 8001144:	0800114d 	.word	0x0800114d
 8001148:	24004864 	.word	0x24004864

0800114c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800114c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001150:	b0ec      	sub	sp, #432	@ 0x1b0
 8001152:	af02      	add	r7, sp, #8
 8001154:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800115c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800115e:	4b5d      	ldr	r3, [pc, #372]	@ (80012d4 <StartDefaultTask+0x188>)
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <StartDefaultTask+0x18c>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <StartDefaultTask+0x190>)
 8001168:	4a5d      	ldr	r2, [pc, #372]	@ (80012e0 <StartDefaultTask+0x194>)
 800116a:	495e      	ldr	r1, [pc, #376]	@ (80012e4 <StartDefaultTask+0x198>)
 800116c:	2001      	movs	r0, #1
 800116e:	f00d fee3 	bl	800ef38 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001172:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001176:	4618      	mov	r0, r3
 8001178:	f00d fe00 	bl	800ed7c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800117c:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <StartDefaultTask+0x19c>)
 800117e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001182:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <StartDefaultTask+0x1a0>)
 8001184:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001188:	4b59      	ldr	r3, [pc, #356]	@ (80012f0 <StartDefaultTask+0x1a4>)
 800118a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800118e:	4b59      	ldr	r3, [pc, #356]	@ (80012f4 <StartDefaultTask+0x1a8>)
 8001190:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001194:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001198:	4618      	mov	r0, r3
 800119a:	f00d fdfd 	bl	800ed98 <rcutils_set_default_allocator>
 800119e:	4603      	mov	r3, r0
 80011a0:	f083 0301 	eor.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80011aa:	21bb      	movs	r1, #187	@ 0xbb
 80011ac:	4852      	ldr	r0, [pc, #328]	@ (80012f8 <StartDefaultTask+0x1ac>)
 80011ae:	f01a faeb 	bl	801b788 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(2);
 80011b2:	4b52      	ldr	r3, [pc, #328]	@ (80012fc <StartDefaultTask+0x1b0>)
 80011b4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 80011b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * float64_multi_arr_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray);
 80011c6:	f00f f891 	bl	80102ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 80011ca:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 80011ce:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00d fdfe 	bl	800edd4 <rcutils_get_default_allocator>
 80011d8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80011dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011e0:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00d f9f7 	bl	800e5e4 <rclc_executor_get_zero_initialized_executor>
 80011f6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80011fa:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80011fe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001202:	4611      	mov	r1, r2
 8001204:	2288      	movs	r2, #136	@ 0x88
 8001206:	4618      	mov	r0, r3
 8001208:	f01a fd07 	bl	801bc1a <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 800120c:	f00c fc86 	bl	800db1c <rcl_get_zero_initialized_init_options>
 8001210:	4602      	mov	r2, r0
 8001212:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001216:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800121a:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800121c:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001220:	466a      	mov	r2, sp
 8001222:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800122a:	e882 0003 	stmia.w	r2, {r0, r1}
 800122e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001234:	4620      	mov	r0, r4
 8001236:	f00c fc73 	bl	800db20 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 800123a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800123e:	21c6      	movs	r1, #198	@ 0xc6
 8001240:	4618      	mov	r0, r3
 8001242:	f00c fd6b 	bl	800dd1c <rcl_init_options_set_domain_id>

	// create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001246:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800124a:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800124e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f00d fca5 	bl	800eba8 <rclc_support_init_with_options>

	// create timer
	rclc_timer_init_default(&XLR8_timer, &support, timer_period, timer_callback);
 800125e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001262:	2200      	movs	r2, #0
 8001264:	4698      	mov	r8, r3
 8001266:	4691      	mov	r9, r2
 8001268:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800126c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <StartDefaultTask+0x1b4>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	4642      	mov	r2, r8
 8001276:	464b      	mov	r3, r9
 8001278:	f00d fd48 	bl	800ed0c <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "uros_H7_Node", "", &support);
 800127c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001280:	4a20      	ldr	r2, [pc, #128]	@ (8001304 <StartDefaultTask+0x1b8>)
 8001282:	4921      	ldr	r1, [pc, #132]	@ (8001308 <StartDefaultTask+0x1bc>)
 8001284:	4821      	ldr	r0, [pc, #132]	@ (800130c <StartDefaultTask+0x1c0>)
 8001286:	f00d fcc5 	bl	800ec14 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&f64array_pub, &node, float64_multi_arr_type_support, "cubemx_imu_data");
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <StartDefaultTask+0x1c4>)
 800128c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001290:	491e      	ldr	r1, [pc, #120]	@ (800130c <StartDefaultTask+0x1c0>)
 8001292:	4820      	ldr	r0, [pc, #128]	@ (8001314 <StartDefaultTask+0x1c8>)
 8001294:	f00d fd00 	bl	800ec98 <rclc_publisher_init_best_effort>
	// create service server

	// create service client

	// create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8001298:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800129c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012a0:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80012a4:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80012a8:	f00d f9a6 	bl	800e5f8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &XLR8_timer);
 80012ac:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80012b0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00d fa1a 	bl	800e6f0 <rclc_executor_add_timer>

	rclc_executor_spin(&executor);
 80012bc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00d fc2f 	bl	800eb24 <rclc_executor_spin>
	rmw_uros_sync_session(timeout_ms);
 80012c6:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80012ca:	f00e fc87 	bl	800fbdc <rmw_uros_sync_session>

	for(;;)
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <StartDefaultTask+0x182>
 80012d2:	bf00      	nop
 80012d4:	08000f21 	.word	0x08000f21
 80012d8:	08000ebd 	.word	0x08000ebd
 80012dc:	08000e9d 	.word	0x08000e9d
 80012e0:	08000e71 	.word	0x08000e71
 80012e4:	24009888 	.word	0x24009888
 80012e8:	080018d1 	.word	0x080018d1
 80012ec:	08001915 	.word	0x08001915
 80012f0:	0800194d 	.word	0x0800194d
 80012f4:	080019b9 	.word	0x080019b9
 80012f8:	0801c8c4 	.word	0x0801c8c4
 80012fc:	001e8480 	.word	0x001e8480
 8001300:	08001319 	.word	0x08001319
 8001304:	0801c8ec 	.word	0x0801c8ec
 8001308:	0801c8f0 	.word	0x0801c8f0
 800130c:	2400473c 	.word	0x2400473c
 8001310:	0801c900 	.word	0x0801c900
 8001314:	24004744 	.word	0x24004744

08001318 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01c      	beq.n	8001364 <timer_callback+0x4c>
		SensorsPublished();
 800132a:	f000 f823 	bl	8001374 <SensorsPublished>
		if (sync_counter++ >= 254) {  // Sync session at lower frequency
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <timer_callback+0x54>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	490d      	ldr	r1, [pc, #52]	@ (800136c <timer_callback+0x54>)
 8001336:	600a      	str	r2, [r1, #0]
 8001338:	2bfd      	cmp	r3, #253	@ 0xfd
 800133a:	d910      	bls.n	800135e <timer_callback+0x46>
			if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) {
 800133c:	2101      	movs	r1, #1
 800133e:	2064      	movs	r0, #100	@ 0x64
 8001340:	f00d fe10 	bl	800ef64 <rmw_uros_ping_agent>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d107      	bne.n	800135a <timer_callback+0x42>
				rmw_uros_sync_session(1000); // Sync if agent is reachable
 800134a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800134e:	f00e fc45 	bl	800fbdc <rmw_uros_sync_session>
			else {
				// If the agent is not reachable, let the watchdog reset the MCU
				NVIC_SystemReset();
			}
//			rmw_uros_sync_session(1000);
			sync_counter = 0;
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <timer_callback+0x54>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e001      	b.n	800135e <timer_callback+0x46>
				NVIC_SystemReset();
 800135a:	f7ff fecf 	bl	80010fc <__NVIC_SystemReset>
		}
		HAL_IWDG_Refresh(&hiwdg1);
 800135e:	4804      	ldr	r0, [pc, #16]	@ (8001370 <timer_callback+0x58>)
 8001360:	f004 f96d 	bl	800563e <HAL_IWDG_Refresh>
	}

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24004860 	.word	0x24004860
 8001370:	240096e4 	.word	0x240096e4

08001374 <SensorsPublished>:

void SensorsPublished(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
//	f64array_msg.data.data[9] = IMU_086_FRTOS.magnetometer.x;
//	f64array_msg.data.data[10] = IMU_086_FRTOS.magnetometer.y;
//	f64array_msg.data.data[11] = IMU_086_FRTOS.magnetometer.z;

	// IMU_055 acceleration
	f64array_msg.data.data[12] = IMU_055_FRTOS.accel.x;
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <SensorsPublished+0x168>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001380:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <SensorsPublished+0x16c>)
 8001382:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[13] = IMU_055_FRTOS.accel.y;
 800138a:	4b54      	ldr	r3, [pc, #336]	@ (80014dc <SensorsPublished+0x168>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8001392:	4b53      	ldr	r3, [pc, #332]	@ (80014e0 <SensorsPublished+0x16c>)
 8001394:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001398:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[14] = IMU_055_FRTOS.accel.z;
 800139c:	4b4f      	ldr	r3, [pc, #316]	@ (80014dc <SensorsPublished+0x168>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80013a4:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <SensorsPublished+0x16c>)
 80013a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 linear acceleration
	f64array_msg.data.data[15] = IMU_055_FRTOS.lin_acc.x;
 80013ae:	4b4b      	ldr	r3, [pc, #300]	@ (80014dc <SensorsPublished+0x168>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <SensorsPublished+0x16c>)
 80013b8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80013bc:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[16] = IMU_055_FRTOS.lin_acc.y;
 80013c0:	4b46      	ldr	r3, [pc, #280]	@ (80014dc <SensorsPublished+0x168>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 80013c8:	4b45      	ldr	r3, [pc, #276]	@ (80014e0 <SensorsPublished+0x16c>)
 80013ca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[17] = IMU_055_FRTOS.lin_acc.z;
 80013d2:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <SensorsPublished+0x168>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <SensorsPublished+0x16c>)
 80013dc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 gyro (angular velocity)
	f64array_msg.data.data[18] = IMU_055_FRTOS.gyro.x;
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <SensorsPublished+0x168>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80013ec:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <SensorsPublished+0x16c>)
 80013ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[19] = IMU_055_FRTOS.gyro.y;
 80013f6:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <SensorsPublished+0x168>)
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <SensorsPublished+0x16c>)
 8001400:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001404:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[20] = IMU_055_FRTOS.gyro.z;
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <SensorsPublished+0x168>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <SensorsPublished+0x16c>)
 8001412:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001416:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 magnetometer
	f64array_msg.data.data[21] = IMU_055_FRTOS.mag.x;
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <SensorsPublished+0x168>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8001422:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <SensorsPublished+0x16c>)
 8001424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001428:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[22] = IMU_055_FRTOS.mag.y;
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <SensorsPublished+0x168>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <SensorsPublished+0x16c>)
 8001436:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[23] = IMU_055_FRTOS.mag.z;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <SensorsPublished+0x168>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <SensorsPublished+0x16c>)
 8001448:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800144c:	e9c1 2300 	strd	r2, r3, [r1]

	// IMU_055 euler angles
	f64array_msg.data.data[24] = IMU_055_FRTOS.euler.roll;
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <SensorsPublished+0x168>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <SensorsPublished+0x16c>)
 800145a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[25] = IMU_055_FRTOS.euler.pitch;
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <SensorsPublished+0x168>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <SensorsPublished+0x16c>)
 800146c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001470:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[26] = IMU_055_FRTOS.euler.yaw;
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <SensorsPublished+0x168>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <SensorsPublished+0x16c>)
 800147e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
//	f64array_msg.data.data[28] = IMU_086_FRTOS.quaternion.j;
//	f64array_msg.data.data[29] = IMU_086_FRTOS.quaternion.k;
//	f64array_msg.data.data[30] = IMU_086_FRTOS.quaternion.w;

	// IMU_055 quaternion
	f64array_msg.data.data[31] = IMU_055_FRTOS.quat.x;
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <SensorsPublished+0x168>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f103 01f8 	add.w	r1, r3, #248	@ 0xf8
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <SensorsPublished+0x16c>)
 8001490:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001494:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[32] = IMU_055_FRTOS.quat.y;
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <SensorsPublished+0x168>)
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <SensorsPublished+0x16c>)
 80014a2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[33] = IMU_055_FRTOS.quat.z;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <SensorsPublished+0x168>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <SensorsPublished+0x16c>)
 80014b4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80014b8:	e9c1 2300 	strd	r2, r3, [r1]
	f64array_msg.data.data[34] = IMU_055_FRTOS.quat.w;
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <SensorsPublished+0x168>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	f503 7188 	add.w	r1, r3, #272	@ 0x110
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <SensorsPublished+0x16c>)
 80014c6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80014ca:	e9c1 2300 	strd	r2, r3, [r1]



    RCSOFTCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 80014ce:	2200      	movs	r2, #0
 80014d0:	4902      	ldr	r1, [pc, #8]	@ (80014dc <SensorsPublished+0x168>)
 80014d2:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <SensorsPublished+0x170>)
 80014d4:	f00c fcf8 	bl	800dec8 <rcl_publish>

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24000008 	.word	0x24000008
 80014e0:	240096f8 	.word	0x240096f8
 80014e4:	24004744 	.word	0x24004744

080014e8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b51      	ldr	r3, [pc, #324]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	4a4f      	ldr	r2, [pc, #316]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150e:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b49      	ldr	r3, [pc, #292]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	4a48      	ldr	r2, [pc, #288]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b42      	ldr	r3, [pc, #264]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	4a40      	ldr	r2, [pc, #256]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	4a39      	ldr	r2, [pc, #228]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001568:	4b36      	ldr	r3, [pc, #216]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157c:	4a31      	ldr	r2, [pc, #196]	@ (8001644 <MX_GPIO_Init+0x15c>)
 800157e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001586:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <MX_GPIO_Init+0x15c>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001594:	2332      	movs	r3, #50	@ 0x32
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	230b      	movs	r3, #11
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4826      	ldr	r0, [pc, #152]	@ (8001648 <MX_GPIO_Init+0x160>)
 80015b0:	f003 fdea 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015b4:	2386      	movs	r3, #134	@ 0x86
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c4:	230b      	movs	r3, #11
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	481f      	ldr	r0, [pc, #124]	@ (800164c <MX_GPIO_Init+0x164>)
 80015d0:	f003 fdda 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4817      	ldr	r0, [pc, #92]	@ (8001650 <MX_GPIO_Init+0x168>)
 80015f2:	f003 fdc9 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015f6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001608:	230a      	movs	r3, #10
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480e      	ldr	r0, [pc, #56]	@ (800164c <MX_GPIO_Init+0x164>)
 8001614:	f003 fdb8 	bl	8005188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001618:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800162a:	230b      	movs	r3, #11
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	@ (8001654 <MX_GPIO_Init+0x16c>)
 8001636:	f003 fda7 	bl	8005188 <HAL_GPIO_Init>

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	58024400 	.word	0x58024400
 8001648:	58020800 	.word	0x58020800
 800164c:	58020000 	.word	0x58020000
 8001650:	58020400 	.word	0x58020400
 8001654:	58021800 	.word	0x58021800

08001658 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_IWDG1_Init+0x34>)
 800165e:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <MX_IWDG1_Init+0x38>)
 8001660:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_IWDG1_Init+0x34>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_IWDG1_Init+0x34>)
 800166a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800166e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_IWDG1_Init+0x34>)
 8001672:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001676:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_IWDG1_Init+0x34>)
 800167a:	f003 ff8f 	bl	800559c <HAL_IWDG_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001684:	f000 f91e 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	240096e4 	.word	0x240096e4
 8001690:	58004800 	.word	0x58004800

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800169a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800169e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80016a0:	bf00      	nop
 80016a2:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <main+0xd0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <main+0x24>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dcf4      	bgt.n	80016a2 <main+0xe>
  if ( timeout < 0 )
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da01      	bge.n	80016c2 <main+0x2e>
  {
  Error_Handler();
 80016be:	f000 f901 	bl	80018c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 fdd1 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f851 	bl	800176c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <main+0xd0>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	4a24      	ldr	r2, [pc, #144]	@ (8001764 <main+0xd0>)
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016da:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <main+0xd0>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80016e8:	2001      	movs	r0, #1
 80016ea:	f003 ff2b 	bl	8005544 <HAL_HSEM_ActivateNotification>
HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80016ee:	2002      	movs	r0, #2
 80016f0:	f003 ff28 	bl	8005544 <HAL_HSEM_ActivateNotification>
/*Take HSEM0 */
HAL_HSEM_FastTake(HSEM_ID_0);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f003 fef7 	bl	80054e8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80016fa:	2100      	movs	r1, #0
 80016fc:	2000      	movs	r0, #0
 80016fe:	f003 ff0d 	bl	800551c <HAL_HSEM_Release>
/*Take HSEM1 */
HAL_HSEM_FastTake(HSEM_ID_1);
 8001702:	2001      	movs	r0, #1
 8001704:	f003 fef0 	bl	80054e8 <HAL_HSEM_FastTake>
///*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_1,0);
 8001708:	2100      	movs	r1, #0
 800170a:	2001      	movs	r0, #1
 800170c:	f003 ff06 	bl	800551c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001714:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001716:	bf00      	nop
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <main+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <main+0x9a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1e5a      	subs	r2, r3, #1
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dcf4      	bgt.n	8001718 <main+0x84>
if ( timeout < 0 )
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da01      	bge.n	8001738 <main+0xa4>
{
Error_Handler();
 8001734:	f000 f8c6 	bl	80018c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f7ff fed6 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800173c:	f7ff fb70 	bl	8000e20 <MX_DMA_Init>
  MX_IWDG1_Init();
 8001740:	f7ff ff8a 	bl	8001658 <MX_IWDG1_Init>
  MX_TIM5_Init();
 8001744:	f000 fbca 	bl	8001edc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001748:	f000 fc3e 	bl	8001fc8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800174c:	4806      	ldr	r0, [pc, #24]	@ (8001768 <main+0xd4>)
 800174e:	f006 fe8d 	bl	800846c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001752:	f009 fc39 	bl	800afc8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001756:	f7ff fce7 	bl	8001128 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800175a:	f009 fc59 	bl	800b010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800175e:	bf00      	nop
 8001760:	e7fd      	b.n	800175e <main+0xca>
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	2400983c 	.word	0x2400983c

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09c      	sub	sp, #112	@ 0x70
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	224c      	movs	r2, #76	@ 0x4c
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f01a f984 	bl	801ba88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f01a f97e 	bl	801ba88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800178c:	2004      	movs	r0, #4
 800178e:	f003 ff67 	bl	8005660 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <SystemClock_Config+0xf8>)
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	4a32      	ldr	r2, [pc, #200]	@ (8001864 <SystemClock_Config+0xf8>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80017a2:	4b30      	ldr	r3, [pc, #192]	@ (8001864 <SystemClock_Config+0xf8>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <SystemClock_Config+0xfc>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001868 <SystemClock_Config+0xfc>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <SystemClock_Config+0xfc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017c8:	bf00      	nop
 80017ca:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <SystemClock_Config+0xfc>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017d6:	d1f8      	bne.n	80017ca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017d8:	230a      	movs	r3, #10
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80017dc:	2301      	movs	r3, #1
 80017de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e0:	2340      	movs	r3, #64	@ 0x40
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017e4:	2301      	movs	r3, #1
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017f4:	2315      	movs	r3, #21
 80017f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017fc:	2304      	movs	r3, #4
 80017fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001800:	2302      	movs	r3, #2
 8001802:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001804:	230c      	movs	r3, #12
 8001806:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001808:	2300      	movs	r3, #0
 800180a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 800180c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001810:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001816:	4618      	mov	r0, r3
 8001818:	f003 ff7c 	bl	8005714 <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001822:	f000 f84f 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	233f      	movs	r3, #63	@ 0x3f
 8001828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182a:	2303      	movs	r3, #3
 800182c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001836:	2340      	movs	r3, #64	@ 0x40
 8001838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800183a:	2350      	movs	r3, #80	@ 0x50
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800183e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001842:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001844:	2340      	movs	r3, #64	@ 0x40
 8001846:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2103      	movs	r1, #3
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fbbb 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001858:	f000 f834 	bl	80018c4 <Error_Handler>
  }
}
 800185c:	bf00      	nop
 800185e:	3770      	adds	r7, #112	@ 0x70
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58000400 	.word	0x58000400
 8001868:	58024800 	.word	0x58024800

0800186c <HAL_HSEM_FreeCallback>:

/* USER CODE BEGIN 4 */
void HAL_HSEM_FreeCallback(uint32_t SemMask){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
//	if (SemMask & (1 << HSEM_ID_0)) {
//		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
//
//	    }

	if (SemMask & (1 << HSEM_ID_1)) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_HSEM_FreeCallback+0x18>
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800187e:	2002      	movs	r0, #2
 8001880:	f003 fe60 	bl	8005544 <HAL_HSEM_ActivateNotification>
	}
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800189e:	f000 fd1f 	bl	80022e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim5){
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0x24>
//	  BNO086_READ_HSEM(&IMU_086_FRTOS);
	  BNO055_READ_HSEM(&IMU_055_FRTOS);
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018ac:	f7fe ff48 	bl	8000740 <BNO055_READ_HSEM>
  }
  /* USER CODE END Callback 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40010000 	.word	0x40010000
 80018bc:	2400983c 	.word	0x2400983c
 80018c0:	240096f8 	.word	0x240096f8

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <microros_allocate+0x3c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <microros_allocate+0x3c>)
 80018e8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <microros_allocate+0x40>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <microros_allocate+0x40>)
 80018f8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff f840 	bl	8000980 <pvPortMallocMicroROS>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	240097e0 	.word	0x240097e0
 8001910:	240097e4 	.word	0x240097e4

08001914 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff f94f 	bl	8000bc8 <getBlockSize>
 800192a:	4603      	mov	r3, r0
 800192c:	4a06      	ldr	r2, [pc, #24]	@ (8001948 <microros_deallocate+0x34>)
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <microros_deallocate+0x34>)
 8001936:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f8e9 	bl	8000b10 <vPortFreeMicroROS>
  }
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	240097e4 	.word	0x240097e4

0800194c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <microros_reallocate+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4413      	add	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <microros_reallocate+0x64>)
 8001966:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <microros_reallocate+0x68>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	461a      	mov	r2, r3
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <microros_reallocate+0x68>)
 8001976:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d104      	bne.n	8001988 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7fe fffe 	bl	8000980 <pvPortMallocMicroROS>
 8001984:	4603      	mov	r3, r0
 8001986:	e00e      	b.n	80019a6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff f91d 	bl	8000bc8 <getBlockSize>
 800198e:	4603      	mov	r3, r0
 8001990:	4a08      	ldr	r2, [pc, #32]	@ (80019b4 <microros_reallocate+0x68>)
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	461a      	mov	r2, r3
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <microros_reallocate+0x68>)
 800199a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff f930 	bl	8000c04 <pvPortReallocMicroROS>
 80019a4:	4603      	mov	r3, r0
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	240097e0 	.word	0x240097e0
 80019b4:	240097e4 	.word	0x240097e4

080019b8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <microros_zero_allocate+0x48>)
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <microros_zero_allocate+0x48>)
 80019d6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <microros_zero_allocate+0x4c>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <microros_zero_allocate+0x4c>)
 80019ea:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff f935 	bl	8000c5e <pvPortCallocMicroROS>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	240097e0 	.word	0x240097e0
 8001a04:	240097e4 	.word	0x240097e4

08001a08 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1e:	a320      	add	r3, pc, #128	@ (adr r3, 8001aa0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fcc4 	bl	80003b0 <__aeabi_ldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001a32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a36:	a31a      	add	r3, pc, #104	@ (adr r3, 8001aa0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fcb8 	bl	80003b0 <__aeabi_ldivmod>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da20      	bge.n	8001a8e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <UTILS_NanosecondsToTimespec+0x90>)
 8001a52:	fb82 1203 	smull	r1, r2, r2, r3
 8001a56:	1712      	asrs	r2, r2, #28
 8001a58:	17db      	asrs	r3, r3, #31
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	17c8      	asrs	r0, r1, #31
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	ebb2 0804 	subs.w	r8, r2, r4
 8001a72:	eb63 0905 	sbc.w	r9, r3, r5
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4906      	ldr	r1, [pc, #24]	@ (8001a9c <UTILS_NanosecondsToTimespec+0x94>)
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
    }
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a98:	44b82fa1 	.word	0x44b82fa1
 8001a9c:	3b9aca00 	.word	0x3b9aca00
 8001aa0:	3b9aca00 	.word	0x3b9aca00
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b08e      	sub	sp, #56	@ 0x38
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ab2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001ab4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001aca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00b fa64 	bl	800cf9c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad6:	17da      	asrs	r2, r3, #31
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	69b9      	ldr	r1, [r7, #24]
 8001ae6:	000b      	movs	r3, r1
 8001ae8:	2200      	movs	r2, #0
 8001aea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af0:	2200      	movs	r2, #0
 8001af2:	461c      	mov	r4, r3
 8001af4:	4615      	mov	r5, r2
 8001af6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001afa:	1911      	adds	r1, r2, r4
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	416b      	adcs	r3, r5
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b06:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	f04f 0500 	mov.w	r5, #0
 8001b1a:	015d      	lsls	r5, r3, #5
 8001b1c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001b20:	0154      	lsls	r4, r2, #5
 8001b22:	4622      	mov	r2, r4
 8001b24:	462b      	mov	r3, r5
 8001b26:	ebb2 0800 	subs.w	r8, r2, r0
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b3a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b3e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	eb18 0a00 	adds.w	sl, r8, r0
 8001b4a:	eb49 0b01 	adc.w	fp, r9, r1
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b5a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b5e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b62:	ebb2 040a 	subs.w	r4, r2, sl
 8001b66:	603c      	str	r4, [r7, #0]
 8001b68:	eb63 030b 	sbc.w	r3, r3, fp
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b72:	4623      	mov	r3, r4
 8001b74:	181b      	adds	r3, r3, r0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	462b      	mov	r3, r5
 8001b7a:	eb41 0303 	adc.w	r3, r1, r3
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	6a3a      	ldr	r2, [r7, #32]
 8001b82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b86:	f7ff ff3f 	bl	8001a08 <UTILS_NanosecondsToTimespec>

    return 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3738      	adds	r7, #56	@ 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_MspInit+0x48>)
 8001ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_MspInit+0x48>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_MspInit+0x48>)
 8001bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f06f 0001 	mvn.w	r0, #1
 8001bc4:	f000 fc70 	bl	80024a8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2105      	movs	r1, #5
 8001bcc:	207d      	movs	r0, #125	@ 0x7d
 8001bce:	f000 fc6b 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001bd2:	207d      	movs	r0, #125	@ 0x7d
 8001bd4:	f000 fc82 	bl	80024dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	58024400 	.word	0x58024400

08001be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	d844      	bhi.n	8001c7c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	2019      	movs	r0, #25
 8001bf8:	f000 fc56 	bl	80024a8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bfc:	2019      	movs	r0, #25
 8001bfe:	f000 fc6d 	bl	80024dc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c02:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_InitTick+0xb0>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c08:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <HAL_InitTick+0xb4>)
 8001c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c0e:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <HAL_InitTick+0xb4>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_InitTick+0xb4>)
 8001c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c26:	f107 020c 	add.w	r2, r7, #12
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fd55 	bl	80066e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c36:	f004 fd3d 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <HAL_InitTick+0xb8>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c50:	4a14      	ldr	r2, [pc, #80]	@ (8001ca4 <HAL_InitTick+0xc0>)
 8001c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c60:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c6e:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c70:	f006 fba4 	bl	80083bc <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d107      	bne.n	8001c8a <HAL_InitTick+0xa6>
 8001c7a:	e001      	b.n	8001c80 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e005      	b.n	8001c8c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <HAL_InitTick+0xbc>)
 8001c82:	f006 fbf3 	bl	800846c <HAL_TIM_Base_Start_IT>
 8001c86:	4603      	mov	r3, r0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3738      	adds	r7, #56	@ 0x38
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000028 	.word	0x24000028
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	240097e8 	.word	0x240097e8
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <DMA1_Stream3_IRQHandler+0x10>)
 8001ce6:	f001 ff31 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2400991c 	.word	0x2400991c

08001cf4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Stream4_IRQHandler+0x10>)
 8001cfa:	f001 ff27 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24009994 	.word	0x24009994

08001d08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <TIM1_UP_IRQHandler+0x10>)
 8001d0e:	f006 fc25 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	240097e8 	.word	0x240097e8

08001d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <USART3_IRQHandler+0x10>)
 8001d22:	f007 f9df 	bl	80090e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24009888 	.word	0x24009888

08001d30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <TIM5_IRQHandler+0x10>)
 8001d36:	f006 fc11 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2400983c 	.word	0x2400983c

08001d44 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d48:	f003 fc0e 	bl	8005568 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_kill>:

int _kill(int pid, int sig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6a:	f019 ff21 	bl	801bbb0 <__errno>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
  return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_exit>:

void _exit (int status)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffe7 	bl	8001d60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <_exit+0x12>

08001d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e00a      	b.n	8001dbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da8:	f3af 8000 	nop.w
 8001dac:	4601      	mov	r1, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbf0      	blt.n	8001da8 <_read+0x12>
  }

  return len;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e009      	b.n	8001df6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf1      	blt.n	8001de2 <_write+0x12>
  }
  return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_close>:

int _close(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e30:	605a      	str	r2, [r3, #4]
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_isatty>:

int _isatty(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f019 fe86 	bl	801bbb0 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	24080000 	.word	0x24080000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	24009838 	.word	0x24009838
 8001ed8:	24012fb8 	.word	0x24012fb8

08001edc <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <MX_TIM5_Init+0x98>)
 8001efe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f02:	22a9      	movs	r2, #169	@ 0xa9
 8001f04:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f20:	4813      	ldr	r0, [pc, #76]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f22:	f006 fa4b 	bl	80083bc <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f2c:	f7ff fcca 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f3e:	f006 fc15 	bl	800876c <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f48:	f7ff fcbc 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_TIM5_Init+0x94>)
 8001f5a:	f006 fe65 	bl	8008c28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f64:	f7ff fcae 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2400983c 	.word	0x2400983c
 8001f74:	40000c00 	.word	0x40000c00

08001f78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc0 <HAL_TIM_Base_MspInit+0x48>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d116      	bne.n	8001fb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f90:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2105      	movs	r1, #5
 8001fac:	2032      	movs	r0, #50	@ 0x32
 8001fae:	f000 fa7b 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fb2:	2032      	movs	r0, #50	@ 0x32
 8001fb4:	f000 fa92 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	58024400 	.word	0x58024400

08001fc8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <MX_USART3_UART_Init+0x94>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fd4:	4a22      	ldr	r2, [pc, #136]	@ (8002060 <MX_USART3_UART_Init+0x98>)
 8001fd6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001fec:	220c      	movs	r2, #12
 8001fee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002008:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800200e:	4812      	ldr	r0, [pc, #72]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8002010:	f006 feb6 	bl	8008d80 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800201a:	f7ff fc53 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	480d      	ldr	r0, [pc, #52]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8002022:	f008 fec3 	bl	800adac <HAL_UARTEx_SetTxFifoThreshold>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800202c:	f7ff fc4a 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8002034:	f008 fef8 	bl	800ae28 <HAL_UARTEx_SetRxFifoThreshold>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800203e:	f7ff fc41 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_USART3_UART_Init+0x90>)
 8002044:	f008 fe79 	bl	800ad3a <HAL_UARTEx_DisableFifoMode>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800204e:	f7ff fc39 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	24009888 	.word	0x24009888
 800205c:	40004800 	.word	0x40004800
 8002060:	001e8480 	.word	0x001e8480

08002064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0ba      	sub	sp, #232	@ 0xe8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	22c0      	movs	r2, #192	@ 0xc0
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f019 fcff 	bl	801ba88 <memset>
  if(uartHandle->Instance==USART3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5a      	ldr	r2, [pc, #360]	@ (80021f8 <HAL_UART_MspInit+0x194>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f040 80ac 	bne.w	80021ee <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002096:	f04f 0202 	mov.w	r2, #2
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fb59 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80020b8:	f7ff fc04 	bl	80018c4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020bc:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020c2:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020cc:	4b4b      	ldr	r3, [pc, #300]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	4b48      	ldr	r3, [pc, #288]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e0:	4a46      	ldr	r2, [pc, #280]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020e2:	f043 0308 	orr.w	r3, r3, #8
 80020e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ea:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_UART_MspInit+0x198>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002112:	2307      	movs	r3, #7
 8002114:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002118:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800211c:	4619      	mov	r1, r3
 800211e:	4838      	ldr	r0, [pc, #224]	@ (8002200 <HAL_UART_MspInit+0x19c>)
 8002120:	f003 f832 	bl	8005188 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002124:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002126:	4a38      	ldr	r2, [pc, #224]	@ (8002208 <HAL_UART_MspInit+0x1a4>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 800212c:	222d      	movs	r2, #45	@ 0x2d
 800212e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002130:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213c:	4b31      	ldr	r3, [pc, #196]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 800213e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002142:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002150:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002158:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800215c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215e:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002164:	4827      	ldr	r0, [pc, #156]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002166:	f000 f9c7 	bl	80024f8 <HAL_DMA_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002170:	f7ff fba8 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a23      	ldr	r2, [pc, #140]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 8002178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800217c:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_UART_MspInit+0x1a0>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_UART_MspInit+0x1ac>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 800218a:	222e      	movs	r2, #46	@ 0x2e
 800218c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 8002190:	2240      	movs	r2, #64	@ 0x40
 8002192:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 800219c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b13      	ldr	r3, [pc, #76]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021c2:	4812      	ldr	r0, [pc, #72]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021c4:	f000 f998 	bl	80024f8 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 80021ce:	f7ff fb79 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021d6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_UART_MspInit+0x1a8>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	2027      	movs	r0, #39	@ 0x27
 80021e4:	f000 f960 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021e8:	2027      	movs	r0, #39	@ 0x27
 80021ea:	f000 f977 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	37e8      	adds	r7, #232	@ 0xe8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40004800 	.word	0x40004800
 80021fc:	58024400 	.word	0x58024400
 8002200:	58020c00 	.word	0x58020c00
 8002204:	2400991c 	.word	0x2400991c
 8002208:	40020058 	.word	0x40020058
 800220c:	24009994 	.word	0x24009994
 8002210:	40020070 	.word	0x40020070

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800224c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002218:	f7fe fb1c 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221e:	490d      	ldr	r1, [pc, #52]	@ (8002254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002234:	4c0a      	ldr	r4, [pc, #40]	@ (8002260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002242:	f019 fcbb 	bl	801bbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff fa25 	bl	8001694 <main>
  bx  lr
 800224a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800224c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002250:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002254:	24000300 	.word	0x24000300
  ldr r2, =_sidata
 8002258:	0801d7dc 	.word	0x0801d7dc
  ldr r2, =_sbss
 800225c:	24000300 	.word	0x24000300
  ldr r4, =_ebss
 8002260:	24012fb8 	.word	0x24012fb8

08002264 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC3_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226e:	2003      	movs	r0, #3
 8002270:	f000 f90f 	bl	8002492 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002274:	f004 f85e 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_Init+0x68>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4913      	ldr	r1, [pc, #76]	@ (80022d4 <HAL_Init+0x6c>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
 8002290:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_Init+0x68>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <HAL_Init+0x6c>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <HAL_Init+0x70>)
 80022aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_Init+0x74>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b2:	200f      	movs	r0, #15
 80022b4:	f7ff fc96 	bl	8001be4 <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e002      	b.n	80022c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022c2:	f7ff fc69 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58024400 	.word	0x58024400
 80022d4:	0801c948 	.word	0x0801c948
 80022d8:	24000004 	.word	0x24000004
 80022dc:	24000000 	.word	0x24000000

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2400002c 	.word	0x2400002c
 8002304:	24009a0c 	.word	0x24009a0c

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	@ (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	24009a0c 	.word	0x24009a0c

08002320 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_GetREVID+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0c1b      	lsrs	r3, r3, #16
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	5c001000 	.word	0x5c001000

08002338 <__NVIC_SetPriorityGrouping>:
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	4313      	orrs	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	05fa0000 	.word	0x05fa0000

08002380 <__NVIC_GetPriorityGrouping>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff4c 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b6:	f7ff ff63 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80024ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7ff ffb3 	bl	800242c <NVIC_EncodePriority>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff82 	bl	80023d8 <__NVIC_SetPriority>
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff56 	bl	800239c <__NVIC_EnableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ff02 	bl	8002308 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e316      	b.n	8002b3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a66      	ldr	r2, [pc, #408]	@ (80026b0 <HAL_DMA_Init+0x1b8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d04a      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_DMA_Init+0x1bc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d045      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a63      	ldr	r2, [pc, #396]	@ (80026b8 <HAL_DMA_Init+0x1c0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d040      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a62      	ldr	r2, [pc, #392]	@ (80026bc <HAL_DMA_Init+0x1c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d03b      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <HAL_DMA_Init+0x1c8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d036      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5f      	ldr	r2, [pc, #380]	@ (80026c4 <HAL_DMA_Init+0x1cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d031      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_DMA_Init+0x1d0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5c      	ldr	r2, [pc, #368]	@ (80026cc <HAL_DMA_Init+0x1d4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5a      	ldr	r2, [pc, #360]	@ (80026d0 <HAL_DMA_Init+0x1d8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a59      	ldr	r2, [pc, #356]	@ (80026d4 <HAL_DMA_Init+0x1dc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_DMA_Init+0x1e0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_DMA_Init+0x1e4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a54      	ldr	r2, [pc, #336]	@ (80026e0 <HAL_DMA_Init+0x1e8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a53      	ldr	r2, [pc, #332]	@ (80026e4 <HAL_DMA_Init+0x1ec>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a51      	ldr	r2, [pc, #324]	@ (80026e8 <HAL_DMA_Init+0x1f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a50      	ldr	r2, [pc, #320]	@ (80026ec <HAL_DMA_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0xbc>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Init+0xbe>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 813b 	beq.w	8002832 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a37      	ldr	r2, [pc, #220]	@ (80026b0 <HAL_DMA_Init+0x1b8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d04a      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a36      	ldr	r2, [pc, #216]	@ (80026b4 <HAL_DMA_Init+0x1bc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d045      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a34      	ldr	r2, [pc, #208]	@ (80026b8 <HAL_DMA_Init+0x1c0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d040      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	@ (80026bc <HAL_DMA_Init+0x1c4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d03b      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a31      	ldr	r2, [pc, #196]	@ (80026c0 <HAL_DMA_Init+0x1c8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d036      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a30      	ldr	r2, [pc, #192]	@ (80026c4 <HAL_DMA_Init+0x1cc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d031      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	@ (80026c8 <HAL_DMA_Init+0x1d0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02c      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	@ (80026cc <HAL_DMA_Init+0x1d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d027      	beq.n	800266c <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2b      	ldr	r2, [pc, #172]	@ (80026d0 <HAL_DMA_Init+0x1d8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d022      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2a      	ldr	r2, [pc, #168]	@ (80026d4 <HAL_DMA_Init+0x1dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01d      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	@ (80026d8 <HAL_DMA_Init+0x1e0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d018      	beq.n	800266c <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a27      	ldr	r2, [pc, #156]	@ (80026dc <HAL_DMA_Init+0x1e4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d013      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	@ (80026e0 <HAL_DMA_Init+0x1e8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_DMA_Init+0x174>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a24      	ldr	r2, [pc, #144]	@ (80026e4 <HAL_DMA_Init+0x1ec>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <HAL_DMA_Init+0x1f0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	@ (80026ec <HAL_DMA_Init+0x1f4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <HAL_DMA_Init+0x186>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e007      	b.n	800268e <HAL_DMA_Init+0x196>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800268e:	e02f      	b.n	80026f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002690:	f7ff fe3a 	bl	8002308 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d928      	bls.n	80026f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e246      	b.n	8002b3e <HAL_DMA_Init+0x646>
 80026b0:	40020010 	.word	0x40020010
 80026b4:	40020028 	.word	0x40020028
 80026b8:	40020040 	.word	0x40020040
 80026bc:	40020058 	.word	0x40020058
 80026c0:	40020070 	.word	0x40020070
 80026c4:	40020088 	.word	0x40020088
 80026c8:	400200a0 	.word	0x400200a0
 80026cc:	400200b8 	.word	0x400200b8
 80026d0:	40020410 	.word	0x40020410
 80026d4:	40020428 	.word	0x40020428
 80026d8:	40020440 	.word	0x40020440
 80026dc:	40020458 	.word	0x40020458
 80026e0:	40020470 	.word	0x40020470
 80026e4:	40020488 	.word	0x40020488
 80026e8:	400204a0 	.word	0x400204a0
 80026ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1c8      	bne.n	8002690 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4b83      	ldr	r3, [pc, #524]	@ (8002918 <HAL_DMA_Init+0x420>)
 800270a:	4013      	ands	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002716:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002754:	4b71      	ldr	r3, [pc, #452]	@ (800291c <HAL_DMA_Init+0x424>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b71      	ldr	r3, [pc, #452]	@ (8002920 <HAL_DMA_Init+0x428>)
 800275a:	4013      	ands	r3, r2
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002760:	d328      	bcc.n	80027b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b28      	cmp	r3, #40	@ 0x28
 8002768:	d903      	bls.n	8002772 <HAL_DMA_Init+0x27a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002770:	d917      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b3e      	cmp	r3, #62	@ 0x3e
 8002778:	d903      	bls.n	8002782 <HAL_DMA_Init+0x28a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b42      	cmp	r3, #66	@ 0x42
 8002780:	d90f      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b46      	cmp	r3, #70	@ 0x46
 8002788:	d903      	bls.n	8002792 <HAL_DMA_Init+0x29a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b48      	cmp	r3, #72	@ 0x48
 8002790:	d907      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b4e      	cmp	r3, #78	@ 0x4e
 8002798:	d905      	bls.n	80027a6 <HAL_DMA_Init+0x2ae>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b52      	cmp	r3, #82	@ 0x52
 80027a0:	d801      	bhi.n	80027a6 <HAL_DMA_Init+0x2ae>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_Init+0x2b0>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f002 fb3f 	bl	8004e74 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	@ 0x40
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e197      	b.n	8002b3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f002 fa7a 	bl	8004d10 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	223f      	movs	r2, #63	@ 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e0cd      	b.n	80029ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3b      	ldr	r2, [pc, #236]	@ (8002924 <HAL_DMA_Init+0x42c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a39      	ldr	r2, [pc, #228]	@ (8002928 <HAL_DMA_Init+0x430>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a38      	ldr	r2, [pc, #224]	@ (800292c <HAL_DMA_Init+0x434>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <HAL_DMA_Init+0x438>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a35      	ldr	r2, [pc, #212]	@ (8002934 <HAL_DMA_Init+0x43c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <HAL_DMA_Init+0x440>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a32      	ldr	r2, [pc, #200]	@ (800293c <HAL_DMA_Init+0x444>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a30      	ldr	r2, [pc, #192]	@ (8002940 <HAL_DMA_Init+0x448>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Init+0x38e>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_DMA_Init+0x390>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a24      	ldr	r2, [pc, #144]	@ (8002924 <HAL_DMA_Init+0x42c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d021      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	@ (8002928 <HAL_DMA_Init+0x430>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01c      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	@ (800292c <HAL_DMA_Init+0x434>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d017      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_DMA_Init+0x438>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002934 <HAL_DMA_Init+0x43c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00d      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_DMA_Init+0x440>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d008      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_DMA_Init+0x444>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_DMA_Init+0x448>)
 80028da:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <HAL_DMA_Init+0x44c>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d021      	beq.n	8002948 <HAL_DMA_Init+0x450>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b80      	cmp	r3, #128	@ 0x80
 800290a:	d102      	bne.n	8002912 <HAL_DMA_Init+0x41a>
 800290c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002910:	e01b      	b.n	800294a <HAL_DMA_Init+0x452>
 8002912:	2300      	movs	r3, #0
 8002914:	e019      	b.n	800294a <HAL_DMA_Init+0x452>
 8002916:	bf00      	nop
 8002918:	fe10803f 	.word	0xfe10803f
 800291c:	5c001000 	.word	0x5c001000
 8002920:	ffff0000 	.word	0xffff0000
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025430 	.word	0x58025430
 8002930:	58025444 	.word	0x58025444
 8002934:	58025458 	.word	0x58025458
 8002938:	5802546c 	.word	0x5802546c
 800293c:	58025480 	.word	0x58025480
 8002940:	58025494 	.word	0x58025494
 8002944:	fffe000f 	.word	0xfffe000f
 8002948:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002978:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <HAL_DMA_Init+0x650>)
 8002990:	4413      	add	r3, r2
 8002992:	4a6e      	ldr	r2, [pc, #440]	@ (8002b4c <HAL_DMA_Init+0x654>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f002 f9b5 	bl	8004d10 <DMA_CalcBaseAndBitshift>
 80029a6:	4603      	mov	r3, r0
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	e008      	b.n	80029ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0b7      	b.n	8002b3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b50 <HAL_DMA_Init+0x658>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d072      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b54 <HAL_DMA_Init+0x65c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d06d      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b58 <HAL_DMA_Init+0x660>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d068      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b5c <HAL_DMA_Init+0x664>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d063      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a59      	ldr	r2, [pc, #356]	@ (8002b60 <HAL_DMA_Init+0x668>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d05e      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a57      	ldr	r2, [pc, #348]	@ (8002b64 <HAL_DMA_Init+0x66c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d059      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a56      	ldr	r2, [pc, #344]	@ (8002b68 <HAL_DMA_Init+0x670>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d054      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a54      	ldr	r2, [pc, #336]	@ (8002b6c <HAL_DMA_Init+0x674>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04f      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <HAL_DMA_Init+0x678>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	@ (8002b74 <HAL_DMA_Init+0x67c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a50      	ldr	r2, [pc, #320]	@ (8002b78 <HAL_DMA_Init+0x680>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	@ (8002b7c <HAL_DMA_Init+0x684>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b80 <HAL_DMA_Init+0x688>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	@ (8002b84 <HAL_DMA_Init+0x68c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b88 <HAL_DMA_Init+0x690>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a48      	ldr	r2, [pc, #288]	@ (8002b8c <HAL_DMA_Init+0x694>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a47      	ldr	r2, [pc, #284]	@ (8002b90 <HAL_DMA_Init+0x698>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	@ (8002b94 <HAL_DMA_Init+0x69c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a44      	ldr	r2, [pc, #272]	@ (8002b98 <HAL_DMA_Init+0x6a0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	@ (8002b9c <HAL_DMA_Init+0x6a4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ba0 <HAL_DMA_Init+0x6a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba4 <HAL_DMA_Init+0x6ac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3e      	ldr	r2, [pc, #248]	@ (8002ba8 <HAL_DMA_Init+0x6b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bac <HAL_DMA_Init+0x6b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x5ca>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_Init+0x5cc>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f002 fa4f 	bl	8004f6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b80      	cmp	r3, #128	@ 0x80
 8002ad4:	d102      	bne.n	8002adc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002af0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_DMA_Init+0x624>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d80c      	bhi.n	8002b1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f002 facc 	bl	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e008      	b.n	8002b2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	a7fdabf8 	.word	0xa7fdabf8
 8002b4c:	cccccccd 	.word	0xcccccccd
 8002b50:	40020010 	.word	0x40020010
 8002b54:	40020028 	.word	0x40020028
 8002b58:	40020040 	.word	0x40020040
 8002b5c:	40020058 	.word	0x40020058
 8002b60:	40020070 	.word	0x40020070
 8002b64:	40020088 	.word	0x40020088
 8002b68:	400200a0 	.word	0x400200a0
 8002b6c:	400200b8 	.word	0x400200b8
 8002b70:	40020410 	.word	0x40020410
 8002b74:	40020428 	.word	0x40020428
 8002b78:	40020440 	.word	0x40020440
 8002b7c:	40020458 	.word	0x40020458
 8002b80:	40020470 	.word	0x40020470
 8002b84:	40020488 	.word	0x40020488
 8002b88:	400204a0 	.word	0x400204a0
 8002b8c:	400204b8 	.word	0x400204b8
 8002b90:	58025408 	.word	0x58025408
 8002b94:	5802541c 	.word	0x5802541c
 8002b98:	58025430 	.word	0x58025430
 8002b9c:	58025444 	.word	0x58025444
 8002ba0:	58025458 	.word	0x58025458
 8002ba4:	5802546c 	.word	0x5802546c
 8002ba8:	58025480 	.word	0x58025480
 8002bac:	58025494 	.word	0x58025494

08002bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e226      	b.n	800301a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Start_IT+0x2a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e21f      	b.n	800301a <HAL_DMA_Start_IT+0x46a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 820a 	bne.w	8003004 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a68      	ldr	r2, [pc, #416]	@ (8002da4 <HAL_DMA_Start_IT+0x1f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04a      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a66      	ldr	r2, [pc, #408]	@ (8002da8 <HAL_DMA_Start_IT+0x1f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d045      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a65      	ldr	r2, [pc, #404]	@ (8002dac <HAL_DMA_Start_IT+0x1fc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a63      	ldr	r2, [pc, #396]	@ (8002db0 <HAL_DMA_Start_IT+0x200>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03b      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a62      	ldr	r2, [pc, #392]	@ (8002db4 <HAL_DMA_Start_IT+0x204>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d036      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a60      	ldr	r2, [pc, #384]	@ (8002db8 <HAL_DMA_Start_IT+0x208>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dbc <HAL_DMA_Start_IT+0x20c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc0 <HAL_DMA_Start_IT+0x210>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d027      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc4 <HAL_DMA_Start_IT+0x214>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc8 <HAL_DMA_Start_IT+0x218>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a59      	ldr	r2, [pc, #356]	@ (8002dcc <HAL_DMA_Start_IT+0x21c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a57      	ldr	r2, [pc, #348]	@ (8002dd0 <HAL_DMA_Start_IT+0x220>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a56      	ldr	r2, [pc, #344]	@ (8002dd4 <HAL_DMA_Start_IT+0x224>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a54      	ldr	r2, [pc, #336]	@ (8002dd8 <HAL_DMA_Start_IT+0x228>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a53      	ldr	r2, [pc, #332]	@ (8002ddc <HAL_DMA_Start_IT+0x22c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a51      	ldr	r2, [pc, #324]	@ (8002de0 <HAL_DMA_Start_IT+0x230>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <HAL_DMA_Start_IT+0x100>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <HAL_DMA_Start_IT+0x110>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f001 fe76 	bl	80049b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <HAL_DMA_Start_IT+0x1f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a33      	ldr	r2, [pc, #204]	@ (8002da8 <HAL_DMA_Start_IT+0x1f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a31      	ldr	r2, [pc, #196]	@ (8002dac <HAL_DMA_Start_IT+0x1fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a30      	ldr	r2, [pc, #192]	@ (8002db0 <HAL_DMA_Start_IT+0x200>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8002db4 <HAL_DMA_Start_IT+0x204>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2d      	ldr	r2, [pc, #180]	@ (8002db8 <HAL_DMA_Start_IT+0x208>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dbc <HAL_DMA_Start_IT+0x20c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <HAL_DMA_Start_IT+0x210>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a28      	ldr	r2, [pc, #160]	@ (8002dc4 <HAL_DMA_Start_IT+0x214>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_DMA_Start_IT+0x218>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a25      	ldr	r2, [pc, #148]	@ (8002dcc <HAL_DMA_Start_IT+0x21c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	@ (8002dd0 <HAL_DMA_Start_IT+0x220>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a22      	ldr	r2, [pc, #136]	@ (8002dd4 <HAL_DMA_Start_IT+0x224>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a21      	ldr	r2, [pc, #132]	@ (8002dd8 <HAL_DMA_Start_IT+0x228>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ddc <HAL_DMA_Start_IT+0x22c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <HAL_DMA_Start_IT+0x230>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Start_IT+0x1c0>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_Start_IT+0x1c2>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 021e 	bic.w	r2, r3, #30
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0216 	orr.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03e      	beq.n	8002e10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e035      	b.n	8002e10 <HAL_DMA_Start_IT+0x260>
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020e 	bic.w	r2, r3, #14
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 020a 	orr.w	r2, r2, #10
 8002df6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0204 	orr.w	r2, r2, #4
 8002e0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	@ (8003024 <HAL_DMA_Start_IT+0x474>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d072      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a82      	ldr	r2, [pc, #520]	@ (8003028 <HAL_DMA_Start_IT+0x478>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d06d      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a80      	ldr	r2, [pc, #512]	@ (800302c <HAL_DMA_Start_IT+0x47c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d068      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7f      	ldr	r2, [pc, #508]	@ (8003030 <HAL_DMA_Start_IT+0x480>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d063      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7d      	ldr	r2, [pc, #500]	@ (8003034 <HAL_DMA_Start_IT+0x484>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d05e      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <HAL_DMA_Start_IT+0x488>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d059      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7a      	ldr	r2, [pc, #488]	@ (800303c <HAL_DMA_Start_IT+0x48c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d054      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a79      	ldr	r2, [pc, #484]	@ (8003040 <HAL_DMA_Start_IT+0x490>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04f      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a77      	ldr	r2, [pc, #476]	@ (8003044 <HAL_DMA_Start_IT+0x494>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a76      	ldr	r2, [pc, #472]	@ (8003048 <HAL_DMA_Start_IT+0x498>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d045      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a74      	ldr	r2, [pc, #464]	@ (800304c <HAL_DMA_Start_IT+0x49c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d040      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a73      	ldr	r2, [pc, #460]	@ (8003050 <HAL_DMA_Start_IT+0x4a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d03b      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a71      	ldr	r2, [pc, #452]	@ (8003054 <HAL_DMA_Start_IT+0x4a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d036      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a70      	ldr	r2, [pc, #448]	@ (8003058 <HAL_DMA_Start_IT+0x4a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d031      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_DMA_Start_IT+0x4ac>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8003060 <HAL_DMA_Start_IT+0x4b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d027      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003064 <HAL_DMA_Start_IT+0x4b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8003068 <HAL_DMA_Start_IT+0x4b8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a68      	ldr	r2, [pc, #416]	@ (800306c <HAL_DMA_Start_IT+0x4bc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a67      	ldr	r2, [pc, #412]	@ (8003070 <HAL_DMA_Start_IT+0x4c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_DMA_Start_IT+0x4c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	@ (8003078 <HAL_DMA_Start_IT+0x4c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a62      	ldr	r2, [pc, #392]	@ (800307c <HAL_DMA_Start_IT+0x4cc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a61      	ldr	r2, [pc, #388]	@ (8003080 <HAL_DMA_Start_IT+0x4d0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Start_IT+0x354>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_DMA_Start_IT+0x356>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01a      	beq.n	8002f40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a37      	ldr	r2, [pc, #220]	@ (8003024 <HAL_DMA_Start_IT+0x474>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d04a      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a36      	ldr	r2, [pc, #216]	@ (8003028 <HAL_DMA_Start_IT+0x478>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d045      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a34      	ldr	r2, [pc, #208]	@ (800302c <HAL_DMA_Start_IT+0x47c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d040      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a33      	ldr	r2, [pc, #204]	@ (8003030 <HAL_DMA_Start_IT+0x480>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d03b      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a31      	ldr	r2, [pc, #196]	@ (8003034 <HAL_DMA_Start_IT+0x484>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d036      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a30      	ldr	r2, [pc, #192]	@ (8003038 <HAL_DMA_Start_IT+0x488>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d031      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	@ (800303c <HAL_DMA_Start_IT+0x48c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02c      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003040 <HAL_DMA_Start_IT+0x490>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d027      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2b      	ldr	r2, [pc, #172]	@ (8003044 <HAL_DMA_Start_IT+0x494>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003048 <HAL_DMA_Start_IT+0x498>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a28      	ldr	r2, [pc, #160]	@ (800304c <HAL_DMA_Start_IT+0x49c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <HAL_DMA_Start_IT+0x4a0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	@ (8003054 <HAL_DMA_Start_IT+0x4a4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a24      	ldr	r2, [pc, #144]	@ (8003058 <HAL_DMA_Start_IT+0x4a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <HAL_DMA_Start_IT+0x4ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	@ (8003060 <HAL_DMA_Start_IT+0x4b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <HAL_DMA_Start_IT+0x442>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e012      	b.n	8003018 <HAL_DMA_Start_IT+0x468>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e009      	b.n	8003018 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
 8003064:	58025408 	.word	0x58025408
 8003068:	5802541c 	.word	0x5802541c
 800306c:	58025430 	.word	0x58025430
 8003070:	58025444 	.word	0x58025444
 8003074:	58025458 	.word	0x58025458
 8003078:	5802546c 	.word	0x5802546c
 800307c:	58025480 	.word	0x58025480
 8003080:	58025494 	.word	0x58025494

08003084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff f93c 	bl	8002308 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2dc      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d008      	beq.n	80030ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2280      	movs	r2, #128	@ 0x80
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e2cd      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a76      	ldr	r2, [pc, #472]	@ (8003298 <HAL_DMA_Abort+0x214>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a74      	ldr	r2, [pc, #464]	@ (800329c <HAL_DMA_Abort+0x218>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a73      	ldr	r2, [pc, #460]	@ (80032a0 <HAL_DMA_Abort+0x21c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a71      	ldr	r2, [pc, #452]	@ (80032a4 <HAL_DMA_Abort+0x220>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	@ (80032a8 <HAL_DMA_Abort+0x224>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_DMA_Abort+0x228>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6d      	ldr	r2, [pc, #436]	@ (80032b0 <HAL_DMA_Abort+0x22c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6b      	ldr	r2, [pc, #428]	@ (80032b4 <HAL_DMA_Abort+0x230>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6a      	ldr	r2, [pc, #424]	@ (80032b8 <HAL_DMA_Abort+0x234>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a68      	ldr	r2, [pc, #416]	@ (80032bc <HAL_DMA_Abort+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a67      	ldr	r2, [pc, #412]	@ (80032c0 <HAL_DMA_Abort+0x23c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	@ (80032c4 <HAL_DMA_Abort+0x240>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a64      	ldr	r2, [pc, #400]	@ (80032c8 <HAL_DMA_Abort+0x244>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a62      	ldr	r2, [pc, #392]	@ (80032cc <HAL_DMA_Abort+0x248>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a61      	ldr	r2, [pc, #388]	@ (80032d0 <HAL_DMA_Abort+0x24c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5f      	ldr	r2, [pc, #380]	@ (80032d4 <HAL_DMA_Abort+0x250>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_DMA_Abort+0xda>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort+0xdc>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 021e 	bic.w	r2, r2, #30
 8003172:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003182:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003298 <HAL_DMA_Abort+0x214>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d072      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3a      	ldr	r2, [pc, #232]	@ (800329c <HAL_DMA_Abort+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d06d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a39      	ldr	r2, [pc, #228]	@ (80032a0 <HAL_DMA_Abort+0x21c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d068      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a37      	ldr	r2, [pc, #220]	@ (80032a4 <HAL_DMA_Abort+0x220>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d063      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a36      	ldr	r2, [pc, #216]	@ (80032a8 <HAL_DMA_Abort+0x224>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d05e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a34      	ldr	r2, [pc, #208]	@ (80032ac <HAL_DMA_Abort+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d059      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a33      	ldr	r2, [pc, #204]	@ (80032b0 <HAL_DMA_Abort+0x22c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d054      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <HAL_DMA_Abort+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04f      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a30      	ldr	r2, [pc, #192]	@ (80032b8 <HAL_DMA_Abort+0x234>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2e      	ldr	r2, [pc, #184]	@ (80032bc <HAL_DMA_Abort+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2d      	ldr	r2, [pc, #180]	@ (80032c0 <HAL_DMA_Abort+0x23c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <HAL_DMA_Abort+0x240>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <HAL_DMA_Abort+0x244>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a28      	ldr	r2, [pc, #160]	@ (80032cc <HAL_DMA_Abort+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <HAL_DMA_Abort+0x24c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a25      	ldr	r2, [pc, #148]	@ (80032d4 <HAL_DMA_Abort+0x250>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a24      	ldr	r2, [pc, #144]	@ (80032d8 <HAL_DMA_Abort+0x254>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <HAL_DMA_Abort+0x258>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a21      	ldr	r2, [pc, #132]	@ (80032e0 <HAL_DMA_Abort+0x25c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	@ (80032e4 <HAL_DMA_Abort+0x260>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_DMA_Abort+0x264>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <HAL_DMA_Abort+0x268>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <HAL_DMA_Abort+0x26c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	@ (80032f4 <HAL_DMA_Abort+0x270>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d132      	bne.n	80032f8 <HAL_DMA_Abort+0x274>
 8003292:	2301      	movs	r3, #1
 8003294:	e031      	b.n	80032fa <HAL_DMA_Abort+0x276>
 8003296:	bf00      	nop
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	58025408 	.word	0x58025408
 80032dc:	5802541c 	.word	0x5802541c
 80032e0:	58025430 	.word	0x58025430
 80032e4:	58025444 	.word	0x58025444
 80032e8:	58025458 	.word	0x58025458
 80032ec:	5802546c 	.word	0x5802546c
 80032f0:	58025480 	.word	0x58025480
 80032f4:	58025494 	.word	0x58025494
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6d      	ldr	r2, [pc, #436]	@ (80034c8 <HAL_DMA_Abort+0x444>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	@ (80034cc <HAL_DMA_Abort+0x448>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6a      	ldr	r2, [pc, #424]	@ (80034d0 <HAL_DMA_Abort+0x44c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	@ (80034d4 <HAL_DMA_Abort+0x450>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a67      	ldr	r2, [pc, #412]	@ (80034d8 <HAL_DMA_Abort+0x454>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	@ (80034dc <HAL_DMA_Abort+0x458>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a64      	ldr	r2, [pc, #400]	@ (80034e0 <HAL_DMA_Abort+0x45c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a62      	ldr	r2, [pc, #392]	@ (80034e4 <HAL_DMA_Abort+0x460>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a61      	ldr	r2, [pc, #388]	@ (80034e8 <HAL_DMA_Abort+0x464>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5f      	ldr	r2, [pc, #380]	@ (80034ec <HAL_DMA_Abort+0x468>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5e      	ldr	r2, [pc, #376]	@ (80034f0 <HAL_DMA_Abort+0x46c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_DMA_Abort+0x470>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5b      	ldr	r2, [pc, #364]	@ (80034f8 <HAL_DMA_Abort+0x474>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a59      	ldr	r2, [pc, #356]	@ (80034fc <HAL_DMA_Abort+0x478>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <HAL_DMA_Abort+0x47c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a56      	ldr	r2, [pc, #344]	@ (8003504 <HAL_DMA_Abort+0x480>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <HAL_DMA_Abort+0x33c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_DMA_Abort+0x34c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d0:	e013      	b.n	80033fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d2:	f7fe ff99 	bl	8002308 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d90c      	bls.n	80033fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12d      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <HAL_DMA_Abort+0x444>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d04a      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_DMA_Abort+0x448>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d045      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_DMA_Abort+0x44c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <HAL_DMA_Abort+0x450>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d03b      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_DMA_Abort+0x454>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d036      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <HAL_DMA_Abort+0x458>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d031      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_DMA_Abort+0x45c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d02c      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <HAL_DMA_Abort+0x460>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d027      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_DMA_Abort+0x464>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_DMA_Abort+0x468>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01d      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <HAL_DMA_Abort+0x46c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_DMA_Abort+0x470>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_DMA_Abort+0x474>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_DMA_Abort+0x478>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <HAL_DMA_Abort+0x47c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_DMA_Abort+0x480>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_Abort+0x426>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_DMA_Abort+0x428>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02b      	beq.n	8003508 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	223f      	movs	r2, #63	@ 0x3f
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	e02a      	b.n	800351e <HAL_DMA_Abort+0x49a>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4f      	ldr	r2, [pc, #316]	@ (8003660 <HAL_DMA_Abort+0x5dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d072      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a4d      	ldr	r2, [pc, #308]	@ (8003664 <HAL_DMA_Abort+0x5e0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d06d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4c      	ldr	r2, [pc, #304]	@ (8003668 <HAL_DMA_Abort+0x5e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d068      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_DMA_Abort+0x5e8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d063      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a49      	ldr	r2, [pc, #292]	@ (8003670 <HAL_DMA_Abort+0x5ec>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d05e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a47      	ldr	r2, [pc, #284]	@ (8003674 <HAL_DMA_Abort+0x5f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d059      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a46      	ldr	r2, [pc, #280]	@ (8003678 <HAL_DMA_Abort+0x5f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d054      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a44      	ldr	r2, [pc, #272]	@ (800367c <HAL_DMA_Abort+0x5f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04f      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a43      	ldr	r2, [pc, #268]	@ (8003680 <HAL_DMA_Abort+0x5fc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a41      	ldr	r2, [pc, #260]	@ (8003684 <HAL_DMA_Abort+0x600>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a40      	ldr	r2, [pc, #256]	@ (8003688 <HAL_DMA_Abort+0x604>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3e      	ldr	r2, [pc, #248]	@ (800368c <HAL_DMA_Abort+0x608>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_DMA_Abort+0x60c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003694 <HAL_DMA_Abort+0x610>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003698 <HAL_DMA_Abort+0x614>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a38      	ldr	r2, [pc, #224]	@ (800369c <HAL_DMA_Abort+0x618>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a37      	ldr	r2, [pc, #220]	@ (80036a0 <HAL_DMA_Abort+0x61c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a35      	ldr	r2, [pc, #212]	@ (80036a4 <HAL_DMA_Abort+0x620>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a34      	ldr	r2, [pc, #208]	@ (80036a8 <HAL_DMA_Abort+0x624>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <HAL_DMA_Abort+0x628>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <HAL_DMA_Abort+0x62c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2f      	ldr	r2, [pc, #188]	@ (80036b4 <HAL_DMA_Abort+0x630>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	@ (80036b8 <HAL_DMA_Abort+0x634>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <HAL_DMA_Abort+0x638>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_DMA_Abort+0x58e>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_DMA_Abort+0x590>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003620:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003638:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003642:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020010 	.word	0x40020010
 8003664:	40020028 	.word	0x40020028
 8003668:	40020040 	.word	0x40020040
 800366c:	40020058 	.word	0x40020058
 8003670:	40020070 	.word	0x40020070
 8003674:	40020088 	.word	0x40020088
 8003678:	400200a0 	.word	0x400200a0
 800367c:	400200b8 	.word	0x400200b8
 8003680:	40020410 	.word	0x40020410
 8003684:	40020428 	.word	0x40020428
 8003688:	40020440 	.word	0x40020440
 800368c:	40020458 	.word	0x40020458
 8003690:	40020470 	.word	0x40020470
 8003694:	40020488 	.word	0x40020488
 8003698:	400204a0 	.word	0x400204a0
 800369c:	400204b8 	.word	0x400204b8
 80036a0:	58025408 	.word	0x58025408
 80036a4:	5802541c 	.word	0x5802541c
 80036a8:	58025430 	.word	0x58025430
 80036ac:	58025444 	.word	0x58025444
 80036b0:	58025458 	.word	0x58025458
 80036b4:	5802546c 	.word	0x5802546c
 80036b8:	58025480 	.word	0x58025480
 80036bc:	58025494 	.word	0x58025494

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e237      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e22c      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a59      	ldr	r2, [pc, #356]	@ (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a58      	ldr	r2, [pc, #352]	@ (800386c <HAL_DMA_Abort_IT+0x1ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a56      	ldr	r2, [pc, #344]	@ (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a55      	ldr	r2, [pc, #340]	@ (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a53      	ldr	r2, [pc, #332]	@ (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a52      	ldr	r2, [pc, #328]	@ (800387c <HAL_DMA_Abort_IT+0x1bc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a50      	ldr	r2, [pc, #320]	@ (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4f      	ldr	r2, [pc, #316]	@ (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_DMA_Abort_IT+0x1cc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4a      	ldr	r2, [pc, #296]	@ (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a49      	ldr	r2, [pc, #292]	@ (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a46      	ldr	r2, [pc, #280]	@ (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Abort_IT+0xcc>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Abort_IT+0xce>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8086 	beq.w	80038a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <HAL_DMA_Abort_IT+0x1ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a29      	ldr	r2, [pc, #164]	@ (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a26      	ldr	r2, [pc, #152]	@ (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	@ (800387c <HAL_DMA_Abort_IT+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a23      	ldr	r2, [pc, #140]	@ (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <HAL_DMA_Abort_IT+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_DMA_Abort_IT+0x18e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e178      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e16f      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6c      	ldr	r2, [pc, #432]	@ (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6b      	ldr	r2, [pc, #428]	@ (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a69      	ldr	r2, [pc, #420]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a65      	ldr	r2, [pc, #404]	@ (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a63      	ldr	r2, [pc, #396]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a62      	ldr	r2, [pc, #392]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a60      	ldr	r2, [pc, #384]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a59      	ldr	r2, [pc, #356]	@ (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a57      	ldr	r2, [pc, #348]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_Abort_IT+0x2a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <HAL_DMA_Abort_IT+0x2b2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3c      	ldr	r2, [pc, #240]	@ (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d072      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3a      	ldr	r2, [pc, #232]	@ (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d06d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a39      	ldr	r2, [pc, #228]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d068      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a37      	ldr	r2, [pc, #220]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d063      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a36      	ldr	r2, [pc, #216]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d05e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d059      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a33      	ldr	r2, [pc, #204]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d054      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04f      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a30      	ldr	r2, [pc, #192]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3e8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a22      	ldr	r2, [pc, #136]	@ (8003aac <HAL_DMA_Abort_IT+0x3ec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a21      	ldr	r2, [pc, #132]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3f0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3f8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <HAL_DMA_Abort_IT+0x3fc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac0 <HAL_DMA_Abort_IT+0x400>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <HAL_DMA_Abort_IT+0x404>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d132      	bne.n	8003ac8 <HAL_DMA_Abort_IT+0x408>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e031      	b.n	8003aca <HAL_DMA_Abort_IT+0x40a>
 8003a66:	bf00      	nop
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020040 	.word	0x40020040
 8003a74:	40020058 	.word	0x40020058
 8003a78:	40020070 	.word	0x40020070
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	400200a0 	.word	0x400200a0
 8003a84:	400200b8 	.word	0x400200b8
 8003a88:	40020410 	.word	0x40020410
 8003a8c:	40020428 	.word	0x40020428
 8003a90:	40020440 	.word	0x40020440
 8003a94:	40020458 	.word	0x40020458
 8003a98:	40020470 	.word	0x40020470
 8003a9c:	40020488 	.word	0x40020488
 8003aa0:	400204a0 	.word	0x400204a0
 8003aa4:	400204b8 	.word	0x400204b8
 8003aa8:	58025408 	.word	0x58025408
 8003aac:	5802541c 	.word	0x5802541c
 8003ab0:	58025430 	.word	0x58025430
 8003ab4:	58025444 	.word	0x58025444
 8003ab8:	58025458 	.word	0x58025458
 8003abc:	5802546c 	.word	0x5802546c
 8003ac0:	58025480 	.word	0x58025480
 8003ac4:	58025494 	.word	0x58025494
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003adc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003afc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b58:	4b67      	ldr	r3, [pc, #412]	@ (8003cf8 <HAL_DMA_IRQHandler+0x1ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a67      	ldr	r2, [pc, #412]	@ (8003cfc <HAL_DMA_IRQHandler+0x1b0>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5f      	ldr	r2, [pc, #380]	@ (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5c      	ldr	r2, [pc, #368]	@ (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a59      	ldr	r2, [pc, #356]	@ (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a57      	ldr	r2, [pc, #348]	@ (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	@ (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a54      	ldr	r2, [pc, #336]	@ (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a53      	ldr	r2, [pc, #332]	@ (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	@ (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a50      	ldr	r2, [pc, #320]	@ (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	@ (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a48      	ldr	r2, [pc, #288]	@ (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_IRQHandler+0xd6>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_IRQHandler+0xd8>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 842b 	beq.w	8004480 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2208      	movs	r2, #8
 8003c34:	409a      	lsls	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a2 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2e      	ldr	r2, [pc, #184]	@ (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d045      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2b      	ldr	r2, [pc, #172]	@ (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d040      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2a      	ldr	r2, [pc, #168]	@ (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d03b      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a28      	ldr	r2, [pc, #160]	@ (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d036      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a27      	ldr	r2, [pc, #156]	@ (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d031      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a24      	ldr	r2, [pc, #144]	@ (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d027      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a22      	ldr	r2, [pc, #136]	@ (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	@ (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	@ (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	@ (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d12f      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x1f4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e02e      	b.n	8003d54 <HAL_DMA_IRQHandler+0x208>
 8003cf6:	bf00      	nop
 8003cf8:	24000000 	.word	0x24000000
 8003cfc:	1b4e81b5 	.word	0x1b4e81b5
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2208      	movs	r2, #8
 8003d72:	409a      	lsls	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d06e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a69      	ldr	r2, [pc, #420]	@ (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a67      	ldr	r2, [pc, #412]	@ (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a66      	ldr	r2, [pc, #408]	@ (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a64      	ldr	r2, [pc, #400]	@ (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a63      	ldr	r2, [pc, #396]	@ (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a61      	ldr	r2, [pc, #388]	@ (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a60      	ldr	r2, [pc, #384]	@ (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5d      	ldr	r2, [pc, #372]	@ (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	@ (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	@ (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a57      	ldr	r2, [pc, #348]	@ (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a55      	ldr	r2, [pc, #340]	@ (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a54      	ldr	r2, [pc, #336]	@ (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a52      	ldr	r2, [pc, #328]	@ (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10a      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x304>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e003      	b.n	8003e58 <HAL_DMA_IRQHandler+0x30c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808f 	beq.w	8003fac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	@ (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	@ (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	@ (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a23      	ldr	r2, [pc, #140]	@ (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	@ (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	@ (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	@ (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x438>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e023      	b.n	8003f8c <HAL_DMA_IRQHandler+0x440>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2204      	movs	r2, #4
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a85      	ldr	r2, [pc, #532]	@ (80041dc <HAL_DMA_IRQHandler+0x690>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a83      	ldr	r2, [pc, #524]	@ (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a82      	ldr	r2, [pc, #520]	@ (80041e4 <HAL_DMA_IRQHandler+0x698>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a80      	ldr	r2, [pc, #512]	@ (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	@ (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7d      	ldr	r2, [pc, #500]	@ (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7c      	ldr	r2, [pc, #496]	@ (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7a      	ldr	r2, [pc, #488]	@ (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a79      	ldr	r2, [pc, #484]	@ (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	@ (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a76      	ldr	r2, [pc, #472]	@ (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a74      	ldr	r2, [pc, #464]	@ (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	@ (800420c <HAL_DMA_IRQHandler+0x6c0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a71      	ldr	r2, [pc, #452]	@ (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	@ (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10a      	bne.n	8004078 <HAL_DMA_IRQHandler+0x52c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e009      	b.n	800408c <HAL_DMA_IRQHandler+0x540>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d03e      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2210      	movs	r2, #16
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d024      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e01f      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	e016      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2220      	movs	r2, #32
 8004118:	409a      	lsls	r2, r3
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8110 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2c      	ldr	r2, [pc, #176]	@ (80041dc <HAL_DMA_IRQHandler+0x690>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2b      	ldr	r2, [pc, #172]	@ (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d045      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a29      	ldr	r2, [pc, #164]	@ (80041e4 <HAL_DMA_IRQHandler+0x698>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d040      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d03b      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d036      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a25      	ldr	r2, [pc, #148]	@ (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	@ (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a22      	ldr	r2, [pc, #136]	@ (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d027      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a20      	ldr	r2, [pc, #128]	@ (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01d      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	@ (800420c <HAL_DMA_IRQHandler+0x6c0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a17      	ldr	r2, [pc, #92]	@ (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a16      	ldr	r2, [pc, #88]	@ (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d12b      	bne.n	800421c <HAL_DMA_IRQHandler+0x6d0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e02a      	b.n	8004230 <HAL_DMA_IRQHandler+0x6e4>
 80041da:	bf00      	nop
 80041dc:	40020010 	.word	0x40020010
 80041e0:	40020028 	.word	0x40020028
 80041e4:	40020040 	.word	0x40020040
 80041e8:	40020058 	.word	0x40020058
 80041ec:	40020070 	.word	0x40020070
 80041f0:	40020088 	.word	0x40020088
 80041f4:	400200a0 	.word	0x400200a0
 80041f8:	400200b8 	.word	0x400200b8
 80041fc:	40020410 	.word	0x40020410
 8004200:	40020428 	.word	0x40020428
 8004204:	40020440 	.word	0x40020440
 8004208:	40020458 	.word	0x40020458
 800420c:	40020470 	.word	0x40020470
 8004210:	40020488 	.word	0x40020488
 8004214:	400204a0 	.word	0x400204a0
 8004218:	400204b8 	.word	0x400204b8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8087 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2220      	movs	r2, #32
 8004240:	409a      	lsls	r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b04      	cmp	r3, #4
 8004250:	d139      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0216 	bic.w	r2, r2, #22
 8004260:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004270:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_DMA_IRQHandler+0x736>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	223f      	movs	r2, #63	@ 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 834a 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
          }
          return;
 80042c4:	e344      	b.n	8004950 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e027      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
 8004304:	e01e      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0210 	bic.w	r2, r2, #16
 8004322:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8306 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8088 	beq.w	800446c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7a      	ldr	r2, [pc, #488]	@ (8004554 <HAL_DMA_IRQHandler+0xa08>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04a      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a79      	ldr	r2, [pc, #484]	@ (8004558 <HAL_DMA_IRQHandler+0xa0c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d045      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a77      	ldr	r2, [pc, #476]	@ (800455c <HAL_DMA_IRQHandler+0xa10>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d040      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a76      	ldr	r2, [pc, #472]	@ (8004560 <HAL_DMA_IRQHandler+0xa14>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d03b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	@ (8004564 <HAL_DMA_IRQHandler+0xa18>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d036      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	@ (8004568 <HAL_DMA_IRQHandler+0xa1c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d031      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a71      	ldr	r2, [pc, #452]	@ (800456c <HAL_DMA_IRQHandler+0xa20>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	@ (8004570 <HAL_DMA_IRQHandler+0xa24>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d027      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004574 <HAL_DMA_IRQHandler+0xa28>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004578 <HAL_DMA_IRQHandler+0xa2c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6b      	ldr	r2, [pc, #428]	@ (800457c <HAL_DMA_IRQHandler+0xa30>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004580 <HAL_DMA_IRQHandler+0xa34>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	@ (8004584 <HAL_DMA_IRQHandler+0xa38>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a67      	ldr	r2, [pc, #412]	@ (8004588 <HAL_DMA_IRQHandler+0xa3c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	@ (800458c <HAL_DMA_IRQHandler+0xa40>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a64      	ldr	r2, [pc, #400]	@ (8004590 <HAL_DMA_IRQHandler+0xa44>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_DMA_IRQHandler+0x8ca>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e007      	b.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	429a      	cmp	r2, r3
 8004430:	d307      	bcc.n	8004442 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f2      	bne.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004440:	e000      	b.n	8004444 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004442:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800445a:	e003      	b.n	8004464 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8272 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e26c      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a43      	ldr	r2, [pc, #268]	@ (8004594 <HAL_DMA_IRQHandler+0xa48>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a42      	ldr	r2, [pc, #264]	@ (8004598 <HAL_DMA_IRQHandler+0xa4c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a40      	ldr	r2, [pc, #256]	@ (800459c <HAL_DMA_IRQHandler+0xa50>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_DMA_IRQHandler+0xa54>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3d      	ldr	r2, [pc, #244]	@ (80045a4 <HAL_DMA_IRQHandler+0xa58>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3c      	ldr	r2, [pc, #240]	@ (80045a8 <HAL_DMA_IRQHandler+0xa5c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3a      	ldr	r2, [pc, #232]	@ (80045ac <HAL_DMA_IRQHandler+0xa60>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a39      	ldr	r2, [pc, #228]	@ (80045b0 <HAL_DMA_IRQHandler+0xa64>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x988>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_IRQHandler+0x98a>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 823f 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2204      	movs	r2, #4
 80044ee:	409a      	lsls	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80cd 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80c7 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2204      	movs	r2, #4
 8004510:	409a      	lsls	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d049      	beq.n	80045b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8210 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453c:	e20a      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8206 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004550:	e200      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
 8004552:	bf00      	nop
 8004554:	40020010 	.word	0x40020010
 8004558:	40020028 	.word	0x40020028
 800455c:	40020040 	.word	0x40020040
 8004560:	40020058 	.word	0x40020058
 8004564:	40020070 	.word	0x40020070
 8004568:	40020088 	.word	0x40020088
 800456c:	400200a0 	.word	0x400200a0
 8004570:	400200b8 	.word	0x400200b8
 8004574:	40020410 	.word	0x40020410
 8004578:	40020428 	.word	0x40020428
 800457c:	40020440 	.word	0x40020440
 8004580:	40020458 	.word	0x40020458
 8004584:	40020470 	.word	0x40020470
 8004588:	40020488 	.word	0x40020488
 800458c:	400204a0 	.word	0x400204a0
 8004590:	400204b8 	.word	0x400204b8
 8004594:	58025408 	.word	0x58025408
 8004598:	5802541c 	.word	0x5802541c
 800459c:	58025430 	.word	0x58025430
 80045a0:	58025444 	.word	0x58025444
 80045a4:	58025458 	.word	0x58025458
 80045a8:	5802546c 	.word	0x5802546c
 80045ac:	58025480 	.word	0x58025480
 80045b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d160      	bne.n	8004680 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7f      	ldr	r2, [pc, #508]	@ (80047c0 <HAL_DMA_IRQHandler+0xc74>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7d      	ldr	r2, [pc, #500]	@ (80047c4 <HAL_DMA_IRQHandler+0xc78>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	@ (80047c8 <HAL_DMA_IRQHandler+0xc7c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7a      	ldr	r2, [pc, #488]	@ (80047cc <HAL_DMA_IRQHandler+0xc80>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a79      	ldr	r2, [pc, #484]	@ (80047d0 <HAL_DMA_IRQHandler+0xc84>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a77      	ldr	r2, [pc, #476]	@ (80047d4 <HAL_DMA_IRQHandler+0xc88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a76      	ldr	r2, [pc, #472]	@ (80047d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a74      	ldr	r2, [pc, #464]	@ (80047dc <HAL_DMA_IRQHandler+0xc90>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a73      	ldr	r2, [pc, #460]	@ (80047e0 <HAL_DMA_IRQHandler+0xc94>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a71      	ldr	r2, [pc, #452]	@ (80047e4 <HAL_DMA_IRQHandler+0xc98>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a70      	ldr	r2, [pc, #448]	@ (80047e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	@ (80047ec <HAL_DMA_IRQHandler+0xca0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6d      	ldr	r2, [pc, #436]	@ (80047f0 <HAL_DMA_IRQHandler+0xca4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6b      	ldr	r2, [pc, #428]	@ (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6a      	ldr	r2, [pc, #424]	@ (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a68      	ldr	r2, [pc, #416]	@ (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_DMA_IRQHandler+0xb24>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0208 	bic.w	r2, r2, #8
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <HAL_DMA_IRQHandler+0xb34>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8165 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004692:	e15f      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2202      	movs	r2, #2
 800469e:	409a      	lsls	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80c5 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80bf 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2202      	movs	r2, #2
 80046c0:	409a      	lsls	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 813a 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ec:	e134      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8130 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004700:	e12a      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 8089 	bne.w	8004820 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	@ (80047c0 <HAL_DMA_IRQHandler+0xc74>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d04a      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <HAL_DMA_IRQHandler+0xc78>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d045      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <HAL_DMA_IRQHandler+0xc7c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d040      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a26      	ldr	r2, [pc, #152]	@ (80047cc <HAL_DMA_IRQHandler+0xc80>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d03b      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a25      	ldr	r2, [pc, #148]	@ (80047d0 <HAL_DMA_IRQHandler+0xc84>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d036      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	@ (80047d4 <HAL_DMA_IRQHandler+0xc88>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d031      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a22      	ldr	r2, [pc, #136]	@ (80047d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d02c      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a20      	ldr	r2, [pc, #128]	@ (80047dc <HAL_DMA_IRQHandler+0xc90>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d027      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1f      	ldr	r2, [pc, #124]	@ (80047e0 <HAL_DMA_IRQHandler+0xc94>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <HAL_DMA_IRQHandler+0xc98>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01d      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <HAL_DMA_IRQHandler+0xca0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	@ (80047f0 <HAL_DMA_IRQHandler+0xca4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a14      	ldr	r2, [pc, #80]	@ (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d128      	bne.n	8004800 <HAL_DMA_IRQHandler+0xcb4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0214 	bic.w	r2, r2, #20
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e027      	b.n	8004810 <HAL_DMA_IRQHandler+0xcc4>
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 020a 	bic.w	r2, r2, #10
 800480e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8097 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004832:	e091      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2208      	movs	r2, #8
 800483e:	409a      	lsls	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8088 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8082 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a41      	ldr	r2, [pc, #260]	@ (8004960 <HAL_DMA_IRQHandler+0xe14>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d04a      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3f      	ldr	r2, [pc, #252]	@ (8004964 <HAL_DMA_IRQHandler+0xe18>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d045      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3e      	ldr	r2, [pc, #248]	@ (8004968 <HAL_DMA_IRQHandler+0xe1c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3c      	ldr	r2, [pc, #240]	@ (800496c <HAL_DMA_IRQHandler+0xe20>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03b      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3b      	ldr	r2, [pc, #236]	@ (8004970 <HAL_DMA_IRQHandler+0xe24>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d036      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a39      	ldr	r2, [pc, #228]	@ (8004974 <HAL_DMA_IRQHandler+0xe28>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d031      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	@ (8004978 <HAL_DMA_IRQHandler+0xe2c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d02c      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a36      	ldr	r2, [pc, #216]	@ (800497c <HAL_DMA_IRQHandler+0xe30>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d027      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <HAL_DMA_IRQHandler+0xe34>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a33      	ldr	r2, [pc, #204]	@ (8004984 <HAL_DMA_IRQHandler+0xe38>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a32      	ldr	r2, [pc, #200]	@ (8004988 <HAL_DMA_IRQHandler+0xe3c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a30      	ldr	r2, [pc, #192]	@ (800498c <HAL_DMA_IRQHandler+0xe40>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004990 <HAL_DMA_IRQHandler+0xe44>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <HAL_DMA_IRQHandler+0xe48>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004998 <HAL_DMA_IRQHandler+0xe4c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	@ (800499c <HAL_DMA_IRQHandler+0xe50>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <HAL_DMA_IRQHandler+0xdbc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 021c 	bic.w	r2, r2, #28
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <HAL_DMA_IRQHandler+0xdcc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 020e 	bic.w	r2, r2, #14
 8004916:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
 800494e:	e004      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004958:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800495a:	3728      	adds	r7, #40	@ 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8

080049a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd4 <DMA_SetConfig+0x21c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d072      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7d      	ldr	r2, [pc, #500]	@ (8004bd8 <DMA_SetConfig+0x220>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d06d      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7c      	ldr	r2, [pc, #496]	@ (8004bdc <DMA_SetConfig+0x224>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d068      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7a      	ldr	r2, [pc, #488]	@ (8004be0 <DMA_SetConfig+0x228>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d063      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a79      	ldr	r2, [pc, #484]	@ (8004be4 <DMA_SetConfig+0x22c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d05e      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a77      	ldr	r2, [pc, #476]	@ (8004be8 <DMA_SetConfig+0x230>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d059      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a76      	ldr	r2, [pc, #472]	@ (8004bec <DMA_SetConfig+0x234>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d054      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a74      	ldr	r2, [pc, #464]	@ (8004bf0 <DMA_SetConfig+0x238>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04f      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	@ (8004bf4 <DMA_SetConfig+0x23c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d04a      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a71      	ldr	r2, [pc, #452]	@ (8004bf8 <DMA_SetConfig+0x240>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d045      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a70      	ldr	r2, [pc, #448]	@ (8004bfc <DMA_SetConfig+0x244>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d040      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6e      	ldr	r2, [pc, #440]	@ (8004c00 <DMA_SetConfig+0x248>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d03b      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c04 <DMA_SetConfig+0x24c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d036      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a6b      	ldr	r2, [pc, #428]	@ (8004c08 <DMA_SetConfig+0x250>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6a      	ldr	r2, [pc, #424]	@ (8004c0c <DMA_SetConfig+0x254>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02c      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a68      	ldr	r2, [pc, #416]	@ (8004c10 <DMA_SetConfig+0x258>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d027      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a67      	ldr	r2, [pc, #412]	@ (8004c14 <DMA_SetConfig+0x25c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a65      	ldr	r2, [pc, #404]	@ (8004c18 <DMA_SetConfig+0x260>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a64      	ldr	r2, [pc, #400]	@ (8004c1c <DMA_SetConfig+0x264>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a62      	ldr	r2, [pc, #392]	@ (8004c20 <DMA_SetConfig+0x268>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a61      	ldr	r2, [pc, #388]	@ (8004c24 <DMA_SetConfig+0x26c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c28 <DMA_SetConfig+0x270>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8004c2c <DMA_SetConfig+0x274>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <DMA_SetConfig+0x10a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5c      	ldr	r2, [pc, #368]	@ (8004c30 <DMA_SetConfig+0x278>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <DMA_SetConfig+0x10e>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <DMA_SetConfig+0x110>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ad4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ae6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a39      	ldr	r2, [pc, #228]	@ (8004bd4 <DMA_SetConfig+0x21c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04a      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a38      	ldr	r2, [pc, #224]	@ (8004bd8 <DMA_SetConfig+0x220>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d045      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a36      	ldr	r2, [pc, #216]	@ (8004bdc <DMA_SetConfig+0x224>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d040      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a35      	ldr	r2, [pc, #212]	@ (8004be0 <DMA_SetConfig+0x228>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d03b      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a33      	ldr	r2, [pc, #204]	@ (8004be4 <DMA_SetConfig+0x22c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d036      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a32      	ldr	r2, [pc, #200]	@ (8004be8 <DMA_SetConfig+0x230>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d031      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a30      	ldr	r2, [pc, #192]	@ (8004bec <DMA_SetConfig+0x234>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02c      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2f      	ldr	r2, [pc, #188]	@ (8004bf0 <DMA_SetConfig+0x238>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d027      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf4 <DMA_SetConfig+0x23c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d022      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <DMA_SetConfig+0x240>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d01d      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2a      	ldr	r2, [pc, #168]	@ (8004bfc <DMA_SetConfig+0x244>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d018      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a29      	ldr	r2, [pc, #164]	@ (8004c00 <DMA_SetConfig+0x248>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a27      	ldr	r2, [pc, #156]	@ (8004c04 <DMA_SetConfig+0x24c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a26      	ldr	r2, [pc, #152]	@ (8004c08 <DMA_SetConfig+0x250>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d009      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <DMA_SetConfig+0x254>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <DMA_SetConfig+0x1d0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a23      	ldr	r2, [pc, #140]	@ (8004c10 <DMA_SetConfig+0x258>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <DMA_SetConfig+0x1d4>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <DMA_SetConfig+0x1d6>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d059      	beq.n	8004c46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	223f      	movs	r2, #63	@ 0x3f
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b40      	cmp	r3, #64	@ 0x40
 8004bc0:	d138      	bne.n	8004c34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bd2:	e086      	b.n	8004ce2 <DMA_SetConfig+0x32a>
 8004bd4:	40020010 	.word	0x40020010
 8004bd8:	40020028 	.word	0x40020028
 8004bdc:	40020040 	.word	0x40020040
 8004be0:	40020058 	.word	0x40020058
 8004be4:	40020070 	.word	0x40020070
 8004be8:	40020088 	.word	0x40020088
 8004bec:	400200a0 	.word	0x400200a0
 8004bf0:	400200b8 	.word	0x400200b8
 8004bf4:	40020410 	.word	0x40020410
 8004bf8:	40020428 	.word	0x40020428
 8004bfc:	40020440 	.word	0x40020440
 8004c00:	40020458 	.word	0x40020458
 8004c04:	40020470 	.word	0x40020470
 8004c08:	40020488 	.word	0x40020488
 8004c0c:	400204a0 	.word	0x400204a0
 8004c10:	400204b8 	.word	0x400204b8
 8004c14:	58025408 	.word	0x58025408
 8004c18:	5802541c 	.word	0x5802541c
 8004c1c:	58025430 	.word	0x58025430
 8004c20:	58025444 	.word	0x58025444
 8004c24:	58025458 	.word	0x58025458
 8004c28:	5802546c 	.word	0x5802546c
 8004c2c:	58025480 	.word	0x58025480
 8004c30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
}
 8004c44:	e04d      	b.n	8004ce2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a29      	ldr	r2, [pc, #164]	@ (8004cf0 <DMA_SetConfig+0x338>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <DMA_SetConfig+0x33c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <DMA_SetConfig+0x340>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <DMA_SetConfig+0x344>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <DMA_SetConfig+0x348>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a21      	ldr	r2, [pc, #132]	@ (8004d04 <DMA_SetConfig+0x34c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a20      	ldr	r2, [pc, #128]	@ (8004d08 <DMA_SetConfig+0x350>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <DMA_SetConfig+0x2de>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	@ (8004d0c <DMA_SetConfig+0x354>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <DMA_SetConfig+0x2e2>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <DMA_SetConfig+0x2e4>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2201      	movs	r2, #1
 8004caa:	409a      	lsls	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d108      	bne.n	8004cd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	60da      	str	r2, [r3, #12]
}
 8004cd0:	e007      	b.n	8004ce2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	60da      	str	r2, [r3, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	58025408 	.word	0x58025408
 8004cf4:	5802541c 	.word	0x5802541c
 8004cf8:	58025430 	.word	0x58025430
 8004cfc:	58025444 	.word	0x58025444
 8004d00:	58025458 	.word	0x58025458
 8004d04:	5802546c 	.word	0x5802546c
 8004d08:	58025480 	.word	0x58025480
 8004d0c:	58025494 	.word	0x58025494

08004d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a42      	ldr	r2, [pc, #264]	@ (8004e28 <DMA_CalcBaseAndBitshift+0x118>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04a      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a41      	ldr	r2, [pc, #260]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a3f      	ldr	r2, [pc, #252]	@ (8004e30 <DMA_CalcBaseAndBitshift+0x120>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d040      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03b      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3c      	ldr	r2, [pc, #240]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x128>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d036      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d031      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a39      	ldr	r2, [pc, #228]	@ (8004e40 <DMA_CalcBaseAndBitshift+0x130>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02c      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a38      	ldr	r2, [pc, #224]	@ (8004e44 <DMA_CalcBaseAndBitshift+0x134>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d027      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a36      	ldr	r2, [pc, #216]	@ (8004e48 <DMA_CalcBaseAndBitshift+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a35      	ldr	r2, [pc, #212]	@ (8004e4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a33      	ldr	r2, [pc, #204]	@ (8004e50 <DMA_CalcBaseAndBitshift+0x140>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a32      	ldr	r2, [pc, #200]	@ (8004e54 <DMA_CalcBaseAndBitshift+0x144>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a30      	ldr	r2, [pc, #192]	@ (8004e58 <DMA_CalcBaseAndBitshift+0x148>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e5c <DMA_CalcBaseAndBitshift+0x14c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e60 <DMA_CalcBaseAndBitshift+0x150>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xa8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e64 <DMA_CalcBaseAndBitshift+0x154>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <DMA_CalcBaseAndBitshift+0xac>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <DMA_CalcBaseAndBitshift+0xae>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d024      	beq.n	8004e0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3b10      	subs	r3, #16
 8004dca:	4a27      	ldr	r2, [pc, #156]	@ (8004e68 <DMA_CalcBaseAndBitshift+0x158>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	4a24      	ldr	r2, [pc, #144]	@ (8004e6c <DMA_CalcBaseAndBitshift+0x15c>)
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d908      	bls.n	8004dfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <DMA_CalcBaseAndBitshift+0x160>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dfa:	e00d      	b.n	8004e18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <DMA_CalcBaseAndBitshift+0x160>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e0a:	e005      	b.n	8004e18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40020010 	.word	0x40020010
 8004e2c:	40020028 	.word	0x40020028
 8004e30:	40020040 	.word	0x40020040
 8004e34:	40020058 	.word	0x40020058
 8004e38:	40020070 	.word	0x40020070
 8004e3c:	40020088 	.word	0x40020088
 8004e40:	400200a0 	.word	0x400200a0
 8004e44:	400200b8 	.word	0x400200b8
 8004e48:	40020410 	.word	0x40020410
 8004e4c:	40020428 	.word	0x40020428
 8004e50:	40020440 	.word	0x40020440
 8004e54:	40020458 	.word	0x40020458
 8004e58:	40020470 	.word	0x40020470
 8004e5c:	40020488 	.word	0x40020488
 8004e60:	400204a0 	.word	0x400204a0
 8004e64:	400204b8 	.word	0x400204b8
 8004e68:	aaaaaaab 	.word	0xaaaaaaab
 8004e6c:	0801c97c 	.word	0x0801c97c
 8004e70:	fffffc00 	.word	0xfffffc00

08004e74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d120      	bne.n	8004eca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d858      	bhi.n	8004f42 <DMA_CheckFifoParam+0xce>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <DMA_CheckFifoParam+0x24>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004ebb 	.word	0x08004ebb
 8004ea0:	08004ea9 	.word	0x08004ea9
 8004ea4:	08004f43 	.word	0x08004f43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d048      	beq.n	8004f46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eb8:	e045      	b.n	8004f46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ec2:	d142      	bne.n	8004f4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec8:	e03f      	b.n	8004f4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed2:	d123      	bne.n	8004f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d838      	bhi.n	8004f4e <DMA_CheckFifoParam+0xda>
 8004edc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <DMA_CheckFifoParam+0x70>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004efb 	.word	0x08004efb
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f0d 	.word	0x08004f0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ef8:	e030      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d025      	beq.n	8004f52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f0a:	e022      	b.n	8004f52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f14:	d11f      	bne.n	8004f56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f1a:	e01c      	b.n	8004f56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d902      	bls.n	8004f2a <DMA_CheckFifoParam+0xb6>
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f28:	e018      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f2e:	e015      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f40:	e00b      	b.n	8004f5a <DMA_CheckFifoParam+0xe6>
        break;
 8004f42:	bf00      	nop
 8004f44:	e00a      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        break;
 8004f46:	bf00      	nop
 8004f48:	e008      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
        break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
    break;
 8004f5a:	bf00      	nop
    }
  }

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a38      	ldr	r2, [pc, #224]	@ (8005060 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a36      	ldr	r2, [pc, #216]	@ (8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01d      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a35      	ldr	r2, [pc, #212]	@ (8005068 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d018      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a33      	ldr	r2, [pc, #204]	@ (800506c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a32      	ldr	r2, [pc, #200]	@ (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3b08      	subs	r3, #8
 8004fdc:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4b26      	ldr	r3, [pc, #152]	@ (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a24      	ldr	r2, [pc, #144]	@ (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ff8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2201      	movs	r2, #1
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005008:	e024      	b.n	8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	3b10      	subs	r3, #16
 8005012:	4a1e      	ldr	r2, [pc, #120]	@ (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d806      	bhi.n	8005032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d902      	bls.n	8005032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3308      	adds	r3, #8
 8005030:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4b18      	ldr	r3, [pc, #96]	@ (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005044:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	58025408 	.word	0x58025408
 8005064:	5802541c 	.word	0x5802541c
 8005068:	58025430 	.word	0x58025430
 800506c:	58025444 	.word	0x58025444
 8005070:	58025458 	.word	0x58025458
 8005074:	5802546c 	.word	0x5802546c
 8005078:	58025480 	.word	0x58025480
 800507c:	58025494 	.word	0x58025494
 8005080:	cccccccd 	.word	0xcccccccd
 8005084:	16009600 	.word	0x16009600
 8005088:	58025880 	.word	0x58025880
 800508c:	aaaaaaab 	.word	0xaaaaaaab
 8005090:	400204b8 	.word	0x400204b8
 8005094:	4002040f 	.word	0x4002040f
 8005098:	10008200 	.word	0x10008200
 800509c:	40020880 	.word	0x40020880

080050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04a      	beq.n	800514c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d847      	bhi.n	800514c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a25      	ldr	r2, [pc, #148]	@ (8005158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a24      	ldr	r2, [pc, #144]	@ (800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01d      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a22      	ldr	r2, [pc, #136]	@ (8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a21      	ldr	r2, [pc, #132]	@ (8005164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a15      	ldr	r2, [pc, #84]	@ (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005128:	671a      	str	r2, [r3, #112]	@ 0x70
 800512a:	e009      	b.n	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800513e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	58025408 	.word	0x58025408
 800515c:	5802541c 	.word	0x5802541c
 8005160:	58025430 	.word	0x58025430
 8005164:	58025444 	.word	0x58025444
 8005168:	58025458 	.word	0x58025458
 800516c:	5802546c 	.word	0x5802546c
 8005170:	58025480 	.word	0x58025480
 8005174:	58025494 	.word	0x58025494
 8005178:	1600963f 	.word	0x1600963f
 800517c:	58025940 	.word	0x58025940
 8005180:	1000823f 	.word	0x1000823f
 8005184:	40020940 	.word	0x40020940

08005188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	@ 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005196:	4b89      	ldr	r3, [pc, #548]	@ (80053bc <HAL_GPIO_Init+0x234>)
 8005198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800519a:	e194      	b.n	80054c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	2101      	movs	r1, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8186 	beq.w	80054c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d005      	beq.n	80051cc <HAL_GPIO_Init+0x44>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d130      	bne.n	800522e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	2203      	movs	r2, #3
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005202:	2201      	movs	r2, #1
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 0201 	and.w	r2, r3, #1
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b03      	cmp	r3, #3
 8005238:	d017      	beq.n	800526a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	2203      	movs	r2, #3
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d123      	bne.n	80052be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	08da      	lsrs	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3208      	adds	r2, #8
 800527e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	08da      	lsrs	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3208      	adds	r2, #8
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	2203      	movs	r2, #3
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0203 	and.w	r2, r3, #3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80e0 	beq.w	80054c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005300:	4b2f      	ldr	r3, [pc, #188]	@ (80053c0 <HAL_GPIO_Init+0x238>)
 8005302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005306:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <HAL_GPIO_Init+0x238>)
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005310:	4b2b      	ldr	r3, [pc, #172]	@ (80053c0 <HAL_GPIO_Init+0x238>)
 8005312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800531e:	4a29      	ldr	r2, [pc, #164]	@ (80053c4 <HAL_GPIO_Init+0x23c>)
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	3302      	adds	r3, #2
 8005326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	220f      	movs	r2, #15
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a20      	ldr	r2, [pc, #128]	@ (80053c8 <HAL_GPIO_Init+0x240>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d052      	beq.n	80053f0 <HAL_GPIO_Init+0x268>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <HAL_GPIO_Init+0x244>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_GPIO_Init+0x22e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1e      	ldr	r2, [pc, #120]	@ (80053d0 <HAL_GPIO_Init+0x248>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02b      	beq.n	80053b2 <HAL_GPIO_Init+0x22a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <HAL_GPIO_Init+0x24c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d025      	beq.n	80053ae <HAL_GPIO_Init+0x226>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <HAL_GPIO_Init+0x250>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01f      	beq.n	80053aa <HAL_GPIO_Init+0x222>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1b      	ldr	r2, [pc, #108]	@ (80053dc <HAL_GPIO_Init+0x254>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d019      	beq.n	80053a6 <HAL_GPIO_Init+0x21e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1a      	ldr	r2, [pc, #104]	@ (80053e0 <HAL_GPIO_Init+0x258>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_GPIO_Init+0x21a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a19      	ldr	r2, [pc, #100]	@ (80053e4 <HAL_GPIO_Init+0x25c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00d      	beq.n	800539e <HAL_GPIO_Init+0x216>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <HAL_GPIO_Init+0x260>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <HAL_GPIO_Init+0x212>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a17      	ldr	r2, [pc, #92]	@ (80053ec <HAL_GPIO_Init+0x264>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d101      	bne.n	8005396 <HAL_GPIO_Init+0x20e>
 8005392:	2309      	movs	r3, #9
 8005394:	e02d      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 8005396:	230a      	movs	r3, #10
 8005398:	e02b      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 800539a:	2308      	movs	r3, #8
 800539c:	e029      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 800539e:	2307      	movs	r3, #7
 80053a0:	e027      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053a2:	2306      	movs	r3, #6
 80053a4:	e025      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053a6:	2305      	movs	r3, #5
 80053a8:	e023      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053aa:	2304      	movs	r3, #4
 80053ac:	e021      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053ae:	2303      	movs	r3, #3
 80053b0:	e01f      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e01d      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e01b      	b.n	80053f2 <HAL_GPIO_Init+0x26a>
 80053ba:	bf00      	nop
 80053bc:	58000080 	.word	0x58000080
 80053c0:	58024400 	.word	0x58024400
 80053c4:	58000400 	.word	0x58000400
 80053c8:	58020000 	.word	0x58020000
 80053cc:	58020400 	.word	0x58020400
 80053d0:	58020800 	.word	0x58020800
 80053d4:	58020c00 	.word	0x58020c00
 80053d8:	58021000 	.word	0x58021000
 80053dc:	58021400 	.word	0x58021400
 80053e0:	58021800 	.word	0x58021800
 80053e4:	58021c00 	.word	0x58021c00
 80053e8:	58022000 	.word	0x58022000
 80053ec:	58022400 	.word	0x58022400
 80053f0:	2300      	movs	r3, #0
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	f002 0203 	and.w	r2, r2, #3
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	4093      	lsls	r3, r2
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005402:	4938      	ldr	r1, [pc, #224]	@ (80054e4 <HAL_GPIO_Init+0x35c>)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	3302      	adds	r3, #2
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f ae63 	bne.w	800519c <HAL_GPIO_Init+0x14>
  }
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3724      	adds	r7, #36	@ 0x24
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	58000400 	.word	0x58000400

080054e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80054f0:	4a08      	ldr	r2, [pc, #32]	@ (8005514 <HAL_HSEM_FastTake+0x2c>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3320      	adds	r3, #32
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	4a07      	ldr	r2, [pc, #28]	@ (8005518 <HAL_HSEM_FastTake+0x30>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	58026400 	.word	0x58026400
 8005518:	80000300 	.word	0x80000300

0800551c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005526:	4906      	ldr	r1, [pc, #24]	@ (8005540 <HAL_HSEM_Release+0x24>)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	58026400 	.word	0x58026400

08005544 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_HSEM_ActivateNotification+0x20>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <HAL_HSEM_ActivateNotification+0x20>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
#endif
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	58026500 	.word	0x58026500

08005568 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_HSEM_IRQHandler+0x30>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005574:	4b08      	ldr	r3, [pc, #32]	@ (8005598 <HAL_HSEM_IRQHandler+0x30>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	43db      	mvns	r3, r3
 800557c:	4906      	ldr	r1, [pc, #24]	@ (8005598 <HAL_HSEM_IRQHandler+0x30>)
 800557e:	4013      	ands	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005582:	4a05      	ldr	r2, [pc, #20]	@ (8005598 <HAL_HSEM_IRQHandler+0x30>)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fc f96f 	bl	800186c <HAL_HSEM_FreeCallback>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	58026500 	.word	0x58026500

0800559c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e043      	b.n	8005636 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80055b6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80055c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6852      	ldr	r2, [r2, #4]
 80055ca:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6892      	ldr	r2, [r2, #8]
 80055d4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80055d6:	f7fc fe97 	bl	8002308 <HAL_GetTick>
 80055da:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80055dc:	e011      	b.n	8005602 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80055de:	f7fc fe93 	bl	8002308 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f641 0201 	movw	r2, #6145	@ 0x1801
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d908      	bls.n	8005602 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e019      	b.n	8005636 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	429a      	cmp	r2, r3
 800561c:	d005      	beq.n	800562a <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68d2      	ldr	r2, [r2, #12]
 8005626:	611a      	str	r2, [r3, #16]
 8005628:	e004      	b.n	8005634 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800564e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005668:	4b29      	ldr	r3, [pc, #164]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	2b06      	cmp	r3, #6
 8005672:	d00a      	beq.n	800568a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005674:	4b26      	ldr	r3, [pc, #152]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	d001      	beq.n	8005686 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e040      	b.n	8005708 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e03e      	b.n	8005708 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800568a:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005692:	491f      	ldr	r1, [pc, #124]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800569a:	f7fc fe35 	bl	8002308 <HAL_GetTick>
 800569e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056a0:	e009      	b.n	80056b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056a2:	f7fc fe31 	bl	8002308 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056b0:	d901      	bls.n	80056b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e028      	b.n	8005708 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056b6:	4b16      	ldr	r3, [pc, #88]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c2:	d1ee      	bne.n	80056a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b1e      	cmp	r3, #30
 80056c8:	d008      	beq.n	80056dc <HAL_PWREx_ConfigSupply+0x7c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80056ce:	d005      	beq.n	80056dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b1d      	cmp	r3, #29
 80056d4:	d002      	beq.n	80056dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80056da:	d114      	bne.n	8005706 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80056dc:	f7fc fe14 	bl	8002308 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056e2:	e009      	b.n	80056f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056e4:	f7fc fe10 	bl	8002308 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056f2:	d901      	bls.n	80056f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e007      	b.n	8005708 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_PWREx_ConfigSupply+0xb0>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005704:	d1ee      	bne.n	80056e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	58024800 	.word	0x58024800

08005714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	@ 0x30
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f000 bc48 	b.w	8005fb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8088 	beq.w	8005846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005736:	4b99      	ldr	r3, [pc, #612]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005740:	4b96      	ldr	r3, [pc, #600]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	2b10      	cmp	r3, #16
 800574a:	d007      	beq.n	800575c <HAL_RCC_OscConfig+0x48>
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	2b18      	cmp	r3, #24
 8005750:	d111      	bne.n	8005776 <HAL_RCC_OscConfig+0x62>
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d10c      	bne.n	8005776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	4b8f      	ldr	r3, [pc, #572]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d06d      	beq.n	8005844 <HAL_RCC_OscConfig+0x130>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d169      	bne.n	8005844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f000 bc21 	b.w	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577e:	d106      	bne.n	800578e <HAL_RCC_OscConfig+0x7a>
 8005780:	4b86      	ldr	r3, [pc, #536]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a85      	ldr	r2, [pc, #532]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e02e      	b.n	80057ec <HAL_RCC_OscConfig+0xd8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x9c>
 8005796:	4b81      	ldr	r3, [pc, #516]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a80      	ldr	r2, [pc, #512]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 800579c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4b7e      	ldr	r3, [pc, #504]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a7d      	ldr	r2, [pc, #500]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e01d      	b.n	80057ec <HAL_RCC_OscConfig+0xd8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0xc0>
 80057ba:	4b78      	ldr	r3, [pc, #480]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a77      	ldr	r2, [pc, #476]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b75      	ldr	r3, [pc, #468]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a74      	ldr	r2, [pc, #464]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e00b      	b.n	80057ec <HAL_RCC_OscConfig+0xd8>
 80057d4:	4b71      	ldr	r3, [pc, #452]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a70      	ldr	r2, [pc, #448]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b6e      	ldr	r3, [pc, #440]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6d      	ldr	r2, [pc, #436]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80057e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fc fd88 	bl	8002308 <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fc fd84 	bl	8002308 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	@ 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e3d4      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800580e:	4b63      	ldr	r3, [pc, #396]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0xe8>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc fd74 	bl	8002308 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc fd70 	bl	8002308 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e3c0      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005836:	4b59      	ldr	r3, [pc, #356]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x110>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80ca 	beq.w	80059e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005854:	4b51      	ldr	r3, [pc, #324]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800585c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800585e:	4b4f      	ldr	r3, [pc, #316]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_RCC_OscConfig+0x166>
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b18      	cmp	r3, #24
 800586e:	d156      	bne.n	800591e <HAL_RCC_OscConfig+0x20a>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d151      	bne.n	800591e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587a:	4b48      	ldr	r3, [pc, #288]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x17e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e392      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005892:	4b42      	ldr	r3, [pc, #264]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 0219 	bic.w	r2, r3, #25
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	493f      	ldr	r1, [pc, #252]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc fd30 	bl	8002308 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fc fd2c 	bl	8002308 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e37c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058be:	4b37      	ldr	r3, [pc, #220]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	f7fc fd29 	bl	8002320 <HAL_GetREVID>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d817      	bhi.n	8005908 <HAL_RCC_OscConfig+0x1f4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d108      	bne.n	80058f2 <HAL_RCC_OscConfig+0x1de>
 80058e0:	4b2e      	ldr	r3, [pc, #184]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80058e8:	4a2c      	ldr	r2, [pc, #176]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f0:	e07a      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	4926      	ldr	r1, [pc, #152]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	e06f      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b24      	ldr	r3, [pc, #144]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	4921      	ldr	r1, [pc, #132]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591c:	e064      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d047      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 0219 	bic.w	r2, r3, #25
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	491a      	ldr	r1, [pc, #104]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fc fce6 	bl	8002308 <HAL_GetTick>
 800593c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005940:	f7fc fce2 	bl	8002308 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e332      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005952:	4b12      	ldr	r3, [pc, #72]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595e:	f7fc fcdf 	bl	8002320 <HAL_GetREVID>
 8005962:	4603      	mov	r3, r0
 8005964:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005968:	4293      	cmp	r3, r2
 800596a:	d819      	bhi.n	80059a0 <HAL_RCC_OscConfig+0x28c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b40      	cmp	r3, #64	@ 0x40
 8005972:	d108      	bne.n	8005986 <HAL_RCC_OscConfig+0x272>
 8005974:	4b09      	ldr	r3, [pc, #36]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800597c:	4a07      	ldr	r2, [pc, #28]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005982:	6053      	str	r3, [r2, #4]
 8005984:	e030      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	031b      	lsls	r3, r3, #12
 8005994:	4901      	ldr	r1, [pc, #4]	@ (800599c <HAL_RCC_OscConfig+0x288>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
 800599a:	e025      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
 800599c:	58024400 	.word	0x58024400
 80059a0:	4b9a      	ldr	r3, [pc, #616]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	4997      	ldr	r1, [pc, #604]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	e018      	b.n	80059e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b6:	4b95      	ldr	r3, [pc, #596]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a94      	ldr	r2, [pc, #592]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fc fca1 	bl	8002308 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fc fc9d 	bl	8002308 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e2ed      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059dc:	4b8b      	ldr	r3, [pc, #556]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a9 	beq.w	8005b48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f6:	4b85      	ldr	r3, [pc, #532]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a00:	4b82      	ldr	r3, [pc, #520]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCC_OscConfig+0x308>
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b18      	cmp	r3, #24
 8005a10:	d13a      	bne.n	8005a88 <HAL_RCC_OscConfig+0x374>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d135      	bne.n	8005a88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a1c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_OscConfig+0x320>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	2b80      	cmp	r3, #128	@ 0x80
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e2c1      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a34:	f7fc fc74 	bl	8002320 <HAL_GetREVID>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d817      	bhi.n	8005a72 <HAL_RCC_OscConfig+0x35e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d108      	bne.n	8005a5c <HAL_RCC_OscConfig+0x348>
 8005a4a:	4b70      	ldr	r3, [pc, #448]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a52:	4a6e      	ldr	r2, [pc, #440]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a5a:	e075      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	069b      	lsls	r3, r3, #26
 8005a6a:	4968      	ldr	r1, [pc, #416]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a70:	e06a      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a72:	4b66      	ldr	r3, [pc, #408]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	4962      	ldr	r1, [pc, #392]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a86:	e05f      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d042      	beq.n	8005b16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a90:	4b5e      	ldr	r3, [pc, #376]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5d      	ldr	r2, [pc, #372]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fc fc34 	bl	8002308 <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005aa4:	f7fc fc30 	bl	8002308 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e280      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ab6:	4b55      	ldr	r3, [pc, #340]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ac2:	f7fc fc2d 	bl	8002320 <HAL_GetREVID>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d817      	bhi.n	8005b00 <HAL_RCC_OscConfig+0x3ec>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d108      	bne.n	8005aea <HAL_RCC_OscConfig+0x3d6>
 8005ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005ae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ae6:	6053      	str	r3, [r2, #4]
 8005ae8:	e02e      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
 8005aea:	4b48      	ldr	r3, [pc, #288]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	069b      	lsls	r3, r3, #26
 8005af8:	4944      	ldr	r1, [pc, #272]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
 8005afe:	e023      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
 8005b00:	4b42      	ldr	r3, [pc, #264]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	493f      	ldr	r1, [pc, #252]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60cb      	str	r3, [r1, #12]
 8005b14:	e018      	b.n	8005b48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b16:	4b3d      	ldr	r3, [pc, #244]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a3c      	ldr	r2, [pc, #240]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fc fbf1 	bl	8002308 <HAL_GetTick>
 8005b26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b2a:	f7fc fbed 	bl	8002308 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e23d      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b3c:	4b33      	ldr	r3, [pc, #204]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d036      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d019      	beq.n	8005b90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b60:	4a2a      	ldr	r2, [pc, #168]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fc fbce 	bl	8002308 <HAL_GetTick>
 8005b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b70:	f7fc fbca 	bl	8002308 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e21a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b82:	4b22      	ldr	r3, [pc, #136]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x45c>
 8005b8e:	e018      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b90:	4b1e      	ldr	r3, [pc, #120]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fc fbb4 	bl	8002308 <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fc fbb0 	bl	8002308 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e200      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bb6:	4b15      	ldr	r3, [pc, #84]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d039      	beq.n	8005c42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005bdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005be0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005be2:	f7fc fb91 	bl	8002308 <HAL_GetTick>
 8005be6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bea:	f7fc fb8d 	bl	8002308 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e1dd      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bfc:	4b03      	ldr	r3, [pc, #12]	@ (8005c0c <HAL_RCC_OscConfig+0x4f8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCC_OscConfig+0x4d6>
 8005c08:	e01b      	b.n	8005c42 <HAL_RCC_OscConfig+0x52e>
 8005c0a:	bf00      	nop
 8005c0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c10:	4b9b      	ldr	r3, [pc, #620]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a9a      	ldr	r2, [pc, #616]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005c16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c1c:	f7fc fb74 	bl	8002308 <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c24:	f7fc fb70 	bl	8002308 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e1c0      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c36:	4b92      	ldr	r3, [pc, #584]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8081 	beq.w	8005d52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c50:	4b8c      	ldr	r3, [pc, #560]	@ (8005e84 <HAL_RCC_OscConfig+0x770>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a8b      	ldr	r2, [pc, #556]	@ (8005e84 <HAL_RCC_OscConfig+0x770>)
 8005c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c5c:	f7fc fb54 	bl	8002308 <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c64:	f7fc fb50 	bl	8002308 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	@ 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1a0      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c76:	4b83      	ldr	r3, [pc, #524]	@ (8005e84 <HAL_RCC_OscConfig+0x770>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d106      	bne.n	8005c98 <HAL_RCC_OscConfig+0x584>
 8005c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c96:	e02d      	b.n	8005cf4 <HAL_RCC_OscConfig+0x5e0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <HAL_RCC_OscConfig+0x5a6>
 8005ca0:	4b77      	ldr	r3, [pc, #476]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	4a76      	ldr	r2, [pc, #472]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cac:	4b74      	ldr	r3, [pc, #464]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a73      	ldr	r2, [pc, #460]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cb2:	f023 0304 	bic.w	r3, r3, #4
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x5e0>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x5c8>
 8005cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cce:	4b6c      	ldr	r3, [pc, #432]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x5e0>
 8005cdc:	4b68      	ldr	r3, [pc, #416]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a67      	ldr	r2, [pc, #412]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce8:	4b65      	ldr	r3, [pc, #404]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a64      	ldr	r2, [pc, #400]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005cee:	f023 0304 	bic.w	r3, r3, #4
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fc fb04 	bl	8002308 <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fc fb00 	bl	8002308 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e14e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1a:	4b59      	ldr	r3, [pc, #356]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ee      	beq.n	8005d04 <HAL_RCC_OscConfig+0x5f0>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fc faee 	bl	8002308 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fc faea 	bl	8002308 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e138      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d46:	4b4e      	ldr	r3, [pc, #312]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ee      	bne.n	8005d30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 812d 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d5c:	4b48      	ldr	r3, [pc, #288]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d64:	2b18      	cmp	r3, #24
 8005d66:	f000 80bd 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	f040 809e 	bne.w	8005eb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d74:	4b42      	ldr	r3, [pc, #264]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a41      	ldr	r2, [pc, #260]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fc fac2 	bl	8002308 <HAL_GetTick>
 8005d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fc fabe 	bl	8002308 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e10e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d9a:	4b39      	ldr	r3, [pc, #228]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da6:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005da8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005daa:	4b37      	ldr	r3, [pc, #220]	@ (8005e88 <HAL_RCC_OscConfig+0x774>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	430a      	orrs	r2, r1
 8005dba:	4931      	ldr	r1, [pc, #196]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	025b      	lsls	r3, r3, #9
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	3b01      	subs	r3, #1
 8005dea:	061b      	lsls	r3, r3, #24
 8005dec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005df0:	4923      	ldr	r1, [pc, #140]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005df6:	4b22      	ldr	r3, [pc, #136]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	4a21      	ldr	r2, [pc, #132]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e02:	4b1f      	ldr	r3, [pc, #124]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e06:	4b21      	ldr	r3, [pc, #132]	@ (8005e8c <HAL_RCC_OscConfig+0x778>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e0e:	00d2      	lsls	r2, r2, #3
 8005e10:	491b      	ldr	r1, [pc, #108]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e16:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	f023 020c 	bic.w	r2, r3, #12
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	4917      	ldr	r1, [pc, #92]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	f023 0202 	bic.w	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e34:	4912      	ldr	r1, [pc, #72]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4a10      	ldr	r2, [pc, #64]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e46:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e52:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	4a0a      	ldr	r2, [pc, #40]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e5e:	4b08      	ldr	r3, [pc, #32]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	4a07      	ldr	r2, [pc, #28]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e6a:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a04      	ldr	r2, [pc, #16]	@ (8005e80 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e76:	f7fc fa47 	bl	8002308 <HAL_GetTick>
 8005e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e7c:	e011      	b.n	8005ea2 <HAL_RCC_OscConfig+0x78e>
 8005e7e:	bf00      	nop
 8005e80:	58024400 	.word	0x58024400
 8005e84:	58024800 	.word	0x58024800
 8005e88:	fffffc0c 	.word	0xfffffc0c
 8005e8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fc fa3a 	bl	8002308 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e08a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x77c>
 8005eae:	e082      	b.n	8005fb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a42      	ldr	r2, [pc, #264]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fa24 	bl	8002308 <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc fa20 	bl	8002308 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e070      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x7b0>
 8005ee2:	e068      	b.n	8005fb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ee4:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005eea:	4b35      	ldr	r3, [pc, #212]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d031      	beq.n	8005f5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f003 0203 	and.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d12a      	bne.n	8005f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d122      	bne.n	8005f5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d11a      	bne.n	8005f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0a5b      	lsrs	r3, r3, #9
 8005f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d111      	bne.n	8005f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d108      	bne.n	8005f5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0e1b      	lsrs	r3, r3, #24
 8005f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e02b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f60:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d01f      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f82:	f7fc f9c1 	bl	8002308 <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f88:	bf00      	nop
 8005f8a:	f7fc f9bd 	bl	8002308 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d0f9      	beq.n	8005f8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f96:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <HAL_RCC_OscConfig+0x8b0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fa2:	00d2      	lsls	r2, r2, #3
 8005fa4:	4906      	ldr	r1, [pc, #24]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <HAL_RCC_OscConfig+0x8ac>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3730      	adds	r7, #48	@ 0x30
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	ffff0007 	.word	0xffff0007

08005fc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e19c      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b8a      	ldr	r3, [pc, #552]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d910      	bls.n	800600c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b87      	ldr	r3, [pc, #540]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f023 020f 	bic.w	r2, r3, #15
 8005ff2:	4985      	ldr	r1, [pc, #532]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	4b83      	ldr	r3, [pc, #524]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e184      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	4b7b      	ldr	r3, [pc, #492]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006024:	429a      	cmp	r2, r3
 8006026:	d908      	bls.n	800603a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006028:	4b78      	ldr	r3, [pc, #480]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4975      	ldr	r1, [pc, #468]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006036:	4313      	orrs	r3, r2
 8006038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d010      	beq.n	8006068 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	4b70      	ldr	r3, [pc, #448]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006052:	429a      	cmp	r2, r3
 8006054:	d908      	bls.n	8006068 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006056:	4b6d      	ldr	r3, [pc, #436]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	496a      	ldr	r1, [pc, #424]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006064:	4313      	orrs	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b64      	ldr	r3, [pc, #400]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006080:	429a      	cmp	r2, r3
 8006082:	d908      	bls.n	8006096 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006084:	4b61      	ldr	r3, [pc, #388]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	495e      	ldr	r1, [pc, #376]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006092:	4313      	orrs	r3, r2
 8006094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d010      	beq.n	80060c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69da      	ldr	r2, [r3, #28]
 80060a6:	4b59      	ldr	r3, [pc, #356]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d908      	bls.n	80060c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060b2:	4b56      	ldr	r3, [pc, #344]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	4953      	ldr	r1, [pc, #332]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	4b4d      	ldr	r3, [pc, #308]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	429a      	cmp	r2, r3
 80060de:	d908      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f023 020f 	bic.w	r2, r3, #15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4947      	ldr	r1, [pc, #284]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d055      	beq.n	80061aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4940      	ldr	r1, [pc, #256]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800610c:	4313      	orrs	r3, r2
 800610e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d107      	bne.n	8006128 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006118:	4b3c      	ldr	r3, [pc, #240]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d121      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0f6      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006130:	4b36      	ldr	r3, [pc, #216]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d115      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0ea      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d107      	bne.n	8006158 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006148:	4b30      	ldr	r3, [pc, #192]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0de      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006158:	4b2c      	ldr	r3, [pc, #176]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d6      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006168:	4b28      	ldr	r3, [pc, #160]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f023 0207 	bic.w	r2, r3, #7
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4925      	ldr	r1, [pc, #148]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006176:	4313      	orrs	r3, r2
 8006178:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617a:	f7fc f8c5 	bl	8002308 <HAL_GetTick>
 800617e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006180:	e00a      	b.n	8006198 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006182:	f7fc f8c1 	bl	8002308 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e0be      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006198:	4b1c      	ldr	r3, [pc, #112]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d1eb      	bne.n	8006182 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d010      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d208      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c6:	4b11      	ldr	r3, [pc, #68]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f023 020f 	bic.w	r2, r3, #15
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	490e      	ldr	r1, [pc, #56]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d214      	bcs.n	8006210 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b08      	ldr	r3, [pc, #32]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 020f 	bic.w	r2, r3, #15
 80061ee:	4906      	ldr	r1, [pc, #24]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e086      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
 8006208:	52002000 	.word	0x52002000
 800620c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d010      	beq.n	800623e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	4b3f      	ldr	r3, [pc, #252]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006228:	429a      	cmp	r2, r3
 800622a:	d208      	bcs.n	800623e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800622c:	4b3c      	ldr	r3, [pc, #240]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4939      	ldr	r1, [pc, #228]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800623a:	4313      	orrs	r3, r2
 800623c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d010      	beq.n	800626c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006256:	429a      	cmp	r2, r3
 8006258:	d208      	bcs.n	800626c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800625a:	4b31      	ldr	r3, [pc, #196]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	492e      	ldr	r1, [pc, #184]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006268:	4313      	orrs	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	4b28      	ldr	r3, [pc, #160]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006284:	429a      	cmp	r2, r3
 8006286:	d208      	bcs.n	800629a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	4922      	ldr	r1, [pc, #136]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006296:	4313      	orrs	r3, r2
 8006298:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d208      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	4917      	ldr	r1, [pc, #92]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062c8:	f000 f834 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b14      	ldr	r3, [pc, #80]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	4912      	ldr	r1, [pc, #72]	@ (8006324 <HAL_RCC_ClockConfig+0x35c>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006324 <HAL_RCC_ClockConfig+0x35c>)
 80062f0:	5cd3      	ldrb	r3, [r2, r3]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006328 <HAL_RCC_ClockConfig+0x360>)
 80062fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006300:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <HAL_RCC_ClockConfig+0x364>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <HAL_RCC_ClockConfig+0x368>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fb fc6a 	bl	8001be4 <HAL_InitTick>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	0801c948 	.word	0x0801c948
 8006328:	24000004 	.word	0x24000004
 800632c:	24000000 	.word	0x24000000
 8006330:	24000028 	.word	0x24000028

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800633a:	4bb3      	ldr	r3, [pc, #716]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006342:	2b18      	cmp	r3, #24
 8006344:	f200 8155 	bhi.w	80065f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_RCC_GetSysClockFreq+0x1c>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080065f3 	.word	0x080065f3
 8006358:	080065f3 	.word	0x080065f3
 800635c:	080065f3 	.word	0x080065f3
 8006360:	080065f3 	.word	0x080065f3
 8006364:	080065f3 	.word	0x080065f3
 8006368:	080065f3 	.word	0x080065f3
 800636c:	080065f3 	.word	0x080065f3
 8006370:	080063db 	.word	0x080063db
 8006374:	080065f3 	.word	0x080065f3
 8006378:	080065f3 	.word	0x080065f3
 800637c:	080065f3 	.word	0x080065f3
 8006380:	080065f3 	.word	0x080065f3
 8006384:	080065f3 	.word	0x080065f3
 8006388:	080065f3 	.word	0x080065f3
 800638c:	080065f3 	.word	0x080065f3
 8006390:	080063e1 	.word	0x080063e1
 8006394:	080065f3 	.word	0x080065f3
 8006398:	080065f3 	.word	0x080065f3
 800639c:	080065f3 	.word	0x080065f3
 80063a0:	080065f3 	.word	0x080065f3
 80063a4:	080065f3 	.word	0x080065f3
 80063a8:	080065f3 	.word	0x080065f3
 80063ac:	080065f3 	.word	0x080065f3
 80063b0:	080063e7 	.word	0x080063e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b94      	ldr	r3, [pc, #592]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c0:	4b91      	ldr	r3, [pc, #580]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a90      	ldr	r2, [pc, #576]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063d2:	e111      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063d4:	4b8d      	ldr	r3, [pc, #564]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063d6:	61bb      	str	r3, [r7, #24]
      break;
 80063d8:	e10e      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063da:	4b8d      	ldr	r3, [pc, #564]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063dc:	61bb      	str	r3, [r7, #24]
      break;
 80063de:	e10b      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063e2:	61bb      	str	r3, [r7, #24]
      break;
 80063e4:	e108      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e6:	4b88      	ldr	r3, [pc, #544]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063f0:	4b85      	ldr	r3, [pc, #532]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063fc:	4b82      	ldr	r3, [pc, #520]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006406:	4b80      	ldr	r3, [pc, #512]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640a:	08db      	lsrs	r3, r3, #3
 800640c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80e1 	beq.w	80065ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b02      	cmp	r3, #2
 800642e:	f000 8083 	beq.w	8006538 <HAL_RCC_GetSysClockFreq+0x204>
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f200 80a1 	bhi.w	800657c <HAL_RCC_GetSysClockFreq+0x248>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x114>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d056      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006446:	e099      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006448:	4b6f      	ldr	r3, [pc, #444]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d02d      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006454:	4b6c      	ldr	r3, [pc, #432]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	4a6b      	ldr	r2, [pc, #428]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b62      	ldr	r3, [pc, #392]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006492:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ae:	e087      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800661c <HAL_RCC_GetSysClockFreq+0x2e8>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b51      	ldr	r3, [pc, #324]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064f2:	e065      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006620 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b40      	ldr	r3, [pc, #256]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a02 	vldr	s12, [r7, #8]
 800651a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006536:	e043      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b2f      	ldr	r3, [pc, #188]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a02 	vldr	s12, [r7, #8]
 800655e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800657a:	e021      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006620 <HAL_RCC_GetSysClockFreq+0x2ec>
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659e:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065c0:	4b11      	ldr	r3, [pc, #68]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c4:	0a5b      	lsrs	r3, r3, #9
 80065c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ca:	3301      	adds	r3, #1
 80065cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80065dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065e4:	ee17 3a90 	vmov	r3, s15
 80065e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065ea:	e005      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
      break;
 80065f0:	e002      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065f4:	61bb      	str	r3, [r7, #24]
      break;
 80065f6:	bf00      	nop
  }

  return sysclockfreq;
 80065f8:	69bb      	ldr	r3, [r7, #24]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3724      	adds	r7, #36	@ 0x24
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
 800660c:	03d09000 	.word	0x03d09000
 8006610:	003d0900 	.word	0x003d0900
 8006614:	017d7840 	.word	0x017d7840
 8006618:	46000000 	.word	0x46000000
 800661c:	4c742400 	.word	0x4c742400
 8006620:	4a742400 	.word	0x4a742400
 8006624:	4bbebc20 	.word	0x4bbebc20

08006628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800662e:	f7ff fe81 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8006632:	4602      	mov	r2, r0
 8006634:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <HAL_RCC_GetHCLKFreq+0x50>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	490f      	ldr	r1, [pc, #60]	@ (800667c <HAL_RCC_GetHCLKFreq+0x54>)
 8006640:	5ccb      	ldrb	r3, [r1, r3]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800664c:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <HAL_RCC_GetHCLKFreq+0x50>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	4a09      	ldr	r2, [pc, #36]	@ (800667c <HAL_RCC_GetHCLKFreq+0x54>)
 8006656:	5cd3      	ldrb	r3, [r2, r3]
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	4a07      	ldr	r2, [pc, #28]	@ (8006680 <HAL_RCC_GetHCLKFreq+0x58>)
 8006664:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006666:	4a07      	ldr	r2, [pc, #28]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <HAL_RCC_GetHCLKFreq+0x58>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	58024400 	.word	0x58024400
 800667c:	0801c948 	.word	0x0801c948
 8006680:	24000004 	.word	0x24000004
 8006684:	24000000 	.word	0x24000000

08006688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800668c:	f7ff ffcc 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4904      	ldr	r1, [pc, #16]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	0801c948 	.word	0x0801c948

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066b8:	f7ff ffb6 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4904      	ldr	r1, [pc, #16]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	58024400 	.word	0x58024400
 80066dc:	0801c948 	.word	0x0801c948

080066e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	223f      	movs	r2, #63	@ 0x3f
 80066ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066f0:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0207 	and.w	r2, r3, #7
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80066fc:	4b17      	ldr	r3, [pc, #92]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006708:	4b14      	ldr	r3, [pc, #80]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800672c:	4b0b      	ldr	r3, [pc, #44]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006738:	4b08      	ldr	r3, [pc, #32]	@ (800675c <HAL_RCC_GetClockConfig+0x7c>)
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006744:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <HAL_RCC_GetClockConfig+0x80>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	601a      	str	r2, [r3, #0]
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	58024400 	.word	0x58024400
 8006760:	52002000 	.word	0x52002000

08006764 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006768:	b0ca      	sub	sp, #296	@ 0x128
 800676a:	af00      	add	r7, sp, #0
 800676c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006776:	2300      	movs	r3, #0
 8006778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006788:	2500      	movs	r5, #0
 800678a:	ea54 0305 	orrs.w	r3, r4, r5
 800678e:	d049      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800679a:	d02f      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800679c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067a0:	d828      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067a6:	d01a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ac:	d822      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067b6:	d007      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067b8:	e01c      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ba:	4bb8      	ldr	r3, [pc, #736]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	4ab7      	ldr	r2, [pc, #732]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067c6:	e01a      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	3308      	adds	r3, #8
 80067ce:	2102      	movs	r1, #2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 fc8f 	bl	80080f4 <RCCEx_PLL2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067dc:	e00f      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2102      	movs	r1, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fd36 	bl	8008258 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006806:	4ba5      	ldr	r3, [pc, #660]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006814:	4aa1      	ldr	r2, [pc, #644]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006816:	430b      	orrs	r3, r1
 8006818:	6513      	str	r3, [r2, #80]	@ 0x50
 800681a:	e003      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006830:	f04f 0900 	mov.w	r9, #0
 8006834:	ea58 0309 	orrs.w	r3, r8, r9
 8006838:	d047      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006840:	2b04      	cmp	r3, #4
 8006842:	d82a      	bhi.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006844:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006861 	.word	0x08006861
 8006850:	0800686f 	.word	0x0800686f
 8006854:	08006885 	.word	0x08006885
 8006858:	080068a3 	.word	0x080068a3
 800685c:	080068a3 	.word	0x080068a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006860:	4b8e      	ldr	r3, [pc, #568]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	4a8d      	ldr	r2, [pc, #564]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800686a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800686c:	e01a      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006872:	3308      	adds	r3, #8
 8006874:	2100      	movs	r1, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fc3c 	bl	80080f4 <RCCEx_PLL2_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006882:	e00f      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	3328      	adds	r3, #40	@ 0x28
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fce3 	bl	8008258 <RCCEx_PLL3_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006898:	e004      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068ac:	4b7b      	ldr	r3, [pc, #492]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b0:	f023 0107 	bic.w	r1, r3, #7
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ba:	4a78      	ldr	r2, [pc, #480]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6513      	str	r3, [r2, #80]	@ 0x50
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80068d6:	f04f 0b00 	mov.w	fp, #0
 80068da:	ea5a 030b 	orrs.w	r3, sl, fp
 80068de:	d04c      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ea:	d030      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f0:	d829      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068f4:	d02d      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068f8:	d825      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068fa:	2b80      	cmp	r3, #128	@ 0x80
 80068fc:	d018      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068fe:	2b80      	cmp	r3, #128	@ 0x80
 8006900:	d821      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006906:	2b40      	cmp	r3, #64	@ 0x40
 8006908:	d007      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800690a:	e01c      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4b63      	ldr	r3, [pc, #396]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a62      	ldr	r2, [pc, #392]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006918:	e01c      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	3308      	adds	r3, #8
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fbe6 	bl	80080f4 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800692e:	e011      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	3328      	adds	r3, #40	@ 0x28
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fc8d 	bl	8008258 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800695c:	4b4f      	ldr	r3, [pc, #316]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800695e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006960:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696a:	4a4c      	ldr	r2, [pc, #304]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006986:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006990:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d053      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069a6:	d035      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80069a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069ac:	d82e      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069b2:	d031      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80069b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069b8:	d828      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069be:	d01a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c4:	d822      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80069ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ce:	d007      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80069d0:	e01c      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d2:	4b32      	ldr	r3, [pc, #200]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	4a31      	ldr	r2, [pc, #196]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069de:	e01c      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	3308      	adds	r3, #8
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fb83 	bl	80080f4 <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069f4:	e011      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	3328      	adds	r3, #40	@ 0x28
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 fc2a 	bl	8008258 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e006      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a12:	e002      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a22:	4b1e      	ldr	r3, [pc, #120]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a32:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006a58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d056      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a6e:	d038      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a74:	d831      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a7a:	d034      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a80:	d82b      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a86:	d01d      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a8c:	d825      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a96:	d00a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a98:	e01f      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4ba2      	ldr	r3, [pc, #648]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4aa1      	ldr	r2, [pc, #644]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aac:	e01c      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fb1c 	bl	80080f4 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e011      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fbc3 	bl	8008258 <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae0:	e002      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10b      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006af0:	4b8e      	ldr	r3, [pc, #568]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b00:	4a8a      	ldr	r2, [pc, #552]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d03a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b36:	2b30      	cmp	r3, #48	@ 0x30
 8006b38:	d01f      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b3a:	2b30      	cmp	r3, #48	@ 0x30
 8006b3c:	d819      	bhi.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d00c      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d815      	bhi.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d019      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d111      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4e:	4b77      	ldr	r3, [pc, #476]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	4a76      	ldr	r2, [pc, #472]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b5a:	e011      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	3308      	adds	r3, #8
 8006b62:	2102      	movs	r1, #2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 fac5 	bl	80080f4 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b70:	e006      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b78:	e002      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b88:	4b68      	ldr	r3, [pc, #416]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b96:	4a65      	ldr	r2, [pc, #404]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006bbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	d051      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bd0:	d035      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bd6:	d82e      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bdc:	d031      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006bde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006be2:	d828      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be8:	d01a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bee:	d822      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf8:	d007      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006bfa:	e01c      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	4a4a      	ldr	r2, [pc, #296]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c08:	e01c      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	3308      	adds	r3, #8
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 fa6e 	bl	80080f4 <RCCEx_PLL2_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c1e:	e011      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c24:	3328      	adds	r3, #40	@ 0x28
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 fb15 	bl	8008258 <RCCEx_PLL3_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c3c:	e002      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c4c:	4b37      	ldr	r3, [pc, #220]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5a:	4a34      	ldr	r2, [pc, #208]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d056      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c94:	d033      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c9a:	d82c      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ca0:	d02f      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006ca2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ca6:	d826      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ca8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cac:	d02b      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006cae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cb2:	d820      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cb8:	d012      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006cba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cbe:	d81a      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d022      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d115      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cce:	3308      	adds	r3, #8
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fa0e 	bl	80080f4 <RCCEx_PLL2_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cde:	e015      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	3328      	adds	r3, #40	@ 0x28
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fab5 	bl	8008258 <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cf4:	e00a      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cfc:	e006      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cfe:	bf00      	nop
 8006d00:	e004      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d22:	4a02      	ldr	r2, [pc, #8]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d055      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d64:	d033      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d6a:	d82c      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d70:	d02f      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d76:	d826      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d7c:	d02b      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d82:	d820      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d88:	d012      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d8e:	d81a      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d022      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d98:	d115      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9e:	3308      	adds	r3, #8
 8006da0:	2101      	movs	r1, #1
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f9a6 	bl	80080f4 <RCCEx_PLL2_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dae:	e015      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	3328      	adds	r3, #40	@ 0x28
 8006db6:	2101      	movs	r1, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fa4d 	bl	8008258 <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dcc:	e006      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e004      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006de4:	4ba3      	ldr	r3, [pc, #652]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006df4:	4a9f      	ldr	r2, [pc, #636]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4313      	orrs	r3, r2
 8006e22:	d037      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e2e:	d00e      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e34:	d816      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d018      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e3e:	d111      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b8c      	ldr	r3, [pc, #560]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a8b      	ldr	r2, [pc, #556]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e4c:	e00f      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	3308      	adds	r3, #8
 8006e54:	2101      	movs	r1, #1
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f94c 	bl	80080f4 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e62:	e004      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e76:	4b7f      	ldr	r3, [pc, #508]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e84:	4a7b      	ldr	r2, [pc, #492]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006eaa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	d039      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d81c      	bhi.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006f01 	.word	0x08006f01
 8006ec8:	08006ed5 	.word	0x08006ed5
 8006ecc:	08006ee3 	.word	0x08006ee3
 8006ed0:	08006f01 	.word	0x08006f01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed4:	4b67      	ldr	r3, [pc, #412]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	4a66      	ldr	r2, [pc, #408]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ee0:	e00f      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	2102      	movs	r1, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f902 	bl	80080f4 <RCCEx_PLL2_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ef6:	e004      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efe:	e000      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0e:	f023 0103 	bic.w	r1, r3, #3
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f18:	4a56      	ldr	r2, [pc, #344]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f000 809f 	beq.w	8007088 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f56:	f7fb f9d7 	bl	8002308 <HAL_GetTick>
 8006f5a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f5e:	e00b      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f60:	f7fb f9d2 	bl	8002308 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b64      	cmp	r3, #100	@ 0x64
 8006f6e:	d903      	bls.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f76:	e005      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f78:	4b3f      	ldr	r3, [pc, #252]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0ed      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d179      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f8c:	4b39      	ldr	r3, [pc, #228]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f98:	4053      	eors	r3, r2
 8006f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d015      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa2:	4b34      	ldr	r3, [pc, #208]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006faa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fae:	4b31      	ldr	r3, [pc, #196]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb2:	4a30      	ldr	r2, [pc, #192]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fba:	4b2e      	ldr	r3, [pc, #184]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fc4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fcc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fda:	d118      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fb f994 	bl	8002308 <HAL_GetTick>
 8006fe0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fe4:	e00d      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe6:	f7fb f98f 	bl	8002308 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d903      	bls.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007000:	e005      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007002:	4b1c      	ldr	r3, [pc, #112]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0eb      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007012:	2b00      	cmp	r3, #0
 8007014:	d129      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800701e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007026:	d10e      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007028:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007038:	091a      	lsrs	r2, r3, #4
 800703a:	4b10      	ldr	r3, [pc, #64]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800703c:	4013      	ands	r3, r2
 800703e:	4a0d      	ldr	r2, [pc, #52]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007040:	430b      	orrs	r3, r1
 8007042:	6113      	str	r3, [r2, #16]
 8007044:	e005      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007046:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4a0a      	ldr	r2, [pc, #40]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007050:	6113      	str	r3, [r2, #16]
 8007052:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007054:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800705e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007062:	4a04      	ldr	r2, [pc, #16]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6713      	str	r3, [r2, #112]	@ 0x70
 8007068:	e00e      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007072:	e009      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007074:	58024400 	.word	0x58024400
 8007078:	58024800 	.word	0x58024800
 800707c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f002 0301 	and.w	r3, r2, #1
 8007094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007098:	2300      	movs	r3, #0
 800709a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800709e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f000 8089 	beq.w	80071bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070b0:	2b28      	cmp	r3, #40	@ 0x28
 80070b2:	d86b      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	08007195 	.word	0x08007195
 80070c0:	0800718d 	.word	0x0800718d
 80070c4:	0800718d 	.word	0x0800718d
 80070c8:	0800718d 	.word	0x0800718d
 80070cc:	0800718d 	.word	0x0800718d
 80070d0:	0800718d 	.word	0x0800718d
 80070d4:	0800718d 	.word	0x0800718d
 80070d8:	0800718d 	.word	0x0800718d
 80070dc:	08007161 	.word	0x08007161
 80070e0:	0800718d 	.word	0x0800718d
 80070e4:	0800718d 	.word	0x0800718d
 80070e8:	0800718d 	.word	0x0800718d
 80070ec:	0800718d 	.word	0x0800718d
 80070f0:	0800718d 	.word	0x0800718d
 80070f4:	0800718d 	.word	0x0800718d
 80070f8:	0800718d 	.word	0x0800718d
 80070fc:	08007177 	.word	0x08007177
 8007100:	0800718d 	.word	0x0800718d
 8007104:	0800718d 	.word	0x0800718d
 8007108:	0800718d 	.word	0x0800718d
 800710c:	0800718d 	.word	0x0800718d
 8007110:	0800718d 	.word	0x0800718d
 8007114:	0800718d 	.word	0x0800718d
 8007118:	0800718d 	.word	0x0800718d
 800711c:	08007195 	.word	0x08007195
 8007120:	0800718d 	.word	0x0800718d
 8007124:	0800718d 	.word	0x0800718d
 8007128:	0800718d 	.word	0x0800718d
 800712c:	0800718d 	.word	0x0800718d
 8007130:	0800718d 	.word	0x0800718d
 8007134:	0800718d 	.word	0x0800718d
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007195 	.word	0x08007195
 8007140:	0800718d 	.word	0x0800718d
 8007144:	0800718d 	.word	0x0800718d
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800718d 	.word	0x0800718d
 8007150:	0800718d 	.word	0x0800718d
 8007154:	0800718d 	.word	0x0800718d
 8007158:	0800718d 	.word	0x0800718d
 800715c:	08007195 	.word	0x08007195
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007164:	3308      	adds	r3, #8
 8007166:	2101      	movs	r1, #1
 8007168:	4618      	mov	r0, r3
 800716a:	f000 ffc3 	bl	80080f4 <RCCEx_PLL2_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007174:	e00f      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	3328      	adds	r3, #40	@ 0x28
 800717c:	2101      	movs	r1, #1
 800717e:	4618      	mov	r0, r3
 8007180:	f001 f86a 	bl	8008258 <RCCEx_PLL3_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800718a:	e004      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800719e:	4bbf      	ldr	r3, [pc, #764]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ac:	4abb      	ldr	r2, [pc, #748]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071ae:	430b      	orrs	r3, r1
 80071b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071b2:	e003      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f002 0302 	and.w	r3, r2, #2
 80071c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80071d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d041      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d824      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007239 	.word	0x08007239
 80071f0:	08007205 	.word	0x08007205
 80071f4:	0800721b 	.word	0x0800721b
 80071f8:	08007239 	.word	0x08007239
 80071fc:	08007239 	.word	0x08007239
 8007200:	08007239 	.word	0x08007239
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	3308      	adds	r3, #8
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f000 ff71 	bl	80080f4 <RCCEx_PLL2_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007218:	e00f      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	3328      	adds	r3, #40	@ 0x28
 8007220:	2101      	movs	r1, #1
 8007222:	4618      	mov	r0, r3
 8007224:	f001 f818 	bl	8008258 <RCCEx_PLL3_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800722e:	e004      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007236:	e000      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007242:	4b96      	ldr	r3, [pc, #600]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007246:	f023 0107 	bic.w	r1, r3, #7
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007250:	4a92      	ldr	r2, [pc, #584]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007252:	430b      	orrs	r3, r1
 8007254:	6553      	str	r3, [r2, #84]	@ 0x54
 8007256:	e003      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f002 0304 	and.w	r3, r2, #4
 800726c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007276:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d044      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007288:	2b05      	cmp	r3, #5
 800728a:	d825      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800728c:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072c3 	.word	0x080072c3
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072e1 	.word	0x080072e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	3308      	adds	r3, #8
 80072b2:	2101      	movs	r1, #1
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 ff1d 	bl	80080f4 <RCCEx_PLL2_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072c0:	e00f      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	3328      	adds	r3, #40	@ 0x28
 80072c8:	2101      	movs	r1, #1
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ffc4 	bl	8008258 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072d6:	e004      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072de:	e000      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072ea:	4b6c      	ldr	r3, [pc, #432]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ee:	f023 0107 	bic.w	r1, r3, #7
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072fa:	4a68      	ldr	r2, [pc, #416]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007300:	e003      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f002 0320 	and.w	r3, r2, #32
 8007316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800731a:	2300      	movs	r3, #0
 800731c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007324:	460b      	mov	r3, r1
 8007326:	4313      	orrs	r3, r2
 8007328:	d055      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007336:	d033      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800733c:	d82c      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007342:	d02f      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007348:	d826      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800734a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800734e:	d02b      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007354:	d820      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800735a:	d012      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007360:	d81a      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d022      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800736a:	d115      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	3308      	adds	r3, #8
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f000 febd 	bl	80080f4 <RCCEx_PLL2_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007380:	e015      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	3328      	adds	r3, #40	@ 0x28
 8007388:	2102      	movs	r1, #2
 800738a:	4618      	mov	r0, r3
 800738c:	f000 ff64 	bl	8008258 <RCCEx_PLL3_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007396:	e00a      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800739e:	e006      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073a0:	bf00      	nop
 80073a2:	e004      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073a4:	bf00      	nop
 80073a6:	e002      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073a8:	bf00      	nop
 80073aa:	e000      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073b6:	4b39      	ldr	r3, [pc, #228]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c6:	4a35      	ldr	r2, [pc, #212]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80073e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073e6:	2300      	movs	r3, #0
 80073e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4313      	orrs	r3, r2
 80073f4:	d058      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007402:	d033      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007404:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007408:	d82c      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800740a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740e:	d02f      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007414:	d826      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800741a:	d02b      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800741c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007420:	d820      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007426:	d012      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800742c:	d81a      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d022      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007436:	d115      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743c:	3308      	adds	r3, #8
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fe57 	bl	80080f4 <RCCEx_PLL2_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800744c:	e015      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	3328      	adds	r3, #40	@ 0x28
 8007454:	2102      	movs	r1, #2
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fefe 	bl	8008258 <RCCEx_PLL3_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007462:	e00a      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800746a:	e006      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800746c:	bf00      	nop
 800746e:	e004      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007470:	bf00      	nop
 8007472:	e002      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10e      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007482:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007486:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007492:	4a02      	ldr	r2, [pc, #8]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007494:	430b      	orrs	r3, r1
 8007496:	6593      	str	r3, [r2, #88]	@ 0x58
 8007498:	e006      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d055      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074d4:	d033      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80074d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074da:	d82c      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e0:	d02f      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e6:	d826      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074ec:	d02b      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074f2:	d820      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074f8:	d012      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80074fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074fe:	d81a      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d022      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007508:	d115      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	3308      	adds	r3, #8
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fdee 	bl	80080f4 <RCCEx_PLL2_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800751e:	e015      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	3328      	adds	r3, #40	@ 0x28
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fe95 	bl	8008258 <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007534:	e00a      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800753c:	e006      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800753e:	bf00      	nop
 8007540:	e004      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007542:	bf00      	nop
 8007544:	e002      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800754a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10b      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007554:	4ba1      	ldr	r3, [pc, #644]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007558:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007560:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007564:	4a9d      	ldr	r2, [pc, #628]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007566:	430b      	orrs	r3, r1
 8007568:	6593      	str	r3, [r2, #88]	@ 0x58
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f002 0308 	and.w	r3, r2, #8
 8007580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007584:	2300      	movs	r3, #0
 8007586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800758a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800758e:	460b      	mov	r3, r1
 8007590:	4313      	orrs	r3, r2
 8007592:	d01e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a0:	d10c      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	3328      	adds	r3, #40	@ 0x28
 80075a8:	2102      	movs	r1, #2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fe54 	bl	8008258 <RCCEx_PLL3_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075bc:	4b87      	ldr	r3, [pc, #540]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075cc:	4a83      	ldr	r2, [pc, #524]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f002 0310 	and.w	r3, r2, #16
 80075de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d01e      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075fe:	d10c      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007604:	3328      	adds	r3, #40	@ 0x28
 8007606:	2102      	movs	r1, #2
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fe25 	bl	8008258 <RCCEx_PLL3_Config>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800761a:	4b70      	ldr	r3, [pc, #448]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800762a:	4a6c      	ldr	r2, [pc, #432]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800763c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007640:	2300      	movs	r3, #0
 8007642:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007646:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800764a:	460b      	mov	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	d03e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765c:	d022      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007662:	d81b      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800766c:	d00b      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800766e:	e015      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	3308      	adds	r3, #8
 8007676:	2100      	movs	r1, #0
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fd3b 	bl	80080f4 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3328      	adds	r3, #40	@ 0x28
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fde2 	bl	8008258 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10b      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ae:	4b4b      	ldr	r3, [pc, #300]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076be:	4a47      	ldr	r2, [pc, #284]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076dc:	2300      	movs	r3, #0
 80076de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80076e4:	460b      	mov	r3, r1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	d03b      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076f6:	d01f      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80076f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076fc:	d818      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80076fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007702:	d003      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007708:	d007      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800770a:	e011      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800770c:	4b33      	ldr	r3, [pc, #204]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4a32      	ldr	r2, [pc, #200]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007718:	e00f      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771e:	3328      	adds	r3, #40	@ 0x28
 8007720:	2101      	movs	r1, #1
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fd98 	bl	8008258 <RCCEx_PLL3_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800772e:	e004      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007736:	e000      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007742:	4b26      	ldr	r3, [pc, #152]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007752:	4a22      	ldr	r2, [pc, #136]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007754:	430b      	orrs	r3, r1
 8007756:	6553      	str	r3, [r2, #84]	@ 0x54
 8007758:	e003      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800776e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007770:	2300      	movs	r3, #0
 8007772:	677b      	str	r3, [r7, #116]	@ 0x74
 8007774:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007778:	460b      	mov	r3, r1
 800777a:	4313      	orrs	r3, r2
 800777c:	d034      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778c:	d007      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800778e:	e011      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007790:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	4a11      	ldr	r2, [pc, #68]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800779a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800779c:	e00e      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	3308      	adds	r3, #8
 80077a4:	2102      	movs	r1, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fca4 	bl	80080f4 <RCCEx_PLL2_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077b2:	e003      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10d      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077c4:	4b05      	ldr	r3, [pc, #20]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d2:	4a02      	ldr	r2, [pc, #8]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077d8:	e006      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077da:	bf00      	nop
 80077dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f6:	2300      	movs	r3, #0
 80077f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077fe:	460b      	mov	r3, r1
 8007800:	4313      	orrs	r3, r2
 8007802:	d00c      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	3328      	adds	r3, #40	@ 0x28
 800780a:	2102      	movs	r1, #2
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fd23 	bl	8008258 <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800782a:	663b      	str	r3, [r7, #96]	@ 0x60
 800782c:	2300      	movs	r3, #0
 800782e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007830:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007834:	460b      	mov	r3, r1
 8007836:	4313      	orrs	r3, r2
 8007838:	d038      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007846:	d018      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800784c:	d811      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800784e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007852:	d014      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007858:	d80b      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d011      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800785e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007862:	d106      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4bc3      	ldr	r3, [pc, #780]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	4ac2      	ldr	r2, [pc, #776]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007870:	e008      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007878:	e004      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10b      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800788c:	4bb9      	ldr	r3, [pc, #740]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007890:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789c:	4ab5      	ldr	r2, [pc, #724]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80078b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078ba:	2300      	movs	r3, #0
 80078bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078c2:	460b      	mov	r3, r1
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078c8:	4baa      	ldr	r3, [pc, #680]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d6:	4aa7      	ldr	r2, [pc, #668]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078d8:	430b      	orrs	r3, r1
 80078da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80078e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ea:	2300      	movs	r3, #0
 80078ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80078ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078f2:	460b      	mov	r3, r1
 80078f4:	4313      	orrs	r3, r2
 80078f6:	d00a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007908:	4a9a      	ldr	r2, [pc, #616]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800790a:	430b      	orrs	r3, r1
 800790c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800791a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800791c:	2300      	movs	r3, #0
 800791e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007920:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007924:	460b      	mov	r3, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d009      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800792a:	4b92      	ldr	r3, [pc, #584]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007938:	4a8e      	ldr	r2, [pc, #568]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800793a:	430b      	orrs	r3, r1
 800793c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800794a:	643b      	str	r3, [r7, #64]	@ 0x40
 800794c:	2300      	movs	r3, #0
 800794e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007950:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007954:	460b      	mov	r3, r1
 8007956:	4313      	orrs	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800795a:	4b86      	ldr	r3, [pc, #536]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	4a85      	ldr	r2, [pc, #532]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007960:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007964:	6113      	str	r3, [r2, #16]
 8007966:	4b83      	ldr	r3, [pc, #524]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007968:	6919      	ldr	r1, [r3, #16]
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007972:	4a80      	ldr	r2, [pc, #512]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007974:	430b      	orrs	r3, r1
 8007976:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007986:	2300      	movs	r3, #0
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800798a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007994:	4b77      	ldr	r3, [pc, #476]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007998:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	4a74      	ldr	r2, [pc, #464]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80079b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b6:	2300      	movs	r3, #0
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079c4:	4b6b      	ldr	r3, [pc, #428]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079d4:	4a67      	ldr	r2, [pc, #412]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	2100      	movs	r1, #0
 80079e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079f0:	460b      	mov	r3, r1
 80079f2:	4313      	orrs	r3, r2
 80079f4:	d011      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fa:	3308      	adds	r3, #8
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fb78 	bl	80080f4 <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	2100      	movs	r1, #0
 8007a24:	6239      	str	r1, [r7, #32]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a30:	460b      	mov	r3, r1
 8007a32:	4313      	orrs	r3, r2
 8007a34:	d011      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fb58 	bl	80080f4 <RCCEx_PLL2_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	2100      	movs	r1, #0
 8007a64:	61b9      	str	r1, [r7, #24]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a70:	460b      	mov	r3, r1
 8007a72:	4313      	orrs	r3, r2
 8007a74:	d011      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	2102      	movs	r1, #2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fb38 	bl	80080f4 <RCCEx_PLL2_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	6139      	str	r1, [r7, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	d011      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aba:	3328      	adds	r3, #40	@ 0x28
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fbca 	bl	8008258 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007af0:	460b      	mov	r3, r1
 8007af2:	4313      	orrs	r3, r2
 8007af4:	d011      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	3328      	adds	r3, #40	@ 0x28
 8007afc:	2101      	movs	r1, #1
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fbaa 	bl	8008258 <RCCEx_PLL3_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	2100      	movs	r1, #0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b30:	460b      	mov	r3, r1
 8007b32:	4313      	orrs	r3, r2
 8007b34:	d011      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3a:	3328      	adds	r3, #40	@ 0x28
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fb8a 	bl	8008258 <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007b5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b74:	58024400 	.word	0x58024400

08007b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b7c:	f7fe fd54 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	091b      	lsrs	r3, r3, #4
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4904      	ldr	r1, [pc, #16]	@ (8007ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	0801c948 	.word	0x0801c948

08007ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b089      	sub	sp, #36	@ 0x24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bac:	4ba1      	ldr	r3, [pc, #644]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bba:	0b1b      	lsrs	r3, r3, #12
 8007bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	091b      	lsrs	r3, r3, #4
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bce:	4b99      	ldr	r3, [pc, #612]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd2:	08db      	lsrs	r3, r3, #3
 8007bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8111 	beq.w	8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	f000 8083 	beq.w	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	f200 80a1 	bhi.w	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d056      	beq.n	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c0e:	e099      	b.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c10:	4b88      	ldr	r3, [pc, #544]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02d      	beq.n	8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c1c:	4b85      	ldr	r3, [pc, #532]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	08db      	lsrs	r3, r3, #3
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	4a84      	ldr	r2, [pc, #528]	@ (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	ee07 3a90 	vmov	s15, r3
 8007c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c46:	4b7b      	ldr	r3, [pc, #492]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c76:	e087      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cba:	e065      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cce:	4b59      	ldr	r3, [pc, #356]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfe:	e043      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b48      	ldr	r3, [pc, #288]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d42:	e021      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d56:	4b37      	ldr	r3, [pc, #220]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d88:	4b2a      	ldr	r3, [pc, #168]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	0a5b      	lsrs	r3, r3, #9
 8007d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dae:	ee17 2a90 	vmov	r2, s15
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007db6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ddc:	ee17 2a90 	vmov	r2, s15
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007de4:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	0e1b      	lsrs	r3, r3, #24
 8007dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0a:	ee17 2a90 	vmov	r2, s15
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e12:	e008      	b.n	8007e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	609a      	str	r2, [r3, #8]
}
 8007e26:	bf00      	nop
 8007e28:	3724      	adds	r7, #36	@ 0x24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	58024400 	.word	0x58024400
 8007e38:	03d09000 	.word	0x03d09000
 8007e3c:	46000000 	.word	0x46000000
 8007e40:	4c742400 	.word	0x4c742400
 8007e44:	4a742400 	.word	0x4a742400
 8007e48:	4bbebc20 	.word	0x4bbebc20

08007e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	@ 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e54:	4ba1      	ldr	r3, [pc, #644]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e5e:	4b9f      	ldr	r3, [pc, #636]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	0d1b      	lsrs	r3, r3, #20
 8007e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e76:	4b99      	ldr	r3, [pc, #612]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8111 	beq.w	80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	f000 8083 	beq.w	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f200 80a1 	bhi.w	8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d056      	beq.n	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007eb6:	e099      	b.n	8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb8:	4b88      	ldr	r3, [pc, #544]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02d      	beq.n	8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec4:	4b85      	ldr	r3, [pc, #532]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a84      	ldr	r2, [pc, #528]	@ (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b7b      	ldr	r3, [pc, #492]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f1e:	e087      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b6a      	ldr	r3, [pc, #424]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f62:	e065      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b59      	ldr	r3, [pc, #356]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa6:	e043      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80080f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b48      	ldr	r3, [pc, #288]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fea:	e021      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b37      	ldr	r3, [pc, #220]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008030:	4b2a      	ldr	r3, [pc, #168]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804a:	edd7 6a07 	vldr	s13, [r7, #28]
 800804e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008056:	ee17 2a90 	vmov	r2, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008078:	edd7 6a07 	vldr	s13, [r7, #28]
 800807c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008084:	ee17 2a90 	vmov	r2, s15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800808c:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b2:	ee17 2a90 	vmov	r2, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080ba:	e008      	b.n	80080ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
}
 80080ce:	bf00      	nop
 80080d0:	3724      	adds	r7, #36	@ 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	03d09000 	.word	0x03d09000
 80080e4:	46000000 	.word	0x46000000
 80080e8:	4c742400 	.word	0x4c742400
 80080ec:	4a742400 	.word	0x4a742400
 80080f0:	4bbebc20 	.word	0x4bbebc20

080080f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008102:	4b53      	ldr	r3, [pc, #332]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b03      	cmp	r3, #3
 800810c:	d101      	bne.n	8008112 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e099      	b.n	8008246 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008112:	4b4f      	ldr	r3, [pc, #316]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a4e      	ldr	r2, [pc, #312]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008118:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800811c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811e:	f7fa f8f3 	bl	8002308 <HAL_GetTick>
 8008122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008124:	e008      	b.n	8008138 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008126:	f7fa f8ef 	bl	8002308 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e086      	b.n	8008246 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008138:	4b45      	ldr	r3, [pc, #276]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f0      	bne.n	8008126 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008144:	4b42      	ldr	r3, [pc, #264]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	031b      	lsls	r3, r3, #12
 8008152:	493f      	ldr	r1, [pc, #252]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008154:	4313      	orrs	r3, r2
 8008156:	628b      	str	r3, [r1, #40]	@ 0x28
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	3b01      	subs	r3, #1
 800815e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	3b01      	subs	r3, #1
 8008168:	025b      	lsls	r3, r3, #9
 800816a:	b29b      	uxth	r3, r3
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	3b01      	subs	r3, #1
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	3b01      	subs	r3, #1
 8008182:	061b      	lsls	r3, r3, #24
 8008184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008188:	4931      	ldr	r1, [pc, #196]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 800818a:	4313      	orrs	r3, r2
 800818c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800818e:	4b30      	ldr	r3, [pc, #192]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	492d      	ldr	r1, [pc, #180]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 800819c:	4313      	orrs	r3, r2
 800819e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	f023 0220 	bic.w	r2, r3, #32
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	4928      	ldr	r1, [pc, #160]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081b2:	4b27      	ldr	r3, [pc, #156]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	4a26      	ldr	r2, [pc, #152]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081b8:	f023 0310 	bic.w	r3, r3, #16
 80081bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081be:	4b24      	ldr	r3, [pc, #144]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c2:	4b24      	ldr	r3, [pc, #144]	@ (8008254 <RCCEx_PLL2_Config+0x160>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	69d2      	ldr	r2, [r2, #28]
 80081ca:	00d2      	lsls	r2, r2, #3
 80081cc:	4920      	ldr	r1, [pc, #128]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	f043 0310 	orr.w	r3, r3, #16
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	4a19      	ldr	r2, [pc, #100]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081f0:	e00f      	b.n	8008212 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d106      	bne.n	8008206 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081f8:	4b15      	ldr	r3, [pc, #84]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	4a14      	ldr	r2, [pc, #80]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 80081fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008204:	e005      	b.n	8008212 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008206:	4b12      	ldr	r3, [pc, #72]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	4a11      	ldr	r2, [pc, #68]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 800820c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008210:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008212:	4b0f      	ldr	r3, [pc, #60]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a0e      	ldr	r2, [pc, #56]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 8008218:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800821c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821e:	f7fa f873 	bl	8002308 <HAL_GetTick>
 8008222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008224:	e008      	b.n	8008238 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008226:	f7fa f86f 	bl	8002308 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d901      	bls.n	8008238 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e006      	b.n	8008246 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008238:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <RCCEx_PLL2_Config+0x15c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0f0      	beq.n	8008226 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	58024400 	.word	0x58024400
 8008254:	ffff0007 	.word	0xffff0007

08008258 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008266:	4b53      	ldr	r3, [pc, #332]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b03      	cmp	r3, #3
 8008270:	d101      	bne.n	8008276 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e099      	b.n	80083aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008276:	4b4f      	ldr	r3, [pc, #316]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a4e      	ldr	r2, [pc, #312]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800827c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008282:	f7fa f841 	bl	8002308 <HAL_GetTick>
 8008286:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008288:	e008      	b.n	800829c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800828a:	f7fa f83d 	bl	8002308 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e086      	b.n	80083aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800829c:	4b45      	ldr	r3, [pc, #276]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f0      	bne.n	800828a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082a8:	4b42      	ldr	r3, [pc, #264]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	493f      	ldr	r1, [pc, #252]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	025b      	lsls	r3, r3, #9
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	041b      	lsls	r3, r3, #16
 80082da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	061b      	lsls	r3, r3, #24
 80082e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082ec:	4931      	ldr	r1, [pc, #196]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082f2:	4b30      	ldr	r3, [pc, #192]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	492d      	ldr	r1, [pc, #180]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008300:	4313      	orrs	r3, r2
 8008302:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008304:	4b2b      	ldr	r3, [pc, #172]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4928      	ldr	r1, [pc, #160]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008312:	4313      	orrs	r3, r2
 8008314:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008316:	4b27      	ldr	r3, [pc, #156]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831a:	4a26      	ldr	r2, [pc, #152]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800831c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008320:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008322:	4b24      	ldr	r3, [pc, #144]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008326:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <RCCEx_PLL3_Config+0x160>)
 8008328:	4013      	ands	r3, r2
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	69d2      	ldr	r2, [r2, #28]
 800832e:	00d2      	lsls	r2, r2, #3
 8008330:	4920      	ldr	r1, [pc, #128]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008332:	4313      	orrs	r3, r2
 8008334:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008336:	4b1f      	ldr	r3, [pc, #124]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833a:	4a1e      	ldr	r2, [pc, #120]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800833c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008348:	4b1a      	ldr	r3, [pc, #104]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800834a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834c:	4a19      	ldr	r2, [pc, #100]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800834e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008352:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008354:	e00f      	b.n	8008376 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d106      	bne.n	800836a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800835c:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800835e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008360:	4a14      	ldr	r2, [pc, #80]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008362:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008368:	e005      	b.n	8008376 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800836a:	4b12      	ldr	r3, [pc, #72]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	4a11      	ldr	r2, [pc, #68]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008370:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008374:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008376:	4b0f      	ldr	r3, [pc, #60]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a0e      	ldr	r2, [pc, #56]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800837c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008382:	f7f9 ffc1 	bl	8002308 <HAL_GetTick>
 8008386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008388:	e008      	b.n	800839c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800838a:	f7f9 ffbd 	bl	8002308 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d901      	bls.n	800839c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e006      	b.n	80083aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <RCCEx_PLL3_Config+0x15c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0f0      	beq.n	800838a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	58024400 	.word	0x58024400
 80083b8:	ffff0007 	.word	0xffff0007

080083bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e049      	b.n	8008462 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fdc8 	bl	8001f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f000 fad6 	bl	80089ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d001      	beq.n	8008484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e054      	b.n	800852e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a26      	ldr	r2, [pc, #152]	@ (800853c <HAL_TIM_Base_Start_IT+0xd0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d022      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ae:	d01d      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a22      	ldr	r2, [pc, #136]	@ (8008540 <HAL_TIM_Base_Start_IT+0xd4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d018      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a21      	ldr	r2, [pc, #132]	@ (8008544 <HAL_TIM_Base_Start_IT+0xd8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d013      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008548 <HAL_TIM_Base_Start_IT+0xdc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00e      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1e      	ldr	r2, [pc, #120]	@ (800854c <HAL_TIM_Base_Start_IT+0xe0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d009      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008550 <HAL_TIM_Base_Start_IT+0xe4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x80>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008554 <HAL_TIM_Base_Start_IT+0xe8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d115      	bne.n	8008518 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <HAL_TIM_Base_Start_IT+0xec>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b06      	cmp	r3, #6
 80084fc:	d015      	beq.n	800852a <HAL_TIM_Base_Start_IT+0xbe>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008504:	d011      	beq.n	800852a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008516:	e008      	b.n	800852a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e000      	b.n	800852c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40010000 	.word	0x40010000
 8008540:	40000400 	.word	0x40000400
 8008544:	40000800 	.word	0x40000800
 8008548:	40000c00 	.word	0x40000c00
 800854c:	40010400 	.word	0x40010400
 8008550:	40001800 	.word	0x40001800
 8008554:	40014000 	.word	0x40014000
 8008558:	00010007 	.word	0x00010007

0800855c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d020      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01b      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0202 	mvn.w	r2, #2
 8008590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9e2 	bl	8008970 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9d4 	bl	800895c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9e5 	bl	8008984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0204 	mvn.w	r2, #4
 80085dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f9bc 	bl	8008970 <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9ae 	bl	800895c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9bf 	bl	8008984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d020      	beq.n	8008658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0208 	mvn.w	r2, #8
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f996 	bl	8008970 <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f988 	bl	800895c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f999 	bl	8008984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b00      	cmp	r3, #0
 8008660:	d020      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0210 	mvn.w	r2, #16
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2208      	movs	r2, #8
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f970 	bl	8008970 <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f962 	bl	800895c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f973 	bl	8008984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0201 	mvn.w	r2, #1
 80086c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f9 f8e2 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fb31 	bl	8008d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00c      	beq.n	800871a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fb29 	bl	8008d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00c      	beq.n	800873e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f92d 	bl	8008998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f06f 0220 	mvn.w	r2, #32
 800875a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 faf1 	bl	8008d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIM_ConfigClockSource+0x1c>
 8008784:	2302      	movs	r3, #2
 8008786:	e0dc      	b.n	8008942 <HAL_TIM_ConfigClockSource+0x1d6>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4b6a      	ldr	r3, [pc, #424]	@ (800894c <HAL_TIM_ConfigClockSource+0x1e0>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a64      	ldr	r2, [pc, #400]	@ (8008950 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f000 80a9 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 80087c4:	4a62      	ldr	r2, [pc, #392]	@ (8008950 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	f200 80ae 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 80087cc:	4a61      	ldr	r2, [pc, #388]	@ (8008954 <HAL_TIM_ConfigClockSource+0x1e8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	f000 80a1 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 80087d4:	4a5f      	ldr	r2, [pc, #380]	@ (8008954 <HAL_TIM_ConfigClockSource+0x1e8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f200 80a6 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 80087dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008958 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	f000 8099 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 80087e4:	4a5c      	ldr	r2, [pc, #368]	@ (8008958 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	f200 809e 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 80087ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087f0:	f000 8091 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 80087f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087f8:	f200 8096 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 80087fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008800:	f000 8089 	beq.w	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 8008804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008808:	f200 808e 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 800880c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008810:	d03e      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x124>
 8008812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008816:	f200 8087 	bhi.w	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 800881a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881e:	f000 8086 	beq.w	800892e <HAL_TIM_ConfigClockSource+0x1c2>
 8008822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008826:	d87f      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008828:	2b70      	cmp	r3, #112	@ 0x70
 800882a:	d01a      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0xf6>
 800882c:	2b70      	cmp	r3, #112	@ 0x70
 800882e:	d87b      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008830:	2b60      	cmp	r3, #96	@ 0x60
 8008832:	d050      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x16a>
 8008834:	2b60      	cmp	r3, #96	@ 0x60
 8008836:	d877      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008838:	2b50      	cmp	r3, #80	@ 0x50
 800883a:	d03c      	beq.n	80088b6 <HAL_TIM_ConfigClockSource+0x14a>
 800883c:	2b50      	cmp	r3, #80	@ 0x50
 800883e:	d873      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008840:	2b40      	cmp	r3, #64	@ 0x40
 8008842:	d058      	beq.n	80088f6 <HAL_TIM_ConfigClockSource+0x18a>
 8008844:	2b40      	cmp	r3, #64	@ 0x40
 8008846:	d86f      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008848:	2b30      	cmp	r3, #48	@ 0x30
 800884a:	d064      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 800884c:	2b30      	cmp	r3, #48	@ 0x30
 800884e:	d86b      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008850:	2b20      	cmp	r3, #32
 8008852:	d060      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 8008854:	2b20      	cmp	r3, #32
 8008856:	d867      	bhi.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d05c      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 800885c:	2b10      	cmp	r3, #16
 800885e:	d05a      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x1aa>
 8008860:	e062      	b.n	8008928 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008872:	f000 f9b9 	bl	8008be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	609a      	str	r2, [r3, #8]
      break;
 800888e:	e04f      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088a0:	f000 f9a2 	bl	8008be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088b2:	609a      	str	r2, [r3, #8]
      break;
 80088b4:	e03c      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088c2:	461a      	mov	r2, r3
 80088c4:	f000 f912 	bl	8008aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2150      	movs	r1, #80	@ 0x50
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f96c 	bl	8008bac <TIM_ITRx_SetConfig>
      break;
 80088d4:	e02c      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088e2:	461a      	mov	r2, r3
 80088e4:	f000 f931 	bl	8008b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2160      	movs	r1, #96	@ 0x60
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f95c 	bl	8008bac <TIM_ITRx_SetConfig>
      break;
 80088f4:	e01c      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008902:	461a      	mov	r2, r3
 8008904:	f000 f8f2 	bl	8008aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2140      	movs	r1, #64	@ 0x40
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f94c 	bl	8008bac <TIM_ITRx_SetConfig>
      break;
 8008914:	e00c      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f000 f943 	bl	8008bac <TIM_ITRx_SetConfig>
      break;
 8008926:	e003      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
      break;
 800892c:	e000      	b.n	8008930 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800892e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	ffceff88 	.word	0xffceff88
 8008950:	00100040 	.word	0x00100040
 8008954:	00100030 	.word	0x00100030
 8008958:	00100020 	.word	0x00100020

0800895c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a43      	ldr	r2, [pc, #268]	@ (8008acc <TIM_Base_SetConfig+0x120>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d013      	beq.n	80089ec <TIM_Base_SetConfig+0x40>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ca:	d00f      	beq.n	80089ec <TIM_Base_SetConfig+0x40>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a40      	ldr	r2, [pc, #256]	@ (8008ad0 <TIM_Base_SetConfig+0x124>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00b      	beq.n	80089ec <TIM_Base_SetConfig+0x40>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ad4 <TIM_Base_SetConfig+0x128>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d007      	beq.n	80089ec <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a3e      	ldr	r2, [pc, #248]	@ (8008ad8 <TIM_Base_SetConfig+0x12c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a3d      	ldr	r2, [pc, #244]	@ (8008adc <TIM_Base_SetConfig+0x130>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d108      	bne.n	80089fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a32      	ldr	r2, [pc, #200]	@ (8008acc <TIM_Base_SetConfig+0x120>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d01f      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a0c:	d01b      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2f      	ldr	r2, [pc, #188]	@ (8008ad0 <TIM_Base_SetConfig+0x124>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d017      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2e      	ldr	r2, [pc, #184]	@ (8008ad4 <TIM_Base_SetConfig+0x128>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d013      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a2d      	ldr	r2, [pc, #180]	@ (8008ad8 <TIM_Base_SetConfig+0x12c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d00f      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	@ (8008adc <TIM_Base_SetConfig+0x130>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d00b      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2b      	ldr	r2, [pc, #172]	@ (8008ae0 <TIM_Base_SetConfig+0x134>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d007      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae4 <TIM_Base_SetConfig+0x138>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d003      	beq.n	8008a46 <TIM_Base_SetConfig+0x9a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a29      	ldr	r2, [pc, #164]	@ (8008ae8 <TIM_Base_SetConfig+0x13c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d108      	bne.n	8008a58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a14      	ldr	r2, [pc, #80]	@ (8008acc <TIM_Base_SetConfig+0x120>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00f      	beq.n	8008a9e <TIM_Base_SetConfig+0xf2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <TIM_Base_SetConfig+0x130>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00b      	beq.n	8008a9e <TIM_Base_SetConfig+0xf2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a15      	ldr	r2, [pc, #84]	@ (8008ae0 <TIM_Base_SetConfig+0x134>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d007      	beq.n	8008a9e <TIM_Base_SetConfig+0xf2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a14      	ldr	r2, [pc, #80]	@ (8008ae4 <TIM_Base_SetConfig+0x138>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d003      	beq.n	8008a9e <TIM_Base_SetConfig+0xf2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a13      	ldr	r2, [pc, #76]	@ (8008ae8 <TIM_Base_SetConfig+0x13c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d103      	bne.n	8008aa6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f043 0204 	orr.w	r2, r3, #4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800

08008aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	f023 0201 	bic.w	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f023 030a 	bic.w	r3, r3, #10
 8008b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b087      	sub	sp, #28
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f023 0210 	bic.w	r2, r3, #16
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	031b      	lsls	r3, r3, #12
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	621a      	str	r2, [r3, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <TIM_ITRx_SetConfig+0x38>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	f043 0307 	orr.w	r3, r3, #7
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	609a      	str	r2, [r3, #8]
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	ffcfff8f 	.word	0xffcfff8f

08008be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	021a      	lsls	r2, r3, #8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	609a      	str	r2, [r3, #8]
}
 8008c1c:	bf00      	nop
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e06d      	b.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a30      	ldr	r2, [pc, #192]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d004      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d108      	bne.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a20      	ldr	r2, [pc, #128]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d022      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb2:	d01d      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d018      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d013      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00e      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a15      	ldr	r2, [pc, #84]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d009      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a16      	ldr	r2, [pc, #88]	@ (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10c      	bne.n	8008d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40001800 	.word	0x40001800
 8008d40:	40014000 	.word	0x40014000

08008d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e042      	b.n	8008e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7f9 f95d 	bl	8002064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2224      	movs	r2, #36	@ 0x24
 8008dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fb06 	bl	800a3dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fd9b 	bl	800990c <UART_SetConfig>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e01b      	b.n	8008e18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fb85 	bl	800a520 <UART_CheckIdleState>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	@ 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d167      	bne.n	8008f08 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_UART_Transmit_DMA+0x24>
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e060      	b.n	8008f0a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	88fa      	ldrh	r2, [r7, #6]
 8008e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2221      	movs	r2, #33	@ 0x21
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d028      	beq.n	8008ec8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e7a:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <HAL_UART_Transmit_DMA+0xf4>)
 8008e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e82:	4a25      	ldr	r2, [pc, #148]	@ (8008f18 <HAL_UART_Transmit_DMA+0xf8>)
 8008e84:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e8a:	4a24      	ldr	r2, [pc, #144]	@ (8008f1c <HAL_UART_Transmit_DMA+0xfc>)
 8008e8c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e92:	2200      	movs	r2, #0
 8008e94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3328      	adds	r3, #40	@ 0x28
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	88fb      	ldrh	r3, [r7, #6]
 8008eaa:	f7f9 fe81 	bl	8002bb0 <HAL_DMA_Start_IT>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2210      	movs	r2, #16
 8008eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e020      	b.n	8008f0a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2240      	movs	r2, #64	@ 0x40
 8008ece:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef0:	623a      	str	r2, [r7, #32]
 8008ef2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	69f9      	ldr	r1, [r7, #28]
 8008ef6:	6a3a      	ldr	r2, [r7, #32]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e000      	b.n	8008f0a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f08:	2302      	movs	r3, #2
  }
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3728      	adds	r7, #40	@ 0x28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	0800a9ed 	.word	0x0800a9ed
 8008f18:	0800aa83 	.word	0x0800aa83
 8008f1c:	0800ac05 	.word	0x0800ac05

08008f20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	@ 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d137      	bne.n	8008fa8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_UART_Receive_DMA+0x24>
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e030      	b.n	8008faa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a18      	ldr	r2, [pc, #96]	@ (8008fb4 <HAL_UART_Receive_DMA+0x94>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d01f      	beq.n	8008f98 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d018      	beq.n	8008f98 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	613b      	str	r3, [r7, #16]
   return(result);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f84:	623b      	str	r3, [r7, #32]
 8008f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	69f9      	ldr	r1, [r7, #28]
 8008f8a:	6a3a      	ldr	r2, [r7, #32]
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f001 fbd6 	bl	800a750 <UART_Start_Receive_DMA>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	e000      	b.n	8008faa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fa8:	2302      	movs	r3, #2
  }
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	@ 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	58000c00 	.word	0x58000c00

08008fb8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b090      	sub	sp, #64	@ 0x40
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fda:	2b80      	cmp	r3, #128	@ 0x80
 8008fdc:	d139      	bne.n	8009052 <HAL_UART_DMAStop+0x9a>
 8008fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe0:	2b21      	cmp	r3, #33	@ 0x21
 8008fe2:	d136      	bne.n	8009052 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800900a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d015      	beq.n	800904c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009024:	4618      	mov	r0, r3
 8009026:	f7fa f82d 	bl	8003084 <HAL_DMA_Abort>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00d      	beq.n	800904c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009034:	4618      	mov	r0, r3
 8009036:	f7fb fcb3 	bl	80049a0 <HAL_DMA_GetError>
 800903a:	4603      	mov	r3, r0
 800903c:	2b20      	cmp	r3, #32
 800903e:	d105      	bne.n	800904c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2210      	movs	r2, #16
 8009044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e047      	b.n	80090dc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fc25 	bl	800a89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905c:	2b40      	cmp	r3, #64	@ 0x40
 800905e:	d13c      	bne.n	80090da <HAL_UART_DMAStop+0x122>
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	2b22      	cmp	r3, #34	@ 0x22
 8009064:	d139      	bne.n	80090da <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60bb      	str	r3, [r7, #8]
   return(result);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800907c:	633b      	str	r3, [r7, #48]	@ 0x30
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009086:	61ba      	str	r2, [r7, #24]
 8009088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	613b      	str	r3, [r7, #16]
   return(result);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d017      	beq.n	80090d4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7f9 ffea 	bl	8003084 <HAL_DMA_Abort>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00e      	beq.n	80090d4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fb fc6f 	bl	80049a0 <HAL_DMA_GetError>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d105      	bne.n	80090d4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2210      	movs	r2, #16
 80090cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e003      	b.n	80090dc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 fc23 	bl	800a920 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3740      	adds	r7, #64	@ 0x40
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b0ba      	sub	sp, #232	@ 0xe8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800910a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800910e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009112:	4013      	ands	r3, r2
 8009114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800911c:	2b00      	cmp	r3, #0
 800911e:	d11b      	bne.n	8009158 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d015      	beq.n	8009158 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800913c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8393 	beq.w	8009874 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
      }
      return;
 8009156:	e38d      	b.n	8009874 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 8123 	beq.w	80093a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009162:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009166:	4b8d      	ldr	r3, [pc, #564]	@ (800939c <HAL_UART_IRQHandler+0x2b8>)
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800916e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009172:	4b8b      	ldr	r3, [pc, #556]	@ (80093a0 <HAL_UART_IRQHandler+0x2bc>)
 8009174:	4013      	ands	r3, r2
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 8116 	beq.w	80093a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	d011      	beq.n	80091ac <HAL_UART_IRQHandler+0xc8>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2201      	movs	r2, #1
 800919a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a2:	f043 0201 	orr.w	r2, r3, #1
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d011      	beq.n	80091dc <HAL_UART_IRQHandler+0xf8>
 80091b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2202      	movs	r2, #2
 80091ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d2:	f043 0204 	orr.w	r2, r3, #4
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d011      	beq.n	800920c <HAL_UART_IRQHandler+0x128>
 80091e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2204      	movs	r2, #4
 80091fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009202:	f043 0202 	orr.w	r2, r3, #2
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800920c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800921c:	f003 0320 	and.w	r3, r3, #32
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009224:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009228:	4b5c      	ldr	r3, [pc, #368]	@ (800939c <HAL_UART_IRQHandler+0x2b8>)
 800922a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2208      	movs	r2, #8
 8009236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923e:	f043 0208 	orr.w	r2, r3, #8
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800924c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009250:	2b00      	cmp	r3, #0
 8009252:	d012      	beq.n	800927a <HAL_UART_IRQHandler+0x196>
 8009254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009258:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 82f9 	beq.w	8009878 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d013      	beq.n	80092ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800929e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d007      	beq.n	80092ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d005      	beq.n	80092de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d054      	beq.n	8009388 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fb1e 	bl	800a920 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ee:	2b40      	cmp	r3, #64	@ 0x40
 80092f0:	d146      	bne.n	8009380 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800930c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800931e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800932a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1d9      	bne.n	80092f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009344:	2b00      	cmp	r3, #0
 8009346:	d017      	beq.n	8009378 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800934e:	4a15      	ldr	r2, [pc, #84]	@ (80093a4 <HAL_UART_IRQHandler+0x2c0>)
 8009350:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009358:	4618      	mov	r0, r3
 800935a:	f7fa f9b1 	bl	80036c0 <HAL_DMA_Abort_IT>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d019      	beq.n	8009398 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800936a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009372:	4610      	mov	r0, r2
 8009374:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009376:	e00f      	b.n	8009398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fab1 	bl	80098e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937e:	e00b      	b.n	8009398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 faad 	bl	80098e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009386:	e007      	b.n	8009398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 faa9 	bl	80098e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009396:	e26f      	b.n	8009878 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	bf00      	nop
    return;
 800939a:	e26d      	b.n	8009878 <HAL_UART_IRQHandler+0x794>
 800939c:	10000001 	.word	0x10000001
 80093a0:	04000120 	.word	0x04000120
 80093a4:	0800ac85 	.word	0x0800ac85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	f040 8203 	bne.w	80097b8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f003 0310 	and.w	r3, r3, #16
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 81fc 	beq.w	80097b8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 81f5 	beq.w	80097b8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2210      	movs	r2, #16
 80093d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e0:	2b40      	cmp	r3, #64	@ 0x40
 80093e2:	f040 816d 	bne.w	80096c0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4aa4      	ldr	r2, [pc, #656]	@ (8009680 <HAL_UART_IRQHandler+0x59c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d068      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4aa1      	ldr	r2, [pc, #644]	@ (8009684 <HAL_UART_IRQHandler+0x5a0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d061      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a9f      	ldr	r2, [pc, #636]	@ (8009688 <HAL_UART_IRQHandler+0x5a4>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d05a      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a9c      	ldr	r2, [pc, #624]	@ (800968c <HAL_UART_IRQHandler+0x5a8>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d053      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a9a      	ldr	r2, [pc, #616]	@ (8009690 <HAL_UART_IRQHandler+0x5ac>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d04c      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a97      	ldr	r2, [pc, #604]	@ (8009694 <HAL_UART_IRQHandler+0x5b0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d045      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a95      	ldr	r2, [pc, #596]	@ (8009698 <HAL_UART_IRQHandler+0x5b4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d03e      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a92      	ldr	r2, [pc, #584]	@ (800969c <HAL_UART_IRQHandler+0x5b8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d037      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a90      	ldr	r2, [pc, #576]	@ (80096a0 <HAL_UART_IRQHandler+0x5bc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d030      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a8d      	ldr	r2, [pc, #564]	@ (80096a4 <HAL_UART_IRQHandler+0x5c0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d029      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a8b      	ldr	r2, [pc, #556]	@ (80096a8 <HAL_UART_IRQHandler+0x5c4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d022      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a88      	ldr	r2, [pc, #544]	@ (80096ac <HAL_UART_IRQHandler+0x5c8>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01b      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a86      	ldr	r2, [pc, #536]	@ (80096b0 <HAL_UART_IRQHandler+0x5cc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d014      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a83      	ldr	r2, [pc, #524]	@ (80096b4 <HAL_UART_IRQHandler+0x5d0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00d      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a81      	ldr	r2, [pc, #516]	@ (80096b8 <HAL_UART_IRQHandler+0x5d4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d006      	beq.n	80094c6 <HAL_UART_IRQHandler+0x3e2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a7e      	ldr	r2, [pc, #504]	@ (80096bc <HAL_UART_IRQHandler+0x5d8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d106      	bne.n	80094d4 <HAL_UART_IRQHandler+0x3f0>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	e005      	b.n	80094e0 <HAL_UART_IRQHandler+0x3fc>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80ad 	beq.w	8009648 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094f8:	429a      	cmp	r2, r3
 80094fa:	f080 80a5 	bcs.w	8009648 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009514:	f000 8087 	beq.w	8009626 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800952c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009546:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800954e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800955a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1da      	bne.n	8009518 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009586:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800958a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800958e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e1      	bne.n	8009562 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e3      	bne.n	800959e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f4:	f023 0310 	bic.w	r3, r3, #16
 80095f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009608:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800960c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e4      	bne.n	80095e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009620:	4618      	mov	r0, r3
 8009622:	f7f9 fd2f 	bl	8003084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2202      	movs	r2, #2
 800962a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009638:	b29b      	uxth	r3, r3
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	b29b      	uxth	r3, r3
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f957 	bl	80098f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009646:	e119      	b.n	800987c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800964e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009652:	429a      	cmp	r2, r3
 8009654:	f040 8112 	bne.w	800987c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009664:	f040 810a 	bne.w	800987c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f93c 	bl	80098f4 <HAL_UARTEx_RxEventCallback>
      return;
 800967c:	e0fe      	b.n	800987c <HAL_UART_IRQHandler+0x798>
 800967e:	bf00      	nop
 8009680:	40020010 	.word	0x40020010
 8009684:	40020028 	.word	0x40020028
 8009688:	40020040 	.word	0x40020040
 800968c:	40020058 	.word	0x40020058
 8009690:	40020070 	.word	0x40020070
 8009694:	40020088 	.word	0x40020088
 8009698:	400200a0 	.word	0x400200a0
 800969c:	400200b8 	.word	0x400200b8
 80096a0:	40020410 	.word	0x40020410
 80096a4:	40020428 	.word	0x40020428
 80096a8:	40020440 	.word	0x40020440
 80096ac:	40020458 	.word	0x40020458
 80096b0:	40020470 	.word	0x40020470
 80096b4:	40020488 	.word	0x40020488
 80096b8:	400204a0 	.word	0x400204a0
 80096bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096da:	b29b      	uxth	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80cf 	beq.w	8009880 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80096e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80ca 	beq.w	8009880 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009700:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800970e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009710:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800971c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e4      	bne.n	80096ec <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	623b      	str	r3, [r7, #32]
   return(result);
 8009732:	6a3a      	ldr	r2, [r7, #32]
 8009734:	4b55      	ldr	r3, [pc, #340]	@ (800988c <HAL_UART_IRQHandler+0x7a8>)
 8009736:	4013      	ands	r3, r2
 8009738:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3308      	adds	r3, #8
 8009742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009746:	633a      	str	r2, [r7, #48]	@ 0x30
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800974c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e3      	bne.n	8009722 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	60fb      	str	r3, [r7, #12]
   return(result);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0310 	bic.w	r3, r3, #16
 8009782:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	69b9      	ldr	r1, [r7, #24]
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	617b      	str	r3, [r7, #20]
   return(result);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e4      	bne.n	800976e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f89f 	bl	80098f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097b6:	e063      	b.n	8009880 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00e      	beq.n	80097e2 <HAL_UART_IRQHandler+0x6fe>
 80097c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80097d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 fa8f 	bl	800acfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097e0:	e051      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d014      	beq.n	8009818 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800980a:	2b00      	cmp	r3, #0
 800980c:	d03a      	beq.n	8009884 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
    }
    return;
 8009816:	e035      	b.n	8009884 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <HAL_UART_IRQHandler+0x754>
 8009824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 fa39 	bl	800aca8 <UART_EndTransmit_IT>
    return;
 8009836:	e026      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <HAL_UART_IRQHandler+0x774>
 8009844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009848:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 fa68 	bl	800ad26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009856:	e016      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d010      	beq.n	8009886 <HAL_UART_IRQHandler+0x7a2>
 8009864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009868:	2b00      	cmp	r3, #0
 800986a:	da0c      	bge.n	8009886 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fa50 	bl	800ad12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009872:	e008      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009874:	bf00      	nop
 8009876:	e006      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009878:	bf00      	nop
 800987a:	e004      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
      return;
 800987c:	bf00      	nop
 800987e:	e002      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009880:	bf00      	nop
 8009882:	e000      	b.n	8009886 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009884:	bf00      	nop
  }
}
 8009886:	37e8      	adds	r7, #232	@ 0xe8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	effffffe 	.word	0xeffffffe

08009890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800990c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009910:	b092      	sub	sp, #72	@ 0x48
 8009912:	af00      	add	r7, sp, #0
 8009914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	431a      	orrs	r2, r3
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	431a      	orrs	r2, r3
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	4313      	orrs	r3, r2
 8009932:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	4bbe      	ldr	r3, [pc, #760]	@ (8009c34 <UART_SetConfig+0x328>)
 800993c:	4013      	ands	r3, r2
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	6812      	ldr	r2, [r2, #0]
 8009942:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009944:	430b      	orrs	r3, r1
 8009946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4ab3      	ldr	r2, [pc, #716]	@ (8009c38 <UART_SetConfig+0x32c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d004      	beq.n	8009978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009974:	4313      	orrs	r3, r2
 8009976:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	4baf      	ldr	r3, [pc, #700]	@ (8009c3c <UART_SetConfig+0x330>)
 8009980:	4013      	ands	r3, r2
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009988:	430b      	orrs	r3, r1
 800998a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	f023 010f 	bic.w	r1, r3, #15
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4aa6      	ldr	r2, [pc, #664]	@ (8009c40 <UART_SetConfig+0x334>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d177      	bne.n	8009a9c <UART_SetConfig+0x190>
 80099ac:	4ba5      	ldr	r3, [pc, #660]	@ (8009c44 <UART_SetConfig+0x338>)
 80099ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099b4:	2b28      	cmp	r3, #40	@ 0x28
 80099b6:	d86d      	bhi.n	8009a94 <UART_SetConfig+0x188>
 80099b8:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <UART_SetConfig+0xb4>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	08009a65 	.word	0x08009a65
 80099c4:	08009a95 	.word	0x08009a95
 80099c8:	08009a95 	.word	0x08009a95
 80099cc:	08009a95 	.word	0x08009a95
 80099d0:	08009a95 	.word	0x08009a95
 80099d4:	08009a95 	.word	0x08009a95
 80099d8:	08009a95 	.word	0x08009a95
 80099dc:	08009a95 	.word	0x08009a95
 80099e0:	08009a6d 	.word	0x08009a6d
 80099e4:	08009a95 	.word	0x08009a95
 80099e8:	08009a95 	.word	0x08009a95
 80099ec:	08009a95 	.word	0x08009a95
 80099f0:	08009a95 	.word	0x08009a95
 80099f4:	08009a95 	.word	0x08009a95
 80099f8:	08009a95 	.word	0x08009a95
 80099fc:	08009a95 	.word	0x08009a95
 8009a00:	08009a75 	.word	0x08009a75
 8009a04:	08009a95 	.word	0x08009a95
 8009a08:	08009a95 	.word	0x08009a95
 8009a0c:	08009a95 	.word	0x08009a95
 8009a10:	08009a95 	.word	0x08009a95
 8009a14:	08009a95 	.word	0x08009a95
 8009a18:	08009a95 	.word	0x08009a95
 8009a1c:	08009a95 	.word	0x08009a95
 8009a20:	08009a7d 	.word	0x08009a7d
 8009a24:	08009a95 	.word	0x08009a95
 8009a28:	08009a95 	.word	0x08009a95
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a95 	.word	0x08009a95
 8009a34:	08009a95 	.word	0x08009a95
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009a95 	.word	0x08009a95
 8009a40:	08009a85 	.word	0x08009a85
 8009a44:	08009a95 	.word	0x08009a95
 8009a48:	08009a95 	.word	0x08009a95
 8009a4c:	08009a95 	.word	0x08009a95
 8009a50:	08009a95 	.word	0x08009a95
 8009a54:	08009a95 	.word	0x08009a95
 8009a58:	08009a95 	.word	0x08009a95
 8009a5c:	08009a95 	.word	0x08009a95
 8009a60:	08009a8d 	.word	0x08009a8d
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e222      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e21e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a74:	2308      	movs	r3, #8
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e21a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e216      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a84:	2320      	movs	r3, #32
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8a:	e212      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a8c:	2340      	movs	r3, #64	@ 0x40
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e20e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a94:	2380      	movs	r3, #128	@ 0x80
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e20a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a69      	ldr	r2, [pc, #420]	@ (8009c48 <UART_SetConfig+0x33c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d130      	bne.n	8009b08 <UART_SetConfig+0x1fc>
 8009aa6:	4b67      	ldr	r3, [pc, #412]	@ (8009c44 <UART_SetConfig+0x338>)
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d826      	bhi.n	8009b00 <UART_SetConfig+0x1f4>
 8009ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <UART_SetConfig+0x1ac>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009ad1 	.word	0x08009ad1
 8009abc:	08009ad9 	.word	0x08009ad9
 8009ac0:	08009ae1 	.word	0x08009ae1
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009af1 	.word	0x08009af1
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e1ec      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e1e8      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e1e4      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e1e0      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009af0:	2320      	movs	r3, #32
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e1dc      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009af8:	2340      	movs	r3, #64	@ 0x40
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e1d8      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b00:	2380      	movs	r3, #128	@ 0x80
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e1d4      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8009c4c <UART_SetConfig+0x340>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d130      	bne.n	8009b74 <UART_SetConfig+0x268>
 8009b12:	4b4c      	ldr	r3, [pc, #304]	@ (8009c44 <UART_SetConfig+0x338>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d826      	bhi.n	8009b6c <UART_SetConfig+0x260>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <UART_SetConfig+0x218>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b4d 	.word	0x08009b4d
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e1b6      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e1b2      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b52:	e1ae      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5a:	e1aa      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b62:	e1a6      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b64:	2340      	movs	r3, #64	@ 0x40
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e1a2      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b6c:	2380      	movs	r3, #128	@ 0x80
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e19e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a35      	ldr	r2, [pc, #212]	@ (8009c50 <UART_SetConfig+0x344>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d130      	bne.n	8009be0 <UART_SetConfig+0x2d4>
 8009b7e:	4b31      	ldr	r3, [pc, #196]	@ (8009c44 <UART_SetConfig+0x338>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d826      	bhi.n	8009bd8 <UART_SetConfig+0x2cc>
 8009b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <UART_SetConfig+0x284>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc9 	.word	0x08009bc9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e180      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e17c      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	e178      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	e174      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bce:	e170      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bd0:	2340      	movs	r3, #64	@ 0x40
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e16c      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009bd8:	2380      	movs	r3, #128	@ 0x80
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e168      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <UART_SetConfig+0x348>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d142      	bne.n	8009c70 <UART_SetConfig+0x364>
 8009bea:	4b16      	ldr	r3, [pc, #88]	@ (8009c44 <UART_SetConfig+0x338>)
 8009bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d838      	bhi.n	8009c68 <UART_SetConfig+0x35c>
 8009bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bfc <UART_SetConfig+0x2f0>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c59 	.word	0x08009c59
 8009c10:	08009c61 	.word	0x08009c61
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e14a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e146      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e142      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e13e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c34:	cfff69f3 	.word	0xcfff69f3
 8009c38:	58000c00 	.word	0x58000c00
 8009c3c:	11fff4ff 	.word	0x11fff4ff
 8009c40:	40011000 	.word	0x40011000
 8009c44:	58024400 	.word	0x58024400
 8009c48:	40004400 	.word	0x40004400
 8009c4c:	40004800 	.word	0x40004800
 8009c50:	40004c00 	.word	0x40004c00
 8009c54:	40005000 	.word	0x40005000
 8009c58:	2320      	movs	r3, #32
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5e:	e128      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c60:	2340      	movs	r3, #64	@ 0x40
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c66:	e124      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c68:	2380      	movs	r3, #128	@ 0x80
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6e:	e120      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4acb      	ldr	r2, [pc, #812]	@ (8009fa4 <UART_SetConfig+0x698>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d176      	bne.n	8009d68 <UART_SetConfig+0x45c>
 8009c7a:	4bcb      	ldr	r3, [pc, #812]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c82:	2b28      	cmp	r3, #40	@ 0x28
 8009c84:	d86c      	bhi.n	8009d60 <UART_SetConfig+0x454>
 8009c86:	a201      	add	r2, pc, #4	@ (adr r2, 8009c8c <UART_SetConfig+0x380>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009d31 	.word	0x08009d31
 8009c90:	08009d61 	.word	0x08009d61
 8009c94:	08009d61 	.word	0x08009d61
 8009c98:	08009d61 	.word	0x08009d61
 8009c9c:	08009d61 	.word	0x08009d61
 8009ca0:	08009d61 	.word	0x08009d61
 8009ca4:	08009d61 	.word	0x08009d61
 8009ca8:	08009d61 	.word	0x08009d61
 8009cac:	08009d39 	.word	0x08009d39
 8009cb0:	08009d61 	.word	0x08009d61
 8009cb4:	08009d61 	.word	0x08009d61
 8009cb8:	08009d61 	.word	0x08009d61
 8009cbc:	08009d61 	.word	0x08009d61
 8009cc0:	08009d61 	.word	0x08009d61
 8009cc4:	08009d61 	.word	0x08009d61
 8009cc8:	08009d61 	.word	0x08009d61
 8009ccc:	08009d41 	.word	0x08009d41
 8009cd0:	08009d61 	.word	0x08009d61
 8009cd4:	08009d61 	.word	0x08009d61
 8009cd8:	08009d61 	.word	0x08009d61
 8009cdc:	08009d61 	.word	0x08009d61
 8009ce0:	08009d61 	.word	0x08009d61
 8009ce4:	08009d61 	.word	0x08009d61
 8009ce8:	08009d61 	.word	0x08009d61
 8009cec:	08009d49 	.word	0x08009d49
 8009cf0:	08009d61 	.word	0x08009d61
 8009cf4:	08009d61 	.word	0x08009d61
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009d61 	.word	0x08009d61
 8009d00:	08009d61 	.word	0x08009d61
 8009d04:	08009d61 	.word	0x08009d61
 8009d08:	08009d61 	.word	0x08009d61
 8009d0c:	08009d51 	.word	0x08009d51
 8009d10:	08009d61 	.word	0x08009d61
 8009d14:	08009d61 	.word	0x08009d61
 8009d18:	08009d61 	.word	0x08009d61
 8009d1c:	08009d61 	.word	0x08009d61
 8009d20:	08009d61 	.word	0x08009d61
 8009d24:	08009d61 	.word	0x08009d61
 8009d28:	08009d61 	.word	0x08009d61
 8009d2c:	08009d59 	.word	0x08009d59
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e0bc      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d38:	2304      	movs	r3, #4
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e0b8      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d40:	2308      	movs	r3, #8
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d46:	e0b4      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d48:	2310      	movs	r3, #16
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e0b0      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d50:	2320      	movs	r3, #32
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e0ac      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d58:	2340      	movs	r3, #64	@ 0x40
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e0a8      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d60:	2380      	movs	r3, #128	@ 0x80
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e0a4      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a8f      	ldr	r2, [pc, #572]	@ (8009fac <UART_SetConfig+0x6a0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d130      	bne.n	8009dd4 <UART_SetConfig+0x4c8>
 8009d72:	4b8d      	ldr	r3, [pc, #564]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	d826      	bhi.n	8009dcc <UART_SetConfig+0x4c0>
 8009d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d84 <UART_SetConfig+0x478>)
 8009d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009da5 	.word	0x08009da5
 8009d8c:	08009dad 	.word	0x08009dad
 8009d90:	08009db5 	.word	0x08009db5
 8009d94:	08009dbd 	.word	0x08009dbd
 8009d98:	08009dc5 	.word	0x08009dc5
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e086      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009da4:	2304      	movs	r3, #4
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e082      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009dac:	2308      	movs	r3, #8
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e07e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e07a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e076      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009dc4:	2340      	movs	r3, #64	@ 0x40
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e072      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009dcc:	2380      	movs	r3, #128	@ 0x80
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e06e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a75      	ldr	r2, [pc, #468]	@ (8009fb0 <UART_SetConfig+0x6a4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d130      	bne.n	8009e40 <UART_SetConfig+0x534>
 8009dde:	4b72      	ldr	r3, [pc, #456]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d826      	bhi.n	8009e38 <UART_SetConfig+0x52c>
 8009dea:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <UART_SetConfig+0x4e4>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e11 	.word	0x08009e11
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e050      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e10:	2304      	movs	r3, #4
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e04c      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e18:	2308      	movs	r3, #8
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e048      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e20:	2310      	movs	r3, #16
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e044      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e040      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e03c      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e38:	2380      	movs	r3, #128	@ 0x80
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e038      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a5b      	ldr	r2, [pc, #364]	@ (8009fb4 <UART_SetConfig+0x6a8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d130      	bne.n	8009eac <UART_SetConfig+0x5a0>
 8009e4a:	4b57      	ldr	r3, [pc, #348]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	d826      	bhi.n	8009ea4 <UART_SetConfig+0x598>
 8009e56:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <UART_SetConfig+0x550>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e75 	.word	0x08009e75
 8009e60:	08009e7d 	.word	0x08009e7d
 8009e64:	08009e85 	.word	0x08009e85
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009e9d 	.word	0x08009e9d
 8009e74:	2302      	movs	r3, #2
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e01a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e7c:	2304      	movs	r3, #4
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e016      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e84:	2308      	movs	r3, #8
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e012      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e00e      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e94:	2320      	movs	r3, #32
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e00a      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009e9c:	2340      	movs	r3, #64	@ 0x40
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e006      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009ea4:	2380      	movs	r3, #128	@ 0x80
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e002      	b.n	8009eb2 <UART_SetConfig+0x5a6>
 8009eac:	2380      	movs	r3, #128	@ 0x80
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8009fb4 <UART_SetConfig+0x6a8>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	f040 80f8 	bne.w	800a0ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ebe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	dc46      	bgt.n	8009f54 <UART_SetConfig+0x648>
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	f2c0 8082 	blt.w	8009fd0 <UART_SetConfig+0x6c4>
 8009ecc:	3b02      	subs	r3, #2
 8009ece:	2b1e      	cmp	r3, #30
 8009ed0:	d87e      	bhi.n	8009fd0 <UART_SetConfig+0x6c4>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <UART_SetConfig+0x5cc>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f5b 	.word	0x08009f5b
 8009edc:	08009fd1 	.word	0x08009fd1
 8009ee0:	08009f63 	.word	0x08009f63
 8009ee4:	08009fd1 	.word	0x08009fd1
 8009ee8:	08009fd1 	.word	0x08009fd1
 8009eec:	08009fd1 	.word	0x08009fd1
 8009ef0:	08009f73 	.word	0x08009f73
 8009ef4:	08009fd1 	.word	0x08009fd1
 8009ef8:	08009fd1 	.word	0x08009fd1
 8009efc:	08009fd1 	.word	0x08009fd1
 8009f00:	08009fd1 	.word	0x08009fd1
 8009f04:	08009fd1 	.word	0x08009fd1
 8009f08:	08009fd1 	.word	0x08009fd1
 8009f0c:	08009fd1 	.word	0x08009fd1
 8009f10:	08009f83 	.word	0x08009f83
 8009f14:	08009fd1 	.word	0x08009fd1
 8009f18:	08009fd1 	.word	0x08009fd1
 8009f1c:	08009fd1 	.word	0x08009fd1
 8009f20:	08009fd1 	.word	0x08009fd1
 8009f24:	08009fd1 	.word	0x08009fd1
 8009f28:	08009fd1 	.word	0x08009fd1
 8009f2c:	08009fd1 	.word	0x08009fd1
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	08009fd1 	.word	0x08009fd1
 8009f38:	08009fd1 	.word	0x08009fd1
 8009f3c:	08009fd1 	.word	0x08009fd1
 8009f40:	08009fd1 	.word	0x08009fd1
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009fd1 	.word	0x08009fd1
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009fc3 	.word	0x08009fc3
 8009f54:	2b40      	cmp	r3, #64	@ 0x40
 8009f56:	d037      	beq.n	8009fc8 <UART_SetConfig+0x6bc>
 8009f58:	e03a      	b.n	8009fd0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f5a:	f7fd fe0d 	bl	8007b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f60:	e03c      	b.n	8009fdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fd fe1c 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f70:	e034      	b.n	8009fdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f72:	f107 0318 	add.w	r3, r7, #24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd ff68 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f80:	e02c      	b.n	8009fdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f82:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d016      	beq.n	8009fbc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f8e:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <UART_SetConfig+0x69c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	08db      	lsrs	r3, r3, #3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	4a07      	ldr	r2, [pc, #28]	@ (8009fb8 <UART_SetConfig+0x6ac>)
 8009f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fa0:	e01c      	b.n	8009fdc <UART_SetConfig+0x6d0>
 8009fa2:	bf00      	nop
 8009fa4:	40011400 	.word	0x40011400
 8009fa8:	58024400 	.word	0x58024400
 8009fac:	40007800 	.word	0x40007800
 8009fb0:	40007c00 	.word	0x40007c00
 8009fb4:	58000c00 	.word	0x58000c00
 8009fb8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fbc:	4b9d      	ldr	r3, [pc, #628]	@ (800a234 <UART_SetConfig+0x928>)
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc0:	e00c      	b.n	8009fdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fc2:	4b9d      	ldr	r3, [pc, #628]	@ (800a238 <UART_SetConfig+0x92c>)
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc6:	e009      	b.n	8009fdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fce:	e005      	b.n	8009fdc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 81de 	beq.w	800a3a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	4a94      	ldr	r2, [pc, #592]	@ (800a23c <UART_SetConfig+0x930>)
 8009fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a004:	429a      	cmp	r2, r3
 800a006:	d305      	bcc.n	800a014 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a00e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a010:	429a      	cmp	r2, r3
 800a012:	d903      	bls.n	800a01c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a01a:	e1c1      	b.n	800a3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01e:	2200      	movs	r2, #0
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	60fa      	str	r2, [r7, #12]
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	4a84      	ldr	r2, [pc, #528]	@ (800a23c <UART_SetConfig+0x930>)
 800a02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2200      	movs	r2, #0
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	607a      	str	r2, [r7, #4]
 800a036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a03a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a03e:	f7f6 fa07 	bl	8000450 <__aeabi_uldivmod>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	020b      	lsls	r3, r1, #8
 800a054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a058:	0202      	lsls	r2, r0, #8
 800a05a:	6979      	ldr	r1, [r7, #20]
 800a05c:	6849      	ldr	r1, [r1, #4]
 800a05e:	0849      	lsrs	r1, r1, #1
 800a060:	2000      	movs	r0, #0
 800a062:	460c      	mov	r4, r1
 800a064:	4605      	mov	r5, r0
 800a066:	eb12 0804 	adds.w	r8, r2, r4
 800a06a:	eb43 0905 	adc.w	r9, r3, r5
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	469a      	mov	sl, r3
 800a076:	4693      	mov	fp, r2
 800a078:	4652      	mov	r2, sl
 800a07a:	465b      	mov	r3, fp
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 f9e6 	bl	8000450 <__aeabi_uldivmod>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4613      	mov	r3, r2
 800a08a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a092:	d308      	bcc.n	800a0a6 <UART_SetConfig+0x79a>
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a09a:	d204      	bcs.n	800a0a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a2:	60da      	str	r2, [r3, #12]
 800a0a4:	e17c      	b.n	800a3a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0ac:	e178      	b.n	800a3a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0b6:	f040 80c5 	bne.w	800a244 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	dc48      	bgt.n	800a154 <UART_SetConfig+0x848>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	db7b      	blt.n	800a1be <UART_SetConfig+0x8b2>
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d879      	bhi.n	800a1be <UART_SetConfig+0x8b2>
 800a0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0x7c4>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a15b 	.word	0x0800a15b
 800a0d4:	0800a163 	.word	0x0800a163
 800a0d8:	0800a1bf 	.word	0x0800a1bf
 800a0dc:	0800a1bf 	.word	0x0800a1bf
 800a0e0:	0800a16b 	.word	0x0800a16b
 800a0e4:	0800a1bf 	.word	0x0800a1bf
 800a0e8:	0800a1bf 	.word	0x0800a1bf
 800a0ec:	0800a1bf 	.word	0x0800a1bf
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a1bf 	.word	0x0800a1bf
 800a0f8:	0800a1bf 	.word	0x0800a1bf
 800a0fc:	0800a1bf 	.word	0x0800a1bf
 800a100:	0800a1bf 	.word	0x0800a1bf
 800a104:	0800a1bf 	.word	0x0800a1bf
 800a108:	0800a1bf 	.word	0x0800a1bf
 800a10c:	0800a1bf 	.word	0x0800a1bf
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a1bf 	.word	0x0800a1bf
 800a118:	0800a1bf 	.word	0x0800a1bf
 800a11c:	0800a1bf 	.word	0x0800a1bf
 800a120:	0800a1bf 	.word	0x0800a1bf
 800a124:	0800a1bf 	.word	0x0800a1bf
 800a128:	0800a1bf 	.word	0x0800a1bf
 800a12c:	0800a1bf 	.word	0x0800a1bf
 800a130:	0800a1bf 	.word	0x0800a1bf
 800a134:	0800a1bf 	.word	0x0800a1bf
 800a138:	0800a1bf 	.word	0x0800a1bf
 800a13c:	0800a1bf 	.word	0x0800a1bf
 800a140:	0800a1bf 	.word	0x0800a1bf
 800a144:	0800a1bf 	.word	0x0800a1bf
 800a148:	0800a1bf 	.word	0x0800a1bf
 800a14c:	0800a1bf 	.word	0x0800a1bf
 800a150:	0800a1b1 	.word	0x0800a1b1
 800a154:	2b40      	cmp	r3, #64	@ 0x40
 800a156:	d02e      	beq.n	800a1b6 <UART_SetConfig+0x8aa>
 800a158:	e031      	b.n	800a1be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7fc fa95 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 800a15e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a160:	e033      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a162:	f7fc faa7 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 800a166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a168:	e02f      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd fd18 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	e027      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17a:	f107 0318 	add.w	r3, r7, #24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd fe64 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	e01f      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18a:	4b2d      	ldr	r3, [pc, #180]	@ (800a240 <UART_SetConfig+0x934>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a196:	4b2a      	ldr	r3, [pc, #168]	@ (800a240 <UART_SetConfig+0x934>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	4a24      	ldr	r2, [pc, #144]	@ (800a234 <UART_SetConfig+0x928>)
 800a1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1a8:	e00f      	b.n	800a1ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a1aa:	4b22      	ldr	r3, [pc, #136]	@ (800a234 <UART_SetConfig+0x928>)
 800a1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ae:	e00c      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1b0:	4b21      	ldr	r3, [pc, #132]	@ (800a238 <UART_SetConfig+0x92c>)
 800a1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b4:	e009      	b.n	800a1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1bc:	e005      	b.n	800a1ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 80e7 	beq.w	800a3a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	4a19      	ldr	r2, [pc, #100]	@ (800a23c <UART_SetConfig+0x930>)
 800a1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e4:	005a      	lsls	r2, r3, #1
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	085b      	lsrs	r3, r3, #1
 800a1ec:	441a      	add	r2, r3
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fa:	2b0f      	cmp	r3, #15
 800a1fc:	d916      	bls.n	800a22c <UART_SetConfig+0x920>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a204:	d212      	bcs.n	800a22c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f023 030f 	bic.w	r3, r3, #15
 800a20e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	085b      	lsrs	r3, r3, #1
 800a214:	b29b      	uxth	r3, r3
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a21e:	4313      	orrs	r3, r2
 800a220:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	e0b9      	b.n	800a3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a232:	e0b5      	b.n	800a3a0 <UART_SetConfig+0xa94>
 800a234:	03d09000 	.word	0x03d09000
 800a238:	003d0900 	.word	0x003d0900
 800a23c:	0801c984 	.word	0x0801c984
 800a240:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a244:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a248:	2b20      	cmp	r3, #32
 800a24a:	dc49      	bgt.n	800a2e0 <UART_SetConfig+0x9d4>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	db7c      	blt.n	800a34a <UART_SetConfig+0xa3e>
 800a250:	2b20      	cmp	r3, #32
 800a252:	d87a      	bhi.n	800a34a <UART_SetConfig+0xa3e>
 800a254:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <UART_SetConfig+0x950>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a2e7 	.word	0x0800a2e7
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a34b 	.word	0x0800a34b
 800a268:	0800a34b 	.word	0x0800a34b
 800a26c:	0800a2f7 	.word	0x0800a2f7
 800a270:	0800a34b 	.word	0x0800a34b
 800a274:	0800a34b 	.word	0x0800a34b
 800a278:	0800a34b 	.word	0x0800a34b
 800a27c:	0800a307 	.word	0x0800a307
 800a280:	0800a34b 	.word	0x0800a34b
 800a284:	0800a34b 	.word	0x0800a34b
 800a288:	0800a34b 	.word	0x0800a34b
 800a28c:	0800a34b 	.word	0x0800a34b
 800a290:	0800a34b 	.word	0x0800a34b
 800a294:	0800a34b 	.word	0x0800a34b
 800a298:	0800a34b 	.word	0x0800a34b
 800a29c:	0800a317 	.word	0x0800a317
 800a2a0:	0800a34b 	.word	0x0800a34b
 800a2a4:	0800a34b 	.word	0x0800a34b
 800a2a8:	0800a34b 	.word	0x0800a34b
 800a2ac:	0800a34b 	.word	0x0800a34b
 800a2b0:	0800a34b 	.word	0x0800a34b
 800a2b4:	0800a34b 	.word	0x0800a34b
 800a2b8:	0800a34b 	.word	0x0800a34b
 800a2bc:	0800a34b 	.word	0x0800a34b
 800a2c0:	0800a34b 	.word	0x0800a34b
 800a2c4:	0800a34b 	.word	0x0800a34b
 800a2c8:	0800a34b 	.word	0x0800a34b
 800a2cc:	0800a34b 	.word	0x0800a34b
 800a2d0:	0800a34b 	.word	0x0800a34b
 800a2d4:	0800a34b 	.word	0x0800a34b
 800a2d8:	0800a34b 	.word	0x0800a34b
 800a2dc:	0800a33d 	.word	0x0800a33d
 800a2e0:	2b40      	cmp	r3, #64	@ 0x40
 800a2e2:	d02e      	beq.n	800a342 <UART_SetConfig+0xa36>
 800a2e4:	e031      	b.n	800a34a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2e6:	f7fc f9cf 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 800a2ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e033      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ee:	f7fc f9e1 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 800a2f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2f4:	e02f      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fc52 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a304:	e027      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a306:	f107 0318 	add.w	r3, r7, #24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd fd9e 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e01f      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a316:	4b2d      	ldr	r3, [pc, #180]	@ (800a3cc <UART_SetConfig+0xac0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a322:	4b2a      	ldr	r3, [pc, #168]	@ (800a3cc <UART_SetConfig+0xac0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	08db      	lsrs	r3, r3, #3
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	4a28      	ldr	r2, [pc, #160]	@ (800a3d0 <UART_SetConfig+0xac4>)
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a334:	e00f      	b.n	800a356 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a336:	4b26      	ldr	r3, [pc, #152]	@ (800a3d0 <UART_SetConfig+0xac4>)
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33a:	e00c      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a33c:	4b25      	ldr	r3, [pc, #148]	@ (800a3d4 <UART_SetConfig+0xac8>)
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	e009      	b.n	800a356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a348:	e005      	b.n	800a356 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a354:	bf00      	nop
    }

    if (pclk != 0U)
 800a356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d021      	beq.n	800a3a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d8 <UART_SetConfig+0xacc>)
 800a362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a366:	461a      	mov	r2, r3
 800a368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	441a      	add	r2, r3
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d909      	bls.n	800a39a <UART_SetConfig+0xa8e>
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a38c:	d205      	bcs.n	800a39a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	b29a      	uxth	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60da      	str	r2, [r3, #12]
 800a398:	e002      	b.n	800a3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3748      	adds	r7, #72	@ 0x48
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	03d09000 	.word	0x03d09000
 800a3d4:	003d0900 	.word	0x003d0900
 800a3d8:	0801c984 	.word	0x0801c984

0800a3dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d01a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4da:	d10a      	bne.n	800a4f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b098      	sub	sp, #96	@ 0x60
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a530:	f7f7 feea 	bl	8002308 <HAL_GetTick>
 800a534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b08      	cmp	r3, #8
 800a542:	d12f      	bne.n	800a5a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a54c:	2200      	movs	r2, #0
 800a54e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f88e 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d022      	beq.n	800a5a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a572:	653b      	str	r3, [r7, #80]	@ 0x50
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a57c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a57e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e6      	bne.n	800a55e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e063      	b.n	800a66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d149      	bne.n	800a646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f857 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d03c      	beq.n	800a646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e6      	bne.n	800a5cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a61e:	61fa      	str	r2, [r7, #28]
 800a620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	69b9      	ldr	r1, [r7, #24]
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	617b      	str	r3, [r7, #20]
   return(result);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e5      	bne.n	800a5fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e012      	b.n	800a66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2220      	movs	r2, #32
 800a64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2220      	movs	r2, #32
 800a652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3758      	adds	r7, #88	@ 0x58
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a684:	e04f      	b.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a68c:	d04b      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68e:	f7f7 fe3b 	bl	8002308 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d302      	bcc.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e04e      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d037      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ba:	d034      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b40      	cmp	r3, #64	@ 0x40
 800a6c0:	d031      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d110      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f921 	bl	800a920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2208      	movs	r2, #8
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e029      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a700:	d111      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a70a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f907 	bl	800a920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e00f      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4013      	ands	r3, r2
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	429a      	cmp	r2, r3
 800a734:	bf0c      	ite	eq
 800a736:	2301      	moveq	r3, #1
 800a738:	2300      	movne	r3, #0
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	429a      	cmp	r2, r3
 800a742:	d0a0      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b096      	sub	sp, #88	@ 0x58
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2222      	movs	r2, #34	@ 0x22
 800a778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a782:	2b00      	cmp	r3, #0
 800a784:	d02d      	beq.n	800a7e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78c:	4a40      	ldr	r2, [pc, #256]	@ (800a890 <UART_Start_Receive_DMA+0x140>)
 800a78e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a796:	4a3f      	ldr	r2, [pc, #252]	@ (800a894 <UART_Start_Receive_DMA+0x144>)
 800a798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7a0:	4a3d      	ldr	r2, [pc, #244]	@ (800a898 <UART_Start_Receive_DMA+0x148>)
 800a7a2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3324      	adds	r3, #36	@ 0x24
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	f7f8 f9f4 	bl	8002bb0 <HAL_DMA_Start_IT>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2210      	movs	r2, #16
 800a7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e051      	b.n	800a886 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d018      	beq.n	800a81c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a80e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e6      	bne.n	800a7ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82e:	f043 0301 	orr.w	r3, r3, #1
 800a832:	653b      	str	r3, [r7, #80]	@ 0x50
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a83c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a83e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e5      	bne.n	800a81c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3308      	adds	r3, #8
 800a856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	613b      	str	r3, [r7, #16]
   return(result);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a870:	623a      	str	r2, [r7, #32]
 800a872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	69f9      	ldr	r1, [r7, #28]
 800a876:	6a3a      	ldr	r2, [r7, #32]
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e5      	bne.n	800a850 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3758      	adds	r7, #88	@ 0x58
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	0800aa9f 	.word	0x0800aa9f
 800a894:	0800abc7 	.word	0x0800abc7
 800a898:	0800ac05 	.word	0x0800ac05

0800a89c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b08f      	sub	sp, #60	@ 0x3c
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ca:	e841 2300 	strex	r3, r2, [r1]
 800a8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1e6      	bne.n	800a8a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f6:	61ba      	str	r2, [r7, #24]
 800a8f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6979      	ldr	r1, [r7, #20]
 800a8fc:	69ba      	ldr	r2, [r7, #24]
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	613b      	str	r3, [r7, #16]
   return(result);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e5      	bne.n	800a8d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a912:	bf00      	nop
 800a914:	373c      	adds	r7, #60	@ 0x3c
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
	...

0800a920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b095      	sub	sp, #84	@ 0x54
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a930:	e853 3f00 	ldrex	r3, [r3]
 800a934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a93c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a946:	643b      	str	r3, [r7, #64]	@ 0x40
 800a948:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a94c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a94e:	e841 2300 	strex	r3, r2, [r1]
 800a952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1e6      	bne.n	800a928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3308      	adds	r3, #8
 800a960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	e853 3f00 	ldrex	r3, [r3]
 800a968:	61fb      	str	r3, [r7, #28]
   return(result);
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9e8 <UART_EndRxTransfer+0xc8>)
 800a96e:	4013      	ands	r3, r2
 800a970:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3308      	adds	r3, #8
 800a978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a97a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a97c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1e5      	bne.n	800a95a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a992:	2b01      	cmp	r3, #1
 800a994:	d118      	bne.n	800a9c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f023 0310 	bic.w	r3, r3, #16
 800a9aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b4:	61bb      	str	r3, [r7, #24]
 800a9b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6979      	ldr	r1, [r7, #20]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e6      	bne.n	800a996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9dc:	bf00      	nop
 800a9de:	3754      	adds	r7, #84	@ 0x54
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	effffffe 	.word	0xeffffffe

0800a9ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b090      	sub	sp, #64	@ 0x40
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa02:	d037      	beq.n	800aa74 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800aa04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3308      	adds	r3, #8
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa22:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa2c:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa34:	e841 2300 	strex	r3, r2, [r1]
 800aa38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e5      	bne.n	800aa0c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa54:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5e:	61fb      	str	r3, [r7, #28]
 800aa60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e6      	bne.n	800aa40 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa72:	e002      	b.n	800aa7a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800aa74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa76:	f7fe ff0b 	bl	8009890 <HAL_UART_TxCpltCallback>
}
 800aa7a:	bf00      	nop
 800aa7c:	3740      	adds	r7, #64	@ 0x40
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7fe ff07 	bl	80098a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b09c      	sub	sp, #112	@ 0x70
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab4:	d071      	beq.n	800ab9a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aacc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aace:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aad2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aadc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aade:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aaea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e6      	bne.n	800aabe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab10:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e5      	bne.n	800aaf0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	623b      	str	r3, [r7, #32]
   return(result);
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab3a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3308      	adds	r3, #8
 800ab42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab44:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e5      	bne.n	800ab24 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d118      	bne.n	800ab9a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f023 0310 	bic.w	r3, r3, #16
 800ab7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	69b9      	ldr	r1, [r7, #24]
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	617b      	str	r3, [r7, #20]
   return(result);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e6      	bne.n	800ab68 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d107      	bne.n	800abb8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abae:	4619      	mov	r1, r3
 800abb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abb2:	f7fe fe9f 	bl	80098f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb6:	e002      	b.n	800abbe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800abb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abba:	f7fe fe7d 	bl	80098b8 <HAL_UART_RxCpltCallback>
}
 800abbe:	bf00      	nop
 800abc0:	3770      	adds	r7, #112	@ 0x70
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d109      	bne.n	800abf6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	b29b      	uxth	r3, r3
 800abec:	4619      	mov	r1, r3
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7fe fe80 	bl	80098f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abf4:	e002      	b.n	800abfc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7fe fe68 	bl	80098cc <HAL_UART_RxHalfCpltCallback>
}
 800abfc:	bf00      	nop
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac10:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac2c:	2b80      	cmp	r3, #128	@ 0x80
 800ac2e:	d109      	bne.n	800ac44 <UART_DMAError+0x40>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b21      	cmp	r3, #33	@ 0x21
 800ac34:	d106      	bne.n	800ac44 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac3e:	6978      	ldr	r0, [r7, #20]
 800ac40:	f7ff fe2c 	bl	800a89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac4e:	2b40      	cmp	r3, #64	@ 0x40
 800ac50:	d109      	bne.n	800ac66 <UART_DMAError+0x62>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b22      	cmp	r3, #34	@ 0x22
 800ac56:	d106      	bne.n	800ac66 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac60:	6978      	ldr	r0, [r7, #20]
 800ac62:	f7ff fe5d 	bl	800a920 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6c:	f043 0210 	orr.w	r2, r3, #16
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac76:	6978      	ldr	r0, [r7, #20]
 800ac78:	f7fe fe32 	bl	80098e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7c:	bf00      	nop
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7fe fe20 	bl	80098e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	61bb      	str	r3, [r7, #24]
 800acd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6979      	ldr	r1, [r7, #20]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	613b      	str	r3, [r7, #16]
   return(result);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e6      	bne.n	800acb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7fe fdcd 	bl	8009890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf6:	bf00      	nop
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e027      	b.n	800ada0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2224      	movs	r2, #36	@ 0x24
 800ad5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0201 	bic.w	r2, r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d101      	bne.n	800adc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e02d      	b.n	800ae20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2224      	movs	r2, #36	@ 0x24
 800add0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f84f 	bl	800aea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2220      	movs	r2, #32
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e02d      	b.n	800ae9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2224      	movs	r2, #36	@ 0x24
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0201 	bic.w	r2, r2, #1
 800ae66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f811 	bl	800aea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d108      	bne.n	800aec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aec4:	e031      	b.n	800af2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aec6:	2310      	movs	r3, #16
 800aec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aeca:	2310      	movs	r3, #16
 800aecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	0e5b      	lsrs	r3, r3, #25
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	0f5b      	lsrs	r3, r3, #29
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	7b3a      	ldrb	r2, [r7, #12]
 800aef2:	4911      	ldr	r1, [pc, #68]	@ (800af38 <UARTEx_SetNbDataToProcess+0x94>)
 800aef4:	5c8a      	ldrb	r2, [r1, r2]
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aefa:	7b3a      	ldrb	r2, [r7, #12]
 800aefc:	490f      	ldr	r1, [pc, #60]	@ (800af3c <UARTEx_SetNbDataToProcess+0x98>)
 800aefe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af00:	fb93 f3f2 	sdiv	r3, r3, r2
 800af04:	b29a      	uxth	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	7b7a      	ldrb	r2, [r7, #13]
 800af10:	4909      	ldr	r1, [pc, #36]	@ (800af38 <UARTEx_SetNbDataToProcess+0x94>)
 800af12:	5c8a      	ldrb	r2, [r1, r2]
 800af14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af18:	7b7a      	ldrb	r2, [r7, #13]
 800af1a:	4908      	ldr	r1, [pc, #32]	@ (800af3c <UARTEx_SetNbDataToProcess+0x98>)
 800af1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	0801c99c 	.word	0x0801c99c
 800af3c:	0801c9a4 	.word	0x0801c9a4

0800af40 <__NVIC_SetPriority>:
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800af4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af50:	2b00      	cmp	r3, #0
 800af52:	db0a      	blt.n	800af6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	b2da      	uxtb	r2, r3
 800af58:	490c      	ldr	r1, [pc, #48]	@ (800af8c <__NVIC_SetPriority+0x4c>)
 800af5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af5e:	0112      	lsls	r2, r2, #4
 800af60:	b2d2      	uxtb	r2, r2
 800af62:	440b      	add	r3, r1
 800af64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800af68:	e00a      	b.n	800af80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	4908      	ldr	r1, [pc, #32]	@ (800af90 <__NVIC_SetPriority+0x50>)
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	3b04      	subs	r3, #4
 800af78:	0112      	lsls	r2, r2, #4
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	440b      	add	r3, r1
 800af7e:	761a      	strb	r2, [r3, #24]
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	e000e100 	.word	0xe000e100
 800af90:	e000ed00 	.word	0xe000ed00

0800af94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <SysTick_Handler+0x1c>)
 800af9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800af9c:	f002 f982 	bl	800d2a4 <xTaskGetSchedulerState>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d001      	beq.n	800afaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afa6:	f000 fd9f 	bl	800bae8 <xPortSysTickHandler>
  }
}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	e000e010 	.word	0xe000e010

0800afb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afb8:	2100      	movs	r1, #0
 800afba:	f06f 0004 	mvn.w	r0, #4
 800afbe:	f7ff ffbf 	bl	800af40 <__NVIC_SetPriority>
#endif
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afce:	f3ef 8305 	mrs	r3, IPSR
 800afd2:	603b      	str	r3, [r7, #0]
  return(result);
 800afd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800afda:	f06f 0305 	mvn.w	r3, #5
 800afde:	607b      	str	r3, [r7, #4]
 800afe0:	e00c      	b.n	800affc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afe2:	4b0a      	ldr	r3, [pc, #40]	@ (800b00c <osKernelInitialize+0x44>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d105      	bne.n	800aff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afea:	4b08      	ldr	r3, [pc, #32]	@ (800b00c <osKernelInitialize+0x44>)
 800afec:	2201      	movs	r2, #1
 800afee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	607b      	str	r3, [r7, #4]
 800aff4:	e002      	b.n	800affc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800affa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800affc:	687b      	ldr	r3, [r7, #4]
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	24009a10 	.word	0x24009a10

0800b010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b016:	f3ef 8305 	mrs	r3, IPSR
 800b01a:	603b      	str	r3, [r7, #0]
  return(result);
 800b01c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b022:	f06f 0305 	mvn.w	r3, #5
 800b026:	607b      	str	r3, [r7, #4]
 800b028:	e010      	b.n	800b04c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b02a:	4b0b      	ldr	r3, [pc, #44]	@ (800b058 <osKernelStart+0x48>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d109      	bne.n	800b046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b032:	f7ff ffbf 	bl	800afb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b036:	4b08      	ldr	r3, [pc, #32]	@ (800b058 <osKernelStart+0x48>)
 800b038:	2202      	movs	r2, #2
 800b03a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b03c:	f001 fcbc 	bl	800c9b8 <vTaskStartScheduler>
      stat = osOK;
 800b040:	2300      	movs	r3, #0
 800b042:	607b      	str	r3, [r7, #4]
 800b044:	e002      	b.n	800b04c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b04a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b04c:	687b      	ldr	r3, [r7, #4]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	24009a10 	.word	0x24009a10

0800b05c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08e      	sub	sp, #56	@ 0x38
 800b060:	af04      	add	r7, sp, #16
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b06c:	f3ef 8305 	mrs	r3, IPSR
 800b070:	617b      	str	r3, [r7, #20]
  return(result);
 800b072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b074:	2b00      	cmp	r3, #0
 800b076:	d17e      	bne.n	800b176 <osThreadNew+0x11a>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d07b      	beq.n	800b176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b07e:	2380      	movs	r3, #128	@ 0x80
 800b080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b082:	2318      	movs	r3, #24
 800b084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b086:	2300      	movs	r3, #0
 800b088:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b08e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d045      	beq.n	800b122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <osThreadNew+0x48>
        name = attr->name;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d008      	beq.n	800b0ca <osThreadNew+0x6e>
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b38      	cmp	r3, #56	@ 0x38
 800b0bc:	d805      	bhi.n	800b0ca <osThreadNew+0x6e>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <osThreadNew+0x72>
        return (NULL);
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e054      	b.n	800b178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	089b      	lsrs	r3, r3, #2
 800b0dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00e      	beq.n	800b104 <osThreadNew+0xa8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	2b5b      	cmp	r3, #91	@ 0x5b
 800b0ec:	d90a      	bls.n	800b104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d006      	beq.n	800b104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <osThreadNew+0xa8>
        mem = 1;
 800b0fe:	2301      	movs	r3, #1
 800b100:	61bb      	str	r3, [r7, #24]
 800b102:	e010      	b.n	800b126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10c      	bne.n	800b126 <osThreadNew+0xca>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d108      	bne.n	800b126 <osThreadNew+0xca>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <osThreadNew+0xca>
          mem = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61bb      	str	r3, [r7, #24]
 800b120:	e001      	b.n	800b126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d110      	bne.n	800b14e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b134:	9202      	str	r2, [sp, #8]
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	6a3a      	ldr	r2, [r7, #32]
 800b140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f001 fa5c 	bl	800c600 <xTaskCreateStatic>
 800b148:	4603      	mov	r3, r0
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	e013      	b.n	800b176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d110      	bne.n	800b176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	b29a      	uxth	r2, r3
 800b158:	f107 0310 	add.w	r3, r7, #16
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f001 faaa 	bl	800c6c0 <xTaskCreate>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d001      	beq.n	800b176 <osThreadNew+0x11a>
            hTask = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b176:	693b      	ldr	r3, [r7, #16]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	@ 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b188:	f3ef 8305 	mrs	r3, IPSR
 800b18c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b18e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b190:	2b00      	cmp	r3, #0
 800b192:	d003      	beq.n	800b19c <osDelay+0x1c>
    stat = osErrorISR;
 800b194:	f06f 0305 	mvn.w	r3, #5
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	e007      	b.n	800b1ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 fbd0 	bl	800c94c <vTaskDelay>
    }
  }

  return (stat);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4a07      	ldr	r2, [pc, #28]	@ (800b1e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4a06      	ldr	r2, [pc, #24]	@ (800b1e8 <vApplicationGetIdleTaskMemory+0x30>)
 800b1ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2280      	movs	r2, #128	@ 0x80
 800b1d4:	601a      	str	r2, [r3, #0]
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	24009a14 	.word	0x24009a14
 800b1e8:	24009a70 	.word	0x24009a70

0800b1ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4a07      	ldr	r2, [pc, #28]	@ (800b218 <vApplicationGetTimerTaskMemory+0x2c>)
 800b1fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	4a06      	ldr	r2, [pc, #24]	@ (800b21c <vApplicationGetTimerTaskMemory+0x30>)
 800b202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b20a:	601a      	str	r2, [r3, #0]
}
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	24009c70 	.word	0x24009c70
 800b21c:	24009ccc 	.word	0x24009ccc

0800b220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b08a      	sub	sp, #40	@ 0x28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b22c:	f001 fc2c 	bl	800ca88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b230:	4b5c      	ldr	r3, [pc, #368]	@ (800b3a4 <pvPortMalloc+0x184>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b238:	f000 f924 	bl	800b484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b23c:	4b5a      	ldr	r3, [pc, #360]	@ (800b3a8 <pvPortMalloc+0x188>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4013      	ands	r3, r2
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 8095 	bne.w	800b374 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01e      	beq.n	800b28e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b250:	2208      	movs	r2, #8
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4413      	add	r3, r2
 800b256:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f003 0307 	and.w	r3, r3, #7
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d015      	beq.n	800b28e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f023 0307 	bic.w	r3, r3, #7
 800b268:	3308      	adds	r3, #8
 800b26a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <pvPortMalloc+0x6e>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	617b      	str	r3, [r7, #20]
}
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
 800b28c:	e7fd      	b.n	800b28a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d06f      	beq.n	800b374 <pvPortMalloc+0x154>
 800b294:	4b45      	ldr	r3, [pc, #276]	@ (800b3ac <pvPortMalloc+0x18c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d86a      	bhi.n	800b374 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b29e:	4b44      	ldr	r3, [pc, #272]	@ (800b3b0 <pvPortMalloc+0x190>)
 800b2a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2a2:	4b43      	ldr	r3, [pc, #268]	@ (800b3b0 <pvPortMalloc+0x190>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2a8:	e004      	b.n	800b2b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d903      	bls.n	800b2c6 <pvPortMalloc+0xa6>
 800b2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1f1      	bne.n	800b2aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2c6:	4b37      	ldr	r3, [pc, #220]	@ (800b3a4 <pvPortMalloc+0x184>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d051      	beq.n	800b374 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	4413      	add	r3, r2
 800b2d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	1ad2      	subs	r2, r2, r3
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d920      	bls.n	800b334 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	f003 0307 	and.w	r3, r3, #7
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <pvPortMalloc+0xfc>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	613b      	str	r3, [r7, #16]
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	e7fd      	b.n	800b318 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	1ad2      	subs	r2, r2, r3
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b32e:	69b8      	ldr	r0, [r7, #24]
 800b330:	f000 f90a 	bl	800b548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b334:	4b1d      	ldr	r3, [pc, #116]	@ (800b3ac <pvPortMalloc+0x18c>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	4a1b      	ldr	r2, [pc, #108]	@ (800b3ac <pvPortMalloc+0x18c>)
 800b340:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b342:	4b1a      	ldr	r3, [pc, #104]	@ (800b3ac <pvPortMalloc+0x18c>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	4b1b      	ldr	r3, [pc, #108]	@ (800b3b4 <pvPortMalloc+0x194>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d203      	bcs.n	800b356 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b34e:	4b17      	ldr	r3, [pc, #92]	@ (800b3ac <pvPortMalloc+0x18c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a18      	ldr	r2, [pc, #96]	@ (800b3b4 <pvPortMalloc+0x194>)
 800b354:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	4b13      	ldr	r3, [pc, #76]	@ (800b3a8 <pvPortMalloc+0x188>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	431a      	orrs	r2, r3
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b366:	2200      	movs	r2, #0
 800b368:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b36a:	4b13      	ldr	r3, [pc, #76]	@ (800b3b8 <pvPortMalloc+0x198>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3301      	adds	r3, #1
 800b370:	4a11      	ldr	r2, [pc, #68]	@ (800b3b8 <pvPortMalloc+0x198>)
 800b372:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b374:	f001 fb96 	bl	800caa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <pvPortMalloc+0x17a>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	60fb      	str	r3, [r7, #12]
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop
 800b398:	e7fd      	b.n	800b396 <pvPortMalloc+0x176>
	return pvReturn;
 800b39a:	69fb      	ldr	r3, [r7, #28]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3728      	adds	r7, #40	@ 0x28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	2400dcd4 	.word	0x2400dcd4
 800b3a8:	2400dce8 	.word	0x2400dce8
 800b3ac:	2400dcd8 	.word	0x2400dcd8
 800b3b0:	2400dccc 	.word	0x2400dccc
 800b3b4:	2400dcdc 	.word	0x2400dcdc
 800b3b8:	2400dce0 	.word	0x2400dce0

0800b3bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d04f      	beq.n	800b46e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b3ce:	2308      	movs	r3, #8
 800b3d0:	425b      	negs	r3, r3
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	4b25      	ldr	r3, [pc, #148]	@ (800b478 <vPortFree+0xbc>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <vPortFree+0x46>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	60fb      	str	r3, [r7, #12]
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	e7fd      	b.n	800b3fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00b      	beq.n	800b422 <vPortFree+0x66>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	60bb      	str	r3, [r7, #8]
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	e7fd      	b.n	800b41e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	4b14      	ldr	r3, [pc, #80]	@ (800b478 <vPortFree+0xbc>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4013      	ands	r3, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01e      	beq.n	800b46e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11a      	bne.n	800b46e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	4b0e      	ldr	r3, [pc, #56]	@ (800b478 <vPortFree+0xbc>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	43db      	mvns	r3, r3
 800b442:	401a      	ands	r2, r3
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b448:	f001 fb1e 	bl	800ca88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	4b0a      	ldr	r3, [pc, #40]	@ (800b47c <vPortFree+0xc0>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4413      	add	r3, r2
 800b456:	4a09      	ldr	r2, [pc, #36]	@ (800b47c <vPortFree+0xc0>)
 800b458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b45a:	6938      	ldr	r0, [r7, #16]
 800b45c:	f000 f874 	bl	800b548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b460:	4b07      	ldr	r3, [pc, #28]	@ (800b480 <vPortFree+0xc4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	4a06      	ldr	r2, [pc, #24]	@ (800b480 <vPortFree+0xc4>)
 800b468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b46a:	f001 fb1b 	bl	800caa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b46e:	bf00      	nop
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2400dce8 	.word	0x2400dce8
 800b47c:	2400dcd8 	.word	0x2400dcd8
 800b480:	2400dce4 	.word	0x2400dce4

0800b484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b48a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b48e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b490:	4b27      	ldr	r3, [pc, #156]	@ (800b530 <prvHeapInit+0xac>)
 800b492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00c      	beq.n	800b4b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3307      	adds	r3, #7
 800b4a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0307 	bic.w	r3, r3, #7
 800b4aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b530 <prvHeapInit+0xac>)
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b534 <prvHeapInit+0xb0>)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4c2:	4b1c      	ldr	r3, [pc, #112]	@ (800b534 <prvHeapInit+0xb0>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4a15      	ldr	r2, [pc, #84]	@ (800b538 <prvHeapInit+0xb4>)
 800b4e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4e6:	4b14      	ldr	r3, [pc, #80]	@ (800b538 <prvHeapInit+0xb4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4ee:	4b12      	ldr	r3, [pc, #72]	@ (800b538 <prvHeapInit+0xb4>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	1ad2      	subs	r2, r2, r3
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b504:	4b0c      	ldr	r3, [pc, #48]	@ (800b538 <prvHeapInit+0xb4>)
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4a0a      	ldr	r2, [pc, #40]	@ (800b53c <prvHeapInit+0xb8>)
 800b512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4a09      	ldr	r2, [pc, #36]	@ (800b540 <prvHeapInit+0xbc>)
 800b51a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b51c:	4b09      	ldr	r3, [pc, #36]	@ (800b544 <prvHeapInit+0xc0>)
 800b51e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	2400a0cc 	.word	0x2400a0cc
 800b534:	2400dccc 	.word	0x2400dccc
 800b538:	2400dcd4 	.word	0x2400dcd4
 800b53c:	2400dcdc 	.word	0x2400dcdc
 800b540:	2400dcd8 	.word	0x2400dcd8
 800b544:	2400dce8 	.word	0x2400dce8

0800b548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b550:	4b28      	ldr	r3, [pc, #160]	@ (800b5f4 <prvInsertBlockIntoFreeList+0xac>)
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e002      	b.n	800b55c <prvInsertBlockIntoFreeList+0x14>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d8f7      	bhi.n	800b556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d108      	bne.n	800b58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	441a      	add	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d118      	bne.n	800b5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	4b15      	ldr	r3, [pc, #84]	@ (800b5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d00d      	beq.n	800b5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	441a      	add	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e008      	b.n	800b5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e003      	b.n	800b5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d002      	beq.n	800b5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	2400dccc 	.word	0x2400dccc
 800b5f8:	2400dcd4 	.word	0x2400dcd4

0800b5fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f103 0208 	add.w	r2, r3, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f103 0208 	add.w	r2, r3, #8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f103 0208 	add.w	r2, r3, #8
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
}
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b085      	sub	sp, #20
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6b4:	d103      	bne.n	800b6be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e00c      	b.n	800b6d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e002      	b.n	800b6cc <vListInsert+0x2e>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d2f6      	bcs.n	800b6c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
}
 800b704:	bf00      	nop
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	6892      	ldr	r2, [r2, #8]
 800b726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	6852      	ldr	r2, [r2, #4]
 800b730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d103      	bne.n	800b744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689a      	ldr	r2, [r3, #8]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	1e5a      	subs	r2, r3, #1
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	3b04      	subs	r3, #4
 800b774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3b04      	subs	r3, #4
 800b782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f023 0201 	bic.w	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3b04      	subs	r3, #4
 800b792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b794:	4a0c      	ldr	r2, [pc, #48]	@ (800b7c8 <pxPortInitialiseStack+0x64>)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b14      	subs	r3, #20
 800b79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3b04      	subs	r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f06f 0202 	mvn.w	r2, #2
 800b7b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	3b20      	subs	r3, #32
 800b7b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	0800b7cd 	.word	0x0800b7cd

0800b7cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7d6:	4b13      	ldr	r3, [pc, #76]	@ (800b824 <prvTaskExitError+0x58>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7de:	d00b      	beq.n	800b7f8 <prvTaskExitError+0x2c>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	60fb      	str	r3, [r7, #12]
}
 800b7f2:	bf00      	nop
 800b7f4:	bf00      	nop
 800b7f6:	e7fd      	b.n	800b7f4 <prvTaskExitError+0x28>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	60bb      	str	r3, [r7, #8]
}
 800b80a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b80c:	bf00      	nop
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0fc      	beq.n	800b80e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	24000030 	.word	0x24000030
	...

0800b830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b830:	4b07      	ldr	r3, [pc, #28]	@ (800b850 <pxCurrentTCBConst2>)
 800b832:	6819      	ldr	r1, [r3, #0]
 800b834:	6808      	ldr	r0, [r1, #0]
 800b836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83a:	f380 8809 	msr	PSP, r0
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f04f 0000 	mov.w	r0, #0
 800b846:	f380 8811 	msr	BASEPRI, r0
 800b84a:	4770      	bx	lr
 800b84c:	f3af 8000 	nop.w

0800b850 <pxCurrentTCBConst2>:
 800b850:	2400dd34 	.word	0x2400dd34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop

0800b858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b858:	4808      	ldr	r0, [pc, #32]	@ (800b87c <prvPortStartFirstTask+0x24>)
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	6800      	ldr	r0, [r0, #0]
 800b85e:	f380 8808 	msr	MSP, r0
 800b862:	f04f 0000 	mov.w	r0, #0
 800b866:	f380 8814 	msr	CONTROL, r0
 800b86a:	b662      	cpsie	i
 800b86c:	b661      	cpsie	f
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	df00      	svc	0
 800b878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b87a:	bf00      	nop
 800b87c:	e000ed08 	.word	0xe000ed08

0800b880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b886:	4b47      	ldr	r3, [pc, #284]	@ (800b9a4 <xPortStartScheduler+0x124>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a47      	ldr	r2, [pc, #284]	@ (800b9a8 <xPortStartScheduler+0x128>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d10b      	bne.n	800b8a8 <xPortStartScheduler+0x28>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	613b      	str	r3, [r7, #16]
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	e7fd      	b.n	800b8a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9a4 <xPortStartScheduler+0x124>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a3f      	ldr	r2, [pc, #252]	@ (800b9ac <xPortStartScheduler+0x12c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d10b      	bne.n	800b8ca <xPortStartScheduler+0x4a>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	60fb      	str	r3, [r7, #12]
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	e7fd      	b.n	800b8c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8ca:	4b39      	ldr	r3, [pc, #228]	@ (800b9b0 <xPortStartScheduler+0x130>)
 800b8cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	22ff      	movs	r2, #255	@ 0xff
 800b8da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	4b31      	ldr	r3, [pc, #196]	@ (800b9b4 <xPortStartScheduler+0x134>)
 800b8f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8f2:	4b31      	ldr	r3, [pc, #196]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b8f4:	2207      	movs	r2, #7
 800b8f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8f8:	e009      	b.n	800b90e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b8fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	4a2d      	ldr	r2, [pc, #180]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	b2db      	uxtb	r3, r3
 800b912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b916:	2b80      	cmp	r3, #128	@ 0x80
 800b918:	d0ef      	beq.n	800b8fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b91a:	4b27      	ldr	r3, [pc, #156]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f1c3 0307 	rsb	r3, r3, #7
 800b922:	2b04      	cmp	r3, #4
 800b924:	d00b      	beq.n	800b93e <xPortStartScheduler+0xbe>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60bb      	str	r3, [r7, #8]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b93e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	021b      	lsls	r3, r3, #8
 800b944:	4a1c      	ldr	r2, [pc, #112]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b948:	4b1b      	ldr	r3, [pc, #108]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b950:	4a19      	ldr	r2, [pc, #100]	@ (800b9b8 <xPortStartScheduler+0x138>)
 800b952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	b2da      	uxtb	r2, r3
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b95c:	4b17      	ldr	r3, [pc, #92]	@ (800b9bc <xPortStartScheduler+0x13c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a16      	ldr	r2, [pc, #88]	@ (800b9bc <xPortStartScheduler+0x13c>)
 800b962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b968:	4b14      	ldr	r3, [pc, #80]	@ (800b9bc <xPortStartScheduler+0x13c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a13      	ldr	r2, [pc, #76]	@ (800b9bc <xPortStartScheduler+0x13c>)
 800b96e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b974:	f000 f8da 	bl	800bb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b978:	4b11      	ldr	r3, [pc, #68]	@ (800b9c0 <xPortStartScheduler+0x140>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b97e:	f000 f8f9 	bl	800bb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b982:	4b10      	ldr	r3, [pc, #64]	@ (800b9c4 <xPortStartScheduler+0x144>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a0f      	ldr	r2, [pc, #60]	@ (800b9c4 <xPortStartScheduler+0x144>)
 800b988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b98c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b98e:	f7ff ff63 	bl	800b858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b992:	f001 f9ef 	bl	800cd74 <vTaskSwitchContext>
	prvTaskExitError();
 800b996:	f7ff ff19 	bl	800b7cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	e000ed00 	.word	0xe000ed00
 800b9a8:	410fc271 	.word	0x410fc271
 800b9ac:	410fc270 	.word	0x410fc270
 800b9b0:	e000e400 	.word	0xe000e400
 800b9b4:	2400dcec 	.word	0x2400dcec
 800b9b8:	2400dcf0 	.word	0x2400dcf0
 800b9bc:	e000ed20 	.word	0xe000ed20
 800b9c0:	24000030 	.word	0x24000030
 800b9c4:	e000ef34 	.word	0xe000ef34

0800b9c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ba24 <vPortEnterCritical+0x5c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba24 <vPortEnterCritical+0x5c>)
 800b9ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <vPortEnterCritical+0x5c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d110      	bne.n	800ba16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9f4:	4b0c      	ldr	r3, [pc, #48]	@ (800ba28 <vPortEnterCritical+0x60>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <vPortEnterCritical+0x4e>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	603b      	str	r3, [r7, #0]
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <vPortEnterCritical+0x4a>
	}
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	24000030 	.word	0x24000030
 800ba28:	e000ed04 	.word	0xe000ed04

0800ba2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba32:	4b12      	ldr	r3, [pc, #72]	@ (800ba7c <vPortExitCritical+0x50>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10b      	bne.n	800ba52 <vPortExitCritical+0x26>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	607b      	str	r3, [r7, #4]
}
 800ba4c:	bf00      	nop
 800ba4e:	bf00      	nop
 800ba50:	e7fd      	b.n	800ba4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba52:	4b0a      	ldr	r3, [pc, #40]	@ (800ba7c <vPortExitCritical+0x50>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	4a08      	ldr	r2, [pc, #32]	@ (800ba7c <vPortExitCritical+0x50>)
 800ba5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba5c:	4b07      	ldr	r3, [pc, #28]	@ (800ba7c <vPortExitCritical+0x50>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d105      	bne.n	800ba70 <vPortExitCritical+0x44>
 800ba64:	2300      	movs	r3, #0
 800ba66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	24000030 	.word	0x24000030

0800ba80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba80:	f3ef 8009 	mrs	r0, PSP
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	4b15      	ldr	r3, [pc, #84]	@ (800bae0 <pxCurrentTCBConst>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	f01e 0f10 	tst.w	lr, #16
 800ba90:	bf08      	it	eq
 800ba92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	6010      	str	r0, [r2, #0]
 800ba9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800baa4:	f380 8811 	msr	BASEPRI, r0
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f001 f960 	bl	800cd74 <vTaskSwitchContext>
 800bab4:	f04f 0000 	mov.w	r0, #0
 800bab8:	f380 8811 	msr	BASEPRI, r0
 800babc:	bc09      	pop	{r0, r3}
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	6808      	ldr	r0, [r1, #0]
 800bac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac6:	f01e 0f10 	tst.w	lr, #16
 800baca:	bf08      	it	eq
 800bacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bad0:	f380 8809 	msr	PSP, r0
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w

0800bae0 <pxCurrentTCBConst>:
 800bae0:	2400dd34 	.word	0x2400dd34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop

0800bae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	607b      	str	r3, [r7, #4]
}
 800bb00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb02:	f001 f87d 	bl	800cc00 <xTaskIncrementTick>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb0c:	4b06      	ldr	r3, [pc, #24]	@ (800bb28 <xPortSysTickHandler+0x40>)
 800bb0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	2300      	movs	r3, #0
 800bb16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f383 8811 	msr	BASEPRI, r3
}
 800bb1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb30:	4b0b      	ldr	r3, [pc, #44]	@ (800bb60 <vPortSetupTimerInterrupt+0x34>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb36:	4b0b      	ldr	r3, [pc, #44]	@ (800bb64 <vPortSetupTimerInterrupt+0x38>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <vPortSetupTimerInterrupt+0x3c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a0a      	ldr	r2, [pc, #40]	@ (800bb6c <vPortSetupTimerInterrupt+0x40>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	099b      	lsrs	r3, r3, #6
 800bb48:	4a09      	ldr	r2, [pc, #36]	@ (800bb70 <vPortSetupTimerInterrupt+0x44>)
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb4e:	4b04      	ldr	r3, [pc, #16]	@ (800bb60 <vPortSetupTimerInterrupt+0x34>)
 800bb50:	2207      	movs	r2, #7
 800bb52:	601a      	str	r2, [r3, #0]
}
 800bb54:	bf00      	nop
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	e000e010 	.word	0xe000e010
 800bb64:	e000e018 	.word	0xe000e018
 800bb68:	24000000 	.word	0x24000000
 800bb6c:	10624dd3 	.word	0x10624dd3
 800bb70:	e000e014 	.word	0xe000e014

0800bb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb84 <vPortEnableVFP+0x10>
 800bb78:	6801      	ldr	r1, [r0, #0]
 800bb7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb7e:	6001      	str	r1, [r0, #0]
 800bb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb82:	bf00      	nop
 800bb84:	e000ed88 	.word	0xe000ed88

0800bb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb8e:	f3ef 8305 	mrs	r3, IPSR
 800bb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b0f      	cmp	r3, #15
 800bb98:	d915      	bls.n	800bbc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb9a:	4a18      	ldr	r2, [pc, #96]	@ (800bbfc <vPortValidateInterruptPriority+0x74>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4413      	add	r3, r2
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bba4:	4b16      	ldr	r3, [pc, #88]	@ (800bc00 <vPortValidateInterruptPriority+0x78>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	7afa      	ldrb	r2, [r7, #11]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d20b      	bcs.n	800bbc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	607b      	str	r3, [r7, #4]
}
 800bbc0:	bf00      	nop
 800bbc2:	bf00      	nop
 800bbc4:	e7fd      	b.n	800bbc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc04 <vPortValidateInterruptPriority+0x7c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bbce:	4b0e      	ldr	r3, [pc, #56]	@ (800bc08 <vPortValidateInterruptPriority+0x80>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d90b      	bls.n	800bbee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	603b      	str	r3, [r7, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <vPortValidateInterruptPriority+0x62>
	}
 800bbee:	bf00      	nop
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	e000e3f0 	.word	0xe000e3f0
 800bc00:	2400dcec 	.word	0x2400dcec
 800bc04:	e000ed0c 	.word	0xe000ed0c
 800bc08:	2400dcf0 	.word	0x2400dcf0

0800bc0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10b      	bne.n	800bc38 <xQueueGenericReset+0x2c>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	60bb      	str	r3, [r7, #8]
}
 800bc32:	bf00      	nop
 800bc34:	bf00      	nop
 800bc36:	e7fd      	b.n	800bc34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc38:	f7ff fec6 	bl	800b9c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc44:	68f9      	ldr	r1, [r7, #12]
 800bc46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc6e:	fb01 f303 	mul.w	r3, r1, r3
 800bc72:	441a      	add	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	22ff      	movs	r2, #255	@ 0xff
 800bc7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	22ff      	movs	r2, #255	@ 0xff
 800bc84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d114      	bne.n	800bcb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d01a      	beq.n	800bccc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	3310      	adds	r3, #16
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 f91a 	bl	800ced4 <xTaskRemoveFromEventList>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d012      	beq.n	800bccc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bca6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcdc <xQueueGenericReset+0xd0>)
 800bca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	e009      	b.n	800bccc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3310      	adds	r3, #16
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff fc9d 	bl	800b5fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3324      	adds	r3, #36	@ 0x24
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff fc98 	bl	800b5fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bccc:	f7ff feae 	bl	800ba2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcd0:	2301      	movs	r3, #1
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	e000ed04 	.word	0xe000ed04

0800bce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08e      	sub	sp, #56	@ 0x38
 800bce4:	af02      	add	r7, sp, #8
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10b      	bne.n	800bd0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10b      	bne.n	800bd2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop
 800bd28:	e7fd      	b.n	800bd26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <xQueueGenericCreateStatic+0x56>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <xQueueGenericCreateStatic+0x5a>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <xQueueGenericCreateStatic+0x5c>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10b      	bne.n	800bd58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	623b      	str	r3, [r7, #32]
}
 800bd52:	bf00      	nop
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <xQueueGenericCreateStatic+0x84>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <xQueueGenericCreateStatic+0x88>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e000      	b.n	800bd6a <xQueueGenericCreateStatic+0x8a>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	61fb      	str	r3, [r7, #28]
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	e7fd      	b.n	800bd82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd86:	2350      	movs	r3, #80	@ 0x50
 800bd88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2b50      	cmp	r3, #80	@ 0x50
 800bd8e:	d00b      	beq.n	800bda8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	61bb      	str	r3, [r7, #24]
}
 800bda2:	bf00      	nop
 800bda4:	bf00      	nop
 800bda6:	e7fd      	b.n	800bda4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bda8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00d      	beq.n	800bdd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 f805 	bl	800bdda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3730      	adds	r7, #48	@ 0x30
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e002      	b.n	800bdfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be08:	2101      	movs	r1, #1
 800be0a:	69b8      	ldr	r0, [r7, #24]
 800be0c:	f7ff fefe 	bl	800bc0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be18:	bf00      	nop
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	@ 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be2e:	2300      	movs	r3, #0
 800be30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10b      	bne.n	800be54 <xQueueGenericSend+0x34>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be4e:	bf00      	nop
 800be50:	bf00      	nop
 800be52:	e7fd      	b.n	800be50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d103      	bne.n	800be62 <xQueueGenericSend+0x42>
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <xQueueGenericSend+0x46>
 800be62:	2301      	movs	r3, #1
 800be64:	e000      	b.n	800be68 <xQueueGenericSend+0x48>
 800be66:	2300      	movs	r3, #0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <xQueueGenericSend+0x64>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be7e:	bf00      	nop
 800be80:	bf00      	nop
 800be82:	e7fd      	b.n	800be80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b02      	cmp	r3, #2
 800be88:	d103      	bne.n	800be92 <xQueueGenericSend+0x72>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <xQueueGenericSend+0x76>
 800be92:	2301      	movs	r3, #1
 800be94:	e000      	b.n	800be98 <xQueueGenericSend+0x78>
 800be96:	2300      	movs	r3, #0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <xQueueGenericSend+0x94>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	623b      	str	r3, [r7, #32]
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beb4:	f001 f9f6 	bl	800d2a4 <xTaskGetSchedulerState>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d102      	bne.n	800bec4 <xQueueGenericSend+0xa4>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <xQueueGenericSend+0xa8>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e000      	b.n	800beca <xQueueGenericSend+0xaa>
 800bec8:	2300      	movs	r3, #0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10b      	bne.n	800bee6 <xQueueGenericSend+0xc6>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	61fb      	str	r3, [r7, #28]
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bee6:	f7ff fd6f 	bl	800b9c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d302      	bcc.n	800befc <xQueueGenericSend+0xdc>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d129      	bne.n	800bf50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf02:	f000 fa0f 	bl	800c324 <prvCopyDataToQueue>
 800bf06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf12:	3324      	adds	r3, #36	@ 0x24
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 ffdd 	bl	800ced4 <xTaskRemoveFromEventList>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d013      	beq.n	800bf48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf20:	4b3f      	ldr	r3, [pc, #252]	@ (800c020 <xQueueGenericSend+0x200>)
 800bf22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	e00a      	b.n	800bf48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf38:	4b39      	ldr	r3, [pc, #228]	@ (800c020 <xQueueGenericSend+0x200>)
 800bf3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf48:	f7ff fd70 	bl	800ba2c <vPortExitCritical>
				return pdPASS;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e063      	b.n	800c018 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf56:	f7ff fd69 	bl	800ba2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e05c      	b.n	800c018 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d106      	bne.n	800bf72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f83f 	bl	800cfec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf72:	f7ff fd5b 	bl	800ba2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf76:	f000 fd87 	bl	800ca88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf7a:	f7ff fd25 	bl	800b9c8 <vPortEnterCritical>
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf8a:	d103      	bne.n	800bf94 <xQueueGenericSend+0x174>
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf9a:	b25b      	sxtb	r3, r3
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfa0:	d103      	bne.n	800bfaa <xQueueGenericSend+0x18a>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfaa:	f7ff fd3f 	bl	800ba2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfae:	1d3a      	adds	r2, r7, #4
 800bfb0:	f107 0314 	add.w	r3, r7, #20
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f001 f82e 	bl	800d018 <xTaskCheckForTimeOut>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d124      	bne.n	800c00c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfc4:	f000 faa6 	bl	800c514 <prvIsQueueFull>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d018      	beq.n	800c000 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 ff2a 	bl	800ce30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfde:	f000 fa31 	bl	800c444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfe2:	f000 fd5f 	bl	800caa4 <xTaskResumeAll>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f af7c 	bne.w	800bee6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bfee:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <xQueueGenericSend+0x200>)
 800bff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	e772      	b.n	800bee6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c002:	f000 fa1f 	bl	800c444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c006:	f000 fd4d 	bl	800caa4 <xTaskResumeAll>
 800c00a:	e76c      	b.n	800bee6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c00c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c00e:	f000 fa19 	bl	800c444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c012:	f000 fd47 	bl	800caa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3738      	adds	r7, #56	@ 0x38
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	e000ed04 	.word	0xe000ed04

0800c024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b090      	sub	sp, #64	@ 0x40
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	e7fd      	b.n	800c050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d103      	bne.n	800c062 <xQueueGenericSendFromISR+0x3e>
 800c05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <xQueueGenericSendFromISR+0x42>
 800c062:	2301      	movs	r3, #1
 800c064:	e000      	b.n	800c068 <xQueueGenericSendFromISR+0x44>
 800c066:	2300      	movs	r3, #0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c07e:	bf00      	nop
 800c080:	bf00      	nop
 800c082:	e7fd      	b.n	800c080 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b02      	cmp	r3, #2
 800c088:	d103      	bne.n	800c092 <xQueueGenericSendFromISR+0x6e>
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d101      	bne.n	800c096 <xQueueGenericSendFromISR+0x72>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <xQueueGenericSendFromISR+0x74>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	623b      	str	r3, [r7, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	e7fd      	b.n	800c0b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0b4:	f7ff fd68 	bl	800bb88 <vPortValidateInterruptPriority>
	__asm volatile
 800c0b8:	f3ef 8211 	mrs	r2, BASEPRI
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	61fa      	str	r2, [r7, #28]
 800c0ce:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d302      	bcc.n	800c0e6 <xQueueGenericSendFromISR+0xc2>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d12f      	bne.n	800c146 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0fc:	f000 f912 	bl	800c324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c100:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c108:	d112      	bne.n	800c130 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d016      	beq.n	800c140 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	3324      	adds	r3, #36	@ 0x24
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fedc 	bl	800ced4 <xTaskRemoveFromEventList>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00e      	beq.n	800c140 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00b      	beq.n	800c140 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	e007      	b.n	800c140 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c130:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c134:	3301      	adds	r3, #1
 800c136:	b2db      	uxtb	r3, r3
 800c138:	b25a      	sxtb	r2, r3
 800c13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c140:	2301      	movs	r3, #1
 800c142:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c144:	e001      	b.n	800c14a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c14c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f383 8811 	msr	BASEPRI, r3
}
 800c154:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3740      	adds	r7, #64	@ 0x40
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08c      	sub	sp, #48	@ 0x30
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10b      	bne.n	800c192 <xQueueReceive+0x32>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	623b      	str	r3, [r7, #32]
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	e7fd      	b.n	800c18e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d103      	bne.n	800c1a0 <xQueueReceive+0x40>
 800c198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <xQueueReceive+0x44>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <xQueueReceive+0x46>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10b      	bne.n	800c1c2 <xQueueReceive+0x62>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	61fb      	str	r3, [r7, #28]
}
 800c1bc:	bf00      	nop
 800c1be:	bf00      	nop
 800c1c0:	e7fd      	b.n	800c1be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1c2:	f001 f86f 	bl	800d2a4 <xTaskGetSchedulerState>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <xQueueReceive+0x72>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <xQueueReceive+0x76>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <xQueueReceive+0x78>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10b      	bne.n	800c1f4 <xQueueReceive+0x94>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	61bb      	str	r3, [r7, #24]
}
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
 800c1f2:	e7fd      	b.n	800c1f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1f4:	f7ff fbe8 	bl	800b9c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01f      	beq.n	800c244 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c208:	f000 f8f6 	bl	800c3f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	1e5a      	subs	r2, r3, #1
 800c210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c212:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00f      	beq.n	800c23c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21e:	3310      	adds	r3, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fe57 	bl	800ced4 <xTaskRemoveFromEventList>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d007      	beq.n	800c23c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c22c:	4b3c      	ldr	r3, [pc, #240]	@ (800c320 <xQueueReceive+0x1c0>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c23c:	f7ff fbf6 	bl	800ba2c <vPortExitCritical>
				return pdPASS;
 800c240:	2301      	movs	r3, #1
 800c242:	e069      	b.n	800c318 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d103      	bne.n	800c252 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c24a:	f7ff fbef 	bl	800ba2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c24e:	2300      	movs	r3, #0
 800c250:	e062      	b.n	800c318 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c258:	f107 0310 	add.w	r3, r7, #16
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fec5 	bl	800cfec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c262:	2301      	movs	r3, #1
 800c264:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c266:	f7ff fbe1 	bl	800ba2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c26a:	f000 fc0d 	bl	800ca88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c26e:	f7ff fbab 	bl	800b9c8 <vPortEnterCritical>
 800c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c278:	b25b      	sxtb	r3, r3
 800c27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c27e:	d103      	bne.n	800c288 <xQueueReceive+0x128>
 800c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c28e:	b25b      	sxtb	r3, r3
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c294:	d103      	bne.n	800c29e <xQueueReceive+0x13e>
 800c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c29e:	f7ff fbc5 	bl	800ba2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2a2:	1d3a      	adds	r2, r7, #4
 800c2a4:	f107 0310 	add.w	r3, r7, #16
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 feb4 	bl	800d018 <xTaskCheckForTimeOut>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d123      	bne.n	800c2fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2b8:	f000 f916 	bl	800c4e8 <prvIsQueueEmpty>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d017      	beq.n	800c2f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c4:	3324      	adds	r3, #36	@ 0x24
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fdb0 	bl	800ce30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2d2:	f000 f8b7 	bl	800c444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d6:	f000 fbe5 	bl	800caa4 <xTaskResumeAll>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d189      	bne.n	800c1f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c320 <xQueueReceive+0x1c0>)
 800c2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	e780      	b.n	800c1f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2f4:	f000 f8a6 	bl	800c444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2f8:	f000 fbd4 	bl	800caa4 <xTaskResumeAll>
 800c2fc:	e77a      	b.n	800c1f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c300:	f000 f8a0 	bl	800c444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c304:	f000 fbce 	bl	800caa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c30a:	f000 f8ed 	bl	800c4e8 <prvIsQueueEmpty>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	f43f af6f 	beq.w	800c1f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c316:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3730      	adds	r7, #48	@ 0x30
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c330:	2300      	movs	r3, #0
 800c332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10d      	bne.n	800c35e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d14d      	bne.n	800c3e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 ffc6 	bl	800d2e0 <xTaskPriorityDisinherit>
 800c354:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	609a      	str	r2, [r3, #8]
 800c35c:	e043      	b.n	800c3e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d119      	bne.n	800c398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6858      	ldr	r0, [r3, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c36c:	461a      	mov	r2, r3
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	f00f fc53 	bl	801bc1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c37c:	441a      	add	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	685a      	ldr	r2, [r3, #4]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d32b      	bcc.n	800c3e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	605a      	str	r2, [r3, #4]
 800c396:	e026      	b.n	800c3e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68d8      	ldr	r0, [r3, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	f00f fc39 	bl	801bc1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3b0:	425b      	negs	r3, r3
 800c3b2:	441a      	add	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68da      	ldr	r2, [r3, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d207      	bcs.n	800c3d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689a      	ldr	r2, [r3, #8]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3cc:	425b      	negs	r3, r3
 800c3ce:	441a      	add	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d105      	bne.n	800c3e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c3ee:	697b      	ldr	r3, [r7, #20]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c406:	2b00      	cmp	r3, #0
 800c408:	d018      	beq.n	800c43c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c412:	441a      	add	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	429a      	cmp	r2, r3
 800c422:	d303      	bcc.n	800c42c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68d9      	ldr	r1, [r3, #12]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c434:	461a      	mov	r2, r3
 800c436:	6838      	ldr	r0, [r7, #0]
 800c438:	f00f fbef 	bl	801bc1a <memcpy>
	}
}
 800c43c:	bf00      	nop
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c44c:	f7ff fabc 	bl	800b9c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c458:	e011      	b.n	800c47e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d012      	beq.n	800c488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	3324      	adds	r3, #36	@ 0x24
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fd34 	bl	800ced4 <xTaskRemoveFromEventList>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c472:	f000 fe35 	bl	800d0e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	3b01      	subs	r3, #1
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dce9      	bgt.n	800c45a <prvUnlockQueue+0x16>
 800c486:	e000      	b.n	800c48a <prvUnlockQueue+0x46>
					break;
 800c488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	22ff      	movs	r2, #255	@ 0xff
 800c48e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c492:	f7ff facb 	bl	800ba2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c496:	f7ff fa97 	bl	800b9c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4a2:	e011      	b.n	800c4c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d012      	beq.n	800c4d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3310      	adds	r3, #16
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fd0f 	bl	800ced4 <xTaskRemoveFromEventList>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c4bc:	f000 fe10 	bl	800d0e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dce9      	bgt.n	800c4a4 <prvUnlockQueue+0x60>
 800c4d0:	e000      	b.n	800c4d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	22ff      	movs	r2, #255	@ 0xff
 800c4d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c4dc:	f7ff faa6 	bl	800ba2c <vPortExitCritical>
}
 800c4e0:	bf00      	nop
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4f0:	f7ff fa6a 	bl	800b9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d102      	bne.n	800c502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	e001      	b.n	800c506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c502:	2300      	movs	r3, #0
 800c504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c506:	f7ff fa91 	bl	800ba2c <vPortExitCritical>

	return xReturn;
 800c50a:	68fb      	ldr	r3, [r7, #12]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c51c:	f7ff fa54 	bl	800b9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c528:	429a      	cmp	r2, r3
 800c52a:	d102      	bne.n	800c532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c52c:	2301      	movs	r3, #1
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	e001      	b.n	800c536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c536:	f7ff fa79 	bl	800ba2c <vPortExitCritical>

	return xReturn;
 800c53a:	68fb      	ldr	r3, [r7, #12]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c54e:	2300      	movs	r3, #0
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	e014      	b.n	800c57e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c554:	4a0f      	ldr	r2, [pc, #60]	@ (800c594 <vQueueAddToRegistry+0x50>)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c560:	490c      	ldr	r1, [pc, #48]	@ (800c594 <vQueueAddToRegistry+0x50>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c56a:	4a0a      	ldr	r2, [pc, #40]	@ (800c594 <vQueueAddToRegistry+0x50>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4413      	add	r3, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c576:	e006      	b.n	800c586 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3301      	adds	r3, #1
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b07      	cmp	r3, #7
 800c582:	d9e7      	bls.n	800c554 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	2400dcf4 	.word	0x2400dcf4

0800c598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5a8:	f7ff fa0e 	bl	800b9c8 <vPortEnterCritical>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5b2:	b25b      	sxtb	r3, r3
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5b8:	d103      	bne.n	800c5c2 <vQueueWaitForMessageRestricted+0x2a>
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5c8:	b25b      	sxtb	r3, r3
 800c5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5ce:	d103      	bne.n	800c5d8 <vQueueWaitForMessageRestricted+0x40>
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d8:	f7ff fa28 	bl	800ba2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	3324      	adds	r3, #36	@ 0x24
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 fc45 	bl	800ce7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5f2:	6978      	ldr	r0, [r7, #20]
 800c5f4:	f7ff ff26 	bl	800c444 <prvUnlockQueue>
	}
 800c5f8:	bf00      	nop
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08e      	sub	sp, #56	@ 0x38
 800c604:	af04      	add	r7, sp, #16
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10b      	bne.n	800c62c <xTaskCreateStatic+0x2c>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	623b      	str	r3, [r7, #32]
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	61fb      	str	r3, [r7, #28]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c64a:	235c      	movs	r3, #92	@ 0x5c
 800c64c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b5c      	cmp	r3, #92	@ 0x5c
 800c652:	d00b      	beq.n	800c66c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61bb      	str	r3, [r7, #24]
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c66c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	d01e      	beq.n	800c6b2 <xTaskCreateStatic+0xb2>
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	2b00      	cmp	r3, #0
 800c678:	d01b      	beq.n	800c6b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c682:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c686:	2202      	movs	r2, #2
 800c688:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c68c:	2300      	movs	r3, #0
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	f107 0314 	add.w	r3, r7, #20
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	68b9      	ldr	r1, [r7, #8]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f000 f850 	bl	800c74a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6ac:	f000 f8de 	bl	800c86c <prvAddNewTaskToReadyList>
 800c6b0:	e001      	b.n	800c6b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6b6:	697b      	ldr	r3, [r7, #20]
	}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3728      	adds	r7, #40	@ 0x28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08c      	sub	sp, #48	@ 0x30
 800c6c4:	af04      	add	r7, sp, #16
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe fda3 	bl	800b220 <pvPortMalloc>
 800c6da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00e      	beq.n	800c700 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6e2:	205c      	movs	r0, #92	@ 0x5c
 800c6e4:	f7fe fd9c 	bl	800b220 <pvPortMalloc>
 800c6e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c6f6:	e005      	b.n	800c704 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6f8:	6978      	ldr	r0, [r7, #20]
 800c6fa:	f7fe fe5f 	bl	800b3bc <vPortFree>
 800c6fe:	e001      	b.n	800c704 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d017      	beq.n	800c73a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c712:	88fa      	ldrh	r2, [r7, #6]
 800c714:	2300      	movs	r3, #0
 800c716:	9303      	str	r3, [sp, #12]
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	9302      	str	r3, [sp, #8]
 800c71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71e:	9301      	str	r3, [sp, #4]
 800c720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	68b9      	ldr	r1, [r7, #8]
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 f80e 	bl	800c74a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c72e:	69f8      	ldr	r0, [r7, #28]
 800c730:	f000 f89c 	bl	800c86c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c734:	2301      	movs	r3, #1
 800c736:	61bb      	str	r3, [r7, #24]
 800c738:	e002      	b.n	800c740 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c73e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c740:	69bb      	ldr	r3, [r7, #24]
	}
 800c742:	4618      	mov	r0, r3
 800c744:	3720      	adds	r7, #32
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b088      	sub	sp, #32
 800c74e:	af00      	add	r7, sp, #0
 800c750:	60f8      	str	r0, [r7, #12]
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	607a      	str	r2, [r7, #4]
 800c756:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	461a      	mov	r2, r3
 800c762:	21a5      	movs	r1, #165	@ 0xa5
 800c764:	f00f f990 	bl	801ba88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c76c:	6879      	ldr	r1, [r7, #4]
 800c76e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c772:	440b      	add	r3, r1
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	f023 0307 	bic.w	r3, r3, #7
 800c780:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	f003 0307 	and.w	r3, r3, #7
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	617b      	str	r3, [r7, #20]
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	e7fd      	b.n	800c7a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d01f      	beq.n	800c7ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e012      	b.n	800c7d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	7819      	ldrb	r1, [r3, #0]
 800c7b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	4413      	add	r3, r2
 800c7be:	3334      	adds	r3, #52	@ 0x34
 800c7c0:	460a      	mov	r2, r1
 800c7c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d006      	beq.n	800c7de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	2b0f      	cmp	r3, #15
 800c7da:	d9e9      	bls.n	800c7b0 <prvInitialiseNewTask+0x66>
 800c7dc:	e000      	b.n	800c7e0 <prvInitialiseNewTask+0x96>
			{
				break;
 800c7de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c7e8:	e003      	b.n	800c7f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f4:	2b37      	cmp	r3, #55	@ 0x37
 800c7f6:	d901      	bls.n	800c7fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7f8:	2337      	movs	r3, #55	@ 0x37
 800c7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c800:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c806:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80a:	2200      	movs	r2, #0
 800c80c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	3304      	adds	r3, #4
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe ff12 	bl	800b63c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	3318      	adds	r3, #24
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe ff0d 	bl	800b63c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c836:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	2200      	movs	r2, #0
 800c83c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	68f9      	ldr	r1, [r7, #12]
 800c84a:	69b8      	ldr	r0, [r7, #24]
 800c84c:	f7fe ff8a 	bl	800b764 <pxPortInitialiseStack>
 800c850:	4602      	mov	r2, r0
 800c852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c854:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c862:	bf00      	nop
 800c864:	3720      	adds	r7, #32
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c874:	f7ff f8a8 	bl	800b9c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c878:	4b2d      	ldr	r3, [pc, #180]	@ (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3301      	adds	r3, #1
 800c87e:	4a2c      	ldr	r2, [pc, #176]	@ (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c882:	4b2c      	ldr	r3, [pc, #176]	@ (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d109      	bne.n	800c89e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c88a:	4a2a      	ldr	r2, [pc, #168]	@ (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c890:	4b27      	ldr	r3, [pc, #156]	@ (800c930 <prvAddNewTaskToReadyList+0xc4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d110      	bne.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c898:	f000 fc46 	bl	800d128 <prvInitialiseTaskLists>
 800c89c:	e00d      	b.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c89e:	4b26      	ldr	r3, [pc, #152]	@ (800c938 <prvAddNewTaskToReadyList+0xcc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d109      	bne.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8a6:	4b23      	ldr	r3, [pc, #140]	@ (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d802      	bhi.n	800c8ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8b4:	4a1f      	ldr	r2, [pc, #124]	@ (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8ba:	4b20      	ldr	r3, [pc, #128]	@ (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4a1e      	ldr	r2, [pc, #120]	@ (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c93c <prvAddNewTaskToReadyList+0xd0>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8d0:	4b1b      	ldr	r3, [pc, #108]	@ (800c940 <prvAddNewTaskToReadyList+0xd4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d903      	bls.n	800c8e0 <prvAddNewTaskToReadyList+0x74>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8dc:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <prvAddNewTaskToReadyList+0xd4>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4a15      	ldr	r2, [pc, #84]	@ (800c944 <prvAddNewTaskToReadyList+0xd8>)
 800c8ee:	441a      	add	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe fead 	bl	800b656 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8fc:	f7ff f896 	bl	800ba2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c900:	4b0d      	ldr	r3, [pc, #52]	@ (800c938 <prvAddNewTaskToReadyList+0xcc>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00e      	beq.n	800c926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c908:	4b0a      	ldr	r3, [pc, #40]	@ (800c934 <prvAddNewTaskToReadyList+0xc8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c912:	429a      	cmp	r2, r3
 800c914:	d207      	bcs.n	800c926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <prvAddNewTaskToReadyList+0xdc>)
 800c918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	2400e208 	.word	0x2400e208
 800c934:	2400dd34 	.word	0x2400dd34
 800c938:	2400e214 	.word	0x2400e214
 800c93c:	2400e224 	.word	0x2400e224
 800c940:	2400e210 	.word	0x2400e210
 800c944:	2400dd38 	.word	0x2400dd38
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d018      	beq.n	800c990 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c95e:	4b14      	ldr	r3, [pc, #80]	@ (800c9b0 <vTaskDelay+0x64>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <vTaskDelay+0x32>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60bb      	str	r3, [r7, #8]
}
 800c978:	bf00      	nop
 800c97a:	bf00      	nop
 800c97c:	e7fd      	b.n	800c97a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c97e:	f000 f883 	bl	800ca88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c982:	2100      	movs	r1, #0
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fd1b 	bl	800d3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c98a:	f000 f88b 	bl	800caa4 <xTaskResumeAll>
 800c98e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d107      	bne.n	800c9a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c996:	4b07      	ldr	r3, [pc, #28]	@ (800c9b4 <vTaskDelay+0x68>)
 800c998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	2400e230 	.word	0x2400e230
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08a      	sub	sp, #40	@ 0x28
 800c9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9c6:	463a      	mov	r2, r7
 800c9c8:	1d39      	adds	r1, r7, #4
 800c9ca:	f107 0308 	add.w	r3, r7, #8
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fbf2 	bl	800b1b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	9202      	str	r2, [sp, #8]
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	460a      	mov	r2, r1
 800c9e6:	4922      	ldr	r1, [pc, #136]	@ (800ca70 <vTaskStartScheduler+0xb8>)
 800c9e8:	4822      	ldr	r0, [pc, #136]	@ (800ca74 <vTaskStartScheduler+0xbc>)
 800c9ea:	f7ff fe09 	bl	800c600 <xTaskCreateStatic>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	4a21      	ldr	r2, [pc, #132]	@ (800ca78 <vTaskStartScheduler+0xc0>)
 800c9f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9f4:	4b20      	ldr	r3, [pc, #128]	@ (800ca78 <vTaskStartScheduler+0xc0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e001      	b.n	800ca06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d102      	bne.n	800ca12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca0c:	f000 fd2c 	bl	800d468 <xTimerCreateTimerTask>
 800ca10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d116      	bne.n	800ca46 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	613b      	str	r3, [r7, #16]
}
 800ca2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca2c:	4b13      	ldr	r3, [pc, #76]	@ (800ca7c <vTaskStartScheduler+0xc4>)
 800ca2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca34:	4b12      	ldr	r3, [pc, #72]	@ (800ca80 <vTaskStartScheduler+0xc8>)
 800ca36:	2201      	movs	r2, #1
 800ca38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca3a:	4b12      	ldr	r3, [pc, #72]	@ (800ca84 <vTaskStartScheduler+0xcc>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca40:	f7fe ff1e 	bl	800b880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca44:	e00f      	b.n	800ca66 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca4c:	d10b      	bne.n	800ca66 <vTaskStartScheduler+0xae>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	60fb      	str	r3, [r7, #12]
}
 800ca60:	bf00      	nop
 800ca62:	bf00      	nop
 800ca64:	e7fd      	b.n	800ca62 <vTaskStartScheduler+0xaa>
}
 800ca66:	bf00      	nop
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	0801c910 	.word	0x0801c910
 800ca74:	0800d0f9 	.word	0x0800d0f9
 800ca78:	2400e22c 	.word	0x2400e22c
 800ca7c:	2400e228 	.word	0x2400e228
 800ca80:	2400e214 	.word	0x2400e214
 800ca84:	2400e20c 	.word	0x2400e20c

0800ca88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca8c:	4b04      	ldr	r3, [pc, #16]	@ (800caa0 <vTaskSuspendAll+0x18>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3301      	adds	r3, #1
 800ca92:	4a03      	ldr	r2, [pc, #12]	@ (800caa0 <vTaskSuspendAll+0x18>)
 800ca94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca96:	bf00      	nop
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	2400e230 	.word	0x2400e230

0800caa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800caae:	2300      	movs	r3, #0
 800cab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cab2:	4b42      	ldr	r3, [pc, #264]	@ (800cbbc <xTaskResumeAll+0x118>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10b      	bne.n	800cad2 <xTaskResumeAll+0x2e>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	603b      	str	r3, [r7, #0]
}
 800cacc:	bf00      	nop
 800cace:	bf00      	nop
 800cad0:	e7fd      	b.n	800cace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cad2:	f7fe ff79 	bl	800b9c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cad6:	4b39      	ldr	r3, [pc, #228]	@ (800cbbc <xTaskResumeAll+0x118>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3b01      	subs	r3, #1
 800cadc:	4a37      	ldr	r2, [pc, #220]	@ (800cbbc <xTaskResumeAll+0x118>)
 800cade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cae0:	4b36      	ldr	r3, [pc, #216]	@ (800cbbc <xTaskResumeAll+0x118>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d162      	bne.n	800cbae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cae8:	4b35      	ldr	r3, [pc, #212]	@ (800cbc0 <xTaskResumeAll+0x11c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d05e      	beq.n	800cbae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caf0:	e02f      	b.n	800cb52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf2:	4b34      	ldr	r3, [pc, #208]	@ (800cbc4 <xTaskResumeAll+0x120>)
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3318      	adds	r3, #24
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fe06 	bl	800b710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fe fe01 	bl	800b710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb12:	4b2d      	ldr	r3, [pc, #180]	@ (800cbc8 <xTaskResumeAll+0x124>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d903      	bls.n	800cb22 <xTaskResumeAll+0x7e>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb1e:	4a2a      	ldr	r2, [pc, #168]	@ (800cbc8 <xTaskResumeAll+0x124>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a27      	ldr	r2, [pc, #156]	@ (800cbcc <xTaskResumeAll+0x128>)
 800cb30:	441a      	add	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3304      	adds	r3, #4
 800cb36:	4619      	mov	r1, r3
 800cb38:	4610      	mov	r0, r2
 800cb3a:	f7fe fd8c 	bl	800b656 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb42:	4b23      	ldr	r3, [pc, #140]	@ (800cbd0 <xTaskResumeAll+0x12c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d302      	bcc.n	800cb52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cb4c:	4b21      	ldr	r3, [pc, #132]	@ (800cbd4 <xTaskResumeAll+0x130>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb52:	4b1c      	ldr	r3, [pc, #112]	@ (800cbc4 <xTaskResumeAll+0x120>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1cb      	bne.n	800caf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb60:	f000 fb80 	bl	800d264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb64:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd8 <xTaskResumeAll+0x134>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d010      	beq.n	800cb92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb70:	f000 f846 	bl	800cc00 <xTaskIncrementTick>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cb7a:	4b16      	ldr	r3, [pc, #88]	@ (800cbd4 <xTaskResumeAll+0x130>)
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1f1      	bne.n	800cb70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cb8c:	4b12      	ldr	r3, [pc, #72]	@ (800cbd8 <xTaskResumeAll+0x134>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb92:	4b10      	ldr	r3, [pc, #64]	@ (800cbd4 <xTaskResumeAll+0x130>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cbdc <xTaskResumeAll+0x138>)
 800cba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbae:	f7fe ff3d 	bl	800ba2c <vPortExitCritical>

	return xAlreadyYielded;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	2400e230 	.word	0x2400e230
 800cbc0:	2400e208 	.word	0x2400e208
 800cbc4:	2400e1c8 	.word	0x2400e1c8
 800cbc8:	2400e210 	.word	0x2400e210
 800cbcc:	2400dd38 	.word	0x2400dd38
 800cbd0:	2400dd34 	.word	0x2400dd34
 800cbd4:	2400e21c 	.word	0x2400e21c
 800cbd8:	2400e218 	.word	0x2400e218
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbe6:	4b05      	ldr	r3, [pc, #20]	@ (800cbfc <xTaskGetTickCount+0x1c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbec:	687b      	ldr	r3, [r7, #4]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	2400e20c 	.word	0x2400e20c

0800cc00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc06:	2300      	movs	r3, #0
 800cc08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc0a:	4b4f      	ldr	r3, [pc, #316]	@ (800cd48 <xTaskIncrementTick+0x148>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f040 8090 	bne.w	800cd34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc14:	4b4d      	ldr	r3, [pc, #308]	@ (800cd4c <xTaskIncrementTick+0x14c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc1c:	4a4b      	ldr	r2, [pc, #300]	@ (800cd4c <xTaskIncrementTick+0x14c>)
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d121      	bne.n	800cc6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc28:	4b49      	ldr	r3, [pc, #292]	@ (800cd50 <xTaskIncrementTick+0x150>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <xTaskIncrementTick+0x4a>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	603b      	str	r3, [r7, #0]
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop
 800cc48:	e7fd      	b.n	800cc46 <xTaskIncrementTick+0x46>
 800cc4a:	4b41      	ldr	r3, [pc, #260]	@ (800cd50 <xTaskIncrementTick+0x150>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	4b40      	ldr	r3, [pc, #256]	@ (800cd54 <xTaskIncrementTick+0x154>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a3e      	ldr	r2, [pc, #248]	@ (800cd50 <xTaskIncrementTick+0x150>)
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	4a3e      	ldr	r2, [pc, #248]	@ (800cd54 <xTaskIncrementTick+0x154>)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6013      	str	r3, [r2, #0]
 800cc5e:	4b3e      	ldr	r3, [pc, #248]	@ (800cd58 <xTaskIncrementTick+0x158>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	4a3c      	ldr	r2, [pc, #240]	@ (800cd58 <xTaskIncrementTick+0x158>)
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	f000 fafc 	bl	800d264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc6c:	4b3b      	ldr	r3, [pc, #236]	@ (800cd5c <xTaskIncrementTick+0x15c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	693a      	ldr	r2, [r7, #16]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d349      	bcc.n	800cd0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc76:	4b36      	ldr	r3, [pc, #216]	@ (800cd50 <xTaskIncrementTick+0x150>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d104      	bne.n	800cc8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc80:	4b36      	ldr	r3, [pc, #216]	@ (800cd5c <xTaskIncrementTick+0x15c>)
 800cc82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc86:	601a      	str	r2, [r3, #0]
					break;
 800cc88:	e03f      	b.n	800cd0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8a:	4b31      	ldr	r3, [pc, #196]	@ (800cd50 <xTaskIncrementTick+0x150>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d203      	bcs.n	800ccaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cca2:	4a2e      	ldr	r2, [pc, #184]	@ (800cd5c <xTaskIncrementTick+0x15c>)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cca8:	e02f      	b.n	800cd0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	3304      	adds	r3, #4
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fd2e 	bl	800b710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d004      	beq.n	800ccc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3318      	adds	r3, #24
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fd25 	bl	800b710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccca:	4b25      	ldr	r3, [pc, #148]	@ (800cd60 <xTaskIncrementTick+0x160>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d903      	bls.n	800ccda <xTaskIncrementTick+0xda>
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd6:	4a22      	ldr	r2, [pc, #136]	@ (800cd60 <xTaskIncrementTick+0x160>)
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4a1f      	ldr	r2, [pc, #124]	@ (800cd64 <xTaskIncrementTick+0x164>)
 800cce8:	441a      	add	r2, r3
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7fe fcb0 	bl	800b656 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfa:	4b1b      	ldr	r3, [pc, #108]	@ (800cd68 <xTaskIncrementTick+0x168>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d3b8      	bcc.n	800cc76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd08:	e7b5      	b.n	800cc76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd0a:	4b17      	ldr	r3, [pc, #92]	@ (800cd68 <xTaskIncrementTick+0x168>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd10:	4914      	ldr	r1, [pc, #80]	@ (800cd64 <xTaskIncrementTick+0x164>)
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	440b      	add	r3, r1
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d901      	bls.n	800cd26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cd22:	2301      	movs	r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd26:	4b11      	ldr	r3, [pc, #68]	@ (800cd6c <xTaskIncrementTick+0x16c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d007      	beq.n	800cd3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e004      	b.n	800cd3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd34:	4b0e      	ldr	r3, [pc, #56]	@ (800cd70 <xTaskIncrementTick+0x170>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	@ (800cd70 <xTaskIncrementTick+0x170>)
 800cd3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd3e:	697b      	ldr	r3, [r7, #20]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	2400e230 	.word	0x2400e230
 800cd4c:	2400e20c 	.word	0x2400e20c
 800cd50:	2400e1c0 	.word	0x2400e1c0
 800cd54:	2400e1c4 	.word	0x2400e1c4
 800cd58:	2400e220 	.word	0x2400e220
 800cd5c:	2400e228 	.word	0x2400e228
 800cd60:	2400e210 	.word	0x2400e210
 800cd64:	2400dd38 	.word	0x2400dd38
 800cd68:	2400dd34 	.word	0x2400dd34
 800cd6c:	2400e21c 	.word	0x2400e21c
 800cd70:	2400e218 	.word	0x2400e218

0800cd74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd74:	b480      	push	{r7}
 800cd76:	b085      	sub	sp, #20
 800cd78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd7a:	4b28      	ldr	r3, [pc, #160]	@ (800ce1c <vTaskSwitchContext+0xa8>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd82:	4b27      	ldr	r3, [pc, #156]	@ (800ce20 <vTaskSwitchContext+0xac>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd88:	e042      	b.n	800ce10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cd8a:	4b25      	ldr	r3, [pc, #148]	@ (800ce20 <vTaskSwitchContext+0xac>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd90:	4b24      	ldr	r3, [pc, #144]	@ (800ce24 <vTaskSwitchContext+0xb0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60fb      	str	r3, [r7, #12]
 800cd96:	e011      	b.n	800cdbc <vTaskSwitchContext+0x48>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10b      	bne.n	800cdb6 <vTaskSwitchContext+0x42>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
 800cdb2:	bf00      	nop
 800cdb4:	e7fd      	b.n	800cdb2 <vTaskSwitchContext+0x3e>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	491a      	ldr	r1, [pc, #104]	@ (800ce28 <vTaskSwitchContext+0xb4>)
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	440b      	add	r3, r1
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0e3      	beq.n	800cd98 <vTaskSwitchContext+0x24>
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4a13      	ldr	r2, [pc, #76]	@ (800ce28 <vTaskSwitchContext+0xb4>)
 800cddc:	4413      	add	r3, r2
 800cdde:	60bb      	str	r3, [r7, #8]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	605a      	str	r2, [r3, #4]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d104      	bne.n	800ce00 <vTaskSwitchContext+0x8c>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	605a      	str	r2, [r3, #4]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	4a09      	ldr	r2, [pc, #36]	@ (800ce2c <vTaskSwitchContext+0xb8>)
 800ce08:	6013      	str	r3, [r2, #0]
 800ce0a:	4a06      	ldr	r2, [pc, #24]	@ (800ce24 <vTaskSwitchContext+0xb0>)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6013      	str	r3, [r2, #0]
}
 800ce10:	bf00      	nop
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	2400e230 	.word	0x2400e230
 800ce20:	2400e21c 	.word	0x2400e21c
 800ce24:	2400e210 	.word	0x2400e210
 800ce28:	2400dd38 	.word	0x2400dd38
 800ce2c:	2400dd34 	.word	0x2400dd34

0800ce30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10b      	bne.n	800ce58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	60fb      	str	r3, [r7, #12]
}
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
 800ce56:	e7fd      	b.n	800ce54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce58:	4b07      	ldr	r3, [pc, #28]	@ (800ce78 <vTaskPlaceOnEventList+0x48>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3318      	adds	r3, #24
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7fe fc1c 	bl	800b69e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce66:	2101      	movs	r1, #1
 800ce68:	6838      	ldr	r0, [r7, #0]
 800ce6a:	f000 faa9 	bl	800d3c0 <prvAddCurrentTaskToDelayedList>
}
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	2400dd34 	.word	0x2400dd34

0800ce7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10b      	bne.n	800cea6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	617b      	str	r3, [r7, #20]
}
 800cea0:	bf00      	nop
 800cea2:	bf00      	nop
 800cea4:	e7fd      	b.n	800cea2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cea6:	4b0a      	ldr	r3, [pc, #40]	@ (800ced0 <vTaskPlaceOnEventListRestricted+0x54>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3318      	adds	r3, #24
 800ceac:	4619      	mov	r1, r3
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7fe fbd1 	bl	800b656 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ceba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cebe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	68b8      	ldr	r0, [r7, #8]
 800cec4:	f000 fa7c 	bl	800d3c0 <prvAddCurrentTaskToDelayedList>
	}
 800cec8:	bf00      	nop
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	2400dd34 	.word	0x2400dd34

0800ced4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10b      	bne.n	800cf02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	60fb      	str	r3, [r7, #12]
}
 800cefc:	bf00      	nop
 800cefe:	bf00      	nop
 800cf00:	e7fd      	b.n	800cefe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3318      	adds	r3, #24
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fc02 	bl	800b710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf0c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf84 <xTaskRemoveFromEventList+0xb0>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d11d      	bne.n	800cf50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe fbf9 	bl	800b710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf22:	4b19      	ldr	r3, [pc, #100]	@ (800cf88 <xTaskRemoveFromEventList+0xb4>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d903      	bls.n	800cf32 <xTaskRemoveFromEventList+0x5e>
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2e:	4a16      	ldr	r2, [pc, #88]	@ (800cf88 <xTaskRemoveFromEventList+0xb4>)
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf36:	4613      	mov	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4a13      	ldr	r2, [pc, #76]	@ (800cf8c <xTaskRemoveFromEventList+0xb8>)
 800cf40:	441a      	add	r2, r3
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	3304      	adds	r3, #4
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f7fe fb84 	bl	800b656 <vListInsertEnd>
 800cf4e:	e005      	b.n	800cf5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	3318      	adds	r3, #24
 800cf54:	4619      	mov	r1, r3
 800cf56:	480e      	ldr	r0, [pc, #56]	@ (800cf90 <xTaskRemoveFromEventList+0xbc>)
 800cf58:	f7fe fb7d 	bl	800b656 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf60:	4b0c      	ldr	r3, [pc, #48]	@ (800cf94 <xTaskRemoveFromEventList+0xc0>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d905      	bls.n	800cf76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf98 <xTaskRemoveFromEventList+0xc4>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e001      	b.n	800cf7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cf76:	2300      	movs	r3, #0
 800cf78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf7a:	697b      	ldr	r3, [r7, #20]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3718      	adds	r7, #24
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	2400e230 	.word	0x2400e230
 800cf88:	2400e210 	.word	0x2400e210
 800cf8c:	2400dd38 	.word	0x2400dd38
 800cf90:	2400e1c8 	.word	0x2400e1c8
 800cf94:	2400dd34 	.word	0x2400dd34
 800cf98:	2400e21c 	.word	0x2400e21c

0800cf9c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10b      	bne.n	800cfc2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	60fb      	str	r3, [r7, #12]
}
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	e7fd      	b.n	800cfbe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cfc2:	f7fe fd01 	bl	800b9c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfc6:	4b07      	ldr	r3, [pc, #28]	@ (800cfe4 <vTaskSetTimeOutState+0x48>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cfce:	4b06      	ldr	r3, [pc, #24]	@ (800cfe8 <vTaskSetTimeOutState+0x4c>)
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cfd6:	f7fe fd29 	bl	800ba2c <vPortExitCritical>
}
 800cfda:	bf00      	nop
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	2400e220 	.word	0x2400e220
 800cfe8:	2400e20c 	.word	0x2400e20c

0800cfec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cff4:	4b06      	ldr	r3, [pc, #24]	@ (800d010 <vTaskInternalSetTimeOutState+0x24>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cffc:	4b05      	ldr	r3, [pc, #20]	@ (800d014 <vTaskInternalSetTimeOutState+0x28>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	605a      	str	r2, [r3, #4]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	2400e220 	.word	0x2400e220
 800d014:	2400e20c 	.word	0x2400e20c

0800d018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b088      	sub	sp, #32
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	613b      	str	r3, [r7, #16]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10b      	bne.n	800d05e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	60fb      	str	r3, [r7, #12]
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	e7fd      	b.n	800d05a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d05e:	f7fe fcb3 	bl	800b9c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d062:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d8 <xTaskCheckForTimeOut+0xc0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d07a:	d102      	bne.n	800d082 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e023      	b.n	800d0ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	4b15      	ldr	r3, [pc, #84]	@ (800d0dc <xTaskCheckForTimeOut+0xc4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d007      	beq.n	800d09e <xTaskCheckForTimeOut+0x86>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	69ba      	ldr	r2, [r7, #24]
 800d094:	429a      	cmp	r2, r3
 800d096:	d302      	bcc.n	800d09e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	61fb      	str	r3, [r7, #28]
 800d09c:	e015      	b.n	800d0ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d20b      	bcs.n	800d0c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	1ad2      	subs	r2, r2, r3
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7ff ff99 	bl	800cfec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	61fb      	str	r3, [r7, #28]
 800d0be:	e004      	b.n	800d0ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ca:	f7fe fcaf 	bl	800ba2c <vPortExitCritical>

	return xReturn;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3720      	adds	r7, #32
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2400e20c 	.word	0x2400e20c
 800d0dc:	2400e220 	.word	0x2400e220

0800d0e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0e4:	4b03      	ldr	r3, [pc, #12]	@ (800d0f4 <vTaskMissedYield+0x14>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	2400e21c 	.word	0x2400e21c

0800d0f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d100:	f000 f852 	bl	800d1a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d104:	4b06      	ldr	r3, [pc, #24]	@ (800d120 <prvIdleTask+0x28>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d9f9      	bls.n	800d100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d10c:	4b05      	ldr	r3, [pc, #20]	@ (800d124 <prvIdleTask+0x2c>)
 800d10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d11c:	e7f0      	b.n	800d100 <prvIdleTask+0x8>
 800d11e:	bf00      	nop
 800d120:	2400dd38 	.word	0x2400dd38
 800d124:	e000ed04 	.word	0xe000ed04

0800d128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
 800d132:	e00c      	b.n	800d14e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4613      	mov	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4a12      	ldr	r2, [pc, #72]	@ (800d188 <prvInitialiseTaskLists+0x60>)
 800d140:	4413      	add	r3, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe fa5a 	bl	800b5fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3301      	adds	r3, #1
 800d14c:	607b      	str	r3, [r7, #4]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b37      	cmp	r3, #55	@ 0x37
 800d152:	d9ef      	bls.n	800d134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d154:	480d      	ldr	r0, [pc, #52]	@ (800d18c <prvInitialiseTaskLists+0x64>)
 800d156:	f7fe fa51 	bl	800b5fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d15a:	480d      	ldr	r0, [pc, #52]	@ (800d190 <prvInitialiseTaskLists+0x68>)
 800d15c:	f7fe fa4e 	bl	800b5fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d160:	480c      	ldr	r0, [pc, #48]	@ (800d194 <prvInitialiseTaskLists+0x6c>)
 800d162:	f7fe fa4b 	bl	800b5fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d166:	480c      	ldr	r0, [pc, #48]	@ (800d198 <prvInitialiseTaskLists+0x70>)
 800d168:	f7fe fa48 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d16c:	480b      	ldr	r0, [pc, #44]	@ (800d19c <prvInitialiseTaskLists+0x74>)
 800d16e:	f7fe fa45 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d172:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a0 <prvInitialiseTaskLists+0x78>)
 800d174:	4a05      	ldr	r2, [pc, #20]	@ (800d18c <prvInitialiseTaskLists+0x64>)
 800d176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d178:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a4 <prvInitialiseTaskLists+0x7c>)
 800d17a:	4a05      	ldr	r2, [pc, #20]	@ (800d190 <prvInitialiseTaskLists+0x68>)
 800d17c:	601a      	str	r2, [r3, #0]
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	2400dd38 	.word	0x2400dd38
 800d18c:	2400e198 	.word	0x2400e198
 800d190:	2400e1ac 	.word	0x2400e1ac
 800d194:	2400e1c8 	.word	0x2400e1c8
 800d198:	2400e1dc 	.word	0x2400e1dc
 800d19c:	2400e1f4 	.word	0x2400e1f4
 800d1a0:	2400e1c0 	.word	0x2400e1c0
 800d1a4:	2400e1c4 	.word	0x2400e1c4

0800d1a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ae:	e019      	b.n	800d1e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1b0:	f7fe fc0a 	bl	800b9c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b4:	4b10      	ldr	r3, [pc, #64]	@ (800d1f8 <prvCheckTasksWaitingTermination+0x50>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe faa5 	bl	800b710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <prvCheckTasksWaitingTermination+0x54>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800d1fc <prvCheckTasksWaitingTermination+0x54>)
 800d1ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1da:	f7fe fc27 	bl	800ba2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f810 	bl	800d204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1e4:	4b06      	ldr	r3, [pc, #24]	@ (800d200 <prvCheckTasksWaitingTermination+0x58>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e1      	bne.n	800d1b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	2400e1dc 	.word	0x2400e1dc
 800d1fc:	2400e208 	.word	0x2400e208
 800d200:	2400e1f0 	.word	0x2400e1f0

0800d204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d212:	2b00      	cmp	r3, #0
 800d214:	d108      	bne.n	800d228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe f8ce 	bl	800b3bc <vPortFree>
				vPortFree( pxTCB );
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7fe f8cb 	bl	800b3bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d226:	e019      	b.n	800d25c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d103      	bne.n	800d23a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7fe f8c2 	bl	800b3bc <vPortFree>
	}
 800d238:	e010      	b.n	800d25c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d240:	2b02      	cmp	r3, #2
 800d242:	d00b      	beq.n	800d25c <prvDeleteTCB+0x58>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	60fb      	str	r3, [r7, #12]
}
 800d256:	bf00      	nop
 800d258:	bf00      	nop
 800d25a:	e7fd      	b.n	800d258 <prvDeleteTCB+0x54>
	}
 800d25c:	bf00      	nop
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d26a:	4b0c      	ldr	r3, [pc, #48]	@ (800d29c <prvResetNextTaskUnblockTime+0x38>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d104      	bne.n	800d27e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d274:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d276:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d27a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d27c:	e008      	b.n	800d290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d27e:	4b07      	ldr	r3, [pc, #28]	@ (800d29c <prvResetNextTaskUnblockTime+0x38>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	4a04      	ldr	r2, [pc, #16]	@ (800d2a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d28e:	6013      	str	r3, [r2, #0]
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	2400e1c0 	.word	0x2400e1c0
 800d2a0:	2400e228 	.word	0x2400e228

0800d2a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d2d8 <xTaskGetSchedulerState+0x34>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d102      	bne.n	800d2b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	607b      	str	r3, [r7, #4]
 800d2b6:	e008      	b.n	800d2ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <xTaskGetSchedulerState+0x38>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d102      	bne.n	800d2c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	607b      	str	r3, [r7, #4]
 800d2c4:	e001      	b.n	800d2ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2ca:	687b      	ldr	r3, [r7, #4]
	}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	2400e214 	.word	0x2400e214
 800d2dc:	2400e230 	.word	0x2400e230

0800d2e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d058      	beq.n	800d3a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d3b4 <xTaskPriorityDisinherit+0xd4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d00b      	beq.n	800d318 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	60fb      	str	r3, [r7, #12]
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	e7fd      	b.n	800d314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10b      	bne.n	800d338 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	60bb      	str	r3, [r7, #8]
}
 800d332:	bf00      	nop
 800d334:	bf00      	nop
 800d336:	e7fd      	b.n	800d334 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d33c:	1e5a      	subs	r2, r3, #1
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d02c      	beq.n	800d3a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d352:	2b00      	cmp	r3, #0
 800d354:	d128      	bne.n	800d3a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	3304      	adds	r3, #4
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe f9d8 	bl	800b710 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d378:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b8 <xTaskPriorityDisinherit+0xd8>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d903      	bls.n	800d388 <xTaskPriorityDisinherit+0xa8>
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d384:	4a0c      	ldr	r2, [pc, #48]	@ (800d3b8 <xTaskPriorityDisinherit+0xd8>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38c:	4613      	mov	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4a09      	ldr	r2, [pc, #36]	@ (800d3bc <xTaskPriorityDisinherit+0xdc>)
 800d396:	441a      	add	r2, r3
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	3304      	adds	r3, #4
 800d39c:	4619      	mov	r1, r3
 800d39e:	4610      	mov	r0, r2
 800d3a0:	f7fe f959 	bl	800b656 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3a8:	697b      	ldr	r3, [r7, #20]
	}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	2400dd34 	.word	0x2400dd34
 800d3b8:	2400e210 	.word	0x2400e210
 800d3bc:	2400dd38 	.word	0x2400dd38

0800d3c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3ca:	4b21      	ldr	r3, [pc, #132]	@ (800d450 <prvAddCurrentTaskToDelayedList+0x90>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d0:	4b20      	ldr	r3, [pc, #128]	@ (800d454 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe f99a 	bl	800b710 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3e2:	d10a      	bne.n	800d3fa <prvAddCurrentTaskToDelayedList+0x3a>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d007      	beq.n	800d3fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d454 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4819      	ldr	r0, [pc, #100]	@ (800d458 <prvAddCurrentTaskToDelayedList+0x98>)
 800d3f4:	f7fe f92f 	bl	800b656 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3f8:	e026      	b.n	800d448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4413      	add	r3, r2
 800d400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d402:	4b14      	ldr	r3, [pc, #80]	@ (800d454 <prvAddCurrentTaskToDelayedList+0x94>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d209      	bcs.n	800d426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d412:	4b12      	ldr	r3, [pc, #72]	@ (800d45c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	4b0f      	ldr	r3, [pc, #60]	@ (800d454 <prvAddCurrentTaskToDelayedList+0x94>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3304      	adds	r3, #4
 800d41c:	4619      	mov	r1, r3
 800d41e:	4610      	mov	r0, r2
 800d420:	f7fe f93d 	bl	800b69e <vListInsert>
}
 800d424:	e010      	b.n	800d448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d426:	4b0e      	ldr	r3, [pc, #56]	@ (800d460 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	4b0a      	ldr	r3, [pc, #40]	@ (800d454 <prvAddCurrentTaskToDelayedList+0x94>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3304      	adds	r3, #4
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	f7fe f933 	bl	800b69e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d438:	4b0a      	ldr	r3, [pc, #40]	@ (800d464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d202      	bcs.n	800d448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d442:	4a08      	ldr	r2, [pc, #32]	@ (800d464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	6013      	str	r3, [r2, #0]
}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	2400e20c 	.word	0x2400e20c
 800d454:	2400dd34 	.word	0x2400dd34
 800d458:	2400e1f4 	.word	0x2400e1f4
 800d45c:	2400e1c4 	.word	0x2400e1c4
 800d460:	2400e1c0 	.word	0x2400e1c0
 800d464:	2400e228 	.word	0x2400e228

0800d468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	@ 0x28
 800d46c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d472:	f000 fb13 	bl	800da9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d476:	4b1d      	ldr	r3, [pc, #116]	@ (800d4ec <xTimerCreateTimerTask+0x84>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d021      	beq.n	800d4c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d486:	1d3a      	adds	r2, r7, #4
 800d488:	f107 0108 	add.w	r1, r7, #8
 800d48c:	f107 030c 	add.w	r3, r7, #12
 800d490:	4618      	mov	r0, r3
 800d492:	f7fd feab 	bl	800b1ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	9202      	str	r2, [sp, #8]
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	460a      	mov	r2, r1
 800d4a8:	4911      	ldr	r1, [pc, #68]	@ (800d4f0 <xTimerCreateTimerTask+0x88>)
 800d4aa:	4812      	ldr	r0, [pc, #72]	@ (800d4f4 <xTimerCreateTimerTask+0x8c>)
 800d4ac:	f7ff f8a8 	bl	800c600 <xTaskCreateStatic>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	4a11      	ldr	r2, [pc, #68]	@ (800d4f8 <xTimerCreateTimerTask+0x90>)
 800d4b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4b6:	4b10      	ldr	r3, [pc, #64]	@ (800d4f8 <xTimerCreateTimerTask+0x90>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10b      	bne.n	800d4e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	613b      	str	r3, [r7, #16]
}
 800d4da:	bf00      	nop
 800d4dc:	bf00      	nop
 800d4de:	e7fd      	b.n	800d4dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d4e0:	697b      	ldr	r3, [r7, #20]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	2400e264 	.word	0x2400e264
 800d4f0:	0801c918 	.word	0x0801c918
 800d4f4:	0800d635 	.word	0x0800d635
 800d4f8:	2400e268 	.word	0x2400e268

0800d4fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08a      	sub	sp, #40	@ 0x28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d50a:	2300      	movs	r3, #0
 800d50c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10b      	bne.n	800d52c <xTimerGenericCommand+0x30>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	623b      	str	r3, [r7, #32]
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	e7fd      	b.n	800d528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d52c:	4b19      	ldr	r3, [pc, #100]	@ (800d594 <xTimerGenericCommand+0x98>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d02a      	beq.n	800d58a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2b05      	cmp	r3, #5
 800d544:	dc18      	bgt.n	800d578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d546:	f7ff fead 	bl	800d2a4 <xTaskGetSchedulerState>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d109      	bne.n	800d564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d550:	4b10      	ldr	r3, [pc, #64]	@ (800d594 <xTimerGenericCommand+0x98>)
 800d552:	6818      	ldr	r0, [r3, #0]
 800d554:	f107 0110 	add.w	r1, r7, #16
 800d558:	2300      	movs	r3, #0
 800d55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d55c:	f7fe fc60 	bl	800be20 <xQueueGenericSend>
 800d560:	6278      	str	r0, [r7, #36]	@ 0x24
 800d562:	e012      	b.n	800d58a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d564:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <xTimerGenericCommand+0x98>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	f107 0110 	add.w	r1, r7, #16
 800d56c:	2300      	movs	r3, #0
 800d56e:	2200      	movs	r2, #0
 800d570:	f7fe fc56 	bl	800be20 <xQueueGenericSend>
 800d574:	6278      	str	r0, [r7, #36]	@ 0x24
 800d576:	e008      	b.n	800d58a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d578:	4b06      	ldr	r3, [pc, #24]	@ (800d594 <xTimerGenericCommand+0x98>)
 800d57a:	6818      	ldr	r0, [r3, #0]
 800d57c:	f107 0110 	add.w	r1, r7, #16
 800d580:	2300      	movs	r3, #0
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	f7fe fd4e 	bl	800c024 <xQueueGenericSendFromISR>
 800d588:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3728      	adds	r7, #40	@ 0x28
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	2400e264 	.word	0x2400e264

0800d598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af02      	add	r7, sp, #8
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a2:	4b23      	ldr	r3, [pc, #140]	@ (800d630 <prvProcessExpiredTimer+0x98>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fe f8ad 	bl	800b710 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d023      	beq.n	800d60c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	699a      	ldr	r2, [r3, #24]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	18d1      	adds	r1, r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	6978      	ldr	r0, [r7, #20]
 800d5d2:	f000 f8d5 	bl	800d780 <prvInsertTimerInActiveList>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d020      	beq.n	800d61e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	f7ff ff88 	bl	800d4fc <xTimerGenericCommand>
 800d5ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d114      	bne.n	800d61e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	60fb      	str	r3, [r7, #12]
}
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	e7fd      	b.n	800d608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d612:	f023 0301 	bic.w	r3, r3, #1
 800d616:	b2da      	uxtb	r2, r3
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	4798      	blx	r3
}
 800d626:	bf00      	nop
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	2400e25c 	.word	0x2400e25c

0800d634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d63c:	f107 0308 	add.w	r3, r7, #8
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f859 	bl	800d6f8 <prvGetNextExpireTime>
 800d646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	4619      	mov	r1, r3
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 f805 	bl	800d65c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d652:	f000 f8d7 	bl	800d804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d656:	bf00      	nop
 800d658:	e7f0      	b.n	800d63c <prvTimerTask+0x8>
	...

0800d65c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d666:	f7ff fa0f 	bl	800ca88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d66a:	f107 0308 	add.w	r3, r7, #8
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 f866 	bl	800d740 <prvSampleTimeNow>
 800d674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d130      	bne.n	800d6de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10a      	bne.n	800d698 <prvProcessTimerOrBlockTask+0x3c>
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	429a      	cmp	r2, r3
 800d688:	d806      	bhi.n	800d698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d68a:	f7ff fa0b 	bl	800caa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ff81 	bl	800d598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d696:	e024      	b.n	800d6e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d008      	beq.n	800d6b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d69e:	4b13      	ldr	r3, [pc, #76]	@ (800d6ec <prvProcessTimerOrBlockTask+0x90>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <prvProcessTimerOrBlockTask+0x50>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e000      	b.n	800d6ae <prvProcessTimerOrBlockTask+0x52>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d6b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f0 <prvProcessTimerOrBlockTask+0x94>)
 800d6b2:	6818      	ldr	r0, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	f7fe ff6b 	bl	800c598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6c2:	f7ff f9ef 	bl	800caa4 <xTaskResumeAll>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6cc:	4b09      	ldr	r3, [pc, #36]	@ (800d6f4 <prvProcessTimerOrBlockTask+0x98>)
 800d6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
}
 800d6dc:	e001      	b.n	800d6e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6de:	f7ff f9e1 	bl	800caa4 <xTaskResumeAll>
}
 800d6e2:	bf00      	nop
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	2400e260 	.word	0x2400e260
 800d6f0:	2400e264 	.word	0x2400e264
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d700:	4b0e      	ldr	r3, [pc, #56]	@ (800d73c <prvGetNextExpireTime+0x44>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <prvGetNextExpireTime+0x16>
 800d70a:	2201      	movs	r2, #1
 800d70c:	e000      	b.n	800d710 <prvGetNextExpireTime+0x18>
 800d70e:	2200      	movs	r2, #0
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d105      	bne.n	800d728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d71c:	4b07      	ldr	r3, [pc, #28]	@ (800d73c <prvGetNextExpireTime+0x44>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	60fb      	str	r3, [r7, #12]
 800d726:	e001      	b.n	800d72c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d728:	2300      	movs	r3, #0
 800d72a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d72c:	68fb      	ldr	r3, [r7, #12]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	2400e25c 	.word	0x2400e25c

0800d740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d748:	f7ff fa4a 	bl	800cbe0 <xTaskGetTickCount>
 800d74c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d74e:	4b0b      	ldr	r3, [pc, #44]	@ (800d77c <prvSampleTimeNow+0x3c>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	429a      	cmp	r2, r3
 800d756:	d205      	bcs.n	800d764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d758:	f000 f93a 	bl	800d9d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	e002      	b.n	800d76a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d76a:	4a04      	ldr	r2, [pc, #16]	@ (800d77c <prvSampleTimeNow+0x3c>)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d770:	68fb      	ldr	r3, [r7, #12]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	2400e26c 	.word	0x2400e26c

0800d780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d812      	bhi.n	800d7cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d302      	bcc.n	800d7ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e01b      	b.n	800d7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d7ba:	4b10      	ldr	r3, [pc, #64]	@ (800d7fc <prvInsertTimerInActiveList+0x7c>)
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	f7fd ff6a 	bl	800b69e <vListInsert>
 800d7ca:	e012      	b.n	800d7f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d206      	bcs.n	800d7e2 <prvInsertTimerInActiveList+0x62>
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d302      	bcc.n	800d7e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	617b      	str	r3, [r7, #20]
 800d7e0:	e007      	b.n	800d7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7e2:	4b07      	ldr	r3, [pc, #28]	@ (800d800 <prvInsertTimerInActiveList+0x80>)
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	f7fd ff56 	bl	800b69e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7f2:	697b      	ldr	r3, [r7, #20]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	2400e260 	.word	0x2400e260
 800d800:	2400e25c 	.word	0x2400e25c

0800d804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08e      	sub	sp, #56	@ 0x38
 800d808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d80a:	e0ce      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	da19      	bge.n	800d846 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d812:	1d3b      	adds	r3, r7, #4
 800d814:	3304      	adds	r3, #4
 800d816:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10b      	bne.n	800d836 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	61fb      	str	r3, [r7, #28]
}
 800d830:	bf00      	nop
 800d832:	bf00      	nop
 800d834:	e7fd      	b.n	800d832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d83c:	6850      	ldr	r0, [r2, #4]
 800d83e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d840:	6892      	ldr	r2, [r2, #8]
 800d842:	4611      	mov	r1, r2
 800d844:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f2c0 80ae 	blt.w	800d9aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d004      	beq.n	800d864 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85c:	3304      	adds	r3, #4
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fd ff56 	bl	800b710 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d864:	463b      	mov	r3, r7
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff ff6a 	bl	800d740 <prvSampleTimeNow>
 800d86c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b09      	cmp	r3, #9
 800d872:	f200 8097 	bhi.w	800d9a4 <prvProcessReceivedCommands+0x1a0>
 800d876:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <prvProcessReceivedCommands+0x78>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d8a5 	.word	0x0800d8a5
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8a5 	.word	0x0800d8a5
 800d888:	0800d91b 	.word	0x0800d91b
 800d88c:	0800d92f 	.word	0x0800d92f
 800d890:	0800d97b 	.word	0x0800d97b
 800d894:	0800d8a5 	.word	0x0800d8a5
 800d898:	0800d8a5 	.word	0x0800d8a5
 800d89c:	0800d91b 	.word	0x0800d91b
 800d8a0:	0800d92f 	.word	0x0800d92f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	18d1      	adds	r1, r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8c4:	f7ff ff5c 	bl	800d780 <prvInsertTimerInActiveList>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d06c      	beq.n	800d9a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8dc:	f003 0304 	and.w	r3, r3, #4
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d061      	beq.n	800d9a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	441a      	add	r2, r3
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8f6:	f7ff fe01 	bl	800d4fc <xTimerGenericCommand>
 800d8fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d152      	bne.n	800d9a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	61bb      	str	r3, [r7, #24]
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop
 800d918:	e7fd      	b.n	800d916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d920:	f023 0301 	bic.w	r3, r3, #1
 800d924:	b2da      	uxtb	r2, r3
 800d926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d92c:	e03d      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d934:	f043 0301 	orr.w	r3, r3, #1
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d944:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10b      	bne.n	800d966 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	617b      	str	r3, [r7, #20]
}
 800d960:	bf00      	nop
 800d962:	bf00      	nop
 800d964:	e7fd      	b.n	800d962 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d968:	699a      	ldr	r2, [r3, #24]
 800d96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96c:	18d1      	adds	r1, r2, r3
 800d96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d974:	f7ff ff04 	bl	800d780 <prvInsertTimerInActiveList>
					break;
 800d978:	e017      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d980:	f003 0302 	and.w	r3, r3, #2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d103      	bne.n	800d990 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d98a:	f7fd fd17 	bl	800b3bc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d98e:	e00c      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d996:	f023 0301 	bic.w	r3, r3, #1
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d9a2:	e002      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d9a4:	bf00      	nop
 800d9a6:	e000      	b.n	800d9aa <prvProcessReceivedCommands+0x1a6>
					break;
 800d9a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9aa:	4b08      	ldr	r3, [pc, #32]	@ (800d9cc <prvProcessReceivedCommands+0x1c8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	1d39      	adds	r1, r7, #4
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fbd4 	bl	800c160 <xQueueReceive>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f47f af26 	bne.w	800d80c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d9c0:	bf00      	nop
 800d9c2:	bf00      	nop
 800d9c4:	3730      	adds	r7, #48	@ 0x30
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	2400e264 	.word	0x2400e264

0800d9d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9d6:	e049      	b.n	800da6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9d8:	4b2e      	ldr	r3, [pc, #184]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e2:	4b2c      	ldr	r3, [pc, #176]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fd fe8d 	bl	800b710 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d02f      	beq.n	800da6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	4413      	add	r3, r2
 800da14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d90e      	bls.n	800da3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da2a:	4b1a      	ldr	r3, [pc, #104]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3304      	adds	r3, #4
 800da32:	4619      	mov	r1, r3
 800da34:	4610      	mov	r0, r2
 800da36:	f7fd fe32 	bl	800b69e <vListInsert>
 800da3a:	e017      	b.n	800da6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da3c:	2300      	movs	r3, #0
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	2300      	movs	r3, #0
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	2100      	movs	r1, #0
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff fd58 	bl	800d4fc <xTimerGenericCommand>
 800da4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10b      	bne.n	800da6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800da54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	603b      	str	r3, [r7, #0]
}
 800da66:	bf00      	nop
 800da68:	bf00      	nop
 800da6a:	e7fd      	b.n	800da68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da6c:	4b09      	ldr	r3, [pc, #36]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1b0      	bne.n	800d9d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da76:	4b07      	ldr	r3, [pc, #28]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da7c:	4b06      	ldr	r3, [pc, #24]	@ (800da98 <prvSwitchTimerLists+0xc8>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a04      	ldr	r2, [pc, #16]	@ (800da94 <prvSwitchTimerLists+0xc4>)
 800da82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da84:	4a04      	ldr	r2, [pc, #16]	@ (800da98 <prvSwitchTimerLists+0xc8>)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	6013      	str	r3, [r2, #0]
}
 800da8a:	bf00      	nop
 800da8c:	3718      	adds	r7, #24
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	2400e25c 	.word	0x2400e25c
 800da98:	2400e260 	.word	0x2400e260

0800da9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800daa2:	f7fd ff91 	bl	800b9c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800daa6:	4b15      	ldr	r3, [pc, #84]	@ (800dafc <prvCheckForValidListAndQueue+0x60>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d120      	bne.n	800daf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800daae:	4814      	ldr	r0, [pc, #80]	@ (800db00 <prvCheckForValidListAndQueue+0x64>)
 800dab0:	f7fd fda4 	bl	800b5fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dab4:	4813      	ldr	r0, [pc, #76]	@ (800db04 <prvCheckForValidListAndQueue+0x68>)
 800dab6:	f7fd fda1 	bl	800b5fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800daba:	4b13      	ldr	r3, [pc, #76]	@ (800db08 <prvCheckForValidListAndQueue+0x6c>)
 800dabc:	4a10      	ldr	r2, [pc, #64]	@ (800db00 <prvCheckForValidListAndQueue+0x64>)
 800dabe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dac0:	4b12      	ldr	r3, [pc, #72]	@ (800db0c <prvCheckForValidListAndQueue+0x70>)
 800dac2:	4a10      	ldr	r2, [pc, #64]	@ (800db04 <prvCheckForValidListAndQueue+0x68>)
 800dac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dac6:	2300      	movs	r3, #0
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	4b11      	ldr	r3, [pc, #68]	@ (800db10 <prvCheckForValidListAndQueue+0x74>)
 800dacc:	4a11      	ldr	r2, [pc, #68]	@ (800db14 <prvCheckForValidListAndQueue+0x78>)
 800dace:	2110      	movs	r1, #16
 800dad0:	200a      	movs	r0, #10
 800dad2:	f7fe f905 	bl	800bce0 <xQueueGenericCreateStatic>
 800dad6:	4603      	mov	r3, r0
 800dad8:	4a08      	ldr	r2, [pc, #32]	@ (800dafc <prvCheckForValidListAndQueue+0x60>)
 800dada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dadc:	4b07      	ldr	r3, [pc, #28]	@ (800dafc <prvCheckForValidListAndQueue+0x60>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dae4:	4b05      	ldr	r3, [pc, #20]	@ (800dafc <prvCheckForValidListAndQueue+0x60>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	490b      	ldr	r1, [pc, #44]	@ (800db18 <prvCheckForValidListAndQueue+0x7c>)
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fd2a 	bl	800c544 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daf0:	f7fd ff9c 	bl	800ba2c <vPortExitCritical>
}
 800daf4:	bf00      	nop
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	2400e264 	.word	0x2400e264
 800db00:	2400e234 	.word	0x2400e234
 800db04:	2400e248 	.word	0x2400e248
 800db08:	2400e25c 	.word	0x2400e25c
 800db0c:	2400e260 	.word	0x2400e260
 800db10:	2400e310 	.word	0x2400e310
 800db14:	2400e270 	.word	0x2400e270
 800db18:	0801c920 	.word	0x0801c920

0800db1c <rcl_get_zero_initialized_init_options>:
 800db1c:	2000      	movs	r0, #0
 800db1e:	4770      	bx	lr

0800db20 <rcl_init_options_init>:
 800db20:	b084      	sub	sp, #16
 800db22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db24:	b097      	sub	sp, #92	@ 0x5c
 800db26:	ae1d      	add	r6, sp, #116	@ 0x74
 800db28:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d058      	beq.n	800dbe2 <rcl_init_options_init+0xc2>
 800db30:	6803      	ldr	r3, [r0, #0]
 800db32:	4605      	mov	r5, r0
 800db34:	b133      	cbz	r3, 800db44 <rcl_init_options_init+0x24>
 800db36:	2464      	movs	r4, #100	@ 0x64
 800db38:	4620      	mov	r0, r4
 800db3a:	b017      	add	sp, #92	@ 0x5c
 800db3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db40:	b004      	add	sp, #16
 800db42:	4770      	bx	lr
 800db44:	4630      	mov	r0, r6
 800db46:	f001 f953 	bl	800edf0 <rcutils_allocator_is_valid>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d049      	beq.n	800dbe2 <rcl_init_options_init+0xc2>
 800db4e:	46b4      	mov	ip, r6
 800db50:	ac11      	add	r4, sp, #68	@ 0x44
 800db52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db58:	f8dc 3000 	ldr.w	r3, [ip]
 800db5c:	2050      	movs	r0, #80	@ 0x50
 800db5e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db64:	4798      	blx	r3
 800db66:	4604      	mov	r4, r0
 800db68:	6028      	str	r0, [r5, #0]
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d03b      	beq.n	800dbe6 <rcl_init_options_init+0xc6>
 800db6e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800db72:	4686      	mov	lr, r0
 800db74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800db7c:	f8dc 3000 	ldr.w	r3, [ip]
 800db80:	a802      	add	r0, sp, #8
 800db82:	f8ce 3000 	str.w	r3, [lr]
 800db86:	f001 f9bf 	bl	800ef08 <rmw_get_zero_initialized_init_options>
 800db8a:	f10d 0e08 	add.w	lr, sp, #8
 800db8e:	f104 0c18 	add.w	ip, r4, #24
 800db92:	682f      	ldr	r7, [r5, #0]
 800db94:	ac20      	add	r4, sp, #128	@ 0x80
 800db96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dba2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dba6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbae:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dbb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dbb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dbba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dbbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dbc2:	f107 0018 	add.w	r0, r7, #24
 800dbc6:	f001 fa11 	bl	800efec <rmw_init_options_init>
 800dbca:	4604      	mov	r4, r0
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d0b3      	beq.n	800db38 <rcl_init_options_init+0x18>
 800dbd0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800dbd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dbd4:	6828      	ldr	r0, [r5, #0]
 800dbd6:	4798      	blx	r3
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f007 fd47 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 800dbde:	4604      	mov	r4, r0
 800dbe0:	e7aa      	b.n	800db38 <rcl_init_options_init+0x18>
 800dbe2:	240b      	movs	r4, #11
 800dbe4:	e7a8      	b.n	800db38 <rcl_init_options_init+0x18>
 800dbe6:	240a      	movs	r4, #10
 800dbe8:	e7a6      	b.n	800db38 <rcl_init_options_init+0x18>
 800dbea:	bf00      	nop

0800dbec <rcl_init_options_fini>:
 800dbec:	b530      	push	{r4, r5, lr}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	b1f0      	cbz	r0, 800dc30 <rcl_init_options_fini+0x44>
 800dbf2:	6803      	ldr	r3, [r0, #0]
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	b1db      	cbz	r3, 800dc30 <rcl_init_options_fini+0x44>
 800dbf8:	469c      	mov	ip, r3
 800dbfa:	f10d 0e04 	add.w	lr, sp, #4
 800dbfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dc06:	f8dc 3000 	ldr.w	r3, [ip]
 800dc0a:	a801      	add	r0, sp, #4
 800dc0c:	f8ce 3000 	str.w	r3, [lr]
 800dc10:	f001 f8ee 	bl	800edf0 <rcutils_allocator_is_valid>
 800dc14:	b160      	cbz	r0, 800dc30 <rcl_init_options_fini+0x44>
 800dc16:	6820      	ldr	r0, [r4, #0]
 800dc18:	3018      	adds	r0, #24
 800dc1a:	f001 faa1 	bl	800f160 <rmw_init_options_fini>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	b950      	cbnz	r0, 800dc38 <rcl_init_options_fini+0x4c>
 800dc22:	6820      	ldr	r0, [r4, #0]
 800dc24:	9b02      	ldr	r3, [sp, #8]
 800dc26:	9905      	ldr	r1, [sp, #20]
 800dc28:	4798      	blx	r3
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	b007      	add	sp, #28
 800dc2e:	bd30      	pop	{r4, r5, pc}
 800dc30:	250b      	movs	r5, #11
 800dc32:	4628      	mov	r0, r5
 800dc34:	b007      	add	sp, #28
 800dc36:	bd30      	pop	{r4, r5, pc}
 800dc38:	f007 fd18 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	e7f8      	b.n	800dc32 <rcl_init_options_fini+0x46>

0800dc40 <rcl_init_options_copy>:
 800dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	b094      	sub	sp, #80	@ 0x50
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d05b      	beq.n	800dd02 <rcl_init_options_copy+0xc2>
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	6800      	ldr	r0, [r0, #0]
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d057      	beq.n	800dd02 <rcl_init_options_copy+0xc2>
 800dc52:	460e      	mov	r6, r1
 800dc54:	f001 f8cc 	bl	800edf0 <rcutils_allocator_is_valid>
 800dc58:	2e00      	cmp	r6, #0
 800dc5a:	d052      	beq.n	800dd02 <rcl_init_options_copy+0xc2>
 800dc5c:	f080 0001 	eor.w	r0, r0, #1
 800dc60:	b2c0      	uxtb	r0, r0
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d14d      	bne.n	800dd02 <rcl_init_options_copy+0xc2>
 800dc66:	6833      	ldr	r3, [r6, #0]
 800dc68:	b123      	cbz	r3, 800dc74 <rcl_init_options_copy+0x34>
 800dc6a:	2464      	movs	r4, #100	@ 0x64
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	b014      	add	sp, #80	@ 0x50
 800dc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc74:	6827      	ldr	r7, [r4, #0]
 800dc76:	ad0f      	add	r5, sp, #60	@ 0x3c
 800dc78:	46bc      	mov	ip, r7
 800dc7a:	f8d7 8000 	ldr.w	r8, [r7]
 800dc7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc84:	f8dc 3000 	ldr.w	r3, [ip]
 800dc88:	2050      	movs	r0, #80	@ 0x50
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	47c0      	blx	r8
 800dc90:	4605      	mov	r5, r0
 800dc92:	6030      	str	r0, [r6, #0]
 800dc94:	b3d0      	cbz	r0, 800dd0c <rcl_init_options_copy+0xcc>
 800dc96:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800dc9a:	4686      	mov	lr, r0
 800dc9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dca0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dca4:	f8dc 3000 	ldr.w	r3, [ip]
 800dca8:	4668      	mov	r0, sp
 800dcaa:	f8ce 3000 	str.w	r3, [lr]
 800dcae:	f001 f92b 	bl	800ef08 <rmw_get_zero_initialized_init_options>
 800dcb2:	46ee      	mov	lr, sp
 800dcb4:	f105 0c18 	add.w	ip, r5, #24
 800dcb8:	6824      	ldr	r4, [r4, #0]
 800dcba:	6835      	ldr	r5, [r6, #0]
 800dcbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dccc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dcd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dcd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dcdc:	f104 0018 	add.w	r0, r4, #24
 800dce0:	f105 0118 	add.w	r1, r5, #24
 800dce4:	f001 f9ea 	bl	800f0bc <rmw_init_options_copy>
 800dce8:	4604      	mov	r4, r0
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d0be      	beq.n	800dc6c <rcl_init_options_copy+0x2c>
 800dcee:	f001 f88d 	bl	800ee0c <rcutils_get_error_string>
 800dcf2:	f001 f8a1 	bl	800ee38 <rcutils_reset_error>
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f7ff ff78 	bl	800dbec <rcl_init_options_fini>
 800dcfc:	b140      	cbz	r0, 800dd10 <rcl_init_options_copy+0xd0>
 800dcfe:	4604      	mov	r4, r0
 800dd00:	e7b4      	b.n	800dc6c <rcl_init_options_copy+0x2c>
 800dd02:	240b      	movs	r4, #11
 800dd04:	4620      	mov	r0, r4
 800dd06:	b014      	add	sp, #80	@ 0x50
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	240a      	movs	r4, #10
 800dd0e:	e7ad      	b.n	800dc6c <rcl_init_options_copy+0x2c>
 800dd10:	4620      	mov	r0, r4
 800dd12:	b014      	add	sp, #80	@ 0x50
 800dd14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	f007 bca8 	b.w	801566c <rcl_convert_rmw_ret_to_rcl_ret>

0800dd1c <rcl_init_options_set_domain_id>:
 800dd1c:	b120      	cbz	r0, 800dd28 <rcl_init_options_set_domain_id+0xc>
 800dd1e:	6803      	ldr	r3, [r0, #0]
 800dd20:	b113      	cbz	r3, 800dd28 <rcl_init_options_set_domain_id+0xc>
 800dd22:	2000      	movs	r0, #0
 800dd24:	6259      	str	r1, [r3, #36]	@ 0x24
 800dd26:	4770      	bx	lr
 800dd28:	200b      	movs	r0, #11
 800dd2a:	4770      	bx	lr

0800dd2c <rcl_get_zero_initialized_publisher>:
 800dd2c:	4b01      	ldr	r3, [pc, #4]	@ (800dd34 <rcl_get_zero_initialized_publisher+0x8>)
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	0801c9ac 	.word	0x0801c9ac

0800dd38 <rcl_publisher_init>:
 800dd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd3c:	b088      	sub	sp, #32
 800dd3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	d06b      	beq.n	800de1c <rcl_publisher_init+0xe4>
 800dd44:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800dd48:	4605      	mov	r5, r0
 800dd4a:	460f      	mov	r7, r1
 800dd4c:	4690      	mov	r8, r2
 800dd4e:	4650      	mov	r0, sl
 800dd50:	4699      	mov	r9, r3
 800dd52:	f001 f84d 	bl	800edf0 <rcutils_allocator_is_valid>
 800dd56:	f080 0401 	eor.w	r4, r0, #1
 800dd5a:	b2e4      	uxtb	r4, r4
 800dd5c:	2c00      	cmp	r4, #0
 800dd5e:	d15d      	bne.n	800de1c <rcl_publisher_init+0xe4>
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	d05b      	beq.n	800de1c <rcl_publisher_init+0xe4>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b123      	cbz	r3, 800dd72 <rcl_publisher_init+0x3a>
 800dd68:	2464      	movs	r4, #100	@ 0x64
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	b008      	add	sp, #32
 800dd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd72:	4638      	mov	r0, r7
 800dd74:	f007 ff78 	bl	8015c68 <rcl_node_is_valid>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d054      	beq.n	800de26 <rcl_publisher_init+0xee>
 800dd7c:	f1b8 0f00 	cmp.w	r8, #0
 800dd80:	d04c      	beq.n	800de1c <rcl_publisher_init+0xe4>
 800dd82:	fab9 f389 	clz	r3, r9
 800dd86:	095b      	lsrs	r3, r3, #5
 800dd88:	f1b9 0f00 	cmp.w	r9, #0
 800dd8c:	d046      	beq.n	800de1c <rcl_publisher_init+0xe4>
 800dd8e:	aa07      	add	r2, sp, #28
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800dd96:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800dd9a:	9205      	str	r2, [sp, #20]
 800dd9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dda0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dda4:	4649      	mov	r1, r9
 800dda6:	4638      	mov	r0, r7
 800dda8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ddac:	f007 ffb4 	bl	8015d18 <rcl_node_resolve_name>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d14f      	bne.n	800de54 <rcl_publisher_init+0x11c>
 800ddb4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ddb6:	20c8      	movs	r0, #200	@ 0xc8
 800ddb8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ddba:	4798      	blx	r3
 800ddbc:	6028      	str	r0, [r5, #0]
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d050      	beq.n	800de64 <rcl_publisher_init+0x12c>
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	f007 ff72 	bl	8015cac <rcl_node_get_rmw_handle>
 800ddc8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ddcc:	4641      	mov	r1, r8
 800ddce:	9a07      	ldr	r2, [sp, #28]
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	4633      	mov	r3, r6
 800ddd4:	682c      	ldr	r4, [r5, #0]
 800ddd6:	f001 fce9 	bl	800f7ac <rmw_create_publisher>
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800dde0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800dde4:	b370      	cbz	r0, 800de44 <rcl_publisher_init+0x10c>
 800dde6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ddea:	f001 fdc3 	bl	800f974 <rmw_publisher_get_actual_qos>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	b9d0      	cbnz	r0, 800de2a <rcl_publisher_init+0xf2>
 800ddf4:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800de00:	2270      	movs	r2, #112	@ 0x70
 800de02:	f00d ff0a 	bl	801bc1a <memcpy>
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800de0c:	9807      	ldr	r0, [sp, #28]
 800de0e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800de10:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de12:	4798      	blx	r3
 800de14:	4620      	mov	r0, r4
 800de16:	b008      	add	sp, #32
 800de18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de1c:	240b      	movs	r4, #11
 800de1e:	4620      	mov	r0, r4
 800de20:	b008      	add	sp, #32
 800de22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de26:	24c8      	movs	r4, #200	@ 0xc8
 800de28:	e79f      	b.n	800dd6a <rcl_publisher_init+0x32>
 800de2a:	b1cb      	cbz	r3, 800de60 <rcl_publisher_init+0x128>
 800de2c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800de30:	b142      	cbz	r2, 800de44 <rcl_publisher_init+0x10c>
 800de32:	4638      	mov	r0, r7
 800de34:	f007 ff3a 	bl	8015cac <rcl_node_get_rmw_handle>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800de3e:	f001 fdad 	bl	800f99c <rmw_destroy_publisher>
 800de42:	682b      	ldr	r3, [r5, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800de48:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de4a:	2401      	movs	r4, #1
 800de4c:	4790      	blx	r2
 800de4e:	2300      	movs	r3, #0
 800de50:	602b      	str	r3, [r5, #0]
 800de52:	e7db      	b.n	800de0c <rcl_publisher_init+0xd4>
 800de54:	2867      	cmp	r0, #103	@ 0x67
 800de56:	d007      	beq.n	800de68 <rcl_publisher_init+0x130>
 800de58:	2869      	cmp	r0, #105	@ 0x69
 800de5a:	d005      	beq.n	800de68 <rcl_publisher_init+0x130>
 800de5c:	280a      	cmp	r0, #10
 800de5e:	d001      	beq.n	800de64 <rcl_publisher_init+0x12c>
 800de60:	2401      	movs	r4, #1
 800de62:	e7d3      	b.n	800de0c <rcl_publisher_init+0xd4>
 800de64:	240a      	movs	r4, #10
 800de66:	e7d1      	b.n	800de0c <rcl_publisher_init+0xd4>
 800de68:	2467      	movs	r4, #103	@ 0x67
 800de6a:	e7cf      	b.n	800de0c <rcl_publisher_init+0xd4>

0800de6c <rcl_publisher_get_default_options>:
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	4d14      	ldr	r5, [pc, #80]	@ (800dec0 <rcl_publisher_get_default_options+0x54>)
 800de70:	b088      	sub	sp, #32
 800de72:	4604      	mov	r4, r0
 800de74:	2250      	movs	r2, #80	@ 0x50
 800de76:	4913      	ldr	r1, [pc, #76]	@ (800dec4 <rcl_publisher_get_default_options+0x58>)
 800de78:	4628      	mov	r0, r5
 800de7a:	f00d fece 	bl	801bc1a <memcpy>
 800de7e:	a802      	add	r0, sp, #8
 800de80:	f000 ffa8 	bl	800edd4 <rcutils_get_default_allocator>
 800de84:	f10d 0c08 	add.w	ip, sp, #8
 800de88:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800de8c:	466e      	mov	r6, sp
 800de8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800de96:	f8dc 3000 	ldr.w	r3, [ip]
 800de9a:	4630      	mov	r0, r6
 800de9c:	f8ce 3000 	str.w	r3, [lr]
 800dea0:	f001 f842 	bl	800ef28 <rmw_get_default_publisher_options>
 800dea4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800dea8:	2270      	movs	r2, #112	@ 0x70
 800deaa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800deae:	e883 0003 	stmia.w	r3, {r0, r1}
 800deb2:	4629      	mov	r1, r5
 800deb4:	4620      	mov	r0, r4
 800deb6:	f00d feb0 	bl	801bc1a <memcpy>
 800deba:	4620      	mov	r0, r4
 800debc:	b008      	add	sp, #32
 800debe:	bd70      	pop	{r4, r5, r6, pc}
 800dec0:	2400e360 	.word	0x2400e360
 800dec4:	0801c9b0 	.word	0x0801c9b0

0800dec8 <rcl_publish>:
 800dec8:	b1f8      	cbz	r0, 800df0a <rcl_publish+0x42>
 800deca:	6803      	ldr	r3, [r0, #0]
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4604      	mov	r4, r0
 800ded0:	b1b3      	cbz	r3, 800df00 <rcl_publish+0x38>
 800ded2:	4616      	mov	r6, r2
 800ded4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ded8:	b192      	cbz	r2, 800df00 <rcl_publish+0x38>
 800deda:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800dede:	460d      	mov	r5, r1
 800dee0:	f007 fbe2 	bl	80156a8 <rcl_context_is_valid>
 800dee4:	b160      	cbz	r0, 800df00 <rcl_publish+0x38>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800deec:	b140      	cbz	r0, 800df00 <rcl_publish+0x38>
 800deee:	b155      	cbz	r5, 800df06 <rcl_publish+0x3e>
 800def0:	4632      	mov	r2, r6
 800def2:	4629      	mov	r1, r5
 800def4:	f001 fbfa 	bl	800f6ec <rmw_publish>
 800def8:	3800      	subs	r0, #0
 800defa:	bf18      	it	ne
 800defc:	2001      	movne	r0, #1
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df04:	bd70      	pop	{r4, r5, r6, pc}
 800df06:	200b      	movs	r0, #11
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df0e:	4770      	bx	lr

0800df10 <rcl_publisher_is_valid>:
 800df10:	b1a0      	cbz	r0, 800df3c <rcl_publisher_is_valid+0x2c>
 800df12:	6803      	ldr	r3, [r0, #0]
 800df14:	b510      	push	{r4, lr}
 800df16:	4604      	mov	r4, r0
 800df18:	b173      	cbz	r3, 800df38 <rcl_publisher_is_valid+0x28>
 800df1a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800df1e:	b15a      	cbz	r2, 800df38 <rcl_publisher_is_valid+0x28>
 800df20:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800df24:	f007 fbc0 	bl	80156a8 <rcl_context_is_valid>
 800df28:	b130      	cbz	r0, 800df38 <rcl_publisher_is_valid+0x28>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800df30:	3800      	subs	r0, #0
 800df32:	bf18      	it	ne
 800df34:	2001      	movne	r0, #1
 800df36:	bd10      	pop	{r4, pc}
 800df38:	2000      	movs	r0, #0
 800df3a:	bd10      	pop	{r4, pc}
 800df3c:	2000      	movs	r0, #0
 800df3e:	4770      	bx	lr

0800df40 <rcl_publisher_is_valid_except_context>:
 800df40:	b130      	cbz	r0, 800df50 <rcl_publisher_is_valid_except_context+0x10>
 800df42:	6800      	ldr	r0, [r0, #0]
 800df44:	b120      	cbz	r0, 800df50 <rcl_publisher_is_valid_except_context+0x10>
 800df46:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800df4a:	3800      	subs	r0, #0
 800df4c:	bf18      	it	ne
 800df4e:	2001      	movne	r0, #1
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop

0800df54 <_rclc_check_for_new_data>:
 800df54:	2800      	cmp	r0, #0
 800df56:	d046      	beq.n	800dfe6 <_rclc_check_for_new_data+0x92>
 800df58:	4603      	mov	r3, r0
 800df5a:	b530      	push	{r4, r5, lr}
 800df5c:	7802      	ldrb	r2, [r0, #0]
 800df5e:	b085      	sub	sp, #20
 800df60:	2a0a      	cmp	r2, #10
 800df62:	d842      	bhi.n	800dfea <_rclc_check_for_new_data+0x96>
 800df64:	e8df f002 	tbb	[pc, r2]
 800df68:	14181212 	.word	0x14181212
 800df6c:	06060614 	.word	0x06060614
 800df70:	2e1a      	.short	0x2e1a
 800df72:	16          	.byte	0x16
 800df73:	00          	.byte	0x00
 800df74:	6a0a      	ldr	r2, [r1, #32]
 800df76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800df78:	2000      	movs	r0, #0
 800df7a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800df7e:	1a12      	subs	r2, r2, r0
 800df80:	bf18      	it	ne
 800df82:	2201      	movne	r2, #1
 800df84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800df88:	b005      	add	sp, #20
 800df8a:	bd30      	pop	{r4, r5, pc}
 800df8c:	680a      	ldr	r2, [r1, #0]
 800df8e:	e7f2      	b.n	800df76 <_rclc_check_for_new_data+0x22>
 800df90:	698a      	ldr	r2, [r1, #24]
 800df92:	e7f0      	b.n	800df76 <_rclc_check_for_new_data+0x22>
 800df94:	688a      	ldr	r2, [r1, #8]
 800df96:	e7ee      	b.n	800df76 <_rclc_check_for_new_data+0x22>
 800df98:	690a      	ldr	r2, [r1, #16]
 800df9a:	e7ec      	b.n	800df76 <_rclc_check_for_new_data+0x22>
 800df9c:	685c      	ldr	r4, [r3, #4]
 800df9e:	4608      	mov	r0, r1
 800dfa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dfa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfa8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800dfac:	f104 0110 	add.w	r1, r4, #16
 800dfb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dfb4:	9500      	str	r5, [sp, #0]
 800dfb6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800dfba:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800dfbe:	f009 fd07 	bl	80179d0 <rcl_action_client_wait_set_get_entities_ready>
 800dfc2:	e7e1      	b.n	800df88 <_rclc_check_for_new_data+0x34>
 800dfc4:	685c      	ldr	r4, [r3, #4]
 800dfc6:	4608      	mov	r0, r1
 800dfc8:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800dfcc:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800dfd0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800dfd4:	e9cd 2100 	strd	r2, r1, [sp]
 800dfd8:	f104 0220 	add.w	r2, r4, #32
 800dfdc:	f104 0110 	add.w	r1, r4, #16
 800dfe0:	f009 ff10 	bl	8017e04 <rcl_action_server_wait_set_get_entities_ready>
 800dfe4:	e7d0      	b.n	800df88 <_rclc_check_for_new_data+0x34>
 800dfe6:	200b      	movs	r0, #11
 800dfe8:	4770      	bx	lr
 800dfea:	2001      	movs	r0, #1
 800dfec:	e7cc      	b.n	800df88 <_rclc_check_for_new_data+0x34>
 800dfee:	bf00      	nop

0800dff0 <_rclc_take_new_data>:
 800dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dff2:	b09b      	sub	sp, #108	@ 0x6c
 800dff4:	2800      	cmp	r0, #0
 800dff6:	f000 8088 	beq.w	800e10a <_rclc_take_new_data+0x11a>
 800dffa:	7803      	ldrb	r3, [r0, #0]
 800dffc:	4604      	mov	r4, r0
 800dffe:	2b0a      	cmp	r3, #10
 800e000:	f200 8167 	bhi.w	800e2d2 <_rclc_take_new_data+0x2e2>
 800e004:	e8df f003 	tbb	[pc, r3]
 800e008:	44152d2d 	.word	0x44152d2d
 800e00c:	19191944 	.word	0x19191944
 800e010:	065a      	.short	0x065a
 800e012:	15          	.byte	0x15
 800e013:	00          	.byte	0x00
 800e014:	6840      	ldr	r0, [r0, #4]
 800e016:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 80b2 	bne.w	800e184 <_rclc_take_new_data+0x194>
 800e020:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e024:	2b00      	cmp	r3, #0
 800e026:	f040 80e4 	bne.w	800e1f2 <_rclc_take_new_data+0x202>
 800e02a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d16f      	bne.n	800e112 <_rclc_take_new_data+0x122>
 800e032:	2500      	movs	r5, #0
 800e034:	4628      	mov	r0, r5
 800e036:	b01b      	add	sp, #108	@ 0x6c
 800e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e03c:	6a0b      	ldr	r3, [r1, #32]
 800e03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0f5      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e046:	6882      	ldr	r2, [r0, #8]
 800e048:	f100 0110 	add.w	r1, r0, #16
 800e04c:	6840      	ldr	r0, [r0, #4]
 800e04e:	f008 f83d 	bl	80160cc <rcl_take_request>
 800e052:	4605      	mov	r5, r0
 800e054:	2800      	cmp	r0, #0
 800e056:	d0ec      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e058:	f240 2359 	movw	r3, #601	@ 0x259
 800e05c:	4298      	cmp	r0, r3
 800e05e:	d013      	beq.n	800e088 <_rclc_take_new_data+0x98>
 800e060:	e029      	b.n	800e0b6 <_rclc_take_new_data+0xc6>
 800e062:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e064:	680b      	ldr	r3, [r1, #0]
 800e066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0e1      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e06e:	2300      	movs	r3, #0
 800e070:	aa0a      	add	r2, sp, #40	@ 0x28
 800e072:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e076:	f008 f88b 	bl	8016190 <rcl_take>
 800e07a:	4605      	mov	r5, r0
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d0d9      	beq.n	800e034 <_rclc_take_new_data+0x44>
 800e080:	f240 1391 	movw	r3, #401	@ 0x191
 800e084:	4298      	cmp	r0, r3
 800e086:	d116      	bne.n	800e0b6 <_rclc_take_new_data+0xc6>
 800e088:	2300      	movs	r3, #0
 800e08a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e08e:	e7d1      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e090:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e092:	698b      	ldr	r3, [r1, #24]
 800e094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d0ca      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e09c:	6882      	ldr	r2, [r0, #8]
 800e09e:	f100 0110 	add.w	r1, r0, #16
 800e0a2:	6840      	ldr	r0, [r0, #4]
 800e0a4:	f007 fa90 	bl	80155c8 <rcl_take_response>
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0c1      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e0ae:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e0b2:	4298      	cmp	r0, r3
 800e0b4:	d0be      	beq.n	800e034 <_rclc_take_new_data+0x44>
 800e0b6:	f000 febf 	bl	800ee38 <rcutils_reset_error>
 800e0ba:	e7bb      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e0bc:	6840      	ldr	r0, [r0, #4]
 800e0be:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d17d      	bne.n	800e1c2 <_rclc_take_new_data+0x1d2>
 800e0c6:	69c3      	ldr	r3, [r0, #28]
 800e0c8:	b11b      	cbz	r3, 800e0d2 <_rclc_take_new_data+0xe2>
 800e0ca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d144      	bne.n	800e15c <_rclc_take_new_data+0x16c>
 800e0d2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f040 80ac 	bne.w	800e234 <_rclc_take_new_data+0x244>
 800e0dc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d0a6      	beq.n	800e032 <_rclc_take_new_data+0x42>
 800e0e4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e0e6:	a90a      	add	r1, sp, #40	@ 0x28
 800e0e8:	3010      	adds	r0, #16
 800e0ea:	f009 fb49 	bl	8017780 <rcl_action_take_result_response>
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d1e0      	bne.n	800e0b6 <_rclc_take_new_data+0xc6>
 800e0f4:	6860      	ldr	r0, [r4, #4]
 800e0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e0fa:	f009 ffb3 	bl	8018064 <rclc_action_find_handle_by_result_request_sequence_number>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d098      	beq.n	800e034 <_rclc_take_new_data+0x44>
 800e102:	2301      	movs	r3, #1
 800e104:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e108:	e794      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e10a:	250b      	movs	r5, #11
 800e10c:	4628      	mov	r0, r5
 800e10e:	b01b      	add	sp, #108	@ 0x6c
 800e110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e112:	ae04      	add	r6, sp, #16
 800e114:	3010      	adds	r0, #16
 800e116:	aa0a      	add	r2, sp, #40	@ 0x28
 800e118:	4631      	mov	r1, r6
 800e11a:	f009 fda7 	bl	8017c6c <rcl_action_take_cancel_request>
 800e11e:	4605      	mov	r5, r0
 800e120:	2800      	cmp	r0, #0
 800e122:	d1c8      	bne.n	800e0b6 <_rclc_take_new_data+0xc6>
 800e124:	a90a      	add	r1, sp, #40	@ 0x28
 800e126:	6860      	ldr	r0, [r4, #4]
 800e128:	f009 ff5c 	bl	8017fe4 <rclc_action_find_goal_handle_by_uuid>
 800e12c:	4607      	mov	r7, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	f000 80bb 	beq.w	800e2aa <_rclc_take_new_data+0x2ba>
 800e134:	2101      	movs	r1, #1
 800e136:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e13a:	f009 fedd 	bl	8017ef8 <rcl_action_transition_goal_state>
 800e13e:	2803      	cmp	r0, #3
 800e140:	4684      	mov	ip, r0
 800e142:	f040 80a7 	bne.w	800e294 <_rclc_take_new_data+0x2a4>
 800e146:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e14a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e14c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e14e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e152:	e884 0003 	stmia.w	r4, {r0, r1}
 800e156:	f887 c008 	strb.w	ip, [r7, #8]
 800e15a:	e76b      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e15c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e15e:	3010      	adds	r0, #16
 800e160:	f009 fb8e 	bl	8017880 <rcl_action_take_feedback>
 800e164:	4605      	mov	r5, r0
 800e166:	2800      	cmp	r0, #0
 800e168:	d1a5      	bne.n	800e0b6 <_rclc_take_new_data+0xc6>
 800e16a:	6860      	ldr	r0, [r4, #4]
 800e16c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e16e:	f009 ff39 	bl	8017fe4 <rclc_action_find_goal_handle_by_uuid>
 800e172:	4603      	mov	r3, r0
 800e174:	2800      	cmp	r0, #0
 800e176:	f000 80a3 	beq.w	800e2c0 <_rclc_take_new_data+0x2d0>
 800e17a:	2201      	movs	r2, #1
 800e17c:	6860      	ldr	r0, [r4, #4]
 800e17e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e182:	e7a6      	b.n	800e0d2 <_rclc_take_new_data+0xe2>
 800e184:	f009 ff08 	bl	8017f98 <rclc_action_take_goal_handle>
 800e188:	4606      	mov	r6, r0
 800e18a:	6860      	ldr	r0, [r4, #4]
 800e18c:	2e00      	cmp	r6, #0
 800e18e:	f43f af47 	beq.w	800e020 <_rclc_take_new_data+0x30>
 800e192:	6070      	str	r0, [r6, #4]
 800e194:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e198:	69f2      	ldr	r2, [r6, #28]
 800e19a:	3010      	adds	r0, #16
 800e19c:	f009 fcae 	bl	8017afc <rcl_action_take_goal_request>
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f040 808e 	bne.w	800e2c4 <_rclc_take_new_data+0x2d4>
 800e1a8:	69f7      	ldr	r7, [r6, #28]
 800e1aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e1ac:	7235      	strb	r5, [r6, #8]
 800e1ae:	f8c6 0009 	str.w	r0, [r6, #9]
 800e1b2:	f8c6 100d 	str.w	r1, [r6, #13]
 800e1b6:	6860      	ldr	r0, [r4, #4]
 800e1b8:	f8c6 2011 	str.w	r2, [r6, #17]
 800e1bc:	f8c6 3015 	str.w	r3, [r6, #21]
 800e1c0:	e72e      	b.n	800e020 <_rclc_take_new_data+0x30>
 800e1c2:	aa04      	add	r2, sp, #16
 800e1c4:	a90a      	add	r1, sp, #40	@ 0x28
 800e1c6:	3010      	adds	r0, #16
 800e1c8:	f009 fa62 	bl	8017690 <rcl_action_take_goal_response>
 800e1cc:	4605      	mov	r5, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f47f af71 	bne.w	800e0b6 <_rclc_take_new_data+0xc6>
 800e1d4:	6860      	ldr	r0, [r4, #4]
 800e1d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1da:	f009 ff31 	bl	8018040 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e1de:	b130      	cbz	r0, 800e1ee <_rclc_take_new_data+0x1fe>
 800e1e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e1ea:	f880 2020 	strb.w	r2, [r0, #32]
 800e1ee:	6860      	ldr	r0, [r4, #4]
 800e1f0:	e769      	b.n	800e0c6 <_rclc_take_new_data+0xd6>
 800e1f2:	3010      	adds	r0, #16
 800e1f4:	aa04      	add	r2, sp, #16
 800e1f6:	a90a      	add	r1, sp, #40	@ 0x28
 800e1f8:	f009 fcf8 	bl	8017bec <rcl_action_take_result_request>
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f47f af59 	bne.w	800e0b6 <_rclc_take_new_data+0xc6>
 800e204:	a904      	add	r1, sp, #16
 800e206:	6860      	ldr	r0, [r4, #4]
 800e208:	f009 feec 	bl	8017fe4 <rclc_action_find_goal_handle_by_uuid>
 800e20c:	4607      	mov	r7, r0
 800e20e:	b160      	cbz	r0, 800e22a <_rclc_take_new_data+0x23a>
 800e210:	ad0a      	add	r5, sp, #40	@ 0x28
 800e212:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e216:	f04f 0c02 	mov.w	ip, #2
 800e21a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e21c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e21e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e222:	e886 0003 	stmia.w	r6, {r0, r1}
 800e226:	f887 c008 	strb.w	ip, [r7, #8]
 800e22a:	6860      	ldr	r0, [r4, #4]
 800e22c:	2300      	movs	r3, #0
 800e22e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e232:	e6fa      	b.n	800e02a <_rclc_take_new_data+0x3a>
 800e234:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e238:	a90a      	add	r1, sp, #40	@ 0x28
 800e23a:	3010      	adds	r0, #16
 800e23c:	f009 fae0 	bl	8017800 <rcl_action_take_cancel_response>
 800e240:	4605      	mov	r5, r0
 800e242:	2800      	cmp	r0, #0
 800e244:	f47f af37 	bne.w	800e0b6 <_rclc_take_new_data+0xc6>
 800e248:	6860      	ldr	r0, [r4, #4]
 800e24a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e24e:	f009 ff1b 	bl	8018088 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e252:	4606      	mov	r6, r0
 800e254:	6860      	ldr	r0, [r4, #4]
 800e256:	2e00      	cmp	r6, #0
 800e258:	f43f af40 	beq.w	800e0dc <_rclc_take_new_data+0xec>
 800e25c:	2701      	movs	r7, #1
 800e25e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e260:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	f43f af3a 	beq.w	800e0dc <_rclc_take_new_data+0xec>
 800e268:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e26a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e26e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e272:	f009 feb7 	bl	8017fe4 <rclc_action_find_goal_handle_by_uuid>
 800e276:	b138      	cbz	r0, 800e288 <_rclc_take_new_data+0x298>
 800e278:	6860      	ldr	r0, [r4, #4]
 800e27a:	3501      	adds	r5, #1
 800e27c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e280:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e282:	42ab      	cmp	r3, r5
 800e284:	d8f0      	bhi.n	800e268 <_rclc_take_new_data+0x278>
 800e286:	e729      	b.n	800e0dc <_rclc_take_new_data+0xec>
 800e288:	6860      	ldr	r0, [r4, #4]
 800e28a:	3501      	adds	r5, #1
 800e28c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e28e:	42ab      	cmp	r3, r5
 800e290:	d8ea      	bhi.n	800e268 <_rclc_take_new_data+0x278>
 800e292:	e723      	b.n	800e0dc <_rclc_take_new_data+0xec>
 800e294:	ab06      	add	r3, sp, #24
 800e296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e298:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e29c:	2103      	movs	r1, #3
 800e29e:	6860      	ldr	r0, [r4, #4]
 800e2a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e2a4:	f009 ff64 	bl	8018170 <rclc_action_server_goal_cancel_reject>
 800e2a8:	e6c4      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e2aa:	ab06      	add	r3, sp, #24
 800e2ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e2ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e2b2:	2102      	movs	r1, #2
 800e2b4:	6860      	ldr	r0, [r4, #4]
 800e2b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e2ba:	f009 ff59 	bl	8018170 <rclc_action_server_goal_cancel_reject>
 800e2be:	e6b9      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e2c0:	6860      	ldr	r0, [r4, #4]
 800e2c2:	e706      	b.n	800e0d2 <_rclc_take_new_data+0xe2>
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	6860      	ldr	r0, [r4, #4]
 800e2c8:	f009 fe76 	bl	8017fb8 <rclc_action_remove_used_goal_handle>
 800e2cc:	f000 fdb4 	bl	800ee38 <rcutils_reset_error>
 800e2d0:	e6b0      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e2d2:	2501      	movs	r5, #1
 800e2d4:	e6ae      	b.n	800e034 <_rclc_take_new_data+0x44>
 800e2d6:	bf00      	nop

0800e2d8 <_rclc_execute.part.0>:
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	7803      	ldrb	r3, [r0, #0]
 800e2dc:	b085      	sub	sp, #20
 800e2de:	4604      	mov	r4, r0
 800e2e0:	2b0a      	cmp	r3, #10
 800e2e2:	f200 8139 	bhi.w	800e558 <_rclc_execute.part.0+0x280>
 800e2e6:	e8df f003 	tbb	[pc, r3]
 800e2ea:	4268      	.short	0x4268
 800e2ec:	06a75b4d 	.word	0x06a75b4d
 800e2f0:	721d0606 	.word	0x721d0606
 800e2f4:	62          	.byte	0x62
 800e2f5:	00          	.byte	0x00
 800e2f6:	2b06      	cmp	r3, #6
 800e2f8:	f000 8126 	beq.w	800e548 <_rclc_execute.part.0+0x270>
 800e2fc:	2b07      	cmp	r3, #7
 800e2fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e300:	f040 811c 	bne.w	800e53c <_rclc_execute.part.0+0x264>
 800e304:	f104 0510 	add.w	r5, r4, #16
 800e308:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e30c:	6880      	ldr	r0, [r0, #8]
 800e30e:	4798      	blx	r3
 800e310:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e312:	4629      	mov	r1, r5
 800e314:	6860      	ldr	r0, [r4, #4]
 800e316:	f007 ff19 	bl	801614c <rcl_send_response>
 800e31a:	4604      	mov	r4, r0
 800e31c:	b378      	cbz	r0, 800e37e <_rclc_execute.part.0+0xa6>
 800e31e:	f000 fd8b 	bl	800ee38 <rcutils_reset_error>
 800e322:	e02c      	b.n	800e37e <_rclc_execute.part.0+0xa6>
 800e324:	6840      	ldr	r0, [r0, #4]
 800e326:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 808e 	beq.w	800e44c <_rclc_execute.part.0+0x174>
 800e330:	2600      	movs	r6, #0
 800e332:	2701      	movs	r7, #1
 800e334:	e004      	b.n	800e340 <_rclc_execute.part.0+0x68>
 800e336:	f009 fe09 	bl	8017f4c <rclc_action_send_result_request>
 800e33a:	b998      	cbnz	r0, 800e364 <_rclc_execute.part.0+0x8c>
 800e33c:	722f      	strb	r7, [r5, #8]
 800e33e:	6860      	ldr	r0, [r4, #4]
 800e340:	f009 feb4 	bl	80180ac <rclc_action_find_first_handle_with_goal_response>
 800e344:	4605      	mov	r5, r0
 800e346:	2800      	cmp	r0, #0
 800e348:	d07f      	beq.n	800e44a <_rclc_execute.part.0+0x172>
 800e34a:	6863      	ldr	r3, [r4, #4]
 800e34c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e354:	f885 6020 	strb.w	r6, [r5, #32]
 800e358:	4798      	blx	r3
 800e35a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e35e:	4628      	mov	r0, r5
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e8      	bne.n	800e336 <_rclc_execute.part.0+0x5e>
 800e364:	6860      	ldr	r0, [r4, #4]
 800e366:	4629      	mov	r1, r5
 800e368:	f009 fe26 	bl	8017fb8 <rclc_action_remove_used_goal_handle>
 800e36c:	e7e7      	b.n	800e33e <_rclc_execute.part.0+0x66>
 800e36e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e372:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800e376:	b100      	cbz	r0, 800e37a <_rclc_execute.part.0+0xa2>
 800e378:	68a0      	ldr	r0, [r4, #8]
 800e37a:	2400      	movs	r4, #0
 800e37c:	4798      	blx	r3
 800e37e:	4620      	mov	r0, r4
 800e380:	b005      	add	sp, #20
 800e382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e384:	6840      	ldr	r0, [r0, #4]
 800e386:	f008 fa39 	bl	80167fc <rcl_timer_call>
 800e38a:	f240 3321 	movw	r3, #801	@ 0x321
 800e38e:	4604      	mov	r4, r0
 800e390:	4298      	cmp	r0, r3
 800e392:	d001      	beq.n	800e398 <_rclc_execute.part.0+0xc0>
 800e394:	2800      	cmp	r0, #0
 800e396:	d1c2      	bne.n	800e31e <_rclc_execute.part.0+0x46>
 800e398:	2400      	movs	r4, #0
 800e39a:	4620      	mov	r0, r4
 800e39c:	b005      	add	sp, #20
 800e39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a0:	2400      	movs	r4, #0
 800e3a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e3a4:	6880      	ldr	r0, [r0, #8]
 800e3a6:	4798      	blx	r3
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	b005      	add	sp, #20
 800e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ae:	2400      	movs	r4, #0
 800e3b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e3b2:	4798      	blx	r3
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	b005      	add	sp, #20
 800e3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ba:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800e3be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e3c0:	b100      	cbz	r0, 800e3c4 <_rclc_execute.part.0+0xec>
 800e3c2:	68a0      	ldr	r0, [r4, #8]
 800e3c4:	2400      	movs	r4, #0
 800e3c6:	4798      	blx	r3
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	b005      	add	sp, #20
 800e3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ce:	6840      	ldr	r0, [r0, #4]
 800e3d0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e3d4:	bb3b      	cbnz	r3, 800e426 <_rclc_execute.part.0+0x14e>
 800e3d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d07d      	beq.n	800e4da <_rclc_execute.part.0+0x202>
 800e3de:	f640 0634 	movw	r6, #2100	@ 0x834
 800e3e2:	2701      	movs	r7, #1
 800e3e4:	e007      	b.n	800e3f6 <_rclc_execute.part.0+0x11e>
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f009 fe78 	bl	80180dc <rclc_action_server_response_goal_request>
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	6860      	ldr	r0, [r4, #4]
 800e3f0:	f009 fde2 	bl	8017fb8 <rclc_action_remove_used_goal_handle>
 800e3f4:	6860      	ldr	r0, [r4, #4]
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	f009 fe0a 	bl	8018010 <rclc_action_find_first_handle_by_status>
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d068      	beq.n	800e4d4 <_rclc_execute.part.0+0x1fc>
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	4798      	blx	r3
 800e40a:	42b0      	cmp	r0, r6
 800e40c:	f04f 0100 	mov.w	r1, #0
 800e410:	d1e9      	bne.n	800e3e6 <_rclc_execute.part.0+0x10e>
 800e412:	2101      	movs	r1, #1
 800e414:	4628      	mov	r0, r5
 800e416:	f009 fe61 	bl	80180dc <rclc_action_server_response_goal_request>
 800e41a:	722f      	strb	r7, [r5, #8]
 800e41c:	e7ea      	b.n	800e3f4 <_rclc_execute.part.0+0x11c>
 800e41e:	6848      	ldr	r0, [r1, #4]
 800e420:	f009 fdca 	bl	8017fb8 <rclc_action_remove_used_goal_handle>
 800e424:	6860      	ldr	r0, [r4, #4]
 800e426:	f009 fdff 	bl	8018028 <rclc_action_find_first_terminated_handle>
 800e42a:	4601      	mov	r1, r0
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d1f6      	bne.n	800e41e <_rclc_execute.part.0+0x146>
 800e430:	6860      	ldr	r0, [r4, #4]
 800e432:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e436:	e7ce      	b.n	800e3d6 <_rclc_execute.part.0+0xfe>
 800e438:	2400      	movs	r4, #0
 800e43a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e43c:	f100 0110 	add.w	r1, r0, #16
 800e440:	6880      	ldr	r0, [r0, #8]
 800e442:	4798      	blx	r3
 800e444:	4620      	mov	r0, r4
 800e446:	b005      	add	sp, #20
 800e448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e44a:	6860      	ldr	r0, [r4, #4]
 800e44c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e450:	b18b      	cbz	r3, 800e476 <_rclc_execute.part.0+0x19e>
 800e452:	68c5      	ldr	r5, [r0, #12]
 800e454:	b32d      	cbz	r5, 800e4a2 <_rclc_execute.part.0+0x1ca>
 800e456:	2600      	movs	r6, #0
 800e458:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e45c:	b143      	cbz	r3, 800e470 <_rclc_execute.part.0+0x198>
 800e45e:	69c3      	ldr	r3, [r0, #28]
 800e460:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e464:	b123      	cbz	r3, 800e470 <_rclc_execute.part.0+0x198>
 800e466:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e468:	4628      	mov	r0, r5
 800e46a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e46c:	4798      	blx	r3
 800e46e:	6860      	ldr	r0, [r4, #4]
 800e470:	682d      	ldr	r5, [r5, #0]
 800e472:	2d00      	cmp	r5, #0
 800e474:	d1f0      	bne.n	800e458 <_rclc_execute.part.0+0x180>
 800e476:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e47a:	b193      	cbz	r3, 800e4a2 <_rclc_execute.part.0+0x1ca>
 800e47c:	68c5      	ldr	r5, [r0, #12]
 800e47e:	b185      	cbz	r5, 800e4a2 <_rclc_execute.part.0+0x1ca>
 800e480:	2600      	movs	r6, #0
 800e482:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e486:	b14b      	cbz	r3, 800e49c <_rclc_execute.part.0+0x1c4>
 800e488:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e48a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e48e:	b12b      	cbz	r3, 800e49c <_rclc_execute.part.0+0x1c4>
 800e490:	4628      	mov	r0, r5
 800e492:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e496:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e498:	4798      	blx	r3
 800e49a:	6860      	ldr	r0, [r4, #4]
 800e49c:	682d      	ldr	r5, [r5, #0]
 800e49e:	2d00      	cmp	r5, #0
 800e4a0:	d1ef      	bne.n	800e482 <_rclc_execute.part.0+0x1aa>
 800e4a2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f43f af76 	beq.w	800e398 <_rclc_execute.part.0+0xc0>
 800e4ac:	2700      	movs	r7, #0
 800e4ae:	e00b      	b.n	800e4c8 <_rclc_execute.part.0+0x1f0>
 800e4b0:	6863      	ldr	r3, [r4, #4]
 800e4b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e4b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e4b6:	6a1e      	ldr	r6, [r3, #32]
 800e4b8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e4bc:	47b0      	blx	r6
 800e4be:	6860      	ldr	r0, [r4, #4]
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	f009 fd79 	bl	8017fb8 <rclc_action_remove_used_goal_handle>
 800e4c6:	6860      	ldr	r0, [r4, #4]
 800e4c8:	f009 fdfc 	bl	80180c4 <rclc_action_find_first_handle_with_result_response>
 800e4cc:	4605      	mov	r5, r0
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d1ee      	bne.n	800e4b0 <_rclc_execute.part.0+0x1d8>
 800e4d2:	e761      	b.n	800e398 <_rclc_execute.part.0+0xc0>
 800e4d4:	6860      	ldr	r0, [r4, #4]
 800e4d6:	f880 5020 	strb.w	r5, [r0, #32]
 800e4da:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f43f af5a 	beq.w	800e398 <_rclc_execute.part.0+0xc0>
 800e4e4:	68c5      	ldr	r5, [r0, #12]
 800e4e6:	b1b5      	cbz	r5, 800e516 <_rclc_execute.part.0+0x23e>
 800e4e8:	2602      	movs	r6, #2
 800e4ea:	e001      	b.n	800e4f0 <_rclc_execute.part.0+0x218>
 800e4ec:	682d      	ldr	r5, [r5, #0]
 800e4ee:	b195      	cbz	r5, 800e516 <_rclc_execute.part.0+0x23e>
 800e4f0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e4f4:	2b03      	cmp	r3, #3
 800e4f6:	d1f9      	bne.n	800e4ec <_rclc_execute.part.0+0x214>
 800e4f8:	69c3      	ldr	r3, [r0, #28]
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e4fe:	4798      	blx	r3
 800e500:	4603      	mov	r3, r0
 800e502:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e506:	4628      	mov	r0, r5
 800e508:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e50c:	b143      	cbz	r3, 800e520 <_rclc_execute.part.0+0x248>
 800e50e:	f009 fe03 	bl	8018118 <rclc_action_server_goal_cancel_accept>
 800e512:	6860      	ldr	r0, [r4, #4]
 800e514:	e7ea      	b.n	800e4ec <_rclc_execute.part.0+0x214>
 800e516:	2300      	movs	r3, #0
 800e518:	461c      	mov	r4, r3
 800e51a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e51e:	e72e      	b.n	800e37e <_rclc_execute.part.0+0xa6>
 800e520:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e522:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e526:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e52a:	2101      	movs	r1, #1
 800e52c:	6860      	ldr	r0, [r4, #4]
 800e52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e532:	f009 fe1d 	bl	8018170 <rclc_action_server_goal_cancel_reject>
 800e536:	722e      	strb	r6, [r5, #8]
 800e538:	6860      	ldr	r0, [r4, #4]
 800e53a:	e7d7      	b.n	800e4ec <_rclc_execute.part.0+0x214>
 800e53c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e53e:	f104 0510 	add.w	r5, r4, #16
 800e542:	6880      	ldr	r0, [r0, #8]
 800e544:	4798      	blx	r3
 800e546:	e6e3      	b.n	800e310 <_rclc_execute.part.0+0x38>
 800e548:	f100 0510 	add.w	r5, r0, #16
 800e54c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e54e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e550:	4629      	mov	r1, r5
 800e552:	6880      	ldr	r0, [r0, #8]
 800e554:	4798      	blx	r3
 800e556:	e6db      	b.n	800e310 <_rclc_execute.part.0+0x38>
 800e558:	2401      	movs	r4, #1
 800e55a:	e710      	b.n	800e37e <_rclc_execute.part.0+0xa6>

0800e55c <rclc_executor_trigger_any>:
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d03d      	beq.n	800e5dc <rclc_executor_trigger_any+0x80>
 800e560:	2900      	cmp	r1, #0
 800e562:	d03c      	beq.n	800e5de <rclc_executor_trigger_any+0x82>
 800e564:	4603      	mov	r3, r0
 800e566:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e56a:	2200      	movs	r2, #0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d035      	beq.n	800e5dc <rclc_executor_trigger_any+0x80>
 800e570:	b430      	push	{r4, r5}
 800e572:	f893 c000 	ldrb.w	ip, [r3]
 800e576:	f1bc 0f08 	cmp.w	ip, #8
 800e57a:	d11d      	bne.n	800e5b8 <rclc_executor_trigger_any+0x5c>
 800e57c:	685c      	ldr	r4, [r3, #4]
 800e57e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e580:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e584:	d105      	bne.n	800e592 <rclc_executor_trigger_any+0x36>
 800e586:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e58a:	b910      	cbnz	r0, 800e592 <rclc_executor_trigger_any+0x36>
 800e58c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e590:	b128      	cbz	r0, 800e59e <rclc_executor_trigger_any+0x42>
 800e592:	bc30      	pop	{r4, r5}
 800e594:	4770      	bx	lr
 800e596:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d1f9      	bne.n	800e592 <rclc_executor_trigger_any+0x36>
 800e59e:	3201      	adds	r2, #1
 800e5a0:	3340      	adds	r3, #64	@ 0x40
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	d017      	beq.n	800e5d6 <rclc_executor_trigger_any+0x7a>
 800e5a6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d0f1      	beq.n	800e592 <rclc_executor_trigger_any+0x36>
 800e5ae:	f893 c000 	ldrb.w	ip, [r3]
 800e5b2:	f1bc 0f08 	cmp.w	ip, #8
 800e5b6:	d0e1      	beq.n	800e57c <rclc_executor_trigger_any+0x20>
 800e5b8:	f1bc 0f09 	cmp.w	ip, #9
 800e5bc:	d1eb      	bne.n	800e596 <rclc_executor_trigger_any+0x3a>
 800e5be:	685c      	ldr	r4, [r3, #4]
 800e5c0:	6a25      	ldr	r5, [r4, #32]
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	d1e5      	bne.n	800e592 <rclc_executor_trigger_any+0x36>
 800e5c6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d1e1      	bne.n	800e592 <rclc_executor_trigger_any+0x36>
 800e5ce:	3201      	adds	r2, #1
 800e5d0:	3340      	adds	r3, #64	@ 0x40
 800e5d2:	4291      	cmp	r1, r2
 800e5d4:	d1e7      	bne.n	800e5a6 <rclc_executor_trigger_any+0x4a>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	bc30      	pop	{r4, r5}
 800e5da:	4770      	bx	lr
 800e5dc:	4770      	bx	lr
 800e5de:	4608      	mov	r0, r1
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop

0800e5e4 <rclc_executor_get_zero_initialized_executor>:
 800e5e4:	b510      	push	{r4, lr}
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	2288      	movs	r2, #136	@ 0x88
 800e5ea:	4902      	ldr	r1, [pc, #8]	@ (800e5f4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e5ec:	f00d fb15 	bl	801bc1a <memcpy>
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	bd10      	pop	{r4, pc}
 800e5f4:	0801ca00 	.word	0x0801ca00

0800e5f8 <rclc_executor_init>:
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	d06a      	beq.n	800e6d2 <rclc_executor_init+0xda>
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e600:	4605      	mov	r5, r0
 800e602:	b0b0      	sub	sp, #192	@ 0xc0
 800e604:	2800      	cmp	r0, #0
 800e606:	d05c      	beq.n	800e6c2 <rclc_executor_init+0xca>
 800e608:	4616      	mov	r6, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	4688      	mov	r8, r1
 800e60e:	461f      	mov	r7, r3
 800e610:	f000 fbee 	bl	800edf0 <rcutils_allocator_is_valid>
 800e614:	2e00      	cmp	r6, #0
 800e616:	d054      	beq.n	800e6c2 <rclc_executor_init+0xca>
 800e618:	f080 0401 	eor.w	r4, r0, #1
 800e61c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800e620:	d14f      	bne.n	800e6c2 <rclc_executor_init+0xca>
 800e622:	2288      	movs	r2, #136	@ 0x88
 800e624:	4930      	ldr	r1, [pc, #192]	@ (800e6e8 <rclc_executor_init+0xf0>)
 800e626:	a80e      	add	r0, sp, #56	@ 0x38
 800e628:	f00d faf7 	bl	801bc1a <memcpy>
 800e62c:	a90e      	add	r1, sp, #56	@ 0x38
 800e62e:	2288      	movs	r2, #136	@ 0x88
 800e630:	4628      	mov	r0, r5
 800e632:	f00d faf2 	bl	801bc1a <memcpy>
 800e636:	4668      	mov	r0, sp
 800e638:	f8c5 8000 	str.w	r8, [r5]
 800e63c:	60ae      	str	r6, [r5, #8]
 800e63e:	f008 fa53 	bl	8016ae8 <rcl_get_zero_initialized_wait_set>
 800e642:	46ec      	mov	ip, sp
 800e644:	f105 0e14 	add.w	lr, r5, #20
 800e648:	f8d7 8000 	ldr.w	r8, [r7]
 800e64c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e650:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e658:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e65c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e660:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800e6e0 <rclc_executor_init+0xe8>
 800e664:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e668:	f8dc 3000 	ldr.w	r3, [ip]
 800e66c:	01b0      	lsls	r0, r6, #6
 800e66e:	6939      	ldr	r1, [r7, #16]
 800e670:	f8ce 3000 	str.w	r3, [lr]
 800e674:	612f      	str	r7, [r5, #16]
 800e676:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800e67a:	47c0      	blx	r8
 800e67c:	6068      	str	r0, [r5, #4]
 800e67e:	b908      	cbnz	r0, 800e684 <rclc_executor_init+0x8c>
 800e680:	e029      	b.n	800e6d6 <rclc_executor_init+0xde>
 800e682:	6868      	ldr	r0, [r5, #4]
 800e684:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e688:	3401      	adds	r4, #1
 800e68a:	4631      	mov	r1, r6
 800e68c:	f000 fa74 	bl	800eb78 <rclc_executor_handle_init>
 800e690:	42a6      	cmp	r6, r4
 800e692:	d8f6      	bhi.n	800e682 <rclc_executor_init+0x8a>
 800e694:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e698:	f000 fa62 	bl	800eb60 <rclc_executor_handle_counters_zero_init>
 800e69c:	4a13      	ldr	r2, [pc, #76]	@ (800e6ec <rclc_executor_init+0xf4>)
 800e69e:	2300      	movs	r3, #0
 800e6a0:	6868      	ldr	r0, [r5, #4]
 800e6a2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800e6a6:	b168      	cbz	r0, 800e6c4 <rclc_executor_init+0xcc>
 800e6a8:	68ab      	ldr	r3, [r5, #8]
 800e6aa:	b173      	cbz	r3, 800e6ca <rclc_executor_init+0xd2>
 800e6ac:	692a      	ldr	r2, [r5, #16]
 800e6ae:	fab2 f382 	clz	r3, r2
 800e6b2:	095b      	lsrs	r3, r3, #5
 800e6b4:	b14a      	cbz	r2, 800e6ca <rclc_executor_init+0xd2>
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800e6bc:	b030      	add	sp, #192	@ 0xc0
 800e6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c2:	200b      	movs	r0, #11
 800e6c4:	b030      	add	sp, #192	@ 0xc0
 800e6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	b030      	add	sp, #192	@ 0xc0
 800e6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d2:	200b      	movs	r0, #11
 800e6d4:	4770      	bx	lr
 800e6d6:	200a      	movs	r0, #10
 800e6d8:	e7f4      	b.n	800e6c4 <rclc_executor_init+0xcc>
 800e6da:	bf00      	nop
 800e6dc:	f3af 8000 	nop.w
 800e6e0:	3b9aca00 	.word	0x3b9aca00
 800e6e4:	00000000 	.word	0x00000000
 800e6e8:	0801ca00 	.word	0x0801ca00
 800e6ec:	0800e55d 	.word	0x0800e55d

0800e6f0 <rclc_executor_add_timer>:
 800e6f0:	b351      	cbz	r1, 800e748 <rclc_executor_add_timer+0x58>
 800e6f2:	fab0 f280 	clz	r2, r0
 800e6f6:	b570      	push	{r4, r5, r6, lr}
 800e6f8:	0952      	lsrs	r2, r2, #5
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	b1e0      	cbz	r0, 800e738 <rclc_executor_add_timer+0x48>
 800e6fe:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800e702:	4283      	cmp	r3, r0
 800e704:	d301      	bcc.n	800e70a <rclc_executor_add_timer+0x1a>
 800e706:	2001      	movs	r0, #1
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	6860      	ldr	r0, [r4, #4]
 800e70c:	019d      	lsls	r5, r3, #6
 800e70e:	1c5e      	adds	r6, r3, #1
 800e710:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e714:	6059      	str	r1, [r3, #4]
 800e716:	2102      	movs	r1, #2
 800e718:	5341      	strh	r1, [r0, r5]
 800e71a:	2101      	movs	r1, #1
 800e71c:	f104 0514 	add.w	r5, r4, #20
 800e720:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e722:	8719      	strh	r1, [r3, #56]	@ 0x38
 800e724:	4628      	mov	r0, r5
 800e726:	60e6      	str	r6, [r4, #12]
 800e728:	f008 f9f2 	bl	8016b10 <rcl_wait_set_is_valid>
 800e72c:	b930      	cbnz	r0, 800e73c <rclc_executor_add_timer+0x4c>
 800e72e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e730:	2000      	movs	r0, #0
 800e732:	3301      	adds	r3, #1
 800e734:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	200b      	movs	r0, #11
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
 800e73c:	4628      	mov	r0, r5
 800e73e:	f008 f9ed 	bl	8016b1c <rcl_wait_set_fini>
 800e742:	2800      	cmp	r0, #0
 800e744:	d0f3      	beq.n	800e72e <rclc_executor_add_timer+0x3e>
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	200b      	movs	r0, #11
 800e74a:	4770      	bx	lr

0800e74c <rclc_executor_prepare>:
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d044      	beq.n	800e7da <rclc_executor_prepare+0x8e>
 800e750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e752:	f100 0514 	add.w	r5, r0, #20
 800e756:	b09b      	sub	sp, #108	@ 0x6c
 800e758:	4604      	mov	r4, r0
 800e75a:	4628      	mov	r0, r5
 800e75c:	f008 f9d8 	bl	8016b10 <rcl_wait_set_is_valid>
 800e760:	b110      	cbz	r0, 800e768 <rclc_executor_prepare+0x1c>
 800e762:	2000      	movs	r0, #0
 800e764:	b01b      	add	sp, #108	@ 0x6c
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e768:	4628      	mov	r0, r5
 800e76a:	f008 f9d7 	bl	8016b1c <rcl_wait_set_fini>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d130      	bne.n	800e7d4 <rclc_executor_prepare+0x88>
 800e772:	a80c      	add	r0, sp, #48	@ 0x30
 800e774:	ae04      	add	r6, sp, #16
 800e776:	f008 f9b7 	bl	8016ae8 <rcl_get_zero_initialized_wait_set>
 800e77a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e77e:	46ae      	mov	lr, r5
 800e780:	6927      	ldr	r7, [r4, #16]
 800e782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e786:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e78a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e78e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e796:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e79a:	f8dc 3000 	ldr.w	r3, [ip]
 800e79e:	f8ce 3000 	str.w	r3, [lr]
 800e7a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e7a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	6822      	ldr	r2, [r4, #0]
 800e7ac:	6033      	str	r3, [r6, #0]
 800e7ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7b0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800e7b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e7b6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800e7ba:	e9cd 2100 	strd	r2, r1, [sp]
 800e7be:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800e7c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e7c2:	f008 fcab 	bl	801711c <rcl_wait_set_init>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d0cc      	beq.n	800e764 <rclc_executor_prepare+0x18>
 800e7ca:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e7cc:	f000 fb34 	bl	800ee38 <rcutils_reset_error>
 800e7d0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e7d2:	e7c7      	b.n	800e764 <rclc_executor_prepare+0x18>
 800e7d4:	f000 fb30 	bl	800ee38 <rcutils_reset_error>
 800e7d8:	e7cb      	b.n	800e772 <rclc_executor_prepare+0x26>
 800e7da:	200b      	movs	r0, #11
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop

0800e7e0 <rclc_executor_spin_some.part.0>:
 800e7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	4691      	mov	r9, r2
 800e7e8:	4698      	mov	r8, r3
 800e7ea:	f7ff ffaf 	bl	800e74c <rclc_executor_prepare>
 800e7ee:	f105 0614 	add.w	r6, r5, #20
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f008 fa5e 	bl	8016cb4 <rcl_wait_set_clear>
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	f040 80a8 	bne.w	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e800:	68ab      	ldr	r3, [r5, #8]
 800e802:	b30b      	cbz	r3, 800e848 <rclc_executor_spin_some.part.0+0x68>
 800e804:	4604      	mov	r4, r0
 800e806:	6869      	ldr	r1, [r5, #4]
 800e808:	01a2      	lsls	r2, r4, #6
 800e80a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e80e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800e812:	b1cb      	cbz	r3, 800e848 <rclc_executor_spin_some.part.0+0x68>
 800e814:	5c8b      	ldrb	r3, [r1, r2]
 800e816:	2b0a      	cmp	r3, #10
 800e818:	f200 80de 	bhi.w	800e9d8 <rclc_executor_spin_some.part.0+0x1f8>
 800e81c:	e8df f003 	tbb	[pc, r3]
 800e820:	8da99d9d 	.word	0x8da99d9d
 800e824:	0606068d 	.word	0x0606068d
 800e828:	c1ce      	.short	0xc1ce
 800e82a:	b5          	.byte	0xb5
 800e82b:	00          	.byte	0x00
 800e82c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e830:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e834:	4630      	mov	r0, r6
 800e836:	f008 fd8d 	bl	8017354 <rcl_wait_set_add_service>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f040 8087 	bne.w	800e94e <rclc_executor_spin_some.part.0+0x16e>
 800e840:	3401      	adds	r4, #1
 800e842:	68ab      	ldr	r3, [r5, #8]
 800e844:	429c      	cmp	r4, r3
 800e846:	d3de      	bcc.n	800e806 <rclc_executor_spin_some.part.0+0x26>
 800e848:	4643      	mov	r3, r8
 800e84a:	464a      	mov	r2, r9
 800e84c:	4630      	mov	r0, r6
 800e84e:	f008 fdaf 	bl	80173b0 <rcl_wait>
 800e852:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80c6 	beq.w	800e9e8 <rclc_executor_spin_some.part.0+0x208>
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	f040 80bb 	bne.w	800e9d8 <rclc_executor_spin_some.part.0+0x1f8>
 800e862:	68ab      	ldr	r3, [r5, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 8159 	beq.w	800eb1c <rclc_executor_spin_some.part.0+0x33c>
 800e86a:	2400      	movs	r4, #0
 800e86c:	f240 1991 	movw	r9, #401	@ 0x191
 800e870:	46a0      	mov	r8, r4
 800e872:	e00a      	b.n	800e88a <rclc_executor_spin_some.part.0+0xaa>
 800e874:	f7ff fb6e 	bl	800df54 <_rclc_check_for_new_data>
 800e878:	4604      	mov	r4, r0
 800e87a:	b110      	cbz	r0, 800e882 <rclc_executor_spin_some.part.0+0xa2>
 800e87c:	4548      	cmp	r0, r9
 800e87e:	f040 80b1 	bne.w	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e882:	68ab      	ldr	r3, [r5, #8]
 800e884:	4598      	cmp	r8, r3
 800e886:	f080 8126 	bcs.w	800ead6 <rclc_executor_spin_some.part.0+0x2f6>
 800e88a:	686a      	ldr	r2, [r5, #4]
 800e88c:	4631      	mov	r1, r6
 800e88e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e892:	f108 0801 	add.w	r8, r8, #1
 800e896:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e89a:	f1bc 0f00 	cmp.w	ip, #0
 800e89e:	d1e9      	bne.n	800e874 <rclc_executor_spin_some.part.0+0x94>
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800e8a8:	4798      	blx	r3
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	f000 809a 	beq.w	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e8b0:	68ab      	ldr	r3, [r5, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f000 8096 	beq.w	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e8b8:	f04f 0800 	mov.w	r8, #0
 800e8bc:	f240 1991 	movw	r9, #401	@ 0x191
 800e8c0:	e009      	b.n	800e8d6 <rclc_executor_spin_some.part.0+0xf6>
 800e8c2:	f7ff fb95 	bl	800dff0 <_rclc_take_new_data>
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	b110      	cbz	r0, 800e8d0 <rclc_executor_spin_some.part.0+0xf0>
 800e8ca:	4548      	cmp	r0, r9
 800e8cc:	f040 808a 	bne.w	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e8d0:	68ab      	ldr	r3, [r5, #8]
 800e8d2:	4598      	cmp	r8, r3
 800e8d4:	d209      	bcs.n	800e8ea <rclc_executor_spin_some.part.0+0x10a>
 800e8d6:	6868      	ldr	r0, [r5, #4]
 800e8d8:	4631      	mov	r1, r6
 800e8da:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e8de:	f108 0801 	add.w	r8, r8, #1
 800e8e2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	d1eb      	bne.n	800e8c2 <rclc_executor_spin_some.part.0+0xe2>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d07a      	beq.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e8ee:	2600      	movs	r6, #0
 800e8f0:	e00e      	b.n	800e910 <rclc_executor_spin_some.part.0+0x130>
 800e8f2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e8f6:	2a08      	cmp	r2, #8
 800e8f8:	f000 80fc 	beq.w	800eaf4 <rclc_executor_spin_some.part.0+0x314>
 800e8fc:	2a09      	cmp	r2, #9
 800e8fe:	f000 80ee 	beq.w	800eade <rclc_executor_spin_some.part.0+0x2fe>
 800e902:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800e906:	b98a      	cbnz	r2, 800e92c <rclc_executor_spin_some.part.0+0x14c>
 800e908:	3601      	adds	r6, #1
 800e90a:	429e      	cmp	r6, r3
 800e90c:	d267      	bcs.n	800e9de <rclc_executor_spin_some.part.0+0x1fe>
 800e90e:	2400      	movs	r4, #0
 800e910:	686a      	ldr	r2, [r5, #4]
 800e912:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e916:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e91a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800e91e:	2900      	cmp	r1, #0
 800e920:	d060      	beq.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800e922:	7841      	ldrb	r1, [r0, #1]
 800e924:	2900      	cmp	r1, #0
 800e926:	d0e4      	beq.n	800e8f2 <rclc_executor_spin_some.part.0+0x112>
 800e928:	2901      	cmp	r1, #1
 800e92a:	d1ed      	bne.n	800e908 <rclc_executor_spin_some.part.0+0x128>
 800e92c:	f7ff fcd4 	bl	800e2d8 <_rclc_execute.part.0>
 800e930:	2800      	cmp	r0, #0
 800e932:	f040 80b5 	bne.w	800eaa0 <rclc_executor_spin_some.part.0+0x2c0>
 800e936:	68ab      	ldr	r3, [r5, #8]
 800e938:	e7e6      	b.n	800e908 <rclc_executor_spin_some.part.0+0x128>
 800e93a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e93e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e942:	4630      	mov	r0, r6
 800e944:	f008 fcda 	bl	80172fc <rcl_wait_set_add_client>
 800e948:	2800      	cmp	r0, #0
 800e94a:	f43f af79 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e94e:	4607      	mov	r7, r0
 800e950:	f000 fa72 	bl	800ee38 <rcutils_reset_error>
 800e954:	4638      	mov	r0, r7
 800e956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e95e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e962:	4630      	mov	r0, r6
 800e964:	f008 f97a 	bl	8016c5c <rcl_wait_set_add_subscription>
 800e968:	2800      	cmp	r0, #0
 800e96a:	f43f af69 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e96e:	4607      	mov	r7, r0
 800e970:	e7ee      	b.n	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e972:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e976:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e97a:	4630      	mov	r0, r6
 800e97c:	f008 fc8e 	bl	801729c <rcl_wait_set_add_timer>
 800e980:	2800      	cmp	r0, #0
 800e982:	f43f af5d 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e986:	4607      	mov	r7, r0
 800e988:	e7e2      	b.n	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e98a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e98e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e992:	4630      	mov	r0, r6
 800e994:	f008 fc56 	bl	8017244 <rcl_wait_set_add_guard_condition>
 800e998:	2800      	cmp	r0, #0
 800e99a:	f43f af51 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e99e:	4607      	mov	r7, r0
 800e9a0:	e7d6      	b.n	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e9a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e9a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	3110      	adds	r1, #16
 800e9ae:	f009 f9d5 	bl	8017d5c <rcl_action_wait_set_add_action_server>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f43f af44 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e9b8:	4607      	mov	r7, r0
 800e9ba:	e7c9      	b.n	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e9bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	3110      	adds	r1, #16
 800e9ca:	f008 ff9d 	bl	8017908 <rcl_action_wait_set_add_action_client>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	f43f af36 	beq.w	800e840 <rclc_executor_spin_some.part.0+0x60>
 800e9d4:	4607      	mov	r7, r0
 800e9d6:	e7bb      	b.n	800e950 <rclc_executor_spin_some.part.0+0x170>
 800e9d8:	2701      	movs	r7, #1
 800e9da:	f000 fa2d 	bl	800ee38 <rcutils_reset_error>
 800e9de:	4638      	mov	r0, r7
 800e9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	4627      	mov	r7, r4
 800e9e6:	e7fa      	b.n	800e9de <rclc_executor_spin_some.part.0+0x1fe>
 800e9e8:	68ab      	ldr	r3, [r5, #8]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 8093 	beq.w	800eb16 <rclc_executor_spin_some.part.0+0x336>
 800e9f0:	2400      	movs	r4, #0
 800e9f2:	f240 1991 	movw	r9, #401	@ 0x191
 800e9f6:	46a0      	mov	r8, r4
 800e9f8:	e008      	b.n	800ea0c <rclc_executor_spin_some.part.0+0x22c>
 800e9fa:	f7ff faab 	bl	800df54 <_rclc_check_for_new_data>
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b108      	cbz	r0, 800ea06 <rclc_executor_spin_some.part.0+0x226>
 800ea02:	4548      	cmp	r0, r9
 800ea04:	d1ee      	bne.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800ea06:	68ab      	ldr	r3, [r5, #8]
 800ea08:	4598      	cmp	r8, r3
 800ea0a:	d266      	bcs.n	800eada <rclc_executor_spin_some.part.0+0x2fa>
 800ea0c:	686a      	ldr	r2, [r5, #4]
 800ea0e:	4631      	mov	r1, r6
 800ea10:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ea14:	f108 0801 	add.w	r8, r8, #1
 800ea18:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ea1c:	f1bc 0f00 	cmp.w	ip, #0
 800ea20:	d1eb      	bne.n	800e9fa <rclc_executor_spin_some.part.0+0x21a>
 800ea22:	4619      	mov	r1, r3
 800ea24:	4610      	mov	r0, r2
 800ea26:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ea2a:	4798      	blx	r3
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d0d9      	beq.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800ea30:	68ab      	ldr	r3, [r5, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0d6      	beq.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800ea36:	f04f 0a00 	mov.w	sl, #0
 800ea3a:	f240 1891 	movw	r8, #401	@ 0x191
 800ea3e:	f240 2959 	movw	r9, #601	@ 0x259
 800ea42:	e00e      	b.n	800ea62 <rclc_executor_spin_some.part.0+0x282>
 800ea44:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ea48:	2b08      	cmp	r3, #8
 800ea4a:	d034      	beq.n	800eab6 <rclc_executor_spin_some.part.0+0x2d6>
 800ea4c:	2b09      	cmp	r3, #9
 800ea4e:	d029      	beq.n	800eaa4 <rclc_executor_spin_some.part.0+0x2c4>
 800ea50:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ea54:	bb03      	cbnz	r3, 800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800ea56:	f10a 0a01 	add.w	sl, sl, #1
 800ea5a:	68ab      	ldr	r3, [r5, #8]
 800ea5c:	459a      	cmp	sl, r3
 800ea5e:	d2be      	bcs.n	800e9de <rclc_executor_spin_some.part.0+0x1fe>
 800ea60:	2400      	movs	r4, #0
 800ea62:	6868      	ldr	r0, [r5, #4]
 800ea64:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800ea68:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800ea6c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0b7      	beq.n	800e9e4 <rclc_executor_spin_some.part.0+0x204>
 800ea74:	4631      	mov	r1, r6
 800ea76:	f7ff fabb 	bl	800dff0 <_rclc_take_new_data>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	bf18      	it	ne
 800ea7e:	4540      	cmpne	r0, r8
 800ea80:	d001      	beq.n	800ea86 <rclc_executor_spin_some.part.0+0x2a6>
 800ea82:	4548      	cmp	r0, r9
 800ea84:	d10c      	bne.n	800eaa0 <rclc_executor_spin_some.part.0+0x2c0>
 800ea86:	686b      	ldr	r3, [r5, #4]
 800ea88:	eb13 000b 	adds.w	r0, r3, fp
 800ea8c:	d021      	beq.n	800ead2 <rclc_executor_spin_some.part.0+0x2f2>
 800ea8e:	7842      	ldrb	r2, [r0, #1]
 800ea90:	2a00      	cmp	r2, #0
 800ea92:	d0d7      	beq.n	800ea44 <rclc_executor_spin_some.part.0+0x264>
 800ea94:	2a01      	cmp	r2, #1
 800ea96:	d1de      	bne.n	800ea56 <rclc_executor_spin_some.part.0+0x276>
 800ea98:	f7ff fc1e 	bl	800e2d8 <_rclc_execute.part.0>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d0da      	beq.n	800ea56 <rclc_executor_spin_some.part.0+0x276>
 800eaa0:	4607      	mov	r7, r0
 800eaa2:	e79c      	b.n	800e9de <rclc_executor_spin_some.part.0+0x1fe>
 800eaa4:	6843      	ldr	r3, [r0, #4]
 800eaa6:	6a1a      	ldr	r2, [r3, #32]
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	d1f5      	bne.n	800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800eaac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d0d0      	beq.n	800ea56 <rclc_executor_spin_some.part.0+0x276>
 800eab4:	e7f0      	b.n	800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800eab6:	6843      	ldr	r3, [r0, #4]
 800eab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eaba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800eabe:	d1eb      	bne.n	800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800eac0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	d1e7      	bne.n	800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800eac8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0c2      	beq.n	800ea56 <rclc_executor_spin_some.part.0+0x276>
 800ead0:	e7e2      	b.n	800ea98 <rclc_executor_spin_some.part.0+0x2b8>
 800ead2:	270b      	movs	r7, #11
 800ead4:	e783      	b.n	800e9de <rclc_executor_spin_some.part.0+0x1fe>
 800ead6:	686a      	ldr	r2, [r5, #4]
 800ead8:	e6e2      	b.n	800e8a0 <rclc_executor_spin_some.part.0+0xc0>
 800eada:	686a      	ldr	r2, [r5, #4]
 800eadc:	e7a1      	b.n	800ea22 <rclc_executor_spin_some.part.0+0x242>
 800eade:	6842      	ldr	r2, [r0, #4]
 800eae0:	6a11      	ldr	r1, [r2, #32]
 800eae2:	2900      	cmp	r1, #0
 800eae4:	f47f af22 	bne.w	800e92c <rclc_executor_spin_some.part.0+0x14c>
 800eae8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	f43f af0b 	beq.w	800e908 <rclc_executor_spin_some.part.0+0x128>
 800eaf2:	e71b      	b.n	800e92c <rclc_executor_spin_some.part.0+0x14c>
 800eaf4:	6842      	ldr	r2, [r0, #4]
 800eaf6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800eaf8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800eafc:	f47f af16 	bne.w	800e92c <rclc_executor_spin_some.part.0+0x14c>
 800eb00:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800eb04:	2900      	cmp	r1, #0
 800eb06:	f47f af11 	bne.w	800e92c <rclc_executor_spin_some.part.0+0x14c>
 800eb0a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800eb0e:	2a00      	cmp	r2, #0
 800eb10:	f43f aefa 	beq.w	800e908 <rclc_executor_spin_some.part.0+0x128>
 800eb14:	e70a      	b.n	800e92c <rclc_executor_spin_some.part.0+0x14c>
 800eb16:	686a      	ldr	r2, [r5, #4]
 800eb18:	461c      	mov	r4, r3
 800eb1a:	e782      	b.n	800ea22 <rclc_executor_spin_some.part.0+0x242>
 800eb1c:	686a      	ldr	r2, [r5, #4]
 800eb1e:	461c      	mov	r4, r3
 800eb20:	e6be      	b.n	800e8a0 <rclc_executor_spin_some.part.0+0xc0>
 800eb22:	bf00      	nop

0800eb24 <rclc_executor_spin>:
 800eb24:	b1d0      	cbz	r0, 800eb5c <rclc_executor_spin+0x38>
 800eb26:	b510      	push	{r4, lr}
 800eb28:	4604      	mov	r4, r0
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	e004      	b.n	800eb38 <rclc_executor_spin+0x14>
 800eb2e:	f7ff fe57 	bl	800e7e0 <rclc_executor_spin_some.part.0>
 800eb32:	f030 0302 	bics.w	r3, r0, #2
 800eb36:	d10f      	bne.n	800eb58 <rclc_executor_spin+0x34>
 800eb38:	6820      	ldr	r0, [r4, #0]
 800eb3a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800eb3e:	e9cd 2300 	strd	r2, r3, [sp]
 800eb42:	f006 fdb1 	bl	80156a8 <rcl_context_is_valid>
 800eb46:	4601      	mov	r1, r0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb4e:	2900      	cmp	r1, #0
 800eb50:	d1ed      	bne.n	800eb2e <rclc_executor_spin+0xa>
 800eb52:	f000 f971 	bl	800ee38 <rcutils_reset_error>
 800eb56:	2001      	movs	r0, #1
 800eb58:	b002      	add	sp, #8
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	200b      	movs	r0, #11
 800eb5e:	4770      	bx	lr

0800eb60 <rclc_executor_handle_counters_zero_init>:
 800eb60:	b130      	cbz	r0, 800eb70 <rclc_executor_handle_counters_zero_init+0x10>
 800eb62:	2220      	movs	r2, #32
 800eb64:	2100      	movs	r1, #0
 800eb66:	b508      	push	{r3, lr}
 800eb68:	f00c ff8e 	bl	801ba88 <memset>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	bd08      	pop	{r3, pc}
 800eb70:	200b      	movs	r0, #11
 800eb72:	4770      	bx	lr
 800eb74:	0000      	movs	r0, r0
	...

0800eb78 <rclc_executor_handle_init>:
 800eb78:	4603      	mov	r3, r0
 800eb7a:	b178      	cbz	r0, 800eb9c <rclc_executor_handle_init+0x24>
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f04f 0c0b 	mov.w	ip, #11
 800eb82:	6341      	str	r1, [r0, #52]	@ 0x34
 800eb84:	4610      	mov	r0, r2
 800eb86:	f8a3 c000 	strh.w	ip, [r3]
 800eb8a:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb8c:	871a      	strh	r2, [r3, #56]	@ 0x38
 800eb8e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800eba0 <rclc_executor_handle_init+0x28>
 800eb92:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800eb96:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800eb9a:	4770      	bx	lr
 800eb9c:	200b      	movs	r0, #11
 800eb9e:	4770      	bx	lr
	...

0800eba8 <rclc_support_init_with_options>:
 800eba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebac:	b083      	sub	sp, #12
 800ebae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf18      	it	ne
 800ebb4:	2f00      	cmpne	r7, #0
 800ebb6:	d027      	beq.n	800ec08 <rclc_support_init_with_options+0x60>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	b328      	cbz	r0, 800ec08 <rclc_support_init_with_options+0x60>
 800ebbc:	46e9      	mov	r9, sp
 800ebbe:	461d      	mov	r5, r3
 800ebc0:	460e      	mov	r6, r1
 800ebc2:	4690      	mov	r8, r2
 800ebc4:	4648      	mov	r0, r9
 800ebc6:	f006 fd65 	bl	8015694 <rcl_get_zero_initialized_context>
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4623      	mov	r3, r4
 800ebce:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ebd2:	e884 0003 	stmia.w	r4, {r0, r1}
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f006 fdcb 	bl	8015774 <rcl_init>
 800ebde:	4605      	mov	r5, r0
 800ebe0:	b960      	cbnz	r0, 800ebfc <rclc_support_init_with_options+0x54>
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	f104 010c 	add.w	r1, r4, #12
 800ebe8:	2003      	movs	r0, #3
 800ebea:	60a7      	str	r7, [r4, #8]
 800ebec:	f007 fb50 	bl	8016290 <rcl_clock_init>
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	b918      	cbnz	r0, 800ebfc <rclc_support_init_with_options+0x54>
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	b003      	add	sp, #12
 800ebf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfc:	f000 f91c 	bl	800ee38 <rcutils_reset_error>
 800ec00:	4628      	mov	r0, r5
 800ec02:	b003      	add	sp, #12
 800ec04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec08:	250b      	movs	r5, #11
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	b003      	add	sp, #12
 800ec0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec12:	bf00      	nop

0800ec14 <rclc_node_init_default>:
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	bf18      	it	ne
 800ec18:	2a00      	cmpne	r2, #0
 800ec1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec1e:	4616      	mov	r6, r2
 800ec20:	bf0c      	ite	eq
 800ec22:	2201      	moveq	r2, #1
 800ec24:	2200      	movne	r2, #0
 800ec26:	b0a1      	sub	sp, #132	@ 0x84
 800ec28:	2900      	cmp	r1, #0
 800ec2a:	bf08      	it	eq
 800ec2c:	f042 0201 	orreq.w	r2, r2, #1
 800ec30:	bb22      	cbnz	r2, 800ec7c <rclc_node_init_default+0x68>
 800ec32:	4604      	mov	r4, r0
 800ec34:	b310      	cbz	r0, 800ec7c <rclc_node_init_default+0x68>
 800ec36:	f10d 0810 	add.w	r8, sp, #16
 800ec3a:	461f      	mov	r7, r3
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	f10d 0918 	add.w	r9, sp, #24
 800ec42:	4640      	mov	r0, r8
 800ec44:	f006 febe 	bl	80159c4 <rcl_get_zero_initialized_node>
 800ec48:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ec4c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec50:	4648      	mov	r0, r9
 800ec52:	f007 f831 	bl	8015cb8 <rcl_node_get_default_options>
 800ec56:	4640      	mov	r0, r8
 800ec58:	f006 feb4 	bl	80159c4 <rcl_get_zero_initialized_node>
 800ec5c:	f8cd 9000 	str.w	r9, [sp]
 800ec60:	463b      	mov	r3, r7
 800ec62:	4632      	mov	r2, r6
 800ec64:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ec68:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f006 feb2 	bl	80159d8 <rcl_node_init>
 800ec74:	b930      	cbnz	r0, 800ec84 <rclc_node_init_default+0x70>
 800ec76:	b021      	add	sp, #132	@ 0x84
 800ec78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec7c:	200b      	movs	r0, #11
 800ec7e:	b021      	add	sp, #132	@ 0x84
 800ec80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec84:	9003      	str	r0, [sp, #12]
 800ec86:	f000 f8d7 	bl	800ee38 <rcutils_reset_error>
 800ec8a:	f000 f8d5 	bl	800ee38 <rcutils_reset_error>
 800ec8e:	9803      	ldr	r0, [sp, #12]
 800ec90:	b021      	add	sp, #132	@ 0x84
 800ec92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec96:	bf00      	nop

0800ec98 <rclc_publisher_init_best_effort>:
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	bf18      	it	ne
 800ec9c:	2a00      	cmpne	r2, #0
 800ec9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca2:	4616      	mov	r6, r2
 800eca4:	bf0c      	ite	eq
 800eca6:	2201      	moveq	r2, #1
 800eca8:	2200      	movne	r2, #0
 800ecaa:	b0a0      	sub	sp, #128	@ 0x80
 800ecac:	2900      	cmp	r1, #0
 800ecae:	bf08      	it	eq
 800ecb0:	f042 0201 	orreq.w	r2, r2, #1
 800ecb4:	bb1a      	cbnz	r2, 800ecfe <rclc_publisher_init_best_effort+0x66>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	b308      	cbz	r0, 800ecfe <rclc_publisher_init_best_effort+0x66>
 800ecba:	f10d 0810 	add.w	r8, sp, #16
 800ecbe:	461f      	mov	r7, r3
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	f7ff f833 	bl	800dd2c <rcl_get_zero_initialized_publisher>
 800ecc6:	6020      	str	r0, [r4, #0]
 800ecc8:	4640      	mov	r0, r8
 800ecca:	f7ff f8cf 	bl	800de6c <rcl_publisher_get_default_options>
 800ecce:	2250      	movs	r2, #80	@ 0x50
 800ecd0:	490d      	ldr	r1, [pc, #52]	@ (800ed08 <rclc_publisher_init_best_effort+0x70>)
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	f00c ffa1 	bl	801bc1a <memcpy>
 800ecd8:	463b      	mov	r3, r7
 800ecda:	4632      	mov	r2, r6
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4620      	mov	r0, r4
 800ece0:	f8cd 8000 	str.w	r8, [sp]
 800ece4:	f7ff f828 	bl	800dd38 <rcl_publisher_init>
 800ece8:	b910      	cbnz	r0, 800ecf0 <rclc_publisher_init_best_effort+0x58>
 800ecea:	b020      	add	sp, #128	@ 0x80
 800ecec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf0:	9003      	str	r0, [sp, #12]
 800ecf2:	f000 f8a1 	bl	800ee38 <rcutils_reset_error>
 800ecf6:	9803      	ldr	r0, [sp, #12]
 800ecf8:	b020      	add	sp, #128	@ 0x80
 800ecfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfe:	200b      	movs	r0, #11
 800ed00:	b020      	add	sp, #128	@ 0x80
 800ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed06:	bf00      	nop
 800ed08:	0801ca88 	.word	0x0801ca88

0800ed0c <rclc_timer_init_default>:
 800ed0c:	b361      	cbz	r1, 800ed68 <rclc_timer_init_default+0x5c>
 800ed0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed12:	4606      	mov	r6, r0
 800ed14:	b08a      	sub	sp, #40	@ 0x28
 800ed16:	b318      	cbz	r0, 800ed60 <rclc_timer_init_default+0x54>
 800ed18:	460d      	mov	r5, r1
 800ed1a:	4690      	mov	r8, r2
 800ed1c:	461f      	mov	r7, r3
 800ed1e:	f007 fcaf 	bl	8016680 <rcl_get_zero_initialized_timer>
 800ed22:	68ac      	ldr	r4, [r5, #8]
 800ed24:	f10d 0c0c 	add.w	ip, sp, #12
 800ed28:	6030      	str	r0, [r6, #0]
 800ed2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	462a      	mov	r2, r5
 800ed34:	f105 010c 	add.w	r1, r5, #12
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f8cc 3000 	str.w	r3, [ip]
 800ed3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed40:	e9cd 8700 	strd	r8, r7, [sp]
 800ed44:	9302      	str	r3, [sp, #8]
 800ed46:	f007 fca3 	bl	8016690 <rcl_timer_init>
 800ed4a:	b910      	cbnz	r0, 800ed52 <rclc_timer_init_default+0x46>
 800ed4c:	b00a      	add	sp, #40	@ 0x28
 800ed4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed52:	9009      	str	r0, [sp, #36]	@ 0x24
 800ed54:	f000 f870 	bl	800ee38 <rcutils_reset_error>
 800ed58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed5a:	b00a      	add	sp, #40	@ 0x28
 800ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed60:	200b      	movs	r0, #11
 800ed62:	b00a      	add	sp, #40	@ 0x28
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	200b      	movs	r0, #11
 800ed6a:	4770      	bx	lr

0800ed6c <__default_zero_allocate>:
 800ed6c:	f00c b9a2 	b.w	801b0b4 <calloc>

0800ed70 <__default_reallocate>:
 800ed70:	f00c bb40 	b.w	801b3f4 <realloc>

0800ed74 <__default_deallocate>:
 800ed74:	f00c ba1c 	b.w	801b1b0 <free>

0800ed78 <__default_allocate>:
 800ed78:	f00c ba12 	b.w	801b1a0 <malloc>

0800ed7c <rcutils_get_zero_initialized_allocator>:
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	4c05      	ldr	r4, [pc, #20]	@ (800ed94 <rcutils_get_zero_initialized_allocator+0x18>)
 800ed80:	4686      	mov	lr, r0
 800ed82:	4684      	mov	ip, r0
 800ed84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	4670      	mov	r0, lr
 800ed8e:	f8cc 3000 	str.w	r3, [ip]
 800ed92:	bd10      	pop	{r4, pc}
 800ed94:	0801cad8 	.word	0x0801cad8

0800ed98 <rcutils_set_default_allocator>:
 800ed98:	b1a8      	cbz	r0, 800edc6 <rcutils_set_default_allocator+0x2e>
 800ed9a:	6802      	ldr	r2, [r0, #0]
 800ed9c:	b1a2      	cbz	r2, 800edc8 <rcutils_set_default_allocator+0x30>
 800ed9e:	6841      	ldr	r1, [r0, #4]
 800eda0:	b1a1      	cbz	r1, 800edcc <rcutils_set_default_allocator+0x34>
 800eda2:	b410      	push	{r4}
 800eda4:	68c4      	ldr	r4, [r0, #12]
 800eda6:	b164      	cbz	r4, 800edc2 <rcutils_set_default_allocator+0x2a>
 800eda8:	6880      	ldr	r0, [r0, #8]
 800edaa:	b138      	cbz	r0, 800edbc <rcutils_set_default_allocator+0x24>
 800edac:	4b08      	ldr	r3, [pc, #32]	@ (800edd0 <rcutils_set_default_allocator+0x38>)
 800edae:	601a      	str	r2, [r3, #0]
 800edb0:	2200      	movs	r2, #0
 800edb2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800edb6:	2001      	movs	r0, #1
 800edb8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800edbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	4620      	mov	r0, r4
 800edc4:	e7fa      	b.n	800edbc <rcutils_set_default_allocator+0x24>
 800edc6:	4770      	bx	lr
 800edc8:	4610      	mov	r0, r2
 800edca:	4770      	bx	lr
 800edcc:	4608      	mov	r0, r1
 800edce:	4770      	bx	lr
 800edd0:	24000034 	.word	0x24000034

0800edd4 <rcutils_get_default_allocator>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	4c05      	ldr	r4, [pc, #20]	@ (800edec <rcutils_get_default_allocator+0x18>)
 800edd8:	4686      	mov	lr, r0
 800edda:	4684      	mov	ip, r0
 800eddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	4670      	mov	r0, lr
 800ede6:	f8cc 3000 	str.w	r3, [ip]
 800edea:	bd10      	pop	{r4, pc}
 800edec:	24000034 	.word	0x24000034

0800edf0 <rcutils_allocator_is_valid>:
 800edf0:	b158      	cbz	r0, 800ee0a <rcutils_allocator_is_valid+0x1a>
 800edf2:	6803      	ldr	r3, [r0, #0]
 800edf4:	b143      	cbz	r3, 800ee08 <rcutils_allocator_is_valid+0x18>
 800edf6:	6843      	ldr	r3, [r0, #4]
 800edf8:	b133      	cbz	r3, 800ee08 <rcutils_allocator_is_valid+0x18>
 800edfa:	68c3      	ldr	r3, [r0, #12]
 800edfc:	b123      	cbz	r3, 800ee08 <rcutils_allocator_is_valid+0x18>
 800edfe:	6880      	ldr	r0, [r0, #8]
 800ee00:	3800      	subs	r0, #0
 800ee02:	bf18      	it	ne
 800ee04:	2001      	movne	r0, #1
 800ee06:	4770      	bx	lr
 800ee08:	4618      	mov	r0, r3
 800ee0a:	4770      	bx	lr

0800ee0c <rcutils_get_error_string>:
 800ee0c:	4b06      	ldr	r3, [pc, #24]	@ (800ee28 <rcutils_get_error_string+0x1c>)
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	b13b      	cbz	r3, 800ee22 <rcutils_get_error_string+0x16>
 800ee12:	4b06      	ldr	r3, [pc, #24]	@ (800ee2c <rcutils_get_error_string+0x20>)
 800ee14:	781a      	ldrb	r2, [r3, #0]
 800ee16:	b90a      	cbnz	r2, 800ee1c <rcutils_get_error_string+0x10>
 800ee18:	2201      	movs	r2, #1
 800ee1a:	701a      	strb	r2, [r3, #0]
 800ee1c:	4b04      	ldr	r3, [pc, #16]	@ (800ee30 <rcutils_get_error_string+0x24>)
 800ee1e:	7818      	ldrb	r0, [r3, #0]
 800ee20:	4770      	bx	lr
 800ee22:	4b04      	ldr	r3, [pc, #16]	@ (800ee34 <rcutils_get_error_string+0x28>)
 800ee24:	7818      	ldrb	r0, [r3, #0]
 800ee26:	4770      	bx	lr
 800ee28:	2400e3d0 	.word	0x2400e3d0
 800ee2c:	2400e3e9 	.word	0x2400e3e9
 800ee30:	2400e3e8 	.word	0x2400e3e8
 800ee34:	0801caec 	.word	0x0801caec

0800ee38 <rcutils_reset_error>:
 800ee38:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ee58 <rcutils_reset_error+0x20>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	4a08      	ldr	r2, [pc, #32]	@ (800ee60 <rcutils_reset_error+0x28>)
 800ee40:	4808      	ldr	r0, [pc, #32]	@ (800ee64 <rcutils_reset_error+0x2c>)
 800ee42:	8013      	strh	r3, [r2, #0]
 800ee44:	4908      	ldr	r1, [pc, #32]	@ (800ee68 <rcutils_reset_error+0x30>)
 800ee46:	7003      	strb	r3, [r0, #0]
 800ee48:	700b      	strb	r3, [r1, #0]
 800ee4a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee4e:	4a07      	ldr	r2, [pc, #28]	@ (800ee6c <rcutils_reset_error+0x34>)
 800ee50:	7013      	strb	r3, [r2, #0]
 800ee52:	4770      	bx	lr
 800ee54:	f3af 8000 	nop.w
	...
 800ee60:	2400e3d8 	.word	0x2400e3d8
 800ee64:	2400e3e9 	.word	0x2400e3e9
 800ee68:	2400e3e8 	.word	0x2400e3e8
 800ee6c:	2400e3d0 	.word	0x2400e3d0

0800ee70 <rcutils_system_time_now>:
 800ee70:	b300      	cbz	r0, 800eeb4 <rcutils_system_time_now+0x44>
 800ee72:	b570      	push	{r4, r5, r6, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	4604      	mov	r4, r0
 800ee78:	2001      	movs	r0, #1
 800ee7a:	4669      	mov	r1, sp
 800ee7c:	f7f2 fe14 	bl	8001aa8 <clock_gettime>
 800ee80:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ee84:	2900      	cmp	r1, #0
 800ee86:	db12      	blt.n	800eeae <rcutils_system_time_now+0x3e>
 800ee88:	ea53 0201 	orrs.w	r2, r3, r1
 800ee8c:	9d02      	ldr	r5, [sp, #8]
 800ee8e:	d101      	bne.n	800ee94 <rcutils_system_time_now+0x24>
 800ee90:	2d00      	cmp	r5, #0
 800ee92:	db0c      	blt.n	800eeae <rcutils_system_time_now+0x3e>
 800ee94:	4e08      	ldr	r6, [pc, #32]	@ (800eeb8 <rcutils_system_time_now+0x48>)
 800ee96:	2000      	movs	r0, #0
 800ee98:	fba3 3206 	umull	r3, r2, r3, r6
 800ee9c:	195b      	adds	r3, r3, r5
 800ee9e:	fb06 2201 	mla	r2, r6, r1, r2
 800eea2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800eea6:	e9c4 3200 	strd	r3, r2, [r4]
 800eeaa:	b004      	add	sp, #16
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
 800eeae:	2002      	movs	r0, #2
 800eeb0:	b004      	add	sp, #16
 800eeb2:	bd70      	pop	{r4, r5, r6, pc}
 800eeb4:	200b      	movs	r0, #11
 800eeb6:	4770      	bx	lr
 800eeb8:	3b9aca00 	.word	0x3b9aca00

0800eebc <rcutils_steady_time_now>:
 800eebc:	b300      	cbz	r0, 800ef00 <rcutils_steady_time_now+0x44>
 800eebe:	b570      	push	{r4, r5, r6, lr}
 800eec0:	b084      	sub	sp, #16
 800eec2:	4604      	mov	r4, r0
 800eec4:	2000      	movs	r0, #0
 800eec6:	4669      	mov	r1, sp
 800eec8:	f7f2 fdee 	bl	8001aa8 <clock_gettime>
 800eecc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800eed0:	2900      	cmp	r1, #0
 800eed2:	db12      	blt.n	800eefa <rcutils_steady_time_now+0x3e>
 800eed4:	ea53 0201 	orrs.w	r2, r3, r1
 800eed8:	9d02      	ldr	r5, [sp, #8]
 800eeda:	d101      	bne.n	800eee0 <rcutils_steady_time_now+0x24>
 800eedc:	2d00      	cmp	r5, #0
 800eede:	db0c      	blt.n	800eefa <rcutils_steady_time_now+0x3e>
 800eee0:	4e08      	ldr	r6, [pc, #32]	@ (800ef04 <rcutils_steady_time_now+0x48>)
 800eee2:	2000      	movs	r0, #0
 800eee4:	fba3 3206 	umull	r3, r2, r3, r6
 800eee8:	195b      	adds	r3, r3, r5
 800eeea:	fb06 2201 	mla	r2, r6, r1, r2
 800eeee:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800eef2:	e9c4 3200 	strd	r3, r2, [r4]
 800eef6:	b004      	add	sp, #16
 800eef8:	bd70      	pop	{r4, r5, r6, pc}
 800eefa:	2002      	movs	r0, #2
 800eefc:	b004      	add	sp, #16
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	200b      	movs	r0, #11
 800ef02:	4770      	bx	lr
 800ef04:	3b9aca00 	.word	0x3b9aca00

0800ef08 <rmw_get_zero_initialized_init_options>:
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	2238      	movs	r2, #56	@ 0x38
 800ef0e:	2100      	movs	r1, #0
 800ef10:	f00c fdba 	bl	801ba88 <memset>
 800ef14:	f104 0010 	add.w	r0, r4, #16
 800ef18:	f000 f80a 	bl	800ef30 <rmw_get_default_security_options>
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef20:	4620      	mov	r0, r4
 800ef22:	60e3      	str	r3, [r4, #12]
 800ef24:	bd10      	pop	{r4, pc}
 800ef26:	bf00      	nop

0800ef28 <rmw_get_default_publisher_options>:
 800ef28:	2200      	movs	r2, #0
 800ef2a:	6002      	str	r2, [r0, #0]
 800ef2c:	7102      	strb	r2, [r0, #4]
 800ef2e:	4770      	bx	lr

0800ef30 <rmw_get_default_security_options>:
 800ef30:	2200      	movs	r2, #0
 800ef32:	7002      	strb	r2, [r0, #0]
 800ef34:	6042      	str	r2, [r0, #4]
 800ef36:	4770      	bx	lr

0800ef38 <rmw_uros_set_custom_transport>:
 800ef38:	b470      	push	{r4, r5, r6}
 800ef3a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ef3e:	b162      	cbz	r2, 800ef5a <rmw_uros_set_custom_transport+0x22>
 800ef40:	b15b      	cbz	r3, 800ef5a <rmw_uros_set_custom_transport+0x22>
 800ef42:	b155      	cbz	r5, 800ef5a <rmw_uros_set_custom_transport+0x22>
 800ef44:	b14e      	cbz	r6, 800ef5a <rmw_uros_set_custom_transport+0x22>
 800ef46:	4c06      	ldr	r4, [pc, #24]	@ (800ef60 <rmw_uros_set_custom_transport+0x28>)
 800ef48:	7020      	strb	r0, [r4, #0]
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	6166      	str	r6, [r4, #20]
 800ef4e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ef52:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ef56:	bc70      	pop	{r4, r5, r6}
 800ef58:	4770      	bx	lr
 800ef5a:	200b      	movs	r0, #11
 800ef5c:	bc70      	pop	{r4, r5, r6}
 800ef5e:	4770      	bx	lr
 800ef60:	2400e3ec 	.word	0x2400e3ec

0800ef64 <rmw_uros_ping_agent>:
 800ef64:	4b1f      	ldr	r3, [pc, #124]	@ (800efe4 <rmw_uros_ping_agent+0x80>)
 800ef66:	7b1a      	ldrb	r2, [r3, #12]
 800ef68:	b570      	push	{r4, r5, r6, lr}
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ef70:	460e      	mov	r6, r1
 800ef72:	b192      	cbz	r2, 800ef9a <rmw_uros_ping_agent+0x36>
 800ef74:	681c      	ldr	r4, [r3, #0]
 800ef76:	b184      	cbz	r4, 800ef9a <rmw_uros_ping_agent+0x36>
 800ef78:	68a0      	ldr	r0, [r4, #8]
 800ef7a:	4632      	mov	r2, r6
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef82:	f003 f855 	bl	8012030 <uxr_ping_agent_session>
 800ef86:	6864      	ldr	r4, [r4, #4]
 800ef88:	f080 0301 	eor.w	r3, r0, #1
 800ef8c:	b2d8      	uxtb	r0, r3
 800ef8e:	b10c      	cbz	r4, 800ef94 <rmw_uros_ping_agent+0x30>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d1f1      	bne.n	800ef78 <rmw_uros_ping_agent+0x14>
 800ef94:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ef98:	bd70      	pop	{r4, r5, r6, pc}
 800ef9a:	4b13      	ldr	r3, [pc, #76]	@ (800efe8 <rmw_uros_ping_agent+0x84>)
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	781a      	ldrb	r2, [r3, #0]
 800efa0:	6918      	ldr	r0, [r3, #16]
 800efa2:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	909c      	str	r0, [sp, #624]	@ 0x270
 800efaa:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800efac:	6958      	ldr	r0, [r3, #20]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	929b      	str	r2, [sp, #620]	@ 0x26c
 800efb4:	466a      	mov	r2, sp
 800efb6:	909d      	str	r0, [sp, #628]	@ 0x274
 800efb8:	4608      	mov	r0, r1
 800efba:	939a      	str	r3, [sp, #616]	@ 0x268
 800efbc:	f000 fde8 	bl	800fb90 <rmw_uxrce_transport_init>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d1e7      	bne.n	800ef94 <rmw_uros_ping_agent+0x30>
 800efc4:	4632      	mov	r2, r6
 800efc6:	4629      	mov	r1, r5
 800efc8:	a89e      	add	r0, sp, #632	@ 0x278
 800efca:	f003 f87d 	bl	80120c8 <uxr_ping_agent_attempts>
 800efce:	4604      	mov	r4, r0
 800efd0:	4668      	mov	r0, sp
 800efd2:	f002 fff9 	bl	8011fc8 <uxr_close_custom_transport>
 800efd6:	f084 0301 	eor.w	r3, r4, #1
 800efda:	b2d8      	uxtb	r0, r3
 800efdc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800efe0:	bd70      	pop	{r4, r5, r6, pc}
 800efe2:	bf00      	nop
 800efe4:	24012d44 	.word	0x24012d44
 800efe8:	2400e3ec 	.word	0x2400e3ec

0800efec <rmw_init_options_init>:
 800efec:	b084      	sub	sp, #16
 800efee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff0:	b083      	sub	sp, #12
 800eff2:	ad09      	add	r5, sp, #36	@ 0x24
 800eff4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800eff8:	b130      	cbz	r0, 800f008 <rmw_init_options_init+0x1c>
 800effa:	4604      	mov	r4, r0
 800effc:	4628      	mov	r0, r5
 800effe:	f7ff fef7 	bl	800edf0 <rcutils_allocator_is_valid>
 800f002:	b108      	cbz	r0, 800f008 <rmw_init_options_init+0x1c>
 800f004:	68a6      	ldr	r6, [r4, #8]
 800f006:	b12e      	cbz	r6, 800f014 <rmw_init_options_init+0x28>
 800f008:	200b      	movs	r0, #11
 800f00a:	b003      	add	sp, #12
 800f00c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f010:	b004      	add	sp, #16
 800f012:	4770      	bx	lr
 800f014:	2200      	movs	r2, #0
 800f016:	2300      	movs	r3, #0
 800f018:	f104 0c20 	add.w	ip, r4, #32
 800f01c:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f0b8 <rmw_init_options_init+0xcc>
 800f020:	466f      	mov	r7, sp
 800f022:	e9c4 2300 	strd	r2, r3, [r4]
 800f026:	4b20      	ldr	r3, [pc, #128]	@ (800f0a8 <rmw_init_options_init+0xbc>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60a3      	str	r3, [r4, #8]
 800f02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f02e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f032:	682b      	ldr	r3, [r5, #0]
 800f034:	4638      	mov	r0, r7
 800f036:	f8cc 3000 	str.w	r3, [ip]
 800f03a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800f03e:	60e6      	str	r6, [r4, #12]
 800f040:	f7ff ff76 	bl	800ef30 <rmw_get_default_security_options>
 800f044:	f104 0310 	add.w	r3, r4, #16
 800f048:	2203      	movs	r2, #3
 800f04a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f04e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f052:	4816      	ldr	r0, [pc, #88]	@ (800f0ac <rmw_init_options_init+0xc0>)
 800f054:	4916      	ldr	r1, [pc, #88]	@ (800f0b0 <rmw_init_options_init+0xc4>)
 800f056:	7626      	strb	r6, [r4, #24]
 800f058:	f000 fed2 	bl	800fe00 <rmw_uxrce_init_init_options_impl_memory>
 800f05c:	4813      	ldr	r0, [pc, #76]	@ (800f0ac <rmw_init_options_init+0xc0>)
 800f05e:	f009 fef5 	bl	8018e4c <get_memory>
 800f062:	b1f0      	cbz	r0, 800f0a2 <rmw_init_options_init+0xb6>
 800f064:	4a13      	ldr	r2, [pc, #76]	@ (800f0b4 <rmw_init_options_init+0xc8>)
 800f066:	6883      	ldr	r3, [r0, #8]
 800f068:	6851      	ldr	r1, [r2, #4]
 800f06a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f06c:	7810      	ldrb	r0, [r2, #0]
 800f06e:	6159      	str	r1, [r3, #20]
 800f070:	68d1      	ldr	r1, [r2, #12]
 800f072:	7418      	strb	r0, [r3, #16]
 800f074:	61d9      	str	r1, [r3, #28]
 800f076:	6911      	ldr	r1, [r2, #16]
 800f078:	6219      	str	r1, [r3, #32]
 800f07a:	6951      	ldr	r1, [r2, #20]
 800f07c:	6892      	ldr	r2, [r2, #8]
 800f07e:	6259      	str	r1, [r3, #36]	@ 0x24
 800f080:	619a      	str	r2, [r3, #24]
 800f082:	f005 f903 	bl	801428c <uxr_nanos>
 800f086:	f00c f949 	bl	801b31c <srand>
 800f08a:	f00c f975 	bl	801b378 <rand>
 800f08e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f090:	6298      	str	r0, [r3, #40]	@ 0x28
 800f092:	2800      	cmp	r0, #0
 800f094:	d0f9      	beq.n	800f08a <rmw_init_options_init+0x9e>
 800f096:	2000      	movs	r0, #0
 800f098:	b003      	add	sp, #12
 800f09a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f09e:	b004      	add	sp, #16
 800f0a0:	4770      	bx	lr
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	e7b1      	b.n	800f00a <rmw_init_options_init+0x1e>
 800f0a6:	bf00      	nop
 800f0a8:	0801d454 	.word	0x0801d454
 800f0ac:	24012d04 	.word	0x24012d04
 800f0b0:	2400e5a0 	.word	0x2400e5a0
 800f0b4:	2400e3ec 	.word	0x2400e3ec
 800f0b8:	0801caf0 	.word	0x0801caf0

0800f0bc <rmw_init_options_copy>:
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d047      	beq.n	800f150 <rmw_init_options_copy+0x94>
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	b149      	cbz	r1, 800f0da <rmw_init_options_copy+0x1e>
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	6880      	ldr	r0, [r0, #8]
 800f0ca:	b120      	cbz	r0, 800f0d6 <rmw_init_options_copy+0x1a>
 800f0cc:	4b22      	ldr	r3, [pc, #136]	@ (800f158 <rmw_init_options_copy+0x9c>)
 800f0ce:	6819      	ldr	r1, [r3, #0]
 800f0d0:	f7f1 f906 	bl	80002e0 <strcmp>
 800f0d4:	bba8      	cbnz	r0, 800f142 <rmw_init_options_copy+0x86>
 800f0d6:	68ab      	ldr	r3, [r5, #8]
 800f0d8:	b11b      	cbz	r3, 800f0e2 <rmw_init_options_copy+0x26>
 800f0da:	f04f 0c0b 	mov.w	ip, #11
 800f0de:	4660      	mov	r0, ip
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	4623      	mov	r3, r4
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f0ea:	f8d3 e000 	ldr.w	lr, [r3]
 800f0ee:	3310      	adds	r3, #16
 800f0f0:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800f0f4:	3210      	adds	r2, #16
 800f0f6:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800f0fa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f0fe:	42b3      	cmp	r3, r6
 800f100:	f842 ec10 	str.w	lr, [r2, #-16]
 800f104:	f842 cc0c 	str.w	ip, [r2, #-12]
 800f108:	f842 0c08 	str.w	r0, [r2, #-8]
 800f10c:	f842 1c04 	str.w	r1, [r2, #-4]
 800f110:	d1eb      	bne.n	800f0ea <rmw_init_options_copy+0x2e>
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	4811      	ldr	r0, [pc, #68]	@ (800f15c <rmw_init_options_copy+0xa0>)
 800f118:	6011      	str	r1, [r2, #0]
 800f11a:	6053      	str	r3, [r2, #4]
 800f11c:	f009 fe96 	bl	8018e4c <get_memory>
 800f120:	b198      	cbz	r0, 800f14a <rmw_init_options_copy+0x8e>
 800f122:	6883      	ldr	r3, [r0, #8]
 800f124:	f04f 0c00 	mov.w	ip, #0
 800f128:	636b      	str	r3, [r5, #52]	@ 0x34
 800f12a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800f12c:	f103 0410 	add.w	r4, r3, #16
 800f130:	3510      	adds	r5, #16
 800f132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f13e:	4660      	mov	r0, ip
 800f140:	bd70      	pop	{r4, r5, r6, pc}
 800f142:	f04f 0c0c 	mov.w	ip, #12
 800f146:	4660      	mov	r0, ip
 800f148:	bd70      	pop	{r4, r5, r6, pc}
 800f14a:	f04f 0c01 	mov.w	ip, #1
 800f14e:	e7c6      	b.n	800f0de <rmw_init_options_copy+0x22>
 800f150:	f04f 0c0b 	mov.w	ip, #11
 800f154:	4660      	mov	r0, ip
 800f156:	4770      	bx	lr
 800f158:	0801d454 	.word	0x0801d454
 800f15c:	24012d04 	.word	0x24012d04

0800f160 <rmw_init_options_fini>:
 800f160:	b510      	push	{r4, lr}
 800f162:	b08e      	sub	sp, #56	@ 0x38
 800f164:	b388      	cbz	r0, 800f1ca <rmw_init_options_fini+0x6a>
 800f166:	4604      	mov	r4, r0
 800f168:	3020      	adds	r0, #32
 800f16a:	f7ff fe41 	bl	800edf0 <rcutils_allocator_is_valid>
 800f16e:	b360      	cbz	r0, 800f1ca <rmw_init_options_fini+0x6a>
 800f170:	68a0      	ldr	r0, [r4, #8]
 800f172:	b120      	cbz	r0, 800f17e <rmw_init_options_fini+0x1e>
 800f174:	4b1a      	ldr	r3, [pc, #104]	@ (800f1e0 <rmw_init_options_fini+0x80>)
 800f176:	6819      	ldr	r1, [r3, #0]
 800f178:	f7f1 f8b2 	bl	80002e0 <strcmp>
 800f17c:	bb68      	cbnz	r0, 800f1da <rmw_init_options_fini+0x7a>
 800f17e:	4b19      	ldr	r3, [pc, #100]	@ (800f1e4 <rmw_init_options_fini+0x84>)
 800f180:	6819      	ldr	r1, [r3, #0]
 800f182:	b331      	cbz	r1, 800f1d2 <rmw_init_options_fini+0x72>
 800f184:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f186:	e001      	b.n	800f18c <rmw_init_options_fini+0x2c>
 800f188:	6849      	ldr	r1, [r1, #4]
 800f18a:	b311      	cbz	r1, 800f1d2 <rmw_init_options_fini+0x72>
 800f18c:	688b      	ldr	r3, [r1, #8]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d1fa      	bne.n	800f188 <rmw_init_options_fini+0x28>
 800f192:	4814      	ldr	r0, [pc, #80]	@ (800f1e4 <rmw_init_options_fini+0x84>)
 800f194:	f009 fe6a 	bl	8018e6c <put_memory>
 800f198:	4668      	mov	r0, sp
 800f19a:	f7ff feb5 	bl	800ef08 <rmw_get_zero_initialized_init_options>
 800f19e:	46ee      	mov	lr, sp
 800f1a0:	46a4      	mov	ip, r4
 800f1a2:	2400      	movs	r4, #0
 800f1a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f1a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f1b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f1b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f1bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f1c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	b00e      	add	sp, #56	@ 0x38
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	240b      	movs	r4, #11
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	b00e      	add	sp, #56	@ 0x38
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	2401      	movs	r4, #1
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	b00e      	add	sp, #56	@ 0x38
 800f1d8:	bd10      	pop	{r4, pc}
 800f1da:	240c      	movs	r4, #12
 800f1dc:	e7f2      	b.n	800f1c4 <rmw_init_options_fini+0x64>
 800f1de:	bf00      	nop
 800f1e0:	0801d454 	.word	0x0801d454
 800f1e4:	24012d04 	.word	0x24012d04

0800f1e8 <rmw_init>:
 800f1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	f000 80d3 	beq.w	800f39a <rmw_init+0x1b2>
 800f1f4:	460e      	mov	r6, r1
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	f000 80cf 	beq.w	800f39a <rmw_init+0x1b2>
 800f1fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f1fe:	4605      	mov	r5, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 80ca 	beq.w	800f39a <rmw_init+0x1b2>
 800f206:	4b78      	ldr	r3, [pc, #480]	@ (800f3e8 <rmw_init+0x200>)
 800f208:	6880      	ldr	r0, [r0, #8]
 800f20a:	681f      	ldr	r7, [r3, #0]
 800f20c:	b128      	cbz	r0, 800f21a <rmw_init+0x32>
 800f20e:	4639      	mov	r1, r7
 800f210:	f7f1 f866 	bl	80002e0 <strcmp>
 800f214:	2800      	cmp	r0, #0
 800f216:	f040 80ca 	bne.w	800f3ae <rmw_init+0x1c6>
 800f21a:	4c74      	ldr	r4, [pc, #464]	@ (800f3ec <rmw_init+0x204>)
 800f21c:	f04f 0800 	mov.w	r8, #0
 800f220:	4973      	ldr	r1, [pc, #460]	@ (800f3f0 <rmw_init+0x208>)
 800f222:	4874      	ldr	r0, [pc, #464]	@ (800f3f4 <rmw_init+0x20c>)
 800f224:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f228:	60b7      	str	r7, [r6, #8]
 800f22a:	e9c6 2300 	strd	r2, r3, [r6]
 800f22e:	68eb      	ldr	r3, [r5, #12]
 800f230:	2201      	movs	r2, #1
 800f232:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f234:	f000 fd84 	bl	800fd40 <rmw_uxrce_init_session_memory>
 800f238:	4620      	mov	r0, r4
 800f23a:	2204      	movs	r2, #4
 800f23c:	496e      	ldr	r1, [pc, #440]	@ (800f3f8 <rmw_init+0x210>)
 800f23e:	f000 fdbf 	bl	800fdc0 <rmw_uxrce_init_static_input_buffer_memory>
 800f242:	486c      	ldr	r0, [pc, #432]	@ (800f3f4 <rmw_init+0x20c>)
 800f244:	f884 800d 	strb.w	r8, [r4, #13]
 800f248:	f009 fe00 	bl	8018e4c <get_memory>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	f000 80a9 	beq.w	800f3a4 <rmw_init+0x1bc>
 800f252:	6884      	ldr	r4, [r0, #8]
 800f254:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f256:	f104 0910 	add.w	r9, r4, #16
 800f25a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f25c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f260:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f264:	9101      	str	r1, [sp, #4]
 800f266:	4661      	mov	r1, ip
 800f268:	6a00      	ldr	r0, [r0, #32]
 800f26a:	9000      	str	r0, [sp, #0]
 800f26c:	4648      	mov	r0, r9
 800f26e:	f002 fe6d 	bl	8011f4c <uxr_set_custom_transport_callbacks>
 800f272:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f276:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f27a:	4960      	ldr	r1, [pc, #384]	@ (800f3fc <rmw_init+0x214>)
 800f27c:	4860      	ldr	r0, [pc, #384]	@ (800f400 <rmw_init+0x218>)
 800f27e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f282:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f286:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f28a:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f28e:	2201      	movs	r2, #1
 800f290:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f294:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f298:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f29c:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f2a0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f2a2:	f000 fd2d 	bl	800fd00 <rmw_uxrce_init_node_memory>
 800f2a6:	2205      	movs	r2, #5
 800f2a8:	4956      	ldr	r1, [pc, #344]	@ (800f404 <rmw_init+0x21c>)
 800f2aa:	4857      	ldr	r0, [pc, #348]	@ (800f408 <rmw_init+0x220>)
 800f2ac:	f000 fd08 	bl	800fcc0 <rmw_uxrce_init_subscription_memory>
 800f2b0:	220a      	movs	r2, #10
 800f2b2:	4956      	ldr	r1, [pc, #344]	@ (800f40c <rmw_init+0x224>)
 800f2b4:	4856      	ldr	r0, [pc, #344]	@ (800f410 <rmw_init+0x228>)
 800f2b6:	f000 fce3 	bl	800fc80 <rmw_uxrce_init_publisher_memory>
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	4955      	ldr	r1, [pc, #340]	@ (800f414 <rmw_init+0x22c>)
 800f2be:	4856      	ldr	r0, [pc, #344]	@ (800f418 <rmw_init+0x230>)
 800f2c0:	f000 fc9e 	bl	800fc00 <rmw_uxrce_init_service_memory>
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	4955      	ldr	r1, [pc, #340]	@ (800f41c <rmw_init+0x234>)
 800f2c8:	4855      	ldr	r0, [pc, #340]	@ (800f420 <rmw_init+0x238>)
 800f2ca:	f000 fcb9 	bl	800fc40 <rmw_uxrce_init_client_memory>
 800f2ce:	220f      	movs	r2, #15
 800f2d0:	4954      	ldr	r1, [pc, #336]	@ (800f424 <rmw_init+0x23c>)
 800f2d2:	4855      	ldr	r0, [pc, #340]	@ (800f428 <rmw_init+0x240>)
 800f2d4:	f000 fd54 	bl	800fd80 <rmw_uxrce_init_topic_memory>
 800f2d8:	2203      	movs	r2, #3
 800f2da:	4954      	ldr	r1, [pc, #336]	@ (800f42c <rmw_init+0x244>)
 800f2dc:	4854      	ldr	r0, [pc, #336]	@ (800f430 <rmw_init+0x248>)
 800f2de:	f000 fd8f 	bl	800fe00 <rmw_uxrce_init_init_options_impl_memory>
 800f2e2:	2204      	movs	r2, #4
 800f2e4:	4953      	ldr	r1, [pc, #332]	@ (800f434 <rmw_init+0x24c>)
 800f2e6:	4854      	ldr	r0, [pc, #336]	@ (800f438 <rmw_init+0x250>)
 800f2e8:	f000 fdaa 	bl	800fe40 <rmw_uxrce_init_wait_set_memory>
 800f2ec:	4953      	ldr	r1, [pc, #332]	@ (800f43c <rmw_init+0x254>)
 800f2ee:	4854      	ldr	r0, [pc, #336]	@ (800f440 <rmw_init+0x258>)
 800f2f0:	2204      	movs	r2, #4
 800f2f2:	f000 fdc5 	bl	800fe80 <rmw_uxrce_init_guard_condition_memory>
 800f2f6:	4642      	mov	r2, r8
 800f2f8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f2fa:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f2fc:	f000 fc48 	bl	800fb90 <rmw_uxrce_transport_init>
 800f300:	4607      	mov	r7, r0
 800f302:	2800      	cmp	r0, #0
 800f304:	d158      	bne.n	800f3b8 <rmw_init+0x1d0>
 800f306:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f308:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f30c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f312:	4628      	mov	r0, r5
 800f314:	f003 f914 	bl	8012540 <uxr_init_session>
 800f318:	4622      	mov	r2, r4
 800f31a:	494a      	ldr	r1, [pc, #296]	@ (800f444 <rmw_init+0x25c>)
 800f31c:	4628      	mov	r0, r5
 800f31e:	f003 f933 	bl	8012588 <uxr_set_topic_callback>
 800f322:	463a      	mov	r2, r7
 800f324:	4948      	ldr	r1, [pc, #288]	@ (800f448 <rmw_init+0x260>)
 800f326:	4628      	mov	r0, r5
 800f328:	f003 f92a 	bl	8012580 <uxr_set_status_callback>
 800f32c:	463a      	mov	r2, r7
 800f32e:	4947      	ldr	r1, [pc, #284]	@ (800f44c <rmw_init+0x264>)
 800f330:	4628      	mov	r0, r5
 800f332:	f003 f92d 	bl	8012590 <uxr_set_request_callback>
 800f336:	463a      	mov	r2, r7
 800f338:	4945      	ldr	r1, [pc, #276]	@ (800f450 <rmw_init+0x268>)
 800f33a:	4628      	mov	r0, r5
 800f33c:	f003 f92c 	bl	8012598 <uxr_set_reply_callback>
 800f340:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f344:	2304      	movs	r3, #4
 800f346:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f34a:	0092      	lsls	r2, r2, #2
 800f34c:	4628      	mov	r0, r5
 800f34e:	f003 f963 	bl	8012618 <uxr_create_input_reliable_stream>
 800f352:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f356:	2304      	movs	r3, #4
 800f358:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f35c:	0092      	lsls	r2, r2, #2
 800f35e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f362:	4628      	mov	r0, r5
 800f364:	f003 f92e 	bl	80125c4 <uxr_create_output_reliable_stream>
 800f368:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f36c:	4628      	mov	r0, r5
 800f36e:	f003 f94d 	bl	801260c <uxr_create_input_best_effort_stream>
 800f372:	f241 3194 	movw	r1, #5012	@ 0x1394
 800f376:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f37a:	4628      	mov	r0, r5
 800f37c:	4421      	add	r1, r4
 800f37e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f382:	f003 f90d 	bl	80125a0 <uxr_create_output_best_effort_stream>
 800f386:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f38a:	4628      	mov	r0, r5
 800f38c:	f003 ff16 	bl	80131bc <uxr_create_session>
 800f390:	b1f8      	cbz	r0, 800f3d2 <rmw_init+0x1ea>
 800f392:	4638      	mov	r0, r7
 800f394:	b003      	add	sp, #12
 800f396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f39a:	270b      	movs	r7, #11
 800f39c:	4638      	mov	r0, r7
 800f39e:	b003      	add	sp, #12
 800f3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3a4:	2701      	movs	r7, #1
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	b003      	add	sp, #12
 800f3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ae:	270c      	movs	r7, #12
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	b003      	add	sp, #12
 800f3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3b8:	4648      	mov	r0, r9
 800f3ba:	f002 fe05 	bl	8011fc8 <uxr_close_custom_transport>
 800f3be:	4621      	mov	r1, r4
 800f3c0:	480c      	ldr	r0, [pc, #48]	@ (800f3f4 <rmw_init+0x20c>)
 800f3c2:	f009 fd53 	bl	8018e6c <put_memory>
 800f3c6:	4638      	mov	r0, r7
 800f3c8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f3cc:	b003      	add	sp, #12
 800f3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	f002 fdf8 	bl	8011fc8 <uxr_close_custom_transport>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4806      	ldr	r0, [pc, #24]	@ (800f3f4 <rmw_init+0x20c>)
 800f3dc:	f009 fd46 	bl	8018e6c <put_memory>
 800f3e0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f3e2:	2701      	movs	r7, #1
 800f3e4:	e7d5      	b.n	800f392 <rmw_init+0x1aa>
 800f3e6:	bf00      	nop
 800f3e8:	0801d454 	.word	0x0801d454
 800f3ec:	24012d54 	.word	0x24012d54
 800f3f0:	2400f000 	.word	0x2400f000
 800f3f4:	24012d44 	.word	0x24012d44
 800f3f8:	240105a8 	.word	0x240105a8
 800f3fc:	2400e624 	.word	0x2400e624
 800f400:	24012d14 	.word	0x24012d14
 800f404:	240126a8 	.word	0x240126a8
 800f408:	24012d64 	.word	0x24012d64
 800f40c:	2400e6c8 	.word	0x2400e6c8
 800f410:	24012d24 	.word	0x24012d24
 800f414:	2400ef38 	.word	0x2400ef38
 800f418:	24012d34 	.word	0x24012d34
 800f41c:	2400e458 	.word	0x2400e458
 800f420:	2400e444 	.word	0x2400e444
 800f424:	24012ae0 	.word	0x24012ae0
 800f428:	24012d74 	.word	0x24012d74
 800f42c:	2400e5a0 	.word	0x2400e5a0
 800f430:	24012d04 	.word	0x24012d04
 800f434:	24012c84 	.word	0x24012c84
 800f438:	24012d84 	.word	0x24012d84
 800f43c:	2400e520 	.word	0x2400e520
 800f440:	24012cf4 	.word	0x24012cf4
 800f444:	08018c85 	.word	0x08018c85
 800f448:	08018c7d 	.word	0x08018c7d
 800f44c:	08018d1d 	.word	0x08018d1d
 800f450:	08018db9 	.word	0x08018db9

0800f454 <rmw_context_fini>:
 800f454:	4b17      	ldr	r3, [pc, #92]	@ (800f4b4 <rmw_context_fini+0x60>)
 800f456:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	681c      	ldr	r4, [r3, #0]
 800f45c:	4605      	mov	r5, r0
 800f45e:	b334      	cbz	r4, 800f4ae <rmw_context_fini+0x5a>
 800f460:	2600      	movs	r6, #0
 800f462:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f466:	6902      	ldr	r2, [r0, #16]
 800f468:	428a      	cmp	r2, r1
 800f46a:	d018      	beq.n	800f49e <rmw_context_fini+0x4a>
 800f46c:	2c00      	cmp	r4, #0
 800f46e:	d1f8      	bne.n	800f462 <rmw_context_fini+0xe>
 800f470:	b189      	cbz	r1, 800f496 <rmw_context_fini+0x42>
 800f472:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f476:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f47a:	789b      	ldrb	r3, [r3, #2]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	bf14      	ite	ne
 800f480:	210a      	movne	r1, #10
 800f482:	2100      	moveq	r1, #0
 800f484:	f003 fe72 	bl	801316c <uxr_delete_session_retries>
 800f488:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f48a:	f000 fd19 	bl	800fec0 <rmw_uxrce_fini_session_memory>
 800f48e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f490:	3010      	adds	r0, #16
 800f492:	f002 fd99 	bl	8011fc8 <uxr_close_custom_transport>
 800f496:	2300      	movs	r3, #0
 800f498:	4630      	mov	r0, r6
 800f49a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f49c:	bd70      	pop	{r4, r5, r6, pc}
 800f49e:	3018      	adds	r0, #24
 800f4a0:	f000 f89c 	bl	800f5dc <rmw_destroy_node>
 800f4a4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	2c00      	cmp	r4, #0
 800f4aa:	d1da      	bne.n	800f462 <rmw_context_fini+0xe>
 800f4ac:	e7e0      	b.n	800f470 <rmw_context_fini+0x1c>
 800f4ae:	4626      	mov	r6, r4
 800f4b0:	e7de      	b.n	800f470 <rmw_context_fini+0x1c>
 800f4b2:	bf00      	nop
 800f4b4:	24012d14 	.word	0x24012d14

0800f4b8 <create_node>:
 800f4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4bc:	b083      	sub	sp, #12
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d064      	beq.n	800f58c <create_node+0xd4>
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	4838      	ldr	r0, [pc, #224]	@ (800f5a8 <create_node+0xf0>)
 800f4c6:	460f      	mov	r7, r1
 800f4c8:	4690      	mov	r8, r2
 800f4ca:	461d      	mov	r5, r3
 800f4cc:	f009 fcbe 	bl	8018e4c <get_memory>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d05b      	beq.n	800f58c <create_node+0xd4>
 800f4d4:	6884      	ldr	r4, [r0, #8]
 800f4d6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f4d8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f4dc:	f104 0518 	add.w	r5, r4, #24
 800f4e0:	6123      	str	r3, [r4, #16]
 800f4e2:	f009 fd1b 	bl	8018f1c <rmw_get_implementation_identifier>
 800f4e6:	f8c4 9020 	str.w	r9, [r4, #32]
 800f4ea:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f7f0 ff00 	bl	80002f4 <strlen>
 800f4f4:	1c42      	adds	r2, r0, #1
 800f4f6:	2a3c      	cmp	r2, #60	@ 0x3c
 800f4f8:	d840      	bhi.n	800f57c <create_node+0xc4>
 800f4fa:	4648      	mov	r0, r9
 800f4fc:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f500:	4631      	mov	r1, r6
 800f502:	f00c fb8a 	bl	801bc1a <memcpy>
 800f506:	4638      	mov	r0, r7
 800f508:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f50c:	f7f0 fef2 	bl	80002f4 <strlen>
 800f510:	1c42      	adds	r2, r0, #1
 800f512:	2a3c      	cmp	r2, #60	@ 0x3c
 800f514:	d832      	bhi.n	800f57c <create_node+0xc4>
 800f516:	4639      	mov	r1, r7
 800f518:	4648      	mov	r0, r9
 800f51a:	f00c fb7e 	bl	801bc1a <memcpy>
 800f51e:	6923      	ldr	r3, [r4, #16]
 800f520:	2101      	movs	r1, #1
 800f522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f526:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f52a:	1842      	adds	r2, r0, r1
 800f52c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f530:	f002 fd4e 	bl	8011fd0 <uxr_object_id>
 800f534:	6160      	str	r0, [r4, #20]
 800f536:	783b      	ldrb	r3, [r7, #0]
 800f538:	2b2f      	cmp	r3, #47	@ 0x2f
 800f53a:	d12c      	bne.n	800f596 <create_node+0xde>
 800f53c:	787b      	ldrb	r3, [r7, #1]
 800f53e:	bb53      	cbnz	r3, 800f596 <create_node+0xde>
 800f540:	4633      	mov	r3, r6
 800f542:	4a1a      	ldr	r2, [pc, #104]	@ (800f5ac <create_node+0xf4>)
 800f544:	213c      	movs	r1, #60	@ 0x3c
 800f546:	481a      	ldr	r0, [pc, #104]	@ (800f5b0 <create_node+0xf8>)
 800f548:	f00c f930 	bl	801b7ac <sniprintf>
 800f54c:	6920      	ldr	r0, [r4, #16]
 800f54e:	2106      	movs	r1, #6
 800f550:	fa1f f388 	uxth.w	r3, r8
 800f554:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f558:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f55c:	9101      	str	r1, [sp, #4]
 800f55e:	4914      	ldr	r1, [pc, #80]	@ (800f5b0 <create_node+0xf8>)
 800f560:	9100      	str	r1, [sp, #0]
 800f562:	6811      	ldr	r1, [r2, #0]
 800f564:	6962      	ldr	r2, [r4, #20]
 800f566:	f002 fb67 	bl	8011c38 <uxr_buffer_create_participant_bin>
 800f56a:	4602      	mov	r2, r0
 800f56c:	6920      	ldr	r0, [r4, #16]
 800f56e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f572:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f576:	f000 fe25 	bl	80101c4 <run_xrce_session>
 800f57a:	b918      	cbnz	r0, 800f584 <create_node+0xcc>
 800f57c:	4628      	mov	r0, r5
 800f57e:	2500      	movs	r5, #0
 800f580:	f000 fca4 	bl	800fecc <rmw_uxrce_fini_node_memory>
 800f584:	4628      	mov	r0, r5
 800f586:	b003      	add	sp, #12
 800f588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f58c:	2500      	movs	r5, #0
 800f58e:	4628      	mov	r0, r5
 800f590:	b003      	add	sp, #12
 800f592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f596:	463b      	mov	r3, r7
 800f598:	4a06      	ldr	r2, [pc, #24]	@ (800f5b4 <create_node+0xfc>)
 800f59a:	213c      	movs	r1, #60	@ 0x3c
 800f59c:	9600      	str	r6, [sp, #0]
 800f59e:	4804      	ldr	r0, [pc, #16]	@ (800f5b0 <create_node+0xf8>)
 800f5a0:	f00c f904 	bl	801b7ac <sniprintf>
 800f5a4:	e7d2      	b.n	800f54c <create_node+0x94>
 800f5a6:	bf00      	nop
 800f5a8:	24012d14 	.word	0x24012d14
 800f5ac:	0801cb30 	.word	0x0801cb30
 800f5b0:	2400e408 	.word	0x2400e408
 800f5b4:	0801caf4 	.word	0x0801caf4

0800f5b8 <rmw_create_node>:
 800f5b8:	468c      	mov	ip, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	f1bc 0f00 	cmp.w	ip, #0
 800f5c0:	d00a      	beq.n	800f5d8 <rmw_create_node+0x20>
 800f5c2:	f89c 3000 	ldrb.w	r3, [ip]
 800f5c6:	b13b      	cbz	r3, 800f5d8 <rmw_create_node+0x20>
 800f5c8:	b132      	cbz	r2, 800f5d8 <rmw_create_node+0x20>
 800f5ca:	7813      	ldrb	r3, [r2, #0]
 800f5cc:	b123      	cbz	r3, 800f5d8 <rmw_create_node+0x20>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f5d2:	4660      	mov	r0, ip
 800f5d4:	f7ff bf70 	b.w	800f4b8 <create_node>
 800f5d8:	2000      	movs	r0, #0
 800f5da:	4770      	bx	lr

0800f5dc <rmw_destroy_node>:
 800f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5de:	b328      	cbz	r0, 800f62c <rmw_destroy_node+0x50>
 800f5e0:	4607      	mov	r7, r0
 800f5e2:	6800      	ldr	r0, [r0, #0]
 800f5e4:	b120      	cbz	r0, 800f5f0 <rmw_destroy_node+0x14>
 800f5e6:	4b37      	ldr	r3, [pc, #220]	@ (800f6c4 <rmw_destroy_node+0xe8>)
 800f5e8:	6819      	ldr	r1, [r3, #0]
 800f5ea:	f7f0 fe79 	bl	80002e0 <strcmp>
 800f5ee:	b9e8      	cbnz	r0, 800f62c <rmw_destroy_node+0x50>
 800f5f0:	687d      	ldr	r5, [r7, #4]
 800f5f2:	b1dd      	cbz	r5, 800f62c <rmw_destroy_node+0x50>
 800f5f4:	4b34      	ldr	r3, [pc, #208]	@ (800f6c8 <rmw_destroy_node+0xec>)
 800f5f6:	681c      	ldr	r4, [r3, #0]
 800f5f8:	2c00      	cmp	r4, #0
 800f5fa:	d060      	beq.n	800f6be <rmw_destroy_node+0xe2>
 800f5fc:	2600      	movs	r6, #0
 800f5fe:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f602:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f606:	429d      	cmp	r5, r3
 800f608:	d013      	beq.n	800f632 <rmw_destroy_node+0x56>
 800f60a:	2c00      	cmp	r4, #0
 800f60c:	d1f7      	bne.n	800f5fe <rmw_destroy_node+0x22>
 800f60e:	4b2f      	ldr	r3, [pc, #188]	@ (800f6cc <rmw_destroy_node+0xf0>)
 800f610:	681c      	ldr	r4, [r3, #0]
 800f612:	b1c4      	cbz	r4, 800f646 <rmw_destroy_node+0x6a>
 800f614:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f618:	6a0b      	ldr	r3, [r1, #32]
 800f61a:	429d      	cmp	r5, r3
 800f61c:	d1f9      	bne.n	800f612 <rmw_destroy_node+0x36>
 800f61e:	317c      	adds	r1, #124	@ 0x7c
 800f620:	4638      	mov	r0, r7
 800f622:	f000 fa53 	bl	800facc <rmw_destroy_subscription>
 800f626:	2801      	cmp	r0, #1
 800f628:	4606      	mov	r6, r0
 800f62a:	d1f2      	bne.n	800f612 <rmw_destroy_node+0x36>
 800f62c:	2601      	movs	r6, #1
 800f62e:	4630      	mov	r0, r6
 800f630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f632:	3184      	adds	r1, #132	@ 0x84
 800f634:	4638      	mov	r0, r7
 800f636:	f000 f9b1 	bl	800f99c <rmw_destroy_publisher>
 800f63a:	2801      	cmp	r0, #1
 800f63c:	4606      	mov	r6, r0
 800f63e:	d0f5      	beq.n	800f62c <rmw_destroy_node+0x50>
 800f640:	2c00      	cmp	r4, #0
 800f642:	d1dc      	bne.n	800f5fe <rmw_destroy_node+0x22>
 800f644:	e7e3      	b.n	800f60e <rmw_destroy_node+0x32>
 800f646:	4b22      	ldr	r3, [pc, #136]	@ (800f6d0 <rmw_destroy_node+0xf4>)
 800f648:	681c      	ldr	r4, [r3, #0]
 800f64a:	b16c      	cbz	r4, 800f668 <rmw_destroy_node+0x8c>
 800f64c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f650:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f652:	429d      	cmp	r5, r3
 800f654:	d1f9      	bne.n	800f64a <rmw_destroy_node+0x6e>
 800f656:	317c      	adds	r1, #124	@ 0x7c
 800f658:	4638      	mov	r0, r7
 800f65a:	f000 f9f3 	bl	800fa44 <rmw_destroy_service>
 800f65e:	2801      	cmp	r0, #1
 800f660:	4606      	mov	r6, r0
 800f662:	d0e3      	beq.n	800f62c <rmw_destroy_node+0x50>
 800f664:	2c00      	cmp	r4, #0
 800f666:	d1f1      	bne.n	800f64c <rmw_destroy_node+0x70>
 800f668:	4b1a      	ldr	r3, [pc, #104]	@ (800f6d4 <rmw_destroy_node+0xf8>)
 800f66a:	681c      	ldr	r4, [r3, #0]
 800f66c:	b16c      	cbz	r4, 800f68a <rmw_destroy_node+0xae>
 800f66e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f672:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f674:	429d      	cmp	r5, r3
 800f676:	d1f9      	bne.n	800f66c <rmw_destroy_node+0x90>
 800f678:	317c      	adds	r1, #124	@ 0x7c
 800f67a:	4638      	mov	r0, r7
 800f67c:	f009 fc0a 	bl	8018e94 <rmw_destroy_client>
 800f680:	2801      	cmp	r0, #1
 800f682:	4606      	mov	r6, r0
 800f684:	d0d2      	beq.n	800f62c <rmw_destroy_node+0x50>
 800f686:	2c00      	cmp	r4, #0
 800f688:	d1f1      	bne.n	800f66e <rmw_destroy_node+0x92>
 800f68a:	6928      	ldr	r0, [r5, #16]
 800f68c:	696a      	ldr	r2, [r5, #20]
 800f68e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f692:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f696:	6819      	ldr	r1, [r3, #0]
 800f698:	f002 fa82 	bl	8011ba0 <uxr_buffer_delete_entity>
 800f69c:	4602      	mov	r2, r0
 800f69e:	6928      	ldr	r0, [r5, #16]
 800f6a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f6a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f6a8:	f000 fd8c 	bl	80101c4 <run_xrce_session>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	bf08      	it	eq
 800f6b4:	2602      	moveq	r6, #2
 800f6b6:	f000 fc09 	bl	800fecc <rmw_uxrce_fini_node_memory>
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6be:	4626      	mov	r6, r4
 800f6c0:	e7a5      	b.n	800f60e <rmw_destroy_node+0x32>
 800f6c2:	bf00      	nop
 800f6c4:	0801d454 	.word	0x0801d454
 800f6c8:	24012d24 	.word	0x24012d24
 800f6cc:	24012d64 	.word	0x24012d64
 800f6d0:	24012d34 	.word	0x24012d34
 800f6d4:	2400e444 	.word	0x2400e444

0800f6d8 <rmw_node_get_graph_guard_condition>:
 800f6d8:	6843      	ldr	r3, [r0, #4]
 800f6da:	6918      	ldr	r0, [r3, #16]
 800f6dc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop

0800f6e4 <flush_session>:
 800f6e4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f6e6:	f003 bb77 	b.w	8012dd8 <uxr_run_session_until_confirm_delivery>
 800f6ea:	bf00      	nop

0800f6ec <rmw_publish>:
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d053      	beq.n	800f798 <rmw_publish+0xac>
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	460d      	mov	r5, r1
 800f6f4:	b08e      	sub	sp, #56	@ 0x38
 800f6f6:	2900      	cmp	r1, #0
 800f6f8:	d04b      	beq.n	800f792 <rmw_publish+0xa6>
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	6800      	ldr	r0, [r0, #0]
 800f6fe:	f000 fddb 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800f702:	2800      	cmp	r0, #0
 800f704:	d045      	beq.n	800f792 <rmw_publish+0xa6>
 800f706:	6866      	ldr	r6, [r4, #4]
 800f708:	2e00      	cmp	r6, #0
 800f70a:	d042      	beq.n	800f792 <rmw_publish+0xa6>
 800f70c:	69b4      	ldr	r4, [r6, #24]
 800f70e:	4628      	mov	r0, r5
 800f710:	6923      	ldr	r3, [r4, #16]
 800f712:	4798      	blx	r3
 800f714:	69f3      	ldr	r3, [r6, #28]
 800f716:	9005      	str	r0, [sp, #20]
 800f718:	b113      	cbz	r3, 800f720 <rmw_publish+0x34>
 800f71a:	a805      	add	r0, sp, #20
 800f71c:	4798      	blx	r3
 800f71e:	9805      	ldr	r0, [sp, #20]
 800f720:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f724:	691b      	ldr	r3, [r3, #16]
 800f726:	9000      	str	r0, [sp, #0]
 800f728:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f72c:	6972      	ldr	r2, [r6, #20]
 800f72e:	ab06      	add	r3, sp, #24
 800f730:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f732:	f004 fe4b 	bl	80143cc <uxr_prepare_output_stream>
 800f736:	b1d8      	cbz	r0, 800f770 <rmw_publish+0x84>
 800f738:	68a3      	ldr	r3, [r4, #8]
 800f73a:	a906      	add	r1, sp, #24
 800f73c:	4628      	mov	r0, r5
 800f73e:	4798      	blx	r3
 800f740:	6a33      	ldr	r3, [r6, #32]
 800f742:	4604      	mov	r4, r0
 800f744:	b10b      	cbz	r3, 800f74a <rmw_publish+0x5e>
 800f746:	a806      	add	r0, sp, #24
 800f748:	4798      	blx	r3
 800f74a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f74e:	2b01      	cmp	r3, #1
 800f750:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f754:	d022      	beq.n	800f79c <rmw_publish+0xb0>
 800f756:	6918      	ldr	r0, [r3, #16]
 800f758:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f75a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f75e:	f003 fb3b 	bl	8012dd8 <uxr_run_session_until_confirm_delivery>
 800f762:	4020      	ands	r0, r4
 800f764:	b2c4      	uxtb	r4, r0
 800f766:	f084 0001 	eor.w	r0, r4, #1
 800f76a:	b2c0      	uxtb	r0, r0
 800f76c:	b00e      	add	sp, #56	@ 0x38
 800f76e:	bd70      	pop	{r4, r5, r6, pc}
 800f770:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f774:	6918      	ldr	r0, [r3, #16]
 800f776:	9b05      	ldr	r3, [sp, #20]
 800f778:	9602      	str	r6, [sp, #8]
 800f77a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	4b09      	ldr	r3, [pc, #36]	@ (800f7a8 <rmw_publish+0xbc>)
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	ab06      	add	r3, sp, #24
 800f786:	6972      	ldr	r2, [r6, #20]
 800f788:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f78a:	f004 fe4f 	bl	801442c <uxr_prepare_output_stream_fragmented>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d1d2      	bne.n	800f738 <rmw_publish+0x4c>
 800f792:	2001      	movs	r0, #1
 800f794:	b00e      	add	sp, #56	@ 0x38
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	2001      	movs	r0, #1
 800f79a:	4770      	bx	lr
 800f79c:	6918      	ldr	r0, [r3, #16]
 800f79e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7a2:	f002 ff5f 	bl	8012664 <uxr_flash_output_streams>
 800f7a6:	e7de      	b.n	800f766 <rmw_publish+0x7a>
 800f7a8:	0800f6e5 	.word	0x0800f6e5

0800f7ac <rmw_create_publisher>:
 800f7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b0:	b087      	sub	sp, #28
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	f000 80d2 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7b8:	460e      	mov	r6, r1
 800f7ba:	2900      	cmp	r1, #0
 800f7bc:	f000 80ce 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	6800      	ldr	r0, [r0, #0]
 800f7c4:	4615      	mov	r5, r2
 800f7c6:	461f      	mov	r7, r3
 800f7c8:	f000 fd76 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800f7cc:	f080 0001 	eor.w	r0, r0, #1
 800f7d0:	b2c0      	uxtb	r0, r0
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	f040 80c2 	bne.w	800f95c <rmw_create_publisher+0x1b0>
 800f7d8:	2d00      	cmp	r5, #0
 800f7da:	f000 80bf 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7de:	782b      	ldrb	r3, [r5, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 80bb 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7e6:	2f00      	cmp	r7, #0
 800f7e8:	f000 80b8 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7ec:	485e      	ldr	r0, [pc, #376]	@ (800f968 <rmw_create_publisher+0x1bc>)
 800f7ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f7f2:	f009 fb2b 	bl	8018e4c <get_memory>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	f000 80b0 	beq.w	800f95c <rmw_create_publisher+0x1b0>
 800f7fc:	6884      	ldr	r4, [r0, #8]
 800f7fe:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f802:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f806:	f009 fb89 	bl	8018f1c <rmw_get_implementation_identifier>
 800f80a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f80e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f812:	4628      	mov	r0, r5
 800f814:	f7f0 fd6e 	bl	80002f4 <strlen>
 800f818:	3001      	adds	r0, #1
 800f81a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800f81e:	283c      	cmp	r0, #60	@ 0x3c
 800f820:	f200 808f 	bhi.w	800f942 <rmw_create_publisher+0x196>
 800f824:	462b      	mov	r3, r5
 800f826:	4a51      	ldr	r2, [pc, #324]	@ (800f96c <rmw_create_publisher+0x1c0>)
 800f828:	213c      	movs	r1, #60	@ 0x3c
 800f82a:	4650      	mov	r0, sl
 800f82c:	f00b ffbe 	bl	801b7ac <sniprintf>
 800f830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f834:	4639      	mov	r1, r7
 800f836:	2250      	movs	r2, #80	@ 0x50
 800f838:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f83a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f83e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f842:	f00c f9ea 	bl	801bc1a <memcpy>
 800f846:	7a3b      	ldrb	r3, [r7, #8]
 800f848:	4630      	mov	r0, r6
 800f84a:	4949      	ldr	r1, [pc, #292]	@ (800f970 <rmw_create_publisher+0x1c4>)
 800f84c:	2b02      	cmp	r3, #2
 800f84e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f852:	bf0c      	ite	eq
 800f854:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f858:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f85c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f85e:	2300      	movs	r3, #0
 800f860:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f864:	f000 fd36 	bl	80102d4 <get_message_typesupport_handle>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d06a      	beq.n	800f942 <rmw_create_publisher+0x196>
 800f86c:	6842      	ldr	r2, [r0, #4]
 800f86e:	61a2      	str	r2, [r4, #24]
 800f870:	2a00      	cmp	r2, #0
 800f872:	d066      	beq.n	800f942 <rmw_create_publisher+0x196>
 800f874:	4629      	mov	r1, r5
 800f876:	463b      	mov	r3, r7
 800f878:	4648      	mov	r0, r9
 800f87a:	f009 fb55 	bl	8018f28 <create_topic>
 800f87e:	6260      	str	r0, [r4, #36]	@ 0x24
 800f880:	2800      	cmp	r0, #0
 800f882:	d062      	beq.n	800f94a <rmw_create_publisher+0x19e>
 800f884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f888:	2103      	movs	r1, #3
 800f88a:	2506      	movs	r5, #6
 800f88c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f890:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f894:	1c42      	adds	r2, r0, #1
 800f896:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f89a:	f002 fb99 	bl	8011fd0 <uxr_object_id>
 800f89e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f8a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8a6:	6120      	str	r0, [r4, #16]
 800f8a8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f8ac:	6910      	ldr	r0, [r2, #16]
 800f8ae:	9500      	str	r5, [sp, #0]
 800f8b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8b4:	6819      	ldr	r1, [r3, #0]
 800f8b6:	6922      	ldr	r2, [r4, #16]
 800f8b8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f8bc:	f002 fa24 	bl	8011d08 <uxr_buffer_create_publisher_bin>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f8c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f8ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f8ce:	f000 fc79 	bl	80101c4 <run_xrce_session>
 800f8d2:	b3b0      	cbz	r0, 800f942 <rmw_create_publisher+0x196>
 800f8d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8d8:	2105      	movs	r1, #5
 800f8da:	f10d 0a10 	add.w	sl, sp, #16
 800f8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8e2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f8e6:	1c42      	adds	r2, r0, #1
 800f8e8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f8ec:	f002 fb70 	bl	8011fd0 <uxr_object_id>
 800f8f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	6160      	str	r0, [r4, #20]
 800f8f8:	691e      	ldr	r6, [r3, #16]
 800f8fa:	4650      	mov	r0, sl
 800f8fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f900:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f904:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f908:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800f90c:	f000 fc76 	bl	80101fc <convert_qos_profile>
 800f910:	9503      	str	r5, [sp, #12]
 800f912:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f916:	9001      	str	r0, [sp, #4]
 800f918:	4630      	mov	r0, r6
 800f91a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f91e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	6839      	ldr	r1, [r7, #0]
 800f926:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f92a:	f002 fa1d 	bl	8011d68 <uxr_buffer_create_datawriter_bin>
 800f92e:	4602      	mov	r2, r0
 800f930:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f934:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f938:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f93c:	f000 fc42 	bl	80101c4 <run_xrce_session>
 800f940:	b970      	cbnz	r0, 800f960 <rmw_create_publisher+0x1b4>
 800f942:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f944:	b108      	cbz	r0, 800f94a <rmw_create_publisher+0x19e>
 800f946:	f000 fb31 	bl	800ffac <rmw_uxrce_fini_topic_memory>
 800f94a:	4640      	mov	r0, r8
 800f94c:	f04f 0800 	mov.w	r8, #0
 800f950:	f000 fad4 	bl	800fefc <rmw_uxrce_fini_publisher_memory>
 800f954:	4640      	mov	r0, r8
 800f956:	b007      	add	sp, #28
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95c:	f04f 0800 	mov.w	r8, #0
 800f960:	4640      	mov	r0, r8
 800f962:	b007      	add	sp, #28
 800f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f968:	24012d24 	.word	0x24012d24
 800f96c:	0801cb30 	.word	0x0801cb30
 800f970:	0801cafc 	.word	0x0801cafc

0800f974 <rmw_publisher_get_actual_qos>:
 800f974:	b178      	cbz	r0, 800f996 <rmw_publisher_get_actual_qos+0x22>
 800f976:	b510      	push	{r4, lr}
 800f978:	fab1 f481 	clz	r4, r1
 800f97c:	0964      	lsrs	r4, r4, #5
 800f97e:	b141      	cbz	r1, 800f992 <rmw_publisher_get_actual_qos+0x1e>
 800f980:	6843      	ldr	r3, [r0, #4]
 800f982:	2250      	movs	r2, #80	@ 0x50
 800f984:	4608      	mov	r0, r1
 800f986:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f98a:	f00c f946 	bl	801bc1a <memcpy>
 800f98e:	4620      	mov	r0, r4
 800f990:	bd10      	pop	{r4, pc}
 800f992:	200b      	movs	r0, #11
 800f994:	bd10      	pop	{r4, pc}
 800f996:	200b      	movs	r0, #11
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop

0800f99c <rmw_destroy_publisher>:
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	b128      	cbz	r0, 800f9ae <rmw_destroy_publisher+0x12>
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	6800      	ldr	r0, [r0, #0]
 800f9a6:	460d      	mov	r5, r1
 800f9a8:	f000 fc86 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800f9ac:	b918      	cbnz	r0, 800f9b6 <rmw_destroy_publisher+0x1a>
 800f9ae:	2401      	movs	r4, #1
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b6:	6863      	ldr	r3, [r4, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d0f8      	beq.n	800f9ae <rmw_destroy_publisher+0x12>
 800f9bc:	fab5 f485 	clz	r4, r5
 800f9c0:	0964      	lsrs	r4, r4, #5
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	d0f3      	beq.n	800f9ae <rmw_destroy_publisher+0x12>
 800f9c6:	6828      	ldr	r0, [r5, #0]
 800f9c8:	f000 fc76 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d0ee      	beq.n	800f9ae <rmw_destroy_publisher+0x12>
 800f9d0:	686e      	ldr	r6, [r5, #4]
 800f9d2:	2e00      	cmp	r6, #0
 800f9d4:	d0eb      	beq.n	800f9ae <rmw_destroy_publisher+0x12>
 800f9d6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800f9d8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800f9dc:	f009 faf4 	bl	8018fc8 <destroy_topic>
 800f9e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f9e4:	6972      	ldr	r2, [r6, #20]
 800f9e6:	6918      	ldr	r0, [r3, #16]
 800f9e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9f0:	6819      	ldr	r1, [r3, #0]
 800f9f2:	f002 f8d5 	bl	8011ba0 <uxr_buffer_delete_entity>
 800f9f6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f9fa:	4680      	mov	r8, r0
 800f9fc:	6932      	ldr	r2, [r6, #16]
 800f9fe:	6918      	ldr	r0, [r3, #16]
 800fa00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	f002 f8c9 	bl	8011ba0 <uxr_buffer_delete_entity>
 800fa0e:	4606      	mov	r6, r0
 800fa10:	6938      	ldr	r0, [r7, #16]
 800fa12:	4642      	mov	r2, r8
 800fa14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa1c:	f000 fbd2 	bl	80101c4 <run_xrce_session>
 800fa20:	693f      	ldr	r7, [r7, #16]
 800fa22:	4632      	mov	r2, r6
 800fa24:	4606      	mov	r6, r0
 800fa26:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fa30:	f000 fbc8 	bl	80101c4 <run_xrce_session>
 800fa34:	b126      	cbz	r6, 800fa40 <rmw_destroy_publisher+0xa4>
 800fa36:	b118      	cbz	r0, 800fa40 <rmw_destroy_publisher+0xa4>
 800fa38:	4628      	mov	r0, r5
 800fa3a:	f000 fa5f 	bl	800fefc <rmw_uxrce_fini_publisher_memory>
 800fa3e:	e7b7      	b.n	800f9b0 <rmw_destroy_publisher+0x14>
 800fa40:	2402      	movs	r4, #2
 800fa42:	e7f9      	b.n	800fa38 <rmw_destroy_publisher+0x9c>

0800fa44 <rmw_destroy_service>:
 800fa44:	b570      	push	{r4, r5, r6, lr}
 800fa46:	b128      	cbz	r0, 800fa54 <rmw_destroy_service+0x10>
 800fa48:	4604      	mov	r4, r0
 800fa4a:	6800      	ldr	r0, [r0, #0]
 800fa4c:	460d      	mov	r5, r1
 800fa4e:	f000 fc33 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800fa52:	b910      	cbnz	r0, 800fa5a <rmw_destroy_service+0x16>
 800fa54:	2401      	movs	r4, #1
 800fa56:	4620      	mov	r0, r4
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	6863      	ldr	r3, [r4, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d0f9      	beq.n	800fa54 <rmw_destroy_service+0x10>
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	d0f7      	beq.n	800fa54 <rmw_destroy_service+0x10>
 800fa64:	6828      	ldr	r0, [r5, #0]
 800fa66:	f000 fc27 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d0f2      	beq.n	800fa54 <rmw_destroy_service+0x10>
 800fa6e:	686e      	ldr	r6, [r5, #4]
 800fa70:	2e00      	cmp	r6, #0
 800fa72:	d0ef      	beq.n	800fa54 <rmw_destroy_service+0x10>
 800fa74:	6864      	ldr	r4, [r4, #4]
 800fa76:	6932      	ldr	r2, [r6, #16]
 800fa78:	6920      	ldr	r0, [r4, #16]
 800fa7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa82:	6819      	ldr	r1, [r3, #0]
 800fa84:	f002 fbd8 	bl	8012238 <uxr_buffer_cancel_data>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	6920      	ldr	r0, [r4, #16]
 800fa8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa94:	f000 fb96 	bl	80101c4 <run_xrce_session>
 800fa98:	6920      	ldr	r0, [r4, #16]
 800fa9a:	6932      	ldr	r2, [r6, #16]
 800fa9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800faa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800faa4:	6819      	ldr	r1, [r3, #0]
 800faa6:	f002 f87b 	bl	8011ba0 <uxr_buffer_delete_entity>
 800faaa:	4602      	mov	r2, r0
 800faac:	6920      	ldr	r0, [r4, #16]
 800faae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fab2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fab6:	f000 fb85 	bl	80101c4 <run_xrce_session>
 800faba:	4603      	mov	r3, r0
 800fabc:	4628      	mov	r0, r5
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	bf14      	ite	ne
 800fac2:	2400      	movne	r4, #0
 800fac4:	2402      	moveq	r4, #2
 800fac6:	f000 fa45 	bl	800ff54 <rmw_uxrce_fini_service_memory>
 800faca:	e7c4      	b.n	800fa56 <rmw_destroy_service+0x12>

0800facc <rmw_destroy_subscription>:
 800facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad0:	b128      	cbz	r0, 800fade <rmw_destroy_subscription+0x12>
 800fad2:	4604      	mov	r4, r0
 800fad4:	6800      	ldr	r0, [r0, #0]
 800fad6:	460d      	mov	r5, r1
 800fad8:	f000 fbee 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800fadc:	b918      	cbnz	r0, 800fae6 <rmw_destroy_subscription+0x1a>
 800fade:	2401      	movs	r4, #1
 800fae0:	4620      	mov	r0, r4
 800fae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae6:	6863      	ldr	r3, [r4, #4]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d0f8      	beq.n	800fade <rmw_destroy_subscription+0x12>
 800faec:	fab5 f485 	clz	r4, r5
 800faf0:	0964      	lsrs	r4, r4, #5
 800faf2:	2d00      	cmp	r5, #0
 800faf4:	d0f3      	beq.n	800fade <rmw_destroy_subscription+0x12>
 800faf6:	6828      	ldr	r0, [r5, #0]
 800faf8:	f000 fbde 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d0ee      	beq.n	800fade <rmw_destroy_subscription+0x12>
 800fb00:	686e      	ldr	r6, [r5, #4]
 800fb02:	2e00      	cmp	r6, #0
 800fb04:	d0eb      	beq.n	800fade <rmw_destroy_subscription+0x12>
 800fb06:	6a37      	ldr	r7, [r6, #32]
 800fb08:	6972      	ldr	r2, [r6, #20]
 800fb0a:	6938      	ldr	r0, [r7, #16]
 800fb0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb14:	6819      	ldr	r1, [r3, #0]
 800fb16:	f002 fb8f 	bl	8012238 <uxr_buffer_cancel_data>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	6938      	ldr	r0, [r7, #16]
 800fb1e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb22:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb26:	f000 fb4d 	bl	80101c4 <run_xrce_session>
 800fb2a:	69f0      	ldr	r0, [r6, #28]
 800fb2c:	f009 fa4c 	bl	8018fc8 <destroy_topic>
 800fb30:	6a33      	ldr	r3, [r6, #32]
 800fb32:	6972      	ldr	r2, [r6, #20]
 800fb34:	6918      	ldr	r0, [r3, #16]
 800fb36:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb3e:	6819      	ldr	r1, [r3, #0]
 800fb40:	f002 f82e 	bl	8011ba0 <uxr_buffer_delete_entity>
 800fb44:	6a33      	ldr	r3, [r6, #32]
 800fb46:	4680      	mov	r8, r0
 800fb48:	6932      	ldr	r2, [r6, #16]
 800fb4a:	6918      	ldr	r0, [r3, #16]
 800fb4c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb54:	6819      	ldr	r1, [r3, #0]
 800fb56:	f002 f823 	bl	8011ba0 <uxr_buffer_delete_entity>
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	6938      	ldr	r0, [r7, #16]
 800fb5e:	4642      	mov	r2, r8
 800fb60:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb64:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb68:	f000 fb2c 	bl	80101c4 <run_xrce_session>
 800fb6c:	693f      	ldr	r7, [r7, #16]
 800fb6e:	4632      	mov	r2, r6
 800fb70:	4606      	mov	r6, r0
 800fb72:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fb76:	4638      	mov	r0, r7
 800fb78:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fb7c:	f000 fb22 	bl	80101c4 <run_xrce_session>
 800fb80:	b126      	cbz	r6, 800fb8c <rmw_destroy_subscription+0xc0>
 800fb82:	b118      	cbz	r0, 800fb8c <rmw_destroy_subscription+0xc0>
 800fb84:	4628      	mov	r0, r5
 800fb86:	f000 f9cf 	bl	800ff28 <rmw_uxrce_fini_subscription_memory>
 800fb8a:	e7a9      	b.n	800fae0 <rmw_destroy_subscription+0x14>
 800fb8c:	2402      	movs	r4, #2
 800fb8e:	e7f9      	b.n	800fb84 <rmw_destroy_subscription+0xb8>

0800fb90 <rmw_uxrce_transport_init>:
 800fb90:	b508      	push	{r3, lr}
 800fb92:	b108      	cbz	r0, 800fb98 <rmw_uxrce_transport_init+0x8>
 800fb94:	f100 0210 	add.w	r2, r0, #16
 800fb98:	b139      	cbz	r1, 800fbaa <rmw_uxrce_transport_init+0x1a>
 800fb9a:	6949      	ldr	r1, [r1, #20]
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	f002 f9df 	bl	8011f60 <uxr_init_custom_transport>
 800fba2:	f080 0001 	eor.w	r0, r0, #1
 800fba6:	b2c0      	uxtb	r0, r0
 800fba8:	bd08      	pop	{r3, pc}
 800fbaa:	4b04      	ldr	r3, [pc, #16]	@ (800fbbc <rmw_uxrce_transport_init+0x2c>)
 800fbac:	4610      	mov	r0, r2
 800fbae:	6859      	ldr	r1, [r3, #4]
 800fbb0:	f002 f9d6 	bl	8011f60 <uxr_init_custom_transport>
 800fbb4:	f080 0001 	eor.w	r0, r0, #1
 800fbb8:	b2c0      	uxtb	r0, r0
 800fbba:	bd08      	pop	{r3, pc}
 800fbbc:	2400e3ec 	.word	0x2400e3ec

0800fbc0 <rmw_uros_epoch_nanos>:
 800fbc0:	4b05      	ldr	r3, [pc, #20]	@ (800fbd8 <rmw_uros_epoch_nanos+0x18>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	b123      	cbz	r3, 800fbd0 <rmw_uros_epoch_nanos+0x10>
 800fbc6:	6898      	ldr	r0, [r3, #8]
 800fbc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbcc:	f002 bd40 	b.w	8012650 <uxr_epoch_nanos>
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	24012d44 	.word	0x24012d44

0800fbdc <rmw_uros_sync_session>:
 800fbdc:	b508      	push	{r3, lr}
 800fbde:	4b07      	ldr	r3, [pc, #28]	@ (800fbfc <rmw_uros_sync_session+0x20>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	b14b      	cbz	r3, 800fbf8 <rmw_uros_sync_session+0x1c>
 800fbe4:	4601      	mov	r1, r0
 800fbe6:	6898      	ldr	r0, [r3, #8]
 800fbe8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbec:	f003 f970 	bl	8012ed0 <uxr_sync_session>
 800fbf0:	f080 0001 	eor.w	r0, r0, #1
 800fbf4:	b2c0      	uxtb	r0, r0
 800fbf6:	bd08      	pop	{r3, pc}
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	bd08      	pop	{r3, pc}
 800fbfc:	24012d44 	.word	0x24012d44

0800fc00 <rmw_uxrce_init_service_memory>:
 800fc00:	b1e2      	cbz	r2, 800fc3c <rmw_uxrce_init_service_memory+0x3c>
 800fc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc06:	7b05      	ldrb	r5, [r0, #12]
 800fc08:	4606      	mov	r6, r0
 800fc0a:	b9ad      	cbnz	r5, 800fc38 <rmw_uxrce_init_service_memory+0x38>
 800fc0c:	23c8      	movs	r3, #200	@ 0xc8
 800fc0e:	4617      	mov	r7, r2
 800fc10:	460c      	mov	r4, r1
 800fc12:	46a8      	mov	r8, r5
 800fc14:	6083      	str	r3, [r0, #8]
 800fc16:	f240 1301 	movw	r3, #257	@ 0x101
 800fc1a:	e9c0 5500 	strd	r5, r5, [r0]
 800fc1e:	8183      	strh	r3, [r0, #12]
 800fc20:	3501      	adds	r5, #1
 800fc22:	4621      	mov	r1, r4
 800fc24:	4630      	mov	r0, r6
 800fc26:	f009 f921 	bl	8018e6c <put_memory>
 800fc2a:	42af      	cmp	r7, r5
 800fc2c:	60a4      	str	r4, [r4, #8]
 800fc2e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fc32:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fc36:	d1f3      	bne.n	800fc20 <rmw_uxrce_init_service_memory+0x20>
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <rmw_uxrce_init_client_memory>:
 800fc40:	b1e2      	cbz	r2, 800fc7c <rmw_uxrce_init_client_memory+0x3c>
 800fc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc46:	7b05      	ldrb	r5, [r0, #12]
 800fc48:	4606      	mov	r6, r0
 800fc4a:	b9ad      	cbnz	r5, 800fc78 <rmw_uxrce_init_client_memory+0x38>
 800fc4c:	23c8      	movs	r3, #200	@ 0xc8
 800fc4e:	4617      	mov	r7, r2
 800fc50:	460c      	mov	r4, r1
 800fc52:	46a8      	mov	r8, r5
 800fc54:	6083      	str	r3, [r0, #8]
 800fc56:	f240 1301 	movw	r3, #257	@ 0x101
 800fc5a:	e9c0 5500 	strd	r5, r5, [r0]
 800fc5e:	8183      	strh	r3, [r0, #12]
 800fc60:	3501      	adds	r5, #1
 800fc62:	4621      	mov	r1, r4
 800fc64:	4630      	mov	r0, r6
 800fc66:	f009 f901 	bl	8018e6c <put_memory>
 800fc6a:	42af      	cmp	r7, r5
 800fc6c:	60a4      	str	r4, [r4, #8]
 800fc6e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fc72:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800fc76:	d1f3      	bne.n	800fc60 <rmw_uxrce_init_client_memory+0x20>
 800fc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop

0800fc80 <rmw_uxrce_init_publisher_memory>:
 800fc80:	b1e2      	cbz	r2, 800fcbc <rmw_uxrce_init_publisher_memory+0x3c>
 800fc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc86:	7b05      	ldrb	r5, [r0, #12]
 800fc88:	4606      	mov	r6, r0
 800fc8a:	b9ad      	cbnz	r5, 800fcb8 <rmw_uxrce_init_publisher_memory+0x38>
 800fc8c:	23d8      	movs	r3, #216	@ 0xd8
 800fc8e:	4617      	mov	r7, r2
 800fc90:	460c      	mov	r4, r1
 800fc92:	46a8      	mov	r8, r5
 800fc94:	6083      	str	r3, [r0, #8]
 800fc96:	f240 1301 	movw	r3, #257	@ 0x101
 800fc9a:	e9c0 5500 	strd	r5, r5, [r0]
 800fc9e:	8183      	strh	r3, [r0, #12]
 800fca0:	3501      	adds	r5, #1
 800fca2:	4621      	mov	r1, r4
 800fca4:	4630      	mov	r0, r6
 800fca6:	f009 f8e1 	bl	8018e6c <put_memory>
 800fcaa:	42af      	cmp	r7, r5
 800fcac:	60a4      	str	r4, [r4, #8]
 800fcae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fcb2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fcb6:	d1f3      	bne.n	800fca0 <rmw_uxrce_init_publisher_memory+0x20>
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop

0800fcc0 <rmw_uxrce_init_subscription_memory>:
 800fcc0:	b1e2      	cbz	r2, 800fcfc <rmw_uxrce_init_subscription_memory+0x3c>
 800fcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc6:	7b05      	ldrb	r5, [r0, #12]
 800fcc8:	4606      	mov	r6, r0
 800fcca:	b9ad      	cbnz	r5, 800fcf8 <rmw_uxrce_init_subscription_memory+0x38>
 800fccc:	23d8      	movs	r3, #216	@ 0xd8
 800fcce:	4617      	mov	r7, r2
 800fcd0:	460c      	mov	r4, r1
 800fcd2:	46a8      	mov	r8, r5
 800fcd4:	6083      	str	r3, [r0, #8]
 800fcd6:	f240 1301 	movw	r3, #257	@ 0x101
 800fcda:	e9c0 5500 	strd	r5, r5, [r0]
 800fcde:	8183      	strh	r3, [r0, #12]
 800fce0:	3501      	adds	r5, #1
 800fce2:	4621      	mov	r1, r4
 800fce4:	4630      	mov	r0, r6
 800fce6:	f009 f8c1 	bl	8018e6c <put_memory>
 800fcea:	42af      	cmp	r7, r5
 800fcec:	60a4      	str	r4, [r4, #8]
 800fcee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fcf2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800fcf6:	d1f3      	bne.n	800fce0 <rmw_uxrce_init_subscription_memory+0x20>
 800fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop

0800fd00 <rmw_uxrce_init_node_memory>:
 800fd00:	b1e2      	cbz	r2, 800fd3c <rmw_uxrce_init_node_memory+0x3c>
 800fd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd06:	7b05      	ldrb	r5, [r0, #12]
 800fd08:	4606      	mov	r6, r0
 800fd0a:	b9ad      	cbnz	r5, 800fd38 <rmw_uxrce_init_node_memory+0x38>
 800fd0c:	23a4      	movs	r3, #164	@ 0xa4
 800fd0e:	4617      	mov	r7, r2
 800fd10:	460c      	mov	r4, r1
 800fd12:	46a8      	mov	r8, r5
 800fd14:	6083      	str	r3, [r0, #8]
 800fd16:	f240 1301 	movw	r3, #257	@ 0x101
 800fd1a:	e9c0 5500 	strd	r5, r5, [r0]
 800fd1e:	8183      	strh	r3, [r0, #12]
 800fd20:	3501      	adds	r5, #1
 800fd22:	4621      	mov	r1, r4
 800fd24:	4630      	mov	r0, r6
 800fd26:	f009 f8a1 	bl	8018e6c <put_memory>
 800fd2a:	42af      	cmp	r7, r5
 800fd2c:	60a4      	str	r4, [r4, #8]
 800fd2e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fd32:	f804 8c98 	strb.w	r8, [r4, #-152]
 800fd36:	d1f3      	bne.n	800fd20 <rmw_uxrce_init_node_memory+0x20>
 800fd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop

0800fd40 <rmw_uxrce_init_session_memory>:
 800fd40:	b1ea      	cbz	r2, 800fd7e <rmw_uxrce_init_session_memory+0x3e>
 800fd42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd46:	7b05      	ldrb	r5, [r0, #12]
 800fd48:	4606      	mov	r6, r0
 800fd4a:	b9b5      	cbnz	r5, 800fd7a <rmw_uxrce_init_session_memory+0x3a>
 800fd4c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fd50:	f240 1301 	movw	r3, #257	@ 0x101
 800fd54:	4617      	mov	r7, r2
 800fd56:	460c      	mov	r4, r1
 800fd58:	46a9      	mov	r9, r5
 800fd5a:	f8c0 8008 	str.w	r8, [r0, #8]
 800fd5e:	8183      	strh	r3, [r0, #12]
 800fd60:	e9c0 5500 	strd	r5, r5, [r0]
 800fd64:	3501      	adds	r5, #1
 800fd66:	4621      	mov	r1, r4
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f009 f87f 	bl	8018e6c <put_memory>
 800fd6e:	42af      	cmp	r7, r5
 800fd70:	60a4      	str	r4, [r4, #8]
 800fd72:	f884 900c 	strb.w	r9, [r4, #12]
 800fd76:	4444      	add	r4, r8
 800fd78:	d1f4      	bne.n	800fd64 <rmw_uxrce_init_session_memory+0x24>
 800fd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd7e:	4770      	bx	lr

0800fd80 <rmw_uxrce_init_topic_memory>:
 800fd80:	b1e2      	cbz	r2, 800fdbc <rmw_uxrce_init_topic_memory+0x3c>
 800fd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd86:	7b05      	ldrb	r5, [r0, #12]
 800fd88:	4606      	mov	r6, r0
 800fd8a:	b9ad      	cbnz	r5, 800fdb8 <rmw_uxrce_init_topic_memory+0x38>
 800fd8c:	231c      	movs	r3, #28
 800fd8e:	4617      	mov	r7, r2
 800fd90:	460c      	mov	r4, r1
 800fd92:	46a8      	mov	r8, r5
 800fd94:	6083      	str	r3, [r0, #8]
 800fd96:	f240 1301 	movw	r3, #257	@ 0x101
 800fd9a:	e9c0 5500 	strd	r5, r5, [r0]
 800fd9e:	8183      	strh	r3, [r0, #12]
 800fda0:	3501      	adds	r5, #1
 800fda2:	4621      	mov	r1, r4
 800fda4:	4630      	mov	r0, r6
 800fda6:	f009 f861 	bl	8018e6c <put_memory>
 800fdaa:	42af      	cmp	r7, r5
 800fdac:	60a4      	str	r4, [r4, #8]
 800fdae:	f104 041c 	add.w	r4, r4, #28
 800fdb2:	f804 8c10 	strb.w	r8, [r4, #-16]
 800fdb6:	d1f3      	bne.n	800fda0 <rmw_uxrce_init_topic_memory+0x20>
 800fdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop

0800fdc0 <rmw_uxrce_init_static_input_buffer_memory>:
 800fdc0:	b1ea      	cbz	r2, 800fdfe <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc6:	7b05      	ldrb	r5, [r0, #12]
 800fdc8:	4606      	mov	r6, r0
 800fdca:	b9b5      	cbnz	r5, 800fdfa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fdcc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fdd0:	4617      	mov	r7, r2
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	46a8      	mov	r8, r5
 800fdd6:	6083      	str	r3, [r0, #8]
 800fdd8:	f240 1301 	movw	r3, #257	@ 0x101
 800fddc:	e9c0 5500 	strd	r5, r5, [r0]
 800fde0:	8183      	strh	r3, [r0, #12]
 800fde2:	3501      	adds	r5, #1
 800fde4:	4621      	mov	r1, r4
 800fde6:	4630      	mov	r0, r6
 800fde8:	f009 f840 	bl	8018e6c <put_memory>
 800fdec:	42af      	cmp	r7, r5
 800fdee:	60a4      	str	r4, [r4, #8]
 800fdf0:	f884 800c 	strb.w	r8, [r4, #12]
 800fdf4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fdf8:	d1f3      	bne.n	800fde2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fdfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfe:	4770      	bx	lr

0800fe00 <rmw_uxrce_init_init_options_impl_memory>:
 800fe00:	b1e2      	cbz	r2, 800fe3c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800fe02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe06:	7b05      	ldrb	r5, [r0, #12]
 800fe08:	4606      	mov	r6, r0
 800fe0a:	b9ad      	cbnz	r5, 800fe38 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fe0c:	232c      	movs	r3, #44	@ 0x2c
 800fe0e:	4617      	mov	r7, r2
 800fe10:	460c      	mov	r4, r1
 800fe12:	46a8      	mov	r8, r5
 800fe14:	6083      	str	r3, [r0, #8]
 800fe16:	f240 1301 	movw	r3, #257	@ 0x101
 800fe1a:	e9c0 5500 	strd	r5, r5, [r0]
 800fe1e:	8183      	strh	r3, [r0, #12]
 800fe20:	3501      	adds	r5, #1
 800fe22:	4621      	mov	r1, r4
 800fe24:	4630      	mov	r0, r6
 800fe26:	f009 f821 	bl	8018e6c <put_memory>
 800fe2a:	42af      	cmp	r7, r5
 800fe2c:	60a4      	str	r4, [r4, #8]
 800fe2e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fe32:	f804 8c20 	strb.w	r8, [r4, #-32]
 800fe36:	d1f3      	bne.n	800fe20 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fe38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop

0800fe40 <rmw_uxrce_init_wait_set_memory>:
 800fe40:	b1e2      	cbz	r2, 800fe7c <rmw_uxrce_init_wait_set_memory+0x3c>
 800fe42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe46:	7b05      	ldrb	r5, [r0, #12]
 800fe48:	4606      	mov	r6, r0
 800fe4a:	b9ad      	cbnz	r5, 800fe78 <rmw_uxrce_init_wait_set_memory+0x38>
 800fe4c:	231c      	movs	r3, #28
 800fe4e:	4617      	mov	r7, r2
 800fe50:	460c      	mov	r4, r1
 800fe52:	46a8      	mov	r8, r5
 800fe54:	6083      	str	r3, [r0, #8]
 800fe56:	f240 1301 	movw	r3, #257	@ 0x101
 800fe5a:	e9c0 5500 	strd	r5, r5, [r0]
 800fe5e:	8183      	strh	r3, [r0, #12]
 800fe60:	3501      	adds	r5, #1
 800fe62:	4621      	mov	r1, r4
 800fe64:	4630      	mov	r0, r6
 800fe66:	f009 f801 	bl	8018e6c <put_memory>
 800fe6a:	42af      	cmp	r7, r5
 800fe6c:	60a4      	str	r4, [r4, #8]
 800fe6e:	f104 041c 	add.w	r4, r4, #28
 800fe72:	f804 8c10 	strb.w	r8, [r4, #-16]
 800fe76:	d1f3      	bne.n	800fe60 <rmw_uxrce_init_wait_set_memory+0x20>
 800fe78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop

0800fe80 <rmw_uxrce_init_guard_condition_memory>:
 800fe80:	b1e2      	cbz	r2, 800febc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fe82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe86:	7b05      	ldrb	r5, [r0, #12]
 800fe88:	4606      	mov	r6, r0
 800fe8a:	b9ad      	cbnz	r5, 800feb8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800fe8c:	2320      	movs	r3, #32
 800fe8e:	4617      	mov	r7, r2
 800fe90:	460c      	mov	r4, r1
 800fe92:	46a8      	mov	r8, r5
 800fe94:	6083      	str	r3, [r0, #8]
 800fe96:	f240 1301 	movw	r3, #257	@ 0x101
 800fe9a:	e9c0 5500 	strd	r5, r5, [r0]
 800fe9e:	8183      	strh	r3, [r0, #12]
 800fea0:	3501      	adds	r5, #1
 800fea2:	4621      	mov	r1, r4
 800fea4:	4630      	mov	r0, r6
 800fea6:	f008 ffe1 	bl	8018e6c <put_memory>
 800feaa:	42af      	cmp	r7, r5
 800feac:	60a4      	str	r4, [r4, #8]
 800feae:	f104 0420 	add.w	r4, r4, #32
 800feb2:	f804 8c14 	strb.w	r8, [r4, #-20]
 800feb6:	d1f3      	bne.n	800fea0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800feb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop

0800fec0 <rmw_uxrce_fini_session_memory>:
 800fec0:	4601      	mov	r1, r0
 800fec2:	4801      	ldr	r0, [pc, #4]	@ (800fec8 <rmw_uxrce_fini_session_memory+0x8>)
 800fec4:	f008 bfd2 	b.w	8018e6c <put_memory>
 800fec8:	24012d44 	.word	0x24012d44

0800fecc <rmw_uxrce_fini_node_memory>:
 800fecc:	b538      	push	{r3, r4, r5, lr}
 800fece:	4604      	mov	r4, r0
 800fed0:	6800      	ldr	r0, [r0, #0]
 800fed2:	b128      	cbz	r0, 800fee0 <rmw_uxrce_fini_node_memory+0x14>
 800fed4:	4b07      	ldr	r3, [pc, #28]	@ (800fef4 <rmw_uxrce_fini_node_memory+0x28>)
 800fed6:	6819      	ldr	r1, [r3, #0]
 800fed8:	f7f0 fa02 	bl	80002e0 <strcmp>
 800fedc:	b940      	cbnz	r0, 800fef0 <rmw_uxrce_fini_node_memory+0x24>
 800fede:	6020      	str	r0, [r4, #0]
 800fee0:	6861      	ldr	r1, [r4, #4]
 800fee2:	b129      	cbz	r1, 800fef0 <rmw_uxrce_fini_node_memory+0x24>
 800fee4:	2500      	movs	r5, #0
 800fee6:	4804      	ldr	r0, [pc, #16]	@ (800fef8 <rmw_uxrce_fini_node_memory+0x2c>)
 800fee8:	610d      	str	r5, [r1, #16]
 800feea:	f008 ffbf 	bl	8018e6c <put_memory>
 800feee:	6065      	str	r5, [r4, #4]
 800fef0:	bd38      	pop	{r3, r4, r5, pc}
 800fef2:	bf00      	nop
 800fef4:	0801d454 	.word	0x0801d454
 800fef8:	24012d14 	.word	0x24012d14

0800fefc <rmw_uxrce_fini_publisher_memory>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4604      	mov	r4, r0
 800ff00:	6800      	ldr	r0, [r0, #0]
 800ff02:	b128      	cbz	r0, 800ff10 <rmw_uxrce_fini_publisher_memory+0x14>
 800ff04:	4b06      	ldr	r3, [pc, #24]	@ (800ff20 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ff06:	6819      	ldr	r1, [r3, #0]
 800ff08:	f7f0 f9ea 	bl	80002e0 <strcmp>
 800ff0c:	b938      	cbnz	r0, 800ff1e <rmw_uxrce_fini_publisher_memory+0x22>
 800ff0e:	6020      	str	r0, [r4, #0]
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	b121      	cbz	r1, 800ff1e <rmw_uxrce_fini_publisher_memory+0x22>
 800ff14:	4803      	ldr	r0, [pc, #12]	@ (800ff24 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ff16:	f008 ffa9 	bl	8018e6c <put_memory>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	6063      	str	r3, [r4, #4]
 800ff1e:	bd10      	pop	{r4, pc}
 800ff20:	0801d454 	.word	0x0801d454
 800ff24:	24012d24 	.word	0x24012d24

0800ff28 <rmw_uxrce_fini_subscription_memory>:
 800ff28:	b510      	push	{r4, lr}
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	6800      	ldr	r0, [r0, #0]
 800ff2e:	b128      	cbz	r0, 800ff3c <rmw_uxrce_fini_subscription_memory+0x14>
 800ff30:	4b06      	ldr	r3, [pc, #24]	@ (800ff4c <rmw_uxrce_fini_subscription_memory+0x24>)
 800ff32:	6819      	ldr	r1, [r3, #0]
 800ff34:	f7f0 f9d4 	bl	80002e0 <strcmp>
 800ff38:	b938      	cbnz	r0, 800ff4a <rmw_uxrce_fini_subscription_memory+0x22>
 800ff3a:	6020      	str	r0, [r4, #0]
 800ff3c:	6861      	ldr	r1, [r4, #4]
 800ff3e:	b121      	cbz	r1, 800ff4a <rmw_uxrce_fini_subscription_memory+0x22>
 800ff40:	4803      	ldr	r0, [pc, #12]	@ (800ff50 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ff42:	f008 ff93 	bl	8018e6c <put_memory>
 800ff46:	2300      	movs	r3, #0
 800ff48:	6063      	str	r3, [r4, #4]
 800ff4a:	bd10      	pop	{r4, pc}
 800ff4c:	0801d454 	.word	0x0801d454
 800ff50:	24012d64 	.word	0x24012d64

0800ff54 <rmw_uxrce_fini_service_memory>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	6800      	ldr	r0, [r0, #0]
 800ff5a:	b128      	cbz	r0, 800ff68 <rmw_uxrce_fini_service_memory+0x14>
 800ff5c:	4b06      	ldr	r3, [pc, #24]	@ (800ff78 <rmw_uxrce_fini_service_memory+0x24>)
 800ff5e:	6819      	ldr	r1, [r3, #0]
 800ff60:	f7f0 f9be 	bl	80002e0 <strcmp>
 800ff64:	b938      	cbnz	r0, 800ff76 <rmw_uxrce_fini_service_memory+0x22>
 800ff66:	6020      	str	r0, [r4, #0]
 800ff68:	6861      	ldr	r1, [r4, #4]
 800ff6a:	b121      	cbz	r1, 800ff76 <rmw_uxrce_fini_service_memory+0x22>
 800ff6c:	4803      	ldr	r0, [pc, #12]	@ (800ff7c <rmw_uxrce_fini_service_memory+0x28>)
 800ff6e:	f008 ff7d 	bl	8018e6c <put_memory>
 800ff72:	2300      	movs	r3, #0
 800ff74:	6063      	str	r3, [r4, #4]
 800ff76:	bd10      	pop	{r4, pc}
 800ff78:	0801d454 	.word	0x0801d454
 800ff7c:	24012d34 	.word	0x24012d34

0800ff80 <rmw_uxrce_fini_client_memory>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	4604      	mov	r4, r0
 800ff84:	6800      	ldr	r0, [r0, #0]
 800ff86:	b128      	cbz	r0, 800ff94 <rmw_uxrce_fini_client_memory+0x14>
 800ff88:	4b06      	ldr	r3, [pc, #24]	@ (800ffa4 <rmw_uxrce_fini_client_memory+0x24>)
 800ff8a:	6819      	ldr	r1, [r3, #0]
 800ff8c:	f7f0 f9a8 	bl	80002e0 <strcmp>
 800ff90:	b938      	cbnz	r0, 800ffa2 <rmw_uxrce_fini_client_memory+0x22>
 800ff92:	6020      	str	r0, [r4, #0]
 800ff94:	6861      	ldr	r1, [r4, #4]
 800ff96:	b121      	cbz	r1, 800ffa2 <rmw_uxrce_fini_client_memory+0x22>
 800ff98:	4803      	ldr	r0, [pc, #12]	@ (800ffa8 <rmw_uxrce_fini_client_memory+0x28>)
 800ff9a:	f008 ff67 	bl	8018e6c <put_memory>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	6063      	str	r3, [r4, #4]
 800ffa2:	bd10      	pop	{r4, pc}
 800ffa4:	0801d454 	.word	0x0801d454
 800ffa8:	2400e444 	.word	0x2400e444

0800ffac <rmw_uxrce_fini_topic_memory>:
 800ffac:	b510      	push	{r4, lr}
 800ffae:	4604      	mov	r4, r0
 800ffb0:	4803      	ldr	r0, [pc, #12]	@ (800ffc0 <rmw_uxrce_fini_topic_memory+0x14>)
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	f008 ff5a 	bl	8018e6c <put_memory>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	61a3      	str	r3, [r4, #24]
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop
 800ffc0:	24012d74 	.word	0x24012d74

0800ffc4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ffc4:	b082      	sub	sp, #8
 800ffc6:	492b      	ldr	r1, [pc, #172]	@ (8010074 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800ffc8:	b530      	push	{r4, r5, lr}
 800ffca:	680d      	ldr	r5, [r1, #0]
 800ffcc:	ac03      	add	r4, sp, #12
 800ffce:	e884 000c 	stmia.w	r4, {r2, r3}
 800ffd2:	461c      	mov	r4, r3
 800ffd4:	2d00      	cmp	r5, #0
 800ffd6:	d04b      	beq.n	8010070 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800ffd8:	462b      	mov	r3, r5
 800ffda:	2100      	movs	r1, #0
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ffe4:	4290      	cmp	r0, r2
 800ffe6:	bf08      	it	eq
 800ffe8:	3101      	addeq	r1, #1
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1f6      	bne.n	800ffdc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ffee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d029      	beq.n	801004a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fff6:	d820      	bhi.n	801003a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800fff8:	428c      	cmp	r4, r1
 800fffa:	d828      	bhi.n	801004e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800fffc:	fab4 f284 	clz	r2, r4
 8010000:	0952      	lsrs	r2, r2, #5
 8010002:	b324      	cbz	r4, 801004e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010004:	b1dd      	cbz	r5, 801003e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8010006:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801000a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801000e:	e001      	b.n	8010014 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010010:	686d      	ldr	r5, [r5, #4]
 8010012:	b1ad      	cbz	r5, 8010040 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010014:	68ab      	ldr	r3, [r5, #8]
 8010016:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 801001a:	4288      	cmp	r0, r1
 801001c:	d1f8      	bne.n	8010010 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801001e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8010022:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010026:	4561      	cmp	r1, ip
 8010028:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801002c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010030:	daee      	bge.n	8010010 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010032:	468c      	mov	ip, r1
 8010034:	461c      	mov	r4, r3
 8010036:	462a      	mov	r2, r5
 8010038:	e7ea      	b.n	8010010 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801003a:	2b03      	cmp	r3, #3
 801003c:	d0dc      	beq.n	800fff8 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801003e:	2200      	movs	r2, #0
 8010040:	4610      	mov	r0, r2
 8010042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010046:	b002      	add	sp, #8
 8010048:	4770      	bx	lr
 801004a:	428c      	cmp	r4, r1
 801004c:	d905      	bls.n	801005a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801004e:	4809      	ldr	r0, [pc, #36]	@ (8010074 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010054:	b002      	add	sp, #8
 8010056:	f008 bef9 	b.w	8018e4c <get_memory>
 801005a:	fab4 f284 	clz	r2, r4
 801005e:	0952      	lsrs	r2, r2, #5
 8010060:	2c00      	cmp	r4, #0
 8010062:	d1ed      	bne.n	8010040 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010064:	4803      	ldr	r0, [pc, #12]	@ (8010074 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801006a:	b002      	add	sp, #8
 801006c:	f008 beee 	b.w	8018e4c <get_memory>
 8010070:	4629      	mov	r1, r5
 8010072:	e7bc      	b.n	800ffee <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010074:	24012d54 	.word	0x24012d54

08010078 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010078:	4b12      	ldr	r3, [pc, #72]	@ (80100c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	b530      	push	{r4, r5, lr}
 801007e:	b1f3      	cbz	r3, 80100be <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010080:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010084:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010088:	2400      	movs	r4, #0
 801008a:	e001      	b.n	8010090 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	b1a3      	cbz	r3, 80100ba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010090:	689a      	ldr	r2, [r3, #8]
 8010092:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010096:	4288      	cmp	r0, r1
 8010098:	d1f8      	bne.n	801008c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801009a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801009e:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 80100a2:	4571      	cmp	r1, lr
 80100a4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80100a8:	eb72 050c 	sbcs.w	r5, r2, ip
 80100ac:	daee      	bge.n	801008c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80100ae:	461c      	mov	r4, r3
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	468e      	mov	lr, r1
 80100b4:	4694      	mov	ip, r2
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1ea      	bne.n	8010090 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80100ba:	4620      	mov	r0, r4
 80100bc:	bd30      	pop	{r4, r5, pc}
 80100be:	461c      	mov	r4, r3
 80100c0:	4620      	mov	r0, r4
 80100c2:	bd30      	pop	{r4, r5, pc}
 80100c4:	24012d54 	.word	0x24012d54

080100c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80100c8:	4b3d      	ldr	r3, [pc, #244]	@ (80101c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80100ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ce:	681f      	ldr	r7, [r3, #0]
 80100d0:	ed2d 8b06 	vpush	{d8-d10}
 80100d4:	b08d      	sub	sp, #52	@ 0x34
 80100d6:	f7ff fd73 	bl	800fbc0 <rmw_uros_epoch_nanos>
 80100da:	2f00      	cmp	r7, #0
 80100dc:	d05d      	beq.n	801019a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80100de:	46b8      	mov	r8, r7
 80100e0:	4681      	mov	r9, r0
 80100e2:	468a      	mov	sl, r1
 80100e4:	ac04      	add	r4, sp, #16
 80100e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80100ea:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80100ee:	2b04      	cmp	r3, #4
 80100f0:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80101a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80100f4:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80101b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80100f8:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80101b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80100fc:	d03f      	beq.n	801017e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80100fe:	2b05      	cmp	r3, #5
 8010100:	d044      	beq.n	801018c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010102:	2b03      	cmp	r3, #3
 8010104:	d03b      	beq.n	801017e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010106:	ed8d 8b04 	vstr	d8, [sp, #16]
 801010a:	ed8d ab06 	vstr	d10, [sp, #24]
 801010e:	ab08      	add	r3, sp, #32
 8010110:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010114:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801011a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801011e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010122:	f008 fbcd 	bl	80188c0 <rmw_time_equal>
 8010126:	b118      	cbz	r0, 8010130 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010128:	ed8d 9b04 	vstr	d9, [sp, #16]
 801012c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010130:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010134:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8010138:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801013c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010140:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010144:	f008 fc12 	bl	801896c <rmw_time_total_nsec>
 8010148:	1830      	adds	r0, r6, r0
 801014a:	eb47 0101 	adc.w	r1, r7, r1
 801014e:	4548      	cmp	r0, r9
 8010150:	eb71 030a 	sbcs.w	r3, r1, sl
 8010154:	db05      	blt.n	8010162 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8010156:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801015a:	4591      	cmp	r9, r2
 801015c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010160:	da03      	bge.n	801016a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8010162:	4641      	mov	r1, r8
 8010164:	4816      	ldr	r0, [pc, #88]	@ (80101c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010166:	f008 fe81 	bl	8018e6c <put_memory>
 801016a:	f1bb 0f00 	cmp.w	fp, #0
 801016e:	d014      	beq.n	801019a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010170:	46d8      	mov	r8, fp
 8010172:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010176:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801017a:	2b04      	cmp	r3, #4
 801017c:	d1bf      	bne.n	80100fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801017e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010182:	3340      	adds	r3, #64	@ 0x40
 8010184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801018a:	e7c0      	b.n	801010e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801018c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010190:	3348      	adds	r3, #72	@ 0x48
 8010192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010198:	e7b9      	b.n	801010e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801019a:	b00d      	add	sp, #52	@ 0x34
 801019c:	ecbd 8b06 	vpop	{d8-d10}
 80101a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a4:	f3af 8000 	nop.w
	...
 80101b0:	00000001 	.word	0x00000001
 80101b4:	00000000 	.word	0x00000000
 80101b8:	0000001e 	.word	0x0000001e
 80101bc:	00000000 	.word	0x00000000
 80101c0:	24012d54 	.word	0x24012d54

080101c4 <run_xrce_session>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	788c      	ldrb	r4, [r1, #2]
 80101c8:	b086      	sub	sp, #24
 80101ca:	2c01      	cmp	r4, #1
 80101cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80101d0:	d00c      	beq.n	80101ec <run_xrce_session+0x28>
 80101d2:	2401      	movs	r4, #1
 80101d4:	4619      	mov	r1, r3
 80101d6:	f10d 020e 	add.w	r2, sp, #14
 80101da:	f10d 0317 	add.w	r3, sp, #23
 80101de:	9400      	str	r4, [sp, #0]
 80101e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101e4:	f002 fe1c 	bl	8012e20 <uxr_run_session_until_all_status>
 80101e8:	b006      	add	sp, #24
 80101ea:	bd10      	pop	{r4, pc}
 80101ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101f0:	f002 fa38 	bl	8012664 <uxr_flash_output_streams>
 80101f4:	4620      	mov	r0, r4
 80101f6:	b006      	add	sp, #24
 80101f8:	bd10      	pop	{r4, pc}
 80101fa:	bf00      	nop

080101fc <convert_qos_profile>:
 80101fc:	7a4a      	ldrb	r2, [r1, #9]
 80101fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010202:	2a02      	cmp	r2, #2
 8010204:	bf18      	it	ne
 8010206:	2200      	movne	r2, #0
 8010208:	7002      	strb	r2, [r0, #0]
 801020a:	f1ac 0202 	sub.w	r2, ip, #2
 801020e:	fab2 f282 	clz	r2, r2
 8010212:	0952      	lsrs	r2, r2, #5
 8010214:	7042      	strb	r2, [r0, #1]
 8010216:	780a      	ldrb	r2, [r1, #0]
 8010218:	8889      	ldrh	r1, [r1, #4]
 801021a:	f1a2 0202 	sub.w	r2, r2, #2
 801021e:	8081      	strh	r1, [r0, #4]
 8010220:	fab2 f282 	clz	r2, r2
 8010224:	0952      	lsrs	r2, r2, #5
 8010226:	7082      	strb	r2, [r0, #2]
 8010228:	4770      	bx	lr
 801022a:	bf00      	nop

0801022c <generate_type_name>:
 801022c:	2300      	movs	r3, #0
 801022e:	b530      	push	{r4, r5, lr}
 8010230:	700b      	strb	r3, [r1, #0]
 8010232:	b087      	sub	sp, #28
 8010234:	6803      	ldr	r3, [r0, #0]
 8010236:	4614      	mov	r4, r2
 8010238:	b1bb      	cbz	r3, 801026a <generate_type_name+0x3e>
 801023a:	4a0e      	ldr	r2, [pc, #56]	@ (8010274 <generate_type_name+0x48>)
 801023c:	4615      	mov	r5, r2
 801023e:	9500      	str	r5, [sp, #0]
 8010240:	9203      	str	r2, [sp, #12]
 8010242:	4d0d      	ldr	r5, [pc, #52]	@ (8010278 <generate_type_name+0x4c>)
 8010244:	6842      	ldr	r2, [r0, #4]
 8010246:	4608      	mov	r0, r1
 8010248:	490c      	ldr	r1, [pc, #48]	@ (801027c <generate_type_name+0x50>)
 801024a:	9204      	str	r2, [sp, #16]
 801024c:	9105      	str	r1, [sp, #20]
 801024e:	9102      	str	r1, [sp, #8]
 8010250:	4621      	mov	r1, r4
 8010252:	4a0b      	ldr	r2, [pc, #44]	@ (8010280 <generate_type_name+0x54>)
 8010254:	9501      	str	r5, [sp, #4]
 8010256:	f00b faa9 	bl	801b7ac <sniprintf>
 801025a:	2800      	cmp	r0, #0
 801025c:	bfa8      	it	ge
 801025e:	4284      	cmpge	r4, r0
 8010260:	bfcc      	ite	gt
 8010262:	2001      	movgt	r0, #1
 8010264:	2000      	movle	r0, #0
 8010266:	b007      	add	sp, #28
 8010268:	bd30      	pop	{r4, r5, pc}
 801026a:	4b06      	ldr	r3, [pc, #24]	@ (8010284 <generate_type_name+0x58>)
 801026c:	4a01      	ldr	r2, [pc, #4]	@ (8010274 <generate_type_name+0x48>)
 801026e:	461d      	mov	r5, r3
 8010270:	e7e5      	b.n	801023e <generate_type_name+0x12>
 8010272:	bf00      	nop
 8010274:	0801cb20 	.word	0x0801cb20
 8010278:	0801cb38 	.word	0x0801cb38
 801027c:	0801cb34 	.word	0x0801cb34
 8010280:	0801cb24 	.word	0x0801cb24
 8010284:	0801d540 	.word	0x0801d540

08010288 <generate_topic_name>:
 8010288:	b530      	push	{r4, r5, lr}
 801028a:	4614      	mov	r4, r2
 801028c:	b083      	sub	sp, #12
 801028e:	4605      	mov	r5, r0
 8010290:	4b07      	ldr	r3, [pc, #28]	@ (80102b0 <generate_topic_name+0x28>)
 8010292:	4a08      	ldr	r2, [pc, #32]	@ (80102b4 <generate_topic_name+0x2c>)
 8010294:	4608      	mov	r0, r1
 8010296:	9500      	str	r5, [sp, #0]
 8010298:	4621      	mov	r1, r4
 801029a:	f00b fa87 	bl	801b7ac <sniprintf>
 801029e:	2800      	cmp	r0, #0
 80102a0:	bfa8      	it	ge
 80102a2:	4284      	cmpge	r4, r0
 80102a4:	bfcc      	ite	gt
 80102a6:	2001      	movgt	r0, #1
 80102a8:	2000      	movle	r0, #0
 80102aa:	b003      	add	sp, #12
 80102ac:	bd30      	pop	{r4, r5, pc}
 80102ae:	bf00      	nop
 80102b0:	0801cb44 	.word	0x0801cb44
 80102b4:	0801cb3c 	.word	0x0801cb3c

080102b8 <is_uxrce_rmw_identifier_valid>:
 80102b8:	b510      	push	{r4, lr}
 80102ba:	4604      	mov	r4, r0
 80102bc:	b140      	cbz	r0, 80102d0 <is_uxrce_rmw_identifier_valid+0x18>
 80102be:	f008 fe2d 	bl	8018f1c <rmw_get_implementation_identifier>
 80102c2:	4601      	mov	r1, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	f7f0 f80b 	bl	80002e0 <strcmp>
 80102ca:	fab0 f080 	clz	r0, r0
 80102ce:	0940      	lsrs	r0, r0, #5
 80102d0:	bd10      	pop	{r4, pc}
 80102d2:	bf00      	nop

080102d4 <get_message_typesupport_handle>:
 80102d4:	6883      	ldr	r3, [r0, #8]
 80102d6:	4718      	bx	r3

080102d8 <get_message_typesupport_handle_function>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	4604      	mov	r4, r0
 80102dc:	6800      	ldr	r0, [r0, #0]
 80102de:	f7ef ffff 	bl	80002e0 <strcmp>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	bf0c      	ite	eq
 80102e6:	4620      	moveq	r0, r4
 80102e8:	2000      	movne	r0, #0
 80102ea:	bd10      	pop	{r4, pc}

080102ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80102ec:	4b04      	ldr	r3, [pc, #16]	@ (8010300 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	b10a      	cbz	r2, 80102f6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 80102f2:	4803      	ldr	r0, [pc, #12]	@ (8010300 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80102f4:	4770      	bx	lr
 80102f6:	4a03      	ldr	r2, [pc, #12]	@ (8010304 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 80102f8:	4801      	ldr	r0, [pc, #4]	@ (8010300 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80102fa:	6812      	ldr	r2, [r2, #0]
 80102fc:	601a      	str	r2, [r3, #0]
 80102fe:	4770      	bx	lr
 8010300:	24000050 	.word	0x24000050
 8010304:	240001b4 	.word	0x240001b4

08010308 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010308:	4a02      	ldr	r2, [pc, #8]	@ (8010314 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 801030a:	4b03      	ldr	r3, [pc, #12]	@ (8010318 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 801030c:	6812      	ldr	r2, [r2, #0]
 801030e:	601a      	str	r2, [r3, #0]
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	240001b4 	.word	0x240001b4
 8010318:	24000050 	.word	0x24000050

0801031c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 801031c:	6840      	ldr	r0, [r0, #4]
 801031e:	4770      	bx	lr

08010320 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8010320:	6800      	ldr	r0, [r0, #0]
 8010322:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010326:	4770      	bx	lr

08010328 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8010328:	6803      	ldr	r3, [r0, #0]
 801032a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801032e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010332:	e9c2 0100 	strd	r0, r1, [r2]
 8010336:	4770      	bx	lr

08010338 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8010338:	6803      	ldr	r3, [r0, #0]
 801033a:	ed92 7b00 	vldr	d7, [r2]
 801033e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010342:	ed81 7b00 	vstr	d7, [r1]
 8010346:	4770      	bx	lr

08010348 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 8010348:	f009 b9e0 	b.w	801970c <std_msgs__msg__Float64MultiArray__init>

0801034c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 801034c:	f009 ba02 	b.w	8019754 <std_msgs__msg__Float64MultiArray__fini>

08010350 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 8010350:	b510      	push	{r4, lr}
 8010352:	4604      	mov	r4, r0
 8010354:	b082      	sub	sp, #8
 8010356:	9101      	str	r1, [sp, #4]
 8010358:	f009 f996 	bl	8019688 <rosidl_runtime_c__double__Sequence__fini>
 801035c:	9901      	ldr	r1, [sp, #4]
 801035e:	4620      	mov	r0, r4
 8010360:	b002      	add	sp, #8
 8010362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010366:	f009 b977 	b.w	8019658 <rosidl_runtime_c__double__Sequence__init>
 801036a:	bf00      	nop

0801036c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 801036c:	6800      	ldr	r0, [r0, #0]
 801036e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010372:	4770      	bx	lr

08010374 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010374:	b508      	push	{r3, lr}
 8010376:	f000 f857 	bl	8010428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801037a:	4b06      	ldr	r3, [pc, #24]	@ (8010394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 801037c:	4906      	ldr	r1, [pc, #24]	@ (8010398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	60c8      	str	r0, [r1, #12]
 8010382:	b10a      	cbz	r2, 8010388 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 8010384:	4803      	ldr	r0, [pc, #12]	@ (8010394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8010386:	bd08      	pop	{r3, pc}
 8010388:	4a04      	ldr	r2, [pc, #16]	@ (801039c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 801038a:	4802      	ldr	r0, [pc, #8]	@ (8010394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 801038c:	6812      	ldr	r2, [r2, #0]
 801038e:	601a      	str	r2, [r3, #0]
 8010390:	bd08      	pop	{r3, pc}
 8010392:	bf00      	nop
 8010394:	240000d4 	.word	0x240000d4
 8010398:	2400005c 	.word	0x2400005c
 801039c:	240001b8 	.word	0x240001b8

080103a0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 80103a0:	6840      	ldr	r0, [r0, #4]
 80103a2:	4770      	bx	lr

080103a4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 80103a4:	6800      	ldr	r0, [r0, #0]
 80103a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80103aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80103ae:	4770      	bx	lr

080103b0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 80103b0:	6803      	ldr	r3, [r0, #0]
 80103b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80103b6:	4694      	mov	ip, r2
 80103b8:	b500      	push	{lr}
 80103ba:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 80103be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103c6:	f8de 3000 	ldr.w	r3, [lr]
 80103ca:	f8cc 3000 	str.w	r3, [ip]
 80103ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80103d2:	bf00      	nop

080103d4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 80103d4:	6803      	ldr	r3, [r0, #0]
 80103d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80103da:	b500      	push	{lr}
 80103dc:	4696      	mov	lr, r2
 80103de:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 80103e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103ea:	f8de 3000 	ldr.w	r3, [lr]
 80103ee:	f8cc 3000 	str.w	r3, [ip]
 80103f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80103f6:	bf00      	nop

080103f8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 80103f8:	f009 ba40 	b.w	801987c <std_msgs__msg__MultiArrayLayout__init>

080103fc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 80103fc:	f009 ba50 	b.w	80198a0 <std_msgs__msg__MultiArrayLayout__fini>

08010400 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4604      	mov	r4, r0
 8010404:	b082      	sub	sp, #8
 8010406:	9101      	str	r1, [sp, #4]
 8010408:	f009 fa10 	bl	801982c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801040c:	9901      	ldr	r1, [sp, #4]
 801040e:	4620      	mov	r0, r4
 8010410:	b002      	add	sp, #8
 8010412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010416:	f009 ba05 	b.w	8019824 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801041a:	bf00      	nop

0801041c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 801041c:	6800      	ldr	r0, [r0, #0]
 801041e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010422:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010426:	4770      	bx	lr

08010428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010428:	b508      	push	{r3, lr}
 801042a:	f009 fa41 	bl	80198b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801042e:	4b06      	ldr	r3, [pc, #24]	@ (8010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010430:	4906      	ldr	r1, [pc, #24]	@ (801044c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	60c8      	str	r0, [r1, #12]
 8010436:	b10a      	cbz	r2, 801043c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8010438:	4803      	ldr	r0, [pc, #12]	@ (8010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 801043a:	bd08      	pop	{r3, pc}
 801043c:	4a04      	ldr	r2, [pc, #16]	@ (8010450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 801043e:	4802      	ldr	r0, [pc, #8]	@ (8010448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010440:	6812      	ldr	r2, [r2, #0]
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	bd08      	pop	{r3, pc}
 8010446:	bf00      	nop
 8010448:	24000158 	.word	0x24000158
 801044c:	240000e0 	.word	0x240000e0
 8010450:	240001b8 	.word	0x240001b8

08010454 <_Float64MultiArray__max_serialized_size>:
 8010454:	b500      	push	{lr}
 8010456:	b083      	sub	sp, #12
 8010458:	2301      	movs	r3, #1
 801045a:	2100      	movs	r1, #0
 801045c:	f10d 0007 	add.w	r0, sp, #7
 8010460:	f88d 3007 	strb.w	r3, [sp, #7]
 8010464:	f000 f91c 	bl	80106a0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010468:	b003      	add	sp, #12
 801046a:	f85d fb04 	ldr.w	pc, [sp], #4
 801046e:	bf00      	nop

08010470 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4604      	mov	r4, r0
 8010474:	b160      	cbz	r0, 8010490 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 8010476:	460d      	mov	r5, r1
 8010478:	f000 f8b6 	bl	80105e8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 801047c:	6966      	ldr	r6, [r4, #20]
 801047e:	2104      	movs	r1, #4
 8010480:	182c      	adds	r4, r5, r0
 8010482:	4620      	mov	r0, r4
 8010484:	f001 fa98 	bl	80119b8 <ucdr_alignment>
 8010488:	1d03      	adds	r3, r0, #4
 801048a:	441c      	add	r4, r3
 801048c:	b90e      	cbnz	r6, 8010492 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 801048e:	1b60      	subs	r0, r4, r5
 8010490:	bd70      	pop	{r4, r5, r6, pc}
 8010492:	4620      	mov	r0, r4
 8010494:	2108      	movs	r1, #8
 8010496:	f001 fa8f 	bl	80119b8 <ucdr_alignment>
 801049a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801049e:	181c      	adds	r4, r3, r0
 80104a0:	1b60      	subs	r0, r4, r5
 80104a2:	e7f5      	b.n	8010490 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

080104a4 <_Float64MultiArray__cdr_deserialize>:
 80104a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104a6:	460c      	mov	r4, r1
 80104a8:	b083      	sub	sp, #12
 80104aa:	b1d9      	cbz	r1, 80104e4 <_Float64MultiArray__cdr_deserialize+0x40>
 80104ac:	4606      	mov	r6, r0
 80104ae:	f000 f901 	bl	80106b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80104b2:	4603      	mov	r3, r0
 80104b4:	4621      	mov	r1, r4
 80104b6:	4630      	mov	r0, r6
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	4798      	blx	r3
 80104be:	69a7      	ldr	r7, [r4, #24]
 80104c0:	ab01      	add	r3, sp, #4
 80104c2:	6921      	ldr	r1, [r4, #16]
 80104c4:	463a      	mov	r2, r7
 80104c6:	4630      	mov	r0, r6
 80104c8:	f001 fb50 	bl	8011b6c <ucdr_deserialize_sequence_double>
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	4605      	mov	r5, r0
 80104d0:	b920      	cbnz	r0, 80104dc <_Float64MultiArray__cdr_deserialize+0x38>
 80104d2:	429f      	cmp	r7, r3
 80104d4:	d30a      	bcc.n	80104ec <_Float64MultiArray__cdr_deserialize+0x48>
 80104d6:	4628      	mov	r0, r5
 80104d8:	b003      	add	sp, #12
 80104da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104dc:	4628      	mov	r0, r5
 80104de:	6163      	str	r3, [r4, #20]
 80104e0:	b003      	add	sp, #12
 80104e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e4:	460d      	mov	r5, r1
 80104e6:	4628      	mov	r0, r5
 80104e8:	b003      	add	sp, #12
 80104ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ec:	2301      	movs	r3, #1
 80104ee:	4630      	mov	r0, r6
 80104f0:	75b5      	strb	r5, [r6, #22]
 80104f2:	2108      	movs	r1, #8
 80104f4:	7573      	strb	r3, [r6, #21]
 80104f6:	6165      	str	r5, [r4, #20]
 80104f8:	f001 fa76 	bl	80119e8 <ucdr_align_to>
 80104fc:	9901      	ldr	r1, [sp, #4]
 80104fe:	4630      	mov	r0, r6
 8010500:	00c9      	lsls	r1, r1, #3
 8010502:	f001 faa9 	bl	8011a58 <ucdr_advance_buffer>
 8010506:	4628      	mov	r0, r5
 8010508:	b003      	add	sp, #12
 801050a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801050c <_Float64MultiArray__cdr_serialize>:
 801050c:	b188      	cbz	r0, 8010532 <_Float64MultiArray__cdr_serialize+0x26>
 801050e:	b538      	push	{r3, r4, r5, lr}
 8010510:	4604      	mov	r4, r0
 8010512:	460d      	mov	r5, r1
 8010514:	f000 f8ce 	bl	80106b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010518:	4603      	mov	r3, r0
 801051a:	4629      	mov	r1, r5
 801051c:	4620      	mov	r0, r4
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	4798      	blx	r3
 8010524:	4628      	mov	r0, r5
 8010526:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801052a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801052e:	f001 bb0b 	b.w	8011b48 <ucdr_serialize_sequence_double>
 8010532:	4770      	bx	lr

08010534 <_Float64MultiArray__get_serialized_size>:
 8010534:	b538      	push	{r3, r4, r5, lr}
 8010536:	4604      	mov	r4, r0
 8010538:	b150      	cbz	r0, 8010550 <_Float64MultiArray__get_serialized_size+0x1c>
 801053a:	2100      	movs	r1, #0
 801053c:	f000 f854 	bl	80105e8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010540:	6965      	ldr	r5, [r4, #20]
 8010542:	4604      	mov	r4, r0
 8010544:	2104      	movs	r1, #4
 8010546:	f001 fa37 	bl	80119b8 <ucdr_alignment>
 801054a:	4404      	add	r4, r0
 801054c:	3404      	adds	r4, #4
 801054e:	b90d      	cbnz	r5, 8010554 <_Float64MultiArray__get_serialized_size+0x20>
 8010550:	4620      	mov	r0, r4
 8010552:	bd38      	pop	{r3, r4, r5, pc}
 8010554:	4620      	mov	r0, r4
 8010556:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801055a:	2108      	movs	r1, #8
 801055c:	f001 fa2c 	bl	80119b8 <ucdr_alignment>
 8010560:	4404      	add	r4, r0
 8010562:	4620      	mov	r0, r4
 8010564:	bd38      	pop	{r3, r4, r5, pc}
 8010566:	bf00      	nop

08010568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010568:	4800      	ldr	r0, [pc, #0]	@ (801056c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 801056a:	4770      	bx	lr
 801056c:	24000164 	.word	0x24000164

08010570 <_MultiArrayLayout__max_serialized_size>:
 8010570:	2104      	movs	r1, #4
 8010572:	2000      	movs	r0, #0
 8010574:	b508      	push	{r3, lr}
 8010576:	f001 fa1f 	bl	80119b8 <ucdr_alignment>
 801057a:	3004      	adds	r0, #4
 801057c:	bd08      	pop	{r3, pc}
 801057e:	bf00      	nop

08010580 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8010580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010584:	4689      	mov	r9, r1
 8010586:	4607      	mov	r7, r0
 8010588:	2104      	movs	r1, #4
 801058a:	4648      	mov	r0, r9
 801058c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8010590:	f001 fa12 	bl	80119b8 <ucdr_alignment>
 8010594:	f109 0304 	add.w	r3, r9, #4
 8010598:	18c6      	adds	r6, r0, r3
 801059a:	f1b8 0f00 	cmp.w	r8, #0
 801059e:	d018      	beq.n	80105d2 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 80105a0:	2500      	movs	r5, #0
 80105a2:	f009 fa23 	bl	80199ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 80105ac:	6843      	ldr	r3, [r0, #4]
 80105ae:	4631      	mov	r1, r6
 80105b0:	3501      	adds	r5, #1
 80105b2:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	4798      	blx	r3
 80105ba:	4604      	mov	r4, r0
 80105bc:	4630      	mov	r0, r6
 80105be:	2c04      	cmp	r4, #4
 80105c0:	4621      	mov	r1, r4
 80105c2:	bf28      	it	cs
 80105c4:	2104      	movcs	r1, #4
 80105c6:	f001 f9f7 	bl	80119b8 <ucdr_alignment>
 80105ca:	45a8      	cmp	r8, r5
 80105cc:	4404      	add	r4, r0
 80105ce:	4426      	add	r6, r4
 80105d0:	d1e7      	bne.n	80105a2 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 80105d2:	f1c9 0904 	rsb	r9, r9, #4
 80105d6:	4630      	mov	r0, r6
 80105d8:	2104      	movs	r1, #4
 80105da:	444e      	add	r6, r9
 80105dc:	f001 f9ec 	bl	80119b8 <ucdr_alignment>
 80105e0:	4430      	add	r0, r6
 80105e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105e6:	bf00      	nop

080105e8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 80105e8:	b108      	cbz	r0, 80105ee <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 80105ea:	f7ff bfc9 	b.w	8010580 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 80105ee:	4770      	bx	lr

080105f0 <_MultiArrayLayout__get_serialized_size>:
 80105f0:	b110      	cbz	r0, 80105f8 <_MultiArrayLayout__get_serialized_size+0x8>
 80105f2:	2100      	movs	r1, #0
 80105f4:	f7ff bfc4 	b.w	8010580 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop

080105fc <_MultiArrayLayout__cdr_deserialize>:
 80105fc:	b349      	cbz	r1, 8010652 <_MultiArrayLayout__cdr_deserialize+0x56>
 80105fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010600:	b083      	sub	sp, #12
 8010602:	460e      	mov	r6, r1
 8010604:	4607      	mov	r7, r0
 8010606:	a901      	add	r1, sp, #4
 8010608:	f000 fbcc 	bl	8010da4 <ucdr_deserialize_uint32_t>
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	68b2      	ldr	r2, [r6, #8]
 8010610:	429a      	cmp	r2, r3
 8010612:	d31b      	bcc.n	801064c <_MultiArrayLayout__cdr_deserialize+0x50>
 8010614:	6073      	str	r3, [r6, #4]
 8010616:	b18b      	cbz	r3, 801063c <_MultiArrayLayout__cdr_deserialize+0x40>
 8010618:	2400      	movs	r4, #0
 801061a:	4625      	mov	r5, r4
 801061c:	e002      	b.n	8010624 <_MultiArrayLayout__cdr_deserialize+0x28>
 801061e:	9b01      	ldr	r3, [sp, #4]
 8010620:	429d      	cmp	r5, r3
 8010622:	d20b      	bcs.n	801063c <_MultiArrayLayout__cdr_deserialize+0x40>
 8010624:	f009 f9e2 	bl	80199ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010628:	6831      	ldr	r1, [r6, #0]
 801062a:	6843      	ldr	r3, [r0, #4]
 801062c:	4638      	mov	r0, r7
 801062e:	4421      	add	r1, r4
 8010630:	3501      	adds	r5, #1
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	3414      	adds	r4, #20
 8010636:	4798      	blx	r3
 8010638:	2800      	cmp	r0, #0
 801063a:	d1f0      	bne.n	801061e <_MultiArrayLayout__cdr_deserialize+0x22>
 801063c:	f106 010c 	add.w	r1, r6, #12
 8010640:	4638      	mov	r0, r7
 8010642:	b003      	add	sp, #12
 8010644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010648:	f000 bbac 	b.w	8010da4 <ucdr_deserialize_uint32_t>
 801064c:	2000      	movs	r0, #0
 801064e:	b003      	add	sp, #12
 8010650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010652:	2000      	movs	r0, #0
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop

08010658 <_MultiArrayLayout__cdr_serialize>:
 8010658:	b308      	cbz	r0, 801069e <_MultiArrayLayout__cdr_serialize+0x46>
 801065a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065c:	6847      	ldr	r7, [r0, #4]
 801065e:	4605      	mov	r5, r0
 8010660:	460e      	mov	r6, r1
 8010662:	4608      	mov	r0, r1
 8010664:	4639      	mov	r1, r7
 8010666:	f000 fa6d 	bl	8010b44 <ucdr_serialize_uint32_t>
 801066a:	b190      	cbz	r0, 8010692 <_MultiArrayLayout__cdr_serialize+0x3a>
 801066c:	b18f      	cbz	r7, 8010692 <_MultiArrayLayout__cdr_serialize+0x3a>
 801066e:	2400      	movs	r4, #0
 8010670:	e001      	b.n	8010676 <_MultiArrayLayout__cdr_serialize+0x1e>
 8010672:	42a7      	cmp	r7, r4
 8010674:	d00d      	beq.n	8010692 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010676:	f009 f9b9 	bl	80199ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801067a:	682a      	ldr	r2, [r5, #0]
 801067c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8010680:	6843      	ldr	r3, [r0, #4]
 8010682:	4631      	mov	r1, r6
 8010684:	3401      	adds	r4, #1
 8010686:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	4798      	blx	r3
 801068e:	2800      	cmp	r0, #0
 8010690:	d1ef      	bne.n	8010672 <_MultiArrayLayout__cdr_serialize+0x1a>
 8010692:	68e9      	ldr	r1, [r5, #12]
 8010694:	4630      	mov	r0, r6
 8010696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801069a:	f000 ba53 	b.w	8010b44 <ucdr_serialize_uint32_t>
 801069e:	4770      	bx	lr

080106a0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 80106a0:	b508      	push	{r3, lr}
 80106a2:	2200      	movs	r2, #0
 80106a4:	4603      	mov	r3, r0
 80106a6:	4608      	mov	r0, r1
 80106a8:	2104      	movs	r1, #4
 80106aa:	701a      	strb	r2, [r3, #0]
 80106ac:	f001 f984 	bl	80119b8 <ucdr_alignment>
 80106b0:	3004      	adds	r0, #4
 80106b2:	bd08      	pop	{r3, pc}

080106b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 80106b4:	4800      	ldr	r0, [pc, #0]	@ (80106b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 80106b6:	4770      	bx	lr
 80106b8:	2400018c 	.word	0x2400018c

080106bc <ucdr_serialize_bool>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	460d      	mov	r5, r1
 80106c0:	2101      	movs	r1, #1
 80106c2:	4604      	mov	r4, r0
 80106c4:	f001 f92c 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80106c8:	b148      	cbz	r0, 80106de <ucdr_serialize_bool+0x22>
 80106ca:	68a3      	ldr	r3, [r4, #8]
 80106cc:	2101      	movs	r1, #1
 80106ce:	701d      	strb	r5, [r3, #0]
 80106d0:	68a2      	ldr	r2, [r4, #8]
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	440a      	add	r2, r1
 80106d6:	7561      	strb	r1, [r4, #21]
 80106d8:	440b      	add	r3, r1
 80106da:	60a2      	str	r2, [r4, #8]
 80106dc:	6123      	str	r3, [r4, #16]
 80106de:	7da0      	ldrb	r0, [r4, #22]
 80106e0:	f080 0001 	eor.w	r0, r0, #1
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	bf00      	nop

080106e8 <ucdr_deserialize_bool>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	460d      	mov	r5, r1
 80106ec:	2101      	movs	r1, #1
 80106ee:	4604      	mov	r4, r0
 80106f0:	f001 f916 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80106f4:	b160      	cbz	r0, 8010710 <ucdr_deserialize_bool+0x28>
 80106f6:	68a2      	ldr	r2, [r4, #8]
 80106f8:	2101      	movs	r1, #1
 80106fa:	6923      	ldr	r3, [r4, #16]
 80106fc:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010700:	440b      	add	r3, r1
 8010702:	3800      	subs	r0, #0
 8010704:	bf18      	it	ne
 8010706:	2001      	movne	r0, #1
 8010708:	7028      	strb	r0, [r5, #0]
 801070a:	60a2      	str	r2, [r4, #8]
 801070c:	6123      	str	r3, [r4, #16]
 801070e:	7561      	strb	r1, [r4, #21]
 8010710:	7da0      	ldrb	r0, [r4, #22]
 8010712:	f080 0001 	eor.w	r0, r0, #1
 8010716:	bd38      	pop	{r3, r4, r5, pc}

08010718 <ucdr_serialize_uint8_t>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	460d      	mov	r5, r1
 801071c:	2101      	movs	r1, #1
 801071e:	4604      	mov	r4, r0
 8010720:	f001 f8fe 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010724:	b148      	cbz	r0, 801073a <ucdr_serialize_uint8_t+0x22>
 8010726:	68a3      	ldr	r3, [r4, #8]
 8010728:	2101      	movs	r1, #1
 801072a:	701d      	strb	r5, [r3, #0]
 801072c:	68a2      	ldr	r2, [r4, #8]
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	440a      	add	r2, r1
 8010732:	7561      	strb	r1, [r4, #21]
 8010734:	440b      	add	r3, r1
 8010736:	60a2      	str	r2, [r4, #8]
 8010738:	6123      	str	r3, [r4, #16]
 801073a:	7da0      	ldrb	r0, [r4, #22]
 801073c:	f080 0001 	eor.w	r0, r0, #1
 8010740:	bd38      	pop	{r3, r4, r5, pc}
 8010742:	bf00      	nop

08010744 <ucdr_deserialize_uint8_t>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	460d      	mov	r5, r1
 8010748:	2101      	movs	r1, #1
 801074a:	4604      	mov	r4, r0
 801074c:	f001 f8e8 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010750:	b150      	cbz	r0, 8010768 <ucdr_deserialize_uint8_t+0x24>
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	2101      	movs	r1, #1
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	702b      	strb	r3, [r5, #0]
 801075a:	68a2      	ldr	r2, [r4, #8]
 801075c:	6923      	ldr	r3, [r4, #16]
 801075e:	440a      	add	r2, r1
 8010760:	7561      	strb	r1, [r4, #21]
 8010762:	440b      	add	r3, r1
 8010764:	60a2      	str	r2, [r4, #8]
 8010766:	6123      	str	r3, [r4, #16]
 8010768:	7da0      	ldrb	r0, [r4, #22]
 801076a:	f080 0001 	eor.w	r0, r0, #1
 801076e:	bd38      	pop	{r3, r4, r5, pc}

08010770 <ucdr_serialize_uint16_t>:
 8010770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	460b      	mov	r3, r1
 8010776:	b082      	sub	sp, #8
 8010778:	4604      	mov	r4, r0
 801077a:	2102      	movs	r1, #2
 801077c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010780:	f001 f922 	bl	80119c8 <ucdr_buffer_alignment>
 8010784:	4601      	mov	r1, r0
 8010786:	4620      	mov	r0, r4
 8010788:	7d67      	ldrb	r7, [r4, #21]
 801078a:	f001 f965 	bl	8011a58 <ucdr_advance_buffer>
 801078e:	2102      	movs	r1, #2
 8010790:	4620      	mov	r0, r4
 8010792:	f001 f8b9 	bl	8011908 <ucdr_check_buffer_available_for>
 8010796:	bb78      	cbnz	r0, 80107f8 <ucdr_serialize_uint16_t+0x88>
 8010798:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801079c:	42ab      	cmp	r3, r5
 801079e:	d926      	bls.n	80107ee <ucdr_serialize_uint16_t+0x7e>
 80107a0:	1b5e      	subs	r6, r3, r5
 80107a2:	60a3      	str	r3, [r4, #8]
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	4620      	mov	r0, r4
 80107a8:	f1c6 0802 	rsb	r8, r6, #2
 80107ac:	4433      	add	r3, r6
 80107ae:	4641      	mov	r1, r8
 80107b0:	6123      	str	r3, [r4, #16]
 80107b2:	f001 f8b5 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d03b      	beq.n	8010832 <ucdr_serialize_uint16_t+0xc2>
 80107ba:	7d23      	ldrb	r3, [r4, #20]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d04a      	beq.n	8010856 <ucdr_serialize_uint16_t+0xe6>
 80107c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107c4:	702b      	strb	r3, [r5, #0]
 80107c6:	2e00      	cmp	r6, #0
 80107c8:	d040      	beq.n	801084c <ucdr_serialize_uint16_t+0xdc>
 80107ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107ce:	706b      	strb	r3, [r5, #1]
 80107d0:	6923      	ldr	r3, [r4, #16]
 80107d2:	2102      	movs	r1, #2
 80107d4:	68a2      	ldr	r2, [r4, #8]
 80107d6:	3302      	adds	r3, #2
 80107d8:	7da0      	ldrb	r0, [r4, #22]
 80107da:	4442      	add	r2, r8
 80107dc:	7561      	strb	r1, [r4, #21]
 80107de:	1b9e      	subs	r6, r3, r6
 80107e0:	f080 0001 	eor.w	r0, r0, #1
 80107e4:	60a2      	str	r2, [r4, #8]
 80107e6:	6126      	str	r6, [r4, #16]
 80107e8:	b002      	add	sp, #8
 80107ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ee:	2102      	movs	r1, #2
 80107f0:	4620      	mov	r0, r4
 80107f2:	f001 f895 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80107f6:	b190      	cbz	r0, 801081e <ucdr_serialize_uint16_t+0xae>
 80107f8:	7d23      	ldrb	r3, [r4, #20]
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	68a3      	ldr	r3, [r4, #8]
 80107fe:	d014      	beq.n	801082a <ucdr_serialize_uint16_t+0xba>
 8010800:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010804:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010808:	7019      	strb	r1, [r3, #0]
 801080a:	68a3      	ldr	r3, [r4, #8]
 801080c:	705a      	strb	r2, [r3, #1]
 801080e:	2102      	movs	r1, #2
 8010810:	68a2      	ldr	r2, [r4, #8]
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	440a      	add	r2, r1
 8010816:	7561      	strb	r1, [r4, #21]
 8010818:	440b      	add	r3, r1
 801081a:	60a2      	str	r2, [r4, #8]
 801081c:	6123      	str	r3, [r4, #16]
 801081e:	7da0      	ldrb	r0, [r4, #22]
 8010820:	f080 0001 	eor.w	r0, r0, #1
 8010824:	b002      	add	sp, #8
 8010826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801082a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801082e:	801a      	strh	r2, [r3, #0]
 8010830:	e7ed      	b.n	801080e <ucdr_serialize_uint16_t+0x9e>
 8010832:	68a2      	ldr	r2, [r4, #8]
 8010834:	6923      	ldr	r3, [r4, #16]
 8010836:	7da0      	ldrb	r0, [r4, #22]
 8010838:	1b92      	subs	r2, r2, r6
 801083a:	1b9b      	subs	r3, r3, r6
 801083c:	7567      	strb	r7, [r4, #21]
 801083e:	f080 0001 	eor.w	r0, r0, #1
 8010842:	60a2      	str	r2, [r4, #8]
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	b002      	add	sp, #8
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	68a3      	ldr	r3, [r4, #8]
 801084e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	e7bc      	b.n	80107d0 <ucdr_serialize_uint16_t+0x60>
 8010856:	4628      	mov	r0, r5
 8010858:	f10d 0506 	add.w	r5, sp, #6
 801085c:	4632      	mov	r2, r6
 801085e:	4629      	mov	r1, r5
 8010860:	f00b f9db 	bl	801bc1a <memcpy>
 8010864:	4642      	mov	r2, r8
 8010866:	19a9      	adds	r1, r5, r6
 8010868:	68a0      	ldr	r0, [r4, #8]
 801086a:	f00b f9d6 	bl	801bc1a <memcpy>
 801086e:	e7af      	b.n	80107d0 <ucdr_serialize_uint16_t+0x60>

08010870 <ucdr_serialize_endian_uint16_t>:
 8010870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	b083      	sub	sp, #12
 8010878:	460d      	mov	r5, r1
 801087a:	2102      	movs	r1, #2
 801087c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010880:	f001 f8a2 	bl	80119c8 <ucdr_buffer_alignment>
 8010884:	4601      	mov	r1, r0
 8010886:	4620      	mov	r0, r4
 8010888:	f894 8015 	ldrb.w	r8, [r4, #21]
 801088c:	f001 f8e4 	bl	8011a58 <ucdr_advance_buffer>
 8010890:	2102      	movs	r1, #2
 8010892:	4620      	mov	r0, r4
 8010894:	f001 f838 	bl	8011908 <ucdr_check_buffer_available_for>
 8010898:	bb70      	cbnz	r0, 80108f8 <ucdr_serialize_endian_uint16_t+0x88>
 801089a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801089e:	42be      	cmp	r6, r7
 80108a0:	d925      	bls.n	80108ee <ucdr_serialize_endian_uint16_t+0x7e>
 80108a2:	6923      	ldr	r3, [r4, #16]
 80108a4:	4620      	mov	r0, r4
 80108a6:	60a6      	str	r6, [r4, #8]
 80108a8:	1bf6      	subs	r6, r6, r7
 80108aa:	4433      	add	r3, r6
 80108ac:	f1c6 0902 	rsb	r9, r6, #2
 80108b0:	6123      	str	r3, [r4, #16]
 80108b2:	4649      	mov	r1, r9
 80108b4:	f001 f834 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d039      	beq.n	8010930 <ucdr_serialize_endian_uint16_t+0xc0>
 80108bc:	2d01      	cmp	r5, #1
 80108be:	d04a      	beq.n	8010956 <ucdr_serialize_endian_uint16_t+0xe6>
 80108c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80108c4:	703b      	strb	r3, [r7, #0]
 80108c6:	2e00      	cmp	r6, #0
 80108c8:	d040      	beq.n	801094c <ucdr_serialize_endian_uint16_t+0xdc>
 80108ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80108ce:	707b      	strb	r3, [r7, #1]
 80108d0:	6923      	ldr	r3, [r4, #16]
 80108d2:	2102      	movs	r1, #2
 80108d4:	68a2      	ldr	r2, [r4, #8]
 80108d6:	7da0      	ldrb	r0, [r4, #22]
 80108d8:	3302      	adds	r3, #2
 80108da:	444a      	add	r2, r9
 80108dc:	7561      	strb	r1, [r4, #21]
 80108de:	1b9b      	subs	r3, r3, r6
 80108e0:	f080 0001 	eor.w	r0, r0, #1
 80108e4:	60a2      	str	r2, [r4, #8]
 80108e6:	6123      	str	r3, [r4, #16]
 80108e8:	b003      	add	sp, #12
 80108ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ee:	2102      	movs	r1, #2
 80108f0:	4620      	mov	r0, r4
 80108f2:	f001 f815 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80108f6:	b188      	cbz	r0, 801091c <ucdr_serialize_endian_uint16_t+0xac>
 80108f8:	2d01      	cmp	r5, #1
 80108fa:	68a3      	ldr	r3, [r4, #8]
 80108fc:	d014      	beq.n	8010928 <ucdr_serialize_endian_uint16_t+0xb8>
 80108fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010902:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010906:	7019      	strb	r1, [r3, #0]
 8010908:	68a3      	ldr	r3, [r4, #8]
 801090a:	705a      	strb	r2, [r3, #1]
 801090c:	2102      	movs	r1, #2
 801090e:	68a2      	ldr	r2, [r4, #8]
 8010910:	6923      	ldr	r3, [r4, #16]
 8010912:	440a      	add	r2, r1
 8010914:	7561      	strb	r1, [r4, #21]
 8010916:	440b      	add	r3, r1
 8010918:	60a2      	str	r2, [r4, #8]
 801091a:	6123      	str	r3, [r4, #16]
 801091c:	7da0      	ldrb	r0, [r4, #22]
 801091e:	f080 0001 	eor.w	r0, r0, #1
 8010922:	b003      	add	sp, #12
 8010924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010928:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801092c:	801a      	strh	r2, [r3, #0]
 801092e:	e7ed      	b.n	801090c <ucdr_serialize_endian_uint16_t+0x9c>
 8010930:	68a2      	ldr	r2, [r4, #8]
 8010932:	6923      	ldr	r3, [r4, #16]
 8010934:	7da0      	ldrb	r0, [r4, #22]
 8010936:	1b92      	subs	r2, r2, r6
 8010938:	1b9b      	subs	r3, r3, r6
 801093a:	f884 8015 	strb.w	r8, [r4, #21]
 801093e:	f080 0001 	eor.w	r0, r0, #1
 8010942:	60a2      	str	r2, [r4, #8]
 8010944:	6123      	str	r3, [r4, #16]
 8010946:	b003      	add	sp, #12
 8010948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801094c:	68a3      	ldr	r3, [r4, #8]
 801094e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010952:	701a      	strb	r2, [r3, #0]
 8010954:	e7bc      	b.n	80108d0 <ucdr_serialize_endian_uint16_t+0x60>
 8010956:	f10d 0506 	add.w	r5, sp, #6
 801095a:	4632      	mov	r2, r6
 801095c:	4638      	mov	r0, r7
 801095e:	4629      	mov	r1, r5
 8010960:	f00b f95b 	bl	801bc1a <memcpy>
 8010964:	464a      	mov	r2, r9
 8010966:	19a9      	adds	r1, r5, r6
 8010968:	68a0      	ldr	r0, [r4, #8]
 801096a:	f00b f956 	bl	801bc1a <memcpy>
 801096e:	e7af      	b.n	80108d0 <ucdr_serialize_endian_uint16_t+0x60>

08010970 <ucdr_deserialize_uint16_t>:
 8010970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010974:	4604      	mov	r4, r0
 8010976:	460d      	mov	r5, r1
 8010978:	2102      	movs	r1, #2
 801097a:	f001 f825 	bl	80119c8 <ucdr_buffer_alignment>
 801097e:	4601      	mov	r1, r0
 8010980:	4620      	mov	r0, r4
 8010982:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010986:	f001 f867 	bl	8011a58 <ucdr_advance_buffer>
 801098a:	2102      	movs	r1, #2
 801098c:	4620      	mov	r0, r4
 801098e:	f000 ffbb 	bl	8011908 <ucdr_check_buffer_available_for>
 8010992:	bb60      	cbnz	r0, 80109ee <ucdr_deserialize_uint16_t+0x7e>
 8010994:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010998:	42be      	cmp	r6, r7
 801099a:	d923      	bls.n	80109e4 <ucdr_deserialize_uint16_t+0x74>
 801099c:	6923      	ldr	r3, [r4, #16]
 801099e:	4620      	mov	r0, r4
 80109a0:	60a6      	str	r6, [r4, #8]
 80109a2:	1bf6      	subs	r6, r6, r7
 80109a4:	4433      	add	r3, r6
 80109a6:	f1c6 0902 	rsb	r9, r6, #2
 80109aa:	6123      	str	r3, [r4, #16]
 80109ac:	4649      	mov	r1, r9
 80109ae:	f000 ffb7 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d034      	beq.n	8010a20 <ucdr_deserialize_uint16_t+0xb0>
 80109b6:	7d23      	ldrb	r3, [r4, #20]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d042      	beq.n	8010a42 <ucdr_deserialize_uint16_t+0xd2>
 80109bc:	787b      	ldrb	r3, [r7, #1]
 80109be:	702b      	strb	r3, [r5, #0]
 80109c0:	2e00      	cmp	r6, #0
 80109c2:	d03a      	beq.n	8010a3a <ucdr_deserialize_uint16_t+0xca>
 80109c4:	783b      	ldrb	r3, [r7, #0]
 80109c6:	706b      	strb	r3, [r5, #1]
 80109c8:	6923      	ldr	r3, [r4, #16]
 80109ca:	2102      	movs	r1, #2
 80109cc:	68a2      	ldr	r2, [r4, #8]
 80109ce:	3302      	adds	r3, #2
 80109d0:	7da0      	ldrb	r0, [r4, #22]
 80109d2:	444a      	add	r2, r9
 80109d4:	7561      	strb	r1, [r4, #21]
 80109d6:	1b9b      	subs	r3, r3, r6
 80109d8:	f080 0001 	eor.w	r0, r0, #1
 80109dc:	60a2      	str	r2, [r4, #8]
 80109de:	6123      	str	r3, [r4, #16]
 80109e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e4:	2102      	movs	r1, #2
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 ff9a 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80109ec:	b180      	cbz	r0, 8010a10 <ucdr_deserialize_uint16_t+0xa0>
 80109ee:	7d23      	ldrb	r3, [r4, #20]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	68a3      	ldr	r3, [r4, #8]
 80109f4:	d011      	beq.n	8010a1a <ucdr_deserialize_uint16_t+0xaa>
 80109f6:	785b      	ldrb	r3, [r3, #1]
 80109f8:	702b      	strb	r3, [r5, #0]
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	706b      	strb	r3, [r5, #1]
 8010a00:	2102      	movs	r1, #2
 8010a02:	68a2      	ldr	r2, [r4, #8]
 8010a04:	6923      	ldr	r3, [r4, #16]
 8010a06:	440a      	add	r2, r1
 8010a08:	7561      	strb	r1, [r4, #21]
 8010a0a:	440b      	add	r3, r1
 8010a0c:	60a2      	str	r2, [r4, #8]
 8010a0e:	6123      	str	r3, [r4, #16]
 8010a10:	7da0      	ldrb	r0, [r4, #22]
 8010a12:	f080 0001 	eor.w	r0, r0, #1
 8010a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a1a:	881b      	ldrh	r3, [r3, #0]
 8010a1c:	802b      	strh	r3, [r5, #0]
 8010a1e:	e7ef      	b.n	8010a00 <ucdr_deserialize_uint16_t+0x90>
 8010a20:	68a2      	ldr	r2, [r4, #8]
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	1b92      	subs	r2, r2, r6
 8010a26:	7da0      	ldrb	r0, [r4, #22]
 8010a28:	1b9b      	subs	r3, r3, r6
 8010a2a:	f884 8015 	strb.w	r8, [r4, #21]
 8010a2e:	f080 0001 	eor.w	r0, r0, #1
 8010a32:	60a2      	str	r2, [r4, #8]
 8010a34:	6123      	str	r3, [r4, #16]
 8010a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3a:	68a3      	ldr	r3, [r4, #8]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	706b      	strb	r3, [r5, #1]
 8010a40:	e7c2      	b.n	80109c8 <ucdr_deserialize_uint16_t+0x58>
 8010a42:	4639      	mov	r1, r7
 8010a44:	4632      	mov	r2, r6
 8010a46:	4628      	mov	r0, r5
 8010a48:	f00b f8e7 	bl	801bc1a <memcpy>
 8010a4c:	464a      	mov	r2, r9
 8010a4e:	19a8      	adds	r0, r5, r6
 8010a50:	68a1      	ldr	r1, [r4, #8]
 8010a52:	f00b f8e2 	bl	801bc1a <memcpy>
 8010a56:	e7b7      	b.n	80109c8 <ucdr_deserialize_uint16_t+0x58>

08010a58 <ucdr_deserialize_endian_uint16_t>:
 8010a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	460e      	mov	r6, r1
 8010a60:	2102      	movs	r1, #2
 8010a62:	4615      	mov	r5, r2
 8010a64:	f000 ffb0 	bl	80119c8 <ucdr_buffer_alignment>
 8010a68:	4601      	mov	r1, r0
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010a70:	f000 fff2 	bl	8011a58 <ucdr_advance_buffer>
 8010a74:	2102      	movs	r1, #2
 8010a76:	4620      	mov	r0, r4
 8010a78:	f000 ff46 	bl	8011908 <ucdr_check_buffer_available_for>
 8010a7c:	bb70      	cbnz	r0, 8010adc <ucdr_deserialize_endian_uint16_t+0x84>
 8010a7e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010a82:	454f      	cmp	r7, r9
 8010a84:	d925      	bls.n	8010ad2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8010a86:	6923      	ldr	r3, [r4, #16]
 8010a88:	4620      	mov	r0, r4
 8010a8a:	60a7      	str	r7, [r4, #8]
 8010a8c:	eba7 0709 	sub.w	r7, r7, r9
 8010a90:	443b      	add	r3, r7
 8010a92:	f1c7 0a02 	rsb	sl, r7, #2
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	4651      	mov	r1, sl
 8010a9a:	f000 ff41 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d034      	beq.n	8010b0c <ucdr_deserialize_endian_uint16_t+0xb4>
 8010aa2:	2e01      	cmp	r6, #1
 8010aa4:	d043      	beq.n	8010b2e <ucdr_deserialize_endian_uint16_t+0xd6>
 8010aa6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010aaa:	702b      	strb	r3, [r5, #0]
 8010aac:	2f00      	cmp	r7, #0
 8010aae:	d03a      	beq.n	8010b26 <ucdr_deserialize_endian_uint16_t+0xce>
 8010ab0:	f899 3000 	ldrb.w	r3, [r9]
 8010ab4:	706b      	strb	r3, [r5, #1]
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	2102      	movs	r1, #2
 8010aba:	68a2      	ldr	r2, [r4, #8]
 8010abc:	3302      	adds	r3, #2
 8010abe:	7da0      	ldrb	r0, [r4, #22]
 8010ac0:	4452      	add	r2, sl
 8010ac2:	7561      	strb	r1, [r4, #21]
 8010ac4:	1bdb      	subs	r3, r3, r7
 8010ac6:	f080 0001 	eor.w	r0, r0, #1
 8010aca:	60a2      	str	r2, [r4, #8]
 8010acc:	6123      	str	r3, [r4, #16]
 8010ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ad2:	2102      	movs	r1, #2
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f000 ff23 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010ada:	b178      	cbz	r0, 8010afc <ucdr_deserialize_endian_uint16_t+0xa4>
 8010adc:	2e01      	cmp	r6, #1
 8010ade:	68a3      	ldr	r3, [r4, #8]
 8010ae0:	d011      	beq.n	8010b06 <ucdr_deserialize_endian_uint16_t+0xae>
 8010ae2:	785b      	ldrb	r3, [r3, #1]
 8010ae4:	702b      	strb	r3, [r5, #0]
 8010ae6:	68a3      	ldr	r3, [r4, #8]
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	706b      	strb	r3, [r5, #1]
 8010aec:	2102      	movs	r1, #2
 8010aee:	68a2      	ldr	r2, [r4, #8]
 8010af0:	6923      	ldr	r3, [r4, #16]
 8010af2:	440a      	add	r2, r1
 8010af4:	7561      	strb	r1, [r4, #21]
 8010af6:	440b      	add	r3, r1
 8010af8:	60a2      	str	r2, [r4, #8]
 8010afa:	6123      	str	r3, [r4, #16]
 8010afc:	7da0      	ldrb	r0, [r4, #22]
 8010afe:	f080 0001 	eor.w	r0, r0, #1
 8010b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	802b      	strh	r3, [r5, #0]
 8010b0a:	e7ef      	b.n	8010aec <ucdr_deserialize_endian_uint16_t+0x94>
 8010b0c:	68a2      	ldr	r2, [r4, #8]
 8010b0e:	6923      	ldr	r3, [r4, #16]
 8010b10:	1bd2      	subs	r2, r2, r7
 8010b12:	7da0      	ldrb	r0, [r4, #22]
 8010b14:	1bdb      	subs	r3, r3, r7
 8010b16:	f884 8015 	strb.w	r8, [r4, #21]
 8010b1a:	f080 0001 	eor.w	r0, r0, #1
 8010b1e:	60a2      	str	r2, [r4, #8]
 8010b20:	6123      	str	r3, [r4, #16]
 8010b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b26:	68a3      	ldr	r3, [r4, #8]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	706b      	strb	r3, [r5, #1]
 8010b2c:	e7c3      	b.n	8010ab6 <ucdr_deserialize_endian_uint16_t+0x5e>
 8010b2e:	4649      	mov	r1, r9
 8010b30:	463a      	mov	r2, r7
 8010b32:	4628      	mov	r0, r5
 8010b34:	f00b f871 	bl	801bc1a <memcpy>
 8010b38:	4652      	mov	r2, sl
 8010b3a:	19e8      	adds	r0, r5, r7
 8010b3c:	68a1      	ldr	r1, [r4, #8]
 8010b3e:	f00b f86c 	bl	801bc1a <memcpy>
 8010b42:	e7b8      	b.n	8010ab6 <ucdr_deserialize_endian_uint16_t+0x5e>

08010b44 <ucdr_serialize_uint32_t>:
 8010b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b48:	b082      	sub	sp, #8
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	9101      	str	r1, [sp, #4]
 8010b4e:	2104      	movs	r1, #4
 8010b50:	f000 ff3a 	bl	80119c8 <ucdr_buffer_alignment>
 8010b54:	4601      	mov	r1, r0
 8010b56:	4620      	mov	r0, r4
 8010b58:	7d67      	ldrb	r7, [r4, #21]
 8010b5a:	f000 ff7d 	bl	8011a58 <ucdr_advance_buffer>
 8010b5e:	2104      	movs	r1, #4
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fed1 	bl	8011908 <ucdr_check_buffer_available_for>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d139      	bne.n	8010bde <ucdr_serialize_uint32_t+0x9a>
 8010b6a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010b6e:	42ab      	cmp	r3, r5
 8010b70:	d930      	bls.n	8010bd4 <ucdr_serialize_uint32_t+0x90>
 8010b72:	1b5e      	subs	r6, r3, r5
 8010b74:	60a3      	str	r3, [r4, #8]
 8010b76:	6923      	ldr	r3, [r4, #16]
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f1c6 0804 	rsb	r8, r6, #4
 8010b7e:	4433      	add	r3, r6
 8010b80:	4641      	mov	r1, r8
 8010b82:	6123      	str	r3, [r4, #16]
 8010b84:	f000 fecc 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d04c      	beq.n	8010c26 <ucdr_serialize_uint32_t+0xe2>
 8010b8c:	7d23      	ldrb	r3, [r4, #20]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d063      	beq.n	8010c5a <ucdr_serialize_uint32_t+0x116>
 8010b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b96:	702b      	strb	r3, [r5, #0]
 8010b98:	2e00      	cmp	r6, #0
 8010b9a:	d051      	beq.n	8010c40 <ucdr_serialize_uint32_t+0xfc>
 8010b9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ba0:	2e01      	cmp	r6, #1
 8010ba2:	706b      	strb	r3, [r5, #1]
 8010ba4:	d050      	beq.n	8010c48 <ucdr_serialize_uint32_t+0x104>
 8010ba6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010baa:	2e02      	cmp	r6, #2
 8010bac:	70ab      	strb	r3, [r5, #2]
 8010bae:	d04f      	beq.n	8010c50 <ucdr_serialize_uint32_t+0x10c>
 8010bb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010bb4:	70eb      	strb	r3, [r5, #3]
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	2104      	movs	r1, #4
 8010bba:	68a2      	ldr	r2, [r4, #8]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	7da0      	ldrb	r0, [r4, #22]
 8010bc0:	4442      	add	r2, r8
 8010bc2:	7561      	strb	r1, [r4, #21]
 8010bc4:	1b9e      	subs	r6, r3, r6
 8010bc6:	f080 0001 	eor.w	r0, r0, #1
 8010bca:	60a2      	str	r2, [r4, #8]
 8010bcc:	6126      	str	r6, [r4, #16]
 8010bce:	b002      	add	sp, #8
 8010bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd4:	2104      	movs	r1, #4
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f000 fea2 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010bdc:	b1d0      	cbz	r0, 8010c14 <ucdr_serialize_uint32_t+0xd0>
 8010bde:	7d23      	ldrb	r3, [r4, #20]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	68a3      	ldr	r3, [r4, #8]
 8010be4:	d01c      	beq.n	8010c20 <ucdr_serialize_uint32_t+0xdc>
 8010be6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010bea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010bf2:	7018      	strb	r0, [r3, #0]
 8010bf4:	68a3      	ldr	r3, [r4, #8]
 8010bf6:	705a      	strb	r2, [r3, #1]
 8010bf8:	68a3      	ldr	r3, [r4, #8]
 8010bfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bfe:	7099      	strb	r1, [r3, #2]
 8010c00:	68a3      	ldr	r3, [r4, #8]
 8010c02:	70da      	strb	r2, [r3, #3]
 8010c04:	2104      	movs	r1, #4
 8010c06:	68a2      	ldr	r2, [r4, #8]
 8010c08:	6923      	ldr	r3, [r4, #16]
 8010c0a:	440a      	add	r2, r1
 8010c0c:	7561      	strb	r1, [r4, #21]
 8010c0e:	440b      	add	r3, r1
 8010c10:	60a2      	str	r2, [r4, #8]
 8010c12:	6123      	str	r3, [r4, #16]
 8010c14:	7da0      	ldrb	r0, [r4, #22]
 8010c16:	f080 0001 	eor.w	r0, r0, #1
 8010c1a:	b002      	add	sp, #8
 8010c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c20:	9a01      	ldr	r2, [sp, #4]
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	e7ee      	b.n	8010c04 <ucdr_serialize_uint32_t+0xc0>
 8010c26:	68a2      	ldr	r2, [r4, #8]
 8010c28:	6923      	ldr	r3, [r4, #16]
 8010c2a:	7da0      	ldrb	r0, [r4, #22]
 8010c2c:	1b92      	subs	r2, r2, r6
 8010c2e:	1b9b      	subs	r3, r3, r6
 8010c30:	7567      	strb	r7, [r4, #21]
 8010c32:	f080 0001 	eor.w	r0, r0, #1
 8010c36:	60a2      	str	r2, [r4, #8]
 8010c38:	6123      	str	r3, [r4, #16]
 8010c3a:	b002      	add	sp, #8
 8010c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c40:	68a3      	ldr	r3, [r4, #8]
 8010c42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c46:	701a      	strb	r2, [r3, #0]
 8010c48:	68a3      	ldr	r3, [r4, #8]
 8010c4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010c4e:	701a      	strb	r2, [r3, #0]
 8010c50:	68a3      	ldr	r3, [r4, #8]
 8010c52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e7ad      	b.n	8010bb6 <ucdr_serialize_uint32_t+0x72>
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	ad01      	add	r5, sp, #4
 8010c5e:	4632      	mov	r2, r6
 8010c60:	4629      	mov	r1, r5
 8010c62:	f00a ffda 	bl	801bc1a <memcpy>
 8010c66:	4642      	mov	r2, r8
 8010c68:	19a9      	adds	r1, r5, r6
 8010c6a:	68a0      	ldr	r0, [r4, #8]
 8010c6c:	f00a ffd5 	bl	801bc1a <memcpy>
 8010c70:	e7a1      	b.n	8010bb6 <ucdr_serialize_uint32_t+0x72>
 8010c72:	bf00      	nop

08010c74 <ucdr_serialize_endian_uint32_t>:
 8010c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c78:	4604      	mov	r4, r0
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	460d      	mov	r5, r1
 8010c7e:	2104      	movs	r1, #4
 8010c80:	9201      	str	r2, [sp, #4]
 8010c82:	f000 fea1 	bl	80119c8 <ucdr_buffer_alignment>
 8010c86:	4601      	mov	r1, r0
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c8e:	f000 fee3 	bl	8011a58 <ucdr_advance_buffer>
 8010c92:	2104      	movs	r1, #4
 8010c94:	4620      	mov	r0, r4
 8010c96:	f000 fe37 	bl	8011908 <ucdr_check_buffer_available_for>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d138      	bne.n	8010d10 <ucdr_serialize_endian_uint32_t+0x9c>
 8010c9e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010ca2:	42b7      	cmp	r7, r6
 8010ca4:	d92f      	bls.n	8010d06 <ucdr_serialize_endian_uint32_t+0x92>
 8010ca6:	6923      	ldr	r3, [r4, #16]
 8010ca8:	4620      	mov	r0, r4
 8010caa:	60a7      	str	r7, [r4, #8]
 8010cac:	1bbf      	subs	r7, r7, r6
 8010cae:	443b      	add	r3, r7
 8010cb0:	f1c7 0904 	rsb	r9, r7, #4
 8010cb4:	6123      	str	r3, [r4, #16]
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	f000 fe32 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d04a      	beq.n	8010d56 <ucdr_serialize_endian_uint32_t+0xe2>
 8010cc0:	2d01      	cmp	r5, #1
 8010cc2:	d063      	beq.n	8010d8c <ucdr_serialize_endian_uint32_t+0x118>
 8010cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010cc8:	7033      	strb	r3, [r6, #0]
 8010cca:	2f00      	cmp	r7, #0
 8010ccc:	d051      	beq.n	8010d72 <ucdr_serialize_endian_uint32_t+0xfe>
 8010cce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cd2:	2f01      	cmp	r7, #1
 8010cd4:	7073      	strb	r3, [r6, #1]
 8010cd6:	d050      	beq.n	8010d7a <ucdr_serialize_endian_uint32_t+0x106>
 8010cd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cdc:	2f02      	cmp	r7, #2
 8010cde:	70b3      	strb	r3, [r6, #2]
 8010ce0:	d04f      	beq.n	8010d82 <ucdr_serialize_endian_uint32_t+0x10e>
 8010ce2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010ce6:	70f3      	strb	r3, [r6, #3]
 8010ce8:	6923      	ldr	r3, [r4, #16]
 8010cea:	2104      	movs	r1, #4
 8010cec:	68a2      	ldr	r2, [r4, #8]
 8010cee:	7da0      	ldrb	r0, [r4, #22]
 8010cf0:	3304      	adds	r3, #4
 8010cf2:	444a      	add	r2, r9
 8010cf4:	7561      	strb	r1, [r4, #21]
 8010cf6:	1bdb      	subs	r3, r3, r7
 8010cf8:	f080 0001 	eor.w	r0, r0, #1
 8010cfc:	60a2      	str	r2, [r4, #8]
 8010cfe:	6123      	str	r3, [r4, #16]
 8010d00:	b003      	add	sp, #12
 8010d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d06:	2104      	movs	r1, #4
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f000 fe09 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010d0e:	b1c8      	cbz	r0, 8010d44 <ucdr_serialize_endian_uint32_t+0xd0>
 8010d10:	2d01      	cmp	r5, #1
 8010d12:	68a3      	ldr	r3, [r4, #8]
 8010d14:	d01c      	beq.n	8010d50 <ucdr_serialize_endian_uint32_t+0xdc>
 8010d16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010d1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010d22:	7018      	strb	r0, [r3, #0]
 8010d24:	68a3      	ldr	r3, [r4, #8]
 8010d26:	705a      	strb	r2, [r3, #1]
 8010d28:	68a3      	ldr	r3, [r4, #8]
 8010d2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d2e:	7099      	strb	r1, [r3, #2]
 8010d30:	68a3      	ldr	r3, [r4, #8]
 8010d32:	70da      	strb	r2, [r3, #3]
 8010d34:	2104      	movs	r1, #4
 8010d36:	68a2      	ldr	r2, [r4, #8]
 8010d38:	6923      	ldr	r3, [r4, #16]
 8010d3a:	440a      	add	r2, r1
 8010d3c:	7561      	strb	r1, [r4, #21]
 8010d3e:	440b      	add	r3, r1
 8010d40:	60a2      	str	r2, [r4, #8]
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	7da0      	ldrb	r0, [r4, #22]
 8010d46:	f080 0001 	eor.w	r0, r0, #1
 8010d4a:	b003      	add	sp, #12
 8010d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d50:	9a01      	ldr	r2, [sp, #4]
 8010d52:	601a      	str	r2, [r3, #0]
 8010d54:	e7ee      	b.n	8010d34 <ucdr_serialize_endian_uint32_t+0xc0>
 8010d56:	68a2      	ldr	r2, [r4, #8]
 8010d58:	6923      	ldr	r3, [r4, #16]
 8010d5a:	7da0      	ldrb	r0, [r4, #22]
 8010d5c:	1bd2      	subs	r2, r2, r7
 8010d5e:	1bdb      	subs	r3, r3, r7
 8010d60:	f884 8015 	strb.w	r8, [r4, #21]
 8010d64:	f080 0001 	eor.w	r0, r0, #1
 8010d68:	60a2      	str	r2, [r4, #8]
 8010d6a:	6123      	str	r3, [r4, #16]
 8010d6c:	b003      	add	sp, #12
 8010d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d72:	68a3      	ldr	r3, [r4, #8]
 8010d74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d78:	701a      	strb	r2, [r3, #0]
 8010d7a:	68a3      	ldr	r3, [r4, #8]
 8010d7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d80:	701a      	strb	r2, [r3, #0]
 8010d82:	68a3      	ldr	r3, [r4, #8]
 8010d84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d88:	701a      	strb	r2, [r3, #0]
 8010d8a:	e7ad      	b.n	8010ce8 <ucdr_serialize_endian_uint32_t+0x74>
 8010d8c:	ad01      	add	r5, sp, #4
 8010d8e:	463a      	mov	r2, r7
 8010d90:	4630      	mov	r0, r6
 8010d92:	4629      	mov	r1, r5
 8010d94:	f00a ff41 	bl	801bc1a <memcpy>
 8010d98:	464a      	mov	r2, r9
 8010d9a:	19e9      	adds	r1, r5, r7
 8010d9c:	68a0      	ldr	r0, [r4, #8]
 8010d9e:	f00a ff3c 	bl	801bc1a <memcpy>
 8010da2:	e7a1      	b.n	8010ce8 <ucdr_serialize_endian_uint32_t+0x74>

08010da4 <ucdr_deserialize_uint32_t>:
 8010da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010da8:	4604      	mov	r4, r0
 8010daa:	460d      	mov	r5, r1
 8010dac:	2104      	movs	r1, #4
 8010dae:	f000 fe0b 	bl	80119c8 <ucdr_buffer_alignment>
 8010db2:	4601      	mov	r1, r0
 8010db4:	4620      	mov	r0, r4
 8010db6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010dba:	f000 fe4d 	bl	8011a58 <ucdr_advance_buffer>
 8010dbe:	2104      	movs	r1, #4
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f000 fda1 	bl	8011908 <ucdr_check_buffer_available_for>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d138      	bne.n	8010e3c <ucdr_deserialize_uint32_t+0x98>
 8010dca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010dce:	42b7      	cmp	r7, r6
 8010dd0:	d92f      	bls.n	8010e32 <ucdr_deserialize_uint32_t+0x8e>
 8010dd2:	6923      	ldr	r3, [r4, #16]
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	60a7      	str	r7, [r4, #8]
 8010dd8:	1bbf      	subs	r7, r7, r6
 8010dda:	443b      	add	r3, r7
 8010ddc:	f1c7 0904 	rsb	r9, r7, #4
 8010de0:	6123      	str	r3, [r4, #16]
 8010de2:	4649      	mov	r1, r9
 8010de4:	f000 fd9c 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d046      	beq.n	8010e7a <ucdr_deserialize_uint32_t+0xd6>
 8010dec:	7d23      	ldrb	r3, [r4, #20]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d05c      	beq.n	8010eac <ucdr_deserialize_uint32_t+0x108>
 8010df2:	78f3      	ldrb	r3, [r6, #3]
 8010df4:	702b      	strb	r3, [r5, #0]
 8010df6:	2f00      	cmp	r7, #0
 8010df8:	d04c      	beq.n	8010e94 <ucdr_deserialize_uint32_t+0xf0>
 8010dfa:	78b3      	ldrb	r3, [r6, #2]
 8010dfc:	2f01      	cmp	r7, #1
 8010dfe:	706b      	strb	r3, [r5, #1]
 8010e00:	f105 0302 	add.w	r3, r5, #2
 8010e04:	d04a      	beq.n	8010e9c <ucdr_deserialize_uint32_t+0xf8>
 8010e06:	7873      	ldrb	r3, [r6, #1]
 8010e08:	2f02      	cmp	r7, #2
 8010e0a:	70ab      	strb	r3, [r5, #2]
 8010e0c:	f105 0303 	add.w	r3, r5, #3
 8010e10:	d048      	beq.n	8010ea4 <ucdr_deserialize_uint32_t+0x100>
 8010e12:	7833      	ldrb	r3, [r6, #0]
 8010e14:	70eb      	strb	r3, [r5, #3]
 8010e16:	6923      	ldr	r3, [r4, #16]
 8010e18:	2104      	movs	r1, #4
 8010e1a:	68a2      	ldr	r2, [r4, #8]
 8010e1c:	3304      	adds	r3, #4
 8010e1e:	7da0      	ldrb	r0, [r4, #22]
 8010e20:	444a      	add	r2, r9
 8010e22:	7561      	strb	r1, [r4, #21]
 8010e24:	1bdb      	subs	r3, r3, r7
 8010e26:	f080 0001 	eor.w	r0, r0, #1
 8010e2a:	60a2      	str	r2, [r4, #8]
 8010e2c:	6123      	str	r3, [r4, #16]
 8010e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e32:	2104      	movs	r1, #4
 8010e34:	4620      	mov	r0, r4
 8010e36:	f000 fd73 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010e3a:	b1b0      	cbz	r0, 8010e6a <ucdr_deserialize_uint32_t+0xc6>
 8010e3c:	7d23      	ldrb	r3, [r4, #20]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	68a3      	ldr	r3, [r4, #8]
 8010e42:	d017      	beq.n	8010e74 <ucdr_deserialize_uint32_t+0xd0>
 8010e44:	78db      	ldrb	r3, [r3, #3]
 8010e46:	702b      	strb	r3, [r5, #0]
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	789b      	ldrb	r3, [r3, #2]
 8010e4c:	706b      	strb	r3, [r5, #1]
 8010e4e:	68a3      	ldr	r3, [r4, #8]
 8010e50:	785b      	ldrb	r3, [r3, #1]
 8010e52:	70ab      	strb	r3, [r5, #2]
 8010e54:	68a3      	ldr	r3, [r4, #8]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	70eb      	strb	r3, [r5, #3]
 8010e5a:	2104      	movs	r1, #4
 8010e5c:	68a2      	ldr	r2, [r4, #8]
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	440a      	add	r2, r1
 8010e62:	7561      	strb	r1, [r4, #21]
 8010e64:	440b      	add	r3, r1
 8010e66:	60a2      	str	r2, [r4, #8]
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	7da0      	ldrb	r0, [r4, #22]
 8010e6c:	f080 0001 	eor.w	r0, r0, #1
 8010e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	e7ef      	b.n	8010e5a <ucdr_deserialize_uint32_t+0xb6>
 8010e7a:	68a2      	ldr	r2, [r4, #8]
 8010e7c:	6923      	ldr	r3, [r4, #16]
 8010e7e:	1bd2      	subs	r2, r2, r7
 8010e80:	7da0      	ldrb	r0, [r4, #22]
 8010e82:	1bdb      	subs	r3, r3, r7
 8010e84:	f884 8015 	strb.w	r8, [r4, #21]
 8010e88:	f080 0001 	eor.w	r0, r0, #1
 8010e8c:	60a2      	str	r2, [r4, #8]
 8010e8e:	6123      	str	r3, [r4, #16]
 8010e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e94:	68a3      	ldr	r3, [r4, #8]
 8010e96:	789b      	ldrb	r3, [r3, #2]
 8010e98:	706b      	strb	r3, [r5, #1]
 8010e9a:	1cab      	adds	r3, r5, #2
 8010e9c:	68a2      	ldr	r2, [r4, #8]
 8010e9e:	7852      	ldrb	r2, [r2, #1]
 8010ea0:	f803 2b01 	strb.w	r2, [r3], #1
 8010ea4:	68a2      	ldr	r2, [r4, #8]
 8010ea6:	7812      	ldrb	r2, [r2, #0]
 8010ea8:	701a      	strb	r2, [r3, #0]
 8010eaa:	e7b4      	b.n	8010e16 <ucdr_deserialize_uint32_t+0x72>
 8010eac:	4631      	mov	r1, r6
 8010eae:	463a      	mov	r2, r7
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f00a feb2 	bl	801bc1a <memcpy>
 8010eb6:	464a      	mov	r2, r9
 8010eb8:	19e8      	adds	r0, r5, r7
 8010eba:	68a1      	ldr	r1, [r4, #8]
 8010ebc:	f00a fead 	bl	801bc1a <memcpy>
 8010ec0:	e7a9      	b.n	8010e16 <ucdr_deserialize_uint32_t+0x72>
 8010ec2:	bf00      	nop

08010ec4 <ucdr_deserialize_endian_uint32_t>:
 8010ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec8:	4604      	mov	r4, r0
 8010eca:	460e      	mov	r6, r1
 8010ecc:	2104      	movs	r1, #4
 8010ece:	4615      	mov	r5, r2
 8010ed0:	f000 fd7a 	bl	80119c8 <ucdr_buffer_alignment>
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010edc:	f000 fdbc 	bl	8011a58 <ucdr_advance_buffer>
 8010ee0:	2104      	movs	r1, #4
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 fd10 	bl	8011908 <ucdr_check_buffer_available_for>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d13c      	bne.n	8010f66 <ucdr_deserialize_endian_uint32_t+0xa2>
 8010eec:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010ef0:	42bb      	cmp	r3, r7
 8010ef2:	d933      	bls.n	8010f5c <ucdr_deserialize_endian_uint32_t+0x98>
 8010ef4:	eba3 0907 	sub.w	r9, r3, r7
 8010ef8:	60a3      	str	r3, [r4, #8]
 8010efa:	6923      	ldr	r3, [r4, #16]
 8010efc:	4620      	mov	r0, r4
 8010efe:	f1c9 0a04 	rsb	sl, r9, #4
 8010f02:	444b      	add	r3, r9
 8010f04:	4651      	mov	r1, sl
 8010f06:	6123      	str	r3, [r4, #16]
 8010f08:	f000 fd0a 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d048      	beq.n	8010fa2 <ucdr_deserialize_endian_uint32_t+0xde>
 8010f10:	2e01      	cmp	r6, #1
 8010f12:	d061      	beq.n	8010fd8 <ucdr_deserialize_endian_uint32_t+0x114>
 8010f14:	78fb      	ldrb	r3, [r7, #3]
 8010f16:	702b      	strb	r3, [r5, #0]
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	d050      	beq.n	8010fc0 <ucdr_deserialize_endian_uint32_t+0xfc>
 8010f1e:	78bb      	ldrb	r3, [r7, #2]
 8010f20:	f1b9 0f01 	cmp.w	r9, #1
 8010f24:	706b      	strb	r3, [r5, #1]
 8010f26:	f105 0302 	add.w	r3, r5, #2
 8010f2a:	d04d      	beq.n	8010fc8 <ucdr_deserialize_endian_uint32_t+0x104>
 8010f2c:	787b      	ldrb	r3, [r7, #1]
 8010f2e:	f1b9 0f02 	cmp.w	r9, #2
 8010f32:	70ab      	strb	r3, [r5, #2]
 8010f34:	f105 0303 	add.w	r3, r5, #3
 8010f38:	d04a      	beq.n	8010fd0 <ucdr_deserialize_endian_uint32_t+0x10c>
 8010f3a:	783b      	ldrb	r3, [r7, #0]
 8010f3c:	70eb      	strb	r3, [r5, #3]
 8010f3e:	6923      	ldr	r3, [r4, #16]
 8010f40:	2104      	movs	r1, #4
 8010f42:	68a2      	ldr	r2, [r4, #8]
 8010f44:	3304      	adds	r3, #4
 8010f46:	7da0      	ldrb	r0, [r4, #22]
 8010f48:	4452      	add	r2, sl
 8010f4a:	7561      	strb	r1, [r4, #21]
 8010f4c:	eba3 0309 	sub.w	r3, r3, r9
 8010f50:	f080 0001 	eor.w	r0, r0, #1
 8010f54:	60a2      	str	r2, [r4, #8]
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5c:	2104      	movs	r1, #4
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 fcde 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8010f64:	b1a8      	cbz	r0, 8010f92 <ucdr_deserialize_endian_uint32_t+0xce>
 8010f66:	2e01      	cmp	r6, #1
 8010f68:	68a3      	ldr	r3, [r4, #8]
 8010f6a:	d017      	beq.n	8010f9c <ucdr_deserialize_endian_uint32_t+0xd8>
 8010f6c:	78db      	ldrb	r3, [r3, #3]
 8010f6e:	702b      	strb	r3, [r5, #0]
 8010f70:	68a3      	ldr	r3, [r4, #8]
 8010f72:	789b      	ldrb	r3, [r3, #2]
 8010f74:	706b      	strb	r3, [r5, #1]
 8010f76:	68a3      	ldr	r3, [r4, #8]
 8010f78:	785b      	ldrb	r3, [r3, #1]
 8010f7a:	70ab      	strb	r3, [r5, #2]
 8010f7c:	68a3      	ldr	r3, [r4, #8]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	70eb      	strb	r3, [r5, #3]
 8010f82:	2104      	movs	r1, #4
 8010f84:	68a2      	ldr	r2, [r4, #8]
 8010f86:	6923      	ldr	r3, [r4, #16]
 8010f88:	440a      	add	r2, r1
 8010f8a:	7561      	strb	r1, [r4, #21]
 8010f8c:	440b      	add	r3, r1
 8010f8e:	60a2      	str	r2, [r4, #8]
 8010f90:	6123      	str	r3, [r4, #16]
 8010f92:	7da0      	ldrb	r0, [r4, #22]
 8010f94:	f080 0001 	eor.w	r0, r0, #1
 8010f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	e7ef      	b.n	8010f82 <ucdr_deserialize_endian_uint32_t+0xbe>
 8010fa2:	68a2      	ldr	r2, [r4, #8]
 8010fa4:	6923      	ldr	r3, [r4, #16]
 8010fa6:	eba2 0209 	sub.w	r2, r2, r9
 8010faa:	7da0      	ldrb	r0, [r4, #22]
 8010fac:	eba3 0309 	sub.w	r3, r3, r9
 8010fb0:	f884 8015 	strb.w	r8, [r4, #21]
 8010fb4:	f080 0001 	eor.w	r0, r0, #1
 8010fb8:	60a2      	str	r2, [r4, #8]
 8010fba:	6123      	str	r3, [r4, #16]
 8010fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc0:	68a3      	ldr	r3, [r4, #8]
 8010fc2:	789b      	ldrb	r3, [r3, #2]
 8010fc4:	706b      	strb	r3, [r5, #1]
 8010fc6:	1cab      	adds	r3, r5, #2
 8010fc8:	68a2      	ldr	r2, [r4, #8]
 8010fca:	7852      	ldrb	r2, [r2, #1]
 8010fcc:	f803 2b01 	strb.w	r2, [r3], #1
 8010fd0:	68a2      	ldr	r2, [r4, #8]
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e7b2      	b.n	8010f3e <ucdr_deserialize_endian_uint32_t+0x7a>
 8010fd8:	4639      	mov	r1, r7
 8010fda:	464a      	mov	r2, r9
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f00a fe1c 	bl	801bc1a <memcpy>
 8010fe2:	4652      	mov	r2, sl
 8010fe4:	eb05 0009 	add.w	r0, r5, r9
 8010fe8:	68a1      	ldr	r1, [r4, #8]
 8010fea:	f00a fe16 	bl	801bc1a <memcpy>
 8010fee:	e7a6      	b.n	8010f3e <ucdr_deserialize_endian_uint32_t+0x7a>

08010ff0 <ucdr_serialize_uint64_t>:
 8010ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	2108      	movs	r1, #8
 8010ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8010ffe:	f000 fce3 	bl	80119c8 <ucdr_buffer_alignment>
 8011002:	4601      	mov	r1, r0
 8011004:	4620      	mov	r0, r4
 8011006:	7d67      	ldrb	r7, [r4, #21]
 8011008:	f000 fd26 	bl	8011a58 <ucdr_advance_buffer>
 801100c:	2108      	movs	r1, #8
 801100e:	4620      	mov	r0, r4
 8011010:	f000 fc7a 	bl	8011908 <ucdr_check_buffer_available_for>
 8011014:	2800      	cmp	r0, #0
 8011016:	d14e      	bne.n	80110b6 <ucdr_serialize_uint64_t+0xc6>
 8011018:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801101c:	42ab      	cmp	r3, r5
 801101e:	d945      	bls.n	80110ac <ucdr_serialize_uint64_t+0xbc>
 8011020:	1b5e      	subs	r6, r3, r5
 8011022:	60a3      	str	r3, [r4, #8]
 8011024:	6923      	ldr	r3, [r4, #16]
 8011026:	4620      	mov	r0, r4
 8011028:	f1c6 0808 	rsb	r8, r6, #8
 801102c:	4433      	add	r3, r6
 801102e:	4641      	mov	r1, r8
 8011030:	6123      	str	r3, [r4, #16]
 8011032:	f000 fc75 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8011036:	2800      	cmp	r0, #0
 8011038:	d074      	beq.n	8011124 <ucdr_serialize_uint64_t+0x134>
 801103a:	7d23      	ldrb	r3, [r4, #20]
 801103c:	2b01      	cmp	r3, #1
 801103e:	f000 809b 	beq.w	8011178 <ucdr_serialize_uint64_t+0x188>
 8011042:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011046:	702b      	strb	r3, [r5, #0]
 8011048:	2e00      	cmp	r6, #0
 801104a:	d078      	beq.n	801113e <ucdr_serialize_uint64_t+0x14e>
 801104c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011050:	2e01      	cmp	r6, #1
 8011052:	706b      	strb	r3, [r5, #1]
 8011054:	d077      	beq.n	8011146 <ucdr_serialize_uint64_t+0x156>
 8011056:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801105a:	2e02      	cmp	r6, #2
 801105c:	70ab      	strb	r3, [r5, #2]
 801105e:	d076      	beq.n	801114e <ucdr_serialize_uint64_t+0x15e>
 8011060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011064:	2e03      	cmp	r6, #3
 8011066:	70eb      	strb	r3, [r5, #3]
 8011068:	d075      	beq.n	8011156 <ucdr_serialize_uint64_t+0x166>
 801106a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801106e:	2e04      	cmp	r6, #4
 8011070:	712b      	strb	r3, [r5, #4]
 8011072:	d074      	beq.n	801115e <ucdr_serialize_uint64_t+0x16e>
 8011074:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011078:	2e05      	cmp	r6, #5
 801107a:	716b      	strb	r3, [r5, #5]
 801107c:	d073      	beq.n	8011166 <ucdr_serialize_uint64_t+0x176>
 801107e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011082:	2e06      	cmp	r6, #6
 8011084:	71ab      	strb	r3, [r5, #6]
 8011086:	d072      	beq.n	801116e <ucdr_serialize_uint64_t+0x17e>
 8011088:	f89d 3000 	ldrb.w	r3, [sp]
 801108c:	71eb      	strb	r3, [r5, #7]
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	2108      	movs	r1, #8
 8011092:	68a2      	ldr	r2, [r4, #8]
 8011094:	3308      	adds	r3, #8
 8011096:	7da0      	ldrb	r0, [r4, #22]
 8011098:	4442      	add	r2, r8
 801109a:	7561      	strb	r1, [r4, #21]
 801109c:	1b9e      	subs	r6, r3, r6
 801109e:	f080 0001 	eor.w	r0, r0, #1
 80110a2:	60a2      	str	r2, [r4, #8]
 80110a4:	6126      	str	r6, [r4, #16]
 80110a6:	b002      	add	sp, #8
 80110a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ac:	2108      	movs	r1, #8
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 fc36 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80110b4:	b350      	cbz	r0, 801110c <ucdr_serialize_uint64_t+0x11c>
 80110b6:	7d23      	ldrb	r3, [r4, #20]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d02d      	beq.n	8011118 <ucdr_serialize_uint64_t+0x128>
 80110bc:	68a3      	ldr	r3, [r4, #8]
 80110be:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80110c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80110c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80110ca:	7018      	strb	r0, [r3, #0]
 80110cc:	68a3      	ldr	r3, [r4, #8]
 80110ce:	705a      	strb	r2, [r3, #1]
 80110d0:	68a3      	ldr	r3, [r4, #8]
 80110d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80110d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80110da:	7099      	strb	r1, [r3, #2]
 80110dc:	68a3      	ldr	r3, [r4, #8]
 80110de:	70da      	strb	r2, [r3, #3]
 80110e0:	68a3      	ldr	r3, [r4, #8]
 80110e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80110e6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80110ea:	7118      	strb	r0, [r3, #4]
 80110ec:	68a3      	ldr	r3, [r4, #8]
 80110ee:	715a      	strb	r2, [r3, #5]
 80110f0:	68a3      	ldr	r3, [r4, #8]
 80110f2:	f89d 2000 	ldrb.w	r2, [sp]
 80110f6:	7199      	strb	r1, [r3, #6]
 80110f8:	68a3      	ldr	r3, [r4, #8]
 80110fa:	71da      	strb	r2, [r3, #7]
 80110fc:	2108      	movs	r1, #8
 80110fe:	68a2      	ldr	r2, [r4, #8]
 8011100:	6923      	ldr	r3, [r4, #16]
 8011102:	440a      	add	r2, r1
 8011104:	7561      	strb	r1, [r4, #21]
 8011106:	440b      	add	r3, r1
 8011108:	60a2      	str	r2, [r4, #8]
 801110a:	6123      	str	r3, [r4, #16]
 801110c:	7da0      	ldrb	r0, [r4, #22]
 801110e:	f080 0001 	eor.w	r0, r0, #1
 8011112:	b002      	add	sp, #8
 8011114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011118:	466b      	mov	r3, sp
 801111a:	68a2      	ldr	r2, [r4, #8]
 801111c:	cb03      	ldmia	r3!, {r0, r1}
 801111e:	6010      	str	r0, [r2, #0]
 8011120:	6051      	str	r1, [r2, #4]
 8011122:	e7eb      	b.n	80110fc <ucdr_serialize_uint64_t+0x10c>
 8011124:	68a2      	ldr	r2, [r4, #8]
 8011126:	6923      	ldr	r3, [r4, #16]
 8011128:	7da0      	ldrb	r0, [r4, #22]
 801112a:	1b92      	subs	r2, r2, r6
 801112c:	1b9b      	subs	r3, r3, r6
 801112e:	7567      	strb	r7, [r4, #21]
 8011130:	f080 0001 	eor.w	r0, r0, #1
 8011134:	60a2      	str	r2, [r4, #8]
 8011136:	6123      	str	r3, [r4, #16]
 8011138:	b002      	add	sp, #8
 801113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801113e:	68a3      	ldr	r3, [r4, #8]
 8011140:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011144:	701a      	strb	r2, [r3, #0]
 8011146:	68a3      	ldr	r3, [r4, #8]
 8011148:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801114c:	701a      	strb	r2, [r3, #0]
 801114e:	68a3      	ldr	r3, [r4, #8]
 8011150:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	68a3      	ldr	r3, [r4, #8]
 8011158:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801115c:	701a      	strb	r2, [r3, #0]
 801115e:	68a3      	ldr	r3, [r4, #8]
 8011160:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011164:	701a      	strb	r2, [r3, #0]
 8011166:	68a3      	ldr	r3, [r4, #8]
 8011168:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801116c:	701a      	strb	r2, [r3, #0]
 801116e:	68a3      	ldr	r3, [r4, #8]
 8011170:	f89d 2000 	ldrb.w	r2, [sp]
 8011174:	701a      	strb	r2, [r3, #0]
 8011176:	e78a      	b.n	801108e <ucdr_serialize_uint64_t+0x9e>
 8011178:	4628      	mov	r0, r5
 801117a:	466d      	mov	r5, sp
 801117c:	4632      	mov	r2, r6
 801117e:	4629      	mov	r1, r5
 8011180:	f00a fd4b 	bl	801bc1a <memcpy>
 8011184:	4642      	mov	r2, r8
 8011186:	19a9      	adds	r1, r5, r6
 8011188:	68a0      	ldr	r0, [r4, #8]
 801118a:	f00a fd46 	bl	801bc1a <memcpy>
 801118e:	e77e      	b.n	801108e <ucdr_serialize_uint64_t+0x9e>

08011190 <ucdr_serialize_int16_t>:
 8011190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011194:	460b      	mov	r3, r1
 8011196:	b082      	sub	sp, #8
 8011198:	4604      	mov	r4, r0
 801119a:	2102      	movs	r1, #2
 801119c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80111a0:	f000 fc12 	bl	80119c8 <ucdr_buffer_alignment>
 80111a4:	4601      	mov	r1, r0
 80111a6:	4620      	mov	r0, r4
 80111a8:	7d67      	ldrb	r7, [r4, #21]
 80111aa:	f000 fc55 	bl	8011a58 <ucdr_advance_buffer>
 80111ae:	2102      	movs	r1, #2
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fba9 	bl	8011908 <ucdr_check_buffer_available_for>
 80111b6:	bb78      	cbnz	r0, 8011218 <ucdr_serialize_int16_t+0x88>
 80111b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80111bc:	42ab      	cmp	r3, r5
 80111be:	d926      	bls.n	801120e <ucdr_serialize_int16_t+0x7e>
 80111c0:	1b5e      	subs	r6, r3, r5
 80111c2:	60a3      	str	r3, [r4, #8]
 80111c4:	6923      	ldr	r3, [r4, #16]
 80111c6:	4620      	mov	r0, r4
 80111c8:	f1c6 0802 	rsb	r8, r6, #2
 80111cc:	4433      	add	r3, r6
 80111ce:	4641      	mov	r1, r8
 80111d0:	6123      	str	r3, [r4, #16]
 80111d2:	f000 fba5 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80111d6:	2800      	cmp	r0, #0
 80111d8:	d03b      	beq.n	8011252 <ucdr_serialize_int16_t+0xc2>
 80111da:	7d23      	ldrb	r3, [r4, #20]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d04a      	beq.n	8011276 <ucdr_serialize_int16_t+0xe6>
 80111e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111e4:	702b      	strb	r3, [r5, #0]
 80111e6:	2e00      	cmp	r6, #0
 80111e8:	d040      	beq.n	801126c <ucdr_serialize_int16_t+0xdc>
 80111ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111ee:	706b      	strb	r3, [r5, #1]
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	2102      	movs	r1, #2
 80111f4:	68a2      	ldr	r2, [r4, #8]
 80111f6:	3302      	adds	r3, #2
 80111f8:	7da0      	ldrb	r0, [r4, #22]
 80111fa:	4442      	add	r2, r8
 80111fc:	7561      	strb	r1, [r4, #21]
 80111fe:	1b9e      	subs	r6, r3, r6
 8011200:	f080 0001 	eor.w	r0, r0, #1
 8011204:	60a2      	str	r2, [r4, #8]
 8011206:	6126      	str	r6, [r4, #16]
 8011208:	b002      	add	sp, #8
 801120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120e:	2102      	movs	r1, #2
 8011210:	4620      	mov	r0, r4
 8011212:	f000 fb85 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8011216:	b190      	cbz	r0, 801123e <ucdr_serialize_int16_t+0xae>
 8011218:	7d23      	ldrb	r3, [r4, #20]
 801121a:	2b01      	cmp	r3, #1
 801121c:	68a3      	ldr	r3, [r4, #8]
 801121e:	d014      	beq.n	801124a <ucdr_serialize_int16_t+0xba>
 8011220:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011224:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011228:	7019      	strb	r1, [r3, #0]
 801122a:	68a3      	ldr	r3, [r4, #8]
 801122c:	705a      	strb	r2, [r3, #1]
 801122e:	2102      	movs	r1, #2
 8011230:	68a2      	ldr	r2, [r4, #8]
 8011232:	6923      	ldr	r3, [r4, #16]
 8011234:	440a      	add	r2, r1
 8011236:	7561      	strb	r1, [r4, #21]
 8011238:	440b      	add	r3, r1
 801123a:	60a2      	str	r2, [r4, #8]
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	7da0      	ldrb	r0, [r4, #22]
 8011240:	f080 0001 	eor.w	r0, r0, #1
 8011244:	b002      	add	sp, #8
 8011246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801124a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801124e:	801a      	strh	r2, [r3, #0]
 8011250:	e7ed      	b.n	801122e <ucdr_serialize_int16_t+0x9e>
 8011252:	68a2      	ldr	r2, [r4, #8]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	7da0      	ldrb	r0, [r4, #22]
 8011258:	1b92      	subs	r2, r2, r6
 801125a:	1b9b      	subs	r3, r3, r6
 801125c:	7567      	strb	r7, [r4, #21]
 801125e:	f080 0001 	eor.w	r0, r0, #1
 8011262:	60a2      	str	r2, [r4, #8]
 8011264:	6123      	str	r3, [r4, #16]
 8011266:	b002      	add	sp, #8
 8011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126c:	68a3      	ldr	r3, [r4, #8]
 801126e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	e7bc      	b.n	80111f0 <ucdr_serialize_int16_t+0x60>
 8011276:	4628      	mov	r0, r5
 8011278:	f10d 0506 	add.w	r5, sp, #6
 801127c:	4632      	mov	r2, r6
 801127e:	4629      	mov	r1, r5
 8011280:	f00a fccb 	bl	801bc1a <memcpy>
 8011284:	4642      	mov	r2, r8
 8011286:	19a9      	adds	r1, r5, r6
 8011288:	68a0      	ldr	r0, [r4, #8]
 801128a:	f00a fcc6 	bl	801bc1a <memcpy>
 801128e:	e7af      	b.n	80111f0 <ucdr_serialize_int16_t+0x60>

08011290 <ucdr_deserialize_int16_t>:
 8011290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011294:	4604      	mov	r4, r0
 8011296:	460d      	mov	r5, r1
 8011298:	2102      	movs	r1, #2
 801129a:	f000 fb95 	bl	80119c8 <ucdr_buffer_alignment>
 801129e:	4601      	mov	r1, r0
 80112a0:	4620      	mov	r0, r4
 80112a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80112a6:	f000 fbd7 	bl	8011a58 <ucdr_advance_buffer>
 80112aa:	2102      	movs	r1, #2
 80112ac:	4620      	mov	r0, r4
 80112ae:	f000 fb2b 	bl	8011908 <ucdr_check_buffer_available_for>
 80112b2:	bb60      	cbnz	r0, 801130e <ucdr_deserialize_int16_t+0x7e>
 80112b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80112b8:	42be      	cmp	r6, r7
 80112ba:	d923      	bls.n	8011304 <ucdr_deserialize_int16_t+0x74>
 80112bc:	6923      	ldr	r3, [r4, #16]
 80112be:	4620      	mov	r0, r4
 80112c0:	60a6      	str	r6, [r4, #8]
 80112c2:	1bf6      	subs	r6, r6, r7
 80112c4:	4433      	add	r3, r6
 80112c6:	f1c6 0902 	rsb	r9, r6, #2
 80112ca:	6123      	str	r3, [r4, #16]
 80112cc:	4649      	mov	r1, r9
 80112ce:	f000 fb27 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d034      	beq.n	8011340 <ucdr_deserialize_int16_t+0xb0>
 80112d6:	7d23      	ldrb	r3, [r4, #20]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d042      	beq.n	8011362 <ucdr_deserialize_int16_t+0xd2>
 80112dc:	787b      	ldrb	r3, [r7, #1]
 80112de:	702b      	strb	r3, [r5, #0]
 80112e0:	2e00      	cmp	r6, #0
 80112e2:	d03a      	beq.n	801135a <ucdr_deserialize_int16_t+0xca>
 80112e4:	783b      	ldrb	r3, [r7, #0]
 80112e6:	706b      	strb	r3, [r5, #1]
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	2102      	movs	r1, #2
 80112ec:	68a2      	ldr	r2, [r4, #8]
 80112ee:	3302      	adds	r3, #2
 80112f0:	7da0      	ldrb	r0, [r4, #22]
 80112f2:	444a      	add	r2, r9
 80112f4:	7561      	strb	r1, [r4, #21]
 80112f6:	1b9b      	subs	r3, r3, r6
 80112f8:	f080 0001 	eor.w	r0, r0, #1
 80112fc:	60a2      	str	r2, [r4, #8]
 80112fe:	6123      	str	r3, [r4, #16]
 8011300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011304:	2102      	movs	r1, #2
 8011306:	4620      	mov	r0, r4
 8011308:	f000 fb0a 	bl	8011920 <ucdr_check_final_buffer_behavior>
 801130c:	b180      	cbz	r0, 8011330 <ucdr_deserialize_int16_t+0xa0>
 801130e:	7d23      	ldrb	r3, [r4, #20]
 8011310:	2b01      	cmp	r3, #1
 8011312:	68a3      	ldr	r3, [r4, #8]
 8011314:	d011      	beq.n	801133a <ucdr_deserialize_int16_t+0xaa>
 8011316:	785b      	ldrb	r3, [r3, #1]
 8011318:	702b      	strb	r3, [r5, #0]
 801131a:	68a3      	ldr	r3, [r4, #8]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	706b      	strb	r3, [r5, #1]
 8011320:	2102      	movs	r1, #2
 8011322:	68a2      	ldr	r2, [r4, #8]
 8011324:	6923      	ldr	r3, [r4, #16]
 8011326:	440a      	add	r2, r1
 8011328:	7561      	strb	r1, [r4, #21]
 801132a:	440b      	add	r3, r1
 801132c:	60a2      	str	r2, [r4, #8]
 801132e:	6123      	str	r3, [r4, #16]
 8011330:	7da0      	ldrb	r0, [r4, #22]
 8011332:	f080 0001 	eor.w	r0, r0, #1
 8011336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	802b      	strh	r3, [r5, #0]
 801133e:	e7ef      	b.n	8011320 <ucdr_deserialize_int16_t+0x90>
 8011340:	68a2      	ldr	r2, [r4, #8]
 8011342:	6923      	ldr	r3, [r4, #16]
 8011344:	1b92      	subs	r2, r2, r6
 8011346:	7da0      	ldrb	r0, [r4, #22]
 8011348:	1b9b      	subs	r3, r3, r6
 801134a:	f884 8015 	strb.w	r8, [r4, #21]
 801134e:	f080 0001 	eor.w	r0, r0, #1
 8011352:	60a2      	str	r2, [r4, #8]
 8011354:	6123      	str	r3, [r4, #16]
 8011356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	706b      	strb	r3, [r5, #1]
 8011360:	e7c2      	b.n	80112e8 <ucdr_deserialize_int16_t+0x58>
 8011362:	4639      	mov	r1, r7
 8011364:	4632      	mov	r2, r6
 8011366:	4628      	mov	r0, r5
 8011368:	f00a fc57 	bl	801bc1a <memcpy>
 801136c:	464a      	mov	r2, r9
 801136e:	19a8      	adds	r0, r5, r6
 8011370:	68a1      	ldr	r1, [r4, #8]
 8011372:	f00a fc52 	bl	801bc1a <memcpy>
 8011376:	e7b7      	b.n	80112e8 <ucdr_deserialize_int16_t+0x58>

08011378 <ucdr_serialize_int32_t>:
 8011378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	4604      	mov	r4, r0
 8011380:	9101      	str	r1, [sp, #4]
 8011382:	2104      	movs	r1, #4
 8011384:	f000 fb20 	bl	80119c8 <ucdr_buffer_alignment>
 8011388:	4601      	mov	r1, r0
 801138a:	4620      	mov	r0, r4
 801138c:	7d67      	ldrb	r7, [r4, #21]
 801138e:	f000 fb63 	bl	8011a58 <ucdr_advance_buffer>
 8011392:	2104      	movs	r1, #4
 8011394:	4620      	mov	r0, r4
 8011396:	f000 fab7 	bl	8011908 <ucdr_check_buffer_available_for>
 801139a:	2800      	cmp	r0, #0
 801139c:	d139      	bne.n	8011412 <ucdr_serialize_int32_t+0x9a>
 801139e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80113a2:	42ab      	cmp	r3, r5
 80113a4:	d930      	bls.n	8011408 <ucdr_serialize_int32_t+0x90>
 80113a6:	1b5e      	subs	r6, r3, r5
 80113a8:	60a3      	str	r3, [r4, #8]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	4620      	mov	r0, r4
 80113ae:	f1c6 0804 	rsb	r8, r6, #4
 80113b2:	4433      	add	r3, r6
 80113b4:	4641      	mov	r1, r8
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	f000 fab2 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80113bc:	2800      	cmp	r0, #0
 80113be:	d04c      	beq.n	801145a <ucdr_serialize_int32_t+0xe2>
 80113c0:	7d23      	ldrb	r3, [r4, #20]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d063      	beq.n	801148e <ucdr_serialize_int32_t+0x116>
 80113c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113ca:	702b      	strb	r3, [r5, #0]
 80113cc:	2e00      	cmp	r6, #0
 80113ce:	d051      	beq.n	8011474 <ucdr_serialize_int32_t+0xfc>
 80113d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113d4:	2e01      	cmp	r6, #1
 80113d6:	706b      	strb	r3, [r5, #1]
 80113d8:	d050      	beq.n	801147c <ucdr_serialize_int32_t+0x104>
 80113da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80113de:	2e02      	cmp	r6, #2
 80113e0:	70ab      	strb	r3, [r5, #2]
 80113e2:	d04f      	beq.n	8011484 <ucdr_serialize_int32_t+0x10c>
 80113e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80113e8:	70eb      	strb	r3, [r5, #3]
 80113ea:	6923      	ldr	r3, [r4, #16]
 80113ec:	2104      	movs	r1, #4
 80113ee:	68a2      	ldr	r2, [r4, #8]
 80113f0:	3304      	adds	r3, #4
 80113f2:	7da0      	ldrb	r0, [r4, #22]
 80113f4:	4442      	add	r2, r8
 80113f6:	7561      	strb	r1, [r4, #21]
 80113f8:	1b9e      	subs	r6, r3, r6
 80113fa:	f080 0001 	eor.w	r0, r0, #1
 80113fe:	60a2      	str	r2, [r4, #8]
 8011400:	6126      	str	r6, [r4, #16]
 8011402:	b002      	add	sp, #8
 8011404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011408:	2104      	movs	r1, #4
 801140a:	4620      	mov	r0, r4
 801140c:	f000 fa88 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8011410:	b1d0      	cbz	r0, 8011448 <ucdr_serialize_int32_t+0xd0>
 8011412:	7d23      	ldrb	r3, [r4, #20]
 8011414:	2b01      	cmp	r3, #1
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	d01c      	beq.n	8011454 <ucdr_serialize_int32_t+0xdc>
 801141a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801141e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011422:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011426:	7018      	strb	r0, [r3, #0]
 8011428:	68a3      	ldr	r3, [r4, #8]
 801142a:	705a      	strb	r2, [r3, #1]
 801142c:	68a3      	ldr	r3, [r4, #8]
 801142e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011432:	7099      	strb	r1, [r3, #2]
 8011434:	68a3      	ldr	r3, [r4, #8]
 8011436:	70da      	strb	r2, [r3, #3]
 8011438:	2104      	movs	r1, #4
 801143a:	68a2      	ldr	r2, [r4, #8]
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	440a      	add	r2, r1
 8011440:	7561      	strb	r1, [r4, #21]
 8011442:	440b      	add	r3, r1
 8011444:	60a2      	str	r2, [r4, #8]
 8011446:	6123      	str	r3, [r4, #16]
 8011448:	7da0      	ldrb	r0, [r4, #22]
 801144a:	f080 0001 	eor.w	r0, r0, #1
 801144e:	b002      	add	sp, #8
 8011450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011454:	9a01      	ldr	r2, [sp, #4]
 8011456:	601a      	str	r2, [r3, #0]
 8011458:	e7ee      	b.n	8011438 <ucdr_serialize_int32_t+0xc0>
 801145a:	68a2      	ldr	r2, [r4, #8]
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	7da0      	ldrb	r0, [r4, #22]
 8011460:	1b92      	subs	r2, r2, r6
 8011462:	1b9b      	subs	r3, r3, r6
 8011464:	7567      	strb	r7, [r4, #21]
 8011466:	f080 0001 	eor.w	r0, r0, #1
 801146a:	60a2      	str	r2, [r4, #8]
 801146c:	6123      	str	r3, [r4, #16]
 801146e:	b002      	add	sp, #8
 8011470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011474:	68a3      	ldr	r3, [r4, #8]
 8011476:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801147a:	701a      	strb	r2, [r3, #0]
 801147c:	68a3      	ldr	r3, [r4, #8]
 801147e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011482:	701a      	strb	r2, [r3, #0]
 8011484:	68a3      	ldr	r3, [r4, #8]
 8011486:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801148a:	701a      	strb	r2, [r3, #0]
 801148c:	e7ad      	b.n	80113ea <ucdr_serialize_int32_t+0x72>
 801148e:	4628      	mov	r0, r5
 8011490:	ad01      	add	r5, sp, #4
 8011492:	4632      	mov	r2, r6
 8011494:	4629      	mov	r1, r5
 8011496:	f00a fbc0 	bl	801bc1a <memcpy>
 801149a:	4642      	mov	r2, r8
 801149c:	19a9      	adds	r1, r5, r6
 801149e:	68a0      	ldr	r0, [r4, #8]
 80114a0:	f00a fbbb 	bl	801bc1a <memcpy>
 80114a4:	e7a1      	b.n	80113ea <ucdr_serialize_int32_t+0x72>
 80114a6:	bf00      	nop

080114a8 <ucdr_deserialize_int32_t>:
 80114a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114ac:	4604      	mov	r4, r0
 80114ae:	460d      	mov	r5, r1
 80114b0:	2104      	movs	r1, #4
 80114b2:	f000 fa89 	bl	80119c8 <ucdr_buffer_alignment>
 80114b6:	4601      	mov	r1, r0
 80114b8:	4620      	mov	r0, r4
 80114ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114be:	f000 facb 	bl	8011a58 <ucdr_advance_buffer>
 80114c2:	2104      	movs	r1, #4
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 fa1f 	bl	8011908 <ucdr_check_buffer_available_for>
 80114ca:	2800      	cmp	r0, #0
 80114cc:	d138      	bne.n	8011540 <ucdr_deserialize_int32_t+0x98>
 80114ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80114d2:	42b7      	cmp	r7, r6
 80114d4:	d92f      	bls.n	8011536 <ucdr_deserialize_int32_t+0x8e>
 80114d6:	6923      	ldr	r3, [r4, #16]
 80114d8:	4620      	mov	r0, r4
 80114da:	60a7      	str	r7, [r4, #8]
 80114dc:	1bbf      	subs	r7, r7, r6
 80114de:	443b      	add	r3, r7
 80114e0:	f1c7 0904 	rsb	r9, r7, #4
 80114e4:	6123      	str	r3, [r4, #16]
 80114e6:	4649      	mov	r1, r9
 80114e8:	f000 fa1a 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d046      	beq.n	801157e <ucdr_deserialize_int32_t+0xd6>
 80114f0:	7d23      	ldrb	r3, [r4, #20]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d05c      	beq.n	80115b0 <ucdr_deserialize_int32_t+0x108>
 80114f6:	78f3      	ldrb	r3, [r6, #3]
 80114f8:	702b      	strb	r3, [r5, #0]
 80114fa:	2f00      	cmp	r7, #0
 80114fc:	d04c      	beq.n	8011598 <ucdr_deserialize_int32_t+0xf0>
 80114fe:	78b3      	ldrb	r3, [r6, #2]
 8011500:	2f01      	cmp	r7, #1
 8011502:	706b      	strb	r3, [r5, #1]
 8011504:	f105 0302 	add.w	r3, r5, #2
 8011508:	d04a      	beq.n	80115a0 <ucdr_deserialize_int32_t+0xf8>
 801150a:	7873      	ldrb	r3, [r6, #1]
 801150c:	2f02      	cmp	r7, #2
 801150e:	70ab      	strb	r3, [r5, #2]
 8011510:	f105 0303 	add.w	r3, r5, #3
 8011514:	d048      	beq.n	80115a8 <ucdr_deserialize_int32_t+0x100>
 8011516:	7833      	ldrb	r3, [r6, #0]
 8011518:	70eb      	strb	r3, [r5, #3]
 801151a:	6923      	ldr	r3, [r4, #16]
 801151c:	2104      	movs	r1, #4
 801151e:	68a2      	ldr	r2, [r4, #8]
 8011520:	3304      	adds	r3, #4
 8011522:	7da0      	ldrb	r0, [r4, #22]
 8011524:	444a      	add	r2, r9
 8011526:	7561      	strb	r1, [r4, #21]
 8011528:	1bdb      	subs	r3, r3, r7
 801152a:	f080 0001 	eor.w	r0, r0, #1
 801152e:	60a2      	str	r2, [r4, #8]
 8011530:	6123      	str	r3, [r4, #16]
 8011532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011536:	2104      	movs	r1, #4
 8011538:	4620      	mov	r0, r4
 801153a:	f000 f9f1 	bl	8011920 <ucdr_check_final_buffer_behavior>
 801153e:	b1b0      	cbz	r0, 801156e <ucdr_deserialize_int32_t+0xc6>
 8011540:	7d23      	ldrb	r3, [r4, #20]
 8011542:	2b01      	cmp	r3, #1
 8011544:	68a3      	ldr	r3, [r4, #8]
 8011546:	d017      	beq.n	8011578 <ucdr_deserialize_int32_t+0xd0>
 8011548:	78db      	ldrb	r3, [r3, #3]
 801154a:	702b      	strb	r3, [r5, #0]
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	789b      	ldrb	r3, [r3, #2]
 8011550:	706b      	strb	r3, [r5, #1]
 8011552:	68a3      	ldr	r3, [r4, #8]
 8011554:	785b      	ldrb	r3, [r3, #1]
 8011556:	70ab      	strb	r3, [r5, #2]
 8011558:	68a3      	ldr	r3, [r4, #8]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	70eb      	strb	r3, [r5, #3]
 801155e:	2104      	movs	r1, #4
 8011560:	68a2      	ldr	r2, [r4, #8]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	440a      	add	r2, r1
 8011566:	7561      	strb	r1, [r4, #21]
 8011568:	440b      	add	r3, r1
 801156a:	60a2      	str	r2, [r4, #8]
 801156c:	6123      	str	r3, [r4, #16]
 801156e:	7da0      	ldrb	r0, [r4, #22]
 8011570:	f080 0001 	eor.w	r0, r0, #1
 8011574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	602b      	str	r3, [r5, #0]
 801157c:	e7ef      	b.n	801155e <ucdr_deserialize_int32_t+0xb6>
 801157e:	68a2      	ldr	r2, [r4, #8]
 8011580:	6923      	ldr	r3, [r4, #16]
 8011582:	1bd2      	subs	r2, r2, r7
 8011584:	7da0      	ldrb	r0, [r4, #22]
 8011586:	1bdb      	subs	r3, r3, r7
 8011588:	f884 8015 	strb.w	r8, [r4, #21]
 801158c:	f080 0001 	eor.w	r0, r0, #1
 8011590:	60a2      	str	r2, [r4, #8]
 8011592:	6123      	str	r3, [r4, #16]
 8011594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011598:	68a3      	ldr	r3, [r4, #8]
 801159a:	789b      	ldrb	r3, [r3, #2]
 801159c:	706b      	strb	r3, [r5, #1]
 801159e:	1cab      	adds	r3, r5, #2
 80115a0:	68a2      	ldr	r2, [r4, #8]
 80115a2:	7852      	ldrb	r2, [r2, #1]
 80115a4:	f803 2b01 	strb.w	r2, [r3], #1
 80115a8:	68a2      	ldr	r2, [r4, #8]
 80115aa:	7812      	ldrb	r2, [r2, #0]
 80115ac:	701a      	strb	r2, [r3, #0]
 80115ae:	e7b4      	b.n	801151a <ucdr_deserialize_int32_t+0x72>
 80115b0:	4631      	mov	r1, r6
 80115b2:	463a      	mov	r2, r7
 80115b4:	4628      	mov	r0, r5
 80115b6:	f00a fb30 	bl	801bc1a <memcpy>
 80115ba:	464a      	mov	r2, r9
 80115bc:	19e8      	adds	r0, r5, r7
 80115be:	68a1      	ldr	r1, [r4, #8]
 80115c0:	f00a fb2b 	bl	801bc1a <memcpy>
 80115c4:	e7a9      	b.n	801151a <ucdr_deserialize_int32_t+0x72>
 80115c6:	bf00      	nop

080115c8 <ucdr_serialize_endian_double>:
 80115c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115cc:	4604      	mov	r4, r0
 80115ce:	b083      	sub	sp, #12
 80115d0:	460e      	mov	r6, r1
 80115d2:	2108      	movs	r1, #8
 80115d4:	ed8d 0b00 	vstr	d0, [sp]
 80115d8:	f000 f9f6 	bl	80119c8 <ucdr_buffer_alignment>
 80115dc:	4601      	mov	r1, r0
 80115de:	4620      	mov	r0, r4
 80115e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80115e4:	f000 fa38 	bl	8011a58 <ucdr_advance_buffer>
 80115e8:	2108      	movs	r1, #8
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 f98c 	bl	8011908 <ucdr_check_buffer_available_for>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d14d      	bne.n	8011690 <ucdr_serialize_endian_double+0xc8>
 80115f4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 80115f8:	42bd      	cmp	r5, r7
 80115fa:	d944      	bls.n	8011686 <ucdr_serialize_endian_double+0xbe>
 80115fc:	6923      	ldr	r3, [r4, #16]
 80115fe:	4620      	mov	r0, r4
 8011600:	60a5      	str	r5, [r4, #8]
 8011602:	1bed      	subs	r5, r5, r7
 8011604:	442b      	add	r3, r5
 8011606:	f1c5 0908 	rsb	r9, r5, #8
 801160a:	6123      	str	r3, [r4, #16]
 801160c:	4649      	mov	r1, r9
 801160e:	f000 f987 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8011612:	2800      	cmp	r0, #0
 8011614:	d072      	beq.n	80116fc <ucdr_serialize_endian_double+0x134>
 8011616:	2e01      	cmp	r6, #1
 8011618:	f000 809b 	beq.w	8011752 <ucdr_serialize_endian_double+0x18a>
 801161c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011620:	703b      	strb	r3, [r7, #0]
 8011622:	2d00      	cmp	r5, #0
 8011624:	d078      	beq.n	8011718 <ucdr_serialize_endian_double+0x150>
 8011626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801162a:	2d01      	cmp	r5, #1
 801162c:	707b      	strb	r3, [r7, #1]
 801162e:	d077      	beq.n	8011720 <ucdr_serialize_endian_double+0x158>
 8011630:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011634:	2d02      	cmp	r5, #2
 8011636:	70bb      	strb	r3, [r7, #2]
 8011638:	d076      	beq.n	8011728 <ucdr_serialize_endian_double+0x160>
 801163a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801163e:	2d03      	cmp	r5, #3
 8011640:	70fb      	strb	r3, [r7, #3]
 8011642:	d075      	beq.n	8011730 <ucdr_serialize_endian_double+0x168>
 8011644:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011648:	2d04      	cmp	r5, #4
 801164a:	713b      	strb	r3, [r7, #4]
 801164c:	d074      	beq.n	8011738 <ucdr_serialize_endian_double+0x170>
 801164e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011652:	2d05      	cmp	r5, #5
 8011654:	717b      	strb	r3, [r7, #5]
 8011656:	d073      	beq.n	8011740 <ucdr_serialize_endian_double+0x178>
 8011658:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801165c:	2d06      	cmp	r5, #6
 801165e:	71bb      	strb	r3, [r7, #6]
 8011660:	d072      	beq.n	8011748 <ucdr_serialize_endian_double+0x180>
 8011662:	f89d 3000 	ldrb.w	r3, [sp]
 8011666:	71fb      	strb	r3, [r7, #7]
 8011668:	6923      	ldr	r3, [r4, #16]
 801166a:	2108      	movs	r1, #8
 801166c:	68a2      	ldr	r2, [r4, #8]
 801166e:	3308      	adds	r3, #8
 8011670:	7da0      	ldrb	r0, [r4, #22]
 8011672:	444a      	add	r2, r9
 8011674:	7561      	strb	r1, [r4, #21]
 8011676:	1b5d      	subs	r5, r3, r5
 8011678:	f080 0001 	eor.w	r0, r0, #1
 801167c:	60a2      	str	r2, [r4, #8]
 801167e:	6125      	str	r5, [r4, #16]
 8011680:	b003      	add	sp, #12
 8011682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011686:	2108      	movs	r1, #8
 8011688:	4620      	mov	r0, r4
 801168a:	f000 f949 	bl	8011920 <ucdr_check_final_buffer_behavior>
 801168e:	b348      	cbz	r0, 80116e4 <ucdr_serialize_endian_double+0x11c>
 8011690:	2e01      	cmp	r6, #1
 8011692:	d02d      	beq.n	80116f0 <ucdr_serialize_endian_double+0x128>
 8011694:	68a3      	ldr	r3, [r4, #8]
 8011696:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801169a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801169e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80116a2:	7018      	strb	r0, [r3, #0]
 80116a4:	68a3      	ldr	r3, [r4, #8]
 80116a6:	705a      	strb	r2, [r3, #1]
 80116a8:	68a3      	ldr	r3, [r4, #8]
 80116aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80116b2:	7099      	strb	r1, [r3, #2]
 80116b4:	68a3      	ldr	r3, [r4, #8]
 80116b6:	70da      	strb	r2, [r3, #3]
 80116b8:	68a3      	ldr	r3, [r4, #8]
 80116ba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80116be:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80116c2:	7118      	strb	r0, [r3, #4]
 80116c4:	68a3      	ldr	r3, [r4, #8]
 80116c6:	715a      	strb	r2, [r3, #5]
 80116c8:	68a3      	ldr	r3, [r4, #8]
 80116ca:	f89d 2000 	ldrb.w	r2, [sp]
 80116ce:	7199      	strb	r1, [r3, #6]
 80116d0:	68a3      	ldr	r3, [r4, #8]
 80116d2:	71da      	strb	r2, [r3, #7]
 80116d4:	2108      	movs	r1, #8
 80116d6:	68a2      	ldr	r2, [r4, #8]
 80116d8:	6923      	ldr	r3, [r4, #16]
 80116da:	440a      	add	r2, r1
 80116dc:	7561      	strb	r1, [r4, #21]
 80116de:	440b      	add	r3, r1
 80116e0:	60a2      	str	r2, [r4, #8]
 80116e2:	6123      	str	r3, [r4, #16]
 80116e4:	7da0      	ldrb	r0, [r4, #22]
 80116e6:	f080 0001 	eor.w	r0, r0, #1
 80116ea:	b003      	add	sp, #12
 80116ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116f0:	466b      	mov	r3, sp
 80116f2:	68a2      	ldr	r2, [r4, #8]
 80116f4:	cb03      	ldmia	r3!, {r0, r1}
 80116f6:	6010      	str	r0, [r2, #0]
 80116f8:	6051      	str	r1, [r2, #4]
 80116fa:	e7eb      	b.n	80116d4 <ucdr_serialize_endian_double+0x10c>
 80116fc:	68a2      	ldr	r2, [r4, #8]
 80116fe:	6923      	ldr	r3, [r4, #16]
 8011700:	7da0      	ldrb	r0, [r4, #22]
 8011702:	1b52      	subs	r2, r2, r5
 8011704:	1b5b      	subs	r3, r3, r5
 8011706:	f884 8015 	strb.w	r8, [r4, #21]
 801170a:	f080 0001 	eor.w	r0, r0, #1
 801170e:	60a2      	str	r2, [r4, #8]
 8011710:	6123      	str	r3, [r4, #16]
 8011712:	b003      	add	sp, #12
 8011714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011718:	68a3      	ldr	r3, [r4, #8]
 801171a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	68a3      	ldr	r3, [r4, #8]
 8011722:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	68a3      	ldr	r3, [r4, #8]
 801172a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801172e:	701a      	strb	r2, [r3, #0]
 8011730:	68a3      	ldr	r3, [r4, #8]
 8011732:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011736:	701a      	strb	r2, [r3, #0]
 8011738:	68a3      	ldr	r3, [r4, #8]
 801173a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801173e:	701a      	strb	r2, [r3, #0]
 8011740:	68a3      	ldr	r3, [r4, #8]
 8011742:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	f89d 2000 	ldrb.w	r2, [sp]
 801174e:	701a      	strb	r2, [r3, #0]
 8011750:	e78a      	b.n	8011668 <ucdr_serialize_endian_double+0xa0>
 8011752:	466e      	mov	r6, sp
 8011754:	462a      	mov	r2, r5
 8011756:	4638      	mov	r0, r7
 8011758:	4631      	mov	r1, r6
 801175a:	f00a fa5e 	bl	801bc1a <memcpy>
 801175e:	464a      	mov	r2, r9
 8011760:	1971      	adds	r1, r6, r5
 8011762:	68a0      	ldr	r0, [r4, #8]
 8011764:	f00a fa59 	bl	801bc1a <memcpy>
 8011768:	e77e      	b.n	8011668 <ucdr_serialize_endian_double+0xa0>
 801176a:	bf00      	nop

0801176c <ucdr_deserialize_endian_double>:
 801176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011770:	4604      	mov	r4, r0
 8011772:	460f      	mov	r7, r1
 8011774:	2108      	movs	r1, #8
 8011776:	4615      	mov	r5, r2
 8011778:	f000 f926 	bl	80119c8 <ucdr_buffer_alignment>
 801177c:	4601      	mov	r1, r0
 801177e:	4620      	mov	r0, r4
 8011780:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011784:	f000 f968 	bl	8011a58 <ucdr_advance_buffer>
 8011788:	2108      	movs	r1, #8
 801178a:	4620      	mov	r0, r4
 801178c:	f000 f8bc 	bl	8011908 <ucdr_check_buffer_available_for>
 8011790:	2800      	cmp	r0, #0
 8011792:	d159      	bne.n	8011848 <ucdr_deserialize_endian_double+0xdc>
 8011794:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 8011798:	454e      	cmp	r6, r9
 801179a:	d950      	bls.n	801183e <ucdr_deserialize_endian_double+0xd2>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	4620      	mov	r0, r4
 80117a0:	60a6      	str	r6, [r4, #8]
 80117a2:	eba6 0609 	sub.w	r6, r6, r9
 80117a6:	4433      	add	r3, r6
 80117a8:	f1c6 0a08 	rsb	sl, r6, #8
 80117ac:	6123      	str	r3, [r4, #16]
 80117ae:	4651      	mov	r1, sl
 80117b0:	f000 f8b6 	bl	8011920 <ucdr_check_final_buffer_behavior>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d073      	beq.n	80118a0 <ucdr_deserialize_endian_double+0x134>
 80117b8:	2f01      	cmp	r7, #1
 80117ba:	f000 809a 	beq.w	80118f2 <ucdr_deserialize_endian_double+0x186>
 80117be:	f899 3007 	ldrb.w	r3, [r9, #7]
 80117c2:	702b      	strb	r3, [r5, #0]
 80117c4:	2e00      	cmp	r6, #0
 80117c6:	d078      	beq.n	80118ba <ucdr_deserialize_endian_double+0x14e>
 80117c8:	f899 3006 	ldrb.w	r3, [r9, #6]
 80117cc:	2e01      	cmp	r6, #1
 80117ce:	706b      	strb	r3, [r5, #1]
 80117d0:	f105 0302 	add.w	r3, r5, #2
 80117d4:	d075      	beq.n	80118c2 <ucdr_deserialize_endian_double+0x156>
 80117d6:	f899 3005 	ldrb.w	r3, [r9, #5]
 80117da:	2e02      	cmp	r6, #2
 80117dc:	70ab      	strb	r3, [r5, #2]
 80117de:	f105 0303 	add.w	r3, r5, #3
 80117e2:	d072      	beq.n	80118ca <ucdr_deserialize_endian_double+0x15e>
 80117e4:	f899 3004 	ldrb.w	r3, [r9, #4]
 80117e8:	2e03      	cmp	r6, #3
 80117ea:	70eb      	strb	r3, [r5, #3]
 80117ec:	f105 0304 	add.w	r3, r5, #4
 80117f0:	d06f      	beq.n	80118d2 <ucdr_deserialize_endian_double+0x166>
 80117f2:	f899 3003 	ldrb.w	r3, [r9, #3]
 80117f6:	2e04      	cmp	r6, #4
 80117f8:	712b      	strb	r3, [r5, #4]
 80117fa:	f105 0305 	add.w	r3, r5, #5
 80117fe:	d06c      	beq.n	80118da <ucdr_deserialize_endian_double+0x16e>
 8011800:	f899 3002 	ldrb.w	r3, [r9, #2]
 8011804:	2e05      	cmp	r6, #5
 8011806:	716b      	strb	r3, [r5, #5]
 8011808:	f105 0306 	add.w	r3, r5, #6
 801180c:	d069      	beq.n	80118e2 <ucdr_deserialize_endian_double+0x176>
 801180e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011812:	2e06      	cmp	r6, #6
 8011814:	71ab      	strb	r3, [r5, #6]
 8011816:	f105 0307 	add.w	r3, r5, #7
 801181a:	d066      	beq.n	80118ea <ucdr_deserialize_endian_double+0x17e>
 801181c:	f899 3000 	ldrb.w	r3, [r9]
 8011820:	71eb      	strb	r3, [r5, #7]
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	2108      	movs	r1, #8
 8011826:	68a2      	ldr	r2, [r4, #8]
 8011828:	3308      	adds	r3, #8
 801182a:	7da0      	ldrb	r0, [r4, #22]
 801182c:	4452      	add	r2, sl
 801182e:	7561      	strb	r1, [r4, #21]
 8011830:	1b9e      	subs	r6, r3, r6
 8011832:	f080 0001 	eor.w	r0, r0, #1
 8011836:	60a2      	str	r2, [r4, #8]
 8011838:	6126      	str	r6, [r4, #16]
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	2108      	movs	r1, #8
 8011840:	4620      	mov	r0, r4
 8011842:	f000 f86d 	bl	8011920 <ucdr_check_final_buffer_behavior>
 8011846:	b308      	cbz	r0, 801188c <ucdr_deserialize_endian_double+0x120>
 8011848:	2f01      	cmp	r7, #1
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	d023      	beq.n	8011896 <ucdr_deserialize_endian_double+0x12a>
 801184e:	79db      	ldrb	r3, [r3, #7]
 8011850:	702b      	strb	r3, [r5, #0]
 8011852:	68a3      	ldr	r3, [r4, #8]
 8011854:	799b      	ldrb	r3, [r3, #6]
 8011856:	706b      	strb	r3, [r5, #1]
 8011858:	68a3      	ldr	r3, [r4, #8]
 801185a:	795b      	ldrb	r3, [r3, #5]
 801185c:	70ab      	strb	r3, [r5, #2]
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	791b      	ldrb	r3, [r3, #4]
 8011862:	70eb      	strb	r3, [r5, #3]
 8011864:	68a3      	ldr	r3, [r4, #8]
 8011866:	78db      	ldrb	r3, [r3, #3]
 8011868:	712b      	strb	r3, [r5, #4]
 801186a:	68a3      	ldr	r3, [r4, #8]
 801186c:	789b      	ldrb	r3, [r3, #2]
 801186e:	716b      	strb	r3, [r5, #5]
 8011870:	68a3      	ldr	r3, [r4, #8]
 8011872:	785b      	ldrb	r3, [r3, #1]
 8011874:	71ab      	strb	r3, [r5, #6]
 8011876:	68a3      	ldr	r3, [r4, #8]
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	71eb      	strb	r3, [r5, #7]
 801187c:	2108      	movs	r1, #8
 801187e:	68a2      	ldr	r2, [r4, #8]
 8011880:	6923      	ldr	r3, [r4, #16]
 8011882:	440a      	add	r2, r1
 8011884:	7561      	strb	r1, [r4, #21]
 8011886:	440b      	add	r3, r1
 8011888:	60a2      	str	r2, [r4, #8]
 801188a:	6123      	str	r3, [r4, #16]
 801188c:	7da0      	ldrb	r0, [r4, #22]
 801188e:	f080 0001 	eor.w	r0, r0, #1
 8011892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	602a      	str	r2, [r5, #0]
 801189c:	606b      	str	r3, [r5, #4]
 801189e:	e7ed      	b.n	801187c <ucdr_deserialize_endian_double+0x110>
 80118a0:	68a2      	ldr	r2, [r4, #8]
 80118a2:	6923      	ldr	r3, [r4, #16]
 80118a4:	1b92      	subs	r2, r2, r6
 80118a6:	7da0      	ldrb	r0, [r4, #22]
 80118a8:	1b9b      	subs	r3, r3, r6
 80118aa:	f884 8015 	strb.w	r8, [r4, #21]
 80118ae:	f080 0001 	eor.w	r0, r0, #1
 80118b2:	60a2      	str	r2, [r4, #8]
 80118b4:	6123      	str	r3, [r4, #16]
 80118b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ba:	68a3      	ldr	r3, [r4, #8]
 80118bc:	799b      	ldrb	r3, [r3, #6]
 80118be:	706b      	strb	r3, [r5, #1]
 80118c0:	1cab      	adds	r3, r5, #2
 80118c2:	68a2      	ldr	r2, [r4, #8]
 80118c4:	7952      	ldrb	r2, [r2, #5]
 80118c6:	f803 2b01 	strb.w	r2, [r3], #1
 80118ca:	68a2      	ldr	r2, [r4, #8]
 80118cc:	7912      	ldrb	r2, [r2, #4]
 80118ce:	f803 2b01 	strb.w	r2, [r3], #1
 80118d2:	68a2      	ldr	r2, [r4, #8]
 80118d4:	78d2      	ldrb	r2, [r2, #3]
 80118d6:	f803 2b01 	strb.w	r2, [r3], #1
 80118da:	68a2      	ldr	r2, [r4, #8]
 80118dc:	7892      	ldrb	r2, [r2, #2]
 80118de:	f803 2b01 	strb.w	r2, [r3], #1
 80118e2:	68a2      	ldr	r2, [r4, #8]
 80118e4:	7852      	ldrb	r2, [r2, #1]
 80118e6:	f803 2b01 	strb.w	r2, [r3], #1
 80118ea:	68a2      	ldr	r2, [r4, #8]
 80118ec:	7812      	ldrb	r2, [r2, #0]
 80118ee:	701a      	strb	r2, [r3, #0]
 80118f0:	e797      	b.n	8011822 <ucdr_deserialize_endian_double+0xb6>
 80118f2:	4649      	mov	r1, r9
 80118f4:	4632      	mov	r2, r6
 80118f6:	4628      	mov	r0, r5
 80118f8:	f00a f98f 	bl	801bc1a <memcpy>
 80118fc:	4652      	mov	r2, sl
 80118fe:	19a8      	adds	r0, r5, r6
 8011900:	68a1      	ldr	r1, [r4, #8]
 8011902:	f00a f98a 	bl	801bc1a <memcpy>
 8011906:	e78c      	b.n	8011822 <ucdr_deserialize_endian_double+0xb6>

08011908 <ucdr_check_buffer_available_for>:
 8011908:	7d83      	ldrb	r3, [r0, #22]
 801190a:	b93b      	cbnz	r3, 801191c <ucdr_check_buffer_available_for+0x14>
 801190c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011910:	4419      	add	r1, r3
 8011912:	4288      	cmp	r0, r1
 8011914:	bf34      	ite	cc
 8011916:	2000      	movcc	r0, #0
 8011918:	2001      	movcs	r0, #1
 801191a:	4770      	bx	lr
 801191c:	2000      	movs	r0, #0
 801191e:	4770      	bx	lr

08011920 <ucdr_check_final_buffer_behavior>:
 8011920:	7d83      	ldrb	r3, [r0, #22]
 8011922:	b943      	cbnz	r3, 8011936 <ucdr_check_final_buffer_behavior+0x16>
 8011924:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011928:	b510      	push	{r4, lr}
 801192a:	4291      	cmp	r1, r2
 801192c:	4604      	mov	r4, r0
 801192e:	d205      	bcs.n	801193c <ucdr_check_final_buffer_behavior+0x1c>
 8011930:	2301      	movs	r3, #1
 8011932:	4618      	mov	r0, r3
 8011934:	bd10      	pop	{r4, pc}
 8011936:	2300      	movs	r3, #0
 8011938:	4618      	mov	r0, r3
 801193a:	4770      	bx	lr
 801193c:	6982      	ldr	r2, [r0, #24]
 801193e:	b13a      	cbz	r2, 8011950 <ucdr_check_final_buffer_behavior+0x30>
 8011940:	69c1      	ldr	r1, [r0, #28]
 8011942:	4790      	blx	r2
 8011944:	f080 0301 	eor.w	r3, r0, #1
 8011948:	75a0      	strb	r0, [r4, #22]
 801194a:	b2db      	uxtb	r3, r3
 801194c:	4618      	mov	r0, r3
 801194e:	bd10      	pop	{r4, pc}
 8011950:	2001      	movs	r0, #1
 8011952:	75a0      	strb	r0, [r4, #22]
 8011954:	e7fa      	b.n	801194c <ucdr_check_final_buffer_behavior+0x2c>
 8011956:	bf00      	nop

08011958 <ucdr_set_on_full_buffer_callback>:
 8011958:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop

08011960 <ucdr_init_buffer_origin_offset_endian>:
 8011960:	b410      	push	{r4}
 8011962:	9c01      	ldr	r4, [sp, #4]
 8011964:	440a      	add	r2, r1
 8011966:	6001      	str	r1, [r0, #0]
 8011968:	6042      	str	r2, [r0, #4]
 801196a:	190a      	adds	r2, r1, r4
 801196c:	441c      	add	r4, r3
 801196e:	6082      	str	r2, [r0, #8]
 8011970:	2200      	movs	r2, #0
 8011972:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011976:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801197a:	7542      	strb	r2, [r0, #21]
 801197c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011980:	7582      	strb	r2, [r0, #22]
 8011982:	7503      	strb	r3, [r0, #20]
 8011984:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop

0801198c <ucdr_init_buffer_origin_offset>:
 801198c:	b510      	push	{r4, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	9c04      	ldr	r4, [sp, #16]
 8011992:	9400      	str	r4, [sp, #0]
 8011994:	2401      	movs	r4, #1
 8011996:	9401      	str	r4, [sp, #4]
 8011998:	f7ff ffe2 	bl	8011960 <ucdr_init_buffer_origin_offset_endian>
 801199c:	b002      	add	sp, #8
 801199e:	bd10      	pop	{r4, pc}

080119a0 <ucdr_init_buffer_origin>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	2400      	movs	r4, #0
 80119a4:	b082      	sub	sp, #8
 80119a6:	9400      	str	r4, [sp, #0]
 80119a8:	f7ff fff0 	bl	801198c <ucdr_init_buffer_origin_offset>
 80119ac:	b002      	add	sp, #8
 80119ae:	bd10      	pop	{r4, pc}

080119b0 <ucdr_init_buffer>:
 80119b0:	2300      	movs	r3, #0
 80119b2:	f7ff bff5 	b.w	80119a0 <ucdr_init_buffer_origin>
 80119b6:	bf00      	nop

080119b8 <ucdr_alignment>:
 80119b8:	fbb0 f2f1 	udiv	r2, r0, r1
 80119bc:	fb02 0011 	mls	r0, r2, r1, r0
 80119c0:	1e4b      	subs	r3, r1, #1
 80119c2:	1a08      	subs	r0, r1, r0
 80119c4:	4018      	ands	r0, r3
 80119c6:	4770      	bx	lr

080119c8 <ucdr_buffer_alignment>:
 80119c8:	7d43      	ldrb	r3, [r0, #21]
 80119ca:	428b      	cmp	r3, r1
 80119cc:	d209      	bcs.n	80119e2 <ucdr_buffer_alignment+0x1a>
 80119ce:	6903      	ldr	r3, [r0, #16]
 80119d0:	1e4a      	subs	r2, r1, #1
 80119d2:	fbb3 f0f1 	udiv	r0, r3, r1
 80119d6:	fb01 3010 	mls	r0, r1, r0, r3
 80119da:	1a09      	subs	r1, r1, r0
 80119dc:	ea01 0002 	and.w	r0, r1, r2
 80119e0:	4770      	bx	lr
 80119e2:	2000      	movs	r0, #0
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop

080119e8 <ucdr_align_to>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4604      	mov	r4, r0
 80119ec:	460d      	mov	r5, r1
 80119ee:	f7ff ffeb 	bl	80119c8 <ucdr_buffer_alignment>
 80119f2:	68a3      	ldr	r3, [r4, #8]
 80119f4:	7565      	strb	r5, [r4, #21]
 80119f6:	181a      	adds	r2, r3, r0
 80119f8:	6923      	ldr	r3, [r4, #16]
 80119fa:	4418      	add	r0, r3
 80119fc:	6863      	ldr	r3, [r4, #4]
 80119fe:	4293      	cmp	r3, r2
 8011a00:	6120      	str	r0, [r4, #16]
 8011a02:	bf28      	it	cs
 8011a04:	4613      	movcs	r3, r2
 8011a06:	60a3      	str	r3, [r4, #8]
 8011a08:	bd38      	pop	{r3, r4, r5, pc}
 8011a0a:	bf00      	nop

08011a0c <ucdr_buffer_length>:
 8011a0c:	6882      	ldr	r2, [r0, #8]
 8011a0e:	6800      	ldr	r0, [r0, #0]
 8011a10:	1a10      	subs	r0, r2, r0
 8011a12:	4770      	bx	lr

08011a14 <ucdr_buffer_remaining>:
 8011a14:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011a18:	1a10      	subs	r0, r2, r0
 8011a1a:	4770      	bx	lr

08011a1c <ucdr_check_final_buffer_behavior_array>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	7d83      	ldrb	r3, [r0, #22]
 8011a20:	b9a3      	cbnz	r3, 8011a4c <ucdr_check_final_buffer_behavior_array+0x30>
 8011a22:	4604      	mov	r4, r0
 8011a24:	460d      	mov	r5, r1
 8011a26:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d300      	bcc.n	8011a30 <ucdr_check_final_buffer_behavior_array+0x14>
 8011a2e:	b931      	cbnz	r1, 8011a3e <ucdr_check_final_buffer_behavior_array+0x22>
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7ff ffef 	bl	8011a14 <ucdr_buffer_remaining>
 8011a36:	42a8      	cmp	r0, r5
 8011a38:	bf28      	it	cs
 8011a3a:	4628      	movcs	r0, r5
 8011a3c:	bd38      	pop	{r3, r4, r5, pc}
 8011a3e:	6983      	ldr	r3, [r0, #24]
 8011a40:	b133      	cbz	r3, 8011a50 <ucdr_check_final_buffer_behavior_array+0x34>
 8011a42:	69c1      	ldr	r1, [r0, #28]
 8011a44:	4798      	blx	r3
 8011a46:	75a0      	strb	r0, [r4, #22]
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d0f1      	beq.n	8011a30 <ucdr_check_final_buffer_behavior_array+0x14>
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	2301      	movs	r3, #1
 8011a52:	7583      	strb	r3, [r0, #22]
 8011a54:	e7fa      	b.n	8011a4c <ucdr_check_final_buffer_behavior_array+0x30>
 8011a56:	bf00      	nop

08011a58 <ucdr_advance_buffer>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	f7ff ff53 	bl	8011908 <ucdr_check_buffer_available_for>
 8011a62:	b178      	cbz	r0, 8011a84 <ucdr_advance_buffer+0x2c>
 8011a64:	6923      	ldr	r3, [r4, #16]
 8011a66:	68a2      	ldr	r2, [r4, #8]
 8011a68:	442b      	add	r3, r5
 8011a6a:	442a      	add	r2, r5
 8011a6c:	6123      	str	r3, [r4, #16]
 8011a6e:	2301      	movs	r3, #1
 8011a70:	60a2      	str	r2, [r4, #8]
 8011a72:	7563      	strb	r3, [r4, #21]
 8011a74:	bd38      	pop	{r3, r4, r5, pc}
 8011a76:	68a2      	ldr	r2, [r4, #8]
 8011a78:	1a2d      	subs	r5, r5, r0
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	4402      	add	r2, r0
 8011a7e:	4418      	add	r0, r3
 8011a80:	60a2      	str	r2, [r4, #8]
 8011a82:	6120      	str	r0, [r4, #16]
 8011a84:	4629      	mov	r1, r5
 8011a86:	2201      	movs	r2, #1
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff ffc7 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d1f1      	bne.n	8011a76 <ucdr_advance_buffer+0x1e>
 8011a92:	2301      	movs	r3, #1
 8011a94:	7563      	strb	r3, [r4, #21]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}

08011a98 <ucdr_serialize_sequence_char>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	4615      	mov	r5, r2
 8011a9c:	460e      	mov	r6, r1
 8011a9e:	7d01      	ldrb	r1, [r0, #20]
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	f7ff f8e7 	bl	8010c74 <ucdr_serialize_endian_uint32_t>
 8011aa6:	b90d      	cbnz	r5, 8011aac <ucdr_serialize_sequence_char+0x14>
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	462b      	mov	r3, r5
 8011aae:	4632      	mov	r2, r6
 8011ab0:	7d21      	ldrb	r1, [r4, #20]
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ab8:	f007 bf9c 	b.w	80199f4 <ucdr_serialize_endian_array_char>

08011abc <ucdr_deserialize_sequence_char>:
 8011abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	461d      	mov	r5, r3
 8011ac2:	4616      	mov	r6, r2
 8011ac4:	460f      	mov	r7, r1
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	7d01      	ldrb	r1, [r0, #20]
 8011aca:	4604      	mov	r4, r0
 8011acc:	f7ff f9fa 	bl	8010ec4 <ucdr_deserialize_endian_uint32_t>
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	429e      	cmp	r6, r3
 8011ad4:	d201      	bcs.n	8011ada <ucdr_deserialize_sequence_char+0x1e>
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	75a2      	strb	r2, [r4, #22]
 8011ada:	b913      	cbnz	r3, 8011ae2 <ucdr_deserialize_sequence_char+0x26>
 8011adc:	2001      	movs	r0, #1
 8011ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae2:	463a      	mov	r2, r7
 8011ae4:	7d21      	ldrb	r1, [r4, #20]
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aec:	f007 bfb4 	b.w	8019a58 <ucdr_deserialize_endian_array_char>

08011af0 <ucdr_serialize_sequence_uint8_t>:
 8011af0:	b570      	push	{r4, r5, r6, lr}
 8011af2:	4615      	mov	r5, r2
 8011af4:	460e      	mov	r6, r1
 8011af6:	7d01      	ldrb	r1, [r0, #20]
 8011af8:	4604      	mov	r4, r0
 8011afa:	f7ff f8bb 	bl	8010c74 <ucdr_serialize_endian_uint32_t>
 8011afe:	b90d      	cbnz	r5, 8011b04 <ucdr_serialize_sequence_uint8_t+0x14>
 8011b00:	2001      	movs	r0, #1
 8011b02:	bd70      	pop	{r4, r5, r6, pc}
 8011b04:	462b      	mov	r3, r5
 8011b06:	4632      	mov	r2, r6
 8011b08:	7d21      	ldrb	r1, [r4, #20]
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b10:	f008 b808 	b.w	8019b24 <ucdr_serialize_endian_array_uint8_t>

08011b14 <ucdr_deserialize_sequence_uint8_t>:
 8011b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b18:	461d      	mov	r5, r3
 8011b1a:	4616      	mov	r6, r2
 8011b1c:	460f      	mov	r7, r1
 8011b1e:	461a      	mov	r2, r3
 8011b20:	7d01      	ldrb	r1, [r0, #20]
 8011b22:	4604      	mov	r4, r0
 8011b24:	f7ff f9ce 	bl	8010ec4 <ucdr_deserialize_endian_uint32_t>
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	429e      	cmp	r6, r3
 8011b2c:	d201      	bcs.n	8011b32 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011b2e:	2201      	movs	r2, #1
 8011b30:	75a2      	strb	r2, [r4, #22]
 8011b32:	b913      	cbnz	r3, 8011b3a <ucdr_deserialize_sequence_uint8_t+0x26>
 8011b34:	2001      	movs	r0, #1
 8011b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b3a:	463a      	mov	r2, r7
 8011b3c:	7d21      	ldrb	r1, [r4, #20]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	f008 b854 	b.w	8019bf0 <ucdr_deserialize_endian_array_uint8_t>

08011b48 <ucdr_serialize_sequence_double>:
 8011b48:	b570      	push	{r4, r5, r6, lr}
 8011b4a:	4615      	mov	r5, r2
 8011b4c:	460e      	mov	r6, r1
 8011b4e:	7d01      	ldrb	r1, [r0, #20]
 8011b50:	4604      	mov	r4, r0
 8011b52:	f7ff f88f 	bl	8010c74 <ucdr_serialize_endian_uint32_t>
 8011b56:	b90d      	cbnz	r5, 8011b5c <ucdr_serialize_sequence_double+0x14>
 8011b58:	2001      	movs	r0, #1
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	4632      	mov	r2, r6
 8011b60:	7d21      	ldrb	r1, [r4, #20]
 8011b62:	4620      	mov	r0, r4
 8011b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b68:	f008 b876 	b.w	8019c58 <ucdr_serialize_endian_array_double>

08011b6c <ucdr_deserialize_sequence_double>:
 8011b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b70:	461d      	mov	r5, r3
 8011b72:	4616      	mov	r6, r2
 8011b74:	460f      	mov	r7, r1
 8011b76:	461a      	mov	r2, r3
 8011b78:	7d01      	ldrb	r1, [r0, #20]
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	f7ff f9a2 	bl	8010ec4 <ucdr_deserialize_endian_uint32_t>
 8011b80:	682b      	ldr	r3, [r5, #0]
 8011b82:	429e      	cmp	r6, r3
 8011b84:	d201      	bcs.n	8011b8a <ucdr_deserialize_sequence_double+0x1e>
 8011b86:	2201      	movs	r2, #1
 8011b88:	75a2      	strb	r2, [r4, #22]
 8011b8a:	b913      	cbnz	r3, 8011b92 <ucdr_deserialize_sequence_double+0x26>
 8011b8c:	2001      	movs	r0, #1
 8011b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b92:	463a      	mov	r2, r7
 8011b94:	7d21      	ldrb	r1, [r4, #20]
 8011b96:	4620      	mov	r0, r4
 8011b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9c:	f008 b8b0 	b.w	8019d00 <ucdr_deserialize_endian_array_double>

08011ba0 <uxr_buffer_delete_entity>:
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	b08e      	sub	sp, #56	@ 0x38
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	9103      	str	r1, [sp, #12]
 8011baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011bae:	2303      	movs	r3, #3
 8011bb0:	2204      	movs	r2, #4
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	ab06      	add	r3, sp, #24
 8011bb6:	f001 fbdf 	bl	8013378 <uxr_prepare_stream_to_write_submessage>
 8011bba:	b918      	cbnz	r0, 8011bc4 <uxr_buffer_delete_entity+0x24>
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	b00e      	add	sp, #56	@ 0x38
 8011bc2:	bd10      	pop	{r4, pc}
 8011bc4:	9902      	ldr	r1, [sp, #8]
 8011bc6:	aa05      	add	r2, sp, #20
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f001 fd11 	bl	80135f0 <uxr_init_base_object_request>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	a905      	add	r1, sp, #20
 8011bd2:	a806      	add	r0, sp, #24
 8011bd4:	f003 fb0c 	bl	80151f0 <uxr_serialize_DELETE_Payload>
 8011bd8:	4620      	mov	r0, r4
 8011bda:	b00e      	add	sp, #56	@ 0x38
 8011bdc:	bd10      	pop	{r4, pc}
 8011bde:	bf00      	nop

08011be0 <uxr_common_create_entity>:
 8011be0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011be4:	b510      	push	{r4, lr}
 8011be6:	f1bc 0f01 	cmp.w	ip, #1
 8011bea:	b08c      	sub	sp, #48	@ 0x30
 8011bec:	4604      	mov	r4, r0
 8011bee:	9202      	str	r2, [sp, #8]
 8011bf0:	bf0c      	ite	eq
 8011bf2:	f003 0201 	andeq.w	r2, r3, #1
 8011bf6:	2200      	movne	r2, #0
 8011bf8:	330e      	adds	r3, #14
 8011bfa:	9103      	str	r1, [sp, #12]
 8011bfc:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8011c00:	441a      	add	r2, r3
 8011c02:	ab04      	add	r3, sp, #16
 8011c04:	9101      	str	r1, [sp, #4]
 8011c06:	2101      	movs	r1, #1
 8011c08:	b292      	uxth	r2, r2
 8011c0a:	9100      	str	r1, [sp, #0]
 8011c0c:	9903      	ldr	r1, [sp, #12]
 8011c0e:	f001 fbb3 	bl	8013378 <uxr_prepare_stream_to_write_submessage>
 8011c12:	b918      	cbnz	r0, 8011c1c <uxr_common_create_entity+0x3c>
 8011c14:	4604      	mov	r4, r0
 8011c16:	4620      	mov	r0, r4
 8011c18:	b00c      	add	sp, #48	@ 0x30
 8011c1a:	bd10      	pop	{r4, pc}
 8011c1c:	9902      	ldr	r1, [sp, #8]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011c22:	f001 fce5 	bl	80135f0 <uxr_init_base_object_request>
 8011c26:	4604      	mov	r4, r0
 8011c28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011c2a:	a804      	add	r0, sp, #16
 8011c2c:	f003 fa24 	bl	8015078 <uxr_serialize_CREATE_Payload>
 8011c30:	4620      	mov	r0, r4
 8011c32:	b00c      	add	sp, #48	@ 0x30
 8011c34:	bd10      	pop	{r4, pc}
 8011c36:	bf00      	nop

08011c38 <uxr_buffer_create_participant_bin>:
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8011c3e:	4605      	mov	r5, r0
 8011c40:	ac11      	add	r4, sp, #68	@ 0x44
 8011c42:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011c46:	2303      	movs	r3, #3
 8011c48:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8011c4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011c50:	7223      	strb	r3, [r4, #8]
 8011c52:	2300      	movs	r3, #0
 8011c54:	2201      	movs	r2, #1
 8011c56:	f88d 3014 	strb.w	r3, [sp, #20]
 8011c5a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8011c5c:	7122      	strb	r2, [r4, #4]
 8011c5e:	b1cb      	cbz	r3, 8011c94 <uxr_buffer_create_participant_bin+0x5c>
 8011c60:	f88d 201c 	strb.w	r2, [sp, #28]
 8011c64:	9308      	str	r3, [sp, #32]
 8011c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c6a:	a915      	add	r1, sp, #84	@ 0x54
 8011c6c:	a809      	add	r0, sp, #36	@ 0x24
 8011c6e:	f7ff fe9f 	bl	80119b0 <ucdr_init_buffer>
 8011c72:	a905      	add	r1, sp, #20
 8011c74:	a809      	add	r0, sp, #36	@ 0x24
 8011c76:	f002 fed5 	bl	8014a24 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c7c:	9600      	str	r6, [sp, #0]
 8011c7e:	4628      	mov	r0, r5
 8011c80:	9401      	str	r4, [sp, #4]
 8011c82:	60e3      	str	r3, [r4, #12]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011c8a:	f7ff ffa9 	bl	8011be0 <uxr_common_create_entity>
 8011c8e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8011c92:	bd70      	pop	{r4, r5, r6, pc}
 8011c94:	f88d 301c 	strb.w	r3, [sp, #28]
 8011c98:	e7e5      	b.n	8011c66 <uxr_buffer_create_participant_bin+0x2e>
 8011c9a:	bf00      	nop

08011c9c <uxr_buffer_create_topic_bin>:
 8011c9c:	b570      	push	{r4, r5, r6, lr}
 8011c9e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	9105      	str	r1, [sp, #20]
 8011ca8:	a997      	add	r1, sp, #604	@ 0x25c
 8011caa:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8011cae:	ac13      	add	r4, sp, #76	@ 0x4c
 8011cb0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011cb4:	2302      	movs	r3, #2
 8011cb6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8011cba:	f000 f9ab 	bl	8012014 <uxr_object_id_to_raw>
 8011cbe:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8011cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011cc4:	a917      	add	r1, sp, #92	@ 0x5c
 8011cc6:	a80b      	add	r0, sp, #44	@ 0x2c
 8011cc8:	9306      	str	r3, [sp, #24]
 8011cca:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cce:	2303      	movs	r3, #3
 8011cd0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f88d 301c 	strb.w	r3, [sp, #28]
 8011ce0:	f7ff fe66 	bl	80119b0 <ucdr_init_buffer>
 8011ce4:	a906      	add	r1, sp, #24
 8011ce6:	a80b      	add	r0, sp, #44	@ 0x2c
 8011ce8:	f002 febe 	bl	8014a68 <uxr_serialize_OBJK_Topic_Binary>
 8011cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cee:	4628      	mov	r0, r5
 8011cf0:	9600      	str	r6, [sp, #0]
 8011cf2:	9316      	str	r3, [sp, #88]	@ 0x58
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	9401      	str	r4, [sp, #4]
 8011cf8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011cfc:	f7ff ff70 	bl	8011be0 <uxr_common_create_entity>
 8011d00:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	bf00      	nop

08011d08 <uxr_buffer_create_publisher_bin>:
 8011d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d0a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8011d0e:	2603      	movs	r6, #3
 8011d10:	4605      	mov	r5, r0
 8011d12:	4618      	mov	r0, r3
 8011d14:	9105      	str	r1, [sp, #20]
 8011d16:	a992      	add	r1, sp, #584	@ 0x248
 8011d18:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011d1c:	ac0e      	add	r4, sp, #56	@ 0x38
 8011d1e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011d22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d26:	f000 f975 	bl	8012014 <uxr_object_id_to_raw>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d30:	a912      	add	r1, sp, #72	@ 0x48
 8011d32:	a806      	add	r0, sp, #24
 8011d34:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011d38:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011d3c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8011d40:	f7ff fe36 	bl	80119b0 <ucdr_init_buffer>
 8011d44:	a993      	add	r1, sp, #588	@ 0x24c
 8011d46:	a806      	add	r0, sp, #24
 8011d48:	f002 ff42 	bl	8014bd0 <uxr_serialize_OBJK_Publisher_Binary>
 8011d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d4e:	4628      	mov	r0, r5
 8011d50:	9700      	str	r7, [sp, #0]
 8011d52:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	9401      	str	r4, [sp, #4]
 8011d58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d5c:	f7ff ff40 	bl	8011be0 <uxr_common_create_entity>
 8011d60:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d66:	bf00      	nop

08011d68 <uxr_buffer_create_datawriter_bin>:
 8011d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011d70:	4606      	mov	r6, r0
 8011d72:	4618      	mov	r0, r3
 8011d74:	2703      	movs	r7, #3
 8011d76:	ac1d      	add	r4, sp, #116	@ 0x74
 8011d78:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8011d7c:	9105      	str	r1, [sp, #20]
 8011d7e:	a9a1      	add	r1, sp, #644	@ 0x284
 8011d80:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8011d84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d88:	2305      	movs	r3, #5
 8011d8a:	7123      	strb	r3, [r4, #4]
 8011d8c:	f000 f942 	bl	8012014 <uxr_object_id_to_raw>
 8011d90:	a90e      	add	r1, sp, #56	@ 0x38
 8011d92:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8011d94:	7227      	strb	r7, [r4, #8]
 8011d96:	f000 f93d 	bl	8012014 <uxr_object_id_to_raw>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8011da0:	3d00      	subs	r5, #0
 8011da2:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8011da6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011daa:	bf18      	it	ne
 8011dac:	2501      	movne	r5, #1
 8011dae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011db2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011db6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011dba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011dc4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011dc8:	bb8a      	cbnz	r2, 8011e2e <uxr_buffer_create_datawriter_bin+0xc6>
 8011dca:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011dce:	f04f 0c13 	mov.w	ip, #19
 8011dd2:	250b      	movs	r5, #11
 8011dd4:	2221      	movs	r2, #33	@ 0x21
 8011dd6:	2111      	movs	r1, #17
 8011dd8:	2009      	movs	r0, #9
 8011dda:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011dde:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011de2:	b923      	cbnz	r3, 8011dee <uxr_buffer_create_datawriter_bin+0x86>
 8011de4:	4672      	mov	r2, lr
 8011de6:	4661      	mov	r1, ip
 8011de8:	4628      	mov	r0, r5
 8011dea:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011dee:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d025      	beq.n	8011e42 <uxr_buffer_create_datawriter_bin+0xda>
 8011df6:	2b03      	cmp	r3, #3
 8011df8:	d029      	beq.n	8011e4e <uxr_buffer_create_datawriter_bin+0xe6>
 8011dfa:	b32b      	cbz	r3, 8011e48 <uxr_buffer_create_datawriter_bin+0xe0>
 8011dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e00:	a921      	add	r1, sp, #132	@ 0x84
 8011e02:	a806      	add	r0, sp, #24
 8011e04:	f7ff fdd4 	bl	80119b0 <ucdr_init_buffer>
 8011e08:	a90e      	add	r1, sp, #56	@ 0x38
 8011e0a:	a806      	add	r0, sp, #24
 8011e0c:	f002 ff56 	bl	8014cbc <uxr_serialize_OBJK_DataWriter_Binary>
 8011e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e12:	f8cd 8000 	str.w	r8, [sp]
 8011e16:	4630      	mov	r0, r6
 8011e18:	9401      	str	r4, [sp, #4]
 8011e1a:	60e3      	str	r3, [r4, #12]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e22:	f7ff fedd 	bl	8011be0 <uxr_common_create_entity>
 8011e26:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e2e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011e32:	f04f 0c12 	mov.w	ip, #18
 8011e36:	250a      	movs	r5, #10
 8011e38:	2220      	movs	r2, #32
 8011e3a:	2110      	movs	r1, #16
 8011e3c:	2008      	movs	r0, #8
 8011e3e:	2702      	movs	r7, #2
 8011e40:	e7cd      	b.n	8011dde <uxr_buffer_create_datawriter_bin+0x76>
 8011e42:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011e46:	e7d9      	b.n	8011dfc <uxr_buffer_create_datawriter_bin+0x94>
 8011e48:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011e4c:	e7d6      	b.n	8011dfc <uxr_buffer_create_datawriter_bin+0x94>
 8011e4e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011e52:	e7d3      	b.n	8011dfc <uxr_buffer_create_datawriter_bin+0x94>

08011e54 <get_custom_error>:
 8011e54:	4b01      	ldr	r3, [pc, #4]	@ (8011e5c <get_custom_error+0x8>)
 8011e56:	7818      	ldrb	r0, [r3, #0]
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	24012d94 	.word	0x24012d94

08011e60 <recv_custom_msg>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	4693      	mov	fp, r2
 8011e66:	b089      	sub	sp, #36	@ 0x24
 8011e68:	2200      	movs	r2, #0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	468a      	mov	sl, r1
 8011e6e:	9305      	str	r3, [sp, #20]
 8011e70:	f88d 201e 	strb.w	r2, [sp, #30]
 8011e74:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011e78:	b322      	cbz	r2, 8011ec4 <recv_custom_msg+0x64>
 8011e7a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8011e7e:	f10d 081f 	add.w	r8, sp, #31
 8011e82:	af05      	add	r7, sp, #20
 8011e84:	f10d 061e 	add.w	r6, sp, #30
 8011e88:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011e8c:	e002      	b.n	8011e94 <recv_custom_msg+0x34>
 8011e8e:	9b05      	ldr	r3, [sp, #20]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	dd0f      	ble.n	8011eb4 <recv_custom_msg+0x54>
 8011e94:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8011e98:	4623      	mov	r3, r4
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	4648      	mov	r0, r9
 8011e9e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011ea2:	e9cd 5600 	strd	r5, r6, [sp]
 8011ea6:	f001 fdb9 	bl	8013a1c <uxr_read_framed_msg>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d0ef      	beq.n	8011e8e <recv_custom_msg+0x2e>
 8011eae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011eb2:	b1b3      	cbz	r3, 8011ee2 <recv_custom_msg+0x82>
 8011eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ef4 <recv_custom_msg+0x94>)
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011ebc:	701a      	strb	r2, [r3, #0]
 8011ebe:	b009      	add	sp, #36	@ 0x24
 8011ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec4:	f10d 021f 	add.w	r2, sp, #31
 8011ec8:	4601      	mov	r1, r0
 8011eca:	9200      	str	r2, [sp, #0]
 8011ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ed0:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011ed4:	47a8      	blx	r5
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d0ec      	beq.n	8011eb4 <recv_custom_msg+0x54>
 8011eda:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1e8      	bne.n	8011eb4 <recv_custom_msg+0x54>
 8011ee2:	f8cb 0000 	str.w	r0, [fp]
 8011ee6:	2001      	movs	r0, #1
 8011ee8:	f8ca 4000 	str.w	r4, [sl]
 8011eec:	b009      	add	sp, #36	@ 0x24
 8011eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef2:	bf00      	nop
 8011ef4:	24012d94 	.word	0x24012d94

08011ef8 <send_custom_msg>:
 8011ef8:	b530      	push	{r4, r5, lr}
 8011efa:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8011efe:	b087      	sub	sp, #28
 8011f00:	4614      	mov	r4, r2
 8011f02:	b995      	cbnz	r5, 8011f2a <send_custom_msg+0x32>
 8011f04:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8011f08:	f10d 0317 	add.w	r3, sp, #23
 8011f0c:	47a8      	blx	r5
 8011f0e:	1e03      	subs	r3, r0, #0
 8011f10:	bf18      	it	ne
 8011f12:	2301      	movne	r3, #1
 8011f14:	42a0      	cmp	r0, r4
 8011f16:	bf18      	it	ne
 8011f18:	2300      	movne	r3, #0
 8011f1a:	b91b      	cbnz	r3, 8011f24 <send_custom_msg+0x2c>
 8011f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8011f48 <send_custom_msg+0x50>)
 8011f1e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8011f22:	7011      	strb	r1, [r2, #0]
 8011f24:	4618      	mov	r0, r3
 8011f26:	b007      	add	sp, #28
 8011f28:	bd30      	pop	{r4, r5, pc}
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f10d 0117 	add.w	r1, sp, #23
 8011f32:	9400      	str	r4, [sp, #0]
 8011f34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011f38:	4602      	mov	r2, r0
 8011f3a:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011f3e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011f42:	f001 fb8d 	bl	8013660 <uxr_write_framed_msg>
 8011f46:	e7e2      	b.n	8011f0e <send_custom_msg+0x16>
 8011f48:	24012d94 	.word	0x24012d94

08011f4c <uxr_set_custom_transport_callbacks>:
 8011f4c:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011f50:	9901      	ldr	r1, [sp, #4]
 8011f52:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011f56:	9b00      	ldr	r3, [sp, #0]
 8011f58:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop

08011f60 <uxr_init_custom_transport>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8011f66:	b303      	cbz	r3, 8011faa <uxr_init_custom_transport+0x4a>
 8011f68:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	b1e2      	cbz	r2, 8011faa <uxr_init_custom_transport+0x4a>
 8011f70:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011f74:	b1ca      	cbz	r2, 8011faa <uxr_init_custom_transport+0x4a>
 8011f76:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8011f7a:	b1b2      	cbz	r2, 8011faa <uxr_init_custom_transport+0x4a>
 8011f7c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8011f80:	4798      	blx	r3
 8011f82:	4605      	mov	r5, r0
 8011f84:	b188      	cbz	r0, 8011faa <uxr_init_custom_transport+0x4a>
 8011f86:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8011f8a:	b98b      	cbnz	r3, 8011fb0 <uxr_init_custom_transport+0x50>
 8011f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011fbc <uxr_init_custom_transport+0x5c>)
 8011f8e:	4628      	mov	r0, r5
 8011f90:	490b      	ldr	r1, [pc, #44]	@ (8011fc0 <uxr_init_custom_transport+0x60>)
 8011f92:	4a0c      	ldr	r2, [pc, #48]	@ (8011fc4 <uxr_init_custom_transport+0x64>)
 8011f94:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8011f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f9c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011fa0:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8011fa4:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011fa8:	bd38      	pop	{r3, r4, r5, pc}
 8011faa:	2500      	movs	r5, #0
 8011fac:	4628      	mov	r0, r5
 8011fae:	bd38      	pop	{r3, r4, r5, pc}
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8011fb6:	f001 fb4d 	bl	8013654 <uxr_init_framing_io>
 8011fba:	e7e7      	b.n	8011f8c <uxr_init_custom_transport+0x2c>
 8011fbc:	08011e61 	.word	0x08011e61
 8011fc0:	08011ef9 	.word	0x08011ef9
 8011fc4:	08011e55 	.word	0x08011e55

08011fc8 <uxr_close_custom_transport>:
 8011fc8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011fcc:	4718      	bx	r3
 8011fce:	bf00      	nop

08011fd0 <uxr_object_id>:
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	f88d 1006 	strb.w	r1, [sp, #6]
 8011fd8:	f360 030f 	bfi	r3, r0, #0, #16
 8011fdc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011fe0:	f362 431f 	bfi	r3, r2, #16, #16
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	b002      	add	sp, #8
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop

08011fec <uxr_object_id_from_raw>:
 8011fec:	7843      	ldrb	r3, [r0, #1]
 8011fee:	b082      	sub	sp, #8
 8011ff0:	7801      	ldrb	r1, [r0, #0]
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	091a      	lsrs	r2, r3, #4
 8011ff6:	f003 030f 	and.w	r3, r3, #15
 8011ffa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8011ffe:	f88d 3006 	strb.w	r3, [sp, #6]
 8012002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012006:	f362 000f 	bfi	r0, r2, #0, #16
 801200a:	f363 401f 	bfi	r0, r3, #16, #16
 801200e:	b002      	add	sp, #8
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop

08012014 <uxr_object_id_to_raw>:
 8012014:	4602      	mov	r2, r0
 8012016:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801201a:	b082      	sub	sp, #8
 801201c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012020:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012024:	f881 c000 	strb.w	ip, [r1]
 8012028:	7048      	strb	r0, [r1, #1]
 801202a:	b002      	add	sp, #8
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop

08012030 <uxr_ping_agent_session>:
 8012030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012034:	4617      	mov	r7, r2
 8012036:	b091      	sub	sp, #68	@ 0x44
 8012038:	2210      	movs	r2, #16
 801203a:	4606      	mov	r6, r0
 801203c:	4688      	mov	r8, r1
 801203e:	a808      	add	r0, sp, #32
 8012040:	eb0d 0102 	add.w	r1, sp, r2
 8012044:	2500      	movs	r5, #0
 8012046:	f7ff fcb3 	bl	80119b0 <ucdr_init_buffer>
 801204a:	4b1e      	ldr	r3, [pc, #120]	@ (80120c4 <uxr_ping_agent_session+0x94>)
 801204c:	2402      	movs	r4, #2
 801204e:	462a      	mov	r2, r5
 8012050:	881b      	ldrh	r3, [r3, #0]
 8012052:	a808      	add	r0, sp, #32
 8012054:	9500      	str	r5, [sp, #0]
 8012056:	f8ad 300a 	strh.w	r3, [sp, #10]
 801205a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801205e:	7831      	ldrb	r1, [r6, #0]
 8012060:	f8ad 3008 	strh.w	r3, [sp, #8]
 8012064:	462b      	mov	r3, r5
 8012066:	9403      	str	r4, [sp, #12]
 8012068:	f002 faaa 	bl	80145c0 <uxr_serialize_message_header>
 801206c:	4621      	mov	r1, r4
 801206e:	462b      	mov	r3, r5
 8012070:	2208      	movs	r2, #8
 8012072:	a808      	add	r0, sp, #32
 8012074:	f002 f8a8 	bl	80141c8 <uxr_buffer_submessage_header>
 8012078:	4604      	mov	r4, r0
 801207a:	a902      	add	r1, sp, #8
 801207c:	a808      	add	r0, sp, #32
 801207e:	f003 f88b 	bl	8015198 <uxr_serialize_GET_INFO_Payload>
 8012082:	b104      	cbz	r4, 8012086 <uxr_ping_agent_session+0x56>
 8012084:	b918      	cbnz	r0, 801208e <uxr_ping_agent_session+0x5e>
 8012086:	2000      	movs	r0, #0
 8012088:	b011      	add	sp, #68	@ 0x44
 801208a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208e:	a808      	add	r0, sp, #32
 8012090:	f7ff fcbc 	bl	8011a0c <ucdr_buffer_length>
 8012094:	4681      	mov	r9, r0
 8012096:	e00d      	b.n	80120b4 <uxr_ping_agent_session+0x84>
 8012098:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801209a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801209e:	47a0      	blx	r4
 80120a0:	4604      	mov	r4, r0
 80120a2:	4641      	mov	r1, r8
 80120a4:	4630      	mov	r0, r6
 80120a6:	f000 ff67 	bl	8012f78 <uxr_run_session_until_pong>
 80120aa:	ea04 0c00 	and.w	ip, r4, r0
 80120ae:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80120b2:	d1e9      	bne.n	8012088 <uxr_ping_agent_session+0x58>
 80120b4:	42af      	cmp	r7, r5
 80120b6:	464a      	mov	r2, r9
 80120b8:	a904      	add	r1, sp, #16
 80120ba:	f105 0501 	add.w	r5, r5, #1
 80120be:	d1eb      	bne.n	8012098 <uxr_ping_agent_session+0x68>
 80120c0:	e7e1      	b.n	8012086 <uxr_ping_agent_session+0x56>
 80120c2:	bf00      	nop
 80120c4:	0801c928 	.word	0x0801c928

080120c8 <uxr_ping_agent_attempts>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	ed2d 8b02 	vpush	{d8}
 80120d0:	b0d3      	sub	sp, #332	@ 0x14c
 80120d2:	4606      	mov	r6, r0
 80120d4:	468a      	mov	sl, r1
 80120d6:	2400      	movs	r4, #0
 80120d8:	a90c      	add	r1, sp, #48	@ 0x30
 80120da:	a810      	add	r0, sp, #64	@ 0x40
 80120dc:	9205      	str	r2, [sp, #20]
 80120de:	2210      	movs	r2, #16
 80120e0:	f7ff fc66 	bl	80119b0 <ucdr_init_buffer>
 80120e4:	4b53      	ldr	r3, [pc, #332]	@ (8012234 <uxr_ping_agent_attempts+0x16c>)
 80120e6:	2502      	movs	r5, #2
 80120e8:	4622      	mov	r2, r4
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	2180      	movs	r1, #128	@ 0x80
 80120ee:	a810      	add	r0, sp, #64	@ 0x40
 80120f0:	9400      	str	r4, [sp, #0]
 80120f2:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 80120f6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80120fa:	9521      	str	r5, [sp, #132]	@ 0x84
 80120fc:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8012100:	4623      	mov	r3, r4
 8012102:	f002 fa5d 	bl	80145c0 <uxr_serialize_message_header>
 8012106:	4623      	mov	r3, r4
 8012108:	4629      	mov	r1, r5
 801210a:	2208      	movs	r2, #8
 801210c:	a810      	add	r0, sp, #64	@ 0x40
 801210e:	f002 f85b 	bl	80141c8 <uxr_buffer_submessage_header>
 8012112:	4681      	mov	r9, r0
 8012114:	a920      	add	r1, sp, #128	@ 0x80
 8012116:	a810      	add	r0, sp, #64	@ 0x40
 8012118:	f003 f83e 	bl	8015198 <uxr_serialize_GET_INFO_Payload>
 801211c:	ea09 0000 	and.w	r0, r9, r0
 8012120:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 8012124:	d107      	bne.n	8012136 <uxr_ping_agent_attempts+0x6e>
 8012126:	f04f 0b00 	mov.w	fp, #0
 801212a:	4658      	mov	r0, fp
 801212c:	b053      	add	sp, #332	@ 0x14c
 801212e:	ecbd 8b02 	vpop	{d8}
 8012132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012136:	a810      	add	r0, sp, #64	@ 0x40
 8012138:	9404      	str	r4, [sp, #16]
 801213a:	f7ff fc67 	bl	8011a0c <ucdr_buffer_length>
 801213e:	ee08 0a10 	vmov	s16, r0
 8012142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012146:	4293      	cmp	r3, r2
 8012148:	d0ed      	beq.n	8012126 <uxr_ping_agent_attempts+0x5e>
 801214a:	ee18 2a10 	vmov	r2, s16
 801214e:	a90c      	add	r1, sp, #48	@ 0x30
 8012150:	4655      	mov	r5, sl
 8012152:	f04f 0800 	mov.w	r8, #0
 8012156:	e9d6 0300 	ldrd	r0, r3, [r6]
 801215a:	4798      	blx	r3
 801215c:	f002 f87a 	bl	8014254 <uxr_millis>
 8012160:	9003      	str	r0, [sp, #12]
 8012162:	e00b      	b.n	801217c <uxr_ping_agent_attempts+0xb4>
 8012164:	f002 f876 	bl	8014254 <uxr_millis>
 8012168:	9b03      	ldr	r3, [sp, #12]
 801216a:	1ac0      	subs	r0, r0, r3
 801216c:	1a2d      	subs	r5, r5, r0
 801216e:	f002 f871 	bl	8014254 <uxr_millis>
 8012172:	9003      	str	r0, [sp, #12]
 8012174:	2d00      	cmp	r5, #0
 8012176:	dd30      	ble.n	80121da <uxr_ping_agent_attempts+0x112>
 8012178:	2f00      	cmp	r7, #0
 801217a:	d02e      	beq.n	80121da <uxr_ping_agent_attempts+0x112>
 801217c:	4653      	mov	r3, sl
 801217e:	aa09      	add	r2, sp, #36	@ 0x24
 8012180:	a908      	add	r1, sp, #32
 8012182:	6830      	ldr	r0, [r6, #0]
 8012184:	68b4      	ldr	r4, [r6, #8]
 8012186:	464f      	mov	r7, r9
 8012188:	f8cd 8020 	str.w	r8, [sp, #32]
 801218c:	47a0      	blx	r4
 801218e:	4683      	mov	fp, r0
 8012190:	2800      	cmp	r0, #0
 8012192:	d0e7      	beq.n	8012164 <uxr_ping_agent_attempts+0x9c>
 8012194:	a818      	add	r0, sp, #96	@ 0x60
 8012196:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801219a:	f7ff fc09 	bl	80119b0 <ucdr_init_buffer>
 801219e:	ab07      	add	r3, sp, #28
 80121a0:	f10d 0219 	add.w	r2, sp, #25
 80121a4:	a918      	add	r1, sp, #96	@ 0x60
 80121a6:	a80a      	add	r0, sp, #40	@ 0x28
 80121a8:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 80121ac:	f001 f9d8 	bl	8013560 <uxr_read_session_header>
 80121b0:	22c8      	movs	r2, #200	@ 0xc8
 80121b2:	2100      	movs	r1, #0
 80121b4:	a820      	add	r0, sp, #128	@ 0x80
 80121b6:	f009 fc67 	bl	801ba88 <memset>
 80121ba:	a818      	add	r0, sp, #96	@ 0x60
 80121bc:	f7ff fc2a 	bl	8011a14 <ucdr_buffer_remaining>
 80121c0:	2804      	cmp	r0, #4
 80121c2:	d816      	bhi.n	80121f2 <uxr_ping_agent_attempts+0x12a>
 80121c4:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	bf13      	iteet	ne
 80121cc:	f04f 0b01 	movne.w	fp, #1
 80121d0:	f04f 0b00 	moveq.w	fp, #0
 80121d4:	2701      	moveq	r7, #1
 80121d6:	2700      	movne	r7, #0
 80121d8:	e7c4      	b.n	8012164 <uxr_ping_agent_attempts+0x9c>
 80121da:	9b04      	ldr	r3, [sp, #16]
 80121dc:	3301      	adds	r3, #1
 80121de:	9304      	str	r3, [sp, #16]
 80121e0:	f1bb 0f00 	cmp.w	fp, #0
 80121e4:	d0ad      	beq.n	8012142 <uxr_ping_agent_attempts+0x7a>
 80121e6:	4658      	mov	r0, fp
 80121e8:	b053      	add	sp, #332	@ 0x14c
 80121ea:	ecbd 8b02 	vpop	{d8}
 80121ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f2:	f10d 031e 	add.w	r3, sp, #30
 80121f6:	f10d 021b 	add.w	r2, sp, #27
 80121fa:	f10d 011a 	add.w	r1, sp, #26
 80121fe:	a818      	add	r0, sp, #96	@ 0x60
 8012200:	f88d 801a 	strb.w	r8, [sp, #26]
 8012204:	f8ad 801e 	strh.w	r8, [sp, #30]
 8012208:	f88d 801b 	strb.w	r8, [sp, #27]
 801220c:	f002 fa2a 	bl	8014664 <uxr_deserialize_submessage_header>
 8012210:	a818      	add	r0, sp, #96	@ 0x60
 8012212:	f7ff fbff 	bl	8011a14 <ucdr_buffer_remaining>
 8012216:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801221a:	4298      	cmp	r0, r3
 801221c:	d3d2      	bcc.n	80121c4 <uxr_ping_agent_attempts+0xfc>
 801221e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8012222:	2b06      	cmp	r3, #6
 8012224:	d1ce      	bne.n	80121c4 <uxr_ping_agent_attempts+0xfc>
 8012226:	a918      	add	r1, sp, #96	@ 0x60
 8012228:	a820      	add	r0, sp, #128	@ 0x80
 801222a:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 801222e:	f000 fa8d 	bl	801274c <read_submessage_info>
 8012232:	e7c7      	b.n	80121c4 <uxr_ping_agent_attempts+0xfc>
 8012234:	0801c928 	.word	0x0801c928

08012238 <uxr_buffer_cancel_data>:
 8012238:	b510      	push	{r4, lr}
 801223a:	2300      	movs	r3, #0
 801223c:	b094      	sub	sp, #80	@ 0x50
 801223e:	4604      	mov	r4, r0
 8012240:	9205      	str	r2, [sp, #20]
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012248:	f88d 301e 	strb.w	r3, [sp, #30]
 801224c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012250:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012254:	2308      	movs	r3, #8
 8012256:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801225a:	2201      	movs	r2, #1
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	ab0c      	add	r3, sp, #48	@ 0x30
 8012260:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012264:	2210      	movs	r2, #16
 8012266:	f001 f887 	bl	8013378 <uxr_prepare_stream_to_write_submessage>
 801226a:	b918      	cbnz	r0, 8012274 <uxr_buffer_cancel_data+0x3c>
 801226c:	4604      	mov	r4, r0
 801226e:	4620      	mov	r0, r4
 8012270:	b014      	add	sp, #80	@ 0x50
 8012272:	bd10      	pop	{r4, pc}
 8012274:	9905      	ldr	r1, [sp, #20]
 8012276:	aa06      	add	r2, sp, #24
 8012278:	4620      	mov	r0, r4
 801227a:	f001 f9b9 	bl	80135f0 <uxr_init_base_object_request>
 801227e:	4604      	mov	r4, r0
 8012280:	a906      	add	r1, sp, #24
 8012282:	a80c      	add	r0, sp, #48	@ 0x30
 8012284:	f003 f85e 	bl	8015344 <uxr_serialize_READ_DATA_Payload>
 8012288:	4620      	mov	r0, r4
 801228a:	b014      	add	sp, #80	@ 0x50
 801228c:	bd10      	pop	{r4, pc}
 801228e:	bf00      	nop

08012290 <read_submessage_format>:
 8012290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012294:	b095      	sub	sp, #84	@ 0x54
 8012296:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801229a:	b113      	cbz	r3, 80122a2 <read_submessage_format+0x12>
 801229c:	b015      	add	sp, #84	@ 0x54
 801229e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a2:	4606      	mov	r6, r0
 80122a4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80122a6:	460c      	mov	r4, r1
 80122a8:	4615      	mov	r5, r2
 80122aa:	9004      	str	r0, [sp, #16]
 80122ac:	4699      	mov	r9, r3
 80122ae:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80122b0:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80122b4:	9005      	str	r0, [sp, #20]
 80122b6:	a80c      	add	r0, sp, #48	@ 0x30
 80122b8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80122bc:	1a52      	subs	r2, r2, r1
 80122be:	f7ff fb77 	bl	80119b0 <ucdr_init_buffer>
 80122c2:	a80c      	add	r0, sp, #48	@ 0x30
 80122c4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80122c8:	f7ff fb46 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 80122cc:	69e2      	ldr	r2, [r4, #28]
 80122ce:	b19a      	cbz	r2, 80122f8 <read_submessage_format+0x68>
 80122d0:	f1b8 0f07 	cmp.w	r8, #7
 80122d4:	f882 9014 	strb.w	r9, [r2, #20]
 80122d8:	d040      	beq.n	801235c <read_submessage_format+0xcc>
 80122da:	f1b8 0f08 	cmp.w	r8, #8
 80122de:	d02e      	beq.n	801233e <read_submessage_format+0xae>
 80122e0:	f1b8 0f06 	cmp.w	r8, #6
 80122e4:	d011      	beq.n	801230a <read_submessage_format+0x7a>
 80122e6:	2301      	movs	r3, #1
 80122e8:	7513      	strb	r3, [r2, #20]
 80122ea:	4629      	mov	r1, r5
 80122ec:	4620      	mov	r0, r4
 80122ee:	f7ff fbb3 	bl	8011a58 <ucdr_advance_buffer>
 80122f2:	b015      	add	sp, #84	@ 0x54
 80122f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f8:	f1b8 0f07 	cmp.w	r8, #7
 80122fc:	d02e      	beq.n	801235c <read_submessage_format+0xcc>
 80122fe:	f1b8 0f08 	cmp.w	r8, #8
 8012302:	d01c      	beq.n	801233e <read_submessage_format+0xae>
 8012304:	f1b8 0f06 	cmp.w	r8, #6
 8012308:	d1ef      	bne.n	80122ea <read_submessage_format+0x5a>
 801230a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801230e:	f1b8 0f00 	cmp.w	r8, #0
 8012312:	d011      	beq.n	8012338 <read_submessage_format+0xa8>
 8012314:	ab0c      	add	r3, sp, #48	@ 0x30
 8012316:	9501      	str	r5, [sp, #4]
 8012318:	463a      	mov	r2, r7
 801231a:	4630      	mov	r0, r6
 801231c:	9300      	str	r3, [sp, #0]
 801231e:	2306      	movs	r3, #6
 8012320:	f88d 3016 	strb.w	r3, [sp, #22]
 8012324:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8012328:	9302      	str	r3, [sp, #8]
 801232a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801232e:	47c0      	blx	r8
 8012330:	2301      	movs	r3, #1
 8012332:	69e2      	ldr	r2, [r4, #28]
 8012334:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012338:	2a00      	cmp	r2, #0
 801233a:	d1d4      	bne.n	80122e6 <read_submessage_format+0x56>
 801233c:	e7d5      	b.n	80122ea <read_submessage_format+0x5a>
 801233e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8012342:	2b00      	cmp	r3, #0
 8012344:	d0f8      	beq.n	8012338 <read_submessage_format+0xa8>
 8012346:	a80c      	add	r0, sp, #48	@ 0x30
 8012348:	a906      	add	r1, sp, #24
 801234a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801234e:	f003 f8d3 	bl	80154f8 <uxr_deserialize_SampleIdentity>
 8012352:	b9a0      	cbnz	r0, 801237e <read_submessage_format+0xee>
 8012354:	69e2      	ldr	r2, [r4, #28]
 8012356:	2a00      	cmp	r2, #0
 8012358:	d1c5      	bne.n	80122e6 <read_submessage_format+0x56>
 801235a:	e7c6      	b.n	80122ea <read_submessage_format+0x5a>
 801235c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8012360:	b13b      	cbz	r3, 8012372 <read_submessage_format+0xe2>
 8012362:	a906      	add	r1, sp, #24
 8012364:	a80c      	add	r0, sp, #48	@ 0x30
 8012366:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801236a:	f002 fd75 	bl	8014e58 <uxr_deserialize_BaseObjectRequest>
 801236e:	bb60      	cbnz	r0, 80123ca <read_submessage_format+0x13a>
 8012370:	69e2      	ldr	r2, [r4, #28]
 8012372:	68a3      	ldr	r3, [r4, #8]
 8012374:	442b      	add	r3, r5
 8012376:	60a3      	str	r3, [r4, #8]
 8012378:	2a00      	cmp	r2, #0
 801237a:	d1b4      	bne.n	80122e6 <read_submessage_format+0x56>
 801237c:	e7b5      	b.n	80122ea <read_submessage_format+0x5a>
 801237e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012380:	a80c      	add	r0, sp, #48	@ 0x30
 8012382:	eba8 0803 	sub.w	r8, r8, r3
 8012386:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801238a:	44a8      	add	r8, r5
 801238c:	1a52      	subs	r2, r2, r1
 801238e:	f7ff fb0f 	bl	80119b0 <ucdr_init_buffer>
 8012392:	a80c      	add	r0, sp, #48	@ 0x30
 8012394:	fa1f f888 	uxth.w	r8, r8
 8012398:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801239c:	f7ff fadc 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 80123a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80123a2:	2108      	movs	r1, #8
 80123a4:	f8cd 8004 	str.w	r8, [sp, #4]
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	463a      	mov	r2, r7
 80123ac:	f88d 1016 	strb.w	r1, [sp, #22]
 80123b0:	ab06      	add	r3, sp, #24
 80123b2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80123b6:	4630      	mov	r0, r6
 80123b8:	9102      	str	r1, [sp, #8]
 80123ba:	9905      	ldr	r1, [sp, #20]
 80123bc:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80123c0:	47b8      	blx	r7
 80123c2:	2301      	movs	r3, #1
 80123c4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80123c8:	e7c4      	b.n	8012354 <read_submessage_format+0xc4>
 80123ca:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80123ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80123d0:	a80c      	add	r0, sp, #48	@ 0x30
 80123d2:	1a52      	subs	r2, r2, r1
 80123d4:	eba8 0803 	sub.w	r8, r8, r3
 80123d8:	f7ff faea 	bl	80119b0 <ucdr_init_buffer>
 80123dc:	a80c      	add	r0, sp, #48	@ 0x30
 80123de:	44a8      	add	r8, r5
 80123e0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80123e4:	f7ff fab8 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 80123e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80123ea:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80123ee:	fa1f f888 	uxth.w	r8, r8
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	463a      	mov	r2, r7
 80123f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80123fa:	4630      	mov	r0, r6
 80123fc:	f8cd 8004 	str.w	r8, [sp, #4]
 8012400:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012404:	2107      	movs	r1, #7
 8012406:	f88d 1016 	strb.w	r1, [sp, #22]
 801240a:	b29b      	uxth	r3, r3
 801240c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8012410:	9102      	str	r1, [sp, #8]
 8012412:	9905      	ldr	r1, [sp, #20]
 8012414:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8012418:	47b8      	blx	r7
 801241a:	2301      	movs	r3, #1
 801241c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012420:	e7a6      	b.n	8012370 <read_submessage_format+0xe0>
 8012422:	bf00      	nop

08012424 <on_get_fragmentation_info>:
 8012424:	b500      	push	{lr}
 8012426:	b08b      	sub	sp, #44	@ 0x2c
 8012428:	4601      	mov	r1, r0
 801242a:	2204      	movs	r2, #4
 801242c:	a802      	add	r0, sp, #8
 801242e:	f7ff fabf 	bl	80119b0 <ucdr_init_buffer>
 8012432:	f10d 0305 	add.w	r3, sp, #5
 8012436:	f10d 0206 	add.w	r2, sp, #6
 801243a:	a901      	add	r1, sp, #4
 801243c:	a802      	add	r0, sp, #8
 801243e:	f001 fedd 	bl	80141fc <uxr_read_submessage_header>
 8012442:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012446:	2b0d      	cmp	r3, #13
 8012448:	d003      	beq.n	8012452 <on_get_fragmentation_info+0x2e>
 801244a:	2000      	movs	r0, #0
 801244c:	b00b      	add	sp, #44	@ 0x2c
 801244e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012456:	f013 0f02 	tst.w	r3, #2
 801245a:	bf14      	ite	ne
 801245c:	2002      	movne	r0, #2
 801245e:	2001      	moveq	r0, #1
 8012460:	b00b      	add	sp, #44	@ 0x2c
 8012462:	f85d fb04 	ldr.w	pc, [sp], #4
 8012466:	bf00      	nop

08012468 <read_submessage_get_info>:
 8012468:	b570      	push	{r4, r5, r6, lr}
 801246a:	2500      	movs	r5, #0
 801246c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012470:	460e      	mov	r6, r1
 8012472:	4604      	mov	r4, r0
 8012474:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012478:	4629      	mov	r1, r5
 801247a:	a810      	add	r0, sp, #64	@ 0x40
 801247c:	9503      	str	r5, [sp, #12]
 801247e:	9504      	str	r5, [sp, #16]
 8012480:	f009 fb02 	bl	801ba88 <memset>
 8012484:	a903      	add	r1, sp, #12
 8012486:	4630      	mov	r0, r6
 8012488:	f002 fe9c 	bl	80151c4 <uxr_deserialize_GET_INFO_Payload>
 801248c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012490:	4620      	mov	r0, r4
 8012492:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012496:	f001 f8a3 	bl	80135e0 <uxr_session_header_offset>
 801249a:	462b      	mov	r3, r5
 801249c:	220c      	movs	r2, #12
 801249e:	a905      	add	r1, sp, #20
 80124a0:	9000      	str	r0, [sp, #0]
 80124a2:	a808      	add	r0, sp, #32
 80124a4:	f7ff fa72 	bl	801198c <ucdr_init_buffer_origin_offset>
 80124a8:	a910      	add	r1, sp, #64	@ 0x40
 80124aa:	a808      	add	r0, sp, #32
 80124ac:	f002 fefe 	bl	80152ac <uxr_serialize_INFO_Payload>
 80124b0:	9b08      	ldr	r3, [sp, #32]
 80124b2:	462a      	mov	r2, r5
 80124b4:	4629      	mov	r1, r5
 80124b6:	4620      	mov	r0, r4
 80124b8:	f001 f83e 	bl	8013538 <uxr_stamp_session_header>
 80124bc:	a808      	add	r0, sp, #32
 80124be:	f7ff faa5 	bl	8011a0c <ucdr_buffer_length>
 80124c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80124c4:	4602      	mov	r2, r0
 80124c6:	a905      	add	r1, sp, #20
 80124c8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80124cc:	47a0      	blx	r4
 80124ce:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80124d2:	bd70      	pop	{r4, r5, r6, pc}

080124d4 <write_submessage_acknack.isra.0>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	b092      	sub	sp, #72	@ 0x48
 80124d8:	4605      	mov	r5, r0
 80124da:	460e      	mov	r6, r1
 80124dc:	4614      	mov	r4, r2
 80124de:	f001 f87f 	bl	80135e0 <uxr_session_header_offset>
 80124e2:	a905      	add	r1, sp, #20
 80124e4:	9000      	str	r0, [sp, #0]
 80124e6:	2300      	movs	r3, #0
 80124e8:	a80a      	add	r0, sp, #40	@ 0x28
 80124ea:	2211      	movs	r2, #17
 80124ec:	f7ff fa4e 	bl	801198c <ucdr_init_buffer_origin_offset>
 80124f0:	2218      	movs	r2, #24
 80124f2:	2300      	movs	r3, #0
 80124f4:	210a      	movs	r1, #10
 80124f6:	fb02 5404 	mla	r4, r2, r4, r5
 80124fa:	a80a      	add	r0, sp, #40	@ 0x28
 80124fc:	2205      	movs	r2, #5
 80124fe:	3450      	adds	r4, #80	@ 0x50
 8012500:	f001 fe62 	bl	80141c8 <uxr_buffer_submessage_header>
 8012504:	a903      	add	r1, sp, #12
 8012506:	4620      	mov	r0, r4
 8012508:	f007 fe02 	bl	801a110 <uxr_compute_acknack>
 801250c:	ba40      	rev16	r0, r0
 801250e:	a903      	add	r1, sp, #12
 8012510:	f88d 6010 	strb.w	r6, [sp, #16]
 8012514:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012518:	a80a      	add	r0, sp, #40	@ 0x28
 801251a:	f002 ff39 	bl	8015390 <uxr_serialize_ACKNACK_Payload>
 801251e:	2200      	movs	r2, #0
 8012520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012522:	4628      	mov	r0, r5
 8012524:	4611      	mov	r1, r2
 8012526:	f001 f807 	bl	8013538 <uxr_stamp_session_header>
 801252a:	a80a      	add	r0, sp, #40	@ 0x28
 801252c:	f7ff fa6e 	bl	8011a0c <ucdr_buffer_length>
 8012530:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012532:	4602      	mov	r2, r0
 8012534:	a905      	add	r1, sp, #20
 8012536:	e9d3 0400 	ldrd	r0, r4, [r3]
 801253a:	47a0      	blx	r4
 801253c:	b012      	add	sp, #72	@ 0x48
 801253e:	bd70      	pop	{r4, r5, r6, pc}

08012540 <uxr_init_session>:
 8012540:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012578 <uxr_init_session+0x38>
 8012544:	2300      	movs	r3, #0
 8012546:	b510      	push	{r4, lr}
 8012548:	4604      	mov	r4, r0
 801254a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801254e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012552:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012556:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801255a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801255e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012562:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012566:	2181      	movs	r1, #129	@ 0x81
 8012568:	f000 ff4a 	bl	8013400 <uxr_init_session_info>
 801256c:	f104 0008 	add.w	r0, r4, #8
 8012570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012574:	f001 bd44 	b.w	8014000 <uxr_init_stream_storage>
	...

08012580 <uxr_set_status_callback>:
 8012580:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012584:	4770      	bx	lr
 8012586:	bf00      	nop

08012588 <uxr_set_topic_callback>:
 8012588:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop

08012590 <uxr_set_request_callback>:
 8012590:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop

08012598 <uxr_set_reply_callback>:
 8012598:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop

080125a0 <uxr_create_output_best_effort_stream>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	4604      	mov	r4, r0
 80125a4:	b084      	sub	sp, #16
 80125a6:	e9cd 2100 	strd	r2, r1, [sp]
 80125aa:	f001 f819 	bl	80135e0 <uxr_session_header_offset>
 80125ae:	4603      	mov	r3, r0
 80125b0:	f104 0008 	add.w	r0, r4, #8
 80125b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80125b8:	b004      	add	sp, #16
 80125ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125be:	f001 bd65 	b.w	801408c <uxr_add_output_best_effort_buffer>
 80125c2:	bf00      	nop

080125c4 <uxr_create_output_reliable_stream>:
 80125c4:	b530      	push	{r4, r5, lr}
 80125c6:	b089      	sub	sp, #36	@ 0x24
 80125c8:	4604      	mov	r4, r0
 80125ca:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80125ce:	9303      	str	r3, [sp, #12]
 80125d0:	f001 f806 	bl	80135e0 <uxr_session_header_offset>
 80125d4:	4605      	mov	r5, r0
 80125d6:	9905      	ldr	r1, [sp, #20]
 80125d8:	f104 0008 	add.w	r0, r4, #8
 80125dc:	9500      	str	r5, [sp, #0]
 80125de:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80125e2:	f001 fd67 	bl	80140b4 <uxr_add_output_reliable_buffer>
 80125e6:	2200      	movs	r2, #0
 80125e8:	fa5f fc80 	uxtb.w	ip, r0
 80125ec:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80125f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80125f4:	0e03      	lsrs	r3, r0, #24
 80125f6:	f36c 0207 	bfi	r2, ip, #0, #8
 80125fa:	f364 220f 	bfi	r2, r4, #8, #8
 80125fe:	f361 4217 	bfi	r2, r1, #16, #8
 8012602:	f363 621f 	bfi	r2, r3, #24, #8
 8012606:	4610      	mov	r0, r2
 8012608:	b009      	add	sp, #36	@ 0x24
 801260a:	bd30      	pop	{r4, r5, pc}

0801260c <uxr_create_input_best_effort_stream>:
 801260c:	b082      	sub	sp, #8
 801260e:	3008      	adds	r0, #8
 8012610:	b002      	add	sp, #8
 8012612:	f001 bd69 	b.w	80140e8 <uxr_add_input_best_effort_buffer>
 8012616:	bf00      	nop

08012618 <uxr_create_input_reliable_stream>:
 8012618:	b510      	push	{r4, lr}
 801261a:	4c0c      	ldr	r4, [pc, #48]	@ (801264c <uxr_create_input_reliable_stream+0x34>)
 801261c:	b084      	sub	sp, #16
 801261e:	3008      	adds	r0, #8
 8012620:	9400      	str	r4, [sp, #0]
 8012622:	f001 fd77 	bl	8014114 <uxr_add_input_reliable_buffer>
 8012626:	2200      	movs	r2, #0
 8012628:	fa5f fe80 	uxtb.w	lr, r0
 801262c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8012630:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012634:	0e03      	lsrs	r3, r0, #24
 8012636:	f36e 0207 	bfi	r2, lr, #0, #8
 801263a:	f36c 220f 	bfi	r2, ip, #8, #8
 801263e:	f361 4217 	bfi	r2, r1, #16, #8
 8012642:	f363 621f 	bfi	r2, r3, #24, #8
 8012646:	4610      	mov	r0, r2
 8012648:	b004      	add	sp, #16
 801264a:	bd10      	pop	{r4, pc}
 801264c:	08012425 	.word	0x08012425

08012650 <uxr_epoch_nanos>:
 8012650:	b510      	push	{r4, lr}
 8012652:	4604      	mov	r4, r0
 8012654:	f001 fe1a 	bl	801428c <uxr_nanos>
 8012658:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801265c:	1ac0      	subs	r0, r0, r3
 801265e:	eb61 0102 	sbc.w	r1, r1, r2
 8012662:	bd10      	pop	{r4, pc}

08012664 <uxr_flash_output_streams>:
 8012664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012668:	7e03      	ldrb	r3, [r0, #24]
 801266a:	b084      	sub	sp, #16
 801266c:	4604      	mov	r4, r0
 801266e:	b1fb      	cbz	r3, 80126b0 <uxr_flash_output_streams+0x4c>
 8012670:	f04f 0900 	mov.w	r9, #0
 8012674:	f10d 0802 	add.w	r8, sp, #2
 8012678:	af03      	add	r7, sp, #12
 801267a:	ae02      	add	r6, sp, #8
 801267c:	4648      	mov	r0, r9
 801267e:	2201      	movs	r2, #1
 8012680:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012684:	4611      	mov	r1, r2
 8012686:	3508      	adds	r5, #8
 8012688:	f001 fc60 	bl	8013f4c <uxr_stream_id>
 801268c:	4684      	mov	ip, r0
 801268e:	4643      	mov	r3, r8
 8012690:	463a      	mov	r2, r7
 8012692:	4631      	mov	r1, r6
 8012694:	4628      	mov	r0, r5
 8012696:	f8cd c004 	str.w	ip, [sp, #4]
 801269a:	f007 fdc3 	bl	801a224 <uxr_prepare_best_effort_buffer_to_send>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d13d      	bne.n	801271e <uxr_flash_output_streams+0xba>
 80126a2:	f109 0901 	add.w	r9, r9, #1
 80126a6:	7e23      	ldrb	r3, [r4, #24]
 80126a8:	fa5f f089 	uxtb.w	r0, r9
 80126ac:	4283      	cmp	r3, r0
 80126ae:	d8e6      	bhi.n	801267e <uxr_flash_output_streams+0x1a>
 80126b0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80126b4:	b383      	cbz	r3, 8012718 <uxr_flash_output_streams+0xb4>
 80126b6:	f04f 0900 	mov.w	r9, #0
 80126ba:	f10d 0802 	add.w	r8, sp, #2
 80126be:	af03      	add	r7, sp, #12
 80126c0:	ae02      	add	r6, sp, #8
 80126c2:	4648      	mov	r0, r9
 80126c4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80126c8:	2201      	movs	r2, #1
 80126ca:	2102      	movs	r1, #2
 80126cc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80126d0:	f001 fc3c 	bl	8013f4c <uxr_stream_id>
 80126d4:	9001      	str	r0, [sp, #4]
 80126d6:	3520      	adds	r5, #32
 80126d8:	e00c      	b.n	80126f4 <uxr_flash_output_streams+0x90>
 80126da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80126de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80126e2:	9b02      	ldr	r3, [sp, #8]
 80126e4:	f000 ff28 	bl	8013538 <uxr_stamp_session_header>
 80126e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80126ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80126ee:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80126f2:	47d0      	blx	sl
 80126f4:	4643      	mov	r3, r8
 80126f6:	463a      	mov	r2, r7
 80126f8:	4631      	mov	r1, r6
 80126fa:	4628      	mov	r0, r5
 80126fc:	f007 ffb4 	bl	801a668 <uxr_prepare_next_reliable_buffer_to_send>
 8012700:	4603      	mov	r3, r0
 8012702:	4620      	mov	r0, r4
 8012704:	2b00      	cmp	r3, #0
 8012706:	d1e8      	bne.n	80126da <uxr_flash_output_streams+0x76>
 8012708:	f109 0901 	add.w	r9, r9, #1
 801270c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012710:	fa5f f089 	uxtb.w	r0, r9
 8012714:	4283      	cmp	r3, r0
 8012716:	d8d5      	bhi.n	80126c4 <uxr_flash_output_streams+0x60>
 8012718:	b004      	add	sp, #16
 801271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801271e:	9b02      	ldr	r3, [sp, #8]
 8012720:	4620      	mov	r0, r4
 8012722:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012726:	f109 0901 	add.w	r9, r9, #1
 801272a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801272e:	f000 ff03 	bl	8013538 <uxr_stamp_session_header>
 8012732:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012734:	9a03      	ldr	r2, [sp, #12]
 8012736:	685d      	ldr	r5, [r3, #4]
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	9902      	ldr	r1, [sp, #8]
 801273c:	47a8      	blx	r5
 801273e:	7e23      	ldrb	r3, [r4, #24]
 8012740:	fa5f f089 	uxtb.w	r0, r9
 8012744:	4283      	cmp	r3, r0
 8012746:	d89a      	bhi.n	801267e <uxr_flash_output_streams+0x1a>
 8012748:	e7b2      	b.n	80126b0 <uxr_flash_output_streams+0x4c>
 801274a:	bf00      	nop

0801274c <read_submessage_info>:
 801274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012750:	460d      	mov	r5, r1
 8012752:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012756:	4606      	mov	r6, r0
 8012758:	4669      	mov	r1, sp
 801275a:	4628      	mov	r0, r5
 801275c:	f002 fc2e 	bl	8014fbc <uxr_deserialize_BaseObjectReply>
 8012760:	4604      	mov	r4, r0
 8012762:	a902      	add	r1, sp, #8
 8012764:	4628      	mov	r0, r5
 8012766:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801276a:	f7fd ffbd 	bl	80106e8 <ucdr_deserialize_bool>
 801276e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012772:	4004      	ands	r4, r0
 8012774:	b2e4      	uxtb	r4, r4
 8012776:	b95b      	cbnz	r3, 8012790 <read_submessage_info+0x44>
 8012778:	a987      	add	r1, sp, #540	@ 0x21c
 801277a:	4628      	mov	r0, r5
 801277c:	f7fd ffb4 	bl	80106e8 <ucdr_deserialize_bool>
 8012780:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012784:	4680      	mov	r8, r0
 8012786:	b94b      	cbnz	r3, 801279c <read_submessage_info+0x50>
 8012788:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012790:	a903      	add	r1, sp, #12
 8012792:	4628      	mov	r0, r5
 8012794:	f002 fabe 	bl	8014d14 <uxr_deserialize_ObjectVariant>
 8012798:	4004      	ands	r4, r0
 801279a:	e7ed      	b.n	8012778 <read_submessage_info+0x2c>
 801279c:	a988      	add	r1, sp, #544	@ 0x220
 801279e:	4628      	mov	r0, r5
 80127a0:	f7fd ffd0 	bl	8010744 <ucdr_deserialize_uint8_t>
 80127a4:	ea14 0f08 	tst.w	r4, r8
 80127a8:	d0ee      	beq.n	8012788 <read_submessage_info+0x3c>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d0ec      	beq.n	8012788 <read_submessage_info+0x3c>
 80127ae:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80127b2:	2b0d      	cmp	r3, #13
 80127b4:	d1e8      	bne.n	8012788 <read_submessage_info+0x3c>
 80127b6:	a98a      	add	r1, sp, #552	@ 0x228
 80127b8:	4628      	mov	r0, r5
 80127ba:	f7fe fd69 	bl	8011290 <ucdr_deserialize_int16_t>
 80127be:	b138      	cbz	r0, 80127d0 <read_submessage_info+0x84>
 80127c0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	dd06      	ble.n	80127d6 <read_submessage_info+0x8a>
 80127c8:	2f00      	cmp	r7, #0
 80127ca:	bf14      	ite	ne
 80127cc:	2001      	movne	r0, #1
 80127ce:	2002      	moveq	r0, #2
 80127d0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 80127d4:	e7d8      	b.n	8012788 <read_submessage_info+0x3c>
 80127d6:	2000      	movs	r0, #0
 80127d8:	e7fa      	b.n	80127d0 <read_submessage_info+0x84>
 80127da:	bf00      	nop

080127dc <read_submessage_list>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	4604      	mov	r4, r0
 80127e2:	b097      	sub	sp, #92	@ 0x5c
 80127e4:	460d      	mov	r5, r1
 80127e6:	4ec1      	ldr	r6, [pc, #772]	@ (8012aec <read_submessage_list+0x310>)
 80127e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80127ea:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80127ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80127f0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80127f4:	4628      	mov	r0, r5
 80127f6:	f001 fd01 	bl	80141fc <uxr_read_submessage_header>
 80127fa:	2800      	cmp	r0, #0
 80127fc:	f000 8142 	beq.w	8012a84 <read_submessage_list+0x2a8>
 8012800:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012804:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012808:	3b02      	subs	r3, #2
 801280a:	2b0d      	cmp	r3, #13
 801280c:	d8ed      	bhi.n	80127ea <read_submessage_list+0xe>
 801280e:	a101      	add	r1, pc, #4	@ (adr r1, 8012814 <read_submessage_list+0x38>)
 8012810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012814:	08012a7b 	.word	0x08012a7b
 8012818:	080127eb 	.word	0x080127eb
 801281c:	08012a6b 	.word	0x08012a6b
 8012820:	08012a09 	.word	0x08012a09
 8012824:	080129ff 	.word	0x080129ff
 8012828:	080127eb 	.word	0x080127eb
 801282c:	080127eb 	.word	0x080127eb
 8012830:	08012955 	.word	0x08012955
 8012834:	080128e7 	.word	0x080128e7
 8012838:	080128a7 	.word	0x080128a7
 801283c:	080127eb 	.word	0x080127eb
 8012840:	080127eb 	.word	0x080127eb
 8012844:	080127eb 	.word	0x080127eb
 8012848:	0801284d 	.word	0x0801284d
 801284c:	a910      	add	r1, sp, #64	@ 0x40
 801284e:	4628      	mov	r0, r5
 8012850:	f002 fe00 	bl	8015454 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012854:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8012858:	f1b8 0f00 	cmp.w	r8, #0
 801285c:	f000 811a 	beq.w	8012a94 <read_submessage_list+0x2b8>
 8012860:	f001 fd14 	bl	801428c <uxr_nanos>
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801286c:	2100      	movs	r1, #0
 801286e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012870:	9006      	str	r0, [sp, #24]
 8012872:	468c      	mov	ip, r1
 8012874:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8012876:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801287a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801287c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012880:	468c      	mov	ip, r1
 8012882:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012884:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012888:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801288c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8012890:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012894:	e9cd 0100 	strd	r0, r1, [sp]
 8012898:	4620      	mov	r0, r4
 801289a:	47c0      	blx	r8
 801289c:	f04f 0301 	mov.w	r3, #1
 80128a0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80128a4:	e7a1      	b.n	80127ea <read_submessage_list+0xe>
 80128a6:	a910      	add	r1, sp, #64	@ 0x40
 80128a8:	4628      	mov	r0, r5
 80128aa:	f002 fdb1 	bl	8015410 <uxr_deserialize_HEARTBEAT_Payload>
 80128ae:	2100      	movs	r1, #0
 80128b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80128b4:	f001 fb78 	bl	8013fa8 <uxr_stream_id_from_raw>
 80128b8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80128bc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80128be:	f104 0008 	add.w	r0, r4, #8
 80128c2:	4641      	mov	r1, r8
 80128c4:	f001 fc5e 	bl	8014184 <uxr_get_input_reliable_stream>
 80128c8:	2800      	cmp	r0, #0
 80128ca:	d08e      	beq.n	80127ea <read_submessage_list+0xe>
 80128cc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80128d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80128d4:	f007 fc10 	bl	801a0f8 <uxr_process_heartbeat>
 80128d8:	4642      	mov	r2, r8
 80128da:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80128de:	4620      	mov	r0, r4
 80128e0:	f7ff fdf8 	bl	80124d4 <write_submessage_acknack.isra.0>
 80128e4:	e781      	b.n	80127ea <read_submessage_list+0xe>
 80128e6:	a910      	add	r1, sp, #64	@ 0x40
 80128e8:	4628      	mov	r0, r5
 80128ea:	f002 fd69 	bl	80153c0 <uxr_deserialize_ACKNACK_Payload>
 80128ee:	2100      	movs	r1, #0
 80128f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80128f4:	f001 fb58 	bl	8013fa8 <uxr_stream_id_from_raw>
 80128f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80128fc:	900d      	str	r0, [sp, #52]	@ 0x34
 80128fe:	f104 0008 	add.w	r0, r4, #8
 8012902:	f001 fc29 	bl	8014158 <uxr_get_output_reliable_stream>
 8012906:	4680      	mov	r8, r0
 8012908:	2800      	cmp	r0, #0
 801290a:	f43f af6e 	beq.w	80127ea <read_submessage_list+0xe>
 801290e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012912:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012916:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801291a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801291e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012922:	b289      	uxth	r1, r1
 8012924:	f007 ff48 	bl	801a7b8 <uxr_process_acknack>
 8012928:	4640      	mov	r0, r8
 801292a:	f007 ff09 	bl	801a740 <uxr_begin_output_nack_buffer_it>
 801292e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012932:	e005      	b.n	8012940 <read_submessage_list+0x164>
 8012934:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012936:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801293a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801293e:	47c8      	blx	r9
 8012940:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012944:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012946:	4651      	mov	r1, sl
 8012948:	4640      	mov	r0, r8
 801294a:	f007 fefb 	bl	801a744 <uxr_next_reliable_nack_buffer_to_send>
 801294e:	2800      	cmp	r0, #0
 8012950:	d1f0      	bne.n	8012934 <read_submessage_list+0x158>
 8012952:	e74a      	b.n	80127ea <read_submessage_list+0xe>
 8012954:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012958:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801295c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8012960:	4628      	mov	r0, r5
 8012962:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012966:	4651      	mov	r1, sl
 8012968:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801296c:	f1a8 0804 	sub.w	r8, r8, #4
 8012970:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012974:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012978:	fa1f f888 	uxth.w	r8, r8
 801297c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012980:	f009 090e 	and.w	r9, r9, #14
 8012984:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012988:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801298c:	f002 fa64 	bl	8014e58 <uxr_deserialize_BaseObjectRequest>
 8012990:	4650      	mov	r0, sl
 8012992:	a90f      	add	r1, sp, #60	@ 0x3c
 8012994:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012998:	f000 fe4a 	bl	8013630 <uxr_parse_base_object_request>
 801299c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801299e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80129a2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80129a6:	9110      	str	r1, [sp, #64]	@ 0x40
 80129a8:	f1bb 0f00 	cmp.w	fp, #0
 80129ac:	d006      	beq.n	80129bc <read_submessage_list+0x1e0>
 80129ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80129b2:	4652      	mov	r2, sl
 80129b4:	4620      	mov	r0, r4
 80129b6:	9300      	str	r3, [sp, #0]
 80129b8:	2300      	movs	r3, #0
 80129ba:	47d8      	blx	fp
 80129bc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80129be:	b182      	cbz	r2, 80129e2 <read_submessage_list+0x206>
 80129c0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80129c2:	f04f 0c00 	mov.w	ip, #0
 80129c6:	3902      	subs	r1, #2
 80129c8:	e003      	b.n	80129d2 <read_submessage_list+0x1f6>
 80129ca:	f10c 0c01 	add.w	ip, ip, #1
 80129ce:	4594      	cmp	ip, r2
 80129d0:	d007      	beq.n	80129e2 <read_submessage_list+0x206>
 80129d2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80129d6:	4553      	cmp	r3, sl
 80129d8:	d1f7      	bne.n	80129ca <read_submessage_list+0x1ee>
 80129da:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80129dc:	2200      	movs	r2, #0
 80129de:	f803 200c 	strb.w	r2, [r3, ip]
 80129e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80129e6:	464b      	mov	r3, r9
 80129e8:	4642      	mov	r2, r8
 80129ea:	4620      	mov	r0, r4
 80129ec:	9102      	str	r1, [sp, #8]
 80129ee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80129f0:	9101      	str	r1, [sp, #4]
 80129f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80129f4:	9100      	str	r1, [sp, #0]
 80129f6:	4629      	mov	r1, r5
 80129f8:	f7ff fc4a 	bl	8012290 <read_submessage_format>
 80129fc:	e6f5      	b.n	80127ea <read_submessage_list+0xe>
 80129fe:	4629      	mov	r1, r5
 8012a00:	4620      	mov	r0, r4
 8012a02:	f7ff fea3 	bl	801274c <read_submessage_info>
 8012a06:	e6f0      	b.n	80127ea <read_submessage_list+0xe>
 8012a08:	2a00      	cmp	r2, #0
 8012a0a:	d03e      	beq.n	8012a8a <read_submessage_list+0x2ae>
 8012a0c:	a910      	add	r1, sp, #64	@ 0x40
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f002 fc2e 	bl	8015270 <uxr_deserialize_STATUS_Payload>
 8012a14:	a90e      	add	r1, sp, #56	@ 0x38
 8012a16:	aa0d      	add	r2, sp, #52	@ 0x34
 8012a18:	a810      	add	r0, sp, #64	@ 0x40
 8012a1a:	f000 fe09 	bl	8013630 <uxr_parse_base_object_request>
 8012a1e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012a20:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012a24:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012a28:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8012a2c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012a2e:	f1ba 0f00 	cmp.w	sl, #0
 8012a32:	d006      	beq.n	8012a42 <read_submessage_list+0x266>
 8012a34:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012a38:	4642      	mov	r2, r8
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	464b      	mov	r3, r9
 8012a40:	47d0      	blx	sl
 8012a42:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012a44:	2a00      	cmp	r2, #0
 8012a46:	f43f aed0 	beq.w	80127ea <read_submessage_list+0xe>
 8012a4a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	3802      	subs	r0, #2
 8012a50:	e003      	b.n	8012a5a <read_submessage_list+0x27e>
 8012a52:	3101      	adds	r1, #1
 8012a54:	4291      	cmp	r1, r2
 8012a56:	f43f aec8 	beq.w	80127ea <read_submessage_list+0xe>
 8012a5a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012a5e:	4543      	cmp	r3, r8
 8012a60:	d1f7      	bne.n	8012a52 <read_submessage_list+0x276>
 8012a62:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012a64:	f803 9001 	strb.w	r9, [r3, r1]
 8012a68:	e6bf      	b.n	80127ea <read_submessage_list+0xe>
 8012a6a:	2a00      	cmp	r2, #0
 8012a6c:	f47f aebd 	bne.w	80127ea <read_submessage_list+0xe>
 8012a70:	4629      	mov	r1, r5
 8012a72:	4620      	mov	r0, r4
 8012a74:	f000 fd20 	bl	80134b8 <uxr_read_create_session_status>
 8012a78:	e6b7      	b.n	80127ea <read_submessage_list+0xe>
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f7ff fcf3 	bl	8012468 <read_submessage_get_info>
 8012a82:	e6b2      	b.n	80127ea <read_submessage_list+0xe>
 8012a84:	b017      	add	sp, #92	@ 0x5c
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	4629      	mov	r1, r5
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f000 fd21 	bl	80134d4 <uxr_read_delete_session_status>
 8012a92:	e6aa      	b.n	80127ea <read_submessage_list+0xe>
 8012a94:	f001 fbfa 	bl	801428c <uxr_nanos>
 8012a98:	4642      	mov	r2, r8
 8012a9a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012a9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012a9e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012aa2:	1818      	adds	r0, r3, r0
 8012aa4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012aa6:	eb42 0101 	adc.w	r1, r2, r1
 8012aaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012aac:	4642      	mov	r2, r8
 8012aae:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012ab2:	469c      	mov	ip, r3
 8012ab4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8012ab8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8012abc:	4643      	mov	r3, r8
 8012abe:	eb1c 0c07 	adds.w	ip, ip, r7
 8012ac2:	eb42 0203 	adc.w	r2, r2, r3
 8012ac6:	ebb0 030c 	subs.w	r3, r0, ip
 8012aca:	eb61 0202 	sbc.w	r2, r1, r2
 8012ace:	2a00      	cmp	r2, #0
 8012ad0:	db08      	blt.n	8012ae4 <read_submessage_list+0x308>
 8012ad2:	085b      	lsrs	r3, r3, #1
 8012ad4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012ad8:	1052      	asrs	r2, r2, #1
 8012ada:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8012ade:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8012ae2:	e6db      	b.n	801289c <read_submessage_list+0xc0>
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	f142 0200 	adc.w	r2, r2, #0
 8012aea:	e7f2      	b.n	8012ad2 <read_submessage_list+0x2f6>
 8012aec:	3b9aca00 	.word	0x3b9aca00

08012af0 <listen_message_reliably>:
 8012af0:	1e0b      	subs	r3, r1, #0
 8012af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af6:	bfb8      	it	lt
 8012af8:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8012afc:	b09d      	sub	sp, #116	@ 0x74
 8012afe:	4680      	mov	r8, r0
 8012b00:	9305      	str	r3, [sp, #20]
 8012b02:	f001 fba7 	bl	8014254 <uxr_millis>
 8012b06:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012b0a:	4681      	mov	r9, r0
 8012b0c:	2a00      	cmp	r2, #0
 8012b0e:	f000 809a 	beq.w	8012c46 <listen_message_reliably+0x156>
 8012b12:	2600      	movs	r6, #0
 8012b14:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b18:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012b1c:	460f      	mov	r7, r1
 8012b1e:	4630      	mov	r0, r6
 8012b20:	9303      	str	r3, [sp, #12]
 8012b22:	e00e      	b.n	8012b42 <listen_message_reliably+0x52>
 8012b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b26:	3601      	adds	r6, #1
 8012b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b2a:	455a      	cmp	r2, fp
 8012b2c:	9903      	ldr	r1, [sp, #12]
 8012b2e:	b2f0      	uxtb	r0, r6
 8012b30:	eb73 0101 	sbcs.w	r1, r3, r1
 8012b34:	da01      	bge.n	8012b3a <listen_message_reliably+0x4a>
 8012b36:	4693      	mov	fp, r2
 8012b38:	9303      	str	r3, [sp, #12]
 8012b3a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012b3e:	4283      	cmp	r3, r0
 8012b40:	d95f      	bls.n	8012c02 <listen_message_reliably+0x112>
 8012b42:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012b46:	2102      	movs	r1, #2
 8012b48:	2201      	movs	r2, #1
 8012b4a:	00e4      	lsls	r4, r4, #3
 8012b4c:	f001 f9fe 	bl	8013f4c <uxr_stream_id>
 8012b50:	4601      	mov	r1, r0
 8012b52:	f104 0520 	add.w	r5, r4, #32
 8012b56:	463b      	mov	r3, r7
 8012b58:	464a      	mov	r2, r9
 8012b5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b5c:	4445      	add	r5, r8
 8012b5e:	4628      	mov	r0, r5
 8012b60:	f007 fdc2 	bl	801a6e8 <uxr_update_output_stream_heartbeat_timestamp>
 8012b64:	eb08 0304 	add.w	r3, r8, r4
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d0db      	beq.n	8012b24 <listen_message_reliably+0x34>
 8012b6c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8012b70:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012b74:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012b78:	4640      	mov	r0, r8
 8012b7a:	3501      	adds	r5, #1
 8012b7c:	4444      	add	r4, r8
 8012b7e:	9304      	str	r3, [sp, #16]
 8012b80:	f000 fd2e 	bl	80135e0 <uxr_session_header_offset>
 8012b84:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012b88:	2300      	movs	r3, #0
 8012b8a:	2211      	movs	r2, #17
 8012b8c:	a90c      	add	r1, sp, #48	@ 0x30
 8012b8e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012b92:	9000      	str	r0, [sp, #0]
 8012b94:	4650      	mov	r0, sl
 8012b96:	3601      	adds	r6, #1
 8012b98:	f7fe fef8 	bl	801198c <ucdr_init_buffer_origin_offset>
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	2205      	movs	r2, #5
 8012ba0:	210b      	movs	r1, #11
 8012ba2:	4650      	mov	r0, sl
 8012ba4:	f001 fb10 	bl	80141c8 <uxr_buffer_submessage_header>
 8012ba8:	2101      	movs	r1, #1
 8012baa:	8968      	ldrh	r0, [r5, #10]
 8012bac:	f007 fe60 	bl	801a870 <uxr_seq_num_add>
 8012bb0:	892b      	ldrh	r3, [r5, #8]
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	a90a      	add	r1, sp, #40	@ 0x28
 8012bb6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012bba:	4650      	mov	r0, sl
 8012bbc:	9b04      	ldr	r3, [sp, #16]
 8012bbe:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012bc2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012bc6:	f002 fc0f 	bl	80153e8 <uxr_serialize_HEARTBEAT_Payload>
 8012bca:	2200      	movs	r2, #0
 8012bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012bce:	4640      	mov	r0, r8
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	f000 fcb1 	bl	8013538 <uxr_stamp_session_header>
 8012bd6:	4650      	mov	r0, sl
 8012bd8:	f7fe ff18 	bl	8011a0c <ucdr_buffer_length>
 8012bdc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8012be0:	4602      	mov	r2, r0
 8012be2:	a90c      	add	r1, sp, #48	@ 0x30
 8012be4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012be8:	47a8      	blx	r5
 8012bea:	9903      	ldr	r1, [sp, #12]
 8012bec:	b2f0      	uxtb	r0, r6
 8012bee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8012bf2:	455a      	cmp	r2, fp
 8012bf4:	eb73 0101 	sbcs.w	r1, r3, r1
 8012bf8:	db9d      	blt.n	8012b36 <listen_message_reliably+0x46>
 8012bfa:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012bfe:	4283      	cmp	r3, r0
 8012c00:	d89f      	bhi.n	8012b42 <listen_message_reliably+0x52>
 8012c02:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012c06:	9a03      	ldr	r2, [sp, #12]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	bf08      	it	eq
 8012c0c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8012c10:	d019      	beq.n	8012c46 <listen_message_reliably+0x156>
 8012c12:	ebab 0309 	sub.w	r3, fp, r9
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	9d05      	ldr	r5, [sp, #20]
 8012c1a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8012c1e:	aa08      	add	r2, sp, #32
 8012c20:	bf08      	it	eq
 8012c22:	2301      	moveq	r3, #1
 8012c24:	a907      	add	r1, sp, #28
 8012c26:	6884      	ldr	r4, [r0, #8]
 8012c28:	429d      	cmp	r5, r3
 8012c2a:	6800      	ldr	r0, [r0, #0]
 8012c2c:	bfa8      	it	ge
 8012c2e:	461d      	movge	r5, r3
 8012c30:	462b      	mov	r3, r5
 8012c32:	47a0      	blx	r4
 8012c34:	b948      	cbnz	r0, 8012c4a <listen_message_reliably+0x15a>
 8012c36:	9b05      	ldr	r3, [sp, #20]
 8012c38:	1b5b      	subs	r3, r3, r5
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	9305      	str	r3, [sp, #20]
 8012c3e:	f73f af60 	bgt.w	8012b02 <listen_message_reliably+0x12>
 8012c42:	4604      	mov	r4, r0
 8012c44:	e012      	b.n	8012c6c <listen_message_reliably+0x17c>
 8012c46:	9b05      	ldr	r3, [sp, #20]
 8012c48:	e7e5      	b.n	8012c16 <listen_message_reliably+0x126>
 8012c4a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012c4e:	4604      	mov	r4, r0
 8012c50:	2500      	movs	r5, #0
 8012c52:	a80c      	add	r0, sp, #48	@ 0x30
 8012c54:	f7fe feac 	bl	80119b0 <ucdr_init_buffer>
 8012c58:	f10d 031a 	add.w	r3, sp, #26
 8012c5c:	aa06      	add	r2, sp, #24
 8012c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8012c60:	4640      	mov	r0, r8
 8012c62:	f88d 5018 	strb.w	r5, [sp, #24]
 8012c66:	f000 fc7b 	bl	8013560 <uxr_read_session_header>
 8012c6a:	b918      	cbnz	r0, 8012c74 <listen_message_reliably+0x184>
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	b01d      	add	sp, #116	@ 0x74
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	4629      	mov	r1, r5
 8012c76:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012c7a:	f001 f995 	bl	8013fa8 <uxr_stream_id_from_raw>
 8012c7e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012c82:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8012c86:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012c8a:	2e01      	cmp	r6, #1
 8012c8c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012c90:	d04b      	beq.n	8012d2a <listen_message_reliably+0x23a>
 8012c92:	2e02      	cmp	r6, #2
 8012c94:	d00f      	beq.n	8012cb6 <listen_message_reliably+0x1c6>
 8012c96:	2e00      	cmp	r6, #0
 8012c98:	d1e8      	bne.n	8012c6c <listen_message_reliably+0x17c>
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	f001 f983 	bl	8013fa8 <uxr_stream_id_from_raw>
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	a90c      	add	r1, sp, #48	@ 0x30
 8012ca6:	4640      	mov	r0, r8
 8012ca8:	920a      	str	r2, [sp, #40]	@ 0x28
 8012caa:	f7ff fd97 	bl	80127dc <read_submessage_list>
 8012cae:	4620      	mov	r0, r4
 8012cb0:	b01d      	add	sp, #116	@ 0x74
 8012cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	f108 0008 	add.w	r0, r8, #8
 8012cbc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8012cc0:	f001 fa60 	bl	8014184 <uxr_get_input_reliable_stream>
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	b338      	cbz	r0, 8012d18 <listen_message_reliably+0x228>
 8012cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cca:	a80c      	add	r0, sp, #48	@ 0x30
 8012ccc:	9203      	str	r2, [sp, #12]
 8012cce:	f7fe fea1 	bl	8011a14 <ucdr_buffer_remaining>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	f10d 0019 	add.w	r0, sp, #25
 8012cd8:	9a03      	ldr	r2, [sp, #12]
 8012cda:	4651      	mov	r1, sl
 8012cdc:	9000      	str	r0, [sp, #0]
 8012cde:	4638      	mov	r0, r7
 8012ce0:	f007 f90e 	bl	8019f00 <uxr_receive_reliable_message>
 8012ce4:	b1c0      	cbz	r0, 8012d18 <listen_message_reliably+0x228>
 8012ce6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012cea:	b393      	cbz	r3, 8012d52 <listen_message_reliably+0x262>
 8012cec:	ae14      	add	r6, sp, #80	@ 0x50
 8012cee:	f04f 0a02 	mov.w	sl, #2
 8012cf2:	e00a      	b.n	8012d0a <listen_message_reliably+0x21a>
 8012cf4:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8012cfe:	4640      	mov	r0, r8
 8012d00:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8012d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d06:	f7ff fd69 	bl	80127dc <read_submessage_list>
 8012d0a:	2204      	movs	r2, #4
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4638      	mov	r0, r7
 8012d10:	f007 f978 	bl	801a004 <uxr_next_input_reliable_buffer_available>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d1ed      	bne.n	8012cf4 <listen_message_reliably+0x204>
 8012d18:	4640      	mov	r0, r8
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	f7ff fbd9 	bl	80124d4 <write_submessage_acknack.isra.0>
 8012d22:	4620      	mov	r0, r4
 8012d24:	b01d      	add	sp, #116	@ 0x74
 8012d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2a:	4629      	mov	r1, r5
 8012d2c:	f108 0008 	add.w	r0, r8, #8
 8012d30:	f001 fa1e 	bl	8014170 <uxr_get_input_best_effort_stream>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d099      	beq.n	8012c6c <listen_message_reliably+0x17c>
 8012d38:	4651      	mov	r1, sl
 8012d3a:	f007 f857 	bl	8019dec <uxr_receive_best_effort_message>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d094      	beq.n	8012c6c <listen_message_reliably+0x17c>
 8012d42:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012d46:	a90c      	add	r1, sp, #48	@ 0x30
 8012d48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	f7ff fd46 	bl	80127dc <read_submessage_list>
 8012d50:	e78c      	b.n	8012c6c <listen_message_reliably+0x17c>
 8012d52:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012d56:	a90c      	add	r1, sp, #48	@ 0x30
 8012d58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	f7ff fd3e 	bl	80127dc <read_submessage_list>
 8012d60:	e7c4      	b.n	8012cec <listen_message_reliably+0x1fc>
 8012d62:	bf00      	nop

08012d64 <uxr_run_session_timeout>:
 8012d64:	b570      	push	{r4, r5, r6, lr}
 8012d66:	4604      	mov	r4, r0
 8012d68:	460d      	mov	r5, r1
 8012d6a:	f001 fa73 	bl	8014254 <uxr_millis>
 8012d6e:	4606      	mov	r6, r0
 8012d70:	4620      	mov	r0, r4
 8012d72:	f7ff fc77 	bl	8012664 <uxr_flash_output_streams>
 8012d76:	4629      	mov	r1, r5
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f7ff feb9 	bl	8012af0 <listen_message_reliably>
 8012d7e:	f001 fa69 	bl	8014254 <uxr_millis>
 8012d82:	1b83      	subs	r3, r0, r6
 8012d84:	1ae9      	subs	r1, r5, r3
 8012d86:	2900      	cmp	r1, #0
 8012d88:	dcf6      	bgt.n	8012d78 <uxr_run_session_timeout+0x14>
 8012d8a:	f104 0008 	add.w	r0, r4, #8
 8012d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d92:	f001 ba03 	b.w	801419c <uxr_output_streams_confirmed>
 8012d96:	bf00      	nop

08012d98 <uxr_run_session_until_data>:
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	460d      	mov	r5, r1
 8012d9e:	f001 fa59 	bl	8014254 <uxr_millis>
 8012da2:	4606      	mov	r6, r0
 8012da4:	4620      	mov	r0, r4
 8012da6:	f7ff fc5d 	bl	8012664 <uxr_flash_output_streams>
 8012daa:	2300      	movs	r3, #0
 8012dac:	4629      	mov	r1, r5
 8012dae:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012db2:	e005      	b.n	8012dc0 <uxr_run_session_until_data+0x28>
 8012db4:	f001 fa4e 	bl	8014254 <uxr_millis>
 8012db8:	1b83      	subs	r3, r0, r6
 8012dba:	1ae9      	subs	r1, r5, r3
 8012dbc:	2900      	cmp	r1, #0
 8012dbe:	dd07      	ble.n	8012dd0 <uxr_run_session_until_data+0x38>
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f7ff fe95 	bl	8012af0 <listen_message_reliably>
 8012dc6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0f2      	beq.n	8012db4 <uxr_run_session_until_data+0x1c>
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012dd4:	bd70      	pop	{r4, r5, r6, pc}
 8012dd6:	bf00      	nop

08012dd8 <uxr_run_session_until_confirm_delivery>:
 8012dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ddc:	4606      	mov	r6, r0
 8012dde:	460d      	mov	r5, r1
 8012de0:	f001 fa38 	bl	8014254 <uxr_millis>
 8012de4:	4607      	mov	r7, r0
 8012de6:	4630      	mov	r0, r6
 8012de8:	f106 0808 	add.w	r8, r6, #8
 8012dec:	f7ff fc3a 	bl	8012664 <uxr_flash_output_streams>
 8012df0:	2d00      	cmp	r5, #0
 8012df2:	db10      	blt.n	8012e16 <uxr_run_session_until_confirm_delivery+0x3e>
 8012df4:	462c      	mov	r4, r5
 8012df6:	e006      	b.n	8012e06 <uxr_run_session_until_confirm_delivery+0x2e>
 8012df8:	f7ff fe7a 	bl	8012af0 <listen_message_reliably>
 8012dfc:	f001 fa2a 	bl	8014254 <uxr_millis>
 8012e00:	1bc3      	subs	r3, r0, r7
 8012e02:	1aec      	subs	r4, r5, r3
 8012e04:	d407      	bmi.n	8012e16 <uxr_run_session_until_confirm_delivery+0x3e>
 8012e06:	4640      	mov	r0, r8
 8012e08:	f001 f9c8 	bl	801419c <uxr_output_streams_confirmed>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	4621      	mov	r1, r4
 8012e10:	4630      	mov	r0, r6
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d0f0      	beq.n	8012df8 <uxr_run_session_until_confirm_delivery+0x20>
 8012e16:	4640      	mov	r0, r8
 8012e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1c:	f001 b9be 	b.w	801419c <uxr_output_streams_confirmed>

08012e20 <uxr_run_session_until_all_status>:
 8012e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8012e28:	4606      	mov	r6, r0
 8012e2a:	4688      	mov	r8, r1
 8012e2c:	4692      	mov	sl, r2
 8012e2e:	461f      	mov	r7, r3
 8012e30:	f7ff fc18 	bl	8012664 <uxr_flash_output_streams>
 8012e34:	f1bb 0f00 	cmp.w	fp, #0
 8012e38:	d004      	beq.n	8012e44 <uxr_run_session_until_all_status+0x24>
 8012e3a:	465a      	mov	r2, fp
 8012e3c:	21ff      	movs	r1, #255	@ 0xff
 8012e3e:	4638      	mov	r0, r7
 8012e40:	f008 fe22 	bl	801ba88 <memset>
 8012e44:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8012e48:	1e7d      	subs	r5, r7, #1
 8012e4a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8012e4e:	f001 fa01 	bl	8014254 <uxr_millis>
 8012e52:	4641      	mov	r1, r8
 8012e54:	4681      	mov	r9, r0
 8012e56:	4630      	mov	r0, r6
 8012e58:	f7ff fe4a 	bl	8012af0 <listen_message_reliably>
 8012e5c:	f001 f9fa 	bl	8014254 <uxr_millis>
 8012e60:	eba0 0009 	sub.w	r0, r0, r9
 8012e64:	eba8 0100 	sub.w	r1, r8, r0
 8012e68:	f1bb 0f00 	cmp.w	fp, #0
 8012e6c:	d029      	beq.n	8012ec2 <uxr_run_session_until_all_status+0xa2>
 8012e6e:	46ae      	mov	lr, r5
 8012e70:	f04f 0c00 	mov.w	ip, #0
 8012e74:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012e78:	2cff      	cmp	r4, #255	@ 0xff
 8012e7a:	d015      	beq.n	8012ea8 <uxr_run_session_until_all_status+0x88>
 8012e7c:	f10c 0c01 	add.w	ip, ip, #1
 8012e80:	45e3      	cmp	fp, ip
 8012e82:	d8f7      	bhi.n	8012e74 <uxr_run_session_until_all_status+0x54>
 8012e84:	2300      	movs	r3, #0
 8012e86:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012e88:	e000      	b.n	8012e8c <uxr_run_session_until_all_status+0x6c>
 8012e8a:	b158      	cbz	r0, 8012ea4 <uxr_run_session_until_all_status+0x84>
 8012e8c:	462b      	mov	r3, r5
 8012e8e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012e92:	3302      	adds	r3, #2
 8012e94:	2801      	cmp	r0, #1
 8012e96:	eba3 0307 	sub.w	r3, r3, r7
 8012e9a:	bf8c      	ite	hi
 8012e9c:	2000      	movhi	r0, #0
 8012e9e:	2001      	movls	r0, #1
 8012ea0:	459b      	cmp	fp, r3
 8012ea2:	d8f2      	bhi.n	8012e8a <uxr_run_session_until_all_status+0x6a>
 8012ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8012eac:	f10c 0c01 	add.w	ip, ip, #1
 8012eb0:	45dc      	cmp	ip, fp
 8012eb2:	d201      	bcs.n	8012eb8 <uxr_run_session_until_all_status+0x98>
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d0dd      	beq.n	8012e74 <uxr_run_session_until_all_status+0x54>
 8012eb8:	2900      	cmp	r1, #0
 8012eba:	dde3      	ble.n	8012e84 <uxr_run_session_until_all_status+0x64>
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d1ca      	bne.n	8012e56 <uxr_run_session_until_all_status+0x36>
 8012ec0:	e7e0      	b.n	8012e84 <uxr_run_session_until_all_status+0x64>
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8012ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ecc:	0000      	movs	r0, r0
	...

08012ed0 <uxr_sync_session>:
 8012ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ed2:	b093      	sub	sp, #76	@ 0x4c
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	460d      	mov	r5, r1
 8012ed8:	f000 fb82 	bl	80135e0 <uxr_session_header_offset>
 8012edc:	2214      	movs	r2, #20
 8012ede:	2300      	movs	r3, #0
 8012ee0:	9000      	str	r0, [sp, #0]
 8012ee2:	a80a      	add	r0, sp, #40	@ 0x28
 8012ee4:	eb0d 0102 	add.w	r1, sp, r2
 8012ee8:	f7fe fd50 	bl	801198c <ucdr_init_buffer_origin_offset>
 8012eec:	2300      	movs	r3, #0
 8012eee:	2208      	movs	r2, #8
 8012ef0:	210e      	movs	r1, #14
 8012ef2:	a80a      	add	r0, sp, #40	@ 0x28
 8012ef4:	f001 f968 	bl	80141c8 <uxr_buffer_submessage_header>
 8012ef8:	f001 f9c8 	bl	801428c <uxr_nanos>
 8012efc:	460e      	mov	r6, r1
 8012efe:	4607      	mov	r7, r0
 8012f00:	a31b      	add	r3, pc, #108	@ (adr r3, 8012f70 <uxr_sync_session+0xa0>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	f7ed fa53 	bl	80003b0 <__aeabi_ldivmod>
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	9003      	str	r0, [sp, #12]
 8012f0e:	4638      	mov	r0, r7
 8012f10:	a317      	add	r3, pc, #92	@ (adr r3, 8012f70 <uxr_sync_session+0xa0>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed fa4b 	bl	80003b0 <__aeabi_ldivmod>
 8012f1a:	a903      	add	r1, sp, #12
 8012f1c:	a80a      	add	r0, sp, #40	@ 0x28
 8012f1e:	9204      	str	r2, [sp, #16]
 8012f20:	f002 fa8a 	bl	8015438 <uxr_serialize_TIMESTAMP_Payload>
 8012f24:	2200      	movs	r2, #0
 8012f26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f28:	4620      	mov	r0, r4
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	f000 fb04 	bl	8013538 <uxr_stamp_session_header>
 8012f30:	a80a      	add	r0, sp, #40	@ 0x28
 8012f32:	f7fe fd6b 	bl	8011a0c <ucdr_buffer_length>
 8012f36:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012f38:	4602      	mov	r2, r0
 8012f3a:	a905      	add	r1, sp, #20
 8012f3c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012f40:	47b0      	blx	r6
 8012f42:	f001 f987 	bl	8014254 <uxr_millis>
 8012f46:	2300      	movs	r3, #0
 8012f48:	4606      	mov	r6, r0
 8012f4a:	4629      	mov	r1, r5
 8012f4c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012f50:	e000      	b.n	8012f54 <uxr_sync_session+0x84>
 8012f52:	b950      	cbnz	r0, 8012f6a <uxr_sync_session+0x9a>
 8012f54:	4620      	mov	r0, r4
 8012f56:	f7ff fdcb 	bl	8012af0 <listen_message_reliably>
 8012f5a:	f001 f97b 	bl	8014254 <uxr_millis>
 8012f5e:	1b83      	subs	r3, r0, r6
 8012f60:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8012f64:	1ae9      	subs	r1, r5, r3
 8012f66:	2900      	cmp	r1, #0
 8012f68:	dcf3      	bgt.n	8012f52 <uxr_sync_session+0x82>
 8012f6a:	b013      	add	sp, #76	@ 0x4c
 8012f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	3b9aca00 	.word	0x3b9aca00
 8012f74:	00000000 	.word	0x00000000

08012f78 <uxr_run_session_until_pong>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	460d      	mov	r5, r1
 8012f7e:	f001 f969 	bl	8014254 <uxr_millis>
 8012f82:	4606      	mov	r6, r0
 8012f84:	4620      	mov	r0, r4
 8012f86:	f7ff fb6d 	bl	8012664 <uxr_flash_output_streams>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8012f92:	e005      	b.n	8012fa0 <uxr_run_session_until_pong+0x28>
 8012f94:	f001 f95e 	bl	8014254 <uxr_millis>
 8012f98:	1b83      	subs	r3, r0, r6
 8012f9a:	1ae9      	subs	r1, r5, r3
 8012f9c:	2900      	cmp	r1, #0
 8012f9e:	dd0c      	ble.n	8012fba <uxr_run_session_until_pong+0x42>
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f7ff fda5 	bl	8012af0 <listen_message_reliably>
 8012fa6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d0f2      	beq.n	8012f94 <uxr_run_session_until_pong+0x1c>
 8012fae:	f1a0 0001 	sub.w	r0, r0, #1
 8012fb2:	fab0 f080 	clz	r0, r0
 8012fb6:	0940      	lsrs	r0, r0, #5
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}
 8012fba:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8012fbe:	f1a0 0001 	sub.w	r0, r0, #1
 8012fc2:	fab0 f080 	clz	r0, r0
 8012fc6:	0940      	lsrs	r0, r0, #5
 8012fc8:	bd70      	pop	{r4, r5, r6, pc}
 8012fca:	bf00      	nop

08012fcc <wait_session_status>:
 8012fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	b09d      	sub	sp, #116	@ 0x74
 8012fd4:	20ff      	movs	r0, #255	@ 0xff
 8012fd6:	9303      	str	r3, [sp, #12]
 8012fd8:	7160      	strb	r0, [r4, #5]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f000 80b6 	beq.w	801314c <wait_session_status+0x180>
 8012fe0:	4689      	mov	r9, r1
 8012fe2:	4692      	mov	sl, r2
 8012fe4:	f04f 0b00 	mov.w	fp, #0
 8012fe8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012fea:	4652      	mov	r2, sl
 8012fec:	4649      	mov	r1, r9
 8012fee:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012ff2:	47a8      	blx	r5
 8012ff4:	f001 f92e 	bl	8014254 <uxr_millis>
 8012ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	e009      	b.n	8013014 <wait_session_status+0x48>
 8013000:	f001 f928 	bl	8014254 <uxr_millis>
 8013004:	1b40      	subs	r0, r0, r5
 8013006:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801300a:	2b00      	cmp	r3, #0
 801300c:	dd40      	ble.n	8013090 <wait_session_status+0xc4>
 801300e:	7960      	ldrb	r0, [r4, #5]
 8013010:	28ff      	cmp	r0, #255	@ 0xff
 8013012:	d145      	bne.n	80130a0 <wait_session_status+0xd4>
 8013014:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013016:	a908      	add	r1, sp, #32
 8013018:	6896      	ldr	r6, [r2, #8]
 801301a:	6810      	ldr	r0, [r2, #0]
 801301c:	aa09      	add	r2, sp, #36	@ 0x24
 801301e:	47b0      	blx	r6
 8013020:	2800      	cmp	r0, #0
 8013022:	d0ed      	beq.n	8013000 <wait_session_status+0x34>
 8013024:	a80c      	add	r0, sp, #48	@ 0x30
 8013026:	2600      	movs	r6, #0
 8013028:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801302c:	f7fe fcc0 	bl	80119b0 <ucdr_init_buffer>
 8013030:	f10d 031e 	add.w	r3, sp, #30
 8013034:	aa07      	add	r2, sp, #28
 8013036:	a90c      	add	r1, sp, #48	@ 0x30
 8013038:	4620      	mov	r0, r4
 801303a:	f88d 601c 	strb.w	r6, [sp, #28]
 801303e:	f000 fa8f 	bl	8013560 <uxr_read_session_header>
 8013042:	2800      	cmp	r0, #0
 8013044:	d0dc      	beq.n	8013000 <wait_session_status+0x34>
 8013046:	4631      	mov	r1, r6
 8013048:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801304c:	f000 ffac 	bl	8013fa8 <uxr_stream_id_from_raw>
 8013050:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013054:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013058:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801305c:	2f01      	cmp	r7, #1
 801305e:	9302      	str	r3, [sp, #8]
 8013060:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013064:	d05c      	beq.n	8013120 <wait_session_status+0x154>
 8013066:	2f02      	cmp	r7, #2
 8013068:	d020      	beq.n	80130ac <wait_session_status+0xe0>
 801306a:	2f00      	cmp	r7, #0
 801306c:	d1c8      	bne.n	8013000 <wait_session_status+0x34>
 801306e:	4639      	mov	r1, r7
 8013070:	4638      	mov	r0, r7
 8013072:	f000 ff99 	bl	8013fa8 <uxr_stream_id_from_raw>
 8013076:	a90c      	add	r1, sp, #48	@ 0x30
 8013078:	4602      	mov	r2, r0
 801307a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801307c:	4620      	mov	r0, r4
 801307e:	f7ff fbad 	bl	80127dc <read_submessage_list>
 8013082:	f001 f8e7 	bl	8014254 <uxr_millis>
 8013086:	1b40      	subs	r0, r0, r5
 8013088:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801308c:	2b00      	cmp	r3, #0
 801308e:	dcbe      	bgt.n	801300e <wait_session_status+0x42>
 8013090:	f10b 0b01 	add.w	fp, fp, #1
 8013094:	9b03      	ldr	r3, [sp, #12]
 8013096:	7960      	ldrb	r0, [r4, #5]
 8013098:	455b      	cmp	r3, fp
 801309a:	d001      	beq.n	80130a0 <wait_session_status+0xd4>
 801309c:	28ff      	cmp	r0, #255	@ 0xff
 801309e:	d0a3      	beq.n	8012fe8 <wait_session_status+0x1c>
 80130a0:	38ff      	subs	r0, #255	@ 0xff
 80130a2:	bf18      	it	ne
 80130a4:	2001      	movne	r0, #1
 80130a6:	b01d      	add	sp, #116	@ 0x74
 80130a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ac:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80130b0:	4631      	mov	r1, r6
 80130b2:	f104 0008 	add.w	r0, r4, #8
 80130b6:	9304      	str	r3, [sp, #16]
 80130b8:	f001 f864 	bl	8014184 <uxr_get_input_reliable_stream>
 80130bc:	4680      	mov	r8, r0
 80130be:	b348      	cbz	r0, 8013114 <wait_session_status+0x148>
 80130c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130c2:	a80c      	add	r0, sp, #48	@ 0x30
 80130c4:	9205      	str	r2, [sp, #20]
 80130c6:	f7fe fca5 	bl	8011a14 <ucdr_buffer_remaining>
 80130ca:	4603      	mov	r3, r0
 80130cc:	f10d 001d 	add.w	r0, sp, #29
 80130d0:	9a05      	ldr	r2, [sp, #20]
 80130d2:	9000      	str	r0, [sp, #0]
 80130d4:	4640      	mov	r0, r8
 80130d6:	9902      	ldr	r1, [sp, #8]
 80130d8:	f006 ff12 	bl	8019f00 <uxr_receive_reliable_message>
 80130dc:	b1d0      	cbz	r0, 8013114 <wait_session_status+0x148>
 80130de:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d03a      	beq.n	801315c <wait_session_status+0x190>
 80130e6:	9f04      	ldr	r7, [sp, #16]
 80130e8:	e00a      	b.n	8013100 <wait_session_status+0x134>
 80130ea:	f04f 0302 	mov.w	r3, #2
 80130ee:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80130f2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80130f6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80130fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80130fc:	f7ff fb6e 	bl	80127dc <read_submessage_list>
 8013100:	a914      	add	r1, sp, #80	@ 0x50
 8013102:	2204      	movs	r2, #4
 8013104:	4640      	mov	r0, r8
 8013106:	f006 ff7d 	bl	801a004 <uxr_next_input_reliable_buffer_available>
 801310a:	4603      	mov	r3, r0
 801310c:	a914      	add	r1, sp, #80	@ 0x50
 801310e:	4620      	mov	r0, r4
 8013110:	2b00      	cmp	r3, #0
 8013112:	d1ea      	bne.n	80130ea <wait_session_status+0x11e>
 8013114:	4632      	mov	r2, r6
 8013116:	9904      	ldr	r1, [sp, #16]
 8013118:	4620      	mov	r0, r4
 801311a:	f7ff f9db 	bl	80124d4 <write_submessage_acknack.isra.0>
 801311e:	e76f      	b.n	8013000 <wait_session_status+0x34>
 8013120:	4631      	mov	r1, r6
 8013122:	f104 0008 	add.w	r0, r4, #8
 8013126:	f001 f823 	bl	8014170 <uxr_get_input_best_effort_stream>
 801312a:	2800      	cmp	r0, #0
 801312c:	f43f af68 	beq.w	8013000 <wait_session_status+0x34>
 8013130:	9902      	ldr	r1, [sp, #8]
 8013132:	f006 fe5b 	bl	8019dec <uxr_receive_best_effort_message>
 8013136:	2800      	cmp	r0, #0
 8013138:	f43f af62 	beq.w	8013000 <wait_session_status+0x34>
 801313c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013140:	a90c      	add	r1, sp, #48	@ 0x30
 8013142:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013144:	4620      	mov	r0, r4
 8013146:	f7ff fb49 	bl	80127dc <read_submessage_list>
 801314a:	e759      	b.n	8013000 <wait_session_status+0x34>
 801314c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801314e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013152:	47a0      	blx	r4
 8013154:	2001      	movs	r0, #1
 8013156:	b01d      	add	sp, #116	@ 0x74
 8013158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013160:	a90c      	add	r1, sp, #48	@ 0x30
 8013162:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013164:	4620      	mov	r0, r4
 8013166:	f7ff fb39 	bl	80127dc <read_submessage_list>
 801316a:	e7bc      	b.n	80130e6 <wait_session_status+0x11a>

0801316c <uxr_delete_session_retries>:
 801316c:	b530      	push	{r4, r5, lr}
 801316e:	b08f      	sub	sp, #60	@ 0x3c
 8013170:	4604      	mov	r4, r0
 8013172:	460d      	mov	r5, r1
 8013174:	f000 fa34 	bl	80135e0 <uxr_session_header_offset>
 8013178:	2300      	movs	r3, #0
 801317a:	2210      	movs	r2, #16
 801317c:	a902      	add	r1, sp, #8
 801317e:	9000      	str	r0, [sp, #0]
 8013180:	a806      	add	r0, sp, #24
 8013182:	f7fe fc03 	bl	801198c <ucdr_init_buffer_origin_offset>
 8013186:	a906      	add	r1, sp, #24
 8013188:	4620      	mov	r0, r4
 801318a:	f000 f979 	bl	8013480 <uxr_buffer_delete_session>
 801318e:	2200      	movs	r2, #0
 8013190:	9b06      	ldr	r3, [sp, #24]
 8013192:	4620      	mov	r0, r4
 8013194:	4611      	mov	r1, r2
 8013196:	f000 f9cf 	bl	8013538 <uxr_stamp_session_header>
 801319a:	a806      	add	r0, sp, #24
 801319c:	f7fe fc36 	bl	8011a0c <ucdr_buffer_length>
 80131a0:	462b      	mov	r3, r5
 80131a2:	4602      	mov	r2, r0
 80131a4:	a902      	add	r1, sp, #8
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7ff ff10 	bl	8012fcc <wait_session_status>
 80131ac:	b118      	cbz	r0, 80131b6 <uxr_delete_session_retries+0x4a>
 80131ae:	7960      	ldrb	r0, [r4, #5]
 80131b0:	fab0 f080 	clz	r0, r0
 80131b4:	0940      	lsrs	r0, r0, #5
 80131b6:	b00f      	add	sp, #60	@ 0x3c
 80131b8:	bd30      	pop	{r4, r5, pc}
 80131ba:	bf00      	nop

080131bc <uxr_create_session>:
 80131bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c0:	f100 0b08 	add.w	fp, r0, #8
 80131c4:	4604      	mov	r4, r0
 80131c6:	b0ab      	sub	sp, #172	@ 0xac
 80131c8:	4658      	mov	r0, fp
 80131ca:	465e      	mov	r6, fp
 80131cc:	f000 ff22 	bl	8014014 <uxr_reset_stream_storage>
 80131d0:	4620      	mov	r0, r4
 80131d2:	f000 fa05 	bl	80135e0 <uxr_session_header_offset>
 80131d6:	2300      	movs	r3, #0
 80131d8:	221c      	movs	r2, #28
 80131da:	a90b      	add	r1, sp, #44	@ 0x2c
 80131dc:	9000      	str	r0, [sp, #0]
 80131de:	a812      	add	r0, sp, #72	@ 0x48
 80131e0:	f7fe fbd4 	bl	801198c <ucdr_init_buffer_origin_offset>
 80131e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80131e6:	a912      	add	r1, sp, #72	@ 0x48
 80131e8:	4620      	mov	r0, r4
 80131ea:	8a1a      	ldrh	r2, [r3, #16]
 80131ec:	3a04      	subs	r2, #4
 80131ee:	b292      	uxth	r2, r2
 80131f0:	f000 f91c 	bl	801342c <uxr_buffer_create_session>
 80131f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80131f6:	4620      	mov	r0, r4
 80131f8:	f000 f98a 	bl	8013510 <uxr_stamp_create_session_header>
 80131fc:	a812      	add	r0, sp, #72	@ 0x48
 80131fe:	f7fe fc05 	bl	8011a0c <ucdr_buffer_length>
 8013202:	23ff      	movs	r3, #255	@ 0xff
 8013204:	4681      	mov	r9, r0
 8013206:	7163      	strb	r3, [r4, #5]
 8013208:	230a      	movs	r3, #10
 801320a:	9303      	str	r3, [sp, #12]
 801320c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801320e:	464a      	mov	r2, r9
 8013210:	a90b      	add	r1, sp, #44	@ 0x2c
 8013212:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013216:	47a8      	blx	r5
 8013218:	f001 f81c 	bl	8014254 <uxr_millis>
 801321c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013220:	4605      	mov	r5, r0
 8013222:	e009      	b.n	8013238 <uxr_create_session+0x7c>
 8013224:	f001 f816 	bl	8014254 <uxr_millis>
 8013228:	1b40      	subs	r0, r0, r5
 801322a:	7962      	ldrb	r2, [r4, #5]
 801322c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013230:	2b00      	cmp	r3, #0
 8013232:	dd38      	ble.n	80132a6 <uxr_create_session+0xea>
 8013234:	2aff      	cmp	r2, #255	@ 0xff
 8013236:	d13c      	bne.n	80132b2 <uxr_create_session+0xf6>
 8013238:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801323a:	a907      	add	r1, sp, #28
 801323c:	6897      	ldr	r7, [r2, #8]
 801323e:	6810      	ldr	r0, [r2, #0]
 8013240:	aa08      	add	r2, sp, #32
 8013242:	47b8      	blx	r7
 8013244:	2800      	cmp	r0, #0
 8013246:	d0ed      	beq.n	8013224 <uxr_create_session+0x68>
 8013248:	a81a      	add	r0, sp, #104	@ 0x68
 801324a:	2700      	movs	r7, #0
 801324c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013250:	f7fe fbae 	bl	80119b0 <ucdr_init_buffer>
 8013254:	f10d 031a 	add.w	r3, sp, #26
 8013258:	aa06      	add	r2, sp, #24
 801325a:	a91a      	add	r1, sp, #104	@ 0x68
 801325c:	4620      	mov	r0, r4
 801325e:	f88d 7018 	strb.w	r7, [sp, #24]
 8013262:	f000 f97d 	bl	8013560 <uxr_read_session_header>
 8013266:	2800      	cmp	r0, #0
 8013268:	d0dc      	beq.n	8013224 <uxr_create_session+0x68>
 801326a:	4639      	mov	r1, r7
 801326c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013270:	f000 fe9a 	bl	8013fa8 <uxr_stream_id_from_raw>
 8013274:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013278:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801327c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8013280:	2f01      	cmp	r7, #1
 8013282:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013286:	d053      	beq.n	8013330 <uxr_create_session+0x174>
 8013288:	2f02      	cmp	r7, #2
 801328a:	d018      	beq.n	80132be <uxr_create_session+0x102>
 801328c:	2f00      	cmp	r7, #0
 801328e:	d1c9      	bne.n	8013224 <uxr_create_session+0x68>
 8013290:	4639      	mov	r1, r7
 8013292:	4638      	mov	r0, r7
 8013294:	f000 fe88 	bl	8013fa8 <uxr_stream_id_from_raw>
 8013298:	a91a      	add	r1, sp, #104	@ 0x68
 801329a:	4602      	mov	r2, r0
 801329c:	900a      	str	r0, [sp, #40]	@ 0x28
 801329e:	4620      	mov	r0, r4
 80132a0:	f7ff fa9c 	bl	80127dc <read_submessage_list>
 80132a4:	e7be      	b.n	8013224 <uxr_create_session+0x68>
 80132a6:	9b03      	ldr	r3, [sp, #12]
 80132a8:	3b01      	subs	r3, #1
 80132aa:	9303      	str	r3, [sp, #12]
 80132ac:	d001      	beq.n	80132b2 <uxr_create_session+0xf6>
 80132ae:	2aff      	cmp	r2, #255	@ 0xff
 80132b0:	d0ac      	beq.n	801320c <uxr_create_session+0x50>
 80132b2:	2a00      	cmp	r2, #0
 80132b4:	d051      	beq.n	801335a <uxr_create_session+0x19e>
 80132b6:	2000      	movs	r0, #0
 80132b8:	b02b      	add	sp, #172	@ 0xac
 80132ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132be:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80132c2:	4641      	mov	r1, r8
 80132c4:	4630      	mov	r0, r6
 80132c6:	9304      	str	r3, [sp, #16]
 80132c8:	f000 ff5c 	bl	8014184 <uxr_get_input_reliable_stream>
 80132cc:	4682      	mov	sl, r0
 80132ce:	b348      	cbz	r0, 8013324 <uxr_create_session+0x168>
 80132d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80132d2:	a81a      	add	r0, sp, #104	@ 0x68
 80132d4:	9205      	str	r2, [sp, #20]
 80132d6:	f7fe fb9d 	bl	8011a14 <ucdr_buffer_remaining>
 80132da:	4603      	mov	r3, r0
 80132dc:	f10d 0019 	add.w	r0, sp, #25
 80132e0:	9a05      	ldr	r2, [sp, #20]
 80132e2:	4659      	mov	r1, fp
 80132e4:	9000      	str	r0, [sp, #0]
 80132e6:	4650      	mov	r0, sl
 80132e8:	f006 fe0a 	bl	8019f00 <uxr_receive_reliable_message>
 80132ec:	b1d0      	cbz	r0, 8013324 <uxr_create_session+0x168>
 80132ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d038      	beq.n	8013368 <uxr_create_session+0x1ac>
 80132f6:	9f04      	ldr	r7, [sp, #16]
 80132f8:	e00a      	b.n	8013310 <uxr_create_session+0x154>
 80132fa:	f04f 0302 	mov.w	r3, #2
 80132fe:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8013302:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8013306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801330a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801330c:	f7ff fa66 	bl	80127dc <read_submessage_list>
 8013310:	a922      	add	r1, sp, #136	@ 0x88
 8013312:	2204      	movs	r2, #4
 8013314:	4650      	mov	r0, sl
 8013316:	f006 fe75 	bl	801a004 <uxr_next_input_reliable_buffer_available>
 801331a:	4603      	mov	r3, r0
 801331c:	a922      	add	r1, sp, #136	@ 0x88
 801331e:	4620      	mov	r0, r4
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1ea      	bne.n	80132fa <uxr_create_session+0x13e>
 8013324:	4642      	mov	r2, r8
 8013326:	9904      	ldr	r1, [sp, #16]
 8013328:	4620      	mov	r0, r4
 801332a:	f7ff f8d3 	bl	80124d4 <write_submessage_acknack.isra.0>
 801332e:	e779      	b.n	8013224 <uxr_create_session+0x68>
 8013330:	4641      	mov	r1, r8
 8013332:	4630      	mov	r0, r6
 8013334:	f000 ff1c 	bl	8014170 <uxr_get_input_best_effort_stream>
 8013338:	2800      	cmp	r0, #0
 801333a:	f43f af73 	beq.w	8013224 <uxr_create_session+0x68>
 801333e:	4659      	mov	r1, fp
 8013340:	f006 fd54 	bl	8019dec <uxr_receive_best_effort_message>
 8013344:	2800      	cmp	r0, #0
 8013346:	f43f af6d 	beq.w	8013224 <uxr_create_session+0x68>
 801334a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801334e:	a91a      	add	r1, sp, #104	@ 0x68
 8013350:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013352:	4620      	mov	r0, r4
 8013354:	f7ff fa42 	bl	80127dc <read_submessage_list>
 8013358:	e764      	b.n	8013224 <uxr_create_session+0x68>
 801335a:	4630      	mov	r0, r6
 801335c:	f000 fe5a 	bl	8014014 <uxr_reset_stream_storage>
 8013360:	2001      	movs	r0, #1
 8013362:	b02b      	add	sp, #172	@ 0xac
 8013364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013368:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801336c:	a91a      	add	r1, sp, #104	@ 0x68
 801336e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013370:	4620      	mov	r0, r4
 8013372:	f7ff fa33 	bl	80127dc <read_submessage_list>
 8013376:	e7be      	b.n	80132f6 <uxr_create_session+0x13a>

08013378 <uxr_prepare_stream_to_write_submessage>:
 8013378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801337c:	b082      	sub	sp, #8
 801337e:	4604      	mov	r4, r0
 8013380:	4610      	mov	r0, r2
 8013382:	4615      	mov	r5, r2
 8013384:	461e      	mov	r6, r3
 8013386:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801338a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801338e:	f105 0904 	add.w	r9, r5, #4
 8013392:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8013396:	9101      	str	r1, [sp, #4]
 8013398:	f000 ff56 	bl	8014248 <uxr_submessage_padding>
 801339c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80133a0:	4481      	add	r9, r0
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d01d      	beq.n	80133e2 <uxr_prepare_stream_to_write_submessage+0x6a>
 80133a6:	2b02      	cmp	r3, #2
 80133a8:	d116      	bne.n	80133d8 <uxr_prepare_stream_to_write_submessage+0x60>
 80133aa:	f104 0008 	add.w	r0, r4, #8
 80133ae:	4651      	mov	r1, sl
 80133b0:	f000 fed2 	bl	8014158 <uxr_get_output_reliable_stream>
 80133b4:	4604      	mov	r4, r0
 80133b6:	b158      	cbz	r0, 80133d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80133b8:	4649      	mov	r1, r9
 80133ba:	4632      	mov	r2, r6
 80133bc:	f006 ffe6 	bl	801a38c <uxr_prepare_reliable_buffer_to_write>
 80133c0:	4604      	mov	r4, r0
 80133c2:	b12c      	cbz	r4, 80133d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80133c4:	4643      	mov	r3, r8
 80133c6:	b2aa      	uxth	r2, r5
 80133c8:	4639      	mov	r1, r7
 80133ca:	4630      	mov	r0, r6
 80133cc:	f000 fefc 	bl	80141c8 <uxr_buffer_submessage_header>
 80133d0:	4620      	mov	r0, r4
 80133d2:	b002      	add	sp, #8
 80133d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133d8:	2400      	movs	r4, #0
 80133da:	4620      	mov	r0, r4
 80133dc:	b002      	add	sp, #8
 80133de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133e2:	f104 0008 	add.w	r0, r4, #8
 80133e6:	4651      	mov	r1, sl
 80133e8:	f000 feae 	bl	8014148 <uxr_get_output_best_effort_stream>
 80133ec:	4604      	mov	r4, r0
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d0ee      	beq.n	80133d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80133f2:	4649      	mov	r1, r9
 80133f4:	4632      	mov	r2, r6
 80133f6:	f006 fef5 	bl	801a1e4 <uxr_prepare_best_effort_buffer_to_write>
 80133fa:	4604      	mov	r4, r0
 80133fc:	e7e1      	b.n	80133c2 <uxr_prepare_stream_to_write_submessage+0x4a>
 80133fe:	bf00      	nop

08013400 <uxr_init_session_info>:
 8013400:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8013404:	23ff      	movs	r3, #255	@ 0xff
 8013406:	7102      	strb	r2, [r0, #4]
 8013408:	f880 c001 	strb.w	ip, [r0, #1]
 801340c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013410:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013414:	7001      	strb	r1, [r0, #0]
 8013416:	f880 c002 	strb.w	ip, [r0, #2]
 801341a:	7143      	strb	r3, [r0, #5]
 801341c:	70c2      	strb	r2, [r0, #3]
 801341e:	b500      	push	{lr}
 8013420:	f04f 0e09 	mov.w	lr, #9
 8013424:	f8a0 e006 	strh.w	lr, [r0, #6]
 8013428:	f85d fb04 	ldr.w	pc, [sp], #4

0801342c <uxr_buffer_create_session>:
 801342c:	b530      	push	{r4, r5, lr}
 801342e:	2300      	movs	r3, #0
 8013430:	b089      	sub	sp, #36	@ 0x24
 8013432:	4d12      	ldr	r5, [pc, #72]	@ (801347c <uxr_buffer_create_session+0x50>)
 8013434:	460c      	mov	r4, r1
 8013436:	9307      	str	r3, [sp, #28]
 8013438:	4619      	mov	r1, r3
 801343a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801343e:	2201      	movs	r2, #1
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	80c2      	strh	r2, [r0, #6]
 8013444:	f88d 2004 	strb.w	r2, [sp, #4]
 8013448:	682a      	ldr	r2, [r5, #0]
 801344a:	9303      	str	r3, [sp, #12]
 801344c:	9200      	str	r2, [sp, #0]
 801344e:	88aa      	ldrh	r2, [r5, #4]
 8013450:	9306      	str	r3, [sp, #24]
 8013452:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013456:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801345a:	9202      	str	r2, [sp, #8]
 801345c:	7802      	ldrb	r2, [r0, #0]
 801345e:	4620      	mov	r0, r4
 8013460:	f88d 200c 	strb.w	r2, [sp, #12]
 8013464:	2210      	movs	r2, #16
 8013466:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801346a:	f000 fead 	bl	80141c8 <uxr_buffer_submessage_header>
 801346e:	4669      	mov	r1, sp
 8013470:	4620      	mov	r0, r4
 8013472:	f001 fdff 	bl	8015074 <uxr_serialize_CREATE_CLIENT_Payload>
 8013476:	b009      	add	sp, #36	@ 0x24
 8013478:	bd30      	pop	{r4, r5, pc}
 801347a:	bf00      	nop
 801347c:	0801c92c 	.word	0x0801c92c

08013480 <uxr_buffer_delete_session>:
 8013480:	4a0c      	ldr	r2, [pc, #48]	@ (80134b4 <uxr_buffer_delete_session+0x34>)
 8013482:	2302      	movs	r3, #2
 8013484:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8013488:	b510      	push	{r4, lr}
 801348a:	460c      	mov	r4, r1
 801348c:	b082      	sub	sp, #8
 801348e:	8911      	ldrh	r1, [r2, #8]
 8013490:	2204      	movs	r2, #4
 8013492:	80c3      	strh	r3, [r0, #6]
 8013494:	2300      	movs	r3, #0
 8013496:	f8ad 1006 	strh.w	r1, [sp, #6]
 801349a:	4620      	mov	r0, r4
 801349c:	2103      	movs	r1, #3
 801349e:	f8ad c004 	strh.w	ip, [sp, #4]
 80134a2:	f000 fe91 	bl	80141c8 <uxr_buffer_submessage_header>
 80134a6:	a901      	add	r1, sp, #4
 80134a8:	4620      	mov	r0, r4
 80134aa:	f001 fea1 	bl	80151f0 <uxr_serialize_DELETE_Payload>
 80134ae:	b002      	add	sp, #8
 80134b0:	bd10      	pop	{r4, pc}
 80134b2:	bf00      	nop
 80134b4:	0801c92c 	.word	0x0801c92c

080134b8 <uxr_read_create_session_status>:
 80134b8:	b510      	push	{r4, lr}
 80134ba:	460b      	mov	r3, r1
 80134bc:	b088      	sub	sp, #32
 80134be:	4604      	mov	r4, r0
 80134c0:	a901      	add	r1, sp, #4
 80134c2:	4618      	mov	r0, r3
 80134c4:	f001 fea4 	bl	8015210 <uxr_deserialize_STATUS_AGENT_Payload>
 80134c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80134cc:	7163      	strb	r3, [r4, #5]
 80134ce:	b008      	add	sp, #32
 80134d0:	bd10      	pop	{r4, pc}
 80134d2:	bf00      	nop

080134d4 <uxr_read_delete_session_status>:
 80134d4:	b510      	push	{r4, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	4604      	mov	r4, r0
 80134da:	4608      	mov	r0, r1
 80134dc:	a902      	add	r1, sp, #8
 80134de:	f001 fec7 	bl	8015270 <uxr_deserialize_STATUS_Payload>
 80134e2:	88e3      	ldrh	r3, [r4, #6]
 80134e4:	2b02      	cmp	r3, #2
 80134e6:	d001      	beq.n	80134ec <uxr_read_delete_session_status+0x18>
 80134e8:	b004      	add	sp, #16
 80134ea:	bd10      	pop	{r4, pc}
 80134ec:	f10d 000a 	add.w	r0, sp, #10
 80134f0:	f7fe fd7c 	bl	8011fec <uxr_object_id_from_raw>
 80134f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80134f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80134fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013500:	b29b      	uxth	r3, r3
 8013502:	2b02      	cmp	r3, #2
 8013504:	d1f0      	bne.n	80134e8 <uxr_read_delete_session_status+0x14>
 8013506:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801350a:	7163      	strb	r3, [r4, #5]
 801350c:	e7ec      	b.n	80134e8 <uxr_read_delete_session_status+0x14>
 801350e:	bf00      	nop

08013510 <uxr_stamp_create_session_header>:
 8013510:	b510      	push	{r4, lr}
 8013512:	2208      	movs	r2, #8
 8013514:	b08a      	sub	sp, #40	@ 0x28
 8013516:	4604      	mov	r4, r0
 8013518:	eb0d 0002 	add.w	r0, sp, r2
 801351c:	f7fe fa48 	bl	80119b0 <ucdr_init_buffer>
 8013520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013524:	2300      	movs	r3, #0
 8013526:	a802      	add	r0, sp, #8
 8013528:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801352c:	9400      	str	r4, [sp, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	f001 f846 	bl	80145c0 <uxr_serialize_message_header>
 8013534:	b00a      	add	sp, #40	@ 0x28
 8013536:	bd10      	pop	{r4, pc}

08013538 <uxr_stamp_session_header>:
 8013538:	b530      	push	{r4, r5, lr}
 801353a:	b08d      	sub	sp, #52	@ 0x34
 801353c:	4604      	mov	r4, r0
 801353e:	460d      	mov	r5, r1
 8013540:	4619      	mov	r1, r3
 8013542:	a804      	add	r0, sp, #16
 8013544:	9203      	str	r2, [sp, #12]
 8013546:	2208      	movs	r2, #8
 8013548:	f7fe fa32 	bl	80119b0 <ucdr_init_buffer>
 801354c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013550:	9b03      	ldr	r3, [sp, #12]
 8013552:	462a      	mov	r2, r5
 8013554:	a804      	add	r0, sp, #16
 8013556:	9400      	str	r4, [sp, #0]
 8013558:	f001 f832 	bl	80145c0 <uxr_serialize_message_header>
 801355c:	b00d      	add	sp, #52	@ 0x34
 801355e:	bd30      	pop	{r4, r5, pc}

08013560 <uxr_read_session_header>:
 8013560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013564:	4607      	mov	r7, r0
 8013566:	b084      	sub	sp, #16
 8013568:	4608      	mov	r0, r1
 801356a:	460c      	mov	r4, r1
 801356c:	4615      	mov	r5, r2
 801356e:	461e      	mov	r6, r3
 8013570:	f7fe fa50 	bl	8011a14 <ucdr_buffer_remaining>
 8013574:	2808      	cmp	r0, #8
 8013576:	d803      	bhi.n	8013580 <uxr_read_session_header+0x20>
 8013578:	2000      	movs	r0, #0
 801357a:	b004      	add	sp, #16
 801357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013580:	f10d 080c 	add.w	r8, sp, #12
 8013584:	4633      	mov	r3, r6
 8013586:	462a      	mov	r2, r5
 8013588:	4620      	mov	r0, r4
 801358a:	f10d 010b 	add.w	r1, sp, #11
 801358e:	f8cd 8000 	str.w	r8, [sp]
 8013592:	f001 f833 	bl	80145fc <uxr_deserialize_message_header>
 8013596:	783a      	ldrb	r2, [r7, #0]
 8013598:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801359c:	4293      	cmp	r3, r2
 801359e:	d1eb      	bne.n	8013578 <uxr_read_session_header+0x18>
 80135a0:	061b      	lsls	r3, r3, #24
 80135a2:	d41b      	bmi.n	80135dc <uxr_read_session_header+0x7c>
 80135a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80135a8:	787b      	ldrb	r3, [r7, #1]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d003      	beq.n	80135b6 <uxr_read_session_header+0x56>
 80135ae:	2001      	movs	r0, #1
 80135b0:	f080 0001 	eor.w	r0, r0, #1
 80135b4:	e7e1      	b.n	801357a <uxr_read_session_header+0x1a>
 80135b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80135ba:	1cb8      	adds	r0, r7, #2
 80135bc:	78bb      	ldrb	r3, [r7, #2]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d1f5      	bne.n	80135ae <uxr_read_session_header+0x4e>
 80135c2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80135c6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d1ef      	bne.n	80135ae <uxr_read_session_header+0x4e>
 80135ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80135d2:	7843      	ldrb	r3, [r0, #1]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d1ea      	bne.n	80135ae <uxr_read_session_header+0x4e>
 80135d8:	2000      	movs	r0, #0
 80135da:	e7e9      	b.n	80135b0 <uxr_read_session_header+0x50>
 80135dc:	2001      	movs	r0, #1
 80135de:	e7cc      	b.n	801357a <uxr_read_session_header+0x1a>

080135e0 <uxr_session_header_offset>:
 80135e0:	f990 3000 	ldrsb.w	r3, [r0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	bfac      	ite	ge
 80135e8:	2008      	movge	r0, #8
 80135ea:	2004      	movlt	r0, #4
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop

080135f0 <uxr_init_base_object_request>:
 80135f0:	b510      	push	{r4, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80135f8:	9101      	str	r1, [sp, #4]
 80135fa:	88c3      	ldrh	r3, [r0, #6]
 80135fc:	f1a3 010a 	sub.w	r1, r3, #10
 8013600:	b289      	uxth	r1, r1
 8013602:	42a1      	cmp	r1, r4
 8013604:	d80f      	bhi.n	8013626 <uxr_init_base_object_request+0x36>
 8013606:	3301      	adds	r3, #1
 8013608:	b29c      	uxth	r4, r3
 801360a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801360e:	b2db      	uxtb	r3, r3
 8013610:	80c4      	strh	r4, [r0, #6]
 8013612:	1c91      	adds	r1, r2, #2
 8013614:	9801      	ldr	r0, [sp, #4]
 8013616:	f882 c000 	strb.w	ip, [r2]
 801361a:	7053      	strb	r3, [r2, #1]
 801361c:	f7fe fcfa 	bl	8012014 <uxr_object_id_to_raw>
 8013620:	4620      	mov	r0, r4
 8013622:	b002      	add	sp, #8
 8013624:	bd10      	pop	{r4, pc}
 8013626:	230a      	movs	r3, #10
 8013628:	f04f 0c00 	mov.w	ip, #0
 801362c:	461c      	mov	r4, r3
 801362e:	e7ef      	b.n	8013610 <uxr_init_base_object_request+0x20>

08013630 <uxr_parse_base_object_request>:
 8013630:	b570      	push	{r4, r5, r6, lr}
 8013632:	4604      	mov	r4, r0
 8013634:	3002      	adds	r0, #2
 8013636:	460d      	mov	r5, r1
 8013638:	4616      	mov	r6, r2
 801363a:	f7fe fcd7 	bl	8011fec <uxr_object_id_from_raw>
 801363e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013642:	8028      	strh	r0, [r5, #0]
 8013644:	806b      	strh	r3, [r5, #2]
 8013646:	7822      	ldrb	r2, [r4, #0]
 8013648:	7863      	ldrb	r3, [r4, #1]
 801364a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801364e:	8033      	strh	r3, [r6, #0]
 8013650:	bd70      	pop	{r4, r5, r6, pc}
 8013652:	bf00      	nop

08013654 <uxr_init_framing_io>:
 8013654:	2300      	movs	r3, #0
 8013656:	7041      	strb	r1, [r0, #1]
 8013658:	7003      	strb	r3, [r0, #0]
 801365a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop

08013660 <uxr_write_framed_msg>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	4617      	mov	r7, r2
 8013666:	7842      	ldrb	r2, [r0, #1]
 8013668:	460e      	mov	r6, r1
 801366a:	b083      	sub	sp, #12
 801366c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013670:	469b      	mov	fp, r3
 8013672:	237e      	movs	r3, #126	@ 0x7e
 8013674:	4604      	mov	r4, r0
 8013676:	2901      	cmp	r1, #1
 8013678:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801367c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013680:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013684:	f240 8115 	bls.w	80138b2 <uxr_write_framed_msg+0x252>
 8013688:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801368c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013690:	2202      	movs	r2, #2
 8013692:	2901      	cmp	r1, #1
 8013694:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013698:	d952      	bls.n	8013740 <uxr_write_framed_msg+0xe0>
 801369a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801369c:	2103      	movs	r1, #3
 801369e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80136a2:	b2dd      	uxtb	r5, r3
 80136a4:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80136a8:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80136ac:	2a01      	cmp	r2, #1
 80136ae:	d95c      	bls.n	801376a <uxr_write_framed_msg+0x10a>
 80136b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136b2:	1862      	adds	r2, r4, r1
 80136b4:	3101      	adds	r1, #1
 80136b6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80136ba:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80136be:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80136c2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80136c6:	2a01      	cmp	r2, #1
 80136c8:	d961      	bls.n	801378e <uxr_write_framed_msg+0x12e>
 80136ca:	1c4a      	adds	r2, r1, #1
 80136cc:	4421      	add	r1, r4
 80136ce:	b2d2      	uxtb	r2, r2
 80136d0:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80136d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d06a      	beq.n	80137b2 <uxr_write_framed_msg+0x152>
 80136dc:	f04f 0800 	mov.w	r8, #0
 80136e0:	46c1      	mov	r9, r8
 80136e2:	e016      	b.n	8013712 <uxr_write_framed_msg+0xb2>
 80136e4:	2a29      	cmp	r2, #41	@ 0x29
 80136e6:	d868      	bhi.n	80137ba <uxr_write_framed_msg+0x15a>
 80136e8:	18a0      	adds	r0, r4, r2
 80136ea:	3201      	adds	r2, #1
 80136ec:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80136f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80136f4:	ea88 0101 	eor.w	r1, r8, r1
 80136f8:	4b7d      	ldr	r3, [pc, #500]	@ (80138f0 <uxr_write_framed_msg+0x290>)
 80136fa:	f109 0901 	add.w	r9, r9, #1
 80136fe:	b2c9      	uxtb	r1, r1
 8013700:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8013704:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8013708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801370a:	454b      	cmp	r3, r9
 801370c:	d969      	bls.n	80137e2 <uxr_write_framed_msg+0x182>
 801370e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013712:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8013716:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801371a:	2801      	cmp	r0, #1
 801371c:	d8e2      	bhi.n	80136e4 <uxr_write_framed_msg+0x84>
 801371e:	1c50      	adds	r0, r2, #1
 8013720:	b2c0      	uxtb	r0, r0
 8013722:	2829      	cmp	r0, #41	@ 0x29
 8013724:	d849      	bhi.n	80137ba <uxr_write_framed_msg+0x15a>
 8013726:	18a0      	adds	r0, r4, r2
 8013728:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801372c:	3202      	adds	r2, #2
 801372e:	f081 0520 	eor.w	r5, r1, #32
 8013732:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013736:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801373a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801373e:	e7d9      	b.n	80136f4 <uxr_write_framed_msg+0x94>
 8013740:	2104      	movs	r1, #4
 8013742:	f04f 0c03 	mov.w	ip, #3
 8013746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013748:	4422      	add	r2, r4
 801374a:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801374e:	44a4      	add	ip, r4
 8013750:	b2dd      	uxtb	r5, r3
 8013752:	f080 0020 	eor.w	r0, r0, #32
 8013756:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801375a:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801375e:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013762:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013766:	2a01      	cmp	r2, #1
 8013768:	d8a2      	bhi.n	80136b0 <uxr_write_framed_msg+0x50>
 801376a:	1862      	adds	r2, r4, r1
 801376c:	207d      	movs	r0, #125	@ 0x7d
 801376e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013770:	f085 0520 	eor.w	r5, r5, #32
 8013774:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8013778:	3102      	adds	r1, #2
 801377a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801377e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8013782:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013786:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801378a:	2a01      	cmp	r2, #1
 801378c:	d89d      	bhi.n	80136ca <uxr_write_framed_msg+0x6a>
 801378e:	1c4d      	adds	r5, r1, #1
 8013790:	1c8a      	adds	r2, r1, #2
 8013792:	f080 0020 	eor.w	r0, r0, #32
 8013796:	4421      	add	r1, r4
 8013798:	fa54 f585 	uxtab	r5, r4, r5
 801379c:	b2d2      	uxtb	r2, r2
 801379e:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80137a2:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80137a6:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80137aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d194      	bne.n	80136dc <uxr_write_framed_msg+0x7c>
 80137b2:	4619      	mov	r1, r3
 80137b4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80137b8:	e019      	b.n	80137ee <uxr_write_framed_msg+0x18e>
 80137ba:	2500      	movs	r5, #0
 80137bc:	e000      	b.n	80137c0 <uxr_write_framed_msg+0x160>
 80137be:	b160      	cbz	r0, 80137da <uxr_write_framed_msg+0x17a>
 80137c0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80137c4:	1b52      	subs	r2, r2, r5
 80137c6:	4653      	mov	r3, sl
 80137c8:	4638      	mov	r0, r7
 80137ca:	4421      	add	r1, r4
 80137cc:	47b0      	blx	r6
 80137ce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80137d2:	4405      	add	r5, r0
 80137d4:	4295      	cmp	r5, r2
 80137d6:	d3f2      	bcc.n	80137be <uxr_write_framed_msg+0x15e>
 80137d8:	d066      	beq.n	80138a8 <uxr_write_framed_msg+0x248>
 80137da:	2000      	movs	r0, #0
 80137dc:	b003      	add	sp, #12
 80137de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e2:	fa5f f188 	uxtb.w	r1, r8
 80137e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80137ea:	f8ad 8004 	strh.w	r8, [sp, #4]
 80137ee:	f04f 0900 	mov.w	r9, #0
 80137f2:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 80137f6:	46c8      	mov	r8, r9
 80137f8:	e013      	b.n	8013822 <uxr_write_framed_msg+0x1c2>
 80137fa:	2a29      	cmp	r2, #41	@ 0x29
 80137fc:	d824      	bhi.n	8013848 <uxr_write_framed_msg+0x1e8>
 80137fe:	18a3      	adds	r3, r4, r2
 8013800:	3201      	adds	r2, #1
 8013802:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8013806:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801380a:	f109 0901 	add.w	r9, r9, #1
 801380e:	f1b9 0f02 	cmp.w	r9, #2
 8013812:	d02d      	beq.n	8013870 <uxr_write_framed_msg+0x210>
 8013814:	f109 0308 	add.w	r3, r9, #8
 8013818:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801381c:	446b      	add	r3, sp
 801381e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8013822:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8013826:	2b01      	cmp	r3, #1
 8013828:	d8e7      	bhi.n	80137fa <uxr_write_framed_msg+0x19a>
 801382a:	1c53      	adds	r3, r2, #1
 801382c:	b2db      	uxtb	r3, r3
 801382e:	2b29      	cmp	r3, #41	@ 0x29
 8013830:	d80a      	bhi.n	8013848 <uxr_write_framed_msg+0x1e8>
 8013832:	18a3      	adds	r3, r4, r2
 8013834:	f081 0120 	eor.w	r1, r1, #32
 8013838:	3202      	adds	r2, #2
 801383a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801383e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8013842:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013846:	e7e0      	b.n	801380a <uxr_write_framed_msg+0x1aa>
 8013848:	2500      	movs	r5, #0
 801384a:	e001      	b.n	8013850 <uxr_write_framed_msg+0x1f0>
 801384c:	2800      	cmp	r0, #0
 801384e:	d0c4      	beq.n	80137da <uxr_write_framed_msg+0x17a>
 8013850:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013854:	1b52      	subs	r2, r2, r5
 8013856:	4653      	mov	r3, sl
 8013858:	4638      	mov	r0, r7
 801385a:	4421      	add	r1, r4
 801385c:	47b0      	blx	r6
 801385e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013862:	4405      	add	r5, r0
 8013864:	4295      	cmp	r5, r2
 8013866:	d3f1      	bcc.n	801384c <uxr_write_framed_msg+0x1ec>
 8013868:	d1b7      	bne.n	80137da <uxr_write_framed_msg+0x17a>
 801386a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801386e:	e7d1      	b.n	8013814 <uxr_write_framed_msg+0x1b4>
 8013870:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013874:	b19a      	cbz	r2, 801389e <uxr_write_framed_msg+0x23e>
 8013876:	2500      	movs	r5, #0
 8013878:	e001      	b.n	801387e <uxr_write_framed_msg+0x21e>
 801387a:	2800      	cmp	r0, #0
 801387c:	d0ad      	beq.n	80137da <uxr_write_framed_msg+0x17a>
 801387e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013882:	1b52      	subs	r2, r2, r5
 8013884:	4653      	mov	r3, sl
 8013886:	4638      	mov	r0, r7
 8013888:	4421      	add	r1, r4
 801388a:	47b0      	blx	r6
 801388c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013890:	4405      	add	r5, r0
 8013892:	4295      	cmp	r5, r2
 8013894:	d3f1      	bcc.n	801387a <uxr_write_framed_msg+0x21a>
 8013896:	d1a0      	bne.n	80137da <uxr_write_framed_msg+0x17a>
 8013898:	2300      	movs	r3, #0
 801389a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801389e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138a0:	b298      	uxth	r0, r3
 80138a2:	b003      	add	sp, #12
 80138a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a8:	f04f 0300 	mov.w	r3, #0
 80138ac:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80138b0:	e72a      	b.n	8013708 <uxr_write_framed_msg+0xa8>
 80138b2:	217d      	movs	r1, #125	@ 0x7d
 80138b4:	f082 0220 	eor.w	r2, r2, #32
 80138b8:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80138bc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80138c0:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80138c4:	2203      	movs	r2, #3
 80138c6:	2901      	cmp	r1, #1
 80138c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80138cc:	d803      	bhi.n	80138d6 <uxr_write_framed_msg+0x276>
 80138ce:	2105      	movs	r1, #5
 80138d0:	f04f 0c04 	mov.w	ip, #4
 80138d4:	e737      	b.n	8013746 <uxr_write_framed_msg+0xe6>
 80138d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138d8:	2104      	movs	r1, #4
 80138da:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80138de:	b2dd      	uxtb	r5, r3
 80138e0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80138e4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80138e8:	2a01      	cmp	r2, #1
 80138ea:	f63f aee1 	bhi.w	80136b0 <uxr_write_framed_msg+0x50>
 80138ee:	e73c      	b.n	801376a <uxr_write_framed_msg+0x10a>
 80138f0:	0801ccf8 	.word	0x0801ccf8

080138f4 <uxr_framing_read_transport>:
 80138f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f8:	4604      	mov	r4, r0
 80138fa:	b085      	sub	sp, #20
 80138fc:	4692      	mov	sl, r2
 80138fe:	4689      	mov	r9, r1
 8013900:	461d      	mov	r5, r3
 8013902:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8013904:	f000 fca6 	bl	8014254 <uxr_millis>
 8013908:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801390c:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8013910:	4680      	mov	r8, r0
 8013912:	42ba      	cmp	r2, r7
 8013914:	d05f      	beq.n	80139d6 <uxr_framing_read_transport+0xe2>
 8013916:	d817      	bhi.n	8013948 <uxr_framing_read_transport+0x54>
 8013918:	3f01      	subs	r7, #1
 801391a:	1aba      	subs	r2, r7, r2
 801391c:	2700      	movs	r7, #0
 801391e:	b2d2      	uxtb	r2, r2
 8013920:	42b2      	cmp	r2, r6
 8013922:	d81a      	bhi.n	801395a <uxr_framing_read_transport+0x66>
 8013924:	19d3      	adds	r3, r2, r7
 8013926:	42b3      	cmp	r3, r6
 8013928:	d852      	bhi.n	80139d0 <uxr_framing_read_transport+0xdc>
 801392a:	b9d2      	cbnz	r2, 8013962 <uxr_framing_read_transport+0x6e>
 801392c:	2600      	movs	r6, #0
 801392e:	f000 fc91 	bl	8014254 <uxr_millis>
 8013932:	682b      	ldr	r3, [r5, #0]
 8013934:	eba0 0008 	sub.w	r0, r0, r8
 8013938:	1a1b      	subs	r3, r3, r0
 801393a:	4630      	mov	r0, r6
 801393c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013940:	602b      	str	r3, [r5, #0]
 8013942:	b005      	add	sp, #20
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013948:	2f00      	cmp	r7, #0
 801394a:	d060      	beq.n	8013a0e <uxr_framing_read_transport+0x11a>
 801394c:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8013950:	3f01      	subs	r7, #1
 8013952:	b2d2      	uxtb	r2, r2
 8013954:	b2ff      	uxtb	r7, r7
 8013956:	42b2      	cmp	r2, r6
 8013958:	d9e4      	bls.n	8013924 <uxr_framing_read_transport+0x30>
 801395a:	b2f2      	uxtb	r2, r6
 801395c:	2700      	movs	r7, #0
 801395e:	2a00      	cmp	r2, #0
 8013960:	d0e4      	beq.n	801392c <uxr_framing_read_transport+0x38>
 8013962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013964:	4650      	mov	r0, sl
 8013966:	9203      	str	r2, [sp, #12]
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801396e:	682b      	ldr	r3, [r5, #0]
 8013970:	3102      	adds	r1, #2
 8013972:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8013a18 <uxr_framing_read_transport+0x124>
 8013976:	4421      	add	r1, r4
 8013978:	47c8      	blx	r9
 801397a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801397e:	4606      	mov	r6, r0
 8013980:	4403      	add	r3, r0
 8013982:	0859      	lsrs	r1, r3, #1
 8013984:	fbab 2101 	umull	r2, r1, fp, r1
 8013988:	222a      	movs	r2, #42	@ 0x2a
 801398a:	0889      	lsrs	r1, r1, #2
 801398c:	fb02 3111 	mls	r1, r2, r1, r3
 8013990:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8013994:	2800      	cmp	r0, #0
 8013996:	d0c9      	beq.n	801392c <uxr_framing_read_transport+0x38>
 8013998:	9a03      	ldr	r2, [sp, #12]
 801399a:	4290      	cmp	r0, r2
 801399c:	d1c7      	bne.n	801392e <uxr_framing_read_transport+0x3a>
 801399e:	2f00      	cmp	r7, #0
 80139a0:	d0c5      	beq.n	801392e <uxr_framing_read_transport+0x3a>
 80139a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139a4:	3102      	adds	r1, #2
 80139a6:	463a      	mov	r2, r7
 80139a8:	4650      	mov	r0, sl
 80139aa:	4421      	add	r1, r4
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	2300      	movs	r3, #0
 80139b0:	47c8      	blx	r9
 80139b2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80139b6:	4406      	add	r6, r0
 80139b8:	1813      	adds	r3, r2, r0
 80139ba:	085a      	lsrs	r2, r3, #1
 80139bc:	fbab 1b02 	umull	r1, fp, fp, r2
 80139c0:	222a      	movs	r2, #42	@ 0x2a
 80139c2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80139c6:	fb02 331b 	mls	r3, r2, fp, r3
 80139ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80139ce:	e7ae      	b.n	801392e <uxr_framing_read_transport+0x3a>
 80139d0:	1ab6      	subs	r6, r6, r2
 80139d2:	b2f7      	uxtb	r7, r6
 80139d4:	e7a9      	b.n	801392a <uxr_framing_read_transport+0x36>
 80139d6:	2300      	movs	r3, #0
 80139d8:	2e28      	cmp	r6, #40	@ 0x28
 80139da:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80139dc:	d9bd      	bls.n	801395a <uxr_framing_read_transport+0x66>
 80139de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139e0:	2229      	movs	r2, #41	@ 0x29
 80139e2:	1ca1      	adds	r1, r4, #2
 80139e4:	4650      	mov	r0, sl
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	47c8      	blx	r9
 80139ec:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80139f0:	4606      	mov	r6, r0
 80139f2:	212a      	movs	r1, #42	@ 0x2a
 80139f4:	4403      	add	r3, r0
 80139f6:	4808      	ldr	r0, [pc, #32]	@ (8013a18 <uxr_framing_read_transport+0x124>)
 80139f8:	085a      	lsrs	r2, r3, #1
 80139fa:	fba0 0202 	umull	r0, r2, r0, r2
 80139fe:	0892      	lsrs	r2, r2, #2
 8013a00:	fb01 3312 	mls	r3, r1, r2, r3
 8013a04:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013a08:	2e00      	cmp	r6, #0
 8013a0a:	d08f      	beq.n	801392c <uxr_framing_read_transport+0x38>
 8013a0c:	e78f      	b.n	801392e <uxr_framing_read_transport+0x3a>
 8013a0e:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8013a12:	b2d2      	uxtb	r2, r2
 8013a14:	e784      	b.n	8013920 <uxr_framing_read_transport+0x2c>
 8013a16:	bf00      	nop
 8013a18:	30c30c31 	.word	0x30c30c31

08013a1c <uxr_read_framed_msg>:
 8013a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a20:	461e      	mov	r6, r3
 8013a22:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013a26:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8013a2a:	b083      	sub	sp, #12
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	4688      	mov	r8, r1
 8013a30:	429d      	cmp	r5, r3
 8013a32:	4691      	mov	r9, r2
 8013a34:	f000 818c 	beq.w	8013d50 <uxr_read_framed_msg+0x334>
 8013a38:	7823      	ldrb	r3, [r4, #0]
 8013a3a:	4dc3      	ldr	r5, [pc, #780]	@ (8013d48 <uxr_read_framed_msg+0x32c>)
 8013a3c:	4fc3      	ldr	r7, [pc, #780]	@ (8013d4c <uxr_read_framed_msg+0x330>)
 8013a3e:	2b07      	cmp	r3, #7
 8013a40:	d8fd      	bhi.n	8013a3e <uxr_read_framed_msg+0x22>
 8013a42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013a46:	011c      	.short	0x011c
 8013a48:	00d900fb 	.word	0x00d900fb
 8013a4c:	008f00ba 	.word	0x008f00ba
 8013a50:	00320051 	.word	0x00320051
 8013a54:	0008      	.short	0x0008
 8013a56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013a5a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013a5e:	4299      	cmp	r1, r3
 8013a60:	f000 814d 	beq.w	8013cfe <uxr_read_framed_msg+0x2e2>
 8013a64:	18e2      	adds	r2, r4, r3
 8013a66:	7892      	ldrb	r2, [r2, #2]
 8013a68:	2a7d      	cmp	r2, #125	@ 0x7d
 8013a6a:	f000 81b8 	beq.w	8013dde <uxr_read_framed_msg+0x3c2>
 8013a6e:	3301      	adds	r3, #1
 8013a70:	212a      	movs	r1, #42	@ 0x2a
 8013a72:	2a7e      	cmp	r2, #126	@ 0x7e
 8013a74:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8013a78:	fba5 c000 	umull	ip, r0, r5, r0
 8013a7c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013a80:	fb01 3310 	mls	r3, r1, r0, r3
 8013a84:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013a88:	f000 8257 	beq.w	8013f3a <uxr_read_framed_msg+0x51e>
 8013a8c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013a8e:	2000      	movs	r0, #0
 8013a90:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013a92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013a96:	7020      	strb	r0, [r4, #0]
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	4299      	cmp	r1, r3
 8013a9c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013a9e:	f000 8178 	beq.w	8013d92 <uxr_read_framed_msg+0x376>
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	b003      	add	sp, #12
 8013aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aaa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013aae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013ab2:	4298      	cmp	r0, r3
 8013ab4:	f000 8132 	beq.w	8013d1c <uxr_read_framed_msg+0x300>
 8013ab8:	18e2      	adds	r2, r4, r3
 8013aba:	7891      	ldrb	r1, [r2, #2]
 8013abc:	297d      	cmp	r1, #125	@ 0x7d
 8013abe:	f000 8170 	beq.w	8013da2 <uxr_read_framed_msg+0x386>
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	202a      	movs	r0, #42	@ 0x2a
 8013ac6:	297e      	cmp	r1, #126	@ 0x7e
 8013ac8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013acc:	fba5 c202 	umull	ip, r2, r5, r2
 8013ad0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013ad4:	fb00 3312 	mls	r3, r0, r2, r3
 8013ad8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013adc:	f000 821d 	beq.w	8013f1a <uxr_read_framed_msg+0x4fe>
 8013ae0:	2307      	movs	r3, #7
 8013ae2:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013ae4:	7023      	strb	r3, [r4, #0]
 8013ae6:	e7aa      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013ae8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013aea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013aee:	459e      	cmp	lr, r3
 8013af0:	d827      	bhi.n	8013b42 <uxr_read_framed_msg+0x126>
 8013af2:	e032      	b.n	8013b5a <uxr_read_framed_msg+0x13e>
 8013af4:	fba5 b101 	umull	fp, r1, r5, r1
 8013af8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8013afc:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013b00:	0889      	lsrs	r1, r1, #2
 8013b02:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013b06:	fb0b 0111 	mls	r1, fp, r1, r0
 8013b0a:	f000 80d4 	beq.w	8013cb6 <uxr_read_framed_msg+0x29a>
 8013b0e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013b12:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8013b16:	f000 80cb 	beq.w	8013cb0 <uxr_read_framed_msg+0x294>
 8013b1a:	f806 c003 	strb.w	ip, [r6, r3]
 8013b1e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8013b20:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013b22:	ea80 010c 	eor.w	r1, r0, ip
 8013b26:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	b2c9      	uxtb	r1, r1
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8013b34:	4573      	cmp	r3, lr
 8013b36:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013b38:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013b3c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013b3e:	f080 811d 	bcs.w	8013d7c <uxr_read_framed_msg+0x360>
 8013b42:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013b46:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013b4a:	1c50      	adds	r0, r2, #1
 8013b4c:	eb04 0c02 	add.w	ip, r4, r2
 8013b50:	4592      	cmp	sl, r2
 8013b52:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8013b56:	d1cd      	bne.n	8013af4 <uxr_read_framed_msg+0xd8>
 8013b58:	459e      	cmp	lr, r3
 8013b5a:	f040 8114 	bne.w	8013d86 <uxr_read_framed_msg+0x36a>
 8013b5e:	2306      	movs	r3, #6
 8013b60:	7023      	strb	r3, [r4, #0]
 8013b62:	e76c      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013b64:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013b68:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013b6c:	4298      	cmp	r0, r3
 8013b6e:	f000 80c6 	beq.w	8013cfe <uxr_read_framed_msg+0x2e2>
 8013b72:	18e2      	adds	r2, r4, r3
 8013b74:	7891      	ldrb	r1, [r2, #2]
 8013b76:	297d      	cmp	r1, #125	@ 0x7d
 8013b78:	f000 8193 	beq.w	8013ea2 <uxr_read_framed_msg+0x486>
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	202a      	movs	r0, #42	@ 0x2a
 8013b80:	297e      	cmp	r1, #126	@ 0x7e
 8013b82:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013b86:	fba5 c202 	umull	ip, r2, r5, r2
 8013b8a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013b8e:	fb00 3312 	mls	r3, r0, r2, r3
 8013b92:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013b96:	f000 81d0 	beq.w	8013f3a <uxr_read_framed_msg+0x51e>
 8013b9a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013ba2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ba4:	8660      	strh	r0, [r4, #50]	@ 0x32
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013baa:	428b      	cmp	r3, r1
 8013bac:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013bae:	f240 80e2 	bls.w	8013d76 <uxr_read_framed_msg+0x35a>
 8013bb2:	7020      	strb	r0, [r4, #0]
 8013bb4:	b003      	add	sp, #12
 8013bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013bbe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013bc2:	4298      	cmp	r0, r3
 8013bc4:	f000 80aa 	beq.w	8013d1c <uxr_read_framed_msg+0x300>
 8013bc8:	18e2      	adds	r2, r4, r3
 8013bca:	7891      	ldrb	r1, [r2, #2]
 8013bcc:	297d      	cmp	r1, #125	@ 0x7d
 8013bce:	f000 8186 	beq.w	8013ede <uxr_read_framed_msg+0x4c2>
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	202a      	movs	r0, #42	@ 0x2a
 8013bd6:	297e      	cmp	r1, #126	@ 0x7e
 8013bd8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013bdc:	fba5 c202 	umull	ip, r2, r5, r2
 8013be0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013be4:	fb00 3312 	mls	r3, r0, r2, r3
 8013be8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013bec:	f000 8195 	beq.w	8013f1a <uxr_read_framed_msg+0x4fe>
 8013bf0:	2304      	movs	r3, #4
 8013bf2:	8621      	strh	r1, [r4, #48]	@ 0x30
 8013bf4:	7023      	strb	r3, [r4, #0]
 8013bf6:	e722      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013bf8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013bfc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013c00:	4290      	cmp	r0, r2
 8013c02:	f000 80b4 	beq.w	8013d6e <uxr_read_framed_msg+0x352>
 8013c06:	18a3      	adds	r3, r4, r2
 8013c08:	7899      	ldrb	r1, [r3, #2]
 8013c0a:	297d      	cmp	r1, #125	@ 0x7d
 8013c0c:	f000 8107 	beq.w	8013e1e <uxr_read_framed_msg+0x402>
 8013c10:	3201      	adds	r2, #1
 8013c12:	232a      	movs	r3, #42	@ 0x2a
 8013c14:	297e      	cmp	r1, #126	@ 0x7e
 8013c16:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8013c1a:	fba5 c000 	umull	ip, r0, r5, r0
 8013c1e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013c22:	fb03 2210 	mls	r2, r3, r0, r2
 8013c26:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013c2a:	f000 818a 	beq.w	8013f42 <uxr_read_framed_msg+0x526>
 8013c2e:	7863      	ldrb	r3, [r4, #1]
 8013c30:	428b      	cmp	r3, r1
 8013c32:	bf0c      	ite	eq
 8013c34:	2303      	moveq	r3, #3
 8013c36:	2300      	movne	r3, #0
 8013c38:	7023      	strb	r3, [r4, #0]
 8013c3a:	e700      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013c42:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8013c46:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013c4a:	4299      	cmp	r1, r3
 8013c4c:	d06a      	beq.n	8013d24 <uxr_read_framed_msg+0x308>
 8013c4e:	18e2      	adds	r2, r4, r3
 8013c50:	7890      	ldrb	r0, [r2, #2]
 8013c52:	287d      	cmp	r0, #125	@ 0x7d
 8013c54:	f000 8100 	beq.w	8013e58 <uxr_read_framed_msg+0x43c>
 8013c58:	3301      	adds	r3, #1
 8013c5a:	212a      	movs	r1, #42	@ 0x2a
 8013c5c:	287e      	cmp	r0, #126	@ 0x7e
 8013c5e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8013c62:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013c66:	fba5 c202 	umull	ip, r2, r5, r2
 8013c6a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013c6e:	fb01 3312 	mls	r3, r1, r2, r3
 8013c72:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013c76:	d055      	beq.n	8013d24 <uxr_read_framed_msg+0x308>
 8013c78:	2302      	movs	r3, #2
 8013c7a:	7023      	strb	r3, [r4, #0]
 8013c7c:	e6df      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013c7e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8013c82:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013c86:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013c8a:	1c5a      	adds	r2, r3, #1
 8013c8c:	459c      	cmp	ip, r3
 8013c8e:	eb04 0103 	add.w	r1, r4, r3
 8013c92:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8013c96:	f43f af04 	beq.w	8013aa2 <uxr_read_framed_msg+0x86>
 8013c9a:	fba5 0303 	umull	r0, r3, r5, r3
 8013c9e:	7889      	ldrb	r1, [r1, #2]
 8013ca0:	089b      	lsrs	r3, r3, #2
 8013ca2:	297e      	cmp	r1, #126	@ 0x7e
 8013ca4:	fb0e 2313 	mls	r3, lr, r3, r2
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013cae:	d1ec      	bne.n	8013c8a <uxr_read_framed_msg+0x26e>
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	7023      	strb	r3, [r4, #0]
 8013cb4:	e6c3      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013cb6:	1c50      	adds	r0, r2, #1
 8013cb8:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013cbc:	3202      	adds	r2, #2
 8013cbe:	0841      	lsrs	r1, r0, #1
 8013cc0:	fba5 c101 	umull	ip, r1, r5, r1
 8013cc4:	0889      	lsrs	r1, r1, #2
 8013cc6:	fb0b 0111 	mls	r1, fp, r1, r0
 8013cca:	1860      	adds	r0, r4, r1
 8013ccc:	b2c9      	uxtb	r1, r1
 8013cce:	458a      	cmp	sl, r1
 8013cd0:	f43f af42 	beq.w	8013b58 <uxr_read_framed_msg+0x13c>
 8013cd4:	0851      	lsrs	r1, r2, #1
 8013cd6:	7880      	ldrb	r0, [r0, #2]
 8013cd8:	fba5 a101 	umull	sl, r1, r5, r1
 8013cdc:	287e      	cmp	r0, #126	@ 0x7e
 8013cde:	f080 0c20 	eor.w	ip, r0, #32
 8013ce2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8013ce6:	fb0b 2211 	mls	r2, fp, r1, r2
 8013cea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013cee:	f47f af14 	bne.w	8013b1a <uxr_read_framed_msg+0xfe>
 8013cf2:	459e      	cmp	lr, r3
 8013cf4:	f43f af33 	beq.w	8013b5e <uxr_read_framed_msg+0x142>
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	7023      	strb	r3, [r4, #0]
 8013cfc:	e69f      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013cfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	2301      	movs	r3, #1
 8013d04:	9301      	str	r3, [sp, #4]
 8013d06:	464a      	mov	r2, r9
 8013d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d0a:	4641      	mov	r1, r8
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f7ff fdf1 	bl	80138f4 <uxr_framing_read_transport>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f43f aec5 	beq.w	8013aa2 <uxr_read_framed_msg+0x86>
 8013d18:	7823      	ldrb	r3, [r4, #0]
 8013d1a:	e690      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	2302      	movs	r3, #2
 8013d22:	e7ef      	b.n	8013d04 <uxr_read_framed_msg+0x2e8>
 8013d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d26:	464a      	mov	r2, r9
 8013d28:	4641      	mov	r1, r8
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	2304      	movs	r3, #4
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d34:	f7ff fdde 	bl	80138f4 <uxr_framing_read_transport>
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	d1ed      	bne.n	8013d18 <uxr_read_framed_msg+0x2fc>
 8013d3c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8013d40:	2b7e      	cmp	r3, #126	@ 0x7e
 8013d42:	d0e9      	beq.n	8013d18 <uxr_read_framed_msg+0x2fc>
 8013d44:	e6ad      	b.n	8013aa2 <uxr_read_framed_msg+0x86>
 8013d46:	bf00      	nop
 8013d48:	30c30c31 	.word	0x30c30c31
 8013d4c:	0801ccf8 	.word	0x0801ccf8
 8013d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	2305      	movs	r3, #5
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d5a:	f7ff fdcb 	bl	80138f4 <uxr_framing_read_transport>
 8013d5e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013d62:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013d66:	429a      	cmp	r2, r3
 8013d68:	f43f ae9b 	beq.w	8013aa2 <uxr_read_framed_msg+0x86>
 8013d6c:	e664      	b.n	8013a38 <uxr_read_framed_msg+0x1c>
 8013d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d70:	9300      	str	r3, [sp, #0]
 8013d72:	2303      	movs	r3, #3
 8013d74:	e7c6      	b.n	8013d04 <uxr_read_framed_msg+0x2e8>
 8013d76:	2305      	movs	r3, #5
 8013d78:	7023      	strb	r3, [r4, #0]
 8013d7a:	e660      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013d7c:	f43f aeef 	beq.w	8013b5e <uxr_read_framed_msg+0x142>
 8013d80:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013d84:	d094      	beq.n	8013cb0 <uxr_read_framed_msg+0x294>
 8013d86:	ebae 0303 	sub.w	r3, lr, r3
 8013d8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013d8c:	3302      	adds	r3, #2
 8013d8e:	9200      	str	r2, [sp, #0]
 8013d90:	e7b8      	b.n	8013d04 <uxr_read_framed_msg+0x2e8>
 8013d92:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8013d96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d98:	7013      	strb	r3, [r2, #0]
 8013d9a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8013d9c:	b003      	add	sp, #12
 8013d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da2:	1c59      	adds	r1, r3, #1
 8013da4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013da8:	084a      	lsrs	r2, r1, #1
 8013daa:	fba5 e202 	umull	lr, r2, r5, r2
 8013dae:	0892      	lsrs	r2, r2, #2
 8013db0:	fb0c 1212 	mls	r2, ip, r2, r1
 8013db4:	b2d1      	uxtb	r1, r2
 8013db6:	4288      	cmp	r0, r1
 8013db8:	d0b0      	beq.n	8013d1c <uxr_read_framed_msg+0x300>
 8013dba:	3302      	adds	r3, #2
 8013dbc:	4422      	add	r2, r4
 8013dbe:	7891      	ldrb	r1, [r2, #2]
 8013dc0:	085a      	lsrs	r2, r3, #1
 8013dc2:	fba5 0202 	umull	r0, r2, r5, r2
 8013dc6:	297e      	cmp	r1, #126	@ 0x7e
 8013dc8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013dcc:	fb0c 3312 	mls	r3, ip, r2, r3
 8013dd0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013dd4:	f000 80a1 	beq.w	8013f1a <uxr_read_framed_msg+0x4fe>
 8013dd8:	f081 0120 	eor.w	r1, r1, #32
 8013ddc:	e680      	b.n	8013ae0 <uxr_read_framed_msg+0xc4>
 8013dde:	f103 0c01 	add.w	ip, r3, #1
 8013de2:	202a      	movs	r0, #42	@ 0x2a
 8013de4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013de8:	fba5 e202 	umull	lr, r2, r5, r2
 8013dec:	0892      	lsrs	r2, r2, #2
 8013dee:	fb00 c212 	mls	r2, r0, r2, ip
 8013df2:	fa5f fc82 	uxtb.w	ip, r2
 8013df6:	4561      	cmp	r1, ip
 8013df8:	d081      	beq.n	8013cfe <uxr_read_framed_msg+0x2e2>
 8013dfa:	3302      	adds	r3, #2
 8013dfc:	4422      	add	r2, r4
 8013dfe:	0859      	lsrs	r1, r3, #1
 8013e00:	7892      	ldrb	r2, [r2, #2]
 8013e02:	fba5 c101 	umull	ip, r1, r5, r1
 8013e06:	2a7e      	cmp	r2, #126	@ 0x7e
 8013e08:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8013e0c:	fb00 3311 	mls	r3, r0, r1, r3
 8013e10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013e14:	f000 8091 	beq.w	8013f3a <uxr_read_framed_msg+0x51e>
 8013e18:	f082 0220 	eor.w	r2, r2, #32
 8013e1c:	e636      	b.n	8013a8c <uxr_read_framed_msg+0x70>
 8013e1e:	1c51      	adds	r1, r2, #1
 8013e20:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013e24:	084b      	lsrs	r3, r1, #1
 8013e26:	fba5 e303 	umull	lr, r3, r5, r3
 8013e2a:	089b      	lsrs	r3, r3, #2
 8013e2c:	fb0c 1313 	mls	r3, ip, r3, r1
 8013e30:	b2d9      	uxtb	r1, r3
 8013e32:	4288      	cmp	r0, r1
 8013e34:	d09b      	beq.n	8013d6e <uxr_read_framed_msg+0x352>
 8013e36:	3202      	adds	r2, #2
 8013e38:	4423      	add	r3, r4
 8013e3a:	0850      	lsrs	r0, r2, #1
 8013e3c:	789b      	ldrb	r3, [r3, #2]
 8013e3e:	fba5 1000 	umull	r1, r0, r5, r0
 8013e42:	2b7e      	cmp	r3, #126	@ 0x7e
 8013e44:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013e48:	fb0c 2210 	mls	r2, ip, r0, r2
 8013e4c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013e50:	d077      	beq.n	8013f42 <uxr_read_framed_msg+0x526>
 8013e52:	f083 0120 	eor.w	r1, r3, #32
 8013e56:	e6ea      	b.n	8013c2e <uxr_read_framed_msg+0x212>
 8013e58:	f103 0c01 	add.w	ip, r3, #1
 8013e5c:	202a      	movs	r0, #42	@ 0x2a
 8013e5e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013e62:	fba5 e202 	umull	lr, r2, r5, r2
 8013e66:	0892      	lsrs	r2, r2, #2
 8013e68:	fb00 c212 	mls	r2, r0, r2, ip
 8013e6c:	fa5f fc82 	uxtb.w	ip, r2
 8013e70:	4561      	cmp	r1, ip
 8013e72:	f43f af57 	beq.w	8013d24 <uxr_read_framed_msg+0x308>
 8013e76:	3302      	adds	r3, #2
 8013e78:	4422      	add	r2, r4
 8013e7a:	7891      	ldrb	r1, [r2, #2]
 8013e7c:	085a      	lsrs	r2, r3, #1
 8013e7e:	fba5 c202 	umull	ip, r2, r5, r2
 8013e82:	297e      	cmp	r1, #126	@ 0x7e
 8013e84:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013e88:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013e8c:	fb00 3312 	mls	r3, r0, r2, r3
 8013e90:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013e94:	f43f af46 	beq.w	8013d24 <uxr_read_framed_msg+0x308>
 8013e98:	f081 0120 	eor.w	r1, r1, #32
 8013e9c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013ea0:	e6ea      	b.n	8013c78 <uxr_read_framed_msg+0x25c>
 8013ea2:	1c59      	adds	r1, r3, #1
 8013ea4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013ea8:	084a      	lsrs	r2, r1, #1
 8013eaa:	fba5 e202 	umull	lr, r2, r5, r2
 8013eae:	0892      	lsrs	r2, r2, #2
 8013eb0:	fb0c 1212 	mls	r2, ip, r2, r1
 8013eb4:	b2d1      	uxtb	r1, r2
 8013eb6:	4288      	cmp	r0, r1
 8013eb8:	f43f af21 	beq.w	8013cfe <uxr_read_framed_msg+0x2e2>
 8013ebc:	3302      	adds	r3, #2
 8013ebe:	4422      	add	r2, r4
 8013ec0:	7891      	ldrb	r1, [r2, #2]
 8013ec2:	085a      	lsrs	r2, r3, #1
 8013ec4:	fba5 0202 	umull	r0, r2, r5, r2
 8013ec8:	297e      	cmp	r1, #126	@ 0x7e
 8013eca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013ece:	fb0c 3312 	mls	r3, ip, r2, r3
 8013ed2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013ed6:	d030      	beq.n	8013f3a <uxr_read_framed_msg+0x51e>
 8013ed8:	f081 0120 	eor.w	r1, r1, #32
 8013edc:	e65d      	b.n	8013b9a <uxr_read_framed_msg+0x17e>
 8013ede:	1c59      	adds	r1, r3, #1
 8013ee0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013ee4:	084a      	lsrs	r2, r1, #1
 8013ee6:	fba5 e202 	umull	lr, r2, r5, r2
 8013eea:	0892      	lsrs	r2, r2, #2
 8013eec:	fb0c 1212 	mls	r2, ip, r2, r1
 8013ef0:	b2d1      	uxtb	r1, r2
 8013ef2:	4288      	cmp	r0, r1
 8013ef4:	f43f af12 	beq.w	8013d1c <uxr_read_framed_msg+0x300>
 8013ef8:	3302      	adds	r3, #2
 8013efa:	4422      	add	r2, r4
 8013efc:	7891      	ldrb	r1, [r2, #2]
 8013efe:	085a      	lsrs	r2, r3, #1
 8013f00:	fba5 0202 	umull	r0, r2, r5, r2
 8013f04:	297e      	cmp	r1, #126	@ 0x7e
 8013f06:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013f0a:	fb0c 3312 	mls	r3, ip, r2, r3
 8013f0e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013f12:	d002      	beq.n	8013f1a <uxr_read_framed_msg+0x4fe>
 8013f14:	f081 0120 	eor.w	r1, r1, #32
 8013f18:	e66a      	b.n	8013bf0 <uxr_read_framed_msg+0x1d4>
 8013f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	2302      	movs	r3, #2
 8013f20:	9301      	str	r3, [sp, #4]
 8013f22:	464a      	mov	r2, r9
 8013f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f26:	4641      	mov	r1, r8
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f7ff fce3 	bl	80138f4 <uxr_framing_read_transport>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	f47f aef2 	bne.w	8013d18 <uxr_read_framed_msg+0x2fc>
 8013f34:	2301      	movs	r3, #1
 8013f36:	7023      	strb	r3, [r4, #0]
 8013f38:	e581      	b.n	8013a3e <uxr_read_framed_msg+0x22>
 8013f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f3c:	9300      	str	r3, [sp, #0]
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e7ee      	b.n	8013f20 <uxr_read_framed_msg+0x504>
 8013f42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	2303      	movs	r3, #3
 8013f48:	e7ea      	b.n	8013f20 <uxr_read_framed_msg+0x504>
 8013f4a:	bf00      	nop

08013f4c <uxr_stream_id>:
 8013f4c:	2901      	cmp	r1, #1
 8013f4e:	4684      	mov	ip, r0
 8013f50:	b500      	push	{lr}
 8013f52:	b083      	sub	sp, #12
 8013f54:	d01f      	beq.n	8013f96 <uxr_stream_id+0x4a>
 8013f56:	2902      	cmp	r1, #2
 8013f58:	f04f 0e00 	mov.w	lr, #0
 8013f5c:	d020      	beq.n	8013fa0 <uxr_stream_id+0x54>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	2000      	movs	r0, #0
 8013f62:	f36e 0307 	bfi	r3, lr, #0, #8
 8013f66:	f36c 230f 	bfi	r3, ip, #8, #8
 8013f6a:	f361 4317 	bfi	r3, r1, #16, #8
 8013f6e:	f362 631f 	bfi	r3, r2, #24, #8
 8013f72:	fa5f fc83 	uxtb.w	ip, r3
 8013f76:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013f7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013f7e:	0e1b      	lsrs	r3, r3, #24
 8013f80:	f36c 0007 	bfi	r0, ip, #0, #8
 8013f84:	f361 200f 	bfi	r0, r1, #8, #8
 8013f88:	f362 4017 	bfi	r0, r2, #16, #8
 8013f8c:	f363 601f 	bfi	r0, r3, #24, #8
 8013f90:	b003      	add	sp, #12
 8013f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f96:	f100 0e01 	add.w	lr, r0, #1
 8013f9a:	fa5f fe8e 	uxtb.w	lr, lr
 8013f9e:	e7de      	b.n	8013f5e <uxr_stream_id+0x12>
 8013fa0:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8013fa4:	e7db      	b.n	8013f5e <uxr_stream_id+0x12>
 8013fa6:	bf00      	nop

08013fa8 <uxr_stream_id_from_raw>:
 8013fa8:	b082      	sub	sp, #8
 8013faa:	b130      	cbz	r0, 8013fba <uxr_stream_id_from_raw+0x12>
 8013fac:	0603      	lsls	r3, r0, #24
 8013fae:	d421      	bmi.n	8013ff4 <uxr_stream_id_from_raw+0x4c>
 8013fb0:	1e42      	subs	r2, r0, #1
 8013fb2:	f04f 0c01 	mov.w	ip, #1
 8013fb6:	b2d2      	uxtb	r2, r2
 8013fb8:	e001      	b.n	8013fbe <uxr_stream_id_from_raw+0x16>
 8013fba:	4684      	mov	ip, r0
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f360 0307 	bfi	r3, r0, #0, #8
 8013fc4:	2000      	movs	r0, #0
 8013fc6:	f362 230f 	bfi	r3, r2, #8, #8
 8013fca:	f36c 4317 	bfi	r3, ip, #16, #8
 8013fce:	f361 631f 	bfi	r3, r1, #24, #8
 8013fd2:	fa5f fc83 	uxtb.w	ip, r3
 8013fd6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013fda:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013fde:	0e1b      	lsrs	r3, r3, #24
 8013fe0:	f36c 0007 	bfi	r0, ip, #0, #8
 8013fe4:	f361 200f 	bfi	r0, r1, #8, #8
 8013fe8:	f362 4017 	bfi	r0, r2, #16, #8
 8013fec:	f363 601f 	bfi	r0, r3, #24, #8
 8013ff0:	b002      	add	sp, #8
 8013ff2:	4770      	bx	lr
 8013ff4:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013ff8:	f04f 0c02 	mov.w	ip, #2
 8013ffc:	e7df      	b.n	8013fbe <uxr_stream_id_from_raw+0x16>
 8013ffe:	bf00      	nop

08014000 <uxr_init_stream_storage>:
 8014000:	2300      	movs	r3, #0
 8014002:	7403      	strb	r3, [r0, #16]
 8014004:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014008:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801400c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop

08014014 <uxr_reset_stream_storage>:
 8014014:	b570      	push	{r4, r5, r6, lr}
 8014016:	7c03      	ldrb	r3, [r0, #16]
 8014018:	4604      	mov	r4, r0
 801401a:	b14b      	cbz	r3, 8014030 <uxr_reset_stream_storage+0x1c>
 801401c:	4606      	mov	r6, r0
 801401e:	2500      	movs	r5, #0
 8014020:	4630      	mov	r0, r6
 8014022:	3501      	adds	r5, #1
 8014024:	f006 f8d8 	bl	801a1d8 <uxr_reset_output_best_effort_stream>
 8014028:	7c23      	ldrb	r3, [r4, #16]
 801402a:	3610      	adds	r6, #16
 801402c:	42ab      	cmp	r3, r5
 801402e:	d8f7      	bhi.n	8014020 <uxr_reset_stream_storage+0xc>
 8014030:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014034:	b15b      	cbz	r3, 801404e <uxr_reset_stream_storage+0x3a>
 8014036:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801403a:	2500      	movs	r5, #0
 801403c:	4630      	mov	r0, r6
 801403e:	3501      	adds	r5, #1
 8014040:	f005 fed0 	bl	8019de4 <uxr_reset_input_best_effort_stream>
 8014044:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014048:	3602      	adds	r6, #2
 801404a:	42ab      	cmp	r3, r5
 801404c:	d8f6      	bhi.n	801403c <uxr_reset_stream_storage+0x28>
 801404e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014052:	b15b      	cbz	r3, 801406c <uxr_reset_stream_storage+0x58>
 8014054:	f104 0618 	add.w	r6, r4, #24
 8014058:	2500      	movs	r5, #0
 801405a:	4630      	mov	r0, r6
 801405c:	3501      	adds	r5, #1
 801405e:	f006 f967 	bl	801a330 <uxr_reset_output_reliable_stream>
 8014062:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014066:	3628      	adds	r6, #40	@ 0x28
 8014068:	42ab      	cmp	r3, r5
 801406a:	d8f6      	bhi.n	801405a <uxr_reset_stream_storage+0x46>
 801406c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014070:	b15b      	cbz	r3, 801408a <uxr_reset_stream_storage+0x76>
 8014072:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014076:	2500      	movs	r5, #0
 8014078:	4630      	mov	r0, r6
 801407a:	3501      	adds	r5, #1
 801407c:	f005 ff1e 	bl	8019ebc <uxr_reset_input_reliable_stream>
 8014080:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014084:	3618      	adds	r6, #24
 8014086:	42ab      	cmp	r3, r5
 8014088:	d8f6      	bhi.n	8014078 <uxr_reset_stream_storage+0x64>
 801408a:	bd70      	pop	{r4, r5, r6, pc}

0801408c <uxr_add_output_best_effort_buffer>:
 801408c:	b510      	push	{r4, lr}
 801408e:	7c04      	ldrb	r4, [r0, #16]
 8014090:	b082      	sub	sp, #8
 8014092:	f104 0c01 	add.w	ip, r4, #1
 8014096:	f880 c010 	strb.w	ip, [r0, #16]
 801409a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801409e:	f006 f891 	bl	801a1c4 <uxr_init_output_best_effort_stream>
 80140a2:	2201      	movs	r2, #1
 80140a4:	4620      	mov	r0, r4
 80140a6:	4611      	mov	r1, r2
 80140a8:	b002      	add	sp, #8
 80140aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ae:	f7ff bf4d 	b.w	8013f4c <uxr_stream_id>
 80140b2:	bf00      	nop

080140b4 <uxr_add_output_reliable_buffer>:
 80140b4:	b510      	push	{r4, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	4684      	mov	ip, r0
 80140ba:	2028      	movs	r0, #40	@ 0x28
 80140bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80140c0:	9400      	str	r4, [sp, #0]
 80140c2:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80140c6:	fb00 c004 	mla	r0, r0, r4, ip
 80140ca:	f104 0e01 	add.w	lr, r4, #1
 80140ce:	3018      	adds	r0, #24
 80140d0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80140d4:	f006 f8f6 	bl	801a2c4 <uxr_init_output_reliable_stream>
 80140d8:	2201      	movs	r2, #1
 80140da:	2102      	movs	r1, #2
 80140dc:	4620      	mov	r0, r4
 80140de:	b004      	add	sp, #16
 80140e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140e4:	f7ff bf32 	b.w	8013f4c <uxr_stream_id>

080140e8 <uxr_add_input_best_effort_buffer>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80140ee:	b082      	sub	sp, #8
 80140f0:	1c62      	adds	r2, r4, #1
 80140f2:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80140f6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80140fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80140fe:	f005 fe6d 	bl	8019ddc <uxr_init_input_best_effort_stream>
 8014102:	2200      	movs	r2, #0
 8014104:	2101      	movs	r1, #1
 8014106:	4620      	mov	r0, r4
 8014108:	b002      	add	sp, #8
 801410a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801410e:	f7ff bf1d 	b.w	8013f4c <uxr_stream_id>
 8014112:	bf00      	nop

08014114 <uxr_add_input_reliable_buffer>:
 8014114:	b510      	push	{r4, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	4684      	mov	ip, r0
 801411a:	2018      	movs	r0, #24
 801411c:	9c06      	ldr	r4, [sp, #24]
 801411e:	9400      	str	r4, [sp, #0]
 8014120:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014124:	fb00 c004 	mla	r0, r0, r4, ip
 8014128:	f104 0e01 	add.w	lr, r4, #1
 801412c:	3048      	adds	r0, #72	@ 0x48
 801412e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014132:	f005 fe9d 	bl	8019e70 <uxr_init_input_reliable_stream>
 8014136:	2200      	movs	r2, #0
 8014138:	2102      	movs	r1, #2
 801413a:	4620      	mov	r0, r4
 801413c:	b004      	add	sp, #16
 801413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014142:	f7ff bf03 	b.w	8013f4c <uxr_stream_id>
 8014146:	bf00      	nop

08014148 <uxr_get_output_best_effort_stream>:
 8014148:	7c03      	ldrb	r3, [r0, #16]
 801414a:	428b      	cmp	r3, r1
 801414c:	bf8c      	ite	hi
 801414e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014152:	2000      	movls	r0, #0
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop

08014158 <uxr_get_output_reliable_stream>:
 8014158:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801415c:	428b      	cmp	r3, r1
 801415e:	d904      	bls.n	801416a <uxr_get_output_reliable_stream+0x12>
 8014160:	2328      	movs	r3, #40	@ 0x28
 8014162:	fb03 0001 	mla	r0, r3, r1, r0
 8014166:	3018      	adds	r0, #24
 8014168:	4770      	bx	lr
 801416a:	2000      	movs	r0, #0
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop

08014170 <uxr_get_input_best_effort_stream>:
 8014170:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014174:	428b      	cmp	r3, r1
 8014176:	d903      	bls.n	8014180 <uxr_get_input_best_effort_stream+0x10>
 8014178:	3121      	adds	r1, #33	@ 0x21
 801417a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801417e:	4770      	bx	lr
 8014180:	2000      	movs	r0, #0
 8014182:	4770      	bx	lr

08014184 <uxr_get_input_reliable_stream>:
 8014184:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014188:	428b      	cmp	r3, r1
 801418a:	d904      	bls.n	8014196 <uxr_get_input_reliable_stream+0x12>
 801418c:	2318      	movs	r3, #24
 801418e:	fb03 0001 	mla	r0, r3, r1, r0
 8014192:	3048      	adds	r0, #72	@ 0x48
 8014194:	4770      	bx	lr
 8014196:	2000      	movs	r0, #0
 8014198:	4770      	bx	lr
 801419a:	bf00      	nop

0801419c <uxr_output_streams_confirmed>:
 801419c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80141a0:	b183      	cbz	r3, 80141c4 <uxr_output_streams_confirmed+0x28>
 80141a2:	b570      	push	{r4, r5, r6, lr}
 80141a4:	4606      	mov	r6, r0
 80141a6:	f100 0518 	add.w	r5, r0, #24
 80141aa:	2400      	movs	r4, #0
 80141ac:	e000      	b.n	80141b0 <uxr_output_streams_confirmed+0x14>
 80141ae:	b140      	cbz	r0, 80141c2 <uxr_output_streams_confirmed+0x26>
 80141b0:	4628      	mov	r0, r5
 80141b2:	3401      	adds	r4, #1
 80141b4:	f006 fb30 	bl	801a818 <uxr_is_output_up_to_date>
 80141b8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80141bc:	3528      	adds	r5, #40	@ 0x28
 80141be:	42a3      	cmp	r3, r4
 80141c0:	d8f5      	bhi.n	80141ae <uxr_output_streams_confirmed+0x12>
 80141c2:	bd70      	pop	{r4, r5, r6, pc}
 80141c4:	2001      	movs	r0, #1
 80141c6:	4770      	bx	lr

080141c8 <uxr_buffer_submessage_header>:
 80141c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ca:	460e      	mov	r6, r1
 80141cc:	2104      	movs	r1, #4
 80141ce:	4604      	mov	r4, r0
 80141d0:	4615      	mov	r5, r2
 80141d2:	461f      	mov	r7, r3
 80141d4:	f7fd fc08 	bl	80119e8 <ucdr_align_to>
 80141d8:	2301      	movs	r3, #1
 80141da:	4631      	mov	r1, r6
 80141dc:	4620      	mov	r0, r4
 80141de:	ea47 0203 	orr.w	r2, r7, r3
 80141e2:	7523      	strb	r3, [r4, #20]
 80141e4:	462b      	mov	r3, r5
 80141e6:	f000 fa29 	bl	801463c <uxr_serialize_submessage_header>
 80141ea:	4620      	mov	r0, r4
 80141ec:	f7fd fc12 	bl	8011a14 <ucdr_buffer_remaining>
 80141f0:	42a8      	cmp	r0, r5
 80141f2:	bf34      	ite	cc
 80141f4:	2000      	movcc	r0, #0
 80141f6:	2001      	movcs	r0, #1
 80141f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141fa:	bf00      	nop

080141fc <uxr_read_submessage_header>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	2104      	movs	r1, #4
 8014206:	4616      	mov	r6, r2
 8014208:	4698      	mov	r8, r3
 801420a:	f7fd fbed 	bl	80119e8 <ucdr_align_to>
 801420e:	4620      	mov	r0, r4
 8014210:	f7fd fc00 	bl	8011a14 <ucdr_buffer_remaining>
 8014214:	2803      	cmp	r0, #3
 8014216:	bf8c      	ite	hi
 8014218:	2701      	movhi	r7, #1
 801421a:	2700      	movls	r7, #0
 801421c:	d802      	bhi.n	8014224 <uxr_read_submessage_header+0x28>
 801421e:	4638      	mov	r0, r7
 8014220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014224:	4633      	mov	r3, r6
 8014226:	4642      	mov	r2, r8
 8014228:	4620      	mov	r0, r4
 801422a:	4629      	mov	r1, r5
 801422c:	f000 fa1a 	bl	8014664 <uxr_deserialize_submessage_header>
 8014230:	f898 3000 	ldrb.w	r3, [r8]
 8014234:	4638      	mov	r0, r7
 8014236:	f003 0201 	and.w	r2, r3, #1
 801423a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801423e:	f888 3000 	strb.w	r3, [r8]
 8014242:	7522      	strb	r2, [r4, #20]
 8014244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014248 <uxr_submessage_padding>:
 8014248:	f010 0003 	ands.w	r0, r0, #3
 801424c:	bf18      	it	ne
 801424e:	f1c0 0004 	rsbne	r0, r0, #4
 8014252:	4770      	bx	lr

08014254 <uxr_millis>:
 8014254:	b510      	push	{r4, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	2001      	movs	r0, #1
 801425a:	4669      	mov	r1, sp
 801425c:	f7ed fc24 	bl	8001aa8 <clock_gettime>
 8014260:	4908      	ldr	r1, [pc, #32]	@ (8014284 <uxr_millis+0x30>)
 8014262:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014266:	fba0 0301 	umull	r0, r3, r0, r1
 801426a:	1900      	adds	r0, r0, r4
 801426c:	fb01 3102 	mla	r1, r1, r2, r3
 8014270:	4a05      	ldr	r2, [pc, #20]	@ (8014288 <uxr_millis+0x34>)
 8014272:	f04f 0300 	mov.w	r3, #0
 8014276:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801427a:	f7ec f899 	bl	80003b0 <__aeabi_ldivmod>
 801427e:	b004      	add	sp, #16
 8014280:	bd10      	pop	{r4, pc}
 8014282:	bf00      	nop
 8014284:	3b9aca00 	.word	0x3b9aca00
 8014288:	000f4240 	.word	0x000f4240

0801428c <uxr_nanos>:
 801428c:	b510      	push	{r4, lr}
 801428e:	b084      	sub	sp, #16
 8014290:	2001      	movs	r0, #1
 8014292:	4669      	mov	r1, sp
 8014294:	f7ed fc08 	bl	8001aa8 <clock_gettime>
 8014298:	4a06      	ldr	r2, [pc, #24]	@ (80142b4 <uxr_nanos+0x28>)
 801429a:	9800      	ldr	r0, [sp, #0]
 801429c:	9902      	ldr	r1, [sp, #8]
 801429e:	fba0 0302 	umull	r0, r3, r0, r2
 80142a2:	9c01      	ldr	r4, [sp, #4]
 80142a4:	1840      	adds	r0, r0, r1
 80142a6:	fb02 3304 	mla	r3, r2, r4, r3
 80142aa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80142ae:	b004      	add	sp, #16
 80142b0:	bd10      	pop	{r4, pc}
 80142b2:	bf00      	nop
 80142b4:	3b9aca00 	.word	0x3b9aca00

080142b8 <on_full_output_buffer_fragmented>:
 80142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	460c      	mov	r4, r1
 80142be:	b08a      	sub	sp, #40	@ 0x28
 80142c0:	4606      	mov	r6, r0
 80142c2:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80142c6:	f104 0008 	add.w	r0, r4, #8
 80142ca:	f7ff ff45 	bl	8014158 <uxr_get_output_reliable_stream>
 80142ce:	4605      	mov	r5, r0
 80142d0:	f006 faac 	bl	801a82c <get_available_free_slots>
 80142d4:	b968      	cbnz	r0, 80142f2 <on_full_output_buffer_fragmented+0x3a>
 80142d6:	4620      	mov	r0, r4
 80142d8:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80142dc:	4798      	blx	r3
 80142de:	b918      	cbnz	r0, 80142e8 <on_full_output_buffer_fragmented+0x30>
 80142e0:	2001      	movs	r0, #1
 80142e2:	b00a      	add	sp, #40	@ 0x28
 80142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e8:	4628      	mov	r0, r5
 80142ea:	f006 fa9f 	bl	801a82c <get_available_free_slots>
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d0f6      	beq.n	80142e0 <on_full_output_buffer_fragmented+0x28>
 80142f2:	8929      	ldrh	r1, [r5, #8]
 80142f4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80142f8:	89eb      	ldrh	r3, [r5, #14]
 80142fa:	7b28      	ldrb	r0, [r5, #12]
 80142fc:	686f      	ldr	r7, [r5, #4]
 80142fe:	1a12      	subs	r2, r2, r0
 8014300:	fbb3 f0f1 	udiv	r0, r3, r1
 8014304:	fbb7 f7f1 	udiv	r7, r7, r1
 8014308:	fb01 3110 	mls	r1, r1, r0, r3
 801430c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014310:	b289      	uxth	r1, r1
 8014312:	fb07 f101 	mul.w	r1, r7, r1
 8014316:	3f04      	subs	r7, #4
 8014318:	443a      	add	r2, r7
 801431a:	3104      	adds	r1, #4
 801431c:	fa1f f882 	uxth.w	r8, r2
 8014320:	463a      	mov	r2, r7
 8014322:	eba3 0308 	sub.w	r3, r3, r8
 8014326:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801432a:	682b      	ldr	r3, [r5, #0]
 801432c:	4419      	add	r1, r3
 801432e:	2300      	movs	r3, #0
 8014330:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014334:	9000      	str	r0, [sp, #0]
 8014336:	a802      	add	r0, sp, #8
 8014338:	f7fd fb28 	bl	801198c <ucdr_init_buffer_origin_offset>
 801433c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014340:	f102 0308 	add.w	r3, r2, #8
 8014344:	42bb      	cmp	r3, r7
 8014346:	d927      	bls.n	8014398 <on_full_output_buffer_fragmented+0xe0>
 8014348:	4642      	mov	r2, r8
 801434a:	2300      	movs	r3, #0
 801434c:	210d      	movs	r1, #13
 801434e:	a802      	add	r0, sp, #8
 8014350:	f7ff ff3a 	bl	80141c8 <uxr_buffer_submessage_header>
 8014354:	8929      	ldrh	r1, [r5, #8]
 8014356:	89eb      	ldrh	r3, [r5, #14]
 8014358:	686a      	ldr	r2, [r5, #4]
 801435a:	fbb3 f0f1 	udiv	r0, r3, r1
 801435e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014362:	fb01 3310 	mls	r3, r1, r0, r3
 8014366:	b29b      	uxth	r3, r3
 8014368:	fb02 f303 	mul.w	r3, r2, r3
 801436c:	682a      	ldr	r2, [r5, #0]
 801436e:	50d7      	str	r7, [r2, r3]
 8014370:	2101      	movs	r1, #1
 8014372:	89e8      	ldrh	r0, [r5, #14]
 8014374:	f006 fa7c 	bl	801a870 <uxr_seq_num_add>
 8014378:	9904      	ldr	r1, [sp, #16]
 801437a:	9a03      	ldr	r2, [sp, #12]
 801437c:	81e8      	strh	r0, [r5, #14]
 801437e:	4630      	mov	r0, r6
 8014380:	1a52      	subs	r2, r2, r1
 8014382:	f7fd fb15 	bl	80119b0 <ucdr_init_buffer>
 8014386:	4630      	mov	r0, r6
 8014388:	4622      	mov	r2, r4
 801438a:	490f      	ldr	r1, [pc, #60]	@ (80143c8 <on_full_output_buffer_fragmented+0x110>)
 801438c:	f7fd fae4 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 8014390:	2000      	movs	r0, #0
 8014392:	b00a      	add	sp, #40	@ 0x28
 8014394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014398:	b292      	uxth	r2, r2
 801439a:	2302      	movs	r3, #2
 801439c:	210d      	movs	r1, #13
 801439e:	a802      	add	r0, sp, #8
 80143a0:	f7ff ff12 	bl	80141c8 <uxr_buffer_submessage_header>
 80143a4:	8928      	ldrh	r0, [r5, #8]
 80143a6:	89eb      	ldrh	r3, [r5, #14]
 80143a8:	6869      	ldr	r1, [r5, #4]
 80143aa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80143ae:	fbb3 f7f0 	udiv	r7, r3, r0
 80143b2:	fbb1 f1f0 	udiv	r1, r1, r0
 80143b6:	fb00 3317 	mls	r3, r0, r7, r3
 80143ba:	3208      	adds	r2, #8
 80143bc:	b29b      	uxth	r3, r3
 80143be:	fb01 f303 	mul.w	r3, r1, r3
 80143c2:	6829      	ldr	r1, [r5, #0]
 80143c4:	50ca      	str	r2, [r1, r3]
 80143c6:	e7d3      	b.n	8014370 <on_full_output_buffer_fragmented+0xb8>
 80143c8:	080142b9 	.word	0x080142b9

080143cc <uxr_prepare_output_stream>:
 80143cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ce:	b087      	sub	sp, #28
 80143d0:	2707      	movs	r7, #7
 80143d2:	2500      	movs	r5, #0
 80143d4:	461c      	mov	r4, r3
 80143d6:	4606      	mov	r6, r0
 80143d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80143dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80143de:	e9cd 7500 	strd	r7, r5, [sp]
 80143e2:	3204      	adds	r2, #4
 80143e4:	f7fe ffc8 	bl	8013378 <uxr_prepare_stream_to_write_submessage>
 80143e8:	f080 0201 	eor.w	r2, r0, #1
 80143ec:	b2d2      	uxtb	r2, r2
 80143ee:	75a2      	strb	r2, [r4, #22]
 80143f0:	b112      	cbz	r2, 80143f8 <uxr_prepare_output_stream+0x2c>
 80143f2:	4628      	mov	r0, r5
 80143f4:	b007      	add	sp, #28
 80143f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143f8:	aa05      	add	r2, sp, #20
 80143fa:	9902      	ldr	r1, [sp, #8]
 80143fc:	4630      	mov	r0, r6
 80143fe:	f7ff f8f7 	bl	80135f0 <uxr_init_base_object_request>
 8014402:	a905      	add	r1, sp, #20
 8014404:	4605      	mov	r5, r0
 8014406:	4620      	mov	r0, r4
 8014408:	f000 ffb2 	bl	8015370 <uxr_serialize_WRITE_DATA_Payload_Data>
 801440c:	69a6      	ldr	r6, [r4, #24]
 801440e:	69e7      	ldr	r7, [r4, #28]
 8014410:	4620      	mov	r0, r4
 8014412:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014416:	1a52      	subs	r2, r2, r1
 8014418:	f7fd faca 	bl	80119b0 <ucdr_init_buffer>
 801441c:	4620      	mov	r0, r4
 801441e:	463a      	mov	r2, r7
 8014420:	4631      	mov	r1, r6
 8014422:	f7fd fa99 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 8014426:	4628      	mov	r0, r5
 8014428:	b007      	add	sp, #28
 801442a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801442c <uxr_prepare_output_stream_fragmented>:
 801442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	b091      	sub	sp, #68	@ 0x44
 8014432:	4605      	mov	r5, r0
 8014434:	3008      	adds	r0, #8
 8014436:	461e      	mov	r6, r3
 8014438:	9105      	str	r1, [sp, #20]
 801443a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801443e:	9204      	str	r2, [sp, #16]
 8014440:	f7ff fe8a 	bl	8014158 <uxr_get_output_reliable_stream>
 8014444:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014448:	2b01      	cmp	r3, #1
 801444a:	f000 8093 	beq.w	8014574 <uxr_prepare_output_stream_fragmented+0x148>
 801444e:	4604      	mov	r4, r0
 8014450:	2800      	cmp	r0, #0
 8014452:	f000 808f 	beq.w	8014574 <uxr_prepare_output_stream_fragmented+0x148>
 8014456:	f006 f9e9 	bl	801a82c <get_available_free_slots>
 801445a:	2800      	cmp	r0, #0
 801445c:	f000 8085 	beq.w	801456a <uxr_prepare_output_stream_fragmented+0x13e>
 8014460:	8923      	ldrh	r3, [r4, #8]
 8014462:	89e7      	ldrh	r7, [r4, #14]
 8014464:	6862      	ldr	r2, [r4, #4]
 8014466:	fbb7 f9f3 	udiv	r9, r7, r3
 801446a:	fbb2 f2f3 	udiv	r2, r2, r3
 801446e:	fb03 7919 	mls	r9, r3, r9, r7
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	f1a2 0b04 	sub.w	fp, r2, #4
 8014478:	9203      	str	r2, [sp, #12]
 801447a:	fa1f f989 	uxth.w	r9, r9
 801447e:	fb02 f909 	mul.w	r9, r2, r9
 8014482:	f109 0904 	add.w	r9, r9, #4
 8014486:	4499      	add	r9, r3
 8014488:	7b23      	ldrb	r3, [r4, #12]
 801448a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801448e:	4543      	cmp	r3, r8
 8014490:	d37c      	bcc.n	801458c <uxr_prepare_output_stream_fragmented+0x160>
 8014492:	f1ab 0a04 	sub.w	sl, fp, #4
 8014496:	465a      	mov	r2, fp
 8014498:	4649      	mov	r1, r9
 801449a:	a808      	add	r0, sp, #32
 801449c:	ebaa 0a03 	sub.w	sl, sl, r3
 80144a0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80144a2:	f8cd 8000 	str.w	r8, [sp]
 80144a6:	3308      	adds	r3, #8
 80144a8:	fa1f fa8a 	uxth.w	sl, sl
 80144ac:	9302      	str	r3, [sp, #8]
 80144ae:	2300      	movs	r3, #0
 80144b0:	f7fd fa6c 	bl	801198c <ucdr_init_buffer_origin_offset>
 80144b4:	9b02      	ldr	r3, [sp, #8]
 80144b6:	4652      	mov	r2, sl
 80144b8:	210d      	movs	r1, #13
 80144ba:	455b      	cmp	r3, fp
 80144bc:	bf34      	ite	cc
 80144be:	2302      	movcc	r3, #2
 80144c0:	2300      	movcs	r3, #0
 80144c2:	a808      	add	r0, sp, #32
 80144c4:	f7ff fe80 	bl	80141c8 <uxr_buffer_submessage_header>
 80144c8:	8921      	ldrh	r1, [r4, #8]
 80144ca:	6863      	ldr	r3, [r4, #4]
 80144cc:	4638      	mov	r0, r7
 80144ce:	fbb7 f2f1 	udiv	r2, r7, r1
 80144d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80144d6:	fb01 7212 	mls	r2, r1, r2, r7
 80144da:	2101      	movs	r1, #1
 80144dc:	b292      	uxth	r2, r2
 80144de:	fb02 f303 	mul.w	r3, r2, r3
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	f842 b003 	str.w	fp, [r2, r3]
 80144e8:	f006 f9c2 	bl	801a870 <uxr_seq_num_add>
 80144ec:	9b03      	ldr	r3, [sp, #12]
 80144ee:	f108 0104 	add.w	r1, r8, #4
 80144f2:	4607      	mov	r7, r0
 80144f4:	f1a3 0208 	sub.w	r2, r3, #8
 80144f8:	4630      	mov	r0, r6
 80144fa:	4449      	add	r1, r9
 80144fc:	eba2 0208 	sub.w	r2, r2, r8
 8014500:	f7fd fa56 	bl	80119b0 <ucdr_init_buffer>
 8014504:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014506:	2107      	movs	r1, #7
 8014508:	81e7      	strh	r7, [r4, #14]
 801450a:	1d1a      	adds	r2, r3, #4
 801450c:	2300      	movs	r3, #0
 801450e:	4630      	mov	r0, r6
 8014510:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014514:	bf28      	it	cs
 8014516:	461a      	movcs	r2, r3
 8014518:	b292      	uxth	r2, r2
 801451a:	f7ff fe55 	bl	80141c8 <uxr_buffer_submessage_header>
 801451e:	aa07      	add	r2, sp, #28
 8014520:	9904      	ldr	r1, [sp, #16]
 8014522:	4628      	mov	r0, r5
 8014524:	f7ff f864 	bl	80135f0 <uxr_init_base_object_request>
 8014528:	4604      	mov	r4, r0
 801452a:	b320      	cbz	r0, 8014576 <uxr_prepare_output_stream_fragmented+0x14a>
 801452c:	a907      	add	r1, sp, #28
 801452e:	4630      	mov	r0, r6
 8014530:	f000 ff1e 	bl	8015370 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014534:	4630      	mov	r0, r6
 8014536:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801453a:	1a52      	subs	r2, r2, r1
 801453c:	f7fd fa38 	bl	80119b0 <ucdr_init_buffer>
 8014540:	9b05      	ldr	r3, [sp, #20]
 8014542:	9a02      	ldr	r2, [sp, #8]
 8014544:	4630      	mov	r0, r6
 8014546:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801454a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801454c:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8014550:	462a      	mov	r2, r5
 8014552:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014556:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014558:	4918      	ldr	r1, [pc, #96]	@ (80145bc <uxr_prepare_output_stream_fragmented+0x190>)
 801455a:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801455e:	f7fd f9fb 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 8014562:	4620      	mov	r0, r4
 8014564:	b011      	add	sp, #68	@ 0x44
 8014566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801456c:	4628      	mov	r0, r5
 801456e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014570:	4798      	blx	r3
 8014572:	b920      	cbnz	r0, 801457e <uxr_prepare_output_stream_fragmented+0x152>
 8014574:	2400      	movs	r4, #0
 8014576:	4620      	mov	r0, r4
 8014578:	b011      	add	sp, #68	@ 0x44
 801457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801457e:	4620      	mov	r0, r4
 8014580:	f006 f954 	bl	801a82c <get_available_free_slots>
 8014584:	2800      	cmp	r0, #0
 8014586:	f47f af6b 	bne.w	8014460 <uxr_prepare_output_stream_fragmented+0x34>
 801458a:	e7f3      	b.n	8014574 <uxr_prepare_output_stream_fragmented+0x148>
 801458c:	4638      	mov	r0, r7
 801458e:	2101      	movs	r1, #1
 8014590:	f006 f96e 	bl	801a870 <uxr_seq_num_add>
 8014594:	8922      	ldrh	r2, [r4, #8]
 8014596:	6863      	ldr	r3, [r4, #4]
 8014598:	4607      	mov	r7, r0
 801459a:	fbb3 f9f2 	udiv	r9, r3, r2
 801459e:	fbb0 f3f2 	udiv	r3, r0, r2
 80145a2:	fb02 0313 	mls	r3, r2, r3, r0
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	fb03 f909 	mul.w	r9, r3, r9
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	f109 0904 	add.w	r9, r9, #4
 80145b2:	4499      	add	r9, r3
 80145b4:	7b23      	ldrb	r3, [r4, #12]
 80145b6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80145ba:	e76a      	b.n	8014492 <uxr_prepare_output_stream_fragmented+0x66>
 80145bc:	080142b9 	.word	0x080142b9

080145c0 <uxr_serialize_message_header>:
 80145c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145c2:	4616      	mov	r6, r2
 80145c4:	b083      	sub	sp, #12
 80145c6:	4604      	mov	r4, r0
 80145c8:	460d      	mov	r5, r1
 80145ca:	9301      	str	r3, [sp, #4]
 80145cc:	9f08      	ldr	r7, [sp, #32]
 80145ce:	f7fc f8a3 	bl	8010718 <ucdr_serialize_uint8_t>
 80145d2:	4631      	mov	r1, r6
 80145d4:	4620      	mov	r0, r4
 80145d6:	f7fc f89f 	bl	8010718 <ucdr_serialize_uint8_t>
 80145da:	9a01      	ldr	r2, [sp, #4]
 80145dc:	2101      	movs	r1, #1
 80145de:	4620      	mov	r0, r4
 80145e0:	f7fc f946 	bl	8010870 <ucdr_serialize_endian_uint16_t>
 80145e4:	062b      	lsls	r3, r5, #24
 80145e6:	d501      	bpl.n	80145ec <uxr_serialize_message_header+0x2c>
 80145e8:	b003      	add	sp, #12
 80145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ec:	2204      	movs	r2, #4
 80145ee:	4639      	mov	r1, r7
 80145f0:	4620      	mov	r0, r4
 80145f2:	b003      	add	sp, #12
 80145f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145f8:	f005 ba62 	b.w	8019ac0 <ucdr_serialize_array_uint8_t>

080145fc <uxr_deserialize_message_header>:
 80145fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145fe:	4616      	mov	r6, r2
 8014600:	b083      	sub	sp, #12
 8014602:	4604      	mov	r4, r0
 8014604:	460d      	mov	r5, r1
 8014606:	9301      	str	r3, [sp, #4]
 8014608:	9f08      	ldr	r7, [sp, #32]
 801460a:	f7fc f89b 	bl	8010744 <ucdr_deserialize_uint8_t>
 801460e:	4631      	mov	r1, r6
 8014610:	4620      	mov	r0, r4
 8014612:	f7fc f897 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014616:	9a01      	ldr	r2, [sp, #4]
 8014618:	2101      	movs	r1, #1
 801461a:	4620      	mov	r0, r4
 801461c:	f7fc fa1c 	bl	8010a58 <ucdr_deserialize_endian_uint16_t>
 8014620:	f995 3000 	ldrsb.w	r3, [r5]
 8014624:	2b00      	cmp	r3, #0
 8014626:	da01      	bge.n	801462c <uxr_deserialize_message_header+0x30>
 8014628:	b003      	add	sp, #12
 801462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801462c:	2204      	movs	r2, #4
 801462e:	4639      	mov	r1, r7
 8014630:	4620      	mov	r0, r4
 8014632:	b003      	add	sp, #12
 8014634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014638:	f005 baa6 	b.w	8019b88 <ucdr_deserialize_array_uint8_t>

0801463c <uxr_serialize_submessage_header>:
 801463c:	b530      	push	{r4, r5, lr}
 801463e:	4615      	mov	r5, r2
 8014640:	b083      	sub	sp, #12
 8014642:	4604      	mov	r4, r0
 8014644:	9301      	str	r3, [sp, #4]
 8014646:	f7fc f867 	bl	8010718 <ucdr_serialize_uint8_t>
 801464a:	4629      	mov	r1, r5
 801464c:	4620      	mov	r0, r4
 801464e:	f7fc f863 	bl	8010718 <ucdr_serialize_uint8_t>
 8014652:	9a01      	ldr	r2, [sp, #4]
 8014654:	2101      	movs	r1, #1
 8014656:	4620      	mov	r0, r4
 8014658:	b003      	add	sp, #12
 801465a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801465e:	f7fc b907 	b.w	8010870 <ucdr_serialize_endian_uint16_t>
 8014662:	bf00      	nop

08014664 <uxr_deserialize_submessage_header>:
 8014664:	b530      	push	{r4, r5, lr}
 8014666:	4615      	mov	r5, r2
 8014668:	b083      	sub	sp, #12
 801466a:	4604      	mov	r4, r0
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	f7fc f869 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014672:	4629      	mov	r1, r5
 8014674:	4620      	mov	r0, r4
 8014676:	f7fc f865 	bl	8010744 <ucdr_deserialize_uint8_t>
 801467a:	9a01      	ldr	r2, [sp, #4]
 801467c:	2101      	movs	r1, #1
 801467e:	4620      	mov	r0, r4
 8014680:	b003      	add	sp, #12
 8014682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014686:	f7fc b9e7 	b.w	8010a58 <ucdr_deserialize_endian_uint16_t>
 801468a:	bf00      	nop

0801468c <uxr_serialize_CLIENT_Representation>:
 801468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014690:	2204      	movs	r2, #4
 8014692:	460e      	mov	r6, r1
 8014694:	4605      	mov	r5, r0
 8014696:	f005 fa13 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 801469a:	4607      	mov	r7, r0
 801469c:	2202      	movs	r2, #2
 801469e:	1d31      	adds	r1, r6, #4
 80146a0:	4628      	mov	r0, r5
 80146a2:	f005 fa0d 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80146a6:	4038      	ands	r0, r7
 80146a8:	2202      	movs	r2, #2
 80146aa:	1db1      	adds	r1, r6, #6
 80146ac:	b2c7      	uxtb	r7, r0
 80146ae:	4628      	mov	r0, r5
 80146b0:	f005 fa06 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80146b4:	2204      	movs	r2, #4
 80146b6:	4007      	ands	r7, r0
 80146b8:	f106 0108 	add.w	r1, r6, #8
 80146bc:	4628      	mov	r0, r5
 80146be:	f005 f9ff 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80146c2:	4007      	ands	r7, r0
 80146c4:	7b31      	ldrb	r1, [r6, #12]
 80146c6:	4628      	mov	r0, r5
 80146c8:	f7fc f826 	bl	8010718 <ucdr_serialize_uint8_t>
 80146cc:	7b71      	ldrb	r1, [r6, #13]
 80146ce:	4007      	ands	r7, r0
 80146d0:	4628      	mov	r0, r5
 80146d2:	f7fb fff3 	bl	80106bc <ucdr_serialize_bool>
 80146d6:	7b73      	ldrb	r3, [r6, #13]
 80146d8:	ea07 0800 	and.w	r8, r7, r0
 80146dc:	b93b      	cbnz	r3, 80146ee <uxr_serialize_CLIENT_Representation+0x62>
 80146de:	8bb1      	ldrh	r1, [r6, #28]
 80146e0:	4628      	mov	r0, r5
 80146e2:	f7fc f845 	bl	8010770 <ucdr_serialize_uint16_t>
 80146e6:	ea08 0000 	and.w	r0, r8, r0
 80146ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ee:	6931      	ldr	r1, [r6, #16]
 80146f0:	4628      	mov	r0, r5
 80146f2:	f7fc fa27 	bl	8010b44 <ucdr_serialize_uint32_t>
 80146f6:	6933      	ldr	r3, [r6, #16]
 80146f8:	b1e3      	cbz	r3, 8014734 <uxr_serialize_CLIENT_Representation+0xa8>
 80146fa:	b1c0      	cbz	r0, 801472e <uxr_serialize_CLIENT_Representation+0xa2>
 80146fc:	4637      	mov	r7, r6
 80146fe:	f04f 0900 	mov.w	r9, #0
 8014702:	e000      	b.n	8014706 <uxr_serialize_CLIENT_Representation+0x7a>
 8014704:	b19c      	cbz	r4, 801472e <uxr_serialize_CLIENT_Representation+0xa2>
 8014706:	6979      	ldr	r1, [r7, #20]
 8014708:	4628      	mov	r0, r5
 801470a:	f005 fb4f 	bl	8019dac <ucdr_serialize_string>
 801470e:	69b9      	ldr	r1, [r7, #24]
 8014710:	4604      	mov	r4, r0
 8014712:	4628      	mov	r0, r5
 8014714:	f005 fb4a 	bl	8019dac <ucdr_serialize_string>
 8014718:	f109 0901 	add.w	r9, r9, #1
 801471c:	6933      	ldr	r3, [r6, #16]
 801471e:	4004      	ands	r4, r0
 8014720:	3708      	adds	r7, #8
 8014722:	4599      	cmp	r9, r3
 8014724:	b2e4      	uxtb	r4, r4
 8014726:	d3ed      	bcc.n	8014704 <uxr_serialize_CLIENT_Representation+0x78>
 8014728:	ea08 0804 	and.w	r8, r8, r4
 801472c:	e7d7      	b.n	80146de <uxr_serialize_CLIENT_Representation+0x52>
 801472e:	f04f 0800 	mov.w	r8, #0
 8014732:	e7d4      	b.n	80146de <uxr_serialize_CLIENT_Representation+0x52>
 8014734:	ea08 0800 	and.w	r8, r8, r0
 8014738:	e7d1      	b.n	80146de <uxr_serialize_CLIENT_Representation+0x52>
 801473a:	bf00      	nop

0801473c <uxr_deserialize_CLIENT_Representation>:
 801473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014740:	2204      	movs	r2, #4
 8014742:	460c      	mov	r4, r1
 8014744:	4605      	mov	r5, r0
 8014746:	f005 fa1f 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 801474a:	4607      	mov	r7, r0
 801474c:	2202      	movs	r2, #2
 801474e:	1d21      	adds	r1, r4, #4
 8014750:	4628      	mov	r0, r5
 8014752:	f005 fa19 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014756:	4038      	ands	r0, r7
 8014758:	2202      	movs	r2, #2
 801475a:	1da1      	adds	r1, r4, #6
 801475c:	b2c6      	uxtb	r6, r0
 801475e:	4628      	mov	r0, r5
 8014760:	f005 fa12 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014764:	2204      	movs	r2, #4
 8014766:	4006      	ands	r6, r0
 8014768:	f104 0108 	add.w	r1, r4, #8
 801476c:	4628      	mov	r0, r5
 801476e:	f005 fa0b 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014772:	4006      	ands	r6, r0
 8014774:	f104 010c 	add.w	r1, r4, #12
 8014778:	4628      	mov	r0, r5
 801477a:	f7fb ffe3 	bl	8010744 <ucdr_deserialize_uint8_t>
 801477e:	f104 010d 	add.w	r1, r4, #13
 8014782:	ea06 0700 	and.w	r7, r6, r0
 8014786:	4628      	mov	r0, r5
 8014788:	f7fb ffae 	bl	80106e8 <ucdr_deserialize_bool>
 801478c:	7b63      	ldrb	r3, [r4, #13]
 801478e:	4007      	ands	r7, r0
 8014790:	b93b      	cbnz	r3, 80147a2 <uxr_deserialize_CLIENT_Representation+0x66>
 8014792:	f104 011c 	add.w	r1, r4, #28
 8014796:	4628      	mov	r0, r5
 8014798:	f7fc f8ea 	bl	8010970 <ucdr_deserialize_uint16_t>
 801479c:	4038      	ands	r0, r7
 801479e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147a2:	f104 0110 	add.w	r1, r4, #16
 80147a6:	4628      	mov	r0, r5
 80147a8:	f7fc fafc 	bl	8010da4 <ucdr_deserialize_uint32_t>
 80147ac:	6923      	ldr	r3, [r4, #16]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d903      	bls.n	80147ba <uxr_deserialize_CLIENT_Representation+0x7e>
 80147b2:	2301      	movs	r3, #1
 80147b4:	2700      	movs	r7, #0
 80147b6:	75ab      	strb	r3, [r5, #22]
 80147b8:	e7eb      	b.n	8014792 <uxr_deserialize_CLIENT_Representation+0x56>
 80147ba:	b30b      	cbz	r3, 8014800 <uxr_deserialize_CLIENT_Representation+0xc4>
 80147bc:	b1f0      	cbz	r0, 80147fc <uxr_deserialize_CLIENT_Representation+0xc0>
 80147be:	46a0      	mov	r8, r4
 80147c0:	f04f 0900 	mov.w	r9, #0
 80147c4:	e000      	b.n	80147c8 <uxr_deserialize_CLIENT_Representation+0x8c>
 80147c6:	b1ce      	cbz	r6, 80147fc <uxr_deserialize_CLIENT_Representation+0xc0>
 80147c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80147cc:	f108 0808 	add.w	r8, r8, #8
 80147d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147d4:	4628      	mov	r0, r5
 80147d6:	f005 faf9 	bl	8019dcc <ucdr_deserialize_string>
 80147da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80147de:	4606      	mov	r6, r0
 80147e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147e4:	4628      	mov	r0, r5
 80147e6:	f109 0901 	add.w	r9, r9, #1
 80147ea:	f005 faef 	bl	8019dcc <ucdr_deserialize_string>
 80147ee:	6923      	ldr	r3, [r4, #16]
 80147f0:	4006      	ands	r6, r0
 80147f2:	4599      	cmp	r9, r3
 80147f4:	b2f6      	uxtb	r6, r6
 80147f6:	d3e6      	bcc.n	80147c6 <uxr_deserialize_CLIENT_Representation+0x8a>
 80147f8:	4037      	ands	r7, r6
 80147fa:	e7ca      	b.n	8014792 <uxr_deserialize_CLIENT_Representation+0x56>
 80147fc:	2700      	movs	r7, #0
 80147fe:	e7c8      	b.n	8014792 <uxr_deserialize_CLIENT_Representation+0x56>
 8014800:	4007      	ands	r7, r0
 8014802:	e7c6      	b.n	8014792 <uxr_deserialize_CLIENT_Representation+0x56>

08014804 <uxr_serialize_AGENT_Representation>:
 8014804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014808:	2204      	movs	r2, #4
 801480a:	460f      	mov	r7, r1
 801480c:	4605      	mov	r5, r0
 801480e:	f005 f957 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014812:	4604      	mov	r4, r0
 8014814:	2202      	movs	r2, #2
 8014816:	1d39      	adds	r1, r7, #4
 8014818:	4628      	mov	r0, r5
 801481a:	f005 f951 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 801481e:	4020      	ands	r0, r4
 8014820:	2202      	movs	r2, #2
 8014822:	1db9      	adds	r1, r7, #6
 8014824:	b2c4      	uxtb	r4, r0
 8014826:	4628      	mov	r0, r5
 8014828:	f005 f94a 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 801482c:	7a39      	ldrb	r1, [r7, #8]
 801482e:	4004      	ands	r4, r0
 8014830:	4628      	mov	r0, r5
 8014832:	f7fb ff43 	bl	80106bc <ucdr_serialize_bool>
 8014836:	7a3b      	ldrb	r3, [r7, #8]
 8014838:	ea00 0804 	and.w	r8, r0, r4
 801483c:	b913      	cbnz	r3, 8014844 <uxr_serialize_AGENT_Representation+0x40>
 801483e:	4640      	mov	r0, r8
 8014840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014844:	68f9      	ldr	r1, [r7, #12]
 8014846:	4628      	mov	r0, r5
 8014848:	f7fc f97c 	bl	8010b44 <ucdr_serialize_uint32_t>
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	b303      	cbz	r3, 8014892 <uxr_serialize_AGENT_Representation+0x8e>
 8014850:	b1d0      	cbz	r0, 8014888 <uxr_serialize_AGENT_Representation+0x84>
 8014852:	463e      	mov	r6, r7
 8014854:	f04f 0900 	mov.w	r9, #0
 8014858:	e000      	b.n	801485c <uxr_serialize_AGENT_Representation+0x58>
 801485a:	b1ac      	cbz	r4, 8014888 <uxr_serialize_AGENT_Representation+0x84>
 801485c:	6931      	ldr	r1, [r6, #16]
 801485e:	4628      	mov	r0, r5
 8014860:	f005 faa4 	bl	8019dac <ucdr_serialize_string>
 8014864:	6971      	ldr	r1, [r6, #20]
 8014866:	4604      	mov	r4, r0
 8014868:	4628      	mov	r0, r5
 801486a:	f005 fa9f 	bl	8019dac <ucdr_serialize_string>
 801486e:	f109 0901 	add.w	r9, r9, #1
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	4004      	ands	r4, r0
 8014876:	3608      	adds	r6, #8
 8014878:	4599      	cmp	r9, r3
 801487a:	b2e4      	uxtb	r4, r4
 801487c:	d3ed      	bcc.n	801485a <uxr_serialize_AGENT_Representation+0x56>
 801487e:	ea08 0804 	and.w	r8, r8, r4
 8014882:	4640      	mov	r0, r8
 8014884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014888:	f04f 0800 	mov.w	r8, #0
 801488c:	4640      	mov	r0, r8
 801488e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014892:	ea08 0800 	and.w	r8, r8, r0
 8014896:	e7d2      	b.n	801483e <uxr_serialize_AGENT_Representation+0x3a>

08014898 <uxr_serialize_DATAWRITER_Representation>:
 8014898:	b570      	push	{r4, r5, r6, lr}
 801489a:	460d      	mov	r5, r1
 801489c:	7809      	ldrb	r1, [r1, #0]
 801489e:	4606      	mov	r6, r0
 80148a0:	f7fb ff3a 	bl	8010718 <ucdr_serialize_uint8_t>
 80148a4:	4604      	mov	r4, r0
 80148a6:	b130      	cbz	r0, 80148b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80148a8:	782b      	ldrb	r3, [r5, #0]
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d00c      	beq.n	80148c8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80148ae:	2b03      	cmp	r3, #3
 80148b0:	d010      	beq.n	80148d4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d008      	beq.n	80148c8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80148b6:	2202      	movs	r2, #2
 80148b8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80148bc:	4630      	mov	r0, r6
 80148be:	f005 f8ff 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80148c2:	4020      	ands	r0, r4
 80148c4:	b2c0      	uxtb	r0, r0
 80148c6:	bd70      	pop	{r4, r5, r6, pc}
 80148c8:	6869      	ldr	r1, [r5, #4]
 80148ca:	4630      	mov	r0, r6
 80148cc:	f005 fa6e 	bl	8019dac <ucdr_serialize_string>
 80148d0:	4604      	mov	r4, r0
 80148d2:	e7f0      	b.n	80148b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80148d4:	4629      	mov	r1, r5
 80148d6:	4630      	mov	r0, r6
 80148d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80148dc:	3104      	adds	r1, #4
 80148de:	f7fd f907 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 80148e2:	4604      	mov	r4, r0
 80148e4:	e7e7      	b.n	80148b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80148e6:	bf00      	nop

080148e8 <uxr_serialize_ObjectVariant.part.0>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	780b      	ldrb	r3, [r1, #0]
 80148ec:	460c      	mov	r4, r1
 80148ee:	4605      	mov	r5, r0
 80148f0:	3b01      	subs	r3, #1
 80148f2:	2b0d      	cmp	r3, #13
 80148f4:	d854      	bhi.n	80149a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80148f6:	e8df f003 	tbb	[pc, r3]
 80148fa:	0730      	.short	0x0730
 80148fc:	07071b1b 	.word	0x07071b1b
 8014900:	0c530707 	.word	0x0c530707
 8014904:	494e0c0c 	.word	0x494e0c0c
 8014908:	3104      	adds	r1, #4
 801490a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801490e:	f7ff bfc3 	b.w	8014898 <uxr_serialize_DATAWRITER_Representation>
 8014912:	7909      	ldrb	r1, [r1, #4]
 8014914:	f7fb ff00 	bl	8010718 <ucdr_serialize_uint8_t>
 8014918:	b1e8      	cbz	r0, 8014956 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801491a:	7923      	ldrb	r3, [r4, #4]
 801491c:	2b01      	cmp	r3, #1
 801491e:	d001      	beq.n	8014924 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014920:	2b02      	cmp	r3, #2
 8014922:	d13d      	bne.n	80149a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014924:	68a1      	ldr	r1, [r4, #8]
 8014926:	4628      	mov	r0, r5
 8014928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801492c:	f005 ba3e 	b.w	8019dac <ucdr_serialize_string>
 8014930:	7909      	ldrb	r1, [r1, #4]
 8014932:	f7fb fef1 	bl	8010718 <ucdr_serialize_uint8_t>
 8014936:	4606      	mov	r6, r0
 8014938:	b120      	cbz	r0, 8014944 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801493a:	7923      	ldrb	r3, [r4, #4]
 801493c:	2b02      	cmp	r3, #2
 801493e:	d039      	beq.n	80149b4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014940:	2b03      	cmp	r3, #3
 8014942:	d02f      	beq.n	80149a4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014944:	2202      	movs	r2, #2
 8014946:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801494a:	4628      	mov	r0, r5
 801494c:	f005 f8b8 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014950:	4030      	ands	r0, r6
 8014952:	b2c0      	uxtb	r0, r0
 8014954:	bd70      	pop	{r4, r5, r6, pc}
 8014956:	2000      	movs	r0, #0
 8014958:	bd70      	pop	{r4, r5, r6, pc}
 801495a:	7909      	ldrb	r1, [r1, #4]
 801495c:	f7fb fedc 	bl	8010718 <ucdr_serialize_uint8_t>
 8014960:	4606      	mov	r6, r0
 8014962:	b158      	cbz	r0, 801497c <uxr_serialize_ObjectVariant.part.0+0x94>
 8014964:	7923      	ldrb	r3, [r4, #4]
 8014966:	2b02      	cmp	r3, #2
 8014968:	d003      	beq.n	8014972 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801496a:	2b03      	cmp	r3, #3
 801496c:	d028      	beq.n	80149c0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801496e:	2b01      	cmp	r3, #1
 8014970:	d104      	bne.n	801497c <uxr_serialize_ObjectVariant.part.0+0x94>
 8014972:	68a1      	ldr	r1, [r4, #8]
 8014974:	4628      	mov	r0, r5
 8014976:	f005 fa19 	bl	8019dac <ucdr_serialize_string>
 801497a:	4606      	mov	r6, r0
 801497c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8014980:	4628      	mov	r0, r5
 8014982:	f7fc fc05 	bl	8011190 <ucdr_serialize_int16_t>
 8014986:	4030      	ands	r0, r6
 8014988:	b2c0      	uxtb	r0, r0
 801498a:	bd70      	pop	{r4, r5, r6, pc}
 801498c:	3104      	adds	r1, #4
 801498e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014992:	f7ff be7b 	b.w	801468c <uxr_serialize_CLIENT_Representation>
 8014996:	3104      	adds	r1, #4
 8014998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801499c:	f7ff bf32 	b.w	8014804 <uxr_serialize_AGENT_Representation>
 80149a0:	2001      	movs	r0, #1
 80149a2:	bd70      	pop	{r4, r5, r6, pc}
 80149a4:	68a2      	ldr	r2, [r4, #8]
 80149a6:	f104 010c 	add.w	r1, r4, #12
 80149aa:	4628      	mov	r0, r5
 80149ac:	f7fd f8a0 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 80149b0:	4606      	mov	r6, r0
 80149b2:	e7c7      	b.n	8014944 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80149b4:	68a1      	ldr	r1, [r4, #8]
 80149b6:	4628      	mov	r0, r5
 80149b8:	f005 f9f8 	bl	8019dac <ucdr_serialize_string>
 80149bc:	4606      	mov	r6, r0
 80149be:	e7c1      	b.n	8014944 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80149c0:	68a2      	ldr	r2, [r4, #8]
 80149c2:	f104 010c 	add.w	r1, r4, #12
 80149c6:	4628      	mov	r0, r5
 80149c8:	f7fd f892 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 80149cc:	4606      	mov	r6, r0
 80149ce:	e7d5      	b.n	801497c <uxr_serialize_ObjectVariant.part.0+0x94>

080149d0 <uxr_deserialize_DATAWRITER_Representation>:
 80149d0:	b570      	push	{r4, r5, r6, lr}
 80149d2:	4606      	mov	r6, r0
 80149d4:	460d      	mov	r5, r1
 80149d6:	f7fb feb5 	bl	8010744 <ucdr_deserialize_uint8_t>
 80149da:	4604      	mov	r4, r0
 80149dc:	b130      	cbz	r0, 80149ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80149de:	782b      	ldrb	r3, [r5, #0]
 80149e0:	2b02      	cmp	r3, #2
 80149e2:	d00c      	beq.n	80149fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80149e4:	2b03      	cmp	r3, #3
 80149e6:	d012      	beq.n	8014a0e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d008      	beq.n	80149fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80149ec:	2202      	movs	r2, #2
 80149ee:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80149f2:	4630      	mov	r0, r6
 80149f4:	f005 f8c8 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 80149f8:	4020      	ands	r0, r4
 80149fa:	b2c0      	uxtb	r0, r0
 80149fc:	bd70      	pop	{r4, r5, r6, pc}
 80149fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a02:	6869      	ldr	r1, [r5, #4]
 8014a04:	4630      	mov	r0, r6
 8014a06:	f005 f9e1 	bl	8019dcc <ucdr_deserialize_string>
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	e7ee      	b.n	80149ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014a0e:	1d2b      	adds	r3, r5, #4
 8014a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a14:	f105 0108 	add.w	r1, r5, #8
 8014a18:	4630      	mov	r0, r6
 8014a1a:	f7fd f87b 	bl	8011b14 <ucdr_deserialize_sequence_uint8_t>
 8014a1e:	4604      	mov	r4, r0
 8014a20:	e7e4      	b.n	80149ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014a22:	bf00      	nop

08014a24 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014a24:	b570      	push	{r4, r5, r6, lr}
 8014a26:	460d      	mov	r5, r1
 8014a28:	7809      	ldrb	r1, [r1, #0]
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	f7fb fe46 	bl	80106bc <ucdr_serialize_bool>
 8014a30:	782b      	ldrb	r3, [r5, #0]
 8014a32:	4604      	mov	r4, r0
 8014a34:	b94b      	cbnz	r3, 8014a4a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014a36:	7a29      	ldrb	r1, [r5, #8]
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f7fb fe3f 	bl	80106bc <ucdr_serialize_bool>
 8014a3e:	7a2b      	ldrb	r3, [r5, #8]
 8014a40:	4004      	ands	r4, r0
 8014a42:	b2e4      	uxtb	r4, r4
 8014a44:	b943      	cbnz	r3, 8014a58 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014a46:	4620      	mov	r0, r4
 8014a48:	bd70      	pop	{r4, r5, r6, pc}
 8014a4a:	6869      	ldr	r1, [r5, #4]
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f005 f9ad 	bl	8019dac <ucdr_serialize_string>
 8014a52:	4004      	ands	r4, r0
 8014a54:	b2e4      	uxtb	r4, r4
 8014a56:	e7ee      	b.n	8014a36 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014a58:	68e9      	ldr	r1, [r5, #12]
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	f005 f9a6 	bl	8019dac <ucdr_serialize_string>
 8014a60:	4004      	ands	r4, r0
 8014a62:	4620      	mov	r0, r4
 8014a64:	bd70      	pop	{r4, r5, r6, pc}
 8014a66:	bf00      	nop

08014a68 <uxr_serialize_OBJK_Topic_Binary>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	460d      	mov	r5, r1
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	6809      	ldr	r1, [r1, #0]
 8014a70:	f005 f99c 	bl	8019dac <ucdr_serialize_string>
 8014a74:	4604      	mov	r4, r0
 8014a76:	7929      	ldrb	r1, [r5, #4]
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f7fb fe1f 	bl	80106bc <ucdr_serialize_bool>
 8014a7e:	792b      	ldrb	r3, [r5, #4]
 8014a80:	4004      	ands	r4, r0
 8014a82:	b2e4      	uxtb	r4, r4
 8014a84:	b943      	cbnz	r3, 8014a98 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014a86:	7b29      	ldrb	r1, [r5, #12]
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f7fb fe17 	bl	80106bc <ucdr_serialize_bool>
 8014a8e:	7b2b      	ldrb	r3, [r5, #12]
 8014a90:	4004      	ands	r4, r0
 8014a92:	b93b      	cbnz	r3, 8014aa4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014a94:	4620      	mov	r0, r4
 8014a96:	bd70      	pop	{r4, r5, r6, pc}
 8014a98:	68a9      	ldr	r1, [r5, #8]
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	f005 f986 	bl	8019dac <ucdr_serialize_string>
 8014aa0:	4004      	ands	r4, r0
 8014aa2:	e7f0      	b.n	8014a86 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014aa4:	6929      	ldr	r1, [r5, #16]
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	f005 f980 	bl	8019dac <ucdr_serialize_string>
 8014aac:	4004      	ands	r4, r0
 8014aae:	b2e4      	uxtb	r4, r4
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	bd70      	pop	{r4, r5, r6, pc}

08014ab4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab8:	460c      	mov	r4, r1
 8014aba:	7809      	ldrb	r1, [r1, #0]
 8014abc:	4606      	mov	r6, r0
 8014abe:	f7fb fdfd 	bl	80106bc <ucdr_serialize_bool>
 8014ac2:	7823      	ldrb	r3, [r4, #0]
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	b96b      	cbnz	r3, 8014ae4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014ac8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014acc:	4630      	mov	r0, r6
 8014ace:	f7fb fdf5 	bl	80106bc <ucdr_serialize_bool>
 8014ad2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014ad6:	4005      	ands	r5, r0
 8014ad8:	b2ed      	uxtb	r5, r5
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d169      	bne.n	8014bb2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014ade:	4628      	mov	r0, r5
 8014ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae4:	6861      	ldr	r1, [r4, #4]
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	f7fc f82c 	bl	8010b44 <ucdr_serialize_uint32_t>
 8014aec:	6863      	ldr	r3, [r4, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d06b      	beq.n	8014bca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d067      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014af6:	68a1      	ldr	r1, [r4, #8]
 8014af8:	4630      	mov	r0, r6
 8014afa:	f005 f957 	bl	8019dac <ucdr_serialize_string>
 8014afe:	6863      	ldr	r3, [r4, #4]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d953      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	d05e      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b08:	68e1      	ldr	r1, [r4, #12]
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f005 f94e 	bl	8019dac <ucdr_serialize_string>
 8014b10:	6863      	ldr	r3, [r4, #4]
 8014b12:	2b02      	cmp	r3, #2
 8014b14:	d94a      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	d055      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b1a:	6921      	ldr	r1, [r4, #16]
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	f005 f945 	bl	8019dac <ucdr_serialize_string>
 8014b22:	6863      	ldr	r3, [r4, #4]
 8014b24:	2b03      	cmp	r3, #3
 8014b26:	d941      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	d04c      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b2c:	6961      	ldr	r1, [r4, #20]
 8014b2e:	4630      	mov	r0, r6
 8014b30:	f005 f93c 	bl	8019dac <ucdr_serialize_string>
 8014b34:	6863      	ldr	r3, [r4, #4]
 8014b36:	2b04      	cmp	r3, #4
 8014b38:	d938      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d043      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b3e:	69a1      	ldr	r1, [r4, #24]
 8014b40:	4630      	mov	r0, r6
 8014b42:	f005 f933 	bl	8019dac <ucdr_serialize_string>
 8014b46:	6863      	ldr	r3, [r4, #4]
 8014b48:	2b05      	cmp	r3, #5
 8014b4a:	d92f      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d03a      	beq.n	8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b50:	69e1      	ldr	r1, [r4, #28]
 8014b52:	4630      	mov	r0, r6
 8014b54:	f005 f92a 	bl	8019dac <ucdr_serialize_string>
 8014b58:	6863      	ldr	r3, [r4, #4]
 8014b5a:	2b06      	cmp	r3, #6
 8014b5c:	d926      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b5e:	b390      	cbz	r0, 8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b60:	6a21      	ldr	r1, [r4, #32]
 8014b62:	4630      	mov	r0, r6
 8014b64:	f005 f922 	bl	8019dac <ucdr_serialize_string>
 8014b68:	6863      	ldr	r3, [r4, #4]
 8014b6a:	2b07      	cmp	r3, #7
 8014b6c:	d91e      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b6e:	b350      	cbz	r0, 8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014b72:	4630      	mov	r0, r6
 8014b74:	f005 f91a 	bl	8019dac <ucdr_serialize_string>
 8014b78:	6863      	ldr	r3, [r4, #4]
 8014b7a:	2b08      	cmp	r3, #8
 8014b7c:	d916      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b7e:	b310      	cbz	r0, 8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b80:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014b82:	4630      	mov	r0, r6
 8014b84:	f005 f912 	bl	8019dac <ucdr_serialize_string>
 8014b88:	6863      	ldr	r3, [r4, #4]
 8014b8a:	2b09      	cmp	r3, #9
 8014b8c:	d90e      	bls.n	8014bac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014b8e:	b1d0      	cbz	r0, 8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b90:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014b94:	2709      	movs	r7, #9
 8014b96:	e000      	b.n	8014b9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014b98:	b1a8      	cbz	r0, 8014bc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014b9a:	f858 1b04 	ldr.w	r1, [r8], #4
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	f005 f904 	bl	8019dac <ucdr_serialize_string>
 8014ba4:	3701      	adds	r7, #1
 8014ba6:	6862      	ldr	r2, [r4, #4]
 8014ba8:	4297      	cmp	r7, r2
 8014baa:	d3f5      	bcc.n	8014b98 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014bac:	4005      	ands	r5, r0
 8014bae:	b2ed      	uxtb	r5, r5
 8014bb0:	e78a      	b.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014bb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014bb4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f7fc ff99 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 8014bbe:	4005      	ands	r5, r0
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc6:	2500      	movs	r5, #0
 8014bc8:	e77e      	b.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014bca:	4028      	ands	r0, r5
 8014bcc:	b2c5      	uxtb	r5, r0
 8014bce:	e77b      	b.n	8014ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014bd0 <uxr_serialize_OBJK_Publisher_Binary>:
 8014bd0:	b570      	push	{r4, r5, r6, lr}
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	7809      	ldrb	r1, [r1, #0]
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	f7fb fd70 	bl	80106bc <ucdr_serialize_bool>
 8014bdc:	782b      	ldrb	r3, [r5, #0]
 8014bde:	4604      	mov	r4, r0
 8014be0:	b94b      	cbnz	r3, 8014bf6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014be2:	7a29      	ldrb	r1, [r5, #8]
 8014be4:	4630      	mov	r0, r6
 8014be6:	f7fb fd69 	bl	80106bc <ucdr_serialize_bool>
 8014bea:	7a2b      	ldrb	r3, [r5, #8]
 8014bec:	4004      	ands	r4, r0
 8014bee:	b2e4      	uxtb	r4, r4
 8014bf0:	b943      	cbnz	r3, 8014c04 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	bd70      	pop	{r4, r5, r6, pc}
 8014bf6:	6869      	ldr	r1, [r5, #4]
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f005 f8d7 	bl	8019dac <ucdr_serialize_string>
 8014bfe:	4004      	ands	r4, r0
 8014c00:	b2e4      	uxtb	r4, r4
 8014c02:	e7ee      	b.n	8014be2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014c04:	f105 010c 	add.w	r1, r5, #12
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f7ff ff53 	bl	8014ab4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014c0e:	4004      	ands	r4, r0
 8014c10:	4620      	mov	r0, r4
 8014c12:	bd70      	pop	{r4, r5, r6, pc}

08014c14 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014c14:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014c18:	4688      	mov	r8, r1
 8014c1a:	4681      	mov	r9, r0
 8014c1c:	8809      	ldrh	r1, [r1, #0]
 8014c1e:	f7fb fda7 	bl	8010770 <ucdr_serialize_uint16_t>
 8014c22:	4606      	mov	r6, r0
 8014c24:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014c28:	4648      	mov	r0, r9
 8014c2a:	f7fb fd47 	bl	80106bc <ucdr_serialize_bool>
 8014c2e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014c32:	4006      	ands	r6, r0
 8014c34:	b2f5      	uxtb	r5, r6
 8014c36:	b9eb      	cbnz	r3, 8014c74 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014c38:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014c3c:	4648      	mov	r0, r9
 8014c3e:	f7fb fd3d 	bl	80106bc <ucdr_serialize_bool>
 8014c42:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014c46:	4005      	ands	r5, r0
 8014c48:	bb7b      	cbnz	r3, 8014caa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014c4a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014c4e:	4648      	mov	r0, r9
 8014c50:	f7fb fd34 	bl	80106bc <ucdr_serialize_bool>
 8014c54:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014c58:	4005      	ands	r5, r0
 8014c5a:	b9f3      	cbnz	r3, 8014c9a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014c5c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014c60:	4648      	mov	r0, r9
 8014c62:	f7fb fd2b 	bl	80106bc <ucdr_serialize_bool>
 8014c66:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014c6a:	4005      	ands	r5, r0
 8014c6c:	b94b      	cbnz	r3, 8014c82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014c6e:	4628      	mov	r0, r5
 8014c70:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014c74:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014c78:	4648      	mov	r0, r9
 8014c7a:	f7fb fd79 	bl	8010770 <ucdr_serialize_uint16_t>
 8014c7e:	4005      	ands	r5, r0
 8014c80:	e7da      	b.n	8014c38 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014c82:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014c86:	f108 011c 	add.w	r1, r8, #28
 8014c8a:	4648      	mov	r0, r9
 8014c8c:	f7fc ff30 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 8014c90:	4028      	ands	r0, r5
 8014c92:	b2c5      	uxtb	r5, r0
 8014c94:	4628      	mov	r0, r5
 8014c96:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014c9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c9e:	4648      	mov	r0, r9
 8014ca0:	f7fb ff50 	bl	8010b44 <ucdr_serialize_uint32_t>
 8014ca4:	4028      	ands	r0, r5
 8014ca6:	b2c5      	uxtb	r5, r0
 8014ca8:	e7d8      	b.n	8014c5c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014caa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014cae:	4648      	mov	r0, r9
 8014cb0:	f7fb ff48 	bl	8010b44 <ucdr_serialize_uint32_t>
 8014cb4:	4028      	ands	r0, r5
 8014cb6:	b2c5      	uxtb	r5, r0
 8014cb8:	e7c7      	b.n	8014c4a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014cba:	bf00      	nop

08014cbc <uxr_serialize_OBJK_DataWriter_Binary>:
 8014cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cbe:	2202      	movs	r2, #2
 8014cc0:	460d      	mov	r5, r1
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	f004 fefc 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014cc8:	4604      	mov	r4, r0
 8014cca:	78a9      	ldrb	r1, [r5, #2]
 8014ccc:	4630      	mov	r0, r6
 8014cce:	f7fb fcf5 	bl	80106bc <ucdr_serialize_bool>
 8014cd2:	78ab      	ldrb	r3, [r5, #2]
 8014cd4:	4004      	ands	r4, r0
 8014cd6:	b2e4      	uxtb	r4, r4
 8014cd8:	b90b      	cbnz	r3, 8014cde <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014cda:	4620      	mov	r0, r4
 8014cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cde:	f105 0108 	add.w	r1, r5, #8
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f7ff ff96 	bl	8014c14 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014ce8:	4607      	mov	r7, r0
 8014cea:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f7fb fce4 	bl	80106bc <ucdr_serialize_bool>
 8014cf4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014cf8:	4038      	ands	r0, r7
 8014cfa:	b2c7      	uxtb	r7, r0
 8014cfc:	b913      	cbnz	r3, 8014d04 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014cfe:	403c      	ands	r4, r7
 8014d00:	4620      	mov	r0, r4
 8014d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d04:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014d08:	4630      	mov	r0, r6
 8014d0a:	f7fc f971 	bl	8010ff0 <ucdr_serialize_uint64_t>
 8014d0e:	4007      	ands	r7, r0
 8014d10:	e7f5      	b.n	8014cfe <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014d12:	bf00      	nop

08014d14 <uxr_deserialize_ObjectVariant>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	4605      	mov	r5, r0
 8014d18:	460e      	mov	r6, r1
 8014d1a:	f7fb fd13 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014d1e:	b168      	cbz	r0, 8014d3c <uxr_deserialize_ObjectVariant+0x28>
 8014d20:	7833      	ldrb	r3, [r6, #0]
 8014d22:	4604      	mov	r4, r0
 8014d24:	3b01      	subs	r3, #1
 8014d26:	2b0d      	cmp	r3, #13
 8014d28:	d809      	bhi.n	8014d3e <uxr_deserialize_ObjectVariant+0x2a>
 8014d2a:	e8df f003 	tbb	[pc, r3]
 8014d2e:	0a41      	.short	0x0a41
 8014d30:	0a0a2323 	.word	0x0a0a2323
 8014d34:	10080a0a 	.word	0x10080a0a
 8014d38:	565c1010 	.word	0x565c1010
 8014d3c:	2400      	movs	r4, #0
 8014d3e:	4620      	mov	r0, r4
 8014d40:	bd70      	pop	{r4, r5, r6, pc}
 8014d42:	1d31      	adds	r1, r6, #4
 8014d44:	4628      	mov	r0, r5
 8014d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d4a:	f7ff be41 	b.w	80149d0 <uxr_deserialize_DATAWRITER_Representation>
 8014d4e:	1d31      	adds	r1, r6, #4
 8014d50:	4628      	mov	r0, r5
 8014d52:	f7fb fcf7 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d0f0      	beq.n	8014d3c <uxr_deserialize_ObjectVariant+0x28>
 8014d5a:	7933      	ldrb	r3, [r6, #4]
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d001      	beq.n	8014d64 <uxr_deserialize_ObjectVariant+0x50>
 8014d60:	2b02      	cmp	r3, #2
 8014d62:	d1ec      	bne.n	8014d3e <uxr_deserialize_ObjectVariant+0x2a>
 8014d64:	68b1      	ldr	r1, [r6, #8]
 8014d66:	4628      	mov	r0, r5
 8014d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d70:	f005 b82c 	b.w	8019dcc <ucdr_deserialize_string>
 8014d74:	1d31      	adds	r1, r6, #4
 8014d76:	4628      	mov	r0, r5
 8014d78:	f7fb fce4 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	b170      	cbz	r0, 8014d9e <uxr_deserialize_ObjectVariant+0x8a>
 8014d80:	7933      	ldrb	r3, [r6, #4]
 8014d82:	2b02      	cmp	r3, #2
 8014d84:	d04c      	beq.n	8014e20 <uxr_deserialize_ObjectVariant+0x10c>
 8014d86:	2b03      	cmp	r3, #3
 8014d88:	d109      	bne.n	8014d9e <uxr_deserialize_ObjectVariant+0x8a>
 8014d8a:	f106 0308 	add.w	r3, r6, #8
 8014d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d92:	f106 010c 	add.w	r1, r6, #12
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7fc febc 	bl	8011b14 <ucdr_deserialize_sequence_uint8_t>
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	2202      	movs	r2, #2
 8014da0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014da4:	4628      	mov	r0, r5
 8014da6:	f004 feef 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014daa:	4020      	ands	r0, r4
 8014dac:	b2c4      	uxtb	r4, r0
 8014dae:	e7c6      	b.n	8014d3e <uxr_deserialize_ObjectVariant+0x2a>
 8014db0:	1d31      	adds	r1, r6, #4
 8014db2:	4628      	mov	r0, r5
 8014db4:	f7fb fcc6 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014db8:	4604      	mov	r4, r0
 8014dba:	b130      	cbz	r0, 8014dca <uxr_deserialize_ObjectVariant+0xb6>
 8014dbc:	7933      	ldrb	r3, [r6, #4]
 8014dbe:	2b02      	cmp	r3, #2
 8014dc0:	d036      	beq.n	8014e30 <uxr_deserialize_ObjectVariant+0x11c>
 8014dc2:	2b03      	cmp	r3, #3
 8014dc4:	d03c      	beq.n	8014e40 <uxr_deserialize_ObjectVariant+0x12c>
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d032      	beq.n	8014e30 <uxr_deserialize_ObjectVariant+0x11c>
 8014dca:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f7fc fa5e 	bl	8011290 <ucdr_deserialize_int16_t>
 8014dd4:	4020      	ands	r0, r4
 8014dd6:	b2c4      	uxtb	r4, r0
 8014dd8:	e7b1      	b.n	8014d3e <uxr_deserialize_ObjectVariant+0x2a>
 8014dda:	1d31      	adds	r1, r6, #4
 8014ddc:	4628      	mov	r0, r5
 8014dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014de2:	f7ff bcab 	b.w	801473c <uxr_deserialize_CLIENT_Representation>
 8014de6:	2204      	movs	r2, #4
 8014de8:	4628      	mov	r0, r5
 8014dea:	18b1      	adds	r1, r6, r2
 8014dec:	f004 fecc 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014df0:	4604      	mov	r4, r0
 8014df2:	2202      	movs	r2, #2
 8014df4:	f106 0108 	add.w	r1, r6, #8
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f004 fec5 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014dfe:	4004      	ands	r4, r0
 8014e00:	2202      	movs	r2, #2
 8014e02:	f106 010a 	add.w	r1, r6, #10
 8014e06:	4628      	mov	r0, r5
 8014e08:	b2e4      	uxtb	r4, r4
 8014e0a:	f004 febd 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	f106 010c 	add.w	r1, r6, #12
 8014e14:	4628      	mov	r0, r5
 8014e16:	401c      	ands	r4, r3
 8014e18:	f7fb fc66 	bl	80106e8 <ucdr_deserialize_bool>
 8014e1c:	4004      	ands	r4, r0
 8014e1e:	e78e      	b.n	8014d3e <uxr_deserialize_ObjectVariant+0x2a>
 8014e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e24:	68b1      	ldr	r1, [r6, #8]
 8014e26:	4628      	mov	r0, r5
 8014e28:	f004 ffd0 	bl	8019dcc <ucdr_deserialize_string>
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	e7b6      	b.n	8014d9e <uxr_deserialize_ObjectVariant+0x8a>
 8014e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e34:	68b1      	ldr	r1, [r6, #8]
 8014e36:	4628      	mov	r0, r5
 8014e38:	f004 ffc8 	bl	8019dcc <ucdr_deserialize_string>
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	e7c4      	b.n	8014dca <uxr_deserialize_ObjectVariant+0xb6>
 8014e40:	f106 0308 	add.w	r3, r6, #8
 8014e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e48:	f106 010c 	add.w	r1, r6, #12
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f7fc fe61 	bl	8011b14 <ucdr_deserialize_sequence_uint8_t>
 8014e52:	4604      	mov	r4, r0
 8014e54:	e7b9      	b.n	8014dca <uxr_deserialize_ObjectVariant+0xb6>
 8014e56:	bf00      	nop

08014e58 <uxr_deserialize_BaseObjectRequest>:
 8014e58:	b570      	push	{r4, r5, r6, lr}
 8014e5a:	2202      	movs	r2, #2
 8014e5c:	4605      	mov	r5, r0
 8014e5e:	460e      	mov	r6, r1
 8014e60:	f004 fe92 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014e64:	2202      	movs	r2, #2
 8014e66:	4604      	mov	r4, r0
 8014e68:	4628      	mov	r0, r5
 8014e6a:	18b1      	adds	r1, r6, r2
 8014e6c:	f004 fe8c 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014e70:	4020      	ands	r0, r4
 8014e72:	b2c0      	uxtb	r0, r0
 8014e74:	bd70      	pop	{r4, r5, r6, pc}
 8014e76:	bf00      	nop

08014e78 <uxr_serialize_ActivityInfoVariant>:
 8014e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e7c:	460e      	mov	r6, r1
 8014e7e:	7809      	ldrb	r1, [r1, #0]
 8014e80:	4680      	mov	r8, r0
 8014e82:	f7fb fc49 	bl	8010718 <ucdr_serialize_uint8_t>
 8014e86:	4607      	mov	r7, r0
 8014e88:	b138      	cbz	r0, 8014e9a <uxr_serialize_ActivityInfoVariant+0x22>
 8014e8a:	7833      	ldrb	r3, [r6, #0]
 8014e8c:	2b06      	cmp	r3, #6
 8014e8e:	f000 8081 	beq.w	8014f94 <uxr_serialize_ActivityInfoVariant+0x11c>
 8014e92:	2b0d      	cmp	r3, #13
 8014e94:	d014      	beq.n	8014ec0 <uxr_serialize_ActivityInfoVariant+0x48>
 8014e96:	2b05      	cmp	r3, #5
 8014e98:	d002      	beq.n	8014ea0 <uxr_serialize_ActivityInfoVariant+0x28>
 8014e9a:	4638      	mov	r0, r7
 8014e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ea0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014ea4:	4640      	mov	r0, r8
 8014ea6:	f7fc f973 	bl	8011190 <ucdr_serialize_int16_t>
 8014eaa:	4607      	mov	r7, r0
 8014eac:	4640      	mov	r0, r8
 8014eae:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8014eb2:	f7fc f89d 	bl	8010ff0 <ucdr_serialize_uint64_t>
 8014eb6:	4038      	ands	r0, r7
 8014eb8:	b2c7      	uxtb	r7, r0
 8014eba:	4638      	mov	r0, r7
 8014ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ec0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	f7fc f963 	bl	8011190 <ucdr_serialize_int16_t>
 8014eca:	68f1      	ldr	r1, [r6, #12]
 8014ecc:	4607      	mov	r7, r0
 8014ece:	4640      	mov	r0, r8
 8014ed0:	f7fb fe38 	bl	8010b44 <ucdr_serialize_uint32_t>
 8014ed4:	68f3      	ldr	r3, [r6, #12]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d0ed      	beq.n	8014eb6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8014eda:	b318      	cbz	r0, 8014f24 <uxr_serialize_ActivityInfoVariant+0xac>
 8014edc:	f106 090c 	add.w	r9, r6, #12
 8014ee0:	2400      	movs	r4, #0
 8014ee2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014ee6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8014eea:	7c29      	ldrb	r1, [r5, #16]
 8014eec:	4640      	mov	r0, r8
 8014eee:	f7fb fc13 	bl	8010718 <ucdr_serialize_uint8_t>
 8014ef2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8014ef6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014efa:	2800      	cmp	r0, #0
 8014efc:	d051      	beq.n	8014fa2 <uxr_serialize_ActivityInfoVariant+0x12a>
 8014efe:	7c2b      	ldrb	r3, [r5, #16]
 8014f00:	00c9      	lsls	r1, r1, #3
 8014f02:	2b03      	cmp	r3, #3
 8014f04:	d854      	bhi.n	8014fb0 <uxr_serialize_ActivityInfoVariant+0x138>
 8014f06:	e8df f003 	tbb	[pc, r3]
 8014f0a:	2133      	.short	0x2133
 8014f0c:	020f      	.short	0x020f
 8014f0e:	4449      	add	r1, r9
 8014f10:	4640      	mov	r0, r8
 8014f12:	6889      	ldr	r1, [r1, #8]
 8014f14:	f004 ff4a 	bl	8019dac <ucdr_serialize_string>
 8014f18:	3401      	adds	r4, #1
 8014f1a:	68f2      	ldr	r2, [r6, #12]
 8014f1c:	4294      	cmp	r4, r2
 8014f1e:	d244      	bcs.n	8014faa <uxr_serialize_ActivityInfoVariant+0x132>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d1de      	bne.n	8014ee2 <uxr_serialize_ActivityInfoVariant+0x6a>
 8014f24:	2700      	movs	r7, #0
 8014f26:	e7b8      	b.n	8014e9a <uxr_serialize_ActivityInfoVariant+0x22>
 8014f28:	3108      	adds	r1, #8
 8014f2a:	44a2      	add	sl, r4
 8014f2c:	2210      	movs	r2, #16
 8014f2e:	4640      	mov	r0, r8
 8014f30:	4449      	add	r1, r9
 8014f32:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014f36:	f004 fdc3 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014f3a:	4605      	mov	r5, r0
 8014f3c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8014f40:	4640      	mov	r0, r8
 8014f42:	f7fb fdff 	bl	8010b44 <ucdr_serialize_uint32_t>
 8014f46:	4028      	ands	r0, r5
 8014f48:	b2c0      	uxtb	r0, r0
 8014f4a:	e7e5      	b.n	8014f18 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014f4c:	3108      	adds	r1, #8
 8014f4e:	44a2      	add	sl, r4
 8014f50:	2204      	movs	r2, #4
 8014f52:	4640      	mov	r0, r8
 8014f54:	4449      	add	r1, r9
 8014f56:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014f5a:	f004 fdb1 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014f5e:	4605      	mov	r5, r0
 8014f60:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8014f64:	4640      	mov	r0, r8
 8014f66:	f7fb fc03 	bl	8010770 <ucdr_serialize_uint16_t>
 8014f6a:	4028      	ands	r0, r5
 8014f6c:	b2c0      	uxtb	r0, r0
 8014f6e:	e7d3      	b.n	8014f18 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014f70:	3108      	adds	r1, #8
 8014f72:	44a2      	add	sl, r4
 8014f74:	2202      	movs	r2, #2
 8014f76:	4640      	mov	r0, r8
 8014f78:	4449      	add	r1, r9
 8014f7a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014f7e:	f004 fd9f 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8014f82:	4605      	mov	r5, r0
 8014f84:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014f88:	4640      	mov	r0, r8
 8014f8a:	f7fb fbc5 	bl	8010718 <ucdr_serialize_uint8_t>
 8014f8e:	4028      	ands	r0, r5
 8014f90:	b2c0      	uxtb	r0, r0
 8014f92:	e7c1      	b.n	8014f18 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014f94:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014f98:	4640      	mov	r0, r8
 8014f9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f9e:	f7fc b8f7 	b.w	8011190 <ucdr_serialize_int16_t>
 8014fa2:	3401      	adds	r4, #1
 8014fa4:	68f2      	ldr	r2, [r6, #12]
 8014fa6:	42a2      	cmp	r2, r4
 8014fa8:	d8bc      	bhi.n	8014f24 <uxr_serialize_ActivityInfoVariant+0xac>
 8014faa:	4007      	ands	r7, r0
 8014fac:	b2ff      	uxtb	r7, r7
 8014fae:	e774      	b.n	8014e9a <uxr_serialize_ActivityInfoVariant+0x22>
 8014fb0:	3401      	adds	r4, #1
 8014fb2:	68f3      	ldr	r3, [r6, #12]
 8014fb4:	3518      	adds	r5, #24
 8014fb6:	429c      	cmp	r4, r3
 8014fb8:	d397      	bcc.n	8014eea <uxr_serialize_ActivityInfoVariant+0x72>
 8014fba:	e76e      	b.n	8014e9a <uxr_serialize_ActivityInfoVariant+0x22>

08014fbc <uxr_deserialize_BaseObjectReply>:
 8014fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc0:	2202      	movs	r2, #2
 8014fc2:	4606      	mov	r6, r0
 8014fc4:	460f      	mov	r7, r1
 8014fc6:	f004 fddf 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014fca:	2202      	movs	r2, #2
 8014fcc:	4605      	mov	r5, r0
 8014fce:	4630      	mov	r0, r6
 8014fd0:	18b9      	adds	r1, r7, r2
 8014fd2:	f004 fdd9 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8014fd6:	4680      	mov	r8, r0
 8014fd8:	1d39      	adds	r1, r7, #4
 8014fda:	4630      	mov	r0, r6
 8014fdc:	f7fb fbb2 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014fe0:	ea05 0508 	and.w	r5, r5, r8
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	1d79      	adds	r1, r7, #5
 8014fe8:	4630      	mov	r0, r6
 8014fea:	402c      	ands	r4, r5
 8014fec:	f7fb fbaa 	bl	8010744 <ucdr_deserialize_uint8_t>
 8014ff0:	4020      	ands	r0, r4
 8014ff2:	b2c0      	uxtb	r0, r0
 8014ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ff8 <uxr_serialize_ReadSpecification>:
 8014ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ffa:	460e      	mov	r6, r1
 8014ffc:	4607      	mov	r7, r0
 8014ffe:	7809      	ldrb	r1, [r1, #0]
 8015000:	f7fb fb8a 	bl	8010718 <ucdr_serialize_uint8_t>
 8015004:	4604      	mov	r4, r0
 8015006:	7871      	ldrb	r1, [r6, #1]
 8015008:	4638      	mov	r0, r7
 801500a:	f7fb fb85 	bl	8010718 <ucdr_serialize_uint8_t>
 801500e:	4004      	ands	r4, r0
 8015010:	78b1      	ldrb	r1, [r6, #2]
 8015012:	4638      	mov	r0, r7
 8015014:	f7fb fb52 	bl	80106bc <ucdr_serialize_bool>
 8015018:	78b3      	ldrb	r3, [r6, #2]
 801501a:	b2e4      	uxtb	r4, r4
 801501c:	4004      	ands	r4, r0
 801501e:	b943      	cbnz	r3, 8015032 <uxr_serialize_ReadSpecification+0x3a>
 8015020:	7a31      	ldrb	r1, [r6, #8]
 8015022:	4638      	mov	r0, r7
 8015024:	f7fb fb4a 	bl	80106bc <ucdr_serialize_bool>
 8015028:	7a33      	ldrb	r3, [r6, #8]
 801502a:	4004      	ands	r4, r0
 801502c:	b93b      	cbnz	r3, 801503e <uxr_serialize_ReadSpecification+0x46>
 801502e:	4620      	mov	r0, r4
 8015030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015032:	6871      	ldr	r1, [r6, #4]
 8015034:	4638      	mov	r0, r7
 8015036:	f004 feb9 	bl	8019dac <ucdr_serialize_string>
 801503a:	4004      	ands	r4, r0
 801503c:	e7f0      	b.n	8015020 <uxr_serialize_ReadSpecification+0x28>
 801503e:	8971      	ldrh	r1, [r6, #10]
 8015040:	4638      	mov	r0, r7
 8015042:	f7fb fb95 	bl	8010770 <ucdr_serialize_uint16_t>
 8015046:	4605      	mov	r5, r0
 8015048:	89b1      	ldrh	r1, [r6, #12]
 801504a:	4638      	mov	r0, r7
 801504c:	f7fb fb90 	bl	8010770 <ucdr_serialize_uint16_t>
 8015050:	4005      	ands	r5, r0
 8015052:	89f1      	ldrh	r1, [r6, #14]
 8015054:	4638      	mov	r0, r7
 8015056:	b2ed      	uxtb	r5, r5
 8015058:	f7fb fb8a 	bl	8010770 <ucdr_serialize_uint16_t>
 801505c:	8a31      	ldrh	r1, [r6, #16]
 801505e:	4025      	ands	r5, r4
 8015060:	4604      	mov	r4, r0
 8015062:	4638      	mov	r0, r7
 8015064:	4025      	ands	r5, r4
 8015066:	f7fb fb83 	bl	8010770 <ucdr_serialize_uint16_t>
 801506a:	ea00 0405 	and.w	r4, r0, r5
 801506e:	4620      	mov	r0, r4
 8015070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015072:	bf00      	nop

08015074 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015074:	f7ff bb0a 	b.w	801468c <uxr_serialize_CLIENT_Representation>

08015078 <uxr_serialize_CREATE_Payload>:
 8015078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507a:	2202      	movs	r2, #2
 801507c:	4607      	mov	r7, r0
 801507e:	460e      	mov	r6, r1
 8015080:	f004 fd1e 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015084:	2202      	movs	r2, #2
 8015086:	4605      	mov	r5, r0
 8015088:	4638      	mov	r0, r7
 801508a:	18b1      	adds	r1, r6, r2
 801508c:	f004 fd18 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015090:	7931      	ldrb	r1, [r6, #4]
 8015092:	4604      	mov	r4, r0
 8015094:	4638      	mov	r0, r7
 8015096:	f7fb fb3f 	bl	8010718 <ucdr_serialize_uint8_t>
 801509a:	b170      	cbz	r0, 80150ba <uxr_serialize_CREATE_Payload+0x42>
 801509c:	7933      	ldrb	r3, [r6, #4]
 801509e:	402c      	ands	r4, r5
 80150a0:	3b01      	subs	r3, #1
 80150a2:	b2e4      	uxtb	r4, r4
 80150a4:	2b0d      	cmp	r3, #13
 80150a6:	d809      	bhi.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 80150a8:	e8df f003 	tbb	[pc, r3]
 80150ac:	23230a4c 	.word	0x23230a4c
 80150b0:	0a0a0a0a 	.word	0x0a0a0a0a
 80150b4:	12121208 	.word	0x12121208
 80150b8:	3e45      	.short	0x3e45
 80150ba:	2400      	movs	r4, #0
 80150bc:	4620      	mov	r0, r4
 80150be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c0:	f106 0108 	add.w	r1, r6, #8
 80150c4:	4638      	mov	r0, r7
 80150c6:	f7ff fbe7 	bl	8014898 <uxr_serialize_DATAWRITER_Representation>
 80150ca:	4004      	ands	r4, r0
 80150cc:	4620      	mov	r0, r4
 80150ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150d0:	7a31      	ldrb	r1, [r6, #8]
 80150d2:	4638      	mov	r0, r7
 80150d4:	f7fb fb20 	bl	8010718 <ucdr_serialize_uint8_t>
 80150d8:	2800      	cmp	r0, #0
 80150da:	d0ee      	beq.n	80150ba <uxr_serialize_CREATE_Payload+0x42>
 80150dc:	7a33      	ldrb	r3, [r6, #8]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	d001      	beq.n	80150e6 <uxr_serialize_CREATE_Payload+0x6e>
 80150e2:	2b02      	cmp	r3, #2
 80150e4:	d1ea      	bne.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 80150e6:	68f1      	ldr	r1, [r6, #12]
 80150e8:	4638      	mov	r0, r7
 80150ea:	f004 fe5f 	bl	8019dac <ucdr_serialize_string>
 80150ee:	4004      	ands	r4, r0
 80150f0:	e7e4      	b.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 80150f2:	7a31      	ldrb	r1, [r6, #8]
 80150f4:	4638      	mov	r0, r7
 80150f6:	f7fb fb0f 	bl	8010718 <ucdr_serialize_uint8_t>
 80150fa:	4605      	mov	r5, r0
 80150fc:	b158      	cbz	r0, 8015116 <uxr_serialize_CREATE_Payload+0x9e>
 80150fe:	7a33      	ldrb	r3, [r6, #8]
 8015100:	2b02      	cmp	r3, #2
 8015102:	d034      	beq.n	801516e <uxr_serialize_CREATE_Payload+0xf6>
 8015104:	2b03      	cmp	r3, #3
 8015106:	d106      	bne.n	8015116 <uxr_serialize_CREATE_Payload+0x9e>
 8015108:	68f2      	ldr	r2, [r6, #12]
 801510a:	f106 0110 	add.w	r1, r6, #16
 801510e:	4638      	mov	r0, r7
 8015110:	f7fc fcee 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 8015114:	4605      	mov	r5, r0
 8015116:	2202      	movs	r2, #2
 8015118:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801511c:	4638      	mov	r0, r7
 801511e:	f004 fccf 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015122:	4028      	ands	r0, r5
 8015124:	4004      	ands	r4, r0
 8015126:	e7c9      	b.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 8015128:	f106 0108 	add.w	r1, r6, #8
 801512c:	4638      	mov	r0, r7
 801512e:	f7ff faad 	bl	801468c <uxr_serialize_CLIENT_Representation>
 8015132:	4004      	ands	r4, r0
 8015134:	e7c2      	b.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 8015136:	f106 0108 	add.w	r1, r6, #8
 801513a:	4638      	mov	r0, r7
 801513c:	f7ff fb62 	bl	8014804 <uxr_serialize_AGENT_Representation>
 8015140:	4004      	ands	r4, r0
 8015142:	e7bb      	b.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 8015144:	7a31      	ldrb	r1, [r6, #8]
 8015146:	4638      	mov	r0, r7
 8015148:	f7fb fae6 	bl	8010718 <ucdr_serialize_uint8_t>
 801514c:	4605      	mov	r5, r0
 801514e:	b130      	cbz	r0, 801515e <uxr_serialize_CREATE_Payload+0xe6>
 8015150:	7a33      	ldrb	r3, [r6, #8]
 8015152:	2b02      	cmp	r3, #2
 8015154:	d011      	beq.n	801517a <uxr_serialize_CREATE_Payload+0x102>
 8015156:	2b03      	cmp	r3, #3
 8015158:	d015      	beq.n	8015186 <uxr_serialize_CREATE_Payload+0x10e>
 801515a:	2b01      	cmp	r3, #1
 801515c:	d00d      	beq.n	801517a <uxr_serialize_CREATE_Payload+0x102>
 801515e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8015162:	4638      	mov	r0, r7
 8015164:	f7fc f814 	bl	8011190 <ucdr_serialize_int16_t>
 8015168:	4028      	ands	r0, r5
 801516a:	4004      	ands	r4, r0
 801516c:	e7a6      	b.n	80150bc <uxr_serialize_CREATE_Payload+0x44>
 801516e:	68f1      	ldr	r1, [r6, #12]
 8015170:	4638      	mov	r0, r7
 8015172:	f004 fe1b 	bl	8019dac <ucdr_serialize_string>
 8015176:	4605      	mov	r5, r0
 8015178:	e7cd      	b.n	8015116 <uxr_serialize_CREATE_Payload+0x9e>
 801517a:	68f1      	ldr	r1, [r6, #12]
 801517c:	4638      	mov	r0, r7
 801517e:	f004 fe15 	bl	8019dac <ucdr_serialize_string>
 8015182:	4605      	mov	r5, r0
 8015184:	e7eb      	b.n	801515e <uxr_serialize_CREATE_Payload+0xe6>
 8015186:	68f2      	ldr	r2, [r6, #12]
 8015188:	f106 0110 	add.w	r1, r6, #16
 801518c:	4638      	mov	r0, r7
 801518e:	f7fc fcaf 	bl	8011af0 <ucdr_serialize_sequence_uint8_t>
 8015192:	4605      	mov	r5, r0
 8015194:	e7e3      	b.n	801515e <uxr_serialize_CREATE_Payload+0xe6>
 8015196:	bf00      	nop

08015198 <uxr_serialize_GET_INFO_Payload>:
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	2202      	movs	r2, #2
 801519c:	4605      	mov	r5, r0
 801519e:	460e      	mov	r6, r1
 80151a0:	f004 fc8e 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80151a4:	2202      	movs	r2, #2
 80151a6:	4604      	mov	r4, r0
 80151a8:	4628      	mov	r0, r5
 80151aa:	18b1      	adds	r1, r6, r2
 80151ac:	f004 fc88 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80151b0:	4603      	mov	r3, r0
 80151b2:	6871      	ldr	r1, [r6, #4]
 80151b4:	4628      	mov	r0, r5
 80151b6:	401c      	ands	r4, r3
 80151b8:	f7fb fcc4 	bl	8010b44 <ucdr_serialize_uint32_t>
 80151bc:	b2e4      	uxtb	r4, r4
 80151be:	4020      	ands	r0, r4
 80151c0:	bd70      	pop	{r4, r5, r6, pc}
 80151c2:	bf00      	nop

080151c4 <uxr_deserialize_GET_INFO_Payload>:
 80151c4:	b570      	push	{r4, r5, r6, lr}
 80151c6:	2202      	movs	r2, #2
 80151c8:	4605      	mov	r5, r0
 80151ca:	460e      	mov	r6, r1
 80151cc:	f004 fcdc 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 80151d0:	2202      	movs	r2, #2
 80151d2:	4604      	mov	r4, r0
 80151d4:	4628      	mov	r0, r5
 80151d6:	18b1      	adds	r1, r6, r2
 80151d8:	f004 fcd6 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 80151dc:	4603      	mov	r3, r0
 80151de:	1d31      	adds	r1, r6, #4
 80151e0:	4628      	mov	r0, r5
 80151e2:	401c      	ands	r4, r3
 80151e4:	f7fb fdde 	bl	8010da4 <ucdr_deserialize_uint32_t>
 80151e8:	b2e4      	uxtb	r4, r4
 80151ea:	4020      	ands	r0, r4
 80151ec:	bd70      	pop	{r4, r5, r6, pc}
 80151ee:	bf00      	nop

080151f0 <uxr_serialize_DELETE_Payload>:
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	2202      	movs	r2, #2
 80151f4:	4605      	mov	r5, r0
 80151f6:	460e      	mov	r6, r1
 80151f8:	f004 fc62 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80151fc:	2202      	movs	r2, #2
 80151fe:	4604      	mov	r4, r0
 8015200:	4628      	mov	r0, r5
 8015202:	18b1      	adds	r1, r6, r2
 8015204:	f004 fc5c 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015208:	4020      	ands	r0, r4
 801520a:	b2c0      	uxtb	r0, r0
 801520c:	bd70      	pop	{r4, r5, r6, pc}
 801520e:	bf00      	nop

08015210 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015214:	460e      	mov	r6, r1
 8015216:	4605      	mov	r5, r0
 8015218:	f7fb fa94 	bl	8010744 <ucdr_deserialize_uint8_t>
 801521c:	4604      	mov	r4, r0
 801521e:	1c71      	adds	r1, r6, #1
 8015220:	4628      	mov	r0, r5
 8015222:	f7fb fa8f 	bl	8010744 <ucdr_deserialize_uint8_t>
 8015226:	2204      	movs	r2, #4
 8015228:	4681      	mov	r9, r0
 801522a:	4628      	mov	r0, r5
 801522c:	18b1      	adds	r1, r6, r2
 801522e:	f004 fcab 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8015232:	f106 0108 	add.w	r1, r6, #8
 8015236:	4680      	mov	r8, r0
 8015238:	2202      	movs	r2, #2
 801523a:	4628      	mov	r0, r5
 801523c:	f004 fca4 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8015240:	ea04 0309 	and.w	r3, r4, r9
 8015244:	4607      	mov	r7, r0
 8015246:	2202      	movs	r2, #2
 8015248:	b2db      	uxtb	r3, r3
 801524a:	f106 010a 	add.w	r1, r6, #10
 801524e:	4628      	mov	r0, r5
 8015250:	ea03 0408 	and.w	r4, r3, r8
 8015254:	f004 fc98 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8015258:	4603      	mov	r3, r0
 801525a:	4628      	mov	r0, r5
 801525c:	403c      	ands	r4, r7
 801525e:	f106 010c 	add.w	r1, r6, #12
 8015262:	461d      	mov	r5, r3
 8015264:	f7fb fa40 	bl	80106e8 <ucdr_deserialize_bool>
 8015268:	4025      	ands	r5, r4
 801526a:	4028      	ands	r0, r5
 801526c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015270 <uxr_deserialize_STATUS_Payload>:
 8015270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015274:	2202      	movs	r2, #2
 8015276:	4606      	mov	r6, r0
 8015278:	460f      	mov	r7, r1
 801527a:	f004 fc85 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 801527e:	2202      	movs	r2, #2
 8015280:	4605      	mov	r5, r0
 8015282:	4630      	mov	r0, r6
 8015284:	18b9      	adds	r1, r7, r2
 8015286:	f004 fc7f 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 801528a:	4680      	mov	r8, r0
 801528c:	1d39      	adds	r1, r7, #4
 801528e:	4630      	mov	r0, r6
 8015290:	f7fb fa58 	bl	8010744 <ucdr_deserialize_uint8_t>
 8015294:	ea05 0508 	and.w	r5, r5, r8
 8015298:	4604      	mov	r4, r0
 801529a:	1d79      	adds	r1, r7, #5
 801529c:	4630      	mov	r0, r6
 801529e:	402c      	ands	r4, r5
 80152a0:	f7fb fa50 	bl	8010744 <ucdr_deserialize_uint8_t>
 80152a4:	4020      	ands	r0, r4
 80152a6:	b2c0      	uxtb	r0, r0
 80152a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080152ac <uxr_serialize_INFO_Payload>:
 80152ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b0:	2202      	movs	r2, #2
 80152b2:	460c      	mov	r4, r1
 80152b4:	4605      	mov	r5, r0
 80152b6:	f004 fc03 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80152ba:	2202      	movs	r2, #2
 80152bc:	4680      	mov	r8, r0
 80152be:	4628      	mov	r0, r5
 80152c0:	18a1      	adds	r1, r4, r2
 80152c2:	f004 fbfd 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80152c6:	4607      	mov	r7, r0
 80152c8:	7921      	ldrb	r1, [r4, #4]
 80152ca:	4628      	mov	r0, r5
 80152cc:	f7fb fa24 	bl	8010718 <ucdr_serialize_uint8_t>
 80152d0:	ea08 0807 	and.w	r8, r8, r7
 80152d4:	4606      	mov	r6, r0
 80152d6:	7961      	ldrb	r1, [r4, #5]
 80152d8:	4628      	mov	r0, r5
 80152da:	ea06 0608 	and.w	r6, r6, r8
 80152de:	f7fb fa1b 	bl	8010718 <ucdr_serialize_uint8_t>
 80152e2:	7a21      	ldrb	r1, [r4, #8]
 80152e4:	4030      	ands	r0, r6
 80152e6:	b2c7      	uxtb	r7, r0
 80152e8:	4628      	mov	r0, r5
 80152ea:	f7fb f9e7 	bl	80106bc <ucdr_serialize_bool>
 80152ee:	7a23      	ldrb	r3, [r4, #8]
 80152f0:	4606      	mov	r6, r0
 80152f2:	b96b      	cbnz	r3, 8015310 <uxr_serialize_INFO_Payload+0x64>
 80152f4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80152f8:	4628      	mov	r0, r5
 80152fa:	f7fb f9df 	bl	80106bc <ucdr_serialize_bool>
 80152fe:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015302:	4030      	ands	r0, r6
 8015304:	b2c6      	uxtb	r6, r0
 8015306:	b983      	cbnz	r3, 801532a <uxr_serialize_INFO_Payload+0x7e>
 8015308:	ea06 0007 	and.w	r0, r6, r7
 801530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015310:	7b21      	ldrb	r1, [r4, #12]
 8015312:	4628      	mov	r0, r5
 8015314:	f7fb fa00 	bl	8010718 <ucdr_serialize_uint8_t>
 8015318:	b188      	cbz	r0, 801533e <uxr_serialize_INFO_Payload+0x92>
 801531a:	f104 010c 	add.w	r1, r4, #12
 801531e:	4628      	mov	r0, r5
 8015320:	f7ff fae2 	bl	80148e8 <uxr_serialize_ObjectVariant.part.0>
 8015324:	4030      	ands	r0, r6
 8015326:	b2c6      	uxtb	r6, r0
 8015328:	e7e4      	b.n	80152f4 <uxr_serialize_INFO_Payload+0x48>
 801532a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801532e:	4628      	mov	r0, r5
 8015330:	f7ff fda2 	bl	8014e78 <uxr_serialize_ActivityInfoVariant>
 8015334:	4006      	ands	r6, r0
 8015336:	ea06 0007 	and.w	r0, r6, r7
 801533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801533e:	4606      	mov	r6, r0
 8015340:	e7d8      	b.n	80152f4 <uxr_serialize_INFO_Payload+0x48>
 8015342:	bf00      	nop

08015344 <uxr_serialize_READ_DATA_Payload>:
 8015344:	b570      	push	{r4, r5, r6, lr}
 8015346:	2202      	movs	r2, #2
 8015348:	4605      	mov	r5, r0
 801534a:	460e      	mov	r6, r1
 801534c:	f004 fbb8 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015350:	2202      	movs	r2, #2
 8015352:	4604      	mov	r4, r0
 8015354:	4628      	mov	r0, r5
 8015356:	18b1      	adds	r1, r6, r2
 8015358:	f004 fbb2 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 801535c:	4603      	mov	r3, r0
 801535e:	1d31      	adds	r1, r6, #4
 8015360:	4628      	mov	r0, r5
 8015362:	401c      	ands	r4, r3
 8015364:	f7ff fe48 	bl	8014ff8 <uxr_serialize_ReadSpecification>
 8015368:	b2e4      	uxtb	r4, r4
 801536a:	4020      	ands	r0, r4
 801536c:	bd70      	pop	{r4, r5, r6, pc}
 801536e:	bf00      	nop

08015370 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015370:	b570      	push	{r4, r5, r6, lr}
 8015372:	2202      	movs	r2, #2
 8015374:	4605      	mov	r5, r0
 8015376:	460e      	mov	r6, r1
 8015378:	f004 fba2 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 801537c:	2202      	movs	r2, #2
 801537e:	4604      	mov	r4, r0
 8015380:	4628      	mov	r0, r5
 8015382:	18b1      	adds	r1, r6, r2
 8015384:	f004 fb9c 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 8015388:	4020      	ands	r0, r4
 801538a:	b2c0      	uxtb	r0, r0
 801538c:	bd70      	pop	{r4, r5, r6, pc}
 801538e:	bf00      	nop

08015390 <uxr_serialize_ACKNACK_Payload>:
 8015390:	b570      	push	{r4, r5, r6, lr}
 8015392:	460c      	mov	r4, r1
 8015394:	4605      	mov	r5, r0
 8015396:	460e      	mov	r6, r1
 8015398:	f834 1b02 	ldrh.w	r1, [r4], #2
 801539c:	f7fb f9e8 	bl	8010770 <ucdr_serialize_uint16_t>
 80153a0:	2202      	movs	r2, #2
 80153a2:	4621      	mov	r1, r4
 80153a4:	4604      	mov	r4, r0
 80153a6:	4628      	mov	r0, r5
 80153a8:	f004 fb8a 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80153ac:	4603      	mov	r3, r0
 80153ae:	7931      	ldrb	r1, [r6, #4]
 80153b0:	4628      	mov	r0, r5
 80153b2:	401c      	ands	r4, r3
 80153b4:	f7fb f9b0 	bl	8010718 <ucdr_serialize_uint8_t>
 80153b8:	b2e4      	uxtb	r4, r4
 80153ba:	4020      	ands	r0, r4
 80153bc:	bd70      	pop	{r4, r5, r6, pc}
 80153be:	bf00      	nop

080153c0 <uxr_deserialize_ACKNACK_Payload>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	460e      	mov	r6, r1
 80153c4:	4605      	mov	r5, r0
 80153c6:	f7fb fad3 	bl	8010970 <ucdr_deserialize_uint16_t>
 80153ca:	2202      	movs	r2, #2
 80153cc:	4604      	mov	r4, r0
 80153ce:	4628      	mov	r0, r5
 80153d0:	18b1      	adds	r1, r6, r2
 80153d2:	f004 fbd9 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 80153d6:	4603      	mov	r3, r0
 80153d8:	1d31      	adds	r1, r6, #4
 80153da:	4628      	mov	r0, r5
 80153dc:	401c      	ands	r4, r3
 80153de:	f7fb f9b1 	bl	8010744 <ucdr_deserialize_uint8_t>
 80153e2:	b2e4      	uxtb	r4, r4
 80153e4:	4020      	ands	r0, r4
 80153e6:	bd70      	pop	{r4, r5, r6, pc}

080153e8 <uxr_serialize_HEARTBEAT_Payload>:
 80153e8:	b570      	push	{r4, r5, r6, lr}
 80153ea:	460d      	mov	r5, r1
 80153ec:	4606      	mov	r6, r0
 80153ee:	8809      	ldrh	r1, [r1, #0]
 80153f0:	f7fb f9be 	bl	8010770 <ucdr_serialize_uint16_t>
 80153f4:	8869      	ldrh	r1, [r5, #2]
 80153f6:	4604      	mov	r4, r0
 80153f8:	4630      	mov	r0, r6
 80153fa:	f7fb f9b9 	bl	8010770 <ucdr_serialize_uint16_t>
 80153fe:	4603      	mov	r3, r0
 8015400:	7929      	ldrb	r1, [r5, #4]
 8015402:	4630      	mov	r0, r6
 8015404:	401c      	ands	r4, r3
 8015406:	f7fb f987 	bl	8010718 <ucdr_serialize_uint8_t>
 801540a:	b2e4      	uxtb	r4, r4
 801540c:	4020      	ands	r0, r4
 801540e:	bd70      	pop	{r4, r5, r6, pc}

08015410 <uxr_deserialize_HEARTBEAT_Payload>:
 8015410:	b570      	push	{r4, r5, r6, lr}
 8015412:	460e      	mov	r6, r1
 8015414:	4605      	mov	r5, r0
 8015416:	f7fb faab 	bl	8010970 <ucdr_deserialize_uint16_t>
 801541a:	4604      	mov	r4, r0
 801541c:	1cb1      	adds	r1, r6, #2
 801541e:	4628      	mov	r0, r5
 8015420:	f7fb faa6 	bl	8010970 <ucdr_deserialize_uint16_t>
 8015424:	4603      	mov	r3, r0
 8015426:	1d31      	adds	r1, r6, #4
 8015428:	4628      	mov	r0, r5
 801542a:	401c      	ands	r4, r3
 801542c:	f7fb f98a 	bl	8010744 <ucdr_deserialize_uint8_t>
 8015430:	b2e4      	uxtb	r4, r4
 8015432:	4020      	ands	r0, r4
 8015434:	bd70      	pop	{r4, r5, r6, pc}
 8015436:	bf00      	nop

08015438 <uxr_serialize_TIMESTAMP_Payload>:
 8015438:	b570      	push	{r4, r5, r6, lr}
 801543a:	460d      	mov	r5, r1
 801543c:	4606      	mov	r6, r0
 801543e:	6809      	ldr	r1, [r1, #0]
 8015440:	f7fb ff9a 	bl	8011378 <ucdr_serialize_int32_t>
 8015444:	4604      	mov	r4, r0
 8015446:	6869      	ldr	r1, [r5, #4]
 8015448:	4630      	mov	r0, r6
 801544a:	f7fb fb7b 	bl	8010b44 <ucdr_serialize_uint32_t>
 801544e:	4020      	ands	r0, r4
 8015450:	b2c0      	uxtb	r0, r0
 8015452:	bd70      	pop	{r4, r5, r6, pc}

08015454 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	460e      	mov	r6, r1
 801545a:	4605      	mov	r5, r0
 801545c:	f7fc f824 	bl	80114a8 <ucdr_deserialize_int32_t>
 8015460:	4607      	mov	r7, r0
 8015462:	1d31      	adds	r1, r6, #4
 8015464:	4628      	mov	r0, r5
 8015466:	f7fb fc9d 	bl	8010da4 <ucdr_deserialize_uint32_t>
 801546a:	4680      	mov	r8, r0
 801546c:	f106 0108 	add.w	r1, r6, #8
 8015470:	4628      	mov	r0, r5
 8015472:	f7fc f819 	bl	80114a8 <ucdr_deserialize_int32_t>
 8015476:	ea07 0708 	and.w	r7, r7, r8
 801547a:	4604      	mov	r4, r0
 801547c:	f106 010c 	add.w	r1, r6, #12
 8015480:	4628      	mov	r0, r5
 8015482:	403c      	ands	r4, r7
 8015484:	f7fb fc8e 	bl	8010da4 <ucdr_deserialize_uint32_t>
 8015488:	f106 0110 	add.w	r1, r6, #16
 801548c:	4004      	ands	r4, r0
 801548e:	4628      	mov	r0, r5
 8015490:	f7fc f80a 	bl	80114a8 <ucdr_deserialize_int32_t>
 8015494:	4603      	mov	r3, r0
 8015496:	b2e4      	uxtb	r4, r4
 8015498:	4628      	mov	r0, r5
 801549a:	461d      	mov	r5, r3
 801549c:	f106 0114 	add.w	r1, r6, #20
 80154a0:	f7fb fc80 	bl	8010da4 <ucdr_deserialize_uint32_t>
 80154a4:	402c      	ands	r4, r5
 80154a6:	4020      	ands	r0, r4
 80154a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154ac <uxr_serialize_SampleIdentity>:
 80154ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	220c      	movs	r2, #12
 80154b6:	f004 fb03 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80154ba:	2203      	movs	r2, #3
 80154bc:	f105 010c 	add.w	r1, r5, #12
 80154c0:	4607      	mov	r7, r0
 80154c2:	4620      	mov	r0, r4
 80154c4:	f004 fafc 	bl	8019ac0 <ucdr_serialize_array_uint8_t>
 80154c8:	7be9      	ldrb	r1, [r5, #15]
 80154ca:	4680      	mov	r8, r0
 80154cc:	4620      	mov	r0, r4
 80154ce:	f7fb f923 	bl	8010718 <ucdr_serialize_uint8_t>
 80154d2:	6929      	ldr	r1, [r5, #16]
 80154d4:	4606      	mov	r6, r0
 80154d6:	4620      	mov	r0, r4
 80154d8:	f7fb ff4e 	bl	8011378 <ucdr_serialize_int32_t>
 80154dc:	ea07 0708 	and.w	r7, r7, r8
 80154e0:	4603      	mov	r3, r0
 80154e2:	4620      	mov	r0, r4
 80154e4:	403e      	ands	r6, r7
 80154e6:	6969      	ldr	r1, [r5, #20]
 80154e8:	461c      	mov	r4, r3
 80154ea:	f7fb fb2b 	bl	8010b44 <ucdr_serialize_uint32_t>
 80154ee:	4034      	ands	r4, r6
 80154f0:	4020      	ands	r0, r4
 80154f2:	b2c0      	uxtb	r0, r0
 80154f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154f8 <uxr_deserialize_SampleIdentity>:
 80154f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	460d      	mov	r5, r1
 8015500:	220c      	movs	r2, #12
 8015502:	f004 fb41 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8015506:	2203      	movs	r2, #3
 8015508:	f105 010c 	add.w	r1, r5, #12
 801550c:	4607      	mov	r7, r0
 801550e:	4620      	mov	r0, r4
 8015510:	f004 fb3a 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8015514:	f105 010f 	add.w	r1, r5, #15
 8015518:	4680      	mov	r8, r0
 801551a:	4620      	mov	r0, r4
 801551c:	f7fb f912 	bl	8010744 <ucdr_deserialize_uint8_t>
 8015520:	f105 0110 	add.w	r1, r5, #16
 8015524:	4606      	mov	r6, r0
 8015526:	4620      	mov	r0, r4
 8015528:	f7fb ffbe 	bl	80114a8 <ucdr_deserialize_int32_t>
 801552c:	ea07 0708 	and.w	r7, r7, r8
 8015530:	4603      	mov	r3, r0
 8015532:	4620      	mov	r0, r4
 8015534:	403e      	ands	r6, r7
 8015536:	f105 0114 	add.w	r1, r5, #20
 801553a:	461c      	mov	r4, r3
 801553c:	f7fb fc32 	bl	8010da4 <ucdr_deserialize_uint32_t>
 8015540:	4034      	ands	r4, r6
 8015542:	4020      	ands	r0, r4
 8015544:	b2c0      	uxtb	r0, r0
 8015546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801554a:	bf00      	nop

0801554c <rcl_client_get_rmw_handle>:
 801554c:	b118      	cbz	r0, 8015556 <rcl_client_get_rmw_handle+0xa>
 801554e:	6800      	ldr	r0, [r0, #0]
 8015550:	b108      	cbz	r0, 8015556 <rcl_client_get_rmw_handle+0xa>
 8015552:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015556:	4770      	bx	lr

08015558 <rcl_send_request>:
 8015558:	b570      	push	{r4, r5, r6, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	b1f8      	cbz	r0, 801559e <rcl_send_request+0x46>
 801555e:	4604      	mov	r4, r0
 8015560:	6800      	ldr	r0, [r0, #0]
 8015562:	b1e0      	cbz	r0, 801559e <rcl_send_request+0x46>
 8015564:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015568:	b1cb      	cbz	r3, 801559e <rcl_send_request+0x46>
 801556a:	460e      	mov	r6, r1
 801556c:	b1e1      	cbz	r1, 80155a8 <rcl_send_request+0x50>
 801556e:	4615      	mov	r5, r2
 8015570:	b1d2      	cbz	r2, 80155a8 <rcl_send_request+0x50>
 8015572:	2105      	movs	r1, #5
 8015574:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015578:	f002 fe1a 	bl	80181b0 <__atomic_load_8>
 801557c:	4602      	mov	r2, r0
 801557e:	460b      	mov	r3, r1
 8015580:	4631      	mov	r1, r6
 8015582:	e9c5 2300 	strd	r2, r3, [r5]
 8015586:	6823      	ldr	r3, [r4, #0]
 8015588:	462a      	mov	r2, r5
 801558a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801558e:	f003 fd3d 	bl	801900c <rmw_send_request>
 8015592:	4606      	mov	r6, r0
 8015594:	b160      	cbz	r0, 80155b0 <rcl_send_request+0x58>
 8015596:	2601      	movs	r6, #1
 8015598:	4630      	mov	r0, r6
 801559a:	b002      	add	sp, #8
 801559c:	bd70      	pop	{r4, r5, r6, pc}
 801559e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80155a2:	4630      	mov	r0, r6
 80155a4:	b002      	add	sp, #8
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	260b      	movs	r6, #11
 80155aa:	4630      	mov	r0, r6
 80155ac:	b002      	add	sp, #8
 80155ae:	bd70      	pop	{r4, r5, r6, pc}
 80155b0:	6820      	ldr	r0, [r4, #0]
 80155b2:	2105      	movs	r1, #5
 80155b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80155b8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80155bc:	9100      	str	r1, [sp, #0]
 80155be:	f002 fe63 	bl	8018288 <__atomic_exchange_8>
 80155c2:	4630      	mov	r0, r6
 80155c4:	b002      	add	sp, #8
 80155c6:	bd70      	pop	{r4, r5, r6, pc}

080155c8 <rcl_take_response>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	468e      	mov	lr, r1
 80155cc:	b08c      	sub	sp, #48	@ 0x30
 80155ce:	460c      	mov	r4, r1
 80155d0:	4616      	mov	r6, r2
 80155d2:	f10d 0c18 	add.w	ip, sp, #24
 80155d6:	4605      	mov	r5, r0
 80155d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80155e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80155e8:	b35d      	cbz	r5, 8015642 <rcl_take_response+0x7a>
 80155ea:	682b      	ldr	r3, [r5, #0]
 80155ec:	b34b      	cbz	r3, 8015642 <rcl_take_response+0x7a>
 80155ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80155f2:	b330      	cbz	r0, 8015642 <rcl_take_response+0x7a>
 80155f4:	b346      	cbz	r6, 8015648 <rcl_take_response+0x80>
 80155f6:	2300      	movs	r3, #0
 80155f8:	4632      	mov	r2, r6
 80155fa:	a902      	add	r1, sp, #8
 80155fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8015600:	f10d 0307 	add.w	r3, sp, #7
 8015604:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015650 <rcl_take_response+0x88>
 8015608:	ed8d 7b02 	vstr	d7, [sp, #8]
 801560c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015610:	f003 fe04 	bl	801921c <rmw_take_response>
 8015614:	4605      	mov	r5, r0
 8015616:	b9c8      	cbnz	r0, 801564c <rcl_take_response+0x84>
 8015618:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801561c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015620:	2a00      	cmp	r2, #0
 8015622:	bf08      	it	eq
 8015624:	461d      	moveq	r5, r3
 8015626:	f10d 0e18 	add.w	lr, sp, #24
 801562a:	46a4      	mov	ip, r4
 801562c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015634:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015638:	e88c 0003 	stmia.w	ip, {r0, r1}
 801563c:	4628      	mov	r0, r5
 801563e:	b00c      	add	sp, #48	@ 0x30
 8015640:	bd70      	pop	{r4, r5, r6, pc}
 8015642:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015646:	e7ee      	b.n	8015626 <rcl_take_response+0x5e>
 8015648:	250b      	movs	r5, #11
 801564a:	e7ec      	b.n	8015626 <rcl_take_response+0x5e>
 801564c:	2501      	movs	r5, #1
 801564e:	e7ea      	b.n	8015626 <rcl_take_response+0x5e>
	...

08015658 <rcl_client_is_valid>:
 8015658:	b130      	cbz	r0, 8015668 <rcl_client_is_valid+0x10>
 801565a:	6800      	ldr	r0, [r0, #0]
 801565c:	b120      	cbz	r0, 8015668 <rcl_client_is_valid+0x10>
 801565e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015662:	3800      	subs	r0, #0
 8015664:	bf18      	it	ne
 8015666:	2001      	movne	r0, #1
 8015668:	4770      	bx	lr
 801566a:	bf00      	nop

0801566c <rcl_convert_rmw_ret_to_rcl_ret>:
 801566c:	280b      	cmp	r0, #11
 801566e:	dc0d      	bgt.n	801568c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015670:	2800      	cmp	r0, #0
 8015672:	db09      	blt.n	8015688 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015674:	280b      	cmp	r0, #11
 8015676:	d807      	bhi.n	8015688 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015678:	e8df f000 	tbb	[pc, r0]
 801567c:	07060607 	.word	0x07060607
 8015680:	06060606 	.word	0x06060606
 8015684:	07070606 	.word	0x07070606
 8015688:	2001      	movs	r0, #1
 801568a:	4770      	bx	lr
 801568c:	28cb      	cmp	r0, #203	@ 0xcb
 801568e:	bf18      	it	ne
 8015690:	2001      	movne	r0, #1
 8015692:	4770      	bx	lr

08015694 <rcl_get_zero_initialized_context>:
 8015694:	4a03      	ldr	r2, [pc, #12]	@ (80156a4 <rcl_get_zero_initialized_context+0x10>)
 8015696:	4603      	mov	r3, r0
 8015698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801569c:	e883 0003 	stmia.w	r3, {r0, r1}
 80156a0:	4618      	mov	r0, r3
 80156a2:	4770      	bx	lr
 80156a4:	0801cef8 	.word	0x0801cef8

080156a8 <rcl_context_is_valid>:
 80156a8:	b118      	cbz	r0, 80156b2 <rcl_context_is_valid+0xa>
 80156aa:	6840      	ldr	r0, [r0, #4]
 80156ac:	3800      	subs	r0, #0
 80156ae:	bf18      	it	ne
 80156b0:	2001      	movne	r0, #1
 80156b2:	4770      	bx	lr

080156b4 <__cleanup_context>:
 80156b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156b8:	4606      	mov	r6, r0
 80156ba:	2300      	movs	r3, #0
 80156bc:	6800      	ldr	r0, [r0, #0]
 80156be:	6073      	str	r3, [r6, #4]
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d049      	beq.n	8015758 <__cleanup_context+0xa4>
 80156c4:	6947      	ldr	r7, [r0, #20]
 80156c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80156ca:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80156ce:	b137      	cbz	r7, 80156de <__cleanup_context+0x2a>
 80156d0:	3014      	adds	r0, #20
 80156d2:	f7f8 fa8b 	bl	800dbec <rcl_init_options_fini>
 80156d6:	4607      	mov	r7, r0
 80156d8:	2800      	cmp	r0, #0
 80156da:	d144      	bne.n	8015766 <__cleanup_context+0xb2>
 80156dc:	6830      	ldr	r0, [r6, #0]
 80156de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80156e0:	b143      	cbz	r3, 80156f4 <__cleanup_context+0x40>
 80156e2:	3028      	adds	r0, #40	@ 0x28
 80156e4:	f7f9 feb6 	bl	800f454 <rmw_context_fini>
 80156e8:	b118      	cbz	r0, 80156f2 <__cleanup_context+0x3e>
 80156ea:	2f00      	cmp	r7, #0
 80156ec:	d03e      	beq.n	801576c <__cleanup_context+0xb8>
 80156ee:	f7f9 fba3 	bl	800ee38 <rcutils_reset_error>
 80156f2:	6830      	ldr	r0, [r6, #0]
 80156f4:	6a03      	ldr	r3, [r0, #32]
 80156f6:	b1db      	cbz	r3, 8015730 <__cleanup_context+0x7c>
 80156f8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80156fc:	2a01      	cmp	r2, #1
 80156fe:	f17c 0100 	sbcs.w	r1, ip, #0
 8015702:	db11      	blt.n	8015728 <__cleanup_context+0x74>
 8015704:	2400      	movs	r4, #0
 8015706:	4625      	mov	r5, r4
 8015708:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801570c:	4649      	mov	r1, r9
 801570e:	b1b8      	cbz	r0, 8015740 <__cleanup_context+0x8c>
 8015710:	47c0      	blx	r8
 8015712:	6833      	ldr	r3, [r6, #0]
 8015714:	3401      	adds	r4, #1
 8015716:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801571a:	f145 0500 	adc.w	r5, r5, #0
 801571e:	6a1b      	ldr	r3, [r3, #32]
 8015720:	4294      	cmp	r4, r2
 8015722:	eb75 010c 	sbcs.w	r1, r5, ip
 8015726:	dbef      	blt.n	8015708 <__cleanup_context+0x54>
 8015728:	4618      	mov	r0, r3
 801572a:	4649      	mov	r1, r9
 801572c:	47c0      	blx	r8
 801572e:	6830      	ldr	r0, [r6, #0]
 8015730:	4649      	mov	r1, r9
 8015732:	47c0      	blx	r8
 8015734:	2300      	movs	r3, #0
 8015736:	4638      	mov	r0, r7
 8015738:	e9c6 3300 	strd	r3, r3, [r6]
 801573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015740:	3401      	adds	r4, #1
 8015742:	f145 0500 	adc.w	r5, r5, #0
 8015746:	4294      	cmp	r4, r2
 8015748:	eb75 010c 	sbcs.w	r1, r5, ip
 801574c:	dbdc      	blt.n	8015708 <__cleanup_context+0x54>
 801574e:	4618      	mov	r0, r3
 8015750:	4649      	mov	r1, r9
 8015752:	47c0      	blx	r8
 8015754:	6830      	ldr	r0, [r6, #0]
 8015756:	e7eb      	b.n	8015730 <__cleanup_context+0x7c>
 8015758:	4607      	mov	r7, r0
 801575a:	2300      	movs	r3, #0
 801575c:	4638      	mov	r0, r7
 801575e:	e9c6 3300 	strd	r3, r3, [r6]
 8015762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015766:	f7f9 fb67 	bl	800ee38 <rcutils_reset_error>
 801576a:	e7b7      	b.n	80156dc <__cleanup_context+0x28>
 801576c:	f7ff ff7e 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 8015770:	4607      	mov	r7, r0
 8015772:	e7bc      	b.n	80156ee <__cleanup_context+0x3a>

08015774 <rcl_init>:
 8015774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015778:	1e05      	subs	r5, r0, #0
 801577a:	b09e      	sub	sp, #120	@ 0x78
 801577c:	460e      	mov	r6, r1
 801577e:	4690      	mov	r8, r2
 8015780:	461f      	mov	r7, r3
 8015782:	f340 809f 	ble.w	80158c4 <rcl_init+0x150>
 8015786:	2900      	cmp	r1, #0
 8015788:	f000 809f 	beq.w	80158ca <rcl_init+0x156>
 801578c:	f1a1 0e04 	sub.w	lr, r1, #4
 8015790:	f04f 0c00 	mov.w	ip, #0
 8015794:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015798:	f10c 0c01 	add.w	ip, ip, #1
 801579c:	2c00      	cmp	r4, #0
 801579e:	f000 8094 	beq.w	80158ca <rcl_init+0x156>
 80157a2:	4565      	cmp	r5, ip
 80157a4:	d1f6      	bne.n	8015794 <rcl_init+0x20>
 80157a6:	f1b8 0f00 	cmp.w	r8, #0
 80157aa:	f000 808e 	beq.w	80158ca <rcl_init+0x156>
 80157ae:	f8d8 4000 	ldr.w	r4, [r8]
 80157b2:	2c00      	cmp	r4, #0
 80157b4:	f000 8089 	beq.w	80158ca <rcl_init+0x156>
 80157b8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80157bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157c2:	6823      	ldr	r3, [r4, #0]
 80157c4:	a819      	add	r0, sp, #100	@ 0x64
 80157c6:	f8cc 3000 	str.w	r3, [ip]
 80157ca:	f7f9 fb11 	bl	800edf0 <rcutils_allocator_is_valid>
 80157ce:	f080 0001 	eor.w	r0, r0, #1
 80157d2:	b2c0      	uxtb	r0, r0
 80157d4:	2800      	cmp	r0, #0
 80157d6:	d178      	bne.n	80158ca <rcl_init+0x156>
 80157d8:	2f00      	cmp	r7, #0
 80157da:	d076      	beq.n	80158ca <rcl_init+0x156>
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d178      	bne.n	80158d4 <rcl_init+0x160>
 80157e2:	2178      	movs	r1, #120	@ 0x78
 80157e4:	2001      	movs	r0, #1
 80157e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80157ea:	4798      	blx	r3
 80157ec:	4604      	mov	r4, r0
 80157ee:	6038      	str	r0, [r7, #0]
 80157f0:	2800      	cmp	r0, #0
 80157f2:	f000 80b6 	beq.w	8015962 <rcl_init+0x1ee>
 80157f6:	a802      	add	r0, sp, #8
 80157f8:	f003 f84e 	bl	8018898 <rmw_get_zero_initialized_context>
 80157fc:	a902      	add	r1, sp, #8
 80157fe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015802:	2250      	movs	r2, #80	@ 0x50
 8015804:	f006 fa09 	bl	801bc1a <memcpy>
 8015808:	ac19      	add	r4, sp, #100	@ 0x64
 801580a:	f8d7 e000 	ldr.w	lr, [r7]
 801580e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015810:	46f4      	mov	ip, lr
 8015812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015816:	6823      	ldr	r3, [r4, #0]
 8015818:	f10e 0114 	add.w	r1, lr, #20
 801581c:	4640      	mov	r0, r8
 801581e:	f8cc 3000 	str.w	r3, [ip]
 8015822:	f7f8 fa0d 	bl	800dc40 <rcl_init_options_copy>
 8015826:	4604      	mov	r4, r0
 8015828:	2800      	cmp	r0, #0
 801582a:	d144      	bne.n	80158b6 <rcl_init+0x142>
 801582c:	f8d7 9000 	ldr.w	r9, [r7]
 8015830:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015834:	f8c9 0020 	str.w	r0, [r9, #32]
 8015838:	f8c9 5018 	str.w	r5, [r9, #24]
 801583c:	f8c9 801c 	str.w	r8, [r9, #28]
 8015840:	2d00      	cmp	r5, #0
 8015842:	d04e      	beq.n	80158e2 <rcl_init+0x16e>
 8015844:	2e00      	cmp	r6, #0
 8015846:	d04c      	beq.n	80158e2 <rcl_init+0x16e>
 8015848:	2104      	movs	r1, #4
 801584a:	4628      	mov	r0, r5
 801584c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015850:	4798      	blx	r3
 8015852:	f8c9 0020 	str.w	r0, [r9, #32]
 8015856:	f8d7 9000 	ldr.w	r9, [r7]
 801585a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801585e:	46ca      	mov	sl, r9
 8015860:	b343      	cbz	r3, 80158b4 <rcl_init+0x140>
 8015862:	2d01      	cmp	r5, #1
 8015864:	f178 0300 	sbcs.w	r3, r8, #0
 8015868:	db3b      	blt.n	80158e2 <rcl_init+0x16e>
 801586a:	2400      	movs	r4, #0
 801586c:	3e04      	subs	r6, #4
 801586e:	46a1      	mov	r9, r4
 8015870:	e00b      	b.n	801588a <rcl_init+0x116>
 8015872:	6831      	ldr	r1, [r6, #0]
 8015874:	f006 f9d1 	bl	801bc1a <memcpy>
 8015878:	3401      	adds	r4, #1
 801587a:	f149 0900 	adc.w	r9, r9, #0
 801587e:	45c8      	cmp	r8, r9
 8015880:	bf08      	it	eq
 8015882:	42a5      	cmpeq	r5, r4
 8015884:	d02b      	beq.n	80158de <rcl_init+0x16a>
 8015886:	f8d7 a000 	ldr.w	sl, [r7]
 801588a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801588e:	f7ea fd31 	bl	80002f4 <strlen>
 8015892:	1c42      	adds	r2, r0, #1
 8015894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015896:	4610      	mov	r0, r2
 8015898:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801589a:	f8da a020 	ldr.w	sl, [sl, #32]
 801589e:	9201      	str	r2, [sp, #4]
 80158a0:	4798      	blx	r3
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80158a8:	6a1b      	ldr	r3, [r3, #32]
 80158aa:	9a01      	ldr	r2, [sp, #4]
 80158ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d1de      	bne.n	8015872 <rcl_init+0xfe>
 80158b4:	240a      	movs	r4, #10
 80158b6:	4638      	mov	r0, r7
 80158b8:	f7ff fefc 	bl	80156b4 <__cleanup_context>
 80158bc:	4620      	mov	r0, r4
 80158be:	b01e      	add	sp, #120	@ 0x78
 80158c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c4:	2900      	cmp	r1, #0
 80158c6:	f43f af6e 	beq.w	80157a6 <rcl_init+0x32>
 80158ca:	240b      	movs	r4, #11
 80158cc:	4620      	mov	r0, r4
 80158ce:	b01e      	add	sp, #120	@ 0x78
 80158d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158d4:	2464      	movs	r4, #100	@ 0x64
 80158d6:	4620      	mov	r0, r4
 80158d8:	b01e      	add	sp, #120	@ 0x78
 80158da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158de:	f8d7 9000 	ldr.w	r9, [r7]
 80158e2:	4926      	ldr	r1, [pc, #152]	@ (801597c <rcl_init+0x208>)
 80158e4:	680b      	ldr	r3, [r1, #0]
 80158e6:	3301      	adds	r3, #1
 80158e8:	d036      	beq.n	8015958 <rcl_init+0x1e4>
 80158ea:	461a      	mov	r2, r3
 80158ec:	2400      	movs	r4, #0
 80158ee:	600b      	str	r3, [r1, #0]
 80158f0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80158f4:	607b      	str	r3, [r7, #4]
 80158f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80158f8:	3301      	adds	r3, #1
 80158fa:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80158fe:	d034      	beq.n	801596a <rcl_init+0x1f6>
 8015900:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015904:	b93b      	cbnz	r3, 8015916 <rcl_init+0x1a2>
 8015906:	3030      	adds	r0, #48	@ 0x30
 8015908:	f000 f83a 	bl	8015980 <rcl_get_localhost_only>
 801590c:	4604      	mov	r4, r0
 801590e:	2800      	cmp	r0, #0
 8015910:	d1d1      	bne.n	80158b6 <rcl_init+0x142>
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	6958      	ldr	r0, [r3, #20]
 8015916:	aa18      	add	r2, sp, #96	@ 0x60
 8015918:	a917      	add	r1, sp, #92	@ 0x5c
 801591a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801591c:	f001 f8d2 	bl	8016ac4 <rcl_validate_enclave_name>
 8015920:	4604      	mov	r4, r0
 8015922:	2800      	cmp	r0, #0
 8015924:	d1c7      	bne.n	80158b6 <rcl_init+0x142>
 8015926:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015928:	b9eb      	cbnz	r3, 8015966 <rcl_init+0x1f2>
 801592a:	6839      	ldr	r1, [r7, #0]
 801592c:	694b      	ldr	r3, [r1, #20]
 801592e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015932:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015934:	f000 fb72 	bl	801601c <rcl_get_security_options_from_environment>
 8015938:	4604      	mov	r4, r0
 801593a:	2800      	cmp	r0, #0
 801593c:	d1bb      	bne.n	80158b6 <rcl_init+0x142>
 801593e:	6839      	ldr	r1, [r7, #0]
 8015940:	6948      	ldr	r0, [r1, #20]
 8015942:	3128      	adds	r1, #40	@ 0x28
 8015944:	3018      	adds	r0, #24
 8015946:	f7f9 fc4f 	bl	800f1e8 <rmw_init>
 801594a:	4604      	mov	r4, r0
 801594c:	2800      	cmp	r0, #0
 801594e:	d0bd      	beq.n	80158cc <rcl_init+0x158>
 8015950:	f7ff fe8c 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 8015954:	4604      	mov	r4, r0
 8015956:	e7ae      	b.n	80158b6 <rcl_init+0x142>
 8015958:	2201      	movs	r2, #1
 801595a:	461c      	mov	r4, r3
 801595c:	600a      	str	r2, [r1, #0]
 801595e:	4613      	mov	r3, r2
 8015960:	e7c6      	b.n	80158f0 <rcl_init+0x17c>
 8015962:	240a      	movs	r4, #10
 8015964:	e7b2      	b.n	80158cc <rcl_init+0x158>
 8015966:	2401      	movs	r4, #1
 8015968:	e7a5      	b.n	80158b6 <rcl_init+0x142>
 801596a:	3024      	adds	r0, #36	@ 0x24
 801596c:	f004 ffa0 	bl	801a8b0 <rcl_get_default_domain_id>
 8015970:	4604      	mov	r4, r0
 8015972:	2800      	cmp	r0, #0
 8015974:	d19f      	bne.n	80158b6 <rcl_init+0x142>
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	6958      	ldr	r0, [r3, #20]
 801597a:	e7c1      	b.n	8015900 <rcl_init+0x18c>
 801597c:	24012d98 	.word	0x24012d98

08015980 <rcl_get_localhost_only>:
 8015980:	b510      	push	{r4, lr}
 8015982:	2300      	movs	r3, #0
 8015984:	b082      	sub	sp, #8
 8015986:	9301      	str	r3, [sp, #4]
 8015988:	b1b8      	cbz	r0, 80159ba <rcl_get_localhost_only+0x3a>
 801598a:	4604      	mov	r4, r0
 801598c:	a901      	add	r1, sp, #4
 801598e:	480c      	ldr	r0, [pc, #48]	@ (80159c0 <rcl_get_localhost_only+0x40>)
 8015990:	f002 fcb2 	bl	80182f8 <rcutils_get_env>
 8015994:	b110      	cbz	r0, 801599c <rcl_get_localhost_only+0x1c>
 8015996:	2001      	movs	r0, #1
 8015998:	b002      	add	sp, #8
 801599a:	bd10      	pop	{r4, pc}
 801599c:	9b01      	ldr	r3, [sp, #4]
 801599e:	b113      	cbz	r3, 80159a6 <rcl_get_localhost_only+0x26>
 80159a0:	781a      	ldrb	r2, [r3, #0]
 80159a2:	2a31      	cmp	r2, #49	@ 0x31
 80159a4:	d004      	beq.n	80159b0 <rcl_get_localhost_only+0x30>
 80159a6:	2302      	movs	r3, #2
 80159a8:	2000      	movs	r0, #0
 80159aa:	7023      	strb	r3, [r4, #0]
 80159ac:	b002      	add	sp, #8
 80159ae:	bd10      	pop	{r4, pc}
 80159b0:	785b      	ldrb	r3, [r3, #1]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d1f7      	bne.n	80159a6 <rcl_get_localhost_only+0x26>
 80159b6:	2301      	movs	r3, #1
 80159b8:	e7f6      	b.n	80159a8 <rcl_get_localhost_only+0x28>
 80159ba:	200b      	movs	r0, #11
 80159bc:	b002      	add	sp, #8
 80159be:	bd10      	pop	{r4, pc}
 80159c0:	0801cf00 	.word	0x0801cf00

080159c4 <rcl_get_zero_initialized_node>:
 80159c4:	4a03      	ldr	r2, [pc, #12]	@ (80159d4 <rcl_get_zero_initialized_node+0x10>)
 80159c6:	4603      	mov	r3, r0
 80159c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80159d0:	4618      	mov	r0, r3
 80159d2:	4770      	bx	lr
 80159d4:	0801cf1c 	.word	0x0801cf1c

080159d8 <rcl_node_init>:
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	b0a9      	sub	sp, #164	@ 0xa4
 80159de:	4604      	mov	r4, r0
 80159e0:	460e      	mov	r6, r1
 80159e2:	4615      	mov	r5, r2
 80159e4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80159e8:	a823      	add	r0, sp, #140	@ 0x8c
 80159ea:	461f      	mov	r7, r3
 80159ec:	f005 f9d4 	bl	801ad98 <rcl_guard_condition_get_default_options>
 80159f0:	f1b8 0f00 	cmp.w	r8, #0
 80159f4:	f000 80f3 	beq.w	8015bde <rcl_node_init+0x206>
 80159f8:	4640      	mov	r0, r8
 80159fa:	f7f9 f9f9 	bl	800edf0 <rcutils_allocator_is_valid>
 80159fe:	2d00      	cmp	r5, #0
 8015a00:	bf18      	it	ne
 8015a02:	2c00      	cmpne	r4, #0
 8015a04:	f080 0001 	eor.w	r0, r0, #1
 8015a08:	bf0c      	ite	eq
 8015a0a:	f04f 0c01 	moveq.w	ip, #1
 8015a0e:	f04f 0c00 	movne.w	ip, #0
 8015a12:	2e00      	cmp	r6, #0
 8015a14:	bf08      	it	eq
 8015a16:	f04c 0c01 	orreq.w	ip, ip, #1
 8015a1a:	ea4c 0c00 	orr.w	ip, ip, r0
 8015a1e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8015a22:	f040 80dc 	bne.w	8015bde <rcl_node_init+0x206>
 8015a26:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015a2a:	f1ba 0f00 	cmp.w	sl, #0
 8015a2e:	f040 80fc 	bne.w	8015c2a <rcl_node_init+0x252>
 8015a32:	2f00      	cmp	r7, #0
 8015a34:	f000 80d3 	beq.w	8015bde <rcl_node_init+0x206>
 8015a38:	4638      	mov	r0, r7
 8015a3a:	f7ff fe35 	bl	80156a8 <rcl_context_is_valid>
 8015a3e:	4683      	mov	fp, r0
 8015a40:	2800      	cmp	r0, #0
 8015a42:	f000 80d2 	beq.w	8015bea <rcl_node_init+0x212>
 8015a46:	4652      	mov	r2, sl
 8015a48:	4630      	mov	r0, r6
 8015a4a:	a922      	add	r1, sp, #136	@ 0x88
 8015a4c:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8015a50:	f003 f8b4 	bl	8018bbc <rmw_validate_node_name>
 8015a54:	4682      	mov	sl, r0
 8015a56:	2800      	cmp	r0, #0
 8015a58:	f040 80c3 	bne.w	8015be2 <rcl_node_init+0x20a>
 8015a5c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015a5e:	2800      	cmp	r0, #0
 8015a60:	f040 80f1 	bne.w	8015c46 <rcl_node_init+0x26e>
 8015a64:	4628      	mov	r0, r5
 8015a66:	f7ea fc45 	bl	80002f4 <strlen>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	f040 80c0 	bne.w	8015bf0 <rcl_node_init+0x218>
 8015a70:	4d79      	ldr	r5, [pc, #484]	@ (8015c58 <rcl_node_init+0x280>)
 8015a72:	a922      	add	r1, sp, #136	@ 0x88
 8015a74:	2200      	movs	r2, #0
 8015a76:	4628      	mov	r0, r5
 8015a78:	f003 f882 	bl	8018b80 <rmw_validate_namespace>
 8015a7c:	4682      	mov	sl, r0
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	f040 80af 	bne.w	8015be2 <rcl_node_init+0x20a>
 8015a84:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015a86:	2800      	cmp	r0, #0
 8015a88:	f040 80d5 	bne.w	8015c36 <rcl_node_init+0x25e>
 8015a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015a90:	2078      	movs	r0, #120	@ 0x78
 8015a92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a96:	4798      	blx	r3
 8015a98:	4682      	mov	sl, r0
 8015a9a:	6060      	str	r0, [r4, #4]
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	f000 80cf 	beq.w	8015c40 <rcl_node_init+0x268>
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	a808      	add	r0, sp, #32
 8015aa8:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8015aac:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8015ab0:	f000 f902 	bl	8015cb8 <rcl_node_get_default_options>
 8015ab4:	a908      	add	r1, sp, #32
 8015ab6:	4650      	mov	r0, sl
 8015ab8:	2268      	movs	r2, #104	@ 0x68
 8015aba:	f006 f8ae 	bl	801bc1a <memcpy>
 8015abe:	6861      	ldr	r1, [r4, #4]
 8015ac0:	4640      	mov	r0, r8
 8015ac2:	6027      	str	r7, [r4, #0]
 8015ac4:	f000 f906 	bl	8015cd4 <rcl_node_options_copy>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d158      	bne.n	8015b7e <rcl_node_init+0x1a6>
 8015acc:	4628      	mov	r0, r5
 8015ace:	f7ea fc11 	bl	80002f4 <strlen>
 8015ad2:	4428      	add	r0, r5
 8015ad4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015ad8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015adc:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ade:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	bf0c      	ite	eq
 8015ae6:	4b5d      	ldreq	r3, [pc, #372]	@ (8015c5c <rcl_node_init+0x284>)
 8015ae8:	4b5d      	ldrne	r3, [pc, #372]	@ (8015c60 <rcl_node_init+0x288>)
 8015aea:	9302      	str	r3, [sp, #8]
 8015aec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015af0:	9301      	str	r3, [sp, #4]
 8015af2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015af6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015afa:	f002 fc25 	bl	8018348 <rcutils_format_string_limit>
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8015b04:	4631      	mov	r1, r6
 8015b06:	6818      	ldr	r0, [r3, #0]
 8015b08:	462a      	mov	r2, r5
 8015b0a:	6866      	ldr	r6, [r4, #4]
 8015b0c:	3028      	adds	r0, #40	@ 0x28
 8015b0e:	f7f9 fd53 	bl	800f5b8 <rmw_create_node>
 8015b12:	6863      	ldr	r3, [r4, #4]
 8015b14:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015b16:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	d032      	beq.n	8015b82 <rcl_node_init+0x1aa>
 8015b1c:	f7f9 fddc 	bl	800f6d8 <rmw_node_get_graph_guard_condition>
 8015b20:	4682      	mov	sl, r0
 8015b22:	b360      	cbz	r0, 8015b7e <rcl_node_init+0x1a6>
 8015b24:	f8d8 3000 	ldr.w	r3, [r8]
 8015b28:	2008      	movs	r0, #8
 8015b2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015b2e:	6866      	ldr	r6, [r4, #4]
 8015b30:	4798      	blx	r3
 8015b32:	6863      	ldr	r3, [r4, #4]
 8015b34:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015b36:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015b3a:	f1bb 0f00 	cmp.w	fp, #0
 8015b3e:	d020      	beq.n	8015b82 <rcl_node_init+0x1aa>
 8015b40:	a806      	add	r0, sp, #24
 8015b42:	ae23      	add	r6, sp, #140	@ 0x8c
 8015b44:	f005 f84e 	bl	801abe4 <rcl_get_zero_initialized_guard_condition>
 8015b48:	a806      	add	r0, sp, #24
 8015b4a:	6863      	ldr	r3, [r4, #4]
 8015b4c:	46c4      	mov	ip, r8
 8015b4e:	c803      	ldmia	r0, {r0, r1}
 8015b50:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015b54:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015b58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8015b62:	6033      	str	r3, [r6, #0]
 8015b64:	ab28      	add	r3, sp, #160	@ 0xa0
 8015b66:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015b6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015b6e:	4651      	mov	r1, sl
 8015b70:	463a      	mov	r2, r7
 8015b72:	4670      	mov	r0, lr
 8015b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015b76:	f005 f88d 	bl	801ac94 <rcl_guard_condition_init_from_rmw>
 8015b7a:	4682      	mov	sl, r0
 8015b7c:	b328      	cbz	r0, 8015bca <rcl_node_init+0x1f2>
 8015b7e:	6863      	ldr	r3, [r4, #4]
 8015b80:	b1f3      	cbz	r3, 8015bc0 <rcl_node_init+0x1e8>
 8015b82:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015b84:	b128      	cbz	r0, 8015b92 <rcl_node_init+0x1ba>
 8015b86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015b8e:	4798      	blx	r3
 8015b90:	6863      	ldr	r3, [r4, #4]
 8015b92:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015b94:	b110      	cbz	r0, 8015b9c <rcl_node_init+0x1c4>
 8015b96:	f7f9 fd21 	bl	800f5dc <rmw_destroy_node>
 8015b9a:	6863      	ldr	r3, [r4, #4]
 8015b9c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015b9e:	b148      	cbz	r0, 8015bb4 <rcl_node_init+0x1dc>
 8015ba0:	f005 f8d4 	bl	801ad4c <rcl_guard_condition_fini>
 8015ba4:	6863      	ldr	r3, [r4, #4]
 8015ba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015baa:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015bac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015bb0:	4798      	blx	r3
 8015bb2:	6863      	ldr	r3, [r4, #4]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015bba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015bbe:	4798      	blx	r3
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	f04f 0a01 	mov.w	sl, #1
 8015bc6:	e9c4 3300 	strd	r3, r3, [r4]
 8015bca:	f1b9 0f00 	cmp.w	r9, #0
 8015bce:	d008      	beq.n	8015be2 <rcl_node_init+0x20a>
 8015bd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015bda:	4798      	blx	r3
 8015bdc:	e001      	b.n	8015be2 <rcl_node_init+0x20a>
 8015bde:	f04f 0a0b 	mov.w	sl, #11
 8015be2:	4650      	mov	r0, sl
 8015be4:	b029      	add	sp, #164	@ 0xa4
 8015be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bea:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8015bee:	e7f8      	b.n	8015be2 <rcl_node_init+0x20a>
 8015bf0:	782b      	ldrb	r3, [r5, #0]
 8015bf2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015bf4:	f43f af3d 	beq.w	8015a72 <rcl_node_init+0x9a>
 8015bf8:	9503      	str	r5, [sp, #12]
 8015bfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015bfe:	9300      	str	r3, [sp, #0]
 8015c00:	4b18      	ldr	r3, [pc, #96]	@ (8015c64 <rcl_node_init+0x28c>)
 8015c02:	9302      	str	r3, [sp, #8]
 8015c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015c0e:	f002 fb9b 	bl	8018348 <rcutils_format_string_limit>
 8015c12:	4605      	mov	r5, r0
 8015c14:	b1e0      	cbz	r0, 8015c50 <rcl_node_init+0x278>
 8015c16:	2200      	movs	r2, #0
 8015c18:	a922      	add	r1, sp, #136	@ 0x88
 8015c1a:	9222      	str	r2, [sp, #136]	@ 0x88
 8015c1c:	f002 ffb0 	bl	8018b80 <rmw_validate_namespace>
 8015c20:	4682      	mov	sl, r0
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d1d4      	bne.n	8015bd0 <rcl_node_init+0x1f8>
 8015c26:	46d9      	mov	r9, fp
 8015c28:	e72c      	b.n	8015a84 <rcl_node_init+0xac>
 8015c2a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8015c2e:	4650      	mov	r0, sl
 8015c30:	b029      	add	sp, #164	@ 0xa4
 8015c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c36:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8015c3a:	f002 ffb3 	bl	8018ba4 <rmw_namespace_validation_result_string>
 8015c3e:	e7c4      	b.n	8015bca <rcl_node_init+0x1f2>
 8015c40:	f04f 0a0a 	mov.w	sl, #10
 8015c44:	e7c1      	b.n	8015bca <rcl_node_init+0x1f2>
 8015c46:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8015c4a:	f003 f80b 	bl	8018c64 <rmw_node_name_validation_result_string>
 8015c4e:	e7c8      	b.n	8015be2 <rcl_node_init+0x20a>
 8015c50:	f04f 0a0a 	mov.w	sl, #10
 8015c54:	e7c5      	b.n	8015be2 <rcl_node_init+0x20a>
 8015c56:	bf00      	nop
 8015c58:	0801caf0 	.word	0x0801caf0
 8015c5c:	0801cb3c 	.word	0x0801cb3c
 8015c60:	0801caf4 	.word	0x0801caf4
 8015c64:	0801cf18 	.word	0x0801cf18

08015c68 <rcl_node_is_valid>:
 8015c68:	b130      	cbz	r0, 8015c78 <rcl_node_is_valid+0x10>
 8015c6a:	6843      	ldr	r3, [r0, #4]
 8015c6c:	b123      	cbz	r3, 8015c78 <rcl_node_is_valid+0x10>
 8015c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c70:	b113      	cbz	r3, 8015c78 <rcl_node_is_valid+0x10>
 8015c72:	6800      	ldr	r0, [r0, #0]
 8015c74:	f7ff bd18 	b.w	80156a8 <rcl_context_is_valid>
 8015c78:	2000      	movs	r0, #0
 8015c7a:	4770      	bx	lr

08015c7c <rcl_node_get_name>:
 8015c7c:	b120      	cbz	r0, 8015c88 <rcl_node_get_name+0xc>
 8015c7e:	6840      	ldr	r0, [r0, #4]
 8015c80:	b110      	cbz	r0, 8015c88 <rcl_node_get_name+0xc>
 8015c82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015c84:	b100      	cbz	r0, 8015c88 <rcl_node_get_name+0xc>
 8015c86:	6880      	ldr	r0, [r0, #8]
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop

08015c8c <rcl_node_get_namespace>:
 8015c8c:	b120      	cbz	r0, 8015c98 <rcl_node_get_namespace+0xc>
 8015c8e:	6840      	ldr	r0, [r0, #4]
 8015c90:	b110      	cbz	r0, 8015c98 <rcl_node_get_namespace+0xc>
 8015c92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015c94:	b100      	cbz	r0, 8015c98 <rcl_node_get_namespace+0xc>
 8015c96:	68c0      	ldr	r0, [r0, #12]
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop

08015c9c <rcl_node_get_options>:
 8015c9c:	b128      	cbz	r0, 8015caa <rcl_node_get_options+0xe>
 8015c9e:	6840      	ldr	r0, [r0, #4]
 8015ca0:	b118      	cbz	r0, 8015caa <rcl_node_get_options+0xe>
 8015ca2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	bf08      	it	eq
 8015ca8:	2000      	moveq	r0, #0
 8015caa:	4770      	bx	lr

08015cac <rcl_node_get_rmw_handle>:
 8015cac:	b110      	cbz	r0, 8015cb4 <rcl_node_get_rmw_handle+0x8>
 8015cae:	6840      	ldr	r0, [r0, #4]
 8015cb0:	b100      	cbz	r0, 8015cb4 <rcl_node_get_rmw_handle+0x8>
 8015cb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop

08015cb8 <rcl_node_get_default_options>:
 8015cb8:	b510      	push	{r4, lr}
 8015cba:	4604      	mov	r4, r0
 8015cbc:	2268      	movs	r2, #104	@ 0x68
 8015cbe:	2100      	movs	r1, #0
 8015cc0:	f005 fee2 	bl	801ba88 <memset>
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f7f9 f885 	bl	800edd4 <rcutils_get_default_allocator>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	4620      	mov	r0, r4
 8015cce:	7523      	strb	r3, [r4, #20]
 8015cd0:	bd10      	pop	{r4, pc}
 8015cd2:	bf00      	nop

08015cd4 <rcl_node_options_copy>:
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	bf18      	it	ne
 8015cd8:	4288      	cmpne	r0, r1
 8015cda:	d01b      	beq.n	8015d14 <rcl_node_options_copy+0x40>
 8015cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cde:	fab1 f681 	clz	r6, r1
 8015ce2:	460c      	mov	r4, r1
 8015ce4:	0976      	lsrs	r6, r6, #5
 8015ce6:	b199      	cbz	r1, 8015d10 <rcl_node_options_copy+0x3c>
 8015ce8:	4605      	mov	r5, r0
 8015cea:	8a87      	ldrh	r7, [r0, #20]
 8015cec:	4684      	mov	ip, r0
 8015cee:	468e      	mov	lr, r1
 8015cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015cf6:	682b      	ldr	r3, [r5, #0]
 8015cf8:	2250      	movs	r2, #80	@ 0x50
 8015cfa:	f10c 0118 	add.w	r1, ip, #24
 8015cfe:	f104 0018 	add.w	r0, r4, #24
 8015d02:	f8ce 3000 	str.w	r3, [lr]
 8015d06:	82a7      	strh	r7, [r4, #20]
 8015d08:	f005 ff87 	bl	801bc1a <memcpy>
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d10:	200b      	movs	r0, #11
 8015d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d14:	200b      	movs	r0, #11
 8015d16:	4770      	bx	lr

08015d18 <rcl_node_resolve_name>:
 8015d18:	b082      	sub	sp, #8
 8015d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1e:	b091      	sub	sp, #68	@ 0x44
 8015d20:	ac1a      	add	r4, sp, #104	@ 0x68
 8015d22:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015d26:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d03d      	beq.n	8015daa <rcl_node_resolve_name+0x92>
 8015d2e:	460c      	mov	r4, r1
 8015d30:	4605      	mov	r5, r0
 8015d32:	f7ff ffb3 	bl	8015c9c <rcl_node_get_options>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d03a      	beq.n	8015db0 <rcl_node_resolve_name+0x98>
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	f7ff ff9e 	bl	8015c7c <rcl_node_get_name>
 8015d40:	4606      	mov	r6, r0
 8015d42:	4628      	mov	r0, r5
 8015d44:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015d46:	f7ff ffa1 	bl	8015c8c <rcl_node_get_namespace>
 8015d4a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015d4e:	4607      	mov	r7, r0
 8015d50:	46ac      	mov	ip, r5
 8015d52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d5a:	f8de 3000 	ldr.w	r3, [lr]
 8015d5e:	f8cc 3000 	str.w	r3, [ip]
 8015d62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015d64:	b30b      	cbz	r3, 8015daa <rcl_node_resolve_name+0x92>
 8015d66:	4689      	mov	r9, r1
 8015d68:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8015d6c:	f002 fc64 	bl	8018638 <rcutils_get_zero_initialized_string_map>
 8015d70:	ab10      	add	r3, sp, #64	@ 0x40
 8015d72:	9008      	str	r0, [sp, #32]
 8015d74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015d78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	a808      	add	r0, sp, #32
 8015d80:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015d84:	f002 fcce 	bl	8018724 <rcutils_string_map_init>
 8015d88:	4683      	mov	fp, r0
 8015d8a:	b1a0      	cbz	r0, 8015db6 <rcl_node_resolve_name+0x9e>
 8015d8c:	f7f9 f83e 	bl	800ee0c <rcutils_get_error_string>
 8015d90:	f7f9 f852 	bl	800ee38 <rcutils_reset_error>
 8015d94:	f1bb 0f0a 	cmp.w	fp, #10
 8015d98:	bf18      	it	ne
 8015d9a:	f04f 0b01 	movne.w	fp, #1
 8015d9e:	4658      	mov	r0, fp
 8015da0:	b011      	add	sp, #68	@ 0x44
 8015da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da6:	b002      	add	sp, #8
 8015da8:	4770      	bx	lr
 8015daa:	f04f 0b0b 	mov.w	fp, #11
 8015dae:	e7f6      	b.n	8015d9e <rcl_node_resolve_name+0x86>
 8015db0:	f04f 0b01 	mov.w	fp, #1
 8015db4:	e7f3      	b.n	8015d9e <rcl_node_resolve_name+0x86>
 8015db6:	9009      	str	r0, [sp, #36]	@ 0x24
 8015db8:	9007      	str	r0, [sp, #28]
 8015dba:	a808      	add	r0, sp, #32
 8015dbc:	f004 ff0c 	bl	801abd8 <rcl_get_default_topic_name_substitutions>
 8015dc0:	4683      	mov	fp, r0
 8015dc2:	b180      	cbz	r0, 8015de6 <rcl_node_resolve_name+0xce>
 8015dc4:	280a      	cmp	r0, #10
 8015dc6:	a808      	add	r0, sp, #32
 8015dc8:	bf18      	it	ne
 8015dca:	f04f 0b01 	movne.w	fp, #1
 8015dce:	f002 fce9 	bl	80187a4 <rcutils_string_map_fini>
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	d15b      	bne.n	8015e90 <rcl_node_resolve_name+0x178>
 8015dd8:	4651      	mov	r1, sl
 8015dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ddc:	47c8      	blx	r9
 8015dde:	4651      	mov	r1, sl
 8015de0:	4620      	mov	r0, r4
 8015de2:	47c8      	blx	r9
 8015de4:	e7db      	b.n	8015d9e <rcl_node_resolve_name+0x86>
 8015de6:	ab09      	add	r3, sp, #36	@ 0x24
 8015de8:	46ec      	mov	ip, sp
 8015dea:	9305      	str	r3, [sp, #20]
 8015dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015df2:	682b      	ldr	r3, [r5, #0]
 8015df4:	463a      	mov	r2, r7
 8015df6:	4631      	mov	r1, r6
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f8cc 3000 	str.w	r3, [ip]
 8015dfe:	ab08      	add	r3, sp, #32
 8015e00:	f004 fd8a 	bl	801a918 <rcl_expand_topic_name>
 8015e04:	4683      	mov	fp, r0
 8015e06:	b9d8      	cbnz	r0, 8015e40 <rcl_node_resolve_name+0x128>
 8015e08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e0e:	a90a      	add	r1, sp, #40	@ 0x28
 8015e10:	4620      	mov	r0, r4
 8015e12:	f002 fde5 	bl	80189e0 <rmw_validate_full_topic_name>
 8015e16:	bb50      	cbnz	r0, 8015e6e <rcl_node_resolve_name+0x156>
 8015e18:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015e1a:	2d00      	cmp	r5, #0
 8015e1c:	d140      	bne.n	8015ea0 <rcl_node_resolve_name+0x188>
 8015e1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015e20:	a808      	add	r0, sp, #32
 8015e22:	601c      	str	r4, [r3, #0]
 8015e24:	f002 fcbe 	bl	80187a4 <rcutils_string_map_fini>
 8015e28:	4683      	mov	fp, r0
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	d043      	beq.n	8015eb6 <rcl_node_resolve_name+0x19e>
 8015e2e:	f7f8 ffed 	bl	800ee0c <rcutils_get_error_string>
 8015e32:	46a8      	mov	r8, r5
 8015e34:	f04f 0b01 	mov.w	fp, #1
 8015e38:	462c      	mov	r4, r5
 8015e3a:	f7f8 fffd 	bl	800ee38 <rcutils_reset_error>
 8015e3e:	e00a      	b.n	8015e56 <rcl_node_resolve_name+0x13e>
 8015e40:	2867      	cmp	r0, #103	@ 0x67
 8015e42:	bf14      	ite	ne
 8015e44:	f04f 0800 	movne.w	r8, #0
 8015e48:	f008 0801 	andeq.w	r8, r8, #1
 8015e4c:	9c07      	ldr	r4, [sp, #28]
 8015e4e:	a808      	add	r0, sp, #32
 8015e50:	f002 fca8 	bl	80187a4 <rcutils_string_map_fini>
 8015e54:	bb50      	cbnz	r0, 8015eac <rcl_node_resolve_name+0x194>
 8015e56:	4651      	mov	r1, sl
 8015e58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e5a:	47c8      	blx	r9
 8015e5c:	4651      	mov	r1, sl
 8015e5e:	4620      	mov	r0, r4
 8015e60:	47c8      	blx	r9
 8015e62:	f1b8 0f00 	cmp.w	r8, #0
 8015e66:	bf18      	it	ne
 8015e68:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8015e6c:	e797      	b.n	8015d9e <rcl_node_resolve_name+0x86>
 8015e6e:	f7f8 ffcd 	bl	800ee0c <rcutils_get_error_string>
 8015e72:	f7f8 ffe1 	bl	800ee38 <rcutils_reset_error>
 8015e76:	a808      	add	r0, sp, #32
 8015e78:	f002 fc94 	bl	80187a4 <rcutils_string_map_fini>
 8015e7c:	b998      	cbnz	r0, 8015ea6 <rcl_node_resolve_name+0x18e>
 8015e7e:	4651      	mov	r1, sl
 8015e80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e82:	47c8      	blx	r9
 8015e84:	4651      	mov	r1, sl
 8015e86:	4620      	mov	r0, r4
 8015e88:	f04f 0b01 	mov.w	fp, #1
 8015e8c:	47c8      	blx	r9
 8015e8e:	e786      	b.n	8015d9e <rcl_node_resolve_name+0x86>
 8015e90:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015e94:	f7f8 ffba 	bl	800ee0c <rcutils_get_error_string>
 8015e98:	f7f8 ffce 	bl	800ee38 <rcutils_reset_error>
 8015e9c:	4644      	mov	r4, r8
 8015e9e:	e7da      	b.n	8015e56 <rcl_node_resolve_name+0x13e>
 8015ea0:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8015ea4:	e7d3      	b.n	8015e4e <rcl_node_resolve_name+0x136>
 8015ea6:	46d8      	mov	r8, fp
 8015ea8:	f04f 0b01 	mov.w	fp, #1
 8015eac:	f7f8 ffae 	bl	800ee0c <rcutils_get_error_string>
 8015eb0:	f7f8 ffc2 	bl	800ee38 <rcutils_reset_error>
 8015eb4:	e7cf      	b.n	8015e56 <rcl_node_resolve_name+0x13e>
 8015eb6:	4651      	mov	r1, sl
 8015eb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015eba:	47c8      	blx	r9
 8015ebc:	4651      	mov	r1, sl
 8015ebe:	4658      	mov	r0, fp
 8015ec0:	47c8      	blx	r9
 8015ec2:	e76c      	b.n	8015d9e <rcl_node_resolve_name+0x86>

08015ec4 <exact_match_lookup>:
 8015ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ec6:	f102 0708 	add.w	r7, r2, #8
 8015eca:	460b      	mov	r3, r1
 8015ecc:	b085      	sub	sp, #20
 8015ece:	4614      	mov	r4, r2
 8015ed0:	4606      	mov	r6, r0
 8015ed2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015ed6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015eda:	4618      	mov	r0, r3
 8015edc:	4919      	ldr	r1, [pc, #100]	@ (8015f44 <exact_match_lookup+0x80>)
 8015ede:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015ee2:	f002 fa23 	bl	801832c <rcutils_join_path>
 8015ee6:	7833      	ldrb	r3, [r6, #0]
 8015ee8:	4605      	mov	r5, r0
 8015eea:	2b2f      	cmp	r3, #47	@ 0x2f
 8015eec:	d023      	beq.n	8015f36 <exact_match_lookup+0x72>
 8015eee:	f104 030c 	add.w	r3, r4, #12
 8015ef2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ef6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015efa:	1c70      	adds	r0, r6, #1
 8015efc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015f00:	f002 fa1a 	bl	8018338 <rcutils_to_native_path>
 8015f04:	4606      	mov	r6, r0
 8015f06:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015f0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015f0e:	4631      	mov	r1, r6
 8015f10:	4628      	mov	r0, r5
 8015f12:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015f16:	f002 fa09 	bl	801832c <rcutils_join_path>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	6862      	ldr	r2, [r4, #4]
 8015f20:	461e      	mov	r6, r3
 8015f22:	6921      	ldr	r1, [r4, #16]
 8015f24:	4790      	blx	r2
 8015f26:	4628      	mov	r0, r5
 8015f28:	4635      	mov	r5, r6
 8015f2a:	6863      	ldr	r3, [r4, #4]
 8015f2c:	6921      	ldr	r1, [r4, #16]
 8015f2e:	4798      	blx	r3
 8015f30:	4628      	mov	r0, r5
 8015f32:	b005      	add	sp, #20
 8015f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f36:	7873      	ldrb	r3, [r6, #1]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d1d8      	bne.n	8015eee <exact_match_lookup+0x2a>
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	b005      	add	sp, #20
 8015f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f42:	bf00      	nop
 8015f44:	0801cf60 	.word	0x0801cf60

08015f48 <rcl_get_secure_root>:
 8015f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f4c:	b085      	sub	sp, #20
 8015f4e:	b168      	cbz	r0, 8015f6c <rcl_get_secure_root+0x24>
 8015f50:	4607      	mov	r7, r0
 8015f52:	4608      	mov	r0, r1
 8015f54:	460c      	mov	r4, r1
 8015f56:	f7f8 ff4b 	bl	800edf0 <rcutils_allocator_is_valid>
 8015f5a:	b138      	cbz	r0, 8015f6c <rcl_get_secure_root+0x24>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	482d      	ldr	r0, [pc, #180]	@ (8016014 <rcl_get_secure_root+0xcc>)
 8015f60:	a903      	add	r1, sp, #12
 8015f62:	9303      	str	r3, [sp, #12]
 8015f64:	f002 f9c8 	bl	80182f8 <rcutils_get_env>
 8015f68:	4605      	mov	r5, r0
 8015f6a:	b120      	cbz	r0, 8015f76 <rcl_get_secure_root+0x2e>
 8015f6c:	2500      	movs	r5, #0
 8015f6e:	4628      	mov	r0, r5
 8015f70:	b005      	add	sp, #20
 8015f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f76:	9b03      	ldr	r3, [sp, #12]
 8015f78:	781a      	ldrb	r2, [r3, #0]
 8015f7a:	2a00      	cmp	r2, #0
 8015f7c:	d0f6      	beq.n	8015f6c <rcl_get_secure_root+0x24>
 8015f7e:	f104 090c 	add.w	r9, r4, #12
 8015f82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015f90:	f002 fb14 	bl	80185bc <rcutils_strdup>
 8015f94:	4680      	mov	r8, r0
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d0e8      	beq.n	8015f6c <rcl_get_secure_root+0x24>
 8015f9a:	a903      	add	r1, sp, #12
 8015f9c:	481e      	ldr	r0, [pc, #120]	@ (8016018 <rcl_get_secure_root+0xd0>)
 8015f9e:	9503      	str	r5, [sp, #12]
 8015fa0:	f002 f9aa 	bl	80182f8 <rcutils_get_env>
 8015fa4:	b160      	cbz	r0, 8015fc0 <rcl_get_secure_root+0x78>
 8015fa6:	2600      	movs	r6, #0
 8015fa8:	4630      	mov	r0, r6
 8015faa:	6863      	ldr	r3, [r4, #4]
 8015fac:	6921      	ldr	r1, [r4, #16]
 8015fae:	4798      	blx	r3
 8015fb0:	4640      	mov	r0, r8
 8015fb2:	6863      	ldr	r3, [r4, #4]
 8015fb4:	6921      	ldr	r1, [r4, #16]
 8015fb6:	4798      	blx	r3
 8015fb8:	4628      	mov	r0, r5
 8015fba:	b005      	add	sp, #20
 8015fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fc0:	9b03      	ldr	r3, [sp, #12]
 8015fc2:	781e      	ldrb	r6, [r3, #0]
 8015fc4:	b1f6      	cbz	r6, 8016004 <rcl_get_secure_root+0xbc>
 8015fc6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015fca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015fd4:	f002 faf2 	bl	80185bc <rcutils_strdup>
 8015fd8:	4606      	mov	r6, r0
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d0e3      	beq.n	8015fa6 <rcl_get_secure_root+0x5e>
 8015fde:	4622      	mov	r2, r4
 8015fe0:	4641      	mov	r1, r8
 8015fe2:	f7ff ff6f 	bl	8015ec4 <exact_match_lookup>
 8015fe6:	4605      	mov	r5, r0
 8015fe8:	2d00      	cmp	r5, #0
 8015fea:	d0dd      	beq.n	8015fa8 <rcl_get_secure_root+0x60>
 8015fec:	4628      	mov	r0, r5
 8015fee:	f002 f99b 	bl	8018328 <rcutils_is_directory>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	d1d7      	bne.n	8015fa8 <rcl_get_secure_root+0x60>
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	6921      	ldr	r1, [r4, #16]
 8015ffc:	461d      	mov	r5, r3
 8015ffe:	6863      	ldr	r3, [r4, #4]
 8016000:	4798      	blx	r3
 8016002:	e7d1      	b.n	8015fa8 <rcl_get_secure_root+0x60>
 8016004:	4622      	mov	r2, r4
 8016006:	4638      	mov	r0, r7
 8016008:	4641      	mov	r1, r8
 801600a:	f7ff ff5b 	bl	8015ec4 <exact_match_lookup>
 801600e:	4605      	mov	r5, r0
 8016010:	e7ea      	b.n	8015fe8 <rcl_get_secure_root+0xa0>
 8016012:	bf00      	nop
 8016014:	0801cf6c 	.word	0x0801cf6c
 8016018:	0801cf84 	.word	0x0801cf84

0801601c <rcl_get_security_options_from_environment>:
 801601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016020:	b082      	sub	sp, #8
 8016022:	2300      	movs	r3, #0
 8016024:	4606      	mov	r6, r0
 8016026:	460f      	mov	r7, r1
 8016028:	4821      	ldr	r0, [pc, #132]	@ (80160b0 <rcl_get_security_options_from_environment+0x94>)
 801602a:	a901      	add	r1, sp, #4
 801602c:	4690      	mov	r8, r2
 801602e:	9301      	str	r3, [sp, #4]
 8016030:	f002 f962 	bl	80182f8 <rcutils_get_env>
 8016034:	b120      	cbz	r0, 8016040 <rcl_get_security_options_from_environment+0x24>
 8016036:	2501      	movs	r5, #1
 8016038:	4628      	mov	r0, r5
 801603a:	b002      	add	sp, #8
 801603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016040:	4604      	mov	r4, r0
 8016042:	491c      	ldr	r1, [pc, #112]	@ (80160b4 <rcl_get_security_options_from_environment+0x98>)
 8016044:	9801      	ldr	r0, [sp, #4]
 8016046:	f7ea f94b 	bl	80002e0 <strcmp>
 801604a:	4605      	mov	r5, r0
 801604c:	b9f0      	cbnz	r0, 801608c <rcl_get_security_options_from_environment+0x70>
 801604e:	9001      	str	r0, [sp, #4]
 8016050:	f1b8 0f00 	cmp.w	r8, #0
 8016054:	d021      	beq.n	801609a <rcl_get_security_options_from_environment+0x7e>
 8016056:	a901      	add	r1, sp, #4
 8016058:	4817      	ldr	r0, [pc, #92]	@ (80160b8 <rcl_get_security_options_from_environment+0x9c>)
 801605a:	f002 f94d 	bl	80182f8 <rcutils_get_env>
 801605e:	2800      	cmp	r0, #0
 8016060:	d1e9      	bne.n	8016036 <rcl_get_security_options_from_environment+0x1a>
 8016062:	4916      	ldr	r1, [pc, #88]	@ (80160bc <rcl_get_security_options_from_environment+0xa0>)
 8016064:	9801      	ldr	r0, [sp, #4]
 8016066:	f7ea f93b 	bl	80002e0 <strcmp>
 801606a:	4603      	mov	r3, r0
 801606c:	4639      	mov	r1, r7
 801606e:	4630      	mov	r0, r6
 8016070:	fab3 f383 	clz	r3, r3
 8016074:	095b      	lsrs	r3, r3, #5
 8016076:	f888 3000 	strb.w	r3, [r8]
 801607a:	f7ff ff65 	bl	8015f48 <rcl_get_secure_root>
 801607e:	b170      	cbz	r0, 801609e <rcl_get_security_options_from_environment+0x82>
 8016080:	f8c8 0004 	str.w	r0, [r8, #4]
 8016084:	4628      	mov	r0, r5
 8016086:	b002      	add	sp, #8
 8016088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801608c:	4625      	mov	r5, r4
 801608e:	f888 4000 	strb.w	r4, [r8]
 8016092:	4628      	mov	r0, r5
 8016094:	b002      	add	sp, #8
 8016096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801609a:	250b      	movs	r5, #11
 801609c:	e7cc      	b.n	8016038 <rcl_get_security_options_from_environment+0x1c>
 801609e:	f898 5000 	ldrb.w	r5, [r8]
 80160a2:	f1a5 0501 	sub.w	r5, r5, #1
 80160a6:	fab5 f585 	clz	r5, r5
 80160aa:	096d      	lsrs	r5, r5, #5
 80160ac:	e7c4      	b.n	8016038 <rcl_get_security_options_from_environment+0x1c>
 80160ae:	bf00      	nop
 80160b0:	0801cf24 	.word	0x0801cf24
 80160b4:	0801cf38 	.word	0x0801cf38
 80160b8:	0801cf40 	.word	0x0801cf40
 80160bc:	0801cf58 	.word	0x0801cf58

080160c0 <rcl_service_get_rmw_handle>:
 80160c0:	b118      	cbz	r0, 80160ca <rcl_service_get_rmw_handle+0xa>
 80160c2:	6800      	ldr	r0, [r0, #0]
 80160c4:	b108      	cbz	r0, 80160ca <rcl_service_get_rmw_handle+0xa>
 80160c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80160ca:	4770      	bx	lr

080160cc <rcl_take_request>:
 80160cc:	b570      	push	{r4, r5, r6, lr}
 80160ce:	468e      	mov	lr, r1
 80160d0:	b08c      	sub	sp, #48	@ 0x30
 80160d2:	460c      	mov	r4, r1
 80160d4:	4616      	mov	r6, r2
 80160d6:	f10d 0c18 	add.w	ip, sp, #24
 80160da:	4605      	mov	r5, r0
 80160dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80160e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80160e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80160ec:	b30d      	cbz	r5, 8016132 <rcl_take_request+0x66>
 80160ee:	682b      	ldr	r3, [r5, #0]
 80160f0:	b1fb      	cbz	r3, 8016132 <rcl_take_request+0x66>
 80160f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80160f6:	b1e0      	cbz	r0, 8016132 <rcl_take_request+0x66>
 80160f8:	b336      	cbz	r6, 8016148 <rcl_take_request+0x7c>
 80160fa:	2300      	movs	r3, #0
 80160fc:	4632      	mov	r2, r6
 80160fe:	a902      	add	r1, sp, #8
 8016100:	f88d 3007 	strb.w	r3, [sp, #7]
 8016104:	f10d 0307 	add.w	r3, sp, #7
 8016108:	f002 ffce 	bl	80190a8 <rmw_take_request>
 801610c:	4605      	mov	r5, r0
 801610e:	b198      	cbz	r0, 8016138 <rcl_take_request+0x6c>
 8016110:	280a      	cmp	r0, #10
 8016112:	bf18      	it	ne
 8016114:	2501      	movne	r5, #1
 8016116:	f10d 0e18 	add.w	lr, sp, #24
 801611a:	46a4      	mov	ip, r4
 801611c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016120:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016124:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016128:	e88c 0003 	stmia.w	ip, {r0, r1}
 801612c:	4628      	mov	r0, r5
 801612e:	b00c      	add	sp, #48	@ 0x30
 8016130:	bd70      	pop	{r4, r5, r6, pc}
 8016132:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8016136:	e7ee      	b.n	8016116 <rcl_take_request+0x4a>
 8016138:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801613c:	f240 2359 	movw	r3, #601	@ 0x259
 8016140:	2a00      	cmp	r2, #0
 8016142:	bf08      	it	eq
 8016144:	461d      	moveq	r5, r3
 8016146:	e7e6      	b.n	8016116 <rcl_take_request+0x4a>
 8016148:	250b      	movs	r5, #11
 801614a:	e7e4      	b.n	8016116 <rcl_take_request+0x4a>

0801614c <rcl_send_response>:
 801614c:	b170      	cbz	r0, 801616c <rcl_send_response+0x20>
 801614e:	6800      	ldr	r0, [r0, #0]
 8016150:	b160      	cbz	r0, 801616c <rcl_send_response+0x20>
 8016152:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016156:	b148      	cbz	r0, 801616c <rcl_send_response+0x20>
 8016158:	b169      	cbz	r1, 8016176 <rcl_send_response+0x2a>
 801615a:	b510      	push	{r4, lr}
 801615c:	b14a      	cbz	r2, 8016172 <rcl_send_response+0x26>
 801615e:	f003 f801 	bl	8019164 <rmw_send_response>
 8016162:	b110      	cbz	r0, 801616a <rcl_send_response+0x1e>
 8016164:	2802      	cmp	r0, #2
 8016166:	bf18      	it	ne
 8016168:	2001      	movne	r0, #1
 801616a:	bd10      	pop	{r4, pc}
 801616c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016170:	4770      	bx	lr
 8016172:	200b      	movs	r0, #11
 8016174:	bd10      	pop	{r4, pc}
 8016176:	200b      	movs	r0, #11
 8016178:	4770      	bx	lr
 801617a:	bf00      	nop

0801617c <rcl_service_is_valid>:
 801617c:	b130      	cbz	r0, 801618c <rcl_service_is_valid+0x10>
 801617e:	6800      	ldr	r0, [r0, #0]
 8016180:	b120      	cbz	r0, 801618c <rcl_service_is_valid+0x10>
 8016182:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016186:	3800      	subs	r0, #0
 8016188:	bf18      	it	ne
 801618a:	2001      	movne	r0, #1
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop

08016190 <rcl_take>:
 8016190:	2800      	cmp	r0, #0
 8016192:	d049      	beq.n	8016228 <rcl_take+0x98>
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	4615      	mov	r5, r2
 801619a:	6802      	ldr	r2, [r0, #0]
 801619c:	b0a4      	sub	sp, #144	@ 0x90
 801619e:	4604      	mov	r4, r0
 80161a0:	2a00      	cmp	r2, #0
 80161a2:	d039      	beq.n	8016218 <rcl_take+0x88>
 80161a4:	461f      	mov	r7, r3
 80161a6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80161aa:	b3ab      	cbz	r3, 8016218 <rcl_take+0x88>
 80161ac:	460e      	mov	r6, r1
 80161ae:	2900      	cmp	r1, #0
 80161b0:	d038      	beq.n	8016224 <rcl_take+0x94>
 80161b2:	2d00      	cmp	r5, #0
 80161b4:	d03c      	beq.n	8016230 <rcl_take+0xa0>
 80161b6:	a802      	add	r0, sp, #8
 80161b8:	f04f 0800 	mov.w	r8, #0
 80161bc:	f002 fc08 	bl	80189d0 <rmw_get_zero_initialized_message_info>
 80161c0:	f10d 0c08 	add.w	ip, sp, #8
 80161c4:	46ae      	mov	lr, r5
 80161c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161de:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80161e2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80161e6:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80161ea:	462b      	mov	r3, r5
 80161ec:	6820      	ldr	r0, [r4, #0]
 80161ee:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80161f2:	4631      	mov	r1, r6
 80161f4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80161f8:	9700      	str	r7, [sp, #0]
 80161fa:	f003 f857 	bl	80192ac <rmw_take_with_info>
 80161fe:	4603      	mov	r3, r0
 8016200:	b9c0      	cbnz	r0, 8016234 <rcl_take+0xa4>
 8016202:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016206:	f240 1291 	movw	r2, #401	@ 0x191
 801620a:	2900      	cmp	r1, #0
 801620c:	bf08      	it	eq
 801620e:	4613      	moveq	r3, r2
 8016210:	4618      	mov	r0, r3
 8016212:	b024      	add	sp, #144	@ 0x90
 8016214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016218:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801621c:	4618      	mov	r0, r3
 801621e:	b024      	add	sp, #144	@ 0x90
 8016220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016224:	230b      	movs	r3, #11
 8016226:	e7f3      	b.n	8016210 <rcl_take+0x80>
 8016228:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801622c:	4618      	mov	r0, r3
 801622e:	4770      	bx	lr
 8016230:	ad14      	add	r5, sp, #80	@ 0x50
 8016232:	e7c0      	b.n	80161b6 <rcl_take+0x26>
 8016234:	f7ff fa1a 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 8016238:	4603      	mov	r3, r0
 801623a:	e7e9      	b.n	8016210 <rcl_take+0x80>

0801623c <rcl_subscription_get_rmw_handle>:
 801623c:	b118      	cbz	r0, 8016246 <rcl_subscription_get_rmw_handle+0xa>
 801623e:	6800      	ldr	r0, [r0, #0]
 8016240:	b108      	cbz	r0, 8016246 <rcl_subscription_get_rmw_handle+0xa>
 8016242:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016246:	4770      	bx	lr

08016248 <rcl_subscription_is_valid>:
 8016248:	b130      	cbz	r0, 8016258 <rcl_subscription_is_valid+0x10>
 801624a:	6800      	ldr	r0, [r0, #0]
 801624c:	b120      	cbz	r0, 8016258 <rcl_subscription_is_valid+0x10>
 801624e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016252:	3800      	subs	r0, #0
 8016254:	bf18      	it	ne
 8016256:	2001      	movne	r0, #1
 8016258:	4770      	bx	lr
 801625a:	bf00      	nop

0801625c <rcl_get_system_time>:
 801625c:	4608      	mov	r0, r1
 801625e:	f7f8 be07 	b.w	800ee70 <rcutils_system_time_now>
 8016262:	bf00      	nop

08016264 <rcl_get_steady_time>:
 8016264:	4608      	mov	r0, r1
 8016266:	f7f8 be29 	b.w	800eebc <rcutils_steady_time_now>
 801626a:	bf00      	nop

0801626c <rcl_get_ros_time>:
 801626c:	7a03      	ldrb	r3, [r0, #8]
 801626e:	b510      	push	{r4, lr}
 8016270:	460c      	mov	r4, r1
 8016272:	b143      	cbz	r3, 8016286 <rcl_get_ros_time+0x1a>
 8016274:	2105      	movs	r1, #5
 8016276:	f001 ff9b 	bl	80181b0 <__atomic_load_8>
 801627a:	4602      	mov	r2, r0
 801627c:	460b      	mov	r3, r1
 801627e:	2000      	movs	r0, #0
 8016280:	e9c4 2300 	strd	r2, r3, [r4]
 8016284:	bd10      	pop	{r4, pc}
 8016286:	4608      	mov	r0, r1
 8016288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801628c:	f7f8 bdf0 	b.w	800ee70 <rcutils_system_time_now>

08016290 <rcl_clock_init>:
 8016290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016292:	4605      	mov	r5, r0
 8016294:	4610      	mov	r0, r2
 8016296:	4614      	mov	r4, r2
 8016298:	460e      	mov	r6, r1
 801629a:	f7f8 fda9 	bl	800edf0 <rcutils_allocator_is_valid>
 801629e:	b128      	cbz	r0, 80162ac <rcl_clock_init+0x1c>
 80162a0:	2d03      	cmp	r5, #3
 80162a2:	d803      	bhi.n	80162ac <rcl_clock_init+0x1c>
 80162a4:	e8df f005 	tbb	[pc, r5]
 80162a8:	0659301f 	.word	0x0659301f
 80162ac:	f04f 0c0b 	mov.w	ip, #11
 80162b0:	4660      	mov	r0, ip
 80162b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162b4:	2c00      	cmp	r4, #0
 80162b6:	d0f9      	beq.n	80162ac <rcl_clock_init+0x1c>
 80162b8:	fab6 f386 	clz	r3, r6
 80162bc:	095b      	lsrs	r3, r3, #5
 80162be:	2e00      	cmp	r6, #0
 80162c0:	d0f4      	beq.n	80162ac <rcl_clock_init+0x1c>
 80162c2:	6133      	str	r3, [r6, #16]
 80162c4:	469c      	mov	ip, r3
 80162c6:	f106 0514 	add.w	r5, r6, #20
 80162ca:	4f32      	ldr	r7, [pc, #200]	@ (8016394 <rcl_clock_init+0x104>)
 80162cc:	f04f 0e03 	mov.w	lr, #3
 80162d0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80162d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	4660      	mov	r0, ip
 80162dc:	602b      	str	r3, [r5, #0]
 80162de:	60f7      	str	r7, [r6, #12]
 80162e0:	f886 e000 	strb.w	lr, [r6]
 80162e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162e6:	2e00      	cmp	r6, #0
 80162e8:	d0e0      	beq.n	80162ac <rcl_clock_init+0x1c>
 80162ea:	2300      	movs	r3, #0
 80162ec:	f106 0514 	add.w	r5, r6, #20
 80162f0:	7033      	strb	r3, [r6, #0]
 80162f2:	469c      	mov	ip, r3
 80162f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80162f8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80162fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016300:	6823      	ldr	r3, [r4, #0]
 8016302:	4660      	mov	r0, ip
 8016304:	602b      	str	r3, [r5, #0]
 8016306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016308:	2c00      	cmp	r4, #0
 801630a:	d0cf      	beq.n	80162ac <rcl_clock_init+0x1c>
 801630c:	fab6 f586 	clz	r5, r6
 8016310:	096d      	lsrs	r5, r5, #5
 8016312:	2e00      	cmp	r6, #0
 8016314:	d0ca      	beq.n	80162ac <rcl_clock_init+0x1c>
 8016316:	46a6      	mov	lr, r4
 8016318:	7035      	strb	r5, [r6, #0]
 801631a:	f106 0c14 	add.w	ip, r6, #20
 801631e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016322:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016326:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801632a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801632e:	f8de 3000 	ldr.w	r3, [lr]
 8016332:	2010      	movs	r0, #16
 8016334:	f8cc 3000 	str.w	r3, [ip]
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	6921      	ldr	r1, [r4, #16]
 801633c:	4798      	blx	r3
 801633e:	6130      	str	r0, [r6, #16]
 8016340:	b320      	cbz	r0, 801638c <rcl_clock_init+0xfc>
 8016342:	2200      	movs	r2, #0
 8016344:	2300      	movs	r3, #0
 8016346:	46ac      	mov	ip, r5
 8016348:	7205      	strb	r5, [r0, #8]
 801634a:	e9c0 2300 	strd	r2, r3, [r0]
 801634e:	4a12      	ldr	r2, [pc, #72]	@ (8016398 <rcl_clock_init+0x108>)
 8016350:	2301      	movs	r3, #1
 8016352:	4660      	mov	r0, ip
 8016354:	60f2      	str	r2, [r6, #12]
 8016356:	7033      	strb	r3, [r6, #0]
 8016358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801635a:	2c00      	cmp	r4, #0
 801635c:	d0a6      	beq.n	80162ac <rcl_clock_init+0x1c>
 801635e:	fab6 f386 	clz	r3, r6
 8016362:	095b      	lsrs	r3, r3, #5
 8016364:	2e00      	cmp	r6, #0
 8016366:	d0a1      	beq.n	80162ac <rcl_clock_init+0x1c>
 8016368:	6133      	str	r3, [r6, #16]
 801636a:	469c      	mov	ip, r3
 801636c:	f106 0514 	add.w	r5, r6, #20
 8016370:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801639c <rcl_clock_init+0x10c>
 8016374:	2702      	movs	r7, #2
 8016376:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801637a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801637c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801637e:	6823      	ldr	r3, [r4, #0]
 8016380:	4660      	mov	r0, ip
 8016382:	602b      	str	r3, [r5, #0]
 8016384:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016388:	7037      	strb	r7, [r6, #0]
 801638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801638c:	f04f 0c0a 	mov.w	ip, #10
 8016390:	e78e      	b.n	80162b0 <rcl_clock_init+0x20>
 8016392:	bf00      	nop
 8016394:	08016265 	.word	0x08016265
 8016398:	0801626d 	.word	0x0801626d
 801639c:	0801625d 	.word	0x0801625d

080163a0 <rcl_clock_get_now>:
 80163a0:	b140      	cbz	r0, 80163b4 <rcl_clock_get_now+0x14>
 80163a2:	b139      	cbz	r1, 80163b4 <rcl_clock_get_now+0x14>
 80163a4:	7803      	ldrb	r3, [r0, #0]
 80163a6:	b11b      	cbz	r3, 80163b0 <rcl_clock_get_now+0x10>
 80163a8:	68c3      	ldr	r3, [r0, #12]
 80163aa:	b10b      	cbz	r3, 80163b0 <rcl_clock_get_now+0x10>
 80163ac:	6900      	ldr	r0, [r0, #16]
 80163ae:	4718      	bx	r3
 80163b0:	2001      	movs	r0, #1
 80163b2:	4770      	bx	lr
 80163b4:	200b      	movs	r0, #11
 80163b6:	4770      	bx	lr

080163b8 <rcl_clock_add_jump_callback>:
 80163b8:	b082      	sub	sp, #8
 80163ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163be:	a906      	add	r1, sp, #24
 80163c0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 80163c4:	e881 000c 	stmia.w	r1, {r2, r3}
 80163c8:	b330      	cbz	r0, 8016418 <rcl_clock_add_jump_callback+0x60>
 80163ca:	4604      	mov	r4, r0
 80163cc:	3014      	adds	r0, #20
 80163ce:	f7f8 fd0f 	bl	800edf0 <rcutils_allocator_is_valid>
 80163d2:	b30d      	cbz	r5, 8016418 <rcl_clock_add_jump_callback+0x60>
 80163d4:	f080 0301 	eor.w	r3, r0, #1
 80163d8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80163dc:	d11c      	bne.n	8016418 <rcl_clock_add_jump_callback+0x60>
 80163de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	db19      	blt.n	8016418 <rcl_clock_add_jump_callback+0x60>
 80163e4:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 80163e8:	2901      	cmp	r1, #1
 80163ea:	f172 0200 	sbcs.w	r2, r2, #0
 80163ee:	da13      	bge.n	8016418 <rcl_clock_add_jump_callback+0x60>
 80163f0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80163f4:	2f00      	cmp	r7, #0
 80163f6:	d040      	beq.n	801647a <rcl_clock_add_jump_callback+0xc2>
 80163f8:	4602      	mov	r2, r0
 80163fa:	e003      	b.n	8016404 <rcl_clock_add_jump_callback+0x4c>
 80163fc:	42bb      	cmp	r3, r7
 80163fe:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8016402:	d010      	beq.n	8016426 <rcl_clock_add_jump_callback+0x6e>
 8016404:	6811      	ldr	r1, [r2, #0]
 8016406:	3301      	adds	r3, #1
 8016408:	42a9      	cmp	r1, r5
 801640a:	d1f7      	bne.n	80163fc <rcl_clock_add_jump_callback+0x44>
 801640c:	6a11      	ldr	r1, [r2, #32]
 801640e:	42b1      	cmp	r1, r6
 8016410:	d1f4      	bne.n	80163fc <rcl_clock_add_jump_callback+0x44>
 8016412:	f04f 0e01 	mov.w	lr, #1
 8016416:	e001      	b.n	801641c <rcl_clock_add_jump_callback+0x64>
 8016418:	f04f 0e0b 	mov.w	lr, #11
 801641c:	4670      	mov	r0, lr
 801641e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016422:	b002      	add	sp, #8
 8016424:	4770      	bx	lr
 8016426:	3301      	adds	r3, #1
 8016428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801642c:	00d9      	lsls	r1, r3, #3
 801642e:	69e3      	ldr	r3, [r4, #28]
 8016430:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016432:	4798      	blx	r3
 8016434:	b1f0      	cbz	r0, 8016474 <rcl_clock_add_jump_callback+0xbc>
 8016436:	68a3      	ldr	r3, [r4, #8]
 8016438:	f10d 0c18 	add.w	ip, sp, #24
 801643c:	6060      	str	r0, [r4, #4]
 801643e:	f04f 0e00 	mov.w	lr, #0
 8016442:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016446:	f103 0801 	add.w	r8, r3, #1
 801644a:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801644e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016456:	f105 0708 	add.w	r7, r5, #8
 801645a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801645c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016460:	e887 0003 	stmia.w	r7, {r0, r1}
 8016464:	4670      	mov	r0, lr
 8016466:	622e      	str	r6, [r5, #32]
 8016468:	f8c4 8008 	str.w	r8, [r4, #8]
 801646c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016470:	b002      	add	sp, #8
 8016472:	4770      	bx	lr
 8016474:	f04f 0e0a 	mov.w	lr, #10
 8016478:	e7d0      	b.n	801641c <rcl_clock_add_jump_callback+0x64>
 801647a:	2128      	movs	r1, #40	@ 0x28
 801647c:	e7d7      	b.n	801642e <rcl_clock_add_jump_callback+0x76>
 801647e:	bf00      	nop

08016480 <rcl_clock_remove_jump_callback>:
 8016480:	2800      	cmp	r0, #0
 8016482:	d05f      	beq.n	8016544 <rcl_clock_remove_jump_callback+0xc4>
 8016484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016488:	4605      	mov	r5, r0
 801648a:	3014      	adds	r0, #20
 801648c:	460f      	mov	r7, r1
 801648e:	4692      	mov	sl, r2
 8016490:	f7f8 fcae 	bl	800edf0 <rcutils_allocator_is_valid>
 8016494:	f080 0001 	eor.w	r0, r0, #1
 8016498:	b2c0      	uxtb	r0, r0
 801649a:	2800      	cmp	r0, #0
 801649c:	d13f      	bne.n	801651e <rcl_clock_remove_jump_callback+0x9e>
 801649e:	2f00      	cmp	r7, #0
 80164a0:	d03d      	beq.n	801651e <rcl_clock_remove_jump_callback+0x9e>
 80164a2:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80164a6:	f1b8 0f00 	cmp.w	r8, #0
 80164aa:	d00c      	beq.n	80164c6 <rcl_clock_remove_jump_callback+0x46>
 80164ac:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80164b0:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 80164b4:	464c      	mov	r4, r9
 80164b6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	42bb      	cmp	r3, r7
 80164be:	d005      	beq.n	80164cc <rcl_clock_remove_jump_callback+0x4c>
 80164c0:	3428      	adds	r4, #40	@ 0x28
 80164c2:	42a6      	cmp	r6, r4
 80164c4:	d1f9      	bne.n	80164ba <rcl_clock_remove_jump_callback+0x3a>
 80164c6:	2001      	movs	r0, #1
 80164c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164cc:	6a23      	ldr	r3, [r4, #32]
 80164ce:	3428      	adds	r4, #40	@ 0x28
 80164d0:	42a6      	cmp	r6, r4
 80164d2:	d02f      	beq.n	8016534 <rcl_clock_remove_jump_callback+0xb4>
 80164d4:	4553      	cmp	r3, sl
 80164d6:	d1f0      	bne.n	80164ba <rcl_clock_remove_jump_callback+0x3a>
 80164d8:	46a6      	mov	lr, r4
 80164da:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80164de:	3428      	adds	r4, #40	@ 0x28
 80164e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80164ec:	42a6      	cmp	r6, r4
 80164ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164f2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80164f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80164fa:	d1ed      	bne.n	80164d8 <rcl_clock_remove_jump_callback+0x58>
 80164fc:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8016500:	60ac      	str	r4, [r5, #8]
 8016502:	b17c      	cbz	r4, 8016524 <rcl_clock_remove_jump_callback+0xa4>
 8016504:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016508:	69eb      	ldr	r3, [r5, #28]
 801650a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801650c:	4648      	mov	r0, r9
 801650e:	00e1      	lsls	r1, r4, #3
 8016510:	4798      	blx	r3
 8016512:	4603      	mov	r3, r0
 8016514:	b1c0      	cbz	r0, 8016548 <rcl_clock_remove_jump_callback+0xc8>
 8016516:	2000      	movs	r0, #0
 8016518:	606b      	str	r3, [r5, #4]
 801651a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801651e:	200b      	movs	r0, #11
 8016520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016524:	4648      	mov	r0, r9
 8016526:	69ab      	ldr	r3, [r5, #24]
 8016528:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801652a:	4798      	blx	r3
 801652c:	4620      	mov	r0, r4
 801652e:	606c      	str	r4, [r5, #4]
 8016530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016534:	4553      	cmp	r3, sl
 8016536:	d1c6      	bne.n	80164c6 <rcl_clock_remove_jump_callback+0x46>
 8016538:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801653c:	60ac      	str	r4, [r5, #8]
 801653e:	2c00      	cmp	r4, #0
 8016540:	d1e0      	bne.n	8016504 <rcl_clock_remove_jump_callback+0x84>
 8016542:	e7ef      	b.n	8016524 <rcl_clock_remove_jump_callback+0xa4>
 8016544:	200b      	movs	r0, #11
 8016546:	4770      	bx	lr
 8016548:	200a      	movs	r0, #10
 801654a:	e7e9      	b.n	8016520 <rcl_clock_remove_jump_callback+0xa0>

0801654c <_rcl_timer_time_jump>:
 801654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016550:	4605      	mov	r5, r0
 8016552:	b084      	sub	sp, #16
 8016554:	4614      	mov	r4, r2
 8016556:	b131      	cbz	r1, 8016566 <_rcl_timer_time_jump+0x1a>
 8016558:	7803      	ldrb	r3, [r0, #0]
 801655a:	3b02      	subs	r3, #2
 801655c:	2b01      	cmp	r3, #1
 801655e:	d93f      	bls.n	80165e0 <_rcl_timer_time_jump+0x94>
 8016560:	b004      	add	sp, #16
 8016562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016566:	6813      	ldr	r3, [r2, #0]
 8016568:	a902      	add	r1, sp, #8
 801656a:	6818      	ldr	r0, [r3, #0]
 801656c:	f7ff ff18 	bl	80163a0 <rcl_clock_get_now>
 8016570:	2800      	cmp	r0, #0
 8016572:	d1f5      	bne.n	8016560 <_rcl_timer_time_jump+0x14>
 8016574:	6820      	ldr	r0, [r4, #0]
 8016576:	2105      	movs	r1, #5
 8016578:	3020      	adds	r0, #32
 801657a:	f001 fe19 	bl	80181b0 <__atomic_load_8>
 801657e:	6823      	ldr	r3, [r4, #0]
 8016580:	4681      	mov	r9, r0
 8016582:	4688      	mov	r8, r1
 8016584:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8016588:	2105      	movs	r1, #5
 801658a:	f001 fe11 	bl	80181b0 <__atomic_load_8>
 801658e:	4607      	mov	r7, r0
 8016590:	6820      	ldr	r0, [r4, #0]
 8016592:	460e      	mov	r6, r1
 8016594:	2105      	movs	r1, #5
 8016596:	3018      	adds	r0, #24
 8016598:	f001 fe0a 	bl	80181b0 <__atomic_load_8>
 801659c:	782b      	ldrb	r3, [r5, #0]
 801659e:	4682      	mov	sl, r0
 80165a0:	460d      	mov	r5, r1
 80165a2:	3b02      	subs	r3, #2
 80165a4:	9a02      	ldr	r2, [sp, #8]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	9b03      	ldr	r3, [sp, #12]
 80165aa:	d937      	bls.n	801661c <_rcl_timer_time_jump+0xd0>
 80165ac:	42ba      	cmp	r2, r7
 80165ae:	eb73 0106 	sbcs.w	r1, r3, r6
 80165b2:	da60      	bge.n	8016676 <_rcl_timer_time_jump+0x12a>
 80165b4:	454a      	cmp	r2, r9
 80165b6:	eb73 0108 	sbcs.w	r1, r3, r8
 80165ba:	dad1      	bge.n	8016560 <_rcl_timer_time_jump+0x14>
 80165bc:	eb1a 0202 	adds.w	r2, sl, r2
 80165c0:	6820      	ldr	r0, [r4, #0]
 80165c2:	eb43 0305 	adc.w	r3, r3, r5
 80165c6:	2505      	movs	r5, #5
 80165c8:	3028      	adds	r0, #40	@ 0x28
 80165ca:	9500      	str	r5, [sp, #0]
 80165cc:	f001 fe26 	bl	801821c <__atomic_store_8>
 80165d0:	6820      	ldr	r0, [r4, #0]
 80165d2:	9500      	str	r5, [sp, #0]
 80165d4:	3020      	adds	r0, #32
 80165d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165da:	f001 fe1f 	bl	801821c <__atomic_store_8>
 80165de:	e7bf      	b.n	8016560 <_rcl_timer_time_jump+0x14>
 80165e0:	6813      	ldr	r3, [r2, #0]
 80165e2:	a902      	add	r1, sp, #8
 80165e4:	6818      	ldr	r0, [r3, #0]
 80165e6:	f7ff fedb 	bl	80163a0 <rcl_clock_get_now>
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d1b8      	bne.n	8016560 <_rcl_timer_time_jump+0x14>
 80165ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165f2:	4313      	orrs	r3, r2
 80165f4:	d0b4      	beq.n	8016560 <_rcl_timer_time_jump+0x14>
 80165f6:	6820      	ldr	r0, [r4, #0]
 80165f8:	2105      	movs	r1, #5
 80165fa:	3028      	adds	r0, #40	@ 0x28
 80165fc:	f001 fdd8 	bl	80181b0 <__atomic_load_8>
 8016600:	9d02      	ldr	r5, [sp, #8]
 8016602:	4602      	mov	r2, r0
 8016604:	9b03      	ldr	r3, [sp, #12]
 8016606:	6820      	ldr	r0, [r4, #0]
 8016608:	1b52      	subs	r2, r2, r5
 801660a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801660e:	eb61 0303 	sbc.w	r3, r1, r3
 8016612:	2105      	movs	r1, #5
 8016614:	9100      	str	r1, [sp, #0]
 8016616:	f001 fe01 	bl	801821c <__atomic_store_8>
 801661a:	e7a1      	b.n	8016560 <_rcl_timer_time_jump+0x14>
 801661c:	4313      	orrs	r3, r2
 801661e:	d09f      	beq.n	8016560 <_rcl_timer_time_jump+0x14>
 8016620:	6820      	ldr	r0, [r4, #0]
 8016622:	f04f 0805 	mov.w	r8, #5
 8016626:	2300      	movs	r3, #0
 8016628:	2200      	movs	r2, #0
 801662a:	3030      	adds	r0, #48	@ 0x30
 801662c:	f8cd 8000 	str.w	r8, [sp]
 8016630:	f001 fe2a 	bl	8018288 <__atomic_exchange_8>
 8016634:	ea51 0300 	orrs.w	r3, r1, r0
 8016638:	4606      	mov	r6, r0
 801663a:	460f      	mov	r7, r1
 801663c:	d090      	beq.n	8016560 <_rcl_timer_time_jump+0x14>
 801663e:	9a02      	ldr	r2, [sp, #8]
 8016640:	9b03      	ldr	r3, [sp, #12]
 8016642:	1a12      	subs	r2, r2, r0
 8016644:	f8cd 8000 	str.w	r8, [sp]
 8016648:	6820      	ldr	r0, [r4, #0]
 801664a:	eb63 0301 	sbc.w	r3, r3, r1
 801664e:	eb12 020a 	adds.w	r2, r2, sl
 8016652:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8016656:	eb43 0305 	adc.w	r3, r3, r5
 801665a:	f001 fddf 	bl	801821c <__atomic_store_8>
 801665e:	f8cd 8000 	str.w	r8, [sp]
 8016662:	6820      	ldr	r0, [r4, #0]
 8016664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016668:	3020      	adds	r0, #32
 801666a:	1b92      	subs	r2, r2, r6
 801666c:	eb63 0307 	sbc.w	r3, r3, r7
 8016670:	f001 fdd4 	bl	801821c <__atomic_store_8>
 8016674:	e774      	b.n	8016560 <_rcl_timer_time_jump+0x14>
 8016676:	6820      	ldr	r0, [r4, #0]
 8016678:	3008      	adds	r0, #8
 801667a:	f004 fba9 	bl	801add0 <rcl_trigger_guard_condition>
 801667e:	e76f      	b.n	8016560 <_rcl_timer_time_jump+0x14>

08016680 <rcl_get_zero_initialized_timer>:
 8016680:	4b01      	ldr	r3, [pc, #4]	@ (8016688 <rcl_get_zero_initialized_timer+0x8>)
 8016682:	6818      	ldr	r0, [r3, #0]
 8016684:	4770      	bx	lr
 8016686:	bf00      	nop
 8016688:	0801cfa4 	.word	0x0801cfa4
 801668c:	00000000 	.word	0x00000000

08016690 <rcl_timer_init>:
 8016690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016694:	b0ab      	sub	sp, #172	@ 0xac
 8016696:	460d      	mov	r5, r1
 8016698:	4604      	mov	r4, r0
 801669a:	4692      	mov	sl, r2
 801669c:	a837      	add	r0, sp, #220	@ 0xdc
 801669e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 80166a0:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 80166a4:	f7f8 fba4 	bl	800edf0 <rcutils_allocator_is_valid>
 80166a8:	fab5 f385 	clz	r3, r5
 80166ac:	095b      	lsrs	r3, r3, #5
 80166ae:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 80166b2:	2c00      	cmp	r4, #0
 80166b4:	bf08      	it	eq
 80166b6:	f043 0301 	orreq.w	r3, r3, #1
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d164      	bne.n	8016788 <rcl_timer_init+0xf8>
 80166be:	f080 0001 	eor.w	r0, r0, #1
 80166c2:	b2c0      	uxtb	r0, r0
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d15f      	bne.n	8016788 <rcl_timer_init+0xf8>
 80166c8:	6823      	ldr	r3, [r4, #0]
 80166ca:	b123      	cbz	r3, 80166d6 <rcl_timer_init+0x46>
 80166cc:	2664      	movs	r6, #100	@ 0x64
 80166ce:	4630      	mov	r0, r6
 80166d0:	b02b      	add	sp, #172	@ 0xac
 80166d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166d6:	a908      	add	r1, sp, #32
 80166d8:	4628      	mov	r0, r5
 80166da:	f7ff fe61 	bl	80163a0 <rcl_clock_get_now>
 80166de:	4606      	mov	r6, r0
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d1f4      	bne.n	80166ce <rcl_timer_init+0x3e>
 80166e4:	f10d 0b18 	add.w	fp, sp, #24
 80166e8:	ae0b      	add	r6, sp, #44	@ 0x2c
 80166ea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80166ee:	4658      	mov	r0, fp
 80166f0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80166f4:	f004 fa76 	bl	801abe4 <rcl_get_zero_initialized_guard_condition>
 80166f8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80166fc:	e889 0003 	stmia.w	r9, {r0, r1}
 8016700:	4630      	mov	r0, r6
 8016702:	f004 fb49 	bl	801ad98 <rcl_guard_condition_get_default_options>
 8016706:	ab0d      	add	r3, sp, #52	@ 0x34
 8016708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801670c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016710:	4651      	mov	r1, sl
 8016712:	4648      	mov	r0, r9
 8016714:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016718:	f004 fa6e 	bl	801abf8 <rcl_guard_condition_init>
 801671c:	4606      	mov	r6, r0
 801671e:	2800      	cmp	r0, #0
 8016720:	d1d5      	bne.n	80166ce <rcl_timer_init+0x3e>
 8016722:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	2b01      	cmp	r3, #1
 8016728:	d033      	beq.n	8016792 <rcl_timer_init+0x102>
 801672a:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801672c:	4642      	mov	r2, r8
 801672e:	463b      	mov	r3, r7
 8016730:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 8016734:	911a      	str	r1, [sp, #104]	@ 0x68
 8016736:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801673a:	f04f 0a00 	mov.w	sl, #0
 801673e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8016742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016746:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80167f0 <rcl_timer_init+0x160>
 801674a:	eb12 0008 	adds.w	r0, r2, r8
 801674e:	eb47 0103 	adc.w	r1, r7, r3
 8016752:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016756:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801675a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801675e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016762:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016766:	f8de 3000 	ldr.w	r3, [lr]
 801676a:	2050      	movs	r0, #80	@ 0x50
 801676c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016770:	4619      	mov	r1, r3
 8016772:	f8cc 3000 	str.w	r3, [ip]
 8016776:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8016778:	4798      	blx	r3
 801677a:	6020      	str	r0, [r4, #0]
 801677c:	b358      	cbz	r0, 80167d6 <rcl_timer_init+0x146>
 801677e:	2250      	movs	r2, #80	@ 0x50
 8016780:	a916      	add	r1, sp, #88	@ 0x58
 8016782:	f005 fa4a 	bl	801bc1a <memcpy>
 8016786:	e7a2      	b.n	80166ce <rcl_timer_init+0x3e>
 8016788:	260b      	movs	r6, #11
 801678a:	4630      	mov	r0, r6
 801678c:	b02b      	add	sp, #172	@ 0xac
 801678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016792:	2001      	movs	r0, #1
 8016794:	2100      	movs	r1, #0
 8016796:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801679a:	ab12      	add	r3, sp, #72	@ 0x48
 801679c:	4a16      	ldr	r2, [pc, #88]	@ (80167f8 <rcl_timer_init+0x168>)
 801679e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80167a2:	9405      	str	r4, [sp, #20]
 80167a4:	9204      	str	r2, [sp, #16]
 80167a6:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80167aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167ae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80167b2:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80167b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80167b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80167bc:	4628      	mov	r0, r5
 80167be:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80167c2:	f7ff fdf9 	bl	80163b8 <rcl_clock_add_jump_callback>
 80167c6:	4603      	mov	r3, r0
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d0ae      	beq.n	801672a <rcl_timer_init+0x9a>
 80167cc:	4648      	mov	r0, r9
 80167ce:	461e      	mov	r6, r3
 80167d0:	f004 fabc 	bl	801ad4c <rcl_guard_condition_fini>
 80167d4:	e77b      	b.n	80166ce <rcl_timer_init+0x3e>
 80167d6:	4648      	mov	r0, r9
 80167d8:	260a      	movs	r6, #10
 80167da:	f004 fab7 	bl	801ad4c <rcl_guard_condition_fini>
 80167de:	4622      	mov	r2, r4
 80167e0:	4905      	ldr	r1, [pc, #20]	@ (80167f8 <rcl_timer_init+0x168>)
 80167e2:	4628      	mov	r0, r5
 80167e4:	f7ff fe4c 	bl	8016480 <rcl_clock_remove_jump_callback>
 80167e8:	e771      	b.n	80166ce <rcl_timer_init+0x3e>
 80167ea:	bf00      	nop
 80167ec:	f3af 8000 	nop.w
	...
 80167f8:	0801654d 	.word	0x0801654d

080167fc <rcl_timer_call>:
 80167fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016800:	b087      	sub	sp, #28
 8016802:	2800      	cmp	r0, #0
 8016804:	d06c      	beq.n	80168e0 <rcl_timer_call+0xe4>
 8016806:	6803      	ldr	r3, [r0, #0]
 8016808:	4604      	mov	r4, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d062      	beq.n	80168d4 <rcl_timer_call+0xd8>
 801680e:	f3bf 8f5b 	dmb	ish
 8016812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016816:	f3bf 8f5b 	dmb	ish
 801681a:	2b00      	cmp	r3, #0
 801681c:	d14f      	bne.n	80168be <rcl_timer_call+0xc2>
 801681e:	6803      	ldr	r3, [r0, #0]
 8016820:	a904      	add	r1, sp, #16
 8016822:	6818      	ldr	r0, [r3, #0]
 8016824:	f7ff fdbc 	bl	80163a0 <rcl_clock_get_now>
 8016828:	4605      	mov	r5, r0
 801682a:	2800      	cmp	r0, #0
 801682c:	d149      	bne.n	80168c2 <rcl_timer_call+0xc6>
 801682e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016832:	2b00      	cmp	r3, #0
 8016834:	db49      	blt.n	80168ca <rcl_timer_call+0xce>
 8016836:	2605      	movs	r6, #5
 8016838:	6820      	ldr	r0, [r4, #0]
 801683a:	9600      	str	r6, [sp, #0]
 801683c:	3020      	adds	r0, #32
 801683e:	f001 fd23 	bl	8018288 <__atomic_exchange_8>
 8016842:	6823      	ldr	r3, [r4, #0]
 8016844:	4680      	mov	r8, r0
 8016846:	f3bf 8f5b 	dmb	ish
 801684a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801684e:	f3bf 8f5b 	dmb	ish
 8016852:	6820      	ldr	r0, [r4, #0]
 8016854:	4689      	mov	r9, r1
 8016856:	4631      	mov	r1, r6
 8016858:	3028      	adds	r0, #40	@ 0x28
 801685a:	f001 fca9 	bl	80181b0 <__atomic_load_8>
 801685e:	460f      	mov	r7, r1
 8016860:	4631      	mov	r1, r6
 8016862:	4606      	mov	r6, r0
 8016864:	6820      	ldr	r0, [r4, #0]
 8016866:	3018      	adds	r0, #24
 8016868:	f001 fca2 	bl	80181b0 <__atomic_load_8>
 801686c:	4602      	mov	r2, r0
 801686e:	9804      	ldr	r0, [sp, #16]
 8016870:	460b      	mov	r3, r1
 8016872:	18b6      	adds	r6, r6, r2
 8016874:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016878:	4692      	mov	sl, r2
 801687a:	eb47 0701 	adc.w	r7, r7, r1
 801687e:	4286      	cmp	r6, r0
 8016880:	eb77 010c 	sbcs.w	r1, r7, ip
 8016884:	da04      	bge.n	8016890 <rcl_timer_call+0x94>
 8016886:	ea53 0102 	orrs.w	r1, r3, r2
 801688a:	d12e      	bne.n	80168ea <rcl_timer_call+0xee>
 801688c:	4606      	mov	r6, r0
 801688e:	4667      	mov	r7, ip
 8016890:	6820      	ldr	r0, [r4, #0]
 8016892:	2105      	movs	r1, #5
 8016894:	4632      	mov	r2, r6
 8016896:	463b      	mov	r3, r7
 8016898:	3028      	adds	r0, #40	@ 0x28
 801689a:	9100      	str	r1, [sp, #0]
 801689c:	f001 fcbe 	bl	801821c <__atomic_store_8>
 80168a0:	f1bb 0f00 	cmp.w	fp, #0
 80168a4:	d00d      	beq.n	80168c2 <rcl_timer_call+0xc6>
 80168a6:	9a04      	ldr	r2, [sp, #16]
 80168a8:	4620      	mov	r0, r4
 80168aa:	9b05      	ldr	r3, [sp, #20]
 80168ac:	ebb2 0208 	subs.w	r2, r2, r8
 80168b0:	eb63 0309 	sbc.w	r3, r3, r9
 80168b4:	47d8      	blx	fp
 80168b6:	4628      	mov	r0, r5
 80168b8:	b007      	add	sp, #28
 80168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168be:	f240 3521 	movw	r5, #801	@ 0x321
 80168c2:	4628      	mov	r0, r5
 80168c4:	b007      	add	sp, #28
 80168c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ca:	2501      	movs	r5, #1
 80168cc:	4628      	mov	r0, r5
 80168ce:	b007      	add	sp, #28
 80168d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80168d8:	4628      	mov	r0, r5
 80168da:	b007      	add	sp, #28
 80168dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e0:	250b      	movs	r5, #11
 80168e2:	4628      	mov	r0, r5
 80168e4:	b007      	add	sp, #28
 80168e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ea:	1b80      	subs	r0, r0, r6
 80168ec:	eb6c 0107 	sbc.w	r1, ip, r7
 80168f0:	3801      	subs	r0, #1
 80168f2:	f161 0100 	sbc.w	r1, r1, #0
 80168f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80168fa:	f7e9 fd59 	bl	80003b0 <__aeabi_ldivmod>
 80168fe:	9b02      	ldr	r3, [sp, #8]
 8016900:	3001      	adds	r0, #1
 8016902:	f141 0100 	adc.w	r1, r1, #0
 8016906:	fb00 f303 	mul.w	r3, r0, r3
 801690a:	fb01 330a 	mla	r3, r1, sl, r3
 801690e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016912:	1986      	adds	r6, r0, r6
 8016914:	4453      	add	r3, sl
 8016916:	eb43 0707 	adc.w	r7, r3, r7
 801691a:	e7b9      	b.n	8016890 <rcl_timer_call+0x94>

0801691c <rcl_timer_is_ready>:
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	b380      	cbz	r0, 8016984 <rcl_timer_is_ready+0x68>
 8016922:	6803      	ldr	r3, [r0, #0]
 8016924:	4604      	mov	r4, r0
 8016926:	b38b      	cbz	r3, 801698c <rcl_timer_is_ready+0x70>
 8016928:	460d      	mov	r5, r1
 801692a:	b359      	cbz	r1, 8016984 <rcl_timer_is_ready+0x68>
 801692c:	f3bf 8f5b 	dmb	ish
 8016930:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016934:	f3bf 8f5b 	dmb	ish
 8016938:	b953      	cbnz	r3, 8016950 <rcl_timer_is_ready+0x34>
 801693a:	6803      	ldr	r3, [r0, #0]
 801693c:	4669      	mov	r1, sp
 801693e:	6818      	ldr	r0, [r3, #0]
 8016940:	f7ff fd2e 	bl	80163a0 <rcl_clock_get_now>
 8016944:	4606      	mov	r6, r0
 8016946:	b148      	cbz	r0, 801695c <rcl_timer_is_ready+0x40>
 8016948:	f240 3321 	movw	r3, #801	@ 0x321
 801694c:	4298      	cmp	r0, r3
 801694e:	d102      	bne.n	8016956 <rcl_timer_is_ready+0x3a>
 8016950:	2300      	movs	r3, #0
 8016952:	461e      	mov	r6, r3
 8016954:	702b      	strb	r3, [r5, #0]
 8016956:	4630      	mov	r0, r6
 8016958:	b002      	add	sp, #8
 801695a:	bd70      	pop	{r4, r5, r6, pc}
 801695c:	6820      	ldr	r0, [r4, #0]
 801695e:	2105      	movs	r1, #5
 8016960:	3028      	adds	r0, #40	@ 0x28
 8016962:	f001 fc25 	bl	80181b0 <__atomic_load_8>
 8016966:	9b00      	ldr	r3, [sp, #0]
 8016968:	1ac0      	subs	r0, r0, r3
 801696a:	9b01      	ldr	r3, [sp, #4]
 801696c:	eb61 0103 	sbc.w	r1, r1, r3
 8016970:	2801      	cmp	r0, #1
 8016972:	4630      	mov	r0, r6
 8016974:	f171 0300 	sbcs.w	r3, r1, #0
 8016978:	bfb4      	ite	lt
 801697a:	2301      	movlt	r3, #1
 801697c:	2300      	movge	r3, #0
 801697e:	702b      	strb	r3, [r5, #0]
 8016980:	b002      	add	sp, #8
 8016982:	bd70      	pop	{r4, r5, r6, pc}
 8016984:	260b      	movs	r6, #11
 8016986:	4630      	mov	r0, r6
 8016988:	b002      	add	sp, #8
 801698a:	bd70      	pop	{r4, r5, r6, pc}
 801698c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016990:	e7e1      	b.n	8016956 <rcl_timer_is_ready+0x3a>
 8016992:	bf00      	nop

08016994 <rcl_timer_get_time_until_next_call>:
 8016994:	b570      	push	{r4, r5, r6, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	b330      	cbz	r0, 80169e8 <rcl_timer_get_time_until_next_call+0x54>
 801699a:	6803      	ldr	r3, [r0, #0]
 801699c:	4604      	mov	r4, r0
 801699e:	b33b      	cbz	r3, 80169f0 <rcl_timer_get_time_until_next_call+0x5c>
 80169a0:	460d      	mov	r5, r1
 80169a2:	b309      	cbz	r1, 80169e8 <rcl_timer_get_time_until_next_call+0x54>
 80169a4:	f3bf 8f5b 	dmb	ish
 80169a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80169ac:	f3bf 8f5b 	dmb	ish
 80169b0:	b9ab      	cbnz	r3, 80169de <rcl_timer_get_time_until_next_call+0x4a>
 80169b2:	6803      	ldr	r3, [r0, #0]
 80169b4:	4669      	mov	r1, sp
 80169b6:	6818      	ldr	r0, [r3, #0]
 80169b8:	f7ff fcf2 	bl	80163a0 <rcl_clock_get_now>
 80169bc:	4606      	mov	r6, r0
 80169be:	b958      	cbnz	r0, 80169d8 <rcl_timer_get_time_until_next_call+0x44>
 80169c0:	6820      	ldr	r0, [r4, #0]
 80169c2:	2105      	movs	r1, #5
 80169c4:	3028      	adds	r0, #40	@ 0x28
 80169c6:	f001 fbf3 	bl	80181b0 <__atomic_load_8>
 80169ca:	9b00      	ldr	r3, [sp, #0]
 80169cc:	1ac0      	subs	r0, r0, r3
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	eb61 0103 	sbc.w	r1, r1, r3
 80169d4:	6028      	str	r0, [r5, #0]
 80169d6:	6069      	str	r1, [r5, #4]
 80169d8:	4630      	mov	r0, r6
 80169da:	b002      	add	sp, #8
 80169dc:	bd70      	pop	{r4, r5, r6, pc}
 80169de:	f240 3621 	movw	r6, #801	@ 0x321
 80169e2:	4630      	mov	r0, r6
 80169e4:	b002      	add	sp, #8
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	260b      	movs	r6, #11
 80169ea:	4630      	mov	r0, r6
 80169ec:	b002      	add	sp, #8
 80169ee:	bd70      	pop	{r4, r5, r6, pc}
 80169f0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80169f4:	e7f0      	b.n	80169d8 <rcl_timer_get_time_until_next_call+0x44>
 80169f6:	bf00      	nop

080169f8 <rcl_timer_get_guard_condition>:
 80169f8:	b130      	cbz	r0, 8016a08 <rcl_timer_get_guard_condition+0x10>
 80169fa:	6800      	ldr	r0, [r0, #0]
 80169fc:	b120      	cbz	r0, 8016a08 <rcl_timer_get_guard_condition+0x10>
 80169fe:	68c3      	ldr	r3, [r0, #12]
 8016a00:	b10b      	cbz	r3, 8016a06 <rcl_timer_get_guard_condition+0xe>
 8016a02:	3008      	adds	r0, #8
 8016a04:	4770      	bx	lr
 8016a06:	4618      	mov	r0, r3
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop

08016a0c <rcl_validate_enclave_name_with_size>:
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d049      	beq.n	8016aa4 <rcl_validate_enclave_name_with_size+0x98>
 8016a10:	b570      	push	{r4, r5, r6, lr}
 8016a12:	4615      	mov	r5, r2
 8016a14:	b0c2      	sub	sp, #264	@ 0x108
 8016a16:	b19a      	cbz	r2, 8016a40 <rcl_validate_enclave_name_with_size+0x34>
 8016a18:	461e      	mov	r6, r3
 8016a1a:	466a      	mov	r2, sp
 8016a1c:	ab01      	add	r3, sp, #4
 8016a1e:	460c      	mov	r4, r1
 8016a20:	f002 f85a 	bl	8018ad8 <rmw_validate_namespace_with_size>
 8016a24:	4684      	mov	ip, r0
 8016a26:	b9b8      	cbnz	r0, 8016a58 <rcl_validate_enclave_name_with_size+0x4c>
 8016a28:	9900      	ldr	r1, [sp, #0]
 8016a2a:	b171      	cbz	r1, 8016a4a <rcl_validate_enclave_name_with_size+0x3e>
 8016a2c:	2907      	cmp	r1, #7
 8016a2e:	d019      	beq.n	8016a64 <rcl_validate_enclave_name_with_size+0x58>
 8016a30:	1e4b      	subs	r3, r1, #1
 8016a32:	2b05      	cmp	r3, #5
 8016a34:	d83a      	bhi.n	8016aac <rcl_validate_enclave_name_with_size+0xa0>
 8016a36:	e8df f003 	tbb	[pc, r3]
 8016a3a:	2926      	.short	0x2926
 8016a3c:	1d322f2c 	.word	0x1d322f2c
 8016a40:	f04f 0c0b 	mov.w	ip, #11
 8016a44:	4660      	mov	r0, ip
 8016a46:	b042      	add	sp, #264	@ 0x108
 8016a48:	bd70      	pop	{r4, r5, r6, pc}
 8016a4a:	2907      	cmp	r1, #7
 8016a4c:	d00a      	beq.n	8016a64 <rcl_validate_enclave_name_with_size+0x58>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	4660      	mov	r0, ip
 8016a52:	602b      	str	r3, [r5, #0]
 8016a54:	b042      	add	sp, #264	@ 0x108
 8016a56:	bd70      	pop	{r4, r5, r6, pc}
 8016a58:	f7fe fe08 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 8016a5c:	4684      	mov	ip, r0
 8016a5e:	4660      	mov	r0, ip
 8016a60:	b042      	add	sp, #264	@ 0x108
 8016a62:	bd70      	pop	{r4, r5, r6, pc}
 8016a64:	2cff      	cmp	r4, #255	@ 0xff
 8016a66:	d9f2      	bls.n	8016a4e <rcl_validate_enclave_name_with_size+0x42>
 8016a68:	6029      	str	r1, [r5, #0]
 8016a6a:	2e00      	cmp	r6, #0
 8016a6c:	d0ea      	beq.n	8016a44 <rcl_validate_enclave_name_with_size+0x38>
 8016a6e:	23fe      	movs	r3, #254	@ 0xfe
 8016a70:	6033      	str	r3, [r6, #0]
 8016a72:	e7e7      	b.n	8016a44 <rcl_validate_enclave_name_with_size+0x38>
 8016a74:	2306      	movs	r3, #6
 8016a76:	602b      	str	r3, [r5, #0]
 8016a78:	2e00      	cmp	r6, #0
 8016a7a:	d0e3      	beq.n	8016a44 <rcl_validate_enclave_name_with_size+0x38>
 8016a7c:	9b01      	ldr	r3, [sp, #4]
 8016a7e:	4660      	mov	r0, ip
 8016a80:	6033      	str	r3, [r6, #0]
 8016a82:	b042      	add	sp, #264	@ 0x108
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	2301      	movs	r3, #1
 8016a88:	602b      	str	r3, [r5, #0]
 8016a8a:	e7f5      	b.n	8016a78 <rcl_validate_enclave_name_with_size+0x6c>
 8016a8c:	2302      	movs	r3, #2
 8016a8e:	602b      	str	r3, [r5, #0]
 8016a90:	e7f2      	b.n	8016a78 <rcl_validate_enclave_name_with_size+0x6c>
 8016a92:	2303      	movs	r3, #3
 8016a94:	602b      	str	r3, [r5, #0]
 8016a96:	e7ef      	b.n	8016a78 <rcl_validate_enclave_name_with_size+0x6c>
 8016a98:	2304      	movs	r3, #4
 8016a9a:	602b      	str	r3, [r5, #0]
 8016a9c:	e7ec      	b.n	8016a78 <rcl_validate_enclave_name_with_size+0x6c>
 8016a9e:	2305      	movs	r3, #5
 8016aa0:	602b      	str	r3, [r5, #0]
 8016aa2:	e7e9      	b.n	8016a78 <rcl_validate_enclave_name_with_size+0x6c>
 8016aa4:	f04f 0c0b 	mov.w	ip, #11
 8016aa8:	4660      	mov	r0, ip
 8016aaa:	4770      	bx	lr
 8016aac:	460b      	mov	r3, r1
 8016aae:	4a04      	ldr	r2, [pc, #16]	@ (8016ac0 <rcl_validate_enclave_name_with_size+0xb4>)
 8016ab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016ab4:	a802      	add	r0, sp, #8
 8016ab6:	f001 fd33 	bl	8018520 <rcutils_snprintf>
 8016aba:	f04f 0c01 	mov.w	ip, #1
 8016abe:	e7c1      	b.n	8016a44 <rcl_validate_enclave_name_with_size+0x38>
 8016ac0:	0801cfa8 	.word	0x0801cfa8

08016ac4 <rcl_validate_enclave_name>:
 8016ac4:	b168      	cbz	r0, 8016ae2 <rcl_validate_enclave_name+0x1e>
 8016ac6:	b570      	push	{r4, r5, r6, lr}
 8016ac8:	460d      	mov	r5, r1
 8016aca:	4616      	mov	r6, r2
 8016acc:	4604      	mov	r4, r0
 8016ace:	f7e9 fc11 	bl	80002f4 <strlen>
 8016ad2:	4633      	mov	r3, r6
 8016ad4:	4601      	mov	r1, r0
 8016ad6:	462a      	mov	r2, r5
 8016ad8:	4620      	mov	r0, r4
 8016ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ade:	f7ff bf95 	b.w	8016a0c <rcl_validate_enclave_name_with_size>
 8016ae2:	200b      	movs	r0, #11
 8016ae4:	4770      	bx	lr
 8016ae6:	bf00      	nop

08016ae8 <rcl_get_zero_initialized_wait_set>:
 8016ae8:	b510      	push	{r4, lr}
 8016aea:	4c08      	ldr	r4, [pc, #32]	@ (8016b0c <rcl_get_zero_initialized_wait_set+0x24>)
 8016aec:	4686      	mov	lr, r0
 8016aee:	4684      	mov	ip, r0
 8016af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016af8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016afe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b02:	6823      	ldr	r3, [r4, #0]
 8016b04:	4670      	mov	r0, lr
 8016b06:	f8cc 3000 	str.w	r3, [ip]
 8016b0a:	bd10      	pop	{r4, pc}
 8016b0c:	0801d008 	.word	0x0801d008

08016b10 <rcl_wait_set_is_valid>:
 8016b10:	b118      	cbz	r0, 8016b1a <rcl_wait_set_is_valid+0xa>
 8016b12:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016b14:	3800      	subs	r0, #0
 8016b16:	bf18      	it	ne
 8016b18:	2001      	movne	r0, #1
 8016b1a:	4770      	bx	lr

08016b1c <rcl_wait_set_fini>:
 8016b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b20:	b082      	sub	sp, #8
 8016b22:	2800      	cmp	r0, #0
 8016b24:	f000 8095 	beq.w	8016c52 <rcl_wait_set_fini+0x136>
 8016b28:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	2e00      	cmp	r6, #0
 8016b2e:	f000 808c 	beq.w	8016c4a <rcl_wait_set_fini+0x12e>
 8016b32:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016b34:	f002 fd7c 	bl	8019630 <rmw_destroy_wait_set>
 8016b38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b3a:	1e06      	subs	r6, r0, #0
 8016b3c:	bf18      	it	ne
 8016b3e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016b42:	2d00      	cmp	r5, #0
 8016b44:	f000 8081 	beq.w	8016c4a <rcl_wait_set_fini+0x12e>
 8016b48:	2700      	movs	r7, #0
 8016b4a:	6820      	ldr	r0, [r4, #0]
 8016b4c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016b50:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b52:	6067      	str	r7, [r4, #4]
 8016b54:	602f      	str	r7, [r5, #0]
 8016b56:	b120      	cbz	r0, 8016b62 <rcl_wait_set_fini+0x46>
 8016b58:	9101      	str	r1, [sp, #4]
 8016b5a:	47c0      	blx	r8
 8016b5c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b5e:	9901      	ldr	r1, [sp, #4]
 8016b60:	6027      	str	r7, [r4, #0]
 8016b62:	68a8      	ldr	r0, [r5, #8]
 8016b64:	b120      	cbz	r0, 8016b70 <rcl_wait_set_fini+0x54>
 8016b66:	47c0      	blx	r8
 8016b68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016b70:	f04f 0800 	mov.w	r8, #0
 8016b74:	68a0      	ldr	r0, [r4, #8]
 8016b76:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b78:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b7a:	f8c4 800c 	str.w	r8, [r4, #12]
 8016b7e:	f8c5 800c 	str.w	r8, [r5, #12]
 8016b82:	b128      	cbz	r0, 8016b90 <rcl_wait_set_fini+0x74>
 8016b84:	47b8      	blx	r7
 8016b86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b88:	f8c4 8008 	str.w	r8, [r4, #8]
 8016b8c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b8e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b90:	f04f 0800 	mov.w	r8, #0
 8016b94:	6968      	ldr	r0, [r5, #20]
 8016b96:	f8c5 8010 	str.w	r8, [r5, #16]
 8016b9a:	b128      	cbz	r0, 8016ba8 <rcl_wait_set_fini+0x8c>
 8016b9c:	47b8      	blx	r7
 8016b9e:	f8c5 8014 	str.w	r8, [r5, #20]
 8016ba2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ba4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016ba6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016ba8:	f04f 0800 	mov.w	r8, #0
 8016bac:	6920      	ldr	r0, [r4, #16]
 8016bae:	f8c4 8014 	str.w	r8, [r4, #20]
 8016bb2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016bb6:	b128      	cbz	r0, 8016bc4 <rcl_wait_set_fini+0xa8>
 8016bb8:	47b8      	blx	r7
 8016bba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bbc:	f8c4 8010 	str.w	r8, [r4, #16]
 8016bc0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016bc2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bc4:	f04f 0800 	mov.w	r8, #0
 8016bc8:	69a0      	ldr	r0, [r4, #24]
 8016bca:	f8c4 801c 	str.w	r8, [r4, #28]
 8016bce:	f8c5 8018 	str.w	r8, [r5, #24]
 8016bd2:	b128      	cbz	r0, 8016be0 <rcl_wait_set_fini+0xc4>
 8016bd4:	9101      	str	r1, [sp, #4]
 8016bd6:	47b8      	blx	r7
 8016bd8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bda:	9901      	ldr	r1, [sp, #4]
 8016bdc:	f8c4 8018 	str.w	r8, [r4, #24]
 8016be0:	6a28      	ldr	r0, [r5, #32]
 8016be2:	b120      	cbz	r0, 8016bee <rcl_wait_set_fini+0xd2>
 8016be4:	47b8      	blx	r7
 8016be6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016be8:	2300      	movs	r3, #0
 8016bea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016bee:	2700      	movs	r7, #0
 8016bf0:	6a20      	ldr	r0, [r4, #32]
 8016bf2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016bf6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bf8:	6267      	str	r7, [r4, #36]	@ 0x24
 8016bfa:	626f      	str	r7, [r5, #36]	@ 0x24
 8016bfc:	b120      	cbz	r0, 8016c08 <rcl_wait_set_fini+0xec>
 8016bfe:	9101      	str	r1, [sp, #4]
 8016c00:	47c0      	blx	r8
 8016c02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c04:	9901      	ldr	r1, [sp, #4]
 8016c06:	6227      	str	r7, [r4, #32]
 8016c08:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016c0a:	b120      	cbz	r0, 8016c16 <rcl_wait_set_fini+0xfa>
 8016c0c:	47c0      	blx	r8
 8016c0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c10:	2300      	movs	r3, #0
 8016c12:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016c16:	2700      	movs	r7, #0
 8016c18:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016c1a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016c1e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016c20:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016c22:	632f      	str	r7, [r5, #48]	@ 0x30
 8016c24:	b120      	cbz	r0, 8016c30 <rcl_wait_set_fini+0x114>
 8016c26:	9101      	str	r1, [sp, #4]
 8016c28:	47c0      	blx	r8
 8016c2a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c2c:	9901      	ldr	r1, [sp, #4]
 8016c2e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016c30:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016c32:	b120      	cbz	r0, 8016c3e <rcl_wait_set_fini+0x122>
 8016c34:	47c0      	blx	r8
 8016c36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016c38:	2300      	movs	r3, #0
 8016c3a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016c3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016c40:	4628      	mov	r0, r5
 8016c42:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016c44:	4798      	blx	r3
 8016c46:	2300      	movs	r3, #0
 8016c48:	6323      	str	r3, [r4, #48]	@ 0x30
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	b002      	add	sp, #8
 8016c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c52:	260b      	movs	r6, #11
 8016c54:	4630      	mov	r0, r6
 8016c56:	b002      	add	sp, #8
 8016c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c5c <rcl_wait_set_add_subscription>:
 8016c5c:	b318      	cbz	r0, 8016ca6 <rcl_wait_set_add_subscription+0x4a>
 8016c5e:	b538      	push	{r3, r4, r5, lr}
 8016c60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c62:	4604      	mov	r4, r0
 8016c64:	b30b      	cbz	r3, 8016caa <rcl_wait_set_add_subscription+0x4e>
 8016c66:	b319      	cbz	r1, 8016cb0 <rcl_wait_set_add_subscription+0x54>
 8016c68:	681d      	ldr	r5, [r3, #0]
 8016c6a:	6840      	ldr	r0, [r0, #4]
 8016c6c:	4285      	cmp	r5, r0
 8016c6e:	d217      	bcs.n	8016ca0 <rcl_wait_set_add_subscription+0x44>
 8016c70:	1c68      	adds	r0, r5, #1
 8016c72:	6018      	str	r0, [r3, #0]
 8016c74:	6823      	ldr	r3, [r4, #0]
 8016c76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016c7a:	b102      	cbz	r2, 8016c7e <rcl_wait_set_add_subscription+0x22>
 8016c7c:	6015      	str	r5, [r2, #0]
 8016c7e:	4608      	mov	r0, r1
 8016c80:	f7ff fadc 	bl	801623c <rcl_subscription_get_rmw_handle>
 8016c84:	b150      	cbz	r0, 8016c9c <rcl_wait_set_add_subscription+0x40>
 8016c86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c88:	6842      	ldr	r2, [r0, #4]
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	689b      	ldr	r3, [r3, #8]
 8016c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c94:	6853      	ldr	r3, [r2, #4]
 8016c96:	3301      	adds	r3, #1
 8016c98:	6053      	str	r3, [r2, #4]
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	2001      	movs	r0, #1
 8016c9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ca0:	f240 3086 	movw	r0, #902	@ 0x386
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
 8016ca6:	200b      	movs	r0, #11
 8016ca8:	4770      	bx	lr
 8016caa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016cae:	bd38      	pop	{r3, r4, r5, pc}
 8016cb0:	200b      	movs	r0, #11
 8016cb2:	bd38      	pop	{r3, r4, r5, pc}

08016cb4 <rcl_wait_set_clear>:
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	d074      	beq.n	8016da2 <rcl_wait_set_clear+0xee>
 8016cb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016cba:	b510      	push	{r4, lr}
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d071      	beq.n	8016da6 <rcl_wait_set_clear+0xf2>
 8016cc2:	6800      	ldr	r0, [r0, #0]
 8016cc4:	b138      	cbz	r0, 8016cd6 <rcl_wait_set_clear+0x22>
 8016cc6:	6862      	ldr	r2, [r4, #4]
 8016cc8:	2100      	movs	r1, #0
 8016cca:	0092      	lsls	r2, r2, #2
 8016ccc:	f004 fedc 	bl	801ba88 <memset>
 8016cd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	601a      	str	r2, [r3, #0]
 8016cd6:	68a0      	ldr	r0, [r4, #8]
 8016cd8:	b138      	cbz	r0, 8016cea <rcl_wait_set_clear+0x36>
 8016cda:	68e2      	ldr	r2, [r4, #12]
 8016cdc:	2100      	movs	r1, #0
 8016cde:	0092      	lsls	r2, r2, #2
 8016ce0:	f004 fed2 	bl	801ba88 <memset>
 8016ce4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	60da      	str	r2, [r3, #12]
 8016cea:	69a0      	ldr	r0, [r4, #24]
 8016cec:	b138      	cbz	r0, 8016cfe <rcl_wait_set_clear+0x4a>
 8016cee:	69e2      	ldr	r2, [r4, #28]
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	0092      	lsls	r2, r2, #2
 8016cf4:	f004 fec8 	bl	801ba88 <memset>
 8016cf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	619a      	str	r2, [r3, #24]
 8016cfe:	6a20      	ldr	r0, [r4, #32]
 8016d00:	b138      	cbz	r0, 8016d12 <rcl_wait_set_clear+0x5e>
 8016d02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016d04:	2100      	movs	r1, #0
 8016d06:	0092      	lsls	r2, r2, #2
 8016d08:	f004 febe 	bl	801ba88 <memset>
 8016d0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d0e:	2200      	movs	r2, #0
 8016d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8016d12:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016d14:	b138      	cbz	r0, 8016d26 <rcl_wait_set_clear+0x72>
 8016d16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016d18:	2100      	movs	r1, #0
 8016d1a:	0092      	lsls	r2, r2, #2
 8016d1c:	f004 feb4 	bl	801ba88 <memset>
 8016d20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d22:	2200      	movs	r2, #0
 8016d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8016d26:	6920      	ldr	r0, [r4, #16]
 8016d28:	b138      	cbz	r0, 8016d3a <rcl_wait_set_clear+0x86>
 8016d2a:	6962      	ldr	r2, [r4, #20]
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	0092      	lsls	r2, r2, #2
 8016d30:	f004 feaa 	bl	801ba88 <memset>
 8016d34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d36:	2200      	movs	r2, #0
 8016d38:	641a      	str	r2, [r3, #64]	@ 0x40
 8016d3a:	6898      	ldr	r0, [r3, #8]
 8016d3c:	b138      	cbz	r0, 8016d4e <rcl_wait_set_clear+0x9a>
 8016d3e:	685a      	ldr	r2, [r3, #4]
 8016d40:	2100      	movs	r1, #0
 8016d42:	0092      	lsls	r2, r2, #2
 8016d44:	f004 fea0 	bl	801ba88 <memset>
 8016d48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	605a      	str	r2, [r3, #4]
 8016d4e:	6958      	ldr	r0, [r3, #20]
 8016d50:	b138      	cbz	r0, 8016d62 <rcl_wait_set_clear+0xae>
 8016d52:	691a      	ldr	r2, [r3, #16]
 8016d54:	2100      	movs	r1, #0
 8016d56:	0092      	lsls	r2, r2, #2
 8016d58:	f004 fe96 	bl	801ba88 <memset>
 8016d5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d5e:	2200      	movs	r2, #0
 8016d60:	611a      	str	r2, [r3, #16]
 8016d62:	6a18      	ldr	r0, [r3, #32]
 8016d64:	b138      	cbz	r0, 8016d76 <rcl_wait_set_clear+0xc2>
 8016d66:	69da      	ldr	r2, [r3, #28]
 8016d68:	2100      	movs	r1, #0
 8016d6a:	0092      	lsls	r2, r2, #2
 8016d6c:	f004 fe8c 	bl	801ba88 <memset>
 8016d70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d72:	2200      	movs	r2, #0
 8016d74:	61da      	str	r2, [r3, #28]
 8016d76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8016d78:	b138      	cbz	r0, 8016d8a <rcl_wait_set_clear+0xd6>
 8016d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	0092      	lsls	r2, r2, #2
 8016d80:	f004 fe82 	bl	801ba88 <memset>
 8016d84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d86:	2200      	movs	r2, #0
 8016d88:	629a      	str	r2, [r3, #40]	@ 0x28
 8016d8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016d8c:	b140      	cbz	r0, 8016da0 <rcl_wait_set_clear+0xec>
 8016d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d90:	2100      	movs	r1, #0
 8016d92:	0092      	lsls	r2, r2, #2
 8016d94:	f004 fe78 	bl	801ba88 <memset>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8016da0:	bd10      	pop	{r4, pc}
 8016da2:	200b      	movs	r0, #11
 8016da4:	4770      	bx	lr
 8016da6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016daa:	bd10      	pop	{r4, pc}

08016dac <rcl_wait_set_resize>:
 8016dac:	2800      	cmp	r0, #0
 8016dae:	f000 8180 	beq.w	80170b2 <rcl_wait_set_resize+0x306>
 8016db2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016db8:	b083      	sub	sp, #12
 8016dba:	4605      	mov	r5, r0
 8016dbc:	2c00      	cmp	r4, #0
 8016dbe:	f000 817a 	beq.w	80170b6 <rcl_wait_set_resize+0x30a>
 8016dc2:	f04f 0900 	mov.w	r9, #0
 8016dc6:	461f      	mov	r7, r3
 8016dc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016dcc:	4688      	mov	r8, r1
 8016dce:	4616      	mov	r6, r2
 8016dd0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8016dd4:	f8c0 9004 	str.w	r9, [r0, #4]
 8016dd8:	f8c4 9000 	str.w	r9, [r4]
 8016ddc:	2900      	cmp	r1, #0
 8016dde:	f000 80bf 	beq.w	8016f60 <rcl_wait_set_resize+0x1b4>
 8016de2:	008c      	lsls	r4, r1, #2
 8016de4:	4652      	mov	r2, sl
 8016de6:	6800      	ldr	r0, [r0, #0]
 8016de8:	4621      	mov	r1, r4
 8016dea:	9301      	str	r3, [sp, #4]
 8016dec:	4798      	blx	r3
 8016dee:	9b01      	ldr	r3, [sp, #4]
 8016df0:	6028      	str	r0, [r5, #0]
 8016df2:	2800      	cmp	r0, #0
 8016df4:	f000 80f6 	beq.w	8016fe4 <rcl_wait_set_resize+0x238>
 8016df8:	4622      	mov	r2, r4
 8016dfa:	4649      	mov	r1, r9
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	f004 fe43 	bl	801ba88 <memset>
 8016e02:	f8c5 8004 	str.w	r8, [r5, #4]
 8016e06:	4652      	mov	r2, sl
 8016e08:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016e0c:	4621      	mov	r1, r4
 8016e0e:	9b01      	ldr	r3, [sp, #4]
 8016e10:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016e14:	f8c8 9004 	str.w	r9, [r8, #4]
 8016e18:	4798      	blx	r3
 8016e1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016e1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8016e20:	689b      	ldr	r3, [r3, #8]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f000 814a 	beq.w	80170bc <rcl_wait_set_resize+0x310>
 8016e28:	4622      	mov	r2, r4
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f004 fe2b 	bl	801ba88 <memset>
 8016e32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e34:	f04f 0800 	mov.w	r8, #0
 8016e38:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e3c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016e40:	f8c5 800c 	str.w	r8, [r5, #12]
 8016e44:	f8c4 800c 	str.w	r8, [r4, #12]
 8016e48:	2e00      	cmp	r6, #0
 8016e4a:	f040 809b 	bne.w	8016f84 <rcl_wait_set_resize+0x1d8>
 8016e4e:	68a8      	ldr	r0, [r5, #8]
 8016e50:	b128      	cbz	r0, 8016e5e <rcl_wait_set_resize+0xb2>
 8016e52:	4649      	mov	r1, r9
 8016e54:	4790      	blx	r2
 8016e56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e58:	60ae      	str	r6, [r5, #8]
 8016e5a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e5e:	f04f 0800 	mov.w	r8, #0
 8016e62:	19f6      	adds	r6, r6, r7
 8016e64:	f8c4 8010 	str.w	r8, [r4, #16]
 8016e68:	f040 80a2 	bne.w	8016fb0 <rcl_wait_set_resize+0x204>
 8016e6c:	6960      	ldr	r0, [r4, #20]
 8016e6e:	b130      	cbz	r0, 8016e7e <rcl_wait_set_resize+0xd2>
 8016e70:	4649      	mov	r1, r9
 8016e72:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016e74:	4798      	blx	r3
 8016e76:	6166      	str	r6, [r4, #20]
 8016e78:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e7a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e7e:	2600      	movs	r6, #0
 8016e80:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016e84:	616e      	str	r6, [r5, #20]
 8016e86:	6426      	str	r6, [r4, #64]	@ 0x40
 8016e88:	2f00      	cmp	r7, #0
 8016e8a:	f040 80af 	bne.w	8016fec <rcl_wait_set_resize+0x240>
 8016e8e:	6928      	ldr	r0, [r5, #16]
 8016e90:	b138      	cbz	r0, 8016ea2 <rcl_wait_set_resize+0xf6>
 8016e92:	4649      	mov	r1, r9
 8016e94:	47d0      	blx	sl
 8016e96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e98:	612f      	str	r7, [r5, #16]
 8016e9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e9e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016ea2:	2600      	movs	r6, #0
 8016ea4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ea6:	61ee      	str	r6, [r5, #28]
 8016ea8:	61a6      	str	r6, [r4, #24]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	f040 8093 	bne.w	8016fd6 <rcl_wait_set_resize+0x22a>
 8016eb0:	69a8      	ldr	r0, [r5, #24]
 8016eb2:	b120      	cbz	r0, 8016ebe <rcl_wait_set_resize+0x112>
 8016eb4:	4649      	mov	r1, r9
 8016eb6:	47d0      	blx	sl
 8016eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016eba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ebc:	61ab      	str	r3, [r5, #24]
 8016ebe:	6a20      	ldr	r0, [r4, #32]
 8016ec0:	b128      	cbz	r0, 8016ece <rcl_wait_set_resize+0x122>
 8016ec2:	4649      	mov	r1, r9
 8016ec4:	47d0      	blx	sl
 8016ec6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ec8:	2300      	movs	r3, #0
 8016eca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016ece:	2600      	movs	r6, #0
 8016ed0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ed2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016ed4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016ed8:	626e      	str	r6, [r5, #36]	@ 0x24
 8016eda:	6266      	str	r6, [r4, #36]	@ 0x24
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	f000 8098 	beq.w	8017012 <rcl_wait_set_resize+0x266>
 8016ee2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016ee6:	463a      	mov	r2, r7
 8016ee8:	6a28      	ldr	r0, [r5, #32]
 8016eea:	4651      	mov	r1, sl
 8016eec:	47c8      	blx	r9
 8016eee:	6228      	str	r0, [r5, #32]
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	d077      	beq.n	8016fe4 <rcl_wait_set_resize+0x238>
 8016ef4:	4652      	mov	r2, sl
 8016ef6:	4631      	mov	r1, r6
 8016ef8:	f004 fdc6 	bl	801ba88 <memset>
 8016efc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f00:	463a      	mov	r2, r7
 8016f02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016f04:	4651      	mov	r1, sl
 8016f06:	626b      	str	r3, [r5, #36]	@ 0x24
 8016f08:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016f0a:	47c8      	blx	r9
 8016f0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f0e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016f10:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016f12:	2c00      	cmp	r4, #0
 8016f14:	f000 80f2 	beq.w	80170fc <rcl_wait_set_resize+0x350>
 8016f18:	4620      	mov	r0, r4
 8016f1a:	4652      	mov	r2, sl
 8016f1c:	4631      	mov	r1, r6
 8016f1e:	f004 fdb3 	bl	801ba88 <memset>
 8016f22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f24:	2600      	movs	r6, #0
 8016f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f28:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016f2a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016f2e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016f30:	6326      	str	r6, [r4, #48]	@ 0x30
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f040 8097 	bne.w	8017066 <rcl_wait_set_resize+0x2ba>
 8016f38:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016f3a:	b120      	cbz	r0, 8016f46 <rcl_wait_set_resize+0x19a>
 8016f3c:	4639      	mov	r1, r7
 8016f3e:	47c0      	blx	r8
 8016f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f44:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016f46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d04c      	beq.n	8016fe6 <rcl_wait_set_resize+0x23a>
 8016f4c:	4639      	mov	r1, r7
 8016f4e:	47c0      	blx	r8
 8016f50:	2300      	movs	r3, #0
 8016f52:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016f54:	4618      	mov	r0, r3
 8016f56:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8016f5a:	b003      	add	sp, #12
 8016f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f60:	6800      	ldr	r0, [r0, #0]
 8016f62:	b120      	cbz	r0, 8016f6e <rcl_wait_set_resize+0x1c2>
 8016f64:	4651      	mov	r1, sl
 8016f66:	47d8      	blx	fp
 8016f68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f6a:	f8c5 8000 	str.w	r8, [r5]
 8016f6e:	68a0      	ldr	r0, [r4, #8]
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f43f af5f 	beq.w	8016e34 <rcl_wait_set_resize+0x88>
 8016f76:	4651      	mov	r1, sl
 8016f78:	47d8      	blx	fp
 8016f7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016f82:	e757      	b.n	8016e34 <rcl_wait_set_resize+0x88>
 8016f84:	00b4      	lsls	r4, r6, #2
 8016f86:	464a      	mov	r2, r9
 8016f88:	68a8      	ldr	r0, [r5, #8]
 8016f8a:	4621      	mov	r1, r4
 8016f8c:	4798      	blx	r3
 8016f8e:	60a8      	str	r0, [r5, #8]
 8016f90:	b340      	cbz	r0, 8016fe4 <rcl_wait_set_resize+0x238>
 8016f92:	4622      	mov	r2, r4
 8016f94:	4641      	mov	r1, r8
 8016f96:	f004 fd77 	bl	801ba88 <memset>
 8016f9a:	f04f 0800 	mov.w	r8, #0
 8016f9e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016fa0:	60ee      	str	r6, [r5, #12]
 8016fa2:	19f6      	adds	r6, r6, r7
 8016fa4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016fa8:	f8c4 8010 	str.w	r8, [r4, #16]
 8016fac:	f43f af5e 	beq.w	8016e6c <rcl_wait_set_resize+0xc0>
 8016fb0:	00b6      	lsls	r6, r6, #2
 8016fb2:	464a      	mov	r2, r9
 8016fb4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016fb6:	6960      	ldr	r0, [r4, #20]
 8016fb8:	4631      	mov	r1, r6
 8016fba:	4798      	blx	r3
 8016fbc:	4681      	mov	r9, r0
 8016fbe:	6160      	str	r0, [r4, #20]
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	f000 8084 	beq.w	80170ce <rcl_wait_set_resize+0x322>
 8016fc6:	4632      	mov	r2, r6
 8016fc8:	4641      	mov	r1, r8
 8016fca:	f004 fd5d 	bl	801ba88 <memset>
 8016fce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016fd0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016fd4:	e753      	b.n	8016e7e <rcl_wait_set_resize+0xd2>
 8016fd6:	009c      	lsls	r4, r3, #2
 8016fd8:	464a      	mov	r2, r9
 8016fda:	69a8      	ldr	r0, [r5, #24]
 8016fdc:	4621      	mov	r1, r4
 8016fde:	47c0      	blx	r8
 8016fe0:	61a8      	str	r0, [r5, #24]
 8016fe2:	bb40      	cbnz	r0, 8017036 <rcl_wait_set_resize+0x28a>
 8016fe4:	200a      	movs	r0, #10
 8016fe6:	b003      	add	sp, #12
 8016fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fec:	00bc      	lsls	r4, r7, #2
 8016fee:	464a      	mov	r2, r9
 8016ff0:	6928      	ldr	r0, [r5, #16]
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	47c0      	blx	r8
 8016ff6:	6128      	str	r0, [r5, #16]
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d0f3      	beq.n	8016fe4 <rcl_wait_set_resize+0x238>
 8016ffc:	4622      	mov	r2, r4
 8016ffe:	4631      	mov	r1, r6
 8017000:	f004 fd42 	bl	801ba88 <memset>
 8017004:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017006:	616f      	str	r7, [r5, #20]
 8017008:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801700c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017010:	e747      	b.n	8016ea2 <rcl_wait_set_resize+0xf6>
 8017012:	6a28      	ldr	r0, [r5, #32]
 8017014:	b120      	cbz	r0, 8017020 <rcl_wait_set_resize+0x274>
 8017016:	4639      	mov	r1, r7
 8017018:	47c0      	blx	r8
 801701a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801701c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801701e:	622b      	str	r3, [r5, #32]
 8017020:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017022:	2800      	cmp	r0, #0
 8017024:	f43f af7e 	beq.w	8016f24 <rcl_wait_set_resize+0x178>
 8017028:	4639      	mov	r1, r7
 801702a:	47c0      	blx	r8
 801702c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801702e:	2300      	movs	r3, #0
 8017030:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017034:	e776      	b.n	8016f24 <rcl_wait_set_resize+0x178>
 8017036:	4622      	mov	r2, r4
 8017038:	4631      	mov	r1, r6
 801703a:	f004 fd25 	bl	801ba88 <memset>
 801703e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017042:	464a      	mov	r2, r9
 8017044:	6a38      	ldr	r0, [r7, #32]
 8017046:	4621      	mov	r1, r4
 8017048:	61eb      	str	r3, [r5, #28]
 801704a:	61fe      	str	r6, [r7, #28]
 801704c:	47c0      	blx	r8
 801704e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017050:	6238      	str	r0, [r7, #32]
 8017052:	6a1f      	ldr	r7, [r3, #32]
 8017054:	2f00      	cmp	r7, #0
 8017056:	d04a      	beq.n	80170ee <rcl_wait_set_resize+0x342>
 8017058:	4622      	mov	r2, r4
 801705a:	4631      	mov	r1, r6
 801705c:	4638      	mov	r0, r7
 801705e:	f004 fd13 	bl	801ba88 <memset>
 8017062:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017064:	e733      	b.n	8016ece <rcl_wait_set_resize+0x122>
 8017066:	009c      	lsls	r4, r3, #2
 8017068:	463a      	mov	r2, r7
 801706a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801706c:	4621      	mov	r1, r4
 801706e:	47c8      	blx	r9
 8017070:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017072:	2800      	cmp	r0, #0
 8017074:	d0b6      	beq.n	8016fe4 <rcl_wait_set_resize+0x238>
 8017076:	4622      	mov	r2, r4
 8017078:	4631      	mov	r1, r6
 801707a:	f004 fd05 	bl	801ba88 <memset>
 801707e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017084:	463a      	mov	r2, r7
 8017086:	4621      	mov	r1, r4
 8017088:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801708c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801708e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017092:	47c8      	blx	r9
 8017094:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017096:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801709c:	2b00      	cmp	r3, #0
 801709e:	d034      	beq.n	801710a <rcl_wait_set_resize+0x35e>
 80170a0:	4622      	mov	r2, r4
 80170a2:	4631      	mov	r1, r6
 80170a4:	4618      	mov	r0, r3
 80170a6:	f004 fcef 	bl	801ba88 <memset>
 80170aa:	4630      	mov	r0, r6
 80170ac:	b003      	add	sp, #12
 80170ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b2:	200b      	movs	r0, #11
 80170b4:	4770      	bx	lr
 80170b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80170ba:	e794      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>
 80170bc:	6828      	ldr	r0, [r5, #0]
 80170be:	4651      	mov	r1, sl
 80170c0:	9301      	str	r3, [sp, #4]
 80170c2:	47d8      	blx	fp
 80170c4:	9b01      	ldr	r3, [sp, #4]
 80170c6:	200a      	movs	r0, #10
 80170c8:	e9c5 3300 	strd	r3, r3, [r5]
 80170cc:	e78b      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>
 80170ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170d0:	68a8      	ldr	r0, [r5, #8]
 80170d2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80170d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170d6:	4798      	blx	r3
 80170d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170da:	6928      	ldr	r0, [r5, #16]
 80170dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80170e0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80170e4:	4790      	blx	r2
 80170e6:	200a      	movs	r0, #10
 80170e8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80170ec:	e77b      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>
 80170ee:	69a8      	ldr	r0, [r5, #24]
 80170f0:	4649      	mov	r1, r9
 80170f2:	47d0      	blx	sl
 80170f4:	200a      	movs	r0, #10
 80170f6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80170fa:	e774      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>
 80170fc:	6a28      	ldr	r0, [r5, #32]
 80170fe:	4639      	mov	r1, r7
 8017100:	47c0      	blx	r8
 8017102:	200a      	movs	r0, #10
 8017104:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017108:	e76d      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>
 801710a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801710c:	4639      	mov	r1, r7
 801710e:	9301      	str	r3, [sp, #4]
 8017110:	47c0      	blx	r8
 8017112:	9b01      	ldr	r3, [sp, #4]
 8017114:	200a      	movs	r0, #10
 8017116:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801711a:	e764      	b.n	8016fe6 <rcl_wait_set_resize+0x23a>

0801711c <rcl_wait_set_init>:
 801711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017120:	b085      	sub	sp, #20
 8017122:	4605      	mov	r5, r0
 8017124:	460e      	mov	r6, r1
 8017126:	4617      	mov	r7, r2
 8017128:	a812      	add	r0, sp, #72	@ 0x48
 801712a:	4698      	mov	r8, r3
 801712c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8017130:	f7f7 fe5e 	bl	800edf0 <rcutils_allocator_is_valid>
 8017134:	2d00      	cmp	r5, #0
 8017136:	d072      	beq.n	801721e <rcl_wait_set_init+0x102>
 8017138:	f080 0001 	eor.w	r0, r0, #1
 801713c:	b2c0      	uxtb	r0, r0
 801713e:	2800      	cmp	r0, #0
 8017140:	d16d      	bne.n	801721e <rcl_wait_set_init+0x102>
 8017142:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017146:	f1ba 0f00 	cmp.w	sl, #0
 801714a:	d004      	beq.n	8017156 <rcl_wait_set_init+0x3a>
 801714c:	2464      	movs	r4, #100	@ 0x64
 801714e:	4620      	mov	r0, r4
 8017150:	b005      	add	sp, #20
 8017152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017156:	f1b9 0f00 	cmp.w	r9, #0
 801715a:	d060      	beq.n	801721e <rcl_wait_set_init+0x102>
 801715c:	4648      	mov	r0, r9
 801715e:	f7fe faa3 	bl	80156a8 <rcl_context_is_valid>
 8017162:	2800      	cmp	r0, #0
 8017164:	d068      	beq.n	8017238 <rcl_wait_set_init+0x11c>
 8017166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017168:	205c      	movs	r0, #92	@ 0x5c
 801716a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801716c:	4798      	blx	r3
 801716e:	6328      	str	r0, [r5, #48]	@ 0x30
 8017170:	2800      	cmp	r0, #0
 8017172:	d063      	beq.n	801723c <rcl_wait_set_init+0x120>
 8017174:	225c      	movs	r2, #92	@ 0x5c
 8017176:	4651      	mov	r1, sl
 8017178:	f004 fc86 	bl	801ba88 <memset>
 801717c:	ac12      	add	r4, sp, #72	@ 0x48
 801717e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8017182:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8017186:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801718a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801718e:	eb03 0e02 	add.w	lr, r3, r2
 8017192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017194:	f8d9 9000 	ldr.w	r9, [r9]
 8017198:	449e      	add	lr, r3
 801719a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801719c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80171a0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 80171a4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80171a8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 80171ac:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80171b0:	44be      	add	lr, r7
 80171b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80171bc:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80171c0:	f8cc 3000 	str.w	r3, [ip]
 80171c4:	f002 fa2a 	bl	801961c <rmw_create_wait_set>
 80171c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171ca:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80171ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80171d0:	b350      	cbz	r0, 8017228 <rcl_wait_set_init+0x10c>
 80171d2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80171d4:	4643      	mov	r3, r8
 80171d6:	463a      	mov	r2, r7
 80171d8:	4631      	mov	r1, r6
 80171da:	9402      	str	r4, [sp, #8]
 80171dc:	4628      	mov	r0, r5
 80171de:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80171e0:	9401      	str	r4, [sp, #4]
 80171e2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80171e4:	9400      	str	r4, [sp, #0]
 80171e6:	f7ff fde1 	bl	8016dac <rcl_wait_set_resize>
 80171ea:	4604      	mov	r4, r0
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d0ae      	beq.n	801714e <rcl_wait_set_init+0x32>
 80171f0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171f2:	bb2b      	cbnz	r3, 8017240 <rcl_wait_set_init+0x124>
 80171f4:	2600      	movs	r6, #0
 80171f6:	4628      	mov	r0, r5
 80171f8:	4633      	mov	r3, r6
 80171fa:	4632      	mov	r2, r6
 80171fc:	4631      	mov	r1, r6
 80171fe:	9600      	str	r6, [sp, #0]
 8017200:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017204:	f7ff fdd2 	bl	8016dac <rcl_wait_set_resize>
 8017208:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801720a:	2800      	cmp	r0, #0
 801720c:	d09f      	beq.n	801714e <rcl_wait_set_init+0x32>
 801720e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017210:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017212:	4798      	blx	r3
 8017214:	4620      	mov	r0, r4
 8017216:	632e      	str	r6, [r5, #48]	@ 0x30
 8017218:	b005      	add	sp, #20
 801721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801721e:	240b      	movs	r4, #11
 8017220:	4620      	mov	r0, r4
 8017222:	b005      	add	sp, #20
 8017224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017228:	2401      	movs	r4, #1
 801722a:	f002 fa01 	bl	8019630 <rmw_destroy_wait_set>
 801722e:	2800      	cmp	r0, #0
 8017230:	bf18      	it	ne
 8017232:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8017236:	e7dd      	b.n	80171f4 <rcl_wait_set_init+0xd8>
 8017238:	2465      	movs	r4, #101	@ 0x65
 801723a:	e788      	b.n	801714e <rcl_wait_set_init+0x32>
 801723c:	240a      	movs	r4, #10
 801723e:	e786      	b.n	801714e <rcl_wait_set_init+0x32>
 8017240:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017242:	e7f2      	b.n	801722a <rcl_wait_set_init+0x10e>

08017244 <rcl_wait_set_add_guard_condition>:
 8017244:	b318      	cbz	r0, 801728e <rcl_wait_set_add_guard_condition+0x4a>
 8017246:	b538      	push	{r3, r4, r5, lr}
 8017248:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801724a:	4604      	mov	r4, r0
 801724c:	b30b      	cbz	r3, 8017292 <rcl_wait_set_add_guard_condition+0x4e>
 801724e:	b319      	cbz	r1, 8017298 <rcl_wait_set_add_guard_condition+0x54>
 8017250:	68dd      	ldr	r5, [r3, #12]
 8017252:	68c0      	ldr	r0, [r0, #12]
 8017254:	4285      	cmp	r5, r0
 8017256:	d217      	bcs.n	8017288 <rcl_wait_set_add_guard_condition+0x44>
 8017258:	1c68      	adds	r0, r5, #1
 801725a:	60d8      	str	r0, [r3, #12]
 801725c:	68a3      	ldr	r3, [r4, #8]
 801725e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017262:	b102      	cbz	r2, 8017266 <rcl_wait_set_add_guard_condition+0x22>
 8017264:	6015      	str	r5, [r2, #0]
 8017266:	4608      	mov	r0, r1
 8017268:	f003 fdc2 	bl	801adf0 <rcl_guard_condition_get_rmw_handle>
 801726c:	b150      	cbz	r0, 8017284 <rcl_wait_set_add_guard_condition+0x40>
 801726e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017270:	6842      	ldr	r2, [r0, #4]
 8017272:	2000      	movs	r0, #0
 8017274:	695b      	ldr	r3, [r3, #20]
 8017276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801727a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801727c:	6913      	ldr	r3, [r2, #16]
 801727e:	3301      	adds	r3, #1
 8017280:	6113      	str	r3, [r2, #16]
 8017282:	bd38      	pop	{r3, r4, r5, pc}
 8017284:	2001      	movs	r0, #1
 8017286:	bd38      	pop	{r3, r4, r5, pc}
 8017288:	f240 3086 	movw	r0, #902	@ 0x386
 801728c:	bd38      	pop	{r3, r4, r5, pc}
 801728e:	200b      	movs	r0, #11
 8017290:	4770      	bx	lr
 8017292:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017296:	bd38      	pop	{r3, r4, r5, pc}
 8017298:	200b      	movs	r0, #11
 801729a:	bd38      	pop	{r3, r4, r5, pc}

0801729c <rcl_wait_set_add_timer>:
 801729c:	b328      	cbz	r0, 80172ea <rcl_wait_set_add_timer+0x4e>
 801729e:	b538      	push	{r3, r4, r5, lr}
 80172a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80172a2:	4604      	mov	r4, r0
 80172a4:	b31b      	cbz	r3, 80172ee <rcl_wait_set_add_timer+0x52>
 80172a6:	b329      	cbz	r1, 80172f4 <rcl_wait_set_add_timer+0x58>
 80172a8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80172aa:	6965      	ldr	r5, [r4, #20]
 80172ac:	42a8      	cmp	r0, r5
 80172ae:	d219      	bcs.n	80172e4 <rcl_wait_set_add_timer+0x48>
 80172b0:	1c45      	adds	r5, r0, #1
 80172b2:	641d      	str	r5, [r3, #64]	@ 0x40
 80172b4:	6923      	ldr	r3, [r4, #16]
 80172b6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80172ba:	b102      	cbz	r2, 80172be <rcl_wait_set_add_timer+0x22>
 80172bc:	6010      	str	r0, [r2, #0]
 80172be:	4608      	mov	r0, r1
 80172c0:	f7ff fb9a 	bl	80169f8 <rcl_timer_get_guard_condition>
 80172c4:	b168      	cbz	r0, 80172e2 <rcl_wait_set_add_timer+0x46>
 80172c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80172c8:	68e3      	ldr	r3, [r4, #12]
 80172ca:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80172cc:	3b01      	subs	r3, #1
 80172ce:	441d      	add	r5, r3
 80172d0:	f003 fd8e 	bl	801adf0 <rcl_guard_condition_get_rmw_handle>
 80172d4:	b180      	cbz	r0, 80172f8 <rcl_wait_set_add_timer+0x5c>
 80172d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172d8:	6842      	ldr	r2, [r0, #4]
 80172da:	2000      	movs	r0, #0
 80172dc:	695b      	ldr	r3, [r3, #20]
 80172de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172e2:	bd38      	pop	{r3, r4, r5, pc}
 80172e4:	f240 3086 	movw	r0, #902	@ 0x386
 80172e8:	bd38      	pop	{r3, r4, r5, pc}
 80172ea:	200b      	movs	r0, #11
 80172ec:	4770      	bx	lr
 80172ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80172f2:	bd38      	pop	{r3, r4, r5, pc}
 80172f4:	200b      	movs	r0, #11
 80172f6:	bd38      	pop	{r3, r4, r5, pc}
 80172f8:	2001      	movs	r0, #1
 80172fa:	bd38      	pop	{r3, r4, r5, pc}

080172fc <rcl_wait_set_add_client>:
 80172fc:	b318      	cbz	r0, 8017346 <rcl_wait_set_add_client+0x4a>
 80172fe:	b538      	push	{r3, r4, r5, lr}
 8017300:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017302:	4604      	mov	r4, r0
 8017304:	b30b      	cbz	r3, 801734a <rcl_wait_set_add_client+0x4e>
 8017306:	b319      	cbz	r1, 8017350 <rcl_wait_set_add_client+0x54>
 8017308:	699d      	ldr	r5, [r3, #24]
 801730a:	69c0      	ldr	r0, [r0, #28]
 801730c:	4285      	cmp	r5, r0
 801730e:	d217      	bcs.n	8017340 <rcl_wait_set_add_client+0x44>
 8017310:	1c68      	adds	r0, r5, #1
 8017312:	6198      	str	r0, [r3, #24]
 8017314:	69a3      	ldr	r3, [r4, #24]
 8017316:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801731a:	b102      	cbz	r2, 801731e <rcl_wait_set_add_client+0x22>
 801731c:	6015      	str	r5, [r2, #0]
 801731e:	4608      	mov	r0, r1
 8017320:	f7fe f914 	bl	801554c <rcl_client_get_rmw_handle>
 8017324:	b150      	cbz	r0, 801733c <rcl_wait_set_add_client+0x40>
 8017326:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017328:	6842      	ldr	r2, [r0, #4]
 801732a:	2000      	movs	r0, #0
 801732c:	6a1b      	ldr	r3, [r3, #32]
 801732e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017332:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017334:	69d3      	ldr	r3, [r2, #28]
 8017336:	3301      	adds	r3, #1
 8017338:	61d3      	str	r3, [r2, #28]
 801733a:	bd38      	pop	{r3, r4, r5, pc}
 801733c:	2001      	movs	r0, #1
 801733e:	bd38      	pop	{r3, r4, r5, pc}
 8017340:	f240 3086 	movw	r0, #902	@ 0x386
 8017344:	bd38      	pop	{r3, r4, r5, pc}
 8017346:	200b      	movs	r0, #11
 8017348:	4770      	bx	lr
 801734a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801734e:	bd38      	pop	{r3, r4, r5, pc}
 8017350:	200b      	movs	r0, #11
 8017352:	bd38      	pop	{r3, r4, r5, pc}

08017354 <rcl_wait_set_add_service>:
 8017354:	b318      	cbz	r0, 801739e <rcl_wait_set_add_service+0x4a>
 8017356:	b538      	push	{r3, r4, r5, lr}
 8017358:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801735a:	4604      	mov	r4, r0
 801735c:	b30b      	cbz	r3, 80173a2 <rcl_wait_set_add_service+0x4e>
 801735e:	b319      	cbz	r1, 80173a8 <rcl_wait_set_add_service+0x54>
 8017360:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017362:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017364:	4285      	cmp	r5, r0
 8017366:	d217      	bcs.n	8017398 <rcl_wait_set_add_service+0x44>
 8017368:	1c68      	adds	r0, r5, #1
 801736a:	6258      	str	r0, [r3, #36]	@ 0x24
 801736c:	6a23      	ldr	r3, [r4, #32]
 801736e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017372:	b102      	cbz	r2, 8017376 <rcl_wait_set_add_service+0x22>
 8017374:	6015      	str	r5, [r2, #0]
 8017376:	4608      	mov	r0, r1
 8017378:	f7fe fea2 	bl	80160c0 <rcl_service_get_rmw_handle>
 801737c:	b150      	cbz	r0, 8017394 <rcl_wait_set_add_service+0x40>
 801737e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017380:	6842      	ldr	r2, [r0, #4]
 8017382:	2000      	movs	r0, #0
 8017384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017386:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801738a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801738c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801738e:	3301      	adds	r3, #1
 8017390:	6293      	str	r3, [r2, #40]	@ 0x28
 8017392:	bd38      	pop	{r3, r4, r5, pc}
 8017394:	2001      	movs	r0, #1
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	f240 3086 	movw	r0, #902	@ 0x386
 801739c:	bd38      	pop	{r3, r4, r5, pc}
 801739e:	200b      	movs	r0, #11
 80173a0:	4770      	bx	lr
 80173a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80173a6:	bd38      	pop	{r3, r4, r5, pc}
 80173a8:	200b      	movs	r0, #11
 80173aa:	bd38      	pop	{r3, r4, r5, pc}
 80173ac:	0000      	movs	r0, r0
	...

080173b0 <rcl_wait>:
 80173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b4:	ed2d 8b02 	vpush	{d8}
 80173b8:	b08d      	sub	sp, #52	@ 0x34
 80173ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80173be:	2800      	cmp	r0, #0
 80173c0:	f000 814f 	beq.w	8017662 <rcl_wait+0x2b2>
 80173c4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80173c6:	4605      	mov	r5, r0
 80173c8:	2e00      	cmp	r6, #0
 80173ca:	f000 811a 	beq.w	8017602 <rcl_wait+0x252>
 80173ce:	6843      	ldr	r3, [r0, #4]
 80173d0:	b983      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173d2:	68eb      	ldr	r3, [r5, #12]
 80173d4:	b973      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173d6:	696b      	ldr	r3, [r5, #20]
 80173d8:	b963      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173da:	69eb      	ldr	r3, [r5, #28]
 80173dc:	b953      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80173e0:	b943      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80173e4:	b933      	cbnz	r3, 80173f4 <rcl_wait+0x44>
 80173e6:	f240 3085 	movw	r0, #901	@ 0x385
 80173ea:	b00d      	add	sp, #52	@ 0x34
 80173ec:	ecbd 8b02 	vpop	{d8}
 80173f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f4:	9b04      	ldr	r3, [sp, #16]
 80173f6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	9b05      	ldr	r3, [sp, #20]
 80173fc:	f173 0300 	sbcs.w	r3, r3, #0
 8017400:	f2c0 80f8 	blt.w	80175f4 <rcl_wait+0x244>
 8017404:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017408:	2a00      	cmp	r2, #0
 801740a:	f000 810f 	beq.w	801762c <rcl_wait+0x27c>
 801740e:	2400      	movs	r4, #0
 8017410:	4613      	mov	r3, r2
 8017412:	f240 3921 	movw	r9, #801	@ 0x321
 8017416:	4632      	mov	r2, r6
 8017418:	46a2      	mov	sl, r4
 801741a:	46a3      	mov	fp, r4
 801741c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017680 <rcl_wait+0x2d0>
 8017420:	e014      	b.n	801744c <rcl_wait+0x9c>
 8017422:	2800      	cmp	r0, #0
 8017424:	d1e1      	bne.n	80173ea <rcl_wait+0x3a>
 8017426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801742a:	4542      	cmp	r2, r8
 801742c:	eb73 0107 	sbcs.w	r1, r3, r7
 8017430:	da03      	bge.n	801743a <rcl_wait+0x8a>
 8017432:	4690      	mov	r8, r2
 8017434:	461f      	mov	r7, r3
 8017436:	f04f 0b01 	mov.w	fp, #1
 801743a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801743c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801743e:	3401      	adds	r4, #1
 8017440:	f14a 0a00 	adc.w	sl, sl, #0
 8017444:	429c      	cmp	r4, r3
 8017446:	f17a 0100 	sbcs.w	r1, sl, #0
 801744a:	d228      	bcs.n	801749e <rcl_wait+0xee>
 801744c:	6928      	ldr	r0, [r5, #16]
 801744e:	a908      	add	r1, sp, #32
 8017450:	00a6      	lsls	r6, r4, #2
 8017452:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017456:	2800      	cmp	r0, #0
 8017458:	d0f1      	beq.n	801743e <rcl_wait+0x8e>
 801745a:	68eb      	ldr	r3, [r5, #12]
 801745c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017460:	4423      	add	r3, r4
 8017462:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017466:	f1be 0f00 	cmp.w	lr, #0
 801746a:	d006      	beq.n	801747a <rcl_wait+0xca>
 801746c:	6913      	ldr	r3, [r2, #16]
 801746e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017472:	3301      	adds	r3, #1
 8017474:	6113      	str	r3, [r2, #16]
 8017476:	692b      	ldr	r3, [r5, #16]
 8017478:	5998      	ldr	r0, [r3, r6]
 801747a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801747e:	f7ff fa89 	bl	8016994 <rcl_timer_get_time_until_next_call>
 8017482:	4548      	cmp	r0, r9
 8017484:	d1cd      	bne.n	8017422 <rcl_wait+0x72>
 8017486:	692b      	ldr	r3, [r5, #16]
 8017488:	2200      	movs	r2, #0
 801748a:	3401      	adds	r4, #1
 801748c:	519a      	str	r2, [r3, r6]
 801748e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017490:	f14a 0a00 	adc.w	sl, sl, #0
 8017494:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017496:	429c      	cmp	r4, r3
 8017498:	f17a 0100 	sbcs.w	r1, sl, #0
 801749c:	d3d6      	bcc.n	801744c <rcl_wait+0x9c>
 801749e:	4659      	mov	r1, fp
 80174a0:	4616      	mov	r6, r2
 80174a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80174a6:	4313      	orrs	r3, r2
 80174a8:	f040 80b4 	bne.w	8017614 <rcl_wait+0x264>
 80174ac:	2300      	movs	r3, #0
 80174ae:	2200      	movs	r2, #0
 80174b0:	460c      	mov	r4, r1
 80174b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80174b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80174ba:	ab08      	add	r3, sp, #32
 80174bc:	9302      	str	r3, [sp, #8]
 80174be:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80174c2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80174c4:	f106 0110 	add.w	r1, r6, #16
 80174c8:	9300      	str	r3, [sp, #0]
 80174ca:	1d30      	adds	r0, r6, #4
 80174cc:	f106 031c 	add.w	r3, r6, #28
 80174d0:	9201      	str	r2, [sp, #4]
 80174d2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80174d6:	f001 ff3d 	bl	8019354 <rmw_wait>
 80174da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174dc:	4680      	mov	r8, r0
 80174de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80174e0:	b1e2      	cbz	r2, 801751c <rcl_wait+0x16c>
 80174e2:	f04f 0900 	mov.w	r9, #0
 80174e6:	464f      	mov	r7, r9
 80174e8:	692a      	ldr	r2, [r5, #16]
 80174ea:	f10d 011f 	add.w	r1, sp, #31
 80174ee:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80174f2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80174f6:	b160      	cbz	r0, 8017512 <rcl_wait+0x162>
 80174f8:	f88d 701f 	strb.w	r7, [sp, #31]
 80174fc:	f7ff fa0e 	bl	801691c <rcl_timer_is_ready>
 8017500:	2800      	cmp	r0, #0
 8017502:	f47f af72 	bne.w	80173ea <rcl_wait+0x3a>
 8017506:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801750a:	b90b      	cbnz	r3, 8017510 <rcl_wait+0x160>
 801750c:	692a      	ldr	r2, [r5, #16]
 801750e:	5193      	str	r3, [r2, r6]
 8017510:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017512:	f109 0901 	add.w	r9, r9, #1
 8017516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017518:	454a      	cmp	r2, r9
 801751a:	d8e5      	bhi.n	80174e8 <rcl_wait+0x138>
 801751c:	f038 0002 	bics.w	r0, r8, #2
 8017520:	d176      	bne.n	8017610 <rcl_wait+0x260>
 8017522:	686f      	ldr	r7, [r5, #4]
 8017524:	b17f      	cbz	r7, 8017546 <rcl_wait+0x196>
 8017526:	4602      	mov	r2, r0
 8017528:	e002      	b.n	8017530 <rcl_wait+0x180>
 801752a:	3201      	adds	r2, #1
 801752c:	42ba      	cmp	r2, r7
 801752e:	d00a      	beq.n	8017546 <rcl_wait+0x196>
 8017530:	6899      	ldr	r1, [r3, #8]
 8017532:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017536:	2900      	cmp	r1, #0
 8017538:	d1f7      	bne.n	801752a <rcl_wait+0x17a>
 801753a:	682e      	ldr	r6, [r5, #0]
 801753c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017540:	3201      	adds	r2, #1
 8017542:	42ba      	cmp	r2, r7
 8017544:	d1f4      	bne.n	8017530 <rcl_wait+0x180>
 8017546:	68ef      	ldr	r7, [r5, #12]
 8017548:	b17f      	cbz	r7, 801756a <rcl_wait+0x1ba>
 801754a:	2200      	movs	r2, #0
 801754c:	e002      	b.n	8017554 <rcl_wait+0x1a4>
 801754e:	3201      	adds	r2, #1
 8017550:	42ba      	cmp	r2, r7
 8017552:	d00a      	beq.n	801756a <rcl_wait+0x1ba>
 8017554:	6959      	ldr	r1, [r3, #20]
 8017556:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801755a:	2900      	cmp	r1, #0
 801755c:	d1f7      	bne.n	801754e <rcl_wait+0x19e>
 801755e:	68ae      	ldr	r6, [r5, #8]
 8017560:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017564:	3201      	adds	r2, #1
 8017566:	42ba      	cmp	r2, r7
 8017568:	d1f4      	bne.n	8017554 <rcl_wait+0x1a4>
 801756a:	69ef      	ldr	r7, [r5, #28]
 801756c:	b17f      	cbz	r7, 801758e <rcl_wait+0x1de>
 801756e:	2200      	movs	r2, #0
 8017570:	e002      	b.n	8017578 <rcl_wait+0x1c8>
 8017572:	3201      	adds	r2, #1
 8017574:	42ba      	cmp	r2, r7
 8017576:	d00a      	beq.n	801758e <rcl_wait+0x1de>
 8017578:	6a19      	ldr	r1, [r3, #32]
 801757a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801757e:	2900      	cmp	r1, #0
 8017580:	d1f7      	bne.n	8017572 <rcl_wait+0x1c2>
 8017582:	69ae      	ldr	r6, [r5, #24]
 8017584:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017588:	3201      	adds	r2, #1
 801758a:	42ba      	cmp	r2, r7
 801758c:	d1f4      	bne.n	8017578 <rcl_wait+0x1c8>
 801758e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8017590:	b17f      	cbz	r7, 80175b2 <rcl_wait+0x202>
 8017592:	2200      	movs	r2, #0
 8017594:	e002      	b.n	801759c <rcl_wait+0x1ec>
 8017596:	3201      	adds	r2, #1
 8017598:	42ba      	cmp	r2, r7
 801759a:	d00a      	beq.n	80175b2 <rcl_wait+0x202>
 801759c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801759e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80175a2:	2900      	cmp	r1, #0
 80175a4:	d1f7      	bne.n	8017596 <rcl_wait+0x1e6>
 80175a6:	6a2e      	ldr	r6, [r5, #32]
 80175a8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80175ac:	3201      	adds	r2, #1
 80175ae:	42ba      	cmp	r2, r7
 80175b0:	d1f4      	bne.n	801759c <rcl_wait+0x1ec>
 80175b2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80175b4:	b17f      	cbz	r7, 80175d6 <rcl_wait+0x226>
 80175b6:	2200      	movs	r2, #0
 80175b8:	e002      	b.n	80175c0 <rcl_wait+0x210>
 80175ba:	3201      	adds	r2, #1
 80175bc:	42ba      	cmp	r2, r7
 80175be:	d00a      	beq.n	80175d6 <rcl_wait+0x226>
 80175c0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80175c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80175c6:	2900      	cmp	r1, #0
 80175c8:	d1f7      	bne.n	80175ba <rcl_wait+0x20a>
 80175ca:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80175cc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80175d0:	3201      	adds	r2, #1
 80175d2:	42ba      	cmp	r2, r7
 80175d4:	d1f4      	bne.n	80175c0 <rcl_wait+0x210>
 80175d6:	f1b8 0f02 	cmp.w	r8, #2
 80175da:	f47f af06 	bne.w	80173ea <rcl_wait+0x3a>
 80175de:	f084 0301 	eor.w	r3, r4, #1
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	bf18      	it	ne
 80175e8:	2002      	movne	r0, #2
 80175ea:	b00d      	add	sp, #52	@ 0x34
 80175ec:	ecbd 8b02 	vpop	{d8}
 80175f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f4:	2a00      	cmp	r2, #0
 80175f6:	d03a      	beq.n	801766e <rcl_wait+0x2be>
 80175f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80175fc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017600:	e705      	b.n	801740e <rcl_wait+0x5e>
 8017602:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017606:	b00d      	add	sp, #52	@ 0x34
 8017608:	ecbd 8b02 	vpop	{d8}
 801760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017610:	2001      	movs	r0, #1
 8017612:	e6ea      	b.n	80173ea <rcl_wait+0x3a>
 8017614:	9b04      	ldr	r3, [sp, #16]
 8017616:	460c      	mov	r4, r1
 8017618:	2b01      	cmp	r3, #1
 801761a:	9b05      	ldr	r3, [sp, #20]
 801761c:	f173 0300 	sbcs.w	r3, r3, #0
 8017620:	bfa8      	it	ge
 8017622:	f044 0401 	orrge.w	r4, r4, #1
 8017626:	b914      	cbnz	r4, 801762e <rcl_wait+0x27e>
 8017628:	4623      	mov	r3, r4
 801762a:	e747      	b.n	80174bc <rcl_wait+0x10c>
 801762c:	4611      	mov	r1, r2
 801762e:	2f00      	cmp	r7, #0
 8017630:	da02      	bge.n	8017638 <rcl_wait+0x288>
 8017632:	f04f 0800 	mov.w	r8, #0
 8017636:	4647      	mov	r7, r8
 8017638:	460c      	mov	r4, r1
 801763a:	4640      	mov	r0, r8
 801763c:	4639      	mov	r1, r7
 801763e:	a312      	add	r3, pc, #72	@ (adr r3, 8017688 <rcl_wait+0x2d8>)
 8017640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017644:	f7e8 feb4 	bl	80003b0 <__aeabi_ldivmod>
 8017648:	a30f      	add	r3, pc, #60	@ (adr r3, 8017688 <rcl_wait+0x2d8>)
 801764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017652:	4640      	mov	r0, r8
 8017654:	4639      	mov	r1, r7
 8017656:	f7e8 feab 	bl	80003b0 <__aeabi_ldivmod>
 801765a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801765e:	ab08      	add	r3, sp, #32
 8017660:	e72c      	b.n	80174bc <rcl_wait+0x10c>
 8017662:	200b      	movs	r0, #11
 8017664:	b00d      	add	sp, #52	@ 0x34
 8017666:	ecbd 8b02 	vpop	{d8}
 801766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801766e:	4611      	mov	r1, r2
 8017670:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017674:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017678:	e713      	b.n	80174a2 <rcl_wait+0xf2>
 801767a:	bf00      	nop
 801767c:	f3af 8000 	nop.w
 8017680:	ffffffff 	.word	0xffffffff
 8017684:	7fffffff 	.word	0x7fffffff
 8017688:	3b9aca00 	.word	0x3b9aca00
 801768c:	00000000 	.word	0x00000000

08017690 <rcl_action_take_goal_response>:
 8017690:	2800      	cmp	r0, #0
 8017692:	d039      	beq.n	8017708 <rcl_action_take_goal_response+0x78>
 8017694:	b570      	push	{r4, r5, r6, lr}
 8017696:	4604      	mov	r4, r0
 8017698:	6800      	ldr	r0, [r0, #0]
 801769a:	b380      	cbz	r0, 80176fe <rcl_action_take_goal_response+0x6e>
 801769c:	460e      	mov	r6, r1
 801769e:	4615      	mov	r5, r2
 80176a0:	f7fd ffda 	bl	8015658 <rcl_client_is_valid>
 80176a4:	b330      	cbz	r0, 80176f4 <rcl_action_take_goal_response+0x64>
 80176a6:	6820      	ldr	r0, [r4, #0]
 80176a8:	3004      	adds	r0, #4
 80176aa:	f7fd ffd5 	bl	8015658 <rcl_client_is_valid>
 80176ae:	b308      	cbz	r0, 80176f4 <rcl_action_take_goal_response+0x64>
 80176b0:	6820      	ldr	r0, [r4, #0]
 80176b2:	3008      	adds	r0, #8
 80176b4:	f7fd ffd0 	bl	8015658 <rcl_client_is_valid>
 80176b8:	b1e0      	cbz	r0, 80176f4 <rcl_action_take_goal_response+0x64>
 80176ba:	6820      	ldr	r0, [r4, #0]
 80176bc:	300c      	adds	r0, #12
 80176be:	f7fe fdc3 	bl	8016248 <rcl_subscription_is_valid>
 80176c2:	b1b8      	cbz	r0, 80176f4 <rcl_action_take_goal_response+0x64>
 80176c4:	6820      	ldr	r0, [r4, #0]
 80176c6:	3010      	adds	r0, #16
 80176c8:	f7fe fdbe 	bl	8016248 <rcl_subscription_is_valid>
 80176cc:	b190      	cbz	r0, 80176f4 <rcl_action_take_goal_response+0x64>
 80176ce:	b1cd      	cbz	r5, 8017704 <rcl_action_take_goal_response+0x74>
 80176d0:	b1c6      	cbz	r6, 8017704 <rcl_action_take_goal_response+0x74>
 80176d2:	462a      	mov	r2, r5
 80176d4:	4631      	mov	r1, r6
 80176d6:	6820      	ldr	r0, [r4, #0]
 80176d8:	f7fd ff76 	bl	80155c8 <rcl_take_response>
 80176dc:	b148      	cbz	r0, 80176f2 <rcl_action_take_goal_response+0x62>
 80176de:	280a      	cmp	r0, #10
 80176e0:	d007      	beq.n	80176f2 <rcl_action_take_goal_response+0x62>
 80176e2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80176e6:	f640 0337 	movw	r3, #2103	@ 0x837
 80176ea:	4290      	cmp	r0, r2
 80176ec:	bf0c      	ite	eq
 80176ee:	4618      	moveq	r0, r3
 80176f0:	2001      	movne	r0, #1
 80176f2:	bd70      	pop	{r4, r5, r6, pc}
 80176f4:	f7f7 fba0 	bl	800ee38 <rcutils_reset_error>
 80176f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80176fc:	bd70      	pop	{r4, r5, r6, pc}
 80176fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017702:	bd70      	pop	{r4, r5, r6, pc}
 8017704:	200b      	movs	r0, #11
 8017706:	bd70      	pop	{r4, r5, r6, pc}
 8017708:	f640 0036 	movw	r0, #2102	@ 0x836
 801770c:	4770      	bx	lr
 801770e:	bf00      	nop

08017710 <rcl_action_send_result_request>:
 8017710:	b390      	cbz	r0, 8017778 <rcl_action_send_result_request+0x68>
 8017712:	b570      	push	{r4, r5, r6, lr}
 8017714:	4604      	mov	r4, r0
 8017716:	6800      	ldr	r0, [r0, #0]
 8017718:	b348      	cbz	r0, 801776e <rcl_action_send_result_request+0x5e>
 801771a:	460e      	mov	r6, r1
 801771c:	4615      	mov	r5, r2
 801771e:	f7fd ff9b 	bl	8015658 <rcl_client_is_valid>
 8017722:	b1f8      	cbz	r0, 8017764 <rcl_action_send_result_request+0x54>
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	3004      	adds	r0, #4
 8017728:	f7fd ff96 	bl	8015658 <rcl_client_is_valid>
 801772c:	b1d0      	cbz	r0, 8017764 <rcl_action_send_result_request+0x54>
 801772e:	6820      	ldr	r0, [r4, #0]
 8017730:	3008      	adds	r0, #8
 8017732:	f7fd ff91 	bl	8015658 <rcl_client_is_valid>
 8017736:	b1a8      	cbz	r0, 8017764 <rcl_action_send_result_request+0x54>
 8017738:	6820      	ldr	r0, [r4, #0]
 801773a:	300c      	adds	r0, #12
 801773c:	f7fe fd84 	bl	8016248 <rcl_subscription_is_valid>
 8017740:	b180      	cbz	r0, 8017764 <rcl_action_send_result_request+0x54>
 8017742:	6820      	ldr	r0, [r4, #0]
 8017744:	3010      	adds	r0, #16
 8017746:	f7fe fd7f 	bl	8016248 <rcl_subscription_is_valid>
 801774a:	b158      	cbz	r0, 8017764 <rcl_action_send_result_request+0x54>
 801774c:	b195      	cbz	r5, 8017774 <rcl_action_send_result_request+0x64>
 801774e:	b18e      	cbz	r6, 8017774 <rcl_action_send_result_request+0x64>
 8017750:	6820      	ldr	r0, [r4, #0]
 8017752:	462a      	mov	r2, r5
 8017754:	4631      	mov	r1, r6
 8017756:	3008      	adds	r0, #8
 8017758:	f7fd fefe 	bl	8015558 <rcl_send_request>
 801775c:	3800      	subs	r0, #0
 801775e:	bf18      	it	ne
 8017760:	2001      	movne	r0, #1
 8017762:	bd70      	pop	{r4, r5, r6, pc}
 8017764:	f7f7 fb68 	bl	800ee38 <rcutils_reset_error>
 8017768:	f640 0036 	movw	r0, #2102	@ 0x836
 801776c:	bd70      	pop	{r4, r5, r6, pc}
 801776e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017772:	bd70      	pop	{r4, r5, r6, pc}
 8017774:	200b      	movs	r0, #11
 8017776:	bd70      	pop	{r4, r5, r6, pc}
 8017778:	f640 0036 	movw	r0, #2102	@ 0x836
 801777c:	4770      	bx	lr
 801777e:	bf00      	nop

08017780 <rcl_action_take_result_response>:
 8017780:	2800      	cmp	r0, #0
 8017782:	d03a      	beq.n	80177fa <rcl_action_take_result_response+0x7a>
 8017784:	b570      	push	{r4, r5, r6, lr}
 8017786:	4604      	mov	r4, r0
 8017788:	6800      	ldr	r0, [r0, #0]
 801778a:	b388      	cbz	r0, 80177f0 <rcl_action_take_result_response+0x70>
 801778c:	460e      	mov	r6, r1
 801778e:	4615      	mov	r5, r2
 8017790:	f7fd ff62 	bl	8015658 <rcl_client_is_valid>
 8017794:	b338      	cbz	r0, 80177e6 <rcl_action_take_result_response+0x66>
 8017796:	6820      	ldr	r0, [r4, #0]
 8017798:	3004      	adds	r0, #4
 801779a:	f7fd ff5d 	bl	8015658 <rcl_client_is_valid>
 801779e:	b310      	cbz	r0, 80177e6 <rcl_action_take_result_response+0x66>
 80177a0:	6820      	ldr	r0, [r4, #0]
 80177a2:	3008      	adds	r0, #8
 80177a4:	f7fd ff58 	bl	8015658 <rcl_client_is_valid>
 80177a8:	b1e8      	cbz	r0, 80177e6 <rcl_action_take_result_response+0x66>
 80177aa:	6820      	ldr	r0, [r4, #0]
 80177ac:	300c      	adds	r0, #12
 80177ae:	f7fe fd4b 	bl	8016248 <rcl_subscription_is_valid>
 80177b2:	b1c0      	cbz	r0, 80177e6 <rcl_action_take_result_response+0x66>
 80177b4:	6820      	ldr	r0, [r4, #0]
 80177b6:	3010      	adds	r0, #16
 80177b8:	f7fe fd46 	bl	8016248 <rcl_subscription_is_valid>
 80177bc:	b198      	cbz	r0, 80177e6 <rcl_action_take_result_response+0x66>
 80177be:	b1d5      	cbz	r5, 80177f6 <rcl_action_take_result_response+0x76>
 80177c0:	b1ce      	cbz	r6, 80177f6 <rcl_action_take_result_response+0x76>
 80177c2:	6820      	ldr	r0, [r4, #0]
 80177c4:	462a      	mov	r2, r5
 80177c6:	4631      	mov	r1, r6
 80177c8:	3008      	adds	r0, #8
 80177ca:	f7fd fefd 	bl	80155c8 <rcl_take_response>
 80177ce:	b148      	cbz	r0, 80177e4 <rcl_action_take_result_response+0x64>
 80177d0:	280a      	cmp	r0, #10
 80177d2:	d007      	beq.n	80177e4 <rcl_action_take_result_response+0x64>
 80177d4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80177d8:	f640 0337 	movw	r3, #2103	@ 0x837
 80177dc:	4290      	cmp	r0, r2
 80177de:	bf0c      	ite	eq
 80177e0:	4618      	moveq	r0, r3
 80177e2:	2001      	movne	r0, #1
 80177e4:	bd70      	pop	{r4, r5, r6, pc}
 80177e6:	f7f7 fb27 	bl	800ee38 <rcutils_reset_error>
 80177ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80177ee:	bd70      	pop	{r4, r5, r6, pc}
 80177f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80177f4:	bd70      	pop	{r4, r5, r6, pc}
 80177f6:	200b      	movs	r0, #11
 80177f8:	bd70      	pop	{r4, r5, r6, pc}
 80177fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80177fe:	4770      	bx	lr

08017800 <rcl_action_take_cancel_response>:
 8017800:	2800      	cmp	r0, #0
 8017802:	d03a      	beq.n	801787a <rcl_action_take_cancel_response+0x7a>
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	4604      	mov	r4, r0
 8017808:	6800      	ldr	r0, [r0, #0]
 801780a:	b388      	cbz	r0, 8017870 <rcl_action_take_cancel_response+0x70>
 801780c:	460e      	mov	r6, r1
 801780e:	4615      	mov	r5, r2
 8017810:	f7fd ff22 	bl	8015658 <rcl_client_is_valid>
 8017814:	b338      	cbz	r0, 8017866 <rcl_action_take_cancel_response+0x66>
 8017816:	6820      	ldr	r0, [r4, #0]
 8017818:	3004      	adds	r0, #4
 801781a:	f7fd ff1d 	bl	8015658 <rcl_client_is_valid>
 801781e:	b310      	cbz	r0, 8017866 <rcl_action_take_cancel_response+0x66>
 8017820:	6820      	ldr	r0, [r4, #0]
 8017822:	3008      	adds	r0, #8
 8017824:	f7fd ff18 	bl	8015658 <rcl_client_is_valid>
 8017828:	b1e8      	cbz	r0, 8017866 <rcl_action_take_cancel_response+0x66>
 801782a:	6820      	ldr	r0, [r4, #0]
 801782c:	300c      	adds	r0, #12
 801782e:	f7fe fd0b 	bl	8016248 <rcl_subscription_is_valid>
 8017832:	b1c0      	cbz	r0, 8017866 <rcl_action_take_cancel_response+0x66>
 8017834:	6820      	ldr	r0, [r4, #0]
 8017836:	3010      	adds	r0, #16
 8017838:	f7fe fd06 	bl	8016248 <rcl_subscription_is_valid>
 801783c:	b198      	cbz	r0, 8017866 <rcl_action_take_cancel_response+0x66>
 801783e:	b1d5      	cbz	r5, 8017876 <rcl_action_take_cancel_response+0x76>
 8017840:	b1ce      	cbz	r6, 8017876 <rcl_action_take_cancel_response+0x76>
 8017842:	6820      	ldr	r0, [r4, #0]
 8017844:	462a      	mov	r2, r5
 8017846:	4631      	mov	r1, r6
 8017848:	3004      	adds	r0, #4
 801784a:	f7fd febd 	bl	80155c8 <rcl_take_response>
 801784e:	b148      	cbz	r0, 8017864 <rcl_action_take_cancel_response+0x64>
 8017850:	280a      	cmp	r0, #10
 8017852:	d007      	beq.n	8017864 <rcl_action_take_cancel_response+0x64>
 8017854:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017858:	f640 0337 	movw	r3, #2103	@ 0x837
 801785c:	4290      	cmp	r0, r2
 801785e:	bf0c      	ite	eq
 8017860:	4618      	moveq	r0, r3
 8017862:	2001      	movne	r0, #1
 8017864:	bd70      	pop	{r4, r5, r6, pc}
 8017866:	f7f7 fae7 	bl	800ee38 <rcutils_reset_error>
 801786a:	f640 0036 	movw	r0, #2102	@ 0x836
 801786e:	bd70      	pop	{r4, r5, r6, pc}
 8017870:	f640 0036 	movw	r0, #2102	@ 0x836
 8017874:	bd70      	pop	{r4, r5, r6, pc}
 8017876:	200b      	movs	r0, #11
 8017878:	bd70      	pop	{r4, r5, r6, pc}
 801787a:	f640 0036 	movw	r0, #2102	@ 0x836
 801787e:	4770      	bx	lr

08017880 <rcl_action_take_feedback>:
 8017880:	2800      	cmp	r0, #0
 8017882:	d038      	beq.n	80178f6 <rcl_action_take_feedback+0x76>
 8017884:	b530      	push	{r4, r5, lr}
 8017886:	4604      	mov	r4, r0
 8017888:	6800      	ldr	r0, [r0, #0]
 801788a:	b091      	sub	sp, #68	@ 0x44
 801788c:	b378      	cbz	r0, 80178ee <rcl_action_take_feedback+0x6e>
 801788e:	460d      	mov	r5, r1
 8017890:	f7fd fee2 	bl	8015658 <rcl_client_is_valid>
 8017894:	b328      	cbz	r0, 80178e2 <rcl_action_take_feedback+0x62>
 8017896:	6820      	ldr	r0, [r4, #0]
 8017898:	3004      	adds	r0, #4
 801789a:	f7fd fedd 	bl	8015658 <rcl_client_is_valid>
 801789e:	b300      	cbz	r0, 80178e2 <rcl_action_take_feedback+0x62>
 80178a0:	6820      	ldr	r0, [r4, #0]
 80178a2:	3008      	adds	r0, #8
 80178a4:	f7fd fed8 	bl	8015658 <rcl_client_is_valid>
 80178a8:	b1d8      	cbz	r0, 80178e2 <rcl_action_take_feedback+0x62>
 80178aa:	6820      	ldr	r0, [r4, #0]
 80178ac:	300c      	adds	r0, #12
 80178ae:	f7fe fccb 	bl	8016248 <rcl_subscription_is_valid>
 80178b2:	b1b0      	cbz	r0, 80178e2 <rcl_action_take_feedback+0x62>
 80178b4:	6820      	ldr	r0, [r4, #0]
 80178b6:	3010      	adds	r0, #16
 80178b8:	f7fe fcc6 	bl	8016248 <rcl_subscription_is_valid>
 80178bc:	b188      	cbz	r0, 80178e2 <rcl_action_take_feedback+0x62>
 80178be:	b1ed      	cbz	r5, 80178fc <rcl_action_take_feedback+0x7c>
 80178c0:	6820      	ldr	r0, [r4, #0]
 80178c2:	2300      	movs	r3, #0
 80178c4:	466a      	mov	r2, sp
 80178c6:	4629      	mov	r1, r5
 80178c8:	300c      	adds	r0, #12
 80178ca:	f7fe fc61 	bl	8016190 <rcl_take>
 80178ce:	b160      	cbz	r0, 80178ea <rcl_action_take_feedback+0x6a>
 80178d0:	f240 1391 	movw	r3, #401	@ 0x191
 80178d4:	4298      	cmp	r0, r3
 80178d6:	d014      	beq.n	8017902 <rcl_action_take_feedback+0x82>
 80178d8:	280a      	cmp	r0, #10
 80178da:	bf18      	it	ne
 80178dc:	2001      	movne	r0, #1
 80178de:	b011      	add	sp, #68	@ 0x44
 80178e0:	bd30      	pop	{r4, r5, pc}
 80178e2:	f7f7 faa9 	bl	800ee38 <rcutils_reset_error>
 80178e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80178ea:	b011      	add	sp, #68	@ 0x44
 80178ec:	bd30      	pop	{r4, r5, pc}
 80178ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80178f2:	b011      	add	sp, #68	@ 0x44
 80178f4:	bd30      	pop	{r4, r5, pc}
 80178f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80178fa:	4770      	bx	lr
 80178fc:	200b      	movs	r0, #11
 80178fe:	b011      	add	sp, #68	@ 0x44
 8017900:	bd30      	pop	{r4, r5, pc}
 8017902:	f640 0037 	movw	r0, #2103	@ 0x837
 8017906:	e7f0      	b.n	80178ea <rcl_action_take_feedback+0x6a>

08017908 <rcl_action_wait_set_add_action_client>:
 8017908:	2800      	cmp	r0, #0
 801790a:	d048      	beq.n	801799e <rcl_action_wait_set_add_action_client+0x96>
 801790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801790e:	460c      	mov	r4, r1
 8017910:	2900      	cmp	r1, #0
 8017912:	d03c      	beq.n	801798e <rcl_action_wait_set_add_action_client+0x86>
 8017914:	4605      	mov	r5, r0
 8017916:	6808      	ldr	r0, [r1, #0]
 8017918:	2800      	cmp	r0, #0
 801791a:	d038      	beq.n	801798e <rcl_action_wait_set_add_action_client+0x86>
 801791c:	4617      	mov	r7, r2
 801791e:	461e      	mov	r6, r3
 8017920:	f7fd fe9a 	bl	8015658 <rcl_client_is_valid>
 8017924:	b3b0      	cbz	r0, 8017994 <rcl_action_wait_set_add_action_client+0x8c>
 8017926:	6820      	ldr	r0, [r4, #0]
 8017928:	3004      	adds	r0, #4
 801792a:	f7fd fe95 	bl	8015658 <rcl_client_is_valid>
 801792e:	b388      	cbz	r0, 8017994 <rcl_action_wait_set_add_action_client+0x8c>
 8017930:	6820      	ldr	r0, [r4, #0]
 8017932:	3008      	adds	r0, #8
 8017934:	f7fd fe90 	bl	8015658 <rcl_client_is_valid>
 8017938:	b360      	cbz	r0, 8017994 <rcl_action_wait_set_add_action_client+0x8c>
 801793a:	6820      	ldr	r0, [r4, #0]
 801793c:	300c      	adds	r0, #12
 801793e:	f7fe fc83 	bl	8016248 <rcl_subscription_is_valid>
 8017942:	b338      	cbz	r0, 8017994 <rcl_action_wait_set_add_action_client+0x8c>
 8017944:	6820      	ldr	r0, [r4, #0]
 8017946:	3010      	adds	r0, #16
 8017948:	f7fe fc7e 	bl	8016248 <rcl_subscription_is_valid>
 801794c:	b310      	cbz	r0, 8017994 <rcl_action_wait_set_add_action_client+0x8c>
 801794e:	6821      	ldr	r1, [r4, #0]
 8017950:	4628      	mov	r0, r5
 8017952:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8017956:	f7ff fcd1 	bl	80172fc <rcl_wait_set_add_client>
 801795a:	b9b8      	cbnz	r0, 801798c <rcl_action_wait_set_add_action_client+0x84>
 801795c:	6821      	ldr	r1, [r4, #0]
 801795e:	4628      	mov	r0, r5
 8017960:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017964:	3104      	adds	r1, #4
 8017966:	f7ff fcc9 	bl	80172fc <rcl_wait_set_add_client>
 801796a:	b978      	cbnz	r0, 801798c <rcl_action_wait_set_add_action_client+0x84>
 801796c:	6821      	ldr	r1, [r4, #0]
 801796e:	4628      	mov	r0, r5
 8017970:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017974:	3108      	adds	r1, #8
 8017976:	f7ff fcc1 	bl	80172fc <rcl_wait_set_add_client>
 801797a:	b938      	cbnz	r0, 801798c <rcl_action_wait_set_add_action_client+0x84>
 801797c:	6821      	ldr	r1, [r4, #0]
 801797e:	4628      	mov	r0, r5
 8017980:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017984:	310c      	adds	r1, #12
 8017986:	f7ff f969 	bl	8016c5c <rcl_wait_set_add_subscription>
 801798a:	b158      	cbz	r0, 80179a4 <rcl_action_wait_set_add_action_client+0x9c>
 801798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801798e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017994:	f7f7 fa50 	bl	800ee38 <rcutils_reset_error>
 8017998:	f640 0036 	movw	r0, #2102	@ 0x836
 801799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801799e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80179a2:	4770      	bx	lr
 80179a4:	6821      	ldr	r1, [r4, #0]
 80179a6:	4628      	mov	r0, r5
 80179a8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80179ac:	3110      	adds	r1, #16
 80179ae:	f7ff f955 	bl	8016c5c <rcl_wait_set_add_subscription>
 80179b2:	2800      	cmp	r0, #0
 80179b4:	d1ea      	bne.n	801798c <rcl_action_wait_set_add_action_client+0x84>
 80179b6:	b11f      	cbz	r7, 80179c0 <rcl_action_wait_set_add_action_client+0xb8>
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80179be:	603b      	str	r3, [r7, #0]
 80179c0:	2e00      	cmp	r6, #0
 80179c2:	d0e3      	beq.n	801798c <rcl_action_wait_set_add_action_client+0x84>
 80179c4:	6823      	ldr	r3, [r4, #0]
 80179c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80179ca:	6033      	str	r3, [r6, #0]
 80179cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ce:	bf00      	nop

080179d0 <rcl_action_client_wait_set_get_entities_ready>:
 80179d0:	2800      	cmp	r0, #0
 80179d2:	d050      	beq.n	8017a76 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80179d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179d8:	460c      	mov	r4, r1
 80179da:	2900      	cmp	r1, #0
 80179dc:	d03e      	beq.n	8017a5c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80179de:	4605      	mov	r5, r0
 80179e0:	6808      	ldr	r0, [r1, #0]
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d03a      	beq.n	8017a5c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80179e6:	4616      	mov	r6, r2
 80179e8:	461f      	mov	r7, r3
 80179ea:	f7fd fe35 	bl	8015658 <rcl_client_is_valid>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d038      	beq.n	8017a64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179f2:	6820      	ldr	r0, [r4, #0]
 80179f4:	3004      	adds	r0, #4
 80179f6:	f7fd fe2f 	bl	8015658 <rcl_client_is_valid>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d032      	beq.n	8017a64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80179fe:	6820      	ldr	r0, [r4, #0]
 8017a00:	3008      	adds	r0, #8
 8017a02:	f7fd fe29 	bl	8015658 <rcl_client_is_valid>
 8017a06:	b368      	cbz	r0, 8017a64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017a08:	6820      	ldr	r0, [r4, #0]
 8017a0a:	300c      	adds	r0, #12
 8017a0c:	f7fe fc1c 	bl	8016248 <rcl_subscription_is_valid>
 8017a10:	b340      	cbz	r0, 8017a64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017a12:	6820      	ldr	r0, [r4, #0]
 8017a14:	3010      	adds	r0, #16
 8017a16:	f7fe fc17 	bl	8016248 <rcl_subscription_is_valid>
 8017a1a:	b318      	cbz	r0, 8017a64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017a1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8017a20:	2a00      	cmp	r2, #0
 8017a22:	bf18      	it	ne
 8017a24:	2b00      	cmpne	r3, #0
 8017a26:	9b08      	ldr	r3, [sp, #32]
 8017a28:	bf0c      	ite	eq
 8017a2a:	2101      	moveq	r1, #1
 8017a2c:	2100      	movne	r1, #0
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	bf08      	it	eq
 8017a32:	f041 0101 	orreq.w	r1, r1, #1
 8017a36:	2f00      	cmp	r7, #0
 8017a38:	bf08      	it	eq
 8017a3a:	f041 0101 	orreq.w	r1, r1, #1
 8017a3e:	b9b9      	cbnz	r1, 8017a70 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017a40:	b1b6      	cbz	r6, 8017a70 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017a42:	6823      	ldr	r3, [r4, #0]
 8017a44:	686c      	ldr	r4, [r5, #4]
 8017a46:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8017a4a:	428a      	cmp	r2, r1
 8017a4c:	4610      	mov	r0, r2
 8017a4e:	bf38      	it	cc
 8017a50:	4608      	movcc	r0, r1
 8017a52:	4284      	cmp	r4, r0
 8017a54:	d812      	bhi.n	8017a7c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8017a56:	2001      	movs	r0, #1
 8017a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a5c:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a64:	f7f7 f9e8 	bl	800ee38 <rcutils_reset_error>
 8017a68:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a70:	200b      	movs	r0, #11
 8017a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017a7a:	4770      	bx	lr
 8017a7c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8017a80:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8017a84:	45f0      	cmp	r8, lr
 8017a86:	4640      	mov	r0, r8
 8017a88:	69ec      	ldr	r4, [r5, #28]
 8017a8a:	bf38      	it	cc
 8017a8c:	4670      	movcc	r0, lr
 8017a8e:	4560      	cmp	r0, ip
 8017a90:	bf38      	it	cc
 8017a92:	4660      	movcc	r0, ip
 8017a94:	4284      	cmp	r4, r0
 8017a96:	d9de      	bls.n	8017a56 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017a98:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017a9c:	682d      	ldr	r5, [r5, #0]
 8017a9e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8017aa2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8017aa6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017aaa:	1a18      	subs	r0, r3, r0
 8017aac:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017ab0:	f103 0c0c 	add.w	ip, r3, #12
 8017ab4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017ab8:	fab0 f080 	clz	r0, r0
 8017abc:	eba5 050c 	sub.w	r5, r5, ip
 8017ac0:	0940      	lsrs	r0, r0, #5
 8017ac2:	fab5 f585 	clz	r5, r5
 8017ac6:	096d      	lsrs	r5, r5, #5
 8017ac8:	7035      	strb	r5, [r6, #0]
 8017aca:	f103 0510 	add.w	r5, r3, #16
 8017ace:	1b64      	subs	r4, r4, r5
 8017ad0:	9d08      	ldr	r5, [sp, #32]
 8017ad2:	fab4 f484 	clz	r4, r4
 8017ad6:	0964      	lsrs	r4, r4, #5
 8017ad8:	703c      	strb	r4, [r7, #0]
 8017ada:	1d1c      	adds	r4, r3, #4
 8017adc:	3308      	adds	r3, #8
 8017ade:	7028      	strb	r0, [r5, #0]
 8017ae0:	1b09      	subs	r1, r1, r4
 8017ae2:	2000      	movs	r0, #0
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ae8:	fab1 f181 	clz	r1, r1
 8017aec:	fab3 f383 	clz	r3, r3
 8017af0:	0949      	lsrs	r1, r1, #5
 8017af2:	095b      	lsrs	r3, r3, #5
 8017af4:	7011      	strb	r1, [r2, #0]
 8017af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017af8:	7013      	strb	r3, [r2, #0]
 8017afa:	e7b1      	b.n	8017a60 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017afc <rcl_action_take_goal_request>:
 8017afc:	2800      	cmp	r0, #0
 8017afe:	d039      	beq.n	8017b74 <rcl_action_take_goal_request+0x78>
 8017b00:	b570      	push	{r4, r5, r6, lr}
 8017b02:	4604      	mov	r4, r0
 8017b04:	6800      	ldr	r0, [r0, #0]
 8017b06:	b380      	cbz	r0, 8017b6a <rcl_action_take_goal_request+0x6e>
 8017b08:	460e      	mov	r6, r1
 8017b0a:	4615      	mov	r5, r2
 8017b0c:	f7fe fb36 	bl	801617c <rcl_service_is_valid>
 8017b10:	b330      	cbz	r0, 8017b60 <rcl_action_take_goal_request+0x64>
 8017b12:	6820      	ldr	r0, [r4, #0]
 8017b14:	3004      	adds	r0, #4
 8017b16:	f7fe fb31 	bl	801617c <rcl_service_is_valid>
 8017b1a:	b308      	cbz	r0, 8017b60 <rcl_action_take_goal_request+0x64>
 8017b1c:	6820      	ldr	r0, [r4, #0]
 8017b1e:	3008      	adds	r0, #8
 8017b20:	f7fe fb2c 	bl	801617c <rcl_service_is_valid>
 8017b24:	b1e0      	cbz	r0, 8017b60 <rcl_action_take_goal_request+0x64>
 8017b26:	6820      	ldr	r0, [r4, #0]
 8017b28:	300c      	adds	r0, #12
 8017b2a:	f7f6 f9f1 	bl	800df10 <rcl_publisher_is_valid>
 8017b2e:	b1b8      	cbz	r0, 8017b60 <rcl_action_take_goal_request+0x64>
 8017b30:	6820      	ldr	r0, [r4, #0]
 8017b32:	3010      	adds	r0, #16
 8017b34:	f7f6 f9ec 	bl	800df10 <rcl_publisher_is_valid>
 8017b38:	b190      	cbz	r0, 8017b60 <rcl_action_take_goal_request+0x64>
 8017b3a:	b1cd      	cbz	r5, 8017b70 <rcl_action_take_goal_request+0x74>
 8017b3c:	b1c6      	cbz	r6, 8017b70 <rcl_action_take_goal_request+0x74>
 8017b3e:	462a      	mov	r2, r5
 8017b40:	4631      	mov	r1, r6
 8017b42:	6820      	ldr	r0, [r4, #0]
 8017b44:	f7fe fac2 	bl	80160cc <rcl_take_request>
 8017b48:	b148      	cbz	r0, 8017b5e <rcl_action_take_goal_request+0x62>
 8017b4a:	280a      	cmp	r0, #10
 8017b4c:	d007      	beq.n	8017b5e <rcl_action_take_goal_request+0x62>
 8017b4e:	f240 2259 	movw	r2, #601	@ 0x259
 8017b52:	f640 0399 	movw	r3, #2201	@ 0x899
 8017b56:	4290      	cmp	r0, r2
 8017b58:	bf0c      	ite	eq
 8017b5a:	4618      	moveq	r0, r3
 8017b5c:	2001      	movne	r0, #1
 8017b5e:	bd70      	pop	{r4, r5, r6, pc}
 8017b60:	f7f7 f96a 	bl	800ee38 <rcutils_reset_error>
 8017b64:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b68:	bd70      	pop	{r4, r5, r6, pc}
 8017b6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b6e:	bd70      	pop	{r4, r5, r6, pc}
 8017b70:	200b      	movs	r0, #11
 8017b72:	bd70      	pop	{r4, r5, r6, pc}
 8017b74:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop

08017b7c <rcl_action_send_goal_response>:
 8017b7c:	b390      	cbz	r0, 8017be4 <rcl_action_send_goal_response+0x68>
 8017b7e:	b570      	push	{r4, r5, r6, lr}
 8017b80:	4604      	mov	r4, r0
 8017b82:	6800      	ldr	r0, [r0, #0]
 8017b84:	b348      	cbz	r0, 8017bda <rcl_action_send_goal_response+0x5e>
 8017b86:	460e      	mov	r6, r1
 8017b88:	4615      	mov	r5, r2
 8017b8a:	f7fe faf7 	bl	801617c <rcl_service_is_valid>
 8017b8e:	b1f8      	cbz	r0, 8017bd0 <rcl_action_send_goal_response+0x54>
 8017b90:	6820      	ldr	r0, [r4, #0]
 8017b92:	3004      	adds	r0, #4
 8017b94:	f7fe faf2 	bl	801617c <rcl_service_is_valid>
 8017b98:	b1d0      	cbz	r0, 8017bd0 <rcl_action_send_goal_response+0x54>
 8017b9a:	6820      	ldr	r0, [r4, #0]
 8017b9c:	3008      	adds	r0, #8
 8017b9e:	f7fe faed 	bl	801617c <rcl_service_is_valid>
 8017ba2:	b1a8      	cbz	r0, 8017bd0 <rcl_action_send_goal_response+0x54>
 8017ba4:	6820      	ldr	r0, [r4, #0]
 8017ba6:	300c      	adds	r0, #12
 8017ba8:	f7f6 f9b2 	bl	800df10 <rcl_publisher_is_valid>
 8017bac:	b180      	cbz	r0, 8017bd0 <rcl_action_send_goal_response+0x54>
 8017bae:	6820      	ldr	r0, [r4, #0]
 8017bb0:	3010      	adds	r0, #16
 8017bb2:	f7f6 f9ad 	bl	800df10 <rcl_publisher_is_valid>
 8017bb6:	b158      	cbz	r0, 8017bd0 <rcl_action_send_goal_response+0x54>
 8017bb8:	b195      	cbz	r5, 8017be0 <rcl_action_send_goal_response+0x64>
 8017bba:	b18e      	cbz	r6, 8017be0 <rcl_action_send_goal_response+0x64>
 8017bbc:	462a      	mov	r2, r5
 8017bbe:	4631      	mov	r1, r6
 8017bc0:	6820      	ldr	r0, [r4, #0]
 8017bc2:	f7fe fac3 	bl	801614c <rcl_send_response>
 8017bc6:	b110      	cbz	r0, 8017bce <rcl_action_send_goal_response+0x52>
 8017bc8:	2802      	cmp	r0, #2
 8017bca:	bf18      	it	ne
 8017bcc:	2001      	movne	r0, #1
 8017bce:	bd70      	pop	{r4, r5, r6, pc}
 8017bd0:	f7f7 f932 	bl	800ee38 <rcutils_reset_error>
 8017bd4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bd8:	bd70      	pop	{r4, r5, r6, pc}
 8017bda:	f640 0098 	movw	r0, #2200	@ 0x898
 8017bde:	bd70      	pop	{r4, r5, r6, pc}
 8017be0:	200b      	movs	r0, #11
 8017be2:	bd70      	pop	{r4, r5, r6, pc}
 8017be4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop

08017bec <rcl_action_take_result_request>:
 8017bec:	2800      	cmp	r0, #0
 8017bee:	d03a      	beq.n	8017c66 <rcl_action_take_result_request+0x7a>
 8017bf0:	b570      	push	{r4, r5, r6, lr}
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	6800      	ldr	r0, [r0, #0]
 8017bf6:	b388      	cbz	r0, 8017c5c <rcl_action_take_result_request+0x70>
 8017bf8:	460e      	mov	r6, r1
 8017bfa:	4615      	mov	r5, r2
 8017bfc:	f7fe fabe 	bl	801617c <rcl_service_is_valid>
 8017c00:	b338      	cbz	r0, 8017c52 <rcl_action_take_result_request+0x66>
 8017c02:	6820      	ldr	r0, [r4, #0]
 8017c04:	3004      	adds	r0, #4
 8017c06:	f7fe fab9 	bl	801617c <rcl_service_is_valid>
 8017c0a:	b310      	cbz	r0, 8017c52 <rcl_action_take_result_request+0x66>
 8017c0c:	6820      	ldr	r0, [r4, #0]
 8017c0e:	3008      	adds	r0, #8
 8017c10:	f7fe fab4 	bl	801617c <rcl_service_is_valid>
 8017c14:	b1e8      	cbz	r0, 8017c52 <rcl_action_take_result_request+0x66>
 8017c16:	6820      	ldr	r0, [r4, #0]
 8017c18:	300c      	adds	r0, #12
 8017c1a:	f7f6 f979 	bl	800df10 <rcl_publisher_is_valid>
 8017c1e:	b1c0      	cbz	r0, 8017c52 <rcl_action_take_result_request+0x66>
 8017c20:	6820      	ldr	r0, [r4, #0]
 8017c22:	3010      	adds	r0, #16
 8017c24:	f7f6 f974 	bl	800df10 <rcl_publisher_is_valid>
 8017c28:	b198      	cbz	r0, 8017c52 <rcl_action_take_result_request+0x66>
 8017c2a:	b1d5      	cbz	r5, 8017c62 <rcl_action_take_result_request+0x76>
 8017c2c:	b1ce      	cbz	r6, 8017c62 <rcl_action_take_result_request+0x76>
 8017c2e:	6820      	ldr	r0, [r4, #0]
 8017c30:	462a      	mov	r2, r5
 8017c32:	4631      	mov	r1, r6
 8017c34:	3008      	adds	r0, #8
 8017c36:	f7fe fa49 	bl	80160cc <rcl_take_request>
 8017c3a:	b148      	cbz	r0, 8017c50 <rcl_action_take_result_request+0x64>
 8017c3c:	280a      	cmp	r0, #10
 8017c3e:	d007      	beq.n	8017c50 <rcl_action_take_result_request+0x64>
 8017c40:	f240 2259 	movw	r2, #601	@ 0x259
 8017c44:	f640 0399 	movw	r3, #2201	@ 0x899
 8017c48:	4290      	cmp	r0, r2
 8017c4a:	bf0c      	ite	eq
 8017c4c:	4618      	moveq	r0, r3
 8017c4e:	2001      	movne	r0, #1
 8017c50:	bd70      	pop	{r4, r5, r6, pc}
 8017c52:	f7f7 f8f1 	bl	800ee38 <rcutils_reset_error>
 8017c56:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c5a:	bd70      	pop	{r4, r5, r6, pc}
 8017c5c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c60:	bd70      	pop	{r4, r5, r6, pc}
 8017c62:	200b      	movs	r0, #11
 8017c64:	bd70      	pop	{r4, r5, r6, pc}
 8017c66:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c6a:	4770      	bx	lr

08017c6c <rcl_action_take_cancel_request>:
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	d03a      	beq.n	8017ce6 <rcl_action_take_cancel_request+0x7a>
 8017c70:	b570      	push	{r4, r5, r6, lr}
 8017c72:	4604      	mov	r4, r0
 8017c74:	6800      	ldr	r0, [r0, #0]
 8017c76:	b388      	cbz	r0, 8017cdc <rcl_action_take_cancel_request+0x70>
 8017c78:	460e      	mov	r6, r1
 8017c7a:	4615      	mov	r5, r2
 8017c7c:	f7fe fa7e 	bl	801617c <rcl_service_is_valid>
 8017c80:	b338      	cbz	r0, 8017cd2 <rcl_action_take_cancel_request+0x66>
 8017c82:	6820      	ldr	r0, [r4, #0]
 8017c84:	3004      	adds	r0, #4
 8017c86:	f7fe fa79 	bl	801617c <rcl_service_is_valid>
 8017c8a:	b310      	cbz	r0, 8017cd2 <rcl_action_take_cancel_request+0x66>
 8017c8c:	6820      	ldr	r0, [r4, #0]
 8017c8e:	3008      	adds	r0, #8
 8017c90:	f7fe fa74 	bl	801617c <rcl_service_is_valid>
 8017c94:	b1e8      	cbz	r0, 8017cd2 <rcl_action_take_cancel_request+0x66>
 8017c96:	6820      	ldr	r0, [r4, #0]
 8017c98:	300c      	adds	r0, #12
 8017c9a:	f7f6 f939 	bl	800df10 <rcl_publisher_is_valid>
 8017c9e:	b1c0      	cbz	r0, 8017cd2 <rcl_action_take_cancel_request+0x66>
 8017ca0:	6820      	ldr	r0, [r4, #0]
 8017ca2:	3010      	adds	r0, #16
 8017ca4:	f7f6 f934 	bl	800df10 <rcl_publisher_is_valid>
 8017ca8:	b198      	cbz	r0, 8017cd2 <rcl_action_take_cancel_request+0x66>
 8017caa:	b1d5      	cbz	r5, 8017ce2 <rcl_action_take_cancel_request+0x76>
 8017cac:	b1ce      	cbz	r6, 8017ce2 <rcl_action_take_cancel_request+0x76>
 8017cae:	6820      	ldr	r0, [r4, #0]
 8017cb0:	462a      	mov	r2, r5
 8017cb2:	4631      	mov	r1, r6
 8017cb4:	3004      	adds	r0, #4
 8017cb6:	f7fe fa09 	bl	80160cc <rcl_take_request>
 8017cba:	b148      	cbz	r0, 8017cd0 <rcl_action_take_cancel_request+0x64>
 8017cbc:	280a      	cmp	r0, #10
 8017cbe:	d007      	beq.n	8017cd0 <rcl_action_take_cancel_request+0x64>
 8017cc0:	f240 2259 	movw	r2, #601	@ 0x259
 8017cc4:	f640 0399 	movw	r3, #2201	@ 0x899
 8017cc8:	4290      	cmp	r0, r2
 8017cca:	bf0c      	ite	eq
 8017ccc:	4618      	moveq	r0, r3
 8017cce:	2001      	movne	r0, #1
 8017cd0:	bd70      	pop	{r4, r5, r6, pc}
 8017cd2:	f7f7 f8b1 	bl	800ee38 <rcutils_reset_error>
 8017cd6:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ce0:	bd70      	pop	{r4, r5, r6, pc}
 8017ce2:	200b      	movs	r0, #11
 8017ce4:	bd70      	pop	{r4, r5, r6, pc}
 8017ce6:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cea:	4770      	bx	lr

08017cec <rcl_action_send_cancel_response>:
 8017cec:	b398      	cbz	r0, 8017d56 <rcl_action_send_cancel_response+0x6a>
 8017cee:	b570      	push	{r4, r5, r6, lr}
 8017cf0:	4604      	mov	r4, r0
 8017cf2:	6800      	ldr	r0, [r0, #0]
 8017cf4:	b350      	cbz	r0, 8017d4c <rcl_action_send_cancel_response+0x60>
 8017cf6:	460e      	mov	r6, r1
 8017cf8:	4615      	mov	r5, r2
 8017cfa:	f7fe fa3f 	bl	801617c <rcl_service_is_valid>
 8017cfe:	b300      	cbz	r0, 8017d42 <rcl_action_send_cancel_response+0x56>
 8017d00:	6820      	ldr	r0, [r4, #0]
 8017d02:	3004      	adds	r0, #4
 8017d04:	f7fe fa3a 	bl	801617c <rcl_service_is_valid>
 8017d08:	b1d8      	cbz	r0, 8017d42 <rcl_action_send_cancel_response+0x56>
 8017d0a:	6820      	ldr	r0, [r4, #0]
 8017d0c:	3008      	adds	r0, #8
 8017d0e:	f7fe fa35 	bl	801617c <rcl_service_is_valid>
 8017d12:	b1b0      	cbz	r0, 8017d42 <rcl_action_send_cancel_response+0x56>
 8017d14:	6820      	ldr	r0, [r4, #0]
 8017d16:	300c      	adds	r0, #12
 8017d18:	f7f6 f8fa 	bl	800df10 <rcl_publisher_is_valid>
 8017d1c:	b188      	cbz	r0, 8017d42 <rcl_action_send_cancel_response+0x56>
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	3010      	adds	r0, #16
 8017d22:	f7f6 f8f5 	bl	800df10 <rcl_publisher_is_valid>
 8017d26:	b160      	cbz	r0, 8017d42 <rcl_action_send_cancel_response+0x56>
 8017d28:	b19d      	cbz	r5, 8017d52 <rcl_action_send_cancel_response+0x66>
 8017d2a:	b196      	cbz	r6, 8017d52 <rcl_action_send_cancel_response+0x66>
 8017d2c:	6820      	ldr	r0, [r4, #0]
 8017d2e:	462a      	mov	r2, r5
 8017d30:	4631      	mov	r1, r6
 8017d32:	3004      	adds	r0, #4
 8017d34:	f7fe fa0a 	bl	801614c <rcl_send_response>
 8017d38:	b110      	cbz	r0, 8017d40 <rcl_action_send_cancel_response+0x54>
 8017d3a:	2802      	cmp	r0, #2
 8017d3c:	bf18      	it	ne
 8017d3e:	2001      	movne	r0, #1
 8017d40:	bd70      	pop	{r4, r5, r6, pc}
 8017d42:	f7f7 f879 	bl	800ee38 <rcutils_reset_error>
 8017d46:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d4a:	bd70      	pop	{r4, r5, r6, pc}
 8017d4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d50:	bd70      	pop	{r4, r5, r6, pc}
 8017d52:	200b      	movs	r0, #11
 8017d54:	bd70      	pop	{r4, r5, r6, pc}
 8017d56:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d5a:	4770      	bx	lr

08017d5c <rcl_action_wait_set_add_action_server>:
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	d04d      	beq.n	8017dfc <rcl_action_wait_set_add_action_server+0xa0>
 8017d60:	b570      	push	{r4, r5, r6, lr}
 8017d62:	460c      	mov	r4, r1
 8017d64:	b159      	cbz	r1, 8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017d66:	4605      	mov	r5, r0
 8017d68:	6808      	ldr	r0, [r1, #0]
 8017d6a:	b140      	cbz	r0, 8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017d6c:	4616      	mov	r6, r2
 8017d6e:	f7fe fa05 	bl	801617c <rcl_service_is_valid>
 8017d72:	b120      	cbz	r0, 8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017d74:	6820      	ldr	r0, [r4, #0]
 8017d76:	3004      	adds	r0, #4
 8017d78:	f7fe fa00 	bl	801617c <rcl_service_is_valid>
 8017d7c:	b910      	cbnz	r0, 8017d84 <rcl_action_wait_set_add_action_server+0x28>
 8017d7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d82:	bd70      	pop	{r4, r5, r6, pc}
 8017d84:	6820      	ldr	r0, [r4, #0]
 8017d86:	3008      	adds	r0, #8
 8017d88:	f7fe f9f8 	bl	801617c <rcl_service_is_valid>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d0f6      	beq.n	8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017d90:	6820      	ldr	r0, [r4, #0]
 8017d92:	300c      	adds	r0, #12
 8017d94:	f7f6 f8d4 	bl	800df40 <rcl_publisher_is_valid_except_context>
 8017d98:	2800      	cmp	r0, #0
 8017d9a:	d0f0      	beq.n	8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017d9c:	6820      	ldr	r0, [r4, #0]
 8017d9e:	3010      	adds	r0, #16
 8017da0:	f7f6 f8ce 	bl	800df40 <rcl_publisher_is_valid_except_context>
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d0ea      	beq.n	8017d7e <rcl_action_wait_set_add_action_server+0x22>
 8017da8:	6821      	ldr	r1, [r4, #0]
 8017daa:	4628      	mov	r0, r5
 8017dac:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017db0:	f7ff fad0 	bl	8017354 <rcl_wait_set_add_service>
 8017db4:	2800      	cmp	r0, #0
 8017db6:	d1e4      	bne.n	8017d82 <rcl_action_wait_set_add_action_server+0x26>
 8017db8:	6821      	ldr	r1, [r4, #0]
 8017dba:	4628      	mov	r0, r5
 8017dbc:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017dc0:	3104      	adds	r1, #4
 8017dc2:	f7ff fac7 	bl	8017354 <rcl_wait_set_add_service>
 8017dc6:	2800      	cmp	r0, #0
 8017dc8:	d1db      	bne.n	8017d82 <rcl_action_wait_set_add_action_server+0x26>
 8017dca:	6821      	ldr	r1, [r4, #0]
 8017dcc:	4628      	mov	r0, r5
 8017dce:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017dd2:	3108      	adds	r1, #8
 8017dd4:	f7ff fabe 	bl	8017354 <rcl_wait_set_add_service>
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	d1d2      	bne.n	8017d82 <rcl_action_wait_set_add_action_server+0x26>
 8017ddc:	6821      	ldr	r1, [r4, #0]
 8017dde:	4628      	mov	r0, r5
 8017de0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017de4:	3114      	adds	r1, #20
 8017de6:	f7ff fa59 	bl	801729c <rcl_wait_set_add_timer>
 8017dea:	2800      	cmp	r0, #0
 8017dec:	d1c9      	bne.n	8017d82 <rcl_action_wait_set_add_action_server+0x26>
 8017dee:	2e00      	cmp	r6, #0
 8017df0:	d0c7      	beq.n	8017d82 <rcl_action_wait_set_add_action_server+0x26>
 8017df2:	6823      	ldr	r3, [r4, #0]
 8017df4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017df8:	6033      	str	r3, [r6, #0]
 8017dfa:	bd70      	pop	{r4, r5, r6, pc}
 8017dfc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017e00:	4770      	bx	lr
 8017e02:	bf00      	nop

08017e04 <rcl_action_server_wait_set_get_entities_ready>:
 8017e04:	2800      	cmp	r0, #0
 8017e06:	d067      	beq.n	8017ed8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8017e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e0c:	460c      	mov	r4, r1
 8017e0e:	b161      	cbz	r1, 8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e10:	4605      	mov	r5, r0
 8017e12:	6808      	ldr	r0, [r1, #0]
 8017e14:	b148      	cbz	r0, 8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e16:	4616      	mov	r6, r2
 8017e18:	4698      	mov	r8, r3
 8017e1a:	f7fe f9af 	bl	801617c <rcl_service_is_valid>
 8017e1e:	b120      	cbz	r0, 8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e20:	6820      	ldr	r0, [r4, #0]
 8017e22:	3004      	adds	r0, #4
 8017e24:	f7fe f9aa 	bl	801617c <rcl_service_is_valid>
 8017e28:	b918      	cbnz	r0, 8017e32 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8017e2a:	f640 0098 	movw	r0, #2200	@ 0x898
 8017e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e32:	6820      	ldr	r0, [r4, #0]
 8017e34:	3008      	adds	r0, #8
 8017e36:	f7fe f9a1 	bl	801617c <rcl_service_is_valid>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d0f5      	beq.n	8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e3e:	6820      	ldr	r0, [r4, #0]
 8017e40:	300c      	adds	r0, #12
 8017e42:	f7f6 f87d 	bl	800df40 <rcl_publisher_is_valid_except_context>
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d0ef      	beq.n	8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e4a:	6820      	ldr	r0, [r4, #0]
 8017e4c:	3010      	adds	r0, #16
 8017e4e:	f7f6 f877 	bl	800df40 <rcl_publisher_is_valid_except_context>
 8017e52:	2800      	cmp	r0, #0
 8017e54:	d0e9      	beq.n	8017e2a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017e5a:	2a00      	cmp	r2, #0
 8017e5c:	bf18      	it	ne
 8017e5e:	2b00      	cmpne	r3, #0
 8017e60:	bf0c      	ite	eq
 8017e62:	2101      	moveq	r1, #1
 8017e64:	2100      	movne	r1, #0
 8017e66:	f1b8 0f00 	cmp.w	r8, #0
 8017e6a:	bf08      	it	eq
 8017e6c:	f041 0101 	orreq.w	r1, r1, #1
 8017e70:	bba9      	cbnz	r1, 8017ede <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017e72:	b3a6      	cbz	r6, 8017ede <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017e74:	6821      	ldr	r1, [r4, #0]
 8017e76:	2000      	movs	r0, #0
 8017e78:	692c      	ldr	r4, [r5, #16]
 8017e7a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8017e7e:	6a2f      	ldr	r7, [r5, #32]
 8017e80:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e84:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8017e88:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017e8c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8017e90:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8017e94:	1a64      	subs	r4, r4, r1
 8017e96:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8017e9a:	fab4 f484 	clz	r4, r4
 8017e9e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017ea2:	0964      	lsrs	r4, r4, #5
 8017ea4:	7034      	strb	r4, [r6, #0]
 8017ea6:	1d0c      	adds	r4, r1, #4
 8017ea8:	1b2c      	subs	r4, r5, r4
 8017eaa:	fab4 f484 	clz	r4, r4
 8017eae:	0964      	lsrs	r4, r4, #5
 8017eb0:	f888 4000 	strb.w	r4, [r8]
 8017eb4:	f101 0408 	add.w	r4, r1, #8
 8017eb8:	1b1b      	subs	r3, r3, r4
 8017eba:	9c06      	ldr	r4, [sp, #24]
 8017ebc:	fab3 f383 	clz	r3, r3
 8017ec0:	095b      	lsrs	r3, r3, #5
 8017ec2:	7023      	strb	r3, [r4, #0]
 8017ec4:	f101 0314 	add.w	r3, r1, #20
 8017ec8:	1ad3      	subs	r3, r2, r3
 8017eca:	9a07      	ldr	r2, [sp, #28]
 8017ecc:	fab3 f383 	clz	r3, r3
 8017ed0:	095b      	lsrs	r3, r3, #5
 8017ed2:	7013      	strb	r3, [r2, #0]
 8017ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017edc:	4770      	bx	lr
 8017ede:	200b      	movs	r0, #11
 8017ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ee4 <_execute_event_handler>:
 8017ee4:	2002      	movs	r0, #2
 8017ee6:	4770      	bx	lr

08017ee8 <_cancel_goal_event_handler>:
 8017ee8:	2003      	movs	r0, #3
 8017eea:	4770      	bx	lr

08017eec <_succeed_event_handler>:
 8017eec:	2004      	movs	r0, #4
 8017eee:	4770      	bx	lr

08017ef0 <_abort_event_handler>:
 8017ef0:	2006      	movs	r0, #6
 8017ef2:	4770      	bx	lr

08017ef4 <_canceled_event_handler>:
 8017ef4:	2005      	movs	r0, #5
 8017ef6:	4770      	bx	lr

08017ef8 <rcl_action_transition_goal_state>:
 8017ef8:	b2c2      	uxtb	r2, r0
 8017efa:	2a06      	cmp	r2, #6
 8017efc:	d810      	bhi.n	8017f20 <rcl_action_transition_goal_state+0x28>
 8017efe:	2904      	cmp	r1, #4
 8017f00:	d80e      	bhi.n	8017f20 <rcl_action_transition_goal_state+0x28>
 8017f02:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017f06:	b410      	push	{r4}
 8017f08:	1853      	adds	r3, r2, r1
 8017f0a:	4c06      	ldr	r4, [pc, #24]	@ (8017f24 <rcl_action_transition_goal_state+0x2c>)
 8017f0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017f10:	b113      	cbz	r3, 8017f18 <rcl_action_transition_goal_state+0x20>
 8017f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f16:	4718      	bx	r3
 8017f18:	2000      	movs	r0, #0
 8017f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f1e:	4770      	bx	lr
 8017f20:	2000      	movs	r0, #0
 8017f22:	4770      	bx	lr
 8017f24:	0801d03c 	.word	0x0801d03c

08017f28 <rcl_action_get_zero_initialized_cancel_response>:
 8017f28:	b510      	push	{r4, lr}
 8017f2a:	4c07      	ldr	r4, [pc, #28]	@ (8017f48 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017f2c:	4686      	mov	lr, r0
 8017f2e:	4684      	mov	ip, r0
 8017f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f3c:	6823      	ldr	r3, [r4, #0]
 8017f3e:	4670      	mov	r0, lr
 8017f40:	f8cc 3000 	str.w	r3, [ip]
 8017f44:	bd10      	pop	{r4, pc}
 8017f46:	bf00      	nop
 8017f48:	0801d0c8 	.word	0x0801d0c8

08017f4c <rclc_action_send_result_request>:
 8017f4c:	b1d0      	cbz	r0, 8017f84 <rclc_action_send_result_request+0x38>
 8017f4e:	4684      	mov	ip, r0
 8017f50:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017f54:	b500      	push	{lr}
 8017f56:	b087      	sub	sp, #28
 8017f58:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017f5c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017f60:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017f64:	f10d 0e08 	add.w	lr, sp, #8
 8017f68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017f6c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017f70:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8017f74:	a902      	add	r1, sp, #8
 8017f76:	3010      	adds	r0, #16
 8017f78:	f7ff fbca 	bl	8017710 <rcl_action_send_result_request>
 8017f7c:	b920      	cbnz	r0, 8017f88 <rclc_action_send_result_request+0x3c>
 8017f7e:	b007      	add	sp, #28
 8017f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f84:	200b      	movs	r0, #11
 8017f86:	4770      	bx	lr
 8017f88:	9001      	str	r0, [sp, #4]
 8017f8a:	f7f6 ff55 	bl	800ee38 <rcutils_reset_error>
 8017f8e:	9801      	ldr	r0, [sp, #4]
 8017f90:	b007      	add	sp, #28
 8017f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f96:	bf00      	nop

08017f98 <rclc_action_take_goal_handle>:
 8017f98:	b160      	cbz	r0, 8017fb4 <rclc_action_take_goal_handle+0x1c>
 8017f9a:	6883      	ldr	r3, [r0, #8]
 8017f9c:	b143      	cbz	r3, 8017fb0 <rclc_action_take_goal_handle+0x18>
 8017f9e:	6819      	ldr	r1, [r3, #0]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	6081      	str	r1, [r0, #8]
 8017fa4:	721a      	strb	r2, [r3, #8]
 8017fa6:	68c1      	ldr	r1, [r0, #12]
 8017fa8:	621a      	str	r2, [r3, #32]
 8017faa:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017fac:	6019      	str	r1, [r3, #0]
 8017fae:	60c3      	str	r3, [r0, #12]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	4770      	bx	lr
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	e7fb      	b.n	8017fb0 <rclc_action_take_goal_handle+0x18>

08017fb8 <rclc_action_remove_used_goal_handle>:
 8017fb8:	b180      	cbz	r0, 8017fdc <rclc_action_remove_used_goal_handle+0x24>
 8017fba:	b179      	cbz	r1, 8017fdc <rclc_action_remove_used_goal_handle+0x24>
 8017fbc:	68c3      	ldr	r3, [r0, #12]
 8017fbe:	4299      	cmp	r1, r3
 8017fc0:	d00d      	beq.n	8017fde <rclc_action_remove_used_goal_handle+0x26>
 8017fc2:	b12b      	cbz	r3, 8017fd0 <rclc_action_remove_used_goal_handle+0x18>
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	4291      	cmp	r1, r2
 8017fc8:	d003      	beq.n	8017fd2 <rclc_action_remove_used_goal_handle+0x1a>
 8017fca:	4613      	mov	r3, r2
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d1f9      	bne.n	8017fc4 <rclc_action_remove_used_goal_handle+0xc>
 8017fd0:	4770      	bx	lr
 8017fd2:	680a      	ldr	r2, [r1, #0]
 8017fd4:	601a      	str	r2, [r3, #0]
 8017fd6:	6883      	ldr	r3, [r0, #8]
 8017fd8:	600b      	str	r3, [r1, #0]
 8017fda:	6081      	str	r1, [r0, #8]
 8017fdc:	4770      	bx	lr
 8017fde:	680b      	ldr	r3, [r1, #0]
 8017fe0:	60c3      	str	r3, [r0, #12]
 8017fe2:	e7f8      	b.n	8017fd6 <rclc_action_remove_used_goal_handle+0x1e>

08017fe4 <rclc_action_find_goal_handle_by_uuid>:
 8017fe4:	b538      	push	{r3, r4, r5, lr}
 8017fe6:	b181      	cbz	r1, 801800a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017fe8:	b178      	cbz	r0, 801800a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017fea:	68c4      	ldr	r4, [r0, #12]
 8017fec:	460d      	mov	r5, r1
 8017fee:	b914      	cbnz	r4, 8017ff6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017ff0:	e009      	b.n	8018006 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017ff2:	6824      	ldr	r4, [r4, #0]
 8017ff4:	b13c      	cbz	r4, 8018006 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017ff6:	f104 0009 	add.w	r0, r4, #9
 8017ffa:	2210      	movs	r2, #16
 8017ffc:	4629      	mov	r1, r5
 8017ffe:	f003 fd19 	bl	801ba34 <memcmp>
 8018002:	2800      	cmp	r0, #0
 8018004:	d1f5      	bne.n	8017ff2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018006:	4620      	mov	r0, r4
 8018008:	bd38      	pop	{r3, r4, r5, pc}
 801800a:	2400      	movs	r4, #0
 801800c:	4620      	mov	r0, r4
 801800e:	bd38      	pop	{r3, r4, r5, pc}

08018010 <rclc_action_find_first_handle_by_status>:
 8018010:	b140      	cbz	r0, 8018024 <rclc_action_find_first_handle_by_status+0x14>
 8018012:	68c0      	ldr	r0, [r0, #12]
 8018014:	b910      	cbnz	r0, 801801c <rclc_action_find_first_handle_by_status+0xc>
 8018016:	e005      	b.n	8018024 <rclc_action_find_first_handle_by_status+0x14>
 8018018:	6800      	ldr	r0, [r0, #0]
 801801a:	b118      	cbz	r0, 8018024 <rclc_action_find_first_handle_by_status+0x14>
 801801c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018020:	428b      	cmp	r3, r1
 8018022:	d1f9      	bne.n	8018018 <rclc_action_find_first_handle_by_status+0x8>
 8018024:	4770      	bx	lr
 8018026:	bf00      	nop

08018028 <rclc_action_find_first_terminated_handle>:
 8018028:	b140      	cbz	r0, 801803c <rclc_action_find_first_terminated_handle+0x14>
 801802a:	68c0      	ldr	r0, [r0, #12]
 801802c:	b910      	cbnz	r0, 8018034 <rclc_action_find_first_terminated_handle+0xc>
 801802e:	e005      	b.n	801803c <rclc_action_find_first_terminated_handle+0x14>
 8018030:	6800      	ldr	r0, [r0, #0]
 8018032:	b118      	cbz	r0, 801803c <rclc_action_find_first_terminated_handle+0x14>
 8018034:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018038:	2b03      	cmp	r3, #3
 801803a:	ddf9      	ble.n	8018030 <rclc_action_find_first_terminated_handle+0x8>
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop

08018040 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018040:	b170      	cbz	r0, 8018060 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018042:	68c0      	ldr	r0, [r0, #12]
 8018044:	b160      	cbz	r0, 8018060 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018046:	b410      	push	{r4}
 8018048:	e001      	b.n	801804e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801804a:	6800      	ldr	r0, [r0, #0]
 801804c:	b128      	cbz	r0, 801805a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801804e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018052:	4299      	cmp	r1, r3
 8018054:	bf08      	it	eq
 8018056:	4294      	cmpeq	r4, r2
 8018058:	d1f7      	bne.n	801804a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801805a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801805e:	4770      	bx	lr
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop

08018064 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018064:	b170      	cbz	r0, 8018084 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018066:	68c0      	ldr	r0, [r0, #12]
 8018068:	b160      	cbz	r0, 8018084 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801806a:	b410      	push	{r4}
 801806c:	e001      	b.n	8018072 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801806e:	6800      	ldr	r0, [r0, #0]
 8018070:	b128      	cbz	r0, 801807e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018072:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8018076:	4299      	cmp	r1, r3
 8018078:	bf08      	it	eq
 801807a:	4294      	cmpeq	r4, r2
 801807c:	d1f7      	bne.n	801806e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801807e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018082:	4770      	bx	lr
 8018084:	4770      	bx	lr
 8018086:	bf00      	nop

08018088 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018088:	b170      	cbz	r0, 80180a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801808a:	68c0      	ldr	r0, [r0, #12]
 801808c:	b160      	cbz	r0, 80180a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801808e:	b410      	push	{r4}
 8018090:	e001      	b.n	8018096 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018092:	6800      	ldr	r0, [r0, #0]
 8018094:	b128      	cbz	r0, 80180a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018096:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801809a:	4299      	cmp	r1, r3
 801809c:	bf08      	it	eq
 801809e:	4294      	cmpeq	r4, r2
 80180a0:	d1f7      	bne.n	8018092 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80180a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180a6:	4770      	bx	lr
 80180a8:	4770      	bx	lr
 80180aa:	bf00      	nop

080180ac <rclc_action_find_first_handle_with_goal_response>:
 80180ac:	b140      	cbz	r0, 80180c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80180ae:	68c0      	ldr	r0, [r0, #12]
 80180b0:	b910      	cbnz	r0, 80180b8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80180b2:	e005      	b.n	80180c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80180b4:	6800      	ldr	r0, [r0, #0]
 80180b6:	b118      	cbz	r0, 80180c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80180b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d0f9      	beq.n	80180b4 <rclc_action_find_first_handle_with_goal_response+0x8>
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop

080180c4 <rclc_action_find_first_handle_with_result_response>:
 80180c4:	b140      	cbz	r0, 80180d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80180c6:	68c0      	ldr	r0, [r0, #12]
 80180c8:	b910      	cbnz	r0, 80180d0 <rclc_action_find_first_handle_with_result_response+0xc>
 80180ca:	e005      	b.n	80180d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80180cc:	6800      	ldr	r0, [r0, #0]
 80180ce:	b118      	cbz	r0, 80180d8 <rclc_action_find_first_handle_with_result_response+0x14>
 80180d0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d0f9      	beq.n	80180cc <rclc_action_find_first_handle_with_result_response+0x8>
 80180d8:	4770      	bx	lr
 80180da:	bf00      	nop

080180dc <rclc_action_server_response_goal_request>:
 80180dc:	b198      	cbz	r0, 8018106 <rclc_action_server_response_goal_request+0x2a>
 80180de:	2200      	movs	r2, #0
 80180e0:	460b      	mov	r3, r1
 80180e2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80180e6:	b510      	push	{r4, lr}
 80180e8:	6844      	ldr	r4, [r0, #4]
 80180ea:	b086      	sub	sp, #24
 80180ec:	f104 0010 	add.w	r0, r4, #16
 80180f0:	9205      	str	r2, [sp, #20]
 80180f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80180f6:	aa03      	add	r2, sp, #12
 80180f8:	f88d 300c 	strb.w	r3, [sp, #12]
 80180fc:	f7ff fd3e 	bl	8017b7c <rcl_action_send_goal_response>
 8018100:	b918      	cbnz	r0, 801810a <rclc_action_server_response_goal_request+0x2e>
 8018102:	b006      	add	sp, #24
 8018104:	bd10      	pop	{r4, pc}
 8018106:	200b      	movs	r0, #11
 8018108:	4770      	bx	lr
 801810a:	9001      	str	r0, [sp, #4]
 801810c:	f7f6 fe94 	bl	800ee38 <rcutils_reset_error>
 8018110:	9801      	ldr	r0, [sp, #4]
 8018112:	b006      	add	sp, #24
 8018114:	bd10      	pop	{r4, pc}
 8018116:	bf00      	nop

08018118 <rclc_action_server_goal_cancel_accept>:
 8018118:	b310      	cbz	r0, 8018160 <rclc_action_server_goal_cancel_accept+0x48>
 801811a:	b510      	push	{r4, lr}
 801811c:	b090      	sub	sp, #64	@ 0x40
 801811e:	4604      	mov	r4, r0
 8018120:	a806      	add	r0, sp, #24
 8018122:	f7ff ff01 	bl	8017f28 <rcl_action_get_zero_initialized_cancel_response>
 8018126:	2300      	movs	r3, #0
 8018128:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801812c:	46ec      	mov	ip, sp
 801812e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018132:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018136:	f88d 3018 	strb.w	r3, [sp, #24]
 801813a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801813e:	f8cd d01c 	str.w	sp, [sp, #28]
 8018142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018146:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018168 <rclc_action_server_goal_cancel_accept+0x50>
 801814a:	6860      	ldr	r0, [r4, #4]
 801814c:	aa06      	add	r2, sp, #24
 801814e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018152:	3010      	adds	r0, #16
 8018154:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018158:	f7ff fdc8 	bl	8017cec <rcl_action_send_cancel_response>
 801815c:	b010      	add	sp, #64	@ 0x40
 801815e:	bd10      	pop	{r4, pc}
 8018160:	200b      	movs	r0, #11
 8018162:	4770      	bx	lr
 8018164:	f3af 8000 	nop.w
 8018168:	00000001 	.word	0x00000001
 801816c:	00000001 	.word	0x00000001

08018170 <rclc_action_server_goal_cancel_reject>:
 8018170:	b082      	sub	sp, #8
 8018172:	b530      	push	{r4, r5, lr}
 8018174:	b08b      	sub	sp, #44	@ 0x2c
 8018176:	ac0e      	add	r4, sp, #56	@ 0x38
 8018178:	e884 000c 	stmia.w	r4, {r2, r3}
 801817c:	b188      	cbz	r0, 80181a2 <rclc_action_server_goal_cancel_reject+0x32>
 801817e:	4604      	mov	r4, r0
 8018180:	a801      	add	r0, sp, #4
 8018182:	460d      	mov	r5, r1
 8018184:	f7ff fed0 	bl	8017f28 <rcl_action_get_zero_initialized_cancel_response>
 8018188:	aa01      	add	r2, sp, #4
 801818a:	a90e      	add	r1, sp, #56	@ 0x38
 801818c:	f104 0010 	add.w	r0, r4, #16
 8018190:	f88d 5004 	strb.w	r5, [sp, #4]
 8018194:	f7ff fdaa 	bl	8017cec <rcl_action_send_cancel_response>
 8018198:	b00b      	add	sp, #44	@ 0x2c
 801819a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801819e:	b002      	add	sp, #8
 80181a0:	4770      	bx	lr
 80181a2:	200b      	movs	r0, #11
 80181a4:	b00b      	add	sp, #44	@ 0x2c
 80181a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181aa:	b002      	add	sp, #8
 80181ac:	4770      	bx	lr
 80181ae:	bf00      	nop

080181b0 <__atomic_load_8>:
 80181b0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80181b4:	4a16      	ldr	r2, [pc, #88]	@ (8018210 <__atomic_load_8+0x60>)
 80181b6:	4b17      	ldr	r3, [pc, #92]	@ (8018214 <__atomic_load_8+0x64>)
 80181b8:	f04f 0c01 	mov.w	ip, #1
 80181bc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80181c0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80181c4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80181c8:	fb02 f101 	mul.w	r1, r2, r1
 80181cc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80181d0:	fba3 2301 	umull	r2, r3, r3, r1
 80181d4:	091b      	lsrs	r3, r3, #4
 80181d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80181da:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80181de:	b4d0      	push	{r4, r6, r7}
 80181e0:	1ac9      	subs	r1, r1, r3
 80181e2:	4c0d      	ldr	r4, [pc, #52]	@ (8018218 <__atomic_load_8+0x68>)
 80181e4:	1862      	adds	r2, r4, r1
 80181e6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80181ea:	e8c2 cf46 	strexb	r6, ip, [r2]
 80181ee:	2e00      	cmp	r6, #0
 80181f0:	d1f9      	bne.n	80181e6 <__atomic_load_8+0x36>
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	f3bf 8f5b 	dmb	ish
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d1f4      	bne.n	80181e6 <__atomic_load_8+0x36>
 80181fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018200:	f3bf 8f5b 	dmb	ish
 8018204:	5463      	strb	r3, [r4, r1]
 8018206:	4630      	mov	r0, r6
 8018208:	4639      	mov	r1, r7
 801820a:	bcd0      	pop	{r4, r6, r7}
 801820c:	4770      	bx	lr
 801820e:	bf00      	nop
 8018210:	27d4eb2d 	.word	0x27d4eb2d
 8018214:	b21642c9 	.word	0xb21642c9
 8018218:	24012d9c 	.word	0x24012d9c

0801821c <__atomic_store_8>:
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018222:	4916      	ldr	r1, [pc, #88]	@ (801827c <__atomic_store_8+0x60>)
 8018224:	4c16      	ldr	r4, [pc, #88]	@ (8018280 <__atomic_store_8+0x64>)
 8018226:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801822a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801822e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018232:	fb01 fe0e 	mul.w	lr, r1, lr
 8018236:	4913      	ldr	r1, [pc, #76]	@ (8018284 <__atomic_store_8+0x68>)
 8018238:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801823c:	fba1 510e 	umull	r5, r1, r1, lr
 8018240:	f04f 0501 	mov.w	r5, #1
 8018244:	0909      	lsrs	r1, r1, #4
 8018246:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801824a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801824e:	ebae 0e01 	sub.w	lr, lr, r1
 8018252:	eb04 0c0e 	add.w	ip, r4, lr
 8018256:	e8dc 1f4f 	ldrexb	r1, [ip]
 801825a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801825e:	2e00      	cmp	r6, #0
 8018260:	d1f9      	bne.n	8018256 <__atomic_store_8+0x3a>
 8018262:	b2c9      	uxtb	r1, r1
 8018264:	f3bf 8f5b 	dmb	ish
 8018268:	2900      	cmp	r1, #0
 801826a:	d1f4      	bne.n	8018256 <__atomic_store_8+0x3a>
 801826c:	e9c0 2300 	strd	r2, r3, [r0]
 8018270:	f3bf 8f5b 	dmb	ish
 8018274:	f804 100e 	strb.w	r1, [r4, lr]
 8018278:	bd70      	pop	{r4, r5, r6, pc}
 801827a:	bf00      	nop
 801827c:	27d4eb2d 	.word	0x27d4eb2d
 8018280:	24012d9c 	.word	0x24012d9c
 8018284:	b21642c9 	.word	0xb21642c9

08018288 <__atomic_exchange_8>:
 8018288:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801828c:	4917      	ldr	r1, [pc, #92]	@ (80182ec <__atomic_exchange_8+0x64>)
 801828e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018292:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018296:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801829a:	fb01 fc0c 	mul.w	ip, r1, ip
 801829e:	4914      	ldr	r1, [pc, #80]	@ (80182f0 <__atomic_exchange_8+0x68>)
 80182a0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80182a4:	b570      	push	{r4, r5, r6, lr}
 80182a6:	4686      	mov	lr, r0
 80182a8:	fba1 010c 	umull	r0, r1, r1, ip
 80182ac:	4d11      	ldr	r5, [pc, #68]	@ (80182f4 <__atomic_exchange_8+0x6c>)
 80182ae:	f04f 0001 	mov.w	r0, #1
 80182b2:	0909      	lsrs	r1, r1, #4
 80182b4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80182b8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80182bc:	ebac 0c01 	sub.w	ip, ip, r1
 80182c0:	eb05 010c 	add.w	r1, r5, ip
 80182c4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80182c8:	e8c1 0f46 	strexb	r6, r0, [r1]
 80182cc:	2e00      	cmp	r6, #0
 80182ce:	d1f9      	bne.n	80182c4 <__atomic_exchange_8+0x3c>
 80182d0:	b2e4      	uxtb	r4, r4
 80182d2:	f3bf 8f5b 	dmb	ish
 80182d6:	2c00      	cmp	r4, #0
 80182d8:	d1f4      	bne.n	80182c4 <__atomic_exchange_8+0x3c>
 80182da:	e9de 0100 	ldrd	r0, r1, [lr]
 80182de:	e9ce 2300 	strd	r2, r3, [lr]
 80182e2:	f3bf 8f5b 	dmb	ish
 80182e6:	f805 400c 	strb.w	r4, [r5, ip]
 80182ea:	bd70      	pop	{r4, r5, r6, pc}
 80182ec:	27d4eb2d 	.word	0x27d4eb2d
 80182f0:	b21642c9 	.word	0xb21642c9
 80182f4:	24012d9c 	.word	0x24012d9c

080182f8 <rcutils_get_env>:
 80182f8:	b168      	cbz	r0, 8018316 <rcutils_get_env+0x1e>
 80182fa:	b510      	push	{r4, lr}
 80182fc:	460c      	mov	r4, r1
 80182fe:	b129      	cbz	r1, 801830c <rcutils_get_env+0x14>
 8018300:	f002 ff06 	bl	801b110 <getenv>
 8018304:	b120      	cbz	r0, 8018310 <rcutils_get_env+0x18>
 8018306:	6020      	str	r0, [r4, #0]
 8018308:	2000      	movs	r0, #0
 801830a:	bd10      	pop	{r4, pc}
 801830c:	4803      	ldr	r0, [pc, #12]	@ (801831c <rcutils_get_env+0x24>)
 801830e:	bd10      	pop	{r4, pc}
 8018310:	4b03      	ldr	r3, [pc, #12]	@ (8018320 <rcutils_get_env+0x28>)
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	bd10      	pop	{r4, pc}
 8018316:	4803      	ldr	r0, [pc, #12]	@ (8018324 <rcutils_get_env+0x2c>)
 8018318:	4770      	bx	lr
 801831a:	bf00      	nop
 801831c:	0801d108 	.word	0x0801d108
 8018320:	0801d540 	.word	0x0801d540
 8018324:	0801d0ec 	.word	0x0801d0ec

08018328 <rcutils_is_directory>:
 8018328:	2000      	movs	r0, #0
 801832a:	4770      	bx	lr

0801832c <rcutils_join_path>:
 801832c:	b082      	sub	sp, #8
 801832e:	2000      	movs	r0, #0
 8018330:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018334:	b002      	add	sp, #8
 8018336:	4770      	bx	lr

08018338 <rcutils_to_native_path>:
 8018338:	b084      	sub	sp, #16
 801833a:	2000      	movs	r0, #0
 801833c:	f10d 0c04 	add.w	ip, sp, #4
 8018340:	b004      	add	sp, #16
 8018342:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018346:	4770      	bx	lr

08018348 <rcutils_format_string_limit>:
 8018348:	b40f      	push	{r0, r1, r2, r3}
 801834a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834c:	b083      	sub	sp, #12
 801834e:	ac08      	add	r4, sp, #32
 8018350:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018356:	b326      	cbz	r6, 80183a2 <rcutils_format_string_limit+0x5a>
 8018358:	a808      	add	r0, sp, #32
 801835a:	f7f6 fd49 	bl	800edf0 <rcutils_allocator_is_valid>
 801835e:	b300      	cbz	r0, 80183a2 <rcutils_format_string_limit+0x5a>
 8018360:	2100      	movs	r1, #0
 8018362:	ab0f      	add	r3, sp, #60	@ 0x3c
 8018364:	4632      	mov	r2, r6
 8018366:	4608      	mov	r0, r1
 8018368:	e9cd 3300 	strd	r3, r3, [sp]
 801836c:	f000 f906 	bl	801857c <rcutils_vsnprintf>
 8018370:	1c43      	adds	r3, r0, #1
 8018372:	4605      	mov	r5, r0
 8018374:	d015      	beq.n	80183a2 <rcutils_format_string_limit+0x5a>
 8018376:	1c47      	adds	r7, r0, #1
 8018378:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801837a:	429f      	cmp	r7, r3
 801837c:	d901      	bls.n	8018382 <rcutils_format_string_limit+0x3a>
 801837e:	1e5d      	subs	r5, r3, #1
 8018380:	461f      	mov	r7, r3
 8018382:	9b08      	ldr	r3, [sp, #32]
 8018384:	4638      	mov	r0, r7
 8018386:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018388:	4798      	blx	r3
 801838a:	4604      	mov	r4, r0
 801838c:	b148      	cbz	r0, 80183a2 <rcutils_format_string_limit+0x5a>
 801838e:	4632      	mov	r2, r6
 8018390:	4639      	mov	r1, r7
 8018392:	9b01      	ldr	r3, [sp, #4]
 8018394:	f000 f8f2 	bl	801857c <rcutils_vsnprintf>
 8018398:	2800      	cmp	r0, #0
 801839a:	db09      	blt.n	80183b0 <rcutils_format_string_limit+0x68>
 801839c:	2300      	movs	r3, #0
 801839e:	5563      	strb	r3, [r4, r5]
 80183a0:	e000      	b.n	80183a4 <rcutils_format_string_limit+0x5c>
 80183a2:	2400      	movs	r4, #0
 80183a4:	4620      	mov	r0, r4
 80183a6:	b003      	add	sp, #12
 80183a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183ac:	b004      	add	sp, #16
 80183ae:	4770      	bx	lr
 80183b0:	4620      	mov	r0, r4
 80183b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80183b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80183b6:	2400      	movs	r4, #0
 80183b8:	4798      	blx	r3
 80183ba:	e7f3      	b.n	80183a4 <rcutils_format_string_limit+0x5c>

080183bc <rcutils_repl_str>:
 80183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c0:	ed2d 8b02 	vpush	{d8}
 80183c4:	b087      	sub	sp, #28
 80183c6:	2600      	movs	r6, #0
 80183c8:	4680      	mov	r8, r0
 80183ca:	468a      	mov	sl, r1
 80183cc:	9000      	str	r0, [sp, #0]
 80183ce:	4608      	mov	r0, r1
 80183d0:	ee08 2a10 	vmov	s16, r2
 80183d4:	4699      	mov	r9, r3
 80183d6:	2510      	movs	r5, #16
 80183d8:	f7e7 ff8c 	bl	80002f4 <strlen>
 80183dc:	4637      	mov	r7, r6
 80183de:	46b3      	mov	fp, r6
 80183e0:	9001      	str	r0, [sp, #4]
 80183e2:	e01e      	b.n	8018422 <rcutils_repl_str+0x66>
 80183e4:	f10b 0b01 	add.w	fp, fp, #1
 80183e8:	9b01      	ldr	r3, [sp, #4]
 80183ea:	455e      	cmp	r6, fp
 80183ec:	eb04 0803 	add.w	r8, r4, r3
 80183f0:	d211      	bcs.n	8018416 <rcutils_repl_str+0x5a>
 80183f2:	442e      	add	r6, r5
 80183f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80183f8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80183fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018400:	00b1      	lsls	r1, r6, #2
 8018402:	4798      	blx	r3
 8018404:	2800      	cmp	r0, #0
 8018406:	f000 8088 	beq.w	801851a <rcutils_repl_str+0x15e>
 801840a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801840e:	4607      	mov	r7, r0
 8018410:	bf28      	it	cs
 8018412:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8018416:	9a00      	ldr	r2, [sp, #0]
 8018418:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801841c:	1aa4      	subs	r4, r4, r2
 801841e:	f843 4c04 	str.w	r4, [r3, #-4]
 8018422:	4651      	mov	r1, sl
 8018424:	4640      	mov	r0, r8
 8018426:	f003 fb56 	bl	801bad6 <strstr>
 801842a:	4604      	mov	r4, r0
 801842c:	4638      	mov	r0, r7
 801842e:	2c00      	cmp	r4, #0
 8018430:	d1d8      	bne.n	80183e4 <rcutils_repl_str+0x28>
 8018432:	4640      	mov	r0, r8
 8018434:	f7e7 ff5e 	bl	80002f4 <strlen>
 8018438:	9b00      	ldr	r3, [sp, #0]
 801843a:	eba8 0803 	sub.w	r8, r8, r3
 801843e:	eb08 0400 	add.w	r4, r8, r0
 8018442:	9402      	str	r4, [sp, #8]
 8018444:	f1bb 0f00 	cmp.w	fp, #0
 8018448:	d045      	beq.n	80184d6 <rcutils_repl_str+0x11a>
 801844a:	ee18 0a10 	vmov	r0, s16
 801844e:	f7e7 ff51 	bl	80002f4 <strlen>
 8018452:	9a01      	ldr	r2, [sp, #4]
 8018454:	4606      	mov	r6, r0
 8018456:	f8d9 3000 	ldr.w	r3, [r9]
 801845a:	1a82      	subs	r2, r0, r2
 801845c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018460:	fb0b 4202 	mla	r2, fp, r2, r4
 8018464:	1c50      	adds	r0, r2, #1
 8018466:	9205      	str	r2, [sp, #20]
 8018468:	4798      	blx	r3
 801846a:	4682      	mov	sl, r0
 801846c:	2800      	cmp	r0, #0
 801846e:	d054      	beq.n	801851a <rcutils_repl_str+0x15e>
 8018470:	683a      	ldr	r2, [r7, #0]
 8018472:	463d      	mov	r5, r7
 8018474:	9900      	ldr	r1, [sp, #0]
 8018476:	2401      	movs	r4, #1
 8018478:	f003 fbcf 	bl	801bc1a <memcpy>
 801847c:	683b      	ldr	r3, [r7, #0]
 801847e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018482:	eb0a 0803 	add.w	r8, sl, r3
 8018486:	ee18 7a10 	vmov	r7, s16
 801848a:	f8dd a000 	ldr.w	sl, [sp]
 801848e:	f8cd 9000 	str.w	r9, [sp]
 8018492:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018496:	4632      	mov	r2, r6
 8018498:	4639      	mov	r1, r7
 801849a:	4640      	mov	r0, r8
 801849c:	44b0      	add	r8, r6
 801849e:	f003 fbbc 	bl	801bc1a <memcpy>
 80184a2:	f855 2b04 	ldr.w	r2, [r5], #4
 80184a6:	45a3      	cmp	fp, r4
 80184a8:	444a      	add	r2, r9
 80184aa:	eb0a 0102 	add.w	r1, sl, r2
 80184ae:	d02a      	beq.n	8018506 <rcutils_repl_str+0x14a>
 80184b0:	6828      	ldr	r0, [r5, #0]
 80184b2:	1a82      	subs	r2, r0, r2
 80184b4:	4640      	mov	r0, r8
 80184b6:	4490      	add	r8, r2
 80184b8:	f003 fbaf 	bl	801bc1a <memcpy>
 80184bc:	1c62      	adds	r2, r4, #1
 80184be:	45a3      	cmp	fp, r4
 80184c0:	4614      	mov	r4, r2
 80184c2:	d8e8      	bhi.n	8018496 <rcutils_repl_str+0xda>
 80184c4:	f8dd 9000 	ldr.w	r9, [sp]
 80184c8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80184cc:	2300      	movs	r3, #0
 80184ce:	9a05      	ldr	r2, [sp, #20]
 80184d0:	f80a 3002 	strb.w	r3, [sl, r2]
 80184d4:	e00b      	b.n	80184ee <rcutils_repl_str+0x132>
 80184d6:	4620      	mov	r0, r4
 80184d8:	f8d9 3000 	ldr.w	r3, [r9]
 80184dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80184e0:	3001      	adds	r0, #1
 80184e2:	4798      	blx	r3
 80184e4:	4682      	mov	sl, r0
 80184e6:	b110      	cbz	r0, 80184ee <rcutils_repl_str+0x132>
 80184e8:	9900      	ldr	r1, [sp, #0]
 80184ea:	f003 fb8e 	bl	801bc0a <strcpy>
 80184ee:	4638      	mov	r0, r7
 80184f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80184f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80184f8:	4798      	blx	r3
 80184fa:	4650      	mov	r0, sl
 80184fc:	b007      	add	sp, #28
 80184fe:	ecbd 8b02 	vpop	{d8}
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018506:	9b02      	ldr	r3, [sp, #8]
 8018508:	4640      	mov	r0, r8
 801850a:	f8dd 9000 	ldr.w	r9, [sp]
 801850e:	1a9a      	subs	r2, r3, r2
 8018510:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018514:	f003 fb81 	bl	801bc1a <memcpy>
 8018518:	e7d8      	b.n	80184cc <rcutils_repl_str+0x110>
 801851a:	f04f 0a00 	mov.w	sl, #0
 801851e:	e7e6      	b.n	80184ee <rcutils_repl_str+0x132>

08018520 <rcutils_snprintf>:
 8018520:	b40c      	push	{r2, r3}
 8018522:	b530      	push	{r4, r5, lr}
 8018524:	b083      	sub	sp, #12
 8018526:	ab06      	add	r3, sp, #24
 8018528:	f853 2b04 	ldr.w	r2, [r3], #4
 801852c:	9301      	str	r3, [sp, #4]
 801852e:	b1e2      	cbz	r2, 801856a <rcutils_snprintf+0x4a>
 8018530:	fab0 f480 	clz	r4, r0
 8018534:	fab1 f581 	clz	r5, r1
 8018538:	ea50 0c01 	orrs.w	ip, r0, r1
 801853c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018540:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018544:	d008      	beq.n	8018558 <rcutils_snprintf+0x38>
 8018546:	b984      	cbnz	r4, 801856a <rcutils_snprintf+0x4a>
 8018548:	b97d      	cbnz	r5, 801856a <rcutils_snprintf+0x4a>
 801854a:	f003 f9d1 	bl	801b8f0 <vsniprintf>
 801854e:	b003      	add	sp, #12
 8018550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018554:	b002      	add	sp, #8
 8018556:	4770      	bx	lr
 8018558:	4661      	mov	r1, ip
 801855a:	4660      	mov	r0, ip
 801855c:	f003 f9c8 	bl	801b8f0 <vsniprintf>
 8018560:	b003      	add	sp, #12
 8018562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018566:	b002      	add	sp, #8
 8018568:	4770      	bx	lr
 801856a:	f003 fb21 	bl	801bbb0 <__errno>
 801856e:	2216      	movs	r2, #22
 8018570:	4603      	mov	r3, r0
 8018572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018576:	601a      	str	r2, [r3, #0]
 8018578:	e7e9      	b.n	801854e <rcutils_snprintf+0x2e>
 801857a:	bf00      	nop

0801857c <rcutils_vsnprintf>:
 801857c:	b570      	push	{r4, r5, r6, lr}
 801857e:	b1b2      	cbz	r2, 80185ae <rcutils_vsnprintf+0x32>
 8018580:	fab0 f480 	clz	r4, r0
 8018584:	fab1 f581 	clz	r5, r1
 8018588:	ea50 0c01 	orrs.w	ip, r0, r1
 801858c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018590:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018594:	d005      	beq.n	80185a2 <rcutils_vsnprintf+0x26>
 8018596:	b954      	cbnz	r4, 80185ae <rcutils_vsnprintf+0x32>
 8018598:	b94d      	cbnz	r5, 80185ae <rcutils_vsnprintf+0x32>
 801859a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801859e:	f003 b9a7 	b.w	801b8f0 <vsniprintf>
 80185a2:	4661      	mov	r1, ip
 80185a4:	4660      	mov	r0, ip
 80185a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185aa:	f003 b9a1 	b.w	801b8f0 <vsniprintf>
 80185ae:	f003 faff 	bl	801bbb0 <__errno>
 80185b2:	2316      	movs	r3, #22
 80185b4:	6003      	str	r3, [r0, #0]
 80185b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80185ba:	bd70      	pop	{r4, r5, r6, pc}

080185bc <rcutils_strdup>:
 80185bc:	b084      	sub	sp, #16
 80185be:	b570      	push	{r4, r5, r6, lr}
 80185c0:	b082      	sub	sp, #8
 80185c2:	4605      	mov	r5, r0
 80185c4:	ac07      	add	r4, sp, #28
 80185c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80185ca:	b1b0      	cbz	r0, 80185fa <rcutils_strdup+0x3e>
 80185cc:	f7e7 fe92 	bl	80002f4 <strlen>
 80185d0:	1c42      	adds	r2, r0, #1
 80185d2:	9b07      	ldr	r3, [sp, #28]
 80185d4:	4606      	mov	r6, r0
 80185d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185d8:	4610      	mov	r0, r2
 80185da:	9201      	str	r2, [sp, #4]
 80185dc:	4798      	blx	r3
 80185de:	4604      	mov	r4, r0
 80185e0:	b128      	cbz	r0, 80185ee <rcutils_strdup+0x32>
 80185e2:	9a01      	ldr	r2, [sp, #4]
 80185e4:	4629      	mov	r1, r5
 80185e6:	f003 fb18 	bl	801bc1a <memcpy>
 80185ea:	2300      	movs	r3, #0
 80185ec:	55a3      	strb	r3, [r4, r6]
 80185ee:	4620      	mov	r0, r4
 80185f0:	b002      	add	sp, #8
 80185f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185f6:	b004      	add	sp, #16
 80185f8:	4770      	bx	lr
 80185fa:	4604      	mov	r4, r0
 80185fc:	e7f7      	b.n	80185ee <rcutils_strdup+0x32>
 80185fe:	bf00      	nop

08018600 <rcutils_strndup>:
 8018600:	b082      	sub	sp, #8
 8018602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018604:	ac06      	add	r4, sp, #24
 8018606:	4605      	mov	r5, r0
 8018608:	e884 000c 	stmia.w	r4, {r2, r3}
 801860c:	b188      	cbz	r0, 8018632 <rcutils_strndup+0x32>
 801860e:	1c4f      	adds	r7, r1, #1
 8018610:	460e      	mov	r6, r1
 8018612:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018614:	4638      	mov	r0, r7
 8018616:	4790      	blx	r2
 8018618:	4604      	mov	r4, r0
 801861a:	b128      	cbz	r0, 8018628 <rcutils_strndup+0x28>
 801861c:	463a      	mov	r2, r7
 801861e:	4629      	mov	r1, r5
 8018620:	f003 fafb 	bl	801bc1a <memcpy>
 8018624:	2300      	movs	r3, #0
 8018626:	55a3      	strb	r3, [r4, r6]
 8018628:	4620      	mov	r0, r4
 801862a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801862e:	b002      	add	sp, #8
 8018630:	4770      	bx	lr
 8018632:	4604      	mov	r4, r0
 8018634:	e7f8      	b.n	8018628 <rcutils_strndup+0x28>
 8018636:	bf00      	nop

08018638 <rcutils_get_zero_initialized_string_map>:
 8018638:	2000      	movs	r0, #0
 801863a:	4b01      	ldr	r3, [pc, #4]	@ (8018640 <rcutils_get_zero_initialized_string_map+0x8>)
 801863c:	6018      	str	r0, [r3, #0]
 801863e:	4770      	bx	lr
 8018640:	24012db4 	.word	0x24012db4

08018644 <rcutils_string_map_reserve>:
 8018644:	2800      	cmp	r0, #0
 8018646:	d05e      	beq.n	8018706 <rcutils_string_map_reserve+0xc2>
 8018648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801864c:	460c      	mov	r4, r1
 801864e:	6801      	ldr	r1, [r0, #0]
 8018650:	b082      	sub	sp, #8
 8018652:	4605      	mov	r5, r0
 8018654:	b129      	cbz	r1, 8018662 <rcutils_string_map_reserve+0x1e>
 8018656:	68cb      	ldr	r3, [r1, #12]
 8018658:	42a3      	cmp	r3, r4
 801865a:	d906      	bls.n	801866a <rcutils_string_map_reserve+0x26>
 801865c:	461c      	mov	r4, r3
 801865e:	2900      	cmp	r1, #0
 8018660:	d1f9      	bne.n	8018656 <rcutils_string_map_reserve+0x12>
 8018662:	201f      	movs	r0, #31
 8018664:	b002      	add	sp, #8
 8018666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801866a:	688b      	ldr	r3, [r1, #8]
 801866c:	42a3      	cmp	r3, r4
 801866e:	d046      	beq.n	80186fe <rcutils_string_map_reserve+0xba>
 8018670:	6a0e      	ldr	r6, [r1, #32]
 8018672:	2c00      	cmp	r4, #0
 8018674:	d033      	beq.n	80186de <rcutils_string_map_reserve+0x9a>
 8018676:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801867a:	d242      	bcs.n	8018702 <rcutils_string_map_reserve+0xbe>
 801867c:	00a7      	lsls	r7, r4, #2
 801867e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018682:	6808      	ldr	r0, [r1, #0]
 8018684:	4632      	mov	r2, r6
 8018686:	4639      	mov	r1, r7
 8018688:	47c0      	blx	r8
 801868a:	2800      	cmp	r0, #0
 801868c:	d039      	beq.n	8018702 <rcutils_string_map_reserve+0xbe>
 801868e:	682b      	ldr	r3, [r5, #0]
 8018690:	4632      	mov	r2, r6
 8018692:	4639      	mov	r1, r7
 8018694:	6018      	str	r0, [r3, #0]
 8018696:	6858      	ldr	r0, [r3, #4]
 8018698:	47c0      	blx	r8
 801869a:	2800      	cmp	r0, #0
 801869c:	d031      	beq.n	8018702 <rcutils_string_map_reserve+0xbe>
 801869e:	682d      	ldr	r5, [r5, #0]
 80186a0:	68ab      	ldr	r3, [r5, #8]
 80186a2:	6068      	str	r0, [r5, #4]
 80186a4:	42a3      	cmp	r3, r4
 80186a6:	d225      	bcs.n	80186f4 <rcutils_string_map_reserve+0xb0>
 80186a8:	682a      	ldr	r2, [r5, #0]
 80186aa:	eb00 0c07 	add.w	ip, r0, r7
 80186ae:	0099      	lsls	r1, r3, #2
 80186b0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80186b4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80186b8:	45e6      	cmp	lr, ip
 80186ba:	d203      	bcs.n	80186c4 <rcutils_string_map_reserve+0x80>
 80186bc:	eb02 0c07 	add.w	ip, r2, r7
 80186c0:	4566      	cmp	r6, ip
 80186c2:	d322      	bcc.n	801870a <rcutils_string_map_reserve+0xc6>
 80186c4:	1ae3      	subs	r3, r4, r3
 80186c6:	4670      	mov	r0, lr
 80186c8:	2100      	movs	r1, #0
 80186ca:	009a      	lsls	r2, r3, #2
 80186cc:	9201      	str	r2, [sp, #4]
 80186ce:	f003 f9db 	bl	801ba88 <memset>
 80186d2:	9a01      	ldr	r2, [sp, #4]
 80186d4:	2100      	movs	r1, #0
 80186d6:	4630      	mov	r0, r6
 80186d8:	f003 f9d6 	bl	801ba88 <memset>
 80186dc:	e00a      	b.n	80186f4 <rcutils_string_map_reserve+0xb0>
 80186de:	694f      	ldr	r7, [r1, #20]
 80186e0:	6808      	ldr	r0, [r1, #0]
 80186e2:	4631      	mov	r1, r6
 80186e4:	47b8      	blx	r7
 80186e6:	682b      	ldr	r3, [r5, #0]
 80186e8:	4631      	mov	r1, r6
 80186ea:	6858      	ldr	r0, [r3, #4]
 80186ec:	601c      	str	r4, [r3, #0]
 80186ee:	47b8      	blx	r7
 80186f0:	682d      	ldr	r5, [r5, #0]
 80186f2:	606c      	str	r4, [r5, #4]
 80186f4:	2000      	movs	r0, #0
 80186f6:	60ac      	str	r4, [r5, #8]
 80186f8:	b002      	add	sp, #8
 80186fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186fe:	2000      	movs	r0, #0
 8018700:	e7b0      	b.n	8018664 <rcutils_string_map_reserve+0x20>
 8018702:	200a      	movs	r0, #10
 8018704:	e7ae      	b.n	8018664 <rcutils_string_map_reserve+0x20>
 8018706:	200b      	movs	r0, #11
 8018708:	4770      	bx	lr
 801870a:	1f0b      	subs	r3, r1, #4
 801870c:	4418      	add	r0, r3
 801870e:	4413      	add	r3, r2
 8018710:	3a04      	subs	r2, #4
 8018712:	4417      	add	r7, r2
 8018714:	2200      	movs	r2, #0
 8018716:	f843 2f04 	str.w	r2, [r3, #4]!
 801871a:	42bb      	cmp	r3, r7
 801871c:	f840 2f04 	str.w	r2, [r0, #4]!
 8018720:	d1f9      	bne.n	8018716 <rcutils_string_map_reserve+0xd2>
 8018722:	e7e7      	b.n	80186f4 <rcutils_string_map_reserve+0xb0>

08018724 <rcutils_string_map_init>:
 8018724:	b082      	sub	sp, #8
 8018726:	b570      	push	{r4, r5, r6, lr}
 8018728:	ac04      	add	r4, sp, #16
 801872a:	e884 000c 	stmia.w	r4, {r2, r3}
 801872e:	b380      	cbz	r0, 8018792 <rcutils_string_map_init+0x6e>
 8018730:	6806      	ldr	r6, [r0, #0]
 8018732:	4604      	mov	r4, r0
 8018734:	b12e      	cbz	r6, 8018742 <rcutils_string_map_init+0x1e>
 8018736:	251e      	movs	r5, #30
 8018738:	4628      	mov	r0, r5
 801873a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801873e:	b002      	add	sp, #8
 8018740:	4770      	bx	lr
 8018742:	a804      	add	r0, sp, #16
 8018744:	460d      	mov	r5, r1
 8018746:	f7f6 fb53 	bl	800edf0 <rcutils_allocator_is_valid>
 801874a:	b310      	cbz	r0, 8018792 <rcutils_string_map_init+0x6e>
 801874c:	9b04      	ldr	r3, [sp, #16]
 801874e:	2024      	movs	r0, #36	@ 0x24
 8018750:	9908      	ldr	r1, [sp, #32]
 8018752:	4798      	blx	r3
 8018754:	6020      	str	r0, [r4, #0]
 8018756:	b310      	cbz	r0, 801879e <rcutils_string_map_init+0x7a>
 8018758:	f10d 0e10 	add.w	lr, sp, #16
 801875c:	f100 0c10 	add.w	ip, r0, #16
 8018760:	e9c0 6600 	strd	r6, r6, [r0]
 8018764:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018768:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801876c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018770:	f8de 3000 	ldr.w	r3, [lr]
 8018774:	4629      	mov	r1, r5
 8018776:	4620      	mov	r0, r4
 8018778:	f8cc 3000 	str.w	r3, [ip]
 801877c:	f7ff ff62 	bl	8018644 <rcutils_string_map_reserve>
 8018780:	4605      	mov	r5, r0
 8018782:	2800      	cmp	r0, #0
 8018784:	d0d8      	beq.n	8018738 <rcutils_string_map_init+0x14>
 8018786:	9b05      	ldr	r3, [sp, #20]
 8018788:	9908      	ldr	r1, [sp, #32]
 801878a:	6820      	ldr	r0, [r4, #0]
 801878c:	4798      	blx	r3
 801878e:	6026      	str	r6, [r4, #0]
 8018790:	e7d2      	b.n	8018738 <rcutils_string_map_init+0x14>
 8018792:	250b      	movs	r5, #11
 8018794:	4628      	mov	r0, r5
 8018796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801879a:	b002      	add	sp, #8
 801879c:	4770      	bx	lr
 801879e:	250a      	movs	r5, #10
 80187a0:	e7ca      	b.n	8018738 <rcutils_string_map_init+0x14>
 80187a2:	bf00      	nop

080187a4 <rcutils_string_map_fini>:
 80187a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a8:	b082      	sub	sp, #8
 80187aa:	2800      	cmp	r0, #0
 80187ac:	d03a      	beq.n	8018824 <rcutils_string_map_fini+0x80>
 80187ae:	6804      	ldr	r4, [r0, #0]
 80187b0:	4606      	mov	r6, r0
 80187b2:	2c00      	cmp	r4, #0
 80187b4:	d032      	beq.n	801881c <rcutils_string_map_fini+0x78>
 80187b6:	68a3      	ldr	r3, [r4, #8]
 80187b8:	b32b      	cbz	r3, 8018806 <rcutils_string_map_fini+0x62>
 80187ba:	2500      	movs	r5, #0
 80187bc:	6822      	ldr	r2, [r4, #0]
 80187be:	462f      	mov	r7, r5
 80187c0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80187c4:	b1e0      	cbz	r0, 8018800 <rcutils_string_map_fini+0x5c>
 80187c6:	6a21      	ldr	r1, [r4, #32]
 80187c8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80187cc:	9101      	str	r1, [sp, #4]
 80187ce:	47c0      	blx	r8
 80187d0:	9901      	ldr	r1, [sp, #4]
 80187d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80187d6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80187da:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80187de:	47c0      	blx	r8
 80187e0:	68e3      	ldr	r3, [r4, #12]
 80187e2:	6862      	ldr	r2, [r4, #4]
 80187e4:	3b01      	subs	r3, #1
 80187e6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80187ea:	3501      	adds	r5, #1
 80187ec:	60e3      	str	r3, [r4, #12]
 80187ee:	6834      	ldr	r4, [r6, #0]
 80187f0:	68a3      	ldr	r3, [r4, #8]
 80187f2:	429d      	cmp	r5, r3
 80187f4:	d207      	bcs.n	8018806 <rcutils_string_map_fini+0x62>
 80187f6:	6822      	ldr	r2, [r4, #0]
 80187f8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80187fc:	2800      	cmp	r0, #0
 80187fe:	d1e2      	bne.n	80187c6 <rcutils_string_map_fini+0x22>
 8018800:	3501      	adds	r5, #1
 8018802:	429d      	cmp	r5, r3
 8018804:	d3dc      	bcc.n	80187c0 <rcutils_string_map_fini+0x1c>
 8018806:	2100      	movs	r1, #0
 8018808:	4630      	mov	r0, r6
 801880a:	f7ff ff1b 	bl	8018644 <rcutils_string_map_reserve>
 801880e:	4604      	mov	r4, r0
 8018810:	b920      	cbnz	r0, 801881c <rcutils_string_map_fini+0x78>
 8018812:	6830      	ldr	r0, [r6, #0]
 8018814:	6943      	ldr	r3, [r0, #20]
 8018816:	6a01      	ldr	r1, [r0, #32]
 8018818:	4798      	blx	r3
 801881a:	6034      	str	r4, [r6, #0]
 801881c:	4620      	mov	r0, r4
 801881e:	b002      	add	sp, #8
 8018820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018824:	240b      	movs	r4, #11
 8018826:	4620      	mov	r0, r4
 8018828:	b002      	add	sp, #8
 801882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801882e:	bf00      	nop

08018830 <rcutils_string_map_getn>:
 8018830:	b378      	cbz	r0, 8018892 <rcutils_string_map_getn+0x62>
 8018832:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018836:	f8d0 b000 	ldr.w	fp, [r0]
 801883a:	f1bb 0f00 	cmp.w	fp, #0
 801883e:	d01f      	beq.n	8018880 <rcutils_string_map_getn+0x50>
 8018840:	fab1 f481 	clz	r4, r1
 8018844:	4688      	mov	r8, r1
 8018846:	0964      	lsrs	r4, r4, #5
 8018848:	b1d1      	cbz	r1, 8018880 <rcutils_string_map_getn+0x50>
 801884a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801884e:	f8db 6000 	ldr.w	r6, [fp]
 8018852:	b1af      	cbz	r7, 8018880 <rcutils_string_map_getn+0x50>
 8018854:	4691      	mov	r9, r2
 8018856:	3e04      	subs	r6, #4
 8018858:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801885c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018860:	3401      	adds	r4, #1
 8018862:	4628      	mov	r0, r5
 8018864:	b155      	cbz	r5, 801887c <rcutils_string_map_getn+0x4c>
 8018866:	f7e7 fd45 	bl	80002f4 <strlen>
 801886a:	4602      	mov	r2, r0
 801886c:	4629      	mov	r1, r5
 801886e:	4640      	mov	r0, r8
 8018870:	454a      	cmp	r2, r9
 8018872:	bf38      	it	cc
 8018874:	464a      	movcc	r2, r9
 8018876:	f003 f91c 	bl	801bab2 <strncmp>
 801887a:	b120      	cbz	r0, 8018886 <rcutils_string_map_getn+0x56>
 801887c:	42a7      	cmp	r7, r4
 801887e:	d1eb      	bne.n	8018858 <rcutils_string_map_getn+0x28>
 8018880:	2000      	movs	r0, #0
 8018882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018886:	f8db 3004 	ldr.w	r3, [fp, #4]
 801888a:	f853 000a 	ldr.w	r0, [r3, sl]
 801888e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018892:	4770      	bx	lr
 8018894:	0000      	movs	r0, r0
	...

08018898 <rmw_get_zero_initialized_context>:
 8018898:	b510      	push	{r4, lr}
 801889a:	4604      	mov	r4, r0
 801889c:	3010      	adds	r0, #16
 801889e:	f7f6 fb33 	bl	800ef08 <rmw_get_zero_initialized_init_options>
 80188a2:	2300      	movs	r3, #0
 80188a4:	4620      	mov	r0, r4
 80188a6:	60a3      	str	r3, [r4, #8]
 80188a8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80188aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80188ac:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80188b8 <rmw_get_zero_initialized_context+0x20>
 80188b0:	ed84 7b00 	vstr	d7, [r4]
 80188b4:	bd10      	pop	{r4, pc}
 80188b6:	bf00      	nop
	...

080188c0 <rmw_time_equal>:
 80188c0:	b4f0      	push	{r4, r5, r6, r7}
 80188c2:	b084      	sub	sp, #16
 80188c4:	ac04      	add	r4, sp, #16
 80188c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80188ca:	4603      	mov	r3, r0
 80188cc:	4925      	ldr	r1, [pc, #148]	@ (8018964 <rmw_time_equal+0xa4>)
 80188ce:	9d01      	ldr	r5, [sp, #4]
 80188d0:	4610      	mov	r0, r2
 80188d2:	4299      	cmp	r1, r3
 80188d4:	f04f 0202 	mov.w	r2, #2
 80188d8:	9e03      	ldr	r6, [sp, #12]
 80188da:	41aa      	sbcs	r2, r5
 80188dc:	d330      	bcc.n	8018940 <rmw_time_equal+0x80>
 80188de:	4c22      	ldr	r4, [pc, #136]	@ (8018968 <rmw_time_equal+0xa8>)
 80188e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80188e4:	fba3 3204 	umull	r3, r2, r3, r4
 80188e8:	fb04 2205 	mla	r2, r4, r5, r2
 80188ec:	43dd      	mvns	r5, r3
 80188ee:	1a8c      	subs	r4, r1, r2
 80188f0:	4285      	cmp	r5, r0
 80188f2:	41b4      	sbcs	r4, r6
 80188f4:	d332      	bcc.n	801895c <rmw_time_equal+0x9c>
 80188f6:	eb10 0c03 	adds.w	ip, r0, r3
 80188fa:	eb42 0106 	adc.w	r1, r2, r6
 80188fe:	4819      	ldr	r0, [pc, #100]	@ (8018964 <rmw_time_equal+0xa4>)
 8018900:	2202      	movs	r2, #2
 8018902:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018904:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018906:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801890a:	4298      	cmp	r0, r3
 801890c:	41b2      	sbcs	r2, r6
 801890e:	d31c      	bcc.n	801894a <rmw_time_equal+0x8a>
 8018910:	4c15      	ldr	r4, [pc, #84]	@ (8018968 <rmw_time_equal+0xa8>)
 8018912:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018916:	fba3 3204 	umull	r3, r2, r3, r4
 801891a:	fb04 2206 	mla	r2, r4, r6, r2
 801891e:	43de      	mvns	r6, r3
 8018920:	1a84      	subs	r4, r0, r2
 8018922:	42ae      	cmp	r6, r5
 8018924:	41bc      	sbcs	r4, r7
 8018926:	d315      	bcc.n	8018954 <rmw_time_equal+0x94>
 8018928:	195b      	adds	r3, r3, r5
 801892a:	eb42 0207 	adc.w	r2, r2, r7
 801892e:	428a      	cmp	r2, r1
 8018930:	bf08      	it	eq
 8018932:	4563      	cmpeq	r3, ip
 8018934:	bf0c      	ite	eq
 8018936:	2001      	moveq	r0, #1
 8018938:	2000      	movne	r0, #0
 801893a:	b004      	add	sp, #16
 801893c:	bcf0      	pop	{r4, r5, r6, r7}
 801893e:	4770      	bx	lr
 8018940:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018948:	e7d9      	b.n	80188fe <rmw_time_equal+0x3e>
 801894a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801894e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018952:	e7ec      	b.n	801892e <rmw_time_equal+0x6e>
 8018954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018958:	4602      	mov	r2, r0
 801895a:	e7e8      	b.n	801892e <rmw_time_equal+0x6e>
 801895c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018960:	e7cd      	b.n	80188fe <rmw_time_equal+0x3e>
 8018962:	bf00      	nop
 8018964:	25c17d04 	.word	0x25c17d04
 8018968:	3b9aca00 	.word	0x3b9aca00

0801896c <rmw_time_total_nsec>:
 801896c:	b470      	push	{r4, r5, r6}
 801896e:	b085      	sub	sp, #20
 8018970:	ac04      	add	r4, sp, #16
 8018972:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018976:	4603      	mov	r3, r0
 8018978:	4913      	ldr	r1, [pc, #76]	@ (80189c8 <rmw_time_total_nsec+0x5c>)
 801897a:	9d01      	ldr	r5, [sp, #4]
 801897c:	4610      	mov	r0, r2
 801897e:	4299      	cmp	r1, r3
 8018980:	f04f 0202 	mov.w	r2, #2
 8018984:	9e03      	ldr	r6, [sp, #12]
 8018986:	41aa      	sbcs	r2, r5
 8018988:	d311      	bcc.n	80189ae <rmw_time_total_nsec+0x42>
 801898a:	4c10      	ldr	r4, [pc, #64]	@ (80189cc <rmw_time_total_nsec+0x60>)
 801898c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018990:	fba3 3204 	umull	r3, r2, r3, r4
 8018994:	fb04 2205 	mla	r2, r4, r5, r2
 8018998:	43dd      	mvns	r5, r3
 801899a:	1a8c      	subs	r4, r1, r2
 801899c:	4285      	cmp	r5, r0
 801899e:	41b4      	sbcs	r4, r6
 80189a0:	d30c      	bcc.n	80189bc <rmw_time_total_nsec+0x50>
 80189a2:	1818      	adds	r0, r3, r0
 80189a4:	eb42 0106 	adc.w	r1, r2, r6
 80189a8:	b005      	add	sp, #20
 80189aa:	bc70      	pop	{r4, r5, r6}
 80189ac:	4770      	bx	lr
 80189ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80189b6:	b005      	add	sp, #20
 80189b8:	bc70      	pop	{r4, r5, r6}
 80189ba:	4770      	bx	lr
 80189bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189c0:	b005      	add	sp, #20
 80189c2:	bc70      	pop	{r4, r5, r6}
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop
 80189c8:	25c17d04 	.word	0x25c17d04
 80189cc:	3b9aca00 	.word	0x3b9aca00

080189d0 <rmw_get_zero_initialized_message_info>:
 80189d0:	b510      	push	{r4, lr}
 80189d2:	4604      	mov	r4, r0
 80189d4:	2240      	movs	r2, #64	@ 0x40
 80189d6:	2100      	movs	r1, #0
 80189d8:	f003 f856 	bl	801ba88 <memset>
 80189dc:	4620      	mov	r0, r4
 80189de:	bd10      	pop	{r4, pc}

080189e0 <rmw_validate_full_topic_name>:
 80189e0:	2800      	cmp	r0, #0
 80189e2:	d05d      	beq.n	8018aa0 <rmw_validate_full_topic_name+0xc0>
 80189e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e8:	460d      	mov	r5, r1
 80189ea:	2900      	cmp	r1, #0
 80189ec:	d05a      	beq.n	8018aa4 <rmw_validate_full_topic_name+0xc4>
 80189ee:	4604      	mov	r4, r0
 80189f0:	4616      	mov	r6, r2
 80189f2:	f7e7 fc7f 	bl	80002f4 <strlen>
 80189f6:	b150      	cbz	r0, 8018a0e <rmw_validate_full_topic_name+0x2e>
 80189f8:	7823      	ldrb	r3, [r4, #0]
 80189fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80189fc:	d00e      	beq.n	8018a1c <rmw_validate_full_topic_name+0x3c>
 80189fe:	2302      	movs	r3, #2
 8018a00:	602b      	str	r3, [r5, #0]
 8018a02:	b146      	cbz	r6, 8018a16 <rmw_validate_full_topic_name+0x36>
 8018a04:	2300      	movs	r3, #0
 8018a06:	4618      	mov	r0, r3
 8018a08:	6033      	str	r3, [r6, #0]
 8018a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0e:	2301      	movs	r3, #1
 8018a10:	602b      	str	r3, [r5, #0]
 8018a12:	2e00      	cmp	r6, #0
 8018a14:	d1f6      	bne.n	8018a04 <rmw_validate_full_topic_name+0x24>
 8018a16:	2000      	movs	r0, #0
 8018a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a1c:	1e43      	subs	r3, r0, #1
 8018a1e:	5ce2      	ldrb	r2, [r4, r3]
 8018a20:	2a2f      	cmp	r2, #47	@ 0x2f
 8018a22:	d041      	beq.n	8018aa8 <rmw_validate_full_topic_name+0xc8>
 8018a24:	1e62      	subs	r2, r4, #1
 8018a26:	f1c4 0e01 	rsb	lr, r4, #1
 8018a2a:	eb02 0800 	add.w	r8, r2, r0
 8018a2e:	eb0e 0702 	add.w	r7, lr, r2
 8018a32:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018a36:	f023 0120 	bic.w	r1, r3, #32
 8018a3a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8018a3e:	3941      	subs	r1, #65	@ 0x41
 8018a40:	2919      	cmp	r1, #25
 8018a42:	d90f      	bls.n	8018a64 <rmw_validate_full_topic_name+0x84>
 8018a44:	f1bc 0f0a 	cmp.w	ip, #10
 8018a48:	d90c      	bls.n	8018a64 <rmw_validate_full_topic_name+0x84>
 8018a4a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8018a4e:	fab3 f383 	clz	r3, r3
 8018a52:	095b      	lsrs	r3, r3, #5
 8018a54:	b933      	cbnz	r3, 8018a64 <rmw_validate_full_topic_name+0x84>
 8018a56:	2204      	movs	r2, #4
 8018a58:	602a      	str	r2, [r5, #0]
 8018a5a:	2e00      	cmp	r6, #0
 8018a5c:	d0db      	beq.n	8018a16 <rmw_validate_full_topic_name+0x36>
 8018a5e:	4618      	mov	r0, r3
 8018a60:	6037      	str	r7, [r6, #0]
 8018a62:	e7d2      	b.n	8018a0a <rmw_validate_full_topic_name+0x2a>
 8018a64:	4542      	cmp	r2, r8
 8018a66:	d1e2      	bne.n	8018a2e <rmw_validate_full_topic_name+0x4e>
 8018a68:	2301      	movs	r3, #1
 8018a6a:	4f1a      	ldr	r7, [pc, #104]	@ (8018ad4 <rmw_validate_full_topic_name+0xf4>)
 8018a6c:	e004      	b.n	8018a78 <rmw_validate_full_topic_name+0x98>
 8018a6e:	4298      	cmp	r0, r3
 8018a70:	f104 0401 	add.w	r4, r4, #1
 8018a74:	4613      	mov	r3, r2
 8018a76:	d91c      	bls.n	8018ab2 <rmw_validate_full_topic_name+0xd2>
 8018a78:	4298      	cmp	r0, r3
 8018a7a:	f103 0201 	add.w	r2, r3, #1
 8018a7e:	d0f6      	beq.n	8018a6e <rmw_validate_full_topic_name+0x8e>
 8018a80:	7821      	ldrb	r1, [r4, #0]
 8018a82:	292f      	cmp	r1, #47	@ 0x2f
 8018a84:	d1f3      	bne.n	8018a6e <rmw_validate_full_topic_name+0x8e>
 8018a86:	7861      	ldrb	r1, [r4, #1]
 8018a88:	292f      	cmp	r1, #47	@ 0x2f
 8018a8a:	d01e      	beq.n	8018aca <rmw_validate_full_topic_name+0xea>
 8018a8c:	5dc9      	ldrb	r1, [r1, r7]
 8018a8e:	0749      	lsls	r1, r1, #29
 8018a90:	d5ed      	bpl.n	8018a6e <rmw_validate_full_topic_name+0x8e>
 8018a92:	2206      	movs	r2, #6
 8018a94:	602a      	str	r2, [r5, #0]
 8018a96:	2e00      	cmp	r6, #0
 8018a98:	d0bd      	beq.n	8018a16 <rmw_validate_full_topic_name+0x36>
 8018a9a:	2000      	movs	r0, #0
 8018a9c:	6033      	str	r3, [r6, #0]
 8018a9e:	e7b4      	b.n	8018a0a <rmw_validate_full_topic_name+0x2a>
 8018aa0:	200b      	movs	r0, #11
 8018aa2:	4770      	bx	lr
 8018aa4:	200b      	movs	r0, #11
 8018aa6:	e7b0      	b.n	8018a0a <rmw_validate_full_topic_name+0x2a>
 8018aa8:	2203      	movs	r2, #3
 8018aaa:	602a      	str	r2, [r5, #0]
 8018aac:	2e00      	cmp	r6, #0
 8018aae:	d1f4      	bne.n	8018a9a <rmw_validate_full_topic_name+0xba>
 8018ab0:	e7b1      	b.n	8018a16 <rmw_validate_full_topic_name+0x36>
 8018ab2:	28f7      	cmp	r0, #247	@ 0xf7
 8018ab4:	d803      	bhi.n	8018abe <rmw_validate_full_topic_name+0xde>
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	4618      	mov	r0, r3
 8018aba:	602b      	str	r3, [r5, #0]
 8018abc:	e7a5      	b.n	8018a0a <rmw_validate_full_topic_name+0x2a>
 8018abe:	2307      	movs	r3, #7
 8018ac0:	602b      	str	r3, [r5, #0]
 8018ac2:	2e00      	cmp	r6, #0
 8018ac4:	d0a7      	beq.n	8018a16 <rmw_validate_full_topic_name+0x36>
 8018ac6:	23f6      	movs	r3, #246	@ 0xf6
 8018ac8:	e7e7      	b.n	8018a9a <rmw_validate_full_topic_name+0xba>
 8018aca:	2205      	movs	r2, #5
 8018acc:	602a      	str	r2, [r5, #0]
 8018ace:	2e00      	cmp	r6, #0
 8018ad0:	d1e3      	bne.n	8018a9a <rmw_validate_full_topic_name+0xba>
 8018ad2:	e7a0      	b.n	8018a16 <rmw_validate_full_topic_name+0x36>
 8018ad4:	0801d656 	.word	0x0801d656

08018ad8 <rmw_validate_namespace_with_size>:
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	d043      	beq.n	8018b64 <rmw_validate_namespace_with_size+0x8c>
 8018adc:	b570      	push	{r4, r5, r6, lr}
 8018ade:	4614      	mov	r4, r2
 8018ae0:	b0c2      	sub	sp, #264	@ 0x108
 8018ae2:	b32a      	cbz	r2, 8018b30 <rmw_validate_namespace_with_size+0x58>
 8018ae4:	2901      	cmp	r1, #1
 8018ae6:	460d      	mov	r5, r1
 8018ae8:	461e      	mov	r6, r3
 8018aea:	d102      	bne.n	8018af2 <rmw_validate_namespace_with_size+0x1a>
 8018aec:	7803      	ldrb	r3, [r0, #0]
 8018aee:	2b2f      	cmp	r3, #47	@ 0x2f
 8018af0:	d012      	beq.n	8018b18 <rmw_validate_namespace_with_size+0x40>
 8018af2:	aa01      	add	r2, sp, #4
 8018af4:	4669      	mov	r1, sp
 8018af6:	f7ff ff73 	bl	80189e0 <rmw_validate_full_topic_name>
 8018afa:	b980      	cbnz	r0, 8018b1e <rmw_validate_namespace_with_size+0x46>
 8018afc:	9a00      	ldr	r2, [sp, #0]
 8018afe:	b14a      	cbz	r2, 8018b14 <rmw_validate_namespace_with_size+0x3c>
 8018b00:	2a07      	cmp	r2, #7
 8018b02:	d007      	beq.n	8018b14 <rmw_validate_namespace_with_size+0x3c>
 8018b04:	1e53      	subs	r3, r2, #1
 8018b06:	2b05      	cmp	r3, #5
 8018b08:	d82e      	bhi.n	8018b68 <rmw_validate_namespace_with_size+0x90>
 8018b0a:	e8df f003 	tbb	[pc, r3]
 8018b0e:	1f1c      	.short	0x1f1c
 8018b10:	14282522 	.word	0x14282522
 8018b14:	2df5      	cmp	r5, #245	@ 0xf5
 8018b16:	d804      	bhi.n	8018b22 <rmw_validate_namespace_with_size+0x4a>
 8018b18:	2300      	movs	r3, #0
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	6023      	str	r3, [r4, #0]
 8018b1e:	b042      	add	sp, #264	@ 0x108
 8018b20:	bd70      	pop	{r4, r5, r6, pc}
 8018b22:	2307      	movs	r3, #7
 8018b24:	6023      	str	r3, [r4, #0]
 8018b26:	2e00      	cmp	r6, #0
 8018b28:	d0f9      	beq.n	8018b1e <rmw_validate_namespace_with_size+0x46>
 8018b2a:	23f4      	movs	r3, #244	@ 0xf4
 8018b2c:	6033      	str	r3, [r6, #0]
 8018b2e:	e7f6      	b.n	8018b1e <rmw_validate_namespace_with_size+0x46>
 8018b30:	200b      	movs	r0, #11
 8018b32:	b042      	add	sp, #264	@ 0x108
 8018b34:	bd70      	pop	{r4, r5, r6, pc}
 8018b36:	2306      	movs	r3, #6
 8018b38:	6023      	str	r3, [r4, #0]
 8018b3a:	2e00      	cmp	r6, #0
 8018b3c:	d0ef      	beq.n	8018b1e <rmw_validate_namespace_with_size+0x46>
 8018b3e:	9b01      	ldr	r3, [sp, #4]
 8018b40:	6033      	str	r3, [r6, #0]
 8018b42:	b042      	add	sp, #264	@ 0x108
 8018b44:	bd70      	pop	{r4, r5, r6, pc}
 8018b46:	2301      	movs	r3, #1
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	e7f6      	b.n	8018b3a <rmw_validate_namespace_with_size+0x62>
 8018b4c:	2302      	movs	r3, #2
 8018b4e:	6023      	str	r3, [r4, #0]
 8018b50:	e7f3      	b.n	8018b3a <rmw_validate_namespace_with_size+0x62>
 8018b52:	2303      	movs	r3, #3
 8018b54:	6023      	str	r3, [r4, #0]
 8018b56:	e7f0      	b.n	8018b3a <rmw_validate_namespace_with_size+0x62>
 8018b58:	2304      	movs	r3, #4
 8018b5a:	6023      	str	r3, [r4, #0]
 8018b5c:	e7ed      	b.n	8018b3a <rmw_validate_namespace_with_size+0x62>
 8018b5e:	2305      	movs	r3, #5
 8018b60:	6023      	str	r3, [r4, #0]
 8018b62:	e7ea      	b.n	8018b3a <rmw_validate_namespace_with_size+0x62>
 8018b64:	200b      	movs	r0, #11
 8018b66:	4770      	bx	lr
 8018b68:	4613      	mov	r3, r2
 8018b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018b6e:	4a03      	ldr	r2, [pc, #12]	@ (8018b7c <rmw_validate_namespace_with_size+0xa4>)
 8018b70:	a802      	add	r0, sp, #8
 8018b72:	f7ff fcd5 	bl	8018520 <rcutils_snprintf>
 8018b76:	2001      	movs	r0, #1
 8018b78:	e7d1      	b.n	8018b1e <rmw_validate_namespace_with_size+0x46>
 8018b7a:	bf00      	nop
 8018b7c:	0801d124 	.word	0x0801d124

08018b80 <rmw_validate_namespace>:
 8018b80:	b168      	cbz	r0, 8018b9e <rmw_validate_namespace+0x1e>
 8018b82:	b570      	push	{r4, r5, r6, lr}
 8018b84:	460d      	mov	r5, r1
 8018b86:	4616      	mov	r6, r2
 8018b88:	4604      	mov	r4, r0
 8018b8a:	f7e7 fbb3 	bl	80002f4 <strlen>
 8018b8e:	4633      	mov	r3, r6
 8018b90:	4601      	mov	r1, r0
 8018b92:	462a      	mov	r2, r5
 8018b94:	4620      	mov	r0, r4
 8018b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b9a:	f7ff bf9d 	b.w	8018ad8 <rmw_validate_namespace_with_size>
 8018b9e:	200b      	movs	r0, #11
 8018ba0:	4770      	bx	lr
 8018ba2:	bf00      	nop

08018ba4 <rmw_namespace_validation_result_string>:
 8018ba4:	2807      	cmp	r0, #7
 8018ba6:	d803      	bhi.n	8018bb0 <rmw_namespace_validation_result_string+0xc>
 8018ba8:	4b02      	ldr	r3, [pc, #8]	@ (8018bb4 <rmw_namespace_validation_result_string+0x10>)
 8018baa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018bae:	4770      	bx	lr
 8018bb0:	4801      	ldr	r0, [pc, #4]	@ (8018bb8 <rmw_namespace_validation_result_string+0x14>)
 8018bb2:	4770      	bx	lr
 8018bb4:	0801d31c 	.word	0x0801d31c
 8018bb8:	0801d174 	.word	0x0801d174

08018bbc <rmw_validate_node_name>:
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	d042      	beq.n	8018c46 <rmw_validate_node_name+0x8a>
 8018bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bc4:	460d      	mov	r5, r1
 8018bc6:	2900      	cmp	r1, #0
 8018bc8:	d03f      	beq.n	8018c4a <rmw_validate_node_name+0x8e>
 8018bca:	4604      	mov	r4, r0
 8018bcc:	4616      	mov	r6, r2
 8018bce:	f7e7 fb91 	bl	80002f4 <strlen>
 8018bd2:	b310      	cbz	r0, 8018c1a <rmw_validate_node_name+0x5e>
 8018bd4:	1e63      	subs	r3, r4, #1
 8018bd6:	f1c4 0101 	rsb	r1, r4, #1
 8018bda:	eb03 0800 	add.w	r8, r3, r0
 8018bde:	18cf      	adds	r7, r1, r3
 8018be0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018be4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018be8:	f02e 0c20 	bic.w	ip, lr, #32
 8018bec:	2a09      	cmp	r2, #9
 8018bee:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018bf2:	d905      	bls.n	8018c00 <rmw_validate_node_name+0x44>
 8018bf4:	f1bc 0f19 	cmp.w	ip, #25
 8018bf8:	d902      	bls.n	8018c00 <rmw_validate_node_name+0x44>
 8018bfa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8018bfe:	d114      	bne.n	8018c2a <rmw_validate_node_name+0x6e>
 8018c00:	4598      	cmp	r8, r3
 8018c02:	d1ec      	bne.n	8018bde <rmw_validate_node_name+0x22>
 8018c04:	7822      	ldrb	r2, [r4, #0]
 8018c06:	4b16      	ldr	r3, [pc, #88]	@ (8018c60 <rmw_validate_node_name+0xa4>)
 8018c08:	5cd3      	ldrb	r3, [r2, r3]
 8018c0a:	f013 0304 	ands.w	r3, r3, #4
 8018c0e:	d113      	bne.n	8018c38 <rmw_validate_node_name+0x7c>
 8018c10:	28ff      	cmp	r0, #255	@ 0xff
 8018c12:	d81c      	bhi.n	8018c4e <rmw_validate_node_name+0x92>
 8018c14:	4618      	mov	r0, r3
 8018c16:	602b      	str	r3, [r5, #0]
 8018c18:	e00c      	b.n	8018c34 <rmw_validate_node_name+0x78>
 8018c1a:	2301      	movs	r3, #1
 8018c1c:	602b      	str	r3, [r5, #0]
 8018c1e:	b17e      	cbz	r6, 8018c40 <rmw_validate_node_name+0x84>
 8018c20:	2300      	movs	r3, #0
 8018c22:	4618      	mov	r0, r3
 8018c24:	6033      	str	r3, [r6, #0]
 8018c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c2a:	2302      	movs	r3, #2
 8018c2c:	602b      	str	r3, [r5, #0]
 8018c2e:	b13e      	cbz	r6, 8018c40 <rmw_validate_node_name+0x84>
 8018c30:	2000      	movs	r0, #0
 8018c32:	6037      	str	r7, [r6, #0]
 8018c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c38:	2303      	movs	r3, #3
 8018c3a:	602b      	str	r3, [r5, #0]
 8018c3c:	2e00      	cmp	r6, #0
 8018c3e:	d1ef      	bne.n	8018c20 <rmw_validate_node_name+0x64>
 8018c40:	2000      	movs	r0, #0
 8018c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c46:	200b      	movs	r0, #11
 8018c48:	4770      	bx	lr
 8018c4a:	200b      	movs	r0, #11
 8018c4c:	e7f2      	b.n	8018c34 <rmw_validate_node_name+0x78>
 8018c4e:	2204      	movs	r2, #4
 8018c50:	602a      	str	r2, [r5, #0]
 8018c52:	2e00      	cmp	r6, #0
 8018c54:	d0f4      	beq.n	8018c40 <rmw_validate_node_name+0x84>
 8018c56:	22fe      	movs	r2, #254	@ 0xfe
 8018c58:	4618      	mov	r0, r3
 8018c5a:	6032      	str	r2, [r6, #0]
 8018c5c:	e7ea      	b.n	8018c34 <rmw_validate_node_name+0x78>
 8018c5e:	bf00      	nop
 8018c60:	0801d656 	.word	0x0801d656

08018c64 <rmw_node_name_validation_result_string>:
 8018c64:	2804      	cmp	r0, #4
 8018c66:	d803      	bhi.n	8018c70 <rmw_node_name_validation_result_string+0xc>
 8018c68:	4b02      	ldr	r3, [pc, #8]	@ (8018c74 <rmw_node_name_validation_result_string+0x10>)
 8018c6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018c6e:	4770      	bx	lr
 8018c70:	4801      	ldr	r0, [pc, #4]	@ (8018c78 <rmw_node_name_validation_result_string+0x14>)
 8018c72:	4770      	bx	lr
 8018c74:	0801d428 	.word	0x0801d428
 8018c78:	0801d33c 	.word	0x0801d33c

08018c7c <on_status>:
 8018c7c:	b082      	sub	sp, #8
 8018c7e:	b002      	add	sp, #8
 8018c80:	4770      	bx	lr
 8018c82:	bf00      	nop

08018c84 <on_topic>:
 8018c84:	4a23      	ldr	r2, [pc, #140]	@ (8018d14 <on_topic+0x90>)
 8018c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c8a:	6812      	ldr	r2, [r2, #0]
 8018c8c:	b094      	sub	sp, #80	@ 0x50
 8018c8e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018c90:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8018c94:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8018c98:	b3c2      	cbz	r2, 8018d0c <on_topic+0x88>
 8018c9a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018c9e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018ca2:	e001      	b.n	8018ca8 <on_topic+0x24>
 8018ca4:	6852      	ldr	r2, [r2, #4]
 8018ca6:	b38a      	cbz	r2, 8018d0c <on_topic+0x88>
 8018ca8:	6894      	ldr	r4, [r2, #8]
 8018caa:	8aa3      	ldrh	r3, [r4, #20]
 8018cac:	428b      	cmp	r3, r1
 8018cae:	d1f9      	bne.n	8018ca4 <on_topic+0x20>
 8018cb0:	7da3      	ldrb	r3, [r4, #22]
 8018cb2:	4283      	cmp	r3, r0
 8018cb4:	d1f6      	bne.n	8018ca4 <on_topic+0x20>
 8018cb6:	2248      	movs	r2, #72	@ 0x48
 8018cb8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018cbc:	4668      	mov	r0, sp
 8018cbe:	f002 ffac 	bl	801bc1a <memcpy>
 8018cc2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	cb0c      	ldmia	r3, {r2, r3}
 8018cca:	f7f7 f97b 	bl	800ffc4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018cce:	4607      	mov	r7, r0
 8018cd0:	b1e0      	cbz	r0, 8018d0c <on_topic+0x88>
 8018cd2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018cd6:	462a      	mov	r2, r5
 8018cd8:	4630      	mov	r0, r6
 8018cda:	f108 0110 	add.w	r1, r8, #16
 8018cde:	f000 ff53 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8018ce2:	b930      	cbnz	r0, 8018cf2 <on_topic+0x6e>
 8018ce4:	4639      	mov	r1, r7
 8018ce6:	480c      	ldr	r0, [pc, #48]	@ (8018d18 <on_topic+0x94>)
 8018ce8:	b014      	add	sp, #80	@ 0x50
 8018cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cee:	f000 b8bd 	b.w	8018e6c <put_memory>
 8018cf2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018cf6:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8018cfa:	f7f6 ff61 	bl	800fbc0 <rmw_uros_epoch_nanos>
 8018cfe:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8018d02:	2305      	movs	r3, #5
 8018d04:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018d08:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018d0c:	b014      	add	sp, #80	@ 0x50
 8018d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d12:	bf00      	nop
 8018d14:	24012d64 	.word	0x24012d64
 8018d18:	24012d54 	.word	0x24012d54

08018d1c <on_request>:
 8018d1c:	4824      	ldr	r0, [pc, #144]	@ (8018db0 <on_request+0x94>)
 8018d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d22:	6800      	ldr	r0, [r0, #0]
 8018d24:	b094      	sub	sp, #80	@ 0x50
 8018d26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018d28:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8018d2c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	d03b      	beq.n	8018daa <on_request+0x8e>
 8018d32:	461d      	mov	r5, r3
 8018d34:	e001      	b.n	8018d3a <on_request+0x1e>
 8018d36:	6840      	ldr	r0, [r0, #4]
 8018d38:	b3b8      	cbz	r0, 8018daa <on_request+0x8e>
 8018d3a:	6884      	ldr	r4, [r0, #8]
 8018d3c:	8b21      	ldrh	r1, [r4, #24]
 8018d3e:	4291      	cmp	r1, r2
 8018d40:	d1f9      	bne.n	8018d36 <on_request+0x1a>
 8018d42:	2248      	movs	r2, #72	@ 0x48
 8018d44:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018d48:	4668      	mov	r0, sp
 8018d4a:	f002 ff66 	bl	801bc1a <memcpy>
 8018d4e:	f104 0320 	add.w	r3, r4, #32
 8018d52:	4620      	mov	r0, r4
 8018d54:	cb0c      	ldmia	r3, {r2, r3}
 8018d56:	f7f7 f935 	bl	800ffc4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018d5a:	4680      	mov	r8, r0
 8018d5c:	b328      	cbz	r0, 8018daa <on_request+0x8e>
 8018d5e:	4630      	mov	r0, r6
 8018d60:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018d64:	463a      	mov	r2, r7
 8018d66:	f106 0110 	add.w	r1, r6, #16
 8018d6a:	f000 ff0d 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8018d6e:	b930      	cbnz	r0, 8018d7e <on_request+0x62>
 8018d70:	4641      	mov	r1, r8
 8018d72:	4810      	ldr	r0, [pc, #64]	@ (8018db4 <on_request+0x98>)
 8018d74:	b014      	add	sp, #80	@ 0x50
 8018d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d7a:	f000 b877 	b.w	8018e6c <put_memory>
 8018d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d80:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8018d84:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8018d88:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8018d8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d94:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018d98:	f7f6 ff12 	bl	800fbc0 <rmw_uros_epoch_nanos>
 8018d9c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8018da0:	2303      	movs	r3, #3
 8018da2:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018da6:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8018daa:	b014      	add	sp, #80	@ 0x50
 8018dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018db0:	24012d34 	.word	0x24012d34
 8018db4:	24012d54 	.word	0x24012d54

08018db8 <on_reply>:
 8018db8:	4822      	ldr	r0, [pc, #136]	@ (8018e44 <on_reply+0x8c>)
 8018dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dbe:	6800      	ldr	r0, [r0, #0]
 8018dc0:	b094      	sub	sp, #80	@ 0x50
 8018dc2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018dc4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8018dc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018dca:	b3b8      	cbz	r0, 8018e3c <on_reply+0x84>
 8018dcc:	461d      	mov	r5, r3
 8018dce:	e001      	b.n	8018dd4 <on_reply+0x1c>
 8018dd0:	6840      	ldr	r0, [r0, #4]
 8018dd2:	b398      	cbz	r0, 8018e3c <on_reply+0x84>
 8018dd4:	6884      	ldr	r4, [r0, #8]
 8018dd6:	8b21      	ldrh	r1, [r4, #24]
 8018dd8:	4291      	cmp	r1, r2
 8018dda:	d1f9      	bne.n	8018dd0 <on_reply+0x18>
 8018ddc:	2248      	movs	r2, #72	@ 0x48
 8018dde:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018de2:	4668      	mov	r0, sp
 8018de4:	f002 ff19 	bl	801bc1a <memcpy>
 8018de8:	f104 0320 	add.w	r3, r4, #32
 8018dec:	4620      	mov	r0, r4
 8018dee:	cb0c      	ldmia	r3, {r2, r3}
 8018df0:	f7f7 f8e8 	bl	800ffc4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018df4:	4680      	mov	r8, r0
 8018df6:	b308      	cbz	r0, 8018e3c <on_reply+0x84>
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018dfe:	463a      	mov	r2, r7
 8018e00:	f106 0110 	add.w	r1, r6, #16
 8018e04:	f000 fec0 	bl	8019b88 <ucdr_deserialize_array_uint8_t>
 8018e08:	b930      	cbnz	r0, 8018e18 <on_reply+0x60>
 8018e0a:	4641      	mov	r1, r8
 8018e0c:	480e      	ldr	r0, [pc, #56]	@ (8018e48 <on_reply+0x90>)
 8018e0e:	b014      	add	sp, #80	@ 0x50
 8018e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e14:	f000 b82a 	b.w	8018e6c <put_memory>
 8018e18:	2200      	movs	r2, #0
 8018e1a:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8018e1e:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8018e22:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8018e26:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8018e2a:	f7f6 fec9 	bl	800fbc0 <rmw_uros_epoch_nanos>
 8018e2e:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8018e32:	2304      	movs	r3, #4
 8018e34:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018e38:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8018e3c:	b014      	add	sp, #80	@ 0x50
 8018e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e42:	bf00      	nop
 8018e44:	2400e444 	.word	0x2400e444
 8018e48:	24012d54 	.word	0x24012d54

08018e4c <get_memory>:
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	6840      	ldr	r0, [r0, #4]
 8018e50:	b158      	cbz	r0, 8018e6a <get_memory+0x1e>
 8018e52:	6842      	ldr	r2, [r0, #4]
 8018e54:	605a      	str	r2, [r3, #4]
 8018e56:	b10a      	cbz	r2, 8018e5c <get_memory+0x10>
 8018e58:	2100      	movs	r1, #0
 8018e5a:	6011      	str	r1, [r2, #0]
 8018e5c:	681a      	ldr	r2, [r3, #0]
 8018e5e:	6042      	str	r2, [r0, #4]
 8018e60:	b102      	cbz	r2, 8018e64 <get_memory+0x18>
 8018e62:	6010      	str	r0, [r2, #0]
 8018e64:	2200      	movs	r2, #0
 8018e66:	6002      	str	r2, [r0, #0]
 8018e68:	6018      	str	r0, [r3, #0]
 8018e6a:	4770      	bx	lr

08018e6c <put_memory>:
 8018e6c:	680b      	ldr	r3, [r1, #0]
 8018e6e:	b10b      	cbz	r3, 8018e74 <put_memory+0x8>
 8018e70:	684a      	ldr	r2, [r1, #4]
 8018e72:	605a      	str	r2, [r3, #4]
 8018e74:	684a      	ldr	r2, [r1, #4]
 8018e76:	b102      	cbz	r2, 8018e7a <put_memory+0xe>
 8018e78:	6013      	str	r3, [r2, #0]
 8018e7a:	6803      	ldr	r3, [r0, #0]
 8018e7c:	428b      	cmp	r3, r1
 8018e7e:	6843      	ldr	r3, [r0, #4]
 8018e80:	bf08      	it	eq
 8018e82:	6002      	streq	r2, [r0, #0]
 8018e84:	604b      	str	r3, [r1, #4]
 8018e86:	b103      	cbz	r3, 8018e8a <put_memory+0x1e>
 8018e88:	6019      	str	r1, [r3, #0]
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	600b      	str	r3, [r1, #0]
 8018e8e:	6041      	str	r1, [r0, #4]
 8018e90:	4770      	bx	lr
 8018e92:	bf00      	nop

08018e94 <rmw_destroy_client>:
 8018e94:	b570      	push	{r4, r5, r6, lr}
 8018e96:	b128      	cbz	r0, 8018ea4 <rmw_destroy_client+0x10>
 8018e98:	4604      	mov	r4, r0
 8018e9a:	6800      	ldr	r0, [r0, #0]
 8018e9c:	460d      	mov	r5, r1
 8018e9e:	f7f7 fa0b 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 8018ea2:	b910      	cbnz	r0, 8018eaa <rmw_destroy_client+0x16>
 8018ea4:	2401      	movs	r4, #1
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	bd70      	pop	{r4, r5, r6, pc}
 8018eaa:	6863      	ldr	r3, [r4, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d0f9      	beq.n	8018ea4 <rmw_destroy_client+0x10>
 8018eb0:	2d00      	cmp	r5, #0
 8018eb2:	d0f7      	beq.n	8018ea4 <rmw_destroy_client+0x10>
 8018eb4:	6828      	ldr	r0, [r5, #0]
 8018eb6:	f7f7 f9ff 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d0f2      	beq.n	8018ea4 <rmw_destroy_client+0x10>
 8018ebe:	686e      	ldr	r6, [r5, #4]
 8018ec0:	2e00      	cmp	r6, #0
 8018ec2:	d0ef      	beq.n	8018ea4 <rmw_destroy_client+0x10>
 8018ec4:	6864      	ldr	r4, [r4, #4]
 8018ec6:	6932      	ldr	r2, [r6, #16]
 8018ec8:	6920      	ldr	r0, [r4, #16]
 8018eca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ece:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ed2:	6819      	ldr	r1, [r3, #0]
 8018ed4:	f7f9 f9b0 	bl	8012238 <uxr_buffer_cancel_data>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	6920      	ldr	r0, [r4, #16]
 8018edc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018ee0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018ee4:	f7f7 f96e 	bl	80101c4 <run_xrce_session>
 8018ee8:	6920      	ldr	r0, [r4, #16]
 8018eea:	6932      	ldr	r2, [r6, #16]
 8018eec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018ef0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ef4:	6819      	ldr	r1, [r3, #0]
 8018ef6:	f7f8 fe53 	bl	8011ba0 <uxr_buffer_delete_entity>
 8018efa:	4602      	mov	r2, r0
 8018efc:	6920      	ldr	r0, [r4, #16]
 8018efe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f02:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f06:	f7f7 f95d 	bl	80101c4 <run_xrce_session>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	4628      	mov	r0, r5
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	bf14      	ite	ne
 8018f12:	2400      	movne	r4, #0
 8018f14:	2402      	moveq	r4, #2
 8018f16:	f7f7 f833 	bl	800ff80 <rmw_uxrce_fini_client_memory>
 8018f1a:	e7c4      	b.n	8018ea6 <rmw_destroy_client+0x12>

08018f1c <rmw_get_implementation_identifier>:
 8018f1c:	4b01      	ldr	r3, [pc, #4]	@ (8018f24 <rmw_get_implementation_identifier+0x8>)
 8018f1e:	6818      	ldr	r0, [r3, #0]
 8018f20:	4770      	bx	lr
 8018f22:	bf00      	nop
 8018f24:	0801d454 	.word	0x0801d454

08018f28 <create_topic>:
 8018f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f2c:	4605      	mov	r5, r0
 8018f2e:	b084      	sub	sp, #16
 8018f30:	4822      	ldr	r0, [pc, #136]	@ (8018fbc <create_topic+0x94>)
 8018f32:	460f      	mov	r7, r1
 8018f34:	4616      	mov	r6, r2
 8018f36:	f7ff ff89 	bl	8018e4c <get_memory>
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	2800      	cmp	r0, #0
 8018f3e:	d039      	beq.n	8018fb4 <create_topic+0x8c>
 8018f40:	692b      	ldr	r3, [r5, #16]
 8018f42:	2102      	movs	r1, #2
 8018f44:	6884      	ldr	r4, [r0, #8]
 8018f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f4a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8018fc4 <create_topic+0x9c>
 8018f4e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018f52:	1c42      	adds	r2, r0, #1
 8018f54:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8018f58:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8018f5c:	f7f9 f838 	bl	8011fd0 <uxr_object_id>
 8018f60:	223c      	movs	r2, #60	@ 0x3c
 8018f62:	6120      	str	r0, [r4, #16]
 8018f64:	4641      	mov	r1, r8
 8018f66:	4638      	mov	r0, r7
 8018f68:	f7f7 f98e 	bl	8010288 <generate_topic_name>
 8018f6c:	b1f0      	cbz	r0, 8018fac <create_topic+0x84>
 8018f6e:	4f14      	ldr	r7, [pc, #80]	@ (8018fc0 <create_topic+0x98>)
 8018f70:	4630      	mov	r0, r6
 8018f72:	2264      	movs	r2, #100	@ 0x64
 8018f74:	4639      	mov	r1, r7
 8018f76:	f7f7 f959 	bl	801022c <generate_type_name>
 8018f7a:	b1b8      	cbz	r0, 8018fac <create_topic+0x84>
 8018f7c:	6928      	ldr	r0, [r5, #16]
 8018f7e:	2106      	movs	r1, #6
 8018f80:	696b      	ldr	r3, [r5, #20]
 8018f82:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018f86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f8a:	f8cd 8000 	str.w	r8, [sp]
 8018f8e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8018f92:	6811      	ldr	r1, [r2, #0]
 8018f94:	6922      	ldr	r2, [r4, #16]
 8018f96:	f7f8 fe81 	bl	8011c9c <uxr_buffer_create_topic_bin>
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	6928      	ldr	r0, [r5, #16]
 8018f9e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018fa2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018fa6:	f7f7 f90d 	bl	80101c4 <run_xrce_session>
 8018faa:	b918      	cbnz	r0, 8018fb4 <create_topic+0x8c>
 8018fac:	4620      	mov	r0, r4
 8018fae:	2400      	movs	r4, #0
 8018fb0:	f7f6 fffc 	bl	800ffac <rmw_uxrce_fini_topic_memory>
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	b004      	add	sp, #16
 8018fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fbc:	24012d74 	.word	0x24012d74
 8018fc0:	24012df4 	.word	0x24012df4
 8018fc4:	24012db8 	.word	0x24012db8

08018fc8 <destroy_topic>:
 8018fc8:	b538      	push	{r3, r4, r5, lr}
 8018fca:	6985      	ldr	r5, [r0, #24]
 8018fcc:	b1dd      	cbz	r5, 8019006 <destroy_topic+0x3e>
 8018fce:	4604      	mov	r4, r0
 8018fd0:	6928      	ldr	r0, [r5, #16]
 8018fd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018fd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018fda:	6922      	ldr	r2, [r4, #16]
 8018fdc:	6819      	ldr	r1, [r3, #0]
 8018fde:	f7f8 fddf 	bl	8011ba0 <uxr_buffer_delete_entity>
 8018fe2:	4602      	mov	r2, r0
 8018fe4:	6928      	ldr	r0, [r5, #16]
 8018fe6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018fea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018fee:	f7f7 f8e9 	bl	80101c4 <run_xrce_session>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	4620      	mov	r0, r4
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	bf14      	ite	ne
 8018ffa:	2400      	movne	r4, #0
 8018ffc:	2402      	moveq	r4, #2
 8018ffe:	f7f6 ffd5 	bl	800ffac <rmw_uxrce_fini_topic_memory>
 8019002:	4620      	mov	r0, r4
 8019004:	bd38      	pop	{r3, r4, r5, pc}
 8019006:	2401      	movs	r4, #1
 8019008:	4620      	mov	r0, r4
 801900a:	bd38      	pop	{r3, r4, r5, pc}

0801900c <rmw_send_request>:
 801900c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019010:	4604      	mov	r4, r0
 8019012:	6800      	ldr	r0, [r0, #0]
 8019014:	b08b      	sub	sp, #44	@ 0x2c
 8019016:	460e      	mov	r6, r1
 8019018:	4615      	mov	r5, r2
 801901a:	b128      	cbz	r0, 8019028 <rmw_send_request+0x1c>
 801901c:	4b21      	ldr	r3, [pc, #132]	@ (80190a4 <rmw_send_request+0x98>)
 801901e:	6819      	ldr	r1, [r3, #0]
 8019020:	f7e7 f95e 	bl	80002e0 <strcmp>
 8019024:	2800      	cmp	r0, #0
 8019026:	d139      	bne.n	801909c <rmw_send_request+0x90>
 8019028:	6864      	ldr	r4, [r4, #4]
 801902a:	2700      	movs	r7, #0
 801902c:	6963      	ldr	r3, [r4, #20]
 801902e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019032:	689b      	ldr	r3, [r3, #8]
 8019034:	4798      	blx	r3
 8019036:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801903a:	4630      	mov	r0, r6
 801903c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019040:	4798      	blx	r3
 8019042:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019046:	9000      	str	r0, [sp, #0]
 8019048:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801904c:	6922      	ldr	r2, [r4, #16]
 801904e:	ab02      	add	r3, sp, #8
 8019050:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8019052:	f7fb f9bb 	bl	80143cc <uxr_prepare_output_stream>
 8019056:	e9c5 0700 	strd	r0, r7, [r5]
 801905a:	b198      	cbz	r0, 8019084 <rmw_send_request+0x78>
 801905c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019060:	a902      	add	r1, sp, #8
 8019062:	4630      	mov	r0, r6
 8019064:	4798      	blx	r3
 8019066:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801906a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801906e:	2b01      	cmp	r3, #1
 8019070:	d00c      	beq.n	801908c <rmw_send_request+0x80>
 8019072:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8019074:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019078:	f7f9 feae 	bl	8012dd8 <uxr_run_session_until_confirm_delivery>
 801907c:	4638      	mov	r0, r7
 801907e:	b00b      	add	sp, #44	@ 0x2c
 8019080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019084:	2001      	movs	r0, #1
 8019086:	b00b      	add	sp, #44	@ 0x2c
 8019088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801908c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019090:	f7f9 fae8 	bl	8012664 <uxr_flash_output_streams>
 8019094:	4638      	mov	r0, r7
 8019096:	b00b      	add	sp, #44	@ 0x2c
 8019098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801909c:	200c      	movs	r0, #12
 801909e:	b00b      	add	sp, #44	@ 0x2c
 80190a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190a4:	0801d454 	.word	0x0801d454

080190a8 <rmw_take_request>:
 80190a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80190ac:	4605      	mov	r5, r0
 80190ae:	6800      	ldr	r0, [r0, #0]
 80190b0:	b089      	sub	sp, #36	@ 0x24
 80190b2:	460c      	mov	r4, r1
 80190b4:	4690      	mov	r8, r2
 80190b6:	461e      	mov	r6, r3
 80190b8:	b128      	cbz	r0, 80190c6 <rmw_take_request+0x1e>
 80190ba:	4b28      	ldr	r3, [pc, #160]	@ (801915c <rmw_take_request+0xb4>)
 80190bc:	6819      	ldr	r1, [r3, #0]
 80190be:	f7e7 f90f 	bl	80002e0 <strcmp>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	d146      	bne.n	8019154 <rmw_take_request+0xac>
 80190c6:	b10e      	cbz	r6, 80190cc <rmw_take_request+0x24>
 80190c8:	2300      	movs	r3, #0
 80190ca:	7033      	strb	r3, [r6, #0]
 80190cc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80190d0:	f7f6 fffa 	bl	80100c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80190d4:	4648      	mov	r0, r9
 80190d6:	f7f6 ffcf 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80190da:	4607      	mov	r7, r0
 80190dc:	b3b0      	cbz	r0, 801914c <rmw_take_request+0xa4>
 80190de:	6885      	ldr	r5, [r0, #8]
 80190e0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 80190e4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 80190e8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80190ec:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80190f0:	7423      	strb	r3, [r4, #16]
 80190f2:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 80190f6:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 80190fa:	f8a4 2011 	strh.w	r2, [r4, #17]
 80190fe:	74e3      	strb	r3, [r4, #19]
 8019100:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8019104:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8019108:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801910c:	6161      	str	r1, [r4, #20]
 801910e:	61a2      	str	r2, [r4, #24]
 8019110:	61e3      	str	r3, [r4, #28]
 8019112:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019116:	689b      	ldr	r3, [r3, #8]
 8019118:	4798      	blx	r3
 801911a:	6844      	ldr	r4, [r0, #4]
 801911c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019120:	f105 0110 	add.w	r1, r5, #16
 8019124:	4668      	mov	r0, sp
 8019126:	f7f8 fc43 	bl	80119b0 <ucdr_init_buffer>
 801912a:	4641      	mov	r1, r8
 801912c:	68e3      	ldr	r3, [r4, #12]
 801912e:	4668      	mov	r0, sp
 8019130:	4798      	blx	r3
 8019132:	4639      	mov	r1, r7
 8019134:	4604      	mov	r4, r0
 8019136:	480a      	ldr	r0, [pc, #40]	@ (8019160 <rmw_take_request+0xb8>)
 8019138:	f7ff fe98 	bl	8018e6c <put_memory>
 801913c:	b106      	cbz	r6, 8019140 <rmw_take_request+0x98>
 801913e:	7034      	strb	r4, [r6, #0]
 8019140:	f084 0001 	eor.w	r0, r4, #1
 8019144:	b2c0      	uxtb	r0, r0
 8019146:	b009      	add	sp, #36	@ 0x24
 8019148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801914c:	2001      	movs	r0, #1
 801914e:	b009      	add	sp, #36	@ 0x24
 8019150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019154:	200c      	movs	r0, #12
 8019156:	b009      	add	sp, #36	@ 0x24
 8019158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801915c:	0801d454 	.word	0x0801d454
 8019160:	24012d54 	.word	0x24012d54

08019164 <rmw_send_response>:
 8019164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019166:	4605      	mov	r5, r0
 8019168:	6800      	ldr	r0, [r0, #0]
 801916a:	b091      	sub	sp, #68	@ 0x44
 801916c:	460c      	mov	r4, r1
 801916e:	4616      	mov	r6, r2
 8019170:	b128      	cbz	r0, 801917e <rmw_send_response+0x1a>
 8019172:	4b29      	ldr	r3, [pc, #164]	@ (8019218 <rmw_send_response+0xb4>)
 8019174:	6819      	ldr	r1, [r3, #0]
 8019176:	f7e7 f8b3 	bl	80002e0 <strcmp>
 801917a:	2800      	cmp	r0, #0
 801917c:	d141      	bne.n	8019202 <rmw_send_response+0x9e>
 801917e:	686d      	ldr	r5, [r5, #4]
 8019180:	68a1      	ldr	r1, [r4, #8]
 8019182:	6860      	ldr	r0, [r4, #4]
 8019184:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019186:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801918a:	9307      	str	r3, [sp, #28]
 801918c:	4623      	mov	r3, r4
 801918e:	9206      	str	r2, [sp, #24]
 8019190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019194:	789b      	ldrb	r3, [r3, #2]
 8019196:	f88d 2017 	strb.w	r2, [sp, #23]
 801919a:	f88d 3016 	strb.w	r3, [sp, #22]
 801919e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80191a2:	68e2      	ldr	r2, [r4, #12]
 80191a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191a8:	ab02      	add	r3, sp, #8
 80191aa:	696c      	ldr	r4, [r5, #20]
 80191ac:	c307      	stmia	r3!, {r0, r1, r2}
 80191ae:	68e3      	ldr	r3, [r4, #12]
 80191b0:	4798      	blx	r3
 80191b2:	6844      	ldr	r4, [r0, #4]
 80191b4:	4630      	mov	r0, r6
 80191b6:	6923      	ldr	r3, [r4, #16]
 80191b8:	4798      	blx	r3
 80191ba:	f100 0318 	add.w	r3, r0, #24
 80191be:	6938      	ldr	r0, [r7, #16]
 80191c0:	9300      	str	r3, [sp, #0]
 80191c2:	ab08      	add	r3, sp, #32
 80191c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191c8:	692a      	ldr	r2, [r5, #16]
 80191ca:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80191cc:	f7fb f8fe 	bl	80143cc <uxr_prepare_output_stream>
 80191d0:	b910      	cbnz	r0, 80191d8 <rmw_send_response+0x74>
 80191d2:	2001      	movs	r0, #1
 80191d4:	b011      	add	sp, #68	@ 0x44
 80191d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191d8:	a902      	add	r1, sp, #8
 80191da:	a808      	add	r0, sp, #32
 80191dc:	f7fc f966 	bl	80154ac <uxr_serialize_SampleIdentity>
 80191e0:	68a3      	ldr	r3, [r4, #8]
 80191e2:	a908      	add	r1, sp, #32
 80191e4:	4630      	mov	r0, r6
 80191e6:	4798      	blx	r3
 80191e8:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80191ec:	6938      	ldr	r0, [r7, #16]
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d00a      	beq.n	8019208 <rmw_send_response+0xa4>
 80191f2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80191f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191f8:	f7f9 fdee 	bl	8012dd8 <uxr_run_session_until_confirm_delivery>
 80191fc:	2000      	movs	r0, #0
 80191fe:	b011      	add	sp, #68	@ 0x44
 8019200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019202:	200c      	movs	r0, #12
 8019204:	b011      	add	sp, #68	@ 0x44
 8019206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801920c:	f7f9 fa2a 	bl	8012664 <uxr_flash_output_streams>
 8019210:	2000      	movs	r0, #0
 8019212:	b011      	add	sp, #68	@ 0x44
 8019214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019216:	bf00      	nop
 8019218:	0801d454 	.word	0x0801d454

0801921c <rmw_take_response>:
 801921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019220:	4604      	mov	r4, r0
 8019222:	6800      	ldr	r0, [r0, #0]
 8019224:	b088      	sub	sp, #32
 8019226:	460f      	mov	r7, r1
 8019228:	4690      	mov	r8, r2
 801922a:	461d      	mov	r5, r3
 801922c:	b120      	cbz	r0, 8019238 <rmw_take_response+0x1c>
 801922e:	4b1d      	ldr	r3, [pc, #116]	@ (80192a4 <rmw_take_response+0x88>)
 8019230:	6819      	ldr	r1, [r3, #0]
 8019232:	f7e7 f855 	bl	80002e0 <strcmp>
 8019236:	bb68      	cbnz	r0, 8019294 <rmw_take_response+0x78>
 8019238:	b10d      	cbz	r5, 801923e <rmw_take_response+0x22>
 801923a:	2300      	movs	r3, #0
 801923c:	702b      	strb	r3, [r5, #0]
 801923e:	6864      	ldr	r4, [r4, #4]
 8019240:	f7f6 ff42 	bl	80100c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019244:	4620      	mov	r0, r4
 8019246:	f7f6 ff17 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 801924a:	4606      	mov	r6, r0
 801924c:	b330      	cbz	r0, 801929c <rmw_take_response+0x80>
 801924e:	6963      	ldr	r3, [r4, #20]
 8019250:	6884      	ldr	r4, [r0, #8]
 8019252:	68db      	ldr	r3, [r3, #12]
 8019254:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019258:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801925c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8019260:	4798      	blx	r3
 8019262:	6847      	ldr	r7, [r0, #4]
 8019264:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019268:	f104 0110 	add.w	r1, r4, #16
 801926c:	4668      	mov	r0, sp
 801926e:	f7f8 fb9f 	bl	80119b0 <ucdr_init_buffer>
 8019272:	4641      	mov	r1, r8
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	4668      	mov	r0, sp
 8019278:	4798      	blx	r3
 801927a:	4631      	mov	r1, r6
 801927c:	4604      	mov	r4, r0
 801927e:	480a      	ldr	r0, [pc, #40]	@ (80192a8 <rmw_take_response+0x8c>)
 8019280:	f7ff fdf4 	bl	8018e6c <put_memory>
 8019284:	b105      	cbz	r5, 8019288 <rmw_take_response+0x6c>
 8019286:	702c      	strb	r4, [r5, #0]
 8019288:	f084 0001 	eor.w	r0, r4, #1
 801928c:	b2c0      	uxtb	r0, r0
 801928e:	b008      	add	sp, #32
 8019290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019294:	200c      	movs	r0, #12
 8019296:	b008      	add	sp, #32
 8019298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801929c:	2001      	movs	r0, #1
 801929e:	b008      	add	sp, #32
 80192a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192a4:	0801d454 	.word	0x0801d454
 80192a8:	24012d54 	.word	0x24012d54

080192ac <rmw_take_with_info>:
 80192ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192ae:	4604      	mov	r4, r0
 80192b0:	6800      	ldr	r0, [r0, #0]
 80192b2:	b089      	sub	sp, #36	@ 0x24
 80192b4:	460f      	mov	r7, r1
 80192b6:	4615      	mov	r5, r2
 80192b8:	b128      	cbz	r0, 80192c6 <rmw_take_with_info+0x1a>
 80192ba:	4b24      	ldr	r3, [pc, #144]	@ (801934c <rmw_take_with_info+0xa0>)
 80192bc:	6819      	ldr	r1, [r3, #0]
 80192be:	f7e7 f80f 	bl	80002e0 <strcmp>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d13e      	bne.n	8019344 <rmw_take_with_info+0x98>
 80192c6:	b305      	cbz	r5, 801930a <rmw_take_with_info+0x5e>
 80192c8:	2300      	movs	r3, #0
 80192ca:	6864      	ldr	r4, [r4, #4]
 80192cc:	702b      	strb	r3, [r5, #0]
 80192ce:	f7f6 fefb 	bl	80100c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80192d2:	4620      	mov	r0, r4
 80192d4:	f7f6 fed0 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80192d8:	4606      	mov	r6, r0
 80192da:	b1f0      	cbz	r0, 801931a <rmw_take_with_info+0x6e>
 80192dc:	6881      	ldr	r1, [r0, #8]
 80192de:	4668      	mov	r0, sp
 80192e0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80192e4:	3110      	adds	r1, #16
 80192e6:	f7f8 fb63 	bl	80119b0 <ucdr_init_buffer>
 80192ea:	69a3      	ldr	r3, [r4, #24]
 80192ec:	4639      	mov	r1, r7
 80192ee:	4668      	mov	r0, sp
 80192f0:	68db      	ldr	r3, [r3, #12]
 80192f2:	4798      	blx	r3
 80192f4:	4604      	mov	r4, r0
 80192f6:	4631      	mov	r1, r6
 80192f8:	4815      	ldr	r0, [pc, #84]	@ (8019350 <rmw_take_with_info+0xa4>)
 80192fa:	f7ff fdb7 	bl	8018e6c <put_memory>
 80192fe:	702c      	strb	r4, [r5, #0]
 8019300:	f084 0001 	eor.w	r0, r4, #1
 8019304:	b2c0      	uxtb	r0, r0
 8019306:	b009      	add	sp, #36	@ 0x24
 8019308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801930a:	6864      	ldr	r4, [r4, #4]
 801930c:	f7f6 fedc 	bl	80100c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019310:	4620      	mov	r0, r4
 8019312:	f7f6 feb1 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019316:	4605      	mov	r5, r0
 8019318:	b910      	cbnz	r0, 8019320 <rmw_take_with_info+0x74>
 801931a:	2001      	movs	r0, #1
 801931c:	b009      	add	sp, #36	@ 0x24
 801931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019320:	68a9      	ldr	r1, [r5, #8]
 8019322:	4668      	mov	r0, sp
 8019324:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019328:	3110      	adds	r1, #16
 801932a:	f7f8 fb41 	bl	80119b0 <ucdr_init_buffer>
 801932e:	69a3      	ldr	r3, [r4, #24]
 8019330:	4639      	mov	r1, r7
 8019332:	4668      	mov	r0, sp
 8019334:	68db      	ldr	r3, [r3, #12]
 8019336:	4798      	blx	r3
 8019338:	4629      	mov	r1, r5
 801933a:	4604      	mov	r4, r0
 801933c:	4804      	ldr	r0, [pc, #16]	@ (8019350 <rmw_take_with_info+0xa4>)
 801933e:	f7ff fd95 	bl	8018e6c <put_memory>
 8019342:	e7dd      	b.n	8019300 <rmw_take_with_info+0x54>
 8019344:	200c      	movs	r0, #12
 8019346:	b009      	add	sp, #36	@ 0x24
 8019348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801934a:	bf00      	nop
 801934c:	0801d454 	.word	0x0801d454
 8019350:	24012d54 	.word	0x24012d54

08019354 <rmw_wait>:
 8019354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019358:	4698      	mov	r8, r3
 801935a:	ea40 0301 	orr.w	r3, r0, r1
 801935e:	b089      	sub	sp, #36	@ 0x24
 8019360:	ea48 0303 	orr.w	r3, r8, r3
 8019364:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019366:	4313      	orrs	r3, r2
 8019368:	f000 8106 	beq.w	8019578 <rmw_wait+0x224>
 801936c:	4605      	mov	r5, r0
 801936e:	460e      	mov	r6, r1
 8019370:	4691      	mov	r9, r2
 8019372:	b16c      	cbz	r4, 8019390 <rmw_wait+0x3c>
 8019374:	4ba6      	ldr	r3, [pc, #664]	@ (8019610 <rmw_wait+0x2bc>)
 8019376:	af04      	add	r7, sp, #16
 8019378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801937a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801937e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019382:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019386:	f7ff fa9b 	bl	80188c0 <rmw_time_equal>
 801938a:	2800      	cmp	r0, #0
 801938c:	f000 810b 	beq.w	80195a6 <rmw_wait+0x252>
 8019390:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019394:	f7f6 fe98 	bl	80100c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019398:	4b9e      	ldr	r3, [pc, #632]	@ (8019614 <rmw_wait+0x2c0>)
 801939a:	681c      	ldr	r4, [r3, #0]
 801939c:	b14c      	cbz	r4, 80193b2 <rmw_wait+0x5e>
 801939e:	4623      	mov	r3, r4
 80193a0:	2100      	movs	r1, #0
 80193a2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80193a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193aa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d1f7      	bne.n	80193a2 <rmw_wait+0x4e>
 80193b2:	f1b9 0f00 	cmp.w	r9, #0
 80193b6:	d011      	beq.n	80193dc <rmw_wait+0x88>
 80193b8:	f8d9 1000 	ldr.w	r1, [r9]
 80193bc:	b171      	cbz	r1, 80193dc <rmw_wait+0x88>
 80193be:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80193c2:	2300      	movs	r3, #0
 80193c4:	2001      	movs	r0, #1
 80193c6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80193ca:	3301      	adds	r3, #1
 80193cc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80193ce:	4299      	cmp	r1, r3
 80193d0:	6912      	ldr	r2, [r2, #16]
 80193d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193d6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80193da:	d1f4      	bne.n	80193c6 <rmw_wait+0x72>
 80193dc:	f1b8 0f00 	cmp.w	r8, #0
 80193e0:	d011      	beq.n	8019406 <rmw_wait+0xb2>
 80193e2:	f8d8 1000 	ldr.w	r1, [r8]
 80193e6:	b171      	cbz	r1, 8019406 <rmw_wait+0xb2>
 80193e8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80193ec:	2300      	movs	r3, #0
 80193ee:	2001      	movs	r0, #1
 80193f0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80193f4:	3301      	adds	r3, #1
 80193f6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80193f8:	4299      	cmp	r1, r3
 80193fa:	6912      	ldr	r2, [r2, #16]
 80193fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019400:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019404:	d1f4      	bne.n	80193f0 <rmw_wait+0x9c>
 8019406:	b185      	cbz	r5, 801942a <rmw_wait+0xd6>
 8019408:	6829      	ldr	r1, [r5, #0]
 801940a:	b171      	cbz	r1, 801942a <rmw_wait+0xd6>
 801940c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019410:	2300      	movs	r3, #0
 8019412:	2001      	movs	r0, #1
 8019414:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019418:	3301      	adds	r3, #1
 801941a:	6a12      	ldr	r2, [r2, #32]
 801941c:	4299      	cmp	r1, r3
 801941e:	6912      	ldr	r2, [r2, #16]
 8019420:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019424:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019428:	d1f4      	bne.n	8019414 <rmw_wait+0xc0>
 801942a:	b344      	cbz	r4, 801947e <rmw_wait+0x12a>
 801942c:	4622      	mov	r2, r4
 801942e:	2300      	movs	r3, #0
 8019430:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019434:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019438:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801943c:	440b      	add	r3, r1
 801943e:	b2db      	uxtb	r3, r3
 8019440:	2a00      	cmp	r2, #0
 8019442:	d1f5      	bne.n	8019430 <rmw_wait+0xdc>
 8019444:	2b00      	cmp	r3, #0
 8019446:	d05f      	beq.n	8019508 <rmw_wait+0x1b4>
 8019448:	1c7a      	adds	r2, r7, #1
 801944a:	d00d      	beq.n	8019468 <rmw_wait+0x114>
 801944c:	ee07 7a90 	vmov	s15, r7
 8019450:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019454:	ee07 3a90 	vmov	s15, r3
 8019458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801945c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019460:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019464:	ee17 7a90 	vmov	r7, s15
 8019468:	68a0      	ldr	r0, [r4, #8]
 801946a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801946e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019472:	2b00      	cmp	r3, #0
 8019474:	f040 808d 	bne.w	8019592 <rmw_wait+0x23e>
 8019478:	6864      	ldr	r4, [r4, #4]
 801947a:	2c00      	cmp	r4, #0
 801947c:	d1f4      	bne.n	8019468 <rmw_wait+0x114>
 801947e:	f1b9 0f00 	cmp.w	r9, #0
 8019482:	f000 80a1 	beq.w	80195c8 <rmw_wait+0x274>
 8019486:	f8d9 7000 	ldr.w	r7, [r9]
 801948a:	2f00      	cmp	r7, #0
 801948c:	f000 80a4 	beq.w	80195d8 <rmw_wait+0x284>
 8019490:	2400      	movs	r4, #0
 8019492:	4627      	mov	r7, r4
 8019494:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019498:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801949c:	f7f6 fdec 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194a0:	2800      	cmp	r0, #0
 80194a2:	d03b      	beq.n	801951c <rmw_wait+0x1c8>
 80194a4:	3401      	adds	r4, #1
 80194a6:	f8d9 3000 	ldr.w	r3, [r9]
 80194aa:	2701      	movs	r7, #1
 80194ac:	42a3      	cmp	r3, r4
 80194ae:	d8f1      	bhi.n	8019494 <rmw_wait+0x140>
 80194b0:	2701      	movs	r7, #1
 80194b2:	f1b8 0f00 	cmp.w	r8, #0
 80194b6:	d010      	beq.n	80194da <rmw_wait+0x186>
 80194b8:	f8d8 3000 	ldr.w	r3, [r8]
 80194bc:	b16b      	cbz	r3, 80194da <rmw_wait+0x186>
 80194be:	2400      	movs	r4, #0
 80194c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80194c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80194c8:	f7f6 fdd6 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194cc:	b370      	cbz	r0, 801952c <rmw_wait+0x1d8>
 80194ce:	3401      	adds	r4, #1
 80194d0:	f8d8 3000 	ldr.w	r3, [r8]
 80194d4:	2701      	movs	r7, #1
 80194d6:	42a3      	cmp	r3, r4
 80194d8:	d8f2      	bhi.n	80194c0 <rmw_wait+0x16c>
 80194da:	2d00      	cmp	r5, #0
 80194dc:	d035      	beq.n	801954a <rmw_wait+0x1f6>
 80194de:	682b      	ldr	r3, [r5, #0]
 80194e0:	b39b      	cbz	r3, 801954a <rmw_wait+0x1f6>
 80194e2:	2400      	movs	r4, #0
 80194e4:	686b      	ldr	r3, [r5, #4]
 80194e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80194ea:	f7f6 fdc5 	bl	8010078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194ee:	b328      	cbz	r0, 801953c <rmw_wait+0x1e8>
 80194f0:	3401      	adds	r4, #1
 80194f2:	682b      	ldr	r3, [r5, #0]
 80194f4:	2701      	movs	r7, #1
 80194f6:	42a3      	cmp	r3, r4
 80194f8:	d8f4      	bhi.n	80194e4 <rmw_wait+0x190>
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d03c      	beq.n	8019578 <rmw_wait+0x224>
 80194fe:	6834      	ldr	r4, [r6, #0]
 8019500:	2c00      	cmp	r4, #0
 8019502:	d039      	beq.n	8019578 <rmw_wait+0x224>
 8019504:	2701      	movs	r7, #1
 8019506:	e023      	b.n	8019550 <rmw_wait+0x1fc>
 8019508:	68a0      	ldr	r0, [r4, #8]
 801950a:	2100      	movs	r1, #0
 801950c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019510:	f7f9 fc28 	bl	8012d64 <uxr_run_session_timeout>
 8019514:	6864      	ldr	r4, [r4, #4]
 8019516:	2c00      	cmp	r4, #0
 8019518:	d1f6      	bne.n	8019508 <rmw_wait+0x1b4>
 801951a:	e7b0      	b.n	801947e <rmw_wait+0x12a>
 801951c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019520:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019524:	3401      	adds	r4, #1
 8019526:	42a3      	cmp	r3, r4
 8019528:	d8b4      	bhi.n	8019494 <rmw_wait+0x140>
 801952a:	e7c2      	b.n	80194b2 <rmw_wait+0x15e>
 801952c:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019530:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019534:	3401      	adds	r4, #1
 8019536:	429c      	cmp	r4, r3
 8019538:	d3c2      	bcc.n	80194c0 <rmw_wait+0x16c>
 801953a:	e7ce      	b.n	80194da <rmw_wait+0x186>
 801953c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019540:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019544:	3401      	adds	r4, #1
 8019546:	42a3      	cmp	r3, r4
 8019548:	d8cc      	bhi.n	80194e4 <rmw_wait+0x190>
 801954a:	b1a6      	cbz	r6, 8019576 <rmw_wait+0x222>
 801954c:	6834      	ldr	r4, [r6, #0]
 801954e:	b194      	cbz	r4, 8019576 <rmw_wait+0x222>
 8019550:	2300      	movs	r3, #0
 8019552:	461d      	mov	r5, r3
 8019554:	e004      	b.n	8019560 <rmw_wait+0x20c>
 8019556:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801955a:	3301      	adds	r3, #1
 801955c:	42a3      	cmp	r3, r4
 801955e:	d00a      	beq.n	8019576 <rmw_wait+0x222>
 8019560:	6870      	ldr	r0, [r6, #4]
 8019562:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019566:	7c0a      	ldrb	r2, [r1, #16]
 8019568:	2a00      	cmp	r2, #0
 801956a:	d0f4      	beq.n	8019556 <rmw_wait+0x202>
 801956c:	3301      	adds	r3, #1
 801956e:	4617      	mov	r7, r2
 8019570:	740d      	strb	r5, [r1, #16]
 8019572:	42a3      	cmp	r3, r4
 8019574:	d1f4      	bne.n	8019560 <rmw_wait+0x20c>
 8019576:	b147      	cbz	r7, 801958a <rmw_wait+0x236>
 8019578:	2000      	movs	r0, #0
 801957a:	b009      	add	sp, #36	@ 0x24
 801957c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019580:	b11e      	cbz	r6, 801958a <rmw_wait+0x236>
 8019582:	6834      	ldr	r4, [r6, #0]
 8019584:	462f      	mov	r7, r5
 8019586:	2c00      	cmp	r4, #0
 8019588:	d1e2      	bne.n	8019550 <rmw_wait+0x1fc>
 801958a:	2002      	movs	r0, #2
 801958c:	b009      	add	sp, #36	@ 0x24
 801958e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019592:	4639      	mov	r1, r7
 8019594:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019598:	f7f9 fbfe 	bl	8012d98 <uxr_run_session_until_data>
 801959c:	6864      	ldr	r4, [r4, #4]
 801959e:	2c00      	cmp	r4, #0
 80195a0:	f47f af62 	bne.w	8019468 <rmw_wait+0x114>
 80195a4:	e76b      	b.n	801947e <rmw_wait+0x12a>
 80195a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80195aa:	f7ff f9df 	bl	801896c <rmw_time_total_nsec>
 80195ae:	2300      	movs	r3, #0
 80195b0:	4a19      	ldr	r2, [pc, #100]	@ (8019618 <rmw_wait+0x2c4>)
 80195b2:	f7e6 ff4d 	bl	8000450 <__aeabi_uldivmod>
 80195b6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80195ba:	4607      	mov	r7, r0
 80195bc:	f171 0300 	sbcs.w	r3, r1, #0
 80195c0:	bfa8      	it	ge
 80195c2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80195c6:	e6e5      	b.n	8019394 <rmw_wait+0x40>
 80195c8:	f1b8 0f00 	cmp.w	r8, #0
 80195cc:	d00f      	beq.n	80195ee <rmw_wait+0x29a>
 80195ce:	f8d8 3000 	ldr.w	r3, [r8]
 80195d2:	b193      	cbz	r3, 80195fa <rmw_wait+0x2a6>
 80195d4:	464f      	mov	r7, r9
 80195d6:	e772      	b.n	80194be <rmw_wait+0x16a>
 80195d8:	f1b8 0f00 	cmp.w	r8, #0
 80195dc:	d007      	beq.n	80195ee <rmw_wait+0x29a>
 80195de:	f8d8 3000 	ldr.w	r3, [r8]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	f47f af6b 	bne.w	80194be <rmw_wait+0x16a>
 80195e8:	b155      	cbz	r5, 8019600 <rmw_wait+0x2ac>
 80195ea:	461f      	mov	r7, r3
 80195ec:	e777      	b.n	80194de <rmw_wait+0x18a>
 80195ee:	2d00      	cmp	r5, #0
 80195f0:	d0c6      	beq.n	8019580 <rmw_wait+0x22c>
 80195f2:	682b      	ldr	r3, [r5, #0]
 80195f4:	b143      	cbz	r3, 8019608 <rmw_wait+0x2b4>
 80195f6:	4647      	mov	r7, r8
 80195f8:	e773      	b.n	80194e2 <rmw_wait+0x18e>
 80195fa:	b10d      	cbz	r5, 8019600 <rmw_wait+0x2ac>
 80195fc:	464f      	mov	r7, r9
 80195fe:	e76e      	b.n	80194de <rmw_wait+0x18a>
 8019600:	462f      	mov	r7, r5
 8019602:	2e00      	cmp	r6, #0
 8019604:	d1a2      	bne.n	801954c <rmw_wait+0x1f8>
 8019606:	e7c0      	b.n	801958a <rmw_wait+0x236>
 8019608:	4647      	mov	r7, r8
 801960a:	2e00      	cmp	r6, #0
 801960c:	d19e      	bne.n	801954c <rmw_wait+0x1f8>
 801960e:	e7bc      	b.n	801958a <rmw_wait+0x236>
 8019610:	0801c938 	.word	0x0801c938
 8019614:	24012d44 	.word	0x24012d44
 8019618:	000f4240 	.word	0x000f4240

0801961c <rmw_create_wait_set>:
 801961c:	b508      	push	{r3, lr}
 801961e:	4803      	ldr	r0, [pc, #12]	@ (801962c <rmw_create_wait_set+0x10>)
 8019620:	f7ff fc14 	bl	8018e4c <get_memory>
 8019624:	b108      	cbz	r0, 801962a <rmw_create_wait_set+0xe>
 8019626:	6880      	ldr	r0, [r0, #8]
 8019628:	3010      	adds	r0, #16
 801962a:	bd08      	pop	{r3, pc}
 801962c:	24012d84 	.word	0x24012d84

08019630 <rmw_destroy_wait_set>:
 8019630:	b508      	push	{r3, lr}
 8019632:	4b08      	ldr	r3, [pc, #32]	@ (8019654 <rmw_destroy_wait_set+0x24>)
 8019634:	6819      	ldr	r1, [r3, #0]
 8019636:	b911      	cbnz	r1, 801963e <rmw_destroy_wait_set+0xe>
 8019638:	e00a      	b.n	8019650 <rmw_destroy_wait_set+0x20>
 801963a:	6849      	ldr	r1, [r1, #4]
 801963c:	b141      	cbz	r1, 8019650 <rmw_destroy_wait_set+0x20>
 801963e:	688b      	ldr	r3, [r1, #8]
 8019640:	3310      	adds	r3, #16
 8019642:	4298      	cmp	r0, r3
 8019644:	d1f9      	bne.n	801963a <rmw_destroy_wait_set+0xa>
 8019646:	4803      	ldr	r0, [pc, #12]	@ (8019654 <rmw_destroy_wait_set+0x24>)
 8019648:	f7ff fc10 	bl	8018e6c <put_memory>
 801964c:	2000      	movs	r0, #0
 801964e:	bd08      	pop	{r3, pc}
 8019650:	2001      	movs	r0, #1
 8019652:	bd08      	pop	{r3, pc}
 8019654:	24012d84 	.word	0x24012d84

08019658 <rosidl_runtime_c__double__Sequence__init>:
 8019658:	b530      	push	{r4, r5, lr}
 801965a:	4604      	mov	r4, r0
 801965c:	b087      	sub	sp, #28
 801965e:	b130      	cbz	r0, 801966e <rosidl_runtime_c__double__Sequence__init+0x16>
 8019660:	460d      	mov	r5, r1
 8019662:	b931      	cbnz	r1, 8019672 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8019664:	460b      	mov	r3, r1
 8019666:	2001      	movs	r0, #1
 8019668:	60a5      	str	r5, [r4, #8]
 801966a:	e9c4 3500 	strd	r3, r5, [r4]
 801966e:	b007      	add	sp, #28
 8019670:	bd30      	pop	{r4, r5, pc}
 8019672:	a801      	add	r0, sp, #4
 8019674:	f7f5 fbae 	bl	800edd4 <rcutils_get_default_allocator>
 8019678:	9b01      	ldr	r3, [sp, #4]
 801967a:	9905      	ldr	r1, [sp, #20]
 801967c:	00e8      	lsls	r0, r5, #3
 801967e:	4798      	blx	r3
 8019680:	4603      	mov	r3, r0
 8019682:	2800      	cmp	r0, #0
 8019684:	d1ef      	bne.n	8019666 <rosidl_runtime_c__double__Sequence__init+0xe>
 8019686:	e7f2      	b.n	801966e <rosidl_runtime_c__double__Sequence__init+0x16>

08019688 <rosidl_runtime_c__double__Sequence__fini>:
 8019688:	b188      	cbz	r0, 80196ae <rosidl_runtime_c__double__Sequence__fini+0x26>
 801968a:	6803      	ldr	r3, [r0, #0]
 801968c:	b510      	push	{r4, lr}
 801968e:	4604      	mov	r4, r0
 8019690:	b086      	sub	sp, #24
 8019692:	b153      	cbz	r3, 80196aa <rosidl_runtime_c__double__Sequence__fini+0x22>
 8019694:	a801      	add	r0, sp, #4
 8019696:	f7f5 fb9d 	bl	800edd4 <rcutils_get_default_allocator>
 801969a:	9b02      	ldr	r3, [sp, #8]
 801969c:	9905      	ldr	r1, [sp, #20]
 801969e:	6820      	ldr	r0, [r4, #0]
 80196a0:	4798      	blx	r3
 80196a2:	2300      	movs	r3, #0
 80196a4:	e9c4 3300 	strd	r3, r3, [r4]
 80196a8:	60a3      	str	r3, [r4, #8]
 80196aa:	b006      	add	sp, #24
 80196ac:	bd10      	pop	{r4, pc}
 80196ae:	4770      	bx	lr

080196b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80196b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196b4:	6805      	ldr	r5, [r0, #0]
 80196b6:	4604      	mov	r4, r0
 80196b8:	460e      	mov	r6, r1
 80196ba:	4628      	mov	r0, r5
 80196bc:	f7e6 fe10 	bl	80002e0 <strcmp>
 80196c0:	b1c8      	cbz	r0, 80196f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80196c2:	4b11      	ldr	r3, [pc, #68]	@ (8019708 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	429d      	cmp	r5, r3
 80196c8:	d112      	bne.n	80196f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80196ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80196ce:	f8d8 4000 	ldr.w	r4, [r8]
 80196d2:	b16c      	cbz	r4, 80196f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80196d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80196d8:	2700      	movs	r7, #0
 80196da:	3d04      	subs	r5, #4
 80196dc:	4631      	mov	r1, r6
 80196de:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80196e2:	f7e6 fdfd 	bl	80002e0 <strcmp>
 80196e6:	00bb      	lsls	r3, r7, #2
 80196e8:	b140      	cbz	r0, 80196fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80196ea:	3701      	adds	r7, #1
 80196ec:	42bc      	cmp	r4, r7
 80196ee:	d1f5      	bne.n	80196dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80196f0:	2000      	movs	r0, #0
 80196f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f6:	4620      	mov	r0, r4
 80196f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019704:	58d3      	ldr	r3, [r2, r3]
 8019706:	4718      	bx	r3
 8019708:	240001b4 	.word	0x240001b4

0801970c <std_msgs__msg__Float64MultiArray__init>:
 801970c:	b570      	push	{r4, r5, r6, lr}
 801970e:	4605      	mov	r5, r0
 8019710:	b1b0      	cbz	r0, 8019740 <std_msgs__msg__Float64MultiArray__init+0x34>
 8019712:	f000 f8b3 	bl	801987c <std_msgs__msg__MultiArrayLayout__init>
 8019716:	4604      	mov	r4, r0
 8019718:	b148      	cbz	r0, 801972e <std_msgs__msg__Float64MultiArray__init+0x22>
 801971a:	f105 0610 	add.w	r6, r5, #16
 801971e:	2100      	movs	r1, #0
 8019720:	4630      	mov	r0, r6
 8019722:	f7ff ff99 	bl	8019658 <rosidl_runtime_c__double__Sequence__init>
 8019726:	4604      	mov	r4, r0
 8019728:	b168      	cbz	r0, 8019746 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801972a:	4620      	mov	r0, r4
 801972c:	bd70      	pop	{r4, r5, r6, pc}
 801972e:	4628      	mov	r0, r5
 8019730:	f000 f8b6 	bl	80198a0 <std_msgs__msg__MultiArrayLayout__fini>
 8019734:	f105 0010 	add.w	r0, r5, #16
 8019738:	f7ff ffa6 	bl	8019688 <rosidl_runtime_c__double__Sequence__fini>
 801973c:	4620      	mov	r0, r4
 801973e:	bd70      	pop	{r4, r5, r6, pc}
 8019740:	4604      	mov	r4, r0
 8019742:	4620      	mov	r0, r4
 8019744:	bd70      	pop	{r4, r5, r6, pc}
 8019746:	4628      	mov	r0, r5
 8019748:	f000 f8aa 	bl	80198a0 <std_msgs__msg__MultiArrayLayout__fini>
 801974c:	4630      	mov	r0, r6
 801974e:	f7ff ff9b 	bl	8019688 <rosidl_runtime_c__double__Sequence__fini>
 8019752:	e7ea      	b.n	801972a <std_msgs__msg__Float64MultiArray__init+0x1e>

08019754 <std_msgs__msg__Float64MultiArray__fini>:
 8019754:	b148      	cbz	r0, 801976a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8019756:	b510      	push	{r4, lr}
 8019758:	4604      	mov	r4, r0
 801975a:	f000 f8a1 	bl	80198a0 <std_msgs__msg__MultiArrayLayout__fini>
 801975e:	f104 0010 	add.w	r0, r4, #16
 8019762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019766:	f7ff bf8f 	b.w	8019688 <rosidl_runtime_c__double__Sequence__fini>
 801976a:	4770      	bx	lr

0801976c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019770:	b086      	sub	sp, #24
 8019772:	4689      	mov	r9, r1
 8019774:	4682      	mov	sl, r0
 8019776:	a801      	add	r0, sp, #4
 8019778:	f7f5 fb2c 	bl	800edd4 <rcutils_get_default_allocator>
 801977c:	f1b9 0f00 	cmp.w	r9, #0
 8019780:	d02e      	beq.n	80197e0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 8019782:	2114      	movs	r1, #20
 8019784:	4648      	mov	r0, r9
 8019786:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 801978a:	4642      	mov	r2, r8
 801978c:	4798      	blx	r3
 801978e:	4607      	mov	r7, r0
 8019790:	b380      	cbz	r0, 80197f4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 8019792:	4606      	mov	r6, r0
 8019794:	2400      	movs	r4, #0
 8019796:	e003      	b.n	80197a0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 8019798:	3401      	adds	r4, #1
 801979a:	3614      	adds	r6, #20
 801979c:	45a1      	cmp	r9, r4
 801979e:	d020      	beq.n	80197e2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80197a0:	4630      	mov	r0, r6
 80197a2:	f001 fc29 	bl	801aff8 <rosidl_runtime_c__String__init>
 80197a6:	4605      	mov	r5, r0
 80197a8:	2800      	cmp	r0, #0
 80197aa:	d1f5      	bne.n	8019798 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80197ac:	4630      	mov	r0, r6
 80197ae:	f001 fc39 	bl	801b024 <rosidl_runtime_c__String__fini>
 80197b2:	45a1      	cmp	r9, r4
 80197b4:	d915      	bls.n	80197e2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80197b6:	b15c      	cbz	r4, 80197d0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 80197b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80197bc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80197c0:	3c14      	subs	r4, #20
 80197c2:	4620      	mov	r0, r4
 80197c4:	f001 fc2e 	bl	801b024 <rosidl_runtime_c__String__fini>
 80197c8:	42a7      	cmp	r7, r4
 80197ca:	f1a4 0414 	sub.w	r4, r4, #20
 80197ce:	d1f8      	bne.n	80197c2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 80197d0:	4638      	mov	r0, r7
 80197d2:	9b02      	ldr	r3, [sp, #8]
 80197d4:	4641      	mov	r1, r8
 80197d6:	4798      	blx	r3
 80197d8:	4628      	mov	r0, r5
 80197da:	b006      	add	sp, #24
 80197dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197e0:	464f      	mov	r7, r9
 80197e2:	2501      	movs	r5, #1
 80197e4:	f8ca 9008 	str.w	r9, [sl, #8]
 80197e8:	e9ca 7900 	strd	r7, r9, [sl]
 80197ec:	4628      	mov	r0, r5
 80197ee:	b006      	add	sp, #24
 80197f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197f4:	4605      	mov	r5, r0
 80197f6:	e7f9      	b.n	80197ec <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

080197f8 <std_msgs__msg__MultiArrayDimension__init>:
 80197f8:	b538      	push	{r3, r4, r5, lr}
 80197fa:	4604      	mov	r4, r0
 80197fc:	b128      	cbz	r0, 801980a <std_msgs__msg__MultiArrayDimension__init+0x12>
 80197fe:	f001 fbfb 	bl	801aff8 <rosidl_runtime_c__String__init>
 8019802:	4605      	mov	r5, r0
 8019804:	b120      	cbz	r0, 8019810 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019806:	4628      	mov	r0, r5
 8019808:	bd38      	pop	{r3, r4, r5, pc}
 801980a:	4605      	mov	r5, r0
 801980c:	4628      	mov	r0, r5
 801980e:	bd38      	pop	{r3, r4, r5, pc}
 8019810:	4620      	mov	r0, r4
 8019812:	f001 fc07 	bl	801b024 <rosidl_runtime_c__String__fini>
 8019816:	4628      	mov	r0, r5
 8019818:	bd38      	pop	{r3, r4, r5, pc}
 801981a:	bf00      	nop

0801981c <std_msgs__msg__MultiArrayDimension__fini>:
 801981c:	b108      	cbz	r0, 8019822 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801981e:	f001 bc01 	b.w	801b024 <rosidl_runtime_c__String__fini>
 8019822:	4770      	bx	lr

08019824 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019824:	b108      	cbz	r0, 801982a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019826:	f7ff bfa1 	b.w	801976c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801982a:	4770      	bx	lr

0801982c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801982c:	b320      	cbz	r0, 8019878 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801982e:	b530      	push	{r4, r5, lr}
 8019830:	b087      	sub	sp, #28
 8019832:	4605      	mov	r5, r0
 8019834:	a801      	add	r0, sp, #4
 8019836:	f7f5 facd 	bl	800edd4 <rcutils_get_default_allocator>
 801983a:	682a      	ldr	r2, [r5, #0]
 801983c:	b1b2      	cbz	r2, 801986c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801983e:	68a9      	ldr	r1, [r5, #8]
 8019840:	b161      	cbz	r1, 801985c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019842:	2400      	movs	r4, #0
 8019844:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019848:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 801984c:	d010      	beq.n	8019870 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801984e:	f001 fbe9 	bl	801b024 <rosidl_runtime_c__String__fini>
 8019852:	3401      	adds	r4, #1
 8019854:	68a9      	ldr	r1, [r5, #8]
 8019856:	682a      	ldr	r2, [r5, #0]
 8019858:	428c      	cmp	r4, r1
 801985a:	d3f3      	bcc.n	8019844 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801985c:	9b02      	ldr	r3, [sp, #8]
 801985e:	4610      	mov	r0, r2
 8019860:	9905      	ldr	r1, [sp, #20]
 8019862:	4798      	blx	r3
 8019864:	2300      	movs	r3, #0
 8019866:	e9c5 3300 	strd	r3, r3, [r5]
 801986a:	60ab      	str	r3, [r5, #8]
 801986c:	b007      	add	sp, #28
 801986e:	bd30      	pop	{r4, r5, pc}
 8019870:	3401      	adds	r4, #1
 8019872:	428c      	cmp	r4, r1
 8019874:	d3e6      	bcc.n	8019844 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019876:	e7f1      	b.n	801985c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019878:	4770      	bx	lr
 801987a:	bf00      	nop

0801987c <std_msgs__msg__MultiArrayLayout__init>:
 801987c:	b538      	push	{r3, r4, r5, lr}
 801987e:	4604      	mov	r4, r0
 8019880:	b130      	cbz	r0, 8019890 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019882:	2100      	movs	r1, #0
 8019884:	f7ff ffce 	bl	8019824 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019888:	4605      	mov	r5, r0
 801988a:	b120      	cbz	r0, 8019896 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 801988c:	4628      	mov	r0, r5
 801988e:	bd38      	pop	{r3, r4, r5, pc}
 8019890:	4605      	mov	r5, r0
 8019892:	4628      	mov	r0, r5
 8019894:	bd38      	pop	{r3, r4, r5, pc}
 8019896:	4620      	mov	r0, r4
 8019898:	f7ff ffc8 	bl	801982c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801989c:	4628      	mov	r0, r5
 801989e:	bd38      	pop	{r3, r4, r5, pc}

080198a0 <std_msgs__msg__MultiArrayLayout__fini>:
 80198a0:	b108      	cbz	r0, 80198a6 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 80198a2:	f7ff bfc3 	b.w	801982c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80198a6:	4770      	bx	lr

080198a8 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80198a8:	f7ff bfa6 	b.w	80197f8 <std_msgs__msg__MultiArrayDimension__init>

080198ac <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80198ac:	f7ff bfb6 	b.w	801981c <std_msgs__msg__MultiArrayDimension__fini>

080198b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80198b0:	4b04      	ldr	r3, [pc, #16]	@ (80198c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	b10a      	cbz	r2, 80198ba <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80198b6:	4803      	ldr	r0, [pc, #12]	@ (80198c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80198b8:	4770      	bx	lr
 80198ba:	4a03      	ldr	r2, [pc, #12]	@ (80198c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80198bc:	4801      	ldr	r0, [pc, #4]	@ (80198c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80198be:	6812      	ldr	r2, [r2, #0]
 80198c0:	601a      	str	r2, [r3, #0]
 80198c2:	4770      	bx	lr
 80198c4:	24000270 	.word	0x24000270
 80198c8:	240001b8 	.word	0x240001b8

080198cc <_MultiArrayDimension__cdr_serialize>:
 80198cc:	b1d0      	cbz	r0, 8019904 <_MultiArrayDimension__cdr_serialize+0x38>
 80198ce:	b570      	push	{r4, r5, r6, lr}
 80198d0:	6806      	ldr	r6, [r0, #0]
 80198d2:	4604      	mov	r4, r0
 80198d4:	460d      	mov	r5, r1
 80198d6:	b196      	cbz	r6, 80198fe <_MultiArrayDimension__cdr_serialize+0x32>
 80198d8:	4630      	mov	r0, r6
 80198da:	f7e6 fd0b 	bl	80002f4 <strlen>
 80198de:	1c42      	adds	r2, r0, #1
 80198e0:	4631      	mov	r1, r6
 80198e2:	6060      	str	r0, [r4, #4]
 80198e4:	4628      	mov	r0, r5
 80198e6:	f7f8 f8d7 	bl	8011a98 <ucdr_serialize_sequence_char>
 80198ea:	68e1      	ldr	r1, [r4, #12]
 80198ec:	4628      	mov	r0, r5
 80198ee:	f7f7 f929 	bl	8010b44 <ucdr_serialize_uint32_t>
 80198f2:	6921      	ldr	r1, [r4, #16]
 80198f4:	4628      	mov	r0, r5
 80198f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198fa:	f7f7 b923 	b.w	8010b44 <ucdr_serialize_uint32_t>
 80198fe:	4632      	mov	r2, r6
 8019900:	4630      	mov	r0, r6
 8019902:	e7ed      	b.n	80198e0 <_MultiArrayDimension__cdr_serialize+0x14>
 8019904:	4770      	bx	lr
 8019906:	bf00      	nop

08019908 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019908:	b570      	push	{r4, r5, r6, lr}
 801990a:	4604      	mov	r4, r0
 801990c:	b1b0      	cbz	r0, 801993c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801990e:	460d      	mov	r5, r1
 8019910:	2104      	movs	r1, #4
 8019912:	4628      	mov	r0, r5
 8019914:	f7f8 f850 	bl	80119b8 <ucdr_alignment>
 8019918:	6866      	ldr	r6, [r4, #4]
 801991a:	1d6b      	adds	r3, r5, #5
 801991c:	2104      	movs	r1, #4
 801991e:	f1c5 0504 	rsb	r5, r5, #4
 8019922:	4433      	add	r3, r6
 8019924:	181e      	adds	r6, r3, r0
 8019926:	4630      	mov	r0, r6
 8019928:	f7f8 f846 	bl	80119b8 <ucdr_alignment>
 801992c:	2104      	movs	r1, #4
 801992e:	1844      	adds	r4, r0, r1
 8019930:	4434      	add	r4, r6
 8019932:	4620      	mov	r0, r4
 8019934:	f7f8 f840 	bl	80119b8 <ucdr_alignment>
 8019938:	4428      	add	r0, r5
 801993a:	4420      	add	r0, r4
 801993c:	bd70      	pop	{r4, r5, r6, pc}
 801993e:	bf00      	nop

08019940 <_MultiArrayDimension__cdr_deserialize>:
 8019940:	b570      	push	{r4, r5, r6, lr}
 8019942:	460c      	mov	r4, r1
 8019944:	b082      	sub	sp, #8
 8019946:	b1d9      	cbz	r1, 8019980 <_MultiArrayDimension__cdr_deserialize+0x40>
 8019948:	688e      	ldr	r6, [r1, #8]
 801994a:	ab01      	add	r3, sp, #4
 801994c:	6809      	ldr	r1, [r1, #0]
 801994e:	4605      	mov	r5, r0
 8019950:	4632      	mov	r2, r6
 8019952:	f7f8 f8b3 	bl	8011abc <ucdr_deserialize_sequence_char>
 8019956:	9b01      	ldr	r3, [sp, #4]
 8019958:	b970      	cbnz	r0, 8019978 <_MultiArrayDimension__cdr_deserialize+0x38>
 801995a:	429e      	cmp	r6, r3
 801995c:	d313      	bcc.n	8019986 <_MultiArrayDimension__cdr_deserialize+0x46>
 801995e:	f104 010c 	add.w	r1, r4, #12
 8019962:	4628      	mov	r0, r5
 8019964:	f7f7 fa1e 	bl	8010da4 <ucdr_deserialize_uint32_t>
 8019968:	f104 0110 	add.w	r1, r4, #16
 801996c:	4628      	mov	r0, r5
 801996e:	b002      	add	sp, #8
 8019970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019974:	f7f7 ba16 	b.w	8010da4 <ucdr_deserialize_uint32_t>
 8019978:	b103      	cbz	r3, 801997c <_MultiArrayDimension__cdr_deserialize+0x3c>
 801997a:	3b01      	subs	r3, #1
 801997c:	6063      	str	r3, [r4, #4]
 801997e:	e7ee      	b.n	801995e <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019980:	4608      	mov	r0, r1
 8019982:	b002      	add	sp, #8
 8019984:	bd70      	pop	{r4, r5, r6, pc}
 8019986:	2101      	movs	r1, #1
 8019988:	75a8      	strb	r0, [r5, #22]
 801998a:	7569      	strb	r1, [r5, #21]
 801998c:	6060      	str	r0, [r4, #4]
 801998e:	4628      	mov	r0, r5
 8019990:	f7f8 f82a 	bl	80119e8 <ucdr_align_to>
 8019994:	9901      	ldr	r1, [sp, #4]
 8019996:	4628      	mov	r0, r5
 8019998:	f7f8 f85e 	bl	8011a58 <ucdr_advance_buffer>
 801999c:	e7df      	b.n	801995e <_MultiArrayDimension__cdr_deserialize+0x1e>
 801999e:	bf00      	nop

080199a0 <_MultiArrayDimension__max_serialized_size>:
 80199a0:	b510      	push	{r4, lr}
 80199a2:	2104      	movs	r1, #4
 80199a4:	2000      	movs	r0, #0
 80199a6:	f7f8 f807 	bl	80119b8 <ucdr_alignment>
 80199aa:	2104      	movs	r1, #4
 80199ac:	1844      	adds	r4, r0, r1
 80199ae:	4620      	mov	r0, r4
 80199b0:	f7f8 f802 	bl	80119b8 <ucdr_alignment>
 80199b4:	3004      	adds	r0, #4
 80199b6:	4420      	add	r0, r4
 80199b8:	bd10      	pop	{r4, pc}
 80199ba:	bf00      	nop

080199bc <_MultiArrayDimension__get_serialized_size>:
 80199bc:	b510      	push	{r4, lr}
 80199be:	4604      	mov	r4, r0
 80199c0:	b190      	cbz	r0, 80199e8 <_MultiArrayDimension__get_serialized_size+0x2c>
 80199c2:	2104      	movs	r1, #4
 80199c4:	2000      	movs	r0, #0
 80199c6:	f7f7 fff7 	bl	80119b8 <ucdr_alignment>
 80199ca:	6863      	ldr	r3, [r4, #4]
 80199cc:	2104      	movs	r1, #4
 80199ce:	3305      	adds	r3, #5
 80199d0:	181c      	adds	r4, r3, r0
 80199d2:	4620      	mov	r0, r4
 80199d4:	f7f7 fff0 	bl	80119b8 <ucdr_alignment>
 80199d8:	2104      	movs	r1, #4
 80199da:	4408      	add	r0, r1
 80199dc:	4404      	add	r4, r0
 80199de:	4620      	mov	r0, r4
 80199e0:	f7f7 ffea 	bl	80119b8 <ucdr_alignment>
 80199e4:	3004      	adds	r0, #4
 80199e6:	4420      	add	r0, r4
 80199e8:	bd10      	pop	{r4, pc}
 80199ea:	bf00      	nop

080199ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80199ec:	4800      	ldr	r0, [pc, #0]	@ (80199f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80199ee:	4770      	bx	lr
 80199f0:	2400027c 	.word	0x2400027c

080199f4 <ucdr_serialize_endian_array_char>:
 80199f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f8:	4619      	mov	r1, r3
 80199fa:	461f      	mov	r7, r3
 80199fc:	4605      	mov	r5, r0
 80199fe:	4690      	mov	r8, r2
 8019a00:	f7f7 ff82 	bl	8011908 <ucdr_check_buffer_available_for>
 8019a04:	b9e0      	cbnz	r0, 8019a40 <ucdr_serialize_endian_array_char+0x4c>
 8019a06:	463e      	mov	r6, r7
 8019a08:	e00b      	b.n	8019a22 <ucdr_serialize_endian_array_char+0x2e>
 8019a0a:	4441      	add	r1, r8
 8019a0c:	68a8      	ldr	r0, [r5, #8]
 8019a0e:	4622      	mov	r2, r4
 8019a10:	1b36      	subs	r6, r6, r4
 8019a12:	f002 f902 	bl	801bc1a <memcpy>
 8019a16:	68ab      	ldr	r3, [r5, #8]
 8019a18:	6928      	ldr	r0, [r5, #16]
 8019a1a:	4423      	add	r3, r4
 8019a1c:	4420      	add	r0, r4
 8019a1e:	60ab      	str	r3, [r5, #8]
 8019a20:	6128      	str	r0, [r5, #16]
 8019a22:	4631      	mov	r1, r6
 8019a24:	2201      	movs	r2, #1
 8019a26:	4628      	mov	r0, r5
 8019a28:	f7f7 fff8 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019a2c:	1bb9      	subs	r1, r7, r6
 8019a2e:	4604      	mov	r4, r0
 8019a30:	2800      	cmp	r0, #0
 8019a32:	d1ea      	bne.n	8019a0a <ucdr_serialize_endian_array_char+0x16>
 8019a34:	2301      	movs	r3, #1
 8019a36:	7da8      	ldrb	r0, [r5, #22]
 8019a38:	756b      	strb	r3, [r5, #21]
 8019a3a:	4058      	eors	r0, r3
 8019a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a40:	463a      	mov	r2, r7
 8019a42:	4641      	mov	r1, r8
 8019a44:	68a8      	ldr	r0, [r5, #8]
 8019a46:	f002 f8e8 	bl	801bc1a <memcpy>
 8019a4a:	68aa      	ldr	r2, [r5, #8]
 8019a4c:	692b      	ldr	r3, [r5, #16]
 8019a4e:	443a      	add	r2, r7
 8019a50:	443b      	add	r3, r7
 8019a52:	60aa      	str	r2, [r5, #8]
 8019a54:	612b      	str	r3, [r5, #16]
 8019a56:	e7ed      	b.n	8019a34 <ucdr_serialize_endian_array_char+0x40>

08019a58 <ucdr_deserialize_endian_array_char>:
 8019a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	461f      	mov	r7, r3
 8019a60:	4605      	mov	r5, r0
 8019a62:	4690      	mov	r8, r2
 8019a64:	f7f7 ff50 	bl	8011908 <ucdr_check_buffer_available_for>
 8019a68:	b9e8      	cbnz	r0, 8019aa6 <ucdr_deserialize_endian_array_char+0x4e>
 8019a6a:	463e      	mov	r6, r7
 8019a6c:	e00c      	b.n	8019a88 <ucdr_deserialize_endian_array_char+0x30>
 8019a6e:	eb08 0003 	add.w	r0, r8, r3
 8019a72:	68a9      	ldr	r1, [r5, #8]
 8019a74:	4622      	mov	r2, r4
 8019a76:	1b36      	subs	r6, r6, r4
 8019a78:	f002 f8cf 	bl	801bc1a <memcpy>
 8019a7c:	68ab      	ldr	r3, [r5, #8]
 8019a7e:	6928      	ldr	r0, [r5, #16]
 8019a80:	4423      	add	r3, r4
 8019a82:	4420      	add	r0, r4
 8019a84:	60ab      	str	r3, [r5, #8]
 8019a86:	6128      	str	r0, [r5, #16]
 8019a88:	4631      	mov	r1, r6
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	4628      	mov	r0, r5
 8019a8e:	f7f7 ffc5 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019a92:	1bbb      	subs	r3, r7, r6
 8019a94:	4604      	mov	r4, r0
 8019a96:	2800      	cmp	r0, #0
 8019a98:	d1e9      	bne.n	8019a6e <ucdr_deserialize_endian_array_char+0x16>
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	7da8      	ldrb	r0, [r5, #22]
 8019a9e:	756b      	strb	r3, [r5, #21]
 8019aa0:	4058      	eors	r0, r3
 8019aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aa6:	463a      	mov	r2, r7
 8019aa8:	68a9      	ldr	r1, [r5, #8]
 8019aaa:	4640      	mov	r0, r8
 8019aac:	f002 f8b5 	bl	801bc1a <memcpy>
 8019ab0:	68aa      	ldr	r2, [r5, #8]
 8019ab2:	692b      	ldr	r3, [r5, #16]
 8019ab4:	443a      	add	r2, r7
 8019ab6:	443b      	add	r3, r7
 8019ab8:	60aa      	str	r2, [r5, #8]
 8019aba:	612b      	str	r3, [r5, #16]
 8019abc:	e7ed      	b.n	8019a9a <ucdr_deserialize_endian_array_char+0x42>
 8019abe:	bf00      	nop

08019ac0 <ucdr_serialize_array_uint8_t>:
 8019ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac4:	4688      	mov	r8, r1
 8019ac6:	4611      	mov	r1, r2
 8019ac8:	4617      	mov	r7, r2
 8019aca:	4605      	mov	r5, r0
 8019acc:	f7f7 ff1c 	bl	8011908 <ucdr_check_buffer_available_for>
 8019ad0:	b9e0      	cbnz	r0, 8019b0c <ucdr_serialize_array_uint8_t+0x4c>
 8019ad2:	463e      	mov	r6, r7
 8019ad4:	e00b      	b.n	8019aee <ucdr_serialize_array_uint8_t+0x2e>
 8019ad6:	4441      	add	r1, r8
 8019ad8:	68a8      	ldr	r0, [r5, #8]
 8019ada:	4622      	mov	r2, r4
 8019adc:	1b36      	subs	r6, r6, r4
 8019ade:	f002 f89c 	bl	801bc1a <memcpy>
 8019ae2:	68ab      	ldr	r3, [r5, #8]
 8019ae4:	6928      	ldr	r0, [r5, #16]
 8019ae6:	4423      	add	r3, r4
 8019ae8:	4420      	add	r0, r4
 8019aea:	60ab      	str	r3, [r5, #8]
 8019aec:	6128      	str	r0, [r5, #16]
 8019aee:	4631      	mov	r1, r6
 8019af0:	2201      	movs	r2, #1
 8019af2:	4628      	mov	r0, r5
 8019af4:	f7f7 ff92 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019af8:	1bb9      	subs	r1, r7, r6
 8019afa:	4604      	mov	r4, r0
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d1ea      	bne.n	8019ad6 <ucdr_serialize_array_uint8_t+0x16>
 8019b00:	2301      	movs	r3, #1
 8019b02:	7da8      	ldrb	r0, [r5, #22]
 8019b04:	756b      	strb	r3, [r5, #21]
 8019b06:	4058      	eors	r0, r3
 8019b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b0c:	463a      	mov	r2, r7
 8019b0e:	4641      	mov	r1, r8
 8019b10:	68a8      	ldr	r0, [r5, #8]
 8019b12:	f002 f882 	bl	801bc1a <memcpy>
 8019b16:	68aa      	ldr	r2, [r5, #8]
 8019b18:	692b      	ldr	r3, [r5, #16]
 8019b1a:	443a      	add	r2, r7
 8019b1c:	443b      	add	r3, r7
 8019b1e:	60aa      	str	r2, [r5, #8]
 8019b20:	612b      	str	r3, [r5, #16]
 8019b22:	e7ed      	b.n	8019b00 <ucdr_serialize_array_uint8_t+0x40>

08019b24 <ucdr_serialize_endian_array_uint8_t>:
 8019b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b28:	4619      	mov	r1, r3
 8019b2a:	461f      	mov	r7, r3
 8019b2c:	4605      	mov	r5, r0
 8019b2e:	4690      	mov	r8, r2
 8019b30:	f7f7 feea 	bl	8011908 <ucdr_check_buffer_available_for>
 8019b34:	b9e0      	cbnz	r0, 8019b70 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8019b36:	463e      	mov	r6, r7
 8019b38:	e00b      	b.n	8019b52 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8019b3a:	4441      	add	r1, r8
 8019b3c:	68a8      	ldr	r0, [r5, #8]
 8019b3e:	4622      	mov	r2, r4
 8019b40:	1b36      	subs	r6, r6, r4
 8019b42:	f002 f86a 	bl	801bc1a <memcpy>
 8019b46:	68ab      	ldr	r3, [r5, #8]
 8019b48:	6928      	ldr	r0, [r5, #16]
 8019b4a:	4423      	add	r3, r4
 8019b4c:	4420      	add	r0, r4
 8019b4e:	60ab      	str	r3, [r5, #8]
 8019b50:	6128      	str	r0, [r5, #16]
 8019b52:	4631      	mov	r1, r6
 8019b54:	2201      	movs	r2, #1
 8019b56:	4628      	mov	r0, r5
 8019b58:	f7f7 ff60 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019b5c:	1bb9      	subs	r1, r7, r6
 8019b5e:	4604      	mov	r4, r0
 8019b60:	2800      	cmp	r0, #0
 8019b62:	d1ea      	bne.n	8019b3a <ucdr_serialize_endian_array_uint8_t+0x16>
 8019b64:	2301      	movs	r3, #1
 8019b66:	7da8      	ldrb	r0, [r5, #22]
 8019b68:	756b      	strb	r3, [r5, #21]
 8019b6a:	4058      	eors	r0, r3
 8019b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b70:	463a      	mov	r2, r7
 8019b72:	4641      	mov	r1, r8
 8019b74:	68a8      	ldr	r0, [r5, #8]
 8019b76:	f002 f850 	bl	801bc1a <memcpy>
 8019b7a:	68aa      	ldr	r2, [r5, #8]
 8019b7c:	692b      	ldr	r3, [r5, #16]
 8019b7e:	443a      	add	r2, r7
 8019b80:	443b      	add	r3, r7
 8019b82:	60aa      	str	r2, [r5, #8]
 8019b84:	612b      	str	r3, [r5, #16]
 8019b86:	e7ed      	b.n	8019b64 <ucdr_serialize_endian_array_uint8_t+0x40>

08019b88 <ucdr_deserialize_array_uint8_t>:
 8019b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b8c:	4688      	mov	r8, r1
 8019b8e:	4611      	mov	r1, r2
 8019b90:	4617      	mov	r7, r2
 8019b92:	4605      	mov	r5, r0
 8019b94:	f7f7 feb8 	bl	8011908 <ucdr_check_buffer_available_for>
 8019b98:	b9e8      	cbnz	r0, 8019bd6 <ucdr_deserialize_array_uint8_t+0x4e>
 8019b9a:	463e      	mov	r6, r7
 8019b9c:	e00c      	b.n	8019bb8 <ucdr_deserialize_array_uint8_t+0x30>
 8019b9e:	eb08 0003 	add.w	r0, r8, r3
 8019ba2:	68a9      	ldr	r1, [r5, #8]
 8019ba4:	4622      	mov	r2, r4
 8019ba6:	1b36      	subs	r6, r6, r4
 8019ba8:	f002 f837 	bl	801bc1a <memcpy>
 8019bac:	68ab      	ldr	r3, [r5, #8]
 8019bae:	6928      	ldr	r0, [r5, #16]
 8019bb0:	4423      	add	r3, r4
 8019bb2:	4420      	add	r0, r4
 8019bb4:	60ab      	str	r3, [r5, #8]
 8019bb6:	6128      	str	r0, [r5, #16]
 8019bb8:	4631      	mov	r1, r6
 8019bba:	2201      	movs	r2, #1
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	f7f7 ff2d 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019bc2:	1bbb      	subs	r3, r7, r6
 8019bc4:	4604      	mov	r4, r0
 8019bc6:	2800      	cmp	r0, #0
 8019bc8:	d1e9      	bne.n	8019b9e <ucdr_deserialize_array_uint8_t+0x16>
 8019bca:	2301      	movs	r3, #1
 8019bcc:	7da8      	ldrb	r0, [r5, #22]
 8019bce:	756b      	strb	r3, [r5, #21]
 8019bd0:	4058      	eors	r0, r3
 8019bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bd6:	463a      	mov	r2, r7
 8019bd8:	68a9      	ldr	r1, [r5, #8]
 8019bda:	4640      	mov	r0, r8
 8019bdc:	f002 f81d 	bl	801bc1a <memcpy>
 8019be0:	68aa      	ldr	r2, [r5, #8]
 8019be2:	692b      	ldr	r3, [r5, #16]
 8019be4:	443a      	add	r2, r7
 8019be6:	443b      	add	r3, r7
 8019be8:	60aa      	str	r2, [r5, #8]
 8019bea:	612b      	str	r3, [r5, #16]
 8019bec:	e7ed      	b.n	8019bca <ucdr_deserialize_array_uint8_t+0x42>
 8019bee:	bf00      	nop

08019bf0 <ucdr_deserialize_endian_array_uint8_t>:
 8019bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf4:	4619      	mov	r1, r3
 8019bf6:	461f      	mov	r7, r3
 8019bf8:	4605      	mov	r5, r0
 8019bfa:	4690      	mov	r8, r2
 8019bfc:	f7f7 fe84 	bl	8011908 <ucdr_check_buffer_available_for>
 8019c00:	b9e8      	cbnz	r0, 8019c3e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8019c02:	463e      	mov	r6, r7
 8019c04:	e00c      	b.n	8019c20 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8019c06:	eb08 0003 	add.w	r0, r8, r3
 8019c0a:	68a9      	ldr	r1, [r5, #8]
 8019c0c:	4622      	mov	r2, r4
 8019c0e:	1b36      	subs	r6, r6, r4
 8019c10:	f002 f803 	bl	801bc1a <memcpy>
 8019c14:	68ab      	ldr	r3, [r5, #8]
 8019c16:	6928      	ldr	r0, [r5, #16]
 8019c18:	4423      	add	r3, r4
 8019c1a:	4420      	add	r0, r4
 8019c1c:	60ab      	str	r3, [r5, #8]
 8019c1e:	6128      	str	r0, [r5, #16]
 8019c20:	4631      	mov	r1, r6
 8019c22:	2201      	movs	r2, #1
 8019c24:	4628      	mov	r0, r5
 8019c26:	f7f7 fef9 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019c2a:	1bbb      	subs	r3, r7, r6
 8019c2c:	4604      	mov	r4, r0
 8019c2e:	2800      	cmp	r0, #0
 8019c30:	d1e9      	bne.n	8019c06 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019c32:	2301      	movs	r3, #1
 8019c34:	7da8      	ldrb	r0, [r5, #22]
 8019c36:	756b      	strb	r3, [r5, #21]
 8019c38:	4058      	eors	r0, r3
 8019c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c3e:	463a      	mov	r2, r7
 8019c40:	68a9      	ldr	r1, [r5, #8]
 8019c42:	4640      	mov	r0, r8
 8019c44:	f001 ffe9 	bl	801bc1a <memcpy>
 8019c48:	68aa      	ldr	r2, [r5, #8]
 8019c4a:	692b      	ldr	r3, [r5, #16]
 8019c4c:	443a      	add	r2, r7
 8019c4e:	443b      	add	r3, r7
 8019c50:	60aa      	str	r2, [r5, #8]
 8019c52:	612b      	str	r3, [r5, #16]
 8019c54:	e7ed      	b.n	8019c32 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8019c56:	bf00      	nop

08019c58 <ucdr_serialize_endian_array_double>:
 8019c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	4688      	mov	r8, r1
 8019c60:	2108      	movs	r1, #8
 8019c62:	4616      	mov	r6, r2
 8019c64:	461f      	mov	r7, r3
 8019c66:	f7f7 feaf 	bl	80119c8 <ucdr_buffer_alignment>
 8019c6a:	4601      	mov	r1, r0
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	7d65      	ldrb	r5, [r4, #21]
 8019c70:	f7f7 fef2 	bl	8011a58 <ucdr_advance_buffer>
 8019c74:	f1b8 0f01 	cmp.w	r8, #1
 8019c78:	7565      	strb	r5, [r4, #21]
 8019c7a:	d00f      	beq.n	8019c9c <ucdr_serialize_endian_array_double+0x44>
 8019c7c:	b14f      	cbz	r7, 8019c92 <ucdr_serialize_endian_array_double+0x3a>
 8019c7e:	2500      	movs	r5, #0
 8019c80:	3501      	adds	r5, #1
 8019c82:	4641      	mov	r1, r8
 8019c84:	4620      	mov	r0, r4
 8019c86:	ecb6 0b02 	vldmia	r6!, {d0}
 8019c8a:	f7f7 fc9d 	bl	80115c8 <ucdr_serialize_endian_double>
 8019c8e:	42af      	cmp	r7, r5
 8019c90:	d1f6      	bne.n	8019c80 <ucdr_serialize_endian_array_double+0x28>
 8019c92:	7da0      	ldrb	r0, [r4, #22]
 8019c94:	f080 0001 	eor.w	r0, r0, #1
 8019c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c9c:	00ff      	lsls	r7, r7, #3
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	4639      	mov	r1, r7
 8019ca2:	f7f7 fe31 	bl	8011908 <ucdr_check_buffer_available_for>
 8019ca6:	b9f8      	cbnz	r0, 8019ce8 <ucdr_serialize_endian_array_double+0x90>
 8019ca8:	46b8      	mov	r8, r7
 8019caa:	e00c      	b.n	8019cc6 <ucdr_serialize_endian_array_double+0x6e>
 8019cac:	462a      	mov	r2, r5
 8019cae:	4431      	add	r1, r6
 8019cb0:	68a0      	ldr	r0, [r4, #8]
 8019cb2:	eba8 0805 	sub.w	r8, r8, r5
 8019cb6:	f001 ffb0 	bl	801bc1a <memcpy>
 8019cba:	68a2      	ldr	r2, [r4, #8]
 8019cbc:	6923      	ldr	r3, [r4, #16]
 8019cbe:	442a      	add	r2, r5
 8019cc0:	442b      	add	r3, r5
 8019cc2:	60a2      	str	r2, [r4, #8]
 8019cc4:	6123      	str	r3, [r4, #16]
 8019cc6:	4641      	mov	r1, r8
 8019cc8:	2208      	movs	r2, #8
 8019cca:	4620      	mov	r0, r4
 8019ccc:	f7f7 fea6 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019cd0:	eba7 0108 	sub.w	r1, r7, r8
 8019cd4:	4605      	mov	r5, r0
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	d1e8      	bne.n	8019cac <ucdr_serialize_endian_array_double+0x54>
 8019cda:	2308      	movs	r3, #8
 8019cdc:	7da0      	ldrb	r0, [r4, #22]
 8019cde:	7563      	strb	r3, [r4, #21]
 8019ce0:	f080 0001 	eor.w	r0, r0, #1
 8019ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ce8:	463a      	mov	r2, r7
 8019cea:	4631      	mov	r1, r6
 8019cec:	68a0      	ldr	r0, [r4, #8]
 8019cee:	f001 ff94 	bl	801bc1a <memcpy>
 8019cf2:	68a2      	ldr	r2, [r4, #8]
 8019cf4:	6923      	ldr	r3, [r4, #16]
 8019cf6:	443a      	add	r2, r7
 8019cf8:	441f      	add	r7, r3
 8019cfa:	60a2      	str	r2, [r4, #8]
 8019cfc:	6127      	str	r7, [r4, #16]
 8019cfe:	e7ec      	b.n	8019cda <ucdr_serialize_endian_array_double+0x82>

08019d00 <ucdr_deserialize_endian_array_double>:
 8019d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d04:	4605      	mov	r5, r0
 8019d06:	4688      	mov	r8, r1
 8019d08:	2108      	movs	r1, #8
 8019d0a:	4614      	mov	r4, r2
 8019d0c:	461f      	mov	r7, r3
 8019d0e:	f7f7 fe5b 	bl	80119c8 <ucdr_buffer_alignment>
 8019d12:	4601      	mov	r1, r0
 8019d14:	4628      	mov	r0, r5
 8019d16:	7d6e      	ldrb	r6, [r5, #21]
 8019d18:	f7f7 fe9e 	bl	8011a58 <ucdr_advance_buffer>
 8019d1c:	f1b8 0f01 	cmp.w	r8, #1
 8019d20:	756e      	strb	r6, [r5, #21]
 8019d22:	d010      	beq.n	8019d46 <ucdr_deserialize_endian_array_double+0x46>
 8019d24:	b157      	cbz	r7, 8019d3c <ucdr_deserialize_endian_array_double+0x3c>
 8019d26:	2600      	movs	r6, #0
 8019d28:	3601      	adds	r6, #1
 8019d2a:	4622      	mov	r2, r4
 8019d2c:	4641      	mov	r1, r8
 8019d2e:	4628      	mov	r0, r5
 8019d30:	f7f7 fd1c 	bl	801176c <ucdr_deserialize_endian_double>
 8019d34:	42b7      	cmp	r7, r6
 8019d36:	f104 0408 	add.w	r4, r4, #8
 8019d3a:	d1f5      	bne.n	8019d28 <ucdr_deserialize_endian_array_double+0x28>
 8019d3c:	7da8      	ldrb	r0, [r5, #22]
 8019d3e:	f080 0001 	eor.w	r0, r0, #1
 8019d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d46:	00ff      	lsls	r7, r7, #3
 8019d48:	4628      	mov	r0, r5
 8019d4a:	4639      	mov	r1, r7
 8019d4c:	f7f7 fddc 	bl	8011908 <ucdr_check_buffer_available_for>
 8019d50:	b9f8      	cbnz	r0, 8019d92 <ucdr_deserialize_endian_array_double+0x92>
 8019d52:	46b8      	mov	r8, r7
 8019d54:	e00c      	b.n	8019d70 <ucdr_deserialize_endian_array_double+0x70>
 8019d56:	18e0      	adds	r0, r4, r3
 8019d58:	4632      	mov	r2, r6
 8019d5a:	68a9      	ldr	r1, [r5, #8]
 8019d5c:	eba8 0806 	sub.w	r8, r8, r6
 8019d60:	f001 ff5b 	bl	801bc1a <memcpy>
 8019d64:	68aa      	ldr	r2, [r5, #8]
 8019d66:	692b      	ldr	r3, [r5, #16]
 8019d68:	4432      	add	r2, r6
 8019d6a:	4433      	add	r3, r6
 8019d6c:	60aa      	str	r2, [r5, #8]
 8019d6e:	612b      	str	r3, [r5, #16]
 8019d70:	4641      	mov	r1, r8
 8019d72:	2208      	movs	r2, #8
 8019d74:	4628      	mov	r0, r5
 8019d76:	f7f7 fe51 	bl	8011a1c <ucdr_check_final_buffer_behavior_array>
 8019d7a:	eba7 0308 	sub.w	r3, r7, r8
 8019d7e:	4606      	mov	r6, r0
 8019d80:	2800      	cmp	r0, #0
 8019d82:	d1e8      	bne.n	8019d56 <ucdr_deserialize_endian_array_double+0x56>
 8019d84:	2308      	movs	r3, #8
 8019d86:	7da8      	ldrb	r0, [r5, #22]
 8019d88:	756b      	strb	r3, [r5, #21]
 8019d8a:	f080 0001 	eor.w	r0, r0, #1
 8019d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d92:	463a      	mov	r2, r7
 8019d94:	68a9      	ldr	r1, [r5, #8]
 8019d96:	4620      	mov	r0, r4
 8019d98:	f001 ff3f 	bl	801bc1a <memcpy>
 8019d9c:	68aa      	ldr	r2, [r5, #8]
 8019d9e:	692b      	ldr	r3, [r5, #16]
 8019da0:	443a      	add	r2, r7
 8019da2:	441f      	add	r7, r3
 8019da4:	60aa      	str	r2, [r5, #8]
 8019da6:	612f      	str	r7, [r5, #16]
 8019da8:	e7ec      	b.n	8019d84 <ucdr_deserialize_endian_array_double+0x84>
 8019daa:	bf00      	nop

08019dac <ucdr_serialize_string>:
 8019dac:	b510      	push	{r4, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	4604      	mov	r4, r0
 8019db2:	4608      	mov	r0, r1
 8019db4:	9101      	str	r1, [sp, #4]
 8019db6:	f7e6 fa9d 	bl	80002f4 <strlen>
 8019dba:	4602      	mov	r2, r0
 8019dbc:	9901      	ldr	r1, [sp, #4]
 8019dbe:	4620      	mov	r0, r4
 8019dc0:	3201      	adds	r2, #1
 8019dc2:	b002      	add	sp, #8
 8019dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dc8:	f7f7 be66 	b.w	8011a98 <ucdr_serialize_sequence_char>

08019dcc <ucdr_deserialize_string>:
 8019dcc:	b500      	push	{lr}
 8019dce:	b083      	sub	sp, #12
 8019dd0:	ab01      	add	r3, sp, #4
 8019dd2:	f7f7 fe73 	bl	8011abc <ucdr_deserialize_sequence_char>
 8019dd6:	b003      	add	sp, #12
 8019dd8:	f85d fb04 	ldr.w	pc, [sp], #4

08019ddc <uxr_init_input_best_effort_stream>:
 8019ddc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019de0:	8003      	strh	r3, [r0, #0]
 8019de2:	4770      	bx	lr

08019de4 <uxr_reset_input_best_effort_stream>:
 8019de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019de8:	8003      	strh	r3, [r0, #0]
 8019dea:	4770      	bx	lr

08019dec <uxr_receive_best_effort_message>:
 8019dec:	b538      	push	{r3, r4, r5, lr}
 8019dee:	4604      	mov	r4, r0
 8019df0:	8800      	ldrh	r0, [r0, #0]
 8019df2:	460d      	mov	r5, r1
 8019df4:	f000 fd44 	bl	801a880 <uxr_seq_num_cmp>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	0fc0      	lsrs	r0, r0, #31
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	bfb8      	it	lt
 8019e00:	8025      	strhlt	r5, [r4, #0]
 8019e02:	bd38      	pop	{r3, r4, r5, pc}

08019e04 <on_full_input_buffer>:
 8019e04:	b570      	push	{r4, r5, r6, lr}
 8019e06:	460c      	mov	r4, r1
 8019e08:	4605      	mov	r5, r0
 8019e0a:	8908      	ldrh	r0, [r1, #8]
 8019e0c:	682b      	ldr	r3, [r5, #0]
 8019e0e:	7d26      	ldrb	r6, [r4, #20]
 8019e10:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019e14:	fbb2 f2f0 	udiv	r2, r2, r0
 8019e18:	eba3 0c01 	sub.w	ip, r3, r1
 8019e1c:	fbbc fcf2 	udiv	ip, ip, r2
 8019e20:	f10c 0c01 	add.w	ip, ip, #1
 8019e24:	fa1f f38c 	uxth.w	r3, ip
 8019e28:	fbb3 fcf0 	udiv	ip, r3, r0
 8019e2c:	fb00 331c 	mls	r3, r0, ip, r3
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	fb02 f303 	mul.w	r3, r2, r3
 8019e36:	1d18      	adds	r0, r3, #4
 8019e38:	4408      	add	r0, r1
 8019e3a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019e3e:	b116      	cbz	r6, 8019e46 <on_full_input_buffer+0x42>
 8019e40:	2600      	movs	r6, #0
 8019e42:	f840 6c04 	str.w	r6, [r0, #-4]
 8019e46:	2a03      	cmp	r2, #3
 8019e48:	d801      	bhi.n	8019e4e <on_full_input_buffer+0x4a>
 8019e4a:	2001      	movs	r0, #1
 8019e4c:	bd70      	pop	{r4, r5, r6, pc}
 8019e4e:	3308      	adds	r3, #8
 8019e50:	4628      	mov	r0, r5
 8019e52:	3a04      	subs	r2, #4
 8019e54:	4419      	add	r1, r3
 8019e56:	692b      	ldr	r3, [r5, #16]
 8019e58:	f7f7 fda2 	bl	80119a0 <ucdr_init_buffer_origin>
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	4622      	mov	r2, r4
 8019e60:	4902      	ldr	r1, [pc, #8]	@ (8019e6c <on_full_input_buffer+0x68>)
 8019e62:	f7f7 fd79 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 8019e66:	2000      	movs	r0, #0
 8019e68:	bd70      	pop	{r4, r5, r6, pc}
 8019e6a:	bf00      	nop
 8019e6c:	08019e05 	.word	0x08019e05

08019e70 <uxr_init_input_reliable_stream>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	e9c0 1200 	strd	r1, r2, [r0]
 8019e76:	2400      	movs	r4, #0
 8019e78:	9a02      	ldr	r2, [sp, #8]
 8019e7a:	8103      	strh	r3, [r0, #8]
 8019e7c:	6102      	str	r2, [r0, #16]
 8019e7e:	7504      	strb	r4, [r0, #20]
 8019e80:	b1c3      	cbz	r3, 8019eb4 <uxr_init_input_reliable_stream+0x44>
 8019e82:	600c      	str	r4, [r1, #0]
 8019e84:	8901      	ldrh	r1, [r0, #8]
 8019e86:	2901      	cmp	r1, #1
 8019e88:	d914      	bls.n	8019eb4 <uxr_init_input_reliable_stream+0x44>
 8019e8a:	f04f 0c01 	mov.w	ip, #1
 8019e8e:	6843      	ldr	r3, [r0, #4]
 8019e90:	f10c 0e01 	add.w	lr, ip, #1
 8019e94:	fbbc f2f1 	udiv	r2, ip, r1
 8019e98:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e9c:	fb01 c212 	mls	r2, r1, r2, ip
 8019ea0:	fa1f fc8e 	uxth.w	ip, lr
 8019ea4:	b292      	uxth	r2, r2
 8019ea6:	fb02 f303 	mul.w	r3, r2, r3
 8019eaa:	6802      	ldr	r2, [r0, #0]
 8019eac:	50d4      	str	r4, [r2, r3]
 8019eae:	8901      	ldrh	r1, [r0, #8]
 8019eb0:	4561      	cmp	r1, ip
 8019eb2:	d8ec      	bhi.n	8019e8e <uxr_init_input_reliable_stream+0x1e>
 8019eb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019eb8:	60c3      	str	r3, [r0, #12]
 8019eba:	bd10      	pop	{r4, pc}

08019ebc <uxr_reset_input_reliable_stream>:
 8019ebc:	8901      	ldrh	r1, [r0, #8]
 8019ebe:	b1d9      	cbz	r1, 8019ef8 <uxr_reset_input_reliable_stream+0x3c>
 8019ec0:	b510      	push	{r4, lr}
 8019ec2:	f04f 0e00 	mov.w	lr, #0
 8019ec6:	46f4      	mov	ip, lr
 8019ec8:	4674      	mov	r4, lr
 8019eca:	6843      	ldr	r3, [r0, #4]
 8019ecc:	f10e 0e01 	add.w	lr, lr, #1
 8019ed0:	fbbc f2f1 	udiv	r2, ip, r1
 8019ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019ed8:	fb01 c212 	mls	r2, r1, r2, ip
 8019edc:	fa1f fc8e 	uxth.w	ip, lr
 8019ee0:	b292      	uxth	r2, r2
 8019ee2:	fb02 f303 	mul.w	r3, r2, r3
 8019ee6:	6802      	ldr	r2, [r0, #0]
 8019ee8:	50d4      	str	r4, [r2, r3]
 8019eea:	8901      	ldrh	r1, [r0, #8]
 8019eec:	4561      	cmp	r1, ip
 8019eee:	d8ec      	bhi.n	8019eca <uxr_reset_input_reliable_stream+0xe>
 8019ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019ef4:	60c3      	str	r3, [r0, #12]
 8019ef6:	bd10      	pop	{r4, pc}
 8019ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019efc:	60c3      	str	r3, [r0, #12]
 8019efe:	4770      	bx	lr

08019f00 <uxr_receive_reliable_message>:
 8019f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	460d      	mov	r5, r1
 8019f08:	8901      	ldrh	r1, [r0, #8]
 8019f0a:	4617      	mov	r7, r2
 8019f0c:	8980      	ldrh	r0, [r0, #12]
 8019f0e:	4698      	mov	r8, r3
 8019f10:	f000 fcae 	bl	801a870 <uxr_seq_num_add>
 8019f14:	4629      	mov	r1, r5
 8019f16:	4606      	mov	r6, r0
 8019f18:	89a0      	ldrh	r0, [r4, #12]
 8019f1a:	f000 fcb1 	bl	801a880 <uxr_seq_num_cmp>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	db0a      	blt.n	8019f38 <uxr_receive_reliable_message+0x38>
 8019f22:	2600      	movs	r6, #0
 8019f24:	4629      	mov	r1, r5
 8019f26:	89e0      	ldrh	r0, [r4, #14]
 8019f28:	f000 fcaa 	bl	801a880 <uxr_seq_num_cmp>
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	da00      	bge.n	8019f32 <uxr_receive_reliable_message+0x32>
 8019f30:	81e5      	strh	r5, [r4, #14]
 8019f32:	4630      	mov	r0, r6
 8019f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f38:	4630      	mov	r0, r6
 8019f3a:	4629      	mov	r1, r5
 8019f3c:	f000 fca0 	bl	801a880 <uxr_seq_num_cmp>
 8019f40:	2800      	cmp	r0, #0
 8019f42:	dbee      	blt.n	8019f22 <uxr_receive_reliable_message+0x22>
 8019f44:	6923      	ldr	r3, [r4, #16]
 8019f46:	4638      	mov	r0, r7
 8019f48:	4798      	blx	r3
 8019f4a:	4681      	mov	r9, r0
 8019f4c:	2101      	movs	r1, #1
 8019f4e:	89a0      	ldrh	r0, [r4, #12]
 8019f50:	f000 fc8e 	bl	801a870 <uxr_seq_num_add>
 8019f54:	f1b9 0f00 	cmp.w	r9, #0
 8019f58:	bf08      	it	eq
 8019f5a:	4285      	cmpeq	r5, r0
 8019f5c:	bf0c      	ite	eq
 8019f5e:	2601      	moveq	r6, #1
 8019f60:	2600      	movne	r6, #0
 8019f62:	d104      	bne.n	8019f6e <uxr_receive_reliable_message+0x6e>
 8019f64:	2300      	movs	r3, #0
 8019f66:	9a08      	ldr	r2, [sp, #32]
 8019f68:	81a0      	strh	r0, [r4, #12]
 8019f6a:	7013      	strb	r3, [r2, #0]
 8019f6c:	e7da      	b.n	8019f24 <uxr_receive_reliable_message+0x24>
 8019f6e:	8922      	ldrh	r2, [r4, #8]
 8019f70:	6863      	ldr	r3, [r4, #4]
 8019f72:	fbb5 f0f2 	udiv	r0, r5, r2
 8019f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8019f7a:	fb02 5010 	mls	r0, r2, r0, r5
 8019f7e:	b280      	uxth	r0, r0
 8019f80:	fb03 f000 	mul.w	r0, r3, r0
 8019f84:	6823      	ldr	r3, [r4, #0]
 8019f86:	3004      	adds	r0, #4
 8019f88:	4418      	add	r0, r3
 8019f8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1c7      	bne.n	8019f22 <uxr_receive_reliable_message+0x22>
 8019f92:	4639      	mov	r1, r7
 8019f94:	4642      	mov	r2, r8
 8019f96:	f001 fe40 	bl	801bc1a <memcpy>
 8019f9a:	8921      	ldrh	r1, [r4, #8]
 8019f9c:	6863      	ldr	r3, [r4, #4]
 8019f9e:	fbb5 f2f1 	udiv	r2, r5, r1
 8019fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019fa6:	fb01 5212 	mls	r2, r1, r2, r5
 8019faa:	b292      	uxth	r2, r2
 8019fac:	fb02 f303 	mul.w	r3, r2, r3
 8019fb0:	6822      	ldr	r2, [r4, #0]
 8019fb2:	f842 8003 	str.w	r8, [r2, r3]
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	9a08      	ldr	r2, [sp, #32]
 8019fba:	7013      	strb	r3, [r2, #0]
 8019fbc:	f1b9 0f00 	cmp.w	r9, #0
 8019fc0:	d0af      	beq.n	8019f22 <uxr_receive_reliable_message+0x22>
 8019fc2:	89a6      	ldrh	r6, [r4, #12]
 8019fc4:	2101      	movs	r1, #1
 8019fc6:	4630      	mov	r0, r6
 8019fc8:	f000 fc52 	bl	801a870 <uxr_seq_num_add>
 8019fcc:	8921      	ldrh	r1, [r4, #8]
 8019fce:	6863      	ldr	r3, [r4, #4]
 8019fd0:	4606      	mov	r6, r0
 8019fd2:	fbb0 f2f1 	udiv	r2, r0, r1
 8019fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8019fda:	fb01 0212 	mls	r2, r1, r2, r0
 8019fde:	6820      	ldr	r0, [r4, #0]
 8019fe0:	b292      	uxth	r2, r2
 8019fe2:	fb02 f303 	mul.w	r3, r2, r3
 8019fe6:	3304      	adds	r3, #4
 8019fe8:	4418      	add	r0, r3
 8019fea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d097      	beq.n	8019f22 <uxr_receive_reliable_message+0x22>
 8019ff2:	6923      	ldr	r3, [r4, #16]
 8019ff4:	4798      	blx	r3
 8019ff6:	2802      	cmp	r0, #2
 8019ff8:	d002      	beq.n	801a000 <uxr_receive_reliable_message+0x100>
 8019ffa:	2801      	cmp	r0, #1
 8019ffc:	d0e2      	beq.n	8019fc4 <uxr_receive_reliable_message+0xc4>
 8019ffe:	e790      	b.n	8019f22 <uxr_receive_reliable_message+0x22>
 801a000:	2601      	movs	r6, #1
 801a002:	e78f      	b.n	8019f24 <uxr_receive_reliable_message+0x24>

0801a004 <uxr_next_input_reliable_buffer_available>:
 801a004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a008:	4604      	mov	r4, r0
 801a00a:	460f      	mov	r7, r1
 801a00c:	8980      	ldrh	r0, [r0, #12]
 801a00e:	2101      	movs	r1, #1
 801a010:	4690      	mov	r8, r2
 801a012:	f000 fc2d 	bl	801a870 <uxr_seq_num_add>
 801a016:	8922      	ldrh	r2, [r4, #8]
 801a018:	6866      	ldr	r6, [r4, #4]
 801a01a:	fbb0 f3f2 	udiv	r3, r0, r2
 801a01e:	fbb6 f6f2 	udiv	r6, r6, r2
 801a022:	fb02 0313 	mls	r3, r2, r3, r0
 801a026:	b29b      	uxth	r3, r3
 801a028:	fb03 f606 	mul.w	r6, r3, r6
 801a02c:	6823      	ldr	r3, [r4, #0]
 801a02e:	3604      	adds	r6, #4
 801a030:	441e      	add	r6, r3
 801a032:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a036:	f1b9 0f00 	cmp.w	r9, #0
 801a03a:	d023      	beq.n	801a084 <uxr_next_input_reliable_buffer_available+0x80>
 801a03c:	4605      	mov	r5, r0
 801a03e:	6923      	ldr	r3, [r4, #16]
 801a040:	4630      	mov	r0, r6
 801a042:	4798      	blx	r3
 801a044:	4682      	mov	sl, r0
 801a046:	b300      	cbz	r0, 801a08a <uxr_next_input_reliable_buffer_available+0x86>
 801a048:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a04c:	2101      	movs	r1, #1
 801a04e:	4650      	mov	r0, sl
 801a050:	f000 fc0e 	bl	801a870 <uxr_seq_num_add>
 801a054:	8921      	ldrh	r1, [r4, #8]
 801a056:	4682      	mov	sl, r0
 801a058:	6863      	ldr	r3, [r4, #4]
 801a05a:	6820      	ldr	r0, [r4, #0]
 801a05c:	fbba f2f1 	udiv	r2, sl, r1
 801a060:	fbb3 f3f1 	udiv	r3, r3, r1
 801a064:	fb01 a212 	mls	r2, r1, r2, sl
 801a068:	b292      	uxth	r2, r2
 801a06a:	fb02 f303 	mul.w	r3, r2, r3
 801a06e:	3304      	adds	r3, #4
 801a070:	4418      	add	r0, r3
 801a072:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a076:	b12b      	cbz	r3, 801a084 <uxr_next_input_reliable_buffer_available+0x80>
 801a078:	6923      	ldr	r3, [r4, #16]
 801a07a:	4798      	blx	r3
 801a07c:	2802      	cmp	r0, #2
 801a07e:	d01b      	beq.n	801a0b8 <uxr_next_input_reliable_buffer_available+0xb4>
 801a080:	2801      	cmp	r0, #1
 801a082:	d0e3      	beq.n	801a04c <uxr_next_input_reliable_buffer_available+0x48>
 801a084:	2000      	movs	r0, #0
 801a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a08a:	464a      	mov	r2, r9
 801a08c:	4631      	mov	r1, r6
 801a08e:	4638      	mov	r0, r7
 801a090:	f7f7 fc8e 	bl	80119b0 <ucdr_init_buffer>
 801a094:	8921      	ldrh	r1, [r4, #8]
 801a096:	6863      	ldr	r3, [r4, #4]
 801a098:	2001      	movs	r0, #1
 801a09a:	fbb5 f2f1 	udiv	r2, r5, r1
 801a09e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a0a2:	fb01 5212 	mls	r2, r1, r2, r5
 801a0a6:	b292      	uxth	r2, r2
 801a0a8:	fb02 f303 	mul.w	r3, r2, r3
 801a0ac:	6822      	ldr	r2, [r4, #0]
 801a0ae:	f842 a003 	str.w	sl, [r2, r3]
 801a0b2:	81a5      	strh	r5, [r4, #12]
 801a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0b8:	8920      	ldrh	r0, [r4, #8]
 801a0ba:	eb06 0108 	add.w	r1, r6, r8
 801a0be:	6863      	ldr	r3, [r4, #4]
 801a0c0:	eba9 0208 	sub.w	r2, r9, r8
 801a0c4:	fbb5 f6f0 	udiv	r6, r5, r0
 801a0c8:	fbb3 f3f0 	udiv	r3, r3, r0
 801a0cc:	fb00 5516 	mls	r5, r0, r6, r5
 801a0d0:	2000      	movs	r0, #0
 801a0d2:	b2ad      	uxth	r5, r5
 801a0d4:	fb03 f505 	mul.w	r5, r3, r5
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	5158      	str	r0, [r3, r5]
 801a0dc:	4638      	mov	r0, r7
 801a0de:	f7f7 fc67 	bl	80119b0 <ucdr_init_buffer>
 801a0e2:	4638      	mov	r0, r7
 801a0e4:	4622      	mov	r2, r4
 801a0e6:	4903      	ldr	r1, [pc, #12]	@ (801a0f4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a0e8:	f7f7 fc36 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 801a0ec:	2001      	movs	r0, #1
 801a0ee:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a0f2:	e7c8      	b.n	801a086 <uxr_next_input_reliable_buffer_available+0x82>
 801a0f4:	08019e05 	.word	0x08019e05

0801a0f8 <uxr_process_heartbeat>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4611      	mov	r1, r2
 801a0fc:	4604      	mov	r4, r0
 801a0fe:	89c0      	ldrh	r0, [r0, #14]
 801a100:	4615      	mov	r5, r2
 801a102:	f000 fbbd 	bl	801a880 <uxr_seq_num_cmp>
 801a106:	2800      	cmp	r0, #0
 801a108:	bfb8      	it	lt
 801a10a:	81e5      	strhlt	r5, [r4, #14]
 801a10c:	bd38      	pop	{r3, r4, r5, pc}
 801a10e:	bf00      	nop

0801a110 <uxr_compute_acknack>:
 801a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a114:	8903      	ldrh	r3, [r0, #8]
 801a116:	4604      	mov	r4, r0
 801a118:	460f      	mov	r7, r1
 801a11a:	8985      	ldrh	r5, [r0, #12]
 801a11c:	b1db      	cbz	r3, 801a156 <uxr_compute_acknack+0x46>
 801a11e:	4628      	mov	r0, r5
 801a120:	2601      	movs	r6, #1
 801a122:	e004      	b.n	801a12e <uxr_compute_acknack+0x1e>
 801a124:	4566      	cmp	r6, ip
 801a126:	f106 0601 	add.w	r6, r6, #1
 801a12a:	d214      	bcs.n	801a156 <uxr_compute_acknack+0x46>
 801a12c:	89a0      	ldrh	r0, [r4, #12]
 801a12e:	b2b1      	uxth	r1, r6
 801a130:	f000 fb9e 	bl	801a870 <uxr_seq_num_add>
 801a134:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a138:	fbb0 f2fc 	udiv	r2, r0, ip
 801a13c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a140:	fb0c 0212 	mls	r2, ip, r2, r0
 801a144:	fbb3 f3fc 	udiv	r3, r3, ip
 801a148:	b292      	uxth	r2, r2
 801a14a:	fb02 f303 	mul.w	r3, r2, r3
 801a14e:	58cb      	ldr	r3, [r1, r3]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d1e7      	bne.n	801a124 <uxr_compute_acknack+0x14>
 801a154:	4605      	mov	r5, r0
 801a156:	803d      	strh	r5, [r7, #0]
 801a158:	2101      	movs	r1, #1
 801a15a:	89e6      	ldrh	r6, [r4, #14]
 801a15c:	4628      	mov	r0, r5
 801a15e:	f000 fb8b 	bl	801a878 <uxr_seq_num_sub>
 801a162:	4601      	mov	r1, r0
 801a164:	4630      	mov	r0, r6
 801a166:	f000 fb87 	bl	801a878 <uxr_seq_num_sub>
 801a16a:	4606      	mov	r6, r0
 801a16c:	b328      	cbz	r0, 801a1ba <uxr_compute_acknack+0xaa>
 801a16e:	f04f 0900 	mov.w	r9, #0
 801a172:	f04f 0801 	mov.w	r8, #1
 801a176:	464d      	mov	r5, r9
 801a178:	fa1f f189 	uxth.w	r1, r9
 801a17c:	8838      	ldrh	r0, [r7, #0]
 801a17e:	f000 fb77 	bl	801a870 <uxr_seq_num_add>
 801a182:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a186:	6861      	ldr	r1, [r4, #4]
 801a188:	fa08 fe09 	lsl.w	lr, r8, r9
 801a18c:	6822      	ldr	r2, [r4, #0]
 801a18e:	f109 0901 	add.w	r9, r9, #1
 801a192:	ea4e 0e05 	orr.w	lr, lr, r5
 801a196:	fbb0 f3fc 	udiv	r3, r0, ip
 801a19a:	fbb1 f1fc 	udiv	r1, r1, ip
 801a19e:	fb03 001c 	mls	r0, r3, ip, r0
 801a1a2:	b283      	uxth	r3, r0
 801a1a4:	fb01 f303 	mul.w	r3, r1, r3
 801a1a8:	58d3      	ldr	r3, [r2, r3]
 801a1aa:	b90b      	cbnz	r3, 801a1b0 <uxr_compute_acknack+0xa0>
 801a1ac:	fa1f f58e 	uxth.w	r5, lr
 801a1b0:	454e      	cmp	r6, r9
 801a1b2:	d1e1      	bne.n	801a178 <uxr_compute_acknack+0x68>
 801a1b4:	4628      	mov	r0, r5
 801a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1ba:	4605      	mov	r5, r0
 801a1bc:	4628      	mov	r0, r5
 801a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1c2:	bf00      	nop

0801a1c4 <uxr_init_output_best_effort_stream>:
 801a1c4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a1c8:	6001      	str	r1, [r0, #0]
 801a1ca:	7303      	strb	r3, [r0, #12]
 801a1cc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a1d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a1d4:	4770      	bx	lr
 801a1d6:	bf00      	nop

0801a1d8 <uxr_reset_output_best_effort_stream>:
 801a1d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a1dc:	7b03      	ldrb	r3, [r0, #12]
 801a1de:	81c2      	strh	r2, [r0, #14]
 801a1e0:	6043      	str	r3, [r0, #4]
 801a1e2:	4770      	bx	lr

0801a1e4 <uxr_prepare_best_effort_buffer_to_write>:
 801a1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	b083      	sub	sp, #12
 801a1ea:	6840      	ldr	r0, [r0, #4]
 801a1ec:	460d      	mov	r5, r1
 801a1ee:	4616      	mov	r6, r2
 801a1f0:	f7fa f82a 	bl	8014248 <uxr_submessage_padding>
 801a1f4:	6863      	ldr	r3, [r4, #4]
 801a1f6:	4418      	add	r0, r3
 801a1f8:	68a3      	ldr	r3, [r4, #8]
 801a1fa:	1942      	adds	r2, r0, r5
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	bf2c      	ite	cs
 801a200:	2701      	movcs	r7, #1
 801a202:	2700      	movcc	r7, #0
 801a204:	d202      	bcs.n	801a20c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a206:	4638      	mov	r0, r7
 801a208:	b003      	add	sp, #12
 801a20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a20c:	9000      	str	r0, [sp, #0]
 801a20e:	2300      	movs	r3, #0
 801a210:	4630      	mov	r0, r6
 801a212:	6821      	ldr	r1, [r4, #0]
 801a214:	f7f7 fbba 	bl	801198c <ucdr_init_buffer_origin_offset>
 801a218:	6861      	ldr	r1, [r4, #4]
 801a21a:	4638      	mov	r0, r7
 801a21c:	4429      	add	r1, r5
 801a21e:	6061      	str	r1, [r4, #4]
 801a220:	b003      	add	sp, #12
 801a222:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a224 <uxr_prepare_best_effort_buffer_to_send>:
 801a224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a228:	4604      	mov	r4, r0
 801a22a:	461d      	mov	r5, r3
 801a22c:	6840      	ldr	r0, [r0, #4]
 801a22e:	7b23      	ldrb	r3, [r4, #12]
 801a230:	4298      	cmp	r0, r3
 801a232:	bf8c      	ite	hi
 801a234:	2601      	movhi	r6, #1
 801a236:	2600      	movls	r6, #0
 801a238:	d802      	bhi.n	801a240 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a23a:	4630      	mov	r0, r6
 801a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a240:	4688      	mov	r8, r1
 801a242:	89e0      	ldrh	r0, [r4, #14]
 801a244:	2101      	movs	r1, #1
 801a246:	4617      	mov	r7, r2
 801a248:	f000 fb12 	bl	801a870 <uxr_seq_num_add>
 801a24c:	6823      	ldr	r3, [r4, #0]
 801a24e:	81e0      	strh	r0, [r4, #14]
 801a250:	8028      	strh	r0, [r5, #0]
 801a252:	4630      	mov	r0, r6
 801a254:	f8c8 3000 	str.w	r3, [r8]
 801a258:	6863      	ldr	r3, [r4, #4]
 801a25a:	603b      	str	r3, [r7, #0]
 801a25c:	7b23      	ldrb	r3, [r4, #12]
 801a25e:	6063      	str	r3, [r4, #4]
 801a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a264 <on_full_output_buffer>:
 801a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a266:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a26a:	460c      	mov	r4, r1
 801a26c:	6803      	ldr	r3, [r0, #0]
 801a26e:	4605      	mov	r5, r0
 801a270:	7b26      	ldrb	r6, [r4, #12]
 801a272:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a276:	fbb2 f2fc 	udiv	r2, r2, ip
 801a27a:	eba3 0e01 	sub.w	lr, r3, r1
 801a27e:	6903      	ldr	r3, [r0, #16]
 801a280:	fbbe fef2 	udiv	lr, lr, r2
 801a284:	f10e 0e01 	add.w	lr, lr, #1
 801a288:	fa1f fe8e 	uxth.w	lr, lr
 801a28c:	fbbe f7fc 	udiv	r7, lr, ip
 801a290:	fb0c ec17 	mls	ip, ip, r7, lr
 801a294:	fa1f fc8c 	uxth.w	ip, ip
 801a298:	fb02 fc0c 	mul.w	ip, r2, ip
 801a29c:	f851 200c 	ldr.w	r2, [r1, ip]
 801a2a0:	44b4      	add	ip, r6
 801a2a2:	1b92      	subs	r2, r2, r6
 801a2a4:	f10c 0c08 	add.w	ip, ip, #8
 801a2a8:	3a04      	subs	r2, #4
 801a2aa:	4461      	add	r1, ip
 801a2ac:	f7f7 fb78 	bl	80119a0 <ucdr_init_buffer_origin>
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	4622      	mov	r2, r4
 801a2b4:	4902      	ldr	r1, [pc, #8]	@ (801a2c0 <on_full_output_buffer+0x5c>)
 801a2b6:	f7f7 fb4f 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 801a2ba:	2000      	movs	r0, #0
 801a2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	0801a265 	.word	0x0801a265

0801a2c4 <uxr_init_output_reliable_stream>:
 801a2c4:	b530      	push	{r4, r5, lr}
 801a2c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a2ca:	8103      	strh	r3, [r0, #8]
 801a2cc:	7304      	strb	r4, [r0, #12]
 801a2ce:	e9c0 1200 	strd	r1, r2, [r0]
 801a2d2:	b1e3      	cbz	r3, 801a30e <uxr_init_output_reliable_stream+0x4a>
 801a2d4:	600c      	str	r4, [r1, #0]
 801a2d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a2da:	f1bc 0f01 	cmp.w	ip, #1
 801a2de:	d916      	bls.n	801a30e <uxr_init_output_reliable_stream+0x4a>
 801a2e0:	f04f 0e01 	mov.w	lr, #1
 801a2e4:	6843      	ldr	r3, [r0, #4]
 801a2e6:	f10e 0501 	add.w	r5, lr, #1
 801a2ea:	7b04      	ldrb	r4, [r0, #12]
 801a2ec:	6801      	ldr	r1, [r0, #0]
 801a2ee:	fbbe f2fc 	udiv	r2, lr, ip
 801a2f2:	fbb3 f3fc 	udiv	r3, r3, ip
 801a2f6:	fb0c e212 	mls	r2, ip, r2, lr
 801a2fa:	fa1f fe85 	uxth.w	lr, r5
 801a2fe:	b292      	uxth	r2, r2
 801a300:	fb02 f303 	mul.w	r3, r2, r3
 801a304:	50cc      	str	r4, [r1, r3]
 801a306:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a30a:	45f4      	cmp	ip, lr
 801a30c:	d8ea      	bhi.n	801a2e4 <uxr_init_output_reliable_stream+0x20>
 801a30e:	4b07      	ldr	r3, [pc, #28]	@ (801a32c <uxr_init_output_reliable_stream+0x68>)
 801a310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a314:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a318:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a31c:	f8c0 300e 	str.w	r3, [r0, #14]
 801a320:	2300      	movs	r3, #0
 801a322:	8242      	strh	r2, [r0, #18]
 801a324:	8403      	strh	r3, [r0, #32]
 801a326:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a32a:	bd30      	pop	{r4, r5, pc}
 801a32c:	ffff0000 	.word	0xffff0000

0801a330 <uxr_reset_output_reliable_stream>:
 801a330:	8901      	ldrh	r1, [r0, #8]
 801a332:	b510      	push	{r4, lr}
 801a334:	b1b1      	cbz	r1, 801a364 <uxr_reset_output_reliable_stream+0x34>
 801a336:	f04f 0e00 	mov.w	lr, #0
 801a33a:	46f4      	mov	ip, lr
 801a33c:	6843      	ldr	r3, [r0, #4]
 801a33e:	f10e 0e01 	add.w	lr, lr, #1
 801a342:	7b04      	ldrb	r4, [r0, #12]
 801a344:	fbbc f2f1 	udiv	r2, ip, r1
 801a348:	fbb3 f3f1 	udiv	r3, r3, r1
 801a34c:	fb01 c212 	mls	r2, r1, r2, ip
 801a350:	fa1f fc8e 	uxth.w	ip, lr
 801a354:	b292      	uxth	r2, r2
 801a356:	fb02 f303 	mul.w	r3, r2, r3
 801a35a:	6802      	ldr	r2, [r0, #0]
 801a35c:	50d4      	str	r4, [r2, r3]
 801a35e:	8901      	ldrh	r1, [r0, #8]
 801a360:	4561      	cmp	r1, ip
 801a362:	d8eb      	bhi.n	801a33c <uxr_reset_output_reliable_stream+0xc>
 801a364:	4b08      	ldr	r3, [pc, #32]	@ (801a388 <uxr_reset_output_reliable_stream+0x58>)
 801a366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a36a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801a380 <uxr_reset_output_reliable_stream+0x50>
 801a36e:	f8c0 300e 	str.w	r3, [r0, #14]
 801a372:	2300      	movs	r3, #0
 801a374:	8242      	strh	r2, [r0, #18]
 801a376:	8403      	strh	r3, [r0, #32]
 801a378:	ed80 7b06 	vstr	d7, [r0, #24]
 801a37c:	bd10      	pop	{r4, pc}
 801a37e:	bf00      	nop
 801a380:	ffffffff 	.word	0xffffffff
 801a384:	7fffffff 	.word	0x7fffffff
 801a388:	ffff0000 	.word	0xffff0000

0801a38c <uxr_prepare_reliable_buffer_to_write>:
 801a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a390:	4604      	mov	r4, r0
 801a392:	b091      	sub	sp, #68	@ 0x44
 801a394:	8900      	ldrh	r0, [r0, #8]
 801a396:	468b      	mov	fp, r1
 801a398:	89e6      	ldrh	r6, [r4, #14]
 801a39a:	9204      	str	r2, [sp, #16]
 801a39c:	6865      	ldr	r5, [r4, #4]
 801a39e:	6823      	ldr	r3, [r4, #0]
 801a3a0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a3a4:	fbb6 f2f0 	udiv	r2, r6, r0
 801a3a8:	fbb5 f5f0 	udiv	r5, r5, r0
 801a3ac:	fb00 6212 	mls	r2, r0, r2, r6
 801a3b0:	1f2f      	subs	r7, r5, #4
 801a3b2:	b292      	uxth	r2, r2
 801a3b4:	fb05 3202 	mla	r2, r5, r2, r3
 801a3b8:	1d11      	adds	r1, r2, #4
 801a3ba:	f8d2 8000 	ldr.w	r8, [r2]
 801a3be:	9103      	str	r1, [sp, #12]
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	f000 814a 	beq.w	801a65a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a3c6:	f04f 0c00 	mov.w	ip, #0
 801a3ca:	46e2      	mov	sl, ip
 801a3cc:	4661      	mov	r1, ip
 801a3ce:	f10c 0c01 	add.w	ip, ip, #1
 801a3d2:	fbb1 f2f0 	udiv	r2, r1, r0
 801a3d6:	fb00 1212 	mls	r2, r0, r2, r1
 801a3da:	fa1f f18c 	uxth.w	r1, ip
 801a3de:	b292      	uxth	r2, r2
 801a3e0:	fb05 f202 	mul.w	r2, r5, r2
 801a3e4:	589a      	ldr	r2, [r3, r2]
 801a3e6:	454a      	cmp	r2, r9
 801a3e8:	d103      	bne.n	801a3f2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801a3ea:	f10a 0a01 	add.w	sl, sl, #1
 801a3ee:	fa1f fa8a 	uxth.w	sl, sl
 801a3f2:	4281      	cmp	r1, r0
 801a3f4:	d3eb      	bcc.n	801a3ce <uxr_prepare_reliable_buffer_to_write+0x42>
 801a3f6:	4640      	mov	r0, r8
 801a3f8:	2104      	movs	r1, #4
 801a3fa:	f8cd a014 	str.w	sl, [sp, #20]
 801a3fe:	f7f7 fadb 	bl	80119b8 <ucdr_alignment>
 801a402:	4480      	add	r8, r0
 801a404:	eb08 020b 	add.w	r2, r8, fp
 801a408:	42ba      	cmp	r2, r7
 801a40a:	f240 80ca 	bls.w	801a5a2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a40e:	7b22      	ldrb	r2, [r4, #12]
 801a410:	445a      	add	r2, fp
 801a412:	42ba      	cmp	r2, r7
 801a414:	f240 80b2 	bls.w	801a57c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a418:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a41c:	b2bb      	uxth	r3, r7
 801a41e:	eba2 0209 	sub.w	r2, r2, r9
 801a422:	441a      	add	r2, r3
 801a424:	b292      	uxth	r2, r2
 801a426:	fb0a f902 	mul.w	r9, sl, r2
 801a42a:	9205      	str	r2, [sp, #20]
 801a42c:	45d9      	cmp	r9, fp
 801a42e:	9206      	str	r2, [sp, #24]
 801a430:	f0c0 80b3 	bcc.w	801a59a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a434:	f108 0204 	add.w	r2, r8, #4
 801a438:	42ba      	cmp	r2, r7
 801a43a:	f080 80da 	bcs.w	801a5f2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801a43e:	f1a3 0904 	sub.w	r9, r3, #4
 801a442:	9b05      	ldr	r3, [sp, #20]
 801a444:	eba9 0908 	sub.w	r9, r9, r8
 801a448:	fa1f f989 	uxth.w	r9, r9
 801a44c:	ebab 0b09 	sub.w	fp, fp, r9
 801a450:	fbbb f2f3 	udiv	r2, fp, r3
 801a454:	fb03 b312 	mls	r3, r3, r2, fp
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f040 80c4 	bne.w	801a5e6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a45e:	b293      	uxth	r3, r2
 801a460:	4553      	cmp	r3, sl
 801a462:	f200 809a 	bhi.w	801a59a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a466:	2b00      	cmp	r3, #0
 801a468:	f000 80f9 	beq.w	801a65e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a46c:	f8cd 801c 	str.w	r8, [sp, #28]
 801a470:	f04f 0a00 	mov.w	sl, #0
 801a474:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a478:	f10d 0b20 	add.w	fp, sp, #32
 801a47c:	9505      	str	r5, [sp, #20]
 801a47e:	461d      	mov	r5, r3
 801a480:	e000      	b.n	801a484 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a482:	46c1      	mov	r9, r8
 801a484:	8922      	ldrh	r2, [r4, #8]
 801a486:	4658      	mov	r0, fp
 801a488:	6863      	ldr	r3, [r4, #4]
 801a48a:	f10a 0a01 	add.w	sl, sl, #1
 801a48e:	fbb6 f1f2 	udiv	r1, r6, r2
 801a492:	fbb3 f3f2 	udiv	r3, r3, r2
 801a496:	fb02 6111 	mls	r1, r2, r1, r6
 801a49a:	463a      	mov	r2, r7
 801a49c:	b289      	uxth	r1, r1
 801a49e:	fb03 f101 	mul.w	r1, r3, r1
 801a4a2:	6823      	ldr	r3, [r4, #0]
 801a4a4:	3104      	adds	r1, #4
 801a4a6:	4419      	add	r1, r3
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a4ae:	f8cd c000 	str.w	ip, [sp]
 801a4b2:	f7f7 fa6b 	bl	801198c <ucdr_init_buffer_origin_offset>
 801a4b6:	464a      	mov	r2, r9
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	210d      	movs	r1, #13
 801a4bc:	4658      	mov	r0, fp
 801a4be:	f7f9 fe83 	bl	80141c8 <uxr_buffer_submessage_header>
 801a4c2:	8921      	ldrh	r1, [r4, #8]
 801a4c4:	6863      	ldr	r3, [r4, #4]
 801a4c6:	4630      	mov	r0, r6
 801a4c8:	fbb6 f2f1 	udiv	r2, r6, r1
 801a4cc:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4d0:	fb01 6212 	mls	r2, r1, r2, r6
 801a4d4:	2101      	movs	r1, #1
 801a4d6:	b292      	uxth	r2, r2
 801a4d8:	fb02 f303 	mul.w	r3, r2, r3
 801a4dc:	6822      	ldr	r2, [r4, #0]
 801a4de:	50d7      	str	r7, [r2, r3]
 801a4e0:	f000 f9c6 	bl	801a870 <uxr_seq_num_add>
 801a4e4:	4606      	mov	r6, r0
 801a4e6:	fa1f f38a 	uxth.w	r3, sl
 801a4ea:	429d      	cmp	r5, r3
 801a4ec:	d8c9      	bhi.n	801a482 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a4ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a4f2:	9d05      	ldr	r5, [sp, #20]
 801a4f4:	8920      	ldrh	r0, [r4, #8]
 801a4f6:	463a      	mov	r2, r7
 801a4f8:	6863      	ldr	r3, [r4, #4]
 801a4fa:	fbb6 f1f0 	udiv	r1, r6, r0
 801a4fe:	fbb3 f3f0 	udiv	r3, r3, r0
 801a502:	fb00 6111 	mls	r1, r0, r1, r6
 801a506:	4658      	mov	r0, fp
 801a508:	b289      	uxth	r1, r1
 801a50a:	fb01 f303 	mul.w	r3, r1, r3
 801a50e:	6821      	ldr	r1, [r4, #0]
 801a510:	3304      	adds	r3, #4
 801a512:	4419      	add	r1, r3
 801a514:	2300      	movs	r3, #0
 801a516:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a51a:	9700      	str	r7, [sp, #0]
 801a51c:	f7f7 fa36 	bl	801198c <ucdr_init_buffer_origin_offset>
 801a520:	9f06      	ldr	r7, [sp, #24]
 801a522:	4658      	mov	r0, fp
 801a524:	2302      	movs	r3, #2
 801a526:	b2ba      	uxth	r2, r7
 801a528:	210d      	movs	r1, #13
 801a52a:	f7f9 fe4d 	bl	80141c8 <uxr_buffer_submessage_header>
 801a52e:	f108 0104 	add.w	r1, r8, #4
 801a532:	9b03      	ldr	r3, [sp, #12]
 801a534:	f1a5 0208 	sub.w	r2, r5, #8
 801a538:	8925      	ldrh	r5, [r4, #8]
 801a53a:	440b      	add	r3, r1
 801a53c:	eba2 0208 	sub.w	r2, r2, r8
 801a540:	fbb6 f0f5 	udiv	r0, r6, r5
 801a544:	4619      	mov	r1, r3
 801a546:	6863      	ldr	r3, [r4, #4]
 801a548:	fb05 6010 	mls	r0, r5, r0, r6
 801a54c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a550:	b280      	uxth	r0, r0
 801a552:	6825      	ldr	r5, [r4, #0]
 801a554:	fb00 f303 	mul.w	r3, r0, r3
 801a558:	7b20      	ldrb	r0, [r4, #12]
 801a55a:	3004      	adds	r0, #4
 801a55c:	4438      	add	r0, r7
 801a55e:	50e8      	str	r0, [r5, r3]
 801a560:	9d04      	ldr	r5, [sp, #16]
 801a562:	4628      	mov	r0, r5
 801a564:	f7f7 fa24 	bl	80119b0 <ucdr_init_buffer>
 801a568:	4628      	mov	r0, r5
 801a56a:	4622      	mov	r2, r4
 801a56c:	493d      	ldr	r1, [pc, #244]	@ (801a664 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a56e:	f7f7 f9f3 	bl	8011958 <ucdr_set_on_full_buffer_callback>
 801a572:	2001      	movs	r0, #1
 801a574:	81e6      	strh	r6, [r4, #14]
 801a576:	b011      	add	sp, #68	@ 0x44
 801a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a57c:	2101      	movs	r1, #1
 801a57e:	89e0      	ldrh	r0, [r4, #14]
 801a580:	f000 f976 	bl	801a870 <uxr_seq_num_add>
 801a584:	4605      	mov	r5, r0
 801a586:	8921      	ldrh	r1, [r4, #8]
 801a588:	8a60      	ldrh	r0, [r4, #18]
 801a58a:	f000 f971 	bl	801a870 <uxr_seq_num_add>
 801a58e:	4601      	mov	r1, r0
 801a590:	4628      	mov	r0, r5
 801a592:	f000 f975 	bl	801a880 <uxr_seq_num_cmp>
 801a596:	2800      	cmp	r0, #0
 801a598:	dd44      	ble.n	801a624 <uxr_prepare_reliable_buffer_to_write+0x298>
 801a59a:	2000      	movs	r0, #0
 801a59c:	b011      	add	sp, #68	@ 0x44
 801a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a2:	8921      	ldrh	r1, [r4, #8]
 801a5a4:	8a60      	ldrh	r0, [r4, #18]
 801a5a6:	9205      	str	r2, [sp, #20]
 801a5a8:	f000 f962 	bl	801a870 <uxr_seq_num_add>
 801a5ac:	4601      	mov	r1, r0
 801a5ae:	4630      	mov	r0, r6
 801a5b0:	f000 f966 	bl	801a880 <uxr_seq_num_cmp>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	9a05      	ldr	r2, [sp, #20]
 801a5b8:	dcef      	bgt.n	801a59a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a5ba:	8925      	ldrh	r5, [r4, #8]
 801a5bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a5c0:	fbb6 f4f5 	udiv	r4, r6, r5
 801a5c4:	fbb3 f3f5 	udiv	r3, r3, r5
 801a5c8:	fb05 6414 	mls	r4, r5, r4, r6
 801a5cc:	b2a4      	uxth	r4, r4
 801a5ce:	fb04 f303 	mul.w	r3, r4, r3
 801a5d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a5d6:	50fa      	str	r2, [r7, r3]
 801a5d8:	2300      	movs	r3, #0
 801a5da:	f8cd 8000 	str.w	r8, [sp]
 801a5de:	f7f7 f9d5 	bl	801198c <ucdr_init_buffer_origin_offset>
 801a5e2:	2001      	movs	r0, #1
 801a5e4:	e7da      	b.n	801a59c <uxr_prepare_reliable_buffer_to_write+0x210>
 801a5e6:	3201      	adds	r2, #1
 801a5e8:	9306      	str	r3, [sp, #24]
 801a5ea:	b293      	uxth	r3, r2
 801a5ec:	4553      	cmp	r3, sl
 801a5ee:	d8d4      	bhi.n	801a59a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a5f0:	e739      	b.n	801a466 <uxr_prepare_reliable_buffer_to_write+0xda>
 801a5f2:	4630      	mov	r0, r6
 801a5f4:	2101      	movs	r1, #1
 801a5f6:	9307      	str	r3, [sp, #28]
 801a5f8:	f000 f93a 	bl	801a870 <uxr_seq_num_add>
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	8920      	ldrh	r0, [r4, #8]
 801a600:	6862      	ldr	r2, [r4, #4]
 801a602:	fbb6 f1f0 	udiv	r1, r6, r0
 801a606:	fbb2 f2f0 	udiv	r2, r2, r0
 801a60a:	fb00 6111 	mls	r1, r0, r1, r6
 801a60e:	b289      	uxth	r1, r1
 801a610:	fb01 f202 	mul.w	r2, r1, r2
 801a614:	6821      	ldr	r1, [r4, #0]
 801a616:	3204      	adds	r2, #4
 801a618:	188b      	adds	r3, r1, r2
 801a61a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a61e:	9303      	str	r3, [sp, #12]
 801a620:	9b07      	ldr	r3, [sp, #28]
 801a622:	e70c      	b.n	801a43e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a624:	8921      	ldrh	r1, [r4, #8]
 801a626:	6863      	ldr	r3, [r4, #4]
 801a628:	9804      	ldr	r0, [sp, #16]
 801a62a:	fbb5 f2f1 	udiv	r2, r5, r1
 801a62e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a632:	fb01 5212 	mls	r2, r1, r2, r5
 801a636:	6821      	ldr	r1, [r4, #0]
 801a638:	b292      	uxth	r2, r2
 801a63a:	fb02 f303 	mul.w	r3, r2, r3
 801a63e:	7b22      	ldrb	r2, [r4, #12]
 801a640:	3304      	adds	r3, #4
 801a642:	445a      	add	r2, fp
 801a644:	4419      	add	r1, r3
 801a646:	f841 2c04 	str.w	r2, [r1, #-4]
 801a64a:	7b23      	ldrb	r3, [r4, #12]
 801a64c:	9300      	str	r3, [sp, #0]
 801a64e:	2300      	movs	r3, #0
 801a650:	f7f7 f99c 	bl	801198c <ucdr_init_buffer_origin_offset>
 801a654:	2001      	movs	r0, #1
 801a656:	81e5      	strh	r5, [r4, #14]
 801a658:	e7a0      	b.n	801a59c <uxr_prepare_reliable_buffer_to_write+0x210>
 801a65a:	4682      	mov	sl, r0
 801a65c:	e6cb      	b.n	801a3f6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a65e:	f10d 0b20 	add.w	fp, sp, #32
 801a662:	e747      	b.n	801a4f4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801a664:	0801a265 	.word	0x0801a265

0801a668 <uxr_prepare_next_reliable_buffer_to_send>:
 801a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a66a:	4604      	mov	r4, r0
 801a66c:	461d      	mov	r5, r3
 801a66e:	460f      	mov	r7, r1
 801a670:	8a00      	ldrh	r0, [r0, #16]
 801a672:	2101      	movs	r1, #1
 801a674:	4616      	mov	r6, r2
 801a676:	f000 f8fb 	bl	801a870 <uxr_seq_num_add>
 801a67a:	8028      	strh	r0, [r5, #0]
 801a67c:	8922      	ldrh	r2, [r4, #8]
 801a67e:	6863      	ldr	r3, [r4, #4]
 801a680:	fbb0 f1f2 	udiv	r1, r0, r2
 801a684:	fbb3 f3f2 	udiv	r3, r3, r2
 801a688:	fb02 0c11 	mls	ip, r2, r1, r0
 801a68c:	89e1      	ldrh	r1, [r4, #14]
 801a68e:	fa1f fc8c 	uxth.w	ip, ip
 801a692:	fb0c fc03 	mul.w	ip, ip, r3
 801a696:	6823      	ldr	r3, [r4, #0]
 801a698:	f10c 0c04 	add.w	ip, ip, #4
 801a69c:	4463      	add	r3, ip
 801a69e:	603b      	str	r3, [r7, #0]
 801a6a0:	6823      	ldr	r3, [r4, #0]
 801a6a2:	449c      	add	ip, r3
 801a6a4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a6a8:	6033      	str	r3, [r6, #0]
 801a6aa:	f000 f8e9 	bl	801a880 <uxr_seq_num_cmp>
 801a6ae:	2800      	cmp	r0, #0
 801a6b0:	dd01      	ble.n	801a6b6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a6b2:	2000      	movs	r0, #0
 801a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6b6:	7b23      	ldrb	r3, [r4, #12]
 801a6b8:	6832      	ldr	r2, [r6, #0]
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d9f9      	bls.n	801a6b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a6be:	8a61      	ldrh	r1, [r4, #18]
 801a6c0:	8a20      	ldrh	r0, [r4, #16]
 801a6c2:	f000 f8d9 	bl	801a878 <uxr_seq_num_sub>
 801a6c6:	8923      	ldrh	r3, [r4, #8]
 801a6c8:	4283      	cmp	r3, r0
 801a6ca:	d0f2      	beq.n	801a6b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a6cc:	8828      	ldrh	r0, [r5, #0]
 801a6ce:	89e3      	ldrh	r3, [r4, #14]
 801a6d0:	8220      	strh	r0, [r4, #16]
 801a6d2:	4298      	cmp	r0, r3
 801a6d4:	d001      	beq.n	801a6da <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a6d6:	2001      	movs	r0, #1
 801a6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6da:	2101      	movs	r1, #1
 801a6dc:	f000 f8c8 	bl	801a870 <uxr_seq_num_add>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	2001      	movs	r0, #1
 801a6e4:	81e3      	strh	r3, [r4, #14]
 801a6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a6e8 <uxr_update_output_stream_heartbeat_timestamp>:
 801a6e8:	b570      	push	{r4, r5, r6, lr}
 801a6ea:	8a01      	ldrh	r1, [r0, #16]
 801a6ec:	4604      	mov	r4, r0
 801a6ee:	8a40      	ldrh	r0, [r0, #18]
 801a6f0:	4615      	mov	r5, r2
 801a6f2:	461e      	mov	r6, r3
 801a6f4:	f000 f8c4 	bl	801a880 <uxr_seq_num_cmp>
 801a6f8:	2800      	cmp	r0, #0
 801a6fa:	db07      	blt.n	801a70c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a6fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a700:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a704:	2000      	movs	r0, #0
 801a706:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a70a:	bd70      	pop	{r4, r5, r6, pc}
 801a70c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a710:	b940      	cbnz	r0, 801a724 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a712:	2301      	movs	r3, #1
 801a714:	f884 3020 	strb.w	r3, [r4, #32]
 801a718:	3564      	adds	r5, #100	@ 0x64
 801a71a:	f146 0600 	adc.w	r6, r6, #0
 801a71e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a722:	bd70      	pop	{r4, r5, r6, pc}
 801a724:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a728:	4295      	cmp	r5, r2
 801a72a:	eb76 0303 	sbcs.w	r3, r6, r3
 801a72e:	db04      	blt.n	801a73a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a730:	1c43      	adds	r3, r0, #1
 801a732:	2001      	movs	r0, #1
 801a734:	f884 3020 	strb.w	r3, [r4, #32]
 801a738:	e7ee      	b.n	801a718 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a73a:	2000      	movs	r0, #0
 801a73c:	e7ec      	b.n	801a718 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a73e:	bf00      	nop

0801a740 <uxr_begin_output_nack_buffer_it>:
 801a740:	8a40      	ldrh	r0, [r0, #18]
 801a742:	4770      	bx	lr

0801a744 <uxr_next_reliable_nack_buffer_to_send>:
 801a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a748:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801a74c:	b197      	cbz	r7, 801a774 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a74e:	4680      	mov	r8, r0
 801a750:	460d      	mov	r5, r1
 801a752:	4616      	mov	r6, r2
 801a754:	461c      	mov	r4, r3
 801a756:	8818      	ldrh	r0, [r3, #0]
 801a758:	2101      	movs	r1, #1
 801a75a:	f000 f889 	bl	801a870 <uxr_seq_num_add>
 801a75e:	8020      	strh	r0, [r4, #0]
 801a760:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a764:	f000 f88c 	bl	801a880 <uxr_seq_num_cmp>
 801a768:	2800      	cmp	r0, #0
 801a76a:	dd06      	ble.n	801a77a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a76c:	2300      	movs	r3, #0
 801a76e:	461f      	mov	r7, r3
 801a770:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801a774:	4638      	mov	r0, r7
 801a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a77a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a77e:	8820      	ldrh	r0, [r4, #0]
 801a780:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a784:	fbb0 f3f2 	udiv	r3, r0, r2
 801a788:	fbb1 fcf2 	udiv	ip, r1, r2
 801a78c:	fb02 0313 	mls	r3, r2, r3, r0
 801a790:	b29b      	uxth	r3, r3
 801a792:	fb03 fc0c 	mul.w	ip, r3, ip
 801a796:	f8d8 3000 	ldr.w	r3, [r8]
 801a79a:	f10c 0c04 	add.w	ip, ip, #4
 801a79e:	4463      	add	r3, ip
 801a7a0:	602b      	str	r3, [r5, #0]
 801a7a2:	f8d8 3000 	ldr.w	r3, [r8]
 801a7a6:	4463      	add	r3, ip
 801a7a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a7ac:	6033      	str	r3, [r6, #0]
 801a7ae:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d0d0      	beq.n	801a758 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a7b6:	e7dd      	b.n	801a774 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a7b8 <uxr_process_acknack>:
 801a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ba:	4604      	mov	r4, r0
 801a7bc:	460e      	mov	r6, r1
 801a7be:	4610      	mov	r0, r2
 801a7c0:	2101      	movs	r1, #1
 801a7c2:	f000 f859 	bl	801a878 <uxr_seq_num_sub>
 801a7c6:	8a61      	ldrh	r1, [r4, #18]
 801a7c8:	f000 f856 	bl	801a878 <uxr_seq_num_sub>
 801a7cc:	b1c8      	cbz	r0, 801a802 <uxr_process_acknack+0x4a>
 801a7ce:	4605      	mov	r5, r0
 801a7d0:	2700      	movs	r7, #0
 801a7d2:	2101      	movs	r1, #1
 801a7d4:	8a60      	ldrh	r0, [r4, #18]
 801a7d6:	f000 f84b 	bl	801a870 <uxr_seq_num_add>
 801a7da:	8923      	ldrh	r3, [r4, #8]
 801a7dc:	6862      	ldr	r2, [r4, #4]
 801a7de:	3701      	adds	r7, #1
 801a7e0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a7e4:	6821      	ldr	r1, [r4, #0]
 801a7e6:	42bd      	cmp	r5, r7
 801a7e8:	8260      	strh	r0, [r4, #18]
 801a7ea:	fbb0 fef3 	udiv	lr, r0, r3
 801a7ee:	fbb2 f2f3 	udiv	r2, r2, r3
 801a7f2:	fb03 031e 	mls	r3, r3, lr, r0
 801a7f6:	b29b      	uxth	r3, r3
 801a7f8:	fb02 f303 	mul.w	r3, r2, r3
 801a7fc:	f841 c003 	str.w	ip, [r1, r3]
 801a800:	d1e7      	bne.n	801a7d2 <uxr_process_acknack+0x1a>
 801a802:	3e00      	subs	r6, #0
 801a804:	f04f 0300 	mov.w	r3, #0
 801a808:	bf18      	it	ne
 801a80a:	2601      	movne	r6, #1
 801a80c:	f884 3020 	strb.w	r3, [r4, #32]
 801a810:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a816:	bf00      	nop

0801a818 <uxr_is_output_up_to_date>:
 801a818:	8a01      	ldrh	r1, [r0, #16]
 801a81a:	8a40      	ldrh	r0, [r0, #18]
 801a81c:	b508      	push	{r3, lr}
 801a81e:	f000 f82f 	bl	801a880 <uxr_seq_num_cmp>
 801a822:	fab0 f080 	clz	r0, r0
 801a826:	0940      	lsrs	r0, r0, #5
 801a828:	bd08      	pop	{r3, pc}
 801a82a:	bf00      	nop

0801a82c <get_available_free_slots>:
 801a82c:	8901      	ldrh	r1, [r0, #8]
 801a82e:	b1e1      	cbz	r1, 801a86a <get_available_free_slots+0x3e>
 801a830:	6843      	ldr	r3, [r0, #4]
 801a832:	f04f 0c00 	mov.w	ip, #0
 801a836:	b530      	push	{r4, r5, lr}
 801a838:	fbb3 fef1 	udiv	lr, r3, r1
 801a83c:	6805      	ldr	r5, [r0, #0]
 801a83e:	4662      	mov	r2, ip
 801a840:	7b04      	ldrb	r4, [r0, #12]
 801a842:	4660      	mov	r0, ip
 801a844:	f10c 0c01 	add.w	ip, ip, #1
 801a848:	fbb2 f3f1 	udiv	r3, r2, r1
 801a84c:	fb01 2313 	mls	r3, r1, r3, r2
 801a850:	fa1f f28c 	uxth.w	r2, ip
 801a854:	b29b      	uxth	r3, r3
 801a856:	fb0e f303 	mul.w	r3, lr, r3
 801a85a:	58eb      	ldr	r3, [r5, r3]
 801a85c:	429c      	cmp	r4, r3
 801a85e:	d101      	bne.n	801a864 <get_available_free_slots+0x38>
 801a860:	3001      	adds	r0, #1
 801a862:	b280      	uxth	r0, r0
 801a864:	428a      	cmp	r2, r1
 801a866:	d3ed      	bcc.n	801a844 <get_available_free_slots+0x18>
 801a868:	bd30      	pop	{r4, r5, pc}
 801a86a:	4608      	mov	r0, r1
 801a86c:	4770      	bx	lr
 801a86e:	bf00      	nop

0801a870 <uxr_seq_num_add>:
 801a870:	4408      	add	r0, r1
 801a872:	b280      	uxth	r0, r0
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop

0801a878 <uxr_seq_num_sub>:
 801a878:	1a40      	subs	r0, r0, r1
 801a87a:	b280      	uxth	r0, r0
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop

0801a880 <uxr_seq_num_cmp>:
 801a880:	4288      	cmp	r0, r1
 801a882:	d011      	beq.n	801a8a8 <uxr_seq_num_cmp+0x28>
 801a884:	d309      	bcc.n	801a89a <uxr_seq_num_cmp+0x1a>
 801a886:	4288      	cmp	r0, r1
 801a888:	d910      	bls.n	801a8ac <uxr_seq_num_cmp+0x2c>
 801a88a:	1a40      	subs	r0, r0, r1
 801a88c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a890:	bfd4      	ite	le
 801a892:	2001      	movle	r0, #1
 801a894:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a898:	4770      	bx	lr
 801a89a:	1a0b      	subs	r3, r1, r0
 801a89c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a8a0:	daf1      	bge.n	801a886 <uxr_seq_num_cmp+0x6>
 801a8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a8a6:	4770      	bx	lr
 801a8a8:	2000      	movs	r0, #0
 801a8aa:	4770      	bx	lr
 801a8ac:	2001      	movs	r0, #1
 801a8ae:	4770      	bx	lr

0801a8b0 <rcl_get_default_domain_id>:
 801a8b0:	b530      	push	{r4, r5, lr}
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	b083      	sub	sp, #12
 801a8b6:	9300      	str	r3, [sp, #0]
 801a8b8:	b1d0      	cbz	r0, 801a8f0 <rcl_get_default_domain_id+0x40>
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	4669      	mov	r1, sp
 801a8be:	4815      	ldr	r0, [pc, #84]	@ (801a914 <rcl_get_default_domain_id+0x64>)
 801a8c0:	f7fd fd1a 	bl	80182f8 <rcutils_get_env>
 801a8c4:	4602      	mov	r2, r0
 801a8c6:	b110      	cbz	r0, 801a8ce <rcl_get_default_domain_id+0x1e>
 801a8c8:	2001      	movs	r0, #1
 801a8ca:	b003      	add	sp, #12
 801a8cc:	bd30      	pop	{r4, r5, pc}
 801a8ce:	9b00      	ldr	r3, [sp, #0]
 801a8d0:	b18b      	cbz	r3, 801a8f6 <rcl_get_default_domain_id+0x46>
 801a8d2:	7818      	ldrb	r0, [r3, #0]
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	d0f8      	beq.n	801a8ca <rcl_get_default_domain_id+0x1a>
 801a8d8:	a901      	add	r1, sp, #4
 801a8da:	4618      	mov	r0, r3
 801a8dc:	9201      	str	r2, [sp, #4]
 801a8de:	f000 fe2d 	bl	801b53c <strtoul>
 801a8e2:	4605      	mov	r5, r0
 801a8e4:	b150      	cbz	r0, 801a8fc <rcl_get_default_domain_id+0x4c>
 801a8e6:	1c43      	adds	r3, r0, #1
 801a8e8:	d00d      	beq.n	801a906 <rcl_get_default_domain_id+0x56>
 801a8ea:	2000      	movs	r0, #0
 801a8ec:	6025      	str	r5, [r4, #0]
 801a8ee:	e7ec      	b.n	801a8ca <rcl_get_default_domain_id+0x1a>
 801a8f0:	200b      	movs	r0, #11
 801a8f2:	b003      	add	sp, #12
 801a8f4:	bd30      	pop	{r4, r5, pc}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	b003      	add	sp, #12
 801a8fa:	bd30      	pop	{r4, r5, pc}
 801a8fc:	9b01      	ldr	r3, [sp, #4]
 801a8fe:	781b      	ldrb	r3, [r3, #0]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d0f2      	beq.n	801a8ea <rcl_get_default_domain_id+0x3a>
 801a904:	e7e0      	b.n	801a8c8 <rcl_get_default_domain_id+0x18>
 801a906:	f001 f953 	bl	801bbb0 <__errno>
 801a90a:	6803      	ldr	r3, [r0, #0]
 801a90c:	2b22      	cmp	r3, #34	@ 0x22
 801a90e:	d1ec      	bne.n	801a8ea <rcl_get_default_domain_id+0x3a>
 801a910:	e7da      	b.n	801a8c8 <rcl_get_default_domain_id+0x18>
 801a912:	bf00      	nop
 801a914:	0801d4b8 	.word	0x0801d4b8

0801a918 <rcl_expand_topic_name>:
 801a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a91c:	b08d      	sub	sp, #52	@ 0x34
 801a91e:	4698      	mov	r8, r3
 801a920:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a922:	9207      	str	r2, [sp, #28]
 801a924:	2b00      	cmp	r3, #0
 801a926:	bf18      	it	ne
 801a928:	f1b8 0f00 	cmpne.w	r8, #0
 801a92c:	bf0c      	ite	eq
 801a92e:	2301      	moveq	r3, #1
 801a930:	2300      	movne	r3, #0
 801a932:	2a00      	cmp	r2, #0
 801a934:	bf08      	it	eq
 801a936:	f043 0301 	orreq.w	r3, r3, #1
 801a93a:	2900      	cmp	r1, #0
 801a93c:	bf08      	it	eq
 801a93e:	f043 0301 	orreq.w	r3, r3, #1
 801a942:	2b00      	cmp	r3, #0
 801a944:	d13d      	bne.n	801a9c2 <rcl_expand_topic_name+0xaa>
 801a946:	fab0 f280 	clz	r2, r0
 801a94a:	4604      	mov	r4, r0
 801a94c:	0952      	lsrs	r2, r2, #5
 801a94e:	2800      	cmp	r0, #0
 801a950:	d037      	beq.n	801a9c2 <rcl_expand_topic_name+0xaa>
 801a952:	460f      	mov	r7, r1
 801a954:	a90b      	add	r1, sp, #44	@ 0x2c
 801a956:	f000 fa51 	bl	801adfc <rcl_validate_topic_name>
 801a95a:	4605      	mov	r5, r0
 801a95c:	bb68      	cbnz	r0, 801a9ba <rcl_expand_topic_name+0xa2>
 801a95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a960:	2b00      	cmp	r3, #0
 801a962:	d137      	bne.n	801a9d4 <rcl_expand_topic_name+0xbc>
 801a964:	4602      	mov	r2, r0
 801a966:	a90b      	add	r1, sp, #44	@ 0x2c
 801a968:	4638      	mov	r0, r7
 801a96a:	f7fe f927 	bl	8018bbc <rmw_validate_node_name>
 801a96e:	bb68      	cbnz	r0, 801a9cc <rcl_expand_topic_name+0xb4>
 801a970:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a972:	2b00      	cmp	r3, #0
 801a974:	d133      	bne.n	801a9de <rcl_expand_topic_name+0xc6>
 801a976:	462a      	mov	r2, r5
 801a978:	a90b      	add	r1, sp, #44	@ 0x2c
 801a97a:	9807      	ldr	r0, [sp, #28]
 801a97c:	f7fe f900 	bl	8018b80 <rmw_validate_namespace>
 801a980:	bb20      	cbnz	r0, 801a9cc <rcl_expand_topic_name+0xb4>
 801a982:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801a984:	2d00      	cmp	r5, #0
 801a986:	f040 80a2 	bne.w	801aace <rcl_expand_topic_name+0x1b6>
 801a98a:	217b      	movs	r1, #123	@ 0x7b
 801a98c:	4620      	mov	r0, r4
 801a98e:	f001 f883 	bl	801ba98 <strchr>
 801a992:	7823      	ldrb	r3, [r4, #0]
 801a994:	4681      	mov	r9, r0
 801a996:	bb20      	cbnz	r0, 801a9e2 <rcl_expand_topic_name+0xca>
 801a998:	2b2f      	cmp	r3, #47	@ 0x2f
 801a99a:	d122      	bne.n	801a9e2 <rcl_expand_topic_name+0xca>
 801a99c:	ab19      	add	r3, sp, #100	@ 0x64
 801a99e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a9a2:	ab16      	add	r3, sp, #88	@ 0x58
 801a9a4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a9ac:	f7fd fe06 	bl	80185bc <rcutils_strdup>
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a9b4:	bf08      	it	eq
 801a9b6:	250a      	moveq	r5, #10
 801a9b8:	6018      	str	r0, [r3, #0]
 801a9ba:	4628      	mov	r0, r5
 801a9bc:	b00d      	add	sp, #52	@ 0x34
 801a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9c2:	250b      	movs	r5, #11
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	b00d      	add	sp, #52	@ 0x34
 801a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9cc:	f7fa fe4e 	bl	801566c <rcl_convert_rmw_ret_to_rcl_ret>
 801a9d0:	4605      	mov	r5, r0
 801a9d2:	e7f2      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801a9d4:	2567      	movs	r5, #103	@ 0x67
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	b00d      	add	sp, #52	@ 0x34
 801a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9de:	25c9      	movs	r5, #201	@ 0xc9
 801a9e0:	e7eb      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801a9e2:	2b7e      	cmp	r3, #126	@ 0x7e
 801a9e4:	d075      	beq.n	801aad2 <rcl_expand_topic_name+0x1ba>
 801a9e6:	f1b9 0f00 	cmp.w	r9, #0
 801a9ea:	f000 80c2 	beq.w	801ab72 <rcl_expand_topic_name+0x25a>
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	46a2      	mov	sl, r4
 801a9f2:	461e      	mov	r6, r3
 801a9f4:	9508      	str	r5, [sp, #32]
 801a9f6:	4655      	mov	r5, sl
 801a9f8:	9409      	str	r4, [sp, #36]	@ 0x24
 801a9fa:	46b2      	mov	sl, r6
 801a9fc:	464c      	mov	r4, r9
 801a9fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801aa02:	2c00      	cmp	r4, #0
 801aa04:	f000 80ae 	beq.w	801ab64 <rcl_expand_topic_name+0x24c>
 801aa08:	217d      	movs	r1, #125	@ 0x7d
 801aa0a:	4628      	mov	r0, r5
 801aa0c:	f001 f844 	bl	801ba98 <strchr>
 801aa10:	eba0 0904 	sub.w	r9, r0, r4
 801aa14:	4621      	mov	r1, r4
 801aa16:	4869      	ldr	r0, [pc, #420]	@ (801abbc <rcl_expand_topic_name+0x2a4>)
 801aa18:	f109 0601 	add.w	r6, r9, #1
 801aa1c:	4632      	mov	r2, r6
 801aa1e:	f001 f848 	bl	801bab2 <strncmp>
 801aa22:	2800      	cmp	r0, #0
 801aa24:	d051      	beq.n	801aaca <rcl_expand_topic_name+0x1b2>
 801aa26:	4632      	mov	r2, r6
 801aa28:	4621      	mov	r1, r4
 801aa2a:	4865      	ldr	r0, [pc, #404]	@ (801abc0 <rcl_expand_topic_name+0x2a8>)
 801aa2c:	f001 f841 	bl	801bab2 <strncmp>
 801aa30:	b128      	cbz	r0, 801aa3e <rcl_expand_topic_name+0x126>
 801aa32:	4632      	mov	r2, r6
 801aa34:	4621      	mov	r1, r4
 801aa36:	4863      	ldr	r0, [pc, #396]	@ (801abc4 <rcl_expand_topic_name+0x2ac>)
 801aa38:	f001 f83b 	bl	801bab2 <strncmp>
 801aa3c:	bb38      	cbnz	r0, 801aa8e <rcl_expand_topic_name+0x176>
 801aa3e:	46d9      	mov	r9, fp
 801aa40:	ab18      	add	r3, sp, #96	@ 0x60
 801aa42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aa46:	ab16      	add	r3, sp, #88	@ 0x58
 801aa48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	4631      	mov	r1, r6
 801aa50:	cb0c      	ldmia	r3, {r2, r3}
 801aa52:	f7fd fdd5 	bl	8018600 <rcutils_strndup>
 801aa56:	4604      	mov	r4, r0
 801aa58:	2800      	cmp	r0, #0
 801aa5a:	f000 80a3 	beq.w	801aba4 <rcl_expand_topic_name+0x28c>
 801aa5e:	464a      	mov	r2, r9
 801aa60:	4628      	mov	r0, r5
 801aa62:	ab16      	add	r3, sp, #88	@ 0x58
 801aa64:	4621      	mov	r1, r4
 801aa66:	f7fd fca9 	bl	80183bc <rcutils_repl_str>
 801aa6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa6c:	4605      	mov	r5, r0
 801aa6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa70:	4620      	mov	r0, r4
 801aa72:	4798      	blx	r3
 801aa74:	4650      	mov	r0, sl
 801aa76:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa7a:	4798      	blx	r3
 801aa7c:	2d00      	cmp	r5, #0
 801aa7e:	d06c      	beq.n	801ab5a <rcl_expand_topic_name+0x242>
 801aa80:	217b      	movs	r1, #123	@ 0x7b
 801aa82:	4628      	mov	r0, r5
 801aa84:	f001 f808 	bl	801ba98 <strchr>
 801aa88:	46aa      	mov	sl, r5
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	e7b9      	b.n	801aa02 <rcl_expand_topic_name+0xea>
 801aa8e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801aa92:	1c61      	adds	r1, r4, #1
 801aa94:	4640      	mov	r0, r8
 801aa96:	f7fd fecb 	bl	8018830 <rcutils_string_map_getn>
 801aa9a:	4681      	mov	r9, r0
 801aa9c:	2800      	cmp	r0, #0
 801aa9e:	d1cf      	bne.n	801aa40 <rcl_expand_topic_name+0x128>
 801aaa0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801aaa2:	aa18      	add	r2, sp, #96	@ 0x60
 801aaa4:	2569      	movs	r5, #105	@ 0x69
 801aaa6:	6018      	str	r0, [r3, #0]
 801aaa8:	ab16      	add	r3, sp, #88	@ 0x58
 801aaaa:	ca07      	ldmia	r2, {r0, r1, r2}
 801aaac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aab0:	4631      	mov	r1, r6
 801aab2:	4620      	mov	r0, r4
 801aab4:	cb0c      	ldmia	r3, {r2, r3}
 801aab6:	f7fd fda3 	bl	8018600 <rcutils_strndup>
 801aaba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aabc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aabe:	4798      	blx	r3
 801aac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aac4:	4650      	mov	r0, sl
 801aac6:	4798      	blx	r3
 801aac8:	e777      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801aaca:	46b9      	mov	r9, r7
 801aacc:	e7b8      	b.n	801aa40 <rcl_expand_topic_name+0x128>
 801aace:	25ca      	movs	r5, #202	@ 0xca
 801aad0:	e773      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801aad2:	9e07      	ldr	r6, [sp, #28]
 801aad4:	4630      	mov	r0, r6
 801aad6:	f7e5 fc0d 	bl	80002f4 <strlen>
 801aada:	4a3b      	ldr	r2, [pc, #236]	@ (801abc8 <rcl_expand_topic_name+0x2b0>)
 801aadc:	4b3b      	ldr	r3, [pc, #236]	@ (801abcc <rcl_expand_topic_name+0x2b4>)
 801aade:	9603      	str	r6, [sp, #12]
 801aae0:	2801      	cmp	r0, #1
 801aae2:	bf18      	it	ne
 801aae4:	4613      	movne	r3, r2
 801aae6:	9704      	str	r7, [sp, #16]
 801aae8:	9302      	str	r3, [sp, #8]
 801aaea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801aaec:	9300      	str	r3, [sp, #0]
 801aaee:	1c63      	adds	r3, r4, #1
 801aaf0:	9305      	str	r3, [sp, #20]
 801aaf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aaf6:	9301      	str	r3, [sp, #4]
 801aaf8:	ab16      	add	r3, sp, #88	@ 0x58
 801aafa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aafc:	f7fd fc24 	bl	8018348 <rcutils_format_string_limit>
 801ab00:	4606      	mov	r6, r0
 801ab02:	b350      	cbz	r0, 801ab5a <rcl_expand_topic_name+0x242>
 801ab04:	f1b9 0f00 	cmp.w	r9, #0
 801ab08:	d005      	beq.n	801ab16 <rcl_expand_topic_name+0x1fe>
 801ab0a:	217b      	movs	r1, #123	@ 0x7b
 801ab0c:	46b2      	mov	sl, r6
 801ab0e:	f000 ffc3 	bl	801ba98 <strchr>
 801ab12:	4681      	mov	r9, r0
 801ab14:	e76e      	b.n	801a9f4 <rcl_expand_topic_name+0xdc>
 801ab16:	7833      	ldrb	r3, [r6, #0]
 801ab18:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab1a:	d01b      	beq.n	801ab54 <rcl_expand_topic_name+0x23c>
 801ab1c:	9c07      	ldr	r4, [sp, #28]
 801ab1e:	4620      	mov	r0, r4
 801ab20:	f7e5 fbe8 	bl	80002f4 <strlen>
 801ab24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab28:	4a29      	ldr	r2, [pc, #164]	@ (801abd0 <rcl_expand_topic_name+0x2b8>)
 801ab2a:	9301      	str	r3, [sp, #4]
 801ab2c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ab2e:	9604      	str	r6, [sp, #16]
 801ab30:	9300      	str	r3, [sp, #0]
 801ab32:	4b28      	ldr	r3, [pc, #160]	@ (801abd4 <rcl_expand_topic_name+0x2bc>)
 801ab34:	9403      	str	r4, [sp, #12]
 801ab36:	2801      	cmp	r0, #1
 801ab38:	bf18      	it	ne
 801ab3a:	4613      	movne	r3, r2
 801ab3c:	9302      	str	r3, [sp, #8]
 801ab3e:	ab16      	add	r3, sp, #88	@ 0x58
 801ab40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab42:	f7fd fc01 	bl	8018348 <rcutils_format_string_limit>
 801ab46:	4603      	mov	r3, r0
 801ab48:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ab4e:	461e      	mov	r6, r3
 801ab50:	4790      	blx	r2
 801ab52:	b116      	cbz	r6, 801ab5a <rcl_expand_topic_name+0x242>
 801ab54:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ab56:	601e      	str	r6, [r3, #0]
 801ab58:	e72f      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ab5e:	250a      	movs	r5, #10
 801ab60:	6013      	str	r3, [r2, #0]
 801ab62:	e72a      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801ab64:	4653      	mov	r3, sl
 801ab66:	4656      	mov	r6, sl
 801ab68:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d1d2      	bne.n	801ab16 <rcl_expand_topic_name+0x1fe>
 801ab70:	7823      	ldrb	r3, [r4, #0]
 801ab72:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab74:	d01e      	beq.n	801abb4 <rcl_expand_topic_name+0x29c>
 801ab76:	9e07      	ldr	r6, [sp, #28]
 801ab78:	4630      	mov	r0, r6
 801ab7a:	f7e5 fbbb 	bl	80002f4 <strlen>
 801ab7e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ab80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab84:	9603      	str	r6, [sp, #12]
 801ab86:	9404      	str	r4, [sp, #16]
 801ab88:	e9cd 2300 	strd	r2, r3, [sp]
 801ab8c:	4a10      	ldr	r2, [pc, #64]	@ (801abd0 <rcl_expand_topic_name+0x2b8>)
 801ab8e:	4b11      	ldr	r3, [pc, #68]	@ (801abd4 <rcl_expand_topic_name+0x2bc>)
 801ab90:	2801      	cmp	r0, #1
 801ab92:	bf18      	it	ne
 801ab94:	4613      	movne	r3, r2
 801ab96:	9302      	str	r3, [sp, #8]
 801ab98:	ab16      	add	r3, sp, #88	@ 0x58
 801ab9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab9c:	f7fd fbd4 	bl	8018348 <rcutils_format_string_limit>
 801aba0:	4606      	mov	r6, r0
 801aba2:	e7d6      	b.n	801ab52 <rcl_expand_topic_name+0x23a>
 801aba4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801aba8:	4650      	mov	r0, sl
 801abaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801abac:	6014      	str	r4, [r2, #0]
 801abae:	250a      	movs	r5, #10
 801abb0:	4798      	blx	r3
 801abb2:	e702      	b.n	801a9ba <rcl_expand_topic_name+0xa2>
 801abb4:	2300      	movs	r3, #0
 801abb6:	461e      	mov	r6, r3
 801abb8:	e7cc      	b.n	801ab54 <rcl_expand_topic_name+0x23c>
 801abba:	bf00      	nop
 801abbc:	0801d4d0 	.word	0x0801d4d0
 801abc0:	0801d4d8 	.word	0x0801d4d8
 801abc4:	0801d4e0 	.word	0x0801d4e0
 801abc8:	0801d4c8 	.word	0x0801d4c8
 801abcc:	0801cb2c 	.word	0x0801cb2c
 801abd0:	0801caf4 	.word	0x0801caf4
 801abd4:	0801cb3c 	.word	0x0801cb3c

0801abd8 <rcl_get_default_topic_name_substitutions>:
 801abd8:	2800      	cmp	r0, #0
 801abda:	bf0c      	ite	eq
 801abdc:	200b      	moveq	r0, #11
 801abde:	2000      	movne	r0, #0
 801abe0:	4770      	bx	lr
 801abe2:	bf00      	nop

0801abe4 <rcl_get_zero_initialized_guard_condition>:
 801abe4:	4a03      	ldr	r2, [pc, #12]	@ (801abf4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801abe6:	4603      	mov	r3, r0
 801abe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801abec:	e883 0003 	stmia.w	r3, {r0, r1}
 801abf0:	4618      	mov	r0, r3
 801abf2:	4770      	bx	lr
 801abf4:	0801d4ec 	.word	0x0801d4ec

0801abf8 <rcl_guard_condition_init>:
 801abf8:	b082      	sub	sp, #8
 801abfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abfc:	b087      	sub	sp, #28
 801abfe:	4604      	mov	r4, r0
 801ac00:	460d      	mov	r5, r1
 801ac02:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801ac06:	f10d 0c04 	add.w	ip, sp, #4
 801ac0a:	e9ce 2300 	strd	r2, r3, [lr]
 801ac0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ac12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac16:	f8de 3000 	ldr.w	r3, [lr]
 801ac1a:	a801      	add	r0, sp, #4
 801ac1c:	f8cc 3000 	str.w	r3, [ip]
 801ac20:	f7f4 f8e6 	bl	800edf0 <rcutils_allocator_is_valid>
 801ac24:	b354      	cbz	r4, 801ac7c <rcl_guard_condition_init+0x84>
 801ac26:	f080 0301 	eor.w	r3, r0, #1
 801ac2a:	b2db      	uxtb	r3, r3
 801ac2c:	bb33      	cbnz	r3, 801ac7c <rcl_guard_condition_init+0x84>
 801ac2e:	6866      	ldr	r6, [r4, #4]
 801ac30:	b9ee      	cbnz	r6, 801ac6e <rcl_guard_condition_init+0x76>
 801ac32:	b31d      	cbz	r5, 801ac7c <rcl_guard_condition_init+0x84>
 801ac34:	4628      	mov	r0, r5
 801ac36:	f7fa fd37 	bl	80156a8 <rcl_context_is_valid>
 801ac3a:	b308      	cbz	r0, 801ac80 <rcl_guard_condition_init+0x88>
 801ac3c:	9b01      	ldr	r3, [sp, #4]
 801ac3e:	201c      	movs	r0, #28
 801ac40:	9905      	ldr	r1, [sp, #20]
 801ac42:	4798      	blx	r3
 801ac44:	4607      	mov	r7, r0
 801ac46:	6060      	str	r0, [r4, #4]
 801ac48:	b310      	cbz	r0, 801ac90 <rcl_guard_condition_init+0x98>
 801ac4a:	6828      	ldr	r0, [r5, #0]
 801ac4c:	3028      	adds	r0, #40	@ 0x28
 801ac4e:	f000 f999 	bl	801af84 <rmw_create_guard_condition>
 801ac52:	6038      	str	r0, [r7, #0]
 801ac54:	6860      	ldr	r0, [r4, #4]
 801ac56:	6807      	ldr	r7, [r0, #0]
 801ac58:	b1a7      	cbz	r7, 801ac84 <rcl_guard_condition_init+0x8c>
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	ac01      	add	r4, sp, #4
 801ac5e:	f100 0708 	add.w	r7, r0, #8
 801ac62:	7103      	strb	r3, [r0, #4]
 801ac64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ac68:	6823      	ldr	r3, [r4, #0]
 801ac6a:	603b      	str	r3, [r7, #0]
 801ac6c:	e000      	b.n	801ac70 <rcl_guard_condition_init+0x78>
 801ac6e:	2664      	movs	r6, #100	@ 0x64
 801ac70:	4630      	mov	r0, r6
 801ac72:	b007      	add	sp, #28
 801ac74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ac78:	b002      	add	sp, #8
 801ac7a:	4770      	bx	lr
 801ac7c:	260b      	movs	r6, #11
 801ac7e:	e7f7      	b.n	801ac70 <rcl_guard_condition_init+0x78>
 801ac80:	2665      	movs	r6, #101	@ 0x65
 801ac82:	e7f5      	b.n	801ac70 <rcl_guard_condition_init+0x78>
 801ac84:	9b02      	ldr	r3, [sp, #8]
 801ac86:	2601      	movs	r6, #1
 801ac88:	9905      	ldr	r1, [sp, #20]
 801ac8a:	4798      	blx	r3
 801ac8c:	6067      	str	r7, [r4, #4]
 801ac8e:	e7ef      	b.n	801ac70 <rcl_guard_condition_init+0x78>
 801ac90:	260a      	movs	r6, #10
 801ac92:	e7ed      	b.n	801ac70 <rcl_guard_condition_init+0x78>

0801ac94 <rcl_guard_condition_init_from_rmw>:
 801ac94:	b082      	sub	sp, #8
 801ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac9a:	b086      	sub	sp, #24
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	460e      	mov	r6, r1
 801aca0:	4615      	mov	r5, r2
 801aca2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801aca6:	f10d 0e04 	add.w	lr, sp, #4
 801acaa:	f84c 3f04 	str.w	r3, [ip, #4]!
 801acae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801acb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801acb6:	f8dc 3000 	ldr.w	r3, [ip]
 801acba:	a801      	add	r0, sp, #4
 801acbc:	f8ce 3000 	str.w	r3, [lr]
 801acc0:	f7f4 f896 	bl	800edf0 <rcutils_allocator_is_valid>
 801acc4:	f080 0301 	eor.w	r3, r0, #1
 801acc8:	b2db      	uxtb	r3, r3
 801acca:	bb3b      	cbnz	r3, 801ad1c <rcl_guard_condition_init_from_rmw+0x88>
 801accc:	b334      	cbz	r4, 801ad1c <rcl_guard_condition_init_from_rmw+0x88>
 801acce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801acd2:	f1b8 0f00 	cmp.w	r8, #0
 801acd6:	d11a      	bne.n	801ad0e <rcl_guard_condition_init_from_rmw+0x7a>
 801acd8:	b305      	cbz	r5, 801ad1c <rcl_guard_condition_init_from_rmw+0x88>
 801acda:	4628      	mov	r0, r5
 801acdc:	f7fa fce4 	bl	80156a8 <rcl_context_is_valid>
 801ace0:	b1f0      	cbz	r0, 801ad20 <rcl_guard_condition_init_from_rmw+0x8c>
 801ace2:	9b01      	ldr	r3, [sp, #4]
 801ace4:	201c      	movs	r0, #28
 801ace6:	9905      	ldr	r1, [sp, #20]
 801ace8:	4798      	blx	r3
 801acea:	4607      	mov	r7, r0
 801acec:	6060      	str	r0, [r4, #4]
 801acee:	b320      	cbz	r0, 801ad3a <rcl_guard_condition_init_from_rmw+0xa6>
 801acf0:	b1c6      	cbz	r6, 801ad24 <rcl_guard_condition_init_from_rmw+0x90>
 801acf2:	6006      	str	r6, [r0, #0]
 801acf4:	f880 8004 	strb.w	r8, [r0, #4]
 801acf8:	ac01      	add	r4, sp, #4
 801acfa:	f107 0c08 	add.w	ip, r7, #8
 801acfe:	2500      	movs	r5, #0
 801ad00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad06:	6823      	ldr	r3, [r4, #0]
 801ad08:	f8cc 3000 	str.w	r3, [ip]
 801ad0c:	e000      	b.n	801ad10 <rcl_guard_condition_init_from_rmw+0x7c>
 801ad0e:	2564      	movs	r5, #100	@ 0x64
 801ad10:	4628      	mov	r0, r5
 801ad12:	b006      	add	sp, #24
 801ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad18:	b002      	add	sp, #8
 801ad1a:	4770      	bx	lr
 801ad1c:	250b      	movs	r5, #11
 801ad1e:	e7f7      	b.n	801ad10 <rcl_guard_condition_init_from_rmw+0x7c>
 801ad20:	2565      	movs	r5, #101	@ 0x65
 801ad22:	e7f5      	b.n	801ad10 <rcl_guard_condition_init_from_rmw+0x7c>
 801ad24:	6828      	ldr	r0, [r5, #0]
 801ad26:	3028      	adds	r0, #40	@ 0x28
 801ad28:	f000 f92c 	bl	801af84 <rmw_create_guard_condition>
 801ad2c:	6038      	str	r0, [r7, #0]
 801ad2e:	6867      	ldr	r7, [r4, #4]
 801ad30:	683e      	ldr	r6, [r7, #0]
 801ad32:	b126      	cbz	r6, 801ad3e <rcl_guard_condition_init_from_rmw+0xaa>
 801ad34:	2301      	movs	r3, #1
 801ad36:	713b      	strb	r3, [r7, #4]
 801ad38:	e7de      	b.n	801acf8 <rcl_guard_condition_init_from_rmw+0x64>
 801ad3a:	250a      	movs	r5, #10
 801ad3c:	e7e8      	b.n	801ad10 <rcl_guard_condition_init_from_rmw+0x7c>
 801ad3e:	9b02      	ldr	r3, [sp, #8]
 801ad40:	4638      	mov	r0, r7
 801ad42:	9905      	ldr	r1, [sp, #20]
 801ad44:	2501      	movs	r5, #1
 801ad46:	4798      	blx	r3
 801ad48:	6066      	str	r6, [r4, #4]
 801ad4a:	e7e1      	b.n	801ad10 <rcl_guard_condition_init_from_rmw+0x7c>

0801ad4c <rcl_guard_condition_fini>:
 801ad4c:	b570      	push	{r4, r5, r6, lr}
 801ad4e:	b082      	sub	sp, #8
 801ad50:	b1f0      	cbz	r0, 801ad90 <rcl_guard_condition_fini+0x44>
 801ad52:	6843      	ldr	r3, [r0, #4]
 801ad54:	4604      	mov	r4, r0
 801ad56:	b163      	cbz	r3, 801ad72 <rcl_guard_condition_fini+0x26>
 801ad58:	6818      	ldr	r0, [r3, #0]
 801ad5a:	68de      	ldr	r6, [r3, #12]
 801ad5c:	6999      	ldr	r1, [r3, #24]
 801ad5e:	b160      	cbz	r0, 801ad7a <rcl_guard_condition_fini+0x2e>
 801ad60:	791d      	ldrb	r5, [r3, #4]
 801ad62:	b965      	cbnz	r5, 801ad7e <rcl_guard_condition_fini+0x32>
 801ad64:	4618      	mov	r0, r3
 801ad66:	47b0      	blx	r6
 801ad68:	2300      	movs	r3, #0
 801ad6a:	4628      	mov	r0, r5
 801ad6c:	6063      	str	r3, [r4, #4]
 801ad6e:	b002      	add	sp, #8
 801ad70:	bd70      	pop	{r4, r5, r6, pc}
 801ad72:	461d      	mov	r5, r3
 801ad74:	4628      	mov	r0, r5
 801ad76:	b002      	add	sp, #8
 801ad78:	bd70      	pop	{r4, r5, r6, pc}
 801ad7a:	4605      	mov	r5, r0
 801ad7c:	e7f2      	b.n	801ad64 <rcl_guard_condition_fini+0x18>
 801ad7e:	9101      	str	r1, [sp, #4]
 801ad80:	f000 f916 	bl	801afb0 <rmw_destroy_guard_condition>
 801ad84:	1e05      	subs	r5, r0, #0
 801ad86:	6863      	ldr	r3, [r4, #4]
 801ad88:	9901      	ldr	r1, [sp, #4]
 801ad8a:	bf18      	it	ne
 801ad8c:	2501      	movne	r5, #1
 801ad8e:	e7e9      	b.n	801ad64 <rcl_guard_condition_fini+0x18>
 801ad90:	250b      	movs	r5, #11
 801ad92:	4628      	mov	r0, r5
 801ad94:	b002      	add	sp, #8
 801ad96:	bd70      	pop	{r4, r5, r6, pc}

0801ad98 <rcl_guard_condition_get_default_options>:
 801ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad9a:	b087      	sub	sp, #28
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	4c0b      	ldr	r4, [pc, #44]	@ (801adcc <rcl_guard_condition_get_default_options+0x34>)
 801ada0:	4668      	mov	r0, sp
 801ada2:	f7f4 f817 	bl	800edd4 <rcutils_get_default_allocator>
 801ada6:	46ee      	mov	lr, sp
 801ada8:	46a4      	mov	ip, r4
 801adaa:	4625      	mov	r5, r4
 801adac:	4634      	mov	r4, r6
 801adae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801adb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801adb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adb8:	f8de 7000 	ldr.w	r7, [lr]
 801adbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adbe:	4630      	mov	r0, r6
 801adc0:	f8cc 7000 	str.w	r7, [ip]
 801adc4:	6027      	str	r7, [r4, #0]
 801adc6:	b007      	add	sp, #28
 801adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adca:	bf00      	nop
 801adcc:	24012e58 	.word	0x24012e58

0801add0 <rcl_trigger_guard_condition>:
 801add0:	b148      	cbz	r0, 801ade6 <rcl_trigger_guard_condition+0x16>
 801add2:	b508      	push	{r3, lr}
 801add4:	6843      	ldr	r3, [r0, #4]
 801add6:	b143      	cbz	r3, 801adea <rcl_trigger_guard_condition+0x1a>
 801add8:	6818      	ldr	r0, [r3, #0]
 801adda:	f000 f8fd 	bl	801afd8 <rmw_trigger_guard_condition>
 801adde:	3800      	subs	r0, #0
 801ade0:	bf18      	it	ne
 801ade2:	2001      	movne	r0, #1
 801ade4:	bd08      	pop	{r3, pc}
 801ade6:	200b      	movs	r0, #11
 801ade8:	4770      	bx	lr
 801adea:	200b      	movs	r0, #11
 801adec:	bd08      	pop	{r3, pc}
 801adee:	bf00      	nop

0801adf0 <rcl_guard_condition_get_rmw_handle>:
 801adf0:	b110      	cbz	r0, 801adf8 <rcl_guard_condition_get_rmw_handle+0x8>
 801adf2:	6840      	ldr	r0, [r0, #4]
 801adf4:	b100      	cbz	r0, 801adf8 <rcl_guard_condition_get_rmw_handle+0x8>
 801adf6:	6800      	ldr	r0, [r0, #0]
 801adf8:	4770      	bx	lr
 801adfa:	bf00      	nop

0801adfc <rcl_validate_topic_name>:
 801adfc:	2800      	cmp	r0, #0
 801adfe:	f000 8089 	beq.w	801af14 <rcl_validate_topic_name+0x118>
 801ae02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae06:	460e      	mov	r6, r1
 801ae08:	2900      	cmp	r1, #0
 801ae0a:	f000 8085 	beq.w	801af18 <rcl_validate_topic_name+0x11c>
 801ae0e:	4604      	mov	r4, r0
 801ae10:	4617      	mov	r7, r2
 801ae12:	f7e5 fa6f 	bl	80002f4 <strlen>
 801ae16:	b1b0      	cbz	r0, 801ae46 <rcl_validate_topic_name+0x4a>
 801ae18:	f894 e000 	ldrb.w	lr, [r4]
 801ae1c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801af80 <rcl_validate_topic_name+0x184>
 801ae20:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ae24:	f013 0304 	ands.w	r3, r3, #4
 801ae28:	d139      	bne.n	801ae9e <rcl_validate_topic_name+0xa2>
 801ae2a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ae2e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ae32:	2a2f      	cmp	r2, #47	@ 0x2f
 801ae34:	d10f      	bne.n	801ae56 <rcl_validate_topic_name+0x5a>
 801ae36:	2202      	movs	r2, #2
 801ae38:	6032      	str	r2, [r6, #0]
 801ae3a:	b3a7      	cbz	r7, 801aea6 <rcl_validate_topic_name+0xaa>
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f8c7 8000 	str.w	r8, [r7]
 801ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae46:	2301      	movs	r3, #1
 801ae48:	6033      	str	r3, [r6, #0]
 801ae4a:	b367      	cbz	r7, 801aea6 <rcl_validate_topic_name+0xaa>
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	4618      	mov	r0, r3
 801ae50:	603b      	str	r3, [r7, #0]
 801ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae56:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801ae5a:	461d      	mov	r5, r3
 801ae5c:	4619      	mov	r1, r3
 801ae5e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ae62:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801ae66:	f1b9 0f09 	cmp.w	r9, #9
 801ae6a:	d91f      	bls.n	801aeac <rcl_validate_topic_name+0xb0>
 801ae6c:	f022 0920 	bic.w	r9, r2, #32
 801ae70:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801ae74:	f1b9 0f19 	cmp.w	r9, #25
 801ae78:	d918      	bls.n	801aeac <rcl_validate_topic_name+0xb0>
 801ae7a:	2a5f      	cmp	r2, #95	@ 0x5f
 801ae7c:	d024      	beq.n	801aec8 <rcl_validate_topic_name+0xcc>
 801ae7e:	2a2f      	cmp	r2, #47	@ 0x2f
 801ae80:	d058      	beq.n	801af34 <rcl_validate_topic_name+0x138>
 801ae82:	2a7e      	cmp	r2, #126	@ 0x7e
 801ae84:	d04a      	beq.n	801af1c <rcl_validate_topic_name+0x120>
 801ae86:	2a7b      	cmp	r2, #123	@ 0x7b
 801ae88:	d05b      	beq.n	801af42 <rcl_validate_topic_name+0x146>
 801ae8a:	2a7d      	cmp	r2, #125	@ 0x7d
 801ae8c:	d169      	bne.n	801af62 <rcl_validate_topic_name+0x166>
 801ae8e:	2d00      	cmp	r5, #0
 801ae90:	d15c      	bne.n	801af4c <rcl_validate_topic_name+0x150>
 801ae92:	2305      	movs	r3, #5
 801ae94:	6033      	str	r3, [r6, #0]
 801ae96:	b137      	cbz	r7, 801aea6 <rcl_validate_topic_name+0xaa>
 801ae98:	2000      	movs	r0, #0
 801ae9a:	6039      	str	r1, [r7, #0]
 801ae9c:	e7d9      	b.n	801ae52 <rcl_validate_topic_name+0x56>
 801ae9e:	2304      	movs	r3, #4
 801aea0:	6033      	str	r3, [r6, #0]
 801aea2:	2f00      	cmp	r7, #0
 801aea4:	d1d2      	bne.n	801ae4c <rcl_validate_topic_name+0x50>
 801aea6:	2000      	movs	r0, #0
 801aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aeac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aeb0:	0752      	lsls	r2, r2, #29
 801aeb2:	d509      	bpl.n	801aec8 <rcl_validate_topic_name+0xcc>
 801aeb4:	2900      	cmp	r1, #0
 801aeb6:	bf0c      	ite	eq
 801aeb8:	2200      	moveq	r2, #0
 801aeba:	f005 0201 	andne.w	r2, r5, #1
 801aebe:	b11a      	cbz	r2, 801aec8 <rcl_validate_topic_name+0xcc>
 801aec0:	1e4d      	subs	r5, r1, #1
 801aec2:	429d      	cmp	r5, r3
 801aec4:	d031      	beq.n	801af2a <rcl_validate_topic_name+0x12e>
 801aec6:	4615      	mov	r5, r2
 801aec8:	3101      	adds	r1, #1
 801aeca:	4288      	cmp	r0, r1
 801aecc:	d1c7      	bne.n	801ae5e <rcl_validate_topic_name+0x62>
 801aece:	2d00      	cmp	r5, #0
 801aed0:	d142      	bne.n	801af58 <rcl_validate_topic_name+0x15c>
 801aed2:	4628      	mov	r0, r5
 801aed4:	2301      	movs	r3, #1
 801aed6:	e00c      	b.n	801aef2 <rcl_validate_topic_name+0xf6>
 801aed8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801aedc:	d101      	bne.n	801aee2 <rcl_validate_topic_name+0xe6>
 801aede:	2801      	cmp	r0, #1
 801aee0:	d047      	beq.n	801af72 <rcl_validate_topic_name+0x176>
 801aee2:	1c5a      	adds	r2, r3, #1
 801aee4:	428b      	cmp	r3, r1
 801aee6:	f100 0001 	add.w	r0, r0, #1
 801aeea:	f104 0401 	add.w	r4, r4, #1
 801aeee:	4613      	mov	r3, r2
 801aef0:	d22e      	bcs.n	801af50 <rcl_validate_topic_name+0x154>
 801aef2:	4580      	cmp	r8, r0
 801aef4:	d0f5      	beq.n	801aee2 <rcl_validate_topic_name+0xe6>
 801aef6:	7822      	ldrb	r2, [r4, #0]
 801aef8:	2a2f      	cmp	r2, #47	@ 0x2f
 801aefa:	d1ed      	bne.n	801aed8 <rcl_validate_topic_name+0xdc>
 801aefc:	7862      	ldrb	r2, [r4, #1]
 801aefe:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801af02:	0752      	lsls	r2, r2, #29
 801af04:	d5ed      	bpl.n	801aee2 <rcl_validate_topic_name+0xe6>
 801af06:	2204      	movs	r2, #4
 801af08:	6032      	str	r2, [r6, #0]
 801af0a:	2f00      	cmp	r7, #0
 801af0c:	d0cb      	beq.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af0e:	2000      	movs	r0, #0
 801af10:	603b      	str	r3, [r7, #0]
 801af12:	e79e      	b.n	801ae52 <rcl_validate_topic_name+0x56>
 801af14:	200b      	movs	r0, #11
 801af16:	4770      	bx	lr
 801af18:	200b      	movs	r0, #11
 801af1a:	e79a      	b.n	801ae52 <rcl_validate_topic_name+0x56>
 801af1c:	2900      	cmp	r1, #0
 801af1e:	d0d3      	beq.n	801aec8 <rcl_validate_topic_name+0xcc>
 801af20:	2306      	movs	r3, #6
 801af22:	6033      	str	r3, [r6, #0]
 801af24:	2f00      	cmp	r7, #0
 801af26:	d1b7      	bne.n	801ae98 <rcl_validate_topic_name+0x9c>
 801af28:	e7bd      	b.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af2a:	2309      	movs	r3, #9
 801af2c:	6033      	str	r3, [r6, #0]
 801af2e:	2f00      	cmp	r7, #0
 801af30:	d1b2      	bne.n	801ae98 <rcl_validate_topic_name+0x9c>
 801af32:	e7b8      	b.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af34:	2d00      	cmp	r5, #0
 801af36:	d0c7      	beq.n	801aec8 <rcl_validate_topic_name+0xcc>
 801af38:	2308      	movs	r3, #8
 801af3a:	6033      	str	r3, [r6, #0]
 801af3c:	2f00      	cmp	r7, #0
 801af3e:	d1ab      	bne.n	801ae98 <rcl_validate_topic_name+0x9c>
 801af40:	e7b1      	b.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af42:	2d00      	cmp	r5, #0
 801af44:	d1f8      	bne.n	801af38 <rcl_validate_topic_name+0x13c>
 801af46:	460b      	mov	r3, r1
 801af48:	2501      	movs	r5, #1
 801af4a:	e7bd      	b.n	801aec8 <rcl_validate_topic_name+0xcc>
 801af4c:	2500      	movs	r5, #0
 801af4e:	e7bb      	b.n	801aec8 <rcl_validate_topic_name+0xcc>
 801af50:	2300      	movs	r3, #0
 801af52:	4618      	mov	r0, r3
 801af54:	6033      	str	r3, [r6, #0]
 801af56:	e77c      	b.n	801ae52 <rcl_validate_topic_name+0x56>
 801af58:	2205      	movs	r2, #5
 801af5a:	6032      	str	r2, [r6, #0]
 801af5c:	2f00      	cmp	r7, #0
 801af5e:	d1d6      	bne.n	801af0e <rcl_validate_topic_name+0x112>
 801af60:	e7a1      	b.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af62:	2d00      	cmp	r5, #0
 801af64:	bf14      	ite	ne
 801af66:	2308      	movne	r3, #8
 801af68:	2303      	moveq	r3, #3
 801af6a:	6033      	str	r3, [r6, #0]
 801af6c:	2f00      	cmp	r7, #0
 801af6e:	d193      	bne.n	801ae98 <rcl_validate_topic_name+0x9c>
 801af70:	e799      	b.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af72:	2307      	movs	r3, #7
 801af74:	6033      	str	r3, [r6, #0]
 801af76:	2f00      	cmp	r7, #0
 801af78:	d095      	beq.n	801aea6 <rcl_validate_topic_name+0xaa>
 801af7a:	2301      	movs	r3, #1
 801af7c:	e7c7      	b.n	801af0e <rcl_validate_topic_name+0x112>
 801af7e:	bf00      	nop
 801af80:	0801d656 	.word	0x0801d656

0801af84 <rmw_create_guard_condition>:
 801af84:	b538      	push	{r3, r4, r5, lr}
 801af86:	4605      	mov	r5, r0
 801af88:	4808      	ldr	r0, [pc, #32]	@ (801afac <rmw_create_guard_condition+0x28>)
 801af8a:	f7fd ff5f 	bl	8018e4c <get_memory>
 801af8e:	4603      	mov	r3, r0
 801af90:	b148      	cbz	r0, 801afa6 <rmw_create_guard_condition+0x22>
 801af92:	6884      	ldr	r4, [r0, #8]
 801af94:	2300      	movs	r3, #0
 801af96:	61e5      	str	r5, [r4, #28]
 801af98:	7423      	strb	r3, [r4, #16]
 801af9a:	f7fd ffbf 	bl	8018f1c <rmw_get_implementation_identifier>
 801af9e:	f104 0314 	add.w	r3, r4, #20
 801afa2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801afa6:	4618      	mov	r0, r3
 801afa8:	bd38      	pop	{r3, r4, r5, pc}
 801afaa:	bf00      	nop
 801afac:	24012cf4 	.word	0x24012cf4

0801afb0 <rmw_destroy_guard_condition>:
 801afb0:	b508      	push	{r3, lr}
 801afb2:	4b08      	ldr	r3, [pc, #32]	@ (801afd4 <rmw_destroy_guard_condition+0x24>)
 801afb4:	6819      	ldr	r1, [r3, #0]
 801afb6:	b911      	cbnz	r1, 801afbe <rmw_destroy_guard_condition+0xe>
 801afb8:	e00a      	b.n	801afd0 <rmw_destroy_guard_condition+0x20>
 801afba:	6849      	ldr	r1, [r1, #4]
 801afbc:	b141      	cbz	r1, 801afd0 <rmw_destroy_guard_condition+0x20>
 801afbe:	688b      	ldr	r3, [r1, #8]
 801afc0:	3314      	adds	r3, #20
 801afc2:	4298      	cmp	r0, r3
 801afc4:	d1f9      	bne.n	801afba <rmw_destroy_guard_condition+0xa>
 801afc6:	4803      	ldr	r0, [pc, #12]	@ (801afd4 <rmw_destroy_guard_condition+0x24>)
 801afc8:	f7fd ff50 	bl	8018e6c <put_memory>
 801afcc:	2000      	movs	r0, #0
 801afce:	bd08      	pop	{r3, pc}
 801afd0:	2001      	movs	r0, #1
 801afd2:	bd08      	pop	{r3, pc}
 801afd4:	24012cf4 	.word	0x24012cf4

0801afd8 <rmw_trigger_guard_condition>:
 801afd8:	b160      	cbz	r0, 801aff4 <rmw_trigger_guard_condition+0x1c>
 801afda:	b510      	push	{r4, lr}
 801afdc:	4604      	mov	r4, r0
 801afde:	6800      	ldr	r0, [r0, #0]
 801afe0:	f7f5 f96a 	bl	80102b8 <is_uxrce_rmw_identifier_valid>
 801afe4:	b908      	cbnz	r0, 801afea <rmw_trigger_guard_condition+0x12>
 801afe6:	2001      	movs	r0, #1
 801afe8:	bd10      	pop	{r4, pc}
 801afea:	6863      	ldr	r3, [r4, #4]
 801afec:	2201      	movs	r2, #1
 801afee:	2000      	movs	r0, #0
 801aff0:	741a      	strb	r2, [r3, #16]
 801aff2:	bd10      	pop	{r4, pc}
 801aff4:	2001      	movs	r0, #1
 801aff6:	4770      	bx	lr

0801aff8 <rosidl_runtime_c__String__init>:
 801aff8:	b510      	push	{r4, lr}
 801affa:	4604      	mov	r4, r0
 801affc:	b086      	sub	sp, #24
 801affe:	b170      	cbz	r0, 801b01e <rosidl_runtime_c__String__init+0x26>
 801b000:	a801      	add	r0, sp, #4
 801b002:	f7f3 fee7 	bl	800edd4 <rcutils_get_default_allocator>
 801b006:	9b01      	ldr	r3, [sp, #4]
 801b008:	9905      	ldr	r1, [sp, #20]
 801b00a:	2001      	movs	r0, #1
 801b00c:	4798      	blx	r3
 801b00e:	6020      	str	r0, [r4, #0]
 801b010:	b128      	cbz	r0, 801b01e <rosidl_runtime_c__String__init+0x26>
 801b012:	2100      	movs	r1, #0
 801b014:	2201      	movs	r2, #1
 801b016:	7001      	strb	r1, [r0, #0]
 801b018:	4610      	mov	r0, r2
 801b01a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801b01e:	b006      	add	sp, #24
 801b020:	bd10      	pop	{r4, pc}
 801b022:	bf00      	nop

0801b024 <rosidl_runtime_c__String__fini>:
 801b024:	b320      	cbz	r0, 801b070 <rosidl_runtime_c__String__fini+0x4c>
 801b026:	6803      	ldr	r3, [r0, #0]
 801b028:	b510      	push	{r4, lr}
 801b02a:	4604      	mov	r4, r0
 801b02c:	b086      	sub	sp, #24
 801b02e:	b173      	cbz	r3, 801b04e <rosidl_runtime_c__String__fini+0x2a>
 801b030:	6883      	ldr	r3, [r0, #8]
 801b032:	b1f3      	cbz	r3, 801b072 <rosidl_runtime_c__String__fini+0x4e>
 801b034:	a801      	add	r0, sp, #4
 801b036:	f7f3 fecd 	bl	800edd4 <rcutils_get_default_allocator>
 801b03a:	9b02      	ldr	r3, [sp, #8]
 801b03c:	9905      	ldr	r1, [sp, #20]
 801b03e:	6820      	ldr	r0, [r4, #0]
 801b040:	4798      	blx	r3
 801b042:	2300      	movs	r3, #0
 801b044:	e9c4 3300 	strd	r3, r3, [r4]
 801b048:	60a3      	str	r3, [r4, #8]
 801b04a:	b006      	add	sp, #24
 801b04c:	bd10      	pop	{r4, pc}
 801b04e:	6843      	ldr	r3, [r0, #4]
 801b050:	b9db      	cbnz	r3, 801b08a <rosidl_runtime_c__String__fini+0x66>
 801b052:	6883      	ldr	r3, [r0, #8]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d0f8      	beq.n	801b04a <rosidl_runtime_c__String__fini+0x26>
 801b058:	4b12      	ldr	r3, [pc, #72]	@ (801b0a4 <rosidl_runtime_c__String__fini+0x80>)
 801b05a:	2251      	movs	r2, #81	@ 0x51
 801b05c:	2101      	movs	r1, #1
 801b05e:	4812      	ldr	r0, [pc, #72]	@ (801b0a8 <rosidl_runtime_c__String__fini+0x84>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	68db      	ldr	r3, [r3, #12]
 801b064:	f000 fb82 	bl	801b76c <fwrite>
 801b068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b06c:	f000 f83e 	bl	801b0ec <exit>
 801b070:	4770      	bx	lr
 801b072:	4b0c      	ldr	r3, [pc, #48]	@ (801b0a4 <rosidl_runtime_c__String__fini+0x80>)
 801b074:	224c      	movs	r2, #76	@ 0x4c
 801b076:	2101      	movs	r1, #1
 801b078:	480c      	ldr	r0, [pc, #48]	@ (801b0ac <rosidl_runtime_c__String__fini+0x88>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	68db      	ldr	r3, [r3, #12]
 801b07e:	f000 fb75 	bl	801b76c <fwrite>
 801b082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b086:	f000 f831 	bl	801b0ec <exit>
 801b08a:	4b06      	ldr	r3, [pc, #24]	@ (801b0a4 <rosidl_runtime_c__String__fini+0x80>)
 801b08c:	224e      	movs	r2, #78	@ 0x4e
 801b08e:	2101      	movs	r1, #1
 801b090:	4807      	ldr	r0, [pc, #28]	@ (801b0b0 <rosidl_runtime_c__String__fini+0x8c>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	68db      	ldr	r3, [r3, #12]
 801b096:	f000 fb69 	bl	801b76c <fwrite>
 801b09a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b09e:	f000 f825 	bl	801b0ec <exit>
 801b0a2:	bf00      	nop
 801b0a4:	240002b0 	.word	0x240002b0
 801b0a8:	0801d594 	.word	0x0801d594
 801b0ac:	0801d4f4 	.word	0x0801d4f4
 801b0b0:	0801d544 	.word	0x0801d544

0801b0b4 <calloc>:
 801b0b4:	4b02      	ldr	r3, [pc, #8]	@ (801b0c0 <calloc+0xc>)
 801b0b6:	460a      	mov	r2, r1
 801b0b8:	4601      	mov	r1, r0
 801b0ba:	6818      	ldr	r0, [r3, #0]
 801b0bc:	f000 b802 	b.w	801b0c4 <_calloc_r>
 801b0c0:	240002b0 	.word	0x240002b0

0801b0c4 <_calloc_r>:
 801b0c4:	b570      	push	{r4, r5, r6, lr}
 801b0c6:	fba1 5402 	umull	r5, r4, r1, r2
 801b0ca:	b93c      	cbnz	r4, 801b0dc <_calloc_r+0x18>
 801b0cc:	4629      	mov	r1, r5
 801b0ce:	f000 f899 	bl	801b204 <_malloc_r>
 801b0d2:	4606      	mov	r6, r0
 801b0d4:	b928      	cbnz	r0, 801b0e2 <_calloc_r+0x1e>
 801b0d6:	2600      	movs	r6, #0
 801b0d8:	4630      	mov	r0, r6
 801b0da:	bd70      	pop	{r4, r5, r6, pc}
 801b0dc:	220c      	movs	r2, #12
 801b0de:	6002      	str	r2, [r0, #0]
 801b0e0:	e7f9      	b.n	801b0d6 <_calloc_r+0x12>
 801b0e2:	462a      	mov	r2, r5
 801b0e4:	4621      	mov	r1, r4
 801b0e6:	f000 fccf 	bl	801ba88 <memset>
 801b0ea:	e7f5      	b.n	801b0d8 <_calloc_r+0x14>

0801b0ec <exit>:
 801b0ec:	b508      	push	{r3, lr}
 801b0ee:	4b06      	ldr	r3, [pc, #24]	@ (801b108 <exit+0x1c>)
 801b0f0:	4604      	mov	r4, r0
 801b0f2:	b113      	cbz	r3, 801b0fa <exit+0xe>
 801b0f4:	2100      	movs	r1, #0
 801b0f6:	f3af 8000 	nop.w
 801b0fa:	4b04      	ldr	r3, [pc, #16]	@ (801b10c <exit+0x20>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	b103      	cbz	r3, 801b102 <exit+0x16>
 801b100:	4798      	blx	r3
 801b102:	4620      	mov	r0, r4
 801b104:	f7e6 fe3c 	bl	8001d80 <_exit>
 801b108:	00000000 	.word	0x00000000
 801b10c:	24012fac 	.word	0x24012fac

0801b110 <getenv>:
 801b110:	b507      	push	{r0, r1, r2, lr}
 801b112:	4b04      	ldr	r3, [pc, #16]	@ (801b124 <getenv+0x14>)
 801b114:	4601      	mov	r1, r0
 801b116:	aa01      	add	r2, sp, #4
 801b118:	6818      	ldr	r0, [r3, #0]
 801b11a:	f000 f805 	bl	801b128 <_findenv_r>
 801b11e:	b003      	add	sp, #12
 801b120:	f85d fb04 	ldr.w	pc, [sp], #4
 801b124:	240002b0 	.word	0x240002b0

0801b128 <_findenv_r>:
 801b128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b12c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b19c <_findenv_r+0x74>
 801b130:	4606      	mov	r6, r0
 801b132:	4689      	mov	r9, r1
 801b134:	4617      	mov	r7, r2
 801b136:	f000 fd9d 	bl	801bc74 <__env_lock>
 801b13a:	f8da 4000 	ldr.w	r4, [sl]
 801b13e:	b134      	cbz	r4, 801b14e <_findenv_r+0x26>
 801b140:	464b      	mov	r3, r9
 801b142:	4698      	mov	r8, r3
 801b144:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b148:	b13a      	cbz	r2, 801b15a <_findenv_r+0x32>
 801b14a:	2a3d      	cmp	r2, #61	@ 0x3d
 801b14c:	d1f9      	bne.n	801b142 <_findenv_r+0x1a>
 801b14e:	4630      	mov	r0, r6
 801b150:	f000 fd96 	bl	801bc80 <__env_unlock>
 801b154:	2000      	movs	r0, #0
 801b156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b15a:	eba8 0809 	sub.w	r8, r8, r9
 801b15e:	46a3      	mov	fp, r4
 801b160:	f854 0b04 	ldr.w	r0, [r4], #4
 801b164:	2800      	cmp	r0, #0
 801b166:	d0f2      	beq.n	801b14e <_findenv_r+0x26>
 801b168:	4642      	mov	r2, r8
 801b16a:	4649      	mov	r1, r9
 801b16c:	f000 fca1 	bl	801bab2 <strncmp>
 801b170:	2800      	cmp	r0, #0
 801b172:	d1f4      	bne.n	801b15e <_findenv_r+0x36>
 801b174:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b178:	eb03 0508 	add.w	r5, r3, r8
 801b17c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b180:	2b3d      	cmp	r3, #61	@ 0x3d
 801b182:	d1ec      	bne.n	801b15e <_findenv_r+0x36>
 801b184:	f8da 3000 	ldr.w	r3, [sl]
 801b188:	ebab 0303 	sub.w	r3, fp, r3
 801b18c:	109b      	asrs	r3, r3, #2
 801b18e:	4630      	mov	r0, r6
 801b190:	603b      	str	r3, [r7, #0]
 801b192:	f000 fd75 	bl	801bc80 <__env_unlock>
 801b196:	1c68      	adds	r0, r5, #1
 801b198:	e7dd      	b.n	801b156 <_findenv_r+0x2e>
 801b19a:	bf00      	nop
 801b19c:	24000024 	.word	0x24000024

0801b1a0 <malloc>:
 801b1a0:	4b02      	ldr	r3, [pc, #8]	@ (801b1ac <malloc+0xc>)
 801b1a2:	4601      	mov	r1, r0
 801b1a4:	6818      	ldr	r0, [r3, #0]
 801b1a6:	f000 b82d 	b.w	801b204 <_malloc_r>
 801b1aa:	bf00      	nop
 801b1ac:	240002b0 	.word	0x240002b0

0801b1b0 <free>:
 801b1b0:	4b02      	ldr	r3, [pc, #8]	@ (801b1bc <free+0xc>)
 801b1b2:	4601      	mov	r1, r0
 801b1b4:	6818      	ldr	r0, [r3, #0]
 801b1b6:	f000 bd69 	b.w	801bc8c <_free_r>
 801b1ba:	bf00      	nop
 801b1bc:	240002b0 	.word	0x240002b0

0801b1c0 <sbrk_aligned>:
 801b1c0:	b570      	push	{r4, r5, r6, lr}
 801b1c2:	4e0f      	ldr	r6, [pc, #60]	@ (801b200 <sbrk_aligned+0x40>)
 801b1c4:	460c      	mov	r4, r1
 801b1c6:	6831      	ldr	r1, [r6, #0]
 801b1c8:	4605      	mov	r5, r0
 801b1ca:	b911      	cbnz	r1, 801b1d2 <sbrk_aligned+0x12>
 801b1cc:	f000 fcce 	bl	801bb6c <_sbrk_r>
 801b1d0:	6030      	str	r0, [r6, #0]
 801b1d2:	4621      	mov	r1, r4
 801b1d4:	4628      	mov	r0, r5
 801b1d6:	f000 fcc9 	bl	801bb6c <_sbrk_r>
 801b1da:	1c43      	adds	r3, r0, #1
 801b1dc:	d103      	bne.n	801b1e6 <sbrk_aligned+0x26>
 801b1de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b1e2:	4620      	mov	r0, r4
 801b1e4:	bd70      	pop	{r4, r5, r6, pc}
 801b1e6:	1cc4      	adds	r4, r0, #3
 801b1e8:	f024 0403 	bic.w	r4, r4, #3
 801b1ec:	42a0      	cmp	r0, r4
 801b1ee:	d0f8      	beq.n	801b1e2 <sbrk_aligned+0x22>
 801b1f0:	1a21      	subs	r1, r4, r0
 801b1f2:	4628      	mov	r0, r5
 801b1f4:	f000 fcba 	bl	801bb6c <_sbrk_r>
 801b1f8:	3001      	adds	r0, #1
 801b1fa:	d1f2      	bne.n	801b1e2 <sbrk_aligned+0x22>
 801b1fc:	e7ef      	b.n	801b1de <sbrk_aligned+0x1e>
 801b1fe:	bf00      	nop
 801b200:	24012e6c 	.word	0x24012e6c

0801b204 <_malloc_r>:
 801b204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b208:	1ccd      	adds	r5, r1, #3
 801b20a:	f025 0503 	bic.w	r5, r5, #3
 801b20e:	3508      	adds	r5, #8
 801b210:	2d0c      	cmp	r5, #12
 801b212:	bf38      	it	cc
 801b214:	250c      	movcc	r5, #12
 801b216:	2d00      	cmp	r5, #0
 801b218:	4606      	mov	r6, r0
 801b21a:	db01      	blt.n	801b220 <_malloc_r+0x1c>
 801b21c:	42a9      	cmp	r1, r5
 801b21e:	d904      	bls.n	801b22a <_malloc_r+0x26>
 801b220:	230c      	movs	r3, #12
 801b222:	6033      	str	r3, [r6, #0]
 801b224:	2000      	movs	r0, #0
 801b226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b22a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b300 <_malloc_r+0xfc>
 801b22e:	f000 f869 	bl	801b304 <__malloc_lock>
 801b232:	f8d8 3000 	ldr.w	r3, [r8]
 801b236:	461c      	mov	r4, r3
 801b238:	bb44      	cbnz	r4, 801b28c <_malloc_r+0x88>
 801b23a:	4629      	mov	r1, r5
 801b23c:	4630      	mov	r0, r6
 801b23e:	f7ff ffbf 	bl	801b1c0 <sbrk_aligned>
 801b242:	1c43      	adds	r3, r0, #1
 801b244:	4604      	mov	r4, r0
 801b246:	d158      	bne.n	801b2fa <_malloc_r+0xf6>
 801b248:	f8d8 4000 	ldr.w	r4, [r8]
 801b24c:	4627      	mov	r7, r4
 801b24e:	2f00      	cmp	r7, #0
 801b250:	d143      	bne.n	801b2da <_malloc_r+0xd6>
 801b252:	2c00      	cmp	r4, #0
 801b254:	d04b      	beq.n	801b2ee <_malloc_r+0xea>
 801b256:	6823      	ldr	r3, [r4, #0]
 801b258:	4639      	mov	r1, r7
 801b25a:	4630      	mov	r0, r6
 801b25c:	eb04 0903 	add.w	r9, r4, r3
 801b260:	f000 fc84 	bl	801bb6c <_sbrk_r>
 801b264:	4581      	cmp	r9, r0
 801b266:	d142      	bne.n	801b2ee <_malloc_r+0xea>
 801b268:	6821      	ldr	r1, [r4, #0]
 801b26a:	1a6d      	subs	r5, r5, r1
 801b26c:	4629      	mov	r1, r5
 801b26e:	4630      	mov	r0, r6
 801b270:	f7ff ffa6 	bl	801b1c0 <sbrk_aligned>
 801b274:	3001      	adds	r0, #1
 801b276:	d03a      	beq.n	801b2ee <_malloc_r+0xea>
 801b278:	6823      	ldr	r3, [r4, #0]
 801b27a:	442b      	add	r3, r5
 801b27c:	6023      	str	r3, [r4, #0]
 801b27e:	f8d8 3000 	ldr.w	r3, [r8]
 801b282:	685a      	ldr	r2, [r3, #4]
 801b284:	bb62      	cbnz	r2, 801b2e0 <_malloc_r+0xdc>
 801b286:	f8c8 7000 	str.w	r7, [r8]
 801b28a:	e00f      	b.n	801b2ac <_malloc_r+0xa8>
 801b28c:	6822      	ldr	r2, [r4, #0]
 801b28e:	1b52      	subs	r2, r2, r5
 801b290:	d420      	bmi.n	801b2d4 <_malloc_r+0xd0>
 801b292:	2a0b      	cmp	r2, #11
 801b294:	d917      	bls.n	801b2c6 <_malloc_r+0xc2>
 801b296:	1961      	adds	r1, r4, r5
 801b298:	42a3      	cmp	r3, r4
 801b29a:	6025      	str	r5, [r4, #0]
 801b29c:	bf18      	it	ne
 801b29e:	6059      	strne	r1, [r3, #4]
 801b2a0:	6863      	ldr	r3, [r4, #4]
 801b2a2:	bf08      	it	eq
 801b2a4:	f8c8 1000 	streq.w	r1, [r8]
 801b2a8:	5162      	str	r2, [r4, r5]
 801b2aa:	604b      	str	r3, [r1, #4]
 801b2ac:	4630      	mov	r0, r6
 801b2ae:	f000 f82f 	bl	801b310 <__malloc_unlock>
 801b2b2:	f104 000b 	add.w	r0, r4, #11
 801b2b6:	1d23      	adds	r3, r4, #4
 801b2b8:	f020 0007 	bic.w	r0, r0, #7
 801b2bc:	1ac2      	subs	r2, r0, r3
 801b2be:	bf1c      	itt	ne
 801b2c0:	1a1b      	subne	r3, r3, r0
 801b2c2:	50a3      	strne	r3, [r4, r2]
 801b2c4:	e7af      	b.n	801b226 <_malloc_r+0x22>
 801b2c6:	6862      	ldr	r2, [r4, #4]
 801b2c8:	42a3      	cmp	r3, r4
 801b2ca:	bf0c      	ite	eq
 801b2cc:	f8c8 2000 	streq.w	r2, [r8]
 801b2d0:	605a      	strne	r2, [r3, #4]
 801b2d2:	e7eb      	b.n	801b2ac <_malloc_r+0xa8>
 801b2d4:	4623      	mov	r3, r4
 801b2d6:	6864      	ldr	r4, [r4, #4]
 801b2d8:	e7ae      	b.n	801b238 <_malloc_r+0x34>
 801b2da:	463c      	mov	r4, r7
 801b2dc:	687f      	ldr	r7, [r7, #4]
 801b2de:	e7b6      	b.n	801b24e <_malloc_r+0x4a>
 801b2e0:	461a      	mov	r2, r3
 801b2e2:	685b      	ldr	r3, [r3, #4]
 801b2e4:	42a3      	cmp	r3, r4
 801b2e6:	d1fb      	bne.n	801b2e0 <_malloc_r+0xdc>
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	6053      	str	r3, [r2, #4]
 801b2ec:	e7de      	b.n	801b2ac <_malloc_r+0xa8>
 801b2ee:	230c      	movs	r3, #12
 801b2f0:	6033      	str	r3, [r6, #0]
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	f000 f80c 	bl	801b310 <__malloc_unlock>
 801b2f8:	e794      	b.n	801b224 <_malloc_r+0x20>
 801b2fa:	6005      	str	r5, [r0, #0]
 801b2fc:	e7d6      	b.n	801b2ac <_malloc_r+0xa8>
 801b2fe:	bf00      	nop
 801b300:	24012e70 	.word	0x24012e70

0801b304 <__malloc_lock>:
 801b304:	4801      	ldr	r0, [pc, #4]	@ (801b30c <__malloc_lock+0x8>)
 801b306:	f000 bc7e 	b.w	801bc06 <__retarget_lock_acquire_recursive>
 801b30a:	bf00      	nop
 801b30c:	24012fb5 	.word	0x24012fb5

0801b310 <__malloc_unlock>:
 801b310:	4801      	ldr	r0, [pc, #4]	@ (801b318 <__malloc_unlock+0x8>)
 801b312:	f000 bc79 	b.w	801bc08 <__retarget_lock_release_recursive>
 801b316:	bf00      	nop
 801b318:	24012fb5 	.word	0x24012fb5

0801b31c <srand>:
 801b31c:	b538      	push	{r3, r4, r5, lr}
 801b31e:	4b10      	ldr	r3, [pc, #64]	@ (801b360 <srand+0x44>)
 801b320:	681d      	ldr	r5, [r3, #0]
 801b322:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b324:	4604      	mov	r4, r0
 801b326:	b9b3      	cbnz	r3, 801b356 <srand+0x3a>
 801b328:	2018      	movs	r0, #24
 801b32a:	f7ff ff39 	bl	801b1a0 <malloc>
 801b32e:	4602      	mov	r2, r0
 801b330:	6328      	str	r0, [r5, #48]	@ 0x30
 801b332:	b920      	cbnz	r0, 801b33e <srand+0x22>
 801b334:	4b0b      	ldr	r3, [pc, #44]	@ (801b364 <srand+0x48>)
 801b336:	480c      	ldr	r0, [pc, #48]	@ (801b368 <srand+0x4c>)
 801b338:	2146      	movs	r1, #70	@ 0x46
 801b33a:	f000 fc7d 	bl	801bc38 <__assert_func>
 801b33e:	490b      	ldr	r1, [pc, #44]	@ (801b36c <srand+0x50>)
 801b340:	4b0b      	ldr	r3, [pc, #44]	@ (801b370 <srand+0x54>)
 801b342:	e9c0 1300 	strd	r1, r3, [r0]
 801b346:	4b0b      	ldr	r3, [pc, #44]	@ (801b374 <srand+0x58>)
 801b348:	6083      	str	r3, [r0, #8]
 801b34a:	230b      	movs	r3, #11
 801b34c:	8183      	strh	r3, [r0, #12]
 801b34e:	2100      	movs	r1, #0
 801b350:	2001      	movs	r0, #1
 801b352:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b356:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b358:	2200      	movs	r2, #0
 801b35a:	611c      	str	r4, [r3, #16]
 801b35c:	615a      	str	r2, [r3, #20]
 801b35e:	bd38      	pop	{r3, r4, r5, pc}
 801b360:	240002b0 	.word	0x240002b0
 801b364:	0801d5e6 	.word	0x0801d5e6
 801b368:	0801d5fd 	.word	0x0801d5fd
 801b36c:	abcd330e 	.word	0xabcd330e
 801b370:	e66d1234 	.word	0xe66d1234
 801b374:	0005deec 	.word	0x0005deec

0801b378 <rand>:
 801b378:	4b16      	ldr	r3, [pc, #88]	@ (801b3d4 <rand+0x5c>)
 801b37a:	b510      	push	{r4, lr}
 801b37c:	681c      	ldr	r4, [r3, #0]
 801b37e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b380:	b9b3      	cbnz	r3, 801b3b0 <rand+0x38>
 801b382:	2018      	movs	r0, #24
 801b384:	f7ff ff0c 	bl	801b1a0 <malloc>
 801b388:	4602      	mov	r2, r0
 801b38a:	6320      	str	r0, [r4, #48]	@ 0x30
 801b38c:	b920      	cbnz	r0, 801b398 <rand+0x20>
 801b38e:	4b12      	ldr	r3, [pc, #72]	@ (801b3d8 <rand+0x60>)
 801b390:	4812      	ldr	r0, [pc, #72]	@ (801b3dc <rand+0x64>)
 801b392:	2152      	movs	r1, #82	@ 0x52
 801b394:	f000 fc50 	bl	801bc38 <__assert_func>
 801b398:	4911      	ldr	r1, [pc, #68]	@ (801b3e0 <rand+0x68>)
 801b39a:	4b12      	ldr	r3, [pc, #72]	@ (801b3e4 <rand+0x6c>)
 801b39c:	e9c0 1300 	strd	r1, r3, [r0]
 801b3a0:	4b11      	ldr	r3, [pc, #68]	@ (801b3e8 <rand+0x70>)
 801b3a2:	6083      	str	r3, [r0, #8]
 801b3a4:	230b      	movs	r3, #11
 801b3a6:	8183      	strh	r3, [r0, #12]
 801b3a8:	2100      	movs	r1, #0
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b3b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b3b2:	480e      	ldr	r0, [pc, #56]	@ (801b3ec <rand+0x74>)
 801b3b4:	690b      	ldr	r3, [r1, #16]
 801b3b6:	694c      	ldr	r4, [r1, #20]
 801b3b8:	4a0d      	ldr	r2, [pc, #52]	@ (801b3f0 <rand+0x78>)
 801b3ba:	4358      	muls	r0, r3
 801b3bc:	fb02 0004 	mla	r0, r2, r4, r0
 801b3c0:	fba3 3202 	umull	r3, r2, r3, r2
 801b3c4:	3301      	adds	r3, #1
 801b3c6:	eb40 0002 	adc.w	r0, r0, r2
 801b3ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b3ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b3d2:	bd10      	pop	{r4, pc}
 801b3d4:	240002b0 	.word	0x240002b0
 801b3d8:	0801d5e6 	.word	0x0801d5e6
 801b3dc:	0801d5fd 	.word	0x0801d5fd
 801b3e0:	abcd330e 	.word	0xabcd330e
 801b3e4:	e66d1234 	.word	0xe66d1234
 801b3e8:	0005deec 	.word	0x0005deec
 801b3ec:	5851f42d 	.word	0x5851f42d
 801b3f0:	4c957f2d 	.word	0x4c957f2d

0801b3f4 <realloc>:
 801b3f4:	4b02      	ldr	r3, [pc, #8]	@ (801b400 <realloc+0xc>)
 801b3f6:	460a      	mov	r2, r1
 801b3f8:	4601      	mov	r1, r0
 801b3fa:	6818      	ldr	r0, [r3, #0]
 801b3fc:	f000 b802 	b.w	801b404 <_realloc_r>
 801b400:	240002b0 	.word	0x240002b0

0801b404 <_realloc_r>:
 801b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b408:	4680      	mov	r8, r0
 801b40a:	4615      	mov	r5, r2
 801b40c:	460c      	mov	r4, r1
 801b40e:	b921      	cbnz	r1, 801b41a <_realloc_r+0x16>
 801b410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b414:	4611      	mov	r1, r2
 801b416:	f7ff bef5 	b.w	801b204 <_malloc_r>
 801b41a:	b92a      	cbnz	r2, 801b428 <_realloc_r+0x24>
 801b41c:	f000 fc36 	bl	801bc8c <_free_r>
 801b420:	2400      	movs	r4, #0
 801b422:	4620      	mov	r0, r4
 801b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b428:	f000 fc7a 	bl	801bd20 <_malloc_usable_size_r>
 801b42c:	4285      	cmp	r5, r0
 801b42e:	4606      	mov	r6, r0
 801b430:	d802      	bhi.n	801b438 <_realloc_r+0x34>
 801b432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b436:	d8f4      	bhi.n	801b422 <_realloc_r+0x1e>
 801b438:	4629      	mov	r1, r5
 801b43a:	4640      	mov	r0, r8
 801b43c:	f7ff fee2 	bl	801b204 <_malloc_r>
 801b440:	4607      	mov	r7, r0
 801b442:	2800      	cmp	r0, #0
 801b444:	d0ec      	beq.n	801b420 <_realloc_r+0x1c>
 801b446:	42b5      	cmp	r5, r6
 801b448:	462a      	mov	r2, r5
 801b44a:	4621      	mov	r1, r4
 801b44c:	bf28      	it	cs
 801b44e:	4632      	movcs	r2, r6
 801b450:	f000 fbe3 	bl	801bc1a <memcpy>
 801b454:	4621      	mov	r1, r4
 801b456:	4640      	mov	r0, r8
 801b458:	f000 fc18 	bl	801bc8c <_free_r>
 801b45c:	463c      	mov	r4, r7
 801b45e:	e7e0      	b.n	801b422 <_realloc_r+0x1e>

0801b460 <_strtoul_l.constprop.0>:
 801b460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b464:	4e34      	ldr	r6, [pc, #208]	@ (801b538 <_strtoul_l.constprop.0+0xd8>)
 801b466:	4686      	mov	lr, r0
 801b468:	460d      	mov	r5, r1
 801b46a:	4628      	mov	r0, r5
 801b46c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b470:	5d37      	ldrb	r7, [r6, r4]
 801b472:	f017 0708 	ands.w	r7, r7, #8
 801b476:	d1f8      	bne.n	801b46a <_strtoul_l.constprop.0+0xa>
 801b478:	2c2d      	cmp	r4, #45	@ 0x2d
 801b47a:	d12f      	bne.n	801b4dc <_strtoul_l.constprop.0+0x7c>
 801b47c:	782c      	ldrb	r4, [r5, #0]
 801b47e:	2701      	movs	r7, #1
 801b480:	1c85      	adds	r5, r0, #2
 801b482:	f033 0010 	bics.w	r0, r3, #16
 801b486:	d109      	bne.n	801b49c <_strtoul_l.constprop.0+0x3c>
 801b488:	2c30      	cmp	r4, #48	@ 0x30
 801b48a:	d12c      	bne.n	801b4e6 <_strtoul_l.constprop.0+0x86>
 801b48c:	7828      	ldrb	r0, [r5, #0]
 801b48e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b492:	2858      	cmp	r0, #88	@ 0x58
 801b494:	d127      	bne.n	801b4e6 <_strtoul_l.constprop.0+0x86>
 801b496:	786c      	ldrb	r4, [r5, #1]
 801b498:	2310      	movs	r3, #16
 801b49a:	3502      	adds	r5, #2
 801b49c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b4a0:	2600      	movs	r6, #0
 801b4a2:	fbb8 f8f3 	udiv	r8, r8, r3
 801b4a6:	fb03 f908 	mul.w	r9, r3, r8
 801b4aa:	ea6f 0909 	mvn.w	r9, r9
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b4b4:	f1bc 0f09 	cmp.w	ip, #9
 801b4b8:	d81c      	bhi.n	801b4f4 <_strtoul_l.constprop.0+0x94>
 801b4ba:	4664      	mov	r4, ip
 801b4bc:	42a3      	cmp	r3, r4
 801b4be:	dd2a      	ble.n	801b516 <_strtoul_l.constprop.0+0xb6>
 801b4c0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b4c4:	d007      	beq.n	801b4d6 <_strtoul_l.constprop.0+0x76>
 801b4c6:	4580      	cmp	r8, r0
 801b4c8:	d322      	bcc.n	801b510 <_strtoul_l.constprop.0+0xb0>
 801b4ca:	d101      	bne.n	801b4d0 <_strtoul_l.constprop.0+0x70>
 801b4cc:	45a1      	cmp	r9, r4
 801b4ce:	db1f      	blt.n	801b510 <_strtoul_l.constprop.0+0xb0>
 801b4d0:	fb00 4003 	mla	r0, r0, r3, r4
 801b4d4:	2601      	movs	r6, #1
 801b4d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b4da:	e7e9      	b.n	801b4b0 <_strtoul_l.constprop.0+0x50>
 801b4dc:	2c2b      	cmp	r4, #43	@ 0x2b
 801b4de:	bf04      	itt	eq
 801b4e0:	782c      	ldrbeq	r4, [r5, #0]
 801b4e2:	1c85      	addeq	r5, r0, #2
 801b4e4:	e7cd      	b.n	801b482 <_strtoul_l.constprop.0+0x22>
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d1d8      	bne.n	801b49c <_strtoul_l.constprop.0+0x3c>
 801b4ea:	2c30      	cmp	r4, #48	@ 0x30
 801b4ec:	bf0c      	ite	eq
 801b4ee:	2308      	moveq	r3, #8
 801b4f0:	230a      	movne	r3, #10
 801b4f2:	e7d3      	b.n	801b49c <_strtoul_l.constprop.0+0x3c>
 801b4f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b4f8:	f1bc 0f19 	cmp.w	ip, #25
 801b4fc:	d801      	bhi.n	801b502 <_strtoul_l.constprop.0+0xa2>
 801b4fe:	3c37      	subs	r4, #55	@ 0x37
 801b500:	e7dc      	b.n	801b4bc <_strtoul_l.constprop.0+0x5c>
 801b502:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b506:	f1bc 0f19 	cmp.w	ip, #25
 801b50a:	d804      	bhi.n	801b516 <_strtoul_l.constprop.0+0xb6>
 801b50c:	3c57      	subs	r4, #87	@ 0x57
 801b50e:	e7d5      	b.n	801b4bc <_strtoul_l.constprop.0+0x5c>
 801b510:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b514:	e7df      	b.n	801b4d6 <_strtoul_l.constprop.0+0x76>
 801b516:	1c73      	adds	r3, r6, #1
 801b518:	d106      	bne.n	801b528 <_strtoul_l.constprop.0+0xc8>
 801b51a:	2322      	movs	r3, #34	@ 0x22
 801b51c:	f8ce 3000 	str.w	r3, [lr]
 801b520:	4630      	mov	r0, r6
 801b522:	b932      	cbnz	r2, 801b532 <_strtoul_l.constprop.0+0xd2>
 801b524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b528:	b107      	cbz	r7, 801b52c <_strtoul_l.constprop.0+0xcc>
 801b52a:	4240      	negs	r0, r0
 801b52c:	2a00      	cmp	r2, #0
 801b52e:	d0f9      	beq.n	801b524 <_strtoul_l.constprop.0+0xc4>
 801b530:	b106      	cbz	r6, 801b534 <_strtoul_l.constprop.0+0xd4>
 801b532:	1e69      	subs	r1, r5, #1
 801b534:	6011      	str	r1, [r2, #0]
 801b536:	e7f5      	b.n	801b524 <_strtoul_l.constprop.0+0xc4>
 801b538:	0801d656 	.word	0x0801d656

0801b53c <strtoul>:
 801b53c:	4613      	mov	r3, r2
 801b53e:	460a      	mov	r2, r1
 801b540:	4601      	mov	r1, r0
 801b542:	4802      	ldr	r0, [pc, #8]	@ (801b54c <strtoul+0x10>)
 801b544:	6800      	ldr	r0, [r0, #0]
 801b546:	f7ff bf8b 	b.w	801b460 <_strtoul_l.constprop.0>
 801b54a:	bf00      	nop
 801b54c:	240002b0 	.word	0x240002b0

0801b550 <std>:
 801b550:	2300      	movs	r3, #0
 801b552:	b510      	push	{r4, lr}
 801b554:	4604      	mov	r4, r0
 801b556:	e9c0 3300 	strd	r3, r3, [r0]
 801b55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b55e:	6083      	str	r3, [r0, #8]
 801b560:	8181      	strh	r1, [r0, #12]
 801b562:	6643      	str	r3, [r0, #100]	@ 0x64
 801b564:	81c2      	strh	r2, [r0, #14]
 801b566:	6183      	str	r3, [r0, #24]
 801b568:	4619      	mov	r1, r3
 801b56a:	2208      	movs	r2, #8
 801b56c:	305c      	adds	r0, #92	@ 0x5c
 801b56e:	f000 fa8b 	bl	801ba88 <memset>
 801b572:	4b0d      	ldr	r3, [pc, #52]	@ (801b5a8 <std+0x58>)
 801b574:	6263      	str	r3, [r4, #36]	@ 0x24
 801b576:	4b0d      	ldr	r3, [pc, #52]	@ (801b5ac <std+0x5c>)
 801b578:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b57a:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b0 <std+0x60>)
 801b57c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b57e:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b4 <std+0x64>)
 801b580:	6323      	str	r3, [r4, #48]	@ 0x30
 801b582:	4b0d      	ldr	r3, [pc, #52]	@ (801b5b8 <std+0x68>)
 801b584:	6224      	str	r4, [r4, #32]
 801b586:	429c      	cmp	r4, r3
 801b588:	d006      	beq.n	801b598 <std+0x48>
 801b58a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b58e:	4294      	cmp	r4, r2
 801b590:	d002      	beq.n	801b598 <std+0x48>
 801b592:	33d0      	adds	r3, #208	@ 0xd0
 801b594:	429c      	cmp	r4, r3
 801b596:	d105      	bne.n	801b5a4 <std+0x54>
 801b598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5a0:	f000 bb30 	b.w	801bc04 <__retarget_lock_init_recursive>
 801b5a4:	bd10      	pop	{r4, pc}
 801b5a6:	bf00      	nop
 801b5a8:	0801b815 	.word	0x0801b815
 801b5ac:	0801b837 	.word	0x0801b837
 801b5b0:	0801b86f 	.word	0x0801b86f
 801b5b4:	0801b893 	.word	0x0801b893
 801b5b8:	24012e74 	.word	0x24012e74

0801b5bc <stdio_exit_handler>:
 801b5bc:	4a02      	ldr	r2, [pc, #8]	@ (801b5c8 <stdio_exit_handler+0xc>)
 801b5be:	4903      	ldr	r1, [pc, #12]	@ (801b5cc <stdio_exit_handler+0x10>)
 801b5c0:	4803      	ldr	r0, [pc, #12]	@ (801b5d0 <stdio_exit_handler+0x14>)
 801b5c2:	f000 b869 	b.w	801b698 <_fwalk_sglue>
 801b5c6:	bf00      	nop
 801b5c8:	240002a4 	.word	0x240002a4
 801b5cc:	0801c689 	.word	0x0801c689
 801b5d0:	240002b4 	.word	0x240002b4

0801b5d4 <cleanup_stdio>:
 801b5d4:	6841      	ldr	r1, [r0, #4]
 801b5d6:	4b0c      	ldr	r3, [pc, #48]	@ (801b608 <cleanup_stdio+0x34>)
 801b5d8:	4299      	cmp	r1, r3
 801b5da:	b510      	push	{r4, lr}
 801b5dc:	4604      	mov	r4, r0
 801b5de:	d001      	beq.n	801b5e4 <cleanup_stdio+0x10>
 801b5e0:	f001 f852 	bl	801c688 <_fflush_r>
 801b5e4:	68a1      	ldr	r1, [r4, #8]
 801b5e6:	4b09      	ldr	r3, [pc, #36]	@ (801b60c <cleanup_stdio+0x38>)
 801b5e8:	4299      	cmp	r1, r3
 801b5ea:	d002      	beq.n	801b5f2 <cleanup_stdio+0x1e>
 801b5ec:	4620      	mov	r0, r4
 801b5ee:	f001 f84b 	bl	801c688 <_fflush_r>
 801b5f2:	68e1      	ldr	r1, [r4, #12]
 801b5f4:	4b06      	ldr	r3, [pc, #24]	@ (801b610 <cleanup_stdio+0x3c>)
 801b5f6:	4299      	cmp	r1, r3
 801b5f8:	d004      	beq.n	801b604 <cleanup_stdio+0x30>
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b600:	f001 b842 	b.w	801c688 <_fflush_r>
 801b604:	bd10      	pop	{r4, pc}
 801b606:	bf00      	nop
 801b608:	24012e74 	.word	0x24012e74
 801b60c:	24012edc 	.word	0x24012edc
 801b610:	24012f44 	.word	0x24012f44

0801b614 <global_stdio_init.part.0>:
 801b614:	b510      	push	{r4, lr}
 801b616:	4b0b      	ldr	r3, [pc, #44]	@ (801b644 <global_stdio_init.part.0+0x30>)
 801b618:	4c0b      	ldr	r4, [pc, #44]	@ (801b648 <global_stdio_init.part.0+0x34>)
 801b61a:	4a0c      	ldr	r2, [pc, #48]	@ (801b64c <global_stdio_init.part.0+0x38>)
 801b61c:	601a      	str	r2, [r3, #0]
 801b61e:	4620      	mov	r0, r4
 801b620:	2200      	movs	r2, #0
 801b622:	2104      	movs	r1, #4
 801b624:	f7ff ff94 	bl	801b550 <std>
 801b628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b62c:	2201      	movs	r2, #1
 801b62e:	2109      	movs	r1, #9
 801b630:	f7ff ff8e 	bl	801b550 <std>
 801b634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b638:	2202      	movs	r2, #2
 801b63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b63e:	2112      	movs	r1, #18
 801b640:	f7ff bf86 	b.w	801b550 <std>
 801b644:	24012fac 	.word	0x24012fac
 801b648:	24012e74 	.word	0x24012e74
 801b64c:	0801b5bd 	.word	0x0801b5bd

0801b650 <__sfp_lock_acquire>:
 801b650:	4801      	ldr	r0, [pc, #4]	@ (801b658 <__sfp_lock_acquire+0x8>)
 801b652:	f000 bad8 	b.w	801bc06 <__retarget_lock_acquire_recursive>
 801b656:	bf00      	nop
 801b658:	24012fb6 	.word	0x24012fb6

0801b65c <__sfp_lock_release>:
 801b65c:	4801      	ldr	r0, [pc, #4]	@ (801b664 <__sfp_lock_release+0x8>)
 801b65e:	f000 bad3 	b.w	801bc08 <__retarget_lock_release_recursive>
 801b662:	bf00      	nop
 801b664:	24012fb6 	.word	0x24012fb6

0801b668 <__sinit>:
 801b668:	b510      	push	{r4, lr}
 801b66a:	4604      	mov	r4, r0
 801b66c:	f7ff fff0 	bl	801b650 <__sfp_lock_acquire>
 801b670:	6a23      	ldr	r3, [r4, #32]
 801b672:	b11b      	cbz	r3, 801b67c <__sinit+0x14>
 801b674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b678:	f7ff bff0 	b.w	801b65c <__sfp_lock_release>
 801b67c:	4b04      	ldr	r3, [pc, #16]	@ (801b690 <__sinit+0x28>)
 801b67e:	6223      	str	r3, [r4, #32]
 801b680:	4b04      	ldr	r3, [pc, #16]	@ (801b694 <__sinit+0x2c>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d1f5      	bne.n	801b674 <__sinit+0xc>
 801b688:	f7ff ffc4 	bl	801b614 <global_stdio_init.part.0>
 801b68c:	e7f2      	b.n	801b674 <__sinit+0xc>
 801b68e:	bf00      	nop
 801b690:	0801b5d5 	.word	0x0801b5d5
 801b694:	24012fac 	.word	0x24012fac

0801b698 <_fwalk_sglue>:
 801b698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b69c:	4607      	mov	r7, r0
 801b69e:	4688      	mov	r8, r1
 801b6a0:	4614      	mov	r4, r2
 801b6a2:	2600      	movs	r6, #0
 801b6a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6a8:	f1b9 0901 	subs.w	r9, r9, #1
 801b6ac:	d505      	bpl.n	801b6ba <_fwalk_sglue+0x22>
 801b6ae:	6824      	ldr	r4, [r4, #0]
 801b6b0:	2c00      	cmp	r4, #0
 801b6b2:	d1f7      	bne.n	801b6a4 <_fwalk_sglue+0xc>
 801b6b4:	4630      	mov	r0, r6
 801b6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6ba:	89ab      	ldrh	r3, [r5, #12]
 801b6bc:	2b01      	cmp	r3, #1
 801b6be:	d907      	bls.n	801b6d0 <_fwalk_sglue+0x38>
 801b6c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6c4:	3301      	adds	r3, #1
 801b6c6:	d003      	beq.n	801b6d0 <_fwalk_sglue+0x38>
 801b6c8:	4629      	mov	r1, r5
 801b6ca:	4638      	mov	r0, r7
 801b6cc:	47c0      	blx	r8
 801b6ce:	4306      	orrs	r6, r0
 801b6d0:	3568      	adds	r5, #104	@ 0x68
 801b6d2:	e7e9      	b.n	801b6a8 <_fwalk_sglue+0x10>

0801b6d4 <_fwrite_r>:
 801b6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6d8:	9c08      	ldr	r4, [sp, #32]
 801b6da:	468a      	mov	sl, r1
 801b6dc:	4690      	mov	r8, r2
 801b6de:	fb02 f903 	mul.w	r9, r2, r3
 801b6e2:	4606      	mov	r6, r0
 801b6e4:	b118      	cbz	r0, 801b6ee <_fwrite_r+0x1a>
 801b6e6:	6a03      	ldr	r3, [r0, #32]
 801b6e8:	b90b      	cbnz	r3, 801b6ee <_fwrite_r+0x1a>
 801b6ea:	f7ff ffbd 	bl	801b668 <__sinit>
 801b6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b6f0:	07dd      	lsls	r5, r3, #31
 801b6f2:	d405      	bmi.n	801b700 <_fwrite_r+0x2c>
 801b6f4:	89a3      	ldrh	r3, [r4, #12]
 801b6f6:	0598      	lsls	r0, r3, #22
 801b6f8:	d402      	bmi.n	801b700 <_fwrite_r+0x2c>
 801b6fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b6fc:	f000 fa83 	bl	801bc06 <__retarget_lock_acquire_recursive>
 801b700:	89a3      	ldrh	r3, [r4, #12]
 801b702:	0719      	lsls	r1, r3, #28
 801b704:	d516      	bpl.n	801b734 <_fwrite_r+0x60>
 801b706:	6923      	ldr	r3, [r4, #16]
 801b708:	b1a3      	cbz	r3, 801b734 <_fwrite_r+0x60>
 801b70a:	2500      	movs	r5, #0
 801b70c:	454d      	cmp	r5, r9
 801b70e:	d01f      	beq.n	801b750 <_fwrite_r+0x7c>
 801b710:	68a7      	ldr	r7, [r4, #8]
 801b712:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b716:	3f01      	subs	r7, #1
 801b718:	2f00      	cmp	r7, #0
 801b71a:	60a7      	str	r7, [r4, #8]
 801b71c:	da04      	bge.n	801b728 <_fwrite_r+0x54>
 801b71e:	69a3      	ldr	r3, [r4, #24]
 801b720:	429f      	cmp	r7, r3
 801b722:	db0f      	blt.n	801b744 <_fwrite_r+0x70>
 801b724:	290a      	cmp	r1, #10
 801b726:	d00d      	beq.n	801b744 <_fwrite_r+0x70>
 801b728:	6823      	ldr	r3, [r4, #0]
 801b72a:	1c5a      	adds	r2, r3, #1
 801b72c:	6022      	str	r2, [r4, #0]
 801b72e:	7019      	strb	r1, [r3, #0]
 801b730:	3501      	adds	r5, #1
 801b732:	e7eb      	b.n	801b70c <_fwrite_r+0x38>
 801b734:	4621      	mov	r1, r4
 801b736:	4630      	mov	r0, r6
 801b738:	f000 f926 	bl	801b988 <__swsetup_r>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	d0e4      	beq.n	801b70a <_fwrite_r+0x36>
 801b740:	2500      	movs	r5, #0
 801b742:	e005      	b.n	801b750 <_fwrite_r+0x7c>
 801b744:	4622      	mov	r2, r4
 801b746:	4630      	mov	r0, r6
 801b748:	f000 f8e0 	bl	801b90c <__swbuf_r>
 801b74c:	3001      	adds	r0, #1
 801b74e:	d1ef      	bne.n	801b730 <_fwrite_r+0x5c>
 801b750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b752:	07da      	lsls	r2, r3, #31
 801b754:	d405      	bmi.n	801b762 <_fwrite_r+0x8e>
 801b756:	89a3      	ldrh	r3, [r4, #12]
 801b758:	059b      	lsls	r3, r3, #22
 801b75a:	d402      	bmi.n	801b762 <_fwrite_r+0x8e>
 801b75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b75e:	f000 fa53 	bl	801bc08 <__retarget_lock_release_recursive>
 801b762:	fbb5 f0f8 	udiv	r0, r5, r8
 801b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b76c <fwrite>:
 801b76c:	b507      	push	{r0, r1, r2, lr}
 801b76e:	9300      	str	r3, [sp, #0]
 801b770:	4613      	mov	r3, r2
 801b772:	460a      	mov	r2, r1
 801b774:	4601      	mov	r1, r0
 801b776:	4803      	ldr	r0, [pc, #12]	@ (801b784 <fwrite+0x18>)
 801b778:	6800      	ldr	r0, [r0, #0]
 801b77a:	f7ff ffab 	bl	801b6d4 <_fwrite_r>
 801b77e:	b003      	add	sp, #12
 801b780:	f85d fb04 	ldr.w	pc, [sp], #4
 801b784:	240002b0 	.word	0x240002b0

0801b788 <iprintf>:
 801b788:	b40f      	push	{r0, r1, r2, r3}
 801b78a:	b507      	push	{r0, r1, r2, lr}
 801b78c:	4906      	ldr	r1, [pc, #24]	@ (801b7a8 <iprintf+0x20>)
 801b78e:	ab04      	add	r3, sp, #16
 801b790:	6808      	ldr	r0, [r1, #0]
 801b792:	f853 2b04 	ldr.w	r2, [r3], #4
 801b796:	6881      	ldr	r1, [r0, #8]
 801b798:	9301      	str	r3, [sp, #4]
 801b79a:	f000 fc4b 	bl	801c034 <_vfiprintf_r>
 801b79e:	b003      	add	sp, #12
 801b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7a4:	b004      	add	sp, #16
 801b7a6:	4770      	bx	lr
 801b7a8:	240002b0 	.word	0x240002b0

0801b7ac <sniprintf>:
 801b7ac:	b40c      	push	{r2, r3}
 801b7ae:	b530      	push	{r4, r5, lr}
 801b7b0:	4b17      	ldr	r3, [pc, #92]	@ (801b810 <sniprintf+0x64>)
 801b7b2:	1e0c      	subs	r4, r1, #0
 801b7b4:	681d      	ldr	r5, [r3, #0]
 801b7b6:	b09d      	sub	sp, #116	@ 0x74
 801b7b8:	da08      	bge.n	801b7cc <sniprintf+0x20>
 801b7ba:	238b      	movs	r3, #139	@ 0x8b
 801b7bc:	602b      	str	r3, [r5, #0]
 801b7be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7c2:	b01d      	add	sp, #116	@ 0x74
 801b7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7c8:	b002      	add	sp, #8
 801b7ca:	4770      	bx	lr
 801b7cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b7d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b7d4:	bf14      	ite	ne
 801b7d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b7da:	4623      	moveq	r3, r4
 801b7dc:	9304      	str	r3, [sp, #16]
 801b7de:	9307      	str	r3, [sp, #28]
 801b7e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b7e4:	9002      	str	r0, [sp, #8]
 801b7e6:	9006      	str	r0, [sp, #24]
 801b7e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b7ee:	ab21      	add	r3, sp, #132	@ 0x84
 801b7f0:	a902      	add	r1, sp, #8
 801b7f2:	4628      	mov	r0, r5
 801b7f4:	9301      	str	r3, [sp, #4]
 801b7f6:	f000 faf7 	bl	801bde8 <_svfiprintf_r>
 801b7fa:	1c43      	adds	r3, r0, #1
 801b7fc:	bfbc      	itt	lt
 801b7fe:	238b      	movlt	r3, #139	@ 0x8b
 801b800:	602b      	strlt	r3, [r5, #0]
 801b802:	2c00      	cmp	r4, #0
 801b804:	d0dd      	beq.n	801b7c2 <sniprintf+0x16>
 801b806:	9b02      	ldr	r3, [sp, #8]
 801b808:	2200      	movs	r2, #0
 801b80a:	701a      	strb	r2, [r3, #0]
 801b80c:	e7d9      	b.n	801b7c2 <sniprintf+0x16>
 801b80e:	bf00      	nop
 801b810:	240002b0 	.word	0x240002b0

0801b814 <__sread>:
 801b814:	b510      	push	{r4, lr}
 801b816:	460c      	mov	r4, r1
 801b818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b81c:	f000 f994 	bl	801bb48 <_read_r>
 801b820:	2800      	cmp	r0, #0
 801b822:	bfab      	itete	ge
 801b824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b826:	89a3      	ldrhlt	r3, [r4, #12]
 801b828:	181b      	addge	r3, r3, r0
 801b82a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b82e:	bfac      	ite	ge
 801b830:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b832:	81a3      	strhlt	r3, [r4, #12]
 801b834:	bd10      	pop	{r4, pc}

0801b836 <__swrite>:
 801b836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83a:	461f      	mov	r7, r3
 801b83c:	898b      	ldrh	r3, [r1, #12]
 801b83e:	05db      	lsls	r3, r3, #23
 801b840:	4605      	mov	r5, r0
 801b842:	460c      	mov	r4, r1
 801b844:	4616      	mov	r6, r2
 801b846:	d505      	bpl.n	801b854 <__swrite+0x1e>
 801b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b84c:	2302      	movs	r3, #2
 801b84e:	2200      	movs	r2, #0
 801b850:	f000 f968 	bl	801bb24 <_lseek_r>
 801b854:	89a3      	ldrh	r3, [r4, #12]
 801b856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b85a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b85e:	81a3      	strh	r3, [r4, #12]
 801b860:	4632      	mov	r2, r6
 801b862:	463b      	mov	r3, r7
 801b864:	4628      	mov	r0, r5
 801b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b86a:	f000 b98f 	b.w	801bb8c <_write_r>

0801b86e <__sseek>:
 801b86e:	b510      	push	{r4, lr}
 801b870:	460c      	mov	r4, r1
 801b872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b876:	f000 f955 	bl	801bb24 <_lseek_r>
 801b87a:	1c43      	adds	r3, r0, #1
 801b87c:	89a3      	ldrh	r3, [r4, #12]
 801b87e:	bf15      	itete	ne
 801b880:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b88a:	81a3      	strheq	r3, [r4, #12]
 801b88c:	bf18      	it	ne
 801b88e:	81a3      	strhne	r3, [r4, #12]
 801b890:	bd10      	pop	{r4, pc}

0801b892 <__sclose>:
 801b892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b896:	f000 b935 	b.w	801bb04 <_close_r>

0801b89a <_vsniprintf_r>:
 801b89a:	b530      	push	{r4, r5, lr}
 801b89c:	4614      	mov	r4, r2
 801b89e:	2c00      	cmp	r4, #0
 801b8a0:	b09b      	sub	sp, #108	@ 0x6c
 801b8a2:	4605      	mov	r5, r0
 801b8a4:	461a      	mov	r2, r3
 801b8a6:	da05      	bge.n	801b8b4 <_vsniprintf_r+0x1a>
 801b8a8:	238b      	movs	r3, #139	@ 0x8b
 801b8aa:	6003      	str	r3, [r0, #0]
 801b8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8b0:	b01b      	add	sp, #108	@ 0x6c
 801b8b2:	bd30      	pop	{r4, r5, pc}
 801b8b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b8b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b8bc:	bf14      	ite	ne
 801b8be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b8c2:	4623      	moveq	r3, r4
 801b8c4:	9302      	str	r3, [sp, #8]
 801b8c6:	9305      	str	r3, [sp, #20]
 801b8c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b8cc:	9100      	str	r1, [sp, #0]
 801b8ce:	9104      	str	r1, [sp, #16]
 801b8d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b8d4:	4669      	mov	r1, sp
 801b8d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b8d8:	f000 fa86 	bl	801bde8 <_svfiprintf_r>
 801b8dc:	1c43      	adds	r3, r0, #1
 801b8de:	bfbc      	itt	lt
 801b8e0:	238b      	movlt	r3, #139	@ 0x8b
 801b8e2:	602b      	strlt	r3, [r5, #0]
 801b8e4:	2c00      	cmp	r4, #0
 801b8e6:	d0e3      	beq.n	801b8b0 <_vsniprintf_r+0x16>
 801b8e8:	9b00      	ldr	r3, [sp, #0]
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	701a      	strb	r2, [r3, #0]
 801b8ee:	e7df      	b.n	801b8b0 <_vsniprintf_r+0x16>

0801b8f0 <vsniprintf>:
 801b8f0:	b507      	push	{r0, r1, r2, lr}
 801b8f2:	9300      	str	r3, [sp, #0]
 801b8f4:	4613      	mov	r3, r2
 801b8f6:	460a      	mov	r2, r1
 801b8f8:	4601      	mov	r1, r0
 801b8fa:	4803      	ldr	r0, [pc, #12]	@ (801b908 <vsniprintf+0x18>)
 801b8fc:	6800      	ldr	r0, [r0, #0]
 801b8fe:	f7ff ffcc 	bl	801b89a <_vsniprintf_r>
 801b902:	b003      	add	sp, #12
 801b904:	f85d fb04 	ldr.w	pc, [sp], #4
 801b908:	240002b0 	.word	0x240002b0

0801b90c <__swbuf_r>:
 801b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b90e:	460e      	mov	r6, r1
 801b910:	4614      	mov	r4, r2
 801b912:	4605      	mov	r5, r0
 801b914:	b118      	cbz	r0, 801b91e <__swbuf_r+0x12>
 801b916:	6a03      	ldr	r3, [r0, #32]
 801b918:	b90b      	cbnz	r3, 801b91e <__swbuf_r+0x12>
 801b91a:	f7ff fea5 	bl	801b668 <__sinit>
 801b91e:	69a3      	ldr	r3, [r4, #24]
 801b920:	60a3      	str	r3, [r4, #8]
 801b922:	89a3      	ldrh	r3, [r4, #12]
 801b924:	071a      	lsls	r2, r3, #28
 801b926:	d501      	bpl.n	801b92c <__swbuf_r+0x20>
 801b928:	6923      	ldr	r3, [r4, #16]
 801b92a:	b943      	cbnz	r3, 801b93e <__swbuf_r+0x32>
 801b92c:	4621      	mov	r1, r4
 801b92e:	4628      	mov	r0, r5
 801b930:	f000 f82a 	bl	801b988 <__swsetup_r>
 801b934:	b118      	cbz	r0, 801b93e <__swbuf_r+0x32>
 801b936:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b93a:	4638      	mov	r0, r7
 801b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b93e:	6823      	ldr	r3, [r4, #0]
 801b940:	6922      	ldr	r2, [r4, #16]
 801b942:	1a98      	subs	r0, r3, r2
 801b944:	6963      	ldr	r3, [r4, #20]
 801b946:	b2f6      	uxtb	r6, r6
 801b948:	4283      	cmp	r3, r0
 801b94a:	4637      	mov	r7, r6
 801b94c:	dc05      	bgt.n	801b95a <__swbuf_r+0x4e>
 801b94e:	4621      	mov	r1, r4
 801b950:	4628      	mov	r0, r5
 801b952:	f000 fe99 	bl	801c688 <_fflush_r>
 801b956:	2800      	cmp	r0, #0
 801b958:	d1ed      	bne.n	801b936 <__swbuf_r+0x2a>
 801b95a:	68a3      	ldr	r3, [r4, #8]
 801b95c:	3b01      	subs	r3, #1
 801b95e:	60a3      	str	r3, [r4, #8]
 801b960:	6823      	ldr	r3, [r4, #0]
 801b962:	1c5a      	adds	r2, r3, #1
 801b964:	6022      	str	r2, [r4, #0]
 801b966:	701e      	strb	r6, [r3, #0]
 801b968:	6962      	ldr	r2, [r4, #20]
 801b96a:	1c43      	adds	r3, r0, #1
 801b96c:	429a      	cmp	r2, r3
 801b96e:	d004      	beq.n	801b97a <__swbuf_r+0x6e>
 801b970:	89a3      	ldrh	r3, [r4, #12]
 801b972:	07db      	lsls	r3, r3, #31
 801b974:	d5e1      	bpl.n	801b93a <__swbuf_r+0x2e>
 801b976:	2e0a      	cmp	r6, #10
 801b978:	d1df      	bne.n	801b93a <__swbuf_r+0x2e>
 801b97a:	4621      	mov	r1, r4
 801b97c:	4628      	mov	r0, r5
 801b97e:	f000 fe83 	bl	801c688 <_fflush_r>
 801b982:	2800      	cmp	r0, #0
 801b984:	d0d9      	beq.n	801b93a <__swbuf_r+0x2e>
 801b986:	e7d6      	b.n	801b936 <__swbuf_r+0x2a>

0801b988 <__swsetup_r>:
 801b988:	b538      	push	{r3, r4, r5, lr}
 801b98a:	4b29      	ldr	r3, [pc, #164]	@ (801ba30 <__swsetup_r+0xa8>)
 801b98c:	4605      	mov	r5, r0
 801b98e:	6818      	ldr	r0, [r3, #0]
 801b990:	460c      	mov	r4, r1
 801b992:	b118      	cbz	r0, 801b99c <__swsetup_r+0x14>
 801b994:	6a03      	ldr	r3, [r0, #32]
 801b996:	b90b      	cbnz	r3, 801b99c <__swsetup_r+0x14>
 801b998:	f7ff fe66 	bl	801b668 <__sinit>
 801b99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9a0:	0719      	lsls	r1, r3, #28
 801b9a2:	d422      	bmi.n	801b9ea <__swsetup_r+0x62>
 801b9a4:	06da      	lsls	r2, r3, #27
 801b9a6:	d407      	bmi.n	801b9b8 <__swsetup_r+0x30>
 801b9a8:	2209      	movs	r2, #9
 801b9aa:	602a      	str	r2, [r5, #0]
 801b9ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b9b0:	81a3      	strh	r3, [r4, #12]
 801b9b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b9b6:	e033      	b.n	801ba20 <__swsetup_r+0x98>
 801b9b8:	0758      	lsls	r0, r3, #29
 801b9ba:	d512      	bpl.n	801b9e2 <__swsetup_r+0x5a>
 801b9bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b9be:	b141      	cbz	r1, 801b9d2 <__swsetup_r+0x4a>
 801b9c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b9c4:	4299      	cmp	r1, r3
 801b9c6:	d002      	beq.n	801b9ce <__swsetup_r+0x46>
 801b9c8:	4628      	mov	r0, r5
 801b9ca:	f000 f95f 	bl	801bc8c <_free_r>
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	6363      	str	r3, [r4, #52]	@ 0x34
 801b9d2:	89a3      	ldrh	r3, [r4, #12]
 801b9d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b9d8:	81a3      	strh	r3, [r4, #12]
 801b9da:	2300      	movs	r3, #0
 801b9dc:	6063      	str	r3, [r4, #4]
 801b9de:	6923      	ldr	r3, [r4, #16]
 801b9e0:	6023      	str	r3, [r4, #0]
 801b9e2:	89a3      	ldrh	r3, [r4, #12]
 801b9e4:	f043 0308 	orr.w	r3, r3, #8
 801b9e8:	81a3      	strh	r3, [r4, #12]
 801b9ea:	6923      	ldr	r3, [r4, #16]
 801b9ec:	b94b      	cbnz	r3, 801ba02 <__swsetup_r+0x7a>
 801b9ee:	89a3      	ldrh	r3, [r4, #12]
 801b9f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b9f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b9f8:	d003      	beq.n	801ba02 <__swsetup_r+0x7a>
 801b9fa:	4621      	mov	r1, r4
 801b9fc:	4628      	mov	r0, r5
 801b9fe:	f000 fea3 	bl	801c748 <__smakebuf_r>
 801ba02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba06:	f013 0201 	ands.w	r2, r3, #1
 801ba0a:	d00a      	beq.n	801ba22 <__swsetup_r+0x9a>
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	60a2      	str	r2, [r4, #8]
 801ba10:	6962      	ldr	r2, [r4, #20]
 801ba12:	4252      	negs	r2, r2
 801ba14:	61a2      	str	r2, [r4, #24]
 801ba16:	6922      	ldr	r2, [r4, #16]
 801ba18:	b942      	cbnz	r2, 801ba2c <__swsetup_r+0xa4>
 801ba1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ba1e:	d1c5      	bne.n	801b9ac <__swsetup_r+0x24>
 801ba20:	bd38      	pop	{r3, r4, r5, pc}
 801ba22:	0799      	lsls	r1, r3, #30
 801ba24:	bf58      	it	pl
 801ba26:	6962      	ldrpl	r2, [r4, #20]
 801ba28:	60a2      	str	r2, [r4, #8]
 801ba2a:	e7f4      	b.n	801ba16 <__swsetup_r+0x8e>
 801ba2c:	2000      	movs	r0, #0
 801ba2e:	e7f7      	b.n	801ba20 <__swsetup_r+0x98>
 801ba30:	240002b0 	.word	0x240002b0

0801ba34 <memcmp>:
 801ba34:	b510      	push	{r4, lr}
 801ba36:	3901      	subs	r1, #1
 801ba38:	4402      	add	r2, r0
 801ba3a:	4290      	cmp	r0, r2
 801ba3c:	d101      	bne.n	801ba42 <memcmp+0xe>
 801ba3e:	2000      	movs	r0, #0
 801ba40:	e005      	b.n	801ba4e <memcmp+0x1a>
 801ba42:	7803      	ldrb	r3, [r0, #0]
 801ba44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba48:	42a3      	cmp	r3, r4
 801ba4a:	d001      	beq.n	801ba50 <memcmp+0x1c>
 801ba4c:	1b18      	subs	r0, r3, r4
 801ba4e:	bd10      	pop	{r4, pc}
 801ba50:	3001      	adds	r0, #1
 801ba52:	e7f2      	b.n	801ba3a <memcmp+0x6>

0801ba54 <memmove>:
 801ba54:	4288      	cmp	r0, r1
 801ba56:	b510      	push	{r4, lr}
 801ba58:	eb01 0402 	add.w	r4, r1, r2
 801ba5c:	d902      	bls.n	801ba64 <memmove+0x10>
 801ba5e:	4284      	cmp	r4, r0
 801ba60:	4623      	mov	r3, r4
 801ba62:	d807      	bhi.n	801ba74 <memmove+0x20>
 801ba64:	1e43      	subs	r3, r0, #1
 801ba66:	42a1      	cmp	r1, r4
 801ba68:	d008      	beq.n	801ba7c <memmove+0x28>
 801ba6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ba72:	e7f8      	b.n	801ba66 <memmove+0x12>
 801ba74:	4402      	add	r2, r0
 801ba76:	4601      	mov	r1, r0
 801ba78:	428a      	cmp	r2, r1
 801ba7a:	d100      	bne.n	801ba7e <memmove+0x2a>
 801ba7c:	bd10      	pop	{r4, pc}
 801ba7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ba82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ba86:	e7f7      	b.n	801ba78 <memmove+0x24>

0801ba88 <memset>:
 801ba88:	4402      	add	r2, r0
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d100      	bne.n	801ba92 <memset+0xa>
 801ba90:	4770      	bx	lr
 801ba92:	f803 1b01 	strb.w	r1, [r3], #1
 801ba96:	e7f9      	b.n	801ba8c <memset+0x4>

0801ba98 <strchr>:
 801ba98:	b2c9      	uxtb	r1, r1
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801baa2:	b112      	cbz	r2, 801baaa <strchr+0x12>
 801baa4:	428a      	cmp	r2, r1
 801baa6:	d1f9      	bne.n	801ba9c <strchr+0x4>
 801baa8:	4770      	bx	lr
 801baaa:	2900      	cmp	r1, #0
 801baac:	bf18      	it	ne
 801baae:	2000      	movne	r0, #0
 801bab0:	4770      	bx	lr

0801bab2 <strncmp>:
 801bab2:	b510      	push	{r4, lr}
 801bab4:	b16a      	cbz	r2, 801bad2 <strncmp+0x20>
 801bab6:	3901      	subs	r1, #1
 801bab8:	1884      	adds	r4, r0, r2
 801baba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801babe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d103      	bne.n	801bace <strncmp+0x1c>
 801bac6:	42a0      	cmp	r0, r4
 801bac8:	d001      	beq.n	801bace <strncmp+0x1c>
 801baca:	2a00      	cmp	r2, #0
 801bacc:	d1f5      	bne.n	801baba <strncmp+0x8>
 801bace:	1ad0      	subs	r0, r2, r3
 801bad0:	bd10      	pop	{r4, pc}
 801bad2:	4610      	mov	r0, r2
 801bad4:	e7fc      	b.n	801bad0 <strncmp+0x1e>

0801bad6 <strstr>:
 801bad6:	780a      	ldrb	r2, [r1, #0]
 801bad8:	b570      	push	{r4, r5, r6, lr}
 801bada:	b96a      	cbnz	r2, 801baf8 <strstr+0x22>
 801badc:	bd70      	pop	{r4, r5, r6, pc}
 801bade:	429a      	cmp	r2, r3
 801bae0:	d109      	bne.n	801baf6 <strstr+0x20>
 801bae2:	460c      	mov	r4, r1
 801bae4:	4605      	mov	r5, r0
 801bae6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801baea:	2b00      	cmp	r3, #0
 801baec:	d0f6      	beq.n	801badc <strstr+0x6>
 801baee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801baf2:	429e      	cmp	r6, r3
 801baf4:	d0f7      	beq.n	801bae6 <strstr+0x10>
 801baf6:	3001      	adds	r0, #1
 801baf8:	7803      	ldrb	r3, [r0, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d1ef      	bne.n	801bade <strstr+0x8>
 801bafe:	4618      	mov	r0, r3
 801bb00:	e7ec      	b.n	801badc <strstr+0x6>
	...

0801bb04 <_close_r>:
 801bb04:	b538      	push	{r3, r4, r5, lr}
 801bb06:	4d06      	ldr	r5, [pc, #24]	@ (801bb20 <_close_r+0x1c>)
 801bb08:	2300      	movs	r3, #0
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	4608      	mov	r0, r1
 801bb0e:	602b      	str	r3, [r5, #0]
 801bb10:	f7e6 f97a 	bl	8001e08 <_close>
 801bb14:	1c43      	adds	r3, r0, #1
 801bb16:	d102      	bne.n	801bb1e <_close_r+0x1a>
 801bb18:	682b      	ldr	r3, [r5, #0]
 801bb1a:	b103      	cbz	r3, 801bb1e <_close_r+0x1a>
 801bb1c:	6023      	str	r3, [r4, #0]
 801bb1e:	bd38      	pop	{r3, r4, r5, pc}
 801bb20:	24012fb0 	.word	0x24012fb0

0801bb24 <_lseek_r>:
 801bb24:	b538      	push	{r3, r4, r5, lr}
 801bb26:	4d07      	ldr	r5, [pc, #28]	@ (801bb44 <_lseek_r+0x20>)
 801bb28:	4604      	mov	r4, r0
 801bb2a:	4608      	mov	r0, r1
 801bb2c:	4611      	mov	r1, r2
 801bb2e:	2200      	movs	r2, #0
 801bb30:	602a      	str	r2, [r5, #0]
 801bb32:	461a      	mov	r2, r3
 801bb34:	f7e6 f98f 	bl	8001e56 <_lseek>
 801bb38:	1c43      	adds	r3, r0, #1
 801bb3a:	d102      	bne.n	801bb42 <_lseek_r+0x1e>
 801bb3c:	682b      	ldr	r3, [r5, #0]
 801bb3e:	b103      	cbz	r3, 801bb42 <_lseek_r+0x1e>
 801bb40:	6023      	str	r3, [r4, #0]
 801bb42:	bd38      	pop	{r3, r4, r5, pc}
 801bb44:	24012fb0 	.word	0x24012fb0

0801bb48 <_read_r>:
 801bb48:	b538      	push	{r3, r4, r5, lr}
 801bb4a:	4d07      	ldr	r5, [pc, #28]	@ (801bb68 <_read_r+0x20>)
 801bb4c:	4604      	mov	r4, r0
 801bb4e:	4608      	mov	r0, r1
 801bb50:	4611      	mov	r1, r2
 801bb52:	2200      	movs	r2, #0
 801bb54:	602a      	str	r2, [r5, #0]
 801bb56:	461a      	mov	r2, r3
 801bb58:	f7e6 f91d 	bl	8001d96 <_read>
 801bb5c:	1c43      	adds	r3, r0, #1
 801bb5e:	d102      	bne.n	801bb66 <_read_r+0x1e>
 801bb60:	682b      	ldr	r3, [r5, #0]
 801bb62:	b103      	cbz	r3, 801bb66 <_read_r+0x1e>
 801bb64:	6023      	str	r3, [r4, #0]
 801bb66:	bd38      	pop	{r3, r4, r5, pc}
 801bb68:	24012fb0 	.word	0x24012fb0

0801bb6c <_sbrk_r>:
 801bb6c:	b538      	push	{r3, r4, r5, lr}
 801bb6e:	4d06      	ldr	r5, [pc, #24]	@ (801bb88 <_sbrk_r+0x1c>)
 801bb70:	2300      	movs	r3, #0
 801bb72:	4604      	mov	r4, r0
 801bb74:	4608      	mov	r0, r1
 801bb76:	602b      	str	r3, [r5, #0]
 801bb78:	f7e6 f97a 	bl	8001e70 <_sbrk>
 801bb7c:	1c43      	adds	r3, r0, #1
 801bb7e:	d102      	bne.n	801bb86 <_sbrk_r+0x1a>
 801bb80:	682b      	ldr	r3, [r5, #0]
 801bb82:	b103      	cbz	r3, 801bb86 <_sbrk_r+0x1a>
 801bb84:	6023      	str	r3, [r4, #0]
 801bb86:	bd38      	pop	{r3, r4, r5, pc}
 801bb88:	24012fb0 	.word	0x24012fb0

0801bb8c <_write_r>:
 801bb8c:	b538      	push	{r3, r4, r5, lr}
 801bb8e:	4d07      	ldr	r5, [pc, #28]	@ (801bbac <_write_r+0x20>)
 801bb90:	4604      	mov	r4, r0
 801bb92:	4608      	mov	r0, r1
 801bb94:	4611      	mov	r1, r2
 801bb96:	2200      	movs	r2, #0
 801bb98:	602a      	str	r2, [r5, #0]
 801bb9a:	461a      	mov	r2, r3
 801bb9c:	f7e6 f918 	bl	8001dd0 <_write>
 801bba0:	1c43      	adds	r3, r0, #1
 801bba2:	d102      	bne.n	801bbaa <_write_r+0x1e>
 801bba4:	682b      	ldr	r3, [r5, #0]
 801bba6:	b103      	cbz	r3, 801bbaa <_write_r+0x1e>
 801bba8:	6023      	str	r3, [r4, #0]
 801bbaa:	bd38      	pop	{r3, r4, r5, pc}
 801bbac:	24012fb0 	.word	0x24012fb0

0801bbb0 <__errno>:
 801bbb0:	4b01      	ldr	r3, [pc, #4]	@ (801bbb8 <__errno+0x8>)
 801bbb2:	6818      	ldr	r0, [r3, #0]
 801bbb4:	4770      	bx	lr
 801bbb6:	bf00      	nop
 801bbb8:	240002b0 	.word	0x240002b0

0801bbbc <__libc_init_array>:
 801bbbc:	b570      	push	{r4, r5, r6, lr}
 801bbbe:	4d0d      	ldr	r5, [pc, #52]	@ (801bbf4 <__libc_init_array+0x38>)
 801bbc0:	4c0d      	ldr	r4, [pc, #52]	@ (801bbf8 <__libc_init_array+0x3c>)
 801bbc2:	1b64      	subs	r4, r4, r5
 801bbc4:	10a4      	asrs	r4, r4, #2
 801bbc6:	2600      	movs	r6, #0
 801bbc8:	42a6      	cmp	r6, r4
 801bbca:	d109      	bne.n	801bbe0 <__libc_init_array+0x24>
 801bbcc:	4d0b      	ldr	r5, [pc, #44]	@ (801bbfc <__libc_init_array+0x40>)
 801bbce:	4c0c      	ldr	r4, [pc, #48]	@ (801bc00 <__libc_init_array+0x44>)
 801bbd0:	f000 fe64 	bl	801c89c <_init>
 801bbd4:	1b64      	subs	r4, r4, r5
 801bbd6:	10a4      	asrs	r4, r4, #2
 801bbd8:	2600      	movs	r6, #0
 801bbda:	42a6      	cmp	r6, r4
 801bbdc:	d105      	bne.n	801bbea <__libc_init_array+0x2e>
 801bbde:	bd70      	pop	{r4, r5, r6, pc}
 801bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bbe4:	4798      	blx	r3
 801bbe6:	3601      	adds	r6, #1
 801bbe8:	e7ee      	b.n	801bbc8 <__libc_init_array+0xc>
 801bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 801bbee:	4798      	blx	r3
 801bbf0:	3601      	adds	r6, #1
 801bbf2:	e7f2      	b.n	801bbda <__libc_init_array+0x1e>
 801bbf4:	0801d7d0 	.word	0x0801d7d0
 801bbf8:	0801d7d0 	.word	0x0801d7d0
 801bbfc:	0801d7d0 	.word	0x0801d7d0
 801bc00:	0801d7d8 	.word	0x0801d7d8

0801bc04 <__retarget_lock_init_recursive>:
 801bc04:	4770      	bx	lr

0801bc06 <__retarget_lock_acquire_recursive>:
 801bc06:	4770      	bx	lr

0801bc08 <__retarget_lock_release_recursive>:
 801bc08:	4770      	bx	lr

0801bc0a <strcpy>:
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc10:	f803 2b01 	strb.w	r2, [r3], #1
 801bc14:	2a00      	cmp	r2, #0
 801bc16:	d1f9      	bne.n	801bc0c <strcpy+0x2>
 801bc18:	4770      	bx	lr

0801bc1a <memcpy>:
 801bc1a:	440a      	add	r2, r1
 801bc1c:	4291      	cmp	r1, r2
 801bc1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801bc22:	d100      	bne.n	801bc26 <memcpy+0xc>
 801bc24:	4770      	bx	lr
 801bc26:	b510      	push	{r4, lr}
 801bc28:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bc30:	4291      	cmp	r1, r2
 801bc32:	d1f9      	bne.n	801bc28 <memcpy+0xe>
 801bc34:	bd10      	pop	{r4, pc}
	...

0801bc38 <__assert_func>:
 801bc38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc3a:	4614      	mov	r4, r2
 801bc3c:	461a      	mov	r2, r3
 801bc3e:	4b09      	ldr	r3, [pc, #36]	@ (801bc64 <__assert_func+0x2c>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	4605      	mov	r5, r0
 801bc44:	68d8      	ldr	r0, [r3, #12]
 801bc46:	b954      	cbnz	r4, 801bc5e <__assert_func+0x26>
 801bc48:	4b07      	ldr	r3, [pc, #28]	@ (801bc68 <__assert_func+0x30>)
 801bc4a:	461c      	mov	r4, r3
 801bc4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bc50:	9100      	str	r1, [sp, #0]
 801bc52:	462b      	mov	r3, r5
 801bc54:	4905      	ldr	r1, [pc, #20]	@ (801bc6c <__assert_func+0x34>)
 801bc56:	f000 fd3f 	bl	801c6d8 <fiprintf>
 801bc5a:	f000 fdd3 	bl	801c804 <abort>
 801bc5e:	4b04      	ldr	r3, [pc, #16]	@ (801bc70 <__assert_func+0x38>)
 801bc60:	e7f4      	b.n	801bc4c <__assert_func+0x14>
 801bc62:	bf00      	nop
 801bc64:	240002b0 	.word	0x240002b0
 801bc68:	0801d791 	.word	0x0801d791
 801bc6c:	0801d763 	.word	0x0801d763
 801bc70:	0801d756 	.word	0x0801d756

0801bc74 <__env_lock>:
 801bc74:	4801      	ldr	r0, [pc, #4]	@ (801bc7c <__env_lock+0x8>)
 801bc76:	f7ff bfc6 	b.w	801bc06 <__retarget_lock_acquire_recursive>
 801bc7a:	bf00      	nop
 801bc7c:	24012fb4 	.word	0x24012fb4

0801bc80 <__env_unlock>:
 801bc80:	4801      	ldr	r0, [pc, #4]	@ (801bc88 <__env_unlock+0x8>)
 801bc82:	f7ff bfc1 	b.w	801bc08 <__retarget_lock_release_recursive>
 801bc86:	bf00      	nop
 801bc88:	24012fb4 	.word	0x24012fb4

0801bc8c <_free_r>:
 801bc8c:	b538      	push	{r3, r4, r5, lr}
 801bc8e:	4605      	mov	r5, r0
 801bc90:	2900      	cmp	r1, #0
 801bc92:	d041      	beq.n	801bd18 <_free_r+0x8c>
 801bc94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc98:	1f0c      	subs	r4, r1, #4
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	bfb8      	it	lt
 801bc9e:	18e4      	addlt	r4, r4, r3
 801bca0:	f7ff fb30 	bl	801b304 <__malloc_lock>
 801bca4:	4a1d      	ldr	r2, [pc, #116]	@ (801bd1c <_free_r+0x90>)
 801bca6:	6813      	ldr	r3, [r2, #0]
 801bca8:	b933      	cbnz	r3, 801bcb8 <_free_r+0x2c>
 801bcaa:	6063      	str	r3, [r4, #4]
 801bcac:	6014      	str	r4, [r2, #0]
 801bcae:	4628      	mov	r0, r5
 801bcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bcb4:	f7ff bb2c 	b.w	801b310 <__malloc_unlock>
 801bcb8:	42a3      	cmp	r3, r4
 801bcba:	d908      	bls.n	801bcce <_free_r+0x42>
 801bcbc:	6820      	ldr	r0, [r4, #0]
 801bcbe:	1821      	adds	r1, r4, r0
 801bcc0:	428b      	cmp	r3, r1
 801bcc2:	bf01      	itttt	eq
 801bcc4:	6819      	ldreq	r1, [r3, #0]
 801bcc6:	685b      	ldreq	r3, [r3, #4]
 801bcc8:	1809      	addeq	r1, r1, r0
 801bcca:	6021      	streq	r1, [r4, #0]
 801bccc:	e7ed      	b.n	801bcaa <_free_r+0x1e>
 801bcce:	461a      	mov	r2, r3
 801bcd0:	685b      	ldr	r3, [r3, #4]
 801bcd2:	b10b      	cbz	r3, 801bcd8 <_free_r+0x4c>
 801bcd4:	42a3      	cmp	r3, r4
 801bcd6:	d9fa      	bls.n	801bcce <_free_r+0x42>
 801bcd8:	6811      	ldr	r1, [r2, #0]
 801bcda:	1850      	adds	r0, r2, r1
 801bcdc:	42a0      	cmp	r0, r4
 801bcde:	d10b      	bne.n	801bcf8 <_free_r+0x6c>
 801bce0:	6820      	ldr	r0, [r4, #0]
 801bce2:	4401      	add	r1, r0
 801bce4:	1850      	adds	r0, r2, r1
 801bce6:	4283      	cmp	r3, r0
 801bce8:	6011      	str	r1, [r2, #0]
 801bcea:	d1e0      	bne.n	801bcae <_free_r+0x22>
 801bcec:	6818      	ldr	r0, [r3, #0]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	6053      	str	r3, [r2, #4]
 801bcf2:	4408      	add	r0, r1
 801bcf4:	6010      	str	r0, [r2, #0]
 801bcf6:	e7da      	b.n	801bcae <_free_r+0x22>
 801bcf8:	d902      	bls.n	801bd00 <_free_r+0x74>
 801bcfa:	230c      	movs	r3, #12
 801bcfc:	602b      	str	r3, [r5, #0]
 801bcfe:	e7d6      	b.n	801bcae <_free_r+0x22>
 801bd00:	6820      	ldr	r0, [r4, #0]
 801bd02:	1821      	adds	r1, r4, r0
 801bd04:	428b      	cmp	r3, r1
 801bd06:	bf04      	itt	eq
 801bd08:	6819      	ldreq	r1, [r3, #0]
 801bd0a:	685b      	ldreq	r3, [r3, #4]
 801bd0c:	6063      	str	r3, [r4, #4]
 801bd0e:	bf04      	itt	eq
 801bd10:	1809      	addeq	r1, r1, r0
 801bd12:	6021      	streq	r1, [r4, #0]
 801bd14:	6054      	str	r4, [r2, #4]
 801bd16:	e7ca      	b.n	801bcae <_free_r+0x22>
 801bd18:	bd38      	pop	{r3, r4, r5, pc}
 801bd1a:	bf00      	nop
 801bd1c:	24012e70 	.word	0x24012e70

0801bd20 <_malloc_usable_size_r>:
 801bd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd24:	1f18      	subs	r0, r3, #4
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	bfbc      	itt	lt
 801bd2a:	580b      	ldrlt	r3, [r1, r0]
 801bd2c:	18c0      	addlt	r0, r0, r3
 801bd2e:	4770      	bx	lr

0801bd30 <__ssputs_r>:
 801bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd34:	688e      	ldr	r6, [r1, #8]
 801bd36:	461f      	mov	r7, r3
 801bd38:	42be      	cmp	r6, r7
 801bd3a:	680b      	ldr	r3, [r1, #0]
 801bd3c:	4682      	mov	sl, r0
 801bd3e:	460c      	mov	r4, r1
 801bd40:	4690      	mov	r8, r2
 801bd42:	d82d      	bhi.n	801bda0 <__ssputs_r+0x70>
 801bd44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bd48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bd4c:	d026      	beq.n	801bd9c <__ssputs_r+0x6c>
 801bd4e:	6965      	ldr	r5, [r4, #20]
 801bd50:	6909      	ldr	r1, [r1, #16]
 801bd52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd56:	eba3 0901 	sub.w	r9, r3, r1
 801bd5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bd5e:	1c7b      	adds	r3, r7, #1
 801bd60:	444b      	add	r3, r9
 801bd62:	106d      	asrs	r5, r5, #1
 801bd64:	429d      	cmp	r5, r3
 801bd66:	bf38      	it	cc
 801bd68:	461d      	movcc	r5, r3
 801bd6a:	0553      	lsls	r3, r2, #21
 801bd6c:	d527      	bpl.n	801bdbe <__ssputs_r+0x8e>
 801bd6e:	4629      	mov	r1, r5
 801bd70:	f7ff fa48 	bl	801b204 <_malloc_r>
 801bd74:	4606      	mov	r6, r0
 801bd76:	b360      	cbz	r0, 801bdd2 <__ssputs_r+0xa2>
 801bd78:	6921      	ldr	r1, [r4, #16]
 801bd7a:	464a      	mov	r2, r9
 801bd7c:	f7ff ff4d 	bl	801bc1a <memcpy>
 801bd80:	89a3      	ldrh	r3, [r4, #12]
 801bd82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bd8a:	81a3      	strh	r3, [r4, #12]
 801bd8c:	6126      	str	r6, [r4, #16]
 801bd8e:	6165      	str	r5, [r4, #20]
 801bd90:	444e      	add	r6, r9
 801bd92:	eba5 0509 	sub.w	r5, r5, r9
 801bd96:	6026      	str	r6, [r4, #0]
 801bd98:	60a5      	str	r5, [r4, #8]
 801bd9a:	463e      	mov	r6, r7
 801bd9c:	42be      	cmp	r6, r7
 801bd9e:	d900      	bls.n	801bda2 <__ssputs_r+0x72>
 801bda0:	463e      	mov	r6, r7
 801bda2:	6820      	ldr	r0, [r4, #0]
 801bda4:	4632      	mov	r2, r6
 801bda6:	4641      	mov	r1, r8
 801bda8:	f7ff fe54 	bl	801ba54 <memmove>
 801bdac:	68a3      	ldr	r3, [r4, #8]
 801bdae:	1b9b      	subs	r3, r3, r6
 801bdb0:	60a3      	str	r3, [r4, #8]
 801bdb2:	6823      	ldr	r3, [r4, #0]
 801bdb4:	4433      	add	r3, r6
 801bdb6:	6023      	str	r3, [r4, #0]
 801bdb8:	2000      	movs	r0, #0
 801bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdbe:	462a      	mov	r2, r5
 801bdc0:	f7ff fb20 	bl	801b404 <_realloc_r>
 801bdc4:	4606      	mov	r6, r0
 801bdc6:	2800      	cmp	r0, #0
 801bdc8:	d1e0      	bne.n	801bd8c <__ssputs_r+0x5c>
 801bdca:	6921      	ldr	r1, [r4, #16]
 801bdcc:	4650      	mov	r0, sl
 801bdce:	f7ff ff5d 	bl	801bc8c <_free_r>
 801bdd2:	230c      	movs	r3, #12
 801bdd4:	f8ca 3000 	str.w	r3, [sl]
 801bdd8:	89a3      	ldrh	r3, [r4, #12]
 801bdda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bdde:	81a3      	strh	r3, [r4, #12]
 801bde0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bde4:	e7e9      	b.n	801bdba <__ssputs_r+0x8a>
	...

0801bde8 <_svfiprintf_r>:
 801bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdec:	4698      	mov	r8, r3
 801bdee:	898b      	ldrh	r3, [r1, #12]
 801bdf0:	061b      	lsls	r3, r3, #24
 801bdf2:	b09d      	sub	sp, #116	@ 0x74
 801bdf4:	4607      	mov	r7, r0
 801bdf6:	460d      	mov	r5, r1
 801bdf8:	4614      	mov	r4, r2
 801bdfa:	d510      	bpl.n	801be1e <_svfiprintf_r+0x36>
 801bdfc:	690b      	ldr	r3, [r1, #16]
 801bdfe:	b973      	cbnz	r3, 801be1e <_svfiprintf_r+0x36>
 801be00:	2140      	movs	r1, #64	@ 0x40
 801be02:	f7ff f9ff 	bl	801b204 <_malloc_r>
 801be06:	6028      	str	r0, [r5, #0]
 801be08:	6128      	str	r0, [r5, #16]
 801be0a:	b930      	cbnz	r0, 801be1a <_svfiprintf_r+0x32>
 801be0c:	230c      	movs	r3, #12
 801be0e:	603b      	str	r3, [r7, #0]
 801be10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be14:	b01d      	add	sp, #116	@ 0x74
 801be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be1a:	2340      	movs	r3, #64	@ 0x40
 801be1c:	616b      	str	r3, [r5, #20]
 801be1e:	2300      	movs	r3, #0
 801be20:	9309      	str	r3, [sp, #36]	@ 0x24
 801be22:	2320      	movs	r3, #32
 801be24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801be28:	f8cd 800c 	str.w	r8, [sp, #12]
 801be2c:	2330      	movs	r3, #48	@ 0x30
 801be2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bfcc <_svfiprintf_r+0x1e4>
 801be32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801be36:	f04f 0901 	mov.w	r9, #1
 801be3a:	4623      	mov	r3, r4
 801be3c:	469a      	mov	sl, r3
 801be3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be42:	b10a      	cbz	r2, 801be48 <_svfiprintf_r+0x60>
 801be44:	2a25      	cmp	r2, #37	@ 0x25
 801be46:	d1f9      	bne.n	801be3c <_svfiprintf_r+0x54>
 801be48:	ebba 0b04 	subs.w	fp, sl, r4
 801be4c:	d00b      	beq.n	801be66 <_svfiprintf_r+0x7e>
 801be4e:	465b      	mov	r3, fp
 801be50:	4622      	mov	r2, r4
 801be52:	4629      	mov	r1, r5
 801be54:	4638      	mov	r0, r7
 801be56:	f7ff ff6b 	bl	801bd30 <__ssputs_r>
 801be5a:	3001      	adds	r0, #1
 801be5c:	f000 80a7 	beq.w	801bfae <_svfiprintf_r+0x1c6>
 801be60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be62:	445a      	add	r2, fp
 801be64:	9209      	str	r2, [sp, #36]	@ 0x24
 801be66:	f89a 3000 	ldrb.w	r3, [sl]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	f000 809f 	beq.w	801bfae <_svfiprintf_r+0x1c6>
 801be70:	2300      	movs	r3, #0
 801be72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801be76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be7a:	f10a 0a01 	add.w	sl, sl, #1
 801be7e:	9304      	str	r3, [sp, #16]
 801be80:	9307      	str	r3, [sp, #28]
 801be82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801be86:	931a      	str	r3, [sp, #104]	@ 0x68
 801be88:	4654      	mov	r4, sl
 801be8a:	2205      	movs	r2, #5
 801be8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be90:	484e      	ldr	r0, [pc, #312]	@ (801bfcc <_svfiprintf_r+0x1e4>)
 801be92:	f7e4 fa3d 	bl	8000310 <memchr>
 801be96:	9a04      	ldr	r2, [sp, #16]
 801be98:	b9d8      	cbnz	r0, 801bed2 <_svfiprintf_r+0xea>
 801be9a:	06d0      	lsls	r0, r2, #27
 801be9c:	bf44      	itt	mi
 801be9e:	2320      	movmi	r3, #32
 801bea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bea4:	0711      	lsls	r1, r2, #28
 801bea6:	bf44      	itt	mi
 801bea8:	232b      	movmi	r3, #43	@ 0x2b
 801beaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801beae:	f89a 3000 	ldrb.w	r3, [sl]
 801beb2:	2b2a      	cmp	r3, #42	@ 0x2a
 801beb4:	d015      	beq.n	801bee2 <_svfiprintf_r+0xfa>
 801beb6:	9a07      	ldr	r2, [sp, #28]
 801beb8:	4654      	mov	r4, sl
 801beba:	2000      	movs	r0, #0
 801bebc:	f04f 0c0a 	mov.w	ip, #10
 801bec0:	4621      	mov	r1, r4
 801bec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bec6:	3b30      	subs	r3, #48	@ 0x30
 801bec8:	2b09      	cmp	r3, #9
 801beca:	d94b      	bls.n	801bf64 <_svfiprintf_r+0x17c>
 801becc:	b1b0      	cbz	r0, 801befc <_svfiprintf_r+0x114>
 801bece:	9207      	str	r2, [sp, #28]
 801bed0:	e014      	b.n	801befc <_svfiprintf_r+0x114>
 801bed2:	eba0 0308 	sub.w	r3, r0, r8
 801bed6:	fa09 f303 	lsl.w	r3, r9, r3
 801beda:	4313      	orrs	r3, r2
 801bedc:	9304      	str	r3, [sp, #16]
 801bede:	46a2      	mov	sl, r4
 801bee0:	e7d2      	b.n	801be88 <_svfiprintf_r+0xa0>
 801bee2:	9b03      	ldr	r3, [sp, #12]
 801bee4:	1d19      	adds	r1, r3, #4
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	9103      	str	r1, [sp, #12]
 801beea:	2b00      	cmp	r3, #0
 801beec:	bfbb      	ittet	lt
 801beee:	425b      	neglt	r3, r3
 801bef0:	f042 0202 	orrlt.w	r2, r2, #2
 801bef4:	9307      	strge	r3, [sp, #28]
 801bef6:	9307      	strlt	r3, [sp, #28]
 801bef8:	bfb8      	it	lt
 801befa:	9204      	strlt	r2, [sp, #16]
 801befc:	7823      	ldrb	r3, [r4, #0]
 801befe:	2b2e      	cmp	r3, #46	@ 0x2e
 801bf00:	d10a      	bne.n	801bf18 <_svfiprintf_r+0x130>
 801bf02:	7863      	ldrb	r3, [r4, #1]
 801bf04:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf06:	d132      	bne.n	801bf6e <_svfiprintf_r+0x186>
 801bf08:	9b03      	ldr	r3, [sp, #12]
 801bf0a:	1d1a      	adds	r2, r3, #4
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	9203      	str	r2, [sp, #12]
 801bf10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bf14:	3402      	adds	r4, #2
 801bf16:	9305      	str	r3, [sp, #20]
 801bf18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bfdc <_svfiprintf_r+0x1f4>
 801bf1c:	7821      	ldrb	r1, [r4, #0]
 801bf1e:	2203      	movs	r2, #3
 801bf20:	4650      	mov	r0, sl
 801bf22:	f7e4 f9f5 	bl	8000310 <memchr>
 801bf26:	b138      	cbz	r0, 801bf38 <_svfiprintf_r+0x150>
 801bf28:	9b04      	ldr	r3, [sp, #16]
 801bf2a:	eba0 000a 	sub.w	r0, r0, sl
 801bf2e:	2240      	movs	r2, #64	@ 0x40
 801bf30:	4082      	lsls	r2, r0
 801bf32:	4313      	orrs	r3, r2
 801bf34:	3401      	adds	r4, #1
 801bf36:	9304      	str	r3, [sp, #16]
 801bf38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf3c:	4824      	ldr	r0, [pc, #144]	@ (801bfd0 <_svfiprintf_r+0x1e8>)
 801bf3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bf42:	2206      	movs	r2, #6
 801bf44:	f7e4 f9e4 	bl	8000310 <memchr>
 801bf48:	2800      	cmp	r0, #0
 801bf4a:	d036      	beq.n	801bfba <_svfiprintf_r+0x1d2>
 801bf4c:	4b21      	ldr	r3, [pc, #132]	@ (801bfd4 <_svfiprintf_r+0x1ec>)
 801bf4e:	bb1b      	cbnz	r3, 801bf98 <_svfiprintf_r+0x1b0>
 801bf50:	9b03      	ldr	r3, [sp, #12]
 801bf52:	3307      	adds	r3, #7
 801bf54:	f023 0307 	bic.w	r3, r3, #7
 801bf58:	3308      	adds	r3, #8
 801bf5a:	9303      	str	r3, [sp, #12]
 801bf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf5e:	4433      	add	r3, r6
 801bf60:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf62:	e76a      	b.n	801be3a <_svfiprintf_r+0x52>
 801bf64:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf68:	460c      	mov	r4, r1
 801bf6a:	2001      	movs	r0, #1
 801bf6c:	e7a8      	b.n	801bec0 <_svfiprintf_r+0xd8>
 801bf6e:	2300      	movs	r3, #0
 801bf70:	3401      	adds	r4, #1
 801bf72:	9305      	str	r3, [sp, #20]
 801bf74:	4619      	mov	r1, r3
 801bf76:	f04f 0c0a 	mov.w	ip, #10
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf80:	3a30      	subs	r2, #48	@ 0x30
 801bf82:	2a09      	cmp	r2, #9
 801bf84:	d903      	bls.n	801bf8e <_svfiprintf_r+0x1a6>
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d0c6      	beq.n	801bf18 <_svfiprintf_r+0x130>
 801bf8a:	9105      	str	r1, [sp, #20]
 801bf8c:	e7c4      	b.n	801bf18 <_svfiprintf_r+0x130>
 801bf8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801bf92:	4604      	mov	r4, r0
 801bf94:	2301      	movs	r3, #1
 801bf96:	e7f0      	b.n	801bf7a <_svfiprintf_r+0x192>
 801bf98:	ab03      	add	r3, sp, #12
 801bf9a:	9300      	str	r3, [sp, #0]
 801bf9c:	462a      	mov	r2, r5
 801bf9e:	4b0e      	ldr	r3, [pc, #56]	@ (801bfd8 <_svfiprintf_r+0x1f0>)
 801bfa0:	a904      	add	r1, sp, #16
 801bfa2:	4638      	mov	r0, r7
 801bfa4:	f3af 8000 	nop.w
 801bfa8:	1c42      	adds	r2, r0, #1
 801bfaa:	4606      	mov	r6, r0
 801bfac:	d1d6      	bne.n	801bf5c <_svfiprintf_r+0x174>
 801bfae:	89ab      	ldrh	r3, [r5, #12]
 801bfb0:	065b      	lsls	r3, r3, #25
 801bfb2:	f53f af2d 	bmi.w	801be10 <_svfiprintf_r+0x28>
 801bfb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfb8:	e72c      	b.n	801be14 <_svfiprintf_r+0x2c>
 801bfba:	ab03      	add	r3, sp, #12
 801bfbc:	9300      	str	r3, [sp, #0]
 801bfbe:	462a      	mov	r2, r5
 801bfc0:	4b05      	ldr	r3, [pc, #20]	@ (801bfd8 <_svfiprintf_r+0x1f0>)
 801bfc2:	a904      	add	r1, sp, #16
 801bfc4:	4638      	mov	r0, r7
 801bfc6:	f000 f9bb 	bl	801c340 <_printf_i>
 801bfca:	e7ed      	b.n	801bfa8 <_svfiprintf_r+0x1c0>
 801bfcc:	0801d792 	.word	0x0801d792
 801bfd0:	0801d79c 	.word	0x0801d79c
 801bfd4:	00000000 	.word	0x00000000
 801bfd8:	0801bd31 	.word	0x0801bd31
 801bfdc:	0801d798 	.word	0x0801d798

0801bfe0 <__sfputc_r>:
 801bfe0:	6893      	ldr	r3, [r2, #8]
 801bfe2:	3b01      	subs	r3, #1
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	b410      	push	{r4}
 801bfe8:	6093      	str	r3, [r2, #8]
 801bfea:	da08      	bge.n	801bffe <__sfputc_r+0x1e>
 801bfec:	6994      	ldr	r4, [r2, #24]
 801bfee:	42a3      	cmp	r3, r4
 801bff0:	db01      	blt.n	801bff6 <__sfputc_r+0x16>
 801bff2:	290a      	cmp	r1, #10
 801bff4:	d103      	bne.n	801bffe <__sfputc_r+0x1e>
 801bff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bffa:	f7ff bc87 	b.w	801b90c <__swbuf_r>
 801bffe:	6813      	ldr	r3, [r2, #0]
 801c000:	1c58      	adds	r0, r3, #1
 801c002:	6010      	str	r0, [r2, #0]
 801c004:	7019      	strb	r1, [r3, #0]
 801c006:	4608      	mov	r0, r1
 801c008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c00c:	4770      	bx	lr

0801c00e <__sfputs_r>:
 801c00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c010:	4606      	mov	r6, r0
 801c012:	460f      	mov	r7, r1
 801c014:	4614      	mov	r4, r2
 801c016:	18d5      	adds	r5, r2, r3
 801c018:	42ac      	cmp	r4, r5
 801c01a:	d101      	bne.n	801c020 <__sfputs_r+0x12>
 801c01c:	2000      	movs	r0, #0
 801c01e:	e007      	b.n	801c030 <__sfputs_r+0x22>
 801c020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c024:	463a      	mov	r2, r7
 801c026:	4630      	mov	r0, r6
 801c028:	f7ff ffda 	bl	801bfe0 <__sfputc_r>
 801c02c:	1c43      	adds	r3, r0, #1
 801c02e:	d1f3      	bne.n	801c018 <__sfputs_r+0xa>
 801c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c034 <_vfiprintf_r>:
 801c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c038:	460d      	mov	r5, r1
 801c03a:	b09d      	sub	sp, #116	@ 0x74
 801c03c:	4614      	mov	r4, r2
 801c03e:	4698      	mov	r8, r3
 801c040:	4606      	mov	r6, r0
 801c042:	b118      	cbz	r0, 801c04c <_vfiprintf_r+0x18>
 801c044:	6a03      	ldr	r3, [r0, #32]
 801c046:	b90b      	cbnz	r3, 801c04c <_vfiprintf_r+0x18>
 801c048:	f7ff fb0e 	bl	801b668 <__sinit>
 801c04c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c04e:	07d9      	lsls	r1, r3, #31
 801c050:	d405      	bmi.n	801c05e <_vfiprintf_r+0x2a>
 801c052:	89ab      	ldrh	r3, [r5, #12]
 801c054:	059a      	lsls	r2, r3, #22
 801c056:	d402      	bmi.n	801c05e <_vfiprintf_r+0x2a>
 801c058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c05a:	f7ff fdd4 	bl	801bc06 <__retarget_lock_acquire_recursive>
 801c05e:	89ab      	ldrh	r3, [r5, #12]
 801c060:	071b      	lsls	r3, r3, #28
 801c062:	d501      	bpl.n	801c068 <_vfiprintf_r+0x34>
 801c064:	692b      	ldr	r3, [r5, #16]
 801c066:	b99b      	cbnz	r3, 801c090 <_vfiprintf_r+0x5c>
 801c068:	4629      	mov	r1, r5
 801c06a:	4630      	mov	r0, r6
 801c06c:	f7ff fc8c 	bl	801b988 <__swsetup_r>
 801c070:	b170      	cbz	r0, 801c090 <_vfiprintf_r+0x5c>
 801c072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c074:	07dc      	lsls	r4, r3, #31
 801c076:	d504      	bpl.n	801c082 <_vfiprintf_r+0x4e>
 801c078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c07c:	b01d      	add	sp, #116	@ 0x74
 801c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c082:	89ab      	ldrh	r3, [r5, #12]
 801c084:	0598      	lsls	r0, r3, #22
 801c086:	d4f7      	bmi.n	801c078 <_vfiprintf_r+0x44>
 801c088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c08a:	f7ff fdbd 	bl	801bc08 <__retarget_lock_release_recursive>
 801c08e:	e7f3      	b.n	801c078 <_vfiprintf_r+0x44>
 801c090:	2300      	movs	r3, #0
 801c092:	9309      	str	r3, [sp, #36]	@ 0x24
 801c094:	2320      	movs	r3, #32
 801c096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c09a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c09e:	2330      	movs	r3, #48	@ 0x30
 801c0a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c250 <_vfiprintf_r+0x21c>
 801c0a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c0a8:	f04f 0901 	mov.w	r9, #1
 801c0ac:	4623      	mov	r3, r4
 801c0ae:	469a      	mov	sl, r3
 801c0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0b4:	b10a      	cbz	r2, 801c0ba <_vfiprintf_r+0x86>
 801c0b6:	2a25      	cmp	r2, #37	@ 0x25
 801c0b8:	d1f9      	bne.n	801c0ae <_vfiprintf_r+0x7a>
 801c0ba:	ebba 0b04 	subs.w	fp, sl, r4
 801c0be:	d00b      	beq.n	801c0d8 <_vfiprintf_r+0xa4>
 801c0c0:	465b      	mov	r3, fp
 801c0c2:	4622      	mov	r2, r4
 801c0c4:	4629      	mov	r1, r5
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	f7ff ffa1 	bl	801c00e <__sfputs_r>
 801c0cc:	3001      	adds	r0, #1
 801c0ce:	f000 80a7 	beq.w	801c220 <_vfiprintf_r+0x1ec>
 801c0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c0d4:	445a      	add	r2, fp
 801c0d6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c0d8:	f89a 3000 	ldrb.w	r3, [sl]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	f000 809f 	beq.w	801c220 <_vfiprintf_r+0x1ec>
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c0ec:	f10a 0a01 	add.w	sl, sl, #1
 801c0f0:	9304      	str	r3, [sp, #16]
 801c0f2:	9307      	str	r3, [sp, #28]
 801c0f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c0f8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c0fa:	4654      	mov	r4, sl
 801c0fc:	2205      	movs	r2, #5
 801c0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c102:	4853      	ldr	r0, [pc, #332]	@ (801c250 <_vfiprintf_r+0x21c>)
 801c104:	f7e4 f904 	bl	8000310 <memchr>
 801c108:	9a04      	ldr	r2, [sp, #16]
 801c10a:	b9d8      	cbnz	r0, 801c144 <_vfiprintf_r+0x110>
 801c10c:	06d1      	lsls	r1, r2, #27
 801c10e:	bf44      	itt	mi
 801c110:	2320      	movmi	r3, #32
 801c112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c116:	0713      	lsls	r3, r2, #28
 801c118:	bf44      	itt	mi
 801c11a:	232b      	movmi	r3, #43	@ 0x2b
 801c11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c120:	f89a 3000 	ldrb.w	r3, [sl]
 801c124:	2b2a      	cmp	r3, #42	@ 0x2a
 801c126:	d015      	beq.n	801c154 <_vfiprintf_r+0x120>
 801c128:	9a07      	ldr	r2, [sp, #28]
 801c12a:	4654      	mov	r4, sl
 801c12c:	2000      	movs	r0, #0
 801c12e:	f04f 0c0a 	mov.w	ip, #10
 801c132:	4621      	mov	r1, r4
 801c134:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c138:	3b30      	subs	r3, #48	@ 0x30
 801c13a:	2b09      	cmp	r3, #9
 801c13c:	d94b      	bls.n	801c1d6 <_vfiprintf_r+0x1a2>
 801c13e:	b1b0      	cbz	r0, 801c16e <_vfiprintf_r+0x13a>
 801c140:	9207      	str	r2, [sp, #28]
 801c142:	e014      	b.n	801c16e <_vfiprintf_r+0x13a>
 801c144:	eba0 0308 	sub.w	r3, r0, r8
 801c148:	fa09 f303 	lsl.w	r3, r9, r3
 801c14c:	4313      	orrs	r3, r2
 801c14e:	9304      	str	r3, [sp, #16]
 801c150:	46a2      	mov	sl, r4
 801c152:	e7d2      	b.n	801c0fa <_vfiprintf_r+0xc6>
 801c154:	9b03      	ldr	r3, [sp, #12]
 801c156:	1d19      	adds	r1, r3, #4
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	9103      	str	r1, [sp, #12]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	bfbb      	ittet	lt
 801c160:	425b      	neglt	r3, r3
 801c162:	f042 0202 	orrlt.w	r2, r2, #2
 801c166:	9307      	strge	r3, [sp, #28]
 801c168:	9307      	strlt	r3, [sp, #28]
 801c16a:	bfb8      	it	lt
 801c16c:	9204      	strlt	r2, [sp, #16]
 801c16e:	7823      	ldrb	r3, [r4, #0]
 801c170:	2b2e      	cmp	r3, #46	@ 0x2e
 801c172:	d10a      	bne.n	801c18a <_vfiprintf_r+0x156>
 801c174:	7863      	ldrb	r3, [r4, #1]
 801c176:	2b2a      	cmp	r3, #42	@ 0x2a
 801c178:	d132      	bne.n	801c1e0 <_vfiprintf_r+0x1ac>
 801c17a:	9b03      	ldr	r3, [sp, #12]
 801c17c:	1d1a      	adds	r2, r3, #4
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	9203      	str	r2, [sp, #12]
 801c182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c186:	3402      	adds	r4, #2
 801c188:	9305      	str	r3, [sp, #20]
 801c18a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c260 <_vfiprintf_r+0x22c>
 801c18e:	7821      	ldrb	r1, [r4, #0]
 801c190:	2203      	movs	r2, #3
 801c192:	4650      	mov	r0, sl
 801c194:	f7e4 f8bc 	bl	8000310 <memchr>
 801c198:	b138      	cbz	r0, 801c1aa <_vfiprintf_r+0x176>
 801c19a:	9b04      	ldr	r3, [sp, #16]
 801c19c:	eba0 000a 	sub.w	r0, r0, sl
 801c1a0:	2240      	movs	r2, #64	@ 0x40
 801c1a2:	4082      	lsls	r2, r0
 801c1a4:	4313      	orrs	r3, r2
 801c1a6:	3401      	adds	r4, #1
 801c1a8:	9304      	str	r3, [sp, #16]
 801c1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1ae:	4829      	ldr	r0, [pc, #164]	@ (801c254 <_vfiprintf_r+0x220>)
 801c1b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c1b4:	2206      	movs	r2, #6
 801c1b6:	f7e4 f8ab 	bl	8000310 <memchr>
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	d03f      	beq.n	801c23e <_vfiprintf_r+0x20a>
 801c1be:	4b26      	ldr	r3, [pc, #152]	@ (801c258 <_vfiprintf_r+0x224>)
 801c1c0:	bb1b      	cbnz	r3, 801c20a <_vfiprintf_r+0x1d6>
 801c1c2:	9b03      	ldr	r3, [sp, #12]
 801c1c4:	3307      	adds	r3, #7
 801c1c6:	f023 0307 	bic.w	r3, r3, #7
 801c1ca:	3308      	adds	r3, #8
 801c1cc:	9303      	str	r3, [sp, #12]
 801c1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1d0:	443b      	add	r3, r7
 801c1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c1d4:	e76a      	b.n	801c0ac <_vfiprintf_r+0x78>
 801c1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c1da:	460c      	mov	r4, r1
 801c1dc:	2001      	movs	r0, #1
 801c1de:	e7a8      	b.n	801c132 <_vfiprintf_r+0xfe>
 801c1e0:	2300      	movs	r3, #0
 801c1e2:	3401      	adds	r4, #1
 801c1e4:	9305      	str	r3, [sp, #20]
 801c1e6:	4619      	mov	r1, r3
 801c1e8:	f04f 0c0a 	mov.w	ip, #10
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c1f2:	3a30      	subs	r2, #48	@ 0x30
 801c1f4:	2a09      	cmp	r2, #9
 801c1f6:	d903      	bls.n	801c200 <_vfiprintf_r+0x1cc>
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d0c6      	beq.n	801c18a <_vfiprintf_r+0x156>
 801c1fc:	9105      	str	r1, [sp, #20]
 801c1fe:	e7c4      	b.n	801c18a <_vfiprintf_r+0x156>
 801c200:	fb0c 2101 	mla	r1, ip, r1, r2
 801c204:	4604      	mov	r4, r0
 801c206:	2301      	movs	r3, #1
 801c208:	e7f0      	b.n	801c1ec <_vfiprintf_r+0x1b8>
 801c20a:	ab03      	add	r3, sp, #12
 801c20c:	9300      	str	r3, [sp, #0]
 801c20e:	462a      	mov	r2, r5
 801c210:	4b12      	ldr	r3, [pc, #72]	@ (801c25c <_vfiprintf_r+0x228>)
 801c212:	a904      	add	r1, sp, #16
 801c214:	4630      	mov	r0, r6
 801c216:	f3af 8000 	nop.w
 801c21a:	4607      	mov	r7, r0
 801c21c:	1c78      	adds	r0, r7, #1
 801c21e:	d1d6      	bne.n	801c1ce <_vfiprintf_r+0x19a>
 801c220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c222:	07d9      	lsls	r1, r3, #31
 801c224:	d405      	bmi.n	801c232 <_vfiprintf_r+0x1fe>
 801c226:	89ab      	ldrh	r3, [r5, #12]
 801c228:	059a      	lsls	r2, r3, #22
 801c22a:	d402      	bmi.n	801c232 <_vfiprintf_r+0x1fe>
 801c22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c22e:	f7ff fceb 	bl	801bc08 <__retarget_lock_release_recursive>
 801c232:	89ab      	ldrh	r3, [r5, #12]
 801c234:	065b      	lsls	r3, r3, #25
 801c236:	f53f af1f 	bmi.w	801c078 <_vfiprintf_r+0x44>
 801c23a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c23c:	e71e      	b.n	801c07c <_vfiprintf_r+0x48>
 801c23e:	ab03      	add	r3, sp, #12
 801c240:	9300      	str	r3, [sp, #0]
 801c242:	462a      	mov	r2, r5
 801c244:	4b05      	ldr	r3, [pc, #20]	@ (801c25c <_vfiprintf_r+0x228>)
 801c246:	a904      	add	r1, sp, #16
 801c248:	4630      	mov	r0, r6
 801c24a:	f000 f879 	bl	801c340 <_printf_i>
 801c24e:	e7e4      	b.n	801c21a <_vfiprintf_r+0x1e6>
 801c250:	0801d792 	.word	0x0801d792
 801c254:	0801d79c 	.word	0x0801d79c
 801c258:	00000000 	.word	0x00000000
 801c25c:	0801c00f 	.word	0x0801c00f
 801c260:	0801d798 	.word	0x0801d798

0801c264 <_printf_common>:
 801c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c268:	4616      	mov	r6, r2
 801c26a:	4698      	mov	r8, r3
 801c26c:	688a      	ldr	r2, [r1, #8]
 801c26e:	690b      	ldr	r3, [r1, #16]
 801c270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c274:	4293      	cmp	r3, r2
 801c276:	bfb8      	it	lt
 801c278:	4613      	movlt	r3, r2
 801c27a:	6033      	str	r3, [r6, #0]
 801c27c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c280:	4607      	mov	r7, r0
 801c282:	460c      	mov	r4, r1
 801c284:	b10a      	cbz	r2, 801c28a <_printf_common+0x26>
 801c286:	3301      	adds	r3, #1
 801c288:	6033      	str	r3, [r6, #0]
 801c28a:	6823      	ldr	r3, [r4, #0]
 801c28c:	0699      	lsls	r1, r3, #26
 801c28e:	bf42      	ittt	mi
 801c290:	6833      	ldrmi	r3, [r6, #0]
 801c292:	3302      	addmi	r3, #2
 801c294:	6033      	strmi	r3, [r6, #0]
 801c296:	6825      	ldr	r5, [r4, #0]
 801c298:	f015 0506 	ands.w	r5, r5, #6
 801c29c:	d106      	bne.n	801c2ac <_printf_common+0x48>
 801c29e:	f104 0a19 	add.w	sl, r4, #25
 801c2a2:	68e3      	ldr	r3, [r4, #12]
 801c2a4:	6832      	ldr	r2, [r6, #0]
 801c2a6:	1a9b      	subs	r3, r3, r2
 801c2a8:	42ab      	cmp	r3, r5
 801c2aa:	dc26      	bgt.n	801c2fa <_printf_common+0x96>
 801c2ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c2b0:	6822      	ldr	r2, [r4, #0]
 801c2b2:	3b00      	subs	r3, #0
 801c2b4:	bf18      	it	ne
 801c2b6:	2301      	movne	r3, #1
 801c2b8:	0692      	lsls	r2, r2, #26
 801c2ba:	d42b      	bmi.n	801c314 <_printf_common+0xb0>
 801c2bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c2c0:	4641      	mov	r1, r8
 801c2c2:	4638      	mov	r0, r7
 801c2c4:	47c8      	blx	r9
 801c2c6:	3001      	adds	r0, #1
 801c2c8:	d01e      	beq.n	801c308 <_printf_common+0xa4>
 801c2ca:	6823      	ldr	r3, [r4, #0]
 801c2cc:	6922      	ldr	r2, [r4, #16]
 801c2ce:	f003 0306 	and.w	r3, r3, #6
 801c2d2:	2b04      	cmp	r3, #4
 801c2d4:	bf02      	ittt	eq
 801c2d6:	68e5      	ldreq	r5, [r4, #12]
 801c2d8:	6833      	ldreq	r3, [r6, #0]
 801c2da:	1aed      	subeq	r5, r5, r3
 801c2dc:	68a3      	ldr	r3, [r4, #8]
 801c2de:	bf0c      	ite	eq
 801c2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c2e4:	2500      	movne	r5, #0
 801c2e6:	4293      	cmp	r3, r2
 801c2e8:	bfc4      	itt	gt
 801c2ea:	1a9b      	subgt	r3, r3, r2
 801c2ec:	18ed      	addgt	r5, r5, r3
 801c2ee:	2600      	movs	r6, #0
 801c2f0:	341a      	adds	r4, #26
 801c2f2:	42b5      	cmp	r5, r6
 801c2f4:	d11a      	bne.n	801c32c <_printf_common+0xc8>
 801c2f6:	2000      	movs	r0, #0
 801c2f8:	e008      	b.n	801c30c <_printf_common+0xa8>
 801c2fa:	2301      	movs	r3, #1
 801c2fc:	4652      	mov	r2, sl
 801c2fe:	4641      	mov	r1, r8
 801c300:	4638      	mov	r0, r7
 801c302:	47c8      	blx	r9
 801c304:	3001      	adds	r0, #1
 801c306:	d103      	bne.n	801c310 <_printf_common+0xac>
 801c308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c310:	3501      	adds	r5, #1
 801c312:	e7c6      	b.n	801c2a2 <_printf_common+0x3e>
 801c314:	18e1      	adds	r1, r4, r3
 801c316:	1c5a      	adds	r2, r3, #1
 801c318:	2030      	movs	r0, #48	@ 0x30
 801c31a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c31e:	4422      	add	r2, r4
 801c320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c328:	3302      	adds	r3, #2
 801c32a:	e7c7      	b.n	801c2bc <_printf_common+0x58>
 801c32c:	2301      	movs	r3, #1
 801c32e:	4622      	mov	r2, r4
 801c330:	4641      	mov	r1, r8
 801c332:	4638      	mov	r0, r7
 801c334:	47c8      	blx	r9
 801c336:	3001      	adds	r0, #1
 801c338:	d0e6      	beq.n	801c308 <_printf_common+0xa4>
 801c33a:	3601      	adds	r6, #1
 801c33c:	e7d9      	b.n	801c2f2 <_printf_common+0x8e>
	...

0801c340 <_printf_i>:
 801c340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c344:	7e0f      	ldrb	r7, [r1, #24]
 801c346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c348:	2f78      	cmp	r7, #120	@ 0x78
 801c34a:	4691      	mov	r9, r2
 801c34c:	4680      	mov	r8, r0
 801c34e:	460c      	mov	r4, r1
 801c350:	469a      	mov	sl, r3
 801c352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c356:	d807      	bhi.n	801c368 <_printf_i+0x28>
 801c358:	2f62      	cmp	r7, #98	@ 0x62
 801c35a:	d80a      	bhi.n	801c372 <_printf_i+0x32>
 801c35c:	2f00      	cmp	r7, #0
 801c35e:	f000 80d2 	beq.w	801c506 <_printf_i+0x1c6>
 801c362:	2f58      	cmp	r7, #88	@ 0x58
 801c364:	f000 80b9 	beq.w	801c4da <_printf_i+0x19a>
 801c368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c36c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c370:	e03a      	b.n	801c3e8 <_printf_i+0xa8>
 801c372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c376:	2b15      	cmp	r3, #21
 801c378:	d8f6      	bhi.n	801c368 <_printf_i+0x28>
 801c37a:	a101      	add	r1, pc, #4	@ (adr r1, 801c380 <_printf_i+0x40>)
 801c37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c380:	0801c3d9 	.word	0x0801c3d9
 801c384:	0801c3ed 	.word	0x0801c3ed
 801c388:	0801c369 	.word	0x0801c369
 801c38c:	0801c369 	.word	0x0801c369
 801c390:	0801c369 	.word	0x0801c369
 801c394:	0801c369 	.word	0x0801c369
 801c398:	0801c3ed 	.word	0x0801c3ed
 801c39c:	0801c369 	.word	0x0801c369
 801c3a0:	0801c369 	.word	0x0801c369
 801c3a4:	0801c369 	.word	0x0801c369
 801c3a8:	0801c369 	.word	0x0801c369
 801c3ac:	0801c4ed 	.word	0x0801c4ed
 801c3b0:	0801c417 	.word	0x0801c417
 801c3b4:	0801c4a7 	.word	0x0801c4a7
 801c3b8:	0801c369 	.word	0x0801c369
 801c3bc:	0801c369 	.word	0x0801c369
 801c3c0:	0801c50f 	.word	0x0801c50f
 801c3c4:	0801c369 	.word	0x0801c369
 801c3c8:	0801c417 	.word	0x0801c417
 801c3cc:	0801c369 	.word	0x0801c369
 801c3d0:	0801c369 	.word	0x0801c369
 801c3d4:	0801c4af 	.word	0x0801c4af
 801c3d8:	6833      	ldr	r3, [r6, #0]
 801c3da:	1d1a      	adds	r2, r3, #4
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	6032      	str	r2, [r6, #0]
 801c3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c3e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	e09d      	b.n	801c528 <_printf_i+0x1e8>
 801c3ec:	6833      	ldr	r3, [r6, #0]
 801c3ee:	6820      	ldr	r0, [r4, #0]
 801c3f0:	1d19      	adds	r1, r3, #4
 801c3f2:	6031      	str	r1, [r6, #0]
 801c3f4:	0606      	lsls	r6, r0, #24
 801c3f6:	d501      	bpl.n	801c3fc <_printf_i+0xbc>
 801c3f8:	681d      	ldr	r5, [r3, #0]
 801c3fa:	e003      	b.n	801c404 <_printf_i+0xc4>
 801c3fc:	0645      	lsls	r5, r0, #25
 801c3fe:	d5fb      	bpl.n	801c3f8 <_printf_i+0xb8>
 801c400:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c404:	2d00      	cmp	r5, #0
 801c406:	da03      	bge.n	801c410 <_printf_i+0xd0>
 801c408:	232d      	movs	r3, #45	@ 0x2d
 801c40a:	426d      	negs	r5, r5
 801c40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c410:	4859      	ldr	r0, [pc, #356]	@ (801c578 <_printf_i+0x238>)
 801c412:	230a      	movs	r3, #10
 801c414:	e011      	b.n	801c43a <_printf_i+0xfa>
 801c416:	6821      	ldr	r1, [r4, #0]
 801c418:	6833      	ldr	r3, [r6, #0]
 801c41a:	0608      	lsls	r0, r1, #24
 801c41c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c420:	d402      	bmi.n	801c428 <_printf_i+0xe8>
 801c422:	0649      	lsls	r1, r1, #25
 801c424:	bf48      	it	mi
 801c426:	b2ad      	uxthmi	r5, r5
 801c428:	2f6f      	cmp	r7, #111	@ 0x6f
 801c42a:	4853      	ldr	r0, [pc, #332]	@ (801c578 <_printf_i+0x238>)
 801c42c:	6033      	str	r3, [r6, #0]
 801c42e:	bf14      	ite	ne
 801c430:	230a      	movne	r3, #10
 801c432:	2308      	moveq	r3, #8
 801c434:	2100      	movs	r1, #0
 801c436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c43a:	6866      	ldr	r6, [r4, #4]
 801c43c:	60a6      	str	r6, [r4, #8]
 801c43e:	2e00      	cmp	r6, #0
 801c440:	bfa2      	ittt	ge
 801c442:	6821      	ldrge	r1, [r4, #0]
 801c444:	f021 0104 	bicge.w	r1, r1, #4
 801c448:	6021      	strge	r1, [r4, #0]
 801c44a:	b90d      	cbnz	r5, 801c450 <_printf_i+0x110>
 801c44c:	2e00      	cmp	r6, #0
 801c44e:	d04b      	beq.n	801c4e8 <_printf_i+0x1a8>
 801c450:	4616      	mov	r6, r2
 801c452:	fbb5 f1f3 	udiv	r1, r5, r3
 801c456:	fb03 5711 	mls	r7, r3, r1, r5
 801c45a:	5dc7      	ldrb	r7, [r0, r7]
 801c45c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c460:	462f      	mov	r7, r5
 801c462:	42bb      	cmp	r3, r7
 801c464:	460d      	mov	r5, r1
 801c466:	d9f4      	bls.n	801c452 <_printf_i+0x112>
 801c468:	2b08      	cmp	r3, #8
 801c46a:	d10b      	bne.n	801c484 <_printf_i+0x144>
 801c46c:	6823      	ldr	r3, [r4, #0]
 801c46e:	07df      	lsls	r7, r3, #31
 801c470:	d508      	bpl.n	801c484 <_printf_i+0x144>
 801c472:	6923      	ldr	r3, [r4, #16]
 801c474:	6861      	ldr	r1, [r4, #4]
 801c476:	4299      	cmp	r1, r3
 801c478:	bfde      	ittt	le
 801c47a:	2330      	movle	r3, #48	@ 0x30
 801c47c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c480:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c484:	1b92      	subs	r2, r2, r6
 801c486:	6122      	str	r2, [r4, #16]
 801c488:	f8cd a000 	str.w	sl, [sp]
 801c48c:	464b      	mov	r3, r9
 801c48e:	aa03      	add	r2, sp, #12
 801c490:	4621      	mov	r1, r4
 801c492:	4640      	mov	r0, r8
 801c494:	f7ff fee6 	bl	801c264 <_printf_common>
 801c498:	3001      	adds	r0, #1
 801c49a:	d14a      	bne.n	801c532 <_printf_i+0x1f2>
 801c49c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c4a0:	b004      	add	sp, #16
 801c4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4a6:	6823      	ldr	r3, [r4, #0]
 801c4a8:	f043 0320 	orr.w	r3, r3, #32
 801c4ac:	6023      	str	r3, [r4, #0]
 801c4ae:	4833      	ldr	r0, [pc, #204]	@ (801c57c <_printf_i+0x23c>)
 801c4b0:	2778      	movs	r7, #120	@ 0x78
 801c4b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c4b6:	6823      	ldr	r3, [r4, #0]
 801c4b8:	6831      	ldr	r1, [r6, #0]
 801c4ba:	061f      	lsls	r7, r3, #24
 801c4bc:	f851 5b04 	ldr.w	r5, [r1], #4
 801c4c0:	d402      	bmi.n	801c4c8 <_printf_i+0x188>
 801c4c2:	065f      	lsls	r7, r3, #25
 801c4c4:	bf48      	it	mi
 801c4c6:	b2ad      	uxthmi	r5, r5
 801c4c8:	6031      	str	r1, [r6, #0]
 801c4ca:	07d9      	lsls	r1, r3, #31
 801c4cc:	bf44      	itt	mi
 801c4ce:	f043 0320 	orrmi.w	r3, r3, #32
 801c4d2:	6023      	strmi	r3, [r4, #0]
 801c4d4:	b11d      	cbz	r5, 801c4de <_printf_i+0x19e>
 801c4d6:	2310      	movs	r3, #16
 801c4d8:	e7ac      	b.n	801c434 <_printf_i+0xf4>
 801c4da:	4827      	ldr	r0, [pc, #156]	@ (801c578 <_printf_i+0x238>)
 801c4dc:	e7e9      	b.n	801c4b2 <_printf_i+0x172>
 801c4de:	6823      	ldr	r3, [r4, #0]
 801c4e0:	f023 0320 	bic.w	r3, r3, #32
 801c4e4:	6023      	str	r3, [r4, #0]
 801c4e6:	e7f6      	b.n	801c4d6 <_printf_i+0x196>
 801c4e8:	4616      	mov	r6, r2
 801c4ea:	e7bd      	b.n	801c468 <_printf_i+0x128>
 801c4ec:	6833      	ldr	r3, [r6, #0]
 801c4ee:	6825      	ldr	r5, [r4, #0]
 801c4f0:	6961      	ldr	r1, [r4, #20]
 801c4f2:	1d18      	adds	r0, r3, #4
 801c4f4:	6030      	str	r0, [r6, #0]
 801c4f6:	062e      	lsls	r6, r5, #24
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	d501      	bpl.n	801c500 <_printf_i+0x1c0>
 801c4fc:	6019      	str	r1, [r3, #0]
 801c4fe:	e002      	b.n	801c506 <_printf_i+0x1c6>
 801c500:	0668      	lsls	r0, r5, #25
 801c502:	d5fb      	bpl.n	801c4fc <_printf_i+0x1bc>
 801c504:	8019      	strh	r1, [r3, #0]
 801c506:	2300      	movs	r3, #0
 801c508:	6123      	str	r3, [r4, #16]
 801c50a:	4616      	mov	r6, r2
 801c50c:	e7bc      	b.n	801c488 <_printf_i+0x148>
 801c50e:	6833      	ldr	r3, [r6, #0]
 801c510:	1d1a      	adds	r2, r3, #4
 801c512:	6032      	str	r2, [r6, #0]
 801c514:	681e      	ldr	r6, [r3, #0]
 801c516:	6862      	ldr	r2, [r4, #4]
 801c518:	2100      	movs	r1, #0
 801c51a:	4630      	mov	r0, r6
 801c51c:	f7e3 fef8 	bl	8000310 <memchr>
 801c520:	b108      	cbz	r0, 801c526 <_printf_i+0x1e6>
 801c522:	1b80      	subs	r0, r0, r6
 801c524:	6060      	str	r0, [r4, #4]
 801c526:	6863      	ldr	r3, [r4, #4]
 801c528:	6123      	str	r3, [r4, #16]
 801c52a:	2300      	movs	r3, #0
 801c52c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c530:	e7aa      	b.n	801c488 <_printf_i+0x148>
 801c532:	6923      	ldr	r3, [r4, #16]
 801c534:	4632      	mov	r2, r6
 801c536:	4649      	mov	r1, r9
 801c538:	4640      	mov	r0, r8
 801c53a:	47d0      	blx	sl
 801c53c:	3001      	adds	r0, #1
 801c53e:	d0ad      	beq.n	801c49c <_printf_i+0x15c>
 801c540:	6823      	ldr	r3, [r4, #0]
 801c542:	079b      	lsls	r3, r3, #30
 801c544:	d413      	bmi.n	801c56e <_printf_i+0x22e>
 801c546:	68e0      	ldr	r0, [r4, #12]
 801c548:	9b03      	ldr	r3, [sp, #12]
 801c54a:	4298      	cmp	r0, r3
 801c54c:	bfb8      	it	lt
 801c54e:	4618      	movlt	r0, r3
 801c550:	e7a6      	b.n	801c4a0 <_printf_i+0x160>
 801c552:	2301      	movs	r3, #1
 801c554:	4632      	mov	r2, r6
 801c556:	4649      	mov	r1, r9
 801c558:	4640      	mov	r0, r8
 801c55a:	47d0      	blx	sl
 801c55c:	3001      	adds	r0, #1
 801c55e:	d09d      	beq.n	801c49c <_printf_i+0x15c>
 801c560:	3501      	adds	r5, #1
 801c562:	68e3      	ldr	r3, [r4, #12]
 801c564:	9903      	ldr	r1, [sp, #12]
 801c566:	1a5b      	subs	r3, r3, r1
 801c568:	42ab      	cmp	r3, r5
 801c56a:	dcf2      	bgt.n	801c552 <_printf_i+0x212>
 801c56c:	e7eb      	b.n	801c546 <_printf_i+0x206>
 801c56e:	2500      	movs	r5, #0
 801c570:	f104 0619 	add.w	r6, r4, #25
 801c574:	e7f5      	b.n	801c562 <_printf_i+0x222>
 801c576:	bf00      	nop
 801c578:	0801d7a3 	.word	0x0801d7a3
 801c57c:	0801d7b4 	.word	0x0801d7b4

0801c580 <__sflush_r>:
 801c580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c588:	0716      	lsls	r6, r2, #28
 801c58a:	4605      	mov	r5, r0
 801c58c:	460c      	mov	r4, r1
 801c58e:	d454      	bmi.n	801c63a <__sflush_r+0xba>
 801c590:	684b      	ldr	r3, [r1, #4]
 801c592:	2b00      	cmp	r3, #0
 801c594:	dc02      	bgt.n	801c59c <__sflush_r+0x1c>
 801c596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c598:	2b00      	cmp	r3, #0
 801c59a:	dd48      	ble.n	801c62e <__sflush_r+0xae>
 801c59c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c59e:	2e00      	cmp	r6, #0
 801c5a0:	d045      	beq.n	801c62e <__sflush_r+0xae>
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c5a8:	682f      	ldr	r7, [r5, #0]
 801c5aa:	6a21      	ldr	r1, [r4, #32]
 801c5ac:	602b      	str	r3, [r5, #0]
 801c5ae:	d030      	beq.n	801c612 <__sflush_r+0x92>
 801c5b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c5b2:	89a3      	ldrh	r3, [r4, #12]
 801c5b4:	0759      	lsls	r1, r3, #29
 801c5b6:	d505      	bpl.n	801c5c4 <__sflush_r+0x44>
 801c5b8:	6863      	ldr	r3, [r4, #4]
 801c5ba:	1ad2      	subs	r2, r2, r3
 801c5bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c5be:	b10b      	cbz	r3, 801c5c4 <__sflush_r+0x44>
 801c5c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c5c2:	1ad2      	subs	r2, r2, r3
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c5c8:	6a21      	ldr	r1, [r4, #32]
 801c5ca:	4628      	mov	r0, r5
 801c5cc:	47b0      	blx	r6
 801c5ce:	1c43      	adds	r3, r0, #1
 801c5d0:	89a3      	ldrh	r3, [r4, #12]
 801c5d2:	d106      	bne.n	801c5e2 <__sflush_r+0x62>
 801c5d4:	6829      	ldr	r1, [r5, #0]
 801c5d6:	291d      	cmp	r1, #29
 801c5d8:	d82b      	bhi.n	801c632 <__sflush_r+0xb2>
 801c5da:	4a2a      	ldr	r2, [pc, #168]	@ (801c684 <__sflush_r+0x104>)
 801c5dc:	410a      	asrs	r2, r1
 801c5de:	07d6      	lsls	r6, r2, #31
 801c5e0:	d427      	bmi.n	801c632 <__sflush_r+0xb2>
 801c5e2:	2200      	movs	r2, #0
 801c5e4:	6062      	str	r2, [r4, #4]
 801c5e6:	04d9      	lsls	r1, r3, #19
 801c5e8:	6922      	ldr	r2, [r4, #16]
 801c5ea:	6022      	str	r2, [r4, #0]
 801c5ec:	d504      	bpl.n	801c5f8 <__sflush_r+0x78>
 801c5ee:	1c42      	adds	r2, r0, #1
 801c5f0:	d101      	bne.n	801c5f6 <__sflush_r+0x76>
 801c5f2:	682b      	ldr	r3, [r5, #0]
 801c5f4:	b903      	cbnz	r3, 801c5f8 <__sflush_r+0x78>
 801c5f6:	6560      	str	r0, [r4, #84]	@ 0x54
 801c5f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c5fa:	602f      	str	r7, [r5, #0]
 801c5fc:	b1b9      	cbz	r1, 801c62e <__sflush_r+0xae>
 801c5fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c602:	4299      	cmp	r1, r3
 801c604:	d002      	beq.n	801c60c <__sflush_r+0x8c>
 801c606:	4628      	mov	r0, r5
 801c608:	f7ff fb40 	bl	801bc8c <_free_r>
 801c60c:	2300      	movs	r3, #0
 801c60e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c610:	e00d      	b.n	801c62e <__sflush_r+0xae>
 801c612:	2301      	movs	r3, #1
 801c614:	4628      	mov	r0, r5
 801c616:	47b0      	blx	r6
 801c618:	4602      	mov	r2, r0
 801c61a:	1c50      	adds	r0, r2, #1
 801c61c:	d1c9      	bne.n	801c5b2 <__sflush_r+0x32>
 801c61e:	682b      	ldr	r3, [r5, #0]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d0c6      	beq.n	801c5b2 <__sflush_r+0x32>
 801c624:	2b1d      	cmp	r3, #29
 801c626:	d001      	beq.n	801c62c <__sflush_r+0xac>
 801c628:	2b16      	cmp	r3, #22
 801c62a:	d11e      	bne.n	801c66a <__sflush_r+0xea>
 801c62c:	602f      	str	r7, [r5, #0]
 801c62e:	2000      	movs	r0, #0
 801c630:	e022      	b.n	801c678 <__sflush_r+0xf8>
 801c632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c636:	b21b      	sxth	r3, r3
 801c638:	e01b      	b.n	801c672 <__sflush_r+0xf2>
 801c63a:	690f      	ldr	r7, [r1, #16]
 801c63c:	2f00      	cmp	r7, #0
 801c63e:	d0f6      	beq.n	801c62e <__sflush_r+0xae>
 801c640:	0793      	lsls	r3, r2, #30
 801c642:	680e      	ldr	r6, [r1, #0]
 801c644:	bf08      	it	eq
 801c646:	694b      	ldreq	r3, [r1, #20]
 801c648:	600f      	str	r7, [r1, #0]
 801c64a:	bf18      	it	ne
 801c64c:	2300      	movne	r3, #0
 801c64e:	eba6 0807 	sub.w	r8, r6, r7
 801c652:	608b      	str	r3, [r1, #8]
 801c654:	f1b8 0f00 	cmp.w	r8, #0
 801c658:	dde9      	ble.n	801c62e <__sflush_r+0xae>
 801c65a:	6a21      	ldr	r1, [r4, #32]
 801c65c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c65e:	4643      	mov	r3, r8
 801c660:	463a      	mov	r2, r7
 801c662:	4628      	mov	r0, r5
 801c664:	47b0      	blx	r6
 801c666:	2800      	cmp	r0, #0
 801c668:	dc08      	bgt.n	801c67c <__sflush_r+0xfc>
 801c66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c672:	81a3      	strh	r3, [r4, #12]
 801c674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c67c:	4407      	add	r7, r0
 801c67e:	eba8 0800 	sub.w	r8, r8, r0
 801c682:	e7e7      	b.n	801c654 <__sflush_r+0xd4>
 801c684:	dfbffffe 	.word	0xdfbffffe

0801c688 <_fflush_r>:
 801c688:	b538      	push	{r3, r4, r5, lr}
 801c68a:	690b      	ldr	r3, [r1, #16]
 801c68c:	4605      	mov	r5, r0
 801c68e:	460c      	mov	r4, r1
 801c690:	b913      	cbnz	r3, 801c698 <_fflush_r+0x10>
 801c692:	2500      	movs	r5, #0
 801c694:	4628      	mov	r0, r5
 801c696:	bd38      	pop	{r3, r4, r5, pc}
 801c698:	b118      	cbz	r0, 801c6a2 <_fflush_r+0x1a>
 801c69a:	6a03      	ldr	r3, [r0, #32]
 801c69c:	b90b      	cbnz	r3, 801c6a2 <_fflush_r+0x1a>
 801c69e:	f7fe ffe3 	bl	801b668 <__sinit>
 801c6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d0f3      	beq.n	801c692 <_fflush_r+0xa>
 801c6aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c6ac:	07d0      	lsls	r0, r2, #31
 801c6ae:	d404      	bmi.n	801c6ba <_fflush_r+0x32>
 801c6b0:	0599      	lsls	r1, r3, #22
 801c6b2:	d402      	bmi.n	801c6ba <_fflush_r+0x32>
 801c6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6b6:	f7ff faa6 	bl	801bc06 <__retarget_lock_acquire_recursive>
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	4621      	mov	r1, r4
 801c6be:	f7ff ff5f 	bl	801c580 <__sflush_r>
 801c6c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6c4:	07da      	lsls	r2, r3, #31
 801c6c6:	4605      	mov	r5, r0
 801c6c8:	d4e4      	bmi.n	801c694 <_fflush_r+0xc>
 801c6ca:	89a3      	ldrh	r3, [r4, #12]
 801c6cc:	059b      	lsls	r3, r3, #22
 801c6ce:	d4e1      	bmi.n	801c694 <_fflush_r+0xc>
 801c6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6d2:	f7ff fa99 	bl	801bc08 <__retarget_lock_release_recursive>
 801c6d6:	e7dd      	b.n	801c694 <_fflush_r+0xc>

0801c6d8 <fiprintf>:
 801c6d8:	b40e      	push	{r1, r2, r3}
 801c6da:	b503      	push	{r0, r1, lr}
 801c6dc:	4601      	mov	r1, r0
 801c6de:	ab03      	add	r3, sp, #12
 801c6e0:	4805      	ldr	r0, [pc, #20]	@ (801c6f8 <fiprintf+0x20>)
 801c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6e6:	6800      	ldr	r0, [r0, #0]
 801c6e8:	9301      	str	r3, [sp, #4]
 801c6ea:	f7ff fca3 	bl	801c034 <_vfiprintf_r>
 801c6ee:	b002      	add	sp, #8
 801c6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c6f4:	b003      	add	sp, #12
 801c6f6:	4770      	bx	lr
 801c6f8:	240002b0 	.word	0x240002b0

0801c6fc <__swhatbuf_r>:
 801c6fc:	b570      	push	{r4, r5, r6, lr}
 801c6fe:	460c      	mov	r4, r1
 801c700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c704:	2900      	cmp	r1, #0
 801c706:	b096      	sub	sp, #88	@ 0x58
 801c708:	4615      	mov	r5, r2
 801c70a:	461e      	mov	r6, r3
 801c70c:	da0d      	bge.n	801c72a <__swhatbuf_r+0x2e>
 801c70e:	89a3      	ldrh	r3, [r4, #12]
 801c710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c714:	f04f 0100 	mov.w	r1, #0
 801c718:	bf14      	ite	ne
 801c71a:	2340      	movne	r3, #64	@ 0x40
 801c71c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c720:	2000      	movs	r0, #0
 801c722:	6031      	str	r1, [r6, #0]
 801c724:	602b      	str	r3, [r5, #0]
 801c726:	b016      	add	sp, #88	@ 0x58
 801c728:	bd70      	pop	{r4, r5, r6, pc}
 801c72a:	466a      	mov	r2, sp
 801c72c:	f000 f848 	bl	801c7c0 <_fstat_r>
 801c730:	2800      	cmp	r0, #0
 801c732:	dbec      	blt.n	801c70e <__swhatbuf_r+0x12>
 801c734:	9901      	ldr	r1, [sp, #4]
 801c736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c73a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c73e:	4259      	negs	r1, r3
 801c740:	4159      	adcs	r1, r3
 801c742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c746:	e7eb      	b.n	801c720 <__swhatbuf_r+0x24>

0801c748 <__smakebuf_r>:
 801c748:	898b      	ldrh	r3, [r1, #12]
 801c74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c74c:	079d      	lsls	r5, r3, #30
 801c74e:	4606      	mov	r6, r0
 801c750:	460c      	mov	r4, r1
 801c752:	d507      	bpl.n	801c764 <__smakebuf_r+0x1c>
 801c754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c758:	6023      	str	r3, [r4, #0]
 801c75a:	6123      	str	r3, [r4, #16]
 801c75c:	2301      	movs	r3, #1
 801c75e:	6163      	str	r3, [r4, #20]
 801c760:	b003      	add	sp, #12
 801c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c764:	ab01      	add	r3, sp, #4
 801c766:	466a      	mov	r2, sp
 801c768:	f7ff ffc8 	bl	801c6fc <__swhatbuf_r>
 801c76c:	9f00      	ldr	r7, [sp, #0]
 801c76e:	4605      	mov	r5, r0
 801c770:	4639      	mov	r1, r7
 801c772:	4630      	mov	r0, r6
 801c774:	f7fe fd46 	bl	801b204 <_malloc_r>
 801c778:	b948      	cbnz	r0, 801c78e <__smakebuf_r+0x46>
 801c77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c77e:	059a      	lsls	r2, r3, #22
 801c780:	d4ee      	bmi.n	801c760 <__smakebuf_r+0x18>
 801c782:	f023 0303 	bic.w	r3, r3, #3
 801c786:	f043 0302 	orr.w	r3, r3, #2
 801c78a:	81a3      	strh	r3, [r4, #12]
 801c78c:	e7e2      	b.n	801c754 <__smakebuf_r+0xc>
 801c78e:	89a3      	ldrh	r3, [r4, #12]
 801c790:	6020      	str	r0, [r4, #0]
 801c792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c796:	81a3      	strh	r3, [r4, #12]
 801c798:	9b01      	ldr	r3, [sp, #4]
 801c79a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c79e:	b15b      	cbz	r3, 801c7b8 <__smakebuf_r+0x70>
 801c7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c7a4:	4630      	mov	r0, r6
 801c7a6:	f000 f81d 	bl	801c7e4 <_isatty_r>
 801c7aa:	b128      	cbz	r0, 801c7b8 <__smakebuf_r+0x70>
 801c7ac:	89a3      	ldrh	r3, [r4, #12]
 801c7ae:	f023 0303 	bic.w	r3, r3, #3
 801c7b2:	f043 0301 	orr.w	r3, r3, #1
 801c7b6:	81a3      	strh	r3, [r4, #12]
 801c7b8:	89a3      	ldrh	r3, [r4, #12]
 801c7ba:	431d      	orrs	r5, r3
 801c7bc:	81a5      	strh	r5, [r4, #12]
 801c7be:	e7cf      	b.n	801c760 <__smakebuf_r+0x18>

0801c7c0 <_fstat_r>:
 801c7c0:	b538      	push	{r3, r4, r5, lr}
 801c7c2:	4d07      	ldr	r5, [pc, #28]	@ (801c7e0 <_fstat_r+0x20>)
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	4604      	mov	r4, r0
 801c7c8:	4608      	mov	r0, r1
 801c7ca:	4611      	mov	r1, r2
 801c7cc:	602b      	str	r3, [r5, #0]
 801c7ce:	f7e5 fb27 	bl	8001e20 <_fstat>
 801c7d2:	1c43      	adds	r3, r0, #1
 801c7d4:	d102      	bne.n	801c7dc <_fstat_r+0x1c>
 801c7d6:	682b      	ldr	r3, [r5, #0]
 801c7d8:	b103      	cbz	r3, 801c7dc <_fstat_r+0x1c>
 801c7da:	6023      	str	r3, [r4, #0]
 801c7dc:	bd38      	pop	{r3, r4, r5, pc}
 801c7de:	bf00      	nop
 801c7e0:	24012fb0 	.word	0x24012fb0

0801c7e4 <_isatty_r>:
 801c7e4:	b538      	push	{r3, r4, r5, lr}
 801c7e6:	4d06      	ldr	r5, [pc, #24]	@ (801c800 <_isatty_r+0x1c>)
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	4604      	mov	r4, r0
 801c7ec:	4608      	mov	r0, r1
 801c7ee:	602b      	str	r3, [r5, #0]
 801c7f0:	f7e5 fb26 	bl	8001e40 <_isatty>
 801c7f4:	1c43      	adds	r3, r0, #1
 801c7f6:	d102      	bne.n	801c7fe <_isatty_r+0x1a>
 801c7f8:	682b      	ldr	r3, [r5, #0]
 801c7fa:	b103      	cbz	r3, 801c7fe <_isatty_r+0x1a>
 801c7fc:	6023      	str	r3, [r4, #0]
 801c7fe:	bd38      	pop	{r3, r4, r5, pc}
 801c800:	24012fb0 	.word	0x24012fb0

0801c804 <abort>:
 801c804:	b508      	push	{r3, lr}
 801c806:	2006      	movs	r0, #6
 801c808:	f000 f82c 	bl	801c864 <raise>
 801c80c:	2001      	movs	r0, #1
 801c80e:	f7e5 fab7 	bl	8001d80 <_exit>

0801c812 <_raise_r>:
 801c812:	291f      	cmp	r1, #31
 801c814:	b538      	push	{r3, r4, r5, lr}
 801c816:	4605      	mov	r5, r0
 801c818:	460c      	mov	r4, r1
 801c81a:	d904      	bls.n	801c826 <_raise_r+0x14>
 801c81c:	2316      	movs	r3, #22
 801c81e:	6003      	str	r3, [r0, #0]
 801c820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c824:	bd38      	pop	{r3, r4, r5, pc}
 801c826:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c828:	b112      	cbz	r2, 801c830 <_raise_r+0x1e>
 801c82a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c82e:	b94b      	cbnz	r3, 801c844 <_raise_r+0x32>
 801c830:	4628      	mov	r0, r5
 801c832:	f000 f831 	bl	801c898 <_getpid_r>
 801c836:	4622      	mov	r2, r4
 801c838:	4601      	mov	r1, r0
 801c83a:	4628      	mov	r0, r5
 801c83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c840:	f000 b818 	b.w	801c874 <_kill_r>
 801c844:	2b01      	cmp	r3, #1
 801c846:	d00a      	beq.n	801c85e <_raise_r+0x4c>
 801c848:	1c59      	adds	r1, r3, #1
 801c84a:	d103      	bne.n	801c854 <_raise_r+0x42>
 801c84c:	2316      	movs	r3, #22
 801c84e:	6003      	str	r3, [r0, #0]
 801c850:	2001      	movs	r0, #1
 801c852:	e7e7      	b.n	801c824 <_raise_r+0x12>
 801c854:	2100      	movs	r1, #0
 801c856:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c85a:	4620      	mov	r0, r4
 801c85c:	4798      	blx	r3
 801c85e:	2000      	movs	r0, #0
 801c860:	e7e0      	b.n	801c824 <_raise_r+0x12>
	...

0801c864 <raise>:
 801c864:	4b02      	ldr	r3, [pc, #8]	@ (801c870 <raise+0xc>)
 801c866:	4601      	mov	r1, r0
 801c868:	6818      	ldr	r0, [r3, #0]
 801c86a:	f7ff bfd2 	b.w	801c812 <_raise_r>
 801c86e:	bf00      	nop
 801c870:	240002b0 	.word	0x240002b0

0801c874 <_kill_r>:
 801c874:	b538      	push	{r3, r4, r5, lr}
 801c876:	4d07      	ldr	r5, [pc, #28]	@ (801c894 <_kill_r+0x20>)
 801c878:	2300      	movs	r3, #0
 801c87a:	4604      	mov	r4, r0
 801c87c:	4608      	mov	r0, r1
 801c87e:	4611      	mov	r1, r2
 801c880:	602b      	str	r3, [r5, #0]
 801c882:	f7e5 fa6d 	bl	8001d60 <_kill>
 801c886:	1c43      	adds	r3, r0, #1
 801c888:	d102      	bne.n	801c890 <_kill_r+0x1c>
 801c88a:	682b      	ldr	r3, [r5, #0]
 801c88c:	b103      	cbz	r3, 801c890 <_kill_r+0x1c>
 801c88e:	6023      	str	r3, [r4, #0]
 801c890:	bd38      	pop	{r3, r4, r5, pc}
 801c892:	bf00      	nop
 801c894:	24012fb0 	.word	0x24012fb0

0801c898 <_getpid_r>:
 801c898:	f7e5 ba5a 	b.w	8001d50 <_getpid>

0801c89c <_init>:
 801c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c89e:	bf00      	nop
 801c8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8a2:	bc08      	pop	{r3}
 801c8a4:	469e      	mov	lr, r3
 801c8a6:	4770      	bx	lr

0801c8a8 <_fini>:
 801c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8aa:	bf00      	nop
 801c8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8ae:	bc08      	pop	{r3}
 801c8b0:	469e      	mov	lr, r3
 801c8b2:	4770      	bx	lr
