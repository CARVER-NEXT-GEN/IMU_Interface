
IMU_Interface_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b14  08100298  08100298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08109dac  08109dac  0000adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08109dc4  08109dc4  0000adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08109dc8  08109dc8  0000adc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000028  10000000  08109dcc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000324  10000028  08109df4  0000b028  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  1000034c  08109df4  0000b34c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001868b  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000033a1  00000000  00000000  000236e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013f0  00000000  00000000  00026a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f59  00000000  00000000  00027e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cc89  00000000  00000000  00028dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d750  00000000  00000000  00065a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018bee6  00000000  00000000  000831aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0020f090  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000053f8  00000000  00000000  0020f0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000076  00000000  00000000  002144cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000028 	.word	0x10000028
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08109d94 	.word	0x08109d94

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000002c 	.word	0x1000002c
 81002d4:	08109d94 	.word	0x08109d94

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	@ 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <BNO055_Init>:
volatile SharedMemory *const SRAM4_BNO055 = (SharedMemory*)(SHARED_MEMORY_ADDRESS_BNO055); // Definition in SRAM4.c

#if __CORTEX_M == 4  // Only for CM7 core

HAL_StatusTypeDef BNO055_Init(BNO055_t *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	b08a      	sub	sp, #40	@ 0x28
 8100a78:	af04      	add	r7, sp, #16
 8100a7a:	60f8      	str	r0, [r7, #12]
 8100a7c:	60b9      	str	r1, [r7, #8]
 8100a7e:	4611      	mov	r1, r2
 8100a80:	461a      	mov	r2, r3
 8100a82:	460b      	mov	r3, r1
 8100a84:	71fb      	strb	r3, [r7, #7]
 8100a86:	4613      	mov	r3, r2
 8100a88:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8100a8a:	68fb      	ldr	r3, [r7, #12]
 8100a8c:	68ba      	ldr	r2, [r7, #8]
 8100a8e:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8100a90:	68fb      	ldr	r3, [r7, #12]
 8100a92:	2252      	movs	r2, #82	@ 0x52
 8100a94:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8100a96:	79fb      	ldrb	r3, [r7, #7]
 8100a98:	2b00      	cmp	r3, #0
 8100a9a:	d102      	bne.n	8100aa2 <BNO055_Init+0x2e>
 8100a9c:	68fb      	ldr	r3, [r7, #12]
 8100a9e:	2250      	movs	r2, #80	@ 0x50
 8100aa0:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100aa2:	68fb      	ldr	r3, [r7, #12]
 8100aa4:	6818      	ldr	r0, [r3, #0]
 8100aa6:	68fb      	ldr	r3, [r7, #12]
 8100aa8:	791b      	ldrb	r3, [r3, #4]
 8100aaa:	4619      	mov	r1, r3
 8100aac:	230a      	movs	r3, #10
 8100aae:	9302      	str	r3, [sp, #8]
 8100ab0:	2301      	movs	r3, #1
 8100ab2:	9301      	str	r3, [sp, #4]
 8100ab4:	f107 0316 	add.w	r3, r7, #22
 8100ab8:	9300      	str	r3, [sp, #0]
 8100aba:	2301      	movs	r3, #1
 8100abc:	2200      	movs	r2, #0
 8100abe:	f004 fa73 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8100ac2:	7dbb      	ldrb	r3, [r7, #22]
 8100ac4:	2ba0      	cmp	r3, #160	@ 0xa0
 8100ac6:	d018      	beq.n	8100afa <BNO055_Init+0x86>
		HAL_Delay(1000);
 8100ac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100acc:	f001 fa06 	bl	8101edc <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100ad0:	68fb      	ldr	r3, [r7, #12]
 8100ad2:	6818      	ldr	r0, [r3, #0]
 8100ad4:	68fb      	ldr	r3, [r7, #12]
 8100ad6:	791b      	ldrb	r3, [r3, #4]
 8100ad8:	4619      	mov	r1, r3
 8100ada:	230a      	movs	r3, #10
 8100adc:	9302      	str	r3, [sp, #8]
 8100ade:	2301      	movs	r3, #1
 8100ae0:	9301      	str	r3, [sp, #4]
 8100ae2:	f107 0316 	add.w	r3, r7, #22
 8100ae6:	9300      	str	r3, [sp, #0]
 8100ae8:	2301      	movs	r3, #1
 8100aea:	2200      	movs	r2, #0
 8100aec:	f004 fa5c 	bl	8104fa8 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8100af0:	7dbb      	ldrb	r3, [r7, #22]
 8100af2:	2ba0      	cmp	r3, #160	@ 0xa0
 8100af4:	d001      	beq.n	8100afa <BNO055_Init+0x86>
 8100af6:	2301      	movs	r3, #1
 8100af8:	e099      	b.n	8100c2e <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8100afa:	2300      	movs	r3, #0
 8100afc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8100afe:	68fb      	ldr	r3, [r7, #12]
 8100b00:	6818      	ldr	r0, [r3, #0]
 8100b02:	68fb      	ldr	r3, [r7, #12]
 8100b04:	791b      	ldrb	r3, [r3, #4]
 8100b06:	4619      	mov	r1, r3
 8100b08:	230a      	movs	r3, #10
 8100b0a:	9302      	str	r3, [sp, #8]
 8100b0c:	2301      	movs	r3, #1
 8100b0e:	9301      	str	r3, [sp, #4]
 8100b10:	f107 0317 	add.w	r3, r7, #23
 8100b14:	9300      	str	r3, [sp, #0]
 8100b16:	2301      	movs	r3, #1
 8100b18:	223d      	movs	r2, #61	@ 0x3d
 8100b1a:	f004 f931 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100b1e:	200a      	movs	r0, #10
 8100b20:	f001 f9dc 	bl	8101edc <HAL_Delay>

	txbuffer = 0x20;
 8100b24:	2320      	movs	r3, #32
 8100b26:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8100b28:	68fb      	ldr	r3, [r7, #12]
 8100b2a:	6818      	ldr	r0, [r3, #0]
 8100b2c:	68fb      	ldr	r3, [r7, #12]
 8100b2e:	791b      	ldrb	r3, [r3, #4]
 8100b30:	4619      	mov	r1, r3
 8100b32:	230a      	movs	r3, #10
 8100b34:	9302      	str	r3, [sp, #8]
 8100b36:	2301      	movs	r3, #1
 8100b38:	9301      	str	r3, [sp, #4]
 8100b3a:	f107 0317 	add.w	r3, r7, #23
 8100b3e:	9300      	str	r3, [sp, #0]
 8100b40:	2301      	movs	r3, #1
 8100b42:	223f      	movs	r2, #63	@ 0x3f
 8100b44:	f004 f91c 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8100b48:	201e      	movs	r0, #30
 8100b4a:	f001 f9c7 	bl	8101edc <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100b4e:	68fb      	ldr	r3, [r7, #12]
 8100b50:	6818      	ldr	r0, [r3, #0]
 8100b52:	68fb      	ldr	r3, [r7, #12]
 8100b54:	791b      	ldrb	r3, [r3, #4]
 8100b56:	4619      	mov	r1, r3
 8100b58:	230a      	movs	r3, #10
 8100b5a:	9302      	str	r3, [sp, #8]
 8100b5c:	2301      	movs	r3, #1
 8100b5e:	9301      	str	r3, [sp, #4]
 8100b60:	f107 0316 	add.w	r3, r7, #22
 8100b64:	9300      	str	r3, [sp, #0]
 8100b66:	2301      	movs	r3, #1
 8100b68:	2200      	movs	r2, #0
 8100b6a:	f004 fa1d 	bl	8104fa8 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8100b6e:	7dbb      	ldrb	r3, [r7, #22]
 8100b70:	2ba0      	cmp	r3, #160	@ 0xa0
 8100b72:	d1ec      	bne.n	8100b4e <BNO055_Init+0xda>
	HAL_Delay(50);
 8100b74:	2032      	movs	r0, #50	@ 0x32
 8100b76:	f001 f9b1 	bl	8101edc <HAL_Delay>

	txbuffer = Normal_Mode;
 8100b7a:	2300      	movs	r3, #0
 8100b7c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8100b7e:	68fb      	ldr	r3, [r7, #12]
 8100b80:	6818      	ldr	r0, [r3, #0]
 8100b82:	68fb      	ldr	r3, [r7, #12]
 8100b84:	791b      	ldrb	r3, [r3, #4]
 8100b86:	4619      	mov	r1, r3
 8100b88:	230a      	movs	r3, #10
 8100b8a:	9302      	str	r3, [sp, #8]
 8100b8c:	2301      	movs	r3, #1
 8100b8e:	9301      	str	r3, [sp, #4]
 8100b90:	f107 0317 	add.w	r3, r7, #23
 8100b94:	9300      	str	r3, [sp, #0]
 8100b96:	2301      	movs	r3, #1
 8100b98:	223e      	movs	r2, #62	@ 0x3e
 8100b9a:	f004 f8f1 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100b9e:	200a      	movs	r0, #10
 8100ba0:	f001 f99c 	bl	8101edc <HAL_Delay>

	txbuffer = Page_ID_00;
 8100ba4:	2300      	movs	r3, #0
 8100ba6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8100ba8:	68fb      	ldr	r3, [r7, #12]
 8100baa:	6818      	ldr	r0, [r3, #0]
 8100bac:	68fb      	ldr	r3, [r7, #12]
 8100bae:	791b      	ldrb	r3, [r3, #4]
 8100bb0:	4619      	mov	r1, r3
 8100bb2:	230a      	movs	r3, #10
 8100bb4:	9302      	str	r3, [sp, #8]
 8100bb6:	2301      	movs	r3, #1
 8100bb8:	9301      	str	r3, [sp, #4]
 8100bba:	f107 0317 	add.w	r3, r7, #23
 8100bbe:	9300      	str	r3, [sp, #0]
 8100bc0:	2301      	movs	r3, #1
 8100bc2:	2207      	movs	r2, #7
 8100bc4:	f004 f8dc 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100bc8:	200a      	movs	r0, #10
 8100bca:	f001 f987 	bl	8101edc <HAL_Delay>

	txbuffer = 0x00;
 8100bce:	2300      	movs	r3, #0
 8100bd0:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8100bd2:	68fb      	ldr	r3, [r7, #12]
 8100bd4:	6818      	ldr	r0, [r3, #0]
 8100bd6:	68fb      	ldr	r3, [r7, #12]
 8100bd8:	791b      	ldrb	r3, [r3, #4]
 8100bda:	4619      	mov	r1, r3
 8100bdc:	230a      	movs	r3, #10
 8100bde:	9302      	str	r3, [sp, #8]
 8100be0:	2301      	movs	r3, #1
 8100be2:	9301      	str	r3, [sp, #4]
 8100be4:	f107 0317 	add.w	r3, r7, #23
 8100be8:	9300      	str	r3, [sp, #0]
 8100bea:	2301      	movs	r3, #1
 8100bec:	223f      	movs	r2, #63	@ 0x3f
 8100bee:	f004 f8c7 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100bf2:	200a      	movs	r0, #10
 8100bf4:	f001 f972 	bl	8101edc <HAL_Delay>

	bno->mode = mode;
 8100bf8:	68fb      	ldr	r3, [r7, #12]
 8100bfa:	79ba      	ldrb	r2, [r7, #6]
 8100bfc:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8100bfe:	68fb      	ldr	r3, [r7, #12]
 8100c00:	6818      	ldr	r0, [r3, #0]
 8100c02:	68fb      	ldr	r3, [r7, #12]
 8100c04:	791b      	ldrb	r3, [r3, #4]
 8100c06:	4619      	mov	r1, r3
 8100c08:	68fb      	ldr	r3, [r7, #12]
 8100c0a:	3305      	adds	r3, #5
 8100c0c:	220a      	movs	r2, #10
 8100c0e:	9202      	str	r2, [sp, #8]
 8100c10:	2201      	movs	r2, #1
 8100c12:	9201      	str	r2, [sp, #4]
 8100c14:	9300      	str	r3, [sp, #0]
 8100c16:	2301      	movs	r3, #1
 8100c18:	223d      	movs	r2, #61	@ 0x3d
 8100c1a:	f004 f8b1 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8100c1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100c22:	f001 f95b 	bl	8101edc <HAL_Delay>

	bno->flag = HAL_OK;
 8100c26:	68fb      	ldr	r3, [r7, #12]
 8100c28:	2200      	movs	r2, #0
 8100c2a:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8100c2c:	2300      	movs	r3, #0
}
 8100c2e:	4618      	mov	r0, r3
 8100c30:	3718      	adds	r7, #24
 8100c32:	46bd      	mov	sp, r7
 8100c34:	bd80      	pop	{r7, pc}
	...

08100c38 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_t *bno, uint8_t fast_mode)
{
 8100c38:	b580      	push	{r7, lr}
 8100c3a:	b08a      	sub	sp, #40	@ 0x28
 8100c3c:	af04      	add	r7, sp, #16
 8100c3e:	6078      	str	r0, [r7, #4]
 8100c40:	460b      	mov	r3, r1
 8100c42:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	6818      	ldr	r0, [r3, #0]
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	791b      	ldrb	r3, [r3, #4]
 8100c4c:	4619      	mov	r1, r3
 8100c4e:	230a      	movs	r3, #10
 8100c50:	9302      	str	r3, [sp, #8]
 8100c52:	2301      	movs	r3, #1
 8100c54:	9301      	str	r3, [sp, #4]
 8100c56:	f107 030f 	add.w	r3, r7, #15
 8100c5a:	9300      	str	r3, [sp, #0]
 8100c5c:	2301      	movs	r3, #1
 8100c5e:	223d      	movs	r2, #61	@ 0x3d
 8100c60:	f004 f9a2 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	795a      	ldrb	r2, [r3, #5]
 8100c68:	7bfb      	ldrb	r3, [r7, #15]
 8100c6a:	429a      	cmp	r2, r3
 8100c6c:	d00f      	beq.n	8100c8e <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8100c6e:	687b      	ldr	r3, [r7, #4]
 8100c70:	6818      	ldr	r0, [r3, #0]
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	791b      	ldrb	r3, [r3, #4]
 8100c76:	4619      	mov	r1, r3
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	3305      	adds	r3, #5
 8100c7c:	220a      	movs	r2, #10
 8100c7e:	9202      	str	r2, [sp, #8]
 8100c80:	2201      	movs	r2, #1
 8100c82:	9201      	str	r2, [sp, #4]
 8100c84:	9300      	str	r3, [sp, #0]
 8100c86:	2301      	movs	r3, #1
 8100c88:	223d      	movs	r2, #61	@ 0x3d
 8100c8a:	f004 f879 	bl	8104d80 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8100c8e:	f04f 0200 	mov.w	r2, #0
 8100c92:	4bc3      	ldr	r3, [pc, #780]	@ (8100fa0 <BNO055_Read_DMA+0x368>)
 8100c94:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8100c9e:	4618      	mov	r0, r3
 8100ca0:	f7ff fc6c 	bl	810057c <__aeabi_i2d>
 8100ca4:	f04f 0200 	mov.w	r2, #0
 8100ca8:	4bbe      	ldr	r3, [pc, #760]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100caa:	f7ff fdfb 	bl	81008a4 <__aeabi_ddiv>
 8100cae:	4602      	mov	r2, r0
 8100cb0:	460b      	mov	r3, r1
 8100cb2:	6879      	ldr	r1, [r7, #4]
 8100cb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8100cb8:	687b      	ldr	r3, [r7, #4]
 8100cba:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8100cbe:	4618      	mov	r0, r3
 8100cc0:	f7ff fc5c 	bl	810057c <__aeabi_i2d>
 8100cc4:	f04f 0200 	mov.w	r2, #0
 8100cc8:	4bb6      	ldr	r3, [pc, #728]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100cca:	f7ff fdeb 	bl	81008a4 <__aeabi_ddiv>
 8100cce:	4602      	mov	r2, r0
 8100cd0:	460b      	mov	r3, r1
 8100cd2:	6879      	ldr	r1, [r7, #4]
 8100cd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8100cd8:	687b      	ldr	r3, [r7, #4]
 8100cda:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8100cde:	4618      	mov	r0, r3
 8100ce0:	f7ff fc4c 	bl	810057c <__aeabi_i2d>
 8100ce4:	f04f 0200 	mov.w	r2, #0
 8100ce8:	4bae      	ldr	r3, [pc, #696]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100cea:	f7ff fddb 	bl	81008a4 <__aeabi_ddiv>
 8100cee:	4602      	mov	r2, r0
 8100cf0:	460b      	mov	r3, r1
 8100cf2:	6879      	ldr	r1, [r7, #4]
 8100cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8100cf8:	687b      	ldr	r3, [r7, #4]
 8100cfa:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8100cfe:	4618      	mov	r0, r3
 8100d00:	f7ff fc3c 	bl	810057c <__aeabi_i2d>
 8100d04:	f04f 0200 	mov.w	r2, #0
 8100d08:	4ba7      	ldr	r3, [pc, #668]	@ (8100fa8 <BNO055_Read_DMA+0x370>)
 8100d0a:	f7ff fdcb 	bl	81008a4 <__aeabi_ddiv>
 8100d0e:	4602      	mov	r2, r0
 8100d10:	460b      	mov	r3, r1
 8100d12:	6879      	ldr	r1, [r7, #4]
 8100d14:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8100d18:	687b      	ldr	r3, [r7, #4]
 8100d1a:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8100d1e:	4618      	mov	r0, r3
 8100d20:	f7ff fc2c 	bl	810057c <__aeabi_i2d>
 8100d24:	f04f 0200 	mov.w	r2, #0
 8100d28:	4b9f      	ldr	r3, [pc, #636]	@ (8100fa8 <BNO055_Read_DMA+0x370>)
 8100d2a:	f7ff fdbb 	bl	81008a4 <__aeabi_ddiv>
 8100d2e:	4602      	mov	r2, r0
 8100d30:	460b      	mov	r3, r1
 8100d32:	6879      	ldr	r1, [r7, #4]
 8100d34:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8100d3e:	4618      	mov	r0, r3
 8100d40:	f7ff fc1c 	bl	810057c <__aeabi_i2d>
 8100d44:	f04f 0200 	mov.w	r2, #0
 8100d48:	4b97      	ldr	r3, [pc, #604]	@ (8100fa8 <BNO055_Read_DMA+0x370>)
 8100d4a:	f7ff fdab 	bl	81008a4 <__aeabi_ddiv>
 8100d4e:	4602      	mov	r2, r0
 8100d50:	460b      	mov	r3, r1
 8100d52:	6879      	ldr	r1, [r7, #4]
 8100d54:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) * M_PI / (16.0 * 180.0);
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8100d5e:	4618      	mov	r0, r3
 8100d60:	f7ff fc0c 	bl	810057c <__aeabi_i2d>
 8100d64:	a38c      	add	r3, pc, #560	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100d6a:	f7ff fc71 	bl	8100650 <__aeabi_dmul>
 8100d6e:	4602      	mov	r2, r0
 8100d70:	460b      	mov	r3, r1
 8100d72:	4610      	mov	r0, r2
 8100d74:	4619      	mov	r1, r3
 8100d76:	f04f 0200 	mov.w	r2, #0
 8100d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100d7c:	f7ff fd92 	bl	81008a4 <__aeabi_ddiv>
 8100d80:	4602      	mov	r2, r0
 8100d82:	460b      	mov	r3, r1
 8100d84:	6879      	ldr	r1, [r7, #4]
 8100d86:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) * M_PI / (16.0 * 180.0);
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8100d90:	4618      	mov	r0, r3
 8100d92:	f7ff fbf3 	bl	810057c <__aeabi_i2d>
 8100d96:	a380      	add	r3, pc, #512	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100d9c:	f7ff fc58 	bl	8100650 <__aeabi_dmul>
 8100da0:	4602      	mov	r2, r0
 8100da2:	460b      	mov	r3, r1
 8100da4:	4610      	mov	r0, r2
 8100da6:	4619      	mov	r1, r3
 8100da8:	f04f 0200 	mov.w	r2, #0
 8100dac:	4b7f      	ldr	r3, [pc, #508]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100dae:	f7ff fd79 	bl	81008a4 <__aeabi_ddiv>
 8100db2:	4602      	mov	r2, r0
 8100db4:	460b      	mov	r3, r1
 8100db6:	6879      	ldr	r1, [r7, #4]
 8100db8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) * M_PI / (16.0 * 180.0);
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8100dc2:	4618      	mov	r0, r3
 8100dc4:	f7ff fbda 	bl	810057c <__aeabi_i2d>
 8100dc8:	a373      	add	r3, pc, #460	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100dce:	f7ff fc3f 	bl	8100650 <__aeabi_dmul>
 8100dd2:	4602      	mov	r2, r0
 8100dd4:	460b      	mov	r3, r1
 8100dd6:	4610      	mov	r0, r2
 8100dd8:	4619      	mov	r1, r3
 8100dda:	f04f 0200 	mov.w	r2, #0
 8100dde:	4b73      	ldr	r3, [pc, #460]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100de0:	f7ff fd60 	bl	81008a4 <__aeabi_ddiv>
 8100de4:	4602      	mov	r2, r0
 8100de6:	460b      	mov	r3, r1
 8100de8:	6879      	ldr	r1, [r7, #4]
 8100dea:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) * M_PI / (16.0 * 180.0);
 8100dee:	687b      	ldr	r3, [r7, #4]
 8100df0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8100df4:	4618      	mov	r0, r3
 8100df6:	f7ff fbc1 	bl	810057c <__aeabi_i2d>
 8100dfa:	a367      	add	r3, pc, #412	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100e00:	f7ff fc26 	bl	8100650 <__aeabi_dmul>
 8100e04:	4602      	mov	r2, r0
 8100e06:	460b      	mov	r3, r1
 8100e08:	4610      	mov	r0, r2
 8100e0a:	4619      	mov	r1, r3
 8100e0c:	f04f 0200 	mov.w	r2, #0
 8100e10:	4b66      	ldr	r3, [pc, #408]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100e12:	f7ff fd47 	bl	81008a4 <__aeabi_ddiv>
 8100e16:	4602      	mov	r2, r0
 8100e18:	460b      	mov	r3, r1
 8100e1a:	6879      	ldr	r1, [r7, #4]
 8100e1c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) * M_PI / (16.0 * 180.0);
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8100e26:	4618      	mov	r0, r3
 8100e28:	f7ff fba8 	bl	810057c <__aeabi_i2d>
 8100e2c:	a35a      	add	r3, pc, #360	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100e32:	f7ff fc0d 	bl	8100650 <__aeabi_dmul>
 8100e36:	4602      	mov	r2, r0
 8100e38:	460b      	mov	r3, r1
 8100e3a:	4610      	mov	r0, r2
 8100e3c:	4619      	mov	r1, r3
 8100e3e:	f04f 0200 	mov.w	r2, #0
 8100e42:	4b5a      	ldr	r3, [pc, #360]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100e44:	f7ff fd2e 	bl	81008a4 <__aeabi_ddiv>
 8100e48:	4602      	mov	r2, r0
 8100e4a:	460b      	mov	r3, r1
 8100e4c:	6879      	ldr	r1, [r7, #4]
 8100e4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) * M_PI / (16.0 * 180.0);
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8100e58:	4618      	mov	r0, r3
 8100e5a:	f7ff fb8f 	bl	810057c <__aeabi_i2d>
 8100e5e:	a34e      	add	r3, pc, #312	@ (adr r3, 8100f98 <BNO055_Read_DMA+0x360>)
 8100e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100e64:	f7ff fbf4 	bl	8100650 <__aeabi_dmul>
 8100e68:	4602      	mov	r2, r0
 8100e6a:	460b      	mov	r3, r1
 8100e6c:	4610      	mov	r0, r2
 8100e6e:	4619      	mov	r1, r3
 8100e70:	f04f 0200 	mov.w	r2, #0
 8100e74:	4b4d      	ldr	r3, [pc, #308]	@ (8100fac <BNO055_Read_DMA+0x374>)
 8100e76:	f7ff fd15 	bl	81008a4 <__aeabi_ddiv>
 8100e7a:	4602      	mov	r2, r0
 8100e7c:	460b      	mov	r3, r1
 8100e7e:	6879      	ldr	r1, [r7, #4]
 8100e80:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.w = bno->DataBuffer[12].i16 * scale;
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8100e8a:	4618      	mov	r0, r3
 8100e8c:	f7ff fb76 	bl	810057c <__aeabi_i2d>
 8100e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8100e94:	f7ff fbdc 	bl	8100650 <__aeabi_dmul>
 8100e98:	4602      	mov	r2, r0
 8100e9a:	460b      	mov	r3, r1
 8100e9c:	6879      	ldr	r1, [r7, #4]
 8100e9e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	bno->quat.x = bno->DataBuffer[13].i16 * scale;
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8100ea8:	4618      	mov	r0, r3
 8100eaa:	f7ff fb67 	bl	810057c <__aeabi_i2d>
 8100eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8100eb2:	f7ff fbcd 	bl	8100650 <__aeabi_dmul>
 8100eb6:	4602      	mov	r2, r0
 8100eb8:	460b      	mov	r3, r1
 8100eba:	6879      	ldr	r1, [r7, #4]
 8100ebc:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[14].i16 * scale;
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8100ec6:	4618      	mov	r0, r3
 8100ec8:	f7ff fb58 	bl	810057c <__aeabi_i2d>
 8100ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8100ed0:	f7ff fbbe 	bl	8100650 <__aeabi_dmul>
 8100ed4:	4602      	mov	r2, r0
 8100ed6:	460b      	mov	r3, r1
 8100ed8:	6879      	ldr	r1, [r7, #4]
 8100eda:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[15].i16 * scale;
 8100ede:	687b      	ldr	r3, [r7, #4]
 8100ee0:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 8100ee4:	4618      	mov	r0, r3
 8100ee6:	f7ff fb49 	bl	810057c <__aeabi_i2d>
 8100eea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8100eee:	f7ff fbaf 	bl	8100650 <__aeabi_dmul>
 8100ef2:	4602      	mov	r2, r0
 8100ef4:	460b      	mov	r3, r1
 8100ef6:	6879      	ldr	r1, [r7, #4]
 8100ef8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	if (!fast_mode) {
 8100efc:	78fb      	ldrb	r3, [r7, #3]
 8100efe:	2b00      	cmp	r3, #0
 8100f00:	d17d      	bne.n	8100ffe <BNO055_Read_DMA+0x3c6>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f7ff fb37 	bl	810057c <__aeabi_i2d>
 8100f0e:	f04f 0200 	mov.w	r2, #0
 8100f12:	4b24      	ldr	r3, [pc, #144]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100f14:	f7ff fcc6 	bl	81008a4 <__aeabi_ddiv>
 8100f18:	4602      	mov	r2, r0
 8100f1a:	460b      	mov	r3, r1
 8100f1c:	6879      	ldr	r1, [r7, #4]
 8100f1e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 8100f28:	4618      	mov	r0, r3
 8100f2a:	f7ff fb27 	bl	810057c <__aeabi_i2d>
 8100f2e:	f04f 0200 	mov.w	r2, #0
 8100f32:	4b1c      	ldr	r3, [pc, #112]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100f34:	f7ff fcb6 	bl	81008a4 <__aeabi_ddiv>
 8100f38:	4602      	mov	r2, r0
 8100f3a:	460b      	mov	r3, r1
 8100f3c:	6879      	ldr	r1, [r7, #4]
 8100f3e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 8100f48:	4618      	mov	r0, r3
 8100f4a:	f7ff fb17 	bl	810057c <__aeabi_i2d>
 8100f4e:	f04f 0200 	mov.w	r2, #0
 8100f52:	4b14      	ldr	r3, [pc, #80]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100f54:	f7ff fca6 	bl	81008a4 <__aeabi_ddiv>
 8100f58:	4602      	mov	r2, r0
 8100f5a:	460b      	mov	r3, r1
 8100f5c:	6879      	ldr	r1, [r7, #4]
 8100f5e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 8100f62:	687b      	ldr	r3, [r7, #4]
 8100f64:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 8100f68:	4618      	mov	r0, r3
 8100f6a:	f7ff fb07 	bl	810057c <__aeabi_i2d>
 8100f6e:	f04f 0200 	mov.w	r2, #0
 8100f72:	4b0c      	ldr	r3, [pc, #48]	@ (8100fa4 <BNO055_Read_DMA+0x36c>)
 8100f74:	f7ff fc96 	bl	81008a4 <__aeabi_ddiv>
 8100f78:	4602      	mov	r2, r0
 8100f7a:	460b      	mov	r3, r1
 8100f7c:	6879      	ldr	r1, [r7, #4]
 8100f7e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 8100f88:	4618      	mov	r0, r3
 8100f8a:	f7ff faf7 	bl	810057c <__aeabi_i2d>
 8100f8e:	f04f 0200 	mov.w	r2, #0
 8100f92:	e00d      	b.n	8100fb0 <BNO055_Read_DMA+0x378>
 8100f94:	f3af 8000 	nop.w
 8100f98:	54442d18 	.word	0x54442d18
 8100f9c:	400921fb 	.word	0x400921fb
 8100fa0:	3f100000 	.word	0x3f100000
 8100fa4:	40590000 	.word	0x40590000
 8100fa8:	40300000 	.word	0x40300000
 8100fac:	40a68000 	.word	0x40a68000
 8100fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8101024 <BNO055_Read_DMA+0x3ec>)
 8100fb2:	f7ff fc77 	bl	81008a4 <__aeabi_ddiv>
 8100fb6:	4602      	mov	r2, r0
 8100fb8:	460b      	mov	r3, r1
 8100fba:	6879      	ldr	r1, [r7, #4]
 8100fbc:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 8100fc6:	4618      	mov	r0, r3
 8100fc8:	f7ff fad8 	bl	810057c <__aeabi_i2d>
 8100fcc:	f04f 0200 	mov.w	r2, #0
 8100fd0:	4b14      	ldr	r3, [pc, #80]	@ (8101024 <BNO055_Read_DMA+0x3ec>)
 8100fd2:	f7ff fc67 	bl	81008a4 <__aeabi_ddiv>
 8100fd6:	4602      	mov	r2, r0
 8100fd8:	460b      	mov	r3, r1
 8100fda:	6879      	ldr	r1, [r7, #4]
 8100fdc:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	6818      	ldr	r0, [r3, #0]
 8100fe4:	687b      	ldr	r3, [r7, #4]
 8100fe6:	791b      	ldrb	r3, [r3, #4]
 8100fe8:	4619      	mov	r1, r3
 8100fea:	687b      	ldr	r3, [r7, #4]
 8100fec:	33b8      	adds	r3, #184	@ 0xb8
 8100fee:	222c      	movs	r2, #44	@ 0x2c
 8100ff0:	9201      	str	r2, [sp, #4]
 8100ff2:	9300      	str	r3, [sp, #0]
 8100ff4:	2301      	movs	r3, #1
 8100ff6:	2208      	movs	r2, #8
 8100ff8:	f004 f8f0 	bl	81051dc <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 8100ffc:	e00d      	b.n	810101a <BNO055_Read_DMA+0x3e2>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	6818      	ldr	r0, [r3, #0]
 8101002:	687b      	ldr	r3, [r7, #4]
 8101004:	791b      	ldrb	r3, [r3, #4]
 8101006:	4619      	mov	r1, r3
 8101008:	687b      	ldr	r3, [r7, #4]
 810100a:	33b8      	adds	r3, #184	@ 0xb8
 810100c:	2220      	movs	r2, #32
 810100e:	9201      	str	r2, [sp, #4]
 8101010:	9300      	str	r3, [sp, #0]
 8101012:	2301      	movs	r3, #1
 8101014:	2208      	movs	r2, #8
 8101016:	f004 f8e1 	bl	81051dc <HAL_I2C_Mem_Read_DMA>
}
 810101a:	bf00      	nop
 810101c:	3718      	adds	r7, #24
 810101e:	46bd      	mov	sp, r7
 8101020:	bd80      	pop	{r7, pc}
 8101022:	bf00      	nop
 8101024:	40590000 	.word	0x40590000

08101028 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_t *bno, BNO055_Offsets *bno_offset)
{
 8101028:	b580      	push	{r7, lr}
 810102a:	b08e      	sub	sp, #56	@ 0x38
 810102c:	af04      	add	r7, sp, #16
 810102e:	6078      	str	r0, [r7, #4]
 8101030:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	6818      	ldr	r0, [r3, #0]
 8101036:	687b      	ldr	r3, [r7, #4]
 8101038:	791b      	ldrb	r3, [r3, #4]
 810103a:	4619      	mov	r1, r3
 810103c:	230a      	movs	r3, #10
 810103e:	9302      	str	r3, [sp, #8]
 8101040:	2301      	movs	r3, #1
 8101042:	9301      	str	r3, [sp, #4]
 8101044:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8101048:	9300      	str	r3, [sp, #0]
 810104a:	2301      	movs	r3, #1
 810104c:	223d      	movs	r2, #61	@ 0x3d
 810104e:	f003 ffab 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 8101052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101056:	2b00      	cmp	r3, #0
 8101058:	d014      	beq.n	8101084 <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 810105a:	2300      	movs	r3, #0
 810105c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	6818      	ldr	r0, [r3, #0]
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	791b      	ldrb	r3, [r3, #4]
 8101066:	4619      	mov	r1, r3
 8101068:	230a      	movs	r3, #10
 810106a:	9302      	str	r3, [sp, #8]
 810106c:	2301      	movs	r3, #1
 810106e:	9301      	str	r3, [sp, #4]
 8101070:	f107 030f 	add.w	r3, r7, #15
 8101074:	9300      	str	r3, [sp, #0]
 8101076:	2301      	movs	r3, #1
 8101078:	223d      	movs	r2, #61	@ 0x3d
 810107a:	f003 fe81 	bl	8104d80 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 810107e:	2014      	movs	r0, #20
 8101080:	f000 ff2c 	bl	8101edc <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 8101084:	683b      	ldr	r3, [r7, #0]
 8101086:	781b      	ldrb	r3, [r3, #0]
 8101088:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 810108a:	683b      	ldr	r3, [r7, #0]
 810108c:	785b      	ldrb	r3, [r3, #1]
 810108e:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 8101090:	683b      	ldr	r3, [r7, #0]
 8101092:	789b      	ldrb	r3, [r3, #2]
 8101094:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 8101096:	683b      	ldr	r3, [r7, #0]
 8101098:	78db      	ldrb	r3, [r3, #3]
 810109a:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 810109c:	683b      	ldr	r3, [r7, #0]
 810109e:	791b      	ldrb	r3, [r3, #4]
 81010a0:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 81010a2:	683b      	ldr	r3, [r7, #0]
 81010a4:	795b      	ldrb	r3, [r3, #5]
 81010a6:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 81010a8:	683b      	ldr	r3, [r7, #0]
 81010aa:	799b      	ldrb	r3, [r3, #6]
 81010ac:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 81010ae:	683b      	ldr	r3, [r7, #0]
 81010b0:	79db      	ldrb	r3, [r3, #7]
 81010b2:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 81010b4:	683b      	ldr	r3, [r7, #0]
 81010b6:	7a1b      	ldrb	r3, [r3, #8]
 81010b8:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 81010ba:	683b      	ldr	r3, [r7, #0]
 81010bc:	7a5b      	ldrb	r3, [r3, #9]
 81010be:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 81010c0:	683b      	ldr	r3, [r7, #0]
 81010c2:	7a9b      	ldrb	r3, [r3, #10]
 81010c4:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 81010c6:	683b      	ldr	r3, [r7, #0]
 81010c8:	7adb      	ldrb	r3, [r3, #11]
 81010ca:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 81010cc:	683b      	ldr	r3, [r7, #0]
 81010ce:	7b1b      	ldrb	r3, [r3, #12]
 81010d0:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 81010d2:	683b      	ldr	r3, [r7, #0]
 81010d4:	7b5b      	ldrb	r3, [r3, #13]
 81010d6:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 81010d8:	683b      	ldr	r3, [r7, #0]
 81010da:	7b9b      	ldrb	r3, [r3, #14]
 81010dc:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 81010de:	683b      	ldr	r3, [r7, #0]
 81010e0:	7bdb      	ldrb	r3, [r3, #15]
 81010e2:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 81010e4:	683b      	ldr	r3, [r7, #0]
 81010e6:	7c1b      	ldrb	r3, [r3, #16]
 81010e8:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 81010ec:	683b      	ldr	r3, [r7, #0]
 81010ee:	7c5b      	ldrb	r3, [r3, #17]
 81010f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 81010f4:	683b      	ldr	r3, [r7, #0]
 81010f6:	7c9b      	ldrb	r3, [r3, #18]
 81010f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 81010fc:	683b      	ldr	r3, [r7, #0]
 81010fe:	7cdb      	ldrb	r3, [r3, #19]
 8101100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 8101104:	683b      	ldr	r3, [r7, #0]
 8101106:	7d1b      	ldrb	r3, [r3, #20]
 8101108:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 810110c:	683b      	ldr	r3, [r7, #0]
 810110e:	7d5b      	ldrb	r3, [r3, #21]
 8101110:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	6818      	ldr	r0, [r3, #0]
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	791b      	ldrb	r3, [r3, #4]
 810111c:	4619      	mov	r1, r3
 810111e:	230a      	movs	r3, #10
 8101120:	9302      	str	r3, [sp, #8]
 8101122:	2316      	movs	r3, #22
 8101124:	9301      	str	r3, [sp, #4]
 8101126:	f107 0310 	add.w	r3, r7, #16
 810112a:	9300      	str	r3, [sp, #0]
 810112c:	2301      	movs	r3, #1
 810112e:	2255      	movs	r2, #85	@ 0x55
 8101130:	f003 fe26 	bl	8104d80 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	6818      	ldr	r0, [r3, #0]
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	791b      	ldrb	r3, [r3, #4]
 810113c:	4619      	mov	r1, r3
 810113e:	230a      	movs	r3, #10
 8101140:	9302      	str	r3, [sp, #8]
 8101142:	2301      	movs	r3, #1
 8101144:	9301      	str	r3, [sp, #4]
 8101146:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 810114a:	9300      	str	r3, [sp, #0]
 810114c:	2301      	movs	r3, #1
 810114e:	223d      	movs	r2, #61	@ 0x3d
 8101150:	f003 ff2a 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	795a      	ldrb	r2, [r3, #5]
 8101158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810115c:	429a      	cmp	r2, r3
 810115e:	d012      	beq.n	8101186 <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	6818      	ldr	r0, [r3, #0]
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	791b      	ldrb	r3, [r3, #4]
 8101168:	4619      	mov	r1, r3
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	3305      	adds	r3, #5
 810116e:	220a      	movs	r2, #10
 8101170:	9202      	str	r2, [sp, #8]
 8101172:	2201      	movs	r2, #1
 8101174:	9201      	str	r2, [sp, #4]
 8101176:	9300      	str	r3, [sp, #0]
 8101178:	2301      	movs	r3, #1
 810117a:	223d      	movs	r2, #61	@ 0x3d
 810117c:	f003 fe00 	bl	8104d80 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8101180:	2014      	movs	r0, #20
 8101182:	f000 feab 	bl	8101edc <HAL_Delay>
	}
}
 8101186:	bf00      	nop
 8101188:	3728      	adds	r7, #40	@ 0x28
 810118a:	46bd      	mov	sp, r7
 810118c:	bd80      	pop	{r7, pc}

0810118e <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_t *bno, Remap_Config config, Remap_Sign sign)
{
 810118e:	b580      	push	{r7, lr}
 8101190:	b088      	sub	sp, #32
 8101192:	af04      	add	r7, sp, #16
 8101194:	6078      	str	r0, [r7, #4]
 8101196:	460b      	mov	r3, r1
 8101198:	70fb      	strb	r3, [r7, #3]
 810119a:	4613      	mov	r3, r2
 810119c:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	6818      	ldr	r0, [r3, #0]
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	791b      	ldrb	r3, [r3, #4]
 81011a6:	4619      	mov	r1, r3
 81011a8:	230a      	movs	r3, #10
 81011aa:	9302      	str	r3, [sp, #8]
 81011ac:	2301      	movs	r3, #1
 81011ae:	9301      	str	r3, [sp, #4]
 81011b0:	f107 030f 	add.w	r3, r7, #15
 81011b4:	9300      	str	r3, [sp, #0]
 81011b6:	2301      	movs	r3, #1
 81011b8:	223d      	movs	r2, #61	@ 0x3d
 81011ba:	f003 fef5 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 81011be:	7bfb      	ldrb	r3, [r7, #15]
 81011c0:	2b00      	cmp	r3, #0
 81011c2:	d014      	beq.n	81011ee <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 81011c4:	2300      	movs	r3, #0
 81011c6:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 81011c8:	687b      	ldr	r3, [r7, #4]
 81011ca:	6818      	ldr	r0, [r3, #0]
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	791b      	ldrb	r3, [r3, #4]
 81011d0:	4619      	mov	r1, r3
 81011d2:	230a      	movs	r3, #10
 81011d4:	9302      	str	r3, [sp, #8]
 81011d6:	2301      	movs	r3, #1
 81011d8:	9301      	str	r3, [sp, #4]
 81011da:	f107 030d 	add.w	r3, r7, #13
 81011de:	9300      	str	r3, [sp, #0]
 81011e0:	2301      	movs	r3, #1
 81011e2:	223d      	movs	r2, #61	@ 0x3d
 81011e4:	f003 fdcc 	bl	8104d80 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 81011e8:	2014      	movs	r0, #20
 81011ea:	f000 fe77 	bl	8101edc <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 81011ee:	78fb      	ldrb	r3, [r7, #3]
 81011f0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	6818      	ldr	r0, [r3, #0]
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	791b      	ldrb	r3, [r3, #4]
 81011fa:	4619      	mov	r1, r3
 81011fc:	230a      	movs	r3, #10
 81011fe:	9302      	str	r3, [sp, #8]
 8101200:	2301      	movs	r3, #1
 8101202:	9301      	str	r3, [sp, #4]
 8101204:	f107 030e 	add.w	r3, r7, #14
 8101208:	9300      	str	r3, [sp, #0]
 810120a:	2301      	movs	r3, #1
 810120c:	2241      	movs	r2, #65	@ 0x41
 810120e:	f003 fdb7 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8101212:	2014      	movs	r0, #20
 8101214:	f000 fe62 	bl	8101edc <HAL_Delay>

	txbuffer = sign;
 8101218:	78bb      	ldrb	r3, [r7, #2]
 810121a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 810121c:	687b      	ldr	r3, [r7, #4]
 810121e:	6818      	ldr	r0, [r3, #0]
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	791b      	ldrb	r3, [r3, #4]
 8101224:	4619      	mov	r1, r3
 8101226:	230a      	movs	r3, #10
 8101228:	9302      	str	r3, [sp, #8]
 810122a:	2301      	movs	r3, #1
 810122c:	9301      	str	r3, [sp, #4]
 810122e:	f107 030e 	add.w	r3, r7, #14
 8101232:	9300      	str	r3, [sp, #0]
 8101234:	2301      	movs	r3, #1
 8101236:	2242      	movs	r2, #66	@ 0x42
 8101238:	f003 fda2 	bl	8104d80 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 810123c:	2014      	movs	r0, #20
 810123e:	f000 fe4d 	bl	8101edc <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	6818      	ldr	r0, [r3, #0]
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	791b      	ldrb	r3, [r3, #4]
 810124a:	4619      	mov	r1, r3
 810124c:	230a      	movs	r3, #10
 810124e:	9302      	str	r3, [sp, #8]
 8101250:	2301      	movs	r3, #1
 8101252:	9301      	str	r3, [sp, #4]
 8101254:	f107 030f 	add.w	r3, r7, #15
 8101258:	9300      	str	r3, [sp, #0]
 810125a:	2301      	movs	r3, #1
 810125c:	223d      	movs	r2, #61	@ 0x3d
 810125e:	f003 fea3 	bl	8104fa8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	795a      	ldrb	r2, [r3, #5]
 8101266:	7bfb      	ldrb	r3, [r7, #15]
 8101268:	429a      	cmp	r2, r3
 810126a:	d012      	beq.n	8101292 <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	6818      	ldr	r0, [r3, #0]
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	791b      	ldrb	r3, [r3, #4]
 8101274:	4619      	mov	r1, r3
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	3305      	adds	r3, #5
 810127a:	220a      	movs	r2, #10
 810127c:	9202      	str	r2, [sp, #8]
 810127e:	2201      	movs	r2, #1
 8101280:	9201      	str	r2, [sp, #4]
 8101282:	9300      	str	r3, [sp, #0]
 8101284:	2301      	movs	r3, #1
 8101286:	223d      	movs	r2, #61	@ 0x3d
 8101288:	f003 fd7a 	bl	8104d80 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 810128c:	2014      	movs	r0, #20
 810128e:	f000 fe25 	bl	8101edc <HAL_Delay>
	}
}
 8101292:	bf00      	nop
 8101294:	3710      	adds	r7, #16
 8101296:	46bd      	mov	sp, r7
 8101298:	bd80      	pop	{r7, pc}
	...

0810129c <BNO055_SAVE_HSEM>:

void BNO055_SAVE_HSEM(BNO055_t *bno){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 81012a4:	2001      	movs	r0, #1
 81012a6:	f003 fc7b 	bl	8104ba0 <HAL_HSEM_FastTake>
 81012aa:	4603      	mov	r3, r0
 81012ac:	2b00      	cmp	r3, #0
 81012ae:	d178      	bne.n	81013a2 <BNO055_SAVE_HSEM+0x106>
		SRAM4_BNO055->Data[1] = bno->quat.x;
 81012b0:	493e      	ldr	r1, [pc, #248]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012b2:	687b      	ldr	r3, [r7, #4]
 81012b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 81012b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		SRAM4_BNO055->Data[2] = bno->quat.y;
 81012bc:	493b      	ldr	r1, [pc, #236]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012be:	687b      	ldr	r3, [r7, #4]
 81012c0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 81012c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		SRAM4_BNO055->Data[3] = bno->quat.z;
 81012c8:	4938      	ldr	r1, [pc, #224]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 81012d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		SRAM4_BNO055->Data[4] = bno->quat.w;
 81012d4:	4935      	ldr	r1, [pc, #212]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 81012dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		SRAM4_BNO055->Data[5] = bno->lin_acc.x;
 81012e0:	4932      	ldr	r1, [pc, #200]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 81012e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		SRAM4_BNO055->Data[6] = bno->lin_acc.y;
 81012ec:	492f      	ldr	r1, [pc, #188]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012ee:	687b      	ldr	r3, [r7, #4]
 81012f0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 81012f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		SRAM4_BNO055->Data[7] = bno->lin_acc.z;
 81012f8:	492c      	ldr	r1, [pc, #176]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8101300:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		SRAM4_BNO055->Data[8] = bno->gyro.x;
 8101304:	4929      	ldr	r1, [pc, #164]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101306:	687b      	ldr	r3, [r7, #4]
 8101308:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 810130c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		SRAM4_BNO055->Data[9] = bno->gyro.y;
 8101310:	4926      	ldr	r1, [pc, #152]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8101318:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		SRAM4_BNO055->Data[10] = bno->gyro.z;
 810131c:	4923      	ldr	r1, [pc, #140]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8101324:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

		SRAM4_BNO055->Data[11] = bno->mag.x;
 8101328:	4920      	ldr	r1, [pc, #128]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101330:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->Data[12] = bno->mag.y;
 8101334:	491d      	ldr	r1, [pc, #116]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 810133c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		SRAM4_BNO055->Data[13] = bno->mag.z;
 8101340:	491a      	ldr	r1, [pc, #104]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8101348:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

		SRAM4_BNO055->Data[14] = bno->accel.x;
 810134c:	4917      	ldr	r1, [pc, #92]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8101354:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		SRAM4_BNO055->Data[15] = bno->accel.y;
 8101358:	4914      	ldr	r1, [pc, #80]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8101360:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		SRAM4_BNO055->Data[16] = bno->accel.z;
 8101364:	4911      	ldr	r1, [pc, #68]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 810136c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

		SRAM4_BNO055->Data[17] = bno->euler.roll;
 8101370:	490e      	ldr	r1, [pc, #56]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8101378:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		SRAM4_BNO055->Data[18] = bno->euler.pitch;
 810137c:	490b      	ldr	r1, [pc, #44]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8101384:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		SRAM4_BNO055->Data[19] = bno->euler.yaw;
 8101388:	4908      	ldr	r1, [pc, #32]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8101390:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0

		SRAM4_BNO055->State1 = 0;
 8101394:	4b05      	ldr	r3, [pc, #20]	@ (81013ac <BNO055_SAVE_HSEM+0x110>)
 8101396:	2200      	movs	r2, #0
 8101398:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_Release(HSEM_ID_1,0);
 810139a:	2100      	movs	r1, #0
 810139c:	2001      	movs	r0, #1
 810139e:	f003 fc19 	bl	8104bd4 <HAL_HSEM_Release>
	}
}
 81013a2:	bf00      	nop
 81013a4:	3708      	adds	r7, #8
 81013a6:	46bd      	mov	sp, r7
 81013a8:	bd80      	pop	{r7, pc}
 81013aa:	bf00      	nop
 81013ac:	38002000 	.word	0x38002000

081013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81013b0:	b480      	push	{r7}
 81013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81013b4:	4b09      	ldr	r3, [pc, #36]	@ (81013dc <SystemInit+0x2c>)
 81013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81013ba:	4a08      	ldr	r2, [pc, #32]	@ (81013dc <SystemInit+0x2c>)
 81013bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81013c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81013c4:	4b05      	ldr	r3, [pc, #20]	@ (81013dc <SystemInit+0x2c>)
 81013c6:	691b      	ldr	r3, [r3, #16]
 81013c8:	4a04      	ldr	r2, [pc, #16]	@ (81013dc <SystemInit+0x2c>)
 81013ca:	f043 0310 	orr.w	r3, r3, #16
 81013ce:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81013d0:	bf00      	nop
 81013d2:	46bd      	mov	sp, r7
 81013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d8:	4770      	bx	lr
 81013da:	bf00      	nop
 81013dc:	e000ed00 	.word	0xe000ed00

081013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81013e0:	b580      	push	{r7, lr}
 81013e2:	b082      	sub	sp, #8
 81013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81013e6:	4b11      	ldr	r3, [pc, #68]	@ (810142c <MX_DMA_Init+0x4c>)
 81013e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81013ec:	4a0f      	ldr	r2, [pc, #60]	@ (810142c <MX_DMA_Init+0x4c>)
 81013ee:	f043 0301 	orr.w	r3, r3, #1
 81013f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81013f6:	4b0d      	ldr	r3, [pc, #52]	@ (810142c <MX_DMA_Init+0x4c>)
 81013f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81013fc:	f003 0301 	and.w	r3, r3, #1
 8101400:	607b      	str	r3, [r7, #4]
 8101402:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101404:	2200      	movs	r2, #0
 8101406:	2100      	movs	r1, #0
 8101408:	200c      	movs	r0, #12
 810140a:	f000 fe7c 	bl	8102106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810140e:	200c      	movs	r0, #12
 8101410:	f000 fe93 	bl	810213a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101414:	2200      	movs	r2, #0
 8101416:	2100      	movs	r1, #0
 8101418:	200d      	movs	r0, #13
 810141a:	f000 fe74 	bl	8102106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 810141e:	200d      	movs	r0, #13
 8101420:	f000 fe8b 	bl	810213a <HAL_NVIC_EnableIRQ>

}
 8101424:	bf00      	nop
 8101426:	3708      	adds	r7, #8
 8101428:	46bd      	mov	sp, r7
 810142a:	bd80      	pop	{r7, pc}
 810142c:	58024400 	.word	0x58024400

08101430 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b08a      	sub	sp, #40	@ 0x28
 8101434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101436:	f107 0314 	add.w	r3, r7, #20
 810143a:	2200      	movs	r2, #0
 810143c:	601a      	str	r2, [r3, #0]
 810143e:	605a      	str	r2, [r3, #4]
 8101440:	609a      	str	r2, [r3, #8]
 8101442:	60da      	str	r2, [r3, #12]
 8101444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101446:	4b46      	ldr	r3, [pc, #280]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810144c:	4a44      	ldr	r2, [pc, #272]	@ (8101560 <MX_GPIO_Init+0x130>)
 810144e:	f043 0304 	orr.w	r3, r3, #4
 8101452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101456:	4b42      	ldr	r3, [pc, #264]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810145c:	f003 0304 	and.w	r3, r3, #4
 8101460:	613b      	str	r3, [r7, #16]
 8101462:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101464:	4b3e      	ldr	r3, [pc, #248]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810146a:	4a3d      	ldr	r2, [pc, #244]	@ (8101560 <MX_GPIO_Init+0x130>)
 810146c:	f043 0301 	orr.w	r3, r3, #1
 8101470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101474:	4b3a      	ldr	r3, [pc, #232]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810147a:	f003 0301 	and.w	r3, r3, #1
 810147e:	60fb      	str	r3, [r7, #12]
 8101480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101482:	4b37      	ldr	r3, [pc, #220]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101488:	4a35      	ldr	r2, [pc, #212]	@ (8101560 <MX_GPIO_Init+0x130>)
 810148a:	f043 0302 	orr.w	r3, r3, #2
 810148e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101492:	4b33      	ldr	r3, [pc, #204]	@ (8101560 <MX_GPIO_Init+0x130>)
 8101494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101498:	f003 0302 	and.w	r3, r3, #2
 810149c:	60bb      	str	r3, [r7, #8]
 810149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81014a0:	4b2f      	ldr	r3, [pc, #188]	@ (8101560 <MX_GPIO_Init+0x130>)
 81014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a6:	4a2e      	ldr	r2, [pc, #184]	@ (8101560 <MX_GPIO_Init+0x130>)
 81014a8:	f043 0308 	orr.w	r3, r3, #8
 81014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8101560 <MX_GPIO_Init+0x130>)
 81014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014b6:	f003 0308 	and.w	r3, r3, #8
 81014ba:	607b      	str	r3, [r7, #4]
 81014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CS_Pin, GPIO_PIN_RESET);
 81014be:	2200      	movs	r2, #0
 81014c0:	2121      	movs	r1, #33	@ 0x21
 81014c2:	4828      	ldr	r0, [pc, #160]	@ (8101564 <MX_GPIO_Init+0x134>)
 81014c4:	f003 fb52 	bl	8104b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WAK_GPIO_Port, WAK_Pin, GPIO_PIN_RESET);
 81014c8:	2200      	movs	r2, #0
 81014ca:	2140      	movs	r1, #64	@ 0x40
 81014cc:	4826      	ldr	r0, [pc, #152]	@ (8101568 <MX_GPIO_Init+0x138>)
 81014ce:	f003 fb4d 	bl	8104b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 81014d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81014d8:	2300      	movs	r3, #0
 81014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014dc:	2300      	movs	r3, #0
 81014de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81014e0:	f107 0314 	add.w	r3, r7, #20
 81014e4:	4619      	mov	r1, r3
 81014e6:	4821      	ldr	r0, [pc, #132]	@ (810156c <MX_GPIO_Init+0x13c>)
 81014e8:	f003 f990 	bl	810480c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81014ec:	2301      	movs	r3, #1
 81014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81014f0:	2301      	movs	r3, #1
 81014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014f4:	2300      	movs	r3, #0
 81014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014f8:	2300      	movs	r3, #0
 81014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81014fc:	f107 0314 	add.w	r3, r7, #20
 8101500:	4619      	mov	r1, r3
 8101502:	4818      	ldr	r0, [pc, #96]	@ (8101564 <MX_GPIO_Init+0x134>)
 8101504:	f003 f982 	bl	810480c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8101508:	2320      	movs	r3, #32
 810150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810150c:	2300      	movs	r3, #0
 810150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101510:	2300      	movs	r3, #0
 8101512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8101514:	f107 0314 	add.w	r3, r7, #20
 8101518:	4619      	mov	r1, r3
 810151a:	4813      	ldr	r0, [pc, #76]	@ (8101568 <MX_GPIO_Init+0x138>)
 810151c:	f003 f976 	bl	810480c <HAL_GPIO_Init>

  /*Configure GPIO pin : WAK_Pin */
  GPIO_InitStruct.Pin = WAK_Pin;
 8101520:	2340      	movs	r3, #64	@ 0x40
 8101522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101524:	2301      	movs	r3, #1
 8101526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101528:	2300      	movs	r3, #0
 810152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810152c:	2303      	movs	r3, #3
 810152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WAK_GPIO_Port, &GPIO_InitStruct);
 8101530:	f107 0314 	add.w	r3, r7, #20
 8101534:	4619      	mov	r1, r3
 8101536:	480c      	ldr	r0, [pc, #48]	@ (8101568 <MX_GPIO_Init+0x138>)
 8101538:	f003 f968 	bl	810480c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 810153c:	2320      	movs	r3, #32
 810153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101540:	2301      	movs	r3, #1
 8101542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101544:	2300      	movs	r3, #0
 8101546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101548:	2303      	movs	r3, #3
 810154a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 810154c:	f107 0314 	add.w	r3, r7, #20
 8101550:	4619      	mov	r1, r3
 8101552:	4804      	ldr	r0, [pc, #16]	@ (8101564 <MX_GPIO_Init+0x134>)
 8101554:	f003 f95a 	bl	810480c <HAL_GPIO_Init>

}
 8101558:	bf00      	nop
 810155a:	3728      	adds	r7, #40	@ 0x28
 810155c:	46bd      	mov	sp, r7
 810155e:	bd80      	pop	{r7, pc}
 8101560:	58024400 	.word	0x58024400
 8101564:	58020400 	.word	0x58020400
 8101568:	58020c00 	.word	0x58020c00
 810156c:	58020800 	.word	0x58020800

08101570 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101574:	4b1b      	ldr	r3, [pc, #108]	@ (81015e4 <MX_I2C1_Init+0x74>)
 8101576:	4a1c      	ldr	r2, [pc, #112]	@ (81015e8 <MX_I2C1_Init+0x78>)
 8101578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040154B;
 810157a:	4b1a      	ldr	r3, [pc, #104]	@ (81015e4 <MX_I2C1_Init+0x74>)
 810157c:	4a1b      	ldr	r2, [pc, #108]	@ (81015ec <MX_I2C1_Init+0x7c>)
 810157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101580:	4b18      	ldr	r3, [pc, #96]	@ (81015e4 <MX_I2C1_Init+0x74>)
 8101582:	2200      	movs	r2, #0
 8101584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101586:	4b17      	ldr	r3, [pc, #92]	@ (81015e4 <MX_I2C1_Init+0x74>)
 8101588:	2201      	movs	r2, #1
 810158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810158c:	4b15      	ldr	r3, [pc, #84]	@ (81015e4 <MX_I2C1_Init+0x74>)
 810158e:	2200      	movs	r2, #0
 8101590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101592:	4b14      	ldr	r3, [pc, #80]	@ (81015e4 <MX_I2C1_Init+0x74>)
 8101594:	2200      	movs	r2, #0
 8101596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101598:	4b12      	ldr	r3, [pc, #72]	@ (81015e4 <MX_I2C1_Init+0x74>)
 810159a:	2200      	movs	r2, #0
 810159c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810159e:	4b11      	ldr	r3, [pc, #68]	@ (81015e4 <MX_I2C1_Init+0x74>)
 81015a0:	2200      	movs	r2, #0
 81015a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81015a4:	4b0f      	ldr	r3, [pc, #60]	@ (81015e4 <MX_I2C1_Init+0x74>)
 81015a6:	2200      	movs	r2, #0
 81015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81015aa:	480e      	ldr	r0, [pc, #56]	@ (81015e4 <MX_I2C1_Init+0x74>)
 81015ac:	f003 fb4c 	bl	8104c48 <HAL_I2C_Init>
 81015b0:	4603      	mov	r3, r0
 81015b2:	2b00      	cmp	r3, #0
 81015b4:	d001      	beq.n	81015ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81015b6:	f000 f9d7 	bl	8101968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81015ba:	2100      	movs	r1, #0
 81015bc:	4809      	ldr	r0, [pc, #36]	@ (81015e4 <MX_I2C1_Init+0x74>)
 81015be:	f005 ff97 	bl	81074f0 <HAL_I2CEx_ConfigAnalogFilter>
 81015c2:	4603      	mov	r3, r0
 81015c4:	2b00      	cmp	r3, #0
 81015c6:	d001      	beq.n	81015cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81015c8:	f000 f9ce 	bl	8101968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81015cc:	2100      	movs	r1, #0
 81015ce:	4805      	ldr	r0, [pc, #20]	@ (81015e4 <MX_I2C1_Init+0x74>)
 81015d0:	f005 ffd9 	bl	8107586 <HAL_I2CEx_ConfigDigitalFilter>
 81015d4:	4603      	mov	r3, r0
 81015d6:	2b00      	cmp	r3, #0
 81015d8:	d001      	beq.n	81015de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81015da:	f000 f9c5 	bl	8101968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81015de:	bf00      	nop
 81015e0:	bd80      	pop	{r7, pc}
 81015e2:	bf00      	nop
 81015e4:	10000044 	.word	0x10000044
 81015e8:	40005400 	.word	0x40005400
 81015ec:	0040154b 	.word	0x0040154b

081015f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81015f0:	b580      	push	{r7, lr}
 81015f2:	b0ba      	sub	sp, #232	@ 0xe8
 81015f4:	af00      	add	r7, sp, #0
 81015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81015fc:	2200      	movs	r2, #0
 81015fe:	601a      	str	r2, [r3, #0]
 8101600:	605a      	str	r2, [r3, #4]
 8101602:	609a      	str	r2, [r3, #8]
 8101604:	60da      	str	r2, [r3, #12]
 8101606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101608:	f107 0310 	add.w	r3, r7, #16
 810160c:	22c0      	movs	r2, #192	@ 0xc0
 810160e:	2100      	movs	r1, #0
 8101610:	4618      	mov	r0, r3
 8101612:	f008 fb93 	bl	8109d3c <memset>
  if(i2cHandle->Instance==I2C1)
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	681b      	ldr	r3, [r3, #0]
 810161a:	4a5d      	ldr	r2, [pc, #372]	@ (8101790 <HAL_I2C_MspInit+0x1a0>)
 810161c:	4293      	cmp	r3, r2
 810161e:	f040 80b2 	bne.w	8101786 <HAL_I2C_MspInit+0x196>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101622:	f04f 0208 	mov.w	r2, #8
 8101626:	f04f 0300 	mov.w	r3, #0
 810162a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810162e:	2300      	movs	r3, #0
 8101630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101634:	f107 0310 	add.w	r3, r7, #16
 8101638:	4618      	mov	r0, r3
 810163a:	f006 f9f3 	bl	8107a24 <HAL_RCCEx_PeriphCLKConfig>
 810163e:	4603      	mov	r3, r0
 8101640:	2b00      	cmp	r3, #0
 8101642:	d001      	beq.n	8101648 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8101644:	f000 f990 	bl	8101968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101648:	4b52      	ldr	r3, [pc, #328]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 810164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810164e:	4a51      	ldr	r2, [pc, #324]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 8101650:	f043 0302 	orr.w	r3, r3, #2
 8101654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101658:	4b4e      	ldr	r3, [pc, #312]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 810165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810165e:	f003 0302 	and.w	r3, r3, #2
 8101662:	60fb      	str	r3, [r7, #12]
 8101664:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101666:	23c0      	movs	r3, #192	@ 0xc0
 8101668:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810166c:	2312      	movs	r3, #18
 810166e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101672:	2300      	movs	r3, #0
 8101674:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101678:	2300      	movs	r3, #0
 810167a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810167e:	2304      	movs	r3, #4
 8101680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101684:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101688:	4619      	mov	r1, r3
 810168a:	4843      	ldr	r0, [pc, #268]	@ (8101798 <HAL_I2C_MspInit+0x1a8>)
 810168c:	f003 f8be 	bl	810480c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101690:	4b40      	ldr	r3, [pc, #256]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 8101692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101696:	4a3f      	ldr	r2, [pc, #252]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 8101698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810169c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016a0:	4b3c      	ldr	r3, [pc, #240]	@ (8101794 <HAL_I2C_MspInit+0x1a4>)
 81016a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81016aa:	60bb      	str	r3, [r7, #8]
 81016ac:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 81016ae:	4b3b      	ldr	r3, [pc, #236]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016b0:	4a3b      	ldr	r2, [pc, #236]	@ (81017a0 <HAL_I2C_MspInit+0x1b0>)
 81016b2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 81016b4:	4b39      	ldr	r3, [pc, #228]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016b6:	2222      	movs	r2, #34	@ 0x22
 81016b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81016ba:	4b38      	ldr	r3, [pc, #224]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016bc:	2240      	movs	r2, #64	@ 0x40
 81016be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81016c0:	4b36      	ldr	r3, [pc, #216]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016c2:	2200      	movs	r2, #0
 81016c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81016c6:	4b35      	ldr	r3, [pc, #212]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81016cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81016ce:	4b33      	ldr	r3, [pc, #204]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016d0:	2200      	movs	r2, #0
 81016d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81016d4:	4b31      	ldr	r3, [pc, #196]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016d6:	2200      	movs	r2, #0
 81016d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 81016da:	4b30      	ldr	r3, [pc, #192]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016dc:	2200      	movs	r2, #0
 81016de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81016e0:	4b2e      	ldr	r3, [pc, #184]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 81016e6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81016e8:	4b2c      	ldr	r3, [pc, #176]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016ea:	2200      	movs	r2, #0
 81016ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 81016ee:	482b      	ldr	r0, [pc, #172]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 81016f0:	f000 fd56 	bl	81021a0 <HAL_DMA_Init>
 81016f4:	4603      	mov	r3, r0
 81016f6:	2b00      	cmp	r3, #0
 81016f8:	d001      	beq.n	81016fe <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 81016fa:	f000 f935 	bl	8101968 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	4a26      	ldr	r2, [pc, #152]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 8101702:	639a      	str	r2, [r3, #56]	@ 0x38
 8101704:	4a25      	ldr	r2, [pc, #148]	@ (810179c <HAL_I2C_MspInit+0x1ac>)
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 810170a:	4b26      	ldr	r3, [pc, #152]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810170c:	4a26      	ldr	r2, [pc, #152]	@ (81017a8 <HAL_I2C_MspInit+0x1b8>)
 810170e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101710:	4b24      	ldr	r3, [pc, #144]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101712:	2221      	movs	r2, #33	@ 0x21
 8101714:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101716:	4b23      	ldr	r3, [pc, #140]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101718:	2200      	movs	r2, #0
 810171a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810171c:	4b21      	ldr	r3, [pc, #132]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810171e:	2200      	movs	r2, #0
 8101720:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101722:	4b20      	ldr	r3, [pc, #128]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101728:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810172a:	4b1e      	ldr	r3, [pc, #120]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810172c:	2200      	movs	r2, #0
 810172e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101730:	4b1c      	ldr	r3, [pc, #112]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101732:	2200      	movs	r2, #0
 8101734:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101736:	4b1b      	ldr	r3, [pc, #108]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101738:	2200      	movs	r2, #0
 810173a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 810173c:	4b19      	ldr	r3, [pc, #100]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810173e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8101742:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101744:	4b17      	ldr	r3, [pc, #92]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101746:	2200      	movs	r2, #0
 8101748:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 810174a:	4816      	ldr	r0, [pc, #88]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810174c:	f000 fd28 	bl	81021a0 <HAL_DMA_Init>
 8101750:	4603      	mov	r3, r0
 8101752:	2b00      	cmp	r3, #0
 8101754:	d001      	beq.n	810175a <HAL_I2C_MspInit+0x16a>
    {
      Error_Handler();
 8101756:	f000 f907 	bl	8101968 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	4a11      	ldr	r2, [pc, #68]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 810175e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8101760:	4a10      	ldr	r2, [pc, #64]	@ (81017a4 <HAL_I2C_MspInit+0x1b4>)
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101766:	2200      	movs	r2, #0
 8101768:	2100      	movs	r1, #0
 810176a:	201f      	movs	r0, #31
 810176c:	f000 fccb 	bl	8102106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101770:	201f      	movs	r0, #31
 8101772:	f000 fce2 	bl	810213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101776:	2200      	movs	r2, #0
 8101778:	2100      	movs	r1, #0
 810177a:	2020      	movs	r0, #32
 810177c:	f000 fcc3 	bl	8102106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101780:	2020      	movs	r0, #32
 8101782:	f000 fcda 	bl	810213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101786:	bf00      	nop
 8101788:	37e8      	adds	r7, #232	@ 0xe8
 810178a:	46bd      	mov	sp, r7
 810178c:	bd80      	pop	{r7, pc}
 810178e:	bf00      	nop
 8101790:	40005400 	.word	0x40005400
 8101794:	58024400 	.word	0x58024400
 8101798:	58020400 	.word	0x58020400
 810179c:	10000098 	.word	0x10000098
 81017a0:	40020028 	.word	0x40020028
 81017a4:	10000110 	.word	0x10000110
 81017a8:	40020040 	.word	0x40020040

081017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b082      	sub	sp, #8
 81017b0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81017b2:	4b39      	ldr	r3, [pc, #228]	@ (8101898 <main+0xec>)
 81017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017b8:	4a37      	ldr	r2, [pc, #220]	@ (8101898 <main+0xec>)
 81017ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81017be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017c2:	4b35      	ldr	r3, [pc, #212]	@ (8101898 <main+0xec>)
 81017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81017cc:	607b      	str	r3, [r7, #4]
 81017ce:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81017d0:	2001      	movs	r0, #1
 81017d2:	f003 fa13 	bl	8104bfc <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 81017d6:	2002      	movs	r0, #2
 81017d8:	f003 fa10 	bl	8104bfc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81017dc:	f005 ff9a 	bl	8107714 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81017e0:	2201      	movs	r2, #1
 81017e2:	2102      	movs	r1, #2
 81017e4:	2000      	movs	r0, #0
 81017e6:	f005 ff1b 	bl	8107620 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81017ea:	4b2c      	ldr	r3, [pc, #176]	@ (810189c <main+0xf0>)
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	091b      	lsrs	r3, r3, #4
 81017f0:	f003 030f 	and.w	r3, r3, #15
 81017f4:	2b07      	cmp	r3, #7
 81017f6:	d108      	bne.n	810180a <main+0x5e>
 81017f8:	4b29      	ldr	r3, [pc, #164]	@ (81018a0 <main+0xf4>)
 81017fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81017fe:	4a28      	ldr	r2, [pc, #160]	@ (81018a0 <main+0xf4>)
 8101800:	f043 0301 	orr.w	r3, r3, #1
 8101804:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101808:	e007      	b.n	810181a <main+0x6e>
 810180a:	4b25      	ldr	r3, [pc, #148]	@ (81018a0 <main+0xf4>)
 810180c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101810:	4a23      	ldr	r2, [pc, #140]	@ (81018a0 <main+0xf4>)
 8101812:	f043 0301 	orr.w	r3, r3, #1
 8101816:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 810181a:	4b20      	ldr	r3, [pc, #128]	@ (810189c <main+0xf0>)
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	091b      	lsrs	r3, r3, #4
 8101820:	f003 030f 	and.w	r3, r3, #15
 8101824:	2b07      	cmp	r3, #7
 8101826:	d108      	bne.n	810183a <main+0x8e>
 8101828:	4b1d      	ldr	r3, [pc, #116]	@ (81018a0 <main+0xf4>)
 810182a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810182e:	4a1c      	ldr	r2, [pc, #112]	@ (81018a0 <main+0xf4>)
 8101830:	f043 0302 	orr.w	r3, r3, #2
 8101834:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101838:	e007      	b.n	810184a <main+0x9e>
 810183a:	4b19      	ldr	r3, [pc, #100]	@ (81018a0 <main+0xf4>)
 810183c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101840:	4a17      	ldr	r2, [pc, #92]	@ (81018a0 <main+0xf4>)
 8101842:	f043 0302 	orr.w	r3, r3, #2
 8101846:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810184a:	f000 fa93 	bl	8101d74 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810184e:	f7ff fdef 	bl	8101430 <MX_GPIO_Init>
  MX_DMA_Init();
 8101852:	f7ff fdc5 	bl	81013e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8101856:	f7ff fe8b 	bl	8101570 <MX_I2C1_Init>
  MX_TIM2_Init();
 810185a:	f000 f9ed 	bl	8101c38 <MX_TIM2_Init>
  MX_SPI1_Init();
 810185e:	f000 f889 	bl	8101974 <MX_SPI1_Init>
//	BNO086_enableLinearAccelerometer(2500); //enable Linear Accelerometer at 400Hz (2500 microsecs)
//	BNO086_enableGyro(2500); //enable Gyrometer  at 400Hz (2500 microsecs)
//	BNO086_enableMagnetometer(10000); //enable Magnetometer at 100Hz (10000 microsecs)

//	// ================================================== BNO055 ==================================================//
  HALCHECK(BNO055_Init(&BNO055, &hi2c1, 0, NDOF))
 8101862:	e002      	b.n	810186a <main+0xbe>
 8101864:	2064      	movs	r0, #100	@ 0x64
 8101866:	f000 fb39 	bl	8101edc <HAL_Delay>
 810186a:	230c      	movs	r3, #12
 810186c:	2200      	movs	r2, #0
 810186e:	490d      	ldr	r1, [pc, #52]	@ (81018a4 <main+0xf8>)
 8101870:	480d      	ldr	r0, [pc, #52]	@ (81018a8 <main+0xfc>)
 8101872:	f7ff f8ff 	bl	8100a74 <BNO055_Init>
 8101876:	4603      	mov	r3, r0
 8101878:	2b00      	cmp	r3, #0
 810187a:	d1f3      	bne.n	8101864 <main+0xb8>

  #ifdef BNO_CALIB_ON // For Calibration, Enable at Common/BNO055_I2C/BNO055_config.h
  BNO055_Calibrated(&BNO055, &BNO055_stat, &BNO055_off);
  #endif
  BNO055_SetOffsets(&BNO055, &BNO055_off);
 810187c:	490b      	ldr	r1, [pc, #44]	@ (81018ac <main+0x100>)
 810187e:	480a      	ldr	r0, [pc, #40]	@ (81018a8 <main+0xfc>)
 8101880:	f7ff fbd2 	bl	8101028 <BNO055_SetOffsets>
  BNO055_SetAxis(&BNO055, P0_Config, P0_Sign);
 8101884:	2204      	movs	r2, #4
 8101886:	2121      	movs	r1, #33	@ 0x21
 8101888:	4807      	ldr	r0, [pc, #28]	@ (81018a8 <main+0xfc>)
 810188a:	f7ff fc80 	bl	810118e <BNO055_SetAxis>

  // ================================================== Timer Interrupt ==================================================//
  HAL_TIM_Base_Start_IT(&htim2);
 810188e:	4808      	ldr	r0, [pc, #32]	@ (81018b0 <main+0x104>)
 8101890:	f007 fdcc 	bl	810942c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101894:	bf00      	nop
 8101896:	e7fd      	b.n	8101894 <main+0xe8>
 8101898:	58024400 	.word	0x58024400
 810189c:	e000ed00 	.word	0xe000ed00
 81018a0:	58026400 	.word	0x58026400
 81018a4:	10000044 	.word	0x10000044
 81018a8:	10000188 	.word	0x10000188
 81018ac:	10000000 	.word	0x10000000
 81018b0:	100002fc 	.word	0x100002fc

081018b4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b082      	sub	sp, #8
 81018b8:	af00      	add	r7, sp, #0
 81018ba:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	4a1a      	ldr	r2, [pc, #104]	@ (8101928 <HAL_TIM_PeriodElapsedCallback+0x74>)
 81018c0:	4293      	cmp	r3, r2
 81018c2:	d12c      	bne.n	810191e <HAL_TIM_PeriodElapsedCallback+0x6a>
//		if(BNO086_dataAvailable() == 1){
//			BNO086_getData(&BNO086, UNIT_RAD);
//			BNO086_SAVE_HSEM(&BNO086, spi_status);
//		}

		HAL_HSEM_DeactivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 81018c4:	2002      	movs	r0, #2
 81018c6:	f003 f9ab 	bl	8104c20 <HAL_HSEM_DeactivateNotification>
		if (BNO055.flag == HAL_OK)
 81018ca:	4b18      	ldr	r3, [pc, #96]	@ (810192c <HAL_TIM_PeriodElapsedCallback+0x78>)
 81018cc:	799b      	ldrb	r3, [r3, #6]
 81018ce:	2b00      	cmp	r3, #0
 81018d0:	d110      	bne.n	81018f4 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				timeout_ok++;
 81018d2:	4b17      	ldr	r3, [pc, #92]	@ (8101930 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 81018d4:	881b      	ldrh	r3, [r3, #0]
 81018d6:	3301      	adds	r3, #1
 81018d8:	b29a      	uxth	r2, r3
 81018da:	4b15      	ldr	r3, [pc, #84]	@ (8101930 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 81018dc:	801a      	strh	r2, [r3, #0]
				timeout_busy = 0;
 81018de:	4b15      	ldr	r3, [pc, #84]	@ (8101934 <HAL_TIM_PeriodElapsedCallback+0x80>)
 81018e0:	2200      	movs	r2, #0
 81018e2:	801a      	strh	r2, [r3, #0]
				BNO055_Read_DMA(&BNO055, 0);
 81018e4:	2100      	movs	r1, #0
 81018e6:	4811      	ldr	r0, [pc, #68]	@ (810192c <HAL_TIM_PeriodElapsedCallback+0x78>)
 81018e8:	f7ff f9a6 	bl	8100c38 <BNO055_Read_DMA>
				BNO055.flag = HAL_BUSY;
 81018ec:	4b0f      	ldr	r3, [pc, #60]	@ (810192c <HAL_TIM_PeriodElapsedCallback+0x78>)
 81018ee:	2202      	movs	r2, #2
 81018f0:	719a      	strb	r2, [r3, #6]
 81018f2:	e008      	b.n	8101906 <HAL_TIM_PeriodElapsedCallback+0x52>
			}
		else
		{
			timeout_ok = 0;
 81018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8101930 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 81018f6:	2200      	movs	r2, #0
 81018f8:	801a      	strh	r2, [r3, #0]
			timeout_busy++;
 81018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8101934 <HAL_TIM_PeriodElapsedCallback+0x80>)
 81018fc:	881b      	ldrh	r3, [r3, #0]
 81018fe:	3301      	adds	r3, #1
 8101900:	b29a      	uxth	r2, r3
 8101902:	4b0c      	ldr	r3, [pc, #48]	@ (8101934 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8101904:	801a      	strh	r2, [r3, #0]
		}

		if(timeout_ok >= 500 || timeout_busy >= 500){
 8101906:	4b0a      	ldr	r3, [pc, #40]	@ (8101930 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8101908:	881b      	ldrh	r3, [r3, #0]
 810190a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 810190e:	d204      	bcs.n	810191a <HAL_TIM_PeriodElapsedCallback+0x66>
 8101910:	4b08      	ldr	r3, [pc, #32]	@ (8101934 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8101912:	881b      	ldrh	r3, [r3, #0]
 8101914:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8101918:	d301      	bcc.n	810191e <HAL_TIM_PeriodElapsedCallback+0x6a>
			HAL_NVIC_SystemReset();
 810191a:	f000 fc1c 	bl	8102156 <HAL_NVIC_SystemReset>
		}
	}

}
 810191e:	bf00      	nop
 8101920:	3708      	adds	r7, #8
 8101922:	46bd      	mov	sp, r7
 8101924:	bd80      	pop	{r7, pc}
 8101926:	bf00      	nop
 8101928:	100002fc 	.word	0x100002fc
 810192c:	10000188 	.word	0x10000188
 8101930:	10000272 	.word	0x10000272
 8101934:	10000270 	.word	0x10000270

08101938 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8101938:	b580      	push	{r7, lr}
 810193a:	b082      	sub	sp, #8
 810193c:	af00      	add	r7, sp, #0
 810193e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == BNO055.hi2cx->Instance) {
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	681a      	ldr	r2, [r3, #0]
 8101944:	4b07      	ldr	r3, [pc, #28]	@ (8101964 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8101946:	681b      	ldr	r3, [r3, #0]
 8101948:	681b      	ldr	r3, [r3, #0]
 810194a:	429a      	cmp	r2, r3
 810194c:	d105      	bne.n	810195a <HAL_I2C_MemRxCpltCallback+0x22>
		BNO055.flag = HAL_OK;
 810194e:	4b05      	ldr	r3, [pc, #20]	@ (8101964 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8101950:	2200      	movs	r2, #0
 8101952:	719a      	strb	r2, [r3, #6]
		BNO055_SAVE_HSEM(&BNO055);
 8101954:	4803      	ldr	r0, [pc, #12]	@ (8101964 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8101956:	f7ff fca1 	bl	810129c <BNO055_SAVE_HSEM>

	}
}
 810195a:	bf00      	nop
 810195c:	3708      	adds	r7, #8
 810195e:	46bd      	mov	sp, r7
 8101960:	bd80      	pop	{r7, pc}
 8101962:	bf00      	nop
 8101964:	10000188 	.word	0x10000188

08101968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101968:	b480      	push	{r7}
 810196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810196c:	b672      	cpsid	i
}
 810196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101970:	bf00      	nop
 8101972:	e7fd      	b.n	8101970 <Error_Handler+0x8>

08101974 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101974:	b580      	push	{r7, lr}
 8101976:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101978:	4b28      	ldr	r3, [pc, #160]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 810197a:	4a29      	ldr	r2, [pc, #164]	@ (8101a20 <MX_SPI1_Init+0xac>)
 810197c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810197e:	4b27      	ldr	r3, [pc, #156]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 8101980:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101986:	4b25      	ldr	r3, [pc, #148]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 8101988:	2200      	movs	r2, #0
 810198a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 810198c:	4b23      	ldr	r3, [pc, #140]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 810198e:	2207      	movs	r2, #7
 8101990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8101992:	4b22      	ldr	r3, [pc, #136]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 8101994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8101998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 810199a:	4b20      	ldr	r3, [pc, #128]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 810199c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81019a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 81019a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 81019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81019b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019b4:	2200      	movs	r2, #0
 81019b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81019b8:	4b18      	ldr	r3, [pc, #96]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019ba:	2200      	movs	r2, #0
 81019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81019be:	4b17      	ldr	r3, [pc, #92]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019c0:	2200      	movs	r2, #0
 81019c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81019c4:	4b15      	ldr	r3, [pc, #84]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019c6:	2200      	movs	r2, #0
 81019c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81019ca:	4b14      	ldr	r3, [pc, #80]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81019d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81019d2:	4b12      	ldr	r3, [pc, #72]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019d4:	2200      	movs	r2, #0
 81019d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81019d8:	4b10      	ldr	r3, [pc, #64]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019da:	2200      	movs	r2, #0
 81019dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81019de:	4b0f      	ldr	r3, [pc, #60]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019e0:	2200      	movs	r2, #0
 81019e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019e6:	2200      	movs	r2, #0
 81019e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019ec:	2200      	movs	r2, #0
 81019ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019f2:	2200      	movs	r2, #0
 81019f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81019f6:	4b09      	ldr	r3, [pc, #36]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019f8:	2200      	movs	r2, #0
 81019fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81019fc:	4b07      	ldr	r3, [pc, #28]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 81019fe:	2200      	movs	r2, #0
 8101a00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101a02:	4b06      	ldr	r3, [pc, #24]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 8101a04:	2200      	movs	r2, #0
 8101a06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101a08:	4804      	ldr	r0, [pc, #16]	@ (8101a1c <MX_SPI1_Init+0xa8>)
 8101a0a:	f007 fb79 	bl	8109100 <HAL_SPI_Init>
 8101a0e:	4603      	mov	r3, r0
 8101a10:	2b00      	cmp	r3, #0
 8101a12:	d001      	beq.n	8101a18 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8101a14:	f7ff ffa8 	bl	8101968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101a18:	bf00      	nop
 8101a1a:	bd80      	pop	{r7, pc}
 8101a1c:	10000274 	.word	0x10000274
 8101a20:	40013000 	.word	0x40013000

08101a24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101a24:	b580      	push	{r7, lr}
 8101a26:	b0bc      	sub	sp, #240	@ 0xf0
 8101a28:	af00      	add	r7, sp, #0
 8101a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a30:	2200      	movs	r2, #0
 8101a32:	601a      	str	r2, [r3, #0]
 8101a34:	605a      	str	r2, [r3, #4]
 8101a36:	609a      	str	r2, [r3, #8]
 8101a38:	60da      	str	r2, [r3, #12]
 8101a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a3c:	f107 0318 	add.w	r3, r7, #24
 8101a40:	22c0      	movs	r2, #192	@ 0xc0
 8101a42:	2100      	movs	r1, #0
 8101a44:	4618      	mov	r0, r3
 8101a46:	f008 f979 	bl	8109d3c <memset>
  if(spiHandle->Instance==SPI1)
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	4a38      	ldr	r2, [pc, #224]	@ (8101b30 <HAL_SPI_MspInit+0x10c>)
 8101a50:	4293      	cmp	r3, r2
 8101a52:	d168      	bne.n	8101b26 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101a58:	f04f 0300 	mov.w	r3, #0
 8101a5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101a60:	2300      	movs	r3, #0
 8101a62:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a64:	f107 0318 	add.w	r3, r7, #24
 8101a68:	4618      	mov	r0, r3
 8101a6a:	f005 ffdb 	bl	8107a24 <HAL_RCCEx_PeriphCLKConfig>
 8101a6e:	4603      	mov	r3, r0
 8101a70:	2b00      	cmp	r3, #0
 8101a72:	d001      	beq.n	8101a78 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8101a74:	f7ff ff78 	bl	8101968 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101a78:	4b2e      	ldr	r3, [pc, #184]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8101a84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101a88:	4b2a      	ldr	r3, [pc, #168]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101a92:	617b      	str	r3, [r7, #20]
 8101a94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a96:	4b27      	ldr	r3, [pc, #156]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a9c:	4a25      	ldr	r2, [pc, #148]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101a9e:	f043 0301 	orr.w	r3, r3, #1
 8101aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101aa6:	4b23      	ldr	r3, [pc, #140]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101aac:	f003 0301 	and.w	r3, r3, #1
 8101ab0:	613b      	str	r3, [r7, #16]
 8101ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101aba:	4a1e      	ldr	r2, [pc, #120]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101abc:	f043 0308 	orr.w	r3, r3, #8
 8101ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8101b34 <HAL_SPI_MspInit+0x110>)
 8101ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101aca:	f003 0308 	and.w	r3, r3, #8
 8101ace:	60fb      	str	r3, [r7, #12]
 8101ad0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8101ad2:	2360      	movs	r3, #96	@ 0x60
 8101ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ad8:	2302      	movs	r3, #2
 8101ada:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ade:	2300      	movs	r3, #0
 8101ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ae4:	2300      	movs	r3, #0
 8101ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101aea:	2305      	movs	r3, #5
 8101aec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101af0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101af4:	4619      	mov	r1, r3
 8101af6:	4810      	ldr	r0, [pc, #64]	@ (8101b38 <HAL_SPI_MspInit+0x114>)
 8101af8:	f002 fe88 	bl	810480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8101afc:	2380      	movs	r3, #128	@ 0x80
 8101afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b02:	2302      	movs	r3, #2
 8101b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b0e:	2300      	movs	r3, #0
 8101b10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101b14:	2305      	movs	r3, #5
 8101b16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101b1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b1e:	4619      	mov	r1, r3
 8101b20:	4806      	ldr	r0, [pc, #24]	@ (8101b3c <HAL_SPI_MspInit+0x118>)
 8101b22:	f002 fe73 	bl	810480c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101b26:	bf00      	nop
 8101b28:	37f0      	adds	r7, #240	@ 0xf0
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	bd80      	pop	{r7, pc}
 8101b2e:	bf00      	nop
 8101b30:	40013000 	.word	0x40013000
 8101b34:	58024400 	.word	0x58024400
 8101b38:	58020000 	.word	0x58020000
 8101b3c:	58020c00 	.word	0x58020c00

08101b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101b40:	b480      	push	{r7}
 8101b42:	b083      	sub	sp, #12
 8101b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101b46:	4b0a      	ldr	r3, [pc, #40]	@ (8101b70 <HAL_MspInit+0x30>)
 8101b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101b4c:	4a08      	ldr	r2, [pc, #32]	@ (8101b70 <HAL_MspInit+0x30>)
 8101b4e:	f043 0302 	orr.w	r3, r3, #2
 8101b52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101b56:	4b06      	ldr	r3, [pc, #24]	@ (8101b70 <HAL_MspInit+0x30>)
 8101b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101b5c:	f003 0302 	and.w	r3, r3, #2
 8101b60:	607b      	str	r3, [r7, #4]
 8101b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101b64:	bf00      	nop
 8101b66:	370c      	adds	r7, #12
 8101b68:	46bd      	mov	sp, r7
 8101b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6e:	4770      	bx	lr
 8101b70:	58024400 	.word	0x58024400

08101b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101b74:	b480      	push	{r7}
 8101b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101b78:	bf00      	nop
 8101b7a:	e7fd      	b.n	8101b78 <NMI_Handler+0x4>

08101b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101b7c:	b480      	push	{r7}
 8101b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101b80:	bf00      	nop
 8101b82:	e7fd      	b.n	8101b80 <HardFault_Handler+0x4>

08101b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101b84:	b480      	push	{r7}
 8101b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101b88:	bf00      	nop
 8101b8a:	e7fd      	b.n	8101b88 <MemManage_Handler+0x4>

08101b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101b8c:	b480      	push	{r7}
 8101b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101b90:	bf00      	nop
 8101b92:	e7fd      	b.n	8101b90 <BusFault_Handler+0x4>

08101b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101b94:	b480      	push	{r7}
 8101b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101b98:	bf00      	nop
 8101b9a:	e7fd      	b.n	8101b98 <UsageFault_Handler+0x4>

08101b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101b9c:	b480      	push	{r7}
 8101b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101ba0:	bf00      	nop
 8101ba2:	46bd      	mov	sp, r7
 8101ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ba8:	4770      	bx	lr

08101baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101baa:	b480      	push	{r7}
 8101bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101bae:	bf00      	nop
 8101bb0:	46bd      	mov	sp, r7
 8101bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb6:	4770      	bx	lr

08101bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101bb8:	b480      	push	{r7}
 8101bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101bbc:	bf00      	nop
 8101bbe:	46bd      	mov	sp, r7
 8101bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc4:	4770      	bx	lr

08101bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101bc6:	b580      	push	{r7, lr}
 8101bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101bca:	f000 f967 	bl	8101e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101bce:	bf00      	nop
 8101bd0:	bd80      	pop	{r7, pc}
	...

08101bd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8101bd8:	4802      	ldr	r0, [pc, #8]	@ (8101be4 <DMA1_Stream1_IRQHandler+0x10>)
 8101bda:	f001 faeb 	bl	81031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101bde:	bf00      	nop
 8101be0:	bd80      	pop	{r7, pc}
 8101be2:	bf00      	nop
 8101be4:	10000098 	.word	0x10000098

08101be8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8101be8:	b580      	push	{r7, lr}
 8101bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8101bec:	4802      	ldr	r0, [pc, #8]	@ (8101bf8 <DMA1_Stream2_IRQHandler+0x10>)
 8101bee:	f001 fae1 	bl	81031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8101bf2:	bf00      	nop
 8101bf4:	bd80      	pop	{r7, pc}
 8101bf6:	bf00      	nop
 8101bf8:	10000110 	.word	0x10000110

08101bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8101bfc:	b580      	push	{r7, lr}
 8101bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8101c00:	4802      	ldr	r0, [pc, #8]	@ (8101c0c <TIM2_IRQHandler+0x10>)
 8101c02:	f007 fc8b 	bl	810951c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8101c06:	bf00      	nop
 8101c08:	bd80      	pop	{r7, pc}
 8101c0a:	bf00      	nop
 8101c0c:	100002fc 	.word	0x100002fc

08101c10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8101c10:	b580      	push	{r7, lr}
 8101c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8101c14:	4802      	ldr	r0, [pc, #8]	@ (8101c20 <I2C1_EV_IRQHandler+0x10>)
 8101c16:	f003 fbc7 	bl	81053a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8101c1a:	bf00      	nop
 8101c1c:	bd80      	pop	{r7, pc}
 8101c1e:	bf00      	nop
 8101c20:	10000044 	.word	0x10000044

08101c24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8101c24:	b580      	push	{r7, lr}
 8101c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8101c28:	4802      	ldr	r0, [pc, #8]	@ (8101c34 <I2C1_ER_IRQHandler+0x10>)
 8101c2a:	f003 fbd7 	bl	81053dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8101c2e:	bf00      	nop
 8101c30:	bd80      	pop	{r7, pc}
 8101c32:	bf00      	nop
 8101c34:	10000044 	.word	0x10000044

08101c38 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b088      	sub	sp, #32
 8101c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101c3e:	f107 0310 	add.w	r3, r7, #16
 8101c42:	2200      	movs	r2, #0
 8101c44:	601a      	str	r2, [r3, #0]
 8101c46:	605a      	str	r2, [r3, #4]
 8101c48:	609a      	str	r2, [r3, #8]
 8101c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101c4c:	1d3b      	adds	r3, r7, #4
 8101c4e:	2200      	movs	r2, #0
 8101c50:	601a      	str	r2, [r3, #0]
 8101c52:	605a      	str	r2, [r3, #4]
 8101c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101c56:	4b1e      	ldr	r3, [pc, #120]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8101c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8101c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c60:	22a9      	movs	r2, #169	@ 0xa9
 8101c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101c64:	4b1a      	ldr	r3, [pc, #104]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c66:	2200      	movs	r2, #0
 8101c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8101c6a:	4b19      	ldr	r3, [pc, #100]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101c72:	4b17      	ldr	r3, [pc, #92]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c74:	2200      	movs	r2, #0
 8101c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101c78:	4b15      	ldr	r3, [pc, #84]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8101c7e:	4814      	ldr	r0, [pc, #80]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c80:	f007 fb7d 	bl	810937e <HAL_TIM_Base_Init>
 8101c84:	4603      	mov	r3, r0
 8101c86:	2b00      	cmp	r3, #0
 8101c88:	d001      	beq.n	8101c8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8101c8a:	f7ff fe6d 	bl	8101968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8101c94:	f107 0310 	add.w	r3, r7, #16
 8101c98:	4619      	mov	r1, r3
 8101c9a:	480d      	ldr	r0, [pc, #52]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101c9c:	f007 fd46 	bl	810972c <HAL_TIM_ConfigClockSource>
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d001      	beq.n	8101caa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8101ca6:	f7ff fe5f 	bl	8101968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8101caa:	2320      	movs	r3, #32
 8101cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101cb2:	1d3b      	adds	r3, r7, #4
 8101cb4:	4619      	mov	r1, r3
 8101cb6:	4806      	ldr	r0, [pc, #24]	@ (8101cd0 <MX_TIM2_Init+0x98>)
 8101cb8:	f007 ff94 	bl	8109be4 <HAL_TIMEx_MasterConfigSynchronization>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d001      	beq.n	8101cc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8101cc2:	f7ff fe51 	bl	8101968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101cc6:	bf00      	nop
 8101cc8:	3720      	adds	r7, #32
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	bd80      	pop	{r7, pc}
 8101cce:	bf00      	nop
 8101cd0:	100002fc 	.word	0x100002fc

08101cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8101cd4:	b580      	push	{r7, lr}
 8101cd6:	b084      	sub	sp, #16
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ce4:	d116      	bne.n	8101d14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8101d1c <HAL_TIM_Base_MspInit+0x48>)
 8101ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101cec:	4a0b      	ldr	r2, [pc, #44]	@ (8101d1c <HAL_TIM_Base_MspInit+0x48>)
 8101cee:	f043 0301 	orr.w	r3, r3, #1
 8101cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101cf6:	4b09      	ldr	r3, [pc, #36]	@ (8101d1c <HAL_TIM_Base_MspInit+0x48>)
 8101cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101cfc:	f003 0301 	and.w	r3, r3, #1
 8101d00:	60fb      	str	r3, [r7, #12]
 8101d02:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101d04:	2200      	movs	r2, #0
 8101d06:	2100      	movs	r1, #0
 8101d08:	201c      	movs	r0, #28
 8101d0a:	f000 f9fc 	bl	8102106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101d0e:	201c      	movs	r0, #28
 8101d10:	f000 fa13 	bl	810213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8101d14:	bf00      	nop
 8101d16:	3710      	adds	r7, #16
 8101d18:	46bd      	mov	sp, r7
 8101d1a:	bd80      	pop	{r7, pc}
 8101d1c:	58024400 	.word	0x58024400

08101d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101d24:	f7ff fb44 	bl	81013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101d28:	480c      	ldr	r0, [pc, #48]	@ (8101d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101d2a:	490d      	ldr	r1, [pc, #52]	@ (8101d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8101d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101d30:	e002      	b.n	8101d38 <LoopCopyDataInit>

08101d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101d36:	3304      	adds	r3, #4

08101d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101d3c:	d3f9      	bcc.n	8101d32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8101d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101d40:	4c0a      	ldr	r4, [pc, #40]	@ (8101d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101d44:	e001      	b.n	8101d4a <LoopFillZerobss>

08101d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101d48:	3204      	adds	r2, #4

08101d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101d4c:	d3fb      	bcc.n	8101d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101d4e:	f007 fffd 	bl	8109d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101d52:	f7ff fd2b 	bl	81017ac <main>
  bx  lr
 8101d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101d58:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101d5c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101d60:	10000028 	.word	0x10000028
  ldr r2, =_sidata
 8101d64:	08109dcc 	.word	0x08109dcc
  ldr r2, =_sbss
 8101d68:	10000028 	.word	0x10000028
  ldr r4, =_ebss
 8101d6c:	1000034c 	.word	0x1000034c

08101d70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101d70:	e7fe      	b.n	8101d70 <ADC3_IRQHandler>
	...

08101d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	b082      	sub	sp, #8
 8101d78:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101d7a:	4b28      	ldr	r3, [pc, #160]	@ (8101e1c <HAL_Init+0xa8>)
 8101d7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101d80:	4a26      	ldr	r2, [pc, #152]	@ (8101e1c <HAL_Init+0xa8>)
 8101d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101d86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101d8a:	4b24      	ldr	r3, [pc, #144]	@ (8101e1c <HAL_Init+0xa8>)
 8101d8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101d94:	603b      	str	r3, [r7, #0]
 8101d96:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d98:	4b21      	ldr	r3, [pc, #132]	@ (8101e20 <HAL_Init+0xac>)
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101da0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101da4:	4a1e      	ldr	r2, [pc, #120]	@ (8101e20 <HAL_Init+0xac>)
 8101da6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101daa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101dac:	4b1c      	ldr	r3, [pc, #112]	@ (8101e20 <HAL_Init+0xac>)
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	4a1b      	ldr	r2, [pc, #108]	@ (8101e20 <HAL_Init+0xac>)
 8101db2:	f043 0301 	orr.w	r3, r3, #1
 8101db6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101db8:	2003      	movs	r0, #3
 8101dba:	f000 f999 	bl	81020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101dbe:	f005 fcb7 	bl	8107730 <HAL_RCC_GetSysClockFreq>
 8101dc2:	4602      	mov	r2, r0
 8101dc4:	4b15      	ldr	r3, [pc, #84]	@ (8101e1c <HAL_Init+0xa8>)
 8101dc6:	699b      	ldr	r3, [r3, #24]
 8101dc8:	0a1b      	lsrs	r3, r3, #8
 8101dca:	f003 030f 	and.w	r3, r3, #15
 8101dce:	4915      	ldr	r1, [pc, #84]	@ (8101e24 <HAL_Init+0xb0>)
 8101dd0:	5ccb      	ldrb	r3, [r1, r3]
 8101dd2:	f003 031f 	and.w	r3, r3, #31
 8101dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8101dda:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8101e1c <HAL_Init+0xa8>)
 8101dde:	699b      	ldr	r3, [r3, #24]
 8101de0:	f003 030f 	and.w	r3, r3, #15
 8101de4:	4a0f      	ldr	r2, [pc, #60]	@ (8101e24 <HAL_Init+0xb0>)
 8101de6:	5cd3      	ldrb	r3, [r2, r3]
 8101de8:	f003 031f 	and.w	r3, r3, #31
 8101dec:	687a      	ldr	r2, [r7, #4]
 8101dee:	fa22 f303 	lsr.w	r3, r2, r3
 8101df2:	4a0d      	ldr	r2, [pc, #52]	@ (8101e28 <HAL_Init+0xb4>)
 8101df4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101df6:	4b0c      	ldr	r3, [pc, #48]	@ (8101e28 <HAL_Init+0xb4>)
 8101df8:	681b      	ldr	r3, [r3, #0]
 8101dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8101e2c <HAL_Init+0xb8>)
 8101dfc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101dfe:	2000      	movs	r0, #0
 8101e00:	f000 f816 	bl	8101e30 <HAL_InitTick>
 8101e04:	4603      	mov	r3, r0
 8101e06:	2b00      	cmp	r3, #0
 8101e08:	d001      	beq.n	8101e0e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101e0a:	2301      	movs	r3, #1
 8101e0c:	e002      	b.n	8101e14 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101e0e:	f7ff fe97 	bl	8101b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101e12:	2300      	movs	r3, #0
}
 8101e14:	4618      	mov	r0, r3
 8101e16:	3708      	adds	r7, #8
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	bd80      	pop	{r7, pc}
 8101e1c:	58024400 	.word	0x58024400
 8101e20:	40024400 	.word	0x40024400
 8101e24:	08109dac 	.word	0x08109dac
 8101e28:	1000001c 	.word	0x1000001c
 8101e2c:	10000018 	.word	0x10000018

08101e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101e30:	b580      	push	{r7, lr}
 8101e32:	b082      	sub	sp, #8
 8101e34:	af00      	add	r7, sp, #0
 8101e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101e38:	4b15      	ldr	r3, [pc, #84]	@ (8101e90 <HAL_InitTick+0x60>)
 8101e3a:	781b      	ldrb	r3, [r3, #0]
 8101e3c:	2b00      	cmp	r3, #0
 8101e3e:	d101      	bne.n	8101e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101e40:	2301      	movs	r3, #1
 8101e42:	e021      	b.n	8101e88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101e44:	4b13      	ldr	r3, [pc, #76]	@ (8101e94 <HAL_InitTick+0x64>)
 8101e46:	681a      	ldr	r2, [r3, #0]
 8101e48:	4b11      	ldr	r3, [pc, #68]	@ (8101e90 <HAL_InitTick+0x60>)
 8101e4a:	781b      	ldrb	r3, [r3, #0]
 8101e4c:	4619      	mov	r1, r3
 8101e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8101e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8101e5a:	4618      	mov	r0, r3
 8101e5c:	f000 f97f 	bl	810215e <HAL_SYSTICK_Config>
 8101e60:	4603      	mov	r3, r0
 8101e62:	2b00      	cmp	r3, #0
 8101e64:	d001      	beq.n	8101e6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101e66:	2301      	movs	r3, #1
 8101e68:	e00e      	b.n	8101e88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2b0f      	cmp	r3, #15
 8101e6e:	d80a      	bhi.n	8101e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101e70:	2200      	movs	r2, #0
 8101e72:	6879      	ldr	r1, [r7, #4]
 8101e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101e78:	f000 f945 	bl	8102106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101e7c:	4a06      	ldr	r2, [pc, #24]	@ (8101e98 <HAL_InitTick+0x68>)
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101e82:	2300      	movs	r3, #0
 8101e84:	e000      	b.n	8101e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101e86:	2301      	movs	r3, #1
}
 8101e88:	4618      	mov	r0, r3
 8101e8a:	3708      	adds	r7, #8
 8101e8c:	46bd      	mov	sp, r7
 8101e8e:	bd80      	pop	{r7, pc}
 8101e90:	10000024 	.word	0x10000024
 8101e94:	10000018 	.word	0x10000018
 8101e98:	10000020 	.word	0x10000020

08101e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101e9c:	b480      	push	{r7}
 8101e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101ea0:	4b06      	ldr	r3, [pc, #24]	@ (8101ebc <HAL_IncTick+0x20>)
 8101ea2:	781b      	ldrb	r3, [r3, #0]
 8101ea4:	461a      	mov	r2, r3
 8101ea6:	4b06      	ldr	r3, [pc, #24]	@ (8101ec0 <HAL_IncTick+0x24>)
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	4413      	add	r3, r2
 8101eac:	4a04      	ldr	r2, [pc, #16]	@ (8101ec0 <HAL_IncTick+0x24>)
 8101eae:	6013      	str	r3, [r2, #0]
}
 8101eb0:	bf00      	nop
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eb8:	4770      	bx	lr
 8101eba:	bf00      	nop
 8101ebc:	10000024 	.word	0x10000024
 8101ec0:	10000348 	.word	0x10000348

08101ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101ec4:	b480      	push	{r7}
 8101ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8101ec8:	4b03      	ldr	r3, [pc, #12]	@ (8101ed8 <HAL_GetTick+0x14>)
 8101eca:	681b      	ldr	r3, [r3, #0]
}
 8101ecc:	4618      	mov	r0, r3
 8101ece:	46bd      	mov	sp, r7
 8101ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ed4:	4770      	bx	lr
 8101ed6:	bf00      	nop
 8101ed8:	10000348 	.word	0x10000348

08101edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101edc:	b580      	push	{r7, lr}
 8101ede:	b084      	sub	sp, #16
 8101ee0:	af00      	add	r7, sp, #0
 8101ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101ee4:	f7ff ffee 	bl	8101ec4 <HAL_GetTick>
 8101ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101eee:	68fb      	ldr	r3, [r7, #12]
 8101ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101ef4:	d005      	beq.n	8101f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8101f20 <HAL_Delay+0x44>)
 8101ef8:	781b      	ldrb	r3, [r3, #0]
 8101efa:	461a      	mov	r2, r3
 8101efc:	68fb      	ldr	r3, [r7, #12]
 8101efe:	4413      	add	r3, r2
 8101f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101f02:	bf00      	nop
 8101f04:	f7ff ffde 	bl	8101ec4 <HAL_GetTick>
 8101f08:	4602      	mov	r2, r0
 8101f0a:	68bb      	ldr	r3, [r7, #8]
 8101f0c:	1ad3      	subs	r3, r2, r3
 8101f0e:	68fa      	ldr	r2, [r7, #12]
 8101f10:	429a      	cmp	r2, r3
 8101f12:	d8f7      	bhi.n	8101f04 <HAL_Delay+0x28>
  {
  }
}
 8101f14:	bf00      	nop
 8101f16:	bf00      	nop
 8101f18:	3710      	adds	r7, #16
 8101f1a:	46bd      	mov	sp, r7
 8101f1c:	bd80      	pop	{r7, pc}
 8101f1e:	bf00      	nop
 8101f20:	10000024 	.word	0x10000024

08101f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101f24:	b480      	push	{r7}
 8101f26:	b085      	sub	sp, #20
 8101f28:	af00      	add	r7, sp, #0
 8101f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	f003 0307 	and.w	r3, r3, #7
 8101f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101f34:	4b0c      	ldr	r3, [pc, #48]	@ (8101f68 <__NVIC_SetPriorityGrouping+0x44>)
 8101f36:	68db      	ldr	r3, [r3, #12]
 8101f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101f3a:	68ba      	ldr	r2, [r7, #8]
 8101f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101f40:	4013      	ands	r3, r2
 8101f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101f44:	68fb      	ldr	r3, [r7, #12]
 8101f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101f48:	68bb      	ldr	r3, [r7, #8]
 8101f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101f56:	4a04      	ldr	r2, [pc, #16]	@ (8101f68 <__NVIC_SetPriorityGrouping+0x44>)
 8101f58:	68bb      	ldr	r3, [r7, #8]
 8101f5a:	60d3      	str	r3, [r2, #12]
}
 8101f5c:	bf00      	nop
 8101f5e:	3714      	adds	r7, #20
 8101f60:	46bd      	mov	sp, r7
 8101f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f66:	4770      	bx	lr
 8101f68:	e000ed00 	.word	0xe000ed00

08101f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101f6c:	b480      	push	{r7}
 8101f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101f70:	4b04      	ldr	r3, [pc, #16]	@ (8101f84 <__NVIC_GetPriorityGrouping+0x18>)
 8101f72:	68db      	ldr	r3, [r3, #12]
 8101f74:	0a1b      	lsrs	r3, r3, #8
 8101f76:	f003 0307 	and.w	r3, r3, #7
}
 8101f7a:	4618      	mov	r0, r3
 8101f7c:	46bd      	mov	sp, r7
 8101f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f82:	4770      	bx	lr
 8101f84:	e000ed00 	.word	0xe000ed00

08101f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101f88:	b480      	push	{r7}
 8101f8a:	b083      	sub	sp, #12
 8101f8c:	af00      	add	r7, sp, #0
 8101f8e:	4603      	mov	r3, r0
 8101f90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f96:	2b00      	cmp	r3, #0
 8101f98:	db0b      	blt.n	8101fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101f9a:	88fb      	ldrh	r3, [r7, #6]
 8101f9c:	f003 021f 	and.w	r2, r3, #31
 8101fa0:	4907      	ldr	r1, [pc, #28]	@ (8101fc0 <__NVIC_EnableIRQ+0x38>)
 8101fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101fa6:	095b      	lsrs	r3, r3, #5
 8101fa8:	2001      	movs	r0, #1
 8101faa:	fa00 f202 	lsl.w	r2, r0, r2
 8101fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101fb2:	bf00      	nop
 8101fb4:	370c      	adds	r7, #12
 8101fb6:	46bd      	mov	sp, r7
 8101fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fbc:	4770      	bx	lr
 8101fbe:	bf00      	nop
 8101fc0:	e000e100 	.word	0xe000e100

08101fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101fc4:	b480      	push	{r7}
 8101fc6:	b083      	sub	sp, #12
 8101fc8:	af00      	add	r7, sp, #0
 8101fca:	4603      	mov	r3, r0
 8101fcc:	6039      	str	r1, [r7, #0]
 8101fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101fd4:	2b00      	cmp	r3, #0
 8101fd6:	db0a      	blt.n	8101fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101fd8:	683b      	ldr	r3, [r7, #0]
 8101fda:	b2da      	uxtb	r2, r3
 8101fdc:	490c      	ldr	r1, [pc, #48]	@ (8102010 <__NVIC_SetPriority+0x4c>)
 8101fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101fe2:	0112      	lsls	r2, r2, #4
 8101fe4:	b2d2      	uxtb	r2, r2
 8101fe6:	440b      	add	r3, r1
 8101fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101fec:	e00a      	b.n	8102004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101fee:	683b      	ldr	r3, [r7, #0]
 8101ff0:	b2da      	uxtb	r2, r3
 8101ff2:	4908      	ldr	r1, [pc, #32]	@ (8102014 <__NVIC_SetPriority+0x50>)
 8101ff4:	88fb      	ldrh	r3, [r7, #6]
 8101ff6:	f003 030f 	and.w	r3, r3, #15
 8101ffa:	3b04      	subs	r3, #4
 8101ffc:	0112      	lsls	r2, r2, #4
 8101ffe:	b2d2      	uxtb	r2, r2
 8102000:	440b      	add	r3, r1
 8102002:	761a      	strb	r2, [r3, #24]
}
 8102004:	bf00      	nop
 8102006:	370c      	adds	r7, #12
 8102008:	46bd      	mov	sp, r7
 810200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810200e:	4770      	bx	lr
 8102010:	e000e100 	.word	0xe000e100
 8102014:	e000ed00 	.word	0xe000ed00

08102018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102018:	b480      	push	{r7}
 810201a:	b089      	sub	sp, #36	@ 0x24
 810201c:	af00      	add	r7, sp, #0
 810201e:	60f8      	str	r0, [r7, #12]
 8102020:	60b9      	str	r1, [r7, #8]
 8102022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102024:	68fb      	ldr	r3, [r7, #12]
 8102026:	f003 0307 	and.w	r3, r3, #7
 810202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810202c:	69fb      	ldr	r3, [r7, #28]
 810202e:	f1c3 0307 	rsb	r3, r3, #7
 8102032:	2b04      	cmp	r3, #4
 8102034:	bf28      	it	cs
 8102036:	2304      	movcs	r3, #4
 8102038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810203a:	69fb      	ldr	r3, [r7, #28]
 810203c:	3304      	adds	r3, #4
 810203e:	2b06      	cmp	r3, #6
 8102040:	d902      	bls.n	8102048 <NVIC_EncodePriority+0x30>
 8102042:	69fb      	ldr	r3, [r7, #28]
 8102044:	3b03      	subs	r3, #3
 8102046:	e000      	b.n	810204a <NVIC_EncodePriority+0x32>
 8102048:	2300      	movs	r3, #0
 810204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810204c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8102050:	69bb      	ldr	r3, [r7, #24]
 8102052:	fa02 f303 	lsl.w	r3, r2, r3
 8102056:	43da      	mvns	r2, r3
 8102058:	68bb      	ldr	r3, [r7, #8]
 810205a:	401a      	ands	r2, r3
 810205c:	697b      	ldr	r3, [r7, #20]
 810205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8102064:	697b      	ldr	r3, [r7, #20]
 8102066:	fa01 f303 	lsl.w	r3, r1, r3
 810206a:	43d9      	mvns	r1, r3
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102070:	4313      	orrs	r3, r2
         );
}
 8102072:	4618      	mov	r0, r3
 8102074:	3724      	adds	r7, #36	@ 0x24
 8102076:	46bd      	mov	sp, r7
 8102078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810207c:	4770      	bx	lr
	...

08102080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8102080:	b480      	push	{r7}
 8102082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102084:	f3bf 8f4f 	dsb	sy
}
 8102088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 810208a:	4b06      	ldr	r3, [pc, #24]	@ (81020a4 <__NVIC_SystemReset+0x24>)
 810208c:	68db      	ldr	r3, [r3, #12]
 810208e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8102092:	4904      	ldr	r1, [pc, #16]	@ (81020a4 <__NVIC_SystemReset+0x24>)
 8102094:	4b04      	ldr	r3, [pc, #16]	@ (81020a8 <__NVIC_SystemReset+0x28>)
 8102096:	4313      	orrs	r3, r2
 8102098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 810209a:	f3bf 8f4f 	dsb	sy
}
 810209e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 81020a0:	bf00      	nop
 81020a2:	e7fd      	b.n	81020a0 <__NVIC_SystemReset+0x20>
 81020a4:	e000ed00 	.word	0xe000ed00
 81020a8:	05fa0004 	.word	0x05fa0004

081020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81020ac:	b580      	push	{r7, lr}
 81020ae:	b082      	sub	sp, #8
 81020b0:	af00      	add	r7, sp, #0
 81020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	3b01      	subs	r3, #1
 81020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81020bc:	d301      	bcc.n	81020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81020be:	2301      	movs	r3, #1
 81020c0:	e00f      	b.n	81020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81020c2:	4a0a      	ldr	r2, [pc, #40]	@ (81020ec <SysTick_Config+0x40>)
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	3b01      	subs	r3, #1
 81020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81020ca:	210f      	movs	r1, #15
 81020cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81020d0:	f7ff ff78 	bl	8101fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81020d4:	4b05      	ldr	r3, [pc, #20]	@ (81020ec <SysTick_Config+0x40>)
 81020d6:	2200      	movs	r2, #0
 81020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81020da:	4b04      	ldr	r3, [pc, #16]	@ (81020ec <SysTick_Config+0x40>)
 81020dc:	2207      	movs	r2, #7
 81020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81020e0:	2300      	movs	r3, #0
}
 81020e2:	4618      	mov	r0, r3
 81020e4:	3708      	adds	r7, #8
 81020e6:	46bd      	mov	sp, r7
 81020e8:	bd80      	pop	{r7, pc}
 81020ea:	bf00      	nop
 81020ec:	e000e010 	.word	0xe000e010

081020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81020f0:	b580      	push	{r7, lr}
 81020f2:	b082      	sub	sp, #8
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81020f8:	6878      	ldr	r0, [r7, #4]
 81020fa:	f7ff ff13 	bl	8101f24 <__NVIC_SetPriorityGrouping>
}
 81020fe:	bf00      	nop
 8102100:	3708      	adds	r7, #8
 8102102:	46bd      	mov	sp, r7
 8102104:	bd80      	pop	{r7, pc}

08102106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102106:	b580      	push	{r7, lr}
 8102108:	b086      	sub	sp, #24
 810210a:	af00      	add	r7, sp, #0
 810210c:	4603      	mov	r3, r0
 810210e:	60b9      	str	r1, [r7, #8]
 8102110:	607a      	str	r2, [r7, #4]
 8102112:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102114:	f7ff ff2a 	bl	8101f6c <__NVIC_GetPriorityGrouping>
 8102118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810211a:	687a      	ldr	r2, [r7, #4]
 810211c:	68b9      	ldr	r1, [r7, #8]
 810211e:	6978      	ldr	r0, [r7, #20]
 8102120:	f7ff ff7a 	bl	8102018 <NVIC_EncodePriority>
 8102124:	4602      	mov	r2, r0
 8102126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810212a:	4611      	mov	r1, r2
 810212c:	4618      	mov	r0, r3
 810212e:	f7ff ff49 	bl	8101fc4 <__NVIC_SetPriority>
}
 8102132:	bf00      	nop
 8102134:	3718      	adds	r7, #24
 8102136:	46bd      	mov	sp, r7
 8102138:	bd80      	pop	{r7, pc}

0810213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810213a:	b580      	push	{r7, lr}
 810213c:	b082      	sub	sp, #8
 810213e:	af00      	add	r7, sp, #0
 8102140:	4603      	mov	r3, r0
 8102142:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102148:	4618      	mov	r0, r3
 810214a:	f7ff ff1d 	bl	8101f88 <__NVIC_EnableIRQ>
}
 810214e:	bf00      	nop
 8102150:	3708      	adds	r7, #8
 8102152:	46bd      	mov	sp, r7
 8102154:	bd80      	pop	{r7, pc}

08102156 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8102156:	b580      	push	{r7, lr}
 8102158:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 810215a:	f7ff ff91 	bl	8102080 <__NVIC_SystemReset>

0810215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810215e:	b580      	push	{r7, lr}
 8102160:	b082      	sub	sp, #8
 8102162:	af00      	add	r7, sp, #0
 8102164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102166:	6878      	ldr	r0, [r7, #4]
 8102168:	f7ff ffa0 	bl	81020ac <SysTick_Config>
 810216c:	4603      	mov	r3, r0
}
 810216e:	4618      	mov	r0, r3
 8102170:	3708      	adds	r7, #8
 8102172:	46bd      	mov	sp, r7
 8102174:	bd80      	pop	{r7, pc}
	...

08102178 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102178:	b480      	push	{r7}
 810217a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810217c:	4b07      	ldr	r3, [pc, #28]	@ (810219c <HAL_GetCurrentCPUID+0x24>)
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	091b      	lsrs	r3, r3, #4
 8102182:	f003 030f 	and.w	r3, r3, #15
 8102186:	2b07      	cmp	r3, #7
 8102188:	d101      	bne.n	810218e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810218a:	2303      	movs	r3, #3
 810218c:	e000      	b.n	8102190 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810218e:	2301      	movs	r3, #1
  }
}
 8102190:	4618      	mov	r0, r3
 8102192:	46bd      	mov	sp, r7
 8102194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102198:	4770      	bx	lr
 810219a:	bf00      	nop
 810219c:	e000ed00 	.word	0xe000ed00

081021a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81021a0:	b580      	push	{r7, lr}
 81021a2:	b086      	sub	sp, #24
 81021a4:	af00      	add	r7, sp, #0
 81021a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81021a8:	f7ff fe8c 	bl	8101ec4 <HAL_GetTick>
 81021ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	2b00      	cmp	r3, #0
 81021b2:	d101      	bne.n	81021b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81021b4:	2301      	movs	r3, #1
 81021b6:	e314      	b.n	81027e2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	4a66      	ldr	r2, [pc, #408]	@ (8102358 <HAL_DMA_Init+0x1b8>)
 81021be:	4293      	cmp	r3, r2
 81021c0:	d04a      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a65      	ldr	r2, [pc, #404]	@ (810235c <HAL_DMA_Init+0x1bc>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d045      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a63      	ldr	r2, [pc, #396]	@ (8102360 <HAL_DMA_Init+0x1c0>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d040      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a62      	ldr	r2, [pc, #392]	@ (8102364 <HAL_DMA_Init+0x1c4>)
 81021dc:	4293      	cmp	r3, r2
 81021de:	d03b      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	4a60      	ldr	r2, [pc, #384]	@ (8102368 <HAL_DMA_Init+0x1c8>)
 81021e6:	4293      	cmp	r3, r2
 81021e8:	d036      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a5f      	ldr	r2, [pc, #380]	@ (810236c <HAL_DMA_Init+0x1cc>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d031      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a5d      	ldr	r2, [pc, #372]	@ (8102370 <HAL_DMA_Init+0x1d0>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d02c      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a5c      	ldr	r2, [pc, #368]	@ (8102374 <HAL_DMA_Init+0x1d4>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d027      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a5a      	ldr	r2, [pc, #360]	@ (8102378 <HAL_DMA_Init+0x1d8>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d022      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	4a59      	ldr	r2, [pc, #356]	@ (810237c <HAL_DMA_Init+0x1dc>)
 8102218:	4293      	cmp	r3, r2
 810221a:	d01d      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	4a57      	ldr	r2, [pc, #348]	@ (8102380 <HAL_DMA_Init+0x1e0>)
 8102222:	4293      	cmp	r3, r2
 8102224:	d018      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	4a56      	ldr	r2, [pc, #344]	@ (8102384 <HAL_DMA_Init+0x1e4>)
 810222c:	4293      	cmp	r3, r2
 810222e:	d013      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	4a54      	ldr	r2, [pc, #336]	@ (8102388 <HAL_DMA_Init+0x1e8>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d00e      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	4a53      	ldr	r2, [pc, #332]	@ (810238c <HAL_DMA_Init+0x1ec>)
 8102240:	4293      	cmp	r3, r2
 8102242:	d009      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	4a51      	ldr	r2, [pc, #324]	@ (8102390 <HAL_DMA_Init+0x1f0>)
 810224a:	4293      	cmp	r3, r2
 810224c:	d004      	beq.n	8102258 <HAL_DMA_Init+0xb8>
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	4a50      	ldr	r2, [pc, #320]	@ (8102394 <HAL_DMA_Init+0x1f4>)
 8102254:	4293      	cmp	r3, r2
 8102256:	d101      	bne.n	810225c <HAL_DMA_Init+0xbc>
 8102258:	2301      	movs	r3, #1
 810225a:	e000      	b.n	810225e <HAL_DMA_Init+0xbe>
 810225c:	2300      	movs	r3, #0
 810225e:	2b00      	cmp	r3, #0
 8102260:	f000 813b 	beq.w	81024da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	2202      	movs	r2, #2
 8102268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	2200      	movs	r2, #0
 8102270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	4a37      	ldr	r2, [pc, #220]	@ (8102358 <HAL_DMA_Init+0x1b8>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d04a      	beq.n	8102314 <HAL_DMA_Init+0x174>
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	4a36      	ldr	r2, [pc, #216]	@ (810235c <HAL_DMA_Init+0x1bc>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d045      	beq.n	8102314 <HAL_DMA_Init+0x174>
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	4a34      	ldr	r2, [pc, #208]	@ (8102360 <HAL_DMA_Init+0x1c0>)
 810228e:	4293      	cmp	r3, r2
 8102290:	d040      	beq.n	8102314 <HAL_DMA_Init+0x174>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	4a33      	ldr	r2, [pc, #204]	@ (8102364 <HAL_DMA_Init+0x1c4>)
 8102298:	4293      	cmp	r3, r2
 810229a:	d03b      	beq.n	8102314 <HAL_DMA_Init+0x174>
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	4a31      	ldr	r2, [pc, #196]	@ (8102368 <HAL_DMA_Init+0x1c8>)
 81022a2:	4293      	cmp	r3, r2
 81022a4:	d036      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a30      	ldr	r2, [pc, #192]	@ (810236c <HAL_DMA_Init+0x1cc>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d031      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	4a2e      	ldr	r2, [pc, #184]	@ (8102370 <HAL_DMA_Init+0x1d0>)
 81022b6:	4293      	cmp	r3, r2
 81022b8:	d02c      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	4a2d      	ldr	r2, [pc, #180]	@ (8102374 <HAL_DMA_Init+0x1d4>)
 81022c0:	4293      	cmp	r3, r2
 81022c2:	d027      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	4a2b      	ldr	r2, [pc, #172]	@ (8102378 <HAL_DMA_Init+0x1d8>)
 81022ca:	4293      	cmp	r3, r2
 81022cc:	d022      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	681b      	ldr	r3, [r3, #0]
 81022d2:	4a2a      	ldr	r2, [pc, #168]	@ (810237c <HAL_DMA_Init+0x1dc>)
 81022d4:	4293      	cmp	r3, r2
 81022d6:	d01d      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	4a28      	ldr	r2, [pc, #160]	@ (8102380 <HAL_DMA_Init+0x1e0>)
 81022de:	4293      	cmp	r3, r2
 81022e0:	d018      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	4a27      	ldr	r2, [pc, #156]	@ (8102384 <HAL_DMA_Init+0x1e4>)
 81022e8:	4293      	cmp	r3, r2
 81022ea:	d013      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	4a25      	ldr	r2, [pc, #148]	@ (8102388 <HAL_DMA_Init+0x1e8>)
 81022f2:	4293      	cmp	r3, r2
 81022f4:	d00e      	beq.n	8102314 <HAL_DMA_Init+0x174>
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	681b      	ldr	r3, [r3, #0]
 81022fa:	4a24      	ldr	r2, [pc, #144]	@ (810238c <HAL_DMA_Init+0x1ec>)
 81022fc:	4293      	cmp	r3, r2
 81022fe:	d009      	beq.n	8102314 <HAL_DMA_Init+0x174>
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	4a22      	ldr	r2, [pc, #136]	@ (8102390 <HAL_DMA_Init+0x1f0>)
 8102306:	4293      	cmp	r3, r2
 8102308:	d004      	beq.n	8102314 <HAL_DMA_Init+0x174>
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	4a21      	ldr	r2, [pc, #132]	@ (8102394 <HAL_DMA_Init+0x1f4>)
 8102310:	4293      	cmp	r3, r2
 8102312:	d108      	bne.n	8102326 <HAL_DMA_Init+0x186>
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	681a      	ldr	r2, [r3, #0]
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	681b      	ldr	r3, [r3, #0]
 810231e:	f022 0201 	bic.w	r2, r2, #1
 8102322:	601a      	str	r2, [r3, #0]
 8102324:	e007      	b.n	8102336 <HAL_DMA_Init+0x196>
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	681a      	ldr	r2, [r3, #0]
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	f022 0201 	bic.w	r2, r2, #1
 8102334:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102336:	e02f      	b.n	8102398 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102338:	f7ff fdc4 	bl	8101ec4 <HAL_GetTick>
 810233c:	4602      	mov	r2, r0
 810233e:	693b      	ldr	r3, [r7, #16]
 8102340:	1ad3      	subs	r3, r2, r3
 8102342:	2b05      	cmp	r3, #5
 8102344:	d928      	bls.n	8102398 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	2220      	movs	r2, #32
 810234a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	2203      	movs	r2, #3
 8102350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8102354:	2301      	movs	r3, #1
 8102356:	e244      	b.n	81027e2 <HAL_DMA_Init+0x642>
 8102358:	40020010 	.word	0x40020010
 810235c:	40020028 	.word	0x40020028
 8102360:	40020040 	.word	0x40020040
 8102364:	40020058 	.word	0x40020058
 8102368:	40020070 	.word	0x40020070
 810236c:	40020088 	.word	0x40020088
 8102370:	400200a0 	.word	0x400200a0
 8102374:	400200b8 	.word	0x400200b8
 8102378:	40020410 	.word	0x40020410
 810237c:	40020428 	.word	0x40020428
 8102380:	40020440 	.word	0x40020440
 8102384:	40020458 	.word	0x40020458
 8102388:	40020470 	.word	0x40020470
 810238c:	40020488 	.word	0x40020488
 8102390:	400204a0 	.word	0x400204a0
 8102394:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	f003 0301 	and.w	r3, r3, #1
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d1c8      	bne.n	8102338 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81023ae:	697a      	ldr	r2, [r7, #20]
 81023b0:	4b84      	ldr	r3, [pc, #528]	@ (81025c4 <HAL_DMA_Init+0x424>)
 81023b2:	4013      	ands	r3, r2
 81023b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81023be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	691b      	ldr	r3, [r3, #16]
 81023c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	699b      	ldr	r3, [r3, #24]
 81023d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	6a1b      	ldr	r3, [r3, #32]
 81023dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81023de:	697a      	ldr	r2, [r7, #20]
 81023e0:	4313      	orrs	r3, r2
 81023e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81023e8:	2b04      	cmp	r3, #4
 81023ea:	d107      	bne.n	81023fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81023f4:	4313      	orrs	r3, r2
 81023f6:	697a      	ldr	r2, [r7, #20]
 81023f8:	4313      	orrs	r3, r2
 81023fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81023fc:	4b72      	ldr	r3, [pc, #456]	@ (81025c8 <HAL_DMA_Init+0x428>)
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	0c1b      	lsrs	r3, r3, #16
 8102402:	041b      	lsls	r3, r3, #16
 8102404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102408:	d328      	bcc.n	810245c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	685b      	ldr	r3, [r3, #4]
 810240e:	2b28      	cmp	r3, #40	@ 0x28
 8102410:	d903      	bls.n	810241a <HAL_DMA_Init+0x27a>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	685b      	ldr	r3, [r3, #4]
 8102416:	2b2e      	cmp	r3, #46	@ 0x2e
 8102418:	d917      	bls.n	810244a <HAL_DMA_Init+0x2aa>
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	685b      	ldr	r3, [r3, #4]
 810241e:	2b3e      	cmp	r3, #62	@ 0x3e
 8102420:	d903      	bls.n	810242a <HAL_DMA_Init+0x28a>
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	685b      	ldr	r3, [r3, #4]
 8102426:	2b42      	cmp	r3, #66	@ 0x42
 8102428:	d90f      	bls.n	810244a <HAL_DMA_Init+0x2aa>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	685b      	ldr	r3, [r3, #4]
 810242e:	2b46      	cmp	r3, #70	@ 0x46
 8102430:	d903      	bls.n	810243a <HAL_DMA_Init+0x29a>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	685b      	ldr	r3, [r3, #4]
 8102436:	2b48      	cmp	r3, #72	@ 0x48
 8102438:	d907      	bls.n	810244a <HAL_DMA_Init+0x2aa>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	685b      	ldr	r3, [r3, #4]
 810243e:	2b4e      	cmp	r3, #78	@ 0x4e
 8102440:	d905      	bls.n	810244e <HAL_DMA_Init+0x2ae>
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	685b      	ldr	r3, [r3, #4]
 8102446:	2b52      	cmp	r3, #82	@ 0x52
 8102448:	d801      	bhi.n	810244e <HAL_DMA_Init+0x2ae>
 810244a:	2301      	movs	r3, #1
 810244c:	e000      	b.n	8102450 <HAL_DMA_Init+0x2b0>
 810244e:	2300      	movs	r3, #0
 8102450:	2b00      	cmp	r3, #0
 8102452:	d003      	beq.n	810245c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102454:	697b      	ldr	r3, [r7, #20]
 8102456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810245a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	697a      	ldr	r2, [r7, #20]
 8102462:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	695b      	ldr	r3, [r3, #20]
 810246a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810246c:	697b      	ldr	r3, [r7, #20]
 810246e:	f023 0307 	bic.w	r3, r3, #7
 8102472:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102478:	697a      	ldr	r2, [r7, #20]
 810247a:	4313      	orrs	r3, r2
 810247c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102482:	2b04      	cmp	r3, #4
 8102484:	d117      	bne.n	81024b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810248a:	697a      	ldr	r2, [r7, #20]
 810248c:	4313      	orrs	r3, r2
 810248e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102494:	2b00      	cmp	r3, #0
 8102496:	d00e      	beq.n	81024b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102498:	6878      	ldr	r0, [r7, #4]
 810249a:	f002 f82d 	bl	81044f8 <DMA_CheckFifoParam>
 810249e:	4603      	mov	r3, r0
 81024a0:	2b00      	cmp	r3, #0
 81024a2:	d008      	beq.n	81024b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	2240      	movs	r2, #64	@ 0x40
 81024a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	2201      	movs	r2, #1
 81024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 81024b2:	2301      	movs	r3, #1
 81024b4:	e195      	b.n	81027e2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	697a      	ldr	r2, [r7, #20]
 81024bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81024be:	6878      	ldr	r0, [r7, #4]
 81024c0:	f001 ff68 	bl	8104394 <DMA_CalcBaseAndBitshift>
 81024c4:	4603      	mov	r3, r0
 81024c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81024cc:	f003 031f 	and.w	r3, r3, #31
 81024d0:	223f      	movs	r2, #63	@ 0x3f
 81024d2:	409a      	lsls	r2, r3
 81024d4:	68bb      	ldr	r3, [r7, #8]
 81024d6:	609a      	str	r2, [r3, #8]
 81024d8:	e0cb      	b.n	8102672 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	681b      	ldr	r3, [r3, #0]
 81024de:	4a3b      	ldr	r2, [pc, #236]	@ (81025cc <HAL_DMA_Init+0x42c>)
 81024e0:	4293      	cmp	r3, r2
 81024e2:	d022      	beq.n	810252a <HAL_DMA_Init+0x38a>
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4a39      	ldr	r2, [pc, #228]	@ (81025d0 <HAL_DMA_Init+0x430>)
 81024ea:	4293      	cmp	r3, r2
 81024ec:	d01d      	beq.n	810252a <HAL_DMA_Init+0x38a>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4a38      	ldr	r2, [pc, #224]	@ (81025d4 <HAL_DMA_Init+0x434>)
 81024f4:	4293      	cmp	r3, r2
 81024f6:	d018      	beq.n	810252a <HAL_DMA_Init+0x38a>
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a36      	ldr	r2, [pc, #216]	@ (81025d8 <HAL_DMA_Init+0x438>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d013      	beq.n	810252a <HAL_DMA_Init+0x38a>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a35      	ldr	r2, [pc, #212]	@ (81025dc <HAL_DMA_Init+0x43c>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d00e      	beq.n	810252a <HAL_DMA_Init+0x38a>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a33      	ldr	r2, [pc, #204]	@ (81025e0 <HAL_DMA_Init+0x440>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d009      	beq.n	810252a <HAL_DMA_Init+0x38a>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a32      	ldr	r2, [pc, #200]	@ (81025e4 <HAL_DMA_Init+0x444>)
 810251c:	4293      	cmp	r3, r2
 810251e:	d004      	beq.n	810252a <HAL_DMA_Init+0x38a>
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4a30      	ldr	r2, [pc, #192]	@ (81025e8 <HAL_DMA_Init+0x448>)
 8102526:	4293      	cmp	r3, r2
 8102528:	d101      	bne.n	810252e <HAL_DMA_Init+0x38e>
 810252a:	2301      	movs	r3, #1
 810252c:	e000      	b.n	8102530 <HAL_DMA_Init+0x390>
 810252e:	2300      	movs	r3, #0
 8102530:	2b00      	cmp	r3, #0
 8102532:	f000 8095 	beq.w	8102660 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a24      	ldr	r2, [pc, #144]	@ (81025cc <HAL_DMA_Init+0x42c>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d021      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	4a22      	ldr	r2, [pc, #136]	@ (81025d0 <HAL_DMA_Init+0x430>)
 8102546:	4293      	cmp	r3, r2
 8102548:	d01c      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4a21      	ldr	r2, [pc, #132]	@ (81025d4 <HAL_DMA_Init+0x434>)
 8102550:	4293      	cmp	r3, r2
 8102552:	d017      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	4a1f      	ldr	r2, [pc, #124]	@ (81025d8 <HAL_DMA_Init+0x438>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d012      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a1e      	ldr	r2, [pc, #120]	@ (81025dc <HAL_DMA_Init+0x43c>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d00d      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a1c      	ldr	r2, [pc, #112]	@ (81025e0 <HAL_DMA_Init+0x440>)
 810256e:	4293      	cmp	r3, r2
 8102570:	d008      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a1b      	ldr	r2, [pc, #108]	@ (81025e4 <HAL_DMA_Init+0x444>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d003      	beq.n	8102584 <HAL_DMA_Init+0x3e4>
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	4a19      	ldr	r2, [pc, #100]	@ (81025e8 <HAL_DMA_Init+0x448>)
 8102582:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	2202      	movs	r2, #2
 8102588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	2200      	movs	r2, #0
 8102590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810259c:	697b      	ldr	r3, [r7, #20]
 810259e:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 81025a2:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 81025a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	689b      	ldr	r3, [r3, #8]
 81025ac:	2b40      	cmp	r3, #64	@ 0x40
 81025ae:	d01d      	beq.n	81025ec <HAL_DMA_Init+0x44c>
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	689b      	ldr	r3, [r3, #8]
 81025b4:	2b80      	cmp	r3, #128	@ 0x80
 81025b6:	d102      	bne.n	81025be <HAL_DMA_Init+0x41e>
 81025b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81025bc:	e017      	b.n	81025ee <HAL_DMA_Init+0x44e>
 81025be:	2300      	movs	r3, #0
 81025c0:	e015      	b.n	81025ee <HAL_DMA_Init+0x44e>
 81025c2:	bf00      	nop
 81025c4:	fe10803f 	.word	0xfe10803f
 81025c8:	5c001000 	.word	0x5c001000
 81025cc:	58025408 	.word	0x58025408
 81025d0:	5802541c 	.word	0x5802541c
 81025d4:	58025430 	.word	0x58025430
 81025d8:	58025444 	.word	0x58025444
 81025dc:	58025458 	.word	0x58025458
 81025e0:	5802546c 	.word	0x5802546c
 81025e4:	58025480 	.word	0x58025480
 81025e8:	58025494 	.word	0x58025494
 81025ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81025ee:	687a      	ldr	r2, [r7, #4]
 81025f0:	68d2      	ldr	r2, [r2, #12]
 81025f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81025f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	691b      	ldr	r3, [r3, #16]
 81025fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81025fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	695b      	ldr	r3, [r3, #20]
 8102602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	699b      	ldr	r3, [r3, #24]
 810260a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810260c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	69db      	ldr	r3, [r3, #28]
 8102612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	6a1b      	ldr	r3, [r3, #32]
 810261a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810261c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810261e:	697a      	ldr	r2, [r7, #20]
 8102620:	4313      	orrs	r3, r2
 8102622:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	697a      	ldr	r2, [r7, #20]
 810262a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	461a      	mov	r2, r3
 8102632:	4b6e      	ldr	r3, [pc, #440]	@ (81027ec <HAL_DMA_Init+0x64c>)
 8102634:	4413      	add	r3, r2
 8102636:	4a6e      	ldr	r2, [pc, #440]	@ (81027f0 <HAL_DMA_Init+0x650>)
 8102638:	fba2 2303 	umull	r2, r3, r2, r3
 810263c:	091b      	lsrs	r3, r3, #4
 810263e:	009a      	lsls	r2, r3, #2
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102644:	6878      	ldr	r0, [r7, #4]
 8102646:	f001 fea5 	bl	8104394 <DMA_CalcBaseAndBitshift>
 810264a:	4603      	mov	r3, r0
 810264c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102652:	f003 031f 	and.w	r3, r3, #31
 8102656:	2201      	movs	r2, #1
 8102658:	409a      	lsls	r2, r3
 810265a:	68fb      	ldr	r3, [r7, #12]
 810265c:	605a      	str	r2, [r3, #4]
 810265e:	e008      	b.n	8102672 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	2240      	movs	r2, #64	@ 0x40
 8102664:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	2203      	movs	r2, #3
 810266a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 810266e:	2301      	movs	r3, #1
 8102670:	e0b7      	b.n	81027e2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	4a5f      	ldr	r2, [pc, #380]	@ (81027f4 <HAL_DMA_Init+0x654>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d072      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	4a5d      	ldr	r2, [pc, #372]	@ (81027f8 <HAL_DMA_Init+0x658>)
 8102682:	4293      	cmp	r3, r2
 8102684:	d06d      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	4a5c      	ldr	r2, [pc, #368]	@ (81027fc <HAL_DMA_Init+0x65c>)
 810268c:	4293      	cmp	r3, r2
 810268e:	d068      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	4a5a      	ldr	r2, [pc, #360]	@ (8102800 <HAL_DMA_Init+0x660>)
 8102696:	4293      	cmp	r3, r2
 8102698:	d063      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4a59      	ldr	r2, [pc, #356]	@ (8102804 <HAL_DMA_Init+0x664>)
 81026a0:	4293      	cmp	r3, r2
 81026a2:	d05e      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	4a57      	ldr	r2, [pc, #348]	@ (8102808 <HAL_DMA_Init+0x668>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d059      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	681b      	ldr	r3, [r3, #0]
 81026b2:	4a56      	ldr	r2, [pc, #344]	@ (810280c <HAL_DMA_Init+0x66c>)
 81026b4:	4293      	cmp	r3, r2
 81026b6:	d054      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	4a54      	ldr	r2, [pc, #336]	@ (8102810 <HAL_DMA_Init+0x670>)
 81026be:	4293      	cmp	r3, r2
 81026c0:	d04f      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	4a53      	ldr	r2, [pc, #332]	@ (8102814 <HAL_DMA_Init+0x674>)
 81026c8:	4293      	cmp	r3, r2
 81026ca:	d04a      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	4a51      	ldr	r2, [pc, #324]	@ (8102818 <HAL_DMA_Init+0x678>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d045      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	4a50      	ldr	r2, [pc, #320]	@ (810281c <HAL_DMA_Init+0x67c>)
 81026dc:	4293      	cmp	r3, r2
 81026de:	d040      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	4a4e      	ldr	r2, [pc, #312]	@ (8102820 <HAL_DMA_Init+0x680>)
 81026e6:	4293      	cmp	r3, r2
 81026e8:	d03b      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	4a4d      	ldr	r2, [pc, #308]	@ (8102824 <HAL_DMA_Init+0x684>)
 81026f0:	4293      	cmp	r3, r2
 81026f2:	d036      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	4a4b      	ldr	r2, [pc, #300]	@ (8102828 <HAL_DMA_Init+0x688>)
 81026fa:	4293      	cmp	r3, r2
 81026fc:	d031      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	4a4a      	ldr	r2, [pc, #296]	@ (810282c <HAL_DMA_Init+0x68c>)
 8102704:	4293      	cmp	r3, r2
 8102706:	d02c      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	4a48      	ldr	r2, [pc, #288]	@ (8102830 <HAL_DMA_Init+0x690>)
 810270e:	4293      	cmp	r3, r2
 8102710:	d027      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	4a47      	ldr	r2, [pc, #284]	@ (8102834 <HAL_DMA_Init+0x694>)
 8102718:	4293      	cmp	r3, r2
 810271a:	d022      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	4a45      	ldr	r2, [pc, #276]	@ (8102838 <HAL_DMA_Init+0x698>)
 8102722:	4293      	cmp	r3, r2
 8102724:	d01d      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	4a44      	ldr	r2, [pc, #272]	@ (810283c <HAL_DMA_Init+0x69c>)
 810272c:	4293      	cmp	r3, r2
 810272e:	d018      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	4a42      	ldr	r2, [pc, #264]	@ (8102840 <HAL_DMA_Init+0x6a0>)
 8102736:	4293      	cmp	r3, r2
 8102738:	d013      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	4a41      	ldr	r2, [pc, #260]	@ (8102844 <HAL_DMA_Init+0x6a4>)
 8102740:	4293      	cmp	r3, r2
 8102742:	d00e      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	4a3f      	ldr	r2, [pc, #252]	@ (8102848 <HAL_DMA_Init+0x6a8>)
 810274a:	4293      	cmp	r3, r2
 810274c:	d009      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	681b      	ldr	r3, [r3, #0]
 8102752:	4a3e      	ldr	r2, [pc, #248]	@ (810284c <HAL_DMA_Init+0x6ac>)
 8102754:	4293      	cmp	r3, r2
 8102756:	d004      	beq.n	8102762 <HAL_DMA_Init+0x5c2>
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	4a3c      	ldr	r2, [pc, #240]	@ (8102850 <HAL_DMA_Init+0x6b0>)
 810275e:	4293      	cmp	r3, r2
 8102760:	d101      	bne.n	8102766 <HAL_DMA_Init+0x5c6>
 8102762:	2301      	movs	r3, #1
 8102764:	e000      	b.n	8102768 <HAL_DMA_Init+0x5c8>
 8102766:	2300      	movs	r3, #0
 8102768:	2b00      	cmp	r3, #0
 810276a:	d032      	beq.n	81027d2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 810276c:	6878      	ldr	r0, [r7, #4]
 810276e:	f001 ff3f 	bl	81045f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	689b      	ldr	r3, [r3, #8]
 8102776:	2b80      	cmp	r3, #128	@ 0x80
 8102778:	d102      	bne.n	8102780 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	2200      	movs	r2, #0
 810277e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	685a      	ldr	r2, [r3, #4]
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102788:	b2d2      	uxtb	r2, r2
 810278a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102790:	687a      	ldr	r2, [r7, #4]
 8102792:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8102794:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	685b      	ldr	r3, [r3, #4]
 810279a:	2b00      	cmp	r3, #0
 810279c:	d010      	beq.n	81027c0 <HAL_DMA_Init+0x620>
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	685b      	ldr	r3, [r3, #4]
 81027a2:	2b08      	cmp	r3, #8
 81027a4:	d80c      	bhi.n	81027c0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81027a6:	6878      	ldr	r0, [r7, #4]
 81027a8:	f001 ffbc 	bl	8104724 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81027b0:	2200      	movs	r2, #0
 81027b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81027b8:	687a      	ldr	r2, [r7, #4]
 81027ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81027bc:	605a      	str	r2, [r3, #4]
 81027be:	e008      	b.n	81027d2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	2200      	movs	r2, #0
 81027c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	2200      	movs	r2, #0
 81027ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	2200      	movs	r2, #0
 81027d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	2200      	movs	r2, #0
 81027d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	2201      	movs	r2, #1
 81027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 81027e0:	2300      	movs	r3, #0
}
 81027e2:	4618      	mov	r0, r3
 81027e4:	3718      	adds	r7, #24
 81027e6:	46bd      	mov	sp, r7
 81027e8:	bd80      	pop	{r7, pc}
 81027ea:	bf00      	nop
 81027ec:	a7fdabf8 	.word	0xa7fdabf8
 81027f0:	cccccccd 	.word	0xcccccccd
 81027f4:	40020010 	.word	0x40020010
 81027f8:	40020028 	.word	0x40020028
 81027fc:	40020040 	.word	0x40020040
 8102800:	40020058 	.word	0x40020058
 8102804:	40020070 	.word	0x40020070
 8102808:	40020088 	.word	0x40020088
 810280c:	400200a0 	.word	0x400200a0
 8102810:	400200b8 	.word	0x400200b8
 8102814:	40020410 	.word	0x40020410
 8102818:	40020428 	.word	0x40020428
 810281c:	40020440 	.word	0x40020440
 8102820:	40020458 	.word	0x40020458
 8102824:	40020470 	.word	0x40020470
 8102828:	40020488 	.word	0x40020488
 810282c:	400204a0 	.word	0x400204a0
 8102830:	400204b8 	.word	0x400204b8
 8102834:	58025408 	.word	0x58025408
 8102838:	5802541c 	.word	0x5802541c
 810283c:	58025430 	.word	0x58025430
 8102840:	58025444 	.word	0x58025444
 8102844:	58025458 	.word	0x58025458
 8102848:	5802546c 	.word	0x5802546c
 810284c:	58025480 	.word	0x58025480
 8102850:	58025494 	.word	0x58025494

08102854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102854:	b580      	push	{r7, lr}
 8102856:	b086      	sub	sp, #24
 8102858:	af00      	add	r7, sp, #0
 810285a:	60f8      	str	r0, [r7, #12]
 810285c:	60b9      	str	r1, [r7, #8]
 810285e:	607a      	str	r2, [r7, #4]
 8102860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102862:	2300      	movs	r3, #0
 8102864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102866:	68fb      	ldr	r3, [r7, #12]
 8102868:	2b00      	cmp	r3, #0
 810286a:	d101      	bne.n	8102870 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 810286c:	2301      	movs	r3, #1
 810286e:	e226      	b.n	8102cbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8102876:	2b01      	cmp	r3, #1
 8102878:	d101      	bne.n	810287e <HAL_DMA_Start_IT+0x2a>
 810287a:	2302      	movs	r3, #2
 810287c:	e21f      	b.n	8102cbe <HAL_DMA_Start_IT+0x46a>
 810287e:	68fb      	ldr	r3, [r7, #12]
 8102880:	2201      	movs	r2, #1
 8102882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810288c:	b2db      	uxtb	r3, r3
 810288e:	2b01      	cmp	r3, #1
 8102890:	f040 820a 	bne.w	8102ca8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102894:	68fb      	ldr	r3, [r7, #12]
 8102896:	2202      	movs	r2, #2
 8102898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810289c:	68fb      	ldr	r3, [r7, #12]
 810289e:	2200      	movs	r2, #0
 81028a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	4a68      	ldr	r2, [pc, #416]	@ (8102a48 <HAL_DMA_Start_IT+0x1f4>)
 81028a8:	4293      	cmp	r3, r2
 81028aa:	d04a      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a66      	ldr	r2, [pc, #408]	@ (8102a4c <HAL_DMA_Start_IT+0x1f8>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d045      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028b6:	68fb      	ldr	r3, [r7, #12]
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a65      	ldr	r2, [pc, #404]	@ (8102a50 <HAL_DMA_Start_IT+0x1fc>)
 81028bc:	4293      	cmp	r3, r2
 81028be:	d040      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028c0:	68fb      	ldr	r3, [r7, #12]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a63      	ldr	r2, [pc, #396]	@ (8102a54 <HAL_DMA_Start_IT+0x200>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d03b      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	4a62      	ldr	r2, [pc, #392]	@ (8102a58 <HAL_DMA_Start_IT+0x204>)
 81028d0:	4293      	cmp	r3, r2
 81028d2:	d036      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a60      	ldr	r2, [pc, #384]	@ (8102a5c <HAL_DMA_Start_IT+0x208>)
 81028da:	4293      	cmp	r3, r2
 81028dc:	d031      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8102a60 <HAL_DMA_Start_IT+0x20c>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	d02c      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028e8:	68fb      	ldr	r3, [r7, #12]
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	4a5d      	ldr	r2, [pc, #372]	@ (8102a64 <HAL_DMA_Start_IT+0x210>)
 81028ee:	4293      	cmp	r3, r2
 81028f0:	d027      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028f2:	68fb      	ldr	r3, [r7, #12]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	4a5c      	ldr	r2, [pc, #368]	@ (8102a68 <HAL_DMA_Start_IT+0x214>)
 81028f8:	4293      	cmp	r3, r2
 81028fa:	d022      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	4a5a      	ldr	r2, [pc, #360]	@ (8102a6c <HAL_DMA_Start_IT+0x218>)
 8102902:	4293      	cmp	r3, r2
 8102904:	d01d      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 8102906:	68fb      	ldr	r3, [r7, #12]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	4a59      	ldr	r2, [pc, #356]	@ (8102a70 <HAL_DMA_Start_IT+0x21c>)
 810290c:	4293      	cmp	r3, r2
 810290e:	d018      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	4a57      	ldr	r2, [pc, #348]	@ (8102a74 <HAL_DMA_Start_IT+0x220>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d013      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4a56      	ldr	r2, [pc, #344]	@ (8102a78 <HAL_DMA_Start_IT+0x224>)
 8102920:	4293      	cmp	r3, r2
 8102922:	d00e      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	4a54      	ldr	r2, [pc, #336]	@ (8102a7c <HAL_DMA_Start_IT+0x228>)
 810292a:	4293      	cmp	r3, r2
 810292c:	d009      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	4a53      	ldr	r2, [pc, #332]	@ (8102a80 <HAL_DMA_Start_IT+0x22c>)
 8102934:	4293      	cmp	r3, r2
 8102936:	d004      	beq.n	8102942 <HAL_DMA_Start_IT+0xee>
 8102938:	68fb      	ldr	r3, [r7, #12]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	4a51      	ldr	r2, [pc, #324]	@ (8102a84 <HAL_DMA_Start_IT+0x230>)
 810293e:	4293      	cmp	r3, r2
 8102940:	d108      	bne.n	8102954 <HAL_DMA_Start_IT+0x100>
 8102942:	68fb      	ldr	r3, [r7, #12]
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	681a      	ldr	r2, [r3, #0]
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	f022 0201 	bic.w	r2, r2, #1
 8102950:	601a      	str	r2, [r3, #0]
 8102952:	e007      	b.n	8102964 <HAL_DMA_Start_IT+0x110>
 8102954:	68fb      	ldr	r3, [r7, #12]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	681a      	ldr	r2, [r3, #0]
 810295a:	68fb      	ldr	r3, [r7, #12]
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	f022 0201 	bic.w	r2, r2, #1
 8102962:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102964:	683b      	ldr	r3, [r7, #0]
 8102966:	687a      	ldr	r2, [r7, #4]
 8102968:	68b9      	ldr	r1, [r7, #8]
 810296a:	68f8      	ldr	r0, [r7, #12]
 810296c:	f001 fb66 	bl	810403c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a34      	ldr	r2, [pc, #208]	@ (8102a48 <HAL_DMA_Start_IT+0x1f4>)
 8102976:	4293      	cmp	r3, r2
 8102978:	d04a      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	4a33      	ldr	r2, [pc, #204]	@ (8102a4c <HAL_DMA_Start_IT+0x1f8>)
 8102980:	4293      	cmp	r3, r2
 8102982:	d045      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 8102984:	68fb      	ldr	r3, [r7, #12]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a31      	ldr	r2, [pc, #196]	@ (8102a50 <HAL_DMA_Start_IT+0x1fc>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d040      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a30      	ldr	r2, [pc, #192]	@ (8102a54 <HAL_DMA_Start_IT+0x200>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d03b      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 8102998:	68fb      	ldr	r3, [r7, #12]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a2e      	ldr	r2, [pc, #184]	@ (8102a58 <HAL_DMA_Start_IT+0x204>)
 810299e:	4293      	cmp	r3, r2
 81029a0:	d036      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029a2:	68fb      	ldr	r3, [r7, #12]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a2d      	ldr	r2, [pc, #180]	@ (8102a5c <HAL_DMA_Start_IT+0x208>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d031      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a2b      	ldr	r2, [pc, #172]	@ (8102a60 <HAL_DMA_Start_IT+0x20c>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d02c      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a2a      	ldr	r2, [pc, #168]	@ (8102a64 <HAL_DMA_Start_IT+0x210>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d027      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029c0:	68fb      	ldr	r3, [r7, #12]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a28      	ldr	r2, [pc, #160]	@ (8102a68 <HAL_DMA_Start_IT+0x214>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d022      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	4a27      	ldr	r2, [pc, #156]	@ (8102a6c <HAL_DMA_Start_IT+0x218>)
 81029d0:	4293      	cmp	r3, r2
 81029d2:	d01d      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029d4:	68fb      	ldr	r3, [r7, #12]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a25      	ldr	r2, [pc, #148]	@ (8102a70 <HAL_DMA_Start_IT+0x21c>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d018      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029de:	68fb      	ldr	r3, [r7, #12]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a24      	ldr	r2, [pc, #144]	@ (8102a74 <HAL_DMA_Start_IT+0x220>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d013      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029e8:	68fb      	ldr	r3, [r7, #12]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a22      	ldr	r2, [pc, #136]	@ (8102a78 <HAL_DMA_Start_IT+0x224>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d00e      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029f2:	68fb      	ldr	r3, [r7, #12]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a21      	ldr	r2, [pc, #132]	@ (8102a7c <HAL_DMA_Start_IT+0x228>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d009      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	4a1f      	ldr	r2, [pc, #124]	@ (8102a80 <HAL_DMA_Start_IT+0x22c>)
 8102a02:	4293      	cmp	r3, r2
 8102a04:	d004      	beq.n	8102a10 <HAL_DMA_Start_IT+0x1bc>
 8102a06:	68fb      	ldr	r3, [r7, #12]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8102a84 <HAL_DMA_Start_IT+0x230>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d101      	bne.n	8102a14 <HAL_DMA_Start_IT+0x1c0>
 8102a10:	2301      	movs	r3, #1
 8102a12:	e000      	b.n	8102a16 <HAL_DMA_Start_IT+0x1c2>
 8102a14:	2300      	movs	r3, #0
 8102a16:	2b00      	cmp	r3, #0
 8102a18:	d036      	beq.n	8102a88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102a1a:	68fb      	ldr	r3, [r7, #12]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	f023 021e 	bic.w	r2, r3, #30
 8102a24:	68fb      	ldr	r3, [r7, #12]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	f042 0216 	orr.w	r2, r2, #22
 8102a2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102a2e:	68fb      	ldr	r3, [r7, #12]
 8102a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102a32:	2b00      	cmp	r3, #0
 8102a34:	d03e      	beq.n	8102ab4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102a36:	68fb      	ldr	r3, [r7, #12]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	681a      	ldr	r2, [r3, #0]
 8102a3c:	68fb      	ldr	r3, [r7, #12]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	f042 0208 	orr.w	r2, r2, #8
 8102a44:	601a      	str	r2, [r3, #0]
 8102a46:	e035      	b.n	8102ab4 <HAL_DMA_Start_IT+0x260>
 8102a48:	40020010 	.word	0x40020010
 8102a4c:	40020028 	.word	0x40020028
 8102a50:	40020040 	.word	0x40020040
 8102a54:	40020058 	.word	0x40020058
 8102a58:	40020070 	.word	0x40020070
 8102a5c:	40020088 	.word	0x40020088
 8102a60:	400200a0 	.word	0x400200a0
 8102a64:	400200b8 	.word	0x400200b8
 8102a68:	40020410 	.word	0x40020410
 8102a6c:	40020428 	.word	0x40020428
 8102a70:	40020440 	.word	0x40020440
 8102a74:	40020458 	.word	0x40020458
 8102a78:	40020470 	.word	0x40020470
 8102a7c:	40020488 	.word	0x40020488
 8102a80:	400204a0 	.word	0x400204a0
 8102a84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102a88:	68fb      	ldr	r3, [r7, #12]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	f023 020e 	bic.w	r2, r3, #14
 8102a92:	68fb      	ldr	r3, [r7, #12]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	f042 020a 	orr.w	r2, r2, #10
 8102a9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102a9c:	68fb      	ldr	r3, [r7, #12]
 8102a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d007      	beq.n	8102ab4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102aa4:	68fb      	ldr	r3, [r7, #12]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	681a      	ldr	r2, [r3, #0]
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	f042 0204 	orr.w	r2, r2, #4
 8102ab2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ab4:	68fb      	ldr	r3, [r7, #12]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	4a83      	ldr	r2, [pc, #524]	@ (8102cc8 <HAL_DMA_Start_IT+0x474>)
 8102aba:	4293      	cmp	r3, r2
 8102abc:	d072      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	4a82      	ldr	r2, [pc, #520]	@ (8102ccc <HAL_DMA_Start_IT+0x478>)
 8102ac4:	4293      	cmp	r3, r2
 8102ac6:	d06d      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	4a80      	ldr	r2, [pc, #512]	@ (8102cd0 <HAL_DMA_Start_IT+0x47c>)
 8102ace:	4293      	cmp	r3, r2
 8102ad0:	d068      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	4a7f      	ldr	r2, [pc, #508]	@ (8102cd4 <HAL_DMA_Start_IT+0x480>)
 8102ad8:	4293      	cmp	r3, r2
 8102ada:	d063      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8102cd8 <HAL_DMA_Start_IT+0x484>)
 8102ae2:	4293      	cmp	r3, r2
 8102ae4:	d05e      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102ae6:	68fb      	ldr	r3, [r7, #12]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a7c      	ldr	r2, [pc, #496]	@ (8102cdc <HAL_DMA_Start_IT+0x488>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	d059      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102af0:	68fb      	ldr	r3, [r7, #12]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	4a7a      	ldr	r2, [pc, #488]	@ (8102ce0 <HAL_DMA_Start_IT+0x48c>)
 8102af6:	4293      	cmp	r3, r2
 8102af8:	d054      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	4a79      	ldr	r2, [pc, #484]	@ (8102ce4 <HAL_DMA_Start_IT+0x490>)
 8102b00:	4293      	cmp	r3, r2
 8102b02:	d04f      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	4a77      	ldr	r2, [pc, #476]	@ (8102ce8 <HAL_DMA_Start_IT+0x494>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d04a      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b0e:	68fb      	ldr	r3, [r7, #12]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	4a76      	ldr	r2, [pc, #472]	@ (8102cec <HAL_DMA_Start_IT+0x498>)
 8102b14:	4293      	cmp	r3, r2
 8102b16:	d045      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a74      	ldr	r2, [pc, #464]	@ (8102cf0 <HAL_DMA_Start_IT+0x49c>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d040      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b22:	68fb      	ldr	r3, [r7, #12]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4a73      	ldr	r2, [pc, #460]	@ (8102cf4 <HAL_DMA_Start_IT+0x4a0>)
 8102b28:	4293      	cmp	r3, r2
 8102b2a:	d03b      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	681b      	ldr	r3, [r3, #0]
 8102b30:	4a71      	ldr	r2, [pc, #452]	@ (8102cf8 <HAL_DMA_Start_IT+0x4a4>)
 8102b32:	4293      	cmp	r3, r2
 8102b34:	d036      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b36:	68fb      	ldr	r3, [r7, #12]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	4a70      	ldr	r2, [pc, #448]	@ (8102cfc <HAL_DMA_Start_IT+0x4a8>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d031      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	4a6e      	ldr	r2, [pc, #440]	@ (8102d00 <HAL_DMA_Start_IT+0x4ac>)
 8102b46:	4293      	cmp	r3, r2
 8102b48:	d02c      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b4a:	68fb      	ldr	r3, [r7, #12]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a6d      	ldr	r2, [pc, #436]	@ (8102d04 <HAL_DMA_Start_IT+0x4b0>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d027      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	4a6b      	ldr	r2, [pc, #428]	@ (8102d08 <HAL_DMA_Start_IT+0x4b4>)
 8102b5a:	4293      	cmp	r3, r2
 8102b5c:	d022      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b5e:	68fb      	ldr	r3, [r7, #12]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	4a6a      	ldr	r2, [pc, #424]	@ (8102d0c <HAL_DMA_Start_IT+0x4b8>)
 8102b64:	4293      	cmp	r3, r2
 8102b66:	d01d      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b68:	68fb      	ldr	r3, [r7, #12]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	4a68      	ldr	r2, [pc, #416]	@ (8102d10 <HAL_DMA_Start_IT+0x4bc>)
 8102b6e:	4293      	cmp	r3, r2
 8102b70:	d018      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4a67      	ldr	r2, [pc, #412]	@ (8102d14 <HAL_DMA_Start_IT+0x4c0>)
 8102b78:	4293      	cmp	r3, r2
 8102b7a:	d013      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a65      	ldr	r2, [pc, #404]	@ (8102d18 <HAL_DMA_Start_IT+0x4c4>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d00e      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4a64      	ldr	r2, [pc, #400]	@ (8102d1c <HAL_DMA_Start_IT+0x4c8>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	d009      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b90:	68fb      	ldr	r3, [r7, #12]
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	4a62      	ldr	r2, [pc, #392]	@ (8102d20 <HAL_DMA_Start_IT+0x4cc>)
 8102b96:	4293      	cmp	r3, r2
 8102b98:	d004      	beq.n	8102ba4 <HAL_DMA_Start_IT+0x350>
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	4a61      	ldr	r2, [pc, #388]	@ (8102d24 <HAL_DMA_Start_IT+0x4d0>)
 8102ba0:	4293      	cmp	r3, r2
 8102ba2:	d101      	bne.n	8102ba8 <HAL_DMA_Start_IT+0x354>
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	e000      	b.n	8102baa <HAL_DMA_Start_IT+0x356>
 8102ba8:	2300      	movs	r3, #0
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d01a      	beq.n	8102be4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	d007      	beq.n	8102bcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102bc0:	681a      	ldr	r2, [r3, #0]
 8102bc2:	68fb      	ldr	r3, [r7, #12]
 8102bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102bca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102bcc:	68fb      	ldr	r3, [r7, #12]
 8102bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102bd0:	2b00      	cmp	r3, #0
 8102bd2:	d007      	beq.n	8102be4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102bd4:	68fb      	ldr	r3, [r7, #12]
 8102bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102bd8:	681a      	ldr	r2, [r3, #0]
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102be2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	4a37      	ldr	r2, [pc, #220]	@ (8102cc8 <HAL_DMA_Start_IT+0x474>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d04a      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102bee:	68fb      	ldr	r3, [r7, #12]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4a36      	ldr	r2, [pc, #216]	@ (8102ccc <HAL_DMA_Start_IT+0x478>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d045      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	4a34      	ldr	r2, [pc, #208]	@ (8102cd0 <HAL_DMA_Start_IT+0x47c>)
 8102bfe:	4293      	cmp	r3, r2
 8102c00:	d040      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	4a33      	ldr	r2, [pc, #204]	@ (8102cd4 <HAL_DMA_Start_IT+0x480>)
 8102c08:	4293      	cmp	r3, r2
 8102c0a:	d03b      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	4a31      	ldr	r2, [pc, #196]	@ (8102cd8 <HAL_DMA_Start_IT+0x484>)
 8102c12:	4293      	cmp	r3, r2
 8102c14:	d036      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a30      	ldr	r2, [pc, #192]	@ (8102cdc <HAL_DMA_Start_IT+0x488>)
 8102c1c:	4293      	cmp	r3, r2
 8102c1e:	d031      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4a2e      	ldr	r2, [pc, #184]	@ (8102ce0 <HAL_DMA_Start_IT+0x48c>)
 8102c26:	4293      	cmp	r3, r2
 8102c28:	d02c      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c2a:	68fb      	ldr	r3, [r7, #12]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8102ce4 <HAL_DMA_Start_IT+0x490>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d027      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	4a2b      	ldr	r2, [pc, #172]	@ (8102ce8 <HAL_DMA_Start_IT+0x494>)
 8102c3a:	4293      	cmp	r3, r2
 8102c3c:	d022      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	4a2a      	ldr	r2, [pc, #168]	@ (8102cec <HAL_DMA_Start_IT+0x498>)
 8102c44:	4293      	cmp	r3, r2
 8102c46:	d01d      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c48:	68fb      	ldr	r3, [r7, #12]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a28      	ldr	r2, [pc, #160]	@ (8102cf0 <HAL_DMA_Start_IT+0x49c>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d018      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	4a27      	ldr	r2, [pc, #156]	@ (8102cf4 <HAL_DMA_Start_IT+0x4a0>)
 8102c58:	4293      	cmp	r3, r2
 8102c5a:	d013      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c5c:	68fb      	ldr	r3, [r7, #12]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	4a25      	ldr	r2, [pc, #148]	@ (8102cf8 <HAL_DMA_Start_IT+0x4a4>)
 8102c62:	4293      	cmp	r3, r2
 8102c64:	d00e      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c66:	68fb      	ldr	r3, [r7, #12]
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	4a24      	ldr	r2, [pc, #144]	@ (8102cfc <HAL_DMA_Start_IT+0x4a8>)
 8102c6c:	4293      	cmp	r3, r2
 8102c6e:	d009      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	4a22      	ldr	r2, [pc, #136]	@ (8102d00 <HAL_DMA_Start_IT+0x4ac>)
 8102c76:	4293      	cmp	r3, r2
 8102c78:	d004      	beq.n	8102c84 <HAL_DMA_Start_IT+0x430>
 8102c7a:	68fb      	ldr	r3, [r7, #12]
 8102c7c:	681b      	ldr	r3, [r3, #0]
 8102c7e:	4a21      	ldr	r2, [pc, #132]	@ (8102d04 <HAL_DMA_Start_IT+0x4b0>)
 8102c80:	4293      	cmp	r3, r2
 8102c82:	d108      	bne.n	8102c96 <HAL_DMA_Start_IT+0x442>
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	681a      	ldr	r2, [r3, #0]
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	f042 0201 	orr.w	r2, r2, #1
 8102c92:	601a      	str	r2, [r3, #0]
 8102c94:	e012      	b.n	8102cbc <HAL_DMA_Start_IT+0x468>
 8102c96:	68fb      	ldr	r3, [r7, #12]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	681a      	ldr	r2, [r3, #0]
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	f042 0201 	orr.w	r2, r2, #1
 8102ca4:	601a      	str	r2, [r3, #0]
 8102ca6:	e009      	b.n	8102cbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102cae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	2200      	movs	r2, #0
 8102cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8102cb8:	2301      	movs	r3, #1
 8102cba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8102cbe:	4618      	mov	r0, r3
 8102cc0:	3718      	adds	r7, #24
 8102cc2:	46bd      	mov	sp, r7
 8102cc4:	bd80      	pop	{r7, pc}
 8102cc6:	bf00      	nop
 8102cc8:	40020010 	.word	0x40020010
 8102ccc:	40020028 	.word	0x40020028
 8102cd0:	40020040 	.word	0x40020040
 8102cd4:	40020058 	.word	0x40020058
 8102cd8:	40020070 	.word	0x40020070
 8102cdc:	40020088 	.word	0x40020088
 8102ce0:	400200a0 	.word	0x400200a0
 8102ce4:	400200b8 	.word	0x400200b8
 8102ce8:	40020410 	.word	0x40020410
 8102cec:	40020428 	.word	0x40020428
 8102cf0:	40020440 	.word	0x40020440
 8102cf4:	40020458 	.word	0x40020458
 8102cf8:	40020470 	.word	0x40020470
 8102cfc:	40020488 	.word	0x40020488
 8102d00:	400204a0 	.word	0x400204a0
 8102d04:	400204b8 	.word	0x400204b8
 8102d08:	58025408 	.word	0x58025408
 8102d0c:	5802541c 	.word	0x5802541c
 8102d10:	58025430 	.word	0x58025430
 8102d14:	58025444 	.word	0x58025444
 8102d18:	58025458 	.word	0x58025458
 8102d1c:	5802546c 	.word	0x5802546c
 8102d20:	58025480 	.word	0x58025480
 8102d24:	58025494 	.word	0x58025494

08102d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102d28:	b580      	push	{r7, lr}
 8102d2a:	b084      	sub	sp, #16
 8102d2c:	af00      	add	r7, sp, #0
 8102d2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	d101      	bne.n	8102d3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102d36:	2301      	movs	r3, #1
 8102d38:	e237      	b.n	81031aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8102d40:	b2db      	uxtb	r3, r3
 8102d42:	2b02      	cmp	r3, #2
 8102d44:	d004      	beq.n	8102d50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	2280      	movs	r2, #128	@ 0x80
 8102d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8102d4c:	2301      	movs	r3, #1
 8102d4e:	e22c      	b.n	81031aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4a5c      	ldr	r2, [pc, #368]	@ (8102ec8 <HAL_DMA_Abort_IT+0x1a0>)
 8102d56:	4293      	cmp	r3, r2
 8102d58:	d04a      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8102ecc <HAL_DMA_Abort_IT+0x1a4>)
 8102d60:	4293      	cmp	r3, r2
 8102d62:	d045      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	4a59      	ldr	r2, [pc, #356]	@ (8102ed0 <HAL_DMA_Abort_IT+0x1a8>)
 8102d6a:	4293      	cmp	r3, r2
 8102d6c:	d040      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	4a58      	ldr	r2, [pc, #352]	@ (8102ed4 <HAL_DMA_Abort_IT+0x1ac>)
 8102d74:	4293      	cmp	r3, r2
 8102d76:	d03b      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	4a56      	ldr	r2, [pc, #344]	@ (8102ed8 <HAL_DMA_Abort_IT+0x1b0>)
 8102d7e:	4293      	cmp	r3, r2
 8102d80:	d036      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a55      	ldr	r2, [pc, #340]	@ (8102edc <HAL_DMA_Abort_IT+0x1b4>)
 8102d88:	4293      	cmp	r3, r2
 8102d8a:	d031      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	4a53      	ldr	r2, [pc, #332]	@ (8102ee0 <HAL_DMA_Abort_IT+0x1b8>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d02c      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a52      	ldr	r2, [pc, #328]	@ (8102ee4 <HAL_DMA_Abort_IT+0x1bc>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d027      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	4a50      	ldr	r2, [pc, #320]	@ (8102ee8 <HAL_DMA_Abort_IT+0x1c0>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d022      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	4a4f      	ldr	r2, [pc, #316]	@ (8102eec <HAL_DMA_Abort_IT+0x1c4>)
 8102db0:	4293      	cmp	r3, r2
 8102db2:	d01d      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a4d      	ldr	r2, [pc, #308]	@ (8102ef0 <HAL_DMA_Abort_IT+0x1c8>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d018      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8102ef4 <HAL_DMA_Abort_IT+0x1cc>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d013      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8102ef8 <HAL_DMA_Abort_IT+0x1d0>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d00e      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a49      	ldr	r2, [pc, #292]	@ (8102efc <HAL_DMA_Abort_IT+0x1d4>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d009      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a47      	ldr	r2, [pc, #284]	@ (8102f00 <HAL_DMA_Abort_IT+0x1d8>)
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d004      	beq.n	8102df0 <HAL_DMA_Abort_IT+0xc8>
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4a46      	ldr	r2, [pc, #280]	@ (8102f04 <HAL_DMA_Abort_IT+0x1dc>)
 8102dec:	4293      	cmp	r3, r2
 8102dee:	d101      	bne.n	8102df4 <HAL_DMA_Abort_IT+0xcc>
 8102df0:	2301      	movs	r3, #1
 8102df2:	e000      	b.n	8102df6 <HAL_DMA_Abort_IT+0xce>
 8102df4:	2300      	movs	r3, #0
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	f000 8086 	beq.w	8102f08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	2204      	movs	r2, #4
 8102e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	4a2f      	ldr	r2, [pc, #188]	@ (8102ec8 <HAL_DMA_Abort_IT+0x1a0>)
 8102e0a:	4293      	cmp	r3, r2
 8102e0c:	d04a      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4a2e      	ldr	r2, [pc, #184]	@ (8102ecc <HAL_DMA_Abort_IT+0x1a4>)
 8102e14:	4293      	cmp	r3, r2
 8102e16:	d045      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8102ed0 <HAL_DMA_Abort_IT+0x1a8>)
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d040      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	4a2b      	ldr	r2, [pc, #172]	@ (8102ed4 <HAL_DMA_Abort_IT+0x1ac>)
 8102e28:	4293      	cmp	r3, r2
 8102e2a:	d03b      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	4a29      	ldr	r2, [pc, #164]	@ (8102ed8 <HAL_DMA_Abort_IT+0x1b0>)
 8102e32:	4293      	cmp	r3, r2
 8102e34:	d036      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	4a28      	ldr	r2, [pc, #160]	@ (8102edc <HAL_DMA_Abort_IT+0x1b4>)
 8102e3c:	4293      	cmp	r3, r2
 8102e3e:	d031      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	4a26      	ldr	r2, [pc, #152]	@ (8102ee0 <HAL_DMA_Abort_IT+0x1b8>)
 8102e46:	4293      	cmp	r3, r2
 8102e48:	d02c      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	681b      	ldr	r3, [r3, #0]
 8102e4e:	4a25      	ldr	r2, [pc, #148]	@ (8102ee4 <HAL_DMA_Abort_IT+0x1bc>)
 8102e50:	4293      	cmp	r3, r2
 8102e52:	d027      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	4a23      	ldr	r2, [pc, #140]	@ (8102ee8 <HAL_DMA_Abort_IT+0x1c0>)
 8102e5a:	4293      	cmp	r3, r2
 8102e5c:	d022      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	4a22      	ldr	r2, [pc, #136]	@ (8102eec <HAL_DMA_Abort_IT+0x1c4>)
 8102e64:	4293      	cmp	r3, r2
 8102e66:	d01d      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	4a20      	ldr	r2, [pc, #128]	@ (8102ef0 <HAL_DMA_Abort_IT+0x1c8>)
 8102e6e:	4293      	cmp	r3, r2
 8102e70:	d018      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	4a1f      	ldr	r2, [pc, #124]	@ (8102ef4 <HAL_DMA_Abort_IT+0x1cc>)
 8102e78:	4293      	cmp	r3, r2
 8102e7a:	d013      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	4a1d      	ldr	r2, [pc, #116]	@ (8102ef8 <HAL_DMA_Abort_IT+0x1d0>)
 8102e82:	4293      	cmp	r3, r2
 8102e84:	d00e      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8102efc <HAL_DMA_Abort_IT+0x1d4>)
 8102e8c:	4293      	cmp	r3, r2
 8102e8e:	d009      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	4a1a      	ldr	r2, [pc, #104]	@ (8102f00 <HAL_DMA_Abort_IT+0x1d8>)
 8102e96:	4293      	cmp	r3, r2
 8102e98:	d004      	beq.n	8102ea4 <HAL_DMA_Abort_IT+0x17c>
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	4a19      	ldr	r2, [pc, #100]	@ (8102f04 <HAL_DMA_Abort_IT+0x1dc>)
 8102ea0:	4293      	cmp	r3, r2
 8102ea2:	d108      	bne.n	8102eb6 <HAL_DMA_Abort_IT+0x18e>
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	681a      	ldr	r2, [r3, #0]
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	f022 0201 	bic.w	r2, r2, #1
 8102eb2:	601a      	str	r2, [r3, #0]
 8102eb4:	e178      	b.n	81031a8 <HAL_DMA_Abort_IT+0x480>
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	681a      	ldr	r2, [r3, #0]
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	f022 0201 	bic.w	r2, r2, #1
 8102ec4:	601a      	str	r2, [r3, #0]
 8102ec6:	e16f      	b.n	81031a8 <HAL_DMA_Abort_IT+0x480>
 8102ec8:	40020010 	.word	0x40020010
 8102ecc:	40020028 	.word	0x40020028
 8102ed0:	40020040 	.word	0x40020040
 8102ed4:	40020058 	.word	0x40020058
 8102ed8:	40020070 	.word	0x40020070
 8102edc:	40020088 	.word	0x40020088
 8102ee0:	400200a0 	.word	0x400200a0
 8102ee4:	400200b8 	.word	0x400200b8
 8102ee8:	40020410 	.word	0x40020410
 8102eec:	40020428 	.word	0x40020428
 8102ef0:	40020440 	.word	0x40020440
 8102ef4:	40020458 	.word	0x40020458
 8102ef8:	40020470 	.word	0x40020470
 8102efc:	40020488 	.word	0x40020488
 8102f00:	400204a0 	.word	0x400204a0
 8102f04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	681a      	ldr	r2, [r3, #0]
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	f022 020e 	bic.w	r2, r2, #14
 8102f16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	4a6c      	ldr	r2, [pc, #432]	@ (81030d0 <HAL_DMA_Abort_IT+0x3a8>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d04a      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a6b      	ldr	r2, [pc, #428]	@ (81030d4 <HAL_DMA_Abort_IT+0x3ac>)
 8102f28:	4293      	cmp	r3, r2
 8102f2a:	d045      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4a69      	ldr	r2, [pc, #420]	@ (81030d8 <HAL_DMA_Abort_IT+0x3b0>)
 8102f32:	4293      	cmp	r3, r2
 8102f34:	d040      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	4a68      	ldr	r2, [pc, #416]	@ (81030dc <HAL_DMA_Abort_IT+0x3b4>)
 8102f3c:	4293      	cmp	r3, r2
 8102f3e:	d03b      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4a66      	ldr	r2, [pc, #408]	@ (81030e0 <HAL_DMA_Abort_IT+0x3b8>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d036      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4a65      	ldr	r2, [pc, #404]	@ (81030e4 <HAL_DMA_Abort_IT+0x3bc>)
 8102f50:	4293      	cmp	r3, r2
 8102f52:	d031      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a63      	ldr	r2, [pc, #396]	@ (81030e8 <HAL_DMA_Abort_IT+0x3c0>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d02c      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4a62      	ldr	r2, [pc, #392]	@ (81030ec <HAL_DMA_Abort_IT+0x3c4>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d027      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a60      	ldr	r2, [pc, #384]	@ (81030f0 <HAL_DMA_Abort_IT+0x3c8>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d022      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a5f      	ldr	r2, [pc, #380]	@ (81030f4 <HAL_DMA_Abort_IT+0x3cc>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d01d      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a5d      	ldr	r2, [pc, #372]	@ (81030f8 <HAL_DMA_Abort_IT+0x3d0>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d018      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a5c      	ldr	r2, [pc, #368]	@ (81030fc <HAL_DMA_Abort_IT+0x3d4>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d013      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a5a      	ldr	r2, [pc, #360]	@ (8103100 <HAL_DMA_Abort_IT+0x3d8>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d00e      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a59      	ldr	r2, [pc, #356]	@ (8103104 <HAL_DMA_Abort_IT+0x3dc>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d009      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a57      	ldr	r2, [pc, #348]	@ (8103108 <HAL_DMA_Abort_IT+0x3e0>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d004      	beq.n	8102fb8 <HAL_DMA_Abort_IT+0x290>
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	4a56      	ldr	r2, [pc, #344]	@ (810310c <HAL_DMA_Abort_IT+0x3e4>)
 8102fb4:	4293      	cmp	r3, r2
 8102fb6:	d108      	bne.n	8102fca <HAL_DMA_Abort_IT+0x2a2>
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	681a      	ldr	r2, [r3, #0]
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	f022 0201 	bic.w	r2, r2, #1
 8102fc6:	601a      	str	r2, [r3, #0]
 8102fc8:	e007      	b.n	8102fda <HAL_DMA_Abort_IT+0x2b2>
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	681a      	ldr	r2, [r3, #0]
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	f022 0201 	bic.w	r2, r2, #1
 8102fd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a3c      	ldr	r2, [pc, #240]	@ (81030d0 <HAL_DMA_Abort_IT+0x3a8>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d072      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a3a      	ldr	r2, [pc, #232]	@ (81030d4 <HAL_DMA_Abort_IT+0x3ac>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d06d      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a39      	ldr	r2, [pc, #228]	@ (81030d8 <HAL_DMA_Abort_IT+0x3b0>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d068      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a37      	ldr	r2, [pc, #220]	@ (81030dc <HAL_DMA_Abort_IT+0x3b4>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d063      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4a36      	ldr	r2, [pc, #216]	@ (81030e0 <HAL_DMA_Abort_IT+0x3b8>)
 8103008:	4293      	cmp	r3, r2
 810300a:	d05e      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a34      	ldr	r2, [pc, #208]	@ (81030e4 <HAL_DMA_Abort_IT+0x3bc>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d059      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a33      	ldr	r2, [pc, #204]	@ (81030e8 <HAL_DMA_Abort_IT+0x3c0>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d054      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a31      	ldr	r2, [pc, #196]	@ (81030ec <HAL_DMA_Abort_IT+0x3c4>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d04f      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a30      	ldr	r2, [pc, #192]	@ (81030f0 <HAL_DMA_Abort_IT+0x3c8>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d04a      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a2e      	ldr	r2, [pc, #184]	@ (81030f4 <HAL_DMA_Abort_IT+0x3cc>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d045      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4a2d      	ldr	r2, [pc, #180]	@ (81030f8 <HAL_DMA_Abort_IT+0x3d0>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d040      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	4a2b      	ldr	r2, [pc, #172]	@ (81030fc <HAL_DMA_Abort_IT+0x3d4>)
 810304e:	4293      	cmp	r3, r2
 8103050:	d03b      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a2a      	ldr	r2, [pc, #168]	@ (8103100 <HAL_DMA_Abort_IT+0x3d8>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d036      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a28      	ldr	r2, [pc, #160]	@ (8103104 <HAL_DMA_Abort_IT+0x3dc>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d031      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a27      	ldr	r2, [pc, #156]	@ (8103108 <HAL_DMA_Abort_IT+0x3e0>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d02c      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	4a25      	ldr	r2, [pc, #148]	@ (810310c <HAL_DMA_Abort_IT+0x3e4>)
 8103076:	4293      	cmp	r3, r2
 8103078:	d027      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	4a24      	ldr	r2, [pc, #144]	@ (8103110 <HAL_DMA_Abort_IT+0x3e8>)
 8103080:	4293      	cmp	r3, r2
 8103082:	d022      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a22      	ldr	r2, [pc, #136]	@ (8103114 <HAL_DMA_Abort_IT+0x3ec>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d01d      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4a21      	ldr	r2, [pc, #132]	@ (8103118 <HAL_DMA_Abort_IT+0x3f0>)
 8103094:	4293      	cmp	r3, r2
 8103096:	d018      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a1f      	ldr	r2, [pc, #124]	@ (810311c <HAL_DMA_Abort_IT+0x3f4>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d013      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a1e      	ldr	r2, [pc, #120]	@ (8103120 <HAL_DMA_Abort_IT+0x3f8>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d00e      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a1c      	ldr	r2, [pc, #112]	@ (8103124 <HAL_DMA_Abort_IT+0x3fc>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d009      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	4a1b      	ldr	r2, [pc, #108]	@ (8103128 <HAL_DMA_Abort_IT+0x400>)
 81030bc:	4293      	cmp	r3, r2
 81030be:	d004      	beq.n	81030ca <HAL_DMA_Abort_IT+0x3a2>
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	4a19      	ldr	r2, [pc, #100]	@ (810312c <HAL_DMA_Abort_IT+0x404>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d132      	bne.n	8103130 <HAL_DMA_Abort_IT+0x408>
 81030ca:	2301      	movs	r3, #1
 81030cc:	e031      	b.n	8103132 <HAL_DMA_Abort_IT+0x40a>
 81030ce:	bf00      	nop
 81030d0:	40020010 	.word	0x40020010
 81030d4:	40020028 	.word	0x40020028
 81030d8:	40020040 	.word	0x40020040
 81030dc:	40020058 	.word	0x40020058
 81030e0:	40020070 	.word	0x40020070
 81030e4:	40020088 	.word	0x40020088
 81030e8:	400200a0 	.word	0x400200a0
 81030ec:	400200b8 	.word	0x400200b8
 81030f0:	40020410 	.word	0x40020410
 81030f4:	40020428 	.word	0x40020428
 81030f8:	40020440 	.word	0x40020440
 81030fc:	40020458 	.word	0x40020458
 8103100:	40020470 	.word	0x40020470
 8103104:	40020488 	.word	0x40020488
 8103108:	400204a0 	.word	0x400204a0
 810310c:	400204b8 	.word	0x400204b8
 8103110:	58025408 	.word	0x58025408
 8103114:	5802541c 	.word	0x5802541c
 8103118:	58025430 	.word	0x58025430
 810311c:	58025444 	.word	0x58025444
 8103120:	58025458 	.word	0x58025458
 8103124:	5802546c 	.word	0x5802546c
 8103128:	58025480 	.word	0x58025480
 810312c:	58025494 	.word	0x58025494
 8103130:	2300      	movs	r3, #0
 8103132:	2b00      	cmp	r3, #0
 8103134:	d028      	beq.n	8103188 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810313a:	681a      	ldr	r2, [r3, #0]
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103144:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810314a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103150:	f003 031f 	and.w	r3, r3, #31
 8103154:	2201      	movs	r2, #1
 8103156:	409a      	lsls	r2, r3
 8103158:	68fb      	ldr	r3, [r7, #12]
 810315a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103160:	687a      	ldr	r2, [r7, #4]
 8103162:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103164:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810316a:	2b00      	cmp	r3, #0
 810316c:	d00c      	beq.n	8103188 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103172:	681a      	ldr	r2, [r3, #0]
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810317c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103182:	687a      	ldr	r2, [r7, #4]
 8103184:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103186:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	2201      	movs	r2, #1
 810318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	2200      	movs	r2, #0
 8103194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810319c:	2b00      	cmp	r3, #0
 810319e:	d003      	beq.n	81031a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81031a4:	6878      	ldr	r0, [r7, #4]
 81031a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81031a8:	2300      	movs	r3, #0
}
 81031aa:	4618      	mov	r0, r3
 81031ac:	3710      	adds	r7, #16
 81031ae:	46bd      	mov	sp, r7
 81031b0:	bd80      	pop	{r7, pc}
 81031b2:	bf00      	nop

081031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81031b4:	b580      	push	{r7, lr}
 81031b6:	b08a      	sub	sp, #40	@ 0x28
 81031b8:	af00      	add	r7, sp, #0
 81031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81031bc:	2300      	movs	r3, #0
 81031be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81031c0:	4b67      	ldr	r3, [pc, #412]	@ (8103360 <HAL_DMA_IRQHandler+0x1ac>)
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a67      	ldr	r2, [pc, #412]	@ (8103364 <HAL_DMA_IRQHandler+0x1b0>)
 81031c6:	fba2 2303 	umull	r2, r3, r2, r3
 81031ca:	0a9b      	lsrs	r3, r3, #10
 81031cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81031d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81031d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81031da:	6a3b      	ldr	r3, [r7, #32]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81031e0:	69fb      	ldr	r3, [r7, #28]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	4a5f      	ldr	r2, [pc, #380]	@ (8103368 <HAL_DMA_IRQHandler+0x1b4>)
 81031ec:	4293      	cmp	r3, r2
 81031ee:	d04a      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	4a5d      	ldr	r2, [pc, #372]	@ (810336c <HAL_DMA_IRQHandler+0x1b8>)
 81031f6:	4293      	cmp	r3, r2
 81031f8:	d045      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a5c      	ldr	r2, [pc, #368]	@ (8103370 <HAL_DMA_IRQHandler+0x1bc>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d040      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	4a5a      	ldr	r2, [pc, #360]	@ (8103374 <HAL_DMA_IRQHandler+0x1c0>)
 810320a:	4293      	cmp	r3, r2
 810320c:	d03b      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	4a59      	ldr	r2, [pc, #356]	@ (8103378 <HAL_DMA_IRQHandler+0x1c4>)
 8103214:	4293      	cmp	r3, r2
 8103216:	d036      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	4a57      	ldr	r2, [pc, #348]	@ (810337c <HAL_DMA_IRQHandler+0x1c8>)
 810321e:	4293      	cmp	r3, r2
 8103220:	d031      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	4a56      	ldr	r2, [pc, #344]	@ (8103380 <HAL_DMA_IRQHandler+0x1cc>)
 8103228:	4293      	cmp	r3, r2
 810322a:	d02c      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	4a54      	ldr	r2, [pc, #336]	@ (8103384 <HAL_DMA_IRQHandler+0x1d0>)
 8103232:	4293      	cmp	r3, r2
 8103234:	d027      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	4a53      	ldr	r2, [pc, #332]	@ (8103388 <HAL_DMA_IRQHandler+0x1d4>)
 810323c:	4293      	cmp	r3, r2
 810323e:	d022      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	4a51      	ldr	r2, [pc, #324]	@ (810338c <HAL_DMA_IRQHandler+0x1d8>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d01d      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	4a50      	ldr	r2, [pc, #320]	@ (8103390 <HAL_DMA_IRQHandler+0x1dc>)
 8103250:	4293      	cmp	r3, r2
 8103252:	d018      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	4a4e      	ldr	r2, [pc, #312]	@ (8103394 <HAL_DMA_IRQHandler+0x1e0>)
 810325a:	4293      	cmp	r3, r2
 810325c:	d013      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a4d      	ldr	r2, [pc, #308]	@ (8103398 <HAL_DMA_IRQHandler+0x1e4>)
 8103264:	4293      	cmp	r3, r2
 8103266:	d00e      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4a4b      	ldr	r2, [pc, #300]	@ (810339c <HAL_DMA_IRQHandler+0x1e8>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d009      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a4a      	ldr	r2, [pc, #296]	@ (81033a0 <HAL_DMA_IRQHandler+0x1ec>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d004      	beq.n	8103286 <HAL_DMA_IRQHandler+0xd2>
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a48      	ldr	r2, [pc, #288]	@ (81033a4 <HAL_DMA_IRQHandler+0x1f0>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d101      	bne.n	810328a <HAL_DMA_IRQHandler+0xd6>
 8103286:	2301      	movs	r3, #1
 8103288:	e000      	b.n	810328c <HAL_DMA_IRQHandler+0xd8>
 810328a:	2300      	movs	r3, #0
 810328c:	2b00      	cmp	r3, #0
 810328e:	f000 842b 	beq.w	8103ae8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103296:	f003 031f 	and.w	r3, r3, #31
 810329a:	2208      	movs	r2, #8
 810329c:	409a      	lsls	r2, r3
 810329e:	69bb      	ldr	r3, [r7, #24]
 81032a0:	4013      	ands	r3, r2
 81032a2:	2b00      	cmp	r3, #0
 81032a4:	f000 80a2 	beq.w	81033ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a2e      	ldr	r2, [pc, #184]	@ (8103368 <HAL_DMA_IRQHandler+0x1b4>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d04a      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4a2d      	ldr	r2, [pc, #180]	@ (810336c <HAL_DMA_IRQHandler+0x1b8>)
 81032b8:	4293      	cmp	r3, r2
 81032ba:	d045      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8103370 <HAL_DMA_IRQHandler+0x1bc>)
 81032c2:	4293      	cmp	r3, r2
 81032c4:	d040      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	4a2a      	ldr	r2, [pc, #168]	@ (8103374 <HAL_DMA_IRQHandler+0x1c0>)
 81032cc:	4293      	cmp	r3, r2
 81032ce:	d03b      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	4a28      	ldr	r2, [pc, #160]	@ (8103378 <HAL_DMA_IRQHandler+0x1c4>)
 81032d6:	4293      	cmp	r3, r2
 81032d8:	d036      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a27      	ldr	r2, [pc, #156]	@ (810337c <HAL_DMA_IRQHandler+0x1c8>)
 81032e0:	4293      	cmp	r3, r2
 81032e2:	d031      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	4a25      	ldr	r2, [pc, #148]	@ (8103380 <HAL_DMA_IRQHandler+0x1cc>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d02c      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	4a24      	ldr	r2, [pc, #144]	@ (8103384 <HAL_DMA_IRQHandler+0x1d0>)
 81032f4:	4293      	cmp	r3, r2
 81032f6:	d027      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	4a22      	ldr	r2, [pc, #136]	@ (8103388 <HAL_DMA_IRQHandler+0x1d4>)
 81032fe:	4293      	cmp	r3, r2
 8103300:	d022      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	4a21      	ldr	r2, [pc, #132]	@ (810338c <HAL_DMA_IRQHandler+0x1d8>)
 8103308:	4293      	cmp	r3, r2
 810330a:	d01d      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	4a1f      	ldr	r2, [pc, #124]	@ (8103390 <HAL_DMA_IRQHandler+0x1dc>)
 8103312:	4293      	cmp	r3, r2
 8103314:	d018      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	4a1e      	ldr	r2, [pc, #120]	@ (8103394 <HAL_DMA_IRQHandler+0x1e0>)
 810331c:	4293      	cmp	r3, r2
 810331e:	d013      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	4a1c      	ldr	r2, [pc, #112]	@ (8103398 <HAL_DMA_IRQHandler+0x1e4>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d00e      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	4a1b      	ldr	r2, [pc, #108]	@ (810339c <HAL_DMA_IRQHandler+0x1e8>)
 8103330:	4293      	cmp	r3, r2
 8103332:	d009      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a19      	ldr	r2, [pc, #100]	@ (81033a0 <HAL_DMA_IRQHandler+0x1ec>)
 810333a:	4293      	cmp	r3, r2
 810333c:	d004      	beq.n	8103348 <HAL_DMA_IRQHandler+0x194>
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4a18      	ldr	r2, [pc, #96]	@ (81033a4 <HAL_DMA_IRQHandler+0x1f0>)
 8103344:	4293      	cmp	r3, r2
 8103346:	d12f      	bne.n	81033a8 <HAL_DMA_IRQHandler+0x1f4>
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	f003 0304 	and.w	r3, r3, #4
 8103352:	2b00      	cmp	r3, #0
 8103354:	bf14      	ite	ne
 8103356:	2301      	movne	r3, #1
 8103358:	2300      	moveq	r3, #0
 810335a:	b2db      	uxtb	r3, r3
 810335c:	e02e      	b.n	81033bc <HAL_DMA_IRQHandler+0x208>
 810335e:	bf00      	nop
 8103360:	10000018 	.word	0x10000018
 8103364:	1b4e81b5 	.word	0x1b4e81b5
 8103368:	40020010 	.word	0x40020010
 810336c:	40020028 	.word	0x40020028
 8103370:	40020040 	.word	0x40020040
 8103374:	40020058 	.word	0x40020058
 8103378:	40020070 	.word	0x40020070
 810337c:	40020088 	.word	0x40020088
 8103380:	400200a0 	.word	0x400200a0
 8103384:	400200b8 	.word	0x400200b8
 8103388:	40020410 	.word	0x40020410
 810338c:	40020428 	.word	0x40020428
 8103390:	40020440 	.word	0x40020440
 8103394:	40020458 	.word	0x40020458
 8103398:	40020470 	.word	0x40020470
 810339c:	40020488 	.word	0x40020488
 81033a0:	400204a0 	.word	0x400204a0
 81033a4:	400204b8 	.word	0x400204b8
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	f003 0308 	and.w	r3, r3, #8
 81033b2:	2b00      	cmp	r3, #0
 81033b4:	bf14      	ite	ne
 81033b6:	2301      	movne	r3, #1
 81033b8:	2300      	moveq	r3, #0
 81033ba:	b2db      	uxtb	r3, r3
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d015      	beq.n	81033ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	681a      	ldr	r2, [r3, #0]
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	f022 0204 	bic.w	r2, r2, #4
 81033ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81033d4:	f003 031f 	and.w	r3, r3, #31
 81033d8:	2208      	movs	r2, #8
 81033da:	409a      	lsls	r2, r3
 81033dc:	6a3b      	ldr	r3, [r7, #32]
 81033de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033e4:	f043 0201 	orr.w	r2, r3, #1
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81033f0:	f003 031f 	and.w	r3, r3, #31
 81033f4:	69ba      	ldr	r2, [r7, #24]
 81033f6:	fa22 f303 	lsr.w	r3, r2, r3
 81033fa:	f003 0301 	and.w	r3, r3, #1
 81033fe:	2b00      	cmp	r3, #0
 8103400:	d06e      	beq.n	81034e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	4a69      	ldr	r2, [pc, #420]	@ (81035ac <HAL_DMA_IRQHandler+0x3f8>)
 8103408:	4293      	cmp	r3, r2
 810340a:	d04a      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a67      	ldr	r2, [pc, #412]	@ (81035b0 <HAL_DMA_IRQHandler+0x3fc>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d045      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4a66      	ldr	r2, [pc, #408]	@ (81035b4 <HAL_DMA_IRQHandler+0x400>)
 810341c:	4293      	cmp	r3, r2
 810341e:	d040      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	4a64      	ldr	r2, [pc, #400]	@ (81035b8 <HAL_DMA_IRQHandler+0x404>)
 8103426:	4293      	cmp	r3, r2
 8103428:	d03b      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	4a63      	ldr	r2, [pc, #396]	@ (81035bc <HAL_DMA_IRQHandler+0x408>)
 8103430:	4293      	cmp	r3, r2
 8103432:	d036      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	4a61      	ldr	r2, [pc, #388]	@ (81035c0 <HAL_DMA_IRQHandler+0x40c>)
 810343a:	4293      	cmp	r3, r2
 810343c:	d031      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	4a60      	ldr	r2, [pc, #384]	@ (81035c4 <HAL_DMA_IRQHandler+0x410>)
 8103444:	4293      	cmp	r3, r2
 8103446:	d02c      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	4a5e      	ldr	r2, [pc, #376]	@ (81035c8 <HAL_DMA_IRQHandler+0x414>)
 810344e:	4293      	cmp	r3, r2
 8103450:	d027      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	4a5d      	ldr	r2, [pc, #372]	@ (81035cc <HAL_DMA_IRQHandler+0x418>)
 8103458:	4293      	cmp	r3, r2
 810345a:	d022      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	4a5b      	ldr	r2, [pc, #364]	@ (81035d0 <HAL_DMA_IRQHandler+0x41c>)
 8103462:	4293      	cmp	r3, r2
 8103464:	d01d      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	4a5a      	ldr	r2, [pc, #360]	@ (81035d4 <HAL_DMA_IRQHandler+0x420>)
 810346c:	4293      	cmp	r3, r2
 810346e:	d018      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	4a58      	ldr	r2, [pc, #352]	@ (81035d8 <HAL_DMA_IRQHandler+0x424>)
 8103476:	4293      	cmp	r3, r2
 8103478:	d013      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	681b      	ldr	r3, [r3, #0]
 810347e:	4a57      	ldr	r2, [pc, #348]	@ (81035dc <HAL_DMA_IRQHandler+0x428>)
 8103480:	4293      	cmp	r3, r2
 8103482:	d00e      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	4a55      	ldr	r2, [pc, #340]	@ (81035e0 <HAL_DMA_IRQHandler+0x42c>)
 810348a:	4293      	cmp	r3, r2
 810348c:	d009      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4a54      	ldr	r2, [pc, #336]	@ (81035e4 <HAL_DMA_IRQHandler+0x430>)
 8103494:	4293      	cmp	r3, r2
 8103496:	d004      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x2ee>
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	4a52      	ldr	r2, [pc, #328]	@ (81035e8 <HAL_DMA_IRQHandler+0x434>)
 810349e:	4293      	cmp	r3, r2
 81034a0:	d10a      	bne.n	81034b8 <HAL_DMA_IRQHandler+0x304>
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	695b      	ldr	r3, [r3, #20]
 81034a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	bf14      	ite	ne
 81034b0:	2301      	movne	r3, #1
 81034b2:	2300      	moveq	r3, #0
 81034b4:	b2db      	uxtb	r3, r3
 81034b6:	e003      	b.n	81034c0 <HAL_DMA_IRQHandler+0x30c>
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	2300      	movs	r3, #0
 81034c0:	2b00      	cmp	r3, #0
 81034c2:	d00d      	beq.n	81034e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81034c8:	f003 031f 	and.w	r3, r3, #31
 81034cc:	2201      	movs	r2, #1
 81034ce:	409a      	lsls	r2, r3
 81034d0:	6a3b      	ldr	r3, [r7, #32]
 81034d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81034d8:	f043 0202 	orr.w	r2, r3, #2
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81034e4:	f003 031f 	and.w	r3, r3, #31
 81034e8:	2204      	movs	r2, #4
 81034ea:	409a      	lsls	r2, r3
 81034ec:	69bb      	ldr	r3, [r7, #24]
 81034ee:	4013      	ands	r3, r2
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	f000 808f 	beq.w	8103614 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	4a2c      	ldr	r2, [pc, #176]	@ (81035ac <HAL_DMA_IRQHandler+0x3f8>)
 81034fc:	4293      	cmp	r3, r2
 81034fe:	d04a      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	4a2a      	ldr	r2, [pc, #168]	@ (81035b0 <HAL_DMA_IRQHandler+0x3fc>)
 8103506:	4293      	cmp	r3, r2
 8103508:	d045      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a29      	ldr	r2, [pc, #164]	@ (81035b4 <HAL_DMA_IRQHandler+0x400>)
 8103510:	4293      	cmp	r3, r2
 8103512:	d040      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	4a27      	ldr	r2, [pc, #156]	@ (81035b8 <HAL_DMA_IRQHandler+0x404>)
 810351a:	4293      	cmp	r3, r2
 810351c:	d03b      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	4a26      	ldr	r2, [pc, #152]	@ (81035bc <HAL_DMA_IRQHandler+0x408>)
 8103524:	4293      	cmp	r3, r2
 8103526:	d036      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	4a24      	ldr	r2, [pc, #144]	@ (81035c0 <HAL_DMA_IRQHandler+0x40c>)
 810352e:	4293      	cmp	r3, r2
 8103530:	d031      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	4a23      	ldr	r2, [pc, #140]	@ (81035c4 <HAL_DMA_IRQHandler+0x410>)
 8103538:	4293      	cmp	r3, r2
 810353a:	d02c      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	4a21      	ldr	r2, [pc, #132]	@ (81035c8 <HAL_DMA_IRQHandler+0x414>)
 8103542:	4293      	cmp	r3, r2
 8103544:	d027      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	4a20      	ldr	r2, [pc, #128]	@ (81035cc <HAL_DMA_IRQHandler+0x418>)
 810354c:	4293      	cmp	r3, r2
 810354e:	d022      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	4a1e      	ldr	r2, [pc, #120]	@ (81035d0 <HAL_DMA_IRQHandler+0x41c>)
 8103556:	4293      	cmp	r3, r2
 8103558:	d01d      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	4a1d      	ldr	r2, [pc, #116]	@ (81035d4 <HAL_DMA_IRQHandler+0x420>)
 8103560:	4293      	cmp	r3, r2
 8103562:	d018      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4a1b      	ldr	r2, [pc, #108]	@ (81035d8 <HAL_DMA_IRQHandler+0x424>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d013      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4a1a      	ldr	r2, [pc, #104]	@ (81035dc <HAL_DMA_IRQHandler+0x428>)
 8103574:	4293      	cmp	r3, r2
 8103576:	d00e      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a18      	ldr	r2, [pc, #96]	@ (81035e0 <HAL_DMA_IRQHandler+0x42c>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d009      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a17      	ldr	r2, [pc, #92]	@ (81035e4 <HAL_DMA_IRQHandler+0x430>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d004      	beq.n	8103596 <HAL_DMA_IRQHandler+0x3e2>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a15      	ldr	r2, [pc, #84]	@ (81035e8 <HAL_DMA_IRQHandler+0x434>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d12a      	bne.n	81035ec <HAL_DMA_IRQHandler+0x438>
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	f003 0302 	and.w	r3, r3, #2
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	bf14      	ite	ne
 81035a4:	2301      	movne	r3, #1
 81035a6:	2300      	moveq	r3, #0
 81035a8:	b2db      	uxtb	r3, r3
 81035aa:	e023      	b.n	81035f4 <HAL_DMA_IRQHandler+0x440>
 81035ac:	40020010 	.word	0x40020010
 81035b0:	40020028 	.word	0x40020028
 81035b4:	40020040 	.word	0x40020040
 81035b8:	40020058 	.word	0x40020058
 81035bc:	40020070 	.word	0x40020070
 81035c0:	40020088 	.word	0x40020088
 81035c4:	400200a0 	.word	0x400200a0
 81035c8:	400200b8 	.word	0x400200b8
 81035cc:	40020410 	.word	0x40020410
 81035d0:	40020428 	.word	0x40020428
 81035d4:	40020440 	.word	0x40020440
 81035d8:	40020458 	.word	0x40020458
 81035dc:	40020470 	.word	0x40020470
 81035e0:	40020488 	.word	0x40020488
 81035e4:	400204a0 	.word	0x400204a0
 81035e8:	400204b8 	.word	0x400204b8
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	2300      	movs	r3, #0
 81035f4:	2b00      	cmp	r3, #0
 81035f6:	d00d      	beq.n	8103614 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81035fc:	f003 031f 	and.w	r3, r3, #31
 8103600:	2204      	movs	r2, #4
 8103602:	409a      	lsls	r2, r3
 8103604:	6a3b      	ldr	r3, [r7, #32]
 8103606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810360c:	f043 0204 	orr.w	r2, r3, #4
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103618:	f003 031f 	and.w	r3, r3, #31
 810361c:	2210      	movs	r2, #16
 810361e:	409a      	lsls	r2, r3
 8103620:	69bb      	ldr	r3, [r7, #24]
 8103622:	4013      	ands	r3, r2
 8103624:	2b00      	cmp	r3, #0
 8103626:	f000 80a6 	beq.w	8103776 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a85      	ldr	r2, [pc, #532]	@ (8103844 <HAL_DMA_IRQHandler+0x690>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d04a      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a83      	ldr	r2, [pc, #524]	@ (8103848 <HAL_DMA_IRQHandler+0x694>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d045      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a82      	ldr	r2, [pc, #520]	@ (810384c <HAL_DMA_IRQHandler+0x698>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d040      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a80      	ldr	r2, [pc, #512]	@ (8103850 <HAL_DMA_IRQHandler+0x69c>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d03b      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a7f      	ldr	r2, [pc, #508]	@ (8103854 <HAL_DMA_IRQHandler+0x6a0>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d036      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a7d      	ldr	r2, [pc, #500]	@ (8103858 <HAL_DMA_IRQHandler+0x6a4>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d031      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a7c      	ldr	r2, [pc, #496]	@ (810385c <HAL_DMA_IRQHandler+0x6a8>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d02c      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	4a7a      	ldr	r2, [pc, #488]	@ (8103860 <HAL_DMA_IRQHandler+0x6ac>)
 8103676:	4293      	cmp	r3, r2
 8103678:	d027      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	4a79      	ldr	r2, [pc, #484]	@ (8103864 <HAL_DMA_IRQHandler+0x6b0>)
 8103680:	4293      	cmp	r3, r2
 8103682:	d022      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4a77      	ldr	r2, [pc, #476]	@ (8103868 <HAL_DMA_IRQHandler+0x6b4>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d01d      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a76      	ldr	r2, [pc, #472]	@ (810386c <HAL_DMA_IRQHandler+0x6b8>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d018      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a74      	ldr	r2, [pc, #464]	@ (8103870 <HAL_DMA_IRQHandler+0x6bc>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d013      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a73      	ldr	r2, [pc, #460]	@ (8103874 <HAL_DMA_IRQHandler+0x6c0>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d00e      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a71      	ldr	r2, [pc, #452]	@ (8103878 <HAL_DMA_IRQHandler+0x6c4>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d009      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a70      	ldr	r2, [pc, #448]	@ (810387c <HAL_DMA_IRQHandler+0x6c8>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d004      	beq.n	81036ca <HAL_DMA_IRQHandler+0x516>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a6e      	ldr	r2, [pc, #440]	@ (8103880 <HAL_DMA_IRQHandler+0x6cc>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d10a      	bne.n	81036e0 <HAL_DMA_IRQHandler+0x52c>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	f003 0308 	and.w	r3, r3, #8
 81036d4:	2b00      	cmp	r3, #0
 81036d6:	bf14      	ite	ne
 81036d8:	2301      	movne	r3, #1
 81036da:	2300      	moveq	r3, #0
 81036dc:	b2db      	uxtb	r3, r3
 81036de:	e009      	b.n	81036f4 <HAL_DMA_IRQHandler+0x540>
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	f003 0304 	and.w	r3, r3, #4
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	bf14      	ite	ne
 81036ee:	2301      	movne	r3, #1
 81036f0:	2300      	moveq	r3, #0
 81036f2:	b2db      	uxtb	r3, r3
 81036f4:	2b00      	cmp	r3, #0
 81036f6:	d03e      	beq.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81036fc:	f003 031f 	and.w	r3, r3, #31
 8103700:	2210      	movs	r2, #16
 8103702:	409a      	lsls	r2, r3
 8103704:	6a3b      	ldr	r3, [r7, #32]
 8103706:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103712:	2b00      	cmp	r3, #0
 8103714:	d018      	beq.n	8103748 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	681b      	ldr	r3, [r3, #0]
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103720:	2b00      	cmp	r3, #0
 8103722:	d108      	bne.n	8103736 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103728:	2b00      	cmp	r3, #0
 810372a:	d024      	beq.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103730:	6878      	ldr	r0, [r7, #4]
 8103732:	4798      	blx	r3
 8103734:	e01f      	b.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810373a:	2b00      	cmp	r3, #0
 810373c:	d01b      	beq.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103742:	6878      	ldr	r0, [r7, #4]
 8103744:	4798      	blx	r3
 8103746:	e016      	b.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103752:	2b00      	cmp	r3, #0
 8103754:	d107      	bne.n	8103766 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	681a      	ldr	r2, [r3, #0]
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	f022 0208 	bic.w	r2, r2, #8
 8103764:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810376a:	2b00      	cmp	r3, #0
 810376c:	d003      	beq.n	8103776 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103772:	6878      	ldr	r0, [r7, #4]
 8103774:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810377a:	f003 031f 	and.w	r3, r3, #31
 810377e:	2220      	movs	r2, #32
 8103780:	409a      	lsls	r2, r3
 8103782:	69bb      	ldr	r3, [r7, #24]
 8103784:	4013      	ands	r3, r2
 8103786:	2b00      	cmp	r3, #0
 8103788:	f000 8110 	beq.w	81039ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	4a2c      	ldr	r2, [pc, #176]	@ (8103844 <HAL_DMA_IRQHandler+0x690>)
 8103792:	4293      	cmp	r3, r2
 8103794:	d04a      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	4a2b      	ldr	r2, [pc, #172]	@ (8103848 <HAL_DMA_IRQHandler+0x694>)
 810379c:	4293      	cmp	r3, r2
 810379e:	d045      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	4a29      	ldr	r2, [pc, #164]	@ (810384c <HAL_DMA_IRQHandler+0x698>)
 81037a6:	4293      	cmp	r3, r2
 81037a8:	d040      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	4a28      	ldr	r2, [pc, #160]	@ (8103850 <HAL_DMA_IRQHandler+0x69c>)
 81037b0:	4293      	cmp	r3, r2
 81037b2:	d03b      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	4a26      	ldr	r2, [pc, #152]	@ (8103854 <HAL_DMA_IRQHandler+0x6a0>)
 81037ba:	4293      	cmp	r3, r2
 81037bc:	d036      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	4a25      	ldr	r2, [pc, #148]	@ (8103858 <HAL_DMA_IRQHandler+0x6a4>)
 81037c4:	4293      	cmp	r3, r2
 81037c6:	d031      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a23      	ldr	r2, [pc, #140]	@ (810385c <HAL_DMA_IRQHandler+0x6a8>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d02c      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4a22      	ldr	r2, [pc, #136]	@ (8103860 <HAL_DMA_IRQHandler+0x6ac>)
 81037d8:	4293      	cmp	r3, r2
 81037da:	d027      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	4a20      	ldr	r2, [pc, #128]	@ (8103864 <HAL_DMA_IRQHandler+0x6b0>)
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d022      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	4a1f      	ldr	r2, [pc, #124]	@ (8103868 <HAL_DMA_IRQHandler+0x6b4>)
 81037ec:	4293      	cmp	r3, r2
 81037ee:	d01d      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a1d      	ldr	r2, [pc, #116]	@ (810386c <HAL_DMA_IRQHandler+0x6b8>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d018      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4a1c      	ldr	r2, [pc, #112]	@ (8103870 <HAL_DMA_IRQHandler+0x6bc>)
 8103800:	4293      	cmp	r3, r2
 8103802:	d013      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	4a1a      	ldr	r2, [pc, #104]	@ (8103874 <HAL_DMA_IRQHandler+0x6c0>)
 810380a:	4293      	cmp	r3, r2
 810380c:	d00e      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	4a19      	ldr	r2, [pc, #100]	@ (8103878 <HAL_DMA_IRQHandler+0x6c4>)
 8103814:	4293      	cmp	r3, r2
 8103816:	d009      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4a17      	ldr	r2, [pc, #92]	@ (810387c <HAL_DMA_IRQHandler+0x6c8>)
 810381e:	4293      	cmp	r3, r2
 8103820:	d004      	beq.n	810382c <HAL_DMA_IRQHandler+0x678>
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	4a16      	ldr	r2, [pc, #88]	@ (8103880 <HAL_DMA_IRQHandler+0x6cc>)
 8103828:	4293      	cmp	r3, r2
 810382a:	d12b      	bne.n	8103884 <HAL_DMA_IRQHandler+0x6d0>
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	f003 0310 	and.w	r3, r3, #16
 8103836:	2b00      	cmp	r3, #0
 8103838:	bf14      	ite	ne
 810383a:	2301      	movne	r3, #1
 810383c:	2300      	moveq	r3, #0
 810383e:	b2db      	uxtb	r3, r3
 8103840:	e02a      	b.n	8103898 <HAL_DMA_IRQHandler+0x6e4>
 8103842:	bf00      	nop
 8103844:	40020010 	.word	0x40020010
 8103848:	40020028 	.word	0x40020028
 810384c:	40020040 	.word	0x40020040
 8103850:	40020058 	.word	0x40020058
 8103854:	40020070 	.word	0x40020070
 8103858:	40020088 	.word	0x40020088
 810385c:	400200a0 	.word	0x400200a0
 8103860:	400200b8 	.word	0x400200b8
 8103864:	40020410 	.word	0x40020410
 8103868:	40020428 	.word	0x40020428
 810386c:	40020440 	.word	0x40020440
 8103870:	40020458 	.word	0x40020458
 8103874:	40020470 	.word	0x40020470
 8103878:	40020488 	.word	0x40020488
 810387c:	400204a0 	.word	0x400204a0
 8103880:	400204b8 	.word	0x400204b8
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	f003 0302 	and.w	r3, r3, #2
 810388e:	2b00      	cmp	r3, #0
 8103890:	bf14      	ite	ne
 8103892:	2301      	movne	r3, #1
 8103894:	2300      	moveq	r3, #0
 8103896:	b2db      	uxtb	r3, r3
 8103898:	2b00      	cmp	r3, #0
 810389a:	f000 8087 	beq.w	81039ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038a2:	f003 031f 	and.w	r3, r3, #31
 81038a6:	2220      	movs	r2, #32
 81038a8:	409a      	lsls	r2, r3
 81038aa:	6a3b      	ldr	r3, [r7, #32]
 81038ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81038b4:	b2db      	uxtb	r3, r3
 81038b6:	2b04      	cmp	r3, #4
 81038b8:	d139      	bne.n	810392e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	681a      	ldr	r2, [r3, #0]
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	f022 0216 	bic.w	r2, r2, #22
 81038c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	695a      	ldr	r2, [r3, #20]
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81038d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d103      	bne.n	81038ea <HAL_DMA_IRQHandler+0x736>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81038e6:	2b00      	cmp	r3, #0
 81038e8:	d007      	beq.n	81038fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	681a      	ldr	r2, [r3, #0]
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	f022 0208 	bic.w	r2, r2, #8
 81038f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038fe:	f003 031f 	and.w	r3, r3, #31
 8103902:	223f      	movs	r2, #63	@ 0x3f
 8103904:	409a      	lsls	r2, r3
 8103906:	6a3b      	ldr	r3, [r7, #32]
 8103908:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	2201      	movs	r2, #1
 810390e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	2200      	movs	r2, #0
 8103916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810391e:	2b00      	cmp	r3, #0
 8103920:	f000 834a 	beq.w	8103fb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103928:	6878      	ldr	r0, [r7, #4]
 810392a:	4798      	blx	r3
          }
          return;
 810392c:	e344      	b.n	8103fb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103938:	2b00      	cmp	r3, #0
 810393a:	d018      	beq.n	810396e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103946:	2b00      	cmp	r3, #0
 8103948:	d108      	bne.n	810395c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810394e:	2b00      	cmp	r3, #0
 8103950:	d02c      	beq.n	81039ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103956:	6878      	ldr	r0, [r7, #4]
 8103958:	4798      	blx	r3
 810395a:	e027      	b.n	81039ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103960:	2b00      	cmp	r3, #0
 8103962:	d023      	beq.n	81039ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103968:	6878      	ldr	r0, [r7, #4]
 810396a:	4798      	blx	r3
 810396c:	e01e      	b.n	81039ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103978:	2b00      	cmp	r3, #0
 810397a:	d10f      	bne.n	810399c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	681a      	ldr	r2, [r3, #0]
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	f022 0210 	bic.w	r2, r2, #16
 810398a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	2201      	movs	r2, #1
 8103990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	2200      	movs	r2, #0
 8103998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	d003      	beq.n	81039ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81039a8:	6878      	ldr	r0, [r7, #4]
 81039aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	f000 8306 	beq.w	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039ba:	f003 0301 	and.w	r3, r3, #1
 81039be:	2b00      	cmp	r3, #0
 81039c0:	f000 8088 	beq.w	8103ad4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	2204      	movs	r2, #4
 81039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a7a      	ldr	r2, [pc, #488]	@ (8103bbc <HAL_DMA_IRQHandler+0xa08>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d04a      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a79      	ldr	r2, [pc, #484]	@ (8103bc0 <HAL_DMA_IRQHandler+0xa0c>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d045      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a77      	ldr	r2, [pc, #476]	@ (8103bc4 <HAL_DMA_IRQHandler+0xa10>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d040      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a76      	ldr	r2, [pc, #472]	@ (8103bc8 <HAL_DMA_IRQHandler+0xa14>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d03b      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4a74      	ldr	r2, [pc, #464]	@ (8103bcc <HAL_DMA_IRQHandler+0xa18>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d036      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	4a73      	ldr	r2, [pc, #460]	@ (8103bd0 <HAL_DMA_IRQHandler+0xa1c>)
 8103a04:	4293      	cmp	r3, r2
 8103a06:	d031      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	4a71      	ldr	r2, [pc, #452]	@ (8103bd4 <HAL_DMA_IRQHandler+0xa20>)
 8103a0e:	4293      	cmp	r3, r2
 8103a10:	d02c      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a70      	ldr	r2, [pc, #448]	@ (8103bd8 <HAL_DMA_IRQHandler+0xa24>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d027      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a6e      	ldr	r2, [pc, #440]	@ (8103bdc <HAL_DMA_IRQHandler+0xa28>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d022      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	4a6d      	ldr	r2, [pc, #436]	@ (8103be0 <HAL_DMA_IRQHandler+0xa2c>)
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d01d      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	4a6b      	ldr	r2, [pc, #428]	@ (8103be4 <HAL_DMA_IRQHandler+0xa30>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d018      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	4a6a      	ldr	r2, [pc, #424]	@ (8103be8 <HAL_DMA_IRQHandler+0xa34>)
 8103a40:	4293      	cmp	r3, r2
 8103a42:	d013      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	4a68      	ldr	r2, [pc, #416]	@ (8103bec <HAL_DMA_IRQHandler+0xa38>)
 8103a4a:	4293      	cmp	r3, r2
 8103a4c:	d00e      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a67      	ldr	r2, [pc, #412]	@ (8103bf0 <HAL_DMA_IRQHandler+0xa3c>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d009      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	4a65      	ldr	r2, [pc, #404]	@ (8103bf4 <HAL_DMA_IRQHandler+0xa40>)
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d004      	beq.n	8103a6c <HAL_DMA_IRQHandler+0x8b8>
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	4a64      	ldr	r2, [pc, #400]	@ (8103bf8 <HAL_DMA_IRQHandler+0xa44>)
 8103a68:	4293      	cmp	r3, r2
 8103a6a:	d108      	bne.n	8103a7e <HAL_DMA_IRQHandler+0x8ca>
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	681a      	ldr	r2, [r3, #0]
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	f022 0201 	bic.w	r2, r2, #1
 8103a7a:	601a      	str	r2, [r3, #0]
 8103a7c:	e007      	b.n	8103a8e <HAL_DMA_IRQHandler+0x8da>
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	681a      	ldr	r2, [r3, #0]
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f022 0201 	bic.w	r2, r2, #1
 8103a8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103a8e:	68fb      	ldr	r3, [r7, #12]
 8103a90:	3301      	adds	r3, #1
 8103a92:	60fb      	str	r3, [r7, #12]
 8103a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103a96:	429a      	cmp	r2, r3
 8103a98:	d307      	bcc.n	8103aaa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	f003 0301 	and.w	r3, r3, #1
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d1f2      	bne.n	8103a8e <HAL_DMA_IRQHandler+0x8da>
 8103aa8:	e000      	b.n	8103aac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103aaa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	f003 0301 	and.w	r3, r3, #1
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d004      	beq.n	8103ac4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	2203      	movs	r2, #3
 8103abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8103ac2:	e003      	b.n	8103acc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	2201      	movs	r2, #1
 8103ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	2200      	movs	r2, #0
 8103ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ad8:	2b00      	cmp	r3, #0
 8103ada:	f000 8272 	beq.w	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ae2:	6878      	ldr	r0, [r7, #4]
 8103ae4:	4798      	blx	r3
 8103ae6:	e26c      	b.n	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	4a43      	ldr	r2, [pc, #268]	@ (8103bfc <HAL_DMA_IRQHandler+0xa48>)
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d022      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	4a42      	ldr	r2, [pc, #264]	@ (8103c00 <HAL_DMA_IRQHandler+0xa4c>)
 8103af8:	4293      	cmp	r3, r2
 8103afa:	d01d      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	4a40      	ldr	r2, [pc, #256]	@ (8103c04 <HAL_DMA_IRQHandler+0xa50>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d018      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8103c08 <HAL_DMA_IRQHandler+0xa54>)
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d013      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a3d      	ldr	r2, [pc, #244]	@ (8103c0c <HAL_DMA_IRQHandler+0xa58>)
 8103b16:	4293      	cmp	r3, r2
 8103b18:	d00e      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8103c10 <HAL_DMA_IRQHandler+0xa5c>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d009      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a3a      	ldr	r2, [pc, #232]	@ (8103c14 <HAL_DMA_IRQHandler+0xa60>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d004      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x984>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a39      	ldr	r2, [pc, #228]	@ (8103c18 <HAL_DMA_IRQHandler+0xa64>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d101      	bne.n	8103b3c <HAL_DMA_IRQHandler+0x988>
 8103b38:	2301      	movs	r3, #1
 8103b3a:	e000      	b.n	8103b3e <HAL_DMA_IRQHandler+0x98a>
 8103b3c:	2300      	movs	r3, #0
 8103b3e:	2b00      	cmp	r3, #0
 8103b40:	f000 823f 	beq.w	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103b50:	f003 031f 	and.w	r3, r3, #31
 8103b54:	2204      	movs	r2, #4
 8103b56:	409a      	lsls	r2, r3
 8103b58:	697b      	ldr	r3, [r7, #20]
 8103b5a:	4013      	ands	r3, r2
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	f000 80cd 	beq.w	8103cfc <HAL_DMA_IRQHandler+0xb48>
 8103b62:	693b      	ldr	r3, [r7, #16]
 8103b64:	f003 0304 	and.w	r3, r3, #4
 8103b68:	2b00      	cmp	r3, #0
 8103b6a:	f000 80c7 	beq.w	8103cfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103b72:	f003 031f 	and.w	r3, r3, #31
 8103b76:	2204      	movs	r2, #4
 8103b78:	409a      	lsls	r2, r3
 8103b7a:	69fb      	ldr	r3, [r7, #28]
 8103b7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103b7e:	693b      	ldr	r3, [r7, #16]
 8103b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d049      	beq.n	8103c1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103b88:	693b      	ldr	r3, [r7, #16]
 8103b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d109      	bne.n	8103ba6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	f000 8210 	beq.w	8103fbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103ba0:	6878      	ldr	r0, [r7, #4]
 8103ba2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ba4:	e20a      	b.n	8103fbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	f000 8206 	beq.w	8103fbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103bb4:	6878      	ldr	r0, [r7, #4]
 8103bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103bb8:	e200      	b.n	8103fbc <HAL_DMA_IRQHandler+0xe08>
 8103bba:	bf00      	nop
 8103bbc:	40020010 	.word	0x40020010
 8103bc0:	40020028 	.word	0x40020028
 8103bc4:	40020040 	.word	0x40020040
 8103bc8:	40020058 	.word	0x40020058
 8103bcc:	40020070 	.word	0x40020070
 8103bd0:	40020088 	.word	0x40020088
 8103bd4:	400200a0 	.word	0x400200a0
 8103bd8:	400200b8 	.word	0x400200b8
 8103bdc:	40020410 	.word	0x40020410
 8103be0:	40020428 	.word	0x40020428
 8103be4:	40020440 	.word	0x40020440
 8103be8:	40020458 	.word	0x40020458
 8103bec:	40020470 	.word	0x40020470
 8103bf0:	40020488 	.word	0x40020488
 8103bf4:	400204a0 	.word	0x400204a0
 8103bf8:	400204b8 	.word	0x400204b8
 8103bfc:	58025408 	.word	0x58025408
 8103c00:	5802541c 	.word	0x5802541c
 8103c04:	58025430 	.word	0x58025430
 8103c08:	58025444 	.word	0x58025444
 8103c0c:	58025458 	.word	0x58025458
 8103c10:	5802546c 	.word	0x5802546c
 8103c14:	58025480 	.word	0x58025480
 8103c18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103c1c:	693b      	ldr	r3, [r7, #16]
 8103c1e:	f003 0320 	and.w	r3, r3, #32
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d160      	bne.n	8103ce8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	4a7f      	ldr	r2, [pc, #508]	@ (8103e28 <HAL_DMA_IRQHandler+0xc74>)
 8103c2c:	4293      	cmp	r3, r2
 8103c2e:	d04a      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	4a7d      	ldr	r2, [pc, #500]	@ (8103e2c <HAL_DMA_IRQHandler+0xc78>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d045      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8103e30 <HAL_DMA_IRQHandler+0xc7c>)
 8103c40:	4293      	cmp	r3, r2
 8103c42:	d040      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	4a7a      	ldr	r2, [pc, #488]	@ (8103e34 <HAL_DMA_IRQHandler+0xc80>)
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	d03b      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	4a79      	ldr	r2, [pc, #484]	@ (8103e38 <HAL_DMA_IRQHandler+0xc84>)
 8103c54:	4293      	cmp	r3, r2
 8103c56:	d036      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	4a77      	ldr	r2, [pc, #476]	@ (8103e3c <HAL_DMA_IRQHandler+0xc88>)
 8103c5e:	4293      	cmp	r3, r2
 8103c60:	d031      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	4a76      	ldr	r2, [pc, #472]	@ (8103e40 <HAL_DMA_IRQHandler+0xc8c>)
 8103c68:	4293      	cmp	r3, r2
 8103c6a:	d02c      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	4a74      	ldr	r2, [pc, #464]	@ (8103e44 <HAL_DMA_IRQHandler+0xc90>)
 8103c72:	4293      	cmp	r3, r2
 8103c74:	d027      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	681b      	ldr	r3, [r3, #0]
 8103c7a:	4a73      	ldr	r2, [pc, #460]	@ (8103e48 <HAL_DMA_IRQHandler+0xc94>)
 8103c7c:	4293      	cmp	r3, r2
 8103c7e:	d022      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	4a71      	ldr	r2, [pc, #452]	@ (8103e4c <HAL_DMA_IRQHandler+0xc98>)
 8103c86:	4293      	cmp	r3, r2
 8103c88:	d01d      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	681b      	ldr	r3, [r3, #0]
 8103c8e:	4a70      	ldr	r2, [pc, #448]	@ (8103e50 <HAL_DMA_IRQHandler+0xc9c>)
 8103c90:	4293      	cmp	r3, r2
 8103c92:	d018      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	4a6e      	ldr	r2, [pc, #440]	@ (8103e54 <HAL_DMA_IRQHandler+0xca0>)
 8103c9a:	4293      	cmp	r3, r2
 8103c9c:	d013      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8103e58 <HAL_DMA_IRQHandler+0xca4>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d00e      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	4a6b      	ldr	r2, [pc, #428]	@ (8103e5c <HAL_DMA_IRQHandler+0xca8>)
 8103cae:	4293      	cmp	r3, r2
 8103cb0:	d009      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8103e60 <HAL_DMA_IRQHandler+0xcac>)
 8103cb8:	4293      	cmp	r3, r2
 8103cba:	d004      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0xb12>
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	4a68      	ldr	r2, [pc, #416]	@ (8103e64 <HAL_DMA_IRQHandler+0xcb0>)
 8103cc2:	4293      	cmp	r3, r2
 8103cc4:	d108      	bne.n	8103cd8 <HAL_DMA_IRQHandler+0xb24>
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	681a      	ldr	r2, [r3, #0]
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	f022 0208 	bic.w	r2, r2, #8
 8103cd4:	601a      	str	r2, [r3, #0]
 8103cd6:	e007      	b.n	8103ce8 <HAL_DMA_IRQHandler+0xb34>
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	681a      	ldr	r2, [r3, #0]
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	f022 0204 	bic.w	r2, r2, #4
 8103ce6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103cec:	2b00      	cmp	r3, #0
 8103cee:	f000 8165 	beq.w	8103fbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103cf6:	6878      	ldr	r0, [r7, #4]
 8103cf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103cfa:	e15f      	b.n	8103fbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103d00:	f003 031f 	and.w	r3, r3, #31
 8103d04:	2202      	movs	r2, #2
 8103d06:	409a      	lsls	r2, r3
 8103d08:	697b      	ldr	r3, [r7, #20]
 8103d0a:	4013      	ands	r3, r2
 8103d0c:	2b00      	cmp	r3, #0
 8103d0e:	f000 80c5 	beq.w	8103e9c <HAL_DMA_IRQHandler+0xce8>
 8103d12:	693b      	ldr	r3, [r7, #16]
 8103d14:	f003 0302 	and.w	r3, r3, #2
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	f000 80bf 	beq.w	8103e9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103d22:	f003 031f 	and.w	r3, r3, #31
 8103d26:	2202      	movs	r2, #2
 8103d28:	409a      	lsls	r2, r3
 8103d2a:	69fb      	ldr	r3, [r7, #28]
 8103d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d2e:	693b      	ldr	r3, [r7, #16]
 8103d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103d34:	2b00      	cmp	r3, #0
 8103d36:	d018      	beq.n	8103d6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103d38:	693b      	ldr	r3, [r7, #16]
 8103d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103d3e:	2b00      	cmp	r3, #0
 8103d40:	d109      	bne.n	8103d56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	f000 813a 	beq.w	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103d50:	6878      	ldr	r0, [r7, #4]
 8103d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d54:	e134      	b.n	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	f000 8130 	beq.w	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103d64:	6878      	ldr	r0, [r7, #4]
 8103d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d68:	e12a      	b.n	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103d6a:	693b      	ldr	r3, [r7, #16]
 8103d6c:	f003 0320 	and.w	r3, r3, #32
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	f040 8089 	bne.w	8103e88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8103e28 <HAL_DMA_IRQHandler+0xc74>)
 8103d7c:	4293      	cmp	r3, r2
 8103d7e:	d04a      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a29      	ldr	r2, [pc, #164]	@ (8103e2c <HAL_DMA_IRQHandler+0xc78>)
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d045      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681b      	ldr	r3, [r3, #0]
 8103d8e:	4a28      	ldr	r2, [pc, #160]	@ (8103e30 <HAL_DMA_IRQHandler+0xc7c>)
 8103d90:	4293      	cmp	r3, r2
 8103d92:	d040      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	4a26      	ldr	r2, [pc, #152]	@ (8103e34 <HAL_DMA_IRQHandler+0xc80>)
 8103d9a:	4293      	cmp	r3, r2
 8103d9c:	d03b      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	4a25      	ldr	r2, [pc, #148]	@ (8103e38 <HAL_DMA_IRQHandler+0xc84>)
 8103da4:	4293      	cmp	r3, r2
 8103da6:	d036      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	4a23      	ldr	r2, [pc, #140]	@ (8103e3c <HAL_DMA_IRQHandler+0xc88>)
 8103dae:	4293      	cmp	r3, r2
 8103db0:	d031      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	4a22      	ldr	r2, [pc, #136]	@ (8103e40 <HAL_DMA_IRQHandler+0xc8c>)
 8103db8:	4293      	cmp	r3, r2
 8103dba:	d02c      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	4a20      	ldr	r2, [pc, #128]	@ (8103e44 <HAL_DMA_IRQHandler+0xc90>)
 8103dc2:	4293      	cmp	r3, r2
 8103dc4:	d027      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	4a1f      	ldr	r2, [pc, #124]	@ (8103e48 <HAL_DMA_IRQHandler+0xc94>)
 8103dcc:	4293      	cmp	r3, r2
 8103dce:	d022      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8103e4c <HAL_DMA_IRQHandler+0xc98>)
 8103dd6:	4293      	cmp	r3, r2
 8103dd8:	d01d      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103dda:	687b      	ldr	r3, [r7, #4]
 8103ddc:	681b      	ldr	r3, [r3, #0]
 8103dde:	4a1c      	ldr	r2, [pc, #112]	@ (8103e50 <HAL_DMA_IRQHandler+0xc9c>)
 8103de0:	4293      	cmp	r3, r2
 8103de2:	d018      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	4a1a      	ldr	r2, [pc, #104]	@ (8103e54 <HAL_DMA_IRQHandler+0xca0>)
 8103dea:	4293      	cmp	r3, r2
 8103dec:	d013      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	4a19      	ldr	r2, [pc, #100]	@ (8103e58 <HAL_DMA_IRQHandler+0xca4>)
 8103df4:	4293      	cmp	r3, r2
 8103df6:	d00e      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	4a17      	ldr	r2, [pc, #92]	@ (8103e5c <HAL_DMA_IRQHandler+0xca8>)
 8103dfe:	4293      	cmp	r3, r2
 8103e00:	d009      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	4a16      	ldr	r2, [pc, #88]	@ (8103e60 <HAL_DMA_IRQHandler+0xcac>)
 8103e08:	4293      	cmp	r3, r2
 8103e0a:	d004      	beq.n	8103e16 <HAL_DMA_IRQHandler+0xc62>
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	4a14      	ldr	r2, [pc, #80]	@ (8103e64 <HAL_DMA_IRQHandler+0xcb0>)
 8103e12:	4293      	cmp	r3, r2
 8103e14:	d128      	bne.n	8103e68 <HAL_DMA_IRQHandler+0xcb4>
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	681b      	ldr	r3, [r3, #0]
 8103e1a:	681a      	ldr	r2, [r3, #0]
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	f022 0214 	bic.w	r2, r2, #20
 8103e24:	601a      	str	r2, [r3, #0]
 8103e26:	e027      	b.n	8103e78 <HAL_DMA_IRQHandler+0xcc4>
 8103e28:	40020010 	.word	0x40020010
 8103e2c:	40020028 	.word	0x40020028
 8103e30:	40020040 	.word	0x40020040
 8103e34:	40020058 	.word	0x40020058
 8103e38:	40020070 	.word	0x40020070
 8103e3c:	40020088 	.word	0x40020088
 8103e40:	400200a0 	.word	0x400200a0
 8103e44:	400200b8 	.word	0x400200b8
 8103e48:	40020410 	.word	0x40020410
 8103e4c:	40020428 	.word	0x40020428
 8103e50:	40020440 	.word	0x40020440
 8103e54:	40020458 	.word	0x40020458
 8103e58:	40020470 	.word	0x40020470
 8103e5c:	40020488 	.word	0x40020488
 8103e60:	400204a0 	.word	0x400204a0
 8103e64:	400204b8 	.word	0x400204b8
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	681a      	ldr	r2, [r3, #0]
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	f022 020a 	bic.w	r2, r2, #10
 8103e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	2201      	movs	r2, #1
 8103e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	2200      	movs	r2, #0
 8103e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	f000 8097 	beq.w	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103e96:	6878      	ldr	r0, [r7, #4]
 8103e98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e9a:	e091      	b.n	8103fc0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ea0:	f003 031f 	and.w	r3, r3, #31
 8103ea4:	2208      	movs	r2, #8
 8103ea6:	409a      	lsls	r2, r3
 8103ea8:	697b      	ldr	r3, [r7, #20]
 8103eaa:	4013      	ands	r3, r2
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	f000 8088 	beq.w	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
 8103eb2:	693b      	ldr	r3, [r7, #16]
 8103eb4:	f003 0308 	and.w	r3, r3, #8
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	f000 8082 	beq.w	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	681b      	ldr	r3, [r3, #0]
 8103ec2:	4a41      	ldr	r2, [pc, #260]	@ (8103fc8 <HAL_DMA_IRQHandler+0xe14>)
 8103ec4:	4293      	cmp	r3, r2
 8103ec6:	d04a      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8103fcc <HAL_DMA_IRQHandler+0xe18>)
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	d045      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	681b      	ldr	r3, [r3, #0]
 8103ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8103fd0 <HAL_DMA_IRQHandler+0xe1c>)
 8103ed8:	4293      	cmp	r3, r2
 8103eda:	d040      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8103fd4 <HAL_DMA_IRQHandler+0xe20>)
 8103ee2:	4293      	cmp	r3, r2
 8103ee4:	d03b      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	4a3b      	ldr	r2, [pc, #236]	@ (8103fd8 <HAL_DMA_IRQHandler+0xe24>)
 8103eec:	4293      	cmp	r3, r2
 8103eee:	d036      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	4a39      	ldr	r2, [pc, #228]	@ (8103fdc <HAL_DMA_IRQHandler+0xe28>)
 8103ef6:	4293      	cmp	r3, r2
 8103ef8:	d031      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	4a38      	ldr	r2, [pc, #224]	@ (8103fe0 <HAL_DMA_IRQHandler+0xe2c>)
 8103f00:	4293      	cmp	r3, r2
 8103f02:	d02c      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	4a36      	ldr	r2, [pc, #216]	@ (8103fe4 <HAL_DMA_IRQHandler+0xe30>)
 8103f0a:	4293      	cmp	r3, r2
 8103f0c:	d027      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	4a35      	ldr	r2, [pc, #212]	@ (8103fe8 <HAL_DMA_IRQHandler+0xe34>)
 8103f14:	4293      	cmp	r3, r2
 8103f16:	d022      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	4a33      	ldr	r2, [pc, #204]	@ (8103fec <HAL_DMA_IRQHandler+0xe38>)
 8103f1e:	4293      	cmp	r3, r2
 8103f20:	d01d      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	4a32      	ldr	r2, [pc, #200]	@ (8103ff0 <HAL_DMA_IRQHandler+0xe3c>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d018      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a30      	ldr	r2, [pc, #192]	@ (8103ff4 <HAL_DMA_IRQHandler+0xe40>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d013      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8103ff8 <HAL_DMA_IRQHandler+0xe44>)
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d00e      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a2d      	ldr	r2, [pc, #180]	@ (8103ffc <HAL_DMA_IRQHandler+0xe48>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d009      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8104000 <HAL_DMA_IRQHandler+0xe4c>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d004      	beq.n	8103f5e <HAL_DMA_IRQHandler+0xdaa>
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a2a      	ldr	r2, [pc, #168]	@ (8104004 <HAL_DMA_IRQHandler+0xe50>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d108      	bne.n	8103f70 <HAL_DMA_IRQHandler+0xdbc>
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	681a      	ldr	r2, [r3, #0]
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	f022 021c 	bic.w	r2, r2, #28
 8103f6c:	601a      	str	r2, [r3, #0]
 8103f6e:	e007      	b.n	8103f80 <HAL_DMA_IRQHandler+0xdcc>
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	681a      	ldr	r2, [r3, #0]
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	f022 020e 	bic.w	r2, r2, #14
 8103f7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103f84:	f003 031f 	and.w	r3, r3, #31
 8103f88:	2201      	movs	r2, #1
 8103f8a:	409a      	lsls	r2, r3
 8103f8c:	69fb      	ldr	r3, [r7, #28]
 8103f8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	2201      	movs	r2, #1
 8103f94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	2201      	movs	r2, #1
 8103f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	2200      	movs	r2, #0
 8103fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103faa:	2b00      	cmp	r3, #0
 8103fac:	d009      	beq.n	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103fb2:	6878      	ldr	r0, [r7, #4]
 8103fb4:	4798      	blx	r3
 8103fb6:	e004      	b.n	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103fb8:	bf00      	nop
 8103fba:	e002      	b.n	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fbc:	bf00      	nop
 8103fbe:	e000      	b.n	8103fc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103fc2:	3728      	adds	r7, #40	@ 0x28
 8103fc4:	46bd      	mov	sp, r7
 8103fc6:	bd80      	pop	{r7, pc}
 8103fc8:	40020010 	.word	0x40020010
 8103fcc:	40020028 	.word	0x40020028
 8103fd0:	40020040 	.word	0x40020040
 8103fd4:	40020058 	.word	0x40020058
 8103fd8:	40020070 	.word	0x40020070
 8103fdc:	40020088 	.word	0x40020088
 8103fe0:	400200a0 	.word	0x400200a0
 8103fe4:	400200b8 	.word	0x400200b8
 8103fe8:	40020410 	.word	0x40020410
 8103fec:	40020428 	.word	0x40020428
 8103ff0:	40020440 	.word	0x40020440
 8103ff4:	40020458 	.word	0x40020458
 8103ff8:	40020470 	.word	0x40020470
 8103ffc:	40020488 	.word	0x40020488
 8104000:	400204a0 	.word	0x400204a0
 8104004:	400204b8 	.word	0x400204b8

08104008 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8104008:	b480      	push	{r7}
 810400a:	b083      	sub	sp, #12
 810400c:	af00      	add	r7, sp, #0
 810400e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8104016:	b2db      	uxtb	r3, r3
}
 8104018:	4618      	mov	r0, r3
 810401a:	370c      	adds	r7, #12
 810401c:	46bd      	mov	sp, r7
 810401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104022:	4770      	bx	lr

08104024 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8104024:	b480      	push	{r7}
 8104026:	b083      	sub	sp, #12
 8104028:	af00      	add	r7, sp, #0
 810402a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8104030:	4618      	mov	r0, r3
 8104032:	370c      	adds	r7, #12
 8104034:	46bd      	mov	sp, r7
 8104036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810403a:	4770      	bx	lr

0810403c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810403c:	b480      	push	{r7}
 810403e:	b087      	sub	sp, #28
 8104040:	af00      	add	r7, sp, #0
 8104042:	60f8      	str	r0, [r7, #12]
 8104044:	60b9      	str	r1, [r7, #8]
 8104046:	607a      	str	r2, [r7, #4]
 8104048:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810404e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104054:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a7f      	ldr	r2, [pc, #508]	@ (8104258 <DMA_SetConfig+0x21c>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d072      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a7d      	ldr	r2, [pc, #500]	@ (810425c <DMA_SetConfig+0x220>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d06d      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810406a:	68fb      	ldr	r3, [r7, #12]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a7c      	ldr	r2, [pc, #496]	@ (8104260 <DMA_SetConfig+0x224>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d068      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a7a      	ldr	r2, [pc, #488]	@ (8104264 <DMA_SetConfig+0x228>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d063      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a79      	ldr	r2, [pc, #484]	@ (8104268 <DMA_SetConfig+0x22c>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d05e      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a77      	ldr	r2, [pc, #476]	@ (810426c <DMA_SetConfig+0x230>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d059      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a76      	ldr	r2, [pc, #472]	@ (8104270 <DMA_SetConfig+0x234>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d054      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a74      	ldr	r2, [pc, #464]	@ (8104274 <DMA_SetConfig+0x238>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d04f      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a73      	ldr	r2, [pc, #460]	@ (8104278 <DMA_SetConfig+0x23c>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d04a      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a71      	ldr	r2, [pc, #452]	@ (810427c <DMA_SetConfig+0x240>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d045      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a70      	ldr	r2, [pc, #448]	@ (8104280 <DMA_SetConfig+0x244>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d040      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a6e      	ldr	r2, [pc, #440]	@ (8104284 <DMA_SetConfig+0x248>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d03b      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a6d      	ldr	r2, [pc, #436]	@ (8104288 <DMA_SetConfig+0x24c>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d036      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a6b      	ldr	r2, [pc, #428]	@ (810428c <DMA_SetConfig+0x250>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d031      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a6a      	ldr	r2, [pc, #424]	@ (8104290 <DMA_SetConfig+0x254>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d02c      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a68      	ldr	r2, [pc, #416]	@ (8104294 <DMA_SetConfig+0x258>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d027      	beq.n	8104146 <DMA_SetConfig+0x10a>
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a67      	ldr	r2, [pc, #412]	@ (8104298 <DMA_SetConfig+0x25c>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d022      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a65      	ldr	r2, [pc, #404]	@ (810429c <DMA_SetConfig+0x260>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d01d      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810410a:	68fb      	ldr	r3, [r7, #12]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a64      	ldr	r2, [pc, #400]	@ (81042a0 <DMA_SetConfig+0x264>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d018      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104114:	68fb      	ldr	r3, [r7, #12]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a62      	ldr	r2, [pc, #392]	@ (81042a4 <DMA_SetConfig+0x268>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d013      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810411e:	68fb      	ldr	r3, [r7, #12]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a61      	ldr	r2, [pc, #388]	@ (81042a8 <DMA_SetConfig+0x26c>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d00e      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a5f      	ldr	r2, [pc, #380]	@ (81042ac <DMA_SetConfig+0x270>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d009      	beq.n	8104146 <DMA_SetConfig+0x10a>
 8104132:	68fb      	ldr	r3, [r7, #12]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a5e      	ldr	r2, [pc, #376]	@ (81042b0 <DMA_SetConfig+0x274>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d004      	beq.n	8104146 <DMA_SetConfig+0x10a>
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a5c      	ldr	r2, [pc, #368]	@ (81042b4 <DMA_SetConfig+0x278>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d101      	bne.n	810414a <DMA_SetConfig+0x10e>
 8104146:	2301      	movs	r3, #1
 8104148:	e000      	b.n	810414c <DMA_SetConfig+0x110>
 810414a:	2300      	movs	r3, #0
 810414c:	2b00      	cmp	r3, #0
 810414e:	d00d      	beq.n	810416c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104150:	68fb      	ldr	r3, [r7, #12]
 8104152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104154:	68fa      	ldr	r2, [r7, #12]
 8104156:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104158:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810415a:	68fb      	ldr	r3, [r7, #12]
 810415c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810415e:	2b00      	cmp	r3, #0
 8104160:	d004      	beq.n	810416c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104162:	68fb      	ldr	r3, [r7, #12]
 8104164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104166:	68fa      	ldr	r2, [r7, #12]
 8104168:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810416a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	4a39      	ldr	r2, [pc, #228]	@ (8104258 <DMA_SetConfig+0x21c>)
 8104172:	4293      	cmp	r3, r2
 8104174:	d04a      	beq.n	810420c <DMA_SetConfig+0x1d0>
 8104176:	68fb      	ldr	r3, [r7, #12]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	4a38      	ldr	r2, [pc, #224]	@ (810425c <DMA_SetConfig+0x220>)
 810417c:	4293      	cmp	r3, r2
 810417e:	d045      	beq.n	810420c <DMA_SetConfig+0x1d0>
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	4a36      	ldr	r2, [pc, #216]	@ (8104260 <DMA_SetConfig+0x224>)
 8104186:	4293      	cmp	r3, r2
 8104188:	d040      	beq.n	810420c <DMA_SetConfig+0x1d0>
 810418a:	68fb      	ldr	r3, [r7, #12]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	4a35      	ldr	r2, [pc, #212]	@ (8104264 <DMA_SetConfig+0x228>)
 8104190:	4293      	cmp	r3, r2
 8104192:	d03b      	beq.n	810420c <DMA_SetConfig+0x1d0>
 8104194:	68fb      	ldr	r3, [r7, #12]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	4a33      	ldr	r2, [pc, #204]	@ (8104268 <DMA_SetConfig+0x22c>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d036      	beq.n	810420c <DMA_SetConfig+0x1d0>
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	4a32      	ldr	r2, [pc, #200]	@ (810426c <DMA_SetConfig+0x230>)
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d031      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	4a30      	ldr	r2, [pc, #192]	@ (8104270 <DMA_SetConfig+0x234>)
 81041ae:	4293      	cmp	r3, r2
 81041b0:	d02c      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	4a2f      	ldr	r2, [pc, #188]	@ (8104274 <DMA_SetConfig+0x238>)
 81041b8:	4293      	cmp	r3, r2
 81041ba:	d027      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	4a2d      	ldr	r2, [pc, #180]	@ (8104278 <DMA_SetConfig+0x23c>)
 81041c2:	4293      	cmp	r3, r2
 81041c4:	d022      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041c6:	68fb      	ldr	r3, [r7, #12]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	4a2c      	ldr	r2, [pc, #176]	@ (810427c <DMA_SetConfig+0x240>)
 81041cc:	4293      	cmp	r3, r2
 81041ce:	d01d      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041d0:	68fb      	ldr	r3, [r7, #12]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	4a2a      	ldr	r2, [pc, #168]	@ (8104280 <DMA_SetConfig+0x244>)
 81041d6:	4293      	cmp	r3, r2
 81041d8:	d018      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041da:	68fb      	ldr	r3, [r7, #12]
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	4a29      	ldr	r2, [pc, #164]	@ (8104284 <DMA_SetConfig+0x248>)
 81041e0:	4293      	cmp	r3, r2
 81041e2:	d013      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	4a27      	ldr	r2, [pc, #156]	@ (8104288 <DMA_SetConfig+0x24c>)
 81041ea:	4293      	cmp	r3, r2
 81041ec:	d00e      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041ee:	68fb      	ldr	r3, [r7, #12]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	4a26      	ldr	r2, [pc, #152]	@ (810428c <DMA_SetConfig+0x250>)
 81041f4:	4293      	cmp	r3, r2
 81041f6:	d009      	beq.n	810420c <DMA_SetConfig+0x1d0>
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	4a24      	ldr	r2, [pc, #144]	@ (8104290 <DMA_SetConfig+0x254>)
 81041fe:	4293      	cmp	r3, r2
 8104200:	d004      	beq.n	810420c <DMA_SetConfig+0x1d0>
 8104202:	68fb      	ldr	r3, [r7, #12]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	4a23      	ldr	r2, [pc, #140]	@ (8104294 <DMA_SetConfig+0x258>)
 8104208:	4293      	cmp	r3, r2
 810420a:	d101      	bne.n	8104210 <DMA_SetConfig+0x1d4>
 810420c:	2301      	movs	r3, #1
 810420e:	e000      	b.n	8104212 <DMA_SetConfig+0x1d6>
 8104210:	2300      	movs	r3, #0
 8104212:	2b00      	cmp	r3, #0
 8104214:	d059      	beq.n	81042ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104216:	68fb      	ldr	r3, [r7, #12]
 8104218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810421a:	f003 031f 	and.w	r3, r3, #31
 810421e:	223f      	movs	r2, #63	@ 0x3f
 8104220:	409a      	lsls	r2, r3
 8104222:	697b      	ldr	r3, [r7, #20]
 8104224:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	681a      	ldr	r2, [r3, #0]
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8104234:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	683a      	ldr	r2, [r7, #0]
 810423c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	689b      	ldr	r3, [r3, #8]
 8104242:	2b40      	cmp	r3, #64	@ 0x40
 8104244:	d138      	bne.n	81042b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	687a      	ldr	r2, [r7, #4]
 810424c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	68ba      	ldr	r2, [r7, #8]
 8104254:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104256:	e086      	b.n	8104366 <DMA_SetConfig+0x32a>
 8104258:	40020010 	.word	0x40020010
 810425c:	40020028 	.word	0x40020028
 8104260:	40020040 	.word	0x40020040
 8104264:	40020058 	.word	0x40020058
 8104268:	40020070 	.word	0x40020070
 810426c:	40020088 	.word	0x40020088
 8104270:	400200a0 	.word	0x400200a0
 8104274:	400200b8 	.word	0x400200b8
 8104278:	40020410 	.word	0x40020410
 810427c:	40020428 	.word	0x40020428
 8104280:	40020440 	.word	0x40020440
 8104284:	40020458 	.word	0x40020458
 8104288:	40020470 	.word	0x40020470
 810428c:	40020488 	.word	0x40020488
 8104290:	400204a0 	.word	0x400204a0
 8104294:	400204b8 	.word	0x400204b8
 8104298:	58025408 	.word	0x58025408
 810429c:	5802541c 	.word	0x5802541c
 81042a0:	58025430 	.word	0x58025430
 81042a4:	58025444 	.word	0x58025444
 81042a8:	58025458 	.word	0x58025458
 81042ac:	5802546c 	.word	0x5802546c
 81042b0:	58025480 	.word	0x58025480
 81042b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	68ba      	ldr	r2, [r7, #8]
 81042be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81042c0:	68fb      	ldr	r3, [r7, #12]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	687a      	ldr	r2, [r7, #4]
 81042c6:	60da      	str	r2, [r3, #12]
}
 81042c8:	e04d      	b.n	8104366 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81042ca:	68fb      	ldr	r3, [r7, #12]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	4a29      	ldr	r2, [pc, #164]	@ (8104374 <DMA_SetConfig+0x338>)
 81042d0:	4293      	cmp	r3, r2
 81042d2:	d022      	beq.n	810431a <DMA_SetConfig+0x2de>
 81042d4:	68fb      	ldr	r3, [r7, #12]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	4a27      	ldr	r2, [pc, #156]	@ (8104378 <DMA_SetConfig+0x33c>)
 81042da:	4293      	cmp	r3, r2
 81042dc:	d01d      	beq.n	810431a <DMA_SetConfig+0x2de>
 81042de:	68fb      	ldr	r3, [r7, #12]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	4a26      	ldr	r2, [pc, #152]	@ (810437c <DMA_SetConfig+0x340>)
 81042e4:	4293      	cmp	r3, r2
 81042e6:	d018      	beq.n	810431a <DMA_SetConfig+0x2de>
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	4a24      	ldr	r2, [pc, #144]	@ (8104380 <DMA_SetConfig+0x344>)
 81042ee:	4293      	cmp	r3, r2
 81042f0:	d013      	beq.n	810431a <DMA_SetConfig+0x2de>
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	4a23      	ldr	r2, [pc, #140]	@ (8104384 <DMA_SetConfig+0x348>)
 81042f8:	4293      	cmp	r3, r2
 81042fa:	d00e      	beq.n	810431a <DMA_SetConfig+0x2de>
 81042fc:	68fb      	ldr	r3, [r7, #12]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	4a21      	ldr	r2, [pc, #132]	@ (8104388 <DMA_SetConfig+0x34c>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d009      	beq.n	810431a <DMA_SetConfig+0x2de>
 8104306:	68fb      	ldr	r3, [r7, #12]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	4a20      	ldr	r2, [pc, #128]	@ (810438c <DMA_SetConfig+0x350>)
 810430c:	4293      	cmp	r3, r2
 810430e:	d004      	beq.n	810431a <DMA_SetConfig+0x2de>
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	4a1e      	ldr	r2, [pc, #120]	@ (8104390 <DMA_SetConfig+0x354>)
 8104316:	4293      	cmp	r3, r2
 8104318:	d101      	bne.n	810431e <DMA_SetConfig+0x2e2>
 810431a:	2301      	movs	r3, #1
 810431c:	e000      	b.n	8104320 <DMA_SetConfig+0x2e4>
 810431e:	2300      	movs	r3, #0
 8104320:	2b00      	cmp	r3, #0
 8104322:	d020      	beq.n	8104366 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104328:	f003 031f 	and.w	r3, r3, #31
 810432c:	2201      	movs	r2, #1
 810432e:	409a      	lsls	r2, r3
 8104330:	693b      	ldr	r3, [r7, #16]
 8104332:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104334:	68fb      	ldr	r3, [r7, #12]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	683a      	ldr	r2, [r7, #0]
 810433a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	689b      	ldr	r3, [r3, #8]
 8104340:	2b40      	cmp	r3, #64	@ 0x40
 8104342:	d108      	bne.n	8104356 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	687a      	ldr	r2, [r7, #4]
 810434a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810434c:	68fb      	ldr	r3, [r7, #12]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	68ba      	ldr	r2, [r7, #8]
 8104352:	60da      	str	r2, [r3, #12]
}
 8104354:	e007      	b.n	8104366 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	68ba      	ldr	r2, [r7, #8]
 810435c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	687a      	ldr	r2, [r7, #4]
 8104364:	60da      	str	r2, [r3, #12]
}
 8104366:	bf00      	nop
 8104368:	371c      	adds	r7, #28
 810436a:	46bd      	mov	sp, r7
 810436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104370:	4770      	bx	lr
 8104372:	bf00      	nop
 8104374:	58025408 	.word	0x58025408
 8104378:	5802541c 	.word	0x5802541c
 810437c:	58025430 	.word	0x58025430
 8104380:	58025444 	.word	0x58025444
 8104384:	58025458 	.word	0x58025458
 8104388:	5802546c 	.word	0x5802546c
 810438c:	58025480 	.word	0x58025480
 8104390:	58025494 	.word	0x58025494

08104394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104394:	b480      	push	{r7}
 8104396:	b085      	sub	sp, #20
 8104398:	af00      	add	r7, sp, #0
 810439a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	4a43      	ldr	r2, [pc, #268]	@ (81044b0 <DMA_CalcBaseAndBitshift+0x11c>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	d04a      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	4a42      	ldr	r2, [pc, #264]	@ (81044b4 <DMA_CalcBaseAndBitshift+0x120>)
 81043ac:	4293      	cmp	r3, r2
 81043ae:	d045      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	4a40      	ldr	r2, [pc, #256]	@ (81044b8 <DMA_CalcBaseAndBitshift+0x124>)
 81043b6:	4293      	cmp	r3, r2
 81043b8:	d040      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	4a3f      	ldr	r2, [pc, #252]	@ (81044bc <DMA_CalcBaseAndBitshift+0x128>)
 81043c0:	4293      	cmp	r3, r2
 81043c2:	d03b      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	4a3d      	ldr	r2, [pc, #244]	@ (81044c0 <DMA_CalcBaseAndBitshift+0x12c>)
 81043ca:	4293      	cmp	r3, r2
 81043cc:	d036      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	4a3c      	ldr	r2, [pc, #240]	@ (81044c4 <DMA_CalcBaseAndBitshift+0x130>)
 81043d4:	4293      	cmp	r3, r2
 81043d6:	d031      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	4a3a      	ldr	r2, [pc, #232]	@ (81044c8 <DMA_CalcBaseAndBitshift+0x134>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d02c      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	4a39      	ldr	r2, [pc, #228]	@ (81044cc <DMA_CalcBaseAndBitshift+0x138>)
 81043e8:	4293      	cmp	r3, r2
 81043ea:	d027      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	4a37      	ldr	r2, [pc, #220]	@ (81044d0 <DMA_CalcBaseAndBitshift+0x13c>)
 81043f2:	4293      	cmp	r3, r2
 81043f4:	d022      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	4a36      	ldr	r2, [pc, #216]	@ (81044d4 <DMA_CalcBaseAndBitshift+0x140>)
 81043fc:	4293      	cmp	r3, r2
 81043fe:	d01d      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	4a34      	ldr	r2, [pc, #208]	@ (81044d8 <DMA_CalcBaseAndBitshift+0x144>)
 8104406:	4293      	cmp	r3, r2
 8104408:	d018      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	4a33      	ldr	r2, [pc, #204]	@ (81044dc <DMA_CalcBaseAndBitshift+0x148>)
 8104410:	4293      	cmp	r3, r2
 8104412:	d013      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	4a31      	ldr	r2, [pc, #196]	@ (81044e0 <DMA_CalcBaseAndBitshift+0x14c>)
 810441a:	4293      	cmp	r3, r2
 810441c:	d00e      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	4a30      	ldr	r2, [pc, #192]	@ (81044e4 <DMA_CalcBaseAndBitshift+0x150>)
 8104424:	4293      	cmp	r3, r2
 8104426:	d009      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	4a2e      	ldr	r2, [pc, #184]	@ (81044e8 <DMA_CalcBaseAndBitshift+0x154>)
 810442e:	4293      	cmp	r3, r2
 8104430:	d004      	beq.n	810443c <DMA_CalcBaseAndBitshift+0xa8>
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	4a2d      	ldr	r2, [pc, #180]	@ (81044ec <DMA_CalcBaseAndBitshift+0x158>)
 8104438:	4293      	cmp	r3, r2
 810443a:	d101      	bne.n	8104440 <DMA_CalcBaseAndBitshift+0xac>
 810443c:	2301      	movs	r3, #1
 810443e:	e000      	b.n	8104442 <DMA_CalcBaseAndBitshift+0xae>
 8104440:	2300      	movs	r3, #0
 8104442:	2b00      	cmp	r3, #0
 8104444:	d026      	beq.n	8104494 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	b2db      	uxtb	r3, r3
 810444c:	3b10      	subs	r3, #16
 810444e:	4a28      	ldr	r2, [pc, #160]	@ (81044f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8104450:	fba2 2303 	umull	r2, r3, r2, r3
 8104454:	091b      	lsrs	r3, r3, #4
 8104456:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	f003 0307 	and.w	r3, r3, #7
 810445e:	4a25      	ldr	r2, [pc, #148]	@ (81044f4 <DMA_CalcBaseAndBitshift+0x160>)
 8104460:	5cd3      	ldrb	r3, [r2, r3]
 8104462:	461a      	mov	r2, r3
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8104468:	68fb      	ldr	r3, [r7, #12]
 810446a:	2b03      	cmp	r3, #3
 810446c:	d909      	bls.n	8104482 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8104476:	f023 0303 	bic.w	r3, r3, #3
 810447a:	1d1a      	adds	r2, r3, #4
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	659a      	str	r2, [r3, #88]	@ 0x58
 8104480:	e00e      	b.n	81044a0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 810448a:	f023 0303 	bic.w	r3, r3, #3
 810448e:	687a      	ldr	r2, [r7, #4]
 8104490:	6593      	str	r3, [r2, #88]	@ 0x58
 8104492:	e005      	b.n	81044a0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 81044a4:	4618      	mov	r0, r3
 81044a6:	3714      	adds	r7, #20
 81044a8:	46bd      	mov	sp, r7
 81044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ae:	4770      	bx	lr
 81044b0:	40020010 	.word	0x40020010
 81044b4:	40020028 	.word	0x40020028
 81044b8:	40020040 	.word	0x40020040
 81044bc:	40020058 	.word	0x40020058
 81044c0:	40020070 	.word	0x40020070
 81044c4:	40020088 	.word	0x40020088
 81044c8:	400200a0 	.word	0x400200a0
 81044cc:	400200b8 	.word	0x400200b8
 81044d0:	40020410 	.word	0x40020410
 81044d4:	40020428 	.word	0x40020428
 81044d8:	40020440 	.word	0x40020440
 81044dc:	40020458 	.word	0x40020458
 81044e0:	40020470 	.word	0x40020470
 81044e4:	40020488 	.word	0x40020488
 81044e8:	400204a0 	.word	0x400204a0
 81044ec:	400204b8 	.word	0x400204b8
 81044f0:	aaaaaaab 	.word	0xaaaaaaab
 81044f4:	08109dbc 	.word	0x08109dbc

081044f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 81044f8:	b480      	push	{r7}
 81044fa:	b085      	sub	sp, #20
 81044fc:	af00      	add	r7, sp, #0
 81044fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104500:	2300      	movs	r3, #0
 8104502:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	699b      	ldr	r3, [r3, #24]
 8104508:	2b00      	cmp	r3, #0
 810450a:	d120      	bne.n	810454e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104510:	2b03      	cmp	r3, #3
 8104512:	d858      	bhi.n	81045c6 <DMA_CheckFifoParam+0xce>
 8104514:	a201      	add	r2, pc, #4	@ (adr r2, 810451c <DMA_CheckFifoParam+0x24>)
 8104516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810451a:	bf00      	nop
 810451c:	0810452d 	.word	0x0810452d
 8104520:	0810453f 	.word	0x0810453f
 8104524:	0810452d 	.word	0x0810452d
 8104528:	081045c7 	.word	0x081045c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104534:	2b00      	cmp	r3, #0
 8104536:	d048      	beq.n	81045ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104538:	2301      	movs	r3, #1
 810453a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810453c:	e045      	b.n	81045ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104542:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104546:	d142      	bne.n	81045ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104548:	2301      	movs	r3, #1
 810454a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810454c:	e03f      	b.n	81045ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	699b      	ldr	r3, [r3, #24]
 8104552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104556:	d123      	bne.n	81045a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810455c:	2b03      	cmp	r3, #3
 810455e:	d838      	bhi.n	81045d2 <DMA_CheckFifoParam+0xda>
 8104560:	a201      	add	r2, pc, #4	@ (adr r2, 8104568 <DMA_CheckFifoParam+0x70>)
 8104562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104566:	bf00      	nop
 8104568:	08104579 	.word	0x08104579
 810456c:	0810457f 	.word	0x0810457f
 8104570:	08104579 	.word	0x08104579
 8104574:	08104591 	.word	0x08104591
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104578:	2301      	movs	r3, #1
 810457a:	73fb      	strb	r3, [r7, #15]
        break;
 810457c:	e030      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104582:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104586:	2b00      	cmp	r3, #0
 8104588:	d025      	beq.n	81045d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810458a:	2301      	movs	r3, #1
 810458c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810458e:	e022      	b.n	81045d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104594:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8104598:	d11f      	bne.n	81045da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810459a:	2301      	movs	r3, #1
 810459c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810459e:	e01c      	b.n	81045da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045a4:	2b02      	cmp	r3, #2
 81045a6:	d902      	bls.n	81045ae <DMA_CheckFifoParam+0xb6>
 81045a8:	2b03      	cmp	r3, #3
 81045aa:	d003      	beq.n	81045b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81045ac:	e018      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81045ae:	2301      	movs	r3, #1
 81045b0:	73fb      	strb	r3, [r7, #15]
        break;
 81045b2:	e015      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d00e      	beq.n	81045de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81045c0:	2301      	movs	r3, #1
 81045c2:	73fb      	strb	r3, [r7, #15]
    break;
 81045c4:	e00b      	b.n	81045de <DMA_CheckFifoParam+0xe6>
        break;
 81045c6:	bf00      	nop
 81045c8:	e00a      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        break;
 81045ca:	bf00      	nop
 81045cc:	e008      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        break;
 81045ce:	bf00      	nop
 81045d0:	e006      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        break;
 81045d2:	bf00      	nop
 81045d4:	e004      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        break;
 81045d6:	bf00      	nop
 81045d8:	e002      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
        break;
 81045da:	bf00      	nop
 81045dc:	e000      	b.n	81045e0 <DMA_CheckFifoParam+0xe8>
    break;
 81045de:	bf00      	nop
    }
  }

  return status;
 81045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 81045e2:	4618      	mov	r0, r3
 81045e4:	3714      	adds	r7, #20
 81045e6:	46bd      	mov	sp, r7
 81045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045ec:	4770      	bx	lr
 81045ee:	bf00      	nop

081045f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81045f0:	b480      	push	{r7}
 81045f2:	b085      	sub	sp, #20
 81045f4:	af00      	add	r7, sp, #0
 81045f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	4a3a      	ldr	r2, [pc, #232]	@ (81046ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104604:	4293      	cmp	r3, r2
 8104606:	d022      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	4a38      	ldr	r2, [pc, #224]	@ (81046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 810460e:	4293      	cmp	r3, r2
 8104610:	d01d      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	4a37      	ldr	r2, [pc, #220]	@ (81046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104618:	4293      	cmp	r3, r2
 810461a:	d018      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	4a35      	ldr	r2, [pc, #212]	@ (81046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104622:	4293      	cmp	r3, r2
 8104624:	d013      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4a34      	ldr	r2, [pc, #208]	@ (81046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 810462c:	4293      	cmp	r3, r2
 810462e:	d00e      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a32      	ldr	r2, [pc, #200]	@ (8104700 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d009      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a31      	ldr	r2, [pc, #196]	@ (8104704 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d004      	beq.n	810464e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a2f      	ldr	r2, [pc, #188]	@ (8104708 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d101      	bne.n	8104652 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810464e:	2301      	movs	r3, #1
 8104650:	e000      	b.n	8104654 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104652:	2300      	movs	r3, #0
 8104654:	2b00      	cmp	r3, #0
 8104656:	d01c      	beq.n	8104692 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	b2db      	uxtb	r3, r3
 810465e:	3b08      	subs	r3, #8
 8104660:	4a2a      	ldr	r2, [pc, #168]	@ (810470c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104662:	fba2 2303 	umull	r2, r3, r2, r3
 8104666:	091b      	lsrs	r3, r3, #4
 8104668:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810466a:	68fb      	ldr	r3, [r7, #12]
 810466c:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8104670:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8104674:	009b      	lsls	r3, r3, #2
 8104676:	461a      	mov	r2, r3
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	4a24      	ldr	r2, [pc, #144]	@ (8104710 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104680:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	f003 031f 	and.w	r3, r3, #31
 8104688:	2201      	movs	r2, #1
 810468a:	409a      	lsls	r2, r3
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104690:	e026      	b.n	81046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	b2db      	uxtb	r3, r3
 8104698:	3b10      	subs	r3, #16
 810469a:	4a1e      	ldr	r2, [pc, #120]	@ (8104714 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 810469c:	fba2 2303 	umull	r2, r3, r2, r3
 81046a0:	091b      	lsrs	r3, r3, #4
 81046a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81046a4:	68bb      	ldr	r3, [r7, #8]
 81046a6:	4a1c      	ldr	r2, [pc, #112]	@ (8104718 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81046a8:	4293      	cmp	r3, r2
 81046aa:	d806      	bhi.n	81046ba <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81046ac:	68bb      	ldr	r3, [r7, #8]
 81046ae:	4a1b      	ldr	r2, [pc, #108]	@ (810471c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81046b0:	4293      	cmp	r3, r2
 81046b2:	d902      	bls.n	81046ba <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	3308      	adds	r3, #8
 81046b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81046ba:	68fb      	ldr	r3, [r7, #12]
 81046bc:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 81046c0:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 81046c4:	009b      	lsls	r3, r3, #2
 81046c6:	461a      	mov	r2, r3
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	4a14      	ldr	r2, [pc, #80]	@ (8104720 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81046d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	f003 031f 	and.w	r3, r3, #31
 81046d8:	2201      	movs	r2, #1
 81046da:	409a      	lsls	r2, r3
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 81046e0:	bf00      	nop
 81046e2:	3714      	adds	r7, #20
 81046e4:	46bd      	mov	sp, r7
 81046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ea:	4770      	bx	lr
 81046ec:	58025408 	.word	0x58025408
 81046f0:	5802541c 	.word	0x5802541c
 81046f4:	58025430 	.word	0x58025430
 81046f8:	58025444 	.word	0x58025444
 81046fc:	58025458 	.word	0x58025458
 8104700:	5802546c 	.word	0x5802546c
 8104704:	58025480 	.word	0x58025480
 8104708:	58025494 	.word	0x58025494
 810470c:	cccccccd 	.word	0xcccccccd
 8104710:	58025880 	.word	0x58025880
 8104714:	aaaaaaab 	.word	0xaaaaaaab
 8104718:	400204b8 	.word	0x400204b8
 810471c:	4002040f 	.word	0x4002040f
 8104720:	40020880 	.word	0x40020880

08104724 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104724:	b480      	push	{r7}
 8104726:	b085      	sub	sp, #20
 8104728:	af00      	add	r7, sp, #0
 810472a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	685b      	ldr	r3, [r3, #4]
 8104730:	b2db      	uxtb	r3, r3
 8104732:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104734:	68fb      	ldr	r3, [r7, #12]
 8104736:	2b00      	cmp	r3, #0
 8104738:	d04a      	beq.n	81047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	2b08      	cmp	r3, #8
 810473e:	d847      	bhi.n	81047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	4a25      	ldr	r2, [pc, #148]	@ (81047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104746:	4293      	cmp	r3, r2
 8104748:	d022      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a24      	ldr	r2, [pc, #144]	@ (81047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d01d      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	4a22      	ldr	r2, [pc, #136]	@ (81047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d018      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	4a21      	ldr	r2, [pc, #132]	@ (81047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104764:	4293      	cmp	r3, r2
 8104766:	d013      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	4a1f      	ldr	r2, [pc, #124]	@ (81047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810476e:	4293      	cmp	r3, r2
 8104770:	d00e      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	4a1e      	ldr	r2, [pc, #120]	@ (81047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104778:	4293      	cmp	r3, r2
 810477a:	d009      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	681b      	ldr	r3, [r3, #0]
 8104780:	4a1c      	ldr	r2, [pc, #112]	@ (81047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104782:	4293      	cmp	r3, r2
 8104784:	d004      	beq.n	8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	4a1b      	ldr	r2, [pc, #108]	@ (81047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 810478c:	4293      	cmp	r3, r2
 810478e:	d101      	bne.n	8104794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104790:	2301      	movs	r3, #1
 8104792:	e000      	b.n	8104796 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104794:	2300      	movs	r3, #0
 8104796:	2b00      	cmp	r3, #0
 8104798:	d00a      	beq.n	81047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810479a:	68fa      	ldr	r2, [r7, #12]
 810479c:	4b17      	ldr	r3, [pc, #92]	@ (81047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810479e:	4413      	add	r3, r2
 81047a0:	009b      	lsls	r3, r3, #2
 81047a2:	461a      	mov	r2, r3
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	4a15      	ldr	r2, [pc, #84]	@ (8104800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81047ac:	671a      	str	r2, [r3, #112]	@ 0x70
 81047ae:	e009      	b.n	81047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81047b0:	68fa      	ldr	r2, [r7, #12]
 81047b2:	4b14      	ldr	r3, [pc, #80]	@ (8104804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81047b4:	4413      	add	r3, r2
 81047b6:	009b      	lsls	r3, r3, #2
 81047b8:	461a      	mov	r2, r3
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	4a11      	ldr	r2, [pc, #68]	@ (8104808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81047c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	3b01      	subs	r3, #1
 81047c8:	2201      	movs	r2, #1
 81047ca:	409a      	lsls	r2, r3
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 81047d0:	bf00      	nop
 81047d2:	3714      	adds	r7, #20
 81047d4:	46bd      	mov	sp, r7
 81047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047da:	4770      	bx	lr
 81047dc:	58025408 	.word	0x58025408
 81047e0:	5802541c 	.word	0x5802541c
 81047e4:	58025430 	.word	0x58025430
 81047e8:	58025444 	.word	0x58025444
 81047ec:	58025458 	.word	0x58025458
 81047f0:	5802546c 	.word	0x5802546c
 81047f4:	58025480 	.word	0x58025480
 81047f8:	58025494 	.word	0x58025494
 81047fc:	1600963f 	.word	0x1600963f
 8104800:	58025940 	.word	0x58025940
 8104804:	1000823f 	.word	0x1000823f
 8104808:	40020940 	.word	0x40020940

0810480c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810480c:	b480      	push	{r7}
 810480e:	b089      	sub	sp, #36	@ 0x24
 8104810:	af00      	add	r7, sp, #0
 8104812:	6078      	str	r0, [r7, #4]
 8104814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104816:	2300      	movs	r3, #0
 8104818:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810481a:	4b89      	ldr	r3, [pc, #548]	@ (8104a40 <HAL_GPIO_Init+0x234>)
 810481c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810481e:	e194      	b.n	8104b4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104820:	683b      	ldr	r3, [r7, #0]
 8104822:	681a      	ldr	r2, [r3, #0]
 8104824:	2101      	movs	r1, #1
 8104826:	69fb      	ldr	r3, [r7, #28]
 8104828:	fa01 f303 	lsl.w	r3, r1, r3
 810482c:	4013      	ands	r3, r2
 810482e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104830:	693b      	ldr	r3, [r7, #16]
 8104832:	2b00      	cmp	r3, #0
 8104834:	f000 8186 	beq.w	8104b44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104838:	683b      	ldr	r3, [r7, #0]
 810483a:	685b      	ldr	r3, [r3, #4]
 810483c:	f003 0303 	and.w	r3, r3, #3
 8104840:	2b01      	cmp	r3, #1
 8104842:	d005      	beq.n	8104850 <HAL_GPIO_Init+0x44>
 8104844:	683b      	ldr	r3, [r7, #0]
 8104846:	685b      	ldr	r3, [r3, #4]
 8104848:	f003 0303 	and.w	r3, r3, #3
 810484c:	2b02      	cmp	r3, #2
 810484e:	d130      	bne.n	81048b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	689b      	ldr	r3, [r3, #8]
 8104854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104856:	69fb      	ldr	r3, [r7, #28]
 8104858:	005b      	lsls	r3, r3, #1
 810485a:	2203      	movs	r2, #3
 810485c:	fa02 f303 	lsl.w	r3, r2, r3
 8104860:	43db      	mvns	r3, r3
 8104862:	69ba      	ldr	r2, [r7, #24]
 8104864:	4013      	ands	r3, r2
 8104866:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104868:	683b      	ldr	r3, [r7, #0]
 810486a:	68da      	ldr	r2, [r3, #12]
 810486c:	69fb      	ldr	r3, [r7, #28]
 810486e:	005b      	lsls	r3, r3, #1
 8104870:	fa02 f303 	lsl.w	r3, r2, r3
 8104874:	69ba      	ldr	r2, [r7, #24]
 8104876:	4313      	orrs	r3, r2
 8104878:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	69ba      	ldr	r2, [r7, #24]
 810487e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	685b      	ldr	r3, [r3, #4]
 8104884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104886:	2201      	movs	r2, #1
 8104888:	69fb      	ldr	r3, [r7, #28]
 810488a:	fa02 f303 	lsl.w	r3, r2, r3
 810488e:	43db      	mvns	r3, r3
 8104890:	69ba      	ldr	r2, [r7, #24]
 8104892:	4013      	ands	r3, r2
 8104894:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104896:	683b      	ldr	r3, [r7, #0]
 8104898:	685b      	ldr	r3, [r3, #4]
 810489a:	091b      	lsrs	r3, r3, #4
 810489c:	f003 0201 	and.w	r2, r3, #1
 81048a0:	69fb      	ldr	r3, [r7, #28]
 81048a2:	fa02 f303 	lsl.w	r3, r2, r3
 81048a6:	69ba      	ldr	r2, [r7, #24]
 81048a8:	4313      	orrs	r3, r2
 81048aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	69ba      	ldr	r2, [r7, #24]
 81048b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81048b2:	683b      	ldr	r3, [r7, #0]
 81048b4:	685b      	ldr	r3, [r3, #4]
 81048b6:	f003 0303 	and.w	r3, r3, #3
 81048ba:	2b03      	cmp	r3, #3
 81048bc:	d017      	beq.n	81048ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	68db      	ldr	r3, [r3, #12]
 81048c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81048c4:	69fb      	ldr	r3, [r7, #28]
 81048c6:	005b      	lsls	r3, r3, #1
 81048c8:	2203      	movs	r2, #3
 81048ca:	fa02 f303 	lsl.w	r3, r2, r3
 81048ce:	43db      	mvns	r3, r3
 81048d0:	69ba      	ldr	r2, [r7, #24]
 81048d2:	4013      	ands	r3, r2
 81048d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81048d6:	683b      	ldr	r3, [r7, #0]
 81048d8:	689a      	ldr	r2, [r3, #8]
 81048da:	69fb      	ldr	r3, [r7, #28]
 81048dc:	005b      	lsls	r3, r3, #1
 81048de:	fa02 f303 	lsl.w	r3, r2, r3
 81048e2:	69ba      	ldr	r2, [r7, #24]
 81048e4:	4313      	orrs	r3, r2
 81048e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	69ba      	ldr	r2, [r7, #24]
 81048ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	685b      	ldr	r3, [r3, #4]
 81048f2:	f003 0303 	and.w	r3, r3, #3
 81048f6:	2b02      	cmp	r3, #2
 81048f8:	d123      	bne.n	8104942 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81048fa:	69fb      	ldr	r3, [r7, #28]
 81048fc:	08da      	lsrs	r2, r3, #3
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	3208      	adds	r2, #8
 8104902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104908:	69fb      	ldr	r3, [r7, #28]
 810490a:	f003 0307 	and.w	r3, r3, #7
 810490e:	009b      	lsls	r3, r3, #2
 8104910:	220f      	movs	r2, #15
 8104912:	fa02 f303 	lsl.w	r3, r2, r3
 8104916:	43db      	mvns	r3, r3
 8104918:	69ba      	ldr	r2, [r7, #24]
 810491a:	4013      	ands	r3, r2
 810491c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810491e:	683b      	ldr	r3, [r7, #0]
 8104920:	691a      	ldr	r2, [r3, #16]
 8104922:	69fb      	ldr	r3, [r7, #28]
 8104924:	f003 0307 	and.w	r3, r3, #7
 8104928:	009b      	lsls	r3, r3, #2
 810492a:	fa02 f303 	lsl.w	r3, r2, r3
 810492e:	69ba      	ldr	r2, [r7, #24]
 8104930:	4313      	orrs	r3, r2
 8104932:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104934:	69fb      	ldr	r3, [r7, #28]
 8104936:	08da      	lsrs	r2, r3, #3
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	3208      	adds	r2, #8
 810493c:	69b9      	ldr	r1, [r7, #24]
 810493e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104948:	69fb      	ldr	r3, [r7, #28]
 810494a:	005b      	lsls	r3, r3, #1
 810494c:	2203      	movs	r2, #3
 810494e:	fa02 f303 	lsl.w	r3, r2, r3
 8104952:	43db      	mvns	r3, r3
 8104954:	69ba      	ldr	r2, [r7, #24]
 8104956:	4013      	ands	r3, r2
 8104958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810495a:	683b      	ldr	r3, [r7, #0]
 810495c:	685b      	ldr	r3, [r3, #4]
 810495e:	f003 0203 	and.w	r2, r3, #3
 8104962:	69fb      	ldr	r3, [r7, #28]
 8104964:	005b      	lsls	r3, r3, #1
 8104966:	fa02 f303 	lsl.w	r3, r2, r3
 810496a:	69ba      	ldr	r2, [r7, #24]
 810496c:	4313      	orrs	r3, r2
 810496e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	69ba      	ldr	r2, [r7, #24]
 8104974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104976:	683b      	ldr	r3, [r7, #0]
 8104978:	685b      	ldr	r3, [r3, #4]
 810497a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810497e:	2b00      	cmp	r3, #0
 8104980:	f000 80e0 	beq.w	8104b44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104984:	4b2f      	ldr	r3, [pc, #188]	@ (8104a44 <HAL_GPIO_Init+0x238>)
 8104986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810498a:	4a2e      	ldr	r2, [pc, #184]	@ (8104a44 <HAL_GPIO_Init+0x238>)
 810498c:	f043 0302 	orr.w	r3, r3, #2
 8104990:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104994:	4b2b      	ldr	r3, [pc, #172]	@ (8104a44 <HAL_GPIO_Init+0x238>)
 8104996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810499a:	f003 0302 	and.w	r3, r3, #2
 810499e:	60fb      	str	r3, [r7, #12]
 81049a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81049a2:	4a29      	ldr	r2, [pc, #164]	@ (8104a48 <HAL_GPIO_Init+0x23c>)
 81049a4:	69fb      	ldr	r3, [r7, #28]
 81049a6:	089b      	lsrs	r3, r3, #2
 81049a8:	3302      	adds	r3, #2
 81049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81049b0:	69fb      	ldr	r3, [r7, #28]
 81049b2:	f003 0303 	and.w	r3, r3, #3
 81049b6:	009b      	lsls	r3, r3, #2
 81049b8:	220f      	movs	r2, #15
 81049ba:	fa02 f303 	lsl.w	r3, r2, r3
 81049be:	43db      	mvns	r3, r3
 81049c0:	69ba      	ldr	r2, [r7, #24]
 81049c2:	4013      	ands	r3, r2
 81049c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	4a20      	ldr	r2, [pc, #128]	@ (8104a4c <HAL_GPIO_Init+0x240>)
 81049ca:	4293      	cmp	r3, r2
 81049cc:	d052      	beq.n	8104a74 <HAL_GPIO_Init+0x268>
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	4a1f      	ldr	r2, [pc, #124]	@ (8104a50 <HAL_GPIO_Init+0x244>)
 81049d2:	4293      	cmp	r3, r2
 81049d4:	d031      	beq.n	8104a3a <HAL_GPIO_Init+0x22e>
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	4a1e      	ldr	r2, [pc, #120]	@ (8104a54 <HAL_GPIO_Init+0x248>)
 81049da:	4293      	cmp	r3, r2
 81049dc:	d02b      	beq.n	8104a36 <HAL_GPIO_Init+0x22a>
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	4a1d      	ldr	r2, [pc, #116]	@ (8104a58 <HAL_GPIO_Init+0x24c>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d025      	beq.n	8104a32 <HAL_GPIO_Init+0x226>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8104a5c <HAL_GPIO_Init+0x250>)
 81049ea:	4293      	cmp	r3, r2
 81049ec:	d01f      	beq.n	8104a2e <HAL_GPIO_Init+0x222>
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8104a60 <HAL_GPIO_Init+0x254>)
 81049f2:	4293      	cmp	r3, r2
 81049f4:	d019      	beq.n	8104a2a <HAL_GPIO_Init+0x21e>
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	4a1a      	ldr	r2, [pc, #104]	@ (8104a64 <HAL_GPIO_Init+0x258>)
 81049fa:	4293      	cmp	r3, r2
 81049fc:	d013      	beq.n	8104a26 <HAL_GPIO_Init+0x21a>
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	4a19      	ldr	r2, [pc, #100]	@ (8104a68 <HAL_GPIO_Init+0x25c>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d00d      	beq.n	8104a22 <HAL_GPIO_Init+0x216>
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	4a18      	ldr	r2, [pc, #96]	@ (8104a6c <HAL_GPIO_Init+0x260>)
 8104a0a:	4293      	cmp	r3, r2
 8104a0c:	d007      	beq.n	8104a1e <HAL_GPIO_Init+0x212>
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	4a17      	ldr	r2, [pc, #92]	@ (8104a70 <HAL_GPIO_Init+0x264>)
 8104a12:	4293      	cmp	r3, r2
 8104a14:	d101      	bne.n	8104a1a <HAL_GPIO_Init+0x20e>
 8104a16:	2309      	movs	r3, #9
 8104a18:	e02d      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a1a:	230a      	movs	r3, #10
 8104a1c:	e02b      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a1e:	2308      	movs	r3, #8
 8104a20:	e029      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a22:	2307      	movs	r3, #7
 8104a24:	e027      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a26:	2306      	movs	r3, #6
 8104a28:	e025      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a2a:	2305      	movs	r3, #5
 8104a2c:	e023      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a2e:	2304      	movs	r3, #4
 8104a30:	e021      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a32:	2303      	movs	r3, #3
 8104a34:	e01f      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a36:	2302      	movs	r3, #2
 8104a38:	e01d      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a3a:	2301      	movs	r3, #1
 8104a3c:	e01b      	b.n	8104a76 <HAL_GPIO_Init+0x26a>
 8104a3e:	bf00      	nop
 8104a40:	580000c0 	.word	0x580000c0
 8104a44:	58024400 	.word	0x58024400
 8104a48:	58000400 	.word	0x58000400
 8104a4c:	58020000 	.word	0x58020000
 8104a50:	58020400 	.word	0x58020400
 8104a54:	58020800 	.word	0x58020800
 8104a58:	58020c00 	.word	0x58020c00
 8104a5c:	58021000 	.word	0x58021000
 8104a60:	58021400 	.word	0x58021400
 8104a64:	58021800 	.word	0x58021800
 8104a68:	58021c00 	.word	0x58021c00
 8104a6c:	58022000 	.word	0x58022000
 8104a70:	58022400 	.word	0x58022400
 8104a74:	2300      	movs	r3, #0
 8104a76:	69fa      	ldr	r2, [r7, #28]
 8104a78:	f002 0203 	and.w	r2, r2, #3
 8104a7c:	0092      	lsls	r2, r2, #2
 8104a7e:	4093      	lsls	r3, r2
 8104a80:	69ba      	ldr	r2, [r7, #24]
 8104a82:	4313      	orrs	r3, r2
 8104a84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104a86:	4938      	ldr	r1, [pc, #224]	@ (8104b68 <HAL_GPIO_Init+0x35c>)
 8104a88:	69fb      	ldr	r3, [r7, #28]
 8104a8a:	089b      	lsrs	r3, r3, #2
 8104a8c:	3302      	adds	r3, #2
 8104a8e:	69ba      	ldr	r2, [r7, #24]
 8104a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a9c:	693b      	ldr	r3, [r7, #16]
 8104a9e:	43db      	mvns	r3, r3
 8104aa0:	69ba      	ldr	r2, [r7, #24]
 8104aa2:	4013      	ands	r3, r2
 8104aa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104aa6:	683b      	ldr	r3, [r7, #0]
 8104aa8:	685b      	ldr	r3, [r3, #4]
 8104aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104aae:	2b00      	cmp	r3, #0
 8104ab0:	d003      	beq.n	8104aba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104ab2:	69ba      	ldr	r2, [r7, #24]
 8104ab4:	693b      	ldr	r3, [r7, #16]
 8104ab6:	4313      	orrs	r3, r2
 8104ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104abe:	69bb      	ldr	r3, [r7, #24]
 8104ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104ac6:	685b      	ldr	r3, [r3, #4]
 8104ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104aca:	693b      	ldr	r3, [r7, #16]
 8104acc:	43db      	mvns	r3, r3
 8104ace:	69ba      	ldr	r2, [r7, #24]
 8104ad0:	4013      	ands	r3, r2
 8104ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104ad4:	683b      	ldr	r3, [r7, #0]
 8104ad6:	685b      	ldr	r3, [r3, #4]
 8104ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104adc:	2b00      	cmp	r3, #0
 8104ade:	d003      	beq.n	8104ae8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104ae0:	69ba      	ldr	r2, [r7, #24]
 8104ae2:	693b      	ldr	r3, [r7, #16]
 8104ae4:	4313      	orrs	r3, r2
 8104ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104aec:	69bb      	ldr	r3, [r7, #24]
 8104aee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104af0:	697b      	ldr	r3, [r7, #20]
 8104af2:	685b      	ldr	r3, [r3, #4]
 8104af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104af6:	693b      	ldr	r3, [r7, #16]
 8104af8:	43db      	mvns	r3, r3
 8104afa:	69ba      	ldr	r2, [r7, #24]
 8104afc:	4013      	ands	r3, r2
 8104afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104b00:	683b      	ldr	r3, [r7, #0]
 8104b02:	685b      	ldr	r3, [r3, #4]
 8104b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104b08:	2b00      	cmp	r3, #0
 8104b0a:	d003      	beq.n	8104b14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104b0c:	69ba      	ldr	r2, [r7, #24]
 8104b0e:	693b      	ldr	r3, [r7, #16]
 8104b10:	4313      	orrs	r3, r2
 8104b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104b14:	697b      	ldr	r3, [r7, #20]
 8104b16:	69ba      	ldr	r2, [r7, #24]
 8104b18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104b1a:	697b      	ldr	r3, [r7, #20]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104b20:	693b      	ldr	r3, [r7, #16]
 8104b22:	43db      	mvns	r3, r3
 8104b24:	69ba      	ldr	r2, [r7, #24]
 8104b26:	4013      	ands	r3, r2
 8104b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104b2a:	683b      	ldr	r3, [r7, #0]
 8104b2c:	685b      	ldr	r3, [r3, #4]
 8104b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104b32:	2b00      	cmp	r3, #0
 8104b34:	d003      	beq.n	8104b3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104b36:	69ba      	ldr	r2, [r7, #24]
 8104b38:	693b      	ldr	r3, [r7, #16]
 8104b3a:	4313      	orrs	r3, r2
 8104b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104b3e:	697b      	ldr	r3, [r7, #20]
 8104b40:	69ba      	ldr	r2, [r7, #24]
 8104b42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104b44:	69fb      	ldr	r3, [r7, #28]
 8104b46:	3301      	adds	r3, #1
 8104b48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b4a:	683b      	ldr	r3, [r7, #0]
 8104b4c:	681a      	ldr	r2, [r3, #0]
 8104b4e:	69fb      	ldr	r3, [r7, #28]
 8104b50:	fa22 f303 	lsr.w	r3, r2, r3
 8104b54:	2b00      	cmp	r3, #0
 8104b56:	f47f ae63 	bne.w	8104820 <HAL_GPIO_Init+0x14>
  }
}
 8104b5a:	bf00      	nop
 8104b5c:	bf00      	nop
 8104b5e:	3724      	adds	r7, #36	@ 0x24
 8104b60:	46bd      	mov	sp, r7
 8104b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b66:	4770      	bx	lr
 8104b68:	58000400 	.word	0x58000400

08104b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104b6c:	b480      	push	{r7}
 8104b6e:	b083      	sub	sp, #12
 8104b70:	af00      	add	r7, sp, #0
 8104b72:	6078      	str	r0, [r7, #4]
 8104b74:	460b      	mov	r3, r1
 8104b76:	807b      	strh	r3, [r7, #2]
 8104b78:	4613      	mov	r3, r2
 8104b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104b7c:	787b      	ldrb	r3, [r7, #1]
 8104b7e:	2b00      	cmp	r3, #0
 8104b80:	d003      	beq.n	8104b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104b82:	887a      	ldrh	r2, [r7, #2]
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104b88:	e003      	b.n	8104b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104b8a:	887b      	ldrh	r3, [r7, #2]
 8104b8c:	041a      	lsls	r2, r3, #16
 8104b8e:	687b      	ldr	r3, [r7, #4]
 8104b90:	619a      	str	r2, [r3, #24]
}
 8104b92:	bf00      	nop
 8104b94:	370c      	adds	r7, #12
 8104b96:	46bd      	mov	sp, r7
 8104b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9c:	4770      	bx	lr
	...

08104ba0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8104ba0:	b480      	push	{r7}
 8104ba2:	b083      	sub	sp, #12
 8104ba4:	af00      	add	r7, sp, #0
 8104ba6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8104ba8:	4a08      	ldr	r2, [pc, #32]	@ (8104bcc <HAL_HSEM_FastTake+0x2c>)
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	3320      	adds	r3, #32
 8104bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104bb2:	4a07      	ldr	r2, [pc, #28]	@ (8104bd0 <HAL_HSEM_FastTake+0x30>)
 8104bb4:	4293      	cmp	r3, r2
 8104bb6:	d101      	bne.n	8104bbc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8104bb8:	2300      	movs	r3, #0
 8104bba:	e000      	b.n	8104bbe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8104bbc:	2301      	movs	r3, #1
}
 8104bbe:	4618      	mov	r0, r3
 8104bc0:	370c      	adds	r7, #12
 8104bc2:	46bd      	mov	sp, r7
 8104bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bc8:	4770      	bx	lr
 8104bca:	bf00      	nop
 8104bcc:	58026400 	.word	0x58026400
 8104bd0:	80000100 	.word	0x80000100

08104bd4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104bd4:	b480      	push	{r7}
 8104bd6:	b083      	sub	sp, #12
 8104bd8:	af00      	add	r7, sp, #0
 8104bda:	6078      	str	r0, [r7, #4]
 8104bdc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104bde:	4906      	ldr	r1, [pc, #24]	@ (8104bf8 <HAL_HSEM_Release+0x24>)
 8104be0:	683b      	ldr	r3, [r7, #0]
 8104be2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104bec:	bf00      	nop
 8104bee:	370c      	adds	r7, #12
 8104bf0:	46bd      	mov	sp, r7
 8104bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bf6:	4770      	bx	lr
 8104bf8:	58026400 	.word	0x58026400

08104bfc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104bfc:	b480      	push	{r7}
 8104bfe:	b083      	sub	sp, #12
 8104c00:	af00      	add	r7, sp, #0
 8104c02:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104c04:	4b05      	ldr	r3, [pc, #20]	@ (8104c1c <HAL_HSEM_ActivateNotification+0x20>)
 8104c06:	681a      	ldr	r2, [r3, #0]
 8104c08:	4904      	ldr	r1, [pc, #16]	@ (8104c1c <HAL_HSEM_ActivateNotification+0x20>)
 8104c0a:	687b      	ldr	r3, [r7, #4]
 8104c0c:	4313      	orrs	r3, r2
 8104c0e:	600b      	str	r3, [r1, #0]
#endif
}
 8104c10:	bf00      	nop
 8104c12:	370c      	adds	r7, #12
 8104c14:	46bd      	mov	sp, r7
 8104c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c1a:	4770      	bx	lr
 8104c1c:	58026510 	.word	0x58026510

08104c20 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
 8104c20:	b480      	push	{r7}
 8104c22:	b083      	sub	sp, #12
 8104c24:	af00      	add	r7, sp, #0
 8104c26:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
 8104c28:	4b06      	ldr	r3, [pc, #24]	@ (8104c44 <HAL_HSEM_DeactivateNotification+0x24>)
 8104c2a:	681a      	ldr	r2, [r3, #0]
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	43db      	mvns	r3, r3
 8104c30:	4904      	ldr	r1, [pc, #16]	@ (8104c44 <HAL_HSEM_DeactivateNotification+0x24>)
 8104c32:	4013      	ands	r3, r2
 8104c34:	600b      	str	r3, [r1, #0]
#endif
}
 8104c36:	bf00      	nop
 8104c38:	370c      	adds	r7, #12
 8104c3a:	46bd      	mov	sp, r7
 8104c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c40:	4770      	bx	lr
 8104c42:	bf00      	nop
 8104c44:	58026510 	.word	0x58026510

08104c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104c48:	b580      	push	{r7, lr}
 8104c4a:	b082      	sub	sp, #8
 8104c4c:	af00      	add	r7, sp, #0
 8104c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	2b00      	cmp	r3, #0
 8104c54:	d101      	bne.n	8104c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104c56:	2301      	movs	r3, #1
 8104c58:	e08d      	b.n	8104d76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104c60:	b2db      	uxtb	r3, r3
 8104c62:	2b00      	cmp	r3, #0
 8104c64:	d106      	bne.n	8104c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104c66:	687b      	ldr	r3, [r7, #4]
 8104c68:	2200      	movs	r2, #0
 8104c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104c6e:	6878      	ldr	r0, [r7, #4]
 8104c70:	f7fc fcbe 	bl	81015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	2224      	movs	r2, #36	@ 0x24
 8104c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	681a      	ldr	r2, [r3, #0]
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	f022 0201 	bic.w	r2, r2, #1
 8104c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	685a      	ldr	r2, [r3, #4]
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8104c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	681b      	ldr	r3, [r3, #0]
 8104c9e:	689a      	ldr	r2, [r3, #8]
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8104ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	68db      	ldr	r3, [r3, #12]
 8104cae:	2b01      	cmp	r3, #1
 8104cb0:	d107      	bne.n	8104cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	689a      	ldr	r2, [r3, #8]
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8104cbe:	609a      	str	r2, [r3, #8]
 8104cc0:	e006      	b.n	8104cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	689a      	ldr	r2, [r3, #8]
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	681b      	ldr	r3, [r3, #0]
 8104cca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8104cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	68db      	ldr	r3, [r3, #12]
 8104cd4:	2b02      	cmp	r3, #2
 8104cd6:	d108      	bne.n	8104cea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	685a      	ldr	r2, [r3, #4]
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104ce6:	605a      	str	r2, [r3, #4]
 8104ce8:	e007      	b.n	8104cfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	685a      	ldr	r2, [r3, #4]
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8104cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	685b      	ldr	r3, [r3, #4]
 8104d00:	687a      	ldr	r2, [r7, #4]
 8104d02:	6812      	ldr	r2, [r2, #0]
 8104d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8104d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	68da      	ldr	r2, [r3, #12]
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8104d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	691a      	ldr	r2, [r3, #16]
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	695b      	ldr	r3, [r3, #20]
 8104d26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	699b      	ldr	r3, [r3, #24]
 8104d2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104d30:	687b      	ldr	r3, [r7, #4]
 8104d32:	681b      	ldr	r3, [r3, #0]
 8104d34:	430a      	orrs	r2, r1
 8104d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	69d9      	ldr	r1, [r3, #28]
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	6a1a      	ldr	r2, [r3, #32]
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	430a      	orrs	r2, r1
 8104d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	681a      	ldr	r2, [r3, #0]
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	f042 0201 	orr.w	r2, r2, #1
 8104d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	2200      	movs	r2, #0
 8104d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	2220      	movs	r2, #32
 8104d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	2200      	movs	r2, #0
 8104d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	2200      	movs	r2, #0
 8104d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8104d74:	2300      	movs	r3, #0
}
 8104d76:	4618      	mov	r0, r3
 8104d78:	3708      	adds	r7, #8
 8104d7a:	46bd      	mov	sp, r7
 8104d7c:	bd80      	pop	{r7, pc}
	...

08104d80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104d80:	b580      	push	{r7, lr}
 8104d82:	b088      	sub	sp, #32
 8104d84:	af02      	add	r7, sp, #8
 8104d86:	60f8      	str	r0, [r7, #12]
 8104d88:	4608      	mov	r0, r1
 8104d8a:	4611      	mov	r1, r2
 8104d8c:	461a      	mov	r2, r3
 8104d8e:	4603      	mov	r3, r0
 8104d90:	817b      	strh	r3, [r7, #10]
 8104d92:	460b      	mov	r3, r1
 8104d94:	813b      	strh	r3, [r7, #8]
 8104d96:	4613      	mov	r3, r2
 8104d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104da0:	b2db      	uxtb	r3, r3
 8104da2:	2b20      	cmp	r3, #32
 8104da4:	f040 80f9 	bne.w	8104f9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104da8:	6a3b      	ldr	r3, [r7, #32]
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d002      	beq.n	8104db4 <HAL_I2C_Mem_Write+0x34>
 8104dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8104db0:	2b00      	cmp	r3, #0
 8104db2:	d105      	bne.n	8104dc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104db4:	68fb      	ldr	r3, [r7, #12]
 8104db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104dba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8104dbc:	2301      	movs	r3, #1
 8104dbe:	e0ed      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104dc0:	68fb      	ldr	r3, [r7, #12]
 8104dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104dc6:	2b01      	cmp	r3, #1
 8104dc8:	d101      	bne.n	8104dce <HAL_I2C_Mem_Write+0x4e>
 8104dca:	2302      	movs	r3, #2
 8104dcc:	e0e6      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
 8104dce:	68fb      	ldr	r3, [r7, #12]
 8104dd0:	2201      	movs	r2, #1
 8104dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104dd6:	f7fd f875 	bl	8101ec4 <HAL_GetTick>
 8104dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104ddc:	697b      	ldr	r3, [r7, #20]
 8104dde:	9300      	str	r3, [sp, #0]
 8104de0:	2319      	movs	r3, #25
 8104de2:	2201      	movs	r2, #1
 8104de4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8104de8:	68f8      	ldr	r0, [r7, #12]
 8104dea:	f002 f8a9 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 8104dee:	4603      	mov	r3, r0
 8104df0:	2b00      	cmp	r3, #0
 8104df2:	d001      	beq.n	8104df8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104df4:	2301      	movs	r3, #1
 8104df6:	e0d1      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	2221      	movs	r2, #33	@ 0x21
 8104dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104e00:	68fb      	ldr	r3, [r7, #12]
 8104e02:	2240      	movs	r2, #64	@ 0x40
 8104e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	2200      	movs	r2, #0
 8104e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	6a3a      	ldr	r2, [r7, #32]
 8104e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8104e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8104e1a:	68fb      	ldr	r3, [r7, #12]
 8104e1c:	2200      	movs	r2, #0
 8104e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104e20:	88f8      	ldrh	r0, [r7, #6]
 8104e22:	893a      	ldrh	r2, [r7, #8]
 8104e24:	8979      	ldrh	r1, [r7, #10]
 8104e26:	697b      	ldr	r3, [r7, #20]
 8104e28:	9301      	str	r3, [sp, #4]
 8104e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104e2c:	9300      	str	r3, [sp, #0]
 8104e2e:	4603      	mov	r3, r0
 8104e30:	68f8      	ldr	r0, [r7, #12]
 8104e32:	f001 f871 	bl	8105f18 <I2C_RequestMemoryWrite>
 8104e36:	4603      	mov	r3, r0
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	d005      	beq.n	8104e48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	2200      	movs	r2, #0
 8104e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8104e44:	2301      	movs	r3, #1
 8104e46:	e0a9      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104e48:	68fb      	ldr	r3, [r7, #12]
 8104e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104e4c:	b29b      	uxth	r3, r3
 8104e4e:	2bff      	cmp	r3, #255	@ 0xff
 8104e50:	d90e      	bls.n	8104e70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	22ff      	movs	r2, #255	@ 0xff
 8104e56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104e5c:	b2da      	uxtb	r2, r3
 8104e5e:	8979      	ldrh	r1, [r7, #10]
 8104e60:	2300      	movs	r3, #0
 8104e62:	9300      	str	r3, [sp, #0]
 8104e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8104e68:	68f8      	ldr	r0, [r7, #12]
 8104e6a:	f002 fa2d 	bl	81072c8 <I2C_TransferConfig>
 8104e6e:	e00f      	b.n	8104e90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104e70:	68fb      	ldr	r3, [r7, #12]
 8104e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104e74:	b29a      	uxth	r2, r3
 8104e76:	68fb      	ldr	r3, [r7, #12]
 8104e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104e7a:	68fb      	ldr	r3, [r7, #12]
 8104e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104e7e:	b2da      	uxtb	r2, r3
 8104e80:	8979      	ldrh	r1, [r7, #10]
 8104e82:	2300      	movs	r3, #0
 8104e84:	9300      	str	r3, [sp, #0]
 8104e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8104e8a:	68f8      	ldr	r0, [r7, #12]
 8104e8c:	f002 fa1c 	bl	81072c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104e90:	697a      	ldr	r2, [r7, #20]
 8104e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104e94:	68f8      	ldr	r0, [r7, #12]
 8104e96:	f002 f8ac 	bl	8106ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8104e9a:	4603      	mov	r3, r0
 8104e9c:	2b00      	cmp	r3, #0
 8104e9e:	d001      	beq.n	8104ea4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8104ea0:	2301      	movs	r3, #1
 8104ea2:	e07b      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104ea8:	781a      	ldrb	r2, [r3, #0]
 8104eaa:	68fb      	ldr	r3, [r7, #12]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104eb0:	68fb      	ldr	r3, [r7, #12]
 8104eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104eb4:	1c5a      	adds	r2, r3, #1
 8104eb6:	68fb      	ldr	r3, [r7, #12]
 8104eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8104eba:	68fb      	ldr	r3, [r7, #12]
 8104ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104ebe:	b29b      	uxth	r3, r3
 8104ec0:	3b01      	subs	r3, #1
 8104ec2:	b29a      	uxth	r2, r3
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104ecc:	3b01      	subs	r3, #1
 8104ece:	b29a      	uxth	r2, r3
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104ed4:	68fb      	ldr	r3, [r7, #12]
 8104ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104ed8:	b29b      	uxth	r3, r3
 8104eda:	2b00      	cmp	r3, #0
 8104edc:	d034      	beq.n	8104f48 <HAL_I2C_Mem_Write+0x1c8>
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104ee2:	2b00      	cmp	r3, #0
 8104ee4:	d130      	bne.n	8104f48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104ee6:	697b      	ldr	r3, [r7, #20]
 8104ee8:	9300      	str	r3, [sp, #0]
 8104eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104eec:	2200      	movs	r2, #0
 8104eee:	2180      	movs	r1, #128	@ 0x80
 8104ef0:	68f8      	ldr	r0, [r7, #12]
 8104ef2:	f002 f825 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 8104ef6:	4603      	mov	r3, r0
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d001      	beq.n	8104f00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104efc:	2301      	movs	r3, #1
 8104efe:	e04d      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104f00:	68fb      	ldr	r3, [r7, #12]
 8104f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104f04:	b29b      	uxth	r3, r3
 8104f06:	2bff      	cmp	r3, #255	@ 0xff
 8104f08:	d90e      	bls.n	8104f28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104f0a:	68fb      	ldr	r3, [r7, #12]
 8104f0c:	22ff      	movs	r2, #255	@ 0xff
 8104f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104f10:	68fb      	ldr	r3, [r7, #12]
 8104f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104f14:	b2da      	uxtb	r2, r3
 8104f16:	8979      	ldrh	r1, [r7, #10]
 8104f18:	2300      	movs	r3, #0
 8104f1a:	9300      	str	r3, [sp, #0]
 8104f1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8104f20:	68f8      	ldr	r0, [r7, #12]
 8104f22:	f002 f9d1 	bl	81072c8 <I2C_TransferConfig>
 8104f26:	e00f      	b.n	8104f48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104f28:	68fb      	ldr	r3, [r7, #12]
 8104f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104f2c:	b29a      	uxth	r2, r3
 8104f2e:	68fb      	ldr	r3, [r7, #12]
 8104f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104f32:	68fb      	ldr	r3, [r7, #12]
 8104f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8104f36:	b2da      	uxtb	r2, r3
 8104f38:	8979      	ldrh	r1, [r7, #10]
 8104f3a:	2300      	movs	r3, #0
 8104f3c:	9300      	str	r3, [sp, #0]
 8104f3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8104f42:	68f8      	ldr	r0, [r7, #12]
 8104f44:	f002 f9c0 	bl	81072c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104f48:	68fb      	ldr	r3, [r7, #12]
 8104f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8104f4c:	b29b      	uxth	r3, r3
 8104f4e:	2b00      	cmp	r3, #0
 8104f50:	d19e      	bne.n	8104e90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104f52:	697a      	ldr	r2, [r7, #20]
 8104f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104f56:	68f8      	ldr	r0, [r7, #12]
 8104f58:	f002 f892 	bl	8107080 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104f5c:	4603      	mov	r3, r0
 8104f5e:	2b00      	cmp	r3, #0
 8104f60:	d001      	beq.n	8104f66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104f62:	2301      	movs	r3, #1
 8104f64:	e01a      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104f66:	68fb      	ldr	r3, [r7, #12]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	2220      	movs	r2, #32
 8104f6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104f6e:	68fb      	ldr	r3, [r7, #12]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	6859      	ldr	r1, [r3, #4]
 8104f74:	68fb      	ldr	r3, [r7, #12]
 8104f76:	681a      	ldr	r2, [r3, #0]
 8104f78:	4b0a      	ldr	r3, [pc, #40]	@ (8104fa4 <HAL_I2C_Mem_Write+0x224>)
 8104f7a:	400b      	ands	r3, r1
 8104f7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104f7e:	68fb      	ldr	r3, [r7, #12]
 8104f80:	2220      	movs	r2, #32
 8104f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	2200      	movs	r2, #0
 8104f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104f8e:	68fb      	ldr	r3, [r7, #12]
 8104f90:	2200      	movs	r2, #0
 8104f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104f96:	2300      	movs	r3, #0
 8104f98:	e000      	b.n	8104f9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104f9a:	2302      	movs	r3, #2
  }
}
 8104f9c:	4618      	mov	r0, r3
 8104f9e:	3718      	adds	r7, #24
 8104fa0:	46bd      	mov	sp, r7
 8104fa2:	bd80      	pop	{r7, pc}
 8104fa4:	fe00e800 	.word	0xfe00e800

08104fa8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104fa8:	b580      	push	{r7, lr}
 8104faa:	b088      	sub	sp, #32
 8104fac:	af02      	add	r7, sp, #8
 8104fae:	60f8      	str	r0, [r7, #12]
 8104fb0:	4608      	mov	r0, r1
 8104fb2:	4611      	mov	r1, r2
 8104fb4:	461a      	mov	r2, r3
 8104fb6:	4603      	mov	r3, r0
 8104fb8:	817b      	strh	r3, [r7, #10]
 8104fba:	460b      	mov	r3, r1
 8104fbc:	813b      	strh	r3, [r7, #8]
 8104fbe:	4613      	mov	r3, r2
 8104fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104fc8:	b2db      	uxtb	r3, r3
 8104fca:	2b20      	cmp	r3, #32
 8104fcc:	f040 80fd 	bne.w	81051ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104fd0:	6a3b      	ldr	r3, [r7, #32]
 8104fd2:	2b00      	cmp	r3, #0
 8104fd4:	d002      	beq.n	8104fdc <HAL_I2C_Mem_Read+0x34>
 8104fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8104fd8:	2b00      	cmp	r3, #0
 8104fda:	d105      	bne.n	8104fe8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104fdc:	68fb      	ldr	r3, [r7, #12]
 8104fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104fe2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8104fe4:	2301      	movs	r3, #1
 8104fe6:	e0f1      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104fe8:	68fb      	ldr	r3, [r7, #12]
 8104fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104fee:	2b01      	cmp	r3, #1
 8104ff0:	d101      	bne.n	8104ff6 <HAL_I2C_Mem_Read+0x4e>
 8104ff2:	2302      	movs	r3, #2
 8104ff4:	e0ea      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
 8104ff6:	68fb      	ldr	r3, [r7, #12]
 8104ff8:	2201      	movs	r2, #1
 8104ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104ffe:	f7fc ff61 	bl	8101ec4 <HAL_GetTick>
 8105002:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105004:	697b      	ldr	r3, [r7, #20]
 8105006:	9300      	str	r3, [sp, #0]
 8105008:	2319      	movs	r3, #25
 810500a:	2201      	movs	r2, #1
 810500c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8105010:	68f8      	ldr	r0, [r7, #12]
 8105012:	f001 ff95 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 8105016:	4603      	mov	r3, r0
 8105018:	2b00      	cmp	r3, #0
 810501a:	d001      	beq.n	8105020 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810501c:	2301      	movs	r3, #1
 810501e:	e0d5      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8105020:	68fb      	ldr	r3, [r7, #12]
 8105022:	2222      	movs	r2, #34	@ 0x22
 8105024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105028:	68fb      	ldr	r3, [r7, #12]
 810502a:	2240      	movs	r2, #64	@ 0x40
 810502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105030:	68fb      	ldr	r3, [r7, #12]
 8105032:	2200      	movs	r2, #0
 8105034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105036:	68fb      	ldr	r3, [r7, #12]
 8105038:	6a3a      	ldr	r2, [r7, #32]
 810503a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810503c:	68fb      	ldr	r3, [r7, #12]
 810503e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8105040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8105042:	68fb      	ldr	r3, [r7, #12]
 8105044:	2200      	movs	r2, #0
 8105046:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105048:	88f8      	ldrh	r0, [r7, #6]
 810504a:	893a      	ldrh	r2, [r7, #8]
 810504c:	8979      	ldrh	r1, [r7, #10]
 810504e:	697b      	ldr	r3, [r7, #20]
 8105050:	9301      	str	r3, [sp, #4]
 8105052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105054:	9300      	str	r3, [sp, #0]
 8105056:	4603      	mov	r3, r0
 8105058:	68f8      	ldr	r0, [r7, #12]
 810505a:	f000 ffb1 	bl	8105fc0 <I2C_RequestMemoryRead>
 810505e:	4603      	mov	r3, r0
 8105060:	2b00      	cmp	r3, #0
 8105062:	d005      	beq.n	8105070 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105064:	68fb      	ldr	r3, [r7, #12]
 8105066:	2200      	movs	r2, #0
 8105068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810506c:	2301      	movs	r3, #1
 810506e:	e0ad      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105070:	68fb      	ldr	r3, [r7, #12]
 8105072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105074:	b29b      	uxth	r3, r3
 8105076:	2bff      	cmp	r3, #255	@ 0xff
 8105078:	d90e      	bls.n	8105098 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810507a:	68fb      	ldr	r3, [r7, #12]
 810507c:	22ff      	movs	r2, #255	@ 0xff
 810507e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8105080:	68fb      	ldr	r3, [r7, #12]
 8105082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105084:	b2da      	uxtb	r2, r3
 8105086:	8979      	ldrh	r1, [r7, #10]
 8105088:	4b52      	ldr	r3, [pc, #328]	@ (81051d4 <HAL_I2C_Mem_Read+0x22c>)
 810508a:	9300      	str	r3, [sp, #0]
 810508c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105090:	68f8      	ldr	r0, [r7, #12]
 8105092:	f002 f919 	bl	81072c8 <I2C_TransferConfig>
 8105096:	e00f      	b.n	81050b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105098:	68fb      	ldr	r3, [r7, #12]
 810509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810509c:	b29a      	uxth	r2, r3
 810509e:	68fb      	ldr	r3, [r7, #12]
 81050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81050a6:	b2da      	uxtb	r2, r3
 81050a8:	8979      	ldrh	r1, [r7, #10]
 81050aa:	4b4a      	ldr	r3, [pc, #296]	@ (81051d4 <HAL_I2C_Mem_Read+0x22c>)
 81050ac:	9300      	str	r3, [sp, #0]
 81050ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81050b2:	68f8      	ldr	r0, [r7, #12]
 81050b4:	f002 f908 	bl	81072c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81050b8:	697b      	ldr	r3, [r7, #20]
 81050ba:	9300      	str	r3, [sp, #0]
 81050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81050be:	2200      	movs	r2, #0
 81050c0:	2104      	movs	r1, #4
 81050c2:	68f8      	ldr	r0, [r7, #12]
 81050c4:	f001 ff3c 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 81050c8:	4603      	mov	r3, r0
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d001      	beq.n	81050d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81050ce:	2301      	movs	r3, #1
 81050d0:	e07c      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81050dc:	b2d2      	uxtb	r2, r2
 81050de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81050e0:	68fb      	ldr	r3, [r7, #12]
 81050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81050e4:	1c5a      	adds	r2, r3, #1
 81050e6:	68fb      	ldr	r3, [r7, #12]
 81050e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81050ea:	68fb      	ldr	r3, [r7, #12]
 81050ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81050ee:	3b01      	subs	r3, #1
 81050f0:	b29a      	uxth	r2, r3
 81050f2:	68fb      	ldr	r3, [r7, #12]
 81050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81050fa:	b29b      	uxth	r3, r3
 81050fc:	3b01      	subs	r3, #1
 81050fe:	b29a      	uxth	r2, r3
 8105100:	68fb      	ldr	r3, [r7, #12]
 8105102:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105104:	68fb      	ldr	r3, [r7, #12]
 8105106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105108:	b29b      	uxth	r3, r3
 810510a:	2b00      	cmp	r3, #0
 810510c:	d034      	beq.n	8105178 <HAL_I2C_Mem_Read+0x1d0>
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105112:	2b00      	cmp	r3, #0
 8105114:	d130      	bne.n	8105178 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105116:	697b      	ldr	r3, [r7, #20]
 8105118:	9300      	str	r3, [sp, #0]
 810511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810511c:	2200      	movs	r2, #0
 810511e:	2180      	movs	r1, #128	@ 0x80
 8105120:	68f8      	ldr	r0, [r7, #12]
 8105122:	f001 ff0d 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 8105126:	4603      	mov	r3, r0
 8105128:	2b00      	cmp	r3, #0
 810512a:	d001      	beq.n	8105130 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810512c:	2301      	movs	r3, #1
 810512e:	e04d      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105134:	b29b      	uxth	r3, r3
 8105136:	2bff      	cmp	r3, #255	@ 0xff
 8105138:	d90e      	bls.n	8105158 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	22ff      	movs	r2, #255	@ 0xff
 810513e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105144:	b2da      	uxtb	r2, r3
 8105146:	8979      	ldrh	r1, [r7, #10]
 8105148:	2300      	movs	r3, #0
 810514a:	9300      	str	r3, [sp, #0]
 810514c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105150:	68f8      	ldr	r0, [r7, #12]
 8105152:	f002 f8b9 	bl	81072c8 <I2C_TransferConfig>
 8105156:	e00f      	b.n	8105178 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810515c:	b29a      	uxth	r2, r3
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8105162:	68fb      	ldr	r3, [r7, #12]
 8105164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105166:	b2da      	uxtb	r2, r3
 8105168:	8979      	ldrh	r1, [r7, #10]
 810516a:	2300      	movs	r3, #0
 810516c:	9300      	str	r3, [sp, #0]
 810516e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105172:	68f8      	ldr	r0, [r7, #12]
 8105174:	f002 f8a8 	bl	81072c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8105178:	68fb      	ldr	r3, [r7, #12]
 810517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810517c:	b29b      	uxth	r3, r3
 810517e:	2b00      	cmp	r3, #0
 8105180:	d19a      	bne.n	81050b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105182:	697a      	ldr	r2, [r7, #20]
 8105184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105186:	68f8      	ldr	r0, [r7, #12]
 8105188:	f001 ff7a 	bl	8107080 <I2C_WaitOnSTOPFlagUntilTimeout>
 810518c:	4603      	mov	r3, r0
 810518e:	2b00      	cmp	r3, #0
 8105190:	d001      	beq.n	8105196 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8105192:	2301      	movs	r3, #1
 8105194:	e01a      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	2220      	movs	r2, #32
 810519c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810519e:	68fb      	ldr	r3, [r7, #12]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	6859      	ldr	r1, [r3, #4]
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	681a      	ldr	r2, [r3, #0]
 81051a8:	4b0b      	ldr	r3, [pc, #44]	@ (81051d8 <HAL_I2C_Mem_Read+0x230>)
 81051aa:	400b      	ands	r3, r1
 81051ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81051ae:	68fb      	ldr	r3, [r7, #12]
 81051b0:	2220      	movs	r2, #32
 81051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81051b6:	68fb      	ldr	r3, [r7, #12]
 81051b8:	2200      	movs	r2, #0
 81051ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	2200      	movs	r2, #0
 81051c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81051c6:	2300      	movs	r3, #0
 81051c8:	e000      	b.n	81051cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81051ca:	2302      	movs	r3, #2
  }
}
 81051cc:	4618      	mov	r0, r3
 81051ce:	3718      	adds	r7, #24
 81051d0:	46bd      	mov	sp, r7
 81051d2:	bd80      	pop	{r7, pc}
 81051d4:	80002400 	.word	0x80002400
 81051d8:	fe00e800 	.word	0xfe00e800

081051dc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 81051dc:	b580      	push	{r7, lr}
 81051de:	b088      	sub	sp, #32
 81051e0:	af02      	add	r7, sp, #8
 81051e2:	60f8      	str	r0, [r7, #12]
 81051e4:	4608      	mov	r0, r1
 81051e6:	4611      	mov	r1, r2
 81051e8:	461a      	mov	r2, r3
 81051ea:	4603      	mov	r3, r0
 81051ec:	817b      	strh	r3, [r7, #10]
 81051ee:	460b      	mov	r3, r1
 81051f0:	813b      	strh	r3, [r7, #8]
 81051f2:	4613      	mov	r3, r2
 81051f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81051f6:	68fb      	ldr	r3, [r7, #12]
 81051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81051fc:	b2db      	uxtb	r3, r3
 81051fe:	2b20      	cmp	r3, #32
 8105200:	f040 80c2 	bne.w	8105388 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8105204:	6a3b      	ldr	r3, [r7, #32]
 8105206:	2b00      	cmp	r3, #0
 8105208:	d002      	beq.n	8105210 <HAL_I2C_Mem_Read_DMA+0x34>
 810520a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810520c:	2b00      	cmp	r3, #0
 810520e:	d105      	bne.n	810521c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105210:	68fb      	ldr	r3, [r7, #12]
 8105212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8105216:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8105218:	2301      	movs	r3, #1
 810521a:	e0b6      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	699b      	ldr	r3, [r3, #24]
 8105222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810522a:	d101      	bne.n	8105230 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 810522c:	2302      	movs	r3, #2
 810522e:	e0ac      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105236:	2b01      	cmp	r3, #1
 8105238:	d101      	bne.n	810523e <HAL_I2C_Mem_Read_DMA+0x62>
 810523a:	2302      	movs	r3, #2
 810523c:	e0a5      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
 810523e:	68fb      	ldr	r3, [r7, #12]
 8105240:	2201      	movs	r2, #1
 8105242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	2222      	movs	r2, #34	@ 0x22
 810524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 810524e:	68fb      	ldr	r3, [r7, #12]
 8105250:	2240      	movs	r2, #64	@ 0x40
 8105252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8105256:	68fb      	ldr	r3, [r7, #12]
 8105258:	2200      	movs	r2, #0
 810525a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 810525c:	68fb      	ldr	r3, [r7, #12]
 810525e:	6a3a      	ldr	r2, [r7, #32]
 8105260:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8105262:	68fb      	ldr	r3, [r7, #12]
 8105264:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8105266:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	4a4a      	ldr	r2, [pc, #296]	@ (8105394 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 810526c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	4a49      	ldr	r2, [pc, #292]	@ (8105398 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8105272:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8105274:	897a      	ldrh	r2, [r7, #10]
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810527a:	68fb      	ldr	r3, [r7, #12]
 810527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810527e:	b29b      	uxth	r3, r3
 8105280:	2bff      	cmp	r3, #255	@ 0xff
 8105282:	d903      	bls.n	810528c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	22ff      	movs	r2, #255	@ 0xff
 8105288:	851a      	strh	r2, [r3, #40]	@ 0x28
 810528a:	e004      	b.n	8105296 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810528c:	68fb      	ldr	r3, [r7, #12]
 810528e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105290:	b29a      	uxth	r2, r3
 8105292:	68fb      	ldr	r3, [r7, #12]
 8105294:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105296:	88fb      	ldrh	r3, [r7, #6]
 8105298:	2b01      	cmp	r3, #1
 810529a:	d109      	bne.n	81052b0 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810529c:	893b      	ldrh	r3, [r7, #8]
 810529e:	b2da      	uxtb	r2, r3
 81052a0:	68fb      	ldr	r3, [r7, #12]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 81052a6:	68fb      	ldr	r3, [r7, #12]
 81052a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81052ac:	651a      	str	r2, [r3, #80]	@ 0x50
 81052ae:	e00b      	b.n	81052c8 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81052b0:	893b      	ldrh	r3, [r7, #8]
 81052b2:	0a1b      	lsrs	r3, r3, #8
 81052b4:	b29b      	uxth	r3, r3
 81052b6:	b2da      	uxtb	r2, r3
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 81052be:	893b      	ldrh	r3, [r7, #8]
 81052c0:	b2db      	uxtb	r3, r3
 81052c2:	461a      	mov	r2, r3
 81052c4:	68fb      	ldr	r3, [r7, #12]
 81052c6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	d020      	beq.n	8105312 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052d4:	4a31      	ldr	r2, [pc, #196]	@ (810539c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 81052d6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052dc:	4a30      	ldr	r2, [pc, #192]	@ (81053a0 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 81052de:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052e4:	2200      	movs	r2, #0
 81052e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 81052e8:	68fb      	ldr	r3, [r7, #12]
 81052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052ec:	2200      	movs	r2, #0
 81052ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 81052f0:	68fb      	ldr	r3, [r7, #12]
 81052f2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 81052f4:	68fb      	ldr	r3, [r7, #12]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	3324      	adds	r3, #36	@ 0x24
 81052fa:	4619      	mov	r1, r3
 81052fc:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 81052fe:	68fb      	ldr	r3, [r7, #12]
 8105300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8105302:	f7fd faa7 	bl	8102854 <HAL_DMA_Start_IT>
 8105306:	4603      	mov	r3, r0
 8105308:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 810530a:	7dfb      	ldrb	r3, [r7, #23]
 810530c:	2b00      	cmp	r3, #0
 810530e:	d127      	bne.n	8105360 <HAL_I2C_Mem_Read_DMA+0x184>
 8105310:	e013      	b.n	810533a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8105312:	68fb      	ldr	r3, [r7, #12]
 8105314:	2220      	movs	r2, #32
 8105316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 810531a:	68fb      	ldr	r3, [r7, #12]
 810531c:	2200      	movs	r2, #0
 810531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8105322:	68fb      	ldr	r3, [r7, #12]
 8105324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105326:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 810532e:	68fb      	ldr	r3, [r7, #12]
 8105330:	2200      	movs	r2, #0
 8105332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8105336:	2301      	movs	r3, #1
 8105338:	e027      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810533a:	88fb      	ldrh	r3, [r7, #6]
 810533c:	b2da      	uxtb	r2, r3
 810533e:	8979      	ldrh	r1, [r7, #10]
 8105340:	4b18      	ldr	r3, [pc, #96]	@ (81053a4 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8105342:	9300      	str	r3, [sp, #0]
 8105344:	2300      	movs	r3, #0
 8105346:	68f8      	ldr	r0, [r7, #12]
 8105348:	f001 ffbe 	bl	81072c8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	2200      	movs	r2, #0
 8105350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8105354:	2101      	movs	r1, #1
 8105356:	68f8      	ldr	r0, [r7, #12]
 8105358:	f001 ffe8 	bl	810732c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 810535c:	2300      	movs	r3, #0
 810535e:	e014      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8105360:	68fb      	ldr	r3, [r7, #12]
 8105362:	2220      	movs	r2, #32
 8105364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8105368:	68fb      	ldr	r3, [r7, #12]
 810536a:	2200      	movs	r2, #0
 810536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105374:	f043 0210 	orr.w	r2, r3, #16
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	2200      	movs	r2, #0
 8105380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8105384:	2301      	movs	r3, #1
 8105386:	e000      	b.n	810538a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8105388:	2302      	movs	r3, #2
  }
}
 810538a:	4618      	mov	r0, r3
 810538c:	3718      	adds	r7, #24
 810538e:	46bd      	mov	sp, r7
 8105390:	bd80      	pop	{r7, pc}
 8105392:	bf00      	nop
 8105394:	ffff0000 	.word	0xffff0000
 8105398:	08105919 	.word	0x08105919
 810539c:	08106bfb 	.word	0x08106bfb
 81053a0:	08106c91 	.word	0x08106c91
 81053a4:	80002000 	.word	0x80002000

081053a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 81053a8:	b580      	push	{r7, lr}
 81053aa:	b084      	sub	sp, #16
 81053ac:	af00      	add	r7, sp, #0
 81053ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	699b      	ldr	r3, [r3, #24]
 81053b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	d005      	beq.n	81053d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81053cc:	68ba      	ldr	r2, [r7, #8]
 81053ce:	68f9      	ldr	r1, [r7, #12]
 81053d0:	6878      	ldr	r0, [r7, #4]
 81053d2:	4798      	blx	r3
  }
}
 81053d4:	bf00      	nop
 81053d6:	3710      	adds	r7, #16
 81053d8:	46bd      	mov	sp, r7
 81053da:	bd80      	pop	{r7, pc}

081053dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81053dc:	b580      	push	{r7, lr}
 81053de:	b086      	sub	sp, #24
 81053e0:	af00      	add	r7, sp, #0
 81053e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	681b      	ldr	r3, [r3, #0]
 81053e8:	699b      	ldr	r3, [r3, #24]
 81053ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 81053f4:	697b      	ldr	r3, [r7, #20]
 81053f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81053fa:	2b00      	cmp	r3, #0
 81053fc:	d00f      	beq.n	810541e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81053fe:	693b      	ldr	r3, [r7, #16]
 8105400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8105404:	2b00      	cmp	r3, #0
 8105406:	d00a      	beq.n	810541e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810540c:	f043 0201 	orr.w	r2, r3, #1
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810541c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 810541e:	697b      	ldr	r3, [r7, #20]
 8105420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105424:	2b00      	cmp	r3, #0
 8105426:	d00f      	beq.n	8105448 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105428:	693b      	ldr	r3, [r7, #16]
 810542a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 810542e:	2b00      	cmp	r3, #0
 8105430:	d00a      	beq.n	8105448 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105436:	f043 0208 	orr.w	r2, r3, #8
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105446:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8105448:	697b      	ldr	r3, [r7, #20]
 810544a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810544e:	2b00      	cmp	r3, #0
 8105450:	d00f      	beq.n	8105472 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105452:	693b      	ldr	r3, [r7, #16]
 8105454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8105458:	2b00      	cmp	r3, #0
 810545a:	d00a      	beq.n	8105472 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105460:	f043 0202 	orr.w	r2, r3, #2
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8105470:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105476:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8105478:	68fb      	ldr	r3, [r7, #12]
 810547a:	f003 030b 	and.w	r3, r3, #11
 810547e:	2b00      	cmp	r3, #0
 8105480:	d003      	beq.n	810548a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8105482:	68f9      	ldr	r1, [r7, #12]
 8105484:	6878      	ldr	r0, [r7, #4]
 8105486:	f001 fa7d 	bl	8106984 <I2C_ITError>
  }
}
 810548a:	bf00      	nop
 810548c:	3718      	adds	r7, #24
 810548e:	46bd      	mov	sp, r7
 8105490:	bd80      	pop	{r7, pc}

08105492 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8105492:	b480      	push	{r7}
 8105494:	b083      	sub	sp, #12
 8105496:	af00      	add	r7, sp, #0
 8105498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 810549a:	bf00      	nop
 810549c:	370c      	adds	r7, #12
 810549e:	46bd      	mov	sp, r7
 81054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054a4:	4770      	bx	lr

081054a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81054a6:	b480      	push	{r7}
 81054a8:	b083      	sub	sp, #12
 81054aa:	af00      	add	r7, sp, #0
 81054ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 81054ae:	bf00      	nop
 81054b0:	370c      	adds	r7, #12
 81054b2:	46bd      	mov	sp, r7
 81054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b8:	4770      	bx	lr

081054ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81054ba:	b480      	push	{r7}
 81054bc:	b083      	sub	sp, #12
 81054be:	af00      	add	r7, sp, #0
 81054c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 81054c2:	bf00      	nop
 81054c4:	370c      	adds	r7, #12
 81054c6:	46bd      	mov	sp, r7
 81054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054cc:	4770      	bx	lr

081054ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81054ce:	b480      	push	{r7}
 81054d0:	b083      	sub	sp, #12
 81054d2:	af00      	add	r7, sp, #0
 81054d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 81054d6:	bf00      	nop
 81054d8:	370c      	adds	r7, #12
 81054da:	46bd      	mov	sp, r7
 81054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054e0:	4770      	bx	lr

081054e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 81054e2:	b480      	push	{r7}
 81054e4:	b083      	sub	sp, #12
 81054e6:	af00      	add	r7, sp, #0
 81054e8:	6078      	str	r0, [r7, #4]
 81054ea:	460b      	mov	r3, r1
 81054ec:	70fb      	strb	r3, [r7, #3]
 81054ee:	4613      	mov	r3, r2
 81054f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 81054f2:	bf00      	nop
 81054f4:	370c      	adds	r7, #12
 81054f6:	46bd      	mov	sp, r7
 81054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054fc:	4770      	bx	lr

081054fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81054fe:	b480      	push	{r7}
 8105500:	b083      	sub	sp, #12
 8105502:	af00      	add	r7, sp, #0
 8105504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8105506:	bf00      	nop
 8105508:	370c      	adds	r7, #12
 810550a:	46bd      	mov	sp, r7
 810550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105510:	4770      	bx	lr

08105512 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8105512:	b480      	push	{r7}
 8105514:	b083      	sub	sp, #12
 8105516:	af00      	add	r7, sp, #0
 8105518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 810551a:	bf00      	nop
 810551c:	370c      	adds	r7, #12
 810551e:	46bd      	mov	sp, r7
 8105520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105524:	4770      	bx	lr

08105526 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8105526:	b480      	push	{r7}
 8105528:	b083      	sub	sp, #12
 810552a:	af00      	add	r7, sp, #0
 810552c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 810552e:	bf00      	nop
 8105530:	370c      	adds	r7, #12
 8105532:	46bd      	mov	sp, r7
 8105534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105538:	4770      	bx	lr

0810553a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810553a:	b480      	push	{r7}
 810553c:	b083      	sub	sp, #12
 810553e:	af00      	add	r7, sp, #0
 8105540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8105542:	bf00      	nop
 8105544:	370c      	adds	r7, #12
 8105546:	46bd      	mov	sp, r7
 8105548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810554c:	4770      	bx	lr

0810554e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 810554e:	b580      	push	{r7, lr}
 8105550:	b086      	sub	sp, #24
 8105552:	af00      	add	r7, sp, #0
 8105554:	60f8      	str	r0, [r7, #12]
 8105556:	60b9      	str	r1, [r7, #8]
 8105558:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 810555a:	68fb      	ldr	r3, [r7, #12]
 810555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810555e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8105560:	68bb      	ldr	r3, [r7, #8]
 8105562:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810556a:	2b01      	cmp	r3, #1
 810556c:	d101      	bne.n	8105572 <I2C_Slave_ISR_IT+0x24>
 810556e:	2302      	movs	r3, #2
 8105570:	e0e2      	b.n	8105738 <I2C_Slave_ISR_IT+0x1ea>
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	2201      	movs	r2, #1
 8105576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 810557a:	693b      	ldr	r3, [r7, #16]
 810557c:	f003 0320 	and.w	r3, r3, #32
 8105580:	2b00      	cmp	r3, #0
 8105582:	d009      	beq.n	8105598 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 810558a:	2b00      	cmp	r3, #0
 810558c:	d004      	beq.n	8105598 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 810558e:	6939      	ldr	r1, [r7, #16]
 8105590:	68f8      	ldr	r0, [r7, #12]
 8105592:	f000 ff4f 	bl	8106434 <I2C_ITSlaveCplt>
 8105596:	e0ca      	b.n	810572e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8105598:	693b      	ldr	r3, [r7, #16]
 810559a:	f003 0310 	and.w	r3, r3, #16
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d04b      	beq.n	810563a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	d046      	beq.n	810563a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81055b0:	b29b      	uxth	r3, r3
 81055b2:	2b00      	cmp	r3, #0
 81055b4:	d128      	bne.n	8105608 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81055b6:	68fb      	ldr	r3, [r7, #12]
 81055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81055bc:	b2db      	uxtb	r3, r3
 81055be:	2b28      	cmp	r3, #40	@ 0x28
 81055c0:	d108      	bne.n	81055d4 <I2C_Slave_ISR_IT+0x86>
 81055c2:	697b      	ldr	r3, [r7, #20]
 81055c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055c8:	d104      	bne.n	81055d4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81055ca:	6939      	ldr	r1, [r7, #16]
 81055cc:	68f8      	ldr	r0, [r7, #12]
 81055ce:	f001 f985 	bl	81068dc <I2C_ITListenCplt>
 81055d2:	e031      	b.n	8105638 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81055d4:	68fb      	ldr	r3, [r7, #12]
 81055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81055da:	b2db      	uxtb	r3, r3
 81055dc:	2b29      	cmp	r3, #41	@ 0x29
 81055de:	d10e      	bne.n	81055fe <I2C_Slave_ISR_IT+0xb0>
 81055e0:	697b      	ldr	r3, [r7, #20]
 81055e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81055e6:	d00a      	beq.n	81055fe <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81055e8:	68fb      	ldr	r3, [r7, #12]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	2210      	movs	r2, #16
 81055ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 81055f0:	68f8      	ldr	r0, [r7, #12]
 81055f2:	f001 fade 	bl	8106bb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81055f6:	68f8      	ldr	r0, [r7, #12]
 81055f8:	f000 fdf7 	bl	81061ea <I2C_ITSlaveSeqCplt>
 81055fc:	e01c      	b.n	8105638 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	2210      	movs	r2, #16
 8105604:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8105606:	e08f      	b.n	8105728 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	2210      	movs	r2, #16
 810560e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105610:	68fb      	ldr	r3, [r7, #12]
 8105612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105614:	f043 0204 	orr.w	r2, r3, #4
 8105618:	68fb      	ldr	r3, [r7, #12]
 810561a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810561c:	697b      	ldr	r3, [r7, #20]
 810561e:	2b00      	cmp	r3, #0
 8105620:	d003      	beq.n	810562a <I2C_Slave_ISR_IT+0xdc>
 8105622:	697b      	ldr	r3, [r7, #20]
 8105624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105628:	d17e      	bne.n	8105728 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810562a:	68fb      	ldr	r3, [r7, #12]
 810562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810562e:	4619      	mov	r1, r3
 8105630:	68f8      	ldr	r0, [r7, #12]
 8105632:	f001 f9a7 	bl	8106984 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8105636:	e077      	b.n	8105728 <I2C_Slave_ISR_IT+0x1da>
 8105638:	e076      	b.n	8105728 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 810563a:	693b      	ldr	r3, [r7, #16]
 810563c:	f003 0304 	and.w	r3, r3, #4
 8105640:	2b00      	cmp	r3, #0
 8105642:	d02f      	beq.n	81056a4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 810564a:	2b00      	cmp	r3, #0
 810564c:	d02a      	beq.n	81056a4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 810564e:	68fb      	ldr	r3, [r7, #12]
 8105650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105652:	b29b      	uxth	r3, r3
 8105654:	2b00      	cmp	r3, #0
 8105656:	d018      	beq.n	810568a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105658:	68fb      	ldr	r3, [r7, #12]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105662:	b2d2      	uxtb	r2, r2
 8105664:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810566a:	1c5a      	adds	r2, r3, #1
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8105670:	68fb      	ldr	r3, [r7, #12]
 8105672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105674:	3b01      	subs	r3, #1
 8105676:	b29a      	uxth	r2, r3
 8105678:	68fb      	ldr	r3, [r7, #12]
 810567a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105680:	b29b      	uxth	r3, r3
 8105682:	3b01      	subs	r3, #1
 8105684:	b29a      	uxth	r2, r3
 8105686:	68fb      	ldr	r3, [r7, #12]
 8105688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810568e:	b29b      	uxth	r3, r3
 8105690:	2b00      	cmp	r3, #0
 8105692:	d14b      	bne.n	810572c <I2C_Slave_ISR_IT+0x1de>
 8105694:	697b      	ldr	r3, [r7, #20]
 8105696:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 810569a:	d047      	beq.n	810572c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 810569c:	68f8      	ldr	r0, [r7, #12]
 810569e:	f000 fda4 	bl	81061ea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81056a2:	e043      	b.n	810572c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81056a4:	693b      	ldr	r3, [r7, #16]
 81056a6:	f003 0308 	and.w	r3, r3, #8
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	d009      	beq.n	81056c2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81056b4:	2b00      	cmp	r3, #0
 81056b6:	d004      	beq.n	81056c2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81056b8:	6939      	ldr	r1, [r7, #16]
 81056ba:	68f8      	ldr	r0, [r7, #12]
 81056bc:	f000 fcd4 	bl	8106068 <I2C_ITAddrCplt>
 81056c0:	e035      	b.n	810572e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 81056c2:	693b      	ldr	r3, [r7, #16]
 81056c4:	f003 0302 	and.w	r3, r3, #2
 81056c8:	2b00      	cmp	r3, #0
 81056ca:	d030      	beq.n	810572e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d02b      	beq.n	810572e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 81056d6:	68fb      	ldr	r3, [r7, #12]
 81056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81056da:	b29b      	uxth	r3, r3
 81056dc:	2b00      	cmp	r3, #0
 81056de:	d018      	beq.n	8105712 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81056e0:	68fb      	ldr	r3, [r7, #12]
 81056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81056e4:	781a      	ldrb	r2, [r3, #0]
 81056e6:	68fb      	ldr	r3, [r7, #12]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81056ec:	68fb      	ldr	r3, [r7, #12]
 81056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81056f0:	1c5a      	adds	r2, r3, #1
 81056f2:	68fb      	ldr	r3, [r7, #12]
 81056f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81056f6:	68fb      	ldr	r3, [r7, #12]
 81056f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81056fa:	b29b      	uxth	r3, r3
 81056fc:	3b01      	subs	r3, #1
 81056fe:	b29a      	uxth	r2, r3
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105708:	3b01      	subs	r3, #1
 810570a:	b29a      	uxth	r2, r3
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8105710:	e00d      	b.n	810572e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8105712:	697b      	ldr	r3, [r7, #20]
 8105714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105718:	d002      	beq.n	8105720 <I2C_Slave_ISR_IT+0x1d2>
 810571a:	697b      	ldr	r3, [r7, #20]
 810571c:	2b00      	cmp	r3, #0
 810571e:	d106      	bne.n	810572e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8105720:	68f8      	ldr	r0, [r7, #12]
 8105722:	f000 fd62 	bl	81061ea <I2C_ITSlaveSeqCplt>
 8105726:	e002      	b.n	810572e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8105728:	bf00      	nop
 810572a:	e000      	b.n	810572e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 810572c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810572e:	68fb      	ldr	r3, [r7, #12]
 8105730:	2200      	movs	r2, #0
 8105732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8105736:	2300      	movs	r3, #0
}
 8105738:	4618      	mov	r0, r3
 810573a:	3718      	adds	r7, #24
 810573c:	46bd      	mov	sp, r7
 810573e:	bd80      	pop	{r7, pc}

08105740 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8105740:	b580      	push	{r7, lr}
 8105742:	b088      	sub	sp, #32
 8105744:	af02      	add	r7, sp, #8
 8105746:	60f8      	str	r0, [r7, #12]
 8105748:	60b9      	str	r1, [r7, #8]
 810574a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 810574c:	68fb      	ldr	r3, [r7, #12]
 810574e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105752:	2b01      	cmp	r3, #1
 8105754:	d101      	bne.n	810575a <I2C_Master_ISR_DMA+0x1a>
 8105756:	2302      	movs	r3, #2
 8105758:	e0d9      	b.n	810590e <I2C_Master_ISR_DMA+0x1ce>
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	2201      	movs	r2, #1
 810575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8105762:	68bb      	ldr	r3, [r7, #8]
 8105764:	f003 0310 	and.w	r3, r3, #16
 8105768:	2b00      	cmp	r3, #0
 810576a:	d016      	beq.n	810579a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810576c:	687b      	ldr	r3, [r7, #4]
 810576e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8105772:	2b00      	cmp	r3, #0
 8105774:	d011      	beq.n	810579a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	2210      	movs	r2, #16
 810577c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105782:	f043 0204 	orr.w	r2, r3, #4
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810578a:	2120      	movs	r1, #32
 810578c:	68f8      	ldr	r0, [r7, #12]
 810578e:	f001 fdcd 	bl	810732c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105792:	68f8      	ldr	r0, [r7, #12]
 8105794:	f001 fa0d 	bl	8106bb2 <I2C_Flush_TXDR>
 8105798:	e0b4      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 810579a:	68bb      	ldr	r3, [r7, #8]
 810579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d071      	beq.n	8105888 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81057aa:	2b00      	cmp	r3, #0
 81057ac:	d06c      	beq.n	8105888 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	681a      	ldr	r2, [r3, #0]
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81057bc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057c2:	b29b      	uxth	r3, r3
 81057c4:	2b00      	cmp	r3, #0
 81057c6:	d04e      	beq.n	8105866 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 81057c8:	68fb      	ldr	r3, [r7, #12]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	685b      	ldr	r3, [r3, #4]
 81057ce:	b29b      	uxth	r3, r3
 81057d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81057d4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057da:	b29b      	uxth	r3, r3
 81057dc:	2bff      	cmp	r3, #255	@ 0xff
 81057de:	d906      	bls.n	81057ee <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	22ff      	movs	r2, #255	@ 0xff
 81057e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 81057e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81057ea:	617b      	str	r3, [r7, #20]
 81057ec:	e010      	b.n	8105810 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 81057ee:	68fb      	ldr	r3, [r7, #12]
 81057f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057f2:	b29a      	uxth	r2, r3
 81057f4:	68fb      	ldr	r3, [r7, #12]
 81057f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8105800:	d003      	beq.n	810580a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8105802:	68fb      	ldr	r3, [r7, #12]
 8105804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105806:	617b      	str	r3, [r7, #20]
 8105808:	e002      	b.n	8105810 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 810580a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810580e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8105810:	68fb      	ldr	r3, [r7, #12]
 8105812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105814:	b2da      	uxtb	r2, r3
 8105816:	8a79      	ldrh	r1, [r7, #18]
 8105818:	2300      	movs	r3, #0
 810581a:	9300      	str	r3, [sp, #0]
 810581c:	697b      	ldr	r3, [r7, #20]
 810581e:	68f8      	ldr	r0, [r7, #12]
 8105820:	f001 fd52 	bl	81072c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8105824:	68fb      	ldr	r3, [r7, #12]
 8105826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105828:	b29a      	uxth	r2, r3
 810582a:	68fb      	ldr	r3, [r7, #12]
 810582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810582e:	1ad3      	subs	r3, r2, r3
 8105830:	b29a      	uxth	r2, r3
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105836:	68fb      	ldr	r3, [r7, #12]
 8105838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810583c:	b2db      	uxtb	r3, r3
 810583e:	2b22      	cmp	r3, #34	@ 0x22
 8105840:	d108      	bne.n	8105854 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	681a      	ldr	r2, [r3, #0]
 8105848:	68fb      	ldr	r3, [r7, #12]
 810584a:	681b      	ldr	r3, [r3, #0]
 810584c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105850:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8105852:	e057      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	681a      	ldr	r2, [r3, #0]
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105862:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8105864:	e04e      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	681b      	ldr	r3, [r3, #0]
 810586a:	685b      	ldr	r3, [r3, #4]
 810586c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105874:	d003      	beq.n	810587e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8105876:	68f8      	ldr	r0, [r7, #12]
 8105878:	f000 fc7a 	bl	8106170 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 810587c:	e042      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 810587e:	2140      	movs	r1, #64	@ 0x40
 8105880:	68f8      	ldr	r0, [r7, #12]
 8105882:	f001 f87f 	bl	8106984 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8105886:	e03d      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8105888:	68bb      	ldr	r3, [r7, #8]
 810588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810588e:	2b00      	cmp	r3, #0
 8105890:	d028      	beq.n	81058e4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8105898:	2b00      	cmp	r3, #0
 810589a:	d023      	beq.n	81058e4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058a0:	b29b      	uxth	r3, r3
 81058a2:	2b00      	cmp	r3, #0
 81058a4:	d119      	bne.n	81058da <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	685b      	ldr	r3, [r3, #4]
 81058ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81058b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81058b4:	d025      	beq.n	8105902 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81058be:	d108      	bne.n	81058d2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81058c0:	68fb      	ldr	r3, [r7, #12]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	685a      	ldr	r2, [r3, #4]
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81058ce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 81058d0:	e017      	b.n	8105902 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 81058d2:	68f8      	ldr	r0, [r7, #12]
 81058d4:	f000 fc4c 	bl	8106170 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 81058d8:	e013      	b.n	8105902 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 81058da:	2140      	movs	r1, #64	@ 0x40
 81058dc:	68f8      	ldr	r0, [r7, #12]
 81058de:	f001 f851 	bl	8106984 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 81058e2:	e00e      	b.n	8105902 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 81058e4:	68bb      	ldr	r3, [r7, #8]
 81058e6:	f003 0320 	and.w	r3, r3, #32
 81058ea:	2b00      	cmp	r3, #0
 81058ec:	d00a      	beq.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 81058f4:	2b00      	cmp	r3, #0
 81058f6:	d005      	beq.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 81058f8:	68b9      	ldr	r1, [r7, #8]
 81058fa:	68f8      	ldr	r0, [r7, #12]
 81058fc:	f000 fcd2 	bl	81062a4 <I2C_ITMasterCplt>
 8105900:	e000      	b.n	8105904 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8105902:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105904:	68fb      	ldr	r3, [r7, #12]
 8105906:	2200      	movs	r2, #0
 8105908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810590c:	2300      	movs	r3, #0
}
 810590e:	4618      	mov	r0, r3
 8105910:	3718      	adds	r7, #24
 8105912:	46bd      	mov	sp, r7
 8105914:	bd80      	pop	{r7, pc}
	...

08105918 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8105918:	b580      	push	{r7, lr}
 810591a:	b088      	sub	sp, #32
 810591c:	af02      	add	r7, sp, #8
 810591e:	60f8      	str	r0, [r7, #12]
 8105920:	60b9      	str	r1, [r7, #8]
 8105922:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8105924:	4b8d      	ldr	r3, [pc, #564]	@ (8105b5c <I2C_Mem_ISR_DMA+0x244>)
 8105926:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8105928:	68fb      	ldr	r3, [r7, #12]
 810592a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810592e:	2b01      	cmp	r3, #1
 8105930:	d101      	bne.n	8105936 <I2C_Mem_ISR_DMA+0x1e>
 8105932:	2302      	movs	r3, #2
 8105934:	e10e      	b.n	8105b54 <I2C_Mem_ISR_DMA+0x23c>
 8105936:	68fb      	ldr	r3, [r7, #12]
 8105938:	2201      	movs	r2, #1
 810593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 810593e:	68bb      	ldr	r3, [r7, #8]
 8105940:	f003 0310 	and.w	r3, r3, #16
 8105944:	2b00      	cmp	r3, #0
 8105946:	d016      	beq.n	8105976 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 810594e:	2b00      	cmp	r3, #0
 8105950:	d011      	beq.n	8105976 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105952:	68fb      	ldr	r3, [r7, #12]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	2210      	movs	r2, #16
 8105958:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810595a:	68fb      	ldr	r3, [r7, #12]
 810595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810595e:	f043 0204 	orr.w	r2, r3, #4
 8105962:	68fb      	ldr	r3, [r7, #12]
 8105964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8105966:	2120      	movs	r1, #32
 8105968:	68f8      	ldr	r0, [r7, #12]
 810596a:	f001 fcdf 	bl	810732c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810596e:	68f8      	ldr	r0, [r7, #12]
 8105970:	f001 f91f 	bl	8106bb2 <I2C_Flush_TXDR>
 8105974:	e0e9      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8105976:	68bb      	ldr	r3, [r7, #8]
 8105978:	f003 0302 	and.w	r3, r3, #2
 810597c:	2b00      	cmp	r3, #0
 810597e:	d00e      	beq.n	810599e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8105986:	2b00      	cmp	r3, #0
 8105988:	d009      	beq.n	810599e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 810598a:	68fb      	ldr	r3, [r7, #12]
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	68fa      	ldr	r2, [r7, #12]
 8105990:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8105992:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8105994:	68fb      	ldr	r3, [r7, #12]
 8105996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810599a:	651a      	str	r2, [r3, #80]	@ 0x50
 810599c:	e0d5      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 810599e:	68bb      	ldr	r3, [r7, #8]
 81059a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81059a4:	2b00      	cmp	r3, #0
 81059a6:	d05f      	beq.n	8105a68 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d05a      	beq.n	8105a68 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81059b2:	2101      	movs	r1, #1
 81059b4:	68f8      	ldr	r0, [r7, #12]
 81059b6:	f001 fd3d 	bl	8107434 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 81059ba:	2110      	movs	r1, #16
 81059bc:	68f8      	ldr	r0, [r7, #12]
 81059be:	f001 fcb5 	bl	810732c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 81059c2:	68fb      	ldr	r3, [r7, #12]
 81059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81059c6:	b29b      	uxth	r3, r3
 81059c8:	2b00      	cmp	r3, #0
 81059ca:	d048      	beq.n	8105a5e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81059cc:	68fb      	ldr	r3, [r7, #12]
 81059ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81059d0:	b29b      	uxth	r3, r3
 81059d2:	2bff      	cmp	r3, #255	@ 0xff
 81059d4:	d910      	bls.n	81059f8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 81059d6:	68fb      	ldr	r3, [r7, #12]
 81059d8:	22ff      	movs	r2, #255	@ 0xff
 81059da:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81059e0:	b299      	uxth	r1, r3
 81059e2:	68fb      	ldr	r3, [r7, #12]
 81059e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81059e6:	b2da      	uxtb	r2, r3
 81059e8:	2300      	movs	r3, #0
 81059ea:	9300      	str	r3, [sp, #0]
 81059ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81059f0:	68f8      	ldr	r0, [r7, #12]
 81059f2:	f001 fc69 	bl	81072c8 <I2C_TransferConfig>
 81059f6:	e011      	b.n	8105a1c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81059fc:	b29a      	uxth	r2, r3
 81059fe:	68fb      	ldr	r3, [r7, #12]
 8105a00:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8105a02:	68fb      	ldr	r3, [r7, #12]
 8105a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105a06:	b299      	uxth	r1, r3
 8105a08:	68fb      	ldr	r3, [r7, #12]
 8105a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105a0c:	b2da      	uxtb	r2, r3
 8105a0e:	2300      	movs	r3, #0
 8105a10:	9300      	str	r3, [sp, #0]
 8105a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105a16:	68f8      	ldr	r0, [r7, #12]
 8105a18:	f001 fc56 	bl	81072c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8105a1c:	68fb      	ldr	r3, [r7, #12]
 8105a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105a20:	b29a      	uxth	r2, r3
 8105a22:	68fb      	ldr	r3, [r7, #12]
 8105a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105a26:	1ad3      	subs	r3, r2, r3
 8105a28:	b29a      	uxth	r2, r3
 8105a2a:	68fb      	ldr	r3, [r7, #12]
 8105a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105a2e:	68fb      	ldr	r3, [r7, #12]
 8105a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105a34:	b2db      	uxtb	r3, r3
 8105a36:	2b22      	cmp	r3, #34	@ 0x22
 8105a38:	d108      	bne.n	8105a4c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8105a3a:	68fb      	ldr	r3, [r7, #12]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	681a      	ldr	r2, [r3, #0]
 8105a40:	68fb      	ldr	r3, [r7, #12]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105a48:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8105a4a:	e07e      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8105a4c:	68fb      	ldr	r3, [r7, #12]
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	681a      	ldr	r2, [r3, #0]
 8105a52:	68fb      	ldr	r3, [r7, #12]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105a5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8105a5c:	e075      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8105a5e:	2140      	movs	r1, #64	@ 0x40
 8105a60:	68f8      	ldr	r0, [r7, #12]
 8105a62:	f000 ff8f 	bl	8106984 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8105a66:	e070      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8105a68:	68bb      	ldr	r3, [r7, #8]
 8105a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	d05d      	beq.n	8105b2e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8105a78:	2b00      	cmp	r3, #0
 8105a7a:	d058      	beq.n	8105b2e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8105a7c:	2101      	movs	r1, #1
 8105a7e:	68f8      	ldr	r0, [r7, #12]
 8105a80:	f001 fcd8 	bl	8107434 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8105a84:	2110      	movs	r1, #16
 8105a86:	68f8      	ldr	r0, [r7, #12]
 8105a88:	f001 fc50 	bl	810732c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105a8c:	68fb      	ldr	r3, [r7, #12]
 8105a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105a92:	b2db      	uxtb	r3, r3
 8105a94:	2b22      	cmp	r3, #34	@ 0x22
 8105a96:	d101      	bne.n	8105a9c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8105a98:	4b31      	ldr	r3, [pc, #196]	@ (8105b60 <I2C_Mem_ISR_DMA+0x248>)
 8105a9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105aa0:	b29b      	uxth	r3, r3
 8105aa2:	2bff      	cmp	r3, #255	@ 0xff
 8105aa4:	d910      	bls.n	8105ac8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	22ff      	movs	r2, #255	@ 0xff
 8105aaa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8105aac:	68fb      	ldr	r3, [r7, #12]
 8105aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105ab0:	b299      	uxth	r1, r3
 8105ab2:	68fb      	ldr	r3, [r7, #12]
 8105ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105ab6:	b2da      	uxtb	r2, r3
 8105ab8:	697b      	ldr	r3, [r7, #20]
 8105aba:	9300      	str	r3, [sp, #0]
 8105abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105ac0:	68f8      	ldr	r0, [r7, #12]
 8105ac2:	f001 fc01 	bl	81072c8 <I2C_TransferConfig>
 8105ac6:	e011      	b.n	8105aec <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105ac8:	68fb      	ldr	r3, [r7, #12]
 8105aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105acc:	b29a      	uxth	r2, r3
 8105ace:	68fb      	ldr	r3, [r7, #12]
 8105ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8105ad2:	68fb      	ldr	r3, [r7, #12]
 8105ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105ad6:	b299      	uxth	r1, r3
 8105ad8:	68fb      	ldr	r3, [r7, #12]
 8105ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105adc:	b2da      	uxtb	r2, r3
 8105ade:	697b      	ldr	r3, [r7, #20]
 8105ae0:	9300      	str	r3, [sp, #0]
 8105ae2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105ae6:	68f8      	ldr	r0, [r7, #12]
 8105ae8:	f001 fbee 	bl	81072c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105af0:	b29a      	uxth	r2, r3
 8105af2:	68fb      	ldr	r3, [r7, #12]
 8105af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105af6:	1ad3      	subs	r3, r2, r3
 8105af8:	b29a      	uxth	r2, r3
 8105afa:	68fb      	ldr	r3, [r7, #12]
 8105afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105b04:	b2db      	uxtb	r3, r3
 8105b06:	2b22      	cmp	r3, #34	@ 0x22
 8105b08:	d108      	bne.n	8105b1c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8105b0a:	68fb      	ldr	r3, [r7, #12]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	681a      	ldr	r2, [r3, #0]
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105b18:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105b1a:	e016      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8105b1c:	68fb      	ldr	r3, [r7, #12]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	681a      	ldr	r2, [r3, #0]
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105b2a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105b2c:	e00d      	b.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8105b2e:	68bb      	ldr	r3, [r7, #8]
 8105b30:	f003 0320 	and.w	r3, r3, #32
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d008      	beq.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8105b3e:	2b00      	cmp	r3, #0
 8105b40:	d003      	beq.n	8105b4a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8105b42:	68b9      	ldr	r1, [r7, #8]
 8105b44:	68f8      	ldr	r0, [r7, #12]
 8105b46:	f000 fbad 	bl	81062a4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105b4a:	68fb      	ldr	r3, [r7, #12]
 8105b4c:	2200      	movs	r2, #0
 8105b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8105b52:	2300      	movs	r3, #0
}
 8105b54:	4618      	mov	r0, r3
 8105b56:	3718      	adds	r7, #24
 8105b58:	46bd      	mov	sp, r7
 8105b5a:	bd80      	pop	{r7, pc}
 8105b5c:	80002000 	.word	0x80002000
 8105b60:	80002400 	.word	0x80002400

08105b64 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8105b64:	b580      	push	{r7, lr}
 8105b66:	b088      	sub	sp, #32
 8105b68:	af00      	add	r7, sp, #0
 8105b6a:	60f8      	str	r0, [r7, #12]
 8105b6c:	60b9      	str	r1, [r7, #8]
 8105b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b74:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8105b76:	2300      	movs	r3, #0
 8105b78:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105b80:	2b01      	cmp	r3, #1
 8105b82:	d101      	bne.n	8105b88 <I2C_Slave_ISR_DMA+0x24>
 8105b84:	2302      	movs	r3, #2
 8105b86:	e1c2      	b.n	8105f0e <I2C_Slave_ISR_DMA+0x3aa>
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	2201      	movs	r2, #1
 8105b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8105b90:	68bb      	ldr	r3, [r7, #8]
 8105b92:	f003 0320 	and.w	r3, r3, #32
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	d009      	beq.n	8105bae <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8105ba0:	2b00      	cmp	r3, #0
 8105ba2:	d004      	beq.n	8105bae <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8105ba4:	68b9      	ldr	r1, [r7, #8]
 8105ba6:	68f8      	ldr	r0, [r7, #12]
 8105ba8:	f000 fc44 	bl	8106434 <I2C_ITSlaveCplt>
 8105bac:	e1aa      	b.n	8105f04 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8105bae:	68bb      	ldr	r3, [r7, #8]
 8105bb0:	f003 0310 	and.w	r3, r3, #16
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	f000 8197 	beq.w	8105ee8 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8105bc0:	2b00      	cmp	r3, #0
 8105bc2:	f000 8191 	beq.w	8105ee8 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	d105      	bne.n	8105bdc <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	f000 817f 	beq.w	8105eda <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8105bdc:	68fb      	ldr	r3, [r7, #12]
 8105bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d07b      	beq.n	8105cdc <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105bea:	2b00      	cmp	r3, #0
 8105bec:	d076      	beq.n	8105cdc <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8105bee:	68fb      	ldr	r3, [r7, #12]
 8105bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105bf2:	681b      	ldr	r3, [r3, #0]
 8105bf4:	4a74      	ldr	r2, [pc, #464]	@ (8105dc8 <I2C_Slave_ISR_DMA+0x264>)
 8105bf6:	4293      	cmp	r3, r2
 8105bf8:	d059      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	4a72      	ldr	r2, [pc, #456]	@ (8105dcc <I2C_Slave_ISR_DMA+0x268>)
 8105c02:	4293      	cmp	r3, r2
 8105c04:	d053      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c06:	68fb      	ldr	r3, [r7, #12]
 8105c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a70      	ldr	r2, [pc, #448]	@ (8105dd0 <I2C_Slave_ISR_DMA+0x26c>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d04d      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c12:	68fb      	ldr	r3, [r7, #12]
 8105c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c16:	681b      	ldr	r3, [r3, #0]
 8105c18:	4a6e      	ldr	r2, [pc, #440]	@ (8105dd4 <I2C_Slave_ISR_DMA+0x270>)
 8105c1a:	4293      	cmp	r3, r2
 8105c1c:	d047      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c1e:	68fb      	ldr	r3, [r7, #12]
 8105c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	4a6c      	ldr	r2, [pc, #432]	@ (8105dd8 <I2C_Slave_ISR_DMA+0x274>)
 8105c26:	4293      	cmp	r3, r2
 8105c28:	d041      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	4a6a      	ldr	r2, [pc, #424]	@ (8105ddc <I2C_Slave_ISR_DMA+0x278>)
 8105c32:	4293      	cmp	r3, r2
 8105c34:	d03b      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	4a68      	ldr	r2, [pc, #416]	@ (8105de0 <I2C_Slave_ISR_DMA+0x27c>)
 8105c3e:	4293      	cmp	r3, r2
 8105c40:	d035      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	4a66      	ldr	r2, [pc, #408]	@ (8105de4 <I2C_Slave_ISR_DMA+0x280>)
 8105c4a:	4293      	cmp	r3, r2
 8105c4c:	d02f      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c52:	681b      	ldr	r3, [r3, #0]
 8105c54:	4a64      	ldr	r2, [pc, #400]	@ (8105de8 <I2C_Slave_ISR_DMA+0x284>)
 8105c56:	4293      	cmp	r3, r2
 8105c58:	d029      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c5a:	68fb      	ldr	r3, [r7, #12]
 8105c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	4a62      	ldr	r2, [pc, #392]	@ (8105dec <I2C_Slave_ISR_DMA+0x288>)
 8105c62:	4293      	cmp	r3, r2
 8105c64:	d023      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	4a60      	ldr	r2, [pc, #384]	@ (8105df0 <I2C_Slave_ISR_DMA+0x28c>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d01d      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	4a5e      	ldr	r2, [pc, #376]	@ (8105df4 <I2C_Slave_ISR_DMA+0x290>)
 8105c7a:	4293      	cmp	r3, r2
 8105c7c:	d017      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c7e:	68fb      	ldr	r3, [r7, #12]
 8105c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	4a5c      	ldr	r2, [pc, #368]	@ (8105df8 <I2C_Slave_ISR_DMA+0x294>)
 8105c86:	4293      	cmp	r3, r2
 8105c88:	d011      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	4a5a      	ldr	r2, [pc, #360]	@ (8105dfc <I2C_Slave_ISR_DMA+0x298>)
 8105c92:	4293      	cmp	r3, r2
 8105c94:	d00b      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105c96:	68fb      	ldr	r3, [r7, #12]
 8105c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a58      	ldr	r2, [pc, #352]	@ (8105e00 <I2C_Slave_ISR_DMA+0x29c>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d005      	beq.n	8105cae <I2C_Slave_ISR_DMA+0x14a>
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	4a56      	ldr	r2, [pc, #344]	@ (8105e04 <I2C_Slave_ISR_DMA+0x2a0>)
 8105caa:	4293      	cmp	r3, r2
 8105cac:	d109      	bne.n	8105cc2 <I2C_Slave_ISR_DMA+0x15e>
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105cb2:	681b      	ldr	r3, [r3, #0]
 8105cb4:	685b      	ldr	r3, [r3, #4]
 8105cb6:	2b00      	cmp	r3, #0
 8105cb8:	bf0c      	ite	eq
 8105cba:	2301      	moveq	r3, #1
 8105cbc:	2300      	movne	r3, #0
 8105cbe:	b2db      	uxtb	r3, r3
 8105cc0:	e008      	b.n	8105cd4 <I2C_Slave_ISR_DMA+0x170>
 8105cc2:	68fb      	ldr	r3, [r7, #12]
 8105cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	685b      	ldr	r3, [r3, #4]
 8105cca:	2b00      	cmp	r3, #0
 8105ccc:	bf0c      	ite	eq
 8105cce:	2301      	moveq	r3, #1
 8105cd0:	2300      	movne	r3, #0
 8105cd2:	b2db      	uxtb	r3, r3
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	d001      	beq.n	8105cdc <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8105cd8:	2301      	movs	r3, #1
 8105cda:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8105cdc:	68fb      	ldr	r3, [r7, #12]
 8105cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105ce0:	2b00      	cmp	r3, #0
 8105ce2:	f000 809e 	beq.w	8105e22 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8105ce6:	687b      	ldr	r3, [r7, #4]
 8105ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105cec:	2b00      	cmp	r3, #0
 8105cee:	f000 8098 	beq.w	8105e22 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8105cf2:	68fb      	ldr	r3, [r7, #12]
 8105cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	4a33      	ldr	r2, [pc, #204]	@ (8105dc8 <I2C_Slave_ISR_DMA+0x264>)
 8105cfa:	4293      	cmp	r3, r2
 8105cfc:	d059      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105cfe:	68fb      	ldr	r3, [r7, #12]
 8105d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d02:	681b      	ldr	r3, [r3, #0]
 8105d04:	4a31      	ldr	r2, [pc, #196]	@ (8105dcc <I2C_Slave_ISR_DMA+0x268>)
 8105d06:	4293      	cmp	r3, r2
 8105d08:	d053      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d0a:	68fb      	ldr	r3, [r7, #12]
 8105d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	4a2f      	ldr	r2, [pc, #188]	@ (8105dd0 <I2C_Slave_ISR_DMA+0x26c>)
 8105d12:	4293      	cmp	r3, r2
 8105d14:	d04d      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8105dd4 <I2C_Slave_ISR_DMA+0x270>)
 8105d1e:	4293      	cmp	r3, r2
 8105d20:	d047      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	4a2b      	ldr	r2, [pc, #172]	@ (8105dd8 <I2C_Slave_ISR_DMA+0x274>)
 8105d2a:	4293      	cmp	r3, r2
 8105d2c:	d041      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d2e:	68fb      	ldr	r3, [r7, #12]
 8105d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	4a29      	ldr	r2, [pc, #164]	@ (8105ddc <I2C_Slave_ISR_DMA+0x278>)
 8105d36:	4293      	cmp	r3, r2
 8105d38:	d03b      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	4a27      	ldr	r2, [pc, #156]	@ (8105de0 <I2C_Slave_ISR_DMA+0x27c>)
 8105d42:	4293      	cmp	r3, r2
 8105d44:	d035      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	4a25      	ldr	r2, [pc, #148]	@ (8105de4 <I2C_Slave_ISR_DMA+0x280>)
 8105d4e:	4293      	cmp	r3, r2
 8105d50:	d02f      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d52:	68fb      	ldr	r3, [r7, #12]
 8105d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4a23      	ldr	r2, [pc, #140]	@ (8105de8 <I2C_Slave_ISR_DMA+0x284>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d029      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	4a21      	ldr	r2, [pc, #132]	@ (8105dec <I2C_Slave_ISR_DMA+0x288>)
 8105d66:	4293      	cmp	r3, r2
 8105d68:	d023      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	4a1f      	ldr	r2, [pc, #124]	@ (8105df0 <I2C_Slave_ISR_DMA+0x28c>)
 8105d72:	4293      	cmp	r3, r2
 8105d74:	d01d      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d7a:	681b      	ldr	r3, [r3, #0]
 8105d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8105df4 <I2C_Slave_ISR_DMA+0x290>)
 8105d7e:	4293      	cmp	r3, r2
 8105d80:	d017      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d82:	68fb      	ldr	r3, [r7, #12]
 8105d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	4a1b      	ldr	r2, [pc, #108]	@ (8105df8 <I2C_Slave_ISR_DMA+0x294>)
 8105d8a:	4293      	cmp	r3, r2
 8105d8c:	d011      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d8e:	68fb      	ldr	r3, [r7, #12]
 8105d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	4a19      	ldr	r2, [pc, #100]	@ (8105dfc <I2C_Slave_ISR_DMA+0x298>)
 8105d96:	4293      	cmp	r3, r2
 8105d98:	d00b      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	4a17      	ldr	r2, [pc, #92]	@ (8105e00 <I2C_Slave_ISR_DMA+0x29c>)
 8105da2:	4293      	cmp	r3, r2
 8105da4:	d005      	beq.n	8105db2 <I2C_Slave_ISR_DMA+0x24e>
 8105da6:	68fb      	ldr	r3, [r7, #12]
 8105da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	4a15      	ldr	r2, [pc, #84]	@ (8105e04 <I2C_Slave_ISR_DMA+0x2a0>)
 8105dae:	4293      	cmp	r3, r2
 8105db0:	d12a      	bne.n	8105e08 <I2C_Slave_ISR_DMA+0x2a4>
 8105db2:	68fb      	ldr	r3, [r7, #12]
 8105db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	685b      	ldr	r3, [r3, #4]
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	bf0c      	ite	eq
 8105dbe:	2301      	moveq	r3, #1
 8105dc0:	2300      	movne	r3, #0
 8105dc2:	b2db      	uxtb	r3, r3
 8105dc4:	e029      	b.n	8105e1a <I2C_Slave_ISR_DMA+0x2b6>
 8105dc6:	bf00      	nop
 8105dc8:	40020010 	.word	0x40020010
 8105dcc:	40020028 	.word	0x40020028
 8105dd0:	40020040 	.word	0x40020040
 8105dd4:	40020058 	.word	0x40020058
 8105dd8:	40020070 	.word	0x40020070
 8105ddc:	40020088 	.word	0x40020088
 8105de0:	400200a0 	.word	0x400200a0
 8105de4:	400200b8 	.word	0x400200b8
 8105de8:	40020410 	.word	0x40020410
 8105dec:	40020428 	.word	0x40020428
 8105df0:	40020440 	.word	0x40020440
 8105df4:	40020458 	.word	0x40020458
 8105df8:	40020470 	.word	0x40020470
 8105dfc:	40020488 	.word	0x40020488
 8105e00:	400204a0 	.word	0x400204a0
 8105e04:	400204b8 	.word	0x400204b8
 8105e08:	68fb      	ldr	r3, [r7, #12]
 8105e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	685b      	ldr	r3, [r3, #4]
 8105e10:	2b00      	cmp	r3, #0
 8105e12:	bf0c      	ite	eq
 8105e14:	2301      	moveq	r3, #1
 8105e16:	2300      	movne	r3, #0
 8105e18:	b2db      	uxtb	r3, r3
 8105e1a:	2b00      	cmp	r3, #0
 8105e1c:	d001      	beq.n	8105e22 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8105e1e:	2301      	movs	r3, #1
 8105e20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8105e22:	69fb      	ldr	r3, [r7, #28]
 8105e24:	2b01      	cmp	r3, #1
 8105e26:	d128      	bne.n	8105e7a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8105e28:	68fb      	ldr	r3, [r7, #12]
 8105e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105e2e:	b2db      	uxtb	r3, r3
 8105e30:	2b28      	cmp	r3, #40	@ 0x28
 8105e32:	d108      	bne.n	8105e46 <I2C_Slave_ISR_DMA+0x2e2>
 8105e34:	69bb      	ldr	r3, [r7, #24]
 8105e36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105e3a:	d104      	bne.n	8105e46 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8105e3c:	68b9      	ldr	r1, [r7, #8]
 8105e3e:	68f8      	ldr	r0, [r7, #12]
 8105e40:	f000 fd4c 	bl	81068dc <I2C_ITListenCplt>
 8105e44:	e048      	b.n	8105ed8 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105e4c:	b2db      	uxtb	r3, r3
 8105e4e:	2b29      	cmp	r3, #41	@ 0x29
 8105e50:	d10e      	bne.n	8105e70 <I2C_Slave_ISR_DMA+0x30c>
 8105e52:	69bb      	ldr	r3, [r7, #24]
 8105e54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8105e58:	d00a      	beq.n	8105e70 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105e5a:	68fb      	ldr	r3, [r7, #12]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	2210      	movs	r2, #16
 8105e60:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8105e62:	68f8      	ldr	r0, [r7, #12]
 8105e64:	f000 fea5 	bl	8106bb2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8105e68:	68f8      	ldr	r0, [r7, #12]
 8105e6a:	f000 f9be 	bl	81061ea <I2C_ITSlaveSeqCplt>
 8105e6e:	e033      	b.n	8105ed8 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	2210      	movs	r2, #16
 8105e76:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8105e78:	e034      	b.n	8105ee4 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	2210      	movs	r2, #16
 8105e80:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105e82:	68fb      	ldr	r3, [r7, #12]
 8105e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e86:	f043 0204 	orr.w	r2, r3, #4
 8105e8a:	68fb      	ldr	r3, [r7, #12]
 8105e8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105e94:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8105e96:	69bb      	ldr	r3, [r7, #24]
 8105e98:	2b00      	cmp	r3, #0
 8105e9a:	d003      	beq.n	8105ea4 <I2C_Slave_ISR_DMA+0x340>
 8105e9c:	69bb      	ldr	r3, [r7, #24]
 8105e9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105ea2:	d11f      	bne.n	8105ee4 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8105ea4:	7dfb      	ldrb	r3, [r7, #23]
 8105ea6:	2b21      	cmp	r3, #33	@ 0x21
 8105ea8:	d002      	beq.n	8105eb0 <I2C_Slave_ISR_DMA+0x34c>
 8105eaa:	7dfb      	ldrb	r3, [r7, #23]
 8105eac:	2b29      	cmp	r3, #41	@ 0x29
 8105eae:	d103      	bne.n	8105eb8 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	2221      	movs	r2, #33	@ 0x21
 8105eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8105eb6:	e008      	b.n	8105eca <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8105eb8:	7dfb      	ldrb	r3, [r7, #23]
 8105eba:	2b22      	cmp	r3, #34	@ 0x22
 8105ebc:	d002      	beq.n	8105ec4 <I2C_Slave_ISR_DMA+0x360>
 8105ebe:	7dfb      	ldrb	r3, [r7, #23]
 8105ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8105ec2:	d102      	bne.n	8105eca <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	2222      	movs	r2, #34	@ 0x22
 8105ec8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8105eca:	68fb      	ldr	r3, [r7, #12]
 8105ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105ece:	4619      	mov	r1, r3
 8105ed0:	68f8      	ldr	r0, [r7, #12]
 8105ed2:	f000 fd57 	bl	8106984 <I2C_ITError>
      if (treatdmanack == 1U)
 8105ed6:	e005      	b.n	8105ee4 <I2C_Slave_ISR_DMA+0x380>
 8105ed8:	e004      	b.n	8105ee4 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105eda:	68fb      	ldr	r3, [r7, #12]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	2210      	movs	r2, #16
 8105ee0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8105ee2:	e00f      	b.n	8105f04 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8105ee4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8105ee6:	e00d      	b.n	8105f04 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8105ee8:	68bb      	ldr	r3, [r7, #8]
 8105eea:	f003 0308 	and.w	r3, r3, #8
 8105eee:	2b00      	cmp	r3, #0
 8105ef0:	d008      	beq.n	8105f04 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8105ef8:	2b00      	cmp	r3, #0
 8105efa:	d003      	beq.n	8105f04 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8105efc:	68b9      	ldr	r1, [r7, #8]
 8105efe:	68f8      	ldr	r0, [r7, #12]
 8105f00:	f000 f8b2 	bl	8106068 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105f04:	68fb      	ldr	r3, [r7, #12]
 8105f06:	2200      	movs	r2, #0
 8105f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8105f0c:	2300      	movs	r3, #0
}
 8105f0e:	4618      	mov	r0, r3
 8105f10:	3720      	adds	r7, #32
 8105f12:	46bd      	mov	sp, r7
 8105f14:	bd80      	pop	{r7, pc}
 8105f16:	bf00      	nop

08105f18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8105f18:	b580      	push	{r7, lr}
 8105f1a:	b086      	sub	sp, #24
 8105f1c:	af02      	add	r7, sp, #8
 8105f1e:	60f8      	str	r0, [r7, #12]
 8105f20:	4608      	mov	r0, r1
 8105f22:	4611      	mov	r1, r2
 8105f24:	461a      	mov	r2, r3
 8105f26:	4603      	mov	r3, r0
 8105f28:	817b      	strh	r3, [r7, #10]
 8105f2a:	460b      	mov	r3, r1
 8105f2c:	813b      	strh	r3, [r7, #8]
 8105f2e:	4613      	mov	r3, r2
 8105f30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105f32:	88fb      	ldrh	r3, [r7, #6]
 8105f34:	b2da      	uxtb	r2, r3
 8105f36:	8979      	ldrh	r1, [r7, #10]
 8105f38:	4b20      	ldr	r3, [pc, #128]	@ (8105fbc <I2C_RequestMemoryWrite+0xa4>)
 8105f3a:	9300      	str	r3, [sp, #0]
 8105f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105f40:	68f8      	ldr	r0, [r7, #12]
 8105f42:	f001 f9c1 	bl	81072c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105f46:	69fa      	ldr	r2, [r7, #28]
 8105f48:	69b9      	ldr	r1, [r7, #24]
 8105f4a:	68f8      	ldr	r0, [r7, #12]
 8105f4c:	f001 f851 	bl	8106ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8105f50:	4603      	mov	r3, r0
 8105f52:	2b00      	cmp	r3, #0
 8105f54:	d001      	beq.n	8105f5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105f56:	2301      	movs	r3, #1
 8105f58:	e02c      	b.n	8105fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105f5a:	88fb      	ldrh	r3, [r7, #6]
 8105f5c:	2b01      	cmp	r3, #1
 8105f5e:	d105      	bne.n	8105f6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105f60:	893b      	ldrh	r3, [r7, #8]
 8105f62:	b2da      	uxtb	r2, r3
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	629a      	str	r2, [r3, #40]	@ 0x28
 8105f6a:	e015      	b.n	8105f98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105f6c:	893b      	ldrh	r3, [r7, #8]
 8105f6e:	0a1b      	lsrs	r3, r3, #8
 8105f70:	b29b      	uxth	r3, r3
 8105f72:	b2da      	uxtb	r2, r3
 8105f74:	68fb      	ldr	r3, [r7, #12]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105f7a:	69fa      	ldr	r2, [r7, #28]
 8105f7c:	69b9      	ldr	r1, [r7, #24]
 8105f7e:	68f8      	ldr	r0, [r7, #12]
 8105f80:	f001 f837 	bl	8106ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8105f84:	4603      	mov	r3, r0
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d001      	beq.n	8105f8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105f8a:	2301      	movs	r3, #1
 8105f8c:	e012      	b.n	8105fb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105f8e:	893b      	ldrh	r3, [r7, #8]
 8105f90:	b2da      	uxtb	r2, r3
 8105f92:	68fb      	ldr	r3, [r7, #12]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105f98:	69fb      	ldr	r3, [r7, #28]
 8105f9a:	9300      	str	r3, [sp, #0]
 8105f9c:	69bb      	ldr	r3, [r7, #24]
 8105f9e:	2200      	movs	r2, #0
 8105fa0:	2180      	movs	r1, #128	@ 0x80
 8105fa2:	68f8      	ldr	r0, [r7, #12]
 8105fa4:	f000 ffcc 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 8105fa8:	4603      	mov	r3, r0
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d001      	beq.n	8105fb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8105fae:	2301      	movs	r3, #1
 8105fb0:	e000      	b.n	8105fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8105fb2:	2300      	movs	r3, #0
}
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	3710      	adds	r7, #16
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd80      	pop	{r7, pc}
 8105fbc:	80002000 	.word	0x80002000

08105fc0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8105fc0:	b580      	push	{r7, lr}
 8105fc2:	b086      	sub	sp, #24
 8105fc4:	af02      	add	r7, sp, #8
 8105fc6:	60f8      	str	r0, [r7, #12]
 8105fc8:	4608      	mov	r0, r1
 8105fca:	4611      	mov	r1, r2
 8105fcc:	461a      	mov	r2, r3
 8105fce:	4603      	mov	r3, r0
 8105fd0:	817b      	strh	r3, [r7, #10]
 8105fd2:	460b      	mov	r3, r1
 8105fd4:	813b      	strh	r3, [r7, #8]
 8105fd6:	4613      	mov	r3, r2
 8105fd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8105fda:	88fb      	ldrh	r3, [r7, #6]
 8105fdc:	b2da      	uxtb	r2, r3
 8105fde:	8979      	ldrh	r1, [r7, #10]
 8105fe0:	4b20      	ldr	r3, [pc, #128]	@ (8106064 <I2C_RequestMemoryRead+0xa4>)
 8105fe2:	9300      	str	r3, [sp, #0]
 8105fe4:	2300      	movs	r3, #0
 8105fe6:	68f8      	ldr	r0, [r7, #12]
 8105fe8:	f001 f96e 	bl	81072c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105fec:	69fa      	ldr	r2, [r7, #28]
 8105fee:	69b9      	ldr	r1, [r7, #24]
 8105ff0:	68f8      	ldr	r0, [r7, #12]
 8105ff2:	f000 fffe 	bl	8106ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8105ff6:	4603      	mov	r3, r0
 8105ff8:	2b00      	cmp	r3, #0
 8105ffa:	d001      	beq.n	8106000 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105ffc:	2301      	movs	r3, #1
 8105ffe:	e02c      	b.n	810605a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8106000:	88fb      	ldrh	r3, [r7, #6]
 8106002:	2b01      	cmp	r3, #1
 8106004:	d105      	bne.n	8106012 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8106006:	893b      	ldrh	r3, [r7, #8]
 8106008:	b2da      	uxtb	r2, r3
 810600a:	68fb      	ldr	r3, [r7, #12]
 810600c:	681b      	ldr	r3, [r3, #0]
 810600e:	629a      	str	r2, [r3, #40]	@ 0x28
 8106010:	e015      	b.n	810603e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8106012:	893b      	ldrh	r3, [r7, #8]
 8106014:	0a1b      	lsrs	r3, r3, #8
 8106016:	b29b      	uxth	r3, r3
 8106018:	b2da      	uxtb	r2, r3
 810601a:	68fb      	ldr	r3, [r7, #12]
 810601c:	681b      	ldr	r3, [r3, #0]
 810601e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8106020:	69fa      	ldr	r2, [r7, #28]
 8106022:	69b9      	ldr	r1, [r7, #24]
 8106024:	68f8      	ldr	r0, [r7, #12]
 8106026:	f000 ffe4 	bl	8106ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 810602a:	4603      	mov	r3, r0
 810602c:	2b00      	cmp	r3, #0
 810602e:	d001      	beq.n	8106034 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8106030:	2301      	movs	r3, #1
 8106032:	e012      	b.n	810605a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8106034:	893b      	ldrh	r3, [r7, #8]
 8106036:	b2da      	uxtb	r2, r3
 8106038:	68fb      	ldr	r3, [r7, #12]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810603e:	69fb      	ldr	r3, [r7, #28]
 8106040:	9300      	str	r3, [sp, #0]
 8106042:	69bb      	ldr	r3, [r7, #24]
 8106044:	2200      	movs	r2, #0
 8106046:	2140      	movs	r1, #64	@ 0x40
 8106048:	68f8      	ldr	r0, [r7, #12]
 810604a:	f000 ff79 	bl	8106f40 <I2C_WaitOnFlagUntilTimeout>
 810604e:	4603      	mov	r3, r0
 8106050:	2b00      	cmp	r3, #0
 8106052:	d001      	beq.n	8106058 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8106054:	2301      	movs	r3, #1
 8106056:	e000      	b.n	810605a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8106058:	2300      	movs	r3, #0
}
 810605a:	4618      	mov	r0, r3
 810605c:	3710      	adds	r7, #16
 810605e:	46bd      	mov	sp, r7
 8106060:	bd80      	pop	{r7, pc}
 8106062:	bf00      	nop
 8106064:	80002000 	.word	0x80002000

08106068 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8106068:	b580      	push	{r7, lr}
 810606a:	b084      	sub	sp, #16
 810606c:	af00      	add	r7, sp, #0
 810606e:	6078      	str	r0, [r7, #4]
 8106070:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106078:	b2db      	uxtb	r3, r3
 810607a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 810607e:	2b28      	cmp	r3, #40	@ 0x28
 8106080:	d16a      	bne.n	8106158 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	699b      	ldr	r3, [r3, #24]
 8106088:	0c1b      	lsrs	r3, r3, #16
 810608a:	b2db      	uxtb	r3, r3
 810608c:	f003 0301 	and.w	r3, r3, #1
 8106090:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	699b      	ldr	r3, [r3, #24]
 8106098:	0c1b      	lsrs	r3, r3, #16
 810609a:	b29b      	uxth	r3, r3
 810609c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 81060a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	689b      	ldr	r3, [r3, #8]
 81060a8:	b29b      	uxth	r3, r3
 81060aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81060ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	68db      	ldr	r3, [r3, #12]
 81060b6:	b29b      	uxth	r3, r3
 81060b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 81060bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	68db      	ldr	r3, [r3, #12]
 81060c2:	2b02      	cmp	r3, #2
 81060c4:	d138      	bne.n	8106138 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 81060c6:	897b      	ldrh	r3, [r7, #10]
 81060c8:	09db      	lsrs	r3, r3, #7
 81060ca:	b29a      	uxth	r2, r3
 81060cc:	89bb      	ldrh	r3, [r7, #12]
 81060ce:	4053      	eors	r3, r2
 81060d0:	b29b      	uxth	r3, r3
 81060d2:	f003 0306 	and.w	r3, r3, #6
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d11c      	bne.n	8106114 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81060da:	897b      	ldrh	r3, [r7, #10]
 81060dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81060e2:	1c5a      	adds	r2, r3, #1
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81060ec:	2b02      	cmp	r3, #2
 81060ee:	d13b      	bne.n	8106168 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	2200      	movs	r2, #0
 81060f4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	2208      	movs	r2, #8
 81060fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	2200      	movs	r2, #0
 8106102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8106106:	89ba      	ldrh	r2, [r7, #12]
 8106108:	7bfb      	ldrb	r3, [r7, #15]
 810610a:	4619      	mov	r1, r3
 810610c:	6878      	ldr	r0, [r7, #4]
 810610e:	f7ff f9e8 	bl	81054e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8106112:	e029      	b.n	8106168 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8106114:	893b      	ldrh	r3, [r7, #8]
 8106116:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8106118:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810611c:	6878      	ldr	r0, [r7, #4]
 810611e:	f001 f989 	bl	8107434 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	2200      	movs	r2, #0
 8106126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810612a:	89ba      	ldrh	r2, [r7, #12]
 810612c:	7bfb      	ldrb	r3, [r7, #15]
 810612e:	4619      	mov	r1, r3
 8106130:	6878      	ldr	r0, [r7, #4]
 8106132:	f7ff f9d6 	bl	81054e2 <HAL_I2C_AddrCallback>
}
 8106136:	e017      	b.n	8106168 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8106138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810613c:	6878      	ldr	r0, [r7, #4]
 810613e:	f001 f979 	bl	8107434 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	2200      	movs	r2, #0
 8106146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810614a:	89ba      	ldrh	r2, [r7, #12]
 810614c:	7bfb      	ldrb	r3, [r7, #15]
 810614e:	4619      	mov	r1, r3
 8106150:	6878      	ldr	r0, [r7, #4]
 8106152:	f7ff f9c6 	bl	81054e2 <HAL_I2C_AddrCallback>
}
 8106156:	e007      	b.n	8106168 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	2208      	movs	r2, #8
 810615e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	2200      	movs	r2, #0
 8106164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8106168:	bf00      	nop
 810616a:	3710      	adds	r7, #16
 810616c:	46bd      	mov	sp, r7
 810616e:	bd80      	pop	{r7, pc}

08106170 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8106170:	b580      	push	{r7, lr}
 8106172:	b082      	sub	sp, #8
 8106174:	af00      	add	r7, sp, #0
 8106176:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	2200      	movs	r2, #0
 810617c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106186:	b2db      	uxtb	r3, r3
 8106188:	2b21      	cmp	r3, #33	@ 0x21
 810618a:	d115      	bne.n	81061b8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	2220      	movs	r2, #32
 8106190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	2211      	movs	r2, #17
 8106198:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	2200      	movs	r2, #0
 810619e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81061a0:	2101      	movs	r1, #1
 81061a2:	6878      	ldr	r0, [r7, #4]
 81061a4:	f001 f946 	bl	8107434 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	2200      	movs	r2, #0
 81061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 81061b0:	6878      	ldr	r0, [r7, #4]
 81061b2:	f7ff f96e 	bl	8105492 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81061b6:	e014      	b.n	81061e2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	2220      	movs	r2, #32
 81061bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2212      	movs	r2, #18
 81061c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	2200      	movs	r2, #0
 81061ca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 81061cc:	2102      	movs	r1, #2
 81061ce:	6878      	ldr	r0, [r7, #4]
 81061d0:	f001 f930 	bl	8107434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	2200      	movs	r2, #0
 81061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 81061dc:	6878      	ldr	r0, [r7, #4]
 81061de:	f7ff f962 	bl	81054a6 <HAL_I2C_MasterRxCpltCallback>
}
 81061e2:	bf00      	nop
 81061e4:	3708      	adds	r7, #8
 81061e6:	46bd      	mov	sp, r7
 81061e8:	bd80      	pop	{r7, pc}

081061ea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 81061ea:	b580      	push	{r7, lr}
 81061ec:	b084      	sub	sp, #16
 81061ee:	af00      	add	r7, sp, #0
 81061f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	2200      	movs	r2, #0
 81061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8106202:	68fb      	ldr	r3, [r7, #12]
 8106204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8106208:	2b00      	cmp	r3, #0
 810620a:	d008      	beq.n	810621e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	681a      	ldr	r2, [r3, #0]
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	681b      	ldr	r3, [r3, #0]
 8106216:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 810621a:	601a      	str	r2, [r3, #0]
 810621c:	e00c      	b.n	8106238 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 810621e:	68fb      	ldr	r3, [r7, #12]
 8106220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106224:	2b00      	cmp	r3, #0
 8106226:	d007      	beq.n	8106238 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	681a      	ldr	r2, [r3, #0]
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106236:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810623e:	b2db      	uxtb	r3, r3
 8106240:	2b29      	cmp	r3, #41	@ 0x29
 8106242:	d112      	bne.n	810626a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	2228      	movs	r2, #40	@ 0x28
 8106248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	2221      	movs	r2, #33	@ 0x21
 8106250:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8106252:	2101      	movs	r1, #1
 8106254:	6878      	ldr	r0, [r7, #4]
 8106256:	f001 f8ed 	bl	8107434 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	2200      	movs	r2, #0
 810625e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8106262:	6878      	ldr	r0, [r7, #4]
 8106264:	f7ff f929 	bl	81054ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8106268:	e017      	b.n	810629a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106270:	b2db      	uxtb	r3, r3
 8106272:	2b2a      	cmp	r3, #42	@ 0x2a
 8106274:	d111      	bne.n	810629a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2228      	movs	r2, #40	@ 0x28
 810627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	2222      	movs	r2, #34	@ 0x22
 8106282:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8106284:	2102      	movs	r1, #2
 8106286:	6878      	ldr	r0, [r7, #4]
 8106288:	f001 f8d4 	bl	8107434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	2200      	movs	r2, #0
 8106290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8106294:	6878      	ldr	r0, [r7, #4]
 8106296:	f7ff f91a 	bl	81054ce <HAL_I2C_SlaveRxCpltCallback>
}
 810629a:	bf00      	nop
 810629c:	3710      	adds	r7, #16
 810629e:	46bd      	mov	sp, r7
 81062a0:	bd80      	pop	{r7, pc}
	...

081062a4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81062a4:	b580      	push	{r7, lr}
 81062a6:	b086      	sub	sp, #24
 81062a8:	af00      	add	r7, sp, #0
 81062aa:	6078      	str	r0, [r7, #4]
 81062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 81062ae:	683b      	ldr	r3, [r7, #0]
 81062b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	2220      	movs	r2, #32
 81062b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81062c0:	b2db      	uxtb	r3, r3
 81062c2:	2b21      	cmp	r3, #33	@ 0x21
 81062c4:	d107      	bne.n	81062d6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81062c6:	2101      	movs	r1, #1
 81062c8:	6878      	ldr	r0, [r7, #4]
 81062ca:	f001 f8b3 	bl	8107434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	2211      	movs	r2, #17
 81062d2:	631a      	str	r2, [r3, #48]	@ 0x30
 81062d4:	e00c      	b.n	81062f0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81062dc:	b2db      	uxtb	r3, r3
 81062de:	2b22      	cmp	r3, #34	@ 0x22
 81062e0:	d106      	bne.n	81062f0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 81062e2:	2102      	movs	r1, #2
 81062e4:	6878      	ldr	r0, [r7, #4]
 81062e6:	f001 f8a5 	bl	8107434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	2212      	movs	r2, #18
 81062ee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	6859      	ldr	r1, [r3, #4]
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	681a      	ldr	r2, [r3, #0]
 81062fa:	4b4c      	ldr	r3, [pc, #304]	@ (810642c <I2C_ITMasterCplt+0x188>)
 81062fc:	400b      	ands	r3, r1
 81062fe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8106300:	687b      	ldr	r3, [r7, #4]
 8106302:	2200      	movs	r2, #0
 8106304:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	4a49      	ldr	r2, [pc, #292]	@ (8106430 <I2C_ITMasterCplt+0x18c>)
 810630a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 810630c:	697b      	ldr	r3, [r7, #20]
 810630e:	f003 0310 	and.w	r3, r3, #16
 8106312:	2b00      	cmp	r3, #0
 8106314:	d009      	beq.n	810632a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	681b      	ldr	r3, [r3, #0]
 810631a:	2210      	movs	r2, #16
 810631c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106322:	f043 0204 	orr.w	r2, r3, #4
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106330:	b2db      	uxtb	r3, r3
 8106332:	2b60      	cmp	r3, #96	@ 0x60
 8106334:	d10a      	bne.n	810634c <I2C_ITMasterCplt+0xa8>
 8106336:	697b      	ldr	r3, [r7, #20]
 8106338:	f003 0304 	and.w	r3, r3, #4
 810633c:	2b00      	cmp	r3, #0
 810633e:	d005      	beq.n	810634c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106346:	b2db      	uxtb	r3, r3
 8106348:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 810634a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 810634c:	6878      	ldr	r0, [r7, #4]
 810634e:	f000 fc30 	bl	8106bb2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106356:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810635e:	b2db      	uxtb	r3, r3
 8106360:	2b60      	cmp	r3, #96	@ 0x60
 8106362:	d002      	beq.n	810636a <I2C_ITMasterCplt+0xc6>
 8106364:	693b      	ldr	r3, [r7, #16]
 8106366:	2b00      	cmp	r3, #0
 8106368:	d006      	beq.n	8106378 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810636e:	4619      	mov	r1, r3
 8106370:	6878      	ldr	r0, [r7, #4]
 8106372:	f000 fb07 	bl	8106984 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8106376:	e054      	b.n	8106422 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810637e:	b2db      	uxtb	r3, r3
 8106380:	2b21      	cmp	r3, #33	@ 0x21
 8106382:	d124      	bne.n	81063ce <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	2220      	movs	r2, #32
 8106388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	2200      	movs	r2, #0
 8106390:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106398:	b2db      	uxtb	r3, r3
 810639a:	2b40      	cmp	r3, #64	@ 0x40
 810639c:	d10b      	bne.n	81063b6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	2200      	movs	r2, #0
 81063a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	2200      	movs	r2, #0
 81063aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 81063ae:	6878      	ldr	r0, [r7, #4]
 81063b0:	f7ff f8af 	bl	8105512 <HAL_I2C_MemTxCpltCallback>
}
 81063b4:	e035      	b.n	8106422 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	2200      	movs	r2, #0
 81063ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	2200      	movs	r2, #0
 81063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 81063c6:	6878      	ldr	r0, [r7, #4]
 81063c8:	f7ff f863 	bl	8105492 <HAL_I2C_MasterTxCpltCallback>
}
 81063cc:	e029      	b.n	8106422 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81063d4:	b2db      	uxtb	r3, r3
 81063d6:	2b22      	cmp	r3, #34	@ 0x22
 81063d8:	d123      	bne.n	8106422 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	2220      	movs	r2, #32
 81063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	2200      	movs	r2, #0
 81063e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81063ee:	b2db      	uxtb	r3, r3
 81063f0:	2b40      	cmp	r3, #64	@ 0x40
 81063f2:	d10b      	bne.n	810640c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	2200      	movs	r2, #0
 81063f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	2200      	movs	r2, #0
 8106400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8106404:	6878      	ldr	r0, [r7, #4]
 8106406:	f7fb fa97 	bl	8101938 <HAL_I2C_MemRxCpltCallback>
}
 810640a:	e00a      	b.n	8106422 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	2200      	movs	r2, #0
 8106410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	2200      	movs	r2, #0
 8106418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 810641c:	6878      	ldr	r0, [r7, #4]
 810641e:	f7ff f842 	bl	81054a6 <HAL_I2C_MasterRxCpltCallback>
}
 8106422:	bf00      	nop
 8106424:	3718      	adds	r7, #24
 8106426:	46bd      	mov	sp, r7
 8106428:	bd80      	pop	{r7, pc}
 810642a:	bf00      	nop
 810642c:	fe00e800 	.word	0xfe00e800
 8106430:	ffff0000 	.word	0xffff0000

08106434 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8106434:	b580      	push	{r7, lr}
 8106436:	b086      	sub	sp, #24
 8106438:	af00      	add	r7, sp, #0
 810643a:	6078      	str	r0, [r7, #4]
 810643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	681b      	ldr	r3, [r3, #0]
 8106444:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8106446:	683b      	ldr	r3, [r7, #0]
 8106448:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810644e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106456:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	681b      	ldr	r3, [r3, #0]
 810645c:	2220      	movs	r2, #32
 810645e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8106460:	7afb      	ldrb	r3, [r7, #11]
 8106462:	2b21      	cmp	r3, #33	@ 0x21
 8106464:	d002      	beq.n	810646c <I2C_ITSlaveCplt+0x38>
 8106466:	7afb      	ldrb	r3, [r7, #11]
 8106468:	2b29      	cmp	r3, #41	@ 0x29
 810646a:	d108      	bne.n	810647e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 810646c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8106470:	6878      	ldr	r0, [r7, #4]
 8106472:	f000 ffdf 	bl	8107434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	2221      	movs	r2, #33	@ 0x21
 810647a:	631a      	str	r2, [r3, #48]	@ 0x30
 810647c:	e019      	b.n	81064b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 810647e:	7afb      	ldrb	r3, [r7, #11]
 8106480:	2b22      	cmp	r3, #34	@ 0x22
 8106482:	d002      	beq.n	810648a <I2C_ITSlaveCplt+0x56>
 8106484:	7afb      	ldrb	r3, [r7, #11]
 8106486:	2b2a      	cmp	r3, #42	@ 0x2a
 8106488:	d108      	bne.n	810649c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 810648a:	f248 0102 	movw	r1, #32770	@ 0x8002
 810648e:	6878      	ldr	r0, [r7, #4]
 8106490:	f000 ffd0 	bl	8107434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	2222      	movs	r2, #34	@ 0x22
 8106498:	631a      	str	r2, [r3, #48]	@ 0x30
 810649a:	e00a      	b.n	81064b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 810649c:	7afb      	ldrb	r3, [r7, #11]
 810649e:	2b28      	cmp	r3, #40	@ 0x28
 81064a0:	d107      	bne.n	81064b2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 81064a2:	f248 0103 	movw	r1, #32771	@ 0x8003
 81064a6:	6878      	ldr	r0, [r7, #4]
 81064a8:	f000 ffc4 	bl	8107434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	2200      	movs	r2, #0
 81064b0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	685a      	ldr	r2, [r3, #4]
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	681b      	ldr	r3, [r3, #0]
 81064bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81064c0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	6859      	ldr	r1, [r3, #4]
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681a      	ldr	r2, [r3, #0]
 81064cc:	4b7f      	ldr	r3, [pc, #508]	@ (81066cc <I2C_ITSlaveCplt+0x298>)
 81064ce:	400b      	ands	r3, r1
 81064d0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81064d2:	6878      	ldr	r0, [r7, #4]
 81064d4:	f000 fb6d 	bl	8106bb2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81064d8:	693b      	ldr	r3, [r7, #16]
 81064da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81064de:	2b00      	cmp	r3, #0
 81064e0:	d07a      	beq.n	81065d8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	681a      	ldr	r2, [r3, #0]
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 81064f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81064f6:	2b00      	cmp	r3, #0
 81064f8:	f000 8111 	beq.w	810671e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	4a73      	ldr	r2, [pc, #460]	@ (81066d0 <I2C_ITSlaveCplt+0x29c>)
 8106504:	4293      	cmp	r3, r2
 8106506:	d059      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a71      	ldr	r2, [pc, #452]	@ (81066d4 <I2C_ITSlaveCplt+0x2a0>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d053      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	4a6f      	ldr	r2, [pc, #444]	@ (81066d8 <I2C_ITSlaveCplt+0x2a4>)
 810651c:	4293      	cmp	r3, r2
 810651e:	d04d      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	4a6d      	ldr	r2, [pc, #436]	@ (81066dc <I2C_ITSlaveCplt+0x2a8>)
 8106528:	4293      	cmp	r3, r2
 810652a:	d047      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	4a6b      	ldr	r2, [pc, #428]	@ (81066e0 <I2C_ITSlaveCplt+0x2ac>)
 8106534:	4293      	cmp	r3, r2
 8106536:	d041      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	4a69      	ldr	r2, [pc, #420]	@ (81066e4 <I2C_ITSlaveCplt+0x2b0>)
 8106540:	4293      	cmp	r3, r2
 8106542:	d03b      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	4a67      	ldr	r2, [pc, #412]	@ (81066e8 <I2C_ITSlaveCplt+0x2b4>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d035      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106554:	681b      	ldr	r3, [r3, #0]
 8106556:	4a65      	ldr	r2, [pc, #404]	@ (81066ec <I2C_ITSlaveCplt+0x2b8>)
 8106558:	4293      	cmp	r3, r2
 810655a:	d02f      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	4a63      	ldr	r2, [pc, #396]	@ (81066f0 <I2C_ITSlaveCplt+0x2bc>)
 8106564:	4293      	cmp	r3, r2
 8106566:	d029      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	4a61      	ldr	r2, [pc, #388]	@ (81066f4 <I2C_ITSlaveCplt+0x2c0>)
 8106570:	4293      	cmp	r3, r2
 8106572:	d023      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	4a5f      	ldr	r2, [pc, #380]	@ (81066f8 <I2C_ITSlaveCplt+0x2c4>)
 810657c:	4293      	cmp	r3, r2
 810657e:	d01d      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	4a5d      	ldr	r2, [pc, #372]	@ (81066fc <I2C_ITSlaveCplt+0x2c8>)
 8106588:	4293      	cmp	r3, r2
 810658a:	d017      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	4a5b      	ldr	r2, [pc, #364]	@ (8106700 <I2C_ITSlaveCplt+0x2cc>)
 8106594:	4293      	cmp	r3, r2
 8106596:	d011      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	4a59      	ldr	r2, [pc, #356]	@ (8106704 <I2C_ITSlaveCplt+0x2d0>)
 81065a0:	4293      	cmp	r3, r2
 81065a2:	d00b      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	4a57      	ldr	r2, [pc, #348]	@ (8106708 <I2C_ITSlaveCplt+0x2d4>)
 81065ac:	4293      	cmp	r3, r2
 81065ae:	d005      	beq.n	81065bc <I2C_ITSlaveCplt+0x188>
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a55      	ldr	r2, [pc, #340]	@ (810670c <I2C_ITSlaveCplt+0x2d8>)
 81065b8:	4293      	cmp	r3, r2
 81065ba:	d105      	bne.n	81065c8 <I2C_ITSlaveCplt+0x194>
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	685b      	ldr	r3, [r3, #4]
 81065c4:	b29b      	uxth	r3, r3
 81065c6:	e004      	b.n	81065d2 <I2C_ITSlaveCplt+0x19e>
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	685b      	ldr	r3, [r3, #4]
 81065d0:	b29b      	uxth	r3, r3
 81065d2:	687a      	ldr	r2, [r7, #4]
 81065d4:	8553      	strh	r3, [r2, #42]	@ 0x2a
 81065d6:	e0a2      	b.n	810671e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81065d8:	693b      	ldr	r3, [r7, #16]
 81065da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81065de:	2b00      	cmp	r3, #0
 81065e0:	f000 809d 	beq.w	810671e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	681a      	ldr	r2, [r3, #0]
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	681b      	ldr	r3, [r3, #0]
 81065ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81065f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	f000 8090 	beq.w	810671e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	4a32      	ldr	r2, [pc, #200]	@ (81066d0 <I2C_ITSlaveCplt+0x29c>)
 8106606:	4293      	cmp	r3, r2
 8106608:	d059      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	4a30      	ldr	r2, [pc, #192]	@ (81066d4 <I2C_ITSlaveCplt+0x2a0>)
 8106612:	4293      	cmp	r3, r2
 8106614:	d053      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	4a2e      	ldr	r2, [pc, #184]	@ (81066d8 <I2C_ITSlaveCplt+0x2a4>)
 810661e:	4293      	cmp	r3, r2
 8106620:	d04d      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	4a2c      	ldr	r2, [pc, #176]	@ (81066dc <I2C_ITSlaveCplt+0x2a8>)
 810662a:	4293      	cmp	r3, r2
 810662c:	d047      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	4a2a      	ldr	r2, [pc, #168]	@ (81066e0 <I2C_ITSlaveCplt+0x2ac>)
 8106636:	4293      	cmp	r3, r2
 8106638:	d041      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a28      	ldr	r2, [pc, #160]	@ (81066e4 <I2C_ITSlaveCplt+0x2b0>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d03b      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810664a:	681b      	ldr	r3, [r3, #0]
 810664c:	4a26      	ldr	r2, [pc, #152]	@ (81066e8 <I2C_ITSlaveCplt+0x2b4>)
 810664e:	4293      	cmp	r3, r2
 8106650:	d035      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	4a24      	ldr	r2, [pc, #144]	@ (81066ec <I2C_ITSlaveCplt+0x2b8>)
 810665a:	4293      	cmp	r3, r2
 810665c:	d02f      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	4a22      	ldr	r2, [pc, #136]	@ (81066f0 <I2C_ITSlaveCplt+0x2bc>)
 8106666:	4293      	cmp	r3, r2
 8106668:	d029      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	4a20      	ldr	r2, [pc, #128]	@ (81066f4 <I2C_ITSlaveCplt+0x2c0>)
 8106672:	4293      	cmp	r3, r2
 8106674:	d023      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	4a1e      	ldr	r2, [pc, #120]	@ (81066f8 <I2C_ITSlaveCplt+0x2c4>)
 810667e:	4293      	cmp	r3, r2
 8106680:	d01d      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106686:	681b      	ldr	r3, [r3, #0]
 8106688:	4a1c      	ldr	r2, [pc, #112]	@ (81066fc <I2C_ITSlaveCplt+0x2c8>)
 810668a:	4293      	cmp	r3, r2
 810668c:	d017      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	4a1a      	ldr	r2, [pc, #104]	@ (8106700 <I2C_ITSlaveCplt+0x2cc>)
 8106696:	4293      	cmp	r3, r2
 8106698:	d011      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	4a18      	ldr	r2, [pc, #96]	@ (8106704 <I2C_ITSlaveCplt+0x2d0>)
 81066a2:	4293      	cmp	r3, r2
 81066a4:	d00b      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 81066a6:	687b      	ldr	r3, [r7, #4]
 81066a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	4a16      	ldr	r2, [pc, #88]	@ (8106708 <I2C_ITSlaveCplt+0x2d4>)
 81066ae:	4293      	cmp	r3, r2
 81066b0:	d005      	beq.n	81066be <I2C_ITSlaveCplt+0x28a>
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	4a14      	ldr	r2, [pc, #80]	@ (810670c <I2C_ITSlaveCplt+0x2d8>)
 81066ba:	4293      	cmp	r3, r2
 81066bc:	d128      	bne.n	8106710 <I2C_ITSlaveCplt+0x2dc>
 81066be:	687b      	ldr	r3, [r7, #4]
 81066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	685b      	ldr	r3, [r3, #4]
 81066c6:	b29b      	uxth	r3, r3
 81066c8:	e027      	b.n	810671a <I2C_ITSlaveCplt+0x2e6>
 81066ca:	bf00      	nop
 81066cc:	fe00e800 	.word	0xfe00e800
 81066d0:	40020010 	.word	0x40020010
 81066d4:	40020028 	.word	0x40020028
 81066d8:	40020040 	.word	0x40020040
 81066dc:	40020058 	.word	0x40020058
 81066e0:	40020070 	.word	0x40020070
 81066e4:	40020088 	.word	0x40020088
 81066e8:	400200a0 	.word	0x400200a0
 81066ec:	400200b8 	.word	0x400200b8
 81066f0:	40020410 	.word	0x40020410
 81066f4:	40020428 	.word	0x40020428
 81066f8:	40020440 	.word	0x40020440
 81066fc:	40020458 	.word	0x40020458
 8106700:	40020470 	.word	0x40020470
 8106704:	40020488 	.word	0x40020488
 8106708:	400204a0 	.word	0x400204a0
 810670c:	400204b8 	.word	0x400204b8
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	685b      	ldr	r3, [r3, #4]
 8106718:	b29b      	uxth	r3, r3
 810671a:	687a      	ldr	r2, [r7, #4]
 810671c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 810671e:	697b      	ldr	r3, [r7, #20]
 8106720:	f003 0304 	and.w	r3, r3, #4
 8106724:	2b00      	cmp	r3, #0
 8106726:	d020      	beq.n	810676a <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8106728:	697b      	ldr	r3, [r7, #20]
 810672a:	f023 0304 	bic.w	r3, r3, #4
 810672e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810673a:	b2d2      	uxtb	r2, r2
 810673c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106742:	1c5a      	adds	r2, r3, #1
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810674c:	2b00      	cmp	r3, #0
 810674e:	d00c      	beq.n	810676a <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106754:	3b01      	subs	r3, #1
 8106756:	b29a      	uxth	r2, r3
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106760:	b29b      	uxth	r3, r3
 8106762:	3b01      	subs	r3, #1
 8106764:	b29a      	uxth	r2, r3
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810676e:	b29b      	uxth	r3, r3
 8106770:	2b00      	cmp	r3, #0
 8106772:	d005      	beq.n	8106780 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106778:	f043 0204 	orr.w	r2, r3, #4
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8106780:	697b      	ldr	r3, [r7, #20]
 8106782:	f003 0310 	and.w	r3, r3, #16
 8106786:	2b00      	cmp	r3, #0
 8106788:	d049      	beq.n	810681e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 810678a:	693b      	ldr	r3, [r7, #16]
 810678c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8106790:	2b00      	cmp	r3, #0
 8106792:	d044      	beq.n	810681e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106798:	b29b      	uxth	r3, r3
 810679a:	2b00      	cmp	r3, #0
 810679c:	d128      	bne.n	81067f0 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81067a4:	b2db      	uxtb	r3, r3
 81067a6:	2b28      	cmp	r3, #40	@ 0x28
 81067a8:	d108      	bne.n	81067bc <I2C_ITSlaveCplt+0x388>
 81067aa:	68fb      	ldr	r3, [r7, #12]
 81067ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81067b0:	d104      	bne.n	81067bc <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81067b2:	6979      	ldr	r1, [r7, #20]
 81067b4:	6878      	ldr	r0, [r7, #4]
 81067b6:	f000 f891 	bl	81068dc <I2C_ITListenCplt>
 81067ba:	e030      	b.n	810681e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81067c2:	b2db      	uxtb	r3, r3
 81067c4:	2b29      	cmp	r3, #41	@ 0x29
 81067c6:	d10e      	bne.n	81067e6 <I2C_ITSlaveCplt+0x3b2>
 81067c8:	68fb      	ldr	r3, [r7, #12]
 81067ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81067ce:	d00a      	beq.n	81067e6 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	681b      	ldr	r3, [r3, #0]
 81067d4:	2210      	movs	r2, #16
 81067d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 81067d8:	6878      	ldr	r0, [r7, #4]
 81067da:	f000 f9ea 	bl	8106bb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81067de:	6878      	ldr	r0, [r7, #4]
 81067e0:	f7ff fd03 	bl	81061ea <I2C_ITSlaveSeqCplt>
 81067e4:	e01b      	b.n	810681e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	2210      	movs	r2, #16
 81067ec:	61da      	str	r2, [r3, #28]
 81067ee:	e016      	b.n	810681e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	2210      	movs	r2, #16
 81067f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81067fc:	f043 0204 	orr.w	r2, r3, #4
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8106804:	68fb      	ldr	r3, [r7, #12]
 8106806:	2b00      	cmp	r3, #0
 8106808:	d003      	beq.n	8106812 <I2C_ITSlaveCplt+0x3de>
 810680a:	68fb      	ldr	r3, [r7, #12]
 810680c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106810:	d105      	bne.n	810681e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106816:	4619      	mov	r1, r3
 8106818:	6878      	ldr	r0, [r7, #4]
 810681a:	f000 f8b3 	bl	8106984 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	2200      	movs	r2, #0
 8106822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	2200      	movs	r2, #0
 810682a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106830:	2b00      	cmp	r3, #0
 8106832:	d010      	beq.n	8106856 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106838:	4619      	mov	r1, r3
 810683a:	6878      	ldr	r0, [r7, #4]
 810683c:	f000 f8a2 	bl	8106984 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106846:	b2db      	uxtb	r3, r3
 8106848:	2b28      	cmp	r3, #40	@ 0x28
 810684a:	d141      	bne.n	81068d0 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 810684c:	6979      	ldr	r1, [r7, #20]
 810684e:	6878      	ldr	r0, [r7, #4]
 8106850:	f000 f844 	bl	81068dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8106854:	e03c      	b.n	81068d0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810685a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 810685e:	d014      	beq.n	810688a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8106860:	6878      	ldr	r0, [r7, #4]
 8106862:	f7ff fcc2 	bl	81061ea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	4a1b      	ldr	r2, [pc, #108]	@ (81068d8 <I2C_ITSlaveCplt+0x4a4>)
 810686a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	2220      	movs	r2, #32
 8106870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	2200      	movs	r2, #0
 8106878:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	2200      	movs	r2, #0
 810687e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8106882:	6878      	ldr	r0, [r7, #4]
 8106884:	f7fe fe3b 	bl	81054fe <HAL_I2C_ListenCpltCallback>
}
 8106888:	e022      	b.n	81068d0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106890:	b2db      	uxtb	r3, r3
 8106892:	2b22      	cmp	r3, #34	@ 0x22
 8106894:	d10e      	bne.n	81068b4 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	2220      	movs	r2, #32
 810689a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	2200      	movs	r2, #0
 81068a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	2200      	movs	r2, #0
 81068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81068ac:	6878      	ldr	r0, [r7, #4]
 81068ae:	f7fe fe0e 	bl	81054ce <HAL_I2C_SlaveRxCpltCallback>
}
 81068b2:	e00d      	b.n	81068d0 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2220      	movs	r2, #32
 81068b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	2200      	movs	r2, #0
 81068c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81068c2:	687b      	ldr	r3, [r7, #4]
 81068c4:	2200      	movs	r2, #0
 81068c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81068ca:	6878      	ldr	r0, [r7, #4]
 81068cc:	f7fe fdf5 	bl	81054ba <HAL_I2C_SlaveTxCpltCallback>
}
 81068d0:	bf00      	nop
 81068d2:	3718      	adds	r7, #24
 81068d4:	46bd      	mov	sp, r7
 81068d6:	bd80      	pop	{r7, pc}
 81068d8:	ffff0000 	.word	0xffff0000

081068dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81068dc:	b580      	push	{r7, lr}
 81068de:	b082      	sub	sp, #8
 81068e0:	af00      	add	r7, sp, #0
 81068e2:	6078      	str	r0, [r7, #4]
 81068e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	4a25      	ldr	r2, [pc, #148]	@ (8106980 <I2C_ITListenCplt+0xa4>)
 81068ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	2200      	movs	r2, #0
 81068f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	2220      	movs	r2, #32
 81068f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	2200      	movs	r2, #0
 81068fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	2200      	movs	r2, #0
 8106906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8106908:	683b      	ldr	r3, [r7, #0]
 810690a:	f003 0304 	and.w	r3, r3, #4
 810690e:	2b00      	cmp	r3, #0
 8106910:	d022      	beq.n	8106958 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810691c:	b2d2      	uxtb	r2, r2
 810691e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106924:	1c5a      	adds	r2, r3, #1
 8106926:	687b      	ldr	r3, [r7, #4]
 8106928:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810692e:	2b00      	cmp	r3, #0
 8106930:	d012      	beq.n	8106958 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106936:	3b01      	subs	r3, #1
 8106938:	b29a      	uxth	r2, r3
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106942:	b29b      	uxth	r3, r3
 8106944:	3b01      	subs	r3, #1
 8106946:	b29a      	uxth	r2, r3
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106950:	f043 0204 	orr.w	r2, r3, #4
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8106958:	f248 0103 	movw	r1, #32771	@ 0x8003
 810695c:	6878      	ldr	r0, [r7, #4]
 810695e:	f000 fd69 	bl	8107434 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	2210      	movs	r2, #16
 8106968:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	2200      	movs	r2, #0
 810696e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8106972:	6878      	ldr	r0, [r7, #4]
 8106974:	f7fe fdc3 	bl	81054fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8106978:	bf00      	nop
 810697a:	3708      	adds	r7, #8
 810697c:	46bd      	mov	sp, r7
 810697e:	bd80      	pop	{r7, pc}
 8106980:	ffff0000 	.word	0xffff0000

08106984 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8106984:	b580      	push	{r7, lr}
 8106986:	b084      	sub	sp, #16
 8106988:	af00      	add	r7, sp, #0
 810698a:	6078      	str	r0, [r7, #4]
 810698c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106994:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	2200      	movs	r2, #0
 810699a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	4a6d      	ldr	r2, [pc, #436]	@ (8106b58 <I2C_ITError+0x1d4>)
 81069a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	2200      	movs	r2, #0
 81069a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81069ae:	683b      	ldr	r3, [r7, #0]
 81069b0:	431a      	orrs	r2, r3
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81069b6:	7bfb      	ldrb	r3, [r7, #15]
 81069b8:	2b28      	cmp	r3, #40	@ 0x28
 81069ba:	d005      	beq.n	81069c8 <I2C_ITError+0x44>
 81069bc:	7bfb      	ldrb	r3, [r7, #15]
 81069be:	2b29      	cmp	r3, #41	@ 0x29
 81069c0:	d002      	beq.n	81069c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 81069c2:	7bfb      	ldrb	r3, [r7, #15]
 81069c4:	2b2a      	cmp	r3, #42	@ 0x2a
 81069c6:	d10b      	bne.n	81069e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81069c8:	2103      	movs	r1, #3
 81069ca:	6878      	ldr	r0, [r7, #4]
 81069cc:	f000 fd32 	bl	8107434 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2228      	movs	r2, #40	@ 0x28
 81069d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	4a60      	ldr	r2, [pc, #384]	@ (8106b5c <I2C_ITError+0x1d8>)
 81069dc:	635a      	str	r2, [r3, #52]	@ 0x34
 81069de:	e030      	b.n	8106a42 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81069e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 81069e4:	6878      	ldr	r0, [r7, #4]
 81069e6:	f000 fd25 	bl	8107434 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81069ea:	6878      	ldr	r0, [r7, #4]
 81069ec:	f000 f8e1 	bl	8106bb2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81069f6:	b2db      	uxtb	r3, r3
 81069f8:	2b60      	cmp	r3, #96	@ 0x60
 81069fa:	d01f      	beq.n	8106a3c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	2220      	movs	r2, #32
 8106a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	699b      	ldr	r3, [r3, #24]
 8106a0a:	f003 0320 	and.w	r3, r3, #32
 8106a0e:	2b20      	cmp	r3, #32
 8106a10:	d114      	bne.n	8106a3c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	699b      	ldr	r3, [r3, #24]
 8106a18:	f003 0310 	and.w	r3, r3, #16
 8106a1c:	2b10      	cmp	r3, #16
 8106a1e:	d109      	bne.n	8106a34 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	2210      	movs	r2, #16
 8106a26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106a2c:	f043 0204 	orr.w	r2, r3, #4
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	681b      	ldr	r3, [r3, #0]
 8106a38:	2220      	movs	r2, #32
 8106a3a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	2200      	movs	r2, #0
 8106a40:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106a46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a4c:	2b00      	cmp	r3, #0
 8106a4e:	d039      	beq.n	8106ac4 <I2C_ITError+0x140>
 8106a50:	68bb      	ldr	r3, [r7, #8]
 8106a52:	2b11      	cmp	r3, #17
 8106a54:	d002      	beq.n	8106a5c <I2C_ITError+0xd8>
 8106a56:	68bb      	ldr	r3, [r7, #8]
 8106a58:	2b21      	cmp	r3, #33	@ 0x21
 8106a5a:	d133      	bne.n	8106ac4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	681b      	ldr	r3, [r3, #0]
 8106a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8106a66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106a6a:	d107      	bne.n	8106a7c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	681a      	ldr	r2, [r3, #0]
 8106a72:	687b      	ldr	r3, [r7, #4]
 8106a74:	681b      	ldr	r3, [r3, #0]
 8106a76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8106a7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a80:	4618      	mov	r0, r3
 8106a82:	f7fd fac1 	bl	8104008 <HAL_DMA_GetState>
 8106a86:	4603      	mov	r3, r0
 8106a88:	2b01      	cmp	r3, #1
 8106a8a:	d017      	beq.n	8106abc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8106a8c:	687b      	ldr	r3, [r7, #4]
 8106a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a90:	4a33      	ldr	r2, [pc, #204]	@ (8106b60 <I2C_ITError+0x1dc>)
 8106a92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	2200      	movs	r2, #0
 8106a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106aa0:	4618      	mov	r0, r3
 8106aa2:	f7fc f941 	bl	8102d28 <HAL_DMA_Abort_IT>
 8106aa6:	4603      	mov	r3, r0
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d04d      	beq.n	8106b48 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ab2:	687a      	ldr	r2, [r7, #4]
 8106ab4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8106ab6:	4610      	mov	r0, r2
 8106ab8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8106aba:	e045      	b.n	8106b48 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8106abc:	6878      	ldr	r0, [r7, #4]
 8106abe:	f000 f851 	bl	8106b64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8106ac2:	e041      	b.n	8106b48 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106ac8:	2b00      	cmp	r3, #0
 8106aca:	d039      	beq.n	8106b40 <I2C_ITError+0x1bc>
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	2b12      	cmp	r3, #18
 8106ad0:	d002      	beq.n	8106ad8 <I2C_ITError+0x154>
 8106ad2:	68bb      	ldr	r3, [r7, #8]
 8106ad4:	2b22      	cmp	r3, #34	@ 0x22
 8106ad6:	d133      	bne.n	8106b40 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ae6:	d107      	bne.n	8106af8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8106ae8:	687b      	ldr	r3, [r7, #4]
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	681a      	ldr	r2, [r3, #0]
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	681b      	ldr	r3, [r3, #0]
 8106af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106af6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106afc:	4618      	mov	r0, r3
 8106afe:	f7fd fa83 	bl	8104008 <HAL_DMA_GetState>
 8106b02:	4603      	mov	r3, r0
 8106b04:	2b01      	cmp	r3, #1
 8106b06:	d017      	beq.n	8106b38 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106b0c:	4a14      	ldr	r2, [pc, #80]	@ (8106b60 <I2C_ITError+0x1dc>)
 8106b0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106b10:	687b      	ldr	r3, [r7, #4]
 8106b12:	2200      	movs	r2, #0
 8106b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106b1c:	4618      	mov	r0, r3
 8106b1e:	f7fc f903 	bl	8102d28 <HAL_DMA_Abort_IT>
 8106b22:	4603      	mov	r3, r0
 8106b24:	2b00      	cmp	r3, #0
 8106b26:	d011      	beq.n	8106b4c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b2e:	687a      	ldr	r2, [r7, #4]
 8106b30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8106b32:	4610      	mov	r0, r2
 8106b34:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8106b36:	e009      	b.n	8106b4c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8106b38:	6878      	ldr	r0, [r7, #4]
 8106b3a:	f000 f813 	bl	8106b64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8106b3e:	e005      	b.n	8106b4c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8106b40:	6878      	ldr	r0, [r7, #4]
 8106b42:	f000 f80f 	bl	8106b64 <I2C_TreatErrorCallback>
  }
}
 8106b46:	e002      	b.n	8106b4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8106b48:	bf00      	nop
 8106b4a:	e000      	b.n	8106b4e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8106b4c:	bf00      	nop
}
 8106b4e:	bf00      	nop
 8106b50:	3710      	adds	r7, #16
 8106b52:	46bd      	mov	sp, r7
 8106b54:	bd80      	pop	{r7, pc}
 8106b56:	bf00      	nop
 8106b58:	ffff0000 	.word	0xffff0000
 8106b5c:	0810554f 	.word	0x0810554f
 8106b60:	08106f05 	.word	0x08106f05

08106b64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8106b64:	b580      	push	{r7, lr}
 8106b66:	b082      	sub	sp, #8
 8106b68:	af00      	add	r7, sp, #0
 8106b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106b72:	b2db      	uxtb	r3, r3
 8106b74:	2b60      	cmp	r3, #96	@ 0x60
 8106b76:	d10e      	bne.n	8106b96 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	2220      	movs	r2, #32
 8106b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	2200      	movs	r2, #0
 8106b84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	2200      	movs	r2, #0
 8106b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8106b8e:	6878      	ldr	r0, [r7, #4]
 8106b90:	f7fe fcd3 	bl	810553a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8106b94:	e009      	b.n	8106baa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	2200      	movs	r2, #0
 8106b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	2200      	movs	r2, #0
 8106ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8106ba4:	6878      	ldr	r0, [r7, #4]
 8106ba6:	f7fe fcbe 	bl	8105526 <HAL_I2C_ErrorCallback>
}
 8106baa:	bf00      	nop
 8106bac:	3708      	adds	r7, #8
 8106bae:	46bd      	mov	sp, r7
 8106bb0:	bd80      	pop	{r7, pc}

08106bb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8106bb2:	b480      	push	{r7}
 8106bb4:	b083      	sub	sp, #12
 8106bb6:	af00      	add	r7, sp, #0
 8106bb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	681b      	ldr	r3, [r3, #0]
 8106bbe:	699b      	ldr	r3, [r3, #24]
 8106bc0:	f003 0302 	and.w	r3, r3, #2
 8106bc4:	2b02      	cmp	r3, #2
 8106bc6:	d103      	bne.n	8106bd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	2200      	movs	r2, #0
 8106bce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	699b      	ldr	r3, [r3, #24]
 8106bd6:	f003 0301 	and.w	r3, r3, #1
 8106bda:	2b01      	cmp	r3, #1
 8106bdc:	d007      	beq.n	8106bee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	699a      	ldr	r2, [r3, #24]
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f042 0201 	orr.w	r2, r2, #1
 8106bec:	619a      	str	r2, [r3, #24]
  }
}
 8106bee:	bf00      	nop
 8106bf0:	370c      	adds	r7, #12
 8106bf2:	46bd      	mov	sp, r7
 8106bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bf8:	4770      	bx	lr

08106bfa <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8106bfa:	b580      	push	{r7, lr}
 8106bfc:	b084      	sub	sp, #16
 8106bfe:	af00      	add	r7, sp, #0
 8106c00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106c06:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8106c08:	68fb      	ldr	r3, [r7, #12]
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	681a      	ldr	r2, [r3, #0]
 8106c0e:	68fb      	ldr	r3, [r7, #12]
 8106c10:	681b      	ldr	r3, [r3, #0]
 8106c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106c16:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106c1c:	b29b      	uxth	r3, r3
 8106c1e:	2b00      	cmp	r3, #0
 8106c20:	d104      	bne.n	8106c2c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8106c22:	2120      	movs	r1, #32
 8106c24:	68f8      	ldr	r0, [r7, #12]
 8106c26:	f000 fb81 	bl	810732c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8106c2a:	e02d      	b.n	8106c88 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8106c2c:	68fb      	ldr	r3, [r7, #12]
 8106c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c30:	68fa      	ldr	r2, [r7, #12]
 8106c32:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8106c34:	441a      	add	r2, r3
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106c3a:	68fb      	ldr	r3, [r7, #12]
 8106c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106c3e:	b29b      	uxth	r3, r3
 8106c40:	2bff      	cmp	r3, #255	@ 0xff
 8106c42:	d903      	bls.n	8106c4c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106c44:	68fb      	ldr	r3, [r7, #12]
 8106c46:	22ff      	movs	r2, #255	@ 0xff
 8106c48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8106c4a:	e004      	b.n	8106c56 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8106c4c:	68fb      	ldr	r3, [r7, #12]
 8106c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106c50:	b29a      	uxth	r2, r3
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8106c56:	68fb      	ldr	r3, [r7, #12]
 8106c58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	681b      	ldr	r3, [r3, #0]
 8106c5e:	3324      	adds	r3, #36	@ 0x24
 8106c60:	4619      	mov	r1, r3
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c66:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8106c68:	68fb      	ldr	r3, [r7, #12]
 8106c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8106c6c:	f7fb fdf2 	bl	8102854 <HAL_DMA_Start_IT>
 8106c70:	4603      	mov	r3, r0
 8106c72:	2b00      	cmp	r3, #0
 8106c74:	d004      	beq.n	8106c80 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8106c76:	2110      	movs	r1, #16
 8106c78:	68f8      	ldr	r0, [r7, #12]
 8106c7a:	f7ff fe83 	bl	8106984 <I2C_ITError>
}
 8106c7e:	e003      	b.n	8106c88 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8106c80:	2140      	movs	r1, #64	@ 0x40
 8106c82:	68f8      	ldr	r0, [r7, #12]
 8106c84:	f000 fb52 	bl	810732c <I2C_Enable_IRQ>
}
 8106c88:	bf00      	nop
 8106c8a:	3710      	adds	r7, #16
 8106c8c:	46bd      	mov	sp, r7
 8106c8e:	bd80      	pop	{r7, pc}

08106c90 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8106c90:	b580      	push	{r7, lr}
 8106c92:	b084      	sub	sp, #16
 8106c94:	af00      	add	r7, sp, #0
 8106c96:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8106c98:	2300      	movs	r3, #0
 8106c9a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ca0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8106ca2:	68bb      	ldr	r3, [r7, #8]
 8106ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ca6:	2b00      	cmp	r3, #0
 8106ca8:	d076      	beq.n	8106d98 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8106caa:	68bb      	ldr	r3, [r7, #8]
 8106cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cae:	681b      	ldr	r3, [r3, #0]
 8106cb0:	4a71      	ldr	r2, [pc, #452]	@ (8106e78 <I2C_DMAError+0x1e8>)
 8106cb2:	4293      	cmp	r3, r2
 8106cb4:	d059      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cb6:	68bb      	ldr	r3, [r7, #8]
 8106cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8106e7c <I2C_DMAError+0x1ec>)
 8106cbe:	4293      	cmp	r3, r2
 8106cc0:	d053      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cc2:	68bb      	ldr	r3, [r7, #8]
 8106cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8106e80 <I2C_DMAError+0x1f0>)
 8106cca:	4293      	cmp	r3, r2
 8106ccc:	d04d      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cce:	68bb      	ldr	r3, [r7, #8]
 8106cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cd2:	681b      	ldr	r3, [r3, #0]
 8106cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8106e84 <I2C_DMAError+0x1f4>)
 8106cd6:	4293      	cmp	r3, r2
 8106cd8:	d047      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cda:	68bb      	ldr	r3, [r7, #8]
 8106cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	4a69      	ldr	r2, [pc, #420]	@ (8106e88 <I2C_DMAError+0x1f8>)
 8106ce2:	4293      	cmp	r3, r2
 8106ce4:	d041      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106ce6:	68bb      	ldr	r3, [r7, #8]
 8106ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	4a67      	ldr	r2, [pc, #412]	@ (8106e8c <I2C_DMAError+0x1fc>)
 8106cee:	4293      	cmp	r3, r2
 8106cf0:	d03b      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cf2:	68bb      	ldr	r3, [r7, #8]
 8106cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cf6:	681b      	ldr	r3, [r3, #0]
 8106cf8:	4a65      	ldr	r2, [pc, #404]	@ (8106e90 <I2C_DMAError+0x200>)
 8106cfa:	4293      	cmp	r3, r2
 8106cfc:	d035      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106cfe:	68bb      	ldr	r3, [r7, #8]
 8106d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	4a63      	ldr	r2, [pc, #396]	@ (8106e94 <I2C_DMAError+0x204>)
 8106d06:	4293      	cmp	r3, r2
 8106d08:	d02f      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d0a:	68bb      	ldr	r3, [r7, #8]
 8106d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	4a61      	ldr	r2, [pc, #388]	@ (8106e98 <I2C_DMAError+0x208>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d029      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d16:	68bb      	ldr	r3, [r7, #8]
 8106d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d1a:	681b      	ldr	r3, [r3, #0]
 8106d1c:	4a5f      	ldr	r2, [pc, #380]	@ (8106e9c <I2C_DMAError+0x20c>)
 8106d1e:	4293      	cmp	r3, r2
 8106d20:	d023      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d22:	68bb      	ldr	r3, [r7, #8]
 8106d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d26:	681b      	ldr	r3, [r3, #0]
 8106d28:	4a5d      	ldr	r2, [pc, #372]	@ (8106ea0 <I2C_DMAError+0x210>)
 8106d2a:	4293      	cmp	r3, r2
 8106d2c:	d01d      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d2e:	68bb      	ldr	r3, [r7, #8]
 8106d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	4a5b      	ldr	r2, [pc, #364]	@ (8106ea4 <I2C_DMAError+0x214>)
 8106d36:	4293      	cmp	r3, r2
 8106d38:	d017      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d3a:	68bb      	ldr	r3, [r7, #8]
 8106d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	4a59      	ldr	r2, [pc, #356]	@ (8106ea8 <I2C_DMAError+0x218>)
 8106d42:	4293      	cmp	r3, r2
 8106d44:	d011      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d46:	68bb      	ldr	r3, [r7, #8]
 8106d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	4a57      	ldr	r2, [pc, #348]	@ (8106eac <I2C_DMAError+0x21c>)
 8106d4e:	4293      	cmp	r3, r2
 8106d50:	d00b      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d52:	68bb      	ldr	r3, [r7, #8]
 8106d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d56:	681b      	ldr	r3, [r3, #0]
 8106d58:	4a55      	ldr	r2, [pc, #340]	@ (8106eb0 <I2C_DMAError+0x220>)
 8106d5a:	4293      	cmp	r3, r2
 8106d5c:	d005      	beq.n	8106d6a <I2C_DMAError+0xda>
 8106d5e:	68bb      	ldr	r3, [r7, #8]
 8106d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d62:	681b      	ldr	r3, [r3, #0]
 8106d64:	4a53      	ldr	r2, [pc, #332]	@ (8106eb4 <I2C_DMAError+0x224>)
 8106d66:	4293      	cmp	r3, r2
 8106d68:	d109      	bne.n	8106d7e <I2C_DMAError+0xee>
 8106d6a:	68bb      	ldr	r3, [r7, #8]
 8106d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	685b      	ldr	r3, [r3, #4]
 8106d72:	2b00      	cmp	r3, #0
 8106d74:	bf0c      	ite	eq
 8106d76:	2301      	moveq	r3, #1
 8106d78:	2300      	movne	r3, #0
 8106d7a:	b2db      	uxtb	r3, r3
 8106d7c:	e008      	b.n	8106d90 <I2C_DMAError+0x100>
 8106d7e:	68bb      	ldr	r3, [r7, #8]
 8106d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	685b      	ldr	r3, [r3, #4]
 8106d86:	2b00      	cmp	r3, #0
 8106d88:	bf0c      	ite	eq
 8106d8a:	2301      	moveq	r3, #1
 8106d8c:	2300      	movne	r3, #0
 8106d8e:	b2db      	uxtb	r3, r3
 8106d90:	2b00      	cmp	r3, #0
 8106d92:	d001      	beq.n	8106d98 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8106d94:	2301      	movs	r3, #1
 8106d96:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8106d98:	68bb      	ldr	r3, [r7, #8]
 8106d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106d9c:	2b00      	cmp	r3, #0
 8106d9e:	f000 8098 	beq.w	8106ed2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8106da2:	68bb      	ldr	r3, [r7, #8]
 8106da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106da6:	681b      	ldr	r3, [r3, #0]
 8106da8:	4a33      	ldr	r2, [pc, #204]	@ (8106e78 <I2C_DMAError+0x1e8>)
 8106daa:	4293      	cmp	r3, r2
 8106dac:	d059      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dae:	68bb      	ldr	r3, [r7, #8]
 8106db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	4a31      	ldr	r2, [pc, #196]	@ (8106e7c <I2C_DMAError+0x1ec>)
 8106db6:	4293      	cmp	r3, r2
 8106db8:	d053      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dba:	68bb      	ldr	r3, [r7, #8]
 8106dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106dbe:	681b      	ldr	r3, [r3, #0]
 8106dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8106e80 <I2C_DMAError+0x1f0>)
 8106dc2:	4293      	cmp	r3, r2
 8106dc4:	d04d      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dc6:	68bb      	ldr	r3, [r7, #8]
 8106dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106dca:	681b      	ldr	r3, [r3, #0]
 8106dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8106e84 <I2C_DMAError+0x1f4>)
 8106dce:	4293      	cmp	r3, r2
 8106dd0:	d047      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dd2:	68bb      	ldr	r3, [r7, #8]
 8106dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106dd6:	681b      	ldr	r3, [r3, #0]
 8106dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8106e88 <I2C_DMAError+0x1f8>)
 8106dda:	4293      	cmp	r3, r2
 8106ddc:	d041      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dde:	68bb      	ldr	r3, [r7, #8]
 8106de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106de2:	681b      	ldr	r3, [r3, #0]
 8106de4:	4a29      	ldr	r2, [pc, #164]	@ (8106e8c <I2C_DMAError+0x1fc>)
 8106de6:	4293      	cmp	r3, r2
 8106de8:	d03b      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106dea:	68bb      	ldr	r3, [r7, #8]
 8106dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	4a27      	ldr	r2, [pc, #156]	@ (8106e90 <I2C_DMAError+0x200>)
 8106df2:	4293      	cmp	r3, r2
 8106df4:	d035      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106df6:	68bb      	ldr	r3, [r7, #8]
 8106df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106dfa:	681b      	ldr	r3, [r3, #0]
 8106dfc:	4a25      	ldr	r2, [pc, #148]	@ (8106e94 <I2C_DMAError+0x204>)
 8106dfe:	4293      	cmp	r3, r2
 8106e00:	d02f      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e02:	68bb      	ldr	r3, [r7, #8]
 8106e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	4a23      	ldr	r2, [pc, #140]	@ (8106e98 <I2C_DMAError+0x208>)
 8106e0a:	4293      	cmp	r3, r2
 8106e0c:	d029      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e0e:	68bb      	ldr	r3, [r7, #8]
 8106e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e12:	681b      	ldr	r3, [r3, #0]
 8106e14:	4a21      	ldr	r2, [pc, #132]	@ (8106e9c <I2C_DMAError+0x20c>)
 8106e16:	4293      	cmp	r3, r2
 8106e18:	d023      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e1a:	68bb      	ldr	r3, [r7, #8]
 8106e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e1e:	681b      	ldr	r3, [r3, #0]
 8106e20:	4a1f      	ldr	r2, [pc, #124]	@ (8106ea0 <I2C_DMAError+0x210>)
 8106e22:	4293      	cmp	r3, r2
 8106e24:	d01d      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e26:	68bb      	ldr	r3, [r7, #8]
 8106e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8106ea4 <I2C_DMAError+0x214>)
 8106e2e:	4293      	cmp	r3, r2
 8106e30:	d017      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e32:	68bb      	ldr	r3, [r7, #8]
 8106e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	4a1b      	ldr	r2, [pc, #108]	@ (8106ea8 <I2C_DMAError+0x218>)
 8106e3a:	4293      	cmp	r3, r2
 8106e3c:	d011      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e3e:	68bb      	ldr	r3, [r7, #8]
 8106e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e42:	681b      	ldr	r3, [r3, #0]
 8106e44:	4a19      	ldr	r2, [pc, #100]	@ (8106eac <I2C_DMAError+0x21c>)
 8106e46:	4293      	cmp	r3, r2
 8106e48:	d00b      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e4a:	68bb      	ldr	r3, [r7, #8]
 8106e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e4e:	681b      	ldr	r3, [r3, #0]
 8106e50:	4a17      	ldr	r2, [pc, #92]	@ (8106eb0 <I2C_DMAError+0x220>)
 8106e52:	4293      	cmp	r3, r2
 8106e54:	d005      	beq.n	8106e62 <I2C_DMAError+0x1d2>
 8106e56:	68bb      	ldr	r3, [r7, #8]
 8106e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	4a15      	ldr	r2, [pc, #84]	@ (8106eb4 <I2C_DMAError+0x224>)
 8106e5e:	4293      	cmp	r3, r2
 8106e60:	d12a      	bne.n	8106eb8 <I2C_DMAError+0x228>
 8106e62:	68bb      	ldr	r3, [r7, #8]
 8106e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e66:	681b      	ldr	r3, [r3, #0]
 8106e68:	685b      	ldr	r3, [r3, #4]
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	bf0c      	ite	eq
 8106e6e:	2301      	moveq	r3, #1
 8106e70:	2300      	movne	r3, #0
 8106e72:	b2db      	uxtb	r3, r3
 8106e74:	e029      	b.n	8106eca <I2C_DMAError+0x23a>
 8106e76:	bf00      	nop
 8106e78:	40020010 	.word	0x40020010
 8106e7c:	40020028 	.word	0x40020028
 8106e80:	40020040 	.word	0x40020040
 8106e84:	40020058 	.word	0x40020058
 8106e88:	40020070 	.word	0x40020070
 8106e8c:	40020088 	.word	0x40020088
 8106e90:	400200a0 	.word	0x400200a0
 8106e94:	400200b8 	.word	0x400200b8
 8106e98:	40020410 	.word	0x40020410
 8106e9c:	40020428 	.word	0x40020428
 8106ea0:	40020440 	.word	0x40020440
 8106ea4:	40020458 	.word	0x40020458
 8106ea8:	40020470 	.word	0x40020470
 8106eac:	40020488 	.word	0x40020488
 8106eb0:	400204a0 	.word	0x400204a0
 8106eb4:	400204b8 	.word	0x400204b8
 8106eb8:	68bb      	ldr	r3, [r7, #8]
 8106eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106ebc:	681b      	ldr	r3, [r3, #0]
 8106ebe:	685b      	ldr	r3, [r3, #4]
 8106ec0:	2b00      	cmp	r3, #0
 8106ec2:	bf0c      	ite	eq
 8106ec4:	2301      	moveq	r3, #1
 8106ec6:	2300      	movne	r3, #0
 8106ec8:	b2db      	uxtb	r3, r3
 8106eca:	2b00      	cmp	r3, #0
 8106ecc:	d001      	beq.n	8106ed2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8106ece:	2301      	movs	r3, #1
 8106ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8106ed2:	6878      	ldr	r0, [r7, #4]
 8106ed4:	f7fd f8a6 	bl	8104024 <HAL_DMA_GetError>
 8106ed8:	4603      	mov	r3, r0
 8106eda:	2b02      	cmp	r3, #2
 8106edc:	d00e      	beq.n	8106efc <I2C_DMAError+0x26c>
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	d00b      	beq.n	8106efc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8106ee4:	68bb      	ldr	r3, [r7, #8]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	685a      	ldr	r2, [r3, #4]
 8106eea:	68bb      	ldr	r3, [r7, #8]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8106ef2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8106ef4:	2110      	movs	r1, #16
 8106ef6:	68b8      	ldr	r0, [r7, #8]
 8106ef8:	f7ff fd44 	bl	8106984 <I2C_ITError>
  }
}
 8106efc:	bf00      	nop
 8106efe:	3710      	adds	r7, #16
 8106f00:	46bd      	mov	sp, r7
 8106f02:	bd80      	pop	{r7, pc}

08106f04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8106f04:	b580      	push	{r7, lr}
 8106f06:	b084      	sub	sp, #16
 8106f08:	af00      	add	r7, sp, #0
 8106f0a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f10:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f16:	2b00      	cmp	r3, #0
 8106f18:	d003      	beq.n	8106f22 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8106f1a:	68fb      	ldr	r3, [r7, #12]
 8106f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f1e:	2200      	movs	r2, #0
 8106f20:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8106f22:	68fb      	ldr	r3, [r7, #12]
 8106f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	d003      	beq.n	8106f32 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8106f2a:	68fb      	ldr	r3, [r7, #12]
 8106f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106f2e:	2200      	movs	r2, #0
 8106f30:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8106f32:	68f8      	ldr	r0, [r7, #12]
 8106f34:	f7ff fe16 	bl	8106b64 <I2C_TreatErrorCallback>
}
 8106f38:	bf00      	nop
 8106f3a:	3710      	adds	r7, #16
 8106f3c:	46bd      	mov	sp, r7
 8106f3e:	bd80      	pop	{r7, pc}

08106f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8106f40:	b580      	push	{r7, lr}
 8106f42:	b084      	sub	sp, #16
 8106f44:	af00      	add	r7, sp, #0
 8106f46:	60f8      	str	r0, [r7, #12]
 8106f48:	60b9      	str	r1, [r7, #8]
 8106f4a:	603b      	str	r3, [r7, #0]
 8106f4c:	4613      	mov	r3, r2
 8106f4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8106f50:	e03b      	b.n	8106fca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8106f52:	69ba      	ldr	r2, [r7, #24]
 8106f54:	6839      	ldr	r1, [r7, #0]
 8106f56:	68f8      	ldr	r0, [r7, #12]
 8106f58:	f000 f8d6 	bl	8107108 <I2C_IsErrorOccurred>
 8106f5c:	4603      	mov	r3, r0
 8106f5e:	2b00      	cmp	r3, #0
 8106f60:	d001      	beq.n	8106f66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8106f62:	2301      	movs	r3, #1
 8106f64:	e041      	b.n	8106fea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106f66:	683b      	ldr	r3, [r7, #0]
 8106f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106f6c:	d02d      	beq.n	8106fca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106f6e:	f7fa ffa9 	bl	8101ec4 <HAL_GetTick>
 8106f72:	4602      	mov	r2, r0
 8106f74:	69bb      	ldr	r3, [r7, #24]
 8106f76:	1ad3      	subs	r3, r2, r3
 8106f78:	683a      	ldr	r2, [r7, #0]
 8106f7a:	429a      	cmp	r2, r3
 8106f7c:	d302      	bcc.n	8106f84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8106f7e:	683b      	ldr	r3, [r7, #0]
 8106f80:	2b00      	cmp	r3, #0
 8106f82:	d122      	bne.n	8106fca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	699a      	ldr	r2, [r3, #24]
 8106f8a:	68bb      	ldr	r3, [r7, #8]
 8106f8c:	4013      	ands	r3, r2
 8106f8e:	68ba      	ldr	r2, [r7, #8]
 8106f90:	429a      	cmp	r2, r3
 8106f92:	bf0c      	ite	eq
 8106f94:	2301      	moveq	r3, #1
 8106f96:	2300      	movne	r3, #0
 8106f98:	b2db      	uxtb	r3, r3
 8106f9a:	461a      	mov	r2, r3
 8106f9c:	79fb      	ldrb	r3, [r7, #7]
 8106f9e:	429a      	cmp	r2, r3
 8106fa0:	d113      	bne.n	8106fca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106fa2:	68fb      	ldr	r3, [r7, #12]
 8106fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106fa6:	f043 0220 	orr.w	r2, r3, #32
 8106faa:	68fb      	ldr	r3, [r7, #12]
 8106fac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	2220      	movs	r2, #32
 8106fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8106fb6:	68fb      	ldr	r3, [r7, #12]
 8106fb8:	2200      	movs	r2, #0
 8106fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	2200      	movs	r2, #0
 8106fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8106fc6:	2301      	movs	r3, #1
 8106fc8:	e00f      	b.n	8106fea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8106fca:	68fb      	ldr	r3, [r7, #12]
 8106fcc:	681b      	ldr	r3, [r3, #0]
 8106fce:	699a      	ldr	r2, [r3, #24]
 8106fd0:	68bb      	ldr	r3, [r7, #8]
 8106fd2:	4013      	ands	r3, r2
 8106fd4:	68ba      	ldr	r2, [r7, #8]
 8106fd6:	429a      	cmp	r2, r3
 8106fd8:	bf0c      	ite	eq
 8106fda:	2301      	moveq	r3, #1
 8106fdc:	2300      	movne	r3, #0
 8106fde:	b2db      	uxtb	r3, r3
 8106fe0:	461a      	mov	r2, r3
 8106fe2:	79fb      	ldrb	r3, [r7, #7]
 8106fe4:	429a      	cmp	r2, r3
 8106fe6:	d0b4      	beq.n	8106f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106fe8:	2300      	movs	r3, #0
}
 8106fea:	4618      	mov	r0, r3
 8106fec:	3710      	adds	r7, #16
 8106fee:	46bd      	mov	sp, r7
 8106ff0:	bd80      	pop	{r7, pc}

08106ff2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8106ff2:	b580      	push	{r7, lr}
 8106ff4:	b084      	sub	sp, #16
 8106ff6:	af00      	add	r7, sp, #0
 8106ff8:	60f8      	str	r0, [r7, #12]
 8106ffa:	60b9      	str	r1, [r7, #8]
 8106ffc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106ffe:	e033      	b.n	8107068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8107000:	687a      	ldr	r2, [r7, #4]
 8107002:	68b9      	ldr	r1, [r7, #8]
 8107004:	68f8      	ldr	r0, [r7, #12]
 8107006:	f000 f87f 	bl	8107108 <I2C_IsErrorOccurred>
 810700a:	4603      	mov	r3, r0
 810700c:	2b00      	cmp	r3, #0
 810700e:	d001      	beq.n	8107014 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107010:	2301      	movs	r3, #1
 8107012:	e031      	b.n	8107078 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107014:	68bb      	ldr	r3, [r7, #8]
 8107016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810701a:	d025      	beq.n	8107068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810701c:	f7fa ff52 	bl	8101ec4 <HAL_GetTick>
 8107020:	4602      	mov	r2, r0
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	1ad3      	subs	r3, r2, r3
 8107026:	68ba      	ldr	r2, [r7, #8]
 8107028:	429a      	cmp	r2, r3
 810702a:	d302      	bcc.n	8107032 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810702c:	68bb      	ldr	r3, [r7, #8]
 810702e:	2b00      	cmp	r3, #0
 8107030:	d11a      	bne.n	8107068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8107032:	68fb      	ldr	r3, [r7, #12]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	699b      	ldr	r3, [r3, #24]
 8107038:	f003 0302 	and.w	r3, r3, #2
 810703c:	2b02      	cmp	r3, #2
 810703e:	d013      	beq.n	8107068 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107040:	68fb      	ldr	r3, [r7, #12]
 8107042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107044:	f043 0220 	orr.w	r2, r3, #32
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810704c:	68fb      	ldr	r3, [r7, #12]
 810704e:	2220      	movs	r2, #32
 8107050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8107054:	68fb      	ldr	r3, [r7, #12]
 8107056:	2200      	movs	r2, #0
 8107058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810705c:	68fb      	ldr	r3, [r7, #12]
 810705e:	2200      	movs	r2, #0
 8107060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8107064:	2301      	movs	r3, #1
 8107066:	e007      	b.n	8107078 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107068:	68fb      	ldr	r3, [r7, #12]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	699b      	ldr	r3, [r3, #24]
 810706e:	f003 0302 	and.w	r3, r3, #2
 8107072:	2b02      	cmp	r3, #2
 8107074:	d1c4      	bne.n	8107000 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8107076:	2300      	movs	r3, #0
}
 8107078:	4618      	mov	r0, r3
 810707a:	3710      	adds	r7, #16
 810707c:	46bd      	mov	sp, r7
 810707e:	bd80      	pop	{r7, pc}

08107080 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8107080:	b580      	push	{r7, lr}
 8107082:	b084      	sub	sp, #16
 8107084:	af00      	add	r7, sp, #0
 8107086:	60f8      	str	r0, [r7, #12]
 8107088:	60b9      	str	r1, [r7, #8]
 810708a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810708c:	e02f      	b.n	81070ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810708e:	687a      	ldr	r2, [r7, #4]
 8107090:	68b9      	ldr	r1, [r7, #8]
 8107092:	68f8      	ldr	r0, [r7, #12]
 8107094:	f000 f838 	bl	8107108 <I2C_IsErrorOccurred>
 8107098:	4603      	mov	r3, r0
 810709a:	2b00      	cmp	r3, #0
 810709c:	d001      	beq.n	81070a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810709e:	2301      	movs	r3, #1
 81070a0:	e02d      	b.n	81070fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81070a2:	f7fa ff0f 	bl	8101ec4 <HAL_GetTick>
 81070a6:	4602      	mov	r2, r0
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	1ad3      	subs	r3, r2, r3
 81070ac:	68ba      	ldr	r2, [r7, #8]
 81070ae:	429a      	cmp	r2, r3
 81070b0:	d302      	bcc.n	81070b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81070b2:	68bb      	ldr	r3, [r7, #8]
 81070b4:	2b00      	cmp	r3, #0
 81070b6:	d11a      	bne.n	81070ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81070b8:	68fb      	ldr	r3, [r7, #12]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	699b      	ldr	r3, [r3, #24]
 81070be:	f003 0320 	and.w	r3, r3, #32
 81070c2:	2b20      	cmp	r3, #32
 81070c4:	d013      	beq.n	81070ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81070c6:	68fb      	ldr	r3, [r7, #12]
 81070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81070ca:	f043 0220 	orr.w	r2, r3, #32
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81070d2:	68fb      	ldr	r3, [r7, #12]
 81070d4:	2220      	movs	r2, #32
 81070d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81070da:	68fb      	ldr	r3, [r7, #12]
 81070dc:	2200      	movs	r2, #0
 81070de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	2200      	movs	r2, #0
 81070e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81070ea:	2301      	movs	r3, #1
 81070ec:	e007      	b.n	81070fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	699b      	ldr	r3, [r3, #24]
 81070f4:	f003 0320 	and.w	r3, r3, #32
 81070f8:	2b20      	cmp	r3, #32
 81070fa:	d1c8      	bne.n	810708e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81070fc:	2300      	movs	r3, #0
}
 81070fe:	4618      	mov	r0, r3
 8107100:	3710      	adds	r7, #16
 8107102:	46bd      	mov	sp, r7
 8107104:	bd80      	pop	{r7, pc}
	...

08107108 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107108:	b580      	push	{r7, lr}
 810710a:	b08a      	sub	sp, #40	@ 0x28
 810710c:	af00      	add	r7, sp, #0
 810710e:	60f8      	str	r0, [r7, #12]
 8107110:	60b9      	str	r1, [r7, #8]
 8107112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107114:	2300      	movs	r3, #0
 8107116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810711a:	68fb      	ldr	r3, [r7, #12]
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	699b      	ldr	r3, [r3, #24]
 8107120:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8107122:	2300      	movs	r3, #0
 8107124:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810712a:	69bb      	ldr	r3, [r7, #24]
 810712c:	f003 0310 	and.w	r3, r3, #16
 8107130:	2b00      	cmp	r3, #0
 8107132:	d068      	beq.n	8107206 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107134:	68fb      	ldr	r3, [r7, #12]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	2210      	movs	r2, #16
 810713a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810713c:	e049      	b.n	81071d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810713e:	68bb      	ldr	r3, [r7, #8]
 8107140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8107144:	d045      	beq.n	81071d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8107146:	f7fa febd 	bl	8101ec4 <HAL_GetTick>
 810714a:	4602      	mov	r2, r0
 810714c:	69fb      	ldr	r3, [r7, #28]
 810714e:	1ad3      	subs	r3, r2, r3
 8107150:	68ba      	ldr	r2, [r7, #8]
 8107152:	429a      	cmp	r2, r3
 8107154:	d302      	bcc.n	810715c <I2C_IsErrorOccurred+0x54>
 8107156:	68bb      	ldr	r3, [r7, #8]
 8107158:	2b00      	cmp	r3, #0
 810715a:	d13a      	bne.n	81071d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	681b      	ldr	r3, [r3, #0]
 8107160:	685b      	ldr	r3, [r3, #4]
 8107162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107166:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8107168:	68fb      	ldr	r3, [r7, #12]
 810716a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810716e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	699b      	ldr	r3, [r3, #24]
 8107176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810717a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810717e:	d121      	bne.n	81071c4 <I2C_IsErrorOccurred+0xbc>
 8107180:	697b      	ldr	r3, [r7, #20]
 8107182:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107186:	d01d      	beq.n	81071c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8107188:	7cfb      	ldrb	r3, [r7, #19]
 810718a:	2b20      	cmp	r3, #32
 810718c:	d01a      	beq.n	81071c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	685a      	ldr	r2, [r3, #4]
 8107194:	68fb      	ldr	r3, [r7, #12]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810719c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810719e:	f7fa fe91 	bl	8101ec4 <HAL_GetTick>
 81071a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81071a4:	e00e      	b.n	81071c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81071a6:	f7fa fe8d 	bl	8101ec4 <HAL_GetTick>
 81071aa:	4602      	mov	r2, r0
 81071ac:	69fb      	ldr	r3, [r7, #28]
 81071ae:	1ad3      	subs	r3, r2, r3
 81071b0:	2b19      	cmp	r3, #25
 81071b2:	d907      	bls.n	81071c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 81071b4:	6a3b      	ldr	r3, [r7, #32]
 81071b6:	f043 0320 	orr.w	r3, r3, #32
 81071ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 81071bc:	2301      	movs	r3, #1
 81071be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 81071c2:	e006      	b.n	81071d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81071c4:	68fb      	ldr	r3, [r7, #12]
 81071c6:	681b      	ldr	r3, [r3, #0]
 81071c8:	699b      	ldr	r3, [r3, #24]
 81071ca:	f003 0320 	and.w	r3, r3, #32
 81071ce:	2b20      	cmp	r3, #32
 81071d0:	d1e9      	bne.n	81071a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	699b      	ldr	r3, [r3, #24]
 81071d8:	f003 0320 	and.w	r3, r3, #32
 81071dc:	2b20      	cmp	r3, #32
 81071de:	d003      	beq.n	81071e8 <I2C_IsErrorOccurred+0xe0>
 81071e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81071e4:	2b00      	cmp	r3, #0
 81071e6:	d0aa      	beq.n	810713e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81071e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81071ec:	2b00      	cmp	r3, #0
 81071ee:	d103      	bne.n	81071f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81071f0:	68fb      	ldr	r3, [r7, #12]
 81071f2:	681b      	ldr	r3, [r3, #0]
 81071f4:	2220      	movs	r2, #32
 81071f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81071f8:	6a3b      	ldr	r3, [r7, #32]
 81071fa:	f043 0304 	orr.w	r3, r3, #4
 81071fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8107200:	2301      	movs	r3, #1
 8107202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8107206:	68fb      	ldr	r3, [r7, #12]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	699b      	ldr	r3, [r3, #24]
 810720c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810720e:	69bb      	ldr	r3, [r7, #24]
 8107210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107214:	2b00      	cmp	r3, #0
 8107216:	d00b      	beq.n	8107230 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8107218:	6a3b      	ldr	r3, [r7, #32]
 810721a:	f043 0301 	orr.w	r3, r3, #1
 810721e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810722a:	2301      	movs	r3, #1
 810722c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8107230:	69bb      	ldr	r3, [r7, #24]
 8107232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8107236:	2b00      	cmp	r3, #0
 8107238:	d00b      	beq.n	8107252 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810723a:	6a3b      	ldr	r3, [r7, #32]
 810723c:	f043 0308 	orr.w	r3, r3, #8
 8107240:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107242:	68fb      	ldr	r3, [r7, #12]
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810724a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810724c:	2301      	movs	r3, #1
 810724e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8107252:	69bb      	ldr	r3, [r7, #24]
 8107254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107258:	2b00      	cmp	r3, #0
 810725a:	d00b      	beq.n	8107274 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810725c:	6a3b      	ldr	r3, [r7, #32]
 810725e:	f043 0302 	orr.w	r3, r3, #2
 8107262:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	681b      	ldr	r3, [r3, #0]
 8107268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810726c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810726e:	2301      	movs	r3, #1
 8107270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8107274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107278:	2b00      	cmp	r3, #0
 810727a:	d01c      	beq.n	81072b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810727c:	68f8      	ldr	r0, [r7, #12]
 810727e:	f7ff fc98 	bl	8106bb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	681b      	ldr	r3, [r3, #0]
 8107286:	6859      	ldr	r1, [r3, #4]
 8107288:	68fb      	ldr	r3, [r7, #12]
 810728a:	681a      	ldr	r2, [r3, #0]
 810728c:	4b0d      	ldr	r3, [pc, #52]	@ (81072c4 <I2C_IsErrorOccurred+0x1bc>)
 810728e:	400b      	ands	r3, r1
 8107290:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8107292:	68fb      	ldr	r3, [r7, #12]
 8107294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107296:	6a3b      	ldr	r3, [r7, #32]
 8107298:	431a      	orrs	r2, r3
 810729a:	68fb      	ldr	r3, [r7, #12]
 810729c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	2220      	movs	r2, #32
 81072a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	2200      	movs	r2, #0
 81072aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81072ae:	68fb      	ldr	r3, [r7, #12]
 81072b0:	2200      	movs	r2, #0
 81072b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 81072b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 81072ba:	4618      	mov	r0, r3
 81072bc:	3728      	adds	r7, #40	@ 0x28
 81072be:	46bd      	mov	sp, r7
 81072c0:	bd80      	pop	{r7, pc}
 81072c2:	bf00      	nop
 81072c4:	fe00e800 	.word	0xfe00e800

081072c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81072c8:	b480      	push	{r7}
 81072ca:	b087      	sub	sp, #28
 81072cc:	af00      	add	r7, sp, #0
 81072ce:	60f8      	str	r0, [r7, #12]
 81072d0:	607b      	str	r3, [r7, #4]
 81072d2:	460b      	mov	r3, r1
 81072d4:	817b      	strh	r3, [r7, #10]
 81072d6:	4613      	mov	r3, r2
 81072d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81072da:	897b      	ldrh	r3, [r7, #10]
 81072dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81072e0:	7a7b      	ldrb	r3, [r7, #9]
 81072e2:	041b      	lsls	r3, r3, #16
 81072e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81072e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81072ee:	6a3b      	ldr	r3, [r7, #32]
 81072f0:	4313      	orrs	r3, r2
 81072f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81072f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	685a      	ldr	r2, [r3, #4]
 81072fe:	6a3b      	ldr	r3, [r7, #32]
 8107300:	0d5b      	lsrs	r3, r3, #21
 8107302:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8107306:	4b08      	ldr	r3, [pc, #32]	@ (8107328 <I2C_TransferConfig+0x60>)
 8107308:	430b      	orrs	r3, r1
 810730a:	43db      	mvns	r3, r3
 810730c:	ea02 0103 	and.w	r1, r2, r3
 8107310:	68fb      	ldr	r3, [r7, #12]
 8107312:	681b      	ldr	r3, [r3, #0]
 8107314:	697a      	ldr	r2, [r7, #20]
 8107316:	430a      	orrs	r2, r1
 8107318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810731a:	bf00      	nop
 810731c:	371c      	adds	r7, #28
 810731e:	46bd      	mov	sp, r7
 8107320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107324:	4770      	bx	lr
 8107326:	bf00      	nop
 8107328:	03ff63ff 	.word	0x03ff63ff

0810732c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 810732c:	b480      	push	{r7}
 810732e:	b085      	sub	sp, #20
 8107330:	af00      	add	r7, sp, #0
 8107332:	6078      	str	r0, [r7, #4]
 8107334:	460b      	mov	r3, r1
 8107336:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8107338:	2300      	movs	r3, #0
 810733a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 810733c:	687b      	ldr	r3, [r7, #4]
 810733e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107340:	4a39      	ldr	r2, [pc, #228]	@ (8107428 <I2C_Enable_IRQ+0xfc>)
 8107342:	4293      	cmp	r3, r2
 8107344:	d032      	beq.n	81073ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 810734a:	4a38      	ldr	r2, [pc, #224]	@ (810742c <I2C_Enable_IRQ+0x100>)
 810734c:	4293      	cmp	r3, r2
 810734e:	d02d      	beq.n	81073ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8107354:	4a36      	ldr	r2, [pc, #216]	@ (8107430 <I2C_Enable_IRQ+0x104>)
 8107356:	4293      	cmp	r3, r2
 8107358:	d028      	beq.n	81073ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 810735a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810735e:	2b00      	cmp	r3, #0
 8107360:	da03      	bge.n	810736a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8107368:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 810736a:	887b      	ldrh	r3, [r7, #2]
 810736c:	f003 0301 	and.w	r3, r3, #1
 8107370:	2b00      	cmp	r3, #0
 8107372:	d003      	beq.n	810737c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 810737a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810737c:	887b      	ldrh	r3, [r7, #2]
 810737e:	f003 0302 	and.w	r3, r3, #2
 8107382:	2b00      	cmp	r3, #0
 8107384:	d003      	beq.n	810738e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 810738c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 810738e:	887b      	ldrh	r3, [r7, #2]
 8107390:	2b10      	cmp	r3, #16
 8107392:	d103      	bne.n	810739c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 810739a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 810739c:	887b      	ldrh	r3, [r7, #2]
 810739e:	2b20      	cmp	r3, #32
 81073a0:	d133      	bne.n	810740a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 81073a2:	68fb      	ldr	r3, [r7, #12]
 81073a4:	f043 0320 	orr.w	r3, r3, #32
 81073a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 81073aa:	e02e      	b.n	810740a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 81073ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81073b0:	2b00      	cmp	r3, #0
 81073b2:	da03      	bge.n	81073bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 81073ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 81073bc:	887b      	ldrh	r3, [r7, #2]
 81073be:	f003 0301 	and.w	r3, r3, #1
 81073c2:	2b00      	cmp	r3, #0
 81073c4:	d003      	beq.n	81073ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 81073c6:	68fb      	ldr	r3, [r7, #12]
 81073c8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 81073cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 81073ce:	887b      	ldrh	r3, [r7, #2]
 81073d0:	f003 0302 	and.w	r3, r3, #2
 81073d4:	2b00      	cmp	r3, #0
 81073d6:	d003      	beq.n	81073e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 81073d8:	68fb      	ldr	r3, [r7, #12]
 81073da:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 81073de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 81073e0:	887b      	ldrh	r3, [r7, #2]
 81073e2:	2b10      	cmp	r3, #16
 81073e4:	d103      	bne.n	81073ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 81073ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 81073ee:	887b      	ldrh	r3, [r7, #2]
 81073f0:	2b20      	cmp	r3, #32
 81073f2:	d103      	bne.n	81073fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 81073fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 81073fc:	887b      	ldrh	r3, [r7, #2]
 81073fe:	2b40      	cmp	r3, #64	@ 0x40
 8107400:	d103      	bne.n	810740a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8107402:	68fb      	ldr	r3, [r7, #12]
 8107404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107408:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	6819      	ldr	r1, [r3, #0]
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	68fa      	ldr	r2, [r7, #12]
 8107416:	430a      	orrs	r2, r1
 8107418:	601a      	str	r2, [r3, #0]
}
 810741a:	bf00      	nop
 810741c:	3714      	adds	r7, #20
 810741e:	46bd      	mov	sp, r7
 8107420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107424:	4770      	bx	lr
 8107426:	bf00      	nop
 8107428:	08105741 	.word	0x08105741
 810742c:	08105b65 	.word	0x08105b65
 8107430:	08105919 	.word	0x08105919

08107434 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8107434:	b480      	push	{r7}
 8107436:	b085      	sub	sp, #20
 8107438:	af00      	add	r7, sp, #0
 810743a:	6078      	str	r0, [r7, #4]
 810743c:	460b      	mov	r3, r1
 810743e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8107440:	2300      	movs	r3, #0
 8107442:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8107444:	887b      	ldrh	r3, [r7, #2]
 8107446:	f003 0301 	and.w	r3, r3, #1
 810744a:	2b00      	cmp	r3, #0
 810744c:	d00f      	beq.n	810746e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 810744e:	68fb      	ldr	r3, [r7, #12]
 8107450:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8107454:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107456:	687b      	ldr	r3, [r7, #4]
 8107458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810745c:	b2db      	uxtb	r3, r3
 810745e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8107462:	2b28      	cmp	r3, #40	@ 0x28
 8107464:	d003      	beq.n	810746e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107466:	68fb      	ldr	r3, [r7, #12]
 8107468:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 810746c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810746e:	887b      	ldrh	r3, [r7, #2]
 8107470:	f003 0302 	and.w	r3, r3, #2
 8107474:	2b00      	cmp	r3, #0
 8107476:	d00f      	beq.n	8107498 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 810747e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107486:	b2db      	uxtb	r3, r3
 8107488:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 810748c:	2b28      	cmp	r3, #40	@ 0x28
 810748e:	d003      	beq.n	8107498 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107490:	68fb      	ldr	r3, [r7, #12]
 8107492:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8107496:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8107498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810749c:	2b00      	cmp	r3, #0
 810749e:	da03      	bge.n	81074a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 81074a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 81074a8:	887b      	ldrh	r3, [r7, #2]
 81074aa:	2b10      	cmp	r3, #16
 81074ac:	d103      	bne.n	81074b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81074ae:	68fb      	ldr	r3, [r7, #12]
 81074b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 81074b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 81074b6:	887b      	ldrh	r3, [r7, #2]
 81074b8:	2b20      	cmp	r3, #32
 81074ba:	d103      	bne.n	81074c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 81074bc:	68fb      	ldr	r3, [r7, #12]
 81074be:	f043 0320 	orr.w	r3, r3, #32
 81074c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 81074c4:	887b      	ldrh	r3, [r7, #2]
 81074c6:	2b40      	cmp	r3, #64	@ 0x40
 81074c8:	d103      	bne.n	81074d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 81074ca:	68fb      	ldr	r3, [r7, #12]
 81074cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81074d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	6819      	ldr	r1, [r3, #0]
 81074d8:	68fb      	ldr	r3, [r7, #12]
 81074da:	43da      	mvns	r2, r3
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	400a      	ands	r2, r1
 81074e2:	601a      	str	r2, [r3, #0]
}
 81074e4:	bf00      	nop
 81074e6:	3714      	adds	r7, #20
 81074e8:	46bd      	mov	sp, r7
 81074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ee:	4770      	bx	lr

081074f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81074f0:	b480      	push	{r7}
 81074f2:	b083      	sub	sp, #12
 81074f4:	af00      	add	r7, sp, #0
 81074f6:	6078      	str	r0, [r7, #4]
 81074f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107500:	b2db      	uxtb	r3, r3
 8107502:	2b20      	cmp	r3, #32
 8107504:	d138      	bne.n	8107578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810750c:	2b01      	cmp	r3, #1
 810750e:	d101      	bne.n	8107514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8107510:	2302      	movs	r3, #2
 8107512:	e032      	b.n	810757a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	2201      	movs	r2, #1
 8107518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810751c:	687b      	ldr	r3, [r7, #4]
 810751e:	2224      	movs	r2, #36	@ 0x24
 8107520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	681a      	ldr	r2, [r3, #0]
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	f022 0201 	bic.w	r2, r2, #1
 8107532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	681a      	ldr	r2, [r3, #0]
 810753a:	687b      	ldr	r3, [r7, #4]
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8107542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	6819      	ldr	r1, [r3, #0]
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	681b      	ldr	r3, [r3, #0]
 810754e:	683a      	ldr	r2, [r7, #0]
 8107550:	430a      	orrs	r2, r1
 8107552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	681a      	ldr	r2, [r3, #0]
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	f042 0201 	orr.w	r2, r2, #1
 8107562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	2220      	movs	r2, #32
 8107568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	2200      	movs	r2, #0
 8107570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107574:	2300      	movs	r3, #0
 8107576:	e000      	b.n	810757a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8107578:	2302      	movs	r3, #2
  }
}
 810757a:	4618      	mov	r0, r3
 810757c:	370c      	adds	r7, #12
 810757e:	46bd      	mov	sp, r7
 8107580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107584:	4770      	bx	lr

08107586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8107586:	b480      	push	{r7}
 8107588:	b085      	sub	sp, #20
 810758a:	af00      	add	r7, sp, #0
 810758c:	6078      	str	r0, [r7, #4]
 810758e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107590:	687b      	ldr	r3, [r7, #4]
 8107592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107596:	b2db      	uxtb	r3, r3
 8107598:	2b20      	cmp	r3, #32
 810759a:	d139      	bne.n	8107610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81075a2:	2b01      	cmp	r3, #1
 81075a4:	d101      	bne.n	81075aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81075a6:	2302      	movs	r3, #2
 81075a8:	e033      	b.n	8107612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	2201      	movs	r2, #1
 81075ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	2224      	movs	r2, #36	@ 0x24
 81075b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	681b      	ldr	r3, [r3, #0]
 81075be:	681a      	ldr	r2, [r3, #0]
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	f022 0201 	bic.w	r2, r2, #1
 81075c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81075d2:	68fb      	ldr	r3, [r7, #12]
 81075d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81075d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81075da:	683b      	ldr	r3, [r7, #0]
 81075dc:	021b      	lsls	r3, r3, #8
 81075de:	68fa      	ldr	r2, [r7, #12]
 81075e0:	4313      	orrs	r3, r2
 81075e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	681b      	ldr	r3, [r3, #0]
 81075e8:	68fa      	ldr	r2, [r7, #12]
 81075ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	681a      	ldr	r2, [r3, #0]
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	681b      	ldr	r3, [r3, #0]
 81075f6:	f042 0201 	orr.w	r2, r2, #1
 81075fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	2220      	movs	r2, #32
 8107600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	2200      	movs	r2, #0
 8107608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810760c:	2300      	movs	r3, #0
 810760e:	e000      	b.n	8107612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8107610:	2302      	movs	r3, #2
  }
}
 8107612:	4618      	mov	r0, r3
 8107614:	3714      	adds	r7, #20
 8107616:	46bd      	mov	sp, r7
 8107618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810761c:	4770      	bx	lr
	...

08107620 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107620:	b580      	push	{r7, lr}
 8107622:	b084      	sub	sp, #16
 8107624:	af00      	add	r7, sp, #0
 8107626:	60f8      	str	r0, [r7, #12]
 8107628:	460b      	mov	r3, r1
 810762a:	607a      	str	r2, [r7, #4]
 810762c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810762e:	4b37      	ldr	r3, [pc, #220]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	f023 0201 	bic.w	r2, r3, #1
 8107636:	4935      	ldr	r1, [pc, #212]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 8107638:	68fb      	ldr	r3, [r7, #12]
 810763a:	4313      	orrs	r3, r2
 810763c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	2b00      	cmp	r3, #0
 8107642:	d123      	bne.n	810768c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107644:	f7fa fd98 	bl	8102178 <HAL_GetCurrentCPUID>
 8107648:	4603      	mov	r3, r0
 810764a:	2b03      	cmp	r3, #3
 810764c:	d158      	bne.n	8107700 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810764e:	4b2f      	ldr	r3, [pc, #188]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 8107650:	691b      	ldr	r3, [r3, #16]
 8107652:	4a2e      	ldr	r2, [pc, #184]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 8107654:	f023 0301 	bic.w	r3, r3, #1
 8107658:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810765a:	4b2d      	ldr	r3, [pc, #180]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810765c:	691b      	ldr	r3, [r3, #16]
 810765e:	4a2c      	ldr	r2, [pc, #176]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107660:	f043 0304 	orr.w	r3, r3, #4
 8107664:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107666:	f3bf 8f4f 	dsb	sy
}
 810766a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810766c:	f3bf 8f6f 	isb	sy
}
 8107670:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107672:	7afb      	ldrb	r3, [r7, #11]
 8107674:	2b01      	cmp	r3, #1
 8107676:	d101      	bne.n	810767c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107678:	bf30      	wfi
 810767a:	e000      	b.n	810767e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810767c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810767e:	4b24      	ldr	r3, [pc, #144]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107680:	691b      	ldr	r3, [r3, #16]
 8107682:	4a23      	ldr	r2, [pc, #140]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107684:	f023 0304 	bic.w	r3, r3, #4
 8107688:	6113      	str	r3, [r2, #16]
 810768a:	e03c      	b.n	8107706 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810768c:	687b      	ldr	r3, [r7, #4]
 810768e:	2b01      	cmp	r3, #1
 8107690:	d123      	bne.n	81076da <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107692:	f7fa fd71 	bl	8102178 <HAL_GetCurrentCPUID>
 8107696:	4603      	mov	r3, r0
 8107698:	2b01      	cmp	r3, #1
 810769a:	d133      	bne.n	8107704 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810769c:	4b1b      	ldr	r3, [pc, #108]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 810769e:	695b      	ldr	r3, [r3, #20]
 81076a0:	4a1a      	ldr	r2, [pc, #104]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 81076a2:	f023 0302 	bic.w	r3, r3, #2
 81076a6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81076a8:	4b19      	ldr	r3, [pc, #100]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81076aa:	691b      	ldr	r3, [r3, #16]
 81076ac:	4a18      	ldr	r2, [pc, #96]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81076ae:	f043 0304 	orr.w	r3, r3, #4
 81076b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81076b4:	f3bf 8f4f 	dsb	sy
}
 81076b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81076ba:	f3bf 8f6f 	isb	sy
}
 81076be:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81076c0:	7afb      	ldrb	r3, [r7, #11]
 81076c2:	2b01      	cmp	r3, #1
 81076c4:	d101      	bne.n	81076ca <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81076c6:	bf30      	wfi
 81076c8:	e000      	b.n	81076cc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81076ca:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81076cc:	4b10      	ldr	r3, [pc, #64]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81076ce:	691b      	ldr	r3, [r3, #16]
 81076d0:	4a0f      	ldr	r2, [pc, #60]	@ (8107710 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81076d2:	f023 0304 	bic.w	r3, r3, #4
 81076d6:	6113      	str	r3, [r2, #16]
 81076d8:	e015      	b.n	8107706 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81076da:	f7fa fd4d 	bl	8102178 <HAL_GetCurrentCPUID>
 81076de:	4603      	mov	r3, r0
 81076e0:	2b03      	cmp	r3, #3
 81076e2:	d106      	bne.n	81076f2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81076e4:	4b09      	ldr	r3, [pc, #36]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 81076e6:	691b      	ldr	r3, [r3, #16]
 81076e8:	4a08      	ldr	r2, [pc, #32]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 81076ea:	f023 0304 	bic.w	r3, r3, #4
 81076ee:	6113      	str	r3, [r2, #16]
 81076f0:	e009      	b.n	8107706 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81076f2:	4b06      	ldr	r3, [pc, #24]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 81076f4:	695b      	ldr	r3, [r3, #20]
 81076f6:	4a05      	ldr	r2, [pc, #20]	@ (810770c <HAL_PWREx_EnterSTOPMode+0xec>)
 81076f8:	f023 0304 	bic.w	r3, r3, #4
 81076fc:	6153      	str	r3, [r2, #20]
 81076fe:	e002      	b.n	8107706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107700:	bf00      	nop
 8107702:	e000      	b.n	8107706 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107704:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107706:	3710      	adds	r7, #16
 8107708:	46bd      	mov	sp, r7
 810770a:	bd80      	pop	{r7, pc}
 810770c:	58024800 	.word	0x58024800
 8107710:	e000ed00 	.word	0xe000ed00

08107714 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107714:	b580      	push	{r7, lr}
 8107716:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107718:	f7fa fd2e 	bl	8102178 <HAL_GetCurrentCPUID>
 810771c:	4603      	mov	r3, r0
 810771e:	2b03      	cmp	r3, #3
 8107720:	d101      	bne.n	8107726 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107722:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107724:	e001      	b.n	810772a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107726:	bf40      	sev
    __WFE ();
 8107728:	bf20      	wfe
}
 810772a:	bf00      	nop
 810772c:	bd80      	pop	{r7, pc}
	...

08107730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107730:	b480      	push	{r7}
 8107732:	b089      	sub	sp, #36	@ 0x24
 8107734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107736:	4bb3      	ldr	r3, [pc, #716]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107738:	691b      	ldr	r3, [r3, #16]
 810773a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810773e:	2b18      	cmp	r3, #24
 8107740:	f200 8155 	bhi.w	81079ee <HAL_RCC_GetSysClockFreq+0x2be>
 8107744:	a201      	add	r2, pc, #4	@ (adr r2, 810774c <HAL_RCC_GetSysClockFreq+0x1c>)
 8107746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810774a:	bf00      	nop
 810774c:	081077b1 	.word	0x081077b1
 8107750:	081079ef 	.word	0x081079ef
 8107754:	081079ef 	.word	0x081079ef
 8107758:	081079ef 	.word	0x081079ef
 810775c:	081079ef 	.word	0x081079ef
 8107760:	081079ef 	.word	0x081079ef
 8107764:	081079ef 	.word	0x081079ef
 8107768:	081079ef 	.word	0x081079ef
 810776c:	081077d7 	.word	0x081077d7
 8107770:	081079ef 	.word	0x081079ef
 8107774:	081079ef 	.word	0x081079ef
 8107778:	081079ef 	.word	0x081079ef
 810777c:	081079ef 	.word	0x081079ef
 8107780:	081079ef 	.word	0x081079ef
 8107784:	081079ef 	.word	0x081079ef
 8107788:	081079ef 	.word	0x081079ef
 810778c:	081077dd 	.word	0x081077dd
 8107790:	081079ef 	.word	0x081079ef
 8107794:	081079ef 	.word	0x081079ef
 8107798:	081079ef 	.word	0x081079ef
 810779c:	081079ef 	.word	0x081079ef
 81077a0:	081079ef 	.word	0x081079ef
 81077a4:	081079ef 	.word	0x081079ef
 81077a8:	081079ef 	.word	0x081079ef
 81077ac:	081077e3 	.word	0x081077e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077b0:	4b94      	ldr	r3, [pc, #592]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077b2:	681b      	ldr	r3, [r3, #0]
 81077b4:	f003 0320 	and.w	r3, r3, #32
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	d009      	beq.n	81077d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81077bc:	4b91      	ldr	r3, [pc, #580]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	08db      	lsrs	r3, r3, #3
 81077c2:	f003 0303 	and.w	r3, r3, #3
 81077c6:	4a90      	ldr	r2, [pc, #576]	@ (8107a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81077c8:	fa22 f303 	lsr.w	r3, r2, r3
 81077cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81077ce:	e111      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81077d0:	4b8d      	ldr	r3, [pc, #564]	@ (8107a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81077d2:	61bb      	str	r3, [r7, #24]
      break;
 81077d4:	e10e      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81077d6:	4b8d      	ldr	r3, [pc, #564]	@ (8107a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81077d8:	61bb      	str	r3, [r7, #24]
      break;
 81077da:	e10b      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81077dc:	4b8c      	ldr	r3, [pc, #560]	@ (8107a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81077de:	61bb      	str	r3, [r7, #24]
      break;
 81077e0:	e108      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81077e2:	4b88      	ldr	r3, [pc, #544]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077e6:	f003 0303 	and.w	r3, r3, #3
 81077ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81077ec:	4b85      	ldr	r3, [pc, #532]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077f0:	091b      	lsrs	r3, r3, #4
 81077f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81077f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81077f8:	4b82      	ldr	r3, [pc, #520]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077fc:	f003 0301 	and.w	r3, r3, #1
 8107800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107802:	4b80      	ldr	r3, [pc, #512]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107806:	08db      	lsrs	r3, r3, #3
 8107808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810780c:	68fa      	ldr	r2, [r7, #12]
 810780e:	fb02 f303 	mul.w	r3, r2, r3
 8107812:	ee07 3a90 	vmov	s15, r3
 8107816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810781a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810781e:	693b      	ldr	r3, [r7, #16]
 8107820:	2b00      	cmp	r3, #0
 8107822:	f000 80e1 	beq.w	81079e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8107826:	697b      	ldr	r3, [r7, #20]
 8107828:	2b02      	cmp	r3, #2
 810782a:	f000 8083 	beq.w	8107934 <HAL_RCC_GetSysClockFreq+0x204>
 810782e:	697b      	ldr	r3, [r7, #20]
 8107830:	2b02      	cmp	r3, #2
 8107832:	f200 80a1 	bhi.w	8107978 <HAL_RCC_GetSysClockFreq+0x248>
 8107836:	697b      	ldr	r3, [r7, #20]
 8107838:	2b00      	cmp	r3, #0
 810783a:	d003      	beq.n	8107844 <HAL_RCC_GetSysClockFreq+0x114>
 810783c:	697b      	ldr	r3, [r7, #20]
 810783e:	2b01      	cmp	r3, #1
 8107840:	d056      	beq.n	81078f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8107842:	e099      	b.n	8107978 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107844:	4b6f      	ldr	r3, [pc, #444]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107846:	681b      	ldr	r3, [r3, #0]
 8107848:	f003 0320 	and.w	r3, r3, #32
 810784c:	2b00      	cmp	r3, #0
 810784e:	d02d      	beq.n	81078ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107850:	4b6c      	ldr	r3, [pc, #432]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	08db      	lsrs	r3, r3, #3
 8107856:	f003 0303 	and.w	r3, r3, #3
 810785a:	4a6b      	ldr	r2, [pc, #428]	@ (8107a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810785c:	fa22 f303 	lsr.w	r3, r2, r3
 8107860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107862:	687b      	ldr	r3, [r7, #4]
 8107864:	ee07 3a90 	vmov	s15, r3
 8107868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810786c:	693b      	ldr	r3, [r7, #16]
 810786e:	ee07 3a90 	vmov	s15, r3
 8107872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810787a:	4b62      	ldr	r3, [pc, #392]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810787c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107882:	ee07 3a90 	vmov	s15, r3
 8107886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810788a:	ed97 6a02 	vldr	s12, [r7, #8]
 810788e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8107a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810789a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81078aa:	e087      	b.n	81079bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81078ac:	693b      	ldr	r3, [r7, #16]
 81078ae:	ee07 3a90 	vmov	s15, r3
 81078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8107a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 81078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078be:	4b51      	ldr	r3, [pc, #324]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81078c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078c6:	ee07 3a90 	vmov	s15, r3
 81078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81078d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8107a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81078ee:	e065      	b.n	81079bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81078f0:	693b      	ldr	r3, [r7, #16]
 81078f2:	ee07 3a90 	vmov	s15, r3
 81078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8107a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 81078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107902:	4b40      	ldr	r3, [pc, #256]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810790a:	ee07 3a90 	vmov	s15, r3
 810790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107912:	ed97 6a02 	vldr	s12, [r7, #8]
 8107916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8107a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810792e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107932:	e043      	b.n	81079bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107934:	693b      	ldr	r3, [r7, #16]
 8107936:	ee07 3a90 	vmov	s15, r3
 810793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810793e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8107a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8107942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107946:	4b2f      	ldr	r3, [pc, #188]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810794e:	ee07 3a90 	vmov	s15, r3
 8107952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107956:	ed97 6a02 	vldr	s12, [r7, #8]
 810795a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8107a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 810795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107976:	e021      	b.n	81079bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107978:	693b      	ldr	r3, [r7, #16]
 810797a:	ee07 3a90 	vmov	s15, r3
 810797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8107a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8107986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810798a:	4b1e      	ldr	r3, [pc, #120]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107992:	ee07 3a90 	vmov	s15, r3
 8107996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810799a:	ed97 6a02 	vldr	s12, [r7, #8]
 810799e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8107a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 81079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81079ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81079bc:	4b11      	ldr	r3, [pc, #68]	@ (8107a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81079c0:	0a5b      	lsrs	r3, r3, #9
 81079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81079c6:	3301      	adds	r3, #1
 81079c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81079ca:	683b      	ldr	r3, [r7, #0]
 81079cc:	ee07 3a90 	vmov	s15, r3
 81079d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81079d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81079d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81079dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81079e0:	ee17 3a90 	vmov	r3, s15
 81079e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81079e6:	e005      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81079e8:	2300      	movs	r3, #0
 81079ea:	61bb      	str	r3, [r7, #24]
      break;
 81079ec:	e002      	b.n	81079f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81079ee:	4b07      	ldr	r3, [pc, #28]	@ (8107a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81079f0:	61bb      	str	r3, [r7, #24]
      break;
 81079f2:	bf00      	nop
  }

  return sysclockfreq;
 81079f4:	69bb      	ldr	r3, [r7, #24]
}
 81079f6:	4618      	mov	r0, r3
 81079f8:	3724      	adds	r7, #36	@ 0x24
 81079fa:	46bd      	mov	sp, r7
 81079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a00:	4770      	bx	lr
 8107a02:	bf00      	nop
 8107a04:	58024400 	.word	0x58024400
 8107a08:	03d09000 	.word	0x03d09000
 8107a0c:	003d0900 	.word	0x003d0900
 8107a10:	017d7840 	.word	0x017d7840
 8107a14:	46000000 	.word	0x46000000
 8107a18:	4c742400 	.word	0x4c742400
 8107a1c:	4a742400 	.word	0x4a742400
 8107a20:	4bbebc20 	.word	0x4bbebc20

08107a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8107a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107a28:	b0ca      	sub	sp, #296	@ 0x128
 8107a2a:	af00      	add	r7, sp, #0
 8107a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107a30:	2300      	movs	r3, #0
 8107a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8107a36:	2300      	movs	r3, #0
 8107a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8107a48:	2500      	movs	r5, #0
 8107a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8107a4e:	d049      	beq.n	8107ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8107a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107a5a:	d02f      	beq.n	8107abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8107a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107a60:	d828      	bhi.n	8107ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107a66:	d01a      	beq.n	8107a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8107a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107a6c:	d822      	bhi.n	8107ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107a6e:	2b00      	cmp	r3, #0
 8107a70:	d003      	beq.n	8107a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8107a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107a76:	d007      	beq.n	8107a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8107a78:	e01c      	b.n	8107ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107a86:	e01a      	b.n	8107abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a8c:	3308      	adds	r3, #8
 8107a8e:	2102      	movs	r1, #2
 8107a90:	4618      	mov	r0, r3
 8107a92:	f001 f9d1 	bl	8108e38 <RCCEx_PLL2_Config>
 8107a96:	4603      	mov	r3, r0
 8107a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107a9c:	e00f      	b.n	8107abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107aa2:	3328      	adds	r3, #40	@ 0x28
 8107aa4:	2102      	movs	r1, #2
 8107aa6:	4618      	mov	r0, r3
 8107aa8:	f001 fa78 	bl	8108f9c <RCCEx_PLL3_Config>
 8107aac:	4603      	mov	r3, r0
 8107aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107ab2:	e004      	b.n	8107abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ab4:	2301      	movs	r3, #1
 8107ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107aba:	e000      	b.n	8107abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8107abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ac2:	2b00      	cmp	r3, #0
 8107ac4:	d10a      	bne.n	8107adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8107ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107ad6:	430b      	orrs	r3, r1
 8107ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8107ada:	e003      	b.n	8107ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8107ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8107af0:	f04f 0900 	mov.w	r9, #0
 8107af4:	ea58 0309 	orrs.w	r3, r8, r9
 8107af8:	d047      	beq.n	8107b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8107afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b00:	2b04      	cmp	r3, #4
 8107b02:	d82a      	bhi.n	8107b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8107b04:	a201      	add	r2, pc, #4	@ (adr r2, 8107b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8107b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b0a:	bf00      	nop
 8107b0c:	08107b21 	.word	0x08107b21
 8107b10:	08107b2f 	.word	0x08107b2f
 8107b14:	08107b45 	.word	0x08107b45
 8107b18:	08107b63 	.word	0x08107b63
 8107b1c:	08107b63 	.word	0x08107b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107b20:	4b8e      	ldr	r3, [pc, #568]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b24:	4a8d      	ldr	r2, [pc, #564]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b2c:	e01a      	b.n	8107b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b32:	3308      	adds	r3, #8
 8107b34:	2100      	movs	r1, #0
 8107b36:	4618      	mov	r0, r3
 8107b38:	f001 f97e 	bl	8108e38 <RCCEx_PLL2_Config>
 8107b3c:	4603      	mov	r3, r0
 8107b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b42:	e00f      	b.n	8107b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b48:	3328      	adds	r3, #40	@ 0x28
 8107b4a:	2100      	movs	r1, #0
 8107b4c:	4618      	mov	r0, r3
 8107b4e:	f001 fa25 	bl	8108f9c <RCCEx_PLL3_Config>
 8107b52:	4603      	mov	r3, r0
 8107b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b58:	e004      	b.n	8107b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b5a:	2301      	movs	r3, #1
 8107b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b60:	e000      	b.n	8107b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8107b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b68:	2b00      	cmp	r3, #0
 8107b6a:	d10a      	bne.n	8107b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8107b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b70:	f023 0107 	bic.w	r1, r3, #7
 8107b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b7a:	4a78      	ldr	r2, [pc, #480]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b7c:	430b      	orrs	r3, r1
 8107b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107b80:	e003      	b.n	8107b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8107b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8107b96:	f04f 0b00 	mov.w	fp, #0
 8107b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8107b9e:	d04c      	beq.n	8107c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8107ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107baa:	d030      	beq.n	8107c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8107bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107bb0:	d829      	bhi.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8107bb4:	d02d      	beq.n	8107c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8107bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8107bb8:	d825      	bhi.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107bba:	2b80      	cmp	r3, #128	@ 0x80
 8107bbc:	d018      	beq.n	8107bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8107bbe:	2b80      	cmp	r3, #128	@ 0x80
 8107bc0:	d821      	bhi.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107bc2:	2b00      	cmp	r3, #0
 8107bc4:	d002      	beq.n	8107bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8107bc6:	2b40      	cmp	r3, #64	@ 0x40
 8107bc8:	d007      	beq.n	8107bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8107bca:	e01c      	b.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107bcc:	4b63      	ldr	r3, [pc, #396]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107bd0:	4a62      	ldr	r2, [pc, #392]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107bd8:	e01c      	b.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bde:	3308      	adds	r3, #8
 8107be0:	2100      	movs	r1, #0
 8107be2:	4618      	mov	r0, r3
 8107be4:	f001 f928 	bl	8108e38 <RCCEx_PLL2_Config>
 8107be8:	4603      	mov	r3, r0
 8107bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107bee:	e011      	b.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bf4:	3328      	adds	r3, #40	@ 0x28
 8107bf6:	2100      	movs	r1, #0
 8107bf8:	4618      	mov	r0, r3
 8107bfa:	f001 f9cf 	bl	8108f9c <RCCEx_PLL3_Config>
 8107bfe:	4603      	mov	r3, r0
 8107c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107c04:	e006      	b.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107c06:	2301      	movs	r3, #1
 8107c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107c0c:	e002      	b.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107c0e:	bf00      	nop
 8107c10:	e000      	b.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c18:	2b00      	cmp	r3, #0
 8107c1a:	d10a      	bne.n	8107c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8107c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8107c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c2c:	430b      	orrs	r3, r1
 8107c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107c30:	e003      	b.n	8107c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8107c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8107c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8107c4a:	2300      	movs	r3, #0
 8107c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8107c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8107c54:	460b      	mov	r3, r1
 8107c56:	4313      	orrs	r3, r2
 8107c58:	d053      	beq.n	8107d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8107c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107c66:	d035      	beq.n	8107cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8107c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107c6c:	d82e      	bhi.n	8107ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107c72:	d031      	beq.n	8107cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8107c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107c78:	d828      	bhi.n	8107ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c7e:	d01a      	beq.n	8107cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c84:	d822      	bhi.n	8107ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c86:	2b00      	cmp	r3, #0
 8107c88:	d003      	beq.n	8107c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8107c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107c8e:	d007      	beq.n	8107ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107c90:	e01c      	b.n	8107ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107c92:	4b32      	ldr	r3, [pc, #200]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c96:	4a31      	ldr	r2, [pc, #196]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107c9e:	e01c      	b.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ca4:	3308      	adds	r3, #8
 8107ca6:	2100      	movs	r1, #0
 8107ca8:	4618      	mov	r0, r3
 8107caa:	f001 f8c5 	bl	8108e38 <RCCEx_PLL2_Config>
 8107cae:	4603      	mov	r3, r0
 8107cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107cb4:	e011      	b.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cba:	3328      	adds	r3, #40	@ 0x28
 8107cbc:	2100      	movs	r1, #0
 8107cbe:	4618      	mov	r0, r3
 8107cc0:	f001 f96c 	bl	8108f9c <RCCEx_PLL3_Config>
 8107cc4:	4603      	mov	r3, r0
 8107cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107cca:	e006      	b.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107ccc:	2301      	movs	r3, #1
 8107cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107cd2:	e002      	b.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107cd4:	bf00      	nop
 8107cd6:	e000      	b.n	8107cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d10b      	bne.n	8107cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8107cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8107d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107cf4:	430b      	orrs	r3, r1
 8107cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8107cf8:	e003      	b.n	8107d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8107d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8107d12:	2300      	movs	r3, #0
 8107d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8107d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8107d1c:	460b      	mov	r3, r1
 8107d1e:	4313      	orrs	r3, r2
 8107d20:	d056      	beq.n	8107dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8107d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107d2e:	d038      	beq.n	8107da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107d34:	d831      	bhi.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107d3a:	d034      	beq.n	8107da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8107d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107d40:	d82b      	bhi.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107d46:	d01d      	beq.n	8107d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8107d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107d4c:	d825      	bhi.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d4e:	2b00      	cmp	r3, #0
 8107d50:	d006      	beq.n	8107d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8107d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107d56:	d00a      	beq.n	8107d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107d58:	e01f      	b.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d5a:	bf00      	nop
 8107d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d60:	4ba2      	ldr	r3, [pc, #648]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d64:	4aa1      	ldr	r2, [pc, #644]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107d6c:	e01c      	b.n	8107da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d72:	3308      	adds	r3, #8
 8107d74:	2100      	movs	r1, #0
 8107d76:	4618      	mov	r0, r3
 8107d78:	f001 f85e 	bl	8108e38 <RCCEx_PLL2_Config>
 8107d7c:	4603      	mov	r3, r0
 8107d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107d82:	e011      	b.n	8107da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d88:	3328      	adds	r3, #40	@ 0x28
 8107d8a:	2100      	movs	r1, #0
 8107d8c:	4618      	mov	r0, r3
 8107d8e:	f001 f905 	bl	8108f9c <RCCEx_PLL3_Config>
 8107d92:	4603      	mov	r3, r0
 8107d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107d98:	e006      	b.n	8107da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107d9a:	2301      	movs	r3, #1
 8107d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107da0:	e002      	b.n	8107da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107da2:	bf00      	nop
 8107da4:	e000      	b.n	8107da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107dac:	2b00      	cmp	r3, #0
 8107dae:	d10b      	bne.n	8107dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8107db0:	4b8e      	ldr	r3, [pc, #568]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8107db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107dc2:	430b      	orrs	r3, r1
 8107dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8107dc6:	e003      	b.n	8107dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8107dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8107ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8107de0:	2300      	movs	r3, #0
 8107de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8107de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8107dea:	460b      	mov	r3, r1
 8107dec:	4313      	orrs	r3, r2
 8107dee:	d03a      	beq.n	8107e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8107df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107df6:	2b30      	cmp	r3, #48	@ 0x30
 8107df8:	d01f      	beq.n	8107e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8107dfa:	2b30      	cmp	r3, #48	@ 0x30
 8107dfc:	d819      	bhi.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107dfe:	2b20      	cmp	r3, #32
 8107e00:	d00c      	beq.n	8107e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8107e02:	2b20      	cmp	r3, #32
 8107e04:	d815      	bhi.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107e06:	2b00      	cmp	r3, #0
 8107e08:	d019      	beq.n	8107e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8107e0a:	2b10      	cmp	r3, #16
 8107e0c:	d111      	bne.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107e0e:	4b77      	ldr	r3, [pc, #476]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e12:	4a76      	ldr	r2, [pc, #472]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107e1a:	e011      	b.n	8107e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e20:	3308      	adds	r3, #8
 8107e22:	2102      	movs	r1, #2
 8107e24:	4618      	mov	r0, r3
 8107e26:	f001 f807 	bl	8108e38 <RCCEx_PLL2_Config>
 8107e2a:	4603      	mov	r3, r0
 8107e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107e30:	e006      	b.n	8107e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8107e32:	2301      	movs	r3, #1
 8107e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107e38:	e002      	b.n	8107e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107e3a:	bf00      	nop
 8107e3c:	e000      	b.n	8107e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e44:	2b00      	cmp	r3, #0
 8107e46:	d10a      	bne.n	8107e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107e48:	4b68      	ldr	r3, [pc, #416]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8107e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e56:	4a65      	ldr	r2, [pc, #404]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e58:	430b      	orrs	r3, r1
 8107e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107e5c:	e003      	b.n	8107e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8107e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8107e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8107e76:	2300      	movs	r3, #0
 8107e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8107e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8107e80:	460b      	mov	r3, r1
 8107e82:	4313      	orrs	r3, r2
 8107e84:	d051      	beq.n	8107f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8107e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107e90:	d035      	beq.n	8107efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8107e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107e96:	d82e      	bhi.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107e9c:	d031      	beq.n	8107f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8107e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107ea2:	d828      	bhi.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107ea8:	d01a      	beq.n	8107ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8107eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107eae:	d822      	bhi.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107eb0:	2b00      	cmp	r3, #0
 8107eb2:	d003      	beq.n	8107ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8107eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107eb8:	d007      	beq.n	8107eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8107eba:	e01c      	b.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ec8:	e01c      	b.n	8107f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ece:	3308      	adds	r3, #8
 8107ed0:	2100      	movs	r1, #0
 8107ed2:	4618      	mov	r0, r3
 8107ed4:	f000 ffb0 	bl	8108e38 <RCCEx_PLL2_Config>
 8107ed8:	4603      	mov	r3, r0
 8107eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ede:	e011      	b.n	8107f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ee4:	3328      	adds	r3, #40	@ 0x28
 8107ee6:	2100      	movs	r1, #0
 8107ee8:	4618      	mov	r0, r3
 8107eea:	f001 f857 	bl	8108f9c <RCCEx_PLL3_Config>
 8107eee:	4603      	mov	r3, r0
 8107ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ef4:	e006      	b.n	8107f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ef6:	2301      	movs	r3, #1
 8107ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107efc:	e002      	b.n	8107f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107efe:	bf00      	nop
 8107f00:	e000      	b.n	8107f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f08:	2b00      	cmp	r3, #0
 8107f0a:	d10a      	bne.n	8107f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8107f0c:	4b37      	ldr	r3, [pc, #220]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8107f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107f1a:	4a34      	ldr	r2, [pc, #208]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107f1c:	430b      	orrs	r3, r1
 8107f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107f20:	e003      	b.n	8107f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8107f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8107f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8107f3a:	2300      	movs	r3, #0
 8107f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8107f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8107f44:	460b      	mov	r3, r1
 8107f46:	4313      	orrs	r3, r2
 8107f48:	d056      	beq.n	8107ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8107f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107f54:	d033      	beq.n	8107fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107f5a:	d82c      	bhi.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107f60:	d02f      	beq.n	8107fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8107f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107f66:	d826      	bhi.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107f6c:	d02b      	beq.n	8107fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8107f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107f72:	d820      	bhi.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f78:	d012      	beq.n	8107fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8107f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f7e:	d81a      	bhi.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f80:	2b00      	cmp	r3, #0
 8107f82:	d022      	beq.n	8107fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8107f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107f88:	d115      	bne.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f8e:	3308      	adds	r3, #8
 8107f90:	2101      	movs	r1, #1
 8107f92:	4618      	mov	r0, r3
 8107f94:	f000 ff50 	bl	8108e38 <RCCEx_PLL2_Config>
 8107f98:	4603      	mov	r3, r0
 8107f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107f9e:	e015      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fa4:	3328      	adds	r3, #40	@ 0x28
 8107fa6:	2101      	movs	r1, #1
 8107fa8:	4618      	mov	r0, r3
 8107faa:	f000 fff7 	bl	8108f9c <RCCEx_PLL3_Config>
 8107fae:	4603      	mov	r3, r0
 8107fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107fb4:	e00a      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107fb6:	2301      	movs	r3, #1
 8107fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107fbc:	e006      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fbe:	bf00      	nop
 8107fc0:	e004      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fc2:	bf00      	nop
 8107fc4:	e002      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fc6:	bf00      	nop
 8107fc8:	e000      	b.n	8107fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107fd0:	2b00      	cmp	r3, #0
 8107fd2:	d10d      	bne.n	8107ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107fd4:	4b05      	ldr	r3, [pc, #20]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8107fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107fe2:	4a02      	ldr	r2, [pc, #8]	@ (8107fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107fe4:	430b      	orrs	r3, r1
 8107fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8107fe8:	e006      	b.n	8107ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8107fea:	bf00      	nop
 8107fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8108004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8108008:	2300      	movs	r3, #0
 810800a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810800e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8108012:	460b      	mov	r3, r1
 8108014:	4313      	orrs	r3, r2
 8108016:	d055      	beq.n	81080c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8108018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810801c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8108020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108024:	d033      	beq.n	810808e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8108026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810802a:	d82c      	bhi.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810802c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108030:	d02f      	beq.n	8108092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8108032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108036:	d826      	bhi.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810803c:	d02b      	beq.n	8108096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810803e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108042:	d820      	bhi.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108048:	d012      	beq.n	8108070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810804a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810804e:	d81a      	bhi.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108050:	2b00      	cmp	r3, #0
 8108052:	d022      	beq.n	810809a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8108054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108058:	d115      	bne.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810805e:	3308      	adds	r3, #8
 8108060:	2101      	movs	r1, #1
 8108062:	4618      	mov	r0, r3
 8108064:	f000 fee8 	bl	8108e38 <RCCEx_PLL2_Config>
 8108068:	4603      	mov	r3, r0
 810806a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810806e:	e015      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108074:	3328      	adds	r3, #40	@ 0x28
 8108076:	2101      	movs	r1, #1
 8108078:	4618      	mov	r0, r3
 810807a:	f000 ff8f 	bl	8108f9c <RCCEx_PLL3_Config>
 810807e:	4603      	mov	r3, r0
 8108080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108084:	e00a      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8108086:	2301      	movs	r3, #1
 8108088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810808c:	e006      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810808e:	bf00      	nop
 8108090:	e004      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108092:	bf00      	nop
 8108094:	e002      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108096:	bf00      	nop
 8108098:	e000      	b.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810809a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810809c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080a0:	2b00      	cmp	r3, #0
 81080a2:	d10b      	bne.n	81080bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81080a4:	4ba4      	ldr	r3, [pc, #656]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81080a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81080b4:	4aa0      	ldr	r2, [pc, #640]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81080b6:	430b      	orrs	r3, r1
 81080b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81080ba:	e003      	b.n	81080c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81080c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81080d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81080d4:	2300      	movs	r3, #0
 81080d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81080da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81080de:	460b      	mov	r3, r1
 81080e0:	4313      	orrs	r3, r2
 81080e2:	d037      	beq.n	8108154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81080ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81080ee:	d00e      	beq.n	810810e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81080f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81080f4:	d816      	bhi.n	8108124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81080f6:	2b00      	cmp	r3, #0
 81080f8:	d018      	beq.n	810812c <HAL_RCCEx_PeriphCLKConfig+0x708>
 81080fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81080fe:	d111      	bne.n	8108124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108100:	4b8d      	ldr	r3, [pc, #564]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108104:	4a8c      	ldr	r2, [pc, #560]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810810a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810810c:	e00f      	b.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108112:	3308      	adds	r3, #8
 8108114:	2101      	movs	r1, #1
 8108116:	4618      	mov	r0, r3
 8108118:	f000 fe8e 	bl	8108e38 <RCCEx_PLL2_Config>
 810811c:	4603      	mov	r3, r0
 810811e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108122:	e004      	b.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108124:	2301      	movs	r3, #1
 8108126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810812a:	e000      	b.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810812c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810812e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108132:	2b00      	cmp	r3, #0
 8108134:	d10a      	bne.n	810814c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108136:	4b80      	ldr	r3, [pc, #512]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810813a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108144:	4a7c      	ldr	r2, [pc, #496]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108146:	430b      	orrs	r3, r1
 8108148:	6513      	str	r3, [r2, #80]	@ 0x50
 810814a:	e003      	b.n	8108154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810814c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108158:	e9d3 2300 	ldrd	r2, r3, [r3]
 810815c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8108160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8108164:	2300      	movs	r3, #0
 8108166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810816a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810816e:	460b      	mov	r3, r1
 8108170:	4313      	orrs	r3, r2
 8108172:	d039      	beq.n	81081e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8108174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810817a:	2b03      	cmp	r3, #3
 810817c:	d81c      	bhi.n	81081b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810817e:	a201      	add	r2, pc, #4	@ (adr r2, 8108184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8108180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108184:	081081c1 	.word	0x081081c1
 8108188:	08108195 	.word	0x08108195
 810818c:	081081a3 	.word	0x081081a3
 8108190:	081081c1 	.word	0x081081c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108194:	4b68      	ldr	r3, [pc, #416]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108198:	4a67      	ldr	r2, [pc, #412]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810819a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810819e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81081a0:	e00f      	b.n	81081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081a6:	3308      	adds	r3, #8
 81081a8:	2102      	movs	r1, #2
 81081aa:	4618      	mov	r0, r3
 81081ac:	f000 fe44 	bl	8108e38 <RCCEx_PLL2_Config>
 81081b0:	4603      	mov	r3, r0
 81081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81081b6:	e004      	b.n	81081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81081b8:	2301      	movs	r3, #1
 81081ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81081be:	e000      	b.n	81081c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81081c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081c6:	2b00      	cmp	r3, #0
 81081c8:	d10a      	bne.n	81081e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81081ca:	4b5b      	ldr	r3, [pc, #364]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81081cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81081ce:	f023 0103 	bic.w	r1, r3, #3
 81081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81081d8:	4a57      	ldr	r2, [pc, #348]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81081da:	430b      	orrs	r3, r1
 81081dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81081de:	e003      	b.n	81081e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81081f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81081f8:	2300      	movs	r3, #0
 81081fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81081fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8108202:	460b      	mov	r3, r1
 8108204:	4313      	orrs	r3, r2
 8108206:	f000 809f 	beq.w	8108348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810820a:	4b4c      	ldr	r3, [pc, #304]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810820c:	681b      	ldr	r3, [r3, #0]
 810820e:	4a4b      	ldr	r2, [pc, #300]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8108216:	f7f9 fe55 	bl	8101ec4 <HAL_GetTick>
 810821a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810821e:	e00b      	b.n	8108238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108220:	f7f9 fe50 	bl	8101ec4 <HAL_GetTick>
 8108224:	4602      	mov	r2, r0
 8108226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810822a:	1ad3      	subs	r3, r2, r3
 810822c:	2b64      	cmp	r3, #100	@ 0x64
 810822e:	d903      	bls.n	8108238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8108230:	2303      	movs	r3, #3
 8108232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108236:	e005      	b.n	8108244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108238:	4b40      	ldr	r3, [pc, #256]	@ (810833c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810823a:	681b      	ldr	r3, [r3, #0]
 810823c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108240:	2b00      	cmp	r3, #0
 8108242:	d0ed      	beq.n	8108220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8108244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108248:	2b00      	cmp	r3, #0
 810824a:	d179      	bne.n	8108340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810824c:	4b3a      	ldr	r3, [pc, #232]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810824e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8108250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108258:	4053      	eors	r3, r2
 810825a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810825e:	2b00      	cmp	r3, #0
 8108260:	d015      	beq.n	810828e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108262:	4b35      	ldr	r3, [pc, #212]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810826a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810826e:	4b32      	ldr	r3, [pc, #200]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108272:	4a31      	ldr	r2, [pc, #196]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8108278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810827a:	4b2f      	ldr	r3, [pc, #188]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810827e:	4a2e      	ldr	r2, [pc, #184]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108286:	4a2c      	ldr	r2, [pc, #176]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810828c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810829a:	d118      	bne.n	81082ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810829c:	f7f9 fe12 	bl	8101ec4 <HAL_GetTick>
 81082a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81082a4:	e00d      	b.n	81082c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81082a6:	f7f9 fe0d 	bl	8101ec4 <HAL_GetTick>
 81082aa:	4602      	mov	r2, r0
 81082ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81082b0:	1ad2      	subs	r2, r2, r3
 81082b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81082b6:	429a      	cmp	r2, r3
 81082b8:	d903      	bls.n	81082c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81082ba:	2303      	movs	r3, #3
 81082bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81082c0:	e005      	b.n	81082ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81082c2:	4b1d      	ldr	r3, [pc, #116]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81082c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81082c6:	f003 0302 	and.w	r3, r3, #2
 81082ca:	2b00      	cmp	r3, #0
 81082cc:	d0eb      	beq.n	81082a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81082ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082d2:	2b00      	cmp	r3, #0
 81082d4:	d12b      	bne.n	810832e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81082de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81082e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81082e6:	d110      	bne.n	810830a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81082e8:	4b13      	ldr	r3, [pc, #76]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81082ea:	691b      	ldr	r3, [r3, #16]
 81082ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81082f8:	091b      	lsrs	r3, r3, #4
 81082fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81082fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8108302:	4a0d      	ldr	r2, [pc, #52]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108304:	430b      	orrs	r3, r1
 8108306:	6113      	str	r3, [r2, #16]
 8108308:	e005      	b.n	8108316 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810830a:	4b0b      	ldr	r3, [pc, #44]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810830c:	691b      	ldr	r3, [r3, #16]
 810830e:	4a0a      	ldr	r2, [pc, #40]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108310:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8108314:	6113      	str	r3, [r2, #16]
 8108316:	4b08      	ldr	r3, [pc, #32]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108318:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810831e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8108326:	4a04      	ldr	r2, [pc, #16]	@ (8108338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108328:	430b      	orrs	r3, r1
 810832a:	6713      	str	r3, [r2, #112]	@ 0x70
 810832c:	e00c      	b.n	8108348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810832e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8108336:	e007      	b.n	8108348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8108338:	58024400 	.word	0x58024400
 810833c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8108348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108350:	f002 0301 	and.w	r3, r2, #1
 8108354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8108358:	2300      	movs	r3, #0
 810835a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810835e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8108362:	460b      	mov	r3, r1
 8108364:	4313      	orrs	r3, r2
 8108366:	f000 8089 	beq.w	810847c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810836e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108370:	2b28      	cmp	r3, #40	@ 0x28
 8108372:	d86b      	bhi.n	810844c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8108374:	a201      	add	r2, pc, #4	@ (adr r2, 810837c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8108376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810837a:	bf00      	nop
 810837c:	08108455 	.word	0x08108455
 8108380:	0810844d 	.word	0x0810844d
 8108384:	0810844d 	.word	0x0810844d
 8108388:	0810844d 	.word	0x0810844d
 810838c:	0810844d 	.word	0x0810844d
 8108390:	0810844d 	.word	0x0810844d
 8108394:	0810844d 	.word	0x0810844d
 8108398:	0810844d 	.word	0x0810844d
 810839c:	08108421 	.word	0x08108421
 81083a0:	0810844d 	.word	0x0810844d
 81083a4:	0810844d 	.word	0x0810844d
 81083a8:	0810844d 	.word	0x0810844d
 81083ac:	0810844d 	.word	0x0810844d
 81083b0:	0810844d 	.word	0x0810844d
 81083b4:	0810844d 	.word	0x0810844d
 81083b8:	0810844d 	.word	0x0810844d
 81083bc:	08108437 	.word	0x08108437
 81083c0:	0810844d 	.word	0x0810844d
 81083c4:	0810844d 	.word	0x0810844d
 81083c8:	0810844d 	.word	0x0810844d
 81083cc:	0810844d 	.word	0x0810844d
 81083d0:	0810844d 	.word	0x0810844d
 81083d4:	0810844d 	.word	0x0810844d
 81083d8:	0810844d 	.word	0x0810844d
 81083dc:	08108455 	.word	0x08108455
 81083e0:	0810844d 	.word	0x0810844d
 81083e4:	0810844d 	.word	0x0810844d
 81083e8:	0810844d 	.word	0x0810844d
 81083ec:	0810844d 	.word	0x0810844d
 81083f0:	0810844d 	.word	0x0810844d
 81083f4:	0810844d 	.word	0x0810844d
 81083f8:	0810844d 	.word	0x0810844d
 81083fc:	08108455 	.word	0x08108455
 8108400:	0810844d 	.word	0x0810844d
 8108404:	0810844d 	.word	0x0810844d
 8108408:	0810844d 	.word	0x0810844d
 810840c:	0810844d 	.word	0x0810844d
 8108410:	0810844d 	.word	0x0810844d
 8108414:	0810844d 	.word	0x0810844d
 8108418:	0810844d 	.word	0x0810844d
 810841c:	08108455 	.word	0x08108455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108424:	3308      	adds	r3, #8
 8108426:	2101      	movs	r1, #1
 8108428:	4618      	mov	r0, r3
 810842a:	f000 fd05 	bl	8108e38 <RCCEx_PLL2_Config>
 810842e:	4603      	mov	r3, r0
 8108430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8108434:	e00f      	b.n	8108456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810843a:	3328      	adds	r3, #40	@ 0x28
 810843c:	2101      	movs	r1, #1
 810843e:	4618      	mov	r0, r3
 8108440:	f000 fdac 	bl	8108f9c <RCCEx_PLL3_Config>
 8108444:	4603      	mov	r3, r0
 8108446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810844a:	e004      	b.n	8108456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810844c:	2301      	movs	r3, #1
 810844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108452:	e000      	b.n	8108456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8108454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810845a:	2b00      	cmp	r3, #0
 810845c:	d10a      	bne.n	8108474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810845e:	4bbf      	ldr	r3, [pc, #764]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8108466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810846a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810846c:	4abb      	ldr	r2, [pc, #748]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810846e:	430b      	orrs	r3, r1
 8108470:	6553      	str	r3, [r2, #84]	@ 0x54
 8108472:	e003      	b.n	810847c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108484:	f002 0302 	and.w	r3, r2, #2
 8108488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810848c:	2300      	movs	r3, #0
 810848e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8108492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8108496:	460b      	mov	r3, r1
 8108498:	4313      	orrs	r3, r2
 810849a:	d041      	beq.n	8108520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81084a2:	2b05      	cmp	r3, #5
 81084a4:	d824      	bhi.n	81084f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81084a6:	a201      	add	r2, pc, #4	@ (adr r2, 81084ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084ac:	081084f9 	.word	0x081084f9
 81084b0:	081084c5 	.word	0x081084c5
 81084b4:	081084db 	.word	0x081084db
 81084b8:	081084f9 	.word	0x081084f9
 81084bc:	081084f9 	.word	0x081084f9
 81084c0:	081084f9 	.word	0x081084f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084c8:	3308      	adds	r3, #8
 81084ca:	2101      	movs	r1, #1
 81084cc:	4618      	mov	r0, r3
 81084ce:	f000 fcb3 	bl	8108e38 <RCCEx_PLL2_Config>
 81084d2:	4603      	mov	r3, r0
 81084d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81084d8:	e00f      	b.n	81084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084de:	3328      	adds	r3, #40	@ 0x28
 81084e0:	2101      	movs	r1, #1
 81084e2:	4618      	mov	r0, r3
 81084e4:	f000 fd5a 	bl	8108f9c <RCCEx_PLL3_Config>
 81084e8:	4603      	mov	r3, r0
 81084ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81084ee:	e004      	b.n	81084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81084f0:	2301      	movs	r3, #1
 81084f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81084f6:	e000      	b.n	81084fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81084f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81084fe:	2b00      	cmp	r3, #0
 8108500:	d10a      	bne.n	8108518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108502:	4b96      	ldr	r3, [pc, #600]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108506:	f023 0107 	bic.w	r1, r3, #7
 810850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810850e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108510:	4a92      	ldr	r2, [pc, #584]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108512:	430b      	orrs	r3, r1
 8108514:	6553      	str	r3, [r2, #84]	@ 0x54
 8108516:	e003      	b.n	8108520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810851c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108528:	f002 0304 	and.w	r3, r2, #4
 810852c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8108530:	2300      	movs	r3, #0
 8108532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8108536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810853a:	460b      	mov	r3, r1
 810853c:	4313      	orrs	r3, r2
 810853e:	d044      	beq.n	81085ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8108540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108548:	2b05      	cmp	r3, #5
 810854a:	d825      	bhi.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810854c:	a201      	add	r2, pc, #4	@ (adr r2, 8108554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108552:	bf00      	nop
 8108554:	081085a1 	.word	0x081085a1
 8108558:	0810856d 	.word	0x0810856d
 810855c:	08108583 	.word	0x08108583
 8108560:	081085a1 	.word	0x081085a1
 8108564:	081085a1 	.word	0x081085a1
 8108568:	081085a1 	.word	0x081085a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108570:	3308      	adds	r3, #8
 8108572:	2101      	movs	r1, #1
 8108574:	4618      	mov	r0, r3
 8108576:	f000 fc5f 	bl	8108e38 <RCCEx_PLL2_Config>
 810857a:	4603      	mov	r3, r0
 810857c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108580:	e00f      	b.n	81085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108586:	3328      	adds	r3, #40	@ 0x28
 8108588:	2101      	movs	r1, #1
 810858a:	4618      	mov	r0, r3
 810858c:	f000 fd06 	bl	8108f9c <RCCEx_PLL3_Config>
 8108590:	4603      	mov	r3, r0
 8108592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108596:	e004      	b.n	81085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108598:	2301      	movs	r3, #1
 810859a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810859e:	e000      	b.n	81085a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085a6:	2b00      	cmp	r3, #0
 81085a8:	d10b      	bne.n	81085c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81085aa:	4b6c      	ldr	r3, [pc, #432]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81085ae:	f023 0107 	bic.w	r1, r3, #7
 81085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81085ba:	4a68      	ldr	r2, [pc, #416]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81085bc:	430b      	orrs	r3, r1
 81085be:	6593      	str	r3, [r2, #88]	@ 0x58
 81085c0:	e003      	b.n	81085ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085d2:	f002 0320 	and.w	r3, r2, #32
 81085d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81085da:	2300      	movs	r3, #0
 81085dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81085e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81085e4:	460b      	mov	r3, r1
 81085e6:	4313      	orrs	r3, r2
 81085e8:	d055      	beq.n	8108696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81085f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81085f6:	d033      	beq.n	8108660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81085f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81085fc:	d82c      	bhi.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108602:	d02f      	beq.n	8108664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8108604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108608:	d826      	bhi.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810860a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810860e:	d02b      	beq.n	8108668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8108610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108614:	d820      	bhi.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810861a:	d012      	beq.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810861c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108620:	d81a      	bhi.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108622:	2b00      	cmp	r3, #0
 8108624:	d022      	beq.n	810866c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8108626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810862a:	d115      	bne.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108630:	3308      	adds	r3, #8
 8108632:	2100      	movs	r1, #0
 8108634:	4618      	mov	r0, r3
 8108636:	f000 fbff 	bl	8108e38 <RCCEx_PLL2_Config>
 810863a:	4603      	mov	r3, r0
 810863c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108640:	e015      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108646:	3328      	adds	r3, #40	@ 0x28
 8108648:	2102      	movs	r1, #2
 810864a:	4618      	mov	r0, r3
 810864c:	f000 fca6 	bl	8108f9c <RCCEx_PLL3_Config>
 8108650:	4603      	mov	r3, r0
 8108652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108656:	e00a      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108658:	2301      	movs	r3, #1
 810865a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810865e:	e006      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108660:	bf00      	nop
 8108662:	e004      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108664:	bf00      	nop
 8108666:	e002      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108668:	bf00      	nop
 810866a:	e000      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810866c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810866e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108672:	2b00      	cmp	r3, #0
 8108674:	d10b      	bne.n	810868e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108676:	4b39      	ldr	r3, [pc, #228]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810867a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108686:	4a35      	ldr	r2, [pc, #212]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108688:	430b      	orrs	r3, r1
 810868a:	6553      	str	r3, [r2, #84]	@ 0x54
 810868c:	e003      	b.n	8108696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810869e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81086a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81086a6:	2300      	movs	r3, #0
 81086a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81086ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81086b0:	460b      	mov	r3, r1
 81086b2:	4313      	orrs	r3, r2
 81086b4:	d058      	beq.n	8108768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81086be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81086c2:	d033      	beq.n	810872c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81086c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81086c8:	d82c      	bhi.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81086ce:	d02f      	beq.n	8108730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81086d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81086d4:	d826      	bhi.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81086da:	d02b      	beq.n	8108734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81086dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81086e0:	d820      	bhi.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81086e6:	d012      	beq.n	810870e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81086e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81086ec:	d81a      	bhi.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086ee:	2b00      	cmp	r3, #0
 81086f0:	d022      	beq.n	8108738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81086f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81086f6:	d115      	bne.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086fc:	3308      	adds	r3, #8
 81086fe:	2100      	movs	r1, #0
 8108700:	4618      	mov	r0, r3
 8108702:	f000 fb99 	bl	8108e38 <RCCEx_PLL2_Config>
 8108706:	4603      	mov	r3, r0
 8108708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810870c:	e015      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108712:	3328      	adds	r3, #40	@ 0x28
 8108714:	2102      	movs	r1, #2
 8108716:	4618      	mov	r0, r3
 8108718:	f000 fc40 	bl	8108f9c <RCCEx_PLL3_Config>
 810871c:	4603      	mov	r3, r0
 810871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108722:	e00a      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108724:	2301      	movs	r3, #1
 8108726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810872a:	e006      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810872c:	bf00      	nop
 810872e:	e004      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108730:	bf00      	nop
 8108732:	e002      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108734:	bf00      	nop
 8108736:	e000      	b.n	810873a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108738:	bf00      	nop
    }

    if (ret == HAL_OK)
 810873a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810873e:	2b00      	cmp	r3, #0
 8108740:	d10e      	bne.n	8108760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108742:	4b06      	ldr	r3, [pc, #24]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810874e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108752:	4a02      	ldr	r2, [pc, #8]	@ (810875c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108754:	430b      	orrs	r3, r1
 8108756:	6593      	str	r3, [r2, #88]	@ 0x58
 8108758:	e006      	b.n	8108768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810875a:	bf00      	nop
 810875c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8108774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8108778:	2300      	movs	r3, #0
 810877a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810877e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8108782:	460b      	mov	r3, r1
 8108784:	4313      	orrs	r3, r2
 8108786:	d055      	beq.n	8108834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8108788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810878c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108794:	d033      	beq.n	81087fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8108796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810879a:	d82c      	bhi.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810879c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81087a0:	d02f      	beq.n	8108802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81087a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81087a6:	d826      	bhi.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81087a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81087ac:	d02b      	beq.n	8108806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81087ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81087b2:	d820      	bhi.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81087b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81087b8:	d012      	beq.n	81087e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81087ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81087be:	d81a      	bhi.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81087c0:	2b00      	cmp	r3, #0
 81087c2:	d022      	beq.n	810880a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81087c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087c8:	d115      	bne.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087ce:	3308      	adds	r3, #8
 81087d0:	2100      	movs	r1, #0
 81087d2:	4618      	mov	r0, r3
 81087d4:	f000 fb30 	bl	8108e38 <RCCEx_PLL2_Config>
 81087d8:	4603      	mov	r3, r0
 81087da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81087de:	e015      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087e4:	3328      	adds	r3, #40	@ 0x28
 81087e6:	2102      	movs	r1, #2
 81087e8:	4618      	mov	r0, r3
 81087ea:	f000 fbd7 	bl	8108f9c <RCCEx_PLL3_Config>
 81087ee:	4603      	mov	r3, r0
 81087f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81087f4:	e00a      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81087f6:	2301      	movs	r3, #1
 81087f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81087fc:	e006      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81087fe:	bf00      	nop
 8108800:	e004      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108802:	bf00      	nop
 8108804:	e002      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108806:	bf00      	nop
 8108808:	e000      	b.n	810880c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810880a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810880c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108810:	2b00      	cmp	r3, #0
 8108812:	d10b      	bne.n	810882c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108814:	4ba1      	ldr	r3, [pc, #644]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108824:	4a9d      	ldr	r2, [pc, #628]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108826:	430b      	orrs	r3, r1
 8108828:	6593      	str	r3, [r2, #88]	@ 0x58
 810882a:	e003      	b.n	8108834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810882c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108838:	e9d3 2300 	ldrd	r2, r3, [r3]
 810883c:	f002 0308 	and.w	r3, r2, #8
 8108840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8108844:	2300      	movs	r3, #0
 8108846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810884a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810884e:	460b      	mov	r3, r1
 8108850:	4313      	orrs	r3, r2
 8108852:	d01e      	beq.n	8108892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8108854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810885c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108860:	d10c      	bne.n	810887c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108866:	3328      	adds	r3, #40	@ 0x28
 8108868:	2102      	movs	r1, #2
 810886a:	4618      	mov	r0, r3
 810886c:	f000 fb96 	bl	8108f9c <RCCEx_PLL3_Config>
 8108870:	4603      	mov	r3, r0
 8108872:	2b00      	cmp	r3, #0
 8108874:	d002      	beq.n	810887c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8108876:	2301      	movs	r3, #1
 8108878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810887c:	4b87      	ldr	r3, [pc, #540]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810887e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810888c:	4a83      	ldr	r2, [pc, #524]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810888e:	430b      	orrs	r3, r1
 8108890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108896:	e9d3 2300 	ldrd	r2, r3, [r3]
 810889a:	f002 0310 	and.w	r3, r2, #16
 810889e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81088a2:	2300      	movs	r3, #0
 81088a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81088a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81088ac:	460b      	mov	r3, r1
 81088ae:	4313      	orrs	r3, r2
 81088b0:	d01e      	beq.n	81088f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81088be:	d10c      	bne.n	81088da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088c4:	3328      	adds	r3, #40	@ 0x28
 81088c6:	2102      	movs	r1, #2
 81088c8:	4618      	mov	r0, r3
 81088ca:	f000 fb67 	bl	8108f9c <RCCEx_PLL3_Config>
 81088ce:	4603      	mov	r3, r0
 81088d0:	2b00      	cmp	r3, #0
 81088d2:	d002      	beq.n	81088da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81088d4:	2301      	movs	r3, #1
 81088d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81088da:	4b70      	ldr	r3, [pc, #448]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81088de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81088ea:	4a6c      	ldr	r2, [pc, #432]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81088ec:	430b      	orrs	r3, r1
 81088ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81088fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8108900:	2300      	movs	r3, #0
 8108902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8108906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810890a:	460b      	mov	r3, r1
 810890c:	4313      	orrs	r3, r2
 810890e:	d03e      	beq.n	810898e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8108910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810891c:	d022      	beq.n	8108964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810891e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108922:	d81b      	bhi.n	810895c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8108924:	2b00      	cmp	r3, #0
 8108926:	d003      	beq.n	8108930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8108928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810892c:	d00b      	beq.n	8108946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810892e:	e015      	b.n	810895c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108934:	3308      	adds	r3, #8
 8108936:	2100      	movs	r1, #0
 8108938:	4618      	mov	r0, r3
 810893a:	f000 fa7d 	bl	8108e38 <RCCEx_PLL2_Config>
 810893e:	4603      	mov	r3, r0
 8108940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108944:	e00f      	b.n	8108966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810894a:	3328      	adds	r3, #40	@ 0x28
 810894c:	2102      	movs	r1, #2
 810894e:	4618      	mov	r0, r3
 8108950:	f000 fb24 	bl	8108f9c <RCCEx_PLL3_Config>
 8108954:	4603      	mov	r3, r0
 8108956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810895a:	e004      	b.n	8108966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810895c:	2301      	movs	r3, #1
 810895e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108962:	e000      	b.n	8108966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8108964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810896a:	2b00      	cmp	r3, #0
 810896c:	d10b      	bne.n	8108986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810896e:	4b4b      	ldr	r3, [pc, #300]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8108976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810897a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810897e:	4a47      	ldr	r2, [pc, #284]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108980:	430b      	orrs	r3, r1
 8108982:	6593      	str	r3, [r2, #88]	@ 0x58
 8108984:	e003      	b.n	810898e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810898a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810899a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810899c:	2300      	movs	r3, #0
 810899e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81089a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81089a4:	460b      	mov	r3, r1
 81089a6:	4313      	orrs	r3, r2
 81089a8:	d03b      	beq.n	8108a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81089b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81089b6:	d01f      	beq.n	81089f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81089b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81089bc:	d818      	bhi.n	81089f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81089be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81089c2:	d003      	beq.n	81089cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81089c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81089c8:	d007      	beq.n	81089da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81089ca:	e011      	b.n	81089f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81089cc:	4b33      	ldr	r3, [pc, #204]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089d0:	4a32      	ldr	r2, [pc, #200]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81089d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81089d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81089d8:	e00f      	b.n	81089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089de:	3328      	adds	r3, #40	@ 0x28
 81089e0:	2101      	movs	r1, #1
 81089e2:	4618      	mov	r0, r3
 81089e4:	f000 fada 	bl	8108f9c <RCCEx_PLL3_Config>
 81089e8:	4603      	mov	r3, r0
 81089ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81089ee:	e004      	b.n	81089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81089f0:	2301      	movs	r3, #1
 81089f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81089f6:	e000      	b.n	81089fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81089f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81089fe:	2b00      	cmp	r3, #0
 8108a00:	d10b      	bne.n	8108a1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108a02:	4b26      	ldr	r3, [pc, #152]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8108a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108a12:	4a22      	ldr	r2, [pc, #136]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a14:	430b      	orrs	r3, r1
 8108a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8108a18:	e003      	b.n	8108a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8108a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8108a30:	2300      	movs	r3, #0
 8108a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8108a34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8108a38:	460b      	mov	r3, r1
 8108a3a:	4313      	orrs	r3, r2
 8108a3c:	d034      	beq.n	8108aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108a44:	2b00      	cmp	r3, #0
 8108a46:	d003      	beq.n	8108a50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8108a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108a4c:	d007      	beq.n	8108a5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8108a4e:	e011      	b.n	8108a74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108a50:	4b12      	ldr	r3, [pc, #72]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a54:	4a11      	ldr	r2, [pc, #68]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108a5c:	e00e      	b.n	8108a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a62:	3308      	adds	r3, #8
 8108a64:	2102      	movs	r1, #2
 8108a66:	4618      	mov	r0, r3
 8108a68:	f000 f9e6 	bl	8108e38 <RCCEx_PLL2_Config>
 8108a6c:	4603      	mov	r3, r0
 8108a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108a72:	e003      	b.n	8108a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8108a74:	2301      	movs	r3, #1
 8108a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d10d      	bne.n	8108aa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108a84:	4b05      	ldr	r3, [pc, #20]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8108a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108a92:	4a02      	ldr	r2, [pc, #8]	@ (8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a94:	430b      	orrs	r3, r1
 8108a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108a98:	e006      	b.n	8108aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8108a9a:	bf00      	nop
 8108a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8108aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8108ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8108ab6:	2300      	movs	r3, #0
 8108ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8108aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8108abe:	460b      	mov	r3, r1
 8108ac0:	4313      	orrs	r3, r2
 8108ac2:	d00c      	beq.n	8108ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ac8:	3328      	adds	r3, #40	@ 0x28
 8108aca:	2102      	movs	r1, #2
 8108acc:	4618      	mov	r0, r3
 8108ace:	f000 fa65 	bl	8108f9c <RCCEx_PLL3_Config>
 8108ad2:	4603      	mov	r3, r0
 8108ad4:	2b00      	cmp	r3, #0
 8108ad6:	d002      	beq.n	8108ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8108ad8:	2301      	movs	r3, #1
 8108ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8108ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8108aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8108aec:	2300      	movs	r3, #0
 8108aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8108af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8108af4:	460b      	mov	r3, r1
 8108af6:	4313      	orrs	r3, r2
 8108af8:	d038      	beq.n	8108b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8108afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108b06:	d018      	beq.n	8108b3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8108b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108b0c:	d811      	bhi.n	8108b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108b12:	d014      	beq.n	8108b3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8108b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108b18:	d80b      	bhi.n	8108b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108b1a:	2b00      	cmp	r3, #0
 8108b1c:	d011      	beq.n	8108b42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8108b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108b22:	d106      	bne.n	8108b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108b24:	4bc3      	ldr	r3, [pc, #780]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b28:	4ac2      	ldr	r2, [pc, #776]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8108b30:	e008      	b.n	8108b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108b32:	2301      	movs	r3, #1
 8108b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108b38:	e004      	b.n	8108b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b3a:	bf00      	nop
 8108b3c:	e002      	b.n	8108b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b3e:	bf00      	nop
 8108b40:	e000      	b.n	8108b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b48:	2b00      	cmp	r3, #0
 8108b4a:	d10b      	bne.n	8108b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8108b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108b5c:	4ab5      	ldr	r2, [pc, #724]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b5e:	430b      	orrs	r3, r1
 8108b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8108b62:	e003      	b.n	8108b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8108b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8108b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8108b7a:	2300      	movs	r3, #0
 8108b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8108b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8108b82:	460b      	mov	r3, r1
 8108b84:	4313      	orrs	r3, r2
 8108b86:	d009      	beq.n	8108b9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108b88:	4baa      	ldr	r3, [pc, #680]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8108b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8108b96:	4aa7      	ldr	r2, [pc, #668]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b98:	430b      	orrs	r3, r1
 8108b9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8108b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8108ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8108baa:	2300      	movs	r3, #0
 8108bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8108bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8108bb2:	460b      	mov	r3, r1
 8108bb4:	4313      	orrs	r3, r2
 8108bb6:	d00a      	beq.n	8108bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8108bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bba:	691b      	ldr	r3, [r3, #16]
 8108bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8108bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8108bc8:	4a9a      	ldr	r2, [pc, #616]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bca:	430b      	orrs	r3, r1
 8108bcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8108bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8108bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108bdc:	2300      	movs	r3, #0
 8108bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108be0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8108be4:	460b      	mov	r3, r1
 8108be6:	4313      	orrs	r3, r2
 8108be8:	d009      	beq.n	8108bfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8108bea:	4b92      	ldr	r3, [pc, #584]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108bee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8108bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bfa:	430b      	orrs	r3, r1
 8108bfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8108bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8108c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8108c0c:	2300      	movs	r3, #0
 8108c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8108c10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8108c14:	460b      	mov	r3, r1
 8108c16:	4313      	orrs	r3, r2
 8108c18:	d00e      	beq.n	8108c38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8108c1a:	4b86      	ldr	r3, [pc, #536]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c1c:	691b      	ldr	r3, [r3, #16]
 8108c1e:	4a85      	ldr	r2, [pc, #532]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8108c24:	6113      	str	r3, [r2, #16]
 8108c26:	4b83      	ldr	r3, [pc, #524]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c28:	6919      	ldr	r1, [r3, #16]
 8108c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8108c32:	4a80      	ldr	r2, [pc, #512]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c34:	430b      	orrs	r3, r1
 8108c36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8108c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108c46:	2300      	movs	r3, #0
 8108c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8108c4e:	460b      	mov	r3, r1
 8108c50:	4313      	orrs	r3, r2
 8108c52:	d009      	beq.n	8108c68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8108c54:	4b77      	ldr	r3, [pc, #476]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8108c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c62:	4a74      	ldr	r2, [pc, #464]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c64:	430b      	orrs	r3, r1
 8108c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8108c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8108c76:	2300      	movs	r3, #0
 8108c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8108c7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8108c7e:	460b      	mov	r3, r1
 8108c80:	4313      	orrs	r3, r2
 8108c82:	d00a      	beq.n	8108c9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8108c84:	4b6b      	ldr	r3, [pc, #428]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8108c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8108c94:	4a67      	ldr	r2, [pc, #412]	@ (8108e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c96:	430b      	orrs	r3, r1
 8108c98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8108c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ca2:	2100      	movs	r1, #0
 8108ca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8108ca6:	f003 0301 	and.w	r3, r3, #1
 8108caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8108cac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8108cb0:	460b      	mov	r3, r1
 8108cb2:	4313      	orrs	r3, r2
 8108cb4:	d011      	beq.n	8108cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cba:	3308      	adds	r3, #8
 8108cbc:	2100      	movs	r1, #0
 8108cbe:	4618      	mov	r0, r3
 8108cc0:	f000 f8ba 	bl	8108e38 <RCCEx_PLL2_Config>
 8108cc4:	4603      	mov	r3, r0
 8108cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108cce:	2b00      	cmp	r3, #0
 8108cd0:	d003      	beq.n	8108cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8108cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ce2:	2100      	movs	r1, #0
 8108ce4:	6239      	str	r1, [r7, #32]
 8108ce6:	f003 0302 	and.w	r3, r3, #2
 8108cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8108cec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8108cf0:	460b      	mov	r3, r1
 8108cf2:	4313      	orrs	r3, r2
 8108cf4:	d011      	beq.n	8108d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cfa:	3308      	adds	r3, #8
 8108cfc:	2101      	movs	r1, #1
 8108cfe:	4618      	mov	r0, r3
 8108d00:	f000 f89a 	bl	8108e38 <RCCEx_PLL2_Config>
 8108d04:	4603      	mov	r3, r0
 8108d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d0e:	2b00      	cmp	r3, #0
 8108d10:	d003      	beq.n	8108d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8108d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d22:	2100      	movs	r1, #0
 8108d24:	61b9      	str	r1, [r7, #24]
 8108d26:	f003 0304 	and.w	r3, r3, #4
 8108d2a:	61fb      	str	r3, [r7, #28]
 8108d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108d30:	460b      	mov	r3, r1
 8108d32:	4313      	orrs	r3, r2
 8108d34:	d011      	beq.n	8108d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d3a:	3308      	adds	r3, #8
 8108d3c:	2102      	movs	r1, #2
 8108d3e:	4618      	mov	r0, r3
 8108d40:	f000 f87a 	bl	8108e38 <RCCEx_PLL2_Config>
 8108d44:	4603      	mov	r3, r0
 8108d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d4e:	2b00      	cmp	r3, #0
 8108d50:	d003      	beq.n	8108d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8108d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d62:	2100      	movs	r1, #0
 8108d64:	6139      	str	r1, [r7, #16]
 8108d66:	f003 0308 	and.w	r3, r3, #8
 8108d6a:	617b      	str	r3, [r7, #20]
 8108d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108d70:	460b      	mov	r3, r1
 8108d72:	4313      	orrs	r3, r2
 8108d74:	d011      	beq.n	8108d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d7a:	3328      	adds	r3, #40	@ 0x28
 8108d7c:	2100      	movs	r1, #0
 8108d7e:	4618      	mov	r0, r3
 8108d80:	f000 f90c 	bl	8108f9c <RCCEx_PLL3_Config>
 8108d84:	4603      	mov	r3, r0
 8108d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8108d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d8e:	2b00      	cmp	r3, #0
 8108d90:	d003      	beq.n	8108d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8108d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108da2:	2100      	movs	r1, #0
 8108da4:	60b9      	str	r1, [r7, #8]
 8108da6:	f003 0310 	and.w	r3, r3, #16
 8108daa:	60fb      	str	r3, [r7, #12]
 8108dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8108db0:	460b      	mov	r3, r1
 8108db2:	4313      	orrs	r3, r2
 8108db4:	d011      	beq.n	8108dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dba:	3328      	adds	r3, #40	@ 0x28
 8108dbc:	2101      	movs	r1, #1
 8108dbe:	4618      	mov	r0, r3
 8108dc0:	f000 f8ec 	bl	8108f9c <RCCEx_PLL3_Config>
 8108dc4:	4603      	mov	r3, r0
 8108dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108dce:	2b00      	cmp	r3, #0
 8108dd0:	d003      	beq.n	8108dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8108dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108de2:	2100      	movs	r1, #0
 8108de4:	6039      	str	r1, [r7, #0]
 8108de6:	f003 0320 	and.w	r3, r3, #32
 8108dea:	607b      	str	r3, [r7, #4]
 8108dec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8108df0:	460b      	mov	r3, r1
 8108df2:	4313      	orrs	r3, r2
 8108df4:	d011      	beq.n	8108e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dfa:	3328      	adds	r3, #40	@ 0x28
 8108dfc:	2102      	movs	r1, #2
 8108dfe:	4618      	mov	r0, r3
 8108e00:	f000 f8cc 	bl	8108f9c <RCCEx_PLL3_Config>
 8108e04:	4603      	mov	r3, r0
 8108e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e0e:	2b00      	cmp	r3, #0
 8108e10:	d003      	beq.n	8108e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8108e1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8108e1e:	2b00      	cmp	r3, #0
 8108e20:	d101      	bne.n	8108e26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8108e22:	2300      	movs	r3, #0
 8108e24:	e000      	b.n	8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8108e26:	2301      	movs	r3, #1
}
 8108e28:	4618      	mov	r0, r3
 8108e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8108e2e:	46bd      	mov	sp, r7
 8108e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108e34:	58024400 	.word	0x58024400

08108e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108e38:	b580      	push	{r7, lr}
 8108e3a:	b084      	sub	sp, #16
 8108e3c:	af00      	add	r7, sp, #0
 8108e3e:	6078      	str	r0, [r7, #4]
 8108e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108e42:	2300      	movs	r3, #0
 8108e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108e46:	4b54      	ldr	r3, [pc, #336]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e4a:	f003 0303 	and.w	r3, r3, #3
 8108e4e:	2b03      	cmp	r3, #3
 8108e50:	d101      	bne.n	8108e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108e52:	2301      	movs	r3, #1
 8108e54:	e09b      	b.n	8108f8e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108e56:	4b50      	ldr	r3, [pc, #320]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e58:	681b      	ldr	r3, [r3, #0]
 8108e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108e62:	f7f9 f82f 	bl	8101ec4 <HAL_GetTick>
 8108e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e68:	e008      	b.n	8108e7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108e6a:	f7f9 f82b 	bl	8101ec4 <HAL_GetTick>
 8108e6e:	4602      	mov	r2, r0
 8108e70:	68bb      	ldr	r3, [r7, #8]
 8108e72:	1ad3      	subs	r3, r2, r3
 8108e74:	2b02      	cmp	r3, #2
 8108e76:	d901      	bls.n	8108e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108e78:	2303      	movs	r3, #3
 8108e7a:	e088      	b.n	8108f8e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e7c:	4b46      	ldr	r3, [pc, #280]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108e84:	2b00      	cmp	r3, #0
 8108e86:	d1f0      	bne.n	8108e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108e88:	4b43      	ldr	r3, [pc, #268]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	681b      	ldr	r3, [r3, #0]
 8108e94:	031b      	lsls	r3, r3, #12
 8108e96:	4940      	ldr	r1, [pc, #256]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108e98:	4313      	orrs	r3, r2
 8108e9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	685b      	ldr	r3, [r3, #4]
 8108ea0:	3b01      	subs	r3, #1
 8108ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108ea6:	687b      	ldr	r3, [r7, #4]
 8108ea8:	689b      	ldr	r3, [r3, #8]
 8108eaa:	3b01      	subs	r3, #1
 8108eac:	025b      	lsls	r3, r3, #9
 8108eae:	b29b      	uxth	r3, r3
 8108eb0:	431a      	orrs	r2, r3
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	68db      	ldr	r3, [r3, #12]
 8108eb6:	3b01      	subs	r3, #1
 8108eb8:	041b      	lsls	r3, r3, #16
 8108eba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108ebe:	431a      	orrs	r2, r3
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	691b      	ldr	r3, [r3, #16]
 8108ec4:	3b01      	subs	r3, #1
 8108ec6:	061b      	lsls	r3, r3, #24
 8108ec8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108ecc:	4932      	ldr	r1, [pc, #200]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ece:	4313      	orrs	r3, r2
 8108ed0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108ed2:	4b31      	ldr	r3, [pc, #196]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ed6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	695b      	ldr	r3, [r3, #20]
 8108ede:	492e      	ldr	r1, [pc, #184]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ee0:	4313      	orrs	r3, r2
 8108ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ee8:	f023 0220 	bic.w	r2, r3, #32
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	699b      	ldr	r3, [r3, #24]
 8108ef0:	4929      	ldr	r1, [pc, #164]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ef2:	4313      	orrs	r3, r2
 8108ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108ef6:	4b28      	ldr	r3, [pc, #160]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108efa:	4a27      	ldr	r2, [pc, #156]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108efc:	f023 0310 	bic.w	r3, r3, #16
 8108f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108f02:	4b25      	ldr	r3, [pc, #148]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108f0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108f0e:	687a      	ldr	r2, [r7, #4]
 8108f10:	69d2      	ldr	r2, [r2, #28]
 8108f12:	00d2      	lsls	r2, r2, #3
 8108f14:	4920      	ldr	r1, [pc, #128]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f16:	4313      	orrs	r3, r2
 8108f18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f20:	f043 0310 	orr.w	r3, r3, #16
 8108f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108f26:	683b      	ldr	r3, [r7, #0]
 8108f28:	2b00      	cmp	r3, #0
 8108f2a:	d106      	bne.n	8108f3a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f30:	4a19      	ldr	r2, [pc, #100]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108f38:	e00f      	b.n	8108f5a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108f3a:	683b      	ldr	r3, [r7, #0]
 8108f3c:	2b01      	cmp	r3, #1
 8108f3e:	d106      	bne.n	8108f4e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108f40:	4b15      	ldr	r3, [pc, #84]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f44:	4a14      	ldr	r2, [pc, #80]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108f4c:	e005      	b.n	8108f5a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108f4e:	4b12      	ldr	r3, [pc, #72]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f52:	4a11      	ldr	r2, [pc, #68]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f5c:	681b      	ldr	r3, [r3, #0]
 8108f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f66:	f7f8 ffad 	bl	8101ec4 <HAL_GetTick>
 8108f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f6c:	e008      	b.n	8108f80 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108f6e:	f7f8 ffa9 	bl	8101ec4 <HAL_GetTick>
 8108f72:	4602      	mov	r2, r0
 8108f74:	68bb      	ldr	r3, [r7, #8]
 8108f76:	1ad3      	subs	r3, r2, r3
 8108f78:	2b02      	cmp	r3, #2
 8108f7a:	d901      	bls.n	8108f80 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108f7c:	2303      	movs	r3, #3
 8108f7e:	e006      	b.n	8108f8e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f80:	4b05      	ldr	r3, [pc, #20]	@ (8108f98 <RCCEx_PLL2_Config+0x160>)
 8108f82:	681b      	ldr	r3, [r3, #0]
 8108f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d0f0      	beq.n	8108f6e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8108f8e:	4618      	mov	r0, r3
 8108f90:	3710      	adds	r7, #16
 8108f92:	46bd      	mov	sp, r7
 8108f94:	bd80      	pop	{r7, pc}
 8108f96:	bf00      	nop
 8108f98:	58024400 	.word	0x58024400

08108f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108f9c:	b580      	push	{r7, lr}
 8108f9e:	b084      	sub	sp, #16
 8108fa0:	af00      	add	r7, sp, #0
 8108fa2:	6078      	str	r0, [r7, #4]
 8108fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108fa6:	2300      	movs	r3, #0
 8108fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108faa:	4b54      	ldr	r3, [pc, #336]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108fae:	f003 0303 	and.w	r3, r3, #3
 8108fb2:	2b03      	cmp	r3, #3
 8108fb4:	d101      	bne.n	8108fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108fb6:	2301      	movs	r3, #1
 8108fb8:	e09b      	b.n	81090f2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108fba:	4b50      	ldr	r3, [pc, #320]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108fbc:	681b      	ldr	r3, [r3, #0]
 8108fbe:	4a4f      	ldr	r2, [pc, #316]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108fc6:	f7f8 ff7d 	bl	8101ec4 <HAL_GetTick>
 8108fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108fcc:	e008      	b.n	8108fe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108fce:	f7f8 ff79 	bl	8101ec4 <HAL_GetTick>
 8108fd2:	4602      	mov	r2, r0
 8108fd4:	68bb      	ldr	r3, [r7, #8]
 8108fd6:	1ad3      	subs	r3, r2, r3
 8108fd8:	2b02      	cmp	r3, #2
 8108fda:	d901      	bls.n	8108fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108fdc:	2303      	movs	r3, #3
 8108fde:	e088      	b.n	81090f2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108fe0:	4b46      	ldr	r3, [pc, #280]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108fe2:	681b      	ldr	r3, [r3, #0]
 8108fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	d1f0      	bne.n	8108fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108fec:	4b43      	ldr	r3, [pc, #268]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ff0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108ff4:	687b      	ldr	r3, [r7, #4]
 8108ff6:	681b      	ldr	r3, [r3, #0]
 8108ff8:	051b      	lsls	r3, r3, #20
 8108ffa:	4940      	ldr	r1, [pc, #256]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8108ffc:	4313      	orrs	r3, r2
 8108ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	685b      	ldr	r3, [r3, #4]
 8109004:	3b01      	subs	r3, #1
 8109006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	689b      	ldr	r3, [r3, #8]
 810900e:	3b01      	subs	r3, #1
 8109010:	025b      	lsls	r3, r3, #9
 8109012:	b29b      	uxth	r3, r3
 8109014:	431a      	orrs	r2, r3
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	68db      	ldr	r3, [r3, #12]
 810901a:	3b01      	subs	r3, #1
 810901c:	041b      	lsls	r3, r3, #16
 810901e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109022:	431a      	orrs	r2, r3
 8109024:	687b      	ldr	r3, [r7, #4]
 8109026:	691b      	ldr	r3, [r3, #16]
 8109028:	3b01      	subs	r3, #1
 810902a:	061b      	lsls	r3, r3, #24
 810902c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109030:	4932      	ldr	r1, [pc, #200]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109032:	4313      	orrs	r3, r2
 8109034:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109036:	4b31      	ldr	r3, [pc, #196]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810903a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	695b      	ldr	r3, [r3, #20]
 8109042:	492e      	ldr	r1, [pc, #184]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109044:	4313      	orrs	r3, r2
 8109046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109048:	4b2c      	ldr	r3, [pc, #176]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 810904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810904c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	699b      	ldr	r3, [r3, #24]
 8109054:	4929      	ldr	r1, [pc, #164]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109056:	4313      	orrs	r3, r2
 8109058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810905a:	4b28      	ldr	r3, [pc, #160]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 810905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810905e:	4a27      	ldr	r2, [pc, #156]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109066:	4b25      	ldr	r3, [pc, #148]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810906a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810906e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8109072:	687a      	ldr	r2, [r7, #4]
 8109074:	69d2      	ldr	r2, [r2, #28]
 8109076:	00d2      	lsls	r2, r2, #3
 8109078:	4920      	ldr	r1, [pc, #128]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 810907a:	4313      	orrs	r3, r2
 810907c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810907e:	4b1f      	ldr	r3, [pc, #124]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109082:	4a1e      	ldr	r2, [pc, #120]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810908a:	683b      	ldr	r3, [r7, #0]
 810908c:	2b00      	cmp	r3, #0
 810908e:	d106      	bne.n	810909e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109090:	4b1a      	ldr	r3, [pc, #104]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109094:	4a19      	ldr	r2, [pc, #100]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 8109096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810909a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810909c:	e00f      	b.n	81090be <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810909e:	683b      	ldr	r3, [r7, #0]
 81090a0:	2b01      	cmp	r3, #1
 81090a2:	d106      	bne.n	81090b2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81090a4:	4b15      	ldr	r3, [pc, #84]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81090a8:	4a14      	ldr	r2, [pc, #80]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81090ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81090b0:	e005      	b.n	81090be <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81090b2:	4b12      	ldr	r3, [pc, #72]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81090b6:	4a11      	ldr	r2, [pc, #68]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81090bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81090be:	4b0f      	ldr	r3, [pc, #60]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090c0:	681b      	ldr	r3, [r3, #0]
 81090c2:	4a0e      	ldr	r2, [pc, #56]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81090c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81090ca:	f7f8 fefb 	bl	8101ec4 <HAL_GetTick>
 81090ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81090d0:	e008      	b.n	81090e4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81090d2:	f7f8 fef7 	bl	8101ec4 <HAL_GetTick>
 81090d6:	4602      	mov	r2, r0
 81090d8:	68bb      	ldr	r3, [r7, #8]
 81090da:	1ad3      	subs	r3, r2, r3
 81090dc:	2b02      	cmp	r3, #2
 81090de:	d901      	bls.n	81090e4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81090e0:	2303      	movs	r3, #3
 81090e2:	e006      	b.n	81090f2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81090e4:	4b05      	ldr	r3, [pc, #20]	@ (81090fc <RCCEx_PLL3_Config+0x160>)
 81090e6:	681b      	ldr	r3, [r3, #0]
 81090e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81090ec:	2b00      	cmp	r3, #0
 81090ee:	d0f0      	beq.n	81090d2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81090f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81090f2:	4618      	mov	r0, r3
 81090f4:	3710      	adds	r7, #16
 81090f6:	46bd      	mov	sp, r7
 81090f8:	bd80      	pop	{r7, pc}
 81090fa:	bf00      	nop
 81090fc:	58024400 	.word	0x58024400

08109100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109100:	b580      	push	{r7, lr}
 8109102:	b084      	sub	sp, #16
 8109104:	af00      	add	r7, sp, #0
 8109106:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	2b00      	cmp	r3, #0
 810910c:	d101      	bne.n	8109112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810910e:	2301      	movs	r3, #1
 8109110:	e10f      	b.n	8109332 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	2200      	movs	r2, #0
 8109116:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109118:	687b      	ldr	r3, [r7, #4]
 810911a:	681b      	ldr	r3, [r3, #0]
 810911c:	4a87      	ldr	r2, [pc, #540]	@ (810933c <HAL_SPI_Init+0x23c>)
 810911e:	4293      	cmp	r3, r2
 8109120:	d00f      	beq.n	8109142 <HAL_SPI_Init+0x42>
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	4a86      	ldr	r2, [pc, #536]	@ (8109340 <HAL_SPI_Init+0x240>)
 8109128:	4293      	cmp	r3, r2
 810912a:	d00a      	beq.n	8109142 <HAL_SPI_Init+0x42>
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	681b      	ldr	r3, [r3, #0]
 8109130:	4a84      	ldr	r2, [pc, #528]	@ (8109344 <HAL_SPI_Init+0x244>)
 8109132:	4293      	cmp	r3, r2
 8109134:	d005      	beq.n	8109142 <HAL_SPI_Init+0x42>
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	68db      	ldr	r3, [r3, #12]
 810913a:	2b0f      	cmp	r3, #15
 810913c:	d901      	bls.n	8109142 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810913e:	2301      	movs	r3, #1
 8109140:	e0f7      	b.n	8109332 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109142:	6878      	ldr	r0, [r7, #4]
 8109144:	f000 f900 	bl	8109348 <SPI_GetPacketSize>
 8109148:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	681b      	ldr	r3, [r3, #0]
 810914e:	4a7b      	ldr	r2, [pc, #492]	@ (810933c <HAL_SPI_Init+0x23c>)
 8109150:	4293      	cmp	r3, r2
 8109152:	d00c      	beq.n	810916e <HAL_SPI_Init+0x6e>
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	681b      	ldr	r3, [r3, #0]
 8109158:	4a79      	ldr	r2, [pc, #484]	@ (8109340 <HAL_SPI_Init+0x240>)
 810915a:	4293      	cmp	r3, r2
 810915c:	d007      	beq.n	810916e <HAL_SPI_Init+0x6e>
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	681b      	ldr	r3, [r3, #0]
 8109162:	4a78      	ldr	r2, [pc, #480]	@ (8109344 <HAL_SPI_Init+0x244>)
 8109164:	4293      	cmp	r3, r2
 8109166:	d002      	beq.n	810916e <HAL_SPI_Init+0x6e>
 8109168:	68fb      	ldr	r3, [r7, #12]
 810916a:	2b08      	cmp	r3, #8
 810916c:	d811      	bhi.n	8109192 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109172:	4a72      	ldr	r2, [pc, #456]	@ (810933c <HAL_SPI_Init+0x23c>)
 8109174:	4293      	cmp	r3, r2
 8109176:	d009      	beq.n	810918c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109178:	687b      	ldr	r3, [r7, #4]
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	4a70      	ldr	r2, [pc, #448]	@ (8109340 <HAL_SPI_Init+0x240>)
 810917e:	4293      	cmp	r3, r2
 8109180:	d004      	beq.n	810918c <HAL_SPI_Init+0x8c>
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	4a6f      	ldr	r2, [pc, #444]	@ (8109344 <HAL_SPI_Init+0x244>)
 8109188:	4293      	cmp	r3, r2
 810918a:	d104      	bne.n	8109196 <HAL_SPI_Init+0x96>
 810918c:	68fb      	ldr	r3, [r7, #12]
 810918e:	2b10      	cmp	r3, #16
 8109190:	d901      	bls.n	8109196 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8109192:	2301      	movs	r3, #1
 8109194:	e0cd      	b.n	8109332 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810919c:	b2db      	uxtb	r3, r3
 810919e:	2b00      	cmp	r3, #0
 81091a0:	d106      	bne.n	81091b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81091a2:	687b      	ldr	r3, [r7, #4]
 81091a4:	2200      	movs	r2, #0
 81091a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81091aa:	6878      	ldr	r0, [r7, #4]
 81091ac:	f7f8 fc3a 	bl	8101a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	2202      	movs	r2, #2
 81091b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	681b      	ldr	r3, [r3, #0]
 81091bc:	681a      	ldr	r2, [r3, #0]
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	681b      	ldr	r3, [r3, #0]
 81091c2:	f022 0201 	bic.w	r2, r2, #1
 81091c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	681b      	ldr	r3, [r3, #0]
 81091cc:	689b      	ldr	r3, [r3, #8]
 81091ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81091d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	699b      	ldr	r3, [r3, #24]
 81091d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81091dc:	d119      	bne.n	8109212 <HAL_SPI_Init+0x112>
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	685b      	ldr	r3, [r3, #4]
 81091e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81091e6:	d103      	bne.n	81091f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81091e8:	687b      	ldr	r3, [r7, #4]
 81091ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81091ec:	2b00      	cmp	r3, #0
 81091ee:	d008      	beq.n	8109202 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81091f4:	2b00      	cmp	r3, #0
 81091f6:	d10c      	bne.n	8109212 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81091f8:	687b      	ldr	r3, [r7, #4]
 81091fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81091fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109200:	d107      	bne.n	8109212 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109202:	687b      	ldr	r3, [r7, #4]
 8109204:	681b      	ldr	r3, [r3, #0]
 8109206:	681a      	ldr	r2, [r3, #0]
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	681b      	ldr	r3, [r3, #0]
 810920c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8109210:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	685b      	ldr	r3, [r3, #4]
 8109216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810921a:	2b00      	cmp	r3, #0
 810921c:	d00f      	beq.n	810923e <HAL_SPI_Init+0x13e>
 810921e:	687b      	ldr	r3, [r7, #4]
 8109220:	68db      	ldr	r3, [r3, #12]
 8109222:	2b06      	cmp	r3, #6
 8109224:	d90b      	bls.n	810923e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	681b      	ldr	r3, [r3, #0]
 810922a:	681b      	ldr	r3, [r3, #0]
 810922c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	681b      	ldr	r3, [r3, #0]
 8109238:	430a      	orrs	r2, r1
 810923a:	601a      	str	r2, [r3, #0]
 810923c:	e007      	b.n	810924e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	681a      	ldr	r2, [r3, #0]
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	681b      	ldr	r3, [r3, #0]
 8109248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810924c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	69da      	ldr	r2, [r3, #28]
 8109252:	687b      	ldr	r3, [r7, #4]
 8109254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109256:	431a      	orrs	r2, r3
 8109258:	68bb      	ldr	r3, [r7, #8]
 810925a:	431a      	orrs	r2, r3
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109260:	ea42 0103 	orr.w	r1, r2, r3
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	68da      	ldr	r2, [r3, #12]
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	430a      	orrs	r2, r1
 810926e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109274:	687b      	ldr	r3, [r7, #4]
 8109276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109278:	431a      	orrs	r2, r3
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810927e:	431a      	orrs	r2, r3
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	699b      	ldr	r3, [r3, #24]
 8109284:	431a      	orrs	r2, r3
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	691b      	ldr	r3, [r3, #16]
 810928a:	431a      	orrs	r2, r3
 810928c:	687b      	ldr	r3, [r7, #4]
 810928e:	695b      	ldr	r3, [r3, #20]
 8109290:	431a      	orrs	r2, r3
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	6a1b      	ldr	r3, [r3, #32]
 8109296:	431a      	orrs	r2, r3
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	685b      	ldr	r3, [r3, #4]
 810929c:	431a      	orrs	r2, r3
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81092a2:	431a      	orrs	r2, r3
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	689b      	ldr	r3, [r3, #8]
 81092a8:	431a      	orrs	r2, r3
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81092ae:	ea42 0103 	orr.w	r1, r2, r3
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	681b      	ldr	r3, [r3, #0]
 81092ba:	430a      	orrs	r2, r1
 81092bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	685b      	ldr	r3, [r3, #4]
 81092c2:	2b00      	cmp	r3, #0
 81092c4:	d113      	bne.n	81092ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	681b      	ldr	r3, [r3, #0]
 81092ca:	689b      	ldr	r3, [r3, #8]
 81092cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	681b      	ldr	r3, [r3, #0]
 81092d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81092d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	689b      	ldr	r3, [r3, #8]
 81092e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	681b      	ldr	r3, [r3, #0]
 81092e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81092ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	681b      	ldr	r3, [r3, #0]
 81092f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81092f4:	687b      	ldr	r3, [r7, #4]
 81092f6:	681b      	ldr	r3, [r3, #0]
 81092f8:	f022 0201 	bic.w	r2, r2, #1
 81092fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	685b      	ldr	r3, [r3, #4]
 8109302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109306:	2b00      	cmp	r3, #0
 8109308:	d00a      	beq.n	8109320 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	68db      	ldr	r3, [r3, #12]
 8109310:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109318:	687b      	ldr	r3, [r7, #4]
 810931a:	681b      	ldr	r3, [r3, #0]
 810931c:	430a      	orrs	r2, r1
 810931e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	2200      	movs	r2, #0
 8109324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	2201      	movs	r2, #1
 810932c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8109330:	2300      	movs	r3, #0
}
 8109332:	4618      	mov	r0, r3
 8109334:	3710      	adds	r7, #16
 8109336:	46bd      	mov	sp, r7
 8109338:	bd80      	pop	{r7, pc}
 810933a:	bf00      	nop
 810933c:	40013000 	.word	0x40013000
 8109340:	40003800 	.word	0x40003800
 8109344:	40003c00 	.word	0x40003c00

08109348 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8109348:	b480      	push	{r7}
 810934a:	b085      	sub	sp, #20
 810934c:	af00      	add	r7, sp, #0
 810934e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109354:	095b      	lsrs	r3, r3, #5
 8109356:	3301      	adds	r3, #1
 8109358:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	68db      	ldr	r3, [r3, #12]
 810935e:	3301      	adds	r3, #1
 8109360:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8109362:	68bb      	ldr	r3, [r7, #8]
 8109364:	3307      	adds	r3, #7
 8109366:	08db      	lsrs	r3, r3, #3
 8109368:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810936a:	68bb      	ldr	r3, [r7, #8]
 810936c:	68fa      	ldr	r2, [r7, #12]
 810936e:	fb02 f303 	mul.w	r3, r2, r3
}
 8109372:	4618      	mov	r0, r3
 8109374:	3714      	adds	r7, #20
 8109376:	46bd      	mov	sp, r7
 8109378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810937c:	4770      	bx	lr

0810937e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810937e:	b580      	push	{r7, lr}
 8109380:	b082      	sub	sp, #8
 8109382:	af00      	add	r7, sp, #0
 8109384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	2b00      	cmp	r3, #0
 810938a:	d101      	bne.n	8109390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810938c:	2301      	movs	r3, #1
 810938e:	e049      	b.n	8109424 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109396:	b2db      	uxtb	r3, r3
 8109398:	2b00      	cmp	r3, #0
 810939a:	d106      	bne.n	81093aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	2200      	movs	r2, #0
 81093a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81093a4:	6878      	ldr	r0, [r7, #4]
 81093a6:	f7f8 fc95 	bl	8101cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	2202      	movs	r2, #2
 81093ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	681a      	ldr	r2, [r3, #0]
 81093b6:	687b      	ldr	r3, [r7, #4]
 81093b8:	3304      	adds	r3, #4
 81093ba:	4619      	mov	r1, r3
 81093bc:	4610      	mov	r0, r2
 81093be:	f000 fad5 	bl	810996c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	2201      	movs	r2, #1
 81093c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81093ca:	687b      	ldr	r3, [r7, #4]
 81093cc:	2201      	movs	r2, #1
 81093ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	2201      	movs	r2, #1
 81093d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	2201      	movs	r2, #1
 81093de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	2201      	movs	r2, #1
 81093e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	2201      	movs	r2, #1
 81093ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	2201      	movs	r2, #1
 81093f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	2201      	movs	r2, #1
 81093fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	2201      	movs	r2, #1
 8109406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	2201      	movs	r2, #1
 810940e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	2201      	movs	r2, #1
 8109416:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	2201      	movs	r2, #1
 810941e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109422:	2300      	movs	r3, #0
}
 8109424:	4618      	mov	r0, r3
 8109426:	3708      	adds	r7, #8
 8109428:	46bd      	mov	sp, r7
 810942a:	bd80      	pop	{r7, pc}

0810942c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810942c:	b480      	push	{r7}
 810942e:	b085      	sub	sp, #20
 8109430:	af00      	add	r7, sp, #0
 8109432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810943a:	b2db      	uxtb	r3, r3
 810943c:	2b01      	cmp	r3, #1
 810943e:	d001      	beq.n	8109444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109440:	2301      	movs	r3, #1
 8109442:	e054      	b.n	81094ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	2202      	movs	r2, #2
 8109448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810944c:	687b      	ldr	r3, [r7, #4]
 810944e:	681b      	ldr	r3, [r3, #0]
 8109450:	68da      	ldr	r2, [r3, #12]
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	681b      	ldr	r3, [r3, #0]
 8109456:	f042 0201 	orr.w	r2, r2, #1
 810945a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810945c:	687b      	ldr	r3, [r7, #4]
 810945e:	681b      	ldr	r3, [r3, #0]
 8109460:	4a26      	ldr	r2, [pc, #152]	@ (81094fc <HAL_TIM_Base_Start_IT+0xd0>)
 8109462:	4293      	cmp	r3, r2
 8109464:	d022      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 8109466:	687b      	ldr	r3, [r7, #4]
 8109468:	681b      	ldr	r3, [r3, #0]
 810946a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810946e:	d01d      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	681b      	ldr	r3, [r3, #0]
 8109474:	4a22      	ldr	r2, [pc, #136]	@ (8109500 <HAL_TIM_Base_Start_IT+0xd4>)
 8109476:	4293      	cmp	r3, r2
 8109478:	d018      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 810947a:	687b      	ldr	r3, [r7, #4]
 810947c:	681b      	ldr	r3, [r3, #0]
 810947e:	4a21      	ldr	r2, [pc, #132]	@ (8109504 <HAL_TIM_Base_Start_IT+0xd8>)
 8109480:	4293      	cmp	r3, r2
 8109482:	d013      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	681b      	ldr	r3, [r3, #0]
 8109488:	4a1f      	ldr	r2, [pc, #124]	@ (8109508 <HAL_TIM_Base_Start_IT+0xdc>)
 810948a:	4293      	cmp	r3, r2
 810948c:	d00e      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	681b      	ldr	r3, [r3, #0]
 8109492:	4a1e      	ldr	r2, [pc, #120]	@ (810950c <HAL_TIM_Base_Start_IT+0xe0>)
 8109494:	4293      	cmp	r3, r2
 8109496:	d009      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	681b      	ldr	r3, [r3, #0]
 810949c:	4a1c      	ldr	r2, [pc, #112]	@ (8109510 <HAL_TIM_Base_Start_IT+0xe4>)
 810949e:	4293      	cmp	r3, r2
 81094a0:	d004      	beq.n	81094ac <HAL_TIM_Base_Start_IT+0x80>
 81094a2:	687b      	ldr	r3, [r7, #4]
 81094a4:	681b      	ldr	r3, [r3, #0]
 81094a6:	4a1b      	ldr	r2, [pc, #108]	@ (8109514 <HAL_TIM_Base_Start_IT+0xe8>)
 81094a8:	4293      	cmp	r3, r2
 81094aa:	d115      	bne.n	81094d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	689a      	ldr	r2, [r3, #8]
 81094b2:	4b19      	ldr	r3, [pc, #100]	@ (8109518 <HAL_TIM_Base_Start_IT+0xec>)
 81094b4:	4013      	ands	r3, r2
 81094b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	2b06      	cmp	r3, #6
 81094bc:	d015      	beq.n	81094ea <HAL_TIM_Base_Start_IT+0xbe>
 81094be:	68fb      	ldr	r3, [r7, #12]
 81094c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81094c4:	d011      	beq.n	81094ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	681b      	ldr	r3, [r3, #0]
 81094ca:	681a      	ldr	r2, [r3, #0]
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	681b      	ldr	r3, [r3, #0]
 81094d0:	f042 0201 	orr.w	r2, r2, #1
 81094d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094d6:	e008      	b.n	81094ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81094d8:	687b      	ldr	r3, [r7, #4]
 81094da:	681b      	ldr	r3, [r3, #0]
 81094dc:	681a      	ldr	r2, [r3, #0]
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	f042 0201 	orr.w	r2, r2, #1
 81094e6:	601a      	str	r2, [r3, #0]
 81094e8:	e000      	b.n	81094ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81094ec:	2300      	movs	r3, #0
}
 81094ee:	4618      	mov	r0, r3
 81094f0:	3714      	adds	r7, #20
 81094f2:	46bd      	mov	sp, r7
 81094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094f8:	4770      	bx	lr
 81094fa:	bf00      	nop
 81094fc:	40010000 	.word	0x40010000
 8109500:	40000400 	.word	0x40000400
 8109504:	40000800 	.word	0x40000800
 8109508:	40000c00 	.word	0x40000c00
 810950c:	40010400 	.word	0x40010400
 8109510:	40001800 	.word	0x40001800
 8109514:	40014000 	.word	0x40014000
 8109518:	00010007 	.word	0x00010007

0810951c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810951c:	b580      	push	{r7, lr}
 810951e:	b084      	sub	sp, #16
 8109520:	af00      	add	r7, sp, #0
 8109522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	681b      	ldr	r3, [r3, #0]
 8109528:	68db      	ldr	r3, [r3, #12]
 810952a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	691b      	ldr	r3, [r3, #16]
 8109532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109534:	68bb      	ldr	r3, [r7, #8]
 8109536:	f003 0302 	and.w	r3, r3, #2
 810953a:	2b00      	cmp	r3, #0
 810953c:	d020      	beq.n	8109580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810953e:	68fb      	ldr	r3, [r7, #12]
 8109540:	f003 0302 	and.w	r3, r3, #2
 8109544:	2b00      	cmp	r3, #0
 8109546:	d01b      	beq.n	8109580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	681b      	ldr	r3, [r3, #0]
 810954c:	f06f 0202 	mvn.w	r2, #2
 8109550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	2201      	movs	r2, #1
 8109556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	699b      	ldr	r3, [r3, #24]
 810955e:	f003 0303 	and.w	r3, r3, #3
 8109562:	2b00      	cmp	r3, #0
 8109564:	d003      	beq.n	810956e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109566:	6878      	ldr	r0, [r7, #4]
 8109568:	f000 f9e2 	bl	8109930 <HAL_TIM_IC_CaptureCallback>
 810956c:	e005      	b.n	810957a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810956e:	6878      	ldr	r0, [r7, #4]
 8109570:	f000 f9d4 	bl	810991c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109574:	6878      	ldr	r0, [r7, #4]
 8109576:	f000 f9e5 	bl	8109944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	2200      	movs	r2, #0
 810957e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8109580:	68bb      	ldr	r3, [r7, #8]
 8109582:	f003 0304 	and.w	r3, r3, #4
 8109586:	2b00      	cmp	r3, #0
 8109588:	d020      	beq.n	81095cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810958a:	68fb      	ldr	r3, [r7, #12]
 810958c:	f003 0304 	and.w	r3, r3, #4
 8109590:	2b00      	cmp	r3, #0
 8109592:	d01b      	beq.n	81095cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	681b      	ldr	r3, [r3, #0]
 8109598:	f06f 0204 	mvn.w	r2, #4
 810959c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810959e:	687b      	ldr	r3, [r7, #4]
 81095a0:	2202      	movs	r2, #2
 81095a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	681b      	ldr	r3, [r3, #0]
 81095a8:	699b      	ldr	r3, [r3, #24]
 81095aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81095ae:	2b00      	cmp	r3, #0
 81095b0:	d003      	beq.n	81095ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81095b2:	6878      	ldr	r0, [r7, #4]
 81095b4:	f000 f9bc 	bl	8109930 <HAL_TIM_IC_CaptureCallback>
 81095b8:	e005      	b.n	81095c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81095ba:	6878      	ldr	r0, [r7, #4]
 81095bc:	f000 f9ae 	bl	810991c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81095c0:	6878      	ldr	r0, [r7, #4]
 81095c2:	f000 f9bf 	bl	8109944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	2200      	movs	r2, #0
 81095ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81095cc:	68bb      	ldr	r3, [r7, #8]
 81095ce:	f003 0308 	and.w	r3, r3, #8
 81095d2:	2b00      	cmp	r3, #0
 81095d4:	d020      	beq.n	8109618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81095d6:	68fb      	ldr	r3, [r7, #12]
 81095d8:	f003 0308 	and.w	r3, r3, #8
 81095dc:	2b00      	cmp	r3, #0
 81095de:	d01b      	beq.n	8109618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	681b      	ldr	r3, [r3, #0]
 81095e4:	f06f 0208 	mvn.w	r2, #8
 81095e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	2204      	movs	r2, #4
 81095ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	681b      	ldr	r3, [r3, #0]
 81095f4:	69db      	ldr	r3, [r3, #28]
 81095f6:	f003 0303 	and.w	r3, r3, #3
 81095fa:	2b00      	cmp	r3, #0
 81095fc:	d003      	beq.n	8109606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81095fe:	6878      	ldr	r0, [r7, #4]
 8109600:	f000 f996 	bl	8109930 <HAL_TIM_IC_CaptureCallback>
 8109604:	e005      	b.n	8109612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109606:	6878      	ldr	r0, [r7, #4]
 8109608:	f000 f988 	bl	810991c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810960c:	6878      	ldr	r0, [r7, #4]
 810960e:	f000 f999 	bl	8109944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	2200      	movs	r2, #0
 8109616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109618:	68bb      	ldr	r3, [r7, #8]
 810961a:	f003 0310 	and.w	r3, r3, #16
 810961e:	2b00      	cmp	r3, #0
 8109620:	d020      	beq.n	8109664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8109622:	68fb      	ldr	r3, [r7, #12]
 8109624:	f003 0310 	and.w	r3, r3, #16
 8109628:	2b00      	cmp	r3, #0
 810962a:	d01b      	beq.n	8109664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	f06f 0210 	mvn.w	r2, #16
 8109634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	2208      	movs	r2, #8
 810963a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	681b      	ldr	r3, [r3, #0]
 8109640:	69db      	ldr	r3, [r3, #28]
 8109642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109646:	2b00      	cmp	r3, #0
 8109648:	d003      	beq.n	8109652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810964a:	6878      	ldr	r0, [r7, #4]
 810964c:	f000 f970 	bl	8109930 <HAL_TIM_IC_CaptureCallback>
 8109650:	e005      	b.n	810965e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109652:	6878      	ldr	r0, [r7, #4]
 8109654:	f000 f962 	bl	810991c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109658:	6878      	ldr	r0, [r7, #4]
 810965a:	f000 f973 	bl	8109944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	2200      	movs	r2, #0
 8109662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8109664:	68bb      	ldr	r3, [r7, #8]
 8109666:	f003 0301 	and.w	r3, r3, #1
 810966a:	2b00      	cmp	r3, #0
 810966c:	d00c      	beq.n	8109688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810966e:	68fb      	ldr	r3, [r7, #12]
 8109670:	f003 0301 	and.w	r3, r3, #1
 8109674:	2b00      	cmp	r3, #0
 8109676:	d007      	beq.n	8109688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	f06f 0201 	mvn.w	r2, #1
 8109680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8109682:	6878      	ldr	r0, [r7, #4]
 8109684:	f7f8 f916 	bl	81018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8109688:	68bb      	ldr	r3, [r7, #8]
 810968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810968e:	2b00      	cmp	r3, #0
 8109690:	d104      	bne.n	810969c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8109692:	68bb      	ldr	r3, [r7, #8]
 8109694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8109698:	2b00      	cmp	r3, #0
 810969a:	d00c      	beq.n	81096b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810969c:	68fb      	ldr	r3, [r7, #12]
 810969e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81096a2:	2b00      	cmp	r3, #0
 81096a4:	d007      	beq.n	81096b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81096a6:	687b      	ldr	r3, [r7, #4]
 81096a8:	681b      	ldr	r3, [r3, #0]
 81096aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 81096ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81096b0:	6878      	ldr	r0, [r7, #4]
 81096b2:	f000 fb2f 	bl	8109d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81096b6:	68bb      	ldr	r3, [r7, #8]
 81096b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81096bc:	2b00      	cmp	r3, #0
 81096be:	d00c      	beq.n	81096da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81096c0:	68fb      	ldr	r3, [r7, #12]
 81096c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d007      	beq.n	81096da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	681b      	ldr	r3, [r3, #0]
 81096ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81096d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81096d4:	6878      	ldr	r0, [r7, #4]
 81096d6:	f000 fb27 	bl	8109d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81096da:	68bb      	ldr	r3, [r7, #8]
 81096dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81096e0:	2b00      	cmp	r3, #0
 81096e2:	d00c      	beq.n	81096fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81096e4:	68fb      	ldr	r3, [r7, #12]
 81096e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81096ea:	2b00      	cmp	r3, #0
 81096ec:	d007      	beq.n	81096fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	681b      	ldr	r3, [r3, #0]
 81096f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81096f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81096f8:	6878      	ldr	r0, [r7, #4]
 81096fa:	f000 f92d 	bl	8109958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81096fe:	68bb      	ldr	r3, [r7, #8]
 8109700:	f003 0320 	and.w	r3, r3, #32
 8109704:	2b00      	cmp	r3, #0
 8109706:	d00c      	beq.n	8109722 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109708:	68fb      	ldr	r3, [r7, #12]
 810970a:	f003 0320 	and.w	r3, r3, #32
 810970e:	2b00      	cmp	r3, #0
 8109710:	d007      	beq.n	8109722 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8109712:	687b      	ldr	r3, [r7, #4]
 8109714:	681b      	ldr	r3, [r3, #0]
 8109716:	f06f 0220 	mvn.w	r2, #32
 810971a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810971c:	6878      	ldr	r0, [r7, #4]
 810971e:	f000 faef 	bl	8109d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8109722:	bf00      	nop
 8109724:	3710      	adds	r7, #16
 8109726:	46bd      	mov	sp, r7
 8109728:	bd80      	pop	{r7, pc}
	...

0810972c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810972c:	b580      	push	{r7, lr}
 810972e:	b084      	sub	sp, #16
 8109730:	af00      	add	r7, sp, #0
 8109732:	6078      	str	r0, [r7, #4]
 8109734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8109736:	2300      	movs	r3, #0
 8109738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8109740:	2b01      	cmp	r3, #1
 8109742:	d101      	bne.n	8109748 <HAL_TIM_ConfigClockSource+0x1c>
 8109744:	2302      	movs	r3, #2
 8109746:	e0de      	b.n	8109906 <HAL_TIM_ConfigClockSource+0x1da>
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	2201      	movs	r2, #1
 810974c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	2202      	movs	r2, #2
 8109754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	681b      	ldr	r3, [r3, #0]
 810975c:	689b      	ldr	r3, [r3, #8]
 810975e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8109760:	68bb      	ldr	r3, [r7, #8]
 8109762:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8109766:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810976a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810976c:	68bb      	ldr	r3, [r7, #8]
 810976e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8109772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	681b      	ldr	r3, [r3, #0]
 8109778:	68ba      	ldr	r2, [r7, #8]
 810977a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810977c:	683b      	ldr	r3, [r7, #0]
 810977e:	681b      	ldr	r3, [r3, #0]
 8109780:	4a63      	ldr	r2, [pc, #396]	@ (8109910 <HAL_TIM_ConfigClockSource+0x1e4>)
 8109782:	4293      	cmp	r3, r2
 8109784:	f000 80a9 	beq.w	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109788:	4a61      	ldr	r2, [pc, #388]	@ (8109910 <HAL_TIM_ConfigClockSource+0x1e4>)
 810978a:	4293      	cmp	r3, r2
 810978c:	f200 80ae 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 8109790:	4a60      	ldr	r2, [pc, #384]	@ (8109914 <HAL_TIM_ConfigClockSource+0x1e8>)
 8109792:	4293      	cmp	r3, r2
 8109794:	f000 80a1 	beq.w	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109798:	4a5e      	ldr	r2, [pc, #376]	@ (8109914 <HAL_TIM_ConfigClockSource+0x1e8>)
 810979a:	4293      	cmp	r3, r2
 810979c:	f200 80a6 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097a0:	4a5d      	ldr	r2, [pc, #372]	@ (8109918 <HAL_TIM_ConfigClockSource+0x1ec>)
 81097a2:	4293      	cmp	r3, r2
 81097a4:	f000 8099 	beq.w	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 81097a8:	4a5b      	ldr	r2, [pc, #364]	@ (8109918 <HAL_TIM_ConfigClockSource+0x1ec>)
 81097aa:	4293      	cmp	r3, r2
 81097ac:	f200 809e 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81097b4:	f000 8091 	beq.w	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 81097b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81097bc:	f200 8096 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81097c4:	f000 8089 	beq.w	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 81097c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81097cc:	f200 808e 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097d4:	d03e      	beq.n	8109854 <HAL_TIM_ConfigClockSource+0x128>
 81097d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097da:	f200 8087 	bhi.w	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81097e2:	f000 8086 	beq.w	81098f2 <HAL_TIM_ConfigClockSource+0x1c6>
 81097e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81097ea:	d87f      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097ec:	2b70      	cmp	r3, #112	@ 0x70
 81097ee:	d01a      	beq.n	8109826 <HAL_TIM_ConfigClockSource+0xfa>
 81097f0:	2b70      	cmp	r3, #112	@ 0x70
 81097f2:	d87b      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097f4:	2b60      	cmp	r3, #96	@ 0x60
 81097f6:	d050      	beq.n	810989a <HAL_TIM_ConfigClockSource+0x16e>
 81097f8:	2b60      	cmp	r3, #96	@ 0x60
 81097fa:	d877      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 81097fc:	2b50      	cmp	r3, #80	@ 0x50
 81097fe:	d03c      	beq.n	810987a <HAL_TIM_ConfigClockSource+0x14e>
 8109800:	2b50      	cmp	r3, #80	@ 0x50
 8109802:	d873      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 8109804:	2b40      	cmp	r3, #64	@ 0x40
 8109806:	d058      	beq.n	81098ba <HAL_TIM_ConfigClockSource+0x18e>
 8109808:	2b40      	cmp	r3, #64	@ 0x40
 810980a:	d86f      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 810980c:	2b30      	cmp	r3, #48	@ 0x30
 810980e:	d064      	beq.n	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109810:	2b30      	cmp	r3, #48	@ 0x30
 8109812:	d86b      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 8109814:	2b20      	cmp	r3, #32
 8109816:	d060      	beq.n	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109818:	2b20      	cmp	r3, #32
 810981a:	d867      	bhi.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
 810981c:	2b00      	cmp	r3, #0
 810981e:	d05c      	beq.n	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109820:	2b10      	cmp	r3, #16
 8109822:	d05a      	beq.n	81098da <HAL_TIM_ConfigClockSource+0x1ae>
 8109824:	e062      	b.n	81098ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109826:	687b      	ldr	r3, [r7, #4]
 8109828:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810982a:	683b      	ldr	r3, [r7, #0]
 810982c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810982e:	683b      	ldr	r3, [r7, #0]
 8109830:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109832:	683b      	ldr	r3, [r7, #0]
 8109834:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109836:	f000 f9b5 	bl	8109ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	681b      	ldr	r3, [r3, #0]
 810983e:	689b      	ldr	r3, [r3, #8]
 8109840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8109842:	68bb      	ldr	r3, [r7, #8]
 8109844:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8109848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	681b      	ldr	r3, [r3, #0]
 810984e:	68ba      	ldr	r2, [r7, #8]
 8109850:	609a      	str	r2, [r3, #8]
      break;
 8109852:	e04f      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8109858:	683b      	ldr	r3, [r7, #0]
 810985a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810985c:	683b      	ldr	r3, [r7, #0]
 810985e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109860:	683b      	ldr	r3, [r7, #0]
 8109862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109864:	f000 f99e 	bl	8109ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	681b      	ldr	r3, [r3, #0]
 810986c:	689a      	ldr	r2, [r3, #8]
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	681b      	ldr	r3, [r3, #0]
 8109872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109876:	609a      	str	r2, [r3, #8]
      break;
 8109878:	e03c      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810987e:	683b      	ldr	r3, [r7, #0]
 8109880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109882:	683b      	ldr	r3, [r7, #0]
 8109884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8109886:	461a      	mov	r2, r3
 8109888:	f000 f910 	bl	8109aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	681b      	ldr	r3, [r3, #0]
 8109890:	2150      	movs	r1, #80	@ 0x50
 8109892:	4618      	mov	r0, r3
 8109894:	f000 f969 	bl	8109b6a <TIM_ITRx_SetConfig>
      break;
 8109898:	e02c      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810989a:	687b      	ldr	r3, [r7, #4]
 810989c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810989e:	683b      	ldr	r3, [r7, #0]
 81098a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81098a2:	683b      	ldr	r3, [r7, #0]
 81098a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81098a6:	461a      	mov	r2, r3
 81098a8:	f000 f92f 	bl	8109b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	681b      	ldr	r3, [r3, #0]
 81098b0:	2160      	movs	r1, #96	@ 0x60
 81098b2:	4618      	mov	r0, r3
 81098b4:	f000 f959 	bl	8109b6a <TIM_ITRx_SetConfig>
      break;
 81098b8:	e01c      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81098ba:	687b      	ldr	r3, [r7, #4]
 81098bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81098be:	683b      	ldr	r3, [r7, #0]
 81098c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81098c2:	683b      	ldr	r3, [r7, #0]
 81098c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81098c6:	461a      	mov	r2, r3
 81098c8:	f000 f8f0 	bl	8109aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	681b      	ldr	r3, [r3, #0]
 81098d0:	2140      	movs	r1, #64	@ 0x40
 81098d2:	4618      	mov	r0, r3
 81098d4:	f000 f949 	bl	8109b6a <TIM_ITRx_SetConfig>
      break;
 81098d8:	e00c      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81098da:	687b      	ldr	r3, [r7, #4]
 81098dc:	681a      	ldr	r2, [r3, #0]
 81098de:	683b      	ldr	r3, [r7, #0]
 81098e0:	681b      	ldr	r3, [r3, #0]
 81098e2:	4619      	mov	r1, r3
 81098e4:	4610      	mov	r0, r2
 81098e6:	f000 f940 	bl	8109b6a <TIM_ITRx_SetConfig>
      break;
 81098ea:	e003      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81098ec:	2301      	movs	r3, #1
 81098ee:	73fb      	strb	r3, [r7, #15]
      break;
 81098f0:	e000      	b.n	81098f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81098f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	2201      	movs	r2, #1
 81098f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	2200      	movs	r2, #0
 8109900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109904:	7bfb      	ldrb	r3, [r7, #15]
}
 8109906:	4618      	mov	r0, r3
 8109908:	3710      	adds	r7, #16
 810990a:	46bd      	mov	sp, r7
 810990c:	bd80      	pop	{r7, pc}
 810990e:	bf00      	nop
 8109910:	00100040 	.word	0x00100040
 8109914:	00100030 	.word	0x00100030
 8109918:	00100020 	.word	0x00100020

0810991c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810991c:	b480      	push	{r7}
 810991e:	b083      	sub	sp, #12
 8109920:	af00      	add	r7, sp, #0
 8109922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109924:	bf00      	nop
 8109926:	370c      	adds	r7, #12
 8109928:	46bd      	mov	sp, r7
 810992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810992e:	4770      	bx	lr

08109930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109930:	b480      	push	{r7}
 8109932:	b083      	sub	sp, #12
 8109934:	af00      	add	r7, sp, #0
 8109936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109938:	bf00      	nop
 810993a:	370c      	adds	r7, #12
 810993c:	46bd      	mov	sp, r7
 810993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109942:	4770      	bx	lr

08109944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109944:	b480      	push	{r7}
 8109946:	b083      	sub	sp, #12
 8109948:	af00      	add	r7, sp, #0
 810994a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810994c:	bf00      	nop
 810994e:	370c      	adds	r7, #12
 8109950:	46bd      	mov	sp, r7
 8109952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109956:	4770      	bx	lr

08109958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109958:	b480      	push	{r7}
 810995a:	b083      	sub	sp, #12
 810995c:	af00      	add	r7, sp, #0
 810995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109960:	bf00      	nop
 8109962:	370c      	adds	r7, #12
 8109964:	46bd      	mov	sp, r7
 8109966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810996a:	4770      	bx	lr

0810996c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810996c:	b480      	push	{r7}
 810996e:	b085      	sub	sp, #20
 8109970:	af00      	add	r7, sp, #0
 8109972:	6078      	str	r0, [r7, #4]
 8109974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	681b      	ldr	r3, [r3, #0]
 810997a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810997c:	687b      	ldr	r3, [r7, #4]
 810997e:	4a43      	ldr	r2, [pc, #268]	@ (8109a8c <TIM_Base_SetConfig+0x120>)
 8109980:	4293      	cmp	r3, r2
 8109982:	d013      	beq.n	81099ac <TIM_Base_SetConfig+0x40>
 8109984:	687b      	ldr	r3, [r7, #4]
 8109986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810998a:	d00f      	beq.n	81099ac <TIM_Base_SetConfig+0x40>
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	4a40      	ldr	r2, [pc, #256]	@ (8109a90 <TIM_Base_SetConfig+0x124>)
 8109990:	4293      	cmp	r3, r2
 8109992:	d00b      	beq.n	81099ac <TIM_Base_SetConfig+0x40>
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	4a3f      	ldr	r2, [pc, #252]	@ (8109a94 <TIM_Base_SetConfig+0x128>)
 8109998:	4293      	cmp	r3, r2
 810999a:	d007      	beq.n	81099ac <TIM_Base_SetConfig+0x40>
 810999c:	687b      	ldr	r3, [r7, #4]
 810999e:	4a3e      	ldr	r2, [pc, #248]	@ (8109a98 <TIM_Base_SetConfig+0x12c>)
 81099a0:	4293      	cmp	r3, r2
 81099a2:	d003      	beq.n	81099ac <TIM_Base_SetConfig+0x40>
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	4a3d      	ldr	r2, [pc, #244]	@ (8109a9c <TIM_Base_SetConfig+0x130>)
 81099a8:	4293      	cmp	r3, r2
 81099aa:	d108      	bne.n	81099be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81099ac:	68fb      	ldr	r3, [r7, #12]
 81099ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81099b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81099b4:	683b      	ldr	r3, [r7, #0]
 81099b6:	685b      	ldr	r3, [r3, #4]
 81099b8:	68fa      	ldr	r2, [r7, #12]
 81099ba:	4313      	orrs	r3, r2
 81099bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81099be:	687b      	ldr	r3, [r7, #4]
 81099c0:	4a32      	ldr	r2, [pc, #200]	@ (8109a8c <TIM_Base_SetConfig+0x120>)
 81099c2:	4293      	cmp	r3, r2
 81099c4:	d01f      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81099cc:	d01b      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	4a2f      	ldr	r2, [pc, #188]	@ (8109a90 <TIM_Base_SetConfig+0x124>)
 81099d2:	4293      	cmp	r3, r2
 81099d4:	d017      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	4a2e      	ldr	r2, [pc, #184]	@ (8109a94 <TIM_Base_SetConfig+0x128>)
 81099da:	4293      	cmp	r3, r2
 81099dc:	d013      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	4a2d      	ldr	r2, [pc, #180]	@ (8109a98 <TIM_Base_SetConfig+0x12c>)
 81099e2:	4293      	cmp	r3, r2
 81099e4:	d00f      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099e6:	687b      	ldr	r3, [r7, #4]
 81099e8:	4a2c      	ldr	r2, [pc, #176]	@ (8109a9c <TIM_Base_SetConfig+0x130>)
 81099ea:	4293      	cmp	r3, r2
 81099ec:	d00b      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099ee:	687b      	ldr	r3, [r7, #4]
 81099f0:	4a2b      	ldr	r2, [pc, #172]	@ (8109aa0 <TIM_Base_SetConfig+0x134>)
 81099f2:	4293      	cmp	r3, r2
 81099f4:	d007      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	4a2a      	ldr	r2, [pc, #168]	@ (8109aa4 <TIM_Base_SetConfig+0x138>)
 81099fa:	4293      	cmp	r3, r2
 81099fc:	d003      	beq.n	8109a06 <TIM_Base_SetConfig+0x9a>
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	4a29      	ldr	r2, [pc, #164]	@ (8109aa8 <TIM_Base_SetConfig+0x13c>)
 8109a02:	4293      	cmp	r3, r2
 8109a04:	d108      	bne.n	8109a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109a06:	68fb      	ldr	r3, [r7, #12]
 8109a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109a0e:	683b      	ldr	r3, [r7, #0]
 8109a10:	68db      	ldr	r3, [r3, #12]
 8109a12:	68fa      	ldr	r2, [r7, #12]
 8109a14:	4313      	orrs	r3, r2
 8109a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109a18:	68fb      	ldr	r3, [r7, #12]
 8109a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109a1e:	683b      	ldr	r3, [r7, #0]
 8109a20:	695b      	ldr	r3, [r3, #20]
 8109a22:	4313      	orrs	r3, r2
 8109a24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109a26:	683b      	ldr	r3, [r7, #0]
 8109a28:	689a      	ldr	r2, [r3, #8]
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109a2e:	683b      	ldr	r3, [r7, #0]
 8109a30:	681a      	ldr	r2, [r3, #0]
 8109a32:	687b      	ldr	r3, [r7, #4]
 8109a34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109a36:	687b      	ldr	r3, [r7, #4]
 8109a38:	4a14      	ldr	r2, [pc, #80]	@ (8109a8c <TIM_Base_SetConfig+0x120>)
 8109a3a:	4293      	cmp	r3, r2
 8109a3c:	d00f      	beq.n	8109a5e <TIM_Base_SetConfig+0xf2>
 8109a3e:	687b      	ldr	r3, [r7, #4]
 8109a40:	4a16      	ldr	r2, [pc, #88]	@ (8109a9c <TIM_Base_SetConfig+0x130>)
 8109a42:	4293      	cmp	r3, r2
 8109a44:	d00b      	beq.n	8109a5e <TIM_Base_SetConfig+0xf2>
 8109a46:	687b      	ldr	r3, [r7, #4]
 8109a48:	4a15      	ldr	r2, [pc, #84]	@ (8109aa0 <TIM_Base_SetConfig+0x134>)
 8109a4a:	4293      	cmp	r3, r2
 8109a4c:	d007      	beq.n	8109a5e <TIM_Base_SetConfig+0xf2>
 8109a4e:	687b      	ldr	r3, [r7, #4]
 8109a50:	4a14      	ldr	r2, [pc, #80]	@ (8109aa4 <TIM_Base_SetConfig+0x138>)
 8109a52:	4293      	cmp	r3, r2
 8109a54:	d003      	beq.n	8109a5e <TIM_Base_SetConfig+0xf2>
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	4a13      	ldr	r2, [pc, #76]	@ (8109aa8 <TIM_Base_SetConfig+0x13c>)
 8109a5a:	4293      	cmp	r3, r2
 8109a5c:	d103      	bne.n	8109a66 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109a5e:	683b      	ldr	r3, [r7, #0]
 8109a60:	691a      	ldr	r2, [r3, #16]
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8109a66:	687b      	ldr	r3, [r7, #4]
 8109a68:	681b      	ldr	r3, [r3, #0]
 8109a6a:	f043 0204 	orr.w	r2, r3, #4
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109a72:	687b      	ldr	r3, [r7, #4]
 8109a74:	2201      	movs	r2, #1
 8109a76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	68fa      	ldr	r2, [r7, #12]
 8109a7c:	601a      	str	r2, [r3, #0]
}
 8109a7e:	bf00      	nop
 8109a80:	3714      	adds	r7, #20
 8109a82:	46bd      	mov	sp, r7
 8109a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a88:	4770      	bx	lr
 8109a8a:	bf00      	nop
 8109a8c:	40010000 	.word	0x40010000
 8109a90:	40000400 	.word	0x40000400
 8109a94:	40000800 	.word	0x40000800
 8109a98:	40000c00 	.word	0x40000c00
 8109a9c:	40010400 	.word	0x40010400
 8109aa0:	40014000 	.word	0x40014000
 8109aa4:	40014400 	.word	0x40014400
 8109aa8:	40014800 	.word	0x40014800

08109aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109aac:	b480      	push	{r7}
 8109aae:	b087      	sub	sp, #28
 8109ab0:	af00      	add	r7, sp, #0
 8109ab2:	60f8      	str	r0, [r7, #12]
 8109ab4:	60b9      	str	r1, [r7, #8]
 8109ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8109ab8:	68fb      	ldr	r3, [r7, #12]
 8109aba:	6a1b      	ldr	r3, [r3, #32]
 8109abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109abe:	68fb      	ldr	r3, [r7, #12]
 8109ac0:	6a1b      	ldr	r3, [r3, #32]
 8109ac2:	f023 0201 	bic.w	r2, r3, #1
 8109ac6:	68fb      	ldr	r3, [r7, #12]
 8109ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109aca:	68fb      	ldr	r3, [r7, #12]
 8109acc:	699b      	ldr	r3, [r3, #24]
 8109ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8109ad0:	693b      	ldr	r3, [r7, #16]
 8109ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8109ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	011b      	lsls	r3, r3, #4
 8109adc:	693a      	ldr	r2, [r7, #16]
 8109ade:	4313      	orrs	r3, r2
 8109ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8109ae2:	697b      	ldr	r3, [r7, #20]
 8109ae4:	f023 030a 	bic.w	r3, r3, #10
 8109ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8109aea:	697a      	ldr	r2, [r7, #20]
 8109aec:	68bb      	ldr	r3, [r7, #8]
 8109aee:	4313      	orrs	r3, r2
 8109af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8109af2:	68fb      	ldr	r3, [r7, #12]
 8109af4:	693a      	ldr	r2, [r7, #16]
 8109af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109af8:	68fb      	ldr	r3, [r7, #12]
 8109afa:	697a      	ldr	r2, [r7, #20]
 8109afc:	621a      	str	r2, [r3, #32]
}
 8109afe:	bf00      	nop
 8109b00:	371c      	adds	r7, #28
 8109b02:	46bd      	mov	sp, r7
 8109b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b08:	4770      	bx	lr

08109b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109b0a:	b480      	push	{r7}
 8109b0c:	b087      	sub	sp, #28
 8109b0e:	af00      	add	r7, sp, #0
 8109b10:	60f8      	str	r0, [r7, #12]
 8109b12:	60b9      	str	r1, [r7, #8]
 8109b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8109b16:	68fb      	ldr	r3, [r7, #12]
 8109b18:	6a1b      	ldr	r3, [r3, #32]
 8109b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109b1c:	68fb      	ldr	r3, [r7, #12]
 8109b1e:	6a1b      	ldr	r3, [r3, #32]
 8109b20:	f023 0210 	bic.w	r2, r3, #16
 8109b24:	68fb      	ldr	r3, [r7, #12]
 8109b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109b28:	68fb      	ldr	r3, [r7, #12]
 8109b2a:	699b      	ldr	r3, [r3, #24]
 8109b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8109b2e:	693b      	ldr	r3, [r7, #16]
 8109b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8109b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8109b36:	687b      	ldr	r3, [r7, #4]
 8109b38:	031b      	lsls	r3, r3, #12
 8109b3a:	693a      	ldr	r2, [r7, #16]
 8109b3c:	4313      	orrs	r3, r2
 8109b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8109b40:	697b      	ldr	r3, [r7, #20]
 8109b42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8109b46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8109b48:	68bb      	ldr	r3, [r7, #8]
 8109b4a:	011b      	lsls	r3, r3, #4
 8109b4c:	697a      	ldr	r2, [r7, #20]
 8109b4e:	4313      	orrs	r3, r2
 8109b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8109b52:	68fb      	ldr	r3, [r7, #12]
 8109b54:	693a      	ldr	r2, [r7, #16]
 8109b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109b58:	68fb      	ldr	r3, [r7, #12]
 8109b5a:	697a      	ldr	r2, [r7, #20]
 8109b5c:	621a      	str	r2, [r3, #32]
}
 8109b5e:	bf00      	nop
 8109b60:	371c      	adds	r7, #28
 8109b62:	46bd      	mov	sp, r7
 8109b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b68:	4770      	bx	lr

08109b6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8109b6a:	b480      	push	{r7}
 8109b6c:	b085      	sub	sp, #20
 8109b6e:	af00      	add	r7, sp, #0
 8109b70:	6078      	str	r0, [r7, #4]
 8109b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8109b74:	687b      	ldr	r3, [r7, #4]
 8109b76:	689b      	ldr	r3, [r3, #8]
 8109b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8109b7a:	68fb      	ldr	r3, [r7, #12]
 8109b7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8109b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8109b86:	683a      	ldr	r2, [r7, #0]
 8109b88:	68fb      	ldr	r3, [r7, #12]
 8109b8a:	4313      	orrs	r3, r2
 8109b8c:	f043 0307 	orr.w	r3, r3, #7
 8109b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8109b92:	687b      	ldr	r3, [r7, #4]
 8109b94:	68fa      	ldr	r2, [r7, #12]
 8109b96:	609a      	str	r2, [r3, #8]
}
 8109b98:	bf00      	nop
 8109b9a:	3714      	adds	r7, #20
 8109b9c:	46bd      	mov	sp, r7
 8109b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ba2:	4770      	bx	lr

08109ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8109ba4:	b480      	push	{r7}
 8109ba6:	b087      	sub	sp, #28
 8109ba8:	af00      	add	r7, sp, #0
 8109baa:	60f8      	str	r0, [r7, #12]
 8109bac:	60b9      	str	r1, [r7, #8]
 8109bae:	607a      	str	r2, [r7, #4]
 8109bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8109bb2:	68fb      	ldr	r3, [r7, #12]
 8109bb4:	689b      	ldr	r3, [r3, #8]
 8109bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8109bb8:	697b      	ldr	r3, [r7, #20]
 8109bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8109bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8109bc0:	683b      	ldr	r3, [r7, #0]
 8109bc2:	021a      	lsls	r2, r3, #8
 8109bc4:	687b      	ldr	r3, [r7, #4]
 8109bc6:	431a      	orrs	r2, r3
 8109bc8:	68bb      	ldr	r3, [r7, #8]
 8109bca:	4313      	orrs	r3, r2
 8109bcc:	697a      	ldr	r2, [r7, #20]
 8109bce:	4313      	orrs	r3, r2
 8109bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8109bd2:	68fb      	ldr	r3, [r7, #12]
 8109bd4:	697a      	ldr	r2, [r7, #20]
 8109bd6:	609a      	str	r2, [r3, #8]
}
 8109bd8:	bf00      	nop
 8109bda:	371c      	adds	r7, #28
 8109bdc:	46bd      	mov	sp, r7
 8109bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109be2:	4770      	bx	lr

08109be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8109be4:	b480      	push	{r7}
 8109be6:	b085      	sub	sp, #20
 8109be8:	af00      	add	r7, sp, #0
 8109bea:	6078      	str	r0, [r7, #4]
 8109bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8109bf4:	2b01      	cmp	r3, #1
 8109bf6:	d101      	bne.n	8109bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109bf8:	2302      	movs	r3, #2
 8109bfa:	e06d      	b.n	8109cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	2201      	movs	r2, #1
 8109c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109c04:	687b      	ldr	r3, [r7, #4]
 8109c06:	2202      	movs	r2, #2
 8109c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	685b      	ldr	r3, [r3, #4]
 8109c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	689b      	ldr	r3, [r3, #8]
 8109c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	4a30      	ldr	r2, [pc, #192]	@ (8109ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109c22:	4293      	cmp	r3, r2
 8109c24:	d004      	beq.n	8109c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8109c26:	687b      	ldr	r3, [r7, #4]
 8109c28:	681b      	ldr	r3, [r3, #0]
 8109c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8109ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109c2c:	4293      	cmp	r3, r2
 8109c2e:	d108      	bne.n	8109c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109c30:	68fb      	ldr	r3, [r7, #12]
 8109c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8109c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8109c38:	683b      	ldr	r3, [r7, #0]
 8109c3a:	685b      	ldr	r3, [r3, #4]
 8109c3c:	68fa      	ldr	r2, [r7, #12]
 8109c3e:	4313      	orrs	r3, r2
 8109c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8109c42:	68fb      	ldr	r3, [r7, #12]
 8109c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8109c4a:	683b      	ldr	r3, [r7, #0]
 8109c4c:	681b      	ldr	r3, [r3, #0]
 8109c4e:	68fa      	ldr	r2, [r7, #12]
 8109c50:	4313      	orrs	r3, r2
 8109c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8109c54:	687b      	ldr	r3, [r7, #4]
 8109c56:	681b      	ldr	r3, [r3, #0]
 8109c58:	68fa      	ldr	r2, [r7, #12]
 8109c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109c5c:	687b      	ldr	r3, [r7, #4]
 8109c5e:	681b      	ldr	r3, [r3, #0]
 8109c60:	4a20      	ldr	r2, [pc, #128]	@ (8109ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109c62:	4293      	cmp	r3, r2
 8109c64:	d022      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c66:	687b      	ldr	r3, [r7, #4]
 8109c68:	681b      	ldr	r3, [r3, #0]
 8109c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109c6e:	d01d      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c70:	687b      	ldr	r3, [r7, #4]
 8109c72:	681b      	ldr	r3, [r3, #0]
 8109c74:	4a1d      	ldr	r2, [pc, #116]	@ (8109cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8109c76:	4293      	cmp	r3, r2
 8109c78:	d018      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	681b      	ldr	r3, [r3, #0]
 8109c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8109cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8109c80:	4293      	cmp	r3, r2
 8109c82:	d013      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	4a1a      	ldr	r2, [pc, #104]	@ (8109cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8109c8a:	4293      	cmp	r3, r2
 8109c8c:	d00e      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	681b      	ldr	r3, [r3, #0]
 8109c92:	4a15      	ldr	r2, [pc, #84]	@ (8109ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109c94:	4293      	cmp	r3, r2
 8109c96:	d009      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109c98:	687b      	ldr	r3, [r7, #4]
 8109c9a:	681b      	ldr	r3, [r3, #0]
 8109c9c:	4a16      	ldr	r2, [pc, #88]	@ (8109cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8109c9e:	4293      	cmp	r3, r2
 8109ca0:	d004      	beq.n	8109cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109ca2:	687b      	ldr	r3, [r7, #4]
 8109ca4:	681b      	ldr	r3, [r3, #0]
 8109ca6:	4a15      	ldr	r2, [pc, #84]	@ (8109cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109ca8:	4293      	cmp	r3, r2
 8109caa:	d10c      	bne.n	8109cc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109cac:	68bb      	ldr	r3, [r7, #8]
 8109cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109cb4:	683b      	ldr	r3, [r7, #0]
 8109cb6:	689b      	ldr	r3, [r3, #8]
 8109cb8:	68ba      	ldr	r2, [r7, #8]
 8109cba:	4313      	orrs	r3, r2
 8109cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109cbe:	687b      	ldr	r3, [r7, #4]
 8109cc0:	681b      	ldr	r3, [r3, #0]
 8109cc2:	68ba      	ldr	r2, [r7, #8]
 8109cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	2201      	movs	r2, #1
 8109cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8109cce:	687b      	ldr	r3, [r7, #4]
 8109cd0:	2200      	movs	r2, #0
 8109cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8109cd6:	2300      	movs	r3, #0
}
 8109cd8:	4618      	mov	r0, r3
 8109cda:	3714      	adds	r7, #20
 8109cdc:	46bd      	mov	sp, r7
 8109cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ce2:	4770      	bx	lr
 8109ce4:	40010000 	.word	0x40010000
 8109ce8:	40010400 	.word	0x40010400
 8109cec:	40000400 	.word	0x40000400
 8109cf0:	40000800 	.word	0x40000800
 8109cf4:	40000c00 	.word	0x40000c00
 8109cf8:	40001800 	.word	0x40001800
 8109cfc:	40014000 	.word	0x40014000

08109d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109d00:	b480      	push	{r7}
 8109d02:	b083      	sub	sp, #12
 8109d04:	af00      	add	r7, sp, #0
 8109d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109d08:	bf00      	nop
 8109d0a:	370c      	adds	r7, #12
 8109d0c:	46bd      	mov	sp, r7
 8109d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d12:	4770      	bx	lr

08109d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109d14:	b480      	push	{r7}
 8109d16:	b083      	sub	sp, #12
 8109d18:	af00      	add	r7, sp, #0
 8109d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109d1c:	bf00      	nop
 8109d1e:	370c      	adds	r7, #12
 8109d20:	46bd      	mov	sp, r7
 8109d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d26:	4770      	bx	lr

08109d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109d28:	b480      	push	{r7}
 8109d2a:	b083      	sub	sp, #12
 8109d2c:	af00      	add	r7, sp, #0
 8109d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109d30:	bf00      	nop
 8109d32:	370c      	adds	r7, #12
 8109d34:	46bd      	mov	sp, r7
 8109d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d3a:	4770      	bx	lr

08109d3c <memset>:
 8109d3c:	4402      	add	r2, r0
 8109d3e:	4603      	mov	r3, r0
 8109d40:	4293      	cmp	r3, r2
 8109d42:	d100      	bne.n	8109d46 <memset+0xa>
 8109d44:	4770      	bx	lr
 8109d46:	f803 1b01 	strb.w	r1, [r3], #1
 8109d4a:	e7f9      	b.n	8109d40 <memset+0x4>

08109d4c <__libc_init_array>:
 8109d4c:	b570      	push	{r4, r5, r6, lr}
 8109d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8109d84 <__libc_init_array+0x38>)
 8109d50:	4c0d      	ldr	r4, [pc, #52]	@ (8109d88 <__libc_init_array+0x3c>)
 8109d52:	1b64      	subs	r4, r4, r5
 8109d54:	10a4      	asrs	r4, r4, #2
 8109d56:	2600      	movs	r6, #0
 8109d58:	42a6      	cmp	r6, r4
 8109d5a:	d109      	bne.n	8109d70 <__libc_init_array+0x24>
 8109d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8109d8c <__libc_init_array+0x40>)
 8109d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8109d90 <__libc_init_array+0x44>)
 8109d60:	f000 f818 	bl	8109d94 <_init>
 8109d64:	1b64      	subs	r4, r4, r5
 8109d66:	10a4      	asrs	r4, r4, #2
 8109d68:	2600      	movs	r6, #0
 8109d6a:	42a6      	cmp	r6, r4
 8109d6c:	d105      	bne.n	8109d7a <__libc_init_array+0x2e>
 8109d6e:	bd70      	pop	{r4, r5, r6, pc}
 8109d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8109d74:	4798      	blx	r3
 8109d76:	3601      	adds	r6, #1
 8109d78:	e7ee      	b.n	8109d58 <__libc_init_array+0xc>
 8109d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8109d7e:	4798      	blx	r3
 8109d80:	3601      	adds	r6, #1
 8109d82:	e7f2      	b.n	8109d6a <__libc_init_array+0x1e>
 8109d84:	08109dc4 	.word	0x08109dc4
 8109d88:	08109dc4 	.word	0x08109dc4
 8109d8c:	08109dc4 	.word	0x08109dc4
 8109d90:	08109dc8 	.word	0x08109dc8

08109d94 <_init>:
 8109d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109d96:	bf00      	nop
 8109d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109d9a:	bc08      	pop	{r3}
 8109d9c:	469e      	mov	lr, r3
 8109d9e:	4770      	bx	lr

08109da0 <_fini>:
 8109da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109da2:	bf00      	nop
 8109da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109da6:	bc08      	pop	{r3}
 8109da8:	469e      	mov	lr, r3
 8109daa:	4770      	bx	lr
